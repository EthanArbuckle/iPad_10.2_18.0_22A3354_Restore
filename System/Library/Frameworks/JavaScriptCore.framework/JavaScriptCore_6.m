double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  char v38;
  uint64_t v39;
  unsigned __int8 *v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  int64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  JSC::AssemblerBuffer *v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  __int16 *v98;
  int v99;
  uint64_t v100;
  void *__dst;
  int v102;
  unsigned int v103;
  __int16 v104;
  unint64_t v105;
  unsigned int *v106;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_125;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 168);
  v17 = &v104;
  __dst = &v104;
  v102 = 1;
  if (v16 != 1)
  {
    v104 = v16 | 0x100;
    v103 = 1;
    v18 = -1862270976;
    v19 = 1;
    while (1)
    {
      v20 = 0;
      v21 = 0;
      v22 = (char *)__dst;
      v23 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
          goto LABEL_125;
        v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
        v20 += 2;
      }
      while (2 * v19 != v20);
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)__dst + v24) & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_125;
        v21 &= ~(1 << v25);
        v24 += 2;
      }
      while (2 * v19 != v24);
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.i32[0] + v27)
        break;
      v99 = v18;
      v98 = v17;
      v37 = *(_BYTE *)__dst;
      v38 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v38, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v103 - 2);
      v39 = v103 - 1;
      v34 = v103 == 1;
      v103 = v39;
      v40 = (unsigned __int8 *)__dst;
      v41 = (char *)__dst + 2 * v39;
      if (v34)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        a2 = (char *)__dst + 2 * v39;
      }
      else
      {
        v46 = 2 * v39;
        v47 = __dst;
        while (*v47 != v38)
        {
          v47 += 2;
          v46 -= 2;
          if (!v46)
            goto LABEL_51;
        }
        *v47 = v37;
LABEL_51:
        v44 = 0;
        v48 = v40;
        a2 = v41;
        v49 = v41;
        do
        {
          if (*v40 == v40[1])
          {
            v50 = v40;
            if (v49 != (char *)__dst + 2 * v103)
            {
              if (v40 == (unsigned __int8 *)a2)
              {
                v50 = (unsigned __int8 *)v49;
              }
              else
              {
                v51 = v48 - (unsigned __int8 *)a2;
                memmove(v49, a2, v48 - (unsigned __int8 *)a2);
                v50 = (unsigned __int8 *)&v49[v51];
              }
            }
            a2 = (char *)(v40 + 2);
            ++v44;
            v49 = (char *)v50;
          }
          v40 += 2;
          v48 += 2;
        }
        while (v40 < (unsigned __int8 *)v41);
        v40 = (unsigned __int8 *)__dst;
        v42 = v103;
        v43 = v103;
        v41 = v49;
      }
      v45 = (char *)&v40[2 * v42];
      if (a2 != v45)
      {
        memmove(v41, a2, v45 - a2);
        v43 = v103;
      }
      v19 = v43 - v44;
      v17 = v98;
      v18 = v99;
LABEL_40:
      v103 = v19;
LABEL_41:
      if (!v19)
      {
        v52 = __dst;
        if (v17 != __dst && __dst)
        {
          __dst = 0;
          v102 = 0;
          WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v29 = 0;
    if (v19 <= 1)
      v30 = 1;
    else
      v30 = v19;
    v31 = 2 * v30;
    while (1)
    {
      v32 = *((unsigned __int8 *)__dst + v29 + 1);
      if ((v32 & 0x7Fu) >= 0x40)
        goto LABEL_125;
      if (((v21 >> (v32 & 0x7F)) & 1) != 0)
        break;
      v29 += 2;
      if (v31 == v29)
        goto LABEL_41;
    }
    v33 = *((unsigned __int8 *)__dst + v29);
    if (v33 == v32)
    {
LABEL_39:
      memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
      v19 = v103 - 1;
      goto LABEL_40;
    }
    v33 = (char)v33;
    if ((char)v33 == 63)
    {
      if ((char)v32 != 31)
      {
        v35 = v32 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v34 = v32 == 31 || v33 == 31;
      if (!v34)
      {
        v35 = v32 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v36 = *(_DWORD *)(v8 + 200);
        if (v36 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v36 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v35;
        *(_DWORD *)(v8 + 200) += 4;
        v22 = (char *)__dst;
        v23 = v103;
        goto LABEL_39;
      }
    }
    v35 = (char)v32 | (32 * v33) | v18;
    goto LABEL_36;
  }
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v15, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v53, v54, v55, v56, v57, v58, (int *)&v100);
  v66 = 0;
  LOBYTE(v67) = 0;
  *(_QWORD *)(a1 + 92) = v100;
  if (!*(_BYTE *)(a1 + 101))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v60, v61, v62, v63, v64, v65);
      v66 = 0;
      LOBYTE(v67) = 0;
      goto LABEL_88;
    }
    v68 = *(_BYTE *)(a1 + 102);
    __dst = (void *)2;
    v106 = 0;
    v69 = *(_QWORD *)(v8 + 3960);
    v70 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
    if ((v70 & 1) != 0)
    {
      v93 = *(_QWORD *)(v70 & 0xFFFFFFFF8);
      if ((v70 & 2) != 0
        || ((v94 = *(unsigned int *)((v70 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
          ? (v95 = (_DWORD)v94 == -1)
          : (v95 = 1),
            v95))
      {
        v96 = 2;
      }
      else if (v94 >> 28)
      {
        v97 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v97 = v93;
        *(_DWORD *)(v97 + 8) = v94;
        v96 = 1;
        v93 = v97;
      }
      else
      {
        v96 = *(_QWORD *)(v70 & 0xFFFFFFFF8);
        v93 = v94 << 36;
      }
      v70 = v93 | v96;
    }
    v105 = v70;
    v71 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v69, &v105, (uint64_t *)&__dst, &v106, v62, v63, v64, v65);
    if ((v105 & 1) != 0 && (v105 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v105 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
    if ((v71 & 1) != 0)
    {
      v72 = *(unsigned int *)(a1 + 116);
      if ((_DWORD)v72)
      {
        v73 = 0;
        v74 = 16 * v72;
        v75 = (char *)(*(_QWORD *)(a1 + 104) + 2);
        while (1)
        {
          v77 = *v75;
          v75 += 16;
          v76 = v77;
          if ((v77 & 0x40) != 0)
            break;
          v73 |= 1 << v76;
          v74 -= 16;
          if (!v74)
            goto LABEL_75;
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(0xC471u);
        return;
      }
      v73 = 0;
LABEL_75:
      if ((v68 & 0x40) != 0)
        goto LABEL_125;
      v66 = 1;
      v78 = v73 | (1 << v68);
      LOBYTE(v67) = 1;
      if ((v78 & 2) != 0)
      {
        v79 = (unsigned __int16)~(_WORD)v78 & 0xFFFE;
        if (v79)
        {
          v67 = __clz(__rbit64(v79));
          if (v67 == 1)
          {
            v66 = 1;
          }
          else
          {
            if (v67 == 31)
            {
              v82 = (unsigned int *)(v8 + 200);
              v81 = *(_DWORD *)(v8 + 200);
              v83 = (JSC::AssemblerBuffer *)(v8 + 56);
              v84 = v81 + 4;
              v85 = *(_DWORD *)(v8 + 192);
              v80 = -1862270913;
            }
            else
            {
              v80 = v67 | 0xAA0103E0;
              v82 = (unsigned int *)(v8 + 200);
              v81 = *(_DWORD *)(v8 + 200);
              v83 = (JSC::AssemblerBuffer *)(v8 + 56);
              v84 = v81 + 4;
              v85 = *(_DWORD *)(v8 + 192);
            }
            if (v84 > v85)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v83, (uint64_t)v59, v60, v61, v62, v63, v64, v65);
              v81 = *v82;
            }
            *(_DWORD *)(*(_QWORD *)v83 + v81) = v80;
            *v82 += 4;
            v66 = 1;
          }
        }
        else
        {
          v66 = 1;
          LOBYTE(v67) = -1;
        }
      }
    }
    else
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v60, v61, v62, v63, v64, v65);
      LOBYTE(v67) = 0;
      v66 = 0;
    }
    if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
      WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
  }
LABEL_88:
  v86 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v86 == 31)
    {
      v87 = -1862270945;
    }
    else if (v86 == 255)
    {
      v87 = -1442774017;
    }
    else
    {
      v87 = v86 | 0xAA0003E0;
    }
    v89 = (unsigned int *)(v8 + 200);
    v88 = *(_DWORD *)(v8 + 200);
    if (v88 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v59, v60, v61, v62, v63, v64, v65);
      v88 = *v89;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v88) = v87;
    *v89 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v90 = *(_DWORD *)(a1 + 116);
    if (v90)
    {
      v91 = v90 - 1;
      v92 = 16 * (v90 - 1);
      while (*(_DWORD *)(a1 + 116) > v91)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v92, v60, v61, v62, v63, v64, v65);
        v92 -= 16;
        if (--v91 == -1)
          goto LABEL_101;
      }
      goto LABEL_126;
    }
LABEL_101:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v66)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v67, v60, v61, v62, v63, v64, v65);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v60, v61, v62, v63, v64, v65);
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyAfterFloatingPointCompare<64>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  JSC::AssemblerBuffer *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  char v70;
  __int16 v71;
  char v72;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  if ((_DWORD)a2 == 7)
  {
    if ((_DWORD)a5 == (_DWORD)a3)
    {
      v14 = (JSC::AssemblerBuffer *)(a1 + 56);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (_DWORD)a4) | ((_DWORD)a5 << 16) | a5 | 0x1E606C00, a3, a4, a5, a6, a7, a8);
      v21 = (v9 << 16) | (32 * v8) | v8 | 0x1E600C00 | 0x1000u;
LABEL_10:
      JSC::AssemblerBuffer::putInt(v14, v21, v15, v16, v17, v18, v19, v20);
      return;
    }
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), a5 | (32 * (_DWORD)a4) | 0x1E604000, a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v23, v24, v25, v26, v27, v28, v29);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v24, v25, v26, v27, v28, v29);
    v30 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v31, v32, v33, v34, v35, v36);
    if (*(_BYTE *)(a1 + 328))
      v43 = -122;
    else
      v43 = -126;
    v68 = v30;
    v69 = 0;
    v70 = v43;
    v71 = 6;
    v72 = -1;
    v44 = (32 * v10) | (v9 << 16) | v8 | 0x1E600C00 | 0x1000u;
    v45 = (JSC::AssemblerBuffer *)(a1 + 56);
LABEL_23:
    JSC::AssemblerBuffer::putInt(v45, v44, v37, v38, v39, v40, v41, v42);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v68, a1, v62, v63, v64, v65, v66, v67);
    return;
  }
  if ((_DWORD)a2 == 6)
  {
    if ((_DWORD)a5 == (_DWORD)a4)
    {
      v22 = (32 * a3) | ((_DWORD)a5 << 16) | a5;
      v14 = (JSC::AssemblerBuffer *)(a1 + 56);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v22 | 0x1E606C00u, a3, a4, a5, a6, a7, a8);
      v21 = v22 | 0x1E600C00u;
      goto LABEL_10;
    }
    v46 = 32 * a3;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), a5 | (32 * (_DWORD)a3) | 0x1E604000, a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v47, v48, v49, v50, v51, v52, v53);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 1409286150, v48, v49, v50, v51, v52, v53);
    v54 = *(_DWORD *)(a1 + 200);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 3573751839, v55, v56, v57, v58, v59, v60);
    if (*(_BYTE *)(a1 + 328))
      v61 = -122;
    else
      v61 = -126;
    v68 = v54;
    v69 = 0;
    v70 = v61;
    v71 = 6;
    v72 = -1;
    v44 = v46 | (v9 << 16) | v8 | 0x1E600C00u;
    v45 = (JSC::AssemblerBuffer *)(a1 + 56);
    goto LABEL_23;
  }
  v12 = (a2 << 12) | (32 * a3) | ((_DWORD)a4 << 16) | a5 | 0x1E600C00;
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
  *(_DWORD *)(a1 + 200) += 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetByValWithThis(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  v8 = *a1;
  v9 = *a2;
  v10 = **a1;
  v11 = *(_QWORD *)(*(_QWORD *)(*a1)[1] + 40);
  v12 = *(_QWORD *)(v10 + 5504);
  v13 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v11 & 1) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v13;
  v19 = *(_DWORD *)(v10 + 5584);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v42 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v42 | 2;
          v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v42 & 1) != 0)
          {
            v54 = 2 * *v43;
            while (v54 * 4)
            {
              v55 = *(_QWORD *)&v43[v54];
              if ((*(_BYTE *)(v55 + 19) & 0xC) == 0)
              {
                v56 = *(_QWORD *)(v55 + 96);
                v57 = (v56 & 1) != 0 ? (v56 >> 1) & 3 : *(unsigned __int8 *)(v56 + 4);
                v54 -= 2;
                if (v57 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_72;
            }
          }
          else if (v43)
          {
            if ((*((_BYTE *)v43 + 19) & 0xC) != 0
              || ((v44 = *((_QWORD *)v43 + 12), (v44 & 1) != 0)
                ? (v45 = (v44 >> 1) & 3)
                : (v45 = *(unsigned __int8 *)(v44 + 4)),
                  v45 == 2))
            {
LABEL_72:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v13 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v41 = 32;
    goto LABEL_19;
  }
  v21 = *(_QWORD *)(*(_QWORD *)v8[1] + 40);
  v22 = *(_QWORD *)(v10 + 5504);
  v23 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v24 = (uint64_t *)(v22 + 24);
  v25 = (uint64_t *)(v22 + 8);
  if ((v21 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v10 + 5584);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v46 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v46 | 2;
          v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v46 & 1) != 0)
          {
            v58 = 2 * *v47;
            while (v58 * 4)
            {
              v59 = *(_QWORD *)&v47[v58];
              if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
              {
                v60 = *(_QWORD *)(v59 + 96);
                v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                v58 -= 2;
                if (v61 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_82;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_82:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  if ((*(_QWORD *)(v28 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v41 = 64;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)(*(_QWORD *)v8[1] + 40);
  v32 = *(_QWORD *)(v10 + 5504);
  v33 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v34 = (uint64_t *)(v32 + 24);
  v35 = (uint64_t *)(v32 + 8);
  if ((v31 & 1) != 0)
    v36 = v34;
  else
    v36 = v35;
  v37 = *v36;
  v38 = *v36 + 32 * v33;
  v39 = *(_DWORD *)(v10 + 5584);
  v40 = *(_DWORD *)(v38 + 20);
  if (v39 != v40)
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v40 ^ v39) >= 2)
      {
        v50 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 != 4)
        {
          *(_QWORD *)v38 = v50 | 2;
          v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v50 & 1) != 0)
          {
            v62 = 2 * *v51;
            while (v62 * 4)
            {
              v63 = *(_QWORD *)&v51[v62];
              if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
              {
                v64 = *(_QWORD *)(v63 + 96);
                v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                v62 -= 2;
                if (v65 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_91;
            }
          }
          else if (v51)
          {
            if ((*((_BYTE *)v51 + 19) & 0xC) != 0
              || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                ? (v53 = (v52 >> 1) & 3)
                : (v53 = *(unsigned __int8 *)(v52 + 4)),
                  v53 == 2))
            {
LABEL_91:
              *(_QWORD *)v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v33 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *(_QWORD *)v38 &= ~2uLL;
    }
    *(_DWORD *)(v38 + 20) = v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v41 = 128;
LABEL_19:
    *(_WORD *)(v9 + 129) |= v41;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetByValWithThis(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  v8 = *a1;
  v9 = *a2;
  v10 = **a1;
  v11 = *(_QWORD *)(*(_QWORD *)(*a1)[1] + 40);
  v12 = *(_QWORD *)(v10 + 5504);
  v13 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v11 & 1) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v13;
  v19 = *(_DWORD *)(v10 + 5584);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v42 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v42 | 2;
          v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v42 & 1) != 0)
          {
            v54 = 2 * *v43;
            while (v54 * 4)
            {
              v55 = *(_QWORD *)&v43[v54];
              if ((*(_BYTE *)(v55 + 19) & 0xC) == 0)
              {
                v56 = *(_QWORD *)(v55 + 96);
                v57 = (v56 & 1) != 0 ? (v56 >> 1) & 3 : *(unsigned __int8 *)(v56 + 4);
                v54 -= 2;
                if (v57 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_72;
            }
          }
          else if (v43)
          {
            if ((*((_BYTE *)v43 + 19) & 0xC) != 0
              || ((v44 = *((_QWORD *)v43 + 12), (v44 & 1) != 0)
                ? (v45 = (v44 >> 1) & 3)
                : (v45 = *(unsigned __int8 *)(v44 + 4)),
                  v45 == 2))
            {
LABEL_72:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v13 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v41 = 2;
    goto LABEL_19;
  }
  v21 = *(_QWORD *)(*(_QWORD *)v8[1] + 40);
  v22 = *(_QWORD *)(v10 + 5504);
  v23 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v24 = (uint64_t *)(v22 + 24);
  v25 = (uint64_t *)(v22 + 8);
  if ((v21 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v10 + 5584);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v46 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v46 | 2;
          v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v46 & 1) != 0)
          {
            v58 = 2 * *v47;
            while (v58 * 4)
            {
              v59 = *(_QWORD *)&v47[v58];
              if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
              {
                v60 = *(_QWORD *)(v59 + 96);
                v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                v58 -= 2;
                if (v61 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_82;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_82:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  if ((*(_QWORD *)(v28 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v41 = 1;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)(*(_QWORD *)v8[1] + 40);
  v32 = *(_QWORD *)(v10 + 5504);
  v33 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v34 = (uint64_t *)(v32 + 24);
  v35 = (uint64_t *)(v32 + 8);
  if ((v31 & 1) != 0)
    v36 = v34;
  else
    v36 = v35;
  v37 = *v36;
  v38 = *v36 + 32 * v33;
  v39 = *(_DWORD *)(v10 + 5584);
  v40 = *(_DWORD *)(v38 + 20);
  if (v39 != v40)
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v40 ^ v39) >= 2)
      {
        v50 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 != 4)
        {
          *(_QWORD *)v38 = v50 | 2;
          v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v50 & 1) != 0)
          {
            v62 = 2 * *v51;
            while (v62 * 4)
            {
              v63 = *(_QWORD *)&v51[v62];
              if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
              {
                v64 = *(_QWORD *)(v63 + 96);
                v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                v62 -= 2;
                if (v65 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_91;
            }
          }
          else if (v51)
          {
            if ((*((_BYTE *)v51 + 19) & 0xC) != 0
              || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                ? (v53 = (v52 >> 1) & 3)
                : (v53 = *(unsigned __int8 *)(v52 + 4)),
                  v53 == 2))
            {
LABEL_91:
              *(_QWORD *)v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v33 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *(_QWORD *)v38 &= ~2uLL;
    }
    *(_DWORD *)(v38 + 20) = v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v41 = 4;
LABEL_19:
    *(_BYTE *)(v9 + 1) |= v41;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetByValWithThis(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  char v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;

  v8 = *a1;
  v9 = *a2;
  v10 = **a1;
  v11 = *(_QWORD *)(*(_QWORD *)(*a1)[1] + 40);
  v12 = *(_QWORD *)(v10 + 5504);
  v13 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((v11 & 1) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v13;
  v19 = *(_DWORD *)(v10 + 5584);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v42 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v42 | 2;
          v43 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v42 & 1) != 0)
          {
            v54 = 2 * *v43;
            while (v54 * 4)
            {
              v55 = *(_QWORD *)&v43[v54];
              if ((*(_BYTE *)(v55 + 19) & 0xC) == 0)
              {
                v56 = *(_QWORD *)(v55 + 96);
                v57 = (v56 & 1) != 0 ? (v56 >> 1) & 3 : *(unsigned __int8 *)(v56 + 4);
                v54 -= 2;
                if (v57 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v43, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_72;
            }
          }
          else if (v43)
          {
            if ((*((_BYTE *)v43 + 19) & 0xC) != 0
              || ((v44 = *((_QWORD *)v43 + 12), (v44 & 1) != 0)
                ? (v45 = (v44 >> 1) & 3)
                : (v45 = *(unsigned __int8 *)(v44 + 4)),
                  v45 == 2))
            {
LABEL_72:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v13 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v41 = 2;
    goto LABEL_19;
  }
  v21 = *(_QWORD *)(*(_QWORD *)v8[1] + 40);
  v22 = *(_QWORD *)(v10 + 5504);
  v23 = *(unsigned int *)((v21 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v24 = (uint64_t *)(v22 + 24);
  v25 = (uint64_t *)(v22 + 8);
  if ((v21 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v10 + 5584);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v46 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v46 | 2;
          v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v46 & 1) != 0)
          {
            v58 = 2 * *v47;
            while (v58 * 4)
            {
              v59 = *(_QWORD *)&v47[v58];
              if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
              {
                v60 = *(_QWORD *)(v59 + 96);
                v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                v58 -= 2;
                if (v61 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_82;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_82:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  if ((*(_QWORD *)(v28 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v41 = 1;
    goto LABEL_19;
  }
  v31 = *(_QWORD *)(*(_QWORD *)v8[1] + 40);
  v32 = *(_QWORD *)(v10 + 5504);
  v33 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v34 = (uint64_t *)(v32 + 24);
  v35 = (uint64_t *)(v32 + 8);
  if ((v31 & 1) != 0)
    v36 = v34;
  else
    v36 = v35;
  v37 = *v36;
  v38 = *v36 + 32 * v33;
  v39 = *(_DWORD *)(v10 + 5584);
  v40 = *(_DWORD *)(v38 + 20);
  if (v39 != v40)
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v40 ^ v39) >= 2)
      {
        v50 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 != 4)
        {
          *(_QWORD *)v38 = v50 | 2;
          v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v50 & 1) != 0)
          {
            v62 = 2 * *v51;
            while (v62 * 4)
            {
              v63 = *(_QWORD *)&v51[v62];
              if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
              {
                v64 = *(_QWORD *)(v63 + 96);
                v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                v62 -= 2;
                if (v65 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_91;
            }
          }
          else if (v51)
          {
            if ((*((_BYTE *)v51 + 19) & 0xC) != 0
              || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                ? (v53 = (v52 >> 1) & 3)
                : (v53 = *(unsigned __int8 *)(v52 + 4)),
                  v53 == 2))
            {
LABEL_91:
              *(_QWORD *)v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v33 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *(_QWORD *)v38 &= ~2uLL;
    }
    *(_DWORD *)(v38 + 20) = v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v41 = 4;
LABEL_19:
    *(_BYTE *)(v9 + 1) |= v41;
  }
}

double WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValWithThisGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITGetByValWithThisGenerator>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  double result;

  v9 = WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdWithThisGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6);
  v11 = *(_OWORD *)v9;
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v9 + 20);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v9 + 28);
  result = *(double *)(v9 + 32);
  *(double *)(v10 + 32) = result;
  *(_WORD *)(v10 + 40) = *(_WORD *)(v9 + 40);
  *(_DWORD *)(v10 + 44) = *(_DWORD *)(v9 + 44);
  *(_QWORD *)(v10 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v10 + 56) = *(_QWORD *)(v9 + 56);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZZN3JSC3DFG14SpeculativeJIT25compileEnumeratorPutByValEPNS9_4NodeEENK3__0clENS8_11JSValueRegsEEUlPT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJPNS8_17StructureStubInfoEPNS8_33BaselineUnlinkedStructureStubInfoEPNS9_25UnlinkedStructureStubInfoEEEEEEEDcSF_DpT0_(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;

  v8 = *a1;
  v9 = **a1;
  v10 = *(_QWORD *)(v9 + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(*a1)[1] + 24) + 1;
  if (*(_DWORD *)(v10 + 164) <= v11)
    goto LABEL_98;
  v12 = *a2;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v11);
  v14 = *(_QWORD *)(v9 + 5504);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((v13 & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v19 = *v18;
  v20 = *v18 + 32 * v15;
  v21 = *(_DWORD *)(v9 + 5584);
  v22 = *(_DWORD *)(v20 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v20 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v48 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 != 4)
        {
          *(_QWORD *)v20 = v48 | 2;
          v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v48 & 1) != 0)
          {
            v60 = 2 * *v49;
            while (v60 * 4)
            {
              v61 = *(_QWORD *)&v49[v60];
              if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
              {
                v62 = *(_QWORD *)(v61 + 96);
                v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                v60 -= 2;
                if (v63 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_75;
            }
          }
          else if (v49)
          {
            if ((*((_BYTE *)v49 + 19) & 0xC) != 0
              || ((v50 = *((_QWORD *)v49 + 12), (v50 & 1) != 0)
                ? (v51 = (v50 >> 1) & 3)
                : (v51 = *(unsigned __int8 *)(v50 + 4)),
                  v51 == 2))
            {
LABEL_75:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v19 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v20 + 20) = v21;
  }
  if ((*(_QWORD *)(v20 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v47 = 32;
    goto LABEL_22;
  }
  v23 = *(_QWORD *)(v9 + 3960);
  v24 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v23 + 164) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDAAFCLL);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 152) + 8 * v24);
  v26 = *(_QWORD *)(v9 + 5504);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *(_DWORD *)(v9 + 5584);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v52 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v52 | 2;
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v64 = 2 * *v53;
            while (v64 * 4)
            {
              v65 = *(_QWORD *)&v53[v64];
              if ((*(_BYTE *)(v65 + 19) & 0xC) == 0)
              {
                v66 = *(_QWORD *)(v65 + 96);
                v67 = (v66 & 1) != 0 ? (v66 >> 1) & 3 : *(unsigned __int8 *)(v66 + 4);
                v64 -= 2;
                if (v67 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_85;
            }
          }
          else if (v53)
          {
            if ((*((_BYTE *)v53 + 19) & 0xC) != 0
              || ((v54 = *((_QWORD *)v53 + 12), (v54 & 1) != 0)
                ? (v55 = (v54 >> 1) & 3)
                : (v55 = *(unsigned __int8 *)(v54 + 4)),
                  v55 == 2))
            {
LABEL_85:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  if ((*(_QWORD *)(v32 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v47 = 64;
    goto LABEL_22;
  }
  v35 = *(_QWORD *)(v9 + 3960);
  v36 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x197CDAAF4);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36);
  v38 = *(_QWORD *)(v9 + 5504);
  v39 = *(unsigned int *)((v37 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v40 = (uint64_t *)(v38 + 24);
  v41 = (uint64_t *)(v38 + 8);
  if ((v37 & 1) != 0)
    v42 = v40;
  else
    v42 = v41;
  v43 = *v42;
  v44 = *v42 + 32 * v39;
  v45 = *(_DWORD *)(v9 + 5584);
  v46 = *(_DWORD *)(v44 + 20);
  if (v45 != v46)
  {
    if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v46 ^ v45) >= 2)
      {
        v56 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 != 4)
        {
          *(_QWORD *)v44 = v56 | 2;
          v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) != 0)
          {
            v68 = 2 * *v57;
            while (v68 * 4)
            {
              v69 = *(_QWORD *)&v57[v68];
              if ((*(_BYTE *)(v69 + 19) & 0xC) == 0)
              {
                v70 = *(_QWORD *)(v69 + 96);
                v71 = (v70 & 1) != 0 ? (v70 >> 1) & 3 : *(unsigned __int8 *)(v70 + 4);
                v68 -= 2;
                if (v71 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_95;
            }
          }
          else if (v57)
          {
            if ((*((_BYTE *)v57 + 19) & 0xC) != 0
              || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                ? (v59 = (v58 >> 1) & 3)
                : (v59 = *(unsigned __int8 *)(v58 + 4)),
                  v59 == 2))
            {
LABEL_95:
              *(_QWORD *)v44 = 4;
            }
          }
        }
        *(_DWORD *)(v43 + 32 * v39 + 16) = -21020677;
      }
      if ((v45 & 1) != 0)
        *(_QWORD *)v44 &= ~2uLL;
    }
    *(_DWORD *)(v44 + 20) = v45;
  }
  if ((*(_QWORD *)(v44 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v47 = 128;
LABEL_22:
    *(_WORD *)(v12 + 129) |= v47;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZZN3JSC3DFG14SpeculativeJIT25compileEnumeratorPutByValEPNS9_4NodeEENK3__0clENS8_11JSValueRegsEEUlPT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJPNS8_17StructureStubInfoEPNS8_33BaselineUnlinkedStructureStubInfoEPNS9_25UnlinkedStructureStubInfoEEEEEEEDcSF_DpT0_(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  char v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;

  v8 = *a1;
  v9 = **a1;
  v10 = *(_QWORD *)(v9 + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(*a1)[1] + 24) + 1;
  if (*(_DWORD *)(v10 + 164) <= v11)
    goto LABEL_98;
  v12 = *a2;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v11);
  v14 = *(_QWORD *)(v9 + 5504);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((v13 & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v19 = *v18;
  v20 = *v18 + 32 * v15;
  v21 = *(_DWORD *)(v9 + 5584);
  v22 = *(_DWORD *)(v20 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v20 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v48 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 != 4)
        {
          *(_QWORD *)v20 = v48 | 2;
          v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v48 & 1) != 0)
          {
            v60 = 2 * *v49;
            while (v60 * 4)
            {
              v61 = *(_QWORD *)&v49[v60];
              if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
              {
                v62 = *(_QWORD *)(v61 + 96);
                v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                v60 -= 2;
                if (v63 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_75;
            }
          }
          else if (v49)
          {
            if ((*((_BYTE *)v49 + 19) & 0xC) != 0
              || ((v50 = *((_QWORD *)v49 + 12), (v50 & 1) != 0)
                ? (v51 = (v50 >> 1) & 3)
                : (v51 = *(unsigned __int8 *)(v50 + 4)),
                  v51 == 2))
            {
LABEL_75:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v19 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v20 + 20) = v21;
  }
  if ((*(_QWORD *)(v20 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v47 = 2;
    goto LABEL_22;
  }
  v23 = *(_QWORD *)(v9 + 3960);
  v24 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v23 + 164) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDAF6CLL);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 152) + 8 * v24);
  v26 = *(_QWORD *)(v9 + 5504);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *(_DWORD *)(v9 + 5584);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v52 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v52 | 2;
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v64 = 2 * *v53;
            while (v64 * 4)
            {
              v65 = *(_QWORD *)&v53[v64];
              if ((*(_BYTE *)(v65 + 19) & 0xC) == 0)
              {
                v66 = *(_QWORD *)(v65 + 96);
                v67 = (v66 & 1) != 0 ? (v66 >> 1) & 3 : *(unsigned __int8 *)(v66 + 4);
                v64 -= 2;
                if (v67 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_85;
            }
          }
          else if (v53)
          {
            if ((*((_BYTE *)v53 + 19) & 0xC) != 0
              || ((v54 = *((_QWORD *)v53 + 12), (v54 & 1) != 0)
                ? (v55 = (v54 >> 1) & 3)
                : (v55 = *(unsigned __int8 *)(v54 + 4)),
                  v55 == 2))
            {
LABEL_85:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  if ((*(_QWORD *)(v32 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v47 = 1;
    goto LABEL_22;
  }
  v35 = *(_QWORD *)(v9 + 3960);
  v36 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x197CDAF64);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36);
  v38 = *(_QWORD *)(v9 + 5504);
  v39 = *(unsigned int *)((v37 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v40 = (uint64_t *)(v38 + 24);
  v41 = (uint64_t *)(v38 + 8);
  if ((v37 & 1) != 0)
    v42 = v40;
  else
    v42 = v41;
  v43 = *v42;
  v44 = *v42 + 32 * v39;
  v45 = *(_DWORD *)(v9 + 5584);
  v46 = *(_DWORD *)(v44 + 20);
  if (v45 != v46)
  {
    if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v46 ^ v45) >= 2)
      {
        v56 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 != 4)
        {
          *(_QWORD *)v44 = v56 | 2;
          v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) != 0)
          {
            v68 = 2 * *v57;
            while (v68 * 4)
            {
              v69 = *(_QWORD *)&v57[v68];
              if ((*(_BYTE *)(v69 + 19) & 0xC) == 0)
              {
                v70 = *(_QWORD *)(v69 + 96);
                v71 = (v70 & 1) != 0 ? (v70 >> 1) & 3 : *(unsigned __int8 *)(v70 + 4);
                v68 -= 2;
                if (v71 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_95;
            }
          }
          else if (v57)
          {
            if ((*((_BYTE *)v57 + 19) & 0xC) != 0
              || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                ? (v59 = (v58 >> 1) & 3)
                : (v59 = *(unsigned __int8 *)(v58 + 4)),
                  v59 == 2))
            {
LABEL_95:
              *(_QWORD *)v44 = 4;
            }
          }
        }
        *(_DWORD *)(v43 + 32 * v39 + 16) = -21020677;
      }
      if ((v45 & 1) != 0)
        *(_QWORD *)v44 &= ~2uLL;
    }
    *(_DWORD *)(v44 + 20) = v45;
  }
  if ((*(_QWORD *)(v44 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v47 = 4;
LABEL_22:
    *(_BYTE *)(v12 + 1) |= v47;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZZN3JSC3DFG14SpeculativeJIT25compileEnumeratorPutByValEPNS9_4NodeEENK3__0clENS8_11JSValueRegsEEUlPT_E_EEJRNS0_6__baseILNS0_6_TraitE0EJPNS8_17StructureStubInfoEPNS8_33BaselineUnlinkedStructureStubInfoEPNS9_25UnlinkedStructureStubInfoEEEEEEEDcSF_DpT0_(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  char v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;

  v8 = *a1;
  v9 = **a1;
  v10 = *(_QWORD *)(v9 + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(*a1)[1] + 24) + 1;
  if (*(_DWORD *)(v10 + 164) <= v11)
    goto LABEL_98;
  v12 = *a2;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v11);
  v14 = *(_QWORD *)(v9 + 5504);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((v13 & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v19 = *v18;
  v20 = *v18 + 32 * v15;
  v21 = *(_DWORD *)(v9 + 5584);
  v22 = *(_DWORD *)(v20 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v20 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v48 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 != 4)
        {
          *(_QWORD *)v20 = v48 | 2;
          v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v48 & 1) != 0)
          {
            v60 = 2 * *v49;
            while (v60 * 4)
            {
              v61 = *(_QWORD *)&v49[v60];
              if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
              {
                v62 = *(_QWORD *)(v61 + 96);
                v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                v60 -= 2;
                if (v63 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_75;
            }
          }
          else if (v49)
          {
            if ((*((_BYTE *)v49 + 19) & 0xC) != 0
              || ((v50 = *((_QWORD *)v49 + 12), (v50 & 1) != 0)
                ? (v51 = (v50 >> 1) & 3)
                : (v51 = *(unsigned __int8 *)(v50 + 4)),
                  v51 == 2))
            {
LABEL_75:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v19 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v20 + 20) = v21;
  }
  if ((*(_QWORD *)(v20 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v47 = 2;
    goto LABEL_22;
  }
  v23 = *(_QWORD *)(v9 + 3960);
  v24 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v23 + 164) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDB3DCLL);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 152) + 8 * v24);
  v26 = *(_QWORD *)(v9 + 5504);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *(_DWORD *)(v9 + 5584);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v52 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v52 | 2;
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v64 = 2 * *v53;
            while (v64 * 4)
            {
              v65 = *(_QWORD *)&v53[v64];
              if ((*(_BYTE *)(v65 + 19) & 0xC) == 0)
              {
                v66 = *(_QWORD *)(v65 + 96);
                v67 = (v66 & 1) != 0 ? (v66 >> 1) & 3 : *(unsigned __int8 *)(v66 + 4);
                v64 -= 2;
                if (v67 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_85;
            }
          }
          else if (v53)
          {
            if ((*((_BYTE *)v53 + 19) & 0xC) != 0
              || ((v54 = *((_QWORD *)v53 + 12), (v54 & 1) != 0)
                ? (v55 = (v54 >> 1) & 3)
                : (v55 = *(unsigned __int8 *)(v54 + 4)),
                  v55 == 2))
            {
LABEL_85:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  if ((*(_QWORD *)(v32 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v47 = 1;
    goto LABEL_22;
  }
  v35 = *(_QWORD *)(v9 + 3960);
  v36 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x197CDB3D4);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36);
  v38 = *(_QWORD *)(v9 + 5504);
  v39 = *(unsigned int *)((v37 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v40 = (uint64_t *)(v38 + 24);
  v41 = (uint64_t *)(v38 + 8);
  if ((v37 & 1) != 0)
    v42 = v40;
  else
    v42 = v41;
  v43 = *v42;
  v44 = *v42 + 32 * v39;
  v45 = *(_DWORD *)(v9 + 5584);
  v46 = *(_DWORD *)(v44 + 20);
  if (v45 != v46)
  {
    if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v46 ^ v45) >= 2)
      {
        v56 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 != 4)
        {
          *(_QWORD *)v44 = v56 | 2;
          v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) != 0)
          {
            v68 = 2 * *v57;
            while (v68 * 4)
            {
              v69 = *(_QWORD *)&v57[v68];
              if ((*(_BYTE *)(v69 + 19) & 0xC) == 0)
              {
                v70 = *(_QWORD *)(v69 + 96);
                v71 = (v70 & 1) != 0 ? (v70 >> 1) & 3 : *(unsigned __int8 *)(v70 + 4);
                v68 -= 2;
                if (v71 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_95;
            }
          }
          else if (v57)
          {
            if ((*((_BYTE *)v57 + 19) & 0xC) != 0
              || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                ? (v59 = (v58 >> 1) & 3)
                : (v59 = *(unsigned __int8 *)(v58 + 4)),
                  v59 == 2))
            {
LABEL_95:
              *(_QWORD *)v44 = 4;
            }
          }
        }
        *(_DWORD *)(v43 + 32 * v39 + 16) = -21020677;
      }
      if ((v45 & 1) != 0)
        *(_QWORD *)v44 &= ~2uLL;
    }
    *(_DWORD *)(v44 + 20) = v45;
  }
  if ((*(_QWORD *)(v44 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v47 = 4;
LABEL_22:
    *(_BYTE *)(v12 + 1) |= v47;
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,BOOL,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574BA8;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,BOOL,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574BA8;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,BOOL,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,BOOL,unsigned int,JSC::JSPropertyNameEnumerator *),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  JSC::ARM64LogicalImmediate *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  unsigned __int8 *v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char v80;
  char v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v90;
  char *v91;
  int64_t v92;
  char *v93;
  uint64_t v94;
  void *__dst;
  uint64_t v96;
  _WORD v97[4];
  unint64_t v98;
  unsigned int *v99;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_130:
    JUMPOUT(0x197CDBCA4);
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 124))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 124));
    }
  }
  v15 = *(unsigned int *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 184);
  v18 = *(unsigned __int8 *)(a1 + 185);
  v19 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 188);
  v20 = *(unsigned __int8 *)(a1 + 192);
  v21 = *(unsigned __int8 *)(a1 + 193);
  __dst = v97;
  v96 = 4;
  if (v17 == 1)
  {
    LODWORD(v22) = 0;
  }
  else
  {
    v97[0] = v17 | 0x100;
    LODWORD(v22) = 1;
    HIDWORD(v96) = 1;
  }
  if (v18 != 2)
  {
    v97[v22] = v18 | 0x200;
    LODWORD(v22) = v22 + 1;
    HIDWORD(v96) = v22;
  }
  if (v20 != 4)
  {
    v97[v22] = v20 | 0x400;
    LODWORD(v22) = v22 + 1;
    HIDWORD(v96) = v22;
  }
  if (v21 != 5)
  {
    v97[v22] = v21 | 0x500;
    LODWORD(v22) = v22 + 1;
    HIDWORD(v96) = v22;
LABEL_18:
    while (1)
    {
      v23 = 0;
      v24 = 0;
      v25 = (char *)__dst;
      v26 = v22;
      do
      {
        if ((*((_BYTE *)__dst + v23 + 1) & 0x40) != 0)
          goto LABEL_104;
        v24 |= 1 << *((_BYTE *)__dst + v23 + 1);
        v23 += 2;
      }
      while (2 * v22 != v23);
      v27 = 0;
      do
      {
        v28 = *((_BYTE *)__dst + v27) & 0x7F;
        if (v28 >= 0x40)
          goto LABEL_104;
        v24 &= ~(1 << v28);
        v27 += 2;
      }
      while (2 * v22 != v27);
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.i32[0];
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v24));
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.i32[0] + v30)
        break;
      v42 = *(_BYTE *)__dst;
      v43 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v43, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v96) - 2);
      v44 = (HIDWORD(v96) - 1);
      v40 = HIDWORD(v96) == 1;
      HIDWORD(v96) = v44;
      v45 = (unsigned __int8 *)__dst;
      v46 = (unsigned __int8 *)__dst + 2 * v44;
      if (v40)
      {
        v53 = 0;
        v54 = 0;
        v49 = 0;
        a2 = v46;
      }
      else
      {
        v47 = 2 * v44;
        v48 = __dst;
        while (*v48 != v43)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_46;
        }
        *v48 = v42;
LABEL_46:
        v49 = 0;
        v50 = v45;
        a2 = v46;
        v51 = (char *)v46;
        do
        {
          if (*v45 == v45[1])
          {
            v52 = v45;
            if (v51 != (char *)__dst + 2 * HIDWORD(v96))
            {
              v93 = (char *)v46;
              if (v45 == a2)
              {
                v52 = (unsigned __int8 *)v51;
              }
              else
              {
                v91 = v51;
                v92 = v50 - a2;
                memmove(v51, a2, v50 - a2);
                v52 = (unsigned __int8 *)&v91[v92];
              }
              v46 = (unsigned __int8 *)v93;
            }
            a2 = v45 + 2;
            ++v49;
            v51 = (char *)v52;
          }
          v45 += 2;
          v50 += 2;
        }
        while (v45 < v46);
        v45 = (unsigned __int8 *)__dst;
        v53 = HIDWORD(v96);
        v54 = HIDWORD(v96);
        v46 = (unsigned __int8 *)v51;
      }
      v55 = &v45[2 * v53];
      if (a2 != v55)
      {
        memmove(v46, a2, v55 - a2);
        v54 = HIDWORD(v96);
      }
      LODWORD(v22) = v54 - v49;
LABEL_66:
      HIDWORD(v96) = v22;
LABEL_67:
      if (!(_DWORD)v22)
      {
        v56 = __dst;
        if (v97 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v96) = 0;
          WTF::fastFree((unint64_t)v56, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_74;
      }
    }
    v32 = 0;
    if (v22 <= 1)
      v33 = 1;
    else
      v33 = v22;
    v34 = 2 * v33;
    while (1)
    {
      v35 = *((unsigned __int8 *)__dst + v32 + 1);
      if ((v35 & 0x7Fu) >= 0x40)
        goto LABEL_104;
      if (((v24 >> (v35 & 0x7F)) & 1) != 0)
        break;
      v32 += 2;
      if (v34 == v32)
        goto LABEL_67;
    }
    v36 = *((unsigned __int8 *)__dst + v32);
    if (v36 == v35)
    {
LABEL_65:
      memmove(&v25[v32], &v25[v32 + 2], 2 * v26 - v32 - 2);
      LODWORD(v22) = HIDWORD(v96) - 1;
      goto LABEL_66;
    }
    v37 = (char)v36;
    if ((char)v36 == 63)
    {
      v38 = *(_DWORD *)(v8 + 200);
      v39 = *(_DWORD *)(v8 + 192);
      if ((char)v35 != 31)
      {
        v41 = v35 & 0x1F | 0xD2800000;
        goto LABEL_62;
      }
    }
    else
    {
      v38 = *(_DWORD *)(v8 + 200);
      v39 = *(_DWORD *)(v8 + 192);
      v40 = v35 == 31 || v37 == 31;
      if (!v40)
      {
        v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_62:
        if (v38 + 4 > v39)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v38 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v38) = v41;
        *(_DWORD *)(v8 + 200) += 4;
        v25 = (char *)__dst;
        v26 = HIDWORD(v96);
        goto LABEL_65;
      }
    }
    v41 = (char)v35 | (32 * v37) | 0x91000000;
    goto LABEL_62;
  }
  if ((_DWORD)v22)
    goto LABEL_18;
LABEL_74:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v19, 3, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v57, v58, v59, v60, v61);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v57, v58, v59, v60, v61);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v62, v63, v64, v65, v66, v67, (int *)&v94);
  *(_QWORD *)(a1 + 92) = v94;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_79;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 0, a3, a4, a5, a6, a7, a8);
LABEL_79:
    v68 = 0;
    LOBYTE(v69) = 0;
    goto LABEL_80;
  }
  __dst = (void *)2;
  v99 = 0;
  v74 = *(_QWORD *)(v8 + 3960);
  v75 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v75 & 1) != 0)
  {
    v84 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
    if ((v75 & 2) != 0
      || ((v85 = *(unsigned int *)((v75 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v90 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v90 = v84;
      *(_DWORD *)(v90 + 8) = v85;
      v87 = 1;
      v84 = v90;
    }
    else
    {
      v87 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v75 = v84 | v87;
  }
  v98 = v75;
  v76 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v74, &v98, (uint64_t *)&__dst, &v99, a5, a6, a7, a8);
  if ((v98 & 1) != 0 && (v98 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v98 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v76 & 1) != 0)
  {
    v77 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v77)
    {
      v22 = 0;
      v78 = 16 * v77;
      v79 = (char *)(*(_QWORD *)(a1 + 112) + 2);
      while (1)
      {
        v81 = *v79;
        v79 += 16;
        v80 = v81;
        if ((v81 & 0x40) != 0)
          break;
        v22 |= 1 << v80;
        v78 -= 16;
        if (!v78)
        {
          if ((v22 & 1) != 0)
            goto LABEL_105;
          goto LABEL_102;
        }
      }
LABEL_104:
      __break(1u);
LABEL_105:
      v82 = (unsigned __int16)~(_WORD)v22;
      if (!v82)
      {
        v68 = 1;
        LOBYTE(v69) = -1;
        goto LABEL_94;
      }
      v69 = __clz(__rbit64(v82));
      if (v69)
      {
        if (v69 == 31)
          v83 = -1862270945;
        else
          v83 = v69 | 0xAA0003E0;
        v89 = (unsigned int *)(v8 + 200);
        v88 = *(_DWORD *)(v8 + 200);
        if (v88 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v88 = *v89;
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v88) = v83;
        *v89 += 4;
      }
    }
    else
    {
LABEL_102:
      LOBYTE(v69) = 0;
    }
    v68 = 1;
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 0, a3, a4, a5, a6, a7, a8);
    LOBYTE(v69) = 0;
    v68 = 0;
  }
LABEL_94:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
LABEL_80:
  if (!*(_BYTE *)(a1 + 100))
  {
    v70 = *(_DWORD *)(a1 + 124);
    if (v70)
    {
      v71 = v70 - 1;
      v72 = 16 * (v70 - 1);
      while (*(_DWORD *)(a1 + 124) > v71)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 112) + v72, a3, a4, a5, a6, a7, a8);
        v72 -= 16;
        if (--v71 == -1)
          goto LABEL_85;
      }
      __break(0xC471u);
      goto LABEL_130;
    }
LABEL_85:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v68 && !*(_BYTE *)(a1 + 101))
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v69, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574C08;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574C08;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574C08;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  __int16 *v48;
  int v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  char *v53;
  int64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  _BYTE v71[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 177);
    if (*(_BYTE *)(a1 + 176))
    {
      v70 = *(unsigned __int8 *)(a1 + 176);
      v23 = 1;
      v68 = 1;
      if (v22 == 1)
        goto LABEL_15;
    }
    else
    {
      if (v22 == 1)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v59, v60, v61, v62, v63, v64);
        return;
      }
      v23 = 0;
    }
    *(_WORD *)&v71[2 * v23++ - 2] = v22 | 0x100;
    v68 = v23;
LABEL_15:
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = v23;
      do
      {
        if ((v71[v24 - 1] & 0x40) != 0)
          goto LABEL_70;
        v25 |= 1 << v71[v24 - 1];
        v24 += 2;
      }
      while (2 * v23 != v24);
      v27 = 0;
      do
      {
        v28 = v71[v27 - 2] & 0x7F;
        if (v28 >= 0x40)
          goto LABEL_70;
        v25 &= ~(1 << v28);
        v27 += 2;
      }
      while (2 * v23 != v27);
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.i32[0];
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.i32[0] + v30)
        break;
      v42 = HIBYTE(v70);
      v43 = v70;
      JSC::MacroAssemblerARM64::swap(a2, (char)v70, SHIBYTE(v70), v17, v18, v19, v20, v21);
      memmove(&v70, v71, 2 * v68 - 2);
      v44 = v68 - 1;
      v40 = v68 == 1;
      v69 = v44;
      v45 = (unsigned __int8 *)&v70;
      v46 = &v71[2 * v44 - 2];
      if (v40)
      {
        v56 = 0;
        v57 = 0;
        v49 = 0;
        v15 = v46;
      }
      else
      {
        v47 = 2 * v44;
        v48 = &v70;
        while (*(unsigned __int8 *)v48 != v42)
        {
          ++v48;
          v47 -= 2;
          if (!v47)
            goto LABEL_43;
        }
        *(_BYTE *)v48 = v43;
LABEL_43:
        v49 = 0;
        v50 = (char *)&v70;
        v15 = v46;
        v51 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v52 = v45;
            if (v51 != &v71[2 * v69 - 2])
            {
              v67 = v49;
              v65 = v46;
              v66 = v45;
              if (v45 == v15)
              {
                v52 = v51;
              }
              else
              {
                v53 = v50;
                v54 = v50 - (char *)v15;
                v55 = v51;
                memmove(v51, v15, v50 - (char *)v15);
                v50 = v53;
                v52 = &v55[v54];
              }
              v46 = v65;
              v45 = v66;
              v49 = v67;
            }
            v15 = v45 + 2;
            ++v49;
            v51 = v52;
          }
          v45 += 2;
          v50 += 2;
        }
        while (v45 < v46);
        v56 = v69;
        v57 = v69;
        v46 = v51;
      }
      v58 = &v71[2 * v56 - 2];
      if (v15 != v58)
      {
        memmove(v46, v15, v58 - v15);
        v57 = v69;
      }
      v23 = v57 - v49;
LABEL_64:
      v68 = v23;
LABEL_65:
      if (!v23)
        goto LABEL_68;
    }
    v32 = 0;
    if (v23 <= 1)
      v33 = 1;
    else
      v33 = v23;
    v34 = 2 * v33;
    while (1)
    {
      v35 = v71[v32 - 1];
      if ((v35 & 0x7Fu) >= 0x40)
        goto LABEL_70;
      if (((v25 >> (v35 & 0x7F)) & 1) != 0)
        break;
      v32 += 2;
      if (v34 == v32)
        goto LABEL_65;
    }
    v36 = v71[v32 - 2];
    if (v36 == v35)
    {
LABEL_63:
      memmove(&v71[v32 - 2], &v71[v32], 2 * v26 - v32 - 2);
      v23 = v68 - 1;
      goto LABEL_64;
    }
    v37 = (char)v36;
    if ((char)v36 == 63)
    {
      v38 = *(_DWORD *)(a2 + 200);
      v39 = *(_DWORD *)(a2 + 192);
      if ((char)v35 != 31)
      {
        v41 = v35 & 0x1F | 0xD2800000;
        goto LABEL_60;
      }
    }
    else
    {
      v38 = *(_DWORD *)(a2 + 200);
      v39 = *(_DWORD *)(a2 + 192);
      v40 = v35 == 31 || v37 == 31;
      if (!v40)
      {
        v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
        if (v38 + 4 > v39)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
          v38 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
        *(_DWORD *)(a2 + 200) += 4;
        v26 = v68;
        goto LABEL_63;
      }
    }
    v41 = (char)v35 | (32 * v37) | 0x91000000;
    goto LABEL_60;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
LABEL_70:
  __break(1u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  JSC::AssemblerBuffer *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    LODWORD(v8) = 0;
    LOBYTE(v11) = 0;
    goto LABEL_5;
  }
  LOBYTE(v11) = *(_BYTE *)(a1 + 102);
  v41 = 0;
  v42 = 2;
  v19 = *(_QWORD *)(a2 + 3960);
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v20 & 1) != 0)
  {
    v35 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v36 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v39 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v39 = v8;
      *(_DWORD *)(v39 + 8) = v36;
      v38 = 1;
      v8 = v39;
    }
    else
    {
      v38 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v8 = v36 << 36;
    }
    v20 = v8 | v38;
    v19 = v35;
  }
  v40 = v20;
  v21 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v19, &v40, &v42, &v41, a5, a6, a7, a8);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  if ((v21 & 1) != 0)
  {
    v22 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 16 * v22;
      v25 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v27 = *v25;
        v25 += 16;
        v26 = v27;
        if ((v27 & 0x40) != 0)
          break;
        v23 |= 1 << v26;
        v24 -= 16;
        if (!v24)
          goto LABEL_36;
      }
    }
    else
    {
      v23 = 0;
LABEL_36:
      if ((v11 & 0x40) == 0)
      {
        LODWORD(v8) = 1;
        v28 = v23 | (1 << v11);
        LOBYTE(v11) = 1;
        if ((v28 & 2) != 0)
        {
          v29 = (unsigned __int16)~(_WORD)v28 & 0xFFFE;
          if (v29)
          {
            v11 = __clz(__rbit64(v29));
            if (v11 == 1)
            {
              LODWORD(v8) = 1;
            }
            else
            {
              if (v11 == 31)
              {
                v8 = a2 + 200;
                v31 = *(_DWORD *)(a2 + 200);
                v32 = (JSC::AssemblerBuffer *)(a2 + 56);
                v33 = v31 + 4;
                v34 = *(_DWORD *)(a2 + 192);
                v30 = -1862270913;
              }
              else
              {
                v30 = v11 | 0xAA0103E0;
                v8 = a2 + 200;
                v31 = *(_DWORD *)(a2 + 200);
                v32 = (JSC::AssemblerBuffer *)(a2 + 56);
                v33 = v31 + 4;
                v34 = *(_DWORD *)(a2 + 192);
              }
              if (v33 > v34)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v32, a2, a3, a4, a5, a6, a7, a8);
                v31 = *(_DWORD *)v8;
              }
              *(_DWORD *)(*(_QWORD *)v32 + v31) = v30;
              *(_DWORD *)v8 += 4;
              LODWORD(v8) = 1;
            }
          }
          else
          {
            LODWORD(v8) = 1;
            LOBYTE(v11) = -1;
          }
        }
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_60;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v11) = 0;
  LODWORD(v8) = 0;
LABEL_27:
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v12 = *(unsigned __int8 *)(a1 + 102);
  if (!*(_BYTE *)(a1 + 102))
    goto LABEL_13;
  if (v12 == 31)
  {
    v13 = -1862270945;
    goto LABEL_10;
  }
  if (v12 == 255)
  {
LABEL_60:
    v13 = -1442774017;
    goto LABEL_10;
  }
  v13 = v12 | 0xAA0003E0;
LABEL_10:
  v15 = (unsigned int *)(a2 + 200);
  v14 = *(_DWORD *)(a2 + 200);
  if (v14 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v13;
  *v15 += 4;
LABEL_13:
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_19:
    if ((_DWORD)v8)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v11, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v16 = *(_DWORD *)(a1 + 116);
  if (!v16)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_19;
  }
  v17 = v16 - 1;
  v18 = 16 * (v16 - 1);
  while (*(_DWORD *)(a1 + 116) > v17)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v18, a3, a4, a5, a6, a7, a8);
    v18 -= 16;
    if (--v17 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574C08;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574C08;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;
  uint64_t v38;
  unsigned __int8 *v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  int64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 *v64;
  void *__dst;
  int v66;
  unsigned int v67;
  __int16 v68;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(unsigned __int8 *)(a1 + 160);
    v16 = *(_QWORD *)(a1 + 168);
    v17 = &v68;
    __dst = &v68;
    v66 = 1;
    if (!v15)
    {
LABEL_62:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 1, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v52, v53, v54, v55, v56, v57, (int *)&__dst);
      *(_QWORD *)(a1 + 92) = __dst;
      JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v58, v59, v60, v61, v62, v63);
      return;
    }
    v68 = v15;
    v67 = 1;
    v18 = 1;
    while (1)
    {
      v19 = 0;
      v20 = 0;
      v21 = (char *)__dst;
      v22 = v18;
      do
      {
        if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
          goto LABEL_66;
        v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
        v19 += 2;
      }
      while (2 * v18 != v19);
      v23 = 0;
      do
      {
        v24 = *((_BYTE *)__dst + v23) & 0x7F;
        if (v24 >= 0x40)
          goto LABEL_66;
        v20 &= ~(1 << v24);
        v23 += 2;
      }
      while (2 * v18 != v23);
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v25.i16[0] = vaddlv_u8(v25);
      v26 = v25.i32[0];
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.i32[0] + v26)
        break;
      v64 = v17;
      v36 = *(_BYTE *)__dst;
      v37 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v37, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v67 - 2);
      v38 = v67 - 1;
      v33 = v67 == 1;
      v67 = v38;
      v39 = (unsigned __int8 *)__dst;
      v40 = (char *)__dst + 2 * v38;
      if (v33)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        a2 = (char *)__dst + 2 * v38;
      }
      else
      {
        v45 = 2 * v38;
        v46 = __dst;
        while (*v46 != v37)
        {
          v46 += 2;
          v45 -= 2;
          if (!v45)
            goto LABEL_51;
        }
        *v46 = v36;
LABEL_51:
        v43 = 0;
        v47 = v39;
        a2 = v40;
        v48 = v40;
        do
        {
          if (*v39 == v39[1])
          {
            v49 = v39;
            if (v48 != (char *)__dst + 2 * v67)
            {
              if (v39 == (unsigned __int8 *)a2)
              {
                v49 = (unsigned __int8 *)v48;
              }
              else
              {
                v50 = v47 - (unsigned __int8 *)a2;
                memmove(v48, a2, v47 - (unsigned __int8 *)a2);
                v49 = (unsigned __int8 *)&v48[v50];
              }
            }
            a2 = (char *)(v39 + 2);
            ++v43;
            v48 = (char *)v49;
          }
          v39 += 2;
          v47 += 2;
        }
        while (v39 < (unsigned __int8 *)v40);
        v39 = (unsigned __int8 *)__dst;
        v41 = v67;
        v42 = v67;
        v40 = v48;
      }
      v44 = (char *)&v39[2 * v41];
      if (a2 != v44)
      {
        memmove(v40, a2, v44 - a2);
        v42 = v67;
      }
      v18 = v42 - v43;
      v17 = v64;
LABEL_40:
      v67 = v18;
LABEL_41:
      if (!v18)
      {
        v51 = __dst;
        if (v17 != __dst)
        {
          if (__dst)
          {
            __dst = 0;
            v66 = 0;
            WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        goto LABEL_62;
      }
    }
    v28 = 0;
    if (v18 <= 1)
      v29 = 1;
    else
      v29 = v18;
    v30 = 2 * v29;
    while (1)
    {
      v31 = *((unsigned __int8 *)__dst + v28 + 1);
      if ((v31 & 0x7Fu) >= 0x40)
        goto LABEL_66;
      if (((v20 >> (v31 & 0x7F)) & 1) != 0)
        break;
      v28 += 2;
      if (v30 == v28)
        goto LABEL_41;
    }
    v32 = *((unsigned __int8 *)__dst + v28);
    if (v32 == v31)
    {
LABEL_39:
      memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
      v18 = v67 - 1;
      goto LABEL_40;
    }
    v32 = (char)v32;
    if ((char)v32 == 63)
    {
      if ((char)v31 != 31)
      {
        v34 = v31 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v33 = v31 == 31 || v32 == 31;
      if (!v33)
      {
        v34 = v31 & 0xFFE0FFFF | ((v32 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v35 = *(_DWORD *)(v8 + 200);
        if (v35 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v35 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v34;
        *(_DWORD *)(v8 + 200) += 4;
        v21 = (char *)__dst;
        v22 = v67;
        goto LABEL_39;
      }
    }
    v34 = (char)v31 | (32 * v32) | 0x91000000;
    goto LABEL_36;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
LABEL_66:
  __break(1u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574660;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574660;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 176);
    v23 = *(unsigned __int8 *)(a1 + 177);
    v24 = *(unsigned __int8 *)(a1 + 178);
    v69 = 0;
    if (*(_BYTE *)(a1 + 176))
    {
      v71 = *(unsigned __int8 *)(a1 + 176);
      v22 = 1;
      v69 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v23 | 0x100;
      v69 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v24 | 0x200;
      v69 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_69;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_69;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v22 = v69 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v17, v18, v19, v20, v21);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v71;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v68 = v50;
              v66 = v47;
              v67 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v66;
              v46 = v67;
              v50 = v68;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v70;
        v58 = v70;
        v47 = v52;
      }
      v59 = &v72[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v70;
      }
      v22 = v58 - v50;
LABEL_63:
      v69 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
LABEL_70:
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574660;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574660;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_73:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = *(_QWORD *)(a1 + 168);
  __dst = v71;
  v69 = 2;
  if (v15)
  {
    v71[0] = v15;
    v18 = 1;
    v70 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v71[v18++] = v16 | 0x100;
  v70 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_73;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_73;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v70 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v70;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
    v40 = v70 - 1;
    v36 = v70 == 1;
    v70 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v70)
          {
            v67 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v65 = v46 - a2;
              v66 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v66[v65];
            }
            v42 = (unsigned __int8 *)v67;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v70;
      v50 = v70;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v70;
    }
    v18 = v50 - v45;
LABEL_64:
    v70 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v71 != __dst)
  {
    if (__dst)
    {
      __dst = 0;
      v69 = 0;
      WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v59, v60, v61, v62, v63, v64);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<unsigned long (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;

  v30 = 0;
  v31 = 2;
  v9 = *(_QWORD *)(a1 + 3960);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v10 & 1) != 0)
  {
    v22 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v23 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v28 = v9;
      v26 = v23;
      v27 = WTF::fastMalloc((WTF *)0x10);
      v9 = v28;
      *(_QWORD *)v27 = v22;
      *(_DWORD *)(v27 + 8) = v26;
      v25 = 1;
      v22 = v27;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v10 = v22 | v25;
  }
  v29 = v10;
  v18 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v9, &v29, &v31, &v30, a5, a6, a7, a8);
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v18 & 1) != 0)
  {
    v19 = 1;
    v20 = 255;
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 0xFFFFFFFFLL, v12, v13, v14, v15, v16, v17);
    v20 = 0;
    v19 = 0;
  }
  if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v31 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  return v20 | (v19 << 8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574690;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574690;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  JSC::AssemblerBuffer *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  char *v69;
  JSC::AssemblerBuffer *v70;
  void *__dst;
  int v72;
  unsigned int v73;
  _WORD v74[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_77:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 177);
  __dst = v74;
  v72 = 2;
  if (v17 == 1)
  {
    if (v18 == 2)
      goto LABEL_70;
    v19 = 0;
  }
  else
  {
    v74[0] = v17 | 0x100;
    v19 = 1;
    v73 = 1;
    if (v18 == 2)
      goto LABEL_15;
  }
  v74[v19++] = v18 | 0x200;
  v73 = v19;
LABEL_15:
  v20 = (JSC::AssemblerBuffer *)(v8 + 56);
  do
  {
    v21 = 0;
    v22 = 0;
    v23 = (char *)__dst;
    v24 = v19;
    do
    {
      if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
        goto LABEL_77;
      v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
      v21 += 2;
    }
    while (2 * v19 != v21);
    v25 = 0;
    do
    {
      v26 = *((_BYTE *)__dst + v25) & 0x7F;
      if (v26 >= 0x40)
        goto LABEL_77;
      v22 &= ~(1 << v26);
      v25 += 2;
    }
    while (2 * v19 != v25);
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v27.i16[0] = vaddlv_u8(v27);
    v28 = v27.i32[0];
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.i32[0] + v28)
    {
      v30 = 0;
      if (v19 <= 1)
        v31 = 1;
      else
        v31 = v19;
      v32 = 2 * v31;
      while (1)
      {
        v33 = *((unsigned __int8 *)__dst + v30 + 1);
        if ((v33 & 0x7Fu) >= 0x40)
          goto LABEL_77;
        if (((v22 >> (v33 & 0x7F)) & 1) != 0)
          break;
        v30 += 2;
        if (v32 == v30)
          goto LABEL_66;
      }
      v34 = *((unsigned __int8 *)__dst + v30);
      if (v34 == v33)
      {
LABEL_64:
        memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
        v19 = v73 - 1;
        goto LABEL_65;
      }
      v35 = (char)v34;
      if ((char)v34 == 63)
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        if ((char)v33 != 31)
        {
          v39 = v33 & 0x1F | 0xD2800000;
          goto LABEL_61;
        }
      }
      else
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        v38 = v33 == 31 || v35 == 31;
        if (!v38)
        {
          v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
LABEL_61:
          if (v36 + 4 > v37)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v20, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v36 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v39;
          *(_DWORD *)(v8 + 200) += 4;
          v23 = (char *)__dst;
          v24 = v73;
          goto LABEL_64;
        }
      }
      v39 = (char)v33 | (32 * v35) | 0x91000000;
      goto LABEL_61;
    }
    v70 = v20;
    v40 = *(_BYTE *)__dst;
    v41 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v41, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v73 - 2);
    v42 = v73 - 1;
    v38 = v73 == 1;
    v73 = v42;
    v43 = (unsigned __int8 *)__dst;
    v44 = (unsigned __int8 *)__dst + 2 * v42;
    if (v38)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      a2 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = __dst;
      while (*v46 != v41)
      {
        v46 += 2;
        v45 -= 2;
        if (!v45)
          goto LABEL_44;
      }
      *v46 = v40;
LABEL_44:
      v47 = 0;
      v48 = v43;
      a2 = v44;
      v49 = (char *)v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != (char *)__dst + 2 * v73)
          {
            v69 = (char *)v44;
            if (v43 == a2)
            {
              v50 = (unsigned __int8 *)v49;
            }
            else
            {
              v67 = v48 - a2;
              v68 = v49;
              memmove(v49, a2, v48 - a2);
              v50 = (unsigned __int8 *)&v68[v67];
            }
            v44 = (unsigned __int8 *)v69;
          }
          a2 = v43 + 2;
          ++v47;
          v49 = (char *)v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v43 = (unsigned __int8 *)__dst;
      v51 = v73;
      v52 = v73;
      v44 = (unsigned __int8 *)v49;
    }
    v53 = &v43[2 * v51];
    v20 = v70;
    if (a2 != v53)
    {
      memmove(v44, a2, v53 - a2);
      v52 = v73;
    }
    v19 = v52 - v47;
LABEL_65:
    v73 = v19;
LABEL_66:
    ;
  }
  while (v19);
  v54 = __dst;
  if (v74 != __dst && __dst)
  {
    __dst = 0;
    v72 = 0;
    WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_70:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v55, v56, v57, v58, v59, v60, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v61, v62, v63, v64, v65, v66);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_4>::run(_DWORD *a1, _QWORD *a2)
{
  int v3;
  int v4;
  JSC::ExecutableAllocator *v5;
  unint64_t v6;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a1[5];
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (JSC::ExecutableAllocator *)a2[23];
  v6 = (unint64_t)v5 + (v3 - v4);
  if ((unint64_t)v5 <= v6 && (unint64_t)v5 + a2[1] >= v6)
  {
    v9 = a1[3];
    v8 = a1[4];
    if (v9 < 4)
      v10 = 0;
    else
      v10 = *(_DWORD *)((v9 & 0xFFFFFFFC) + a2[3] - 4);
    v11 = v9 - v10;
    if ((v8 & 2) != 0)
    {
      if ((v8 & 4) != 0)
      {
        v12 = v11;
        JSC::ARM64Assembler::linkJump(v5, &v12, v6);
      }
      else
      {
        JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v5 + v11 - 4), (unint64_t)v5 + v11 - 4, v6);
      }
    }
    else
    {
      v13 = v11 - 16;
      JSC::ARM64Assembler::linkPointer((uint64_t)v5, &v13, v6);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::ARM64Assembler::linkPointer(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  JSC *v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (JSC *)(a1 + *a2);
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)v3 & 0x1F | (32 * WORD1(a3)) | 0xF2A00000;
  LODWORD(v8) = *(_DWORD *)v3 & 0x1F | (32 * (unsigned __int16)a3) | 0xD2800000;
  HIDWORD(v8) = v5;
  v9 = ((a3 >> 27) & 0x1FFFE0 | v4 & 0x1F | 0xF2A00000) + 0x200000;
  if (v3 != (JSC *)(((unint64_t)v3 + 3) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  if (qword_1ECF4C1F8 > (unint64_t)v3 || qword_1ECF4C200 <= (unint64_t)v3)
    goto LABEL_19;
  if ((unint64_t)&v8 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE290);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < (unint64_t)v3 + 12)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE2B0);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(v3, &v8, (char *)0xC);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_QWORD *)v3 = v8;
    *((_DWORD *)v3 + 2) = v9;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
LABEL_19:
    *(_QWORD *)v3 = v8;
    *((_DWORD *)v3 + 2) = v9;
    return;
  }
  if (qword_1ECF4C1F0)
    v7 = qword_1ECF4C1F8;
  else
    v7 = 0;
  off_1ECF4C228((char *)v3 - v7, &v8, 12);
  if ((unint64_t)&v8 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x197CDE270);
  }
}

void JSC::ARM64Assembler::linkJump(JSC::ExecutableAllocator *a1, unsigned int *a2, unint64_t a3)
{
  JSC *v4;
  uint64_t v5;
  int v6;
  unint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  int v12;
  JSC::ExecutableAllocator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v4 = (JSC::ExecutableAllocator *)((char *)a1 + *a2);
  if (*(_DWORD *)v4 == -721215457)
  {
    v8 = (unint64_t)v4 - 4;
    v9 = *((_DWORD *)v4 - 1);
    v10 = (int)(v9 << 8) >> 13;
    if (v9 >> 25 == 42)
    {
      JSC::ARM64Assembler::linkConditionalBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(*((_DWORD *)v4 - 1) & 0xF ^ (v10 == 8), (unint64_t)v4 - 4, (uint64_t)v4 - 4, a3);
      return;
    }
    v11 = v9 & 0x1F;
    if ((v9 & 0x7E000000) == 0x34000000)
    {
      if (v10 == 8)
        v12 = !(v9 & 0x1000000);
      else
        v12 = HIBYTE(v9) & 1;
      JSC::ARM64Assembler::linkCompareAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(v12, v9 >> 31, v11, v8, (uint64_t)v4 - 4, a3);
      return;
    }
    if ((v9 & 0x7E000000) == 0x36000000)
    {
      JSC::ARM64Assembler::linkTestAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(HIBYTE(v9) & 1 ^ ((v9 & 0x7FFE0) == 256), (v9 >> 26) & 0x20 | (v9 >> 19) & 0x1F, v11, v8, (uint64_t)v4 - 4, a3);
      return;
    }
  }
  v5 = a3 - (_QWORD)v4;
  if ((unint64_t)(((uint64_t)(a3 - (_QWORD)v4) >> 2) + 0x2000000) >> 26)
  {
    v13 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(a1);
    v5 = JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v13, (unint64_t)v4, a3, v14, v15, v16, v17, v18)
       - (_QWORD)v4;
    if ((unint64_t)((v5 >> 2) + 0x2000000) >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x197CDE52CLL);
    }
  }
  v6 = (v5 >> 2) & 0x3FFFFFF | 0x14000000;
  v20 = v6;
  if (v4 != (JSC *)(((unint64_t)v4 + 3) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  if (qword_1ECF4C1F8 > (unint64_t)v4 || qword_1ECF4C200 <= (unint64_t)v4)
    goto LABEL_33;
  if ((unint64_t)&v20 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE4B4);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < (unint64_t)v4 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE4D4);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(v4, &v20, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)v4 = v20;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v6 = v20;
LABEL_33:
    *(_DWORD *)v4 = v6;
    return;
  }
  if (qword_1ECF4C1F0)
    v19 = qword_1ECF4C1F8;
  else
    v19 = 0;
  off_1ECF4C228((char *)v4 - v19, &v20, 4);
  if ((unint64_t)&v20 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x197CDE494);
  }
}

void JSC::ARM64Assembler::linkConditionalBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(int a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  int v7;
  BOOL v9;
  int *v10;
  unsigned int v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;

  if (((a2 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a2)
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  if ((unint64_t)(((uint64_t)(a4 - a3) >> 2) + 0x40000) >> 19)
  {
    v12 = a1 & 0xFFFFFFBF ^ 0x41 | 0x54000000;
    v19 = v12;
    if (qword_1ECF4C1F8 <= a2 && qword_1ECF4C200 > a2)
    {
      if ((unint64_t)&v19 - qword_1ECF4C028 < qword_1ECF4C030)
      {
        __break(0xC471u);
        JUMPOUT(0x197CDE89CLL);
      }
      if (qword_1ECF4C1F0)
        v14 = qword_1ECF4C200 >= a2 + 4;
      else
        v14 = 0;
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197CDE8DCLL);
      }
      if (qword_1ECF4C748)
        JSC::dumpJITMemory((JSC *)a2, &v19, (char *)4);
      if (byte_1ECF4C1E4)
      {
        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
        *(_DWORD *)a2 = v19;
        be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
LABEL_46:
        JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)0,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)(a2 + 4), a3 + 4, a4);
        return;
      }
      if (off_1ECF4C228)
      {
        if (qword_1ECF4C1F0)
          v17 = qword_1ECF4C1F8;
        else
          v17 = 0;
        off_1ECF4C228(a2 - v17, &v19, 4);
        if ((unint64_t)&v19 - qword_1ECF4C028 < qword_1ECF4C030)
        {
          __break(0xC471u);
          JUMPOUT(0x197CDEA30);
        }
        goto LABEL_46;
      }
      v12 = v19;
    }
    *(_DWORD *)a2 = v12;
    goto LABEL_46;
  }
  v7 = (8 * (a4 - a3)) & 0xFFFFE0 | a1 | 0x54000000;
  v20 = v7;
  if (qword_1ECF4C1F8 > a2 || qword_1ECF4C200 <= a2)
    goto LABEL_57;
  if ((unint64_t)&v20 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE87CLL);
  }
  if (qword_1ECF4C1F0)
    v9 = qword_1ECF4C200 >= a2 + 4;
  else
    v9 = 0;
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE8BCLL);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory((JSC *)a2, &v20, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a2 = v20;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    goto LABEL_18;
  }
  if (!off_1ECF4C228)
  {
    v7 = v20;
LABEL_57:
    *(_DWORD *)a2 = v7;
    goto LABEL_18;
  }
  if (qword_1ECF4C1F0)
    v16 = qword_1ECF4C1F8;
  else
    v16 = 0;
  off_1ECF4C228(a2 - v16, &v20, 4);
  if ((unint64_t)&v20 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE9E0);
  }
LABEL_18:
  v20 = -721215457;
  v10 = (int *)(a2 + 4);
  if (a2 + 4 != ((a2 + 7) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE85CLL);
  }
  if (qword_1ECF4C1F8 > (unint64_t)v10 || qword_1ECF4C200 <= (unint64_t)v10)
  {
    v15 = -721215457;
LABEL_48:
    *v10 = v15;
    return;
  }
  if ((unint64_t)&v20 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE924);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < a2 + 8)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDE944);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory((JSC *)(a2 + 4), &v20, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *v10 = v20;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v15 = v20;
    goto LABEL_48;
  }
  if (qword_1ECF4C1F0)
    v18 = qword_1ECF4C1F8;
  else
    v18 = 0;
  off_1ECF4C228((char *)v10 - v18, &v20, 4);
  if ((unint64_t)&v20 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_78:
    JUMPOUT(0x197CDE83CLL);
  }
}

void JSC::ARM64Assembler::linkCompareAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(int a1, int a2, char a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  int *v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  int v23;

  if (((a4 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a4)
  {
    __break(0xC471u);
    goto LABEL_83;
  }
  if ((unint64_t)(((uint64_t)(a6 - a5) >> 2) + 0x40000) >> 19)
  {
    if (a2)
      v14 = 0x80000000;
    else
      v14 = 0;
    if (a1)
      v15 = 872415296;
    else
      v15 = 889192512;
    v16 = (v15 | v14) & 0xFFFFFFE0 | a3 & 0x1F;
    v22 = v16;
    if (qword_1ECF4C1F8 > a4 || qword_1ECF4C200 <= a4)
      goto LABEL_67;
    if ((unint64_t)&v22 - qword_1ECF4C028 < qword_1ECF4C030)
    {
      __break(0xC471u);
      JUMPOUT(0x197CDEDF8);
    }
    if (!qword_1ECF4C1F0 || qword_1ECF4C200 < a4 + 4)
    {
      __break(0xC471u);
      JUMPOUT(0x197CDEE18);
    }
    if (qword_1ECF4C748)
      JSC::dumpJITMemory((JSC *)a4, &v22, (char *)4);
    if (byte_1ECF4C1E4)
    {
      be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
      *(_DWORD *)a4 = v22;
      be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
LABEL_56:
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)0,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)(a4 + 4), a5 + 4, a6);
      return;
    }
    if (!off_1ECF4C228)
    {
      v16 = v22;
LABEL_67:
      *(_DWORD *)a4 = v16;
      goto LABEL_56;
    }
    if (qword_1ECF4C1F0)
      v20 = qword_1ECF4C1F8;
    else
      v20 = 0;
    off_1ECF4C228(a4 - v20, &v22, 4);
    if ((unint64_t)&v22 - qword_1ECF4C028 >= qword_1ECF4C030)
      goto LABEL_56;
    __break(0xC471u);
LABEL_83:
    JUMPOUT(0x197CDEC30);
  }
  if (a2)
    v7 = 0x80000000;
  else
    v7 = 0;
  if (a1 == 1)
    v8 = 889192448;
  else
    v8 = 872415232;
  v9 = (v8 | v7) & 0xFF000000 | a3 & 0x1F | (32 * (((a6 - a5) >> 2) & 0x7FFFF));
  v23 = v9;
  if (qword_1ECF4C1F8 > a4 || qword_1ECF4C200 <= a4)
    goto LABEL_59;
  if ((unint64_t)&v23 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDEC70);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < a4 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDEC90);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory((JSC *)a4, &v23, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a4 = v23;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    goto LABEL_21;
  }
  if (!off_1ECF4C228)
  {
    v9 = v23;
LABEL_59:
    *(_DWORD *)a4 = v9;
    goto LABEL_21;
  }
  if (qword_1ECF4C1F0)
    v18 = qword_1ECF4C1F8;
  else
    v18 = 0;
  off_1ECF4C228(a4 - v18, &v23, 4);
  if ((unint64_t)&v23 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDEE90);
  }
LABEL_21:
  v23 = -721215457;
  v11 = (int *)(a4 + 4);
  if (a4 + 4 != ((a4 + 7) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    JUMPOUT(0x197CDEC50);
  }
  v12 = -721215457;
  if (qword_1ECF4C1F8 > (unint64_t)v11 || qword_1ECF4C200 <= (unint64_t)v11)
    goto LABEL_62;
  if ((unint64_t)&v23 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDECC4);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < a4 + 8)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDECE4);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory((JSC *)(a4 + 4), &v23, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *v11 = v23;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v12 = v23;
LABEL_62:
    *v11 = v12;
    return;
  }
  if (qword_1ECF4C1F0)
    v19 = qword_1ECF4C1F8;
  else
    v19 = 0;
  off_1ECF4C228((char *)v11 - v19, &v23, 4);
  if ((unint64_t)&v23 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDEEE0);
  }
}

void JSC::ARM64Assembler::linkTestAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(int a1, unsigned int a2, char a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unsigned int v9;
  int v10;
  unsigned int v11;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  if (((a4 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a4)
  {
    __break(0xC471u);
    goto LABEL_77;
  }
  v9 = a2 >> 5;
  if ((unint64_t)(((uint64_t)(a6 - a5) >> 2) + 0x2000) >> 14)
  {
    if (a1)
      v15 = 905969728;
    else
      v15 = 922746944;
    v16 = v15 & 0x7F07FFE0 | (v9 << 31) | ((a2 & 0x1F) << 19) | a3 & 0x1F;
    v21 = v16;
    if (qword_1ECF4C1F8 <= a4 && qword_1ECF4C200 > a4)
    {
      if ((unint64_t)&v21 - qword_1ECF4C028 < qword_1ECF4C030)
      {
        __break(0xC471u);
        JUMPOUT(0x197CDF1F4);
      }
      if (!qword_1ECF4C1F0 || qword_1ECF4C200 < a4 + 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197CDF234);
      }
      if (qword_1ECF4C748)
        JSC::dumpJITMemory((JSC *)a4, &v21, (char *)4);
      if (byte_1ECF4C1E4)
      {
        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
        *(_DWORD *)a4 = v21;
        be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
LABEL_43:
        JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)0,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)(a4 + 4), a5 + 4, a6);
        return;
      }
      if (off_1ECF4C228)
      {
        if (qword_1ECF4C1F0)
          v19 = qword_1ECF4C1F8;
        else
          v19 = 0;
        off_1ECF4C228(a4 - v19, &v21, 4);
        if ((unint64_t)&v21 - qword_1ECF4C028 < qword_1ECF4C030)
        {
          __break(0xC471u);
          JUMPOUT(0x197CDF38CLL);
        }
        goto LABEL_43;
      }
      v16 = v21;
    }
    *(_DWORD *)a4 = v16;
    goto LABEL_43;
  }
  if (a1 == 1)
    v10 = 922746880;
  else
    v10 = 905969664;
  v11 = v10 & 0x7F000000 | (v9 << 31) | ((a2 & 0x1F) << 19) | a3 & 0x1F | (32
                                                                                          * (((a6 - a5) >> 2) & 0x3FFF));
  v22 = v11;
  if (qword_1ECF4C1F8 > a4 || qword_1ECF4C200 <= a4)
    goto LABEL_55;
  if ((unint64_t)&v22 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF1D4);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < a4 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF214);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory((JSC *)a4, &v22, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a4 = v22;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    goto LABEL_18;
  }
  if (!off_1ECF4C228)
  {
    v11 = v22;
LABEL_55:
    *(_DWORD *)a4 = v11;
    goto LABEL_18;
  }
  if (qword_1ECF4C1F0)
    v18 = qword_1ECF4C1F8;
  else
    v18 = 0;
  off_1ECF4C228(a4 - v18, &v22, 4);
  if ((unint64_t)&v22 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF33CLL);
  }
LABEL_18:
  v22 = -721215457;
  v13 = (int *)(a4 + 4);
  if (a4 + 4 != ((a4 + 7) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF1B4);
  }
  v14 = -721215457;
  if (qword_1ECF4C1F8 > (unint64_t)v13 || qword_1ECF4C200 <= (unint64_t)v13)
    goto LABEL_61;
  if ((unint64_t)&v22 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF27CLL);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < a4 + 8)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF29CLL);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory((JSC *)(a4 + 4), &v22, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *v13 = v22;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v14 = v22;
LABEL_61:
    *v13 = v14;
    return;
  }
  if (qword_1ECF4C1F0)
    v20 = qword_1ECF4C1F8;
  else
    v20 = 0;
  off_1ECF4C228((char *)v13 - v20, &v22, 4);
  if ((unint64_t)&v22 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_77:
    JUMPOUT(0x197CDF194);
  }
}

void JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)0,(JSC::MachineCodeCopyMode)1>(JSC::ExecutableAllocator *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  int v5;
  BOOL v7;
  JSC::ExecutableAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = a3 - a2;
  if ((unint64_t)(((uint64_t)(a3 - a2) >> 2) + 0x2000000) >> 26)
  {
    v10 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(a1);
    v4 = JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v10, a2, a3, v11, v12, v13, v14, v15) - a2;
    if ((unint64_t)((v4 >> 2) + 0x2000000) >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x197CDF570);
    }
  }
  v5 = (v4 >> 2) & 0x3FFFFFF | 0x14000000;
  v17 = v5;
  if ((JSC::ExecutableAllocator *)(((unint64_t)a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a1)
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  if (qword_1ECF4C1F8 > (unint64_t)a1 || qword_1ECF4C200 <= (unint64_t)a1)
    goto LABEL_25;
  if ((unint64_t)&v17 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF4F0);
  }
  if (qword_1ECF4C1F0)
    v7 = qword_1ECF4C200 >= (unint64_t)a1 + 4;
  else
    v7 = 0;
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF510);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(a1, &v17, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a1 = v17;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v5 = v17;
LABEL_25:
    *(_DWORD *)a1 = v5;
    return;
  }
  if (qword_1ECF4C1F0)
    v16 = qword_1ECF4C1F8;
  else
    v16 = 0;
  ((void (*)(char *, int *, uint64_t))off_1ECF4C228)((char *)a1 - v16, &v17, 4);
  if ((unint64_t)&v17 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x197CDF4D0);
  }
}

void JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>(JSC::ExecutableAllocator *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  int v5;
  BOOL v7;
  JSC::ExecutableAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = a3 - a2;
  if ((unint64_t)(((uint64_t)(a3 - a2) >> 2) + 0x2000000) >> 26)
  {
    v10 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(a1);
    v4 = JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v10, a2, a3, v11, v12, v13, v14, v15) - a2;
    if ((unint64_t)((v4 >> 2) + 0x2000000) >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x197CDF768);
    }
  }
  v5 = (v4 >> 2) & 0x3FFFFFF | 0x94000000;
  v17 = v5;
  if ((JSC::ExecutableAllocator *)(((unint64_t)a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a1)
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  if (qword_1ECF4C1F8 > (unint64_t)a1 || qword_1ECF4C200 <= (unint64_t)a1)
    goto LABEL_25;
  if ((unint64_t)&v17 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF6E8);
  }
  if (qword_1ECF4C1F0)
    v7 = qword_1ECF4C200 >= (unint64_t)a1 + 4;
  else
    v7 = 0;
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x197CDF708);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(a1, &v17, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a1 = v17;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    return;
  }
  if (!off_1ECF4C228)
  {
    v5 = v17;
LABEL_25:
    *(_DWORD *)a1 = v5;
    return;
  }
  if (qword_1ECF4C1F0)
    v16 = qword_1ECF4C1F8;
  else
    v16 = 0;
  ((void (*)(char *, int *, uint64_t))off_1ECF4C228)((char *)a1 - v16, &v17, 4);
  if ((unint64_t)&v17 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x197CDF6C8);
  }
}

WTF *WTF::ScopedLambdaFunctor<void ()(void),JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_5>::implFunction(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF *result;
  WTF *v11;
  unint64_t v12;
  WTF *v14;
  _BYTE v15[8];
  WTF *v16;
  WTF *v17;
  int v18;
  WTF *v19;
  int v20;

  JSC::CallFrameShuffler::CallFrameShuffler((JSC::CallFrameShuffler *)v15, *(JSC::CCallHelpers **)(a1 + 16), *(const JSC::CallFrameShuffleData **)(a1 + 24));
  JSC::CallFrameShuffler::prepareForTailCall((JSC::CallFrameShuffler *)v15);
  v8 = v19;
  if (v19)
  {
    v19 = 0;
    v20 = 0;
    WTF::fastFree((unint64_t)v8, v1, v2, v3, v4, v5, v6, v7);
  }
  v9 = v17;
  if (v17)
  {
    v17 = 0;
    v18 = 0;
    WTF::fastFree((unint64_t)v9, v1, v2, v3, v4, v5, v6, v7);
  }
  result = v16;
  if (v16)
  {
    do
    {
      v11 = (WTF *)*((_QWORD *)result + 5);
      v12 = *(_QWORD *)result;
      if ((WTF *)((char *)result + 16) != *(WTF **)result && v12 != 0)
      {
        *(_QWORD *)result = 0;
        *((_DWORD *)result + 2) = 0;
        v14 = result;
        WTF::fastFree(v12, v1, v2, v3, v4, v5, v6, v7);
        result = v14;
      }
      WTF::fastFree((unint64_t)result, v1, v2, v3, v4, v5, v6, v7);
      result = v11;
    }
    while (v11);
  }
  return result;
}

void WTF::ScopedLambdaFunctor<void ()(void),JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_6>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblyHelpers *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  WTF *v32;
  WTF *v33;
  int v34;
  WTF *v35;
  int v36;
  unsigned int v37;
  char v38;
  char **v39;

  v9 = *(JSC::AssemblyHelpers **)(a1 + 24);
  if (*(_WORD *)(**(_QWORD **)(a1 + 16) + 18) != 369)
  {
    v23 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v23 != -1)
    {
      v31 = &v38;
      v39 = &v31;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(v9, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result, a3, a4, a5, a6, a7, a8);
    if ((**(_BYTE **)(a1 + 40) & 0x40) != 0)
      goto LABEL_24;
    v29 = 1 << **(_BYTE **)(a1 + 40);
    v30 = **(unsigned __int8 **)(a1 + 48);
    if (v30 != 255)
    {
      if ((v30 & 0x40) != 0)
      {
LABEL_24:
        __break(1u);
        return;
      }
      v29 |= 1 << v30;
    }
    JSC::CCallHelpers::prepareForTailCallSlow((uint64_t)v9, v29 | 1, 0, v24, v25, v26, v27, v28);
    return;
  }
  JSC::CallFrameShuffler::CallFrameShuffler((JSC::CallFrameShuffler *)&v31, v9, *(const JSC::CallFrameShuffleData **)(a1 + 32));
  if (v37 <= 3)
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  JSC::CallFrameShuffler::addNew((uint64_t)&v31, 0, *(_QWORD *)(*((_QWORD *)v35 + 3) + 24), *(_BYTE *)(*((_QWORD *)v35 + 3) + 32));
  JSC::CallFrameShuffler::prepareForTailCall((JSC::CallFrameShuffler *)&v31);
  v17 = v35;
  if (v35)
  {
    v35 = 0;
    v36 = 0;
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  }
  v18 = v33;
  if (v33)
  {
    v33 = 0;
    v34 = 0;
    WTF::fastFree((unint64_t)v18, v10, v11, v12, v13, v14, v15, v16);
  }
  v19 = v32;
  if (v32)
  {
    do
    {
      v20 = (WTF *)*((_QWORD *)v19 + 5);
      v21 = *(_QWORD *)v19;
      if ((WTF *)((char *)v19 + 16) != *(WTF **)v19 && v21 != 0)
      {
        *(_QWORD *)v19 = 0;
        *((_DWORD *)v19 + 2) = 0;
        WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
      }
      WTF::fastFree((unint64_t)v19, v10, v11, v12, v13, v14, v15, v16);
      v19 = v20;
    }
    while (v20);
  }
}

void JSC::CCallHelpers::prepareForTailCallSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  unsigned int v95[3];

  if ((a2 & 1) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if ((a2 & 4) != 0)
      {
        if ((a2 & 8) != 0)
        {
          if ((a2 & 0x10) != 0)
          {
            if ((a2 & 0x20) != 0)
            {
              if ((a2 & 0x40) != 0)
              {
                if ((a2 & 0x80) != 0)
                {
                  if ((a2 & 0x100) != 0)
                  {
                    if ((a2 & 0x200) != 0)
                    {
                      if ((a2 & 0x400) != 0)
                      {
                        if ((a2 & 0x800) != 0)
                        {
                          if ((a2 & 0x1000) != 0)
                          {
                            if ((a2 & 0x2000) != 0)
                            {
                              if ((a2 & 0x4000) != 0)
                              {
                                if ((a2 & 0x8000) != 0)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x197CE0170);
                                }
                                v9 = 15;
                              }
                              else
                              {
                                v9 = 14;
                              }
                            }
                            else
                            {
                              v9 = 13;
                            }
                          }
                          else
                          {
                            v9 = 12;
                          }
                        }
                        else
                        {
                          v9 = 11;
                        }
                      }
                      else
                      {
                        v9 = 10;
                      }
                    }
                    else
                    {
                      v9 = 9;
                    }
                  }
                  else
                  {
                    v9 = 8;
                  }
                }
                else
                {
                  v9 = 7;
                }
              }
              else
              {
                v9 = 6;
              }
            }
            else
            {
              v9 = 5;
            }
          }
          else
          {
            v9 = 4;
          }
        }
        else
        {
          v9 = 3;
        }
      }
      else
      {
        v9 = 2;
      }
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = (1 << v9) | a2;
  if ((v10 & 1) != 0)
  {
    if ((v10 & 2) != 0)
    {
      if ((v10 & 4) != 0)
      {
        if ((v10 & 8) != 0)
        {
          if ((v10 & 0x10) != 0)
          {
            if ((v10 & 0x20) != 0)
            {
              if ((v10 & 0x40) != 0)
              {
                if ((v10 & 0x80) != 0)
                {
                  if ((v10 & 0x100) != 0)
                  {
                    if ((v10 & 0x200) != 0)
                    {
                      if ((v10 & 0x400) != 0)
                      {
                        if ((v10 & 0x800) != 0)
                        {
                          if ((v10 & 0x1000) != 0)
                          {
                            if ((v10 & 0x2000) != 0)
                            {
                              if ((v10 & 0x4000) != 0)
                              {
                                if ((v10 & 0x8000) != 0)
                                {
                                  __break(0xC471u);
LABEL_109:
                                  JUMPOUT(0x197CE0088);
                                }
                                v11 = 15;
                              }
                              else
                              {
                                v11 = 14;
                              }
                            }
                            else
                            {
                              v11 = 13;
                            }
                          }
                          else
                          {
                            v11 = 12;
                          }
                        }
                        else
                        {
                          v11 = 11;
                        }
                      }
                      else
                      {
                        v11 = 10;
                      }
                    }
                    else
                    {
                      v11 = 9;
                    }
                  }
                  else
                  {
                    v11 = 8;
                  }
                }
                else
                {
                  v11 = 7;
                }
              }
              else
              {
                v11 = 6;
              }
            }
            else
            {
              v11 = 5;
            }
          }
          else
          {
            v11 = 4;
          }
        }
        else
        {
          v11 = 3;
        }
      }
      else
      {
        v11 = 2;
      }
    }
    else
    {
      v11 = 1;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = v9;
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v11 | 0xB84203A0;
  v14 = *(_DWORD *)(a1 + 200);
  v15 = v14 + 4;
  *(_DWORD *)(a1 + 200) = v14 + 4;
  if ((v14 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v12 | 0xF84103A0;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load32(a1, v12 | 0x1C00000000, v12, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch32(a1, 9, v12, v11, v16, v17, v18, v19, (uint64_t)v95);
  v27 = v12;
  if ((_DWORD)v12 != (_DWORD)v11)
  {
    v28 = *(_DWORD *)(a1 + 200);
    if (v28 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, v21, v22, v23, v24, v25, v26);
      v28 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = v11 | ((_DWORD)v12 << 16) | 0xAA0003E0;
    *(_DWORD *)(a1 + 200) += 4;
    v27 = v11;
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v95, a1, v21, v22, v23, v24, v25, v26);
  v36 = v11 | (32 * v11);
  v37 = v36 | 0x11001800;
  v38 = *(_DWORD *)(a1 + 200);
  if (v38 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = v37;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFELL, v11, v11);
  v46 = *(_DWORD *)(a1 + 200);
  if (v46 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v46 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v46) = v36 | 0x531D7000;
  v47 = *(_DWORD *)(a1 + 200);
  v48 = v47 + 4;
  *(_DWORD *)(a1 + 200) = v47 + 4;
  if ((v47 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v48 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v48) = v12 & 0xFFF0FFFF | ((v27 & 0xF) << 16) | 0x8B0003A0;
  v49 = *(_DWORD *)(a1 + 200);
  v50 = v49 + 4;
  *(_DWORD *)(a1 + 200) = v49 + 4;
  if ((v49 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = v11 | 0xB84103E0;
  v51 = *(_DWORD *)(a1 + 200);
  v52 = v51 + 4;
  *(_DWORD *)(a1 + 200) = v51 + 4;
  if ((v51 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v39, v40, v41, v42, v43, v44, v45);
    v52 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = v37;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFELL, v11, v11);
  v60 = *(_DWORD *)(a1 + 200);
  if (v60 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
    v60 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v60) = v36 | 0x531D7000;
  v61 = *(_DWORD *)(a1 + 200);
  v62 = v61 + 4;
  *(_DWORD *)(a1 + 200) = v61 + 4;
  if ((v61 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
    v62 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v62) = -129989698;
  v63 = *(_DWORD *)(a1 + 200);
  v64 = v63 + 4;
  *(_DWORD *)(a1 + 200) = v63 + 4;
  if ((v63 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
    v64 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v64) = (v36 | 0xD1002000) + 0x2000;
  v65 = *(_DWORD *)(a1 + 200);
  v66 = v65 + 4;
  *(_DWORD *)(a1 + 200) = v65 + 4;
  if ((v65 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
    v66 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v66) = v12 & 0xFFFFFE1F | (32 * (v12 & 0xF)) | (v27 << 16) | 0xCB000000;
  v67 = *(_DWORD *)(a1 + 200);
  v68 = v67 + 4;
  *(_DWORD *)(a1 + 200) = v67 + 4;
  if ((v67 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
    v68 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v68) = -130022467;
  v69 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v69; v69 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v69)
  {
    if ((v69 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
      v69 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -721215457;
    v69 = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  v70 = v36 | 0xD1002000;
  v71 = v69;
  if ((v69 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, v54, v55, v56, v57, v58, v59);
    v71 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = v70;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_109;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, ((unint64_t)v11 << 8) | 0x1F, 0x200000000uLL, *(char *)(a1 + 272), v56, v57, v58, v59);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CE00A8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::store64(a1, *(_BYTE *)(a1 + 272), v12 & 0xFFFFFFFFFFFFF0FFLL | ((unint64_t)(v11 & 0xF) << 8), 0x200000000uLL, v72, v73, v74, v75);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, v11, v76, v77, v78, v79, (uint64_t)v95, v80);
  v94 = v69;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v95, (unsigned int *)&v94, a1, v81, v82, v83, v84, v85);
  v93 = *(_DWORD *)(a1 + 200);
  if (v93 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v86, v87, v88, v89, v90, v91, v92);
    v93 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = (32 * v12) | 0x9100001F;
  *(_DWORD *)(a1 + 200) += 4;
}

uint64_t JSC::CallFrameShuffler::addNew(uint64_t a1, char a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a3 == 17)
  {
    result = WTF::fastMalloc((WTF *)0x30);
    v9 = result;
    *(_QWORD *)result = result + 16;
    *(_QWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 24) = a3;
    *(_BYTE *)(result + 32) = a4;
    *(_WORD *)(result + 33) = -1;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    result = JSC::CallFrameShuffler::getCachedRecovery(a1, a3);
    if (result)
    {
      v9 = result;
    }
    else
    {
      v9 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v9 = v9 + 16;
      *(_QWORD *)(v9 + 8) = 1;
      *(_QWORD *)(v9 + 24) = a3;
      *(_BYTE *)(v9 + 32) = a4;
      *(_WORD *)(v9 + 33) = -1;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v9;
      result = JSC::CallFrameShuffler::setCachedRecovery(a1, a3, a4, v9);
    }
  }
  v10 = *(char *)(v9 + 33);
  if (v10 != -1)
  {
    if (v10 >= 0x40uLL)
      goto LABEL_11;
    *(_QWORD *)(a1 + 8 * v10 + 600) = 0;
  }
  v11 = a2;
  if (v11 < 0x40)
  {
    *(_QWORD *)(a1 + 8 * v11 + 600) = v9;
    *(_BYTE *)(v9 + 33) = a2;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateWhicheverInt52Operand,JSC::DFG::SpeculateWhicheverInt52Operand>(uint64_t a1, JSC::DFG::SpeculativeJIT *this, JSC::DFG::SpeculateWhicheverInt52Operand *a3, JSC::DFG::SpeculateWhicheverInt52Operand *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  JSC::DFG::SpeculativeJIT *v11;
  uint64_t v13;
  int v14;
  JSC::DFG::SpeculateWhicheverInt52Operand *v15;
  int v16;
  unsigned int v17;
  unint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  *(_QWORD *)a1 = this;
  *(_BYTE *)(a1 + 8) = -1;
  v8 = ~*(_DWORD *)((*((_QWORD *)a3 + 1) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v9 = *((unsigned int *)this + 1001);
  if (v8 >= v9)
    goto LABEL_19;
  v11 = this;
  v13 = *((_QWORD *)this + 499);
  v14 = *(_DWORD *)(v13 + 24 * (int)v8 + 8);
  if (v14 == 1)
    goto LABEL_3;
  v20 = ~*(_DWORD *)((*((_QWORD *)a4 + 1) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= v9)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x197CE03F4);
  }
  if (*(_DWORD *)(v13 + 24 * (int)v20 + 8) == 1)
  {
    v15 = a4;
    goto LABEL_4;
  }
  v21 = v14 == 2 && (*((_QWORD *)a3 + 1) & 0xFF00FFFFFFFFFFFFLL) == (*((_QWORD *)a4 + 1) & 0xFF00FFFFFFFFFFFFLL);
  if (!v21
    || (v22 = JSC::DFG::SpeculateWhicheverInt52Operand::gpr(a3, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8),
        v30 = JSC::DFG::SpeculateWhicheverInt52Operand::gpr(a4, v23, v24, v25, v26, v27, v28, v29),
        v11 = *(JSC::DFG::SpeculativeJIT **)a1,
        v22 != v30))
  {
    LOBYTE(v16) = JSC::DFG::SpeculativeJIT::allocate(v11, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
LABEL_3:
  v15 = a3;
LABEL_4:
  v16 = JSC::DFG::SpeculateWhicheverInt52Operand::gpr(v15, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v16 > 15)
    v17 = -1;
  else
    v17 = v16;
  ++*((_DWORD *)v11 + 3 * v17 + 1196);
LABEL_8:
  *(_BYTE *)(a1 + 8) = v16;
  return a1;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(uint64_t a1, const char *a2)
{
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  void (**v39)(WTF::StringPrintStream *__hidden);
  WTF *v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v39 = off_1E3572250;
    v40 = (WTF *)v42;
    v41 = xmmword_199122F80;
    v42[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v39, "%s", a2);
    v39[5]((WTF::StringPrintStream *)&v39);
    if (v40)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v40, v41, (uint64_t *)&v36);
      v10 = v36;
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_DWORD *)(a1 + 200);
    v37 = v11;
    v36 = 0;
    v38 = v10;
    v12 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v12 == *(_DWORD *)(a1 + 224))
    {
      v13 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v12 + 1, (unint64_t)&v37);
      v14 = *(unsigned int *)(a1 + 228);
      v15 = *(_QWORD *)(a1 + 216) + 16 * v14;
      *(_DWORD *)v15 = *(_DWORD *)v13;
      v16 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v15 + 8) = v16;
      v17 = v38;
      *(_DWORD *)(a1 + 228) = v14 + 1;
      v38 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, v3, v4, v5, v6, v7, v8, v9);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 216) + 16 * v12;
      *(_DWORD *)v18 = v11;
      *(_QWORD *)(v18 + 8) = v10;
      *(_DWORD *)(a1 + 228) = v12 + 1;
    }
    v19 = v36;
    v36 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v3, v4, v5, v6, v7, v8, v9);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    if (v40 != (WTF *)v42)
      WTF::fastFree((unint64_t)v40, v3, v4, v5, v6, v7, v8, v9);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [114]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Compute the bucketCount = Capacity / LoadFactor and bucketIndex = hashTableStartIndex + (hash & bucketCount - 1).");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [74]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Try to find the matched entryKey in the chain located in the bucketIndex.");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [52]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Check wether the current entryKey is a deleted one.");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [103]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "The current entryKey doesn't match the target key. Then, get the next entry in the chain and continue.");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  unint64_t v9;
  int v10;
  int v11;
  int v14;
  unsigned int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  char v43;
  char v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  _BYTE *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  unsigned int *v85;
  JSC::AssemblerBuffer *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t *v96;
  void *__dst;
  uint64_t v99;
  _WORD v100[4];
  unint64_t v101;
  unsigned int *v102;

  v10 = a8;
  v11 = a7;
  v14 = a4;
  v17 = 1;
  v96 = (unint64_t *)(a2 + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, 1, a2 + 5752, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a7, a8);
  v25 = (uint64_t)v100;
  __dst = v100;
  v99 = 3;
  if (v11 == 1)
  {
    v17 = 0;
  }
  else
  {
    v100[0] = v11 | 0x100;
    HIDWORD(v99) = 1;
  }
  if (v10 != 2)
  {
    v100[v17++] = v10 | 0x200;
    HIDWORD(v99) = v17;
  }
  if (a9 != 3)
  {
    v100[v17++] = a9 | 0x300;
    HIDWORD(v99) = v17;
LABEL_8:
    while (1)
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v17;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
          goto LABEL_102;
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v17 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_102;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v17 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
        break;
      v43 = *(_BYTE *)__dst;
      v44 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v44, v20, v21, v22, v23, v24);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v99) - 2);
      v45 = (HIDWORD(v99) - 1);
      v41 = HIDWORD(v99) == 1;
      HIDWORD(v99) = v45;
      v9 = (unint64_t)__dst;
      v46 = (char *)__dst + 2 * v45;
      if (v41)
      {
        v53 = 0;
        v54 = 0;
        v49 = 0;
        v18 = v46;
      }
      else
      {
        v47 = 2 * v45;
        v48 = __dst;
        while (*v48 != v44)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_36;
        }
        *v48 = v43;
LABEL_36:
        v49 = 0;
        v50 = v9;
        v18 = v46;
        v51 = v46;
        do
        {
          if (*(unsigned __int8 *)v9 == *(unsigned __int8 *)(v9 + 1))
          {
            v52 = (char *)v9;
            if (v51 != (char *)__dst + 2 * HIDWORD(v99))
            {
              v95 = v46;
              if ((_BYTE *)v9 == v18)
              {
                v52 = v51;
              }
              else
              {
                v93 = v50 - (_QWORD)v18;
                v94 = v51;
                memmove(v51, v18, v50 - (_QWORD)v18);
                v52 = &v94[v93];
              }
              v46 = v95;
            }
            v18 = (_BYTE *)(v9 + 2);
            ++v49;
            v51 = v52;
          }
          v9 += 2;
          v50 += 2;
        }
        while (v9 < (unint64_t)v46);
        v9 = (unint64_t)__dst;
        v53 = HIDWORD(v99);
        v54 = HIDWORD(v99);
        v46 = v51;
      }
      v55 = (_BYTE *)(v9 + 2 * v53);
      if (v18 != v55)
      {
        memmove(v46, v18, v55 - v18);
        v54 = HIDWORD(v99);
      }
      v17 = v54 - v49;
LABEL_56:
      HIDWORD(v99) = v17;
LABEL_57:
      if (!v17)
      {
        v56 = __dst;
        if (v100 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v99) = 0;
          WTF::fastFree((unint64_t)v56, v18, v19, v20, v21, v22, v23, v24);
        }
        goto LABEL_64;
      }
    }
    v9 = 0;
    if (v17 <= 1)
      v35 = 1;
    else
      v35 = v17;
    v36 = 2 * v35;
    while (1)
    {
      v37 = *((unsigned __int8 *)__dst + v9 + 1);
      if ((v37 & 0x7Fu) >= 0x40)
        goto LABEL_102;
      if (((v27 >> (v37 & 0x7F)) & 1) != 0)
        break;
      v9 += 2;
      if (v36 == v9)
        goto LABEL_57;
    }
    v38 = *((unsigned __int8 *)__dst + v9);
    if (v38 == v37)
    {
LABEL_55:
      memmove(&v28[v9], &v28[v9 + 2], 2 * v29 - v9 - 2);
      v17 = HIDWORD(v99) - 1;
      goto LABEL_56;
    }
    if ((char)v38 == 63)
    {
      v39 = *(_DWORD *)(a2 + 200);
      v40 = *(_DWORD *)(a2 + 192);
      if (v37 != 31)
      {
        v42 = v37 & 0x1F | 0xD2800000;
        goto LABEL_52;
      }
    }
    else
    {
      v39 = *(_DWORD *)(a2 + 200);
      v40 = *(_DWORD *)(a2 + 192);
      v41 = (char)v37 == 31 || (char)v38 == 31;
      if (!v41)
      {
        v42 = v37 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
LABEL_52:
        if (v39 + 4 > v40)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
          v39 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
        *(_DWORD *)(a2 + 200) += 4;
        v28 = (char *)__dst;
        v29 = HIDWORD(v99);
        goto LABEL_55;
      }
    }
    v42 = (char)v37 | (32 * (char)v38) | 0x91000000;
    goto LABEL_52;
  }
  if (v17)
    goto LABEL_8;
LABEL_64:
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a6, 0, v20, v21, v22, v23, v24);
  else
    JSC::MacroAssemblerARM64::load64(a2, (a5 << 35) + 0x380000001ALL, 0, v20, v21, v22, v23, v24);
  JSC::DFG::SpeculativeJIT::appendCall(a2, a3, v57, v58, v59, v60, v61, v62, a1);
  __dst = (void *)2;
  v102 = 0;
  v9 = *(_QWORD *)(a2 + 3960);
  v67 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v67 & 1) != 0)
  {
    v25 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
    if ((v67 & 2) != 0
      || ((v89 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v92 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v92 = v25;
      *(_DWORD *)(v92 + 8) = v89;
      v91 = 1;
      v25 = v92;
    }
    else
    {
      v91 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
      v25 = v89 << 36;
    }
    v67 = v25 | v91;
  }
  v101 = v67;
  LODWORD(v9) = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v9, &v101, (uint64_t *)&__dst, &v102, v63, v64, v65, v66);
  if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v101 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  if ((v9 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v19, v20, v21, v22, v23, v24);
    LOBYTE(v25) = 0;
    goto LABEL_70;
  }
  v75 = *(unsigned int *)(a2 + 5764);
  if ((_DWORD)v75)
  {
    v76 = 0;
    v77 = 16 * v75;
    v78 = (char *)(*(_QWORD *)(a2 + 5752) + 2);
    while (1)
    {
      v80 = *v78;
      v78 += 16;
      v79 = v80;
      if ((v80 & 0x40) != 0)
        goto LABEL_102;
      v76 |= 1 << v79;
      v77 -= 16;
      if (!v77)
      {
        if ((v14 & 0x40) != 0)
          goto LABEL_102;
        goto LABEL_96;
      }
    }
  }
  v76 = 0;
  if ((v14 & 0x40) != 0)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
LABEL_96:
  LOBYTE(v25) = 1;
  v81 = v76 | (1 << v14);
  if ((v81 & 2) == 0)
    goto LABEL_70;
  v82 = (unsigned __int16)~(_WORD)v81 & 0xFFFE;
  if (!v82)
  {
    LOBYTE(v25) = -1;
    goto LABEL_70;
  }
  LODWORD(v25) = __clz(__rbit64(v82));
  if ((_DWORD)v25 != 1)
  {
    if ((_DWORD)v25 != 31)
    {
      v83 = v25 | 0xAA0103E0;
      v85 = (unsigned int *)(a2 + 200);
      v84 = *(_DWORD *)(a2 + 200);
      v86 = (JSC::AssemblerBuffer *)(a2 + 56);
      v87 = v84 + 4;
      v88 = *(_DWORD *)(a2 + 192);
LABEL_104:
      if (v87 > v88)
      {
        JSC::AssemblerBuffer::outOfLineGrow(v86, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        v84 = *v85;
      }
      *(_DWORD *)(*(_QWORD *)v86 + v84) = v83;
      *v85 += 4;
      goto LABEL_70;
    }
LABEL_103:
    v85 = (unsigned int *)(a2 + 200);
    v84 = *(_DWORD *)(a2 + 200);
    v86 = (JSC::AssemblerBuffer *)(a2 + 56);
    v87 = v84 + 4;
    v88 = *(_DWORD *)(a2 + 192);
    v83 = -1862270913;
    goto LABEL_104;
  }
LABEL_70:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  if (v14)
  {
    if (v14 == 31)
    {
      v68 = -1862270945;
    }
    else if (v14 == -1)
    {
      v68 = -1442774017;
    }
    else
    {
      v68 = v14 | 0xAA0003E0;
    }
    v70 = (unsigned int *)(a2 + 200);
    v69 = *(_DWORD *)(a2 + 200);
    if (v69 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
      v69 = *v70;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v69) = v68;
    *v70 += 4;
  }
  v71 = *(_DWORD *)(a2 + 5764);
  if (v71)
  {
    v72 = v71 - 1;
    v73 = 16 * (v71 - 1);
    while (*(_DWORD *)(a2 + 5764) > v72)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a2 + 5752) + v73, v19, v20, v21, v22, v23, v24);
      v73 -= 16;
      if (--v72 == -1)
        goto LABEL_83;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_83:
    *(_BYTE *)(a2 + 5768) = 0;
    if (*(_DWORD *)(a2 + 5760))
    {
      if (*(_DWORD *)(a2 + 5764))
        *(_DWORD *)(a2 + 5764) = 0;
      v74 = *v96;
      if (*v96)
      {
        *(_QWORD *)(a2 + 5752) = 0;
        *(_DWORD *)(a2 + 5760) = 0;
        WTF::fastFree(v74, v18, v19, v20, v21, v22, v23, v24);
      }
    }
    if ((_DWORD)v9)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v25, v19, v20, v21, v22, v23, v24);
  }
}

unint64_t WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = v9;
      v18 = v7 + 16 * v8;
      v19 = v7;
      do
      {
        *(_DWORD *)v17 = *(_DWORD *)v19;
        v20 = *(_QWORD *)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v17 + 8) = v20;
        v21 = *(WTF::StringImpl **)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::~StringImpl(v21, v10, v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
          }
          else
          {
            *(_DWORD *)v21 -= 2;
          }
        }
        v19 += 16;
        v17 += 16;
      }
      while (v19 != v18);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574D50;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574D50;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574D50;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  __int16 v72;
  _BYTE v73[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 192) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 176);
    v23 = *(unsigned __int8 *)(a1 + 177);
    v24 = *(unsigned __int8 *)(a1 + 178);
    v70 = 0;
    if (*(_BYTE *)(a1 + 176))
    {
      v72 = *(unsigned __int8 *)(a1 + 176);
      v22 = 1;
      v70 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v73[2 * v22++ - 2] = v23 | 0x100;
      v70 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        v60 = *(_DWORD *)(a2 + 200);
        if (v60 + 4 > *(_DWORD *)(a2 + 192))
        {
LABEL_71:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
          v60 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v60) = -763363325;
        *(_DWORD *)(a2 + 200) += 4;
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v61, v62, v63, v64, v65, v66);
        return;
      }
    }
    else
    {
      *(_WORD *)&v73[2 * v22++ - 2] = v24 | 0x200;
      v70 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v73[v25 - 1] & 0x40) != 0)
        {
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        v26 |= 1 << v73[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v73[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_70;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v73[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_70;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v73[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v70;
        }
        memmove(&v73[v33 - 2], &v73[v33], 2 * v27 - v33 - 2);
        v22 = v70 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v72);
      v44 = v72;
      JSC::MacroAssemblerARM64::swap(a2, (char)v72, SHIBYTE(v72), v17, v18, v19, v20, v21);
      memmove(&v72, v73, 2 * v70 - 2);
      v45 = v70 - 1;
      v41 = v70 == 1;
      v71 = v45;
      v46 = (unsigned __int8 *)&v72;
      v47 = &v73[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v72;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v72;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v73[2 * v71 - 2])
            {
              v69 = v50;
              v67 = v47;
              v68 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v67;
              v46 = v68;
              v50 = v69;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v71;
        v58 = v71;
        v47 = v52;
      }
      v59 = &v73[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v71;
      }
      v22 = v58 - v50;
LABEL_63:
      v70 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::AssemblerBuffer *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v12 = 0;
    LOBYTE(v13) = 0;
    goto LABEL_5;
  }
  LOBYTE(v13) = *(_BYTE *)(a1 + 102);
  v40 = 0;
  v41 = 2;
  v21 = *(_QWORD *)(a2 + 3960);
  v22 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v22 & 1) != 0)
  {
    v35 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v9 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v9 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v9 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = v8;
      *(_DWORD *)(v38 + 8) = v9;
      v37 = 1;
      v8 = v38;
    }
    else
    {
      v37 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v8 = v9 << 36;
    }
    v22 = v8 | v37;
    v21 = v35;
  }
  v39 = v22;
  v23 = (JSC::AssemblerBuffer *)JSC::DFG::Graph::willCatchExceptionInMachineFrame(v21, &v39, &v41, &v40, a5, a6, a7, a8);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  if ((v23 & 1) != 0)
  {
    v24 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          break;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_36;
      }
    }
    else
    {
      v25 = 0;
LABEL_36:
      if ((v13 & 0x40) == 0)
      {
        v12 = 1;
        v30 = v25 | (1 << v13);
        if ((v30 & 2) == 0)
        {
          LOBYTE(v13) = 1;
          goto LABEL_27;
        }
        v31 = (unsigned __int16)~(_WORD)v30 & 0xFFFE;
        if (!v31)
        {
          v12 = 1;
          LOBYTE(v13) = -1;
          goto LABEL_27;
        }
        v13 = __clz(__rbit64(v31));
        if (v13 == 1)
        {
          v12 = 1;
          goto LABEL_27;
        }
        if (v13 == 31)
        {
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
          LODWORD(v9) = -1862270913;
        }
        else
        {
          LODWORD(v9) = v13 | 0xAA0103E0;
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
        }
        if (v33 <= v34)
        {
LABEL_54:
          *(_DWORD *)(*(_QWORD *)v23 + v32) = v9;
          *(_DWORD *)v8 += 4;
          v12 = 1;
          goto LABEL_27;
        }
LABEL_62:
        JSC::AssemblerBuffer::outOfLineGrow(v23, a2, a3, a4, a5, a6, a7, a8);
        v32 = *(_DWORD *)v8;
        goto LABEL_54;
      }
    }
    __break(1u);
    goto LABEL_62;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v13) = 0;
  v12 = 0;
LABEL_27:
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v14 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v14 == 31)
    {
      v15 = -1862270945;
    }
    else if (v14 == 255)
    {
      v15 = -1442774017;
    }
    else
    {
      v15 = v14 | 0xAA0003E0;
    }
    v17 = (unsigned int *)(a2 + 200);
    v16 = *(_DWORD *)(a2 + 200);
    if (v16 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *v17;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v15;
    *v17 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v18 = *(_DWORD *)(a1 + 116);
  if (!v18)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (v12)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v13, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v19 = v18 - 1;
  v20 = 16 * (v18 - 1);
  while (*(_DWORD *)(a1 + 116) > v19)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v20, a3, a4, a5, a6, a7, a8);
    v20 -= 16;
    if (--v19 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574D50;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574D50;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  char *v67;
  char *v68;
  void *__dst;
  int v70;
  unsigned int v71;
  _WORD v72[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_75:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = *(_QWORD *)(a1 + 168);
  __dst = v72;
  v70 = 2;
  if (v15)
  {
    v72[0] = v15;
    v18 = 1;
    v71 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v72[v18++] = v16 | 0x100;
  v71 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_75;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_75;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_75;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v71 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v71;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v71 - 2);
    v40 = v71 - 1;
    v36 = v71 == 1;
    v71 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v71)
          {
            v68 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v66 = v46 - a2;
              v67 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v67[v66];
            }
            v42 = (unsigned __int8 *)v68;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v71;
      v50 = v71;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v71;
    }
    v18 = v50 - v45;
LABEL_64:
    v71 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v72 != __dst && __dst)
  {
    __dst = 0;
    v70 = 0;
    WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  v53 = *(_DWORD *)(v8 + 200);
  if (v53 + 4 > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v53 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v53) = -763363325;
  *(_DWORD *)(v8 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v60, v61, v62, v63, v64, v65);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&,JSC::ARM64Registers::RegisterID&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, __int128 *a8, char *a9, char *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  char v25;
  char v26;
  char v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  char v33;
  char v34;
  char v35;
  int v36;
  _BYTE *v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  WTF *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v54;
  unsigned int v55;
  _BYTE v56[24];
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE v60[24];
  WTF *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[32];

  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = *((unsigned int *)a2 + 3);
  v54 = v56;
  v55 = v18;
  if (v18 < 3)
  {
    v19 = v56;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_37;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v54 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v52 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v51 = *a8;
  v26 = *a9;
  v27 = *a10;
  v28 = v55;
  v57 = (WTF *)v60;
  v58 = 2;
  v59 = v55;
  if (v55 < 3)
  {
    v29 = v60;
    if (!v55)
      goto LABEL_14;
  }
  else
  {
    if (v55 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CE299CLL);
    }
    v29 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v55));
    v58 = 12 * v55 / 0xC;
    v57 = (WTF *)v29;
    v28 = v55;
  }
  v30 = v54;
  v31 = &v54[12 * v28];
  do
  {
    *(_DWORD *)v29 = *(_DWORD *)v30;
    *(_QWORD *)(v29 + 4) = *(_QWORD *)(v30 + 4);
    v30 += 12;
    v29 += 12;
  }
  while (v30 != v31);
LABEL_14:
  v32 = v59;
  v61 = (WTF *)v64;
  v62 = 2;
  v63 = v59;
  if (v59 < 3)
  {
    v37 = v64;
    if (!v59)
      goto LABEL_21;
LABEL_19:
    v38 = v57;
    v39 = (WTF *)((char *)v57 + 12 * v32);
    do
    {
      *(_DWORD *)v37 = *(_DWORD *)v38;
      *(_QWORD *)(v37 + 4) = *(_QWORD *)((char *)v38 + 4);
      v38 = (WTF *)((char *)v38 + 12);
      v37 += 12;
    }
    while (v38 != v39);
    goto LABEL_21;
  }
  if (v59 >= 0x15555556)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197CE2994);
  }
  v33 = v24;
  v34 = v27;
  v35 = v26;
  v36 = 12 * v59;
  v37 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v59));
  v62 = (v36 & 0xFFFFFFFC) / 0xC;
  v61 = (WTF *)v37;
  v32 = v59;
  v26 = v35;
  v27 = v34;
  v24 = v33;
  if (v59)
    goto LABEL_19;
LABEL_21:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v61, v22);
  v47 = v61;
  if (v64 != (_BYTE *)v61 && v61 != 0)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = off_1E3574DE0;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v17 + 100) = v23;
  *(_BYTE *)(v17 + 101) = v24;
  *(_BYTE *)(v17 + 102) = v25;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  v49 = v17 + 104;
  *(_QWORD *)(v17 + 112) = 2;
  if (!v23)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v22, 0, v49, v25, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v45, v46);
  v50 = v57;
  if (v60 != (_BYTE *)v57 && v57)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree((unint64_t)v50, v40, v49, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = &off_1E3574DB0;
  *(_QWORD *)(v17 + 152) = v52;
  *(_OWORD *)(v17 + 160) = v51;
  *(_BYTE *)(v17 + 176) = v26;
  *(_BYTE *)(v17 + 177) = v27;
  *a1 = v17;
  if (v56 != v54)
  {
    if (v54)
      WTF::fastFree((unint64_t)v54, v40, v49, v42, v43, v44, v45, v46);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574DE0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574DE0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  __int16 v76;
  int64_t v77;
  char *v78;
  char *v79;
  void *__dst;
  int v81;
  unsigned int v82;
  _WORD v83[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(0xC471u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 177);
  __dst = v83;
  v81 = 2;
  if (v17 == 1)
  {
    if (v18 == 2)
      goto LABEL_69;
    v19 = 0;
  }
  else
  {
    v83[0] = v17 | 0x100;
    v19 = 1;
    v82 = 1;
    if (v18 == 2)
      goto LABEL_15;
  }
  v83[v19++] = v18 | 0x200;
  v82 = v19;
  do
  {
LABEL_15:
    v20 = 0;
    v21 = 0;
    v22 = (char *)__dst;
    v23 = v19;
    do
    {
      if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
        goto LABEL_99;
      v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
      v20 += 2;
    }
    while (2 * v19 != v20);
    v24 = 0;
    do
    {
      v25 = *((_BYTE *)__dst + v24) & 0x7F;
      if (v25 >= 0x40)
        goto LABEL_99;
      v21 &= ~(1 << v25);
      v24 += 2;
    }
    while (2 * v19 != v24);
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.i32[0];
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.i32[0] + v27)
    {
      v29 = 0;
      if (v19 <= 1)
        v30 = 1;
      else
        v30 = v19;
      v31 = 2 * v30;
      while (1)
      {
        v32 = *((unsigned __int8 *)__dst + v29 + 1);
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_99;
        if (((v21 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v29 += 2;
        if (v31 == v29)
          goto LABEL_65;
      }
      v33 = *((unsigned __int8 *)__dst + v29);
      if (v33 == v32)
      {
LABEL_63:
        memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
        v19 = v82 - 1;
        goto LABEL_64;
      }
      v34 = (char)v33;
      if ((char)v33 == 63)
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        if ((char)v32 != 31)
        {
          v38 = v32 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        v37 = v32 == 31 || v34 == 31;
        if (!v37)
        {
          v38 = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v35 + 4 > v36)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v35 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v38;
          *(_DWORD *)(v8 + 200) += 4;
          v22 = (char *)__dst;
          v23 = v82;
          goto LABEL_63;
        }
      }
      v38 = (char)v32 | (32 * v34) | 0x91000000;
      goto LABEL_60;
    }
    v39 = *(_BYTE *)__dst;
    v40 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v40, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v82 - 2);
    v41 = v82 - 1;
    v37 = v82 == 1;
    v82 = v41;
    v42 = (unsigned __int8 *)__dst;
    v43 = (unsigned __int8 *)__dst + 2 * v41;
    if (v37)
    {
      v50 = 0;
      v51 = 0;
      v46 = 0;
      a2 = v43;
    }
    else
    {
      v44 = 2 * v41;
      v45 = __dst;
      while (*v45 != v40)
      {
        v45 += 2;
        v44 -= 2;
        if (!v44)
          goto LABEL_43;
      }
      *v45 = v39;
LABEL_43:
      v46 = 0;
      v47 = v42;
      a2 = v43;
      v48 = (char *)v43;
      do
      {
        if (*v42 == v42[1])
        {
          v49 = v42;
          if (v48 != (char *)__dst + 2 * v82)
          {
            v79 = (char *)v43;
            if (v42 == a2)
            {
              v49 = (unsigned __int8 *)v48;
            }
            else
            {
              v77 = v47 - a2;
              v78 = v48;
              memmove(v48, a2, v47 - a2);
              v49 = (unsigned __int8 *)&v78[v77];
            }
            v43 = (unsigned __int8 *)v79;
          }
          a2 = v42 + 2;
          ++v46;
          v48 = (char *)v49;
        }
        v42 += 2;
        v47 += 2;
      }
      while (v42 < v43);
      v42 = (unsigned __int8 *)__dst;
      v50 = v82;
      v51 = v82;
      v43 = (unsigned __int8 *)v48;
    }
    v52 = &v42[2 * v50];
    if (a2 != v52)
    {
      memmove(v43, a2, v52 - a2);
      v51 = v82;
    }
    v19 = v51 - v46;
LABEL_64:
    v82 = v19;
LABEL_65:
    ;
  }
  while (v19);
  v53 = __dst;
  if (v83 != __dst && __dst)
  {
    __dst = 0;
    v81 = 0;
    WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v67 = 0;
    v68 = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
      goto LABEL_74;
    }
    v76 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102), v62, v63, v64, v65, v66);
    v68 = v76;
    v67 = HIBYTE(v76);
  }
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_88;
      }
      goto LABEL_100;
    }
LABEL_88:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101))
  {
    if (v67)
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t WTF::ScopedLambdaFunctor<std::tuple<JSC::JSValueRegs,JSC::DataFormat,JSC::DFG::SpeculativeJIT::CanUseFlush> ()(JSC::DataFormat),JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_1>::implFunction(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v15;
  char v16;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v15, *(JSC::DFG::SpeculativeJIT **)(a1 + 24), a3, a4, a5, a6, a7, a8);
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *v10;
  *v10 = v15;
  v12 = *((char *)v10 + 8);
  *((_BYTE *)v10 + 8) = v16;
  if (v11)
    v13 = v12 == -1;
  else
    v13 = 1;
  if (!v13)
  {
    if (v12 > 15)
      v12 = -1;
    --*(_DWORD *)(v11 + 12 * v12 + 4784);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 8) | (a2 << 8) | 0x10000u;
}

uint64_t WTF::ScopedLambdaFunctor<std::tuple<JSC::JSValueRegs,JSC::DataFormat,JSC::DFG::SpeculativeJIT::CanUseFlush> ()(JSC::DataFormat),JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_2>::implFunction(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v16;
  char v17;

  if (a2 == 4)
  {
    v9 = 255;
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v16, *(JSC::DFG::SpeculativeJIT **)(a1 + 24), a3, a4, a5, a6, a7, a8);
    v11 = *(uint64_t **)(a1 + 16);
    v12 = *v11;
    *v11 = v16;
    v13 = *((char *)v11 + 8);
    *((_BYTE *)v11 + 8) = v17;
    if (v12)
      v14 = v13 == -1;
    else
      v14 = 1;
    if (!v14)
    {
      if (v13 > 15)
        v13 = -1;
      --*(_DWORD *)(v12 + 12 * v13 + 4784);
    }
    v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 8);
  }
  return v9 | (a2 << 8) | 0x10000u;
}

void JSC::MacroAssemblerARM64::branchAtomicWeakCAS<8,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::BaseIndex>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x8_t v45;
  int v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t *v49;
  int v50;
  char *v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int *v62;
  int *v63;
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  int v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  WTF *v75;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  _BYTE v92[24];
  WTF *v93;
  uint64_t v94;
  _DWORD v95[6];

  JSC::MacroAssemblerARM64::and32(a2, (JSC::ARM64LogicalImmediate *)0xFF, a3, a3);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v16 = *(unsigned __int8 *)(a2 + 304);
  JSC::MacroAssemblerARM64::lshift64((_DWORD *)a2, ((__int16)a5 >> 8), HIDWORD(a5), (char)v16, v12, v13, v14, v15);
  if (a5 == 31)
  {
    v25 = (char)v16 | ((v16 & 0x1F) << 16);
    v26 = -1960811552;
    goto LABEL_5;
  }
  v24 = (a5 & 0x1F) << 16;
  if (v16 != 31)
  {
    v25 = v24 | (32 * (v16 & 0x1F));
    v26 = v16 & 0x1F | 0x8B000000;
LABEL_5:
    v27 = v25 | v26;
    goto LABEL_6;
  }
  v27 = v24 | 0x8B2063FF;
LABEL_6:
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v17, v18, v19, v20, v21, v22, v23);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = v27;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a2, a6, (char)v16, (char)v16, v20, v21, v22, v23);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CE3638);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v36 = *(char *)(a2 + 272);
  v93 = (WTF *)v95;
  v94 = 2;
  v90 = (WTF *)v92;
  v91 = 2;
  v37 = *(_DWORD *)(a2 + 200);
  if (v37 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v37 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v36 | (32 * (char)v16) | 0x85FFC00;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a2, 1, a3, v36, v32, v33, v34, v35, (uint64_t)&v88);
  v46 = v88;
  if (v88 != -1)
  {
    v47 = HIDWORD(v91);
    if (HIDWORD(v91) == (_DWORD)v91)
    {
      v48 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, (void *)(HIDWORD(v91) + 1), (unint64_t)&v88, v40, v41, v42, v43, v44);
      v50 = *v48;
      v49 = (uint64_t *)(v48 + 1);
      v46 = v50;
      v47 = HIDWORD(v91);
    }
    else
    {
      v49 = &v89;
    }
    v51 = (char *)v90 + 12 * v47;
    *(_DWORD *)v51 = v46;
    *(_QWORD *)(v51 + 4) = *v49;
    ++HIDWORD(v91);
  }
  v52 = *(_DWORD *)(a2 + 200);
  if (v52 + 4 > *(_DWORD *)(a2 + 192))
  {
    v45 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v38, v39, v40, v41, v42, v43, v44).n128_u64[0];
    v52 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v52) = a4 | ((_DWORD)a3 << 16) | 0x800FC00 | (32 * (char)v16);
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, a3, v41, v42, v43, v44, (uint64_t)&v86, v45);
  v60 = v86;
  if (v86 != -1)
  {
    v61 = HIDWORD(v94);
    if (HIDWORD(v94) == (_DWORD)v94)
    {
      v62 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v93, (void *)(HIDWORD(v94) + 1), (unint64_t)&v86, v55, v56, v57, v58, v59);
      v64 = *v62;
      v63 = v62 + 1;
      v60 = v64;
      v61 = HIDWORD(v94);
    }
    else
    {
      v63 = &v87;
    }
    v65 = (char *)v93 + 12 * v61;
    *(_DWORD *)v65 = v60;
    *(_QWORD *)(v65 + 4) = *(_QWORD *)v63;
    ++HIDWORD(v94);
  }
  if (HIDWORD(v91))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v91);
    while (v67 < HIDWORD(v91))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v90 + v66), a2, v54, v55, v56, v57, v58, v59);
      ++v67;
      v66 += 12;
      if (v68 == v66)
        goto LABEL_27;
    }
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x197CE3618);
  }
LABEL_27:
  v69 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 2;
  v70 = v93;
  if (v93 == (WTF *)v95)
  {
    v71 = HIDWORD(v94);
    if (HIDWORD(v94))
    {
      v73 = &v95[3 * HIDWORD(v94)];
      v74 = v95;
      do
      {
        *(_DWORD *)v69 = *v74;
        *(_QWORD *)(v69 + 4) = *(_QWORD *)(v74 + 1);
        v74 += 3;
        v69 += 12;
      }
      while (v74 != v73);
    }
  }
  else
  {
    v93 = (WTF *)v95;
    *(_QWORD *)a1 = v70;
    v72 = v94;
    v71 = HIDWORD(v94);
    LODWORD(v94) = 2;
    *(_DWORD *)(a1 + 8) = v72;
  }
  HIDWORD(v94) = 0;
  *(_DWORD *)(a1 + 12) = v71;
  v75 = v90;
  if (v92 != (_BYTE *)v90 && v90 != 0)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    WTF::fastFree((unint64_t)v75, v53, v54, v55, v56, v57, v58, v59);
    v84 = v93;
    if (v95 != (_DWORD *)v93 && v93 != 0)
    {
      v93 = 0;
      LODWORD(v94) = 0;
      WTF::fastFree((unint64_t)v84, v77, v78, v79, v80, v81, v82, v83);
    }
  }
}

void JSC::MacroAssemblerARM64::branchAtomicWeakCAS<16,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::BaseIndex>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x8_t v45;
  int v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t *v49;
  int v50;
  char *v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int *v62;
  int *v63;
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  int v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  WTF *v75;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  _BYTE v92[24];
  WTF *v93;
  uint64_t v94;
  _DWORD v95[6];

  JSC::MacroAssemblerARM64::and32(a2, (JSC::ARM64LogicalImmediate *)0xFFFF, a3, a3);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v16 = *(unsigned __int8 *)(a2 + 304);
  JSC::MacroAssemblerARM64::lshift64((_DWORD *)a2, ((__int16)a5 >> 8), HIDWORD(a5), (char)v16, v12, v13, v14, v15);
  if (a5 == 31)
  {
    v25 = (char)v16 | ((v16 & 0x1F) << 16);
    v26 = -1960811552;
    goto LABEL_5;
  }
  v24 = (a5 & 0x1F) << 16;
  if (v16 != 31)
  {
    v25 = v24 | (32 * (v16 & 0x1F));
    v26 = v16 & 0x1F | 0x8B000000;
LABEL_5:
    v27 = v25 | v26;
    goto LABEL_6;
  }
  v27 = v24 | 0x8B2063FF;
LABEL_6:
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v17, v18, v19, v20, v21, v22, v23);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = v27;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a2, a6, (char)v16, (char)v16, v20, v21, v22, v23);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CE3A88);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v36 = *(char *)(a2 + 272);
  v93 = (WTF *)v95;
  v94 = 2;
  v90 = (WTF *)v92;
  v91 = 2;
  v37 = *(_DWORD *)(a2 + 200);
  if (v37 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v30, v31, v32, v33, v34, v35);
    v37 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v36 | (32 * (char)v16) | 0x485FFC00;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a2, 1, a3, v36, v32, v33, v34, v35, (uint64_t)&v88);
  v46 = v88;
  if (v88 != -1)
  {
    v47 = HIDWORD(v91);
    if (HIDWORD(v91) == (_DWORD)v91)
    {
      v48 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, (void *)(HIDWORD(v91) + 1), (unint64_t)&v88, v40, v41, v42, v43, v44);
      v50 = *v48;
      v49 = (uint64_t *)(v48 + 1);
      v46 = v50;
      v47 = HIDWORD(v91);
    }
    else
    {
      v49 = &v89;
    }
    v51 = (char *)v90 + 12 * v47;
    *(_DWORD *)v51 = v46;
    *(_QWORD *)(v51 + 4) = *v49;
    ++HIDWORD(v91);
  }
  v52 = *(_DWORD *)(a2 + 200);
  if (v52 + 4 > *(_DWORD *)(a2 + 192))
  {
    v45 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v38, v39, v40, v41, v42, v43, v44).n128_u64[0];
    v52 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v52) = a4 | ((_DWORD)a3 << 16) | 0x4800FC00 | (32 * (char)v16);
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, a3, v41, v42, v43, v44, (uint64_t)&v86, v45);
  v60 = v86;
  if (v86 != -1)
  {
    v61 = HIDWORD(v94);
    if (HIDWORD(v94) == (_DWORD)v94)
    {
      v62 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v93, (void *)(HIDWORD(v94) + 1), (unint64_t)&v86, v55, v56, v57, v58, v59);
      v64 = *v62;
      v63 = v62 + 1;
      v60 = v64;
      v61 = HIDWORD(v94);
    }
    else
    {
      v63 = &v87;
    }
    v65 = (char *)v93 + 12 * v61;
    *(_DWORD *)v65 = v60;
    *(_QWORD *)(v65 + 4) = *(_QWORD *)v63;
    ++HIDWORD(v94);
  }
  if (HIDWORD(v91))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v91);
    while (v67 < HIDWORD(v91))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v90 + v66), a2, v54, v55, v56, v57, v58, v59);
      ++v67;
      v66 += 12;
      if (v68 == v66)
        goto LABEL_27;
    }
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x197CE3A68);
  }
LABEL_27:
  v69 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 2;
  v70 = v93;
  if (v93 == (WTF *)v95)
  {
    v71 = HIDWORD(v94);
    if (HIDWORD(v94))
    {
      v73 = &v95[3 * HIDWORD(v94)];
      v74 = v95;
      do
      {
        *(_DWORD *)v69 = *v74;
        *(_QWORD *)(v69 + 4) = *(_QWORD *)(v74 + 1);
        v74 += 3;
        v69 += 12;
      }
      while (v74 != v73);
    }
  }
  else
  {
    v93 = (WTF *)v95;
    *(_QWORD *)a1 = v70;
    v72 = v94;
    v71 = HIDWORD(v94);
    LODWORD(v94) = 2;
    *(_DWORD *)(a1 + 8) = v72;
  }
  HIDWORD(v94) = 0;
  *(_DWORD *)(a1 + 12) = v71;
  v75 = v90;
  if (v92 != (_BYTE *)v90 && v90 != 0)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    WTF::fastFree((unint64_t)v75, v53, v54, v55, v56, v57, v58, v59);
    v84 = v93;
    if (v95 != (_DWORD *)v93 && v93 != 0)
    {
      v93 = 0;
      LODWORD(v94) = 0;
      WTF::fastFree((unint64_t)v84, v77, v78, v79, v80, v81, v82, v83);
    }
  }
}

void JSC::MacroAssemblerARM64::branchAtomicWeakCAS<32,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::BaseIndex>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  int v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t *v48;
  int v49;
  char *v50;
  int v51;
  unsigned int v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int *v62;
  int *v63;
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  int v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  WTF *v75;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  _BYTE v92[24];
  WTF *v93;
  uint64_t v94;
  _DWORD v95[6];

  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  v8 = a6;
  v13 = a5;
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v14 = *(unsigned __int8 *)(a2 + 304);
  v15 = (char)v14;
  JSC::MacroAssemblerARM64::lshift64((_DWORD *)a2, ((__int16)a5 >> 8), HIDWORD(a5), v15, a5, a6, a7, a8);
  if (v13 == 31)
  {
    v24 = v15 | ((v15 & 0x1F) << 16);
    v25 = -1960811552;
    goto LABEL_5;
  }
  v23 = (v13 & 0x1F) << 16;
  if (v14 != 31)
  {
    v24 = v23 | (32 * (v14 & 0x1F));
    v25 = v14 & 0x1F | 0x8B000000;
LABEL_5:
    v26 = v24 | v25;
    goto LABEL_6;
  }
  v26 = v23 | 0x8B2063FF;
LABEL_6:
  v27 = *(_DWORD *)(a2 + 200);
  if (v27 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v16, v17, v18, v19, v20, v21, v22);
    v27 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = v26;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a2, v8, v15, v15, v19, v20, v21, v22);
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CE3EC4);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v35 = *(char *)(a2 + 272);
  v93 = (WTF *)v95;
  v94 = 2;
  v90 = (WTF *)v92;
  v91 = 2;
  v36 = *(_DWORD *)(a2 + 200);
  if (v36 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v28, v29, v30, v31, v32, v33, v34);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = v35 | (32 * v15) | 0x885FFC00;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a2, 1, a3, v35, v31, v32, v33, v34, (uint64_t)&v88);
  v45 = v88;
  if (v88 != -1)
  {
    v46 = HIDWORD(v91);
    if (HIDWORD(v91) == (_DWORD)v91)
    {
      v47 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, (void *)(HIDWORD(v91) + 1), (unint64_t)&v88, v39, v40, v41, v42, v43);
      v49 = *v47;
      v48 = (uint64_t *)(v47 + 1);
      v45 = v49;
      v46 = HIDWORD(v91);
    }
    else
    {
      v48 = &v89;
    }
    v50 = (char *)v90 + 12 * v46;
    *(_DWORD *)v50 = v45;
    *(_QWORD *)(v50 + 4) = *v48;
    ++HIDWORD(v91);
  }
  v51 = 32 * v15;
  v52 = *(_DWORD *)(a2 + 200);
  if (v52 + 4 > *(_DWORD *)(a2 + 192))
  {
    v44 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v37, v38, v39, v40, v41, v42, v43).n128_u64[0];
    v52 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v52) = a4 | ((_DWORD)a3 << 16) | 0x8800FC00 | v51;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 0, a3, v40, v41, v42, v43, (uint64_t)&v86, v44);
  v60 = v86;
  if (v86 != -1)
  {
    v61 = HIDWORD(v94);
    if (HIDWORD(v94) == (_DWORD)v94)
    {
      v62 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v93, (void *)(HIDWORD(v94) + 1), (unint64_t)&v86, v55, v56, v57, v58, v59);
      v64 = *v62;
      v63 = v62 + 1;
      v60 = v64;
      v61 = HIDWORD(v94);
    }
    else
    {
      v63 = &v87;
    }
    v65 = (char *)v93 + 12 * v61;
    *(_DWORD *)v65 = v60;
    *(_QWORD *)(v65 + 4) = *(_QWORD *)v63;
    ++HIDWORD(v94);
  }
  if (HIDWORD(v91))
  {
    v66 = 0;
    v67 = 0;
    v68 = 12 * HIDWORD(v91);
    while (v67 < HIDWORD(v91))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v90 + v66), a2, v54, v55, v56, v57, v58, v59);
      ++v67;
      v66 += 12;
      if (v68 == v66)
        goto LABEL_27;
    }
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x197CE3EA4);
  }
LABEL_27:
  v69 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 2;
  v70 = v93;
  if (v93 == (WTF *)v95)
  {
    v71 = HIDWORD(v94);
    if (HIDWORD(v94))
    {
      v73 = &v95[3 * HIDWORD(v94)];
      v74 = v95;
      do
      {
        *(_DWORD *)v69 = *v74;
        *(_QWORD *)(v69 + 4) = *(_QWORD *)(v74 + 1);
        v74 += 3;
        v69 += 12;
      }
      while (v74 != v73);
    }
  }
  else
  {
    v93 = (WTF *)v95;
    *(_QWORD *)a1 = v70;
    v72 = v94;
    v71 = HIDWORD(v94);
    LODWORD(v94) = 2;
    *(_DWORD *)(a1 + 8) = v72;
  }
  HIDWORD(v94) = 0;
  *(_DWORD *)(a1 + 12) = v71;
  v75 = v90;
  if (v92 != (_BYTE *)v90 && v90 != 0)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    WTF::fastFree((unint64_t)v75, v53, v54, v55, v56, v57, v58, v59);
    v84 = v93;
    if (v95 != (_DWORD *)v93 && v93 != 0)
    {
      v93 = 0;
      LODWORD(v94) = 0;
      WTF::fastFree((unint64_t)v84, v77, v78, v79, v80, v81, v82, v83);
    }
  }
}

_QWORD *JSC::DFG::AssigningSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,1u>::~AssigningSlowPathGenerator(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  *a1 = off_1E3574838;
  v9 = a1[4];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = a1[3];
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::AssigningSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,1u>::~AssigningSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E3574838;
  v9 = *((_QWORD *)this + 4);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 3);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::DFG::AssigningSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64,1u>::generateInternal(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, *(_QWORD *)(a1 + 72), *(char *)(a1 + 64), v10, v11, v12, v13, v14);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, (uint64_t)a2, v15, v16, v17, v18, v19, v20);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3574E70;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3574E70;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int8 *v55;
  int64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  int v71;
  __int16 *v72;
  void *__dst;
  int v74;
  unsigned int v75;
  __int16 v76;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        v8 = (JSC::AssemblerBuffer *)((char *)v8 + 1);
        v18 += 16;
      }
      while ((unint64_t)v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = &v76;
  __dst = &v76;
  v23 = 1;
  v74 = 1;
  if (v21 != 1)
  {
    v76 = v21 | 0x100;
    v75 = 1;
    v24 = -1862270976;
    v25 = 1;
    do
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v25;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v25 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_82;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v25 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
      {
        v35 = 0;
        if (v25 <= 1)
          v36 = 1;
        else
          v36 = v25;
        v37 = 2 * v36;
        while (1)
        {
          v38 = *((unsigned __int8 *)__dst + v35 + 1);
          if ((v38 & 0x7Fu) >= 0x40)
            goto LABEL_82;
          if (((v27 >> (v38 & 0x7F)) & 1) != 0)
            break;
          v35 += 2;
          if (v37 == v35)
            goto LABEL_37;
        }
        v39 = *((unsigned __int8 *)__dst + v35);
        if (v39 != v38)
        {
          v39 = (char)v39;
          if ((char)v39 == 63)
          {
            if ((char)v38 == 31)
              goto LABEL_31;
            v8 = (JSC::AssemblerBuffer *)(v38 & 0x1F | 0xD2800000);
          }
          else
          {
            v40 = v38 == 31 || v39 == 31;
            if (!v40)
            {
              v8 = (JSC::AssemblerBuffer *)(v38 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0);
              goto LABEL_32;
            }
LABEL_31:
            v8 = (JSC::AssemblerBuffer *)((char)v38 | (32 * v39) | v24);
          }
LABEL_32:
          v41 = *(_DWORD *)(a2 + 200);
          if (v41 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v41 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = (_DWORD)v8;
          *(_DWORD *)(a2 + 200) += 4;
          v28 = (char *)__dst;
          v29 = v75;
        }
        memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
        v25 = v75 - 1;
        goto LABEL_36;
      }
      v71 = v24;
      v72 = v22;
      v70 = v19;
      v42 = *(_BYTE *)__dst;
      v43 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v13, v14, v15, v16, v17);
      memmove(__dst, (char *)__dst + 2, 2 * v75 - 2);
      v44 = v75 - 1;
      v40 = v75 == 1;
      v75 = v44;
      v45 = (unsigned __int8 *)__dst;
      v46 = (char *)__dst + 2 * v44;
      if (v40)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v11 = (char *)__dst + 2 * v44;
      }
      else
      {
        v51 = 2 * v44;
        v52 = __dst;
        while (*v52 != v43)
        {
          v52 += 2;
          v51 -= 2;
          if (!v51)
            goto LABEL_47;
        }
        *v52 = v42;
LABEL_47:
        v49 = 0;
        v53 = v45;
        v11 = v46;
        v54 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v55 = v45;
            if (v54 != (char *)__dst + 2 * v75)
            {
              if (v45 == (unsigned __int8 *)v11)
              {
                v55 = (unsigned __int8 *)v54;
              }
              else
              {
                v56 = v53 - (unsigned __int8 *)v11;
                memmove(v54, v11, v53 - (unsigned __int8 *)v11);
                v55 = (unsigned __int8 *)&v54[v56];
              }
            }
            v11 = (char *)(v45 + 2);
            ++v49;
            v54 = (char *)v55;
          }
          v45 += 2;
          v53 += 2;
        }
        while (v45 < (unsigned __int8 *)v46);
        v45 = (unsigned __int8 *)__dst;
        v47 = v75;
        v48 = v75;
        v46 = v54;
      }
      v50 = (char *)&v45[2 * v47];
      if (v11 != v50)
      {
        memmove(v46, v11, v50 - v11);
        v48 = v75;
      }
      v25 = v48 - v49;
      v19 = v70;
      v22 = v72;
      v23 = 1;
      v24 = v71;
LABEL_36:
      v75 = v25;
LABEL_37:
      ;
    }
    while (v25);
    v57 = __dst;
    if (v22 != __dst && __dst)
    {
      __dst = 0;
      v74 = 0;
      WTF::fastFree((unint64_t)v57, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v58, v59, v60, v61, v62, v63, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_63;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
LABEL_63:
    LODWORD(v19) = 0;
    LOBYTE(v20) = 0;
    goto LABEL_64;
  }
  v69 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), *(_BYTE *)(a1 + 74), v13, v14, v15, v16, v17);
  LOBYTE(v20) = v69;
  LODWORD(v19) = HIBYTE(v69);
LABEL_64:
  v64 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v64 == 31)
    {
      LODWORD(v22) = -1862270945;
    }
    else if (v64 == 255)
    {
      LODWORD(v22) = -1442774017;
    }
    else
    {
      LODWORD(v22) = v64 | 0xAA0003E0;
    }
    v23 = a2 + 200;
    v65 = *(_DWORD *)(a2 + 200);
    v8 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v65 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_83:
      JSC::AssemblerBuffer::outOfLineGrow(v8, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v65 = *(_DWORD *)v23;
    }
    *(_DWORD *)(*(_QWORD *)v8 + v65) = (_DWORD)v22;
    *(_DWORD *)v23 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_77;
  v66 = *(_DWORD *)(a1 + 92);
  if (!v66)
  {
LABEL_76:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_77:
    if (!*(_BYTE *)(a1 + 73))
    {
      if ((_DWORD)v19)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v20, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v67 = v66 - 1;
  v68 = 16 * (v66 - 1);
  while (*(_DWORD *)(a1 + 92) > v67)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v68, v12, v13, v14, v15, v16, v17);
    v68 -= 16;
    if (--v67 == -1)
      goto LABEL_76;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574ED0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574ED0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  int v78;
  __int16 *v79;
  void *__dst;
  int v81;
  unsigned int v82;
  __int16 v83;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v83;
  __dst = &v83;
  v81 = 1;
  if (v17 != 1)
  {
    v83 = v17 | 0x100;
    v82 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_92;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_92;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v78 = v19;
      v79 = v18;
      v77 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v82 - 2);
      v40 = v82 - 1;
      v35 = v82 == 1;
      v82 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v82)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v82;
        v44 = v82;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v82;
      }
      v20 = v44 - v45;
      v15 = v77;
      v18 = v79;
      v19 = v78;
LABEL_40:
      v82 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v81 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_92;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v82 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v82;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    v68 = 0;
    goto LABEL_68;
  }
  v76 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102), v62, v63, v64, v65, v66);
  v68 = v76;
  v67 = HIBYTE(v76);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
LABEL_93:
      __break(0xC471u);
      return;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101))
  {
    if (v67)
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(JSC::VM *,JSC::JSBigInt *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3574F30;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(JSC::VM *,JSC::JSBigInt *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3574F30;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(JSC::VM *,JSC::JSBigInt *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(JSC::VM *,JSC::JSBigInt *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  JSC::AssemblerBuffer *v19;
  int v20;
  __int16 *v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  char *v55;
  unsigned __int8 *v56;
  int64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  __int16 *v78;
  unsigned int v79;
  uint64_t v80;
  void *__dst;
  int v82;
  unsigned int v83;
  __int16 v84;
  unint64_t v85;
  unsigned int *v86;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v17, v11, v12, v13, v14, v15, v16);
        ++v18;
        v17 += 16;
      }
      while (v18 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(JSC::AssemblerBuffer **)(a1 + 136);
  v20 = *(unsigned __int8 *)(a1 + 144);
  v21 = &v84;
  __dst = &v84;
  v22 = 1;
  v82 = 1;
  if (v20 != 1)
  {
    v84 = v20 | 0x100;
    v83 = 1;
    v23 = a2 + 56;
    v24 = 2432696320;
    v25 = 1;
    do
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v25;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
        {
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v25 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_87;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v25 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
      {
        v35 = 0;
        if (v25 <= 1)
          v36 = 1;
        else
          v36 = v25;
        v37 = 2 * v36;
        while (1)
        {
          v38 = *((unsigned __int8 *)__dst + v35 + 1);
          if ((v38 & 0x7Fu) >= 0x40)
            goto LABEL_87;
          if (((v27 >> (v38 & 0x7F)) & 1) != 0)
            break;
          v35 += 2;
          if (v37 == v35)
            goto LABEL_37;
        }
        v39 = *((unsigned __int8 *)__dst + v35);
        if (v39 != v38)
        {
          v39 = (char)v39;
          if ((char)v39 == 63)
          {
            if ((char)v38 == 31)
              goto LABEL_31;
            v41 = v38 & 0x1F | 0xD2800000;
          }
          else
          {
            v40 = v38 == 31 || v39 == 31;
            if (!v40)
            {
              v41 = v38 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_32;
            }
LABEL_31:
            v41 = (char)v38 | (32 * v39) | v24;
          }
LABEL_32:
          v42 = *(_DWORD *)(a2 + 200);
          if (v42 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
            v42 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = v41;
          *(_DWORD *)(a2 + 200) += 4;
          v28 = (char *)__dst;
          v29 = v83;
        }
        memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
        v25 = v83 - 1;
        goto LABEL_36;
      }
      v79 = v24;
      v78 = v21;
      v43 = *(_BYTE *)__dst;
      v44 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v44, v12, v13, v14, v15, v16);
      memmove(__dst, (char *)__dst + 2, 2 * v83 - 2);
      v45 = v83 - 1;
      v40 = v83 == 1;
      v83 = v45;
      v46 = (unsigned __int8 *)__dst;
      v47 = (char *)__dst + 2 * v45;
      if (v40)
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v10 = (char *)__dst + 2 * v45;
      }
      else
      {
        v52 = 2 * v45;
        v53 = __dst;
        while (*v53 != v44)
        {
          v53 += 2;
          v52 -= 2;
          if (!v52)
            goto LABEL_47;
        }
        *v53 = v43;
LABEL_47:
        v50 = 0;
        v54 = v46;
        v10 = v47;
        v55 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v56 = v46;
            if (v55 != (char *)__dst + 2 * v83)
            {
              if (v46 == (unsigned __int8 *)v10)
              {
                v56 = (unsigned __int8 *)v55;
              }
              else
              {
                v57 = v54 - (unsigned __int8 *)v10;
                memmove(v55, v10, v54 - (unsigned __int8 *)v10);
                v56 = (unsigned __int8 *)&v55[v57];
              }
            }
            v10 = (char *)(v46 + 2);
            ++v50;
            v55 = (char *)v56;
          }
          v46 += 2;
          v54 += 2;
        }
        while (v46 < (unsigned __int8 *)v47);
        v46 = (unsigned __int8 *)__dst;
        v48 = v83;
        v49 = v83;
        v47 = v55;
      }
      v51 = (char *)&v46[2 * v48];
      if (v10 != v51)
      {
        memmove(v47, v10, v51 - v10);
        v49 = v83;
      }
      v25 = v49 - v50;
      v21 = v78;
      v22 = 1;
      v24 = v79;
LABEL_36:
      v83 = v25;
LABEL_37:
      ;
    }
    while (v25);
    v58 = __dst;
    if (v21 != __dst && __dst)
    {
      __dst = 0;
      v82 = 0;
      WTF::fastFree((unint64_t)v58, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v19, 0, v12, v13, v14, v15, v16);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v59, v60, v61, v62, v63, v64, (int *)&v80);
  *(_QWORD *)(a1 + 64) = v80;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_61;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0xFFFFFFFFLL, v11, v12, v13, v14, v15, v16);
LABEL_61:
    LODWORD(v21) = 0;
    v23 = 0;
    goto LABEL_62;
  }
  __dst = (void *)2;
  v86 = 0;
  v70 = *(_QWORD *)(a2 + 3960);
  v71 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v71 & 1) != 0)
  {
    v73 = *(_QWORD *)(v71 & 0xFFFFFFFF8);
    if ((v71 & 2) != 0
      || ((v74 = *(unsigned int *)((v71 & 0xFFFFFFFF8) + 8), (_DWORD)v74 != 0x3FFFFFFF)
        ? (v75 = (_DWORD)v74 == -1)
        : (v75 = 1),
          v75))
    {
      v76 = 2;
    }
    else if (v74 >> 28)
    {
      v77 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v77 = v73;
      *(_DWORD *)(v77 + 8) = v74;
      v76 = 1;
      v73 = v77;
    }
    else
    {
      v76 = *(_QWORD *)(v71 & 0xFFFFFFFF8);
      v73 = v74 << 36;
    }
    v71 = v73 | v76;
  }
  v85 = v71;
  v72 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v70, &v85, (uint64_t *)&__dst, &v86, v13, v14, v15, v16);
  if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v85 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  if ((v72 & 1) != 0)
  {
    LODWORD(v21) = 1;
    v23 = -1;
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0xFFFFFFFFLL, v11, v12, v13, v14, v15, v16);
    v23 = 0;
    LODWORD(v21) = 0;
  }
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
LABEL_62:
  v65 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v65 == 31)
    {
      v22 = -1862270945;
    }
    else if (v65 == 255)
    {
      v22 = -1442774017;
    }
    else
    {
      v22 = v65 | 0xAA0003E0;
    }
    v24 = a2 + 200;
    v66 = *(_DWORD *)(a2 + 200);
    v19 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v66 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_88:
      JSC::AssemblerBuffer::outOfLineGrow(v19, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
      v66 = *(_DWORD *)v24;
    }
    *(_DWORD *)(*(_QWORD *)v19 + v66) = v22;
    *(_DWORD *)v24 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_75;
  v67 = *(_DWORD *)(a1 + 92);
  if (!v67)
  {
LABEL_74:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_75:
    if ((_DWORD)v21)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v23, v11, v12, v13, v14, v15, v16);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v11, v12, v13, v14, v15, v16);
    return;
  }
  v68 = v67 - 1;
  v69 = 16 * (v67 - 1);
  while (*(_DWORD *)(a1 + 92) > v68)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v69, v11, v12, v13, v14, v15, v16);
    v69 -= 16;
    if (--v68 == -1)
      goto LABEL_74;
  }
  __break(0xC471u);
}

void WTF::ScopedLambdaFunctor<std::tuple<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID> ()(void),JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_4>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v8 = *(_QWORD *)(a1 + 16);
  if (*(unsigned __int8 *)(v8 + 16) == 255)
  {
    v10 = *(_QWORD *)v8;
    v9 = *(_QWORD *)(v8 + 8);
    v12 = 0;
    v11 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(v10, v9, (uint64_t)&v12, a4, a5, a6, a7, a8);
    if (v12 == 1)
    {
      *(_BYTE *)(v8 + 16) = v11;
    }
    else
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 3960), *(JSC::DFG::Node **)(v10 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
      __break(0xC471u);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_19,void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3574F60;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_19,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E3574F60;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_19,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  JSC::AssemblerBuffer *v38;
  int i;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  JSC::AssemblerBuffer *v44;
  unsigned int v45;
  int v46[2];
  char v47;
  __int16 v48;
  char v49;

  v9 = *(_QWORD *)(a1 + 8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 16), v9, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(v9 + 5768) = 1;
  if (*(_DWORD *)(a1 + 44))
  {
    v42 = 0;
    v43 = 0;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v9, *(_QWORD *)(a1 + 32) + v42, v10, v11, v12, v13, v14, v15);
      ++v43;
      v42 += 16;
    }
    while (v43 < *(unsigned int *)(a1 + 44));
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 352) + 16);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v9, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 48), 1, v11, v12, v13, v14, v15);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v16, 0, v17, v18, v19, v20, v21);
  JSC::DFG::SpeculativeJIT::appendCall(v9, (uint64_t)operationTriggerTierUpNowInLoop, v22, v23, v24, v25, v26, v27, v46);
  v35 = *(_DWORD *)(a1 + 44);
  if (v35)
  {
    v36 = v35 - 1;
    v37 = 16 * (v35 - 1);
    while (*(_DWORD *)(a1 + 44) > v36)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(v9, *(_QWORD *)(a1 + 32) + v37, v29, v30, v31, v32, v33, v34);
      v37 -= 16;
      if (--v36 == -1)
        goto LABEL_6;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_6:
    *(_BYTE *)(v9 + 5768) = 0;
    v38 = (JSC::AssemblerBuffer *)(v9 + 56);
    for (i = *(_DWORD *)(v9 + 200); i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v9 + 192))
      {
        v44 = v38;
        JSC::AssemblerBuffer::outOfLineGrow(v38, v28, v29, v30, v31, v32, v33, v34);
        v38 = v44;
        i = *(_DWORD *)(v9 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
      i = *(_DWORD *)(v9 + 200) + 4;
    }
    v40 = i;
    if ((i + 4) > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v38, v28, v29, v30, v31, v32, v33, v34);
      v40 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v40) = 335544320;
    *(_DWORD *)(v9 + 200) += 4;
    if (*(_BYTE *)(v9 + 328))
      v41 = 69;
    else
      v41 = 65;
    v46[0] = i;
    v46[1] = 0;
    v47 = v41;
    v48 = 15;
    v49 = -1;
    v45 = *(_DWORD *)(a1 + 52);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v46, &v45, v9, v30, v31, v32, v33, v34);
  }
}

_QWORD *WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,unsigned int>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,unsigned int,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 16);
    do
    {
      *v18++ = 0xFFFFFFFFLL;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (_DWORD *)(v6 + 8 * v21);
      if (*v22 <= 0xFFFFFFFD)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = 9 * ((*v22 + ~(*v22 << 15)) ^ ((*v22 + ~(*v22 << 15)) >> 10));
        v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
        do
        {
          v28 = v27 & v24;
          v27 = ++v25 + v28;
        }
        while (*(_DWORD *)(v23 + 8 * v28) != -1);
        v29 = (_QWORD *)(v23 + 8 * v28);
        *v29 = *(_QWORD *)v22;
        if (v22 == a3)
          v19 = v29;
      }
      ++v21;
    }
    while (v21 != v7);
    goto LABEL_19;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_20,void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3574F88;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_20,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  *(_QWORD *)this = &off_1E3574F88;
  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_20,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int i;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int *v89;
  char v90;
  __int16 v91;
  char v92;
  unsigned int v93;
  unsigned int v94[3];
  char v95;

  v9 = *(_QWORD *)(a1 + 8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 16), v9, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 28), v9, v10, v11, v12, v13, v14, v15);
  v22 = (_BYTE *)(v9 + 5768);
  *(_BYTE *)(v9 + 5768) = 1;
  if (*(_DWORD *)(a1 + 52))
  {
    v87 = 0;
    v88 = 0;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v9, *(_QWORD *)(a1 + 40) + v87, v16, v17, v18, v19, v20, v21);
      ++v88;
      v87 += 16;
    }
    while (v88 < *(unsigned int *)(a1 + 52));
  }
  v23 = *(unsigned __int8 *)(a1 + 56);
  v24 = *(_QWORD *)(*(_QWORD *)(v9 + 352) + 16);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v9, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 60), 1, v17, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v24, 0, v25, v26, v27, v28, v29);
  JSC::DFG::SpeculativeJIT::appendCall(v9, (uint64_t)operationTriggerOSREntryNow, v30, v31, v32, v33, v34, v35, (int *)v94);
  if (v23)
  {
    if (v23 == 31)
    {
      v44 = -1862270945;
    }
    else if (v23 == 255)
    {
      v44 = -1442774017;
    }
    else
    {
      v44 = v23 | 0xAA0003E0;
    }
    v46 = (unsigned int *)(v9 + 200);
    v45 = *(_DWORD *)(v9 + 200);
    if (v45 + 4 > *(_DWORD *)(v9 + 192))
    {
      v43 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v36, v37, v38, v39, v40, v41, v42).n128_u64[0];
      v45 = *v46;
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v45) = v44;
    *v46 += 4;
  }
  if (!*(_DWORD *)(a1 + 52))
  {
    JSC::MacroAssemblerARM64::branchTest64(v9, 0, *(char *)(a1 + 56), 0xFFFFFFFFLL, v39, v40, v41, v42, (uint64_t)v94, v43);
    v93 = *(_DWORD *)(a1 + 64);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v94, &v93, v9, v72, v73, v74, v75, v76);
LABEL_23:
    v77 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
    if (v77 != -1)
    {
      *(_QWORD *)v94 = &v95;
      v89 = v94;
      std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
    }
    JSC::AssemblyHelpers::emitRestoreCalleeSavesFor((JSC::AssemblyHelpers *)v9, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result, v66, v67, v68, v69, v70, v71);
    v85 = *(_BYTE *)(a1 + 56);
    v86 = *(_DWORD *)(v9 + 200);
    if (v86 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v78, v79, v80, v81, v82, v83, v84);
      v86 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v86) = (32 * (v85 & 0x1F)) | 0xD61F0000;
    *(_DWORD *)(v9 + 200) += 4;
    *v22 = 0;
    return;
  }
  JSC::MacroAssemblerARM64::branchTest64(v9, 1, *(char *)(a1 + 56), 0xFFFFFFFFLL, v39, v40, v41, v42, (uint64_t)v94, v43);
  v54 = *(_DWORD *)(a1 + 52);
  if (!v54)
  {
LABEL_15:
    *v22 = 0;
    for (i = *(_DWORD *)(v9 + 200); (signed int)i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(v9 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v47, v48, v49, v50, v51, v52, v53);
        i = *(_DWORD *)(v9 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
      i = *(_DWORD *)(v9 + 200) + 4;
    }
    v58 = i;
    if (i + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v47, v48, v49, v50, v51, v52, v53);
      v58 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v58) = 335544320;
    *(_DWORD *)(v9 + 200) += 4;
    if (*(_BYTE *)(v9 + 328))
      v59 = 69;
    else
      v59 = 65;
    v89 = (unsigned int *)i;
    v90 = v59;
    v91 = 15;
    v92 = -1;
    v93 = *(_DWORD *)(a1 + 64);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v89, &v93, v9, v49, v50, v51, v52, v53);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v94, v9, v60, v61, v62, v63, v64, v65);
    goto LABEL_23;
  }
  v55 = v54 - 1;
  v56 = 16 * (v54 - 1);
  while (*(_DWORD *)(a1 + 52) > v55)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v9, *(_QWORD *)(a1 + 40) + v56, v48, v49, v50, v51, v52, v53);
    v56 -= 16;
    if (--v55 == -1)
      goto LABEL_15;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574FE0;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574FE0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574FE0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  __int16 *v48;
  int v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  _BYTE v71[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 192) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(_DWORD *)(a1 + 176);
    v68 = 0;
    if ((_BYTE)v22)
    {
      v70 = v22;
      v23 = 1;
      v68 = 1;
    }
    else
    {
      v23 = 0;
    }
    if ((v22 & 0xFF00) != 0x100)
    {
      *(_WORD *)&v71[2 * v23++ - 2] = BYTE1(v22) | 0x100;
      v68 = v23;
    }
    if ((v22 & 0xFF0000) != 0x20000)
    {
      *(_WORD *)&v71[2 * v23++ - 2] = BYTE2(v22) | 0x200;
      v68 = v23;
    }
    if (HIBYTE(v22) == 3)
    {
      if (!v23)
      {
LABEL_71:
        v58 = *(_DWORD *)(a2 + 200);
        if (v58 + 4 > *(_DWORD *)(a2 + 192))
        {
LABEL_74:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
          v58 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v58) = -763363324;
        *(_DWORD *)(a2 + 200) += 4;
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v59, v60, v61, v62, v63, v64);
        return;
      }
    }
    else
    {
      *(_WORD *)&v71[2 * v23++ - 2] = HIBYTE(v22) | 0x300;
      v68 = v23;
    }
    do
    {
      v24 = 0;
      v25 = 0;
      v26 = v23;
      do
      {
        if ((v71[v24 - 1] & 0x40) != 0)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v25 |= 1 << v71[v24 - 1];
        v24 += 2;
      }
      while (2 * v23 != v24);
      v27 = 0;
      do
      {
        v28 = v71[v27 - 2] & 0x7F;
        if (v28 >= 0x40)
          goto LABEL_73;
        v25 &= ~(1 << v28);
        v27 += 2;
      }
      while (2 * v23 != v27);
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.i32[0];
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.i32[0] + v30)
      {
        v32 = 0;
        if (v23 <= 1)
          v33 = 1;
        else
          v33 = v23;
        v34 = 2 * v33;
        while (1)
        {
          v35 = v71[v32 - 1];
          if ((v35 & 0x7Fu) >= 0x40)
            goto LABEL_73;
          if (((v25 >> (v35 & 0x7F)) & 1) != 0)
            break;
          v32 += 2;
          if (v34 == v32)
            goto LABEL_67;
        }
        v36 = v71[v32 - 2];
        if (v36 != v35)
        {
          v37 = (char)v36;
          if ((char)v36 == 63)
          {
            v38 = *(_DWORD *)(a2 + 200);
            v39 = *(_DWORD *)(a2 + 192);
            if ((char)v35 == 31)
              goto LABEL_61;
            v41 = v35 & 0x1F | 0xD2800000;
          }
          else
          {
            v38 = *(_DWORD *)(a2 + 200);
            v39 = *(_DWORD *)(a2 + 192);
            v40 = v35 == 31 || v37 == 31;
            if (!v40)
            {
              v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_62;
            }
LABEL_61:
            v41 = (char)v35 | (32 * v37) | 0x91000000;
          }
LABEL_62:
          if (v38 + 4 > v39)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v38 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
          *(_DWORD *)(a2 + 200) += 4;
          v26 = v68;
        }
        memmove(&v71[v32 - 2], &v71[v32], 2 * v26 - v32 - 2);
        v23 = v68 - 1;
        goto LABEL_66;
      }
      v42 = HIBYTE(v70);
      v43 = v70;
      JSC::MacroAssemblerARM64::swap(a2, (char)v70, SHIBYTE(v70), v17, v18, v19, v20, v21);
      memmove(&v70, v71, 2 * v68 - 2);
      v44 = v68 - 1;
      v40 = v68 == 1;
      v69 = v44;
      v45 = (unsigned __int8 *)&v70;
      v46 = &v71[2 * v44 - 2];
      if (v40)
      {
        v55 = 0;
        v56 = 0;
        v49 = 0;
        v15 = v46;
      }
      else
      {
        v47 = 2 * v44;
        v48 = &v70;
        while (*(unsigned __int8 *)v48 != v42)
        {
          ++v48;
          v47 -= 2;
          if (!v47)
            goto LABEL_46;
        }
        *(_BYTE *)v48 = v43;
LABEL_46:
        v49 = 0;
        v50 = (char *)&v70;
        v15 = v46;
        v51 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v52 = v45;
            if (v51 != &v71[2 * v69 - 2])
            {
              v66 = v46;
              v67 = v45;
              if (v45 == v15)
              {
                v52 = v51;
              }
              else
              {
                v53 = v50 - (char *)v15;
                v54 = v51;
                v65 = v50;
                memmove(v51, v15, v50 - (char *)v15);
                v50 = v65;
                v52 = &v54[v53];
              }
              v46 = v66;
              v45 = v67;
            }
            v15 = v45 + 2;
            ++v49;
            v51 = v52;
          }
          v45 += 2;
          v50 += 2;
        }
        while (v45 < v46);
        v55 = v69;
        v56 = v69;
        v46 = v51;
      }
      v57 = &v71[2 * v55 - 2];
      if (v15 != v57)
      {
        memmove(v46, v15, v57 - v15);
        v56 = v69;
      }
      v23 = v56 - v49;
LABEL_66:
      v68 = v23;
LABEL_67:
      ;
    }
    while (v23);
    goto LABEL_71;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::AssemblerBuffer *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v12 = 0;
    LOBYTE(v13) = 0;
    goto LABEL_5;
  }
  LOBYTE(v13) = *(_BYTE *)(a1 + 102);
  v40 = 0;
  v41 = 2;
  v21 = *(_QWORD *)(a2 + 3960);
  v22 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v22 & 1) != 0)
  {
    v35 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v9 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v36 = (_DWORD)v9 == -1)
        : (v36 = 1),
          v36))
    {
      v37 = 2;
    }
    else if (v9 >> 28)
    {
      v38 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v38 = v8;
      *(_DWORD *)(v38 + 8) = v9;
      v37 = 1;
      v8 = v38;
    }
    else
    {
      v37 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v8 = v9 << 36;
    }
    v22 = v8 | v37;
    v21 = v35;
  }
  v39 = v22;
  v23 = (JSC::AssemblerBuffer *)JSC::DFG::Graph::willCatchExceptionInMachineFrame(v21, &v39, &v41, &v40, a5, a6, a7, a8);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  if ((v23 & 1) != 0)
  {
    v24 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          break;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_36;
      }
    }
    else
    {
      v25 = 0;
LABEL_36:
      if ((v13 & 0x40) == 0)
      {
        v12 = 1;
        v30 = v25 | (1 << v13);
        LOBYTE(v13) = 1;
        if ((v30 & 2) == 0)
          goto LABEL_27;
        v31 = (unsigned __int16)~(_WORD)v30 & 0xFFFE;
        if (!v31)
        {
          v12 = 1;
          LOBYTE(v13) = -1;
          goto LABEL_27;
        }
        v13 = __clz(__rbit64(v31));
        if (v13 == 1)
        {
          v12 = 1;
          goto LABEL_27;
        }
        if (v13 == 31)
        {
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
          LODWORD(v9) = -1862270913;
        }
        else
        {
          LODWORD(v9) = v13 | 0xAA0103E0;
          v8 = a2 + 200;
          v32 = *(_DWORD *)(a2 + 200);
          v23 = (JSC::AssemblerBuffer *)(a2 + 56);
          v33 = v32 + 4;
          v34 = *(_DWORD *)(a2 + 192);
        }
        if (v33 <= v34)
        {
LABEL_55:
          *(_DWORD *)(*(_QWORD *)v23 + v32) = v9;
          *(_DWORD *)v8 += 4;
          v12 = 1;
          goto LABEL_27;
        }
LABEL_61:
        JSC::AssemblerBuffer::outOfLineGrow(v23, a2, a3, a4, a5, a6, a7, a8);
        v32 = *(_DWORD *)v8;
        goto LABEL_55;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v13) = 0;
  v12 = 0;
LABEL_27:
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v14 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v14 == 31)
    {
      v15 = -1862270945;
    }
    else if (v14 == 255)
    {
      v15 = -1442774017;
    }
    else
    {
      v15 = v14 | 0xAA0003E0;
    }
    v17 = (unsigned int *)(a2 + 200);
    v16 = *(_DWORD *)(a2 + 200);
    if (v16 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *v17;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v15;
    *v17 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v18 = *(_DWORD *)(a1 + 116);
  if (!v18)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (v12)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v13, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v19 = v18 - 1;
  v20 = 16 * (v18 - 1);
  while (*(_DWORD *)(a1 + 116) > v19)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v20, a3, a4, a5, a6, a7, a8);
    v20 -= 16;
    if (--v19 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574FE0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574FE0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  char *v67;
  char *v68;
  void *__dst;
  uint64_t v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(unsigned __int8 *)(a1 + 160);
    v16 = *(unsigned __int8 *)(a1 + 161);
    v17 = *(unsigned __int8 *)(a1 + 162);
    v18 = *(_QWORD *)(a1 + 168);
    __dst = v71;
    v70 = 3;
    if (v15)
    {
      v71[0] = v15;
      v15 = 1;
      HIDWORD(v70) = 1;
    }
    if (v16 != 1)
    {
      v71[v15++] = v16 | 0x100;
      HIDWORD(v70) = v15;
    }
    if (v17 == 2)
    {
      if (!v15)
      {
LABEL_71:
        v53 = *(_DWORD *)(v8 + 200);
        if (v53 + 4 > *(_DWORD *)(v8 + 192))
        {
LABEL_74:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v53 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v53) = -763363324;
        *(_DWORD *)(v8 + 200) += 4;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v18, 3, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
        *(_QWORD *)(a1 + 92) = __dst;
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      v71[v15++] = v17 | 0x200;
      HIDWORD(v70) = v15;
    }
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = (char *)__dst;
      v22 = v15;
      do
      {
        if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v23 = 0;
      do
      {
        v24 = *((_BYTE *)__dst + v23) & 0x7F;
        if (v24 >= 0x40)
          goto LABEL_73;
        v20 &= ~(1 << v24);
        v23 += 2;
      }
      while (2 * v15 != v23);
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v25.i16[0] = vaddlv_u8(v25);
      v26 = v25.i32[0];
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.i32[0] + v26)
      {
        v28 = 0;
        if (v15 <= 1)
          v29 = 1;
        else
          v29 = v15;
        v30 = 2 * v29;
        while (1)
        {
          v31 = *((unsigned __int8 *)__dst + v28 + 1);
          if ((v31 & 0x7Fu) >= 0x40)
            goto LABEL_73;
          if (((v20 >> (v31 & 0x7F)) & 1) != 0)
            break;
          v28 += 2;
          if (v30 == v28)
            goto LABEL_64;
        }
        v32 = *((unsigned __int8 *)__dst + v28);
        if (v32 != v31)
        {
          v33 = (char)v32;
          if ((char)v32 == 63)
          {
            v34 = *(_DWORD *)(v8 + 200);
            v35 = *(_DWORD *)(v8 + 192);
            if ((char)v31 == 31)
              goto LABEL_58;
            v37 = v31 & 0x1F | 0xD2800000;
          }
          else
          {
            v34 = *(_DWORD *)(v8 + 200);
            v35 = *(_DWORD *)(v8 + 192);
            v36 = v31 == 31 || v33 == 31;
            if (!v36)
            {
              v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v37 = (char)v31 | (32 * v33) | 0x91000000;
          }
LABEL_59:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = HIDWORD(v70);
        }
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v15 = HIDWORD(v70) - 1;
        goto LABEL_63;
      }
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v70) - 2);
      v40 = (HIDWORD(v70) - 1);
      v36 = HIDWORD(v70) == 1;
      HIDWORD(v70) = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (unsigned __int8 *)__dst + 2 * v40;
      if (v36)
      {
        v49 = 0;
        v50 = 0;
        v45 = 0;
        a2 = v42;
      }
      else
      {
        v43 = 2 * v40;
        v44 = __dst;
        while (*v44 != v39)
        {
          v44 += 2;
          v43 -= 2;
          if (!v43)
            goto LABEL_43;
        }
        *v44 = v38;
LABEL_43:
        v45 = 0;
        v46 = v41;
        a2 = v42;
        v47 = (char *)v42;
        do
        {
          if (*v41 == v41[1])
          {
            v48 = v41;
            if (v47 != (char *)__dst + 2 * HIDWORD(v70))
            {
              v68 = (char *)v42;
              if (v41 == a2)
              {
                v48 = (unsigned __int8 *)v47;
              }
              else
              {
                v66 = v46 - a2;
                v67 = v47;
                memmove(v47, a2, v46 - a2);
                v48 = (unsigned __int8 *)&v67[v66];
              }
              v42 = (unsigned __int8 *)v68;
            }
            a2 = v41 + 2;
            ++v45;
            v47 = (char *)v48;
          }
          v41 += 2;
          v46 += 2;
        }
        while (v41 < v42);
        v41 = (unsigned __int8 *)__dst;
        v49 = HIDWORD(v70);
        v50 = HIDWORD(v70);
        v42 = (unsigned __int8 *)v47;
      }
      v51 = &v41[2 * v49];
      if (a2 != v51)
      {
        memmove(v42, a2, v51 - a2);
        v50 = HIDWORD(v70);
      }
      v15 = v50 - v45;
LABEL_63:
      HIDWORD(v70) = v15;
LABEL_64:
      ;
    }
    while (v15);
    v52 = __dst;
    if (v71 != __dst)
    {
      if (__dst)
      {
        __dst = 0;
        LODWORD(v70) = 0;
        WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_71;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned long>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long,unsigned long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&,unsigned long &>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, __int128 *a8, char *a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  char v35;
  int v36;
  _BYTE *v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  WTF *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v54;
  unsigned int v55;
  _BYTE v56[24];
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE v60[24];
  WTF *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[32];

  v17 = WTF::fastMalloc((WTF *)0xC0);
  v18 = *((unsigned int *)a2 + 3);
  v54 = v56;
  v55 = v18;
  if (v18 < 3)
  {
    v19 = v56;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_37;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v54 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v52 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v51 = *a8;
  v26 = *a9;
  v27 = *a10;
  v28 = v55;
  v57 = (WTF *)v60;
  v58 = 2;
  v59 = v55;
  if (v55 < 3)
  {
    v29 = v60;
    if (!v55)
      goto LABEL_14;
  }
  else
  {
    if (v55 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CE7270);
    }
    v29 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v55));
    v58 = 12 * v55 / 0xC;
    v57 = (WTF *)v29;
    v28 = v55;
  }
  v30 = v54;
  v31 = &v54[12 * v28];
  do
  {
    *(_DWORD *)v29 = *(_DWORD *)v30;
    *(_QWORD *)(v29 + 4) = *(_QWORD *)(v30 + 4);
    v30 += 12;
    v29 += 12;
  }
  while (v30 != v31);
LABEL_14:
  v32 = v59;
  v61 = (WTF *)v64;
  v62 = 2;
  v63 = v59;
  if (v59 < 3)
  {
    v37 = v64;
    if (!v59)
      goto LABEL_21;
LABEL_19:
    v38 = v57;
    v39 = (WTF *)((char *)v57 + 12 * v32);
    do
    {
      *(_DWORD *)v37 = *(_DWORD *)v38;
      *(_QWORD *)(v37 + 4) = *(_QWORD *)((char *)v38 + 4);
      v38 = (WTF *)((char *)v38 + 12);
      v37 += 12;
    }
    while (v38 != v39);
    goto LABEL_21;
  }
  if (v59 >= 0x15555556)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197CE7268);
  }
  v33 = v24;
  v34 = v27;
  v35 = v26;
  v36 = 12 * v59;
  v37 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v59));
  v62 = (v36 & 0xFFFFFFFC) / 0xC;
  v61 = (WTF *)v37;
  v32 = v59;
  v26 = v35;
  v27 = v34;
  v24 = v33;
  if (v59)
    goto LABEL_19;
LABEL_21:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v61, v22);
  v47 = v61;
  if (v64 != (_BYTE *)v61 && v61 != 0)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = off_1E3575070;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v17 + 100) = v23;
  *(_BYTE *)(v17 + 101) = v24;
  *(_BYTE *)(v17 + 102) = v25;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  v49 = v17 + 104;
  *(_QWORD *)(v17 + 112) = 2;
  if (!v23)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v22, 0, v49, v25, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v45, v46);
  v50 = v57;
  if (v60 != (_BYTE *)v57 && v57)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree((unint64_t)v50, v40, v49, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = &off_1E3575040;
  *(_QWORD *)(v17 + 152) = v52;
  *(_OWORD *)(v17 + 160) = v51;
  *(_BYTE *)(v17 + 176) = v26;
  *(_QWORD *)(v17 + 184) = v27;
  *a1 = v17;
  if (v56 != v54)
  {
    if (v54)
      WTF::fastFree((unint64_t)v54, v40, v49, v42, v43, v44, v45, v46);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3575070;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3575070;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned long>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  JSC::AssemblerBuffer *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 *v105;
  uint64_t v106;
  void *__dst;
  int v108;
  unsigned int v109;
  __int16 v110;
  unint64_t v111;
  unsigned int *v112;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v19 = &v110;
  __dst = &v110;
  v108 = 1;
  if (v17 != 1)
  {
    v110 = v17 | 0x100;
    v109 = 1;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v104 = v15;
      v105 = v19;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v109 - 2);
      v40 = v109 - 1;
      v35 = v109 == 1;
      v109 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v109)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v109;
        v44 = v109;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v109;
      }
      v20 = v44 - v45;
      v15 = v104;
      v19 = v105;
LABEL_40:
      v109 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v19 != __dst && __dst)
        {
          __dst = 0;
          v108 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v109 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v109;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | 0x91000000;
    goto LABEL_36;
  }
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v18, 2, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v54, v55, v56, v57, v58);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v54, v55, v56, v57, v58);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v59, v60, v61, v62, v63, v64, (int *)&v106);
  *(_QWORD *)(a1 + 92) = v106;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
LABEL_67:
    v72 = 0;
    LOBYTE(v73) = 0;
    goto LABEL_68;
  }
  v81 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v112 = 0;
  v82 = *(_QWORD *)(v8 + 3960);
  v83 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v83 & 1) != 0)
  {
    v99 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
    if ((v83 & 2) != 0
      || ((v100 = *(unsigned int *)((v83 & 0xFFFFFFFF8) + 8), (_DWORD)v100 != 0x3FFFFFFF)
        ? (v101 = (_DWORD)v100 == -1)
        : (v101 = 1),
          v101))
    {
      v102 = 2;
    }
    else if (v100 >> 28)
    {
      v103 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v103 = v99;
      *(_DWORD *)(v103 + 8) = v100;
      v102 = 1;
      v99 = v103;
    }
    else
    {
      v102 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
      v99 = v100 << 36;
    }
    v83 = v99 | v102;
  }
  v111 = v83;
  v84 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v82, &v111, (uint64_t *)&__dst, &v112, v68, v69, v70, v71);
  if ((v111 & 1) != 0 && (v111 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v111 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if ((v84 & 1) != 0)
  {
    v85 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v85)
    {
      v86 = 0;
      v87 = 16 * v85;
      v88 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v90 = *v88;
        v88 += 16;
        v89 = v90;
        if ((v90 & 0x40) != 0)
          break;
        v86 |= 1 << v89;
        v87 -= 16;
        if (!v87)
          goto LABEL_99;
      }
    }
    else
    {
      v86 = 0;
LABEL_99:
      if ((v81 & 0x40) == 0)
      {
        v72 = 1;
        v91 = v86 | (1 << v81);
        LOBYTE(v73) = 1;
        if ((v91 & 2) != 0)
        {
          v92 = (unsigned __int16)~(_WORD)v91 & 0xFFFE;
          if (v92)
          {
            v73 = __clz(__rbit64(v92));
            if (v73 == 1)
            {
              v72 = 1;
            }
            else
            {
              if (v73 == 31)
              {
                v95 = (unsigned int *)(v8 + 200);
                v94 = *(_DWORD *)(v8 + 200);
                v96 = (JSC::AssemblerBuffer *)(v8 + 56);
                v97 = v94 + 4;
                v98 = *(_DWORD *)(v8 + 192);
                v93 = -1862270913;
              }
              else
              {
                v93 = v73 | 0xAA0103E0;
                v95 = (unsigned int *)(v8 + 200);
                v94 = *(_DWORD *)(v8 + 200);
                v96 = (JSC::AssemblerBuffer *)(v8 + 56);
                v97 = v94 + 4;
                v98 = *(_DWORD *)(v8 + 192);
              }
              if (v97 > v98)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v96, (uint64_t)v65, v66, v67, v68, v69, v70, v71);
                v94 = *v95;
              }
              *(_DWORD *)(*(_QWORD *)v96 + v94) = v93;
              *v95 += 4;
              v72 = 1;
            }
          }
          else
          {
            v72 = 1;
            LOBYTE(v73) = -1;
          }
        }
        goto LABEL_90;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(0xC471u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
  LOBYTE(v73) = 0;
  v72 = 0;
LABEL_90:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
LABEL_68:
  v74 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v74 == 31)
    {
      v75 = -1862270945;
    }
    else if (v74 == 255)
    {
      v75 = -1442774017;
    }
    else
    {
      v75 = v74 | 0xAA0003E0;
    }
    v77 = (unsigned int *)(v8 + 200);
    v76 = *(_DWORD *)(v8 + 200);
    if (v76 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v65, v66, v67, v68, v69, v70, v71);
      v76 = *v77;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v76) = v75;
    *v77 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v78 = *(_DWORD *)(a1 + 116);
    if (v78)
    {
      v79 = v78 - 1;
      v80 = 16 * (v78 - 1);
      while (*(_DWORD *)(a1 + 116) > v79)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v80, v66, v67, v68, v69, v70, v71);
        v80 -= 16;
        if (--v79 == -1)
          goto LABEL_81;
      }
      goto LABEL_130;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v72)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v73, v66, v67, v68, v69, v70, v71);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35750D0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35750D0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,unsigned long>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  JSC::AssemblerBuffer *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void *__dst;
  int v110;
  unsigned int v111;
  _WORD v112[4];
  unint64_t v113;
  unsigned int *v114;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_136;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 177);
  v19 = *(_QWORD *)(a1 + 184);
  __dst = v112;
  v110 = 2;
  if (v17 == 1)
  {
    if (v18 == 2)
      goto LABEL_69;
    v20 = 0;
  }
  else
  {
    v112[0] = v17 | 0x100;
    v20 = 1;
    v111 = 1;
    if (v18 == 2)
      goto LABEL_15;
  }
  v112[v20++] = v18 | 0x200;
  v111 = v20;
  do
  {
LABEL_15:
    v21 = 0;
    v22 = 0;
    v23 = (char *)__dst;
    v24 = v20;
    do
    {
      if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
        goto LABEL_136;
      v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
      v21 += 2;
    }
    while (2 * v20 != v21);
    v25 = 0;
    do
    {
      v26 = *((_BYTE *)__dst + v25) & 0x7F;
      if (v26 >= 0x40)
        goto LABEL_136;
      v22 &= ~(1 << v26);
      v25 += 2;
    }
    while (2 * v20 != v25);
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v27.i16[0] = vaddlv_u8(v27);
    v28 = v27.i32[0];
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.i32[0] + v28)
    {
      v30 = 0;
      if (v20 <= 1)
        v31 = 1;
      else
        v31 = v20;
      v32 = 2 * v31;
      while (1)
      {
        v33 = *((unsigned __int8 *)__dst + v30 + 1);
        if ((v33 & 0x7Fu) >= 0x40)
          goto LABEL_136;
        if (((v22 >> (v33 & 0x7F)) & 1) != 0)
          break;
        v30 += 2;
        if (v32 == v30)
          goto LABEL_65;
      }
      v34 = *((unsigned __int8 *)__dst + v30);
      if (v34 == v33)
      {
LABEL_63:
        memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
        v20 = v111 - 1;
        goto LABEL_64;
      }
      v35 = (char)v34;
      if ((char)v34 == 63)
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        if ((char)v33 != 31)
        {
          v39 = v33 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        v38 = v33 == 31 || v35 == 31;
        if (!v38)
        {
          v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v36 + 4 > v37)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v36 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v39;
          *(_DWORD *)(v8 + 200) += 4;
          v23 = (char *)__dst;
          v24 = v111;
          goto LABEL_63;
        }
      }
      v39 = (char)v33 | (32 * v35) | 0x91000000;
      goto LABEL_60;
    }
    v40 = *(_BYTE *)__dst;
    v41 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v41, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v111 - 2);
    v42 = v111 - 1;
    v38 = v111 == 1;
    v111 = v42;
    v43 = (unsigned __int8 *)__dst;
    v44 = (unsigned __int8 *)__dst + 2 * v42;
    if (v38)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      a2 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = __dst;
      while (*v46 != v41)
      {
        v46 += 2;
        v45 -= 2;
        if (!v45)
          goto LABEL_43;
      }
      *v46 = v40;
LABEL_43:
      v47 = 0;
      v48 = v43;
      a2 = v44;
      v49 = (char *)v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != (char *)__dst + 2 * v111)
          {
            v107 = (char *)v44;
            if (v43 == a2)
            {
              v50 = (unsigned __int8 *)v49;
            }
            else
            {
              v105 = v48 - a2;
              v106 = v49;
              memmove(v49, a2, v48 - a2);
              v50 = (unsigned __int8 *)&v106[v105];
            }
            v44 = (unsigned __int8 *)v107;
          }
          a2 = v43 + 2;
          ++v47;
          v49 = (char *)v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v43 = (unsigned __int8 *)__dst;
      v51 = v111;
      v52 = v111;
      v44 = (unsigned __int8 *)v49;
    }
    v53 = &v43[2 * v51];
    if (a2 != v53)
    {
      memmove(v44, a2, v53 - a2);
      v52 = v111;
    }
    v20 = v52 - v47;
LABEL_64:
    v111 = v20;
LABEL_65:
    ;
  }
  while (v20);
  v54 = __dst;
  if (v112 != __dst && __dst)
  {
    __dst = 0;
    v110 = 0;
    WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v19, 3, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v55, v56, v57, v58, v59);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v55, v56, v57, v58, v59);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v60, v61, v62, v63, v64, v65, (int *)&v108);
  *(_QWORD *)(a1 + 92) = v108;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v73 = 0;
    LOBYTE(v74) = 0;
    goto LABEL_75;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v67, v68, v69, v70, v71, v72);
    goto LABEL_74;
  }
  v82 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v114 = 0;
  v83 = *(_QWORD *)(v8 + 3960);
  v84 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v84 & 1) != 0)
  {
    v100 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
    if ((v84 & 2) != 0
      || ((v101 = *(unsigned int *)((v84 & 0xFFFFFFFF8) + 8), (_DWORD)v101 != 0x3FFFFFFF)
        ? (v102 = (_DWORD)v101 == -1)
        : (v102 = 1),
          v102))
    {
      v103 = 2;
    }
    else if (v101 >> 28)
    {
      v104 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v104 = v100;
      *(_DWORD *)(v104 + 8) = v101;
      v103 = 1;
      v100 = v104;
    }
    else
    {
      v103 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
      v100 = v101 << 36;
    }
    v84 = v100 | v103;
  }
  v113 = v84;
  v85 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v83, &v113, (uint64_t *)&__dst, &v114, v69, v70, v71, v72);
  if ((v113 & 1) != 0 && (v113 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v113 & 0xFFFFFFFF8, v66, v67, v68, v69, v70, v71, v72);
  if ((v85 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v67, v68, v69, v70, v71, v72);
    LOBYTE(v74) = 0;
    v73 = 0;
    goto LABEL_115;
  }
  v86 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v86)
  {
    v87 = 0;
    v88 = 16 * v86;
    v89 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v91 = *v89;
      v89 += 16;
      v90 = v91;
      if ((v91 & 0x40) != 0)
        goto LABEL_136;
      v87 |= 1 << v90;
      v88 -= 16;
      if (!v88)
        goto LABEL_103;
    }
  }
  v87 = 0;
LABEL_103:
  if ((v82 & 0x40) != 0)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v73 = 1;
  v92 = v87 | (1 << v82);
  LOBYTE(v74) = 1;
  if ((v92 & 2) != 0)
  {
    v93 = (unsigned __int16)~(_WORD)v92 & 0xFFFE;
    if (v93)
    {
      v74 = __clz(__rbit64(v93));
      if (v74 == 1)
      {
        v73 = 1;
      }
      else
      {
        if (v74 == 31)
        {
          v96 = (unsigned int *)(v8 + 200);
          v95 = *(_DWORD *)(v8 + 200);
          v97 = (JSC::AssemblerBuffer *)(v8 + 56);
          v98 = v95 + 4;
          v99 = *(_DWORD *)(v8 + 192);
          v94 = -1862270913;
        }
        else
        {
          v94 = v74 | 0xAA0103E0;
          v96 = (unsigned int *)(v8 + 200);
          v95 = *(_DWORD *)(v8 + 200);
          v97 = (JSC::AssemblerBuffer *)(v8 + 56);
          v98 = v95 + 4;
          v99 = *(_DWORD *)(v8 + 192);
        }
        if (v98 > v99)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v97, (uint64_t)v66, v67, v68, v69, v70, v71, v72);
          v95 = *v96;
        }
        *(_DWORD *)(*(_QWORD *)v97 + v95) = v94;
        *v96 += 4;
        v73 = 1;
      }
    }
    else
    {
      v73 = 1;
      LOBYTE(v74) = -1;
    }
  }
LABEL_115:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v66, v67, v68, v69, v70, v71, v72);
LABEL_75:
  v75 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v75 == 31)
    {
      v76 = -1862270945;
    }
    else if (v75 == 255)
    {
      v76 = -1442774017;
    }
    else
    {
      v76 = v75 | 0xAA0003E0;
    }
    v78 = (unsigned int *)(v8 + 200);
    v77 = *(_DWORD *)(v8 + 200);
    if (v77 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v66, v67, v68, v69, v70, v71, v72);
      v77 = *v78;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v77) = v76;
    *v78 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_89:
    if (v73)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v74, v67, v68, v69, v70, v71, v72);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v67, v68, v69, v70, v71, v72);
    return;
  }
  v79 = *(_DWORD *)(a1 + 116);
  if (!v79)
  {
LABEL_88:
    *(_BYTE *)(v8 + 5768) = 0;
    goto LABEL_89;
  }
  v80 = v79 - 1;
  v81 = 16 * (v79 - 1);
  while (*(_DWORD *)(a1 + 116) > v80)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v81, v67, v68, v69, v70, v71, v72);
    v81 -= 16;
    if (--v80 == -1)
      goto LABEL_88;
  }
LABEL_137:
  __break(0xC471u);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&,JSC::ARM64Registers::RegisterID&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, __int128 *a8, char *a9, char *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  char v25;
  char v26;
  char v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  char v33;
  char v34;
  char v35;
  int v36;
  _BYTE *v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  WTF *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v54;
  unsigned int v55;
  _BYTE v56[24];
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE v60[24];
  WTF *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[32];

  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = *((unsigned int *)a2 + 3);
  v54 = v56;
  v55 = v18;
  if (v18 < 3)
  {
    v19 = v56;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_37;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v54 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v52 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v51 = *a8;
  v26 = *a9;
  v27 = *a10;
  v28 = v55;
  v57 = (WTF *)v60;
  v58 = 2;
  v59 = v55;
  if (v55 < 3)
  {
    v29 = v60;
    if (!v55)
      goto LABEL_14;
  }
  else
  {
    if (v55 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CE8868);
    }
    v29 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v55));
    v58 = 12 * v55 / 0xC;
    v57 = (WTF *)v29;
    v28 = v55;
  }
  v30 = v54;
  v31 = &v54[12 * v28];
  do
  {
    *(_DWORD *)v29 = *(_DWORD *)v30;
    *(_QWORD *)(v29 + 4) = *(_QWORD *)(v30 + 4);
    v30 += 12;
    v29 += 12;
  }
  while (v30 != v31);
LABEL_14:
  v32 = v59;
  v61 = (WTF *)v64;
  v62 = 2;
  v63 = v59;
  if (v59 < 3)
  {
    v37 = v64;
    if (!v59)
      goto LABEL_21;
LABEL_19:
    v38 = v57;
    v39 = (WTF *)((char *)v57 + 12 * v32);
    do
    {
      *(_DWORD *)v37 = *(_DWORD *)v38;
      *(_QWORD *)(v37 + 4) = *(_QWORD *)((char *)v38 + 4);
      v38 = (WTF *)((char *)v38 + 12);
      v37 += 12;
    }
    while (v38 != v39);
    goto LABEL_21;
  }
  if (v59 >= 0x15555556)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197CE8860);
  }
  v33 = v24;
  v34 = v27;
  v35 = v26;
  v36 = 12 * v59;
  v37 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v59));
  v62 = (v36 & 0xFFFFFFFC) / 0xC;
  v61 = (WTF *)v37;
  v32 = v59;
  v26 = v35;
  v27 = v34;
  v24 = v33;
  if (v59)
    goto LABEL_19;
LABEL_21:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v61, v22);
  v47 = v61;
  if (v64 != (_BYTE *)v61 && v61 != 0)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = off_1E3575130;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v17 + 100) = v23;
  *(_BYTE *)(v17 + 101) = v24;
  *(_BYTE *)(v17 + 102) = v25;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  v49 = v17 + 104;
  *(_QWORD *)(v17 + 112) = 2;
  if (!v23)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v22, 0, v49, v25, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v45, v46);
  v50 = v57;
  if (v60 != (_BYTE *)v57 && v57)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree((unint64_t)v50, v40, v49, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = &off_1E3575100;
  *(_QWORD *)(v17 + 152) = v52;
  *(_OWORD *)(v17 + 160) = v51;
  *(_BYTE *)(v17 + 176) = v26;
  *(_BYTE *)(v17 + 177) = v27;
  *a1 = v17;
  if (v56 != v54)
  {
    if (v54)
      WTF::fastFree((unint64_t)v54, v40, v49, v42, v43, v44, v45, v46);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3575130;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3575130;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  _WORD v106[4];
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_137;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 177);
  __dst = v106;
  v104 = 2;
  if (v17 == 1)
  {
    if (v18 == 2)
      goto LABEL_69;
    v19 = 0;
  }
  else
  {
    v106[0] = v17 | 0x100;
    v19 = 1;
    v105 = 1;
    if (v18 == 2)
      goto LABEL_15;
  }
  v106[v19++] = v18 | 0x200;
  v105 = v19;
  do
  {
LABEL_15:
    v20 = 0;
    v21 = 0;
    v22 = (char *)__dst;
    v23 = v19;
    do
    {
      if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
        goto LABEL_137;
      v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
      v20 += 2;
    }
    while (2 * v19 != v20);
    v24 = 0;
    do
    {
      v25 = *((_BYTE *)__dst + v24) & 0x7F;
      if (v25 >= 0x40)
        goto LABEL_137;
      v21 &= ~(1 << v25);
      v24 += 2;
    }
    while (2 * v19 != v24);
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.i32[0];
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.i32[0] + v27)
    {
      v29 = 0;
      if (v19 <= 1)
        v30 = 1;
      else
        v30 = v19;
      v31 = 2 * v30;
      while (1)
      {
        v32 = *((unsigned __int8 *)__dst + v29 + 1);
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_137;
        if (((v21 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v29 += 2;
        if (v31 == v29)
          goto LABEL_65;
      }
      v33 = *((unsigned __int8 *)__dst + v29);
      if (v33 == v32)
      {
LABEL_63:
        memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
        v19 = v105 - 1;
        goto LABEL_64;
      }
      v34 = (char)v33;
      if ((char)v33 == 63)
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        if ((char)v32 != 31)
        {
          v38 = v32 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        v37 = v32 == 31 || v34 == 31;
        if (!v37)
        {
          v38 = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v35 + 4 > v36)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v35 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v38;
          *(_DWORD *)(v8 + 200) += 4;
          v22 = (char *)__dst;
          v23 = v105;
          goto LABEL_63;
        }
      }
      v38 = (char)v32 | (32 * v34) | 0x91000000;
      goto LABEL_60;
    }
    v39 = *(_BYTE *)__dst;
    v40 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v40, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
    v41 = v105 - 1;
    v37 = v105 == 1;
    v105 = v41;
    v42 = (unsigned __int8 *)__dst;
    v43 = (unsigned __int8 *)__dst + 2 * v41;
    if (v37)
    {
      v50 = 0;
      v51 = 0;
      v46 = 0;
      a2 = v43;
    }
    else
    {
      v44 = 2 * v41;
      v45 = __dst;
      while (*v45 != v40)
      {
        v45 += 2;
        v44 -= 2;
        if (!v44)
          goto LABEL_43;
      }
      *v45 = v39;
LABEL_43:
      v46 = 0;
      v47 = v42;
      a2 = v43;
      v48 = (char *)v43;
      do
      {
        if (*v42 == v42[1])
        {
          v49 = v42;
          if (v48 != (char *)__dst + 2 * v105)
          {
            v101 = (char *)v43;
            if (v42 == a2)
            {
              v49 = (unsigned __int8 *)v48;
            }
            else
            {
              v99 = v47 - a2;
              v100 = v48;
              memmove(v48, a2, v47 - a2);
              v49 = (unsigned __int8 *)&v100[v99];
            }
            v43 = (unsigned __int8 *)v101;
          }
          a2 = v42 + 2;
          ++v46;
          v48 = (char *)v49;
        }
        v42 += 2;
        v47 += 2;
      }
      while (v42 < v43);
      v42 = (unsigned __int8 *)__dst;
      v50 = v105;
      v51 = v105;
      v43 = (unsigned __int8 *)v48;
    }
    v52 = &v42[2 * v50];
    if (a2 != v52)
    {
      memmove(v43, a2, v52 - a2);
      v51 = v105;
    }
    v19 = v51 - v46;
LABEL_64:
    v105 = v19;
LABEL_65:
    ;
  }
  while (v19);
  v53 = __dst;
  if (v106 != __dst && __dst)
  {
    __dst = 0;
    v104 = 0;
    WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_75;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    goto LABEL_74;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    LOBYTE(v68) = 0;
    v67 = 0;
    goto LABEL_97;
  }
  v80 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v80)
  {
    v81 = 0;
    v82 = 16 * v80;
    v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v85 = *v83;
      v83 += 16;
      v84 = v85;
      if ((v85 & 0x40) != 0)
        goto LABEL_137;
      v81 |= 1 << v84;
      v82 -= 16;
      if (!v82)
        goto LABEL_106;
    }
  }
  v81 = 0;
LABEL_106:
  if ((v76 & 0x40) != 0)
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v67 = 1;
  v86 = v81 | (1 << v76);
  if ((v86 & 2) != 0)
  {
    v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
    if (v87)
    {
      v68 = __clz(__rbit64(v87));
      if (v68 == 1)
      {
        v67 = 1;
      }
      else
      {
        if (v68 == 31)
        {
          v90 = (unsigned int *)(v8 + 200);
          v89 = *(_DWORD *)(v8 + 200);
          v91 = (JSC::AssemblerBuffer *)(v8 + 56);
          v92 = v89 + 4;
          v93 = *(_DWORD *)(v8 + 192);
          v88 = -1862270913;
        }
        else
        {
          v88 = v68 | 0xAA0103E0;
          v90 = (unsigned int *)(v8 + 200);
          v89 = *(_DWORD *)(v8 + 200);
          v91 = (JSC::AssemblerBuffer *)(v8 + 56);
          v92 = v89 + 4;
          v93 = *(_DWORD *)(v8 + 192);
        }
        if (v92 > v93)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
          v89 = *v90;
        }
        *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
        *v90 += 4;
        v67 = 1;
      }
    }
    else
    {
      v67 = 1;
      LOBYTE(v68) = -1;
    }
  }
  else
  {
    LOBYTE(v68) = 1;
  }
LABEL_97:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_75:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_89:
    if (v67)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
    return;
  }
  v73 = *(_DWORD *)(a1 + 116);
  if (!v73)
  {
LABEL_88:
    *(_BYTE *)(v8 + 5768) = 0;
    goto LABEL_89;
  }
  v74 = v73 - 1;
  v75 = 16 * (v73 - 1);
  while (*(_DWORD *)(a1 + 116) > v74)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
    v75 -= 16;
    if (--v74 == -1)
      goto LABEL_88;
  }
LABEL_138:
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3575190;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3575190;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>::generateInternal(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unsigned int v79;
  unsigned int *v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void *__dst;
  uint64_t v94;
  _WORD v95[4];
  unint64_t v96;
  unsigned int *v97;

  v9 = (uint64_t)a2;
  v11 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v11)
  {
    v8 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v8), v9, a3, a4, a5, a6, a7, a8);
      ++v12;
      v8 += 12;
      if (v11 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_139:
    JUMPOUT(0x197CE9AE4);
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v9 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v9, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v8;
        v13 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 116));
    }
  }
  v14 = *(unsigned int *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(unsigned __int8 *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 177);
  v18 = *(unsigned __int8 *)(a1 + 178);
  __dst = v95;
  v94 = 3;
  if (v16 == 1)
  {
    v19 = 0;
  }
  else
  {
    v95[0] = v16 | 0x100;
    v19 = 1;
    HIDWORD(v94) = 1;
  }
  if (v17 != 2)
  {
    v95[v19++] = v17 | 0x200;
    HIDWORD(v94) = v19;
  }
  if (v18 != 3)
  {
    v95[v19++] = v18 | 0x300;
    HIDWORD(v94) = v19;
LABEL_16:
    while (1)
    {
      v20 = 0;
      v21 = 0;
      v22 = (char *)__dst;
      v23 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
          goto LABEL_114;
        v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
        v20 += 2;
      }
      while (2 * v19 != v20);
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)__dst + v24) & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_114;
        v21 &= ~(1 << v25);
        v24 += 2;
      }
      while (2 * v19 != v24);
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.i32[0] + v27)
        break;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v9, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v94) - 2);
      v40 = (HIDWORD(v94) - 1);
      v36 = HIDWORD(v94) == 1;
      HIDWORD(v94) = v40;
      v8 = (unint64_t)__dst;
      v41 = (char *)__dst + 2 * v40;
      if (v36)
      {
        v48 = 0;
        v49 = 0;
        v44 = 0;
        a2 = v41;
      }
      else
      {
        v42 = 2 * v40;
        v43 = __dst;
        while (*v43 != v39)
        {
          v43 += 2;
          v42 -= 2;
          if (!v42)
            goto LABEL_44;
        }
        *v43 = v38;
LABEL_44:
        v44 = 0;
        v45 = v8;
        a2 = v41;
        v46 = v41;
        do
        {
          if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
          {
            v47 = (char *)v8;
            if (v46 != (char *)__dst + 2 * HIDWORD(v94))
            {
              v91 = v41;
              if ((_BYTE *)v8 == a2)
              {
                v47 = v46;
              }
              else
              {
                v89 = v45 - (_QWORD)a2;
                v90 = v46;
                memmove(v46, a2, v45 - (_QWORD)a2);
                v47 = &v90[v89];
              }
              v41 = v91;
            }
            a2 = (_BYTE *)(v8 + 2);
            ++v44;
            v46 = v47;
          }
          v8 += 2;
          v45 += 2;
        }
        while (v8 < (unint64_t)v41);
        v8 = (unint64_t)__dst;
        v48 = HIDWORD(v94);
        v49 = HIDWORD(v94);
        v41 = v46;
      }
      v50 = (_BYTE *)(v8 + 2 * v48);
      if (a2 != v50)
      {
        memmove(v41, a2, v50 - a2);
        v49 = HIDWORD(v94);
      }
      v19 = v49 - v44;
LABEL_64:
      HIDWORD(v94) = v19;
LABEL_65:
      if (!v19)
      {
        v51 = __dst;
        if (v95 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v94) = 0;
          WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_72;
      }
    }
    v8 = 0;
    if (v19 <= 1)
      v29 = 1;
    else
      v29 = v19;
    v30 = 2 * v29;
    while (1)
    {
      v31 = *((unsigned __int8 *)__dst + v8 + 1);
      if ((v31 & 0x7Fu) >= 0x40)
        goto LABEL_114;
      if (((v21 >> (v31 & 0x7F)) & 1) != 0)
        break;
      v8 += 2;
      if (v30 == v8)
        goto LABEL_65;
    }
    v32 = *((unsigned __int8 *)__dst + v8);
    if (v32 == v31)
    {
LABEL_63:
      memmove(&v22[v8], &v22[v8 + 2], 2 * v23 - v8 - 2);
      v19 = HIDWORD(v94) - 1;
      goto LABEL_64;
    }
    v33 = (char)v32;
    if ((char)v32 == 63)
    {
      v34 = *(_DWORD *)(v9 + 200);
      v35 = *(_DWORD *)(v9 + 192);
      if ((char)v31 != 31)
      {
        v37 = v31 & 0x1F | 0xD2800000;
        goto LABEL_60;
      }
    }
    else
    {
      v34 = *(_DWORD *)(v9 + 200);
      v35 = *(_DWORD *)(v9 + 192);
      v36 = v31 == 31 || v33 == 31;
      if (!v36)
      {
        v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
        if (v34 + 4 > v35)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v34 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v34) = v37;
        *(_DWORD *)(v9 + 200) += 4;
        v22 = (char *)__dst;
        v23 = HIDWORD(v94);
        goto LABEL_63;
      }
    }
    v37 = (char)v31 | (32 * v33) | 0x91000000;
    goto LABEL_60;
  }
  if (v19)
    goto LABEL_16;
LABEL_72:
  if (v14 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v15, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v9, (v14 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v9, *(_QWORD *)(a1 + 152), v52, v53, v54, v55, v56, v57, (int *)&v92);
  *(_QWORD *)(a1 + 92) = v92;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_77;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, a3, a4, a5, a6, a7, a8);
LABEL_77:
    v58 = 0;
    LOBYTE(v8) = 0;
    goto LABEL_78;
  }
  LOBYTE(v8) = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v97 = 0;
  v67 = *(_QWORD *)(v9 + 3960);
  v68 = *(_QWORD *)(*(_QWORD *)(v9 + 3976) + 8);
  if ((v68 & 1) != 0)
  {
    v84 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
    if ((v68 & 2) != 0
      || ((v85 = *(unsigned int *)((v68 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v88 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v88 = v84;
      *(_DWORD *)(v88 + 8) = v85;
      v87 = 1;
      v84 = v88;
    }
    else
    {
      v87 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v68 = v84 | v87;
  }
  v96 = v68;
  v69 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v67, &v96, (uint64_t *)&__dst, &v97, a5, a6, a7, a8);
  if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v96 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v69 & 1) != 0)
  {
    v70 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v70)
    {
      v71 = 0;
      v72 = 16 * v70;
      v73 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v75 = *v73;
        v73 += 16;
        v74 = v75;
        if ((v75 & 0x40) != 0)
          break;
        v71 |= 1 << v74;
        v72 -= 16;
        if (!v72)
          goto LABEL_106;
      }
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    v71 = 0;
LABEL_106:
    if ((v8 & 0x40) != 0)
      goto LABEL_114;
    v58 = 1;
    v76 = v71 | (1 << v8);
    LOBYTE(v8) = 1;
    if ((v76 & 2) != 0)
    {
      v77 = (unsigned __int16)~(_WORD)v76 & 0xFFFE;
      if (v77)
      {
        LODWORD(v8) = __clz(__rbit64(v77));
        if ((_DWORD)v8 != 1)
        {
          if ((_DWORD)v8 != 31)
          {
            v78 = v8 | 0xAA0103E0;
            v80 = (unsigned int *)(v9 + 200);
            v79 = *(_DWORD *)(v9 + 200);
            v81 = (JSC::AssemblerBuffer *)(v9 + 56);
            v82 = v79 + 4;
            v83 = *(_DWORD *)(v9 + 192);
LABEL_116:
            if (v82 > v83)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v79 = *v80;
            }
            *(_DWORD *)(*(_QWORD *)v81 + v79) = v78;
            *v80 += 4;
            v58 = 1;
            goto LABEL_119;
          }
LABEL_115:
          v80 = (unsigned int *)(v9 + 200);
          v79 = *(_DWORD *)(v9 + 200);
          v81 = (JSC::AssemblerBuffer *)(v9 + 56);
          v82 = v79 + 4;
          v83 = *(_DWORD *)(v9 + 192);
          v78 = -1862270913;
          goto LABEL_116;
        }
        v58 = 1;
      }
      else
      {
        v58 = 1;
        LOBYTE(v8) = -1;
      }
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, a3, a4, a5, a6, a7, a8);
    LOBYTE(v8) = 0;
    v58 = 0;
  }
LABEL_119:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
LABEL_78:
  v59 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v59 == 31)
    {
      v60 = -1862270945;
    }
    else if (v59 == 255)
    {
      v60 = -1442774017;
    }
    else
    {
      v60 = v59 | 0xAA0003E0;
    }
    v62 = (unsigned int *)(v9 + 200);
    v61 = *(_DWORD *)(v9 + 200);
    if (v61 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v61 = *v62;
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v61) = v60;
    *v62 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v63 = *(_DWORD *)(a1 + 116);
    if (v63)
    {
      v64 = v63 - 1;
      v65 = 16 * (v63 - 1);
      while (*(_DWORD *)(a1 + 116) > v64)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v9, *(_QWORD *)(a1 + 104) + v65, a3, a4, a5, a6, a7, a8);
        v65 -= 16;
        if (--v64 == -1)
          goto LABEL_91;
      }
      __break(0xC471u);
      goto LABEL_139;
    }
LABEL_91:
    *(_BYTE *)(v9 + 5768) = 0;
  }
  if (v58 && !*(_BYTE *)(a1 + 101))
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, (char)v8, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v9, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSBoundFunction *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *,long long,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35751F0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSBoundFunction *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *,long long,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35751F0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSBoundFunction *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *,long long,long long,long long,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSBoundFunction *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *,long long,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint8x8_t v28;
  __int32 v29;
  uint8x8_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  char v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  JSC::AssemblerBuffer *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *__dst;
  uint64_t v86;
  _WORD v87[8];
  unint64_t v88;
  unsigned int *v89;

  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_131;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned int *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 180);
  __dst = v87;
  v86 = 5;
  if (v17 == 1)
  {
    v19 = 0;
  }
  else
  {
    v87[0] = v17 | 0x100;
    v19 = 1;
    HIDWORD(v86) = 1;
  }
  if ((v17 & 0xFF00) != 0x200)
  {
    v87[v19] = BYTE1(v17) | 0x200;
    v19 = (v19 + 1);
    HIDWORD(v86) = v19;
  }
  v20 = v17 >> 24;
  if ((v17 & 0xFF0000) != 0x30000)
  {
    v87[v19] = BYTE2(v17) | 0x300;
    v19 = (v19 + 1);
    HIDWORD(v86) = v19;
  }
  if (v20 != 4)
  {
    v87[v19] = v20 | 0x400;
    v19 = (v19 + 1);
    HIDWORD(v86) = v19;
  }
  if (v18 == 5)
  {
    if (!(_DWORD)v19)
      goto LABEL_62;
  }
  else
  {
    v87[v19] = v18 | 0x500;
    v19 = (v19 + 1);
    HIDWORD(v86) = v19;
  }
  v21 = a2 + 56;
  do
  {
    while (1)
    {
      v22 = 0;
      v23 = 0;
      v24 = (char *)__dst;
      v25 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v22 + 1) & 0x40) != 0)
          goto LABEL_107;
        v23 |= 1 << *((_BYTE *)__dst + v22 + 1);
        v22 += 2;
      }
      while (2 * v19 != v22);
      v26 = 0;
      do
      {
        v27 = *((_BYTE *)__dst + v26) & 0x7F;
        if (v27 >= 0x40)
          goto LABEL_107;
        v23 &= ~(1 << v27);
        v26 += 2;
      }
      while (2 * v19 != v26);
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v28.i16[0] = vaddlv_u8(v28);
      v29 = v28.i32[0];
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v23));
      v30.i16[0] = vaddlv_u8(v30);
      if (!(v30.i32[0] + v29))
        break;
      v31 = 0;
      if (v19 <= 1)
        v32 = 1;
      else
        v32 = v19;
      v33 = 2 * v32;
      while (1)
      {
        v34 = *((unsigned __int8 *)__dst + v31 + 1);
        if ((v34 & 0x7Fu) >= 0x40)
          goto LABEL_107;
        if (((v23 >> (v34 & 0x7F)) & 1) != 0)
          break;
        v31 += 2;
        if (v33 == v31)
          goto LABEL_52;
      }
      v35 = *((unsigned __int8 *)__dst + v31);
      if (v35 == v34)
        goto LABEL_60;
      v36 = (char)v35;
      if ((char)v35 == 63)
      {
        v37 = *(_DWORD *)(a2 + 200);
        v38 = *(_DWORD *)(a2 + 192);
        if ((char)v34 == 31)
          goto LABEL_56;
        v40 = v34 & 0x1F | 0xD2800000;
      }
      else
      {
        v37 = *(_DWORD *)(a2 + 200);
        v38 = *(_DWORD *)(a2 + 192);
        if (v34 == 31 || v36 == 31)
        {
LABEL_56:
          v40 = (char)v34 | (32 * v36) | 0x91000000;
          goto LABEL_57;
        }
        v40 = v34 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
      }
LABEL_57:
      if (v37 + 4 > v38)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
        v37 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v40;
      *(_DWORD *)(a2 + 200) += 4;
      v24 = (char *)__dst;
      v25 = HIDWORD(v86);
LABEL_60:
      memmove(&v24[v31], &v24[v31 + 2], 2 * v25 - v31 - 2);
      v19 = (HIDWORD(v86) - 1);
      HIDWORD(v86) = v19;
      if (!(_DWORD)v19)
        goto LABEL_61;
    }
    v41 = *(_BYTE *)__dst;
    v42 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v42, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v86) - 2);
    v43 = --HIDWORD(v86);
    if (HIDWORD(v86))
    {
      v44 = __dst;
      v45 = 2 * v43;
      while (*v44 != v42)
      {
        v44 += 2;
        v45 -= 2;
        if (!v45)
          goto LABEL_51;
      }
      *v44 = v41;
    }
LABEL_51:
    WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v89, 0);
    v19 = HIDWORD(v86);
LABEL_52:
    ;
  }
  while ((_DWORD)v19);
LABEL_61:
  v46 = __dst;
  if (v87 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v86) = 0;
    WTF::fastFree((unint64_t)v46, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 152), v47, v48, v49, v50, v51, v52, (int *)&v84);
  *(_QWORD *)(a1 + 92) = v84;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_67:
    v56 = 0;
    LOBYTE(v57) = 0;
    goto LABEL_68;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v54, v55, a5, a6, a7, a8);
    goto LABEL_67;
  }
  v21 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v89 = 0;
  v16 = *(_QWORD *)(a2 + 3960);
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v19 & 1) != 0)
    goto LABEL_108;
  while (2)
  {
    v88 = v19;
    v16 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v16, &v88, (uint64_t *)&__dst, &v89, a5, a6, a7, a8);
    if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v88 & 0xFFFFFFFF8, v53, v54, v55, a5, a6, a7, a8);
    if ((v16 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v54, v55, a5, a6, a7, a8);
      LOBYTE(v57) = 0;
      v56 = 0;
      goto LABEL_90;
    }
    v66 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v66)
    {
      v19 = 0;
      v67 = 16 * v66;
      v68 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v70 = *v68;
        v68 += 16;
        v69 = v70;
        if ((v70 & 0x40) != 0)
          goto LABEL_107;
        v19 |= 1 << v69;
        v67 -= 16;
        if (!v67)
          goto LABEL_101;
      }
    }
    v19 = 0;
LABEL_101:
    if ((v21 & 0x40) != 0)
    {
LABEL_107:
      __break(1u);
LABEL_108:
      v79 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      if ((v19 & 2) != 0
        || ((v80 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
          ? (v81 = (_DWORD)v80 == -1)
          : (v81 = 1),
            v81))
      {
        v82 = 2;
      }
      else if (v80 >> 28)
      {
        v83 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v83 = v79;
        *(_DWORD *)(v83 + 8) = v80;
        v82 = 1;
        v79 = v83;
      }
      else
      {
        v82 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        v79 = v80 << 36;
      }
      v19 = v79 | v82;
      continue;
    }
    break;
  }
  v56 = 1;
  v71 = v19 | (1 << v21);
  LOBYTE(v57) = 1;
  if ((v71 & 2) != 0)
  {
    v72 = (unsigned __int16)~(_WORD)v71 & 0xFFFE;
    if (v72)
    {
      v57 = __clz(__rbit64(v72));
      if (v57 == 1)
      {
        v56 = 1;
      }
      else
      {
        if (v57 == 31)
        {
          v75 = (unsigned int *)(a2 + 200);
          v74 = *(_DWORD *)(a2 + 200);
          v76 = (JSC::AssemblerBuffer *)(a2 + 56);
          v77 = v74 + 4;
          v78 = *(_DWORD *)(a2 + 192);
          v73 = -1862270913;
        }
        else
        {
          v73 = v57 | 0xAA0103E0;
          v75 = (unsigned int *)(a2 + 200);
          v74 = *(_DWORD *)(a2 + 200);
          v76 = (JSC::AssemblerBuffer *)(a2 + 56);
          v77 = v74 + 4;
          v78 = *(_DWORD *)(a2 + 192);
        }
        if (v77 > v78)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v76, (uint64_t)v53, v54, v55, a5, a6, a7, a8);
          v74 = *v75;
        }
        *(_DWORD *)(*(_QWORD *)v76 + v74) = v73;
        *v75 += 4;
        v56 = 1;
      }
    }
    else
    {
      v56 = 1;
      LOBYTE(v57) = -1;
    }
  }
LABEL_90:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v53, v54, v55, a5, a6, a7, a8);
LABEL_68:
  v58 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v58 == 31)
    {
      v59 = -1862270945;
    }
    else if (v58 == 255)
    {
      v59 = -1442774017;
    }
    else
    {
      v59 = v58 | 0xAA0003E0;
    }
    v61 = (unsigned int *)(a2 + 200);
    v60 = *(_DWORD *)(a2 + 200);
    if (v60 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v53, v54, v55, a5, a6, a7, a8);
      v60 = *v61;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v60) = v59;
    *v61 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v62 = *(_DWORD *)(a1 + 116);
    if (v62)
    {
      v63 = v62 - 1;
      v64 = 16 * (v62 - 1);
      while (*(_DWORD *)(a1 + 116) > v63)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v64, v54, v55, a5, a6, a7, a8);
        v64 -= 16;
        if (--v63 == -1)
          goto LABEL_81;
      }
      __break(0xC471u);
LABEL_131:
      JUMPOUT(0x197CEA3D8);
    }
LABEL_81:
    *(_BYTE *)(a2 + 5768) = 0;
  }
  if (v56 && !*(_BYTE *)(a1 + 101))
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v57, v54, v55, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, v54, v55, a5, a6, a7, a8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3575250;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3575250;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,unsigned long>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int *v94;
  uint64_t v95;
  int64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void *__dst;
  int v101;
  unsigned int v102;
  _WORD v103[4];
  unint64_t v104;
  unsigned int *v105;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_125;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 124))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 124));
    }
  }
  v15 = *(unsigned int *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 184);
  v18 = *(unsigned __int8 *)(a1 + 185);
  v19 = *(_QWORD *)(a1 + 192);
  __dst = v103;
  v101 = 2;
  if (v17 == 1)
  {
    if (v18 == 2)
      goto LABEL_69;
    v20 = 0;
  }
  else
  {
    v103[0] = v17 | 0x100;
    v20 = 1;
    v102 = 1;
    if (v18 == 2)
      goto LABEL_15;
  }
  v103[v20++] = v18 | 0x200;
  v102 = v20;
  do
  {
LABEL_15:
    v21 = 0;
    v22 = 0;
    v23 = (char *)__dst;
    v24 = v20;
    do
    {
      if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
        goto LABEL_125;
      v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
      v21 += 2;
    }
    while (2 * v20 != v21);
    v25 = 0;
    do
    {
      v26 = *((_BYTE *)__dst + v25) & 0x7F;
      if (v26 >= 0x40)
        goto LABEL_125;
      v22 &= ~(1 << v26);
      v25 += 2;
    }
    while (2 * v20 != v25);
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v27.i16[0] = vaddlv_u8(v27);
    v28 = v27.i32[0];
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.i32[0] + v28)
    {
      v30 = 0;
      if (v20 <= 1)
        v31 = 1;
      else
        v31 = v20;
      v32 = 2 * v31;
      while (1)
      {
        v33 = *((unsigned __int8 *)__dst + v30 + 1);
        if ((v33 & 0x7Fu) >= 0x40)
          goto LABEL_125;
        if (((v22 >> (v33 & 0x7F)) & 1) != 0)
          break;
        v30 += 2;
        if (v32 == v30)
          goto LABEL_65;
      }
      v34 = *((unsigned __int8 *)__dst + v30);
      if (v34 == v33)
      {
LABEL_63:
        memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
        v20 = v102 - 1;
        goto LABEL_64;
      }
      v35 = (char)v34;
      if ((char)v34 == 63)
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        if ((char)v33 != 31)
        {
          v39 = v33 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        v38 = v33 == 31 || v35 == 31;
        if (!v38)
        {
          v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v36 + 4 > v37)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v36 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v39;
          *(_DWORD *)(v8 + 200) += 4;
          v23 = (char *)__dst;
          v24 = v102;
          goto LABEL_63;
        }
      }
      v39 = (char)v33 | (32 * v35) | 0x91000000;
      goto LABEL_60;
    }
    v40 = *(_BYTE *)__dst;
    v41 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v41, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v102 - 2);
    v42 = v102 - 1;
    v38 = v102 == 1;
    v102 = v42;
    v43 = (unsigned __int8 *)__dst;
    v44 = (unsigned __int8 *)__dst + 2 * v42;
    if (v38)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      a2 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = __dst;
      while (*v46 != v41)
      {
        v46 += 2;
        v45 -= 2;
        if (!v45)
          goto LABEL_43;
      }
      *v46 = v40;
LABEL_43:
      v47 = 0;
      v48 = v43;
      a2 = v44;
      v49 = (char *)v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != (char *)__dst + 2 * v102)
          {
            v98 = (char *)v44;
            if (v43 == a2)
            {
              v50 = (unsigned __int8 *)v49;
            }
            else
            {
              v96 = v48 - a2;
              v97 = v49;
              memmove(v49, a2, v48 - a2);
              v50 = (unsigned __int8 *)&v97[v96];
            }
            v44 = (unsigned __int8 *)v98;
          }
          a2 = v43 + 2;
          ++v47;
          v49 = (char *)v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v43 = (unsigned __int8 *)__dst;
      v51 = v102;
      v52 = v102;
      v44 = (unsigned __int8 *)v49;
    }
    v53 = &v43[2 * v51];
    if (a2 != v53)
    {
      memmove(v44, a2, v53 - a2);
      v52 = v102;
    }
    v20 = v52 - v47;
LABEL_64:
    v102 = v20;
LABEL_65:
    ;
  }
  while (v20);
  v54 = __dst;
  if (v103 != __dst && __dst)
  {
    __dst = 0;
    v101 = 0;
    WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v19, 3, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v55, v56, v57, v58, v59);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v55, v56, v57, v58, v59);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v60, v61, v62, v63, v64, v65, (int *)&v99);
  *(_QWORD *)(a1 + 92) = v99;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v72 = 0;
    LOBYTE(v73) = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 0, v66, v67, v68, v69, v70, v71);
      goto LABEL_74;
    }
    __dst = (void *)2;
    v105 = 0;
    v77 = *(_QWORD *)(v8 + 3960);
    v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
    if ((v78 & 1) != 0)
    {
      v87 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      if ((v78 & 2) != 0
        || ((v88 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
          ? (v89 = (_DWORD)v88 == -1)
          : (v89 = 1),
            v89))
      {
        v90 = 2;
      }
      else if (v88 >> 28)
      {
        v95 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v95 = v87;
        *(_DWORD *)(v95 + 8) = v88;
        v90 = 1;
        v87 = v95;
      }
      else
      {
        v90 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
        v87 = v88 << 36;
      }
      v78 = v87 | v90;
    }
    v104 = v78;
    v80 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v104, (uint64_t *)&__dst, &v105, v68, v69, v70, v71);
    if ((v104 & 1) != 0 && (v104 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v104 & 0xFFFFFFFF8, v79, v66, v67, v68, v69, v70, v71);
    if ((v80 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 0, v66, v67, v68, v69, v70, v71);
      LOBYTE(v73) = 0;
      v72 = 0;
      goto LABEL_89;
    }
    v81 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v81)
    {
      v82 = 0;
      v83 = 16 * v81;
      v84 = (char *)(*(_QWORD *)(a1 + 112) + 2);
      while (1)
      {
        v86 = *v84;
        v84 += 16;
        v85 = v86;
        if ((v86 & 0x40) != 0)
          break;
        v82 |= 1 << v85;
        v83 -= 16;
        if (!v83)
        {
          if ((v82 & 1) == 0)
            goto LABEL_97;
          v91 = (unsigned __int16)~(_WORD)v82;
          if (!v91)
          {
            v72 = 1;
            LOBYTE(v73) = -1;
            goto LABEL_89;
          }
          v73 = __clz(__rbit64(v91));
          if (v73)
          {
            if (v73 == 31)
              v92 = -1862270945;
            else
              v92 = v73 | 0xAA0003E0;
            v94 = (unsigned int *)(v8 + 200);
            v93 = *(_DWORD *)(v8 + 200);
            if (v93 + 4 > *(_DWORD *)(v8 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v79, v66, v67, v68, v69, v70, v71);
              v93 = *v94;
            }
            *(_DWORD *)(*(_QWORD *)(v8 + 56) + v93) = v92;
            *v94 += 4;
          }
          goto LABEL_98;
        }
      }
LABEL_125:
      __break(1u);
LABEL_126:
      __break(0xC471u);
      return;
    }
LABEL_97:
    LOBYTE(v73) = 0;
LABEL_98:
    v72 = 1;
LABEL_89:
    if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
      WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v79, v66, v67, v68, v69, v70, v71);
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v74 = *(_DWORD *)(a1 + 124);
    if (v74)
    {
      v75 = v74 - 1;
      v76 = 16 * (v74 - 1);
      while (*(_DWORD *)(a1 + 124) > v75)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 112) + v76, v66, v67, v68, v69, v70, v71);
        v76 -= 16;
        if (--v75 == -1)
          goto LABEL_80;
      }
      goto LABEL_126;
    }
LABEL_80:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v72)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v73, v66, v67, v68, v69, v70, v71);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v66, v67, v68, v69, v70, v71);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::JSObject *,long long,JSC::MegamorphicCache::StoreEntry const*),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<void> (*&)(JSC::VM *,JSC::JSObject *,long long,JSC::MegamorphicCache::StoreEntry const*),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&,JSC::JSValueRegs&,JSC::ARM64Registers::RegisterID&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, int *a7, uint64_t *a8, char *a9, char *a10, char *a11)
{
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  unsigned int v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  WTF *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v51;
  WTF *v52;
  int v53;
  char v54;
  uint64_t v55;
  _BYTE *v57;
  unsigned int v58;
  _BYTE v59[24];
  WTF *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[24];
  WTF *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[32];

  v18 = WTF::fastMalloc((WTF *)0xB8);
  v19 = *((unsigned int *)a2 + 3);
  v57 = v59;
  v58 = v19;
  if (v19 < 3)
  {
    v20 = v59;
  }
  else
  {
    if (v19 >= 0x15555556)
      goto LABEL_37;
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v19));
    v57 = v20;
    LODWORD(v19) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v19)
  {
    v21 = *a2;
    v22 = *a2 + 12 * v19;
    do
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      *(_QWORD *)(v20 + 4) = *(_QWORD *)(v21 + 4);
      v21 += 12;
      v20 += 12;
    }
    while (v21 != v22);
  }
  v23 = *a3;
  v55 = *a4;
  v24 = *a5;
  v54 = *a6;
  v53 = *a7;
  v25 = *a8;
  v26 = *a9;
  v27 = *a10;
  v28 = *a11;
  v29 = v58;
  v60 = (WTF *)v63;
  v61 = 2;
  v62 = v58;
  if (v58 < 3)
  {
    v30 = v63;
    if (!v58)
      goto LABEL_14;
  }
  else
  {
    if (v58 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CEB028);
    }
    v30 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v58));
    v61 = 12 * v58 / 0xC;
    v60 = (WTF *)v30;
    v29 = v58;
  }
  v31 = v57;
  v32 = &v57[12 * v29];
  do
  {
    *(_DWORD *)v30 = *(_DWORD *)v31;
    *(_QWORD *)(v30 + 4) = *(_QWORD *)(v31 + 4);
    v31 += 12;
    v30 += 12;
  }
  while (v31 != v32);
LABEL_14:
  v33 = v62;
  v64 = (WTF *)v67;
  v65 = 2;
  v66 = v62;
  if (v62 < 3)
  {
    v39 = v67;
    if (!v62)
      goto LABEL_21;
LABEL_19:
    v40 = v60;
    v41 = (WTF *)((char *)v60 + 12 * v33);
    do
    {
      *(_DWORD *)v39 = *(_DWORD *)v40;
      *(_QWORD *)(v39 + 4) = *(_QWORD *)((char *)v40 + 4);
      v40 = (WTF *)((char *)v40 + 12);
      v39 += 12;
    }
    while (v40 != v41);
    goto LABEL_21;
  }
  if (v62 >= 0x15555556)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197CEB020);
  }
  v34 = v28;
  v35 = v27;
  v36 = v26;
  v37 = v25;
  v38 = 12 * v62;
  v39 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v62));
  v65 = (v38 & 0xFFFFFFFC) / 0xC;
  v64 = (WTF *)v39;
  v33 = v62;
  v25 = v37;
  v26 = v36;
  v27 = v35;
  v28 = v34;
  if (v62)
    goto LABEL_19;
LABEL_21:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v18, (uint64_t *)&v64, v23);
  v49 = v64;
  if (v67 != (_BYTE *)v64 && v64 != 0)
  {
    v64 = 0;
    v65 = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)v18 = off_1E35752B0;
  *(_QWORD *)(v18 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v18 + 100) = v24;
  *(_BYTE *)(v18 + 101) = v54;
  *(_DWORD *)(v18 + 104) = v53;
  *(_QWORD *)(v18 + 112) = v18 + 128;
  v51 = v18 + 112;
  *(_QWORD *)(v18 + 120) = 2;
  if (!v24)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v23, 0, v51, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v47, v48);
  v52 = v60;
  if (v63 != (_BYTE *)v60 && v60)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v52, v42, v51, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)v18 = &off_1E3575280;
  *(_QWORD *)(v18 + 160) = v55;
  *(_QWORD *)(v18 + 168) = v25;
  *(_BYTE *)(v18 + 176) = v26;
  *(_BYTE *)(v18 + 177) = v27;
  *(_BYTE *)(v18 + 178) = v28;
  *a1 = v18;
  if (v59 != v57)
  {
    if (v57)
      WTF::fastFree((unint64_t)v57, v42, v51, v44, v45, v46, v47, v48);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::JSObject *,long long,JSC::MegamorphicCache::StoreEntry const*),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35752B0;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::JSObject *,long long,JSC::MegamorphicCache::StoreEntry const*),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35752B0;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::JSObject *,long long,JSC::MegamorphicCache::StoreEntry const*),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::JSObject *,long long,JSC::MegamorphicCache::StoreEntry const*),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  char v37;
  char v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned __int8 *v44;
  char *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v65;
  void *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char v73;
  char v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  uint64_t v79;
  int64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void *__dst;
  uint64_t v85;
  _WORD v86[4];
  unint64_t v87;
  unsigned int *v88;

  v10 = (uint64_t)a2;
  v12 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v12)
  {
    v8 = 0;
    for (i = 0; i != v12; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_126;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v8), v10, a3, a4, a5, a6, a7, a8);
      v8 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v10 + 5768) = 1;
    if (*(_DWORD *)(a1 + 124))
    {
      v13 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v10, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
        ++v8;
        v13 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 124));
    }
  }
  v14 = *(_QWORD *)(a1 + 168);
  v15 = *(unsigned __int8 *)(a1 + 176);
  v16 = *(unsigned __int8 *)(a1 + 177);
  v17 = *(unsigned __int8 *)(a1 + 178);
  __dst = v86;
  v85 = 3;
  if (v15 == 1)
  {
    v18 = 0;
  }
  else
  {
    v86[0] = v15 | 0x100;
    v18 = 1;
    HIDWORD(v85) = 1;
  }
  if (v16 != 2)
  {
    v86[v18++] = v16 | 0x200;
    HIDWORD(v85) = v18;
  }
  if (v17 == 3)
  {
    if (!v18)
      goto LABEL_73;
  }
  else
  {
    v86[v18++] = v17 | 0x300;
    HIDWORD(v85) = v18;
  }
  v8 = v10 + 56;
  do
  {
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_110;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_110;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      i = 0;
      if (v18 <= 1)
        v28 = 1;
      else
        v28 = v18;
      v29 = 2 * v28;
      while (1)
      {
        v30 = *((unsigned __int8 *)__dst + i + 1);
        if ((v30 & 0x7Fu) >= 0x40)
          goto LABEL_110;
        if (((v20 >> (v30 & 0x7F)) & 1) != 0)
          break;
        i += 2;
        if (v29 == i)
          goto LABEL_66;
      }
      v31 = *((unsigned __int8 *)__dst + i);
      if (v31 == v30)
        goto LABEL_64;
      v32 = (char)v31;
      if ((char)v31 == 63)
      {
        v33 = *(_DWORD *)(v10 + 200);
        v34 = *(_DWORD *)(v10 + 192);
        if ((char)v30 != 31)
        {
          v36 = v30 & 0x1F | 0xD2800000;
          goto LABEL_61;
        }
      }
      else
      {
        v33 = *(_DWORD *)(v10 + 200);
        v34 = *(_DWORD *)(v10 + 192);
        v35 = v30 == 31 || v32 == 31;
        if (!v35)
        {
          v36 = v30 & 0xFFE0FFFF | ((v32 & 0x1F) << 16) | 0xAA0003E0;
LABEL_61:
          if (v33 + 4 > v34)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v33 = *(_DWORD *)(v10 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + v33) = v36;
          *(_DWORD *)(v10 + 200) += 4;
          v21 = (char *)__dst;
          v22 = HIDWORD(v85);
LABEL_64:
          memmove(&v21[i], &v21[i + 2], 2 * v22 - i - 2);
          v18 = HIDWORD(v85) - 1;
          goto LABEL_65;
        }
      }
      v36 = (char)v30 | (32 * v32) | 0x91000000;
      goto LABEL_61;
    }
    v37 = *(_BYTE *)__dst;
    v38 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v10, *(char *)__dst, v38, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v85) - 2);
    v39 = (HIDWORD(v85) - 1);
    v35 = HIDWORD(v85) == 1;
    HIDWORD(v85) = v39;
    v40 = (unsigned __int8 *)__dst;
    v41 = (unsigned __int8 *)__dst + 2 * v39;
    if (v35)
    {
      v47 = 0;
      v48 = 0;
      i = 0;
      a2 = v41;
    }
    else
    {
      v42 = 2 * v39;
      v43 = __dst;
      while (*v43 != v38)
      {
        v43 += 2;
        v42 -= 2;
        if (!v42)
          goto LABEL_45;
      }
      *v43 = v37;
LABEL_45:
      i = 0;
      v44 = v40;
      a2 = v41;
      v45 = (char *)v41;
      do
      {
        if (*v40 == v40[1])
        {
          v46 = v40;
          if (v45 != (char *)__dst + 2 * HIDWORD(v85))
          {
            v82 = (char *)v41;
            if (v40 == a2)
            {
              v46 = (unsigned __int8 *)v45;
            }
            else
            {
              v80 = v44 - a2;
              v81 = v45;
              memmove(v45, a2, v44 - a2);
              v46 = (unsigned __int8 *)&v81[v80];
            }
            v41 = (unsigned __int8 *)v82;
          }
          a2 = v40 + 2;
          i = (i + 1);
          v45 = (char *)v46;
        }
        v40 += 2;
        v44 += 2;
      }
      while (v40 < v41);
      v40 = (unsigned __int8 *)__dst;
      v47 = HIDWORD(v85);
      v48 = HIDWORD(v85);
      v41 = (unsigned __int8 *)v45;
    }
    v49 = &v40[2 * v47];
    if (a2 != v49)
    {
      memmove(v41, a2, v49 - a2);
      v48 = HIDWORD(v85);
    }
    v18 = v48 - i;
LABEL_65:
    HIDWORD(v85) = v18;
LABEL_66:
    ;
  }
  while (v18);
  v50 = __dst;
  if (v86 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v85) = 0;
    WTF::fastFree((unint64_t)v50, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_73:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, v14, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, *(_QWORD *)(a1 + 160), v51, v52, v53, v54, v55, v56, (int *)&v83);
  *(_QWORD *)(a1 + 92) = v83;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_76:
    v59 = 0;
    LOBYTE(v60) = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 0, v57, v58, a5, a6, a7, a8);
      goto LABEL_76;
    }
    __dst = (void *)2;
    v88 = 0;
    v14 = *(_QWORD *)(v10 + 3960);
    v65 = *(_QWORD *)(*(_QWORD *)(v10 + 3976) + 8);
    if ((v65 & 1) != 0)
    {
      v8 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
      if ((v65 & 2) == 0)
      {
        i = *(unsigned int *)((v65 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)i != 0x3FFFFFFF && (_DWORD)i != -1)
          goto LABEL_111;
      }
      v68 = 2;
      goto LABEL_113;
    }
    while (1)
    {
      v87 = v65;
      v14 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v14, &v87, (uint64_t *)&__dst, &v88, a5, a6, a7, a8);
      if ((v87 & 1) != 0 && (v87 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v87 & 0xFFFFFFFF8, v66, v57, v58, a5, a6, a7, a8);
      if ((v14 & 1) == 0)
      {
        JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 0, v57, v58, a5, a6, a7, a8);
        LOBYTE(v60) = 0;
        v59 = 0;
        goto LABEL_91;
      }
      v69 = *(unsigned int *)(a1 + 124);
      if (!(_DWORD)v69)
        break;
      v70 = 0;
      v71 = 16 * v69;
      v72 = (char *)(*(_QWORD *)(a1 + 112) + 2);
      while (1)
      {
        v74 = *v72;
        v72 += 16;
        v73 = v74;
        if ((v74 & 0x40) != 0)
          break;
        v70 |= 1 << v73;
        v71 -= 16;
        if (!v71)
        {
          if ((v70 & 1) == 0)
            goto LABEL_108;
          v75 = (unsigned __int16)~(_WORD)v70;
          if (!v75)
          {
            v59 = 1;
            LOBYTE(v60) = -1;
            goto LABEL_91;
          }
          v60 = __clz(__rbit64(v75));
          if (v60)
          {
            if (v60 == 31)
              v76 = -1862270945;
            else
              v76 = v60 | 0xAA0003E0;
            v78 = (unsigned int *)(v10 + 200);
            v77 = *(_DWORD *)(v10 + 200);
            if (v77 + 4 > *(_DWORD *)(v10 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), (uint64_t)v66, v57, v58, a5, a6, a7, a8);
              v77 = *v78;
            }
            *(_DWORD *)(*(_QWORD *)(v10 + 56) + v77) = v76;
            *v78 += 4;
          }
          goto LABEL_109;
        }
      }
LABEL_110:
      __break(1u);
LABEL_111:
      if (i >> 28)
      {
        v79 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v79 = v8;
        *(_DWORD *)(v79 + 8) = i;
        v68 = 1;
        v8 = v79;
      }
      else
      {
        v68 = v8;
        v8 = i << 36;
      }
LABEL_113:
      v65 = v8 | v68;
    }
LABEL_108:
    LOBYTE(v60) = 0;
LABEL_109:
    v59 = 1;
LABEL_91:
    if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
      WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v66, v57, v58, a5, a6, a7, a8);
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v61 = *(_DWORD *)(a1 + 124);
    if (v61)
    {
      v62 = v61 - 1;
      v63 = 16 * (v61 - 1);
      while (*(_DWORD *)(a1 + 124) > v62)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v10, *(_QWORD *)(a1 + 112) + v63, v57, v58, a5, a6, a7, a8);
        v63 -= 16;
        if (--v62 == -1)
          goto LABEL_82;
      }
      __break(0xC471u);
LABEL_126:
      JUMPOUT(0x197CEB874);
    }
LABEL_82:
    *(_BYTE *)(v10 + 5768) = 0;
  }
  if (v59 && !*(_BYTE *)(a1 + 101))
    JSC::DFG::SpeculativeJIT::exceptionCheck(v10, (char)v60, v57, v58, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v10, v57, v58, a5, a6, a7, a8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35747B0;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35747B0;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  char *v69;
  void *__dst;
  uint64_t v71;
  _WORD v72[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 124));
      }
    }
    v15 = *(unsigned int *)(a1 + 168);
    v16 = *(_QWORD *)(a1 + 176);
    v17 = *(unsigned __int8 *)(a1 + 184);
    v18 = *(unsigned __int8 *)(a1 + 185);
    v19 = *(unsigned __int8 *)(a1 + 186);
    __dst = v72;
    v71 = 3;
    if (v17 == 1)
    {
      v20 = 0;
    }
    else
    {
      v72[0] = v17 | 0x100;
      v20 = 1;
      HIDWORD(v71) = 1;
    }
    if (v18 != 2)
    {
      v72[v20++] = v18 | 0x200;
      HIDWORD(v71) = v20;
    }
    if (v19 == 3)
    {
      if (!v20)
      {
LABEL_72:
        if (v15 == 0xFFFFFFFFLL)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
        else
LABEL_76:
          JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v55, v56, v57, v58, v59, v60, (int *)&__dst);
        *(_QWORD *)(a1 + 92) = __dst;
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag>::tearDown(a1, v8, v61, v62, v63, v64, v65, v66);
        return;
      }
    }
    else
    {
      v72[v20++] = v19 | 0x300;
      HIDWORD(v71) = v20;
    }
    do
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
        {
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_75;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
      {
        v30 = 0;
        if (v20 <= 1)
          v31 = 1;
        else
          v31 = v20;
        v32 = 2 * v31;
        while (1)
        {
          v33 = *((unsigned __int8 *)__dst + v30 + 1);
          if ((v33 & 0x7Fu) >= 0x40)
            goto LABEL_75;
          if (((v22 >> (v33 & 0x7F)) & 1) != 0)
            break;
          v30 += 2;
          if (v32 == v30)
            goto LABEL_65;
        }
        v34 = *((unsigned __int8 *)__dst + v30);
        if (v34 != v33)
        {
          v35 = (char)v34;
          if ((char)v34 == 63)
          {
            v36 = *(_DWORD *)(v8 + 200);
            v37 = *(_DWORD *)(v8 + 192);
            if ((char)v33 == 31)
              goto LABEL_59;
            v39 = v33 & 0x1F | 0xD2800000;
          }
          else
          {
            v36 = *(_DWORD *)(v8 + 200);
            v37 = *(_DWORD *)(v8 + 192);
            v38 = v33 == 31 || v35 == 31;
            if (!v38)
            {
              v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_60;
            }
LABEL_59:
            v39 = (char)v33 | (32 * v35) | 0x91000000;
          }
LABEL_60:
          if (v36 + 4 > v37)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v36 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v39;
          *(_DWORD *)(v8 + 200) += 4;
          v23 = (char *)__dst;
          v24 = HIDWORD(v71);
        }
        memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
        v20 = HIDWORD(v71) - 1;
        goto LABEL_64;
      }
      v40 = *(_BYTE *)__dst;
      v41 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v41, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v71) - 2);
      v42 = (HIDWORD(v71) - 1);
      v38 = HIDWORD(v71) == 1;
      HIDWORD(v71) = v42;
      v43 = (unsigned __int8 *)__dst;
      v44 = (unsigned __int8 *)__dst + 2 * v42;
      if (v38)
      {
        v51 = 0;
        v52 = 0;
        v47 = 0;
        a2 = v44;
      }
      else
      {
        v45 = 2 * v42;
        v46 = __dst;
        while (*v46 != v41)
        {
          v46 += 2;
          v45 -= 2;
          if (!v45)
            goto LABEL_44;
        }
        *v46 = v40;
LABEL_44:
        v47 = 0;
        v48 = v43;
        a2 = v44;
        v49 = (char *)v44;
        do
        {
          if (*v43 == v43[1])
          {
            v50 = v43;
            if (v49 != (char *)__dst + 2 * HIDWORD(v71))
            {
              v69 = (char *)v44;
              if (v43 == a2)
              {
                v50 = (unsigned __int8 *)v49;
              }
              else
              {
                v67 = v48 - a2;
                v68 = v49;
                memmove(v49, a2, v48 - a2);
                v50 = (unsigned __int8 *)&v68[v67];
              }
              v44 = (unsigned __int8 *)v69;
            }
            a2 = v43 + 2;
            ++v47;
            v49 = (char *)v50;
          }
          v43 += 2;
          v48 += 2;
        }
        while (v43 < v44);
        v43 = (unsigned __int8 *)__dst;
        v51 = HIDWORD(v71);
        v52 = HIDWORD(v71);
        v44 = (unsigned __int8 *)v49;
      }
      v53 = &v43[2 * v51];
      if (a2 != v53)
      {
        memmove(v44, a2, v53 - a2);
        v52 = HIDWORD(v71);
      }
      v20 = v52 - v47;
LABEL_64:
      HIDWORD(v71) = v20;
LABEL_65:
      ;
    }
    while (v20);
    v54 = __dst;
    if (v72 != __dst)
    {
      if (__dst)
      {
        __dst = 0;
        LODWORD(v71) = 0;
        WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_72;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compileCreateClonedArguments(JSC::DFG::Node *)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;

  *(_QWORD *)a1 = &off_1E3575310;
  v9 = *(_QWORD *)(a1 + 32);
  if (a1 + 48 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compileCreateClonedArguments(JSC::DFG::Node *)::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  unint64_t v11;

  *(_QWORD *)this = &off_1E3575310;
  v9 = (WTF *)*((_QWORD *)this + 4);
  if ((WTF *)((char *)this + 48) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *WTF::Detail::CallableWrapper<JSC::DFG::SpeculativeJIT::compileCreateClonedArguments(JSC::DFG::Node *)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  JSC::AssemblerBuffer *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  uint64_t *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::DFG::Node *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int i;
  unsigned int v94;
  char v95;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int *v123;
  JSC::AssemblerBuffer *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::ARM64LogicalImmediate *v138;
  unint64_t v139;
  unsigned int *v140;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    do
    {
      if (v12 >= *(unsigned int *)(a1 + 44))
      {
        __break(0xC471u);
        goto LABEL_153;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 32) + v11), v9, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
    }
    while (v13 != v11);
  }
  *(_BYTE *)(v9 + 5768) = 1;
  if (*(_DWORD *)(a1 + 28))
  {
    v97 = 0;
    v98 = 0;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v9, *(_QWORD *)(a1 + 16) + v97, a3, a4, a5, a6, a7, a8);
      ++v98;
      v97 += 16;
    }
    while (v98 < *(unsigned int *)(a1 + 28));
  }
  v14 = *(unsigned __int8 *)(a1 + 72);
  if (v14 != 5)
  {
    if (v14 == 31)
    {
      v17 = (unsigned int *)(v9 + 200);
      v16 = *(_DWORD *)(v9 + 200);
      v18 = (JSC::AssemblerBuffer *)(v9 + 56);
      v19 = v16 + 4;
      v20 = *(_DWORD *)(v9 + 192);
      v15 = -1862269979;
    }
    else
    {
      if (v14 == 63)
        v15 = -763363323;
      else
        v15 = ((v14 & 0x1F) << 16) | 0xAA0003E5;
      v17 = (unsigned int *)(v9 + 200);
      v16 = *(_DWORD *)(v9 + 200);
      v18 = (JSC::AssemblerBuffer *)(v9 + 56);
      v19 = v16 + 4;
      v20 = *(_DWORD *)(v9 + 192);
    }
    if (v19 > v20)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
      v16 = *v17;
    }
    *(_DWORD *)(*(_QWORD *)v18 + v16) = v15;
    *v17 += 4;
  }
  v21 = **(_QWORD **)(a1 + 80);
  if ((v21 & 1) != 0)
  {
    v104 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v105 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v105 != 0x3FFFFFFF)
        ? (v106 = (_DWORD)v105 == -1)
        : (v106 = 1),
          v106))
    {
      v107 = 2;
    }
    else if (v105 >> 28)
    {
      v133 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v133 = v104;
      *(_DWORD *)(v133 + 8) = v105;
      v107 = 1;
      v104 = v133;
    }
    else
    {
      v107 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v104 = v105 << 36;
    }
    v127 = v104 | v107;
    v137 = v127;
    JSC::DFG::SpeculativeJIT::emitGetCallee((_DWORD *)v9, &v137, 4, a4, a5, a6, a7, a8);
    if ((v127 & 1) != 0 && (v127 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v127 & 0xFFFFFFFF8, v128, v129, v22, v23, v24, v25, v26);
  }
  else
  {
    v137 = **(_QWORD **)(a1 + 80);
    JSC::DFG::SpeculativeJIT::emitGetCallee((_DWORD *)v9, &v137, 4, a4, a5, a6, a7, a8);
  }
  v27 = **(_QWORD **)(a1 + 80);
  v28 = (uint64_t *)(v27 & 0xFFFFFFFF8);
  if ((v27 & 1) != 0)
  {
    v108 = *v28;
    if ((v27 & 2) != 0
      || ((v109 = *(_DWORD *)((v27 & 0xFFFFFFFF8) + 8), v109 != 0x3FFFFFFF) ? (v110 = v109 == -1) : (v110 = 1), v110))
    {
      v111 = 2;
    }
    else if (v109 >> 28)
    {
      v134 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v134 = v108;
      *(_DWORD *)(v134 + 8) = v109;
      v111 = 1;
      v108 = v134;
    }
    else
    {
      v111 = v108;
      v108 = 0;
    }
    v130 = v108 | v111;
    v28 = (uint64_t *)(v130 & 0xFFFFFFFF8);
    if ((v130 & 1) != 0)
    {
      v29 = 0;
      v30 = (uint64_t *)*v28;
      if (*v28)
        goto LABEL_121;
LABEL_19:
      v31 = 0x200000001DLL;
      goto LABEL_20;
    }
  }
  v29 = 1;
  v30 = v28;
  if (!v28)
    goto LABEL_19;
LABEL_121:
  v131 = v30[3];
  if ((v131 >> 60) - 3 > 2)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v9, (JSC::ARM64LogicalImmediate *)((v131 & 0x3FFFFF) - 1), 3, v22, v23, v24, v25, v26);
    if ((v29 & 1) != 0)
      goto LABEL_23;
    goto LABEL_124;
  }
  v31 = ((unint64_t)*((unsigned int *)v30 + 9) << 35) | 0x1D;
LABEL_20:
  JSC::MacroAssemblerARM64::load32(v9, v31, 3, v22, v23, v24, v25, v26);
  v39 = *(_DWORD *)(v9 + 200);
  if (v39 + 4 > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)v32, v33, v34, v35, v36, v37, v38);
    v39 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v39) = 1358955619;
  *(_DWORD *)(v9 + 200) += 4;
  if ((v29 & 1) == 0)
  {
LABEL_124:
    if (v28)
      WTF::fastFree((unint64_t)v28, v32, v33, v34, v35, v36, v37, v38);
  }
LABEL_23:
  v40 = **(_QWORD **)(a1 + 80);
  v41 = (uint64_t *)(v40 & 0xFFFFFFFF8);
  if ((v40 & 1) == 0)
    goto LABEL_24;
  v112 = *v41;
  if ((v40 & 2) != 0
    || ((v113 = *(_DWORD *)((v40 & 0xFFFFFFFF8) + 8), v113 != 0x3FFFFFFF) ? (v114 = v113 == -1) : (v114 = 1), v114))
  {
    v115 = 2;
  }
  else if (v113 >> 28)
  {
    v135 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v135 = v112;
    *(_DWORD *)(v135 + 8) = v113;
    v115 = 1;
    v112 = v135;
  }
  else
  {
    v115 = v112;
    v112 = 0;
  }
  v132 = v112 | v115;
  v41 = (uint64_t *)(v132 & 0xFFFFFFFF8);
  if ((v132 & 1) != 0)
  {
    v42 = 0;
    v43 = (uint64_t *)*v41;
    if (*v41)
      goto LABEL_130;
  }
  else
  {
LABEL_24:
    v42 = 1;
    v43 = v41;
    if (v41)
    {
LABEL_130:
      v55 = *v43;
      if (v55 && *(_DWORD *)v55 >= 2u)
      {
        if (*(_BYTE *)(v55 + 13) != 8)
        {
          v54 = 260;
          __break(0xC471u);
          goto LABEL_143;
        }
        v44 = (8 * *(_DWORD *)(v55 + 14));
      }
      else
      {
        v44 = 4294967288;
      }
      goto LABEL_26;
    }
  }
  v44 = 48;
LABEL_26:
  JSC::MacroAssemblerARM64::add64(v9, v44, 29, 2, v35, v36, v37, v38);
  if ((v42 & 1) == 0 && v41)
    WTF::fastFree((unint64_t)v41, v45, v46, v47, v48, v49, v50, v51);
  v52 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 844);
  if (v52)
    v53 = 16 * (v52 & 0xFFFFFFFE);
  else
    v53 = 0;
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v137, (JSC::DFG::JITCompiler *)v9, v53, v47, v48, v49, v50, v51);
  v55 = v137;
  if (v137 != 0xFFFFFFFFLL)
    goto LABEL_144;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, (uint64_t)v138, 1, v54, v35, v36, v37, v38);
  while (1)
  {
    v62 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 80), v56, v57, v58, v59, v60, v61);
    if ((_DWORD)v62 == -1)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v63, 0, v64, v65, v66, v67, v68);
    else
      JSC::MacroAssemblerARM64::load64(v9, (v62 << 35) + 0x380000001ALL, 0, v64, v65, v66, v67, v68);
    JSC::DFG::SpeculativeJIT::appendCall(v9, (uint64_t)operationCreateClonedArguments, v69, v70, v71, v72, v73, v74, (int *)&v137);
    v79 = *(_BYTE *)(a1 + 96);
    v137 = 2;
    v140 = 0;
    v80 = *(_QWORD *)(v9 + 3960);
    v81 = *(_QWORD *)(*(_QWORD *)(v9 + 3976) + 8);
    if ((v81 & 1) != 0)
    {
      v116 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
      if ((v81 & 2) != 0
        || (v117 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v117 == 0x3FFFFFFF)
        || (_DWORD)v117 == -1)
      {
        v118 = 2;
      }
      else if (v117 >> 28)
      {
        v136 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v136 = v116;
        *(_DWORD *)(v136 + 8) = v117;
        v118 = 1;
        v116 = v136;
      }
      else
      {
        v118 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
        v116 = v117 << 36;
      }
      v81 = v116 | v118;
    }
    v139 = v81;
    v84 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v80, &v139, &v137, &v140, v75, v76, v77, v78);
    if ((v139 & 1) != 0 && (v139 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v139 & 0xFFFFFFFF8, v82, v83, v54, v35, v36, v37, v38);
    if ((v84 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, v83, v54, v35, v36, v37, v38);
      LOBYTE(v85) = 0;
      goto LABEL_38;
    }
    v99 = *(unsigned int *)(a1 + 28);
    if (!(_DWORD)v99)
      break;
    v55 = 0;
    v100 = 16 * v99;
    v101 = (char *)(*(_QWORD *)(a1 + 16) + 2);
    while (1)
    {
      v103 = *v101;
      v101 += 16;
      v102 = v103;
      if ((v103 & 0x40) != 0)
        break;
      v55 |= 1 << v102;
      v100 -= 16;
      if (!v100)
        goto LABEL_105;
    }
LABEL_143:
    __break(1u);
LABEL_144:
    JSC::MacroAssemblerARM64::load64(v9, (v55 << 35) + 0x380000001ALL, 1, v54, v35, v36, v37, v38);
  }
  v55 = 0;
LABEL_105:
  if ((v79 & 0x40) != 0)
    goto LABEL_143;
  LOBYTE(v85) = 1;
  v119 = v55 | (1 << v79);
  if ((v119 & 2) != 0)
  {
    v120 = (unsigned __int16)~(_WORD)v119 & 0xFFFE;
    if (v120)
    {
      v85 = __clz(__rbit64(v120));
      if (v85 != 1)
      {
        if (v85 == 31)
        {
          v123 = (unsigned int *)(v9 + 200);
          v122 = *(_DWORD *)(v9 + 200);
          v124 = (JSC::AssemblerBuffer *)(v9 + 56);
          v125 = v122 + 4;
          v126 = *(_DWORD *)(v9 + 192);
          v121 = -1862270913;
        }
        else
        {
          v121 = v85 | 0xAA0103E0;
          v123 = (unsigned int *)(v9 + 200);
          v122 = *(_DWORD *)(v9 + 200);
          v124 = (JSC::AssemblerBuffer *)(v9 + 56);
          v125 = v122 + 4;
          v126 = *(_DWORD *)(v9 + 192);
        }
        if (v125 > v126)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v124, (uint64_t)v82, v83, v54, v35, v36, v37, v38);
          v122 = *v123;
        }
        *(_DWORD *)(*(_QWORD *)v124 + v122) = v121;
        *v123 += 4;
      }
    }
    else
    {
      LOBYTE(v85) = -1;
    }
  }
LABEL_38:
  if ((v137 & 1) != 0 && (v137 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v137 & 0xFFFFFFFF8, v82, v83, v54, v35, v36, v37, v38);
  v86 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a1 + 96))
  {
    if (v86 == 31)
    {
      v87 = -1862270945;
    }
    else if (v86 == 255)
    {
      v87 = -1442774017;
    }
    else
    {
      v87 = v86 | 0xAA0003E0;
    }
    v89 = (unsigned int *)(v9 + 200);
    v88 = *(_DWORD *)(v9 + 200);
    if (v88 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)v82, v83, v54, v35, v36, v37, v38);
      v88 = *v89;
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v88) = v87;
    *v89 += 4;
  }
  v90 = *(_DWORD *)(a1 + 28);
  if (v90)
  {
    v91 = v90 - 1;
    v92 = 16 * (v90 - 1);
    while (*(_DWORD *)(a1 + 28) > v91)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(v9, *(_QWORD *)(a1 + 16) + v92, v83, v54, v35, v36, v37, v38);
      v92 -= 16;
      if (--v91 == -1)
        goto LABEL_51;
    }
    __break(0xC471u);
LABEL_153:
    JUMPOUT(0x197CEC7F8);
  }
LABEL_51:
  *(_BYTE *)(v9 + 5768) = 0;
  if (v84)
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, (char)v85, v83, v54, v35, v36, v37, v38);
  for (i = *(_DWORD *)(v9 + 200); (signed int)i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)v82, v83, v54, v35, v36, v37, v38);
      i = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
    i = *(_DWORD *)(v9 + 200) + 4;
  }
  v94 = i;
  if (i + 4 > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)v82, v83, v54, v35, v36, v37, v38);
    v94 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v94) = 335544320;
  *(_DWORD *)(v9 + 200) += 4;
  if (*(_BYTE *)(v9 + 328))
    v95 = 69;
  else
    v95 = 65;
  v137 = i;
  LOBYTE(v138) = v95;
  *(_WORD *)((char *)&v138 + 1) = 15;
  BYTE3(v138) = -1;
  LODWORD(v140) = *(_DWORD *)(a1 + 100);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v137, (unsigned int *)&v140, v9, v54, v35, v36, v37, v38);
}

void JSC::FTL::lowerDFGToB3(uint64_t a1, uint64_t a2)
{
  JSC::DFG::Graph **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  JSC::DFG::Graph *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  JSC::DFG::Graph *v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Procedure *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  JSC::DFG::Graph *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v49;
  uint64_t *v50;
  char **v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  JSC::DFG::Graph *v56;
  uint64_t v57;
  float *v58;
  double v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  JSC::DFG::BasicBlock *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  JSC::DFG::BasicBlock **v74;
  JSC::DFG::BasicBlock *v75;
  int v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  JSC::DFG::BasicBlock **v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  JSC::DFG::Graph *v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  JSC::B3::Value *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  int v119;
  uint64_t v120;
  JSC::B3::Value *locked;
  JSC::B3::Value *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::B3::Procedure *v137;
  JSC::B3::Procedure *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  JSC::DFG::Graph *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  JSC::FTL::AbstractHeap *v195;
  uint64_t v196;
  JSC::B3::Value *v197;
  uint64_t v198;
  JSC::B3::Value *v199;
  JSC::B3::Value *v200;
  JSC::B3::Value *v201;
  JSC::B3::Value *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t **v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  int v218;
  unint64_t v219;
  JSC::DFG::PhiChildren *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  WTF *v227;
  WTF *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  JSC::B3::Value *v234;
  JSC::B3::Value *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD *v243;
  unint64_t v244;
  unsigned int *v245;
  unsigned int v246;
  _QWORD *v247;
  unsigned int v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int *v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t v273;
  BOOL v274;
  uint64_t v276;
  unsigned int v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  uint64_t v286;
  unsigned int v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  int v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  JSC::B3::Procedure *v327;
  _QWORD *v328;
  unsigned int v329;
  uint64_t v330;
  _QWORD *v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unsigned int v340;
  unsigned int v341;
  unint64_t v342;
  WTF::StringImpl *v343;
  uint64_t v344;
  uint64_t v345;
  WTF *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  BOOL v371;
  int v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  unsigned int *v381;
  uint64_t v382;
  uint64_t v383;
  BOOL v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  BOOL v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  unsigned int v394;
  unsigned int v395;
  void *v396;
  _DWORD *v397;
  JSC::DFG::Graph *v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  JSC::DFG::Graph *v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  int v430;
  unsigned int v431;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  int v439;
  unint64_t v440;
  unint64_t v441;
  unsigned int v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t *v445;
  int v446;
  uint64_t v447;
  int v448;
  int v449;
  uint64_t v450;
  unint64_t v451;
  unsigned int v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  JSC::FTL::AbstractHeap *v456;
  uint64_t v457;
  uint64_t v458;
  JSC::FTL::AbstractHeap *v459;
  uint64_t v460;
  uint64_t v461;
  BOOL v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  unsigned __int16 *v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  JSC::FTL::AbstractHeap *v474;
  uint64_t v475;
  JSC::FTL::AbstractHeap *v476;
  uint64_t v477;
  JSC::B3::Value *v478;
  JSC::B3::Value *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  unsigned int *v488;
  unsigned int *v489;
  unsigned int v490;
  unsigned int v491;
  _DWORD *v492;
  WTF *v493;
  unsigned int v494;
  uint64_t v495;
  JSC::DFG::Graph *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  JSC::DFG::Graph **v500;
  int v501;
  JSC::DFG::Graph *v502;
  JSC::DFG::Graph **v503;
  JSC::FTL::AbstractHeap **v504[3453];
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  JSC::B3::Procedure *v513;
  uint64_t v514;
  __int128 v515;
  JSC::FTL::AbstractHeap ***v516;
  double v517;
  __int128 v518;
  _QWORD *v519;
  uint64_t *v520;
  uint64_t v521;
  JSC::B3::Procedure *v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  JSC::B3::Value *v528;
  JSC::B3::Value *v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  __int128 v534;
  uint64_t v535;
  __int128 v536;
  __int128 v537;
  JSC::DFG::Graph *v538;
  _QWORD v539[2];
  uint64_t v540;
  int v541;
  unsigned int v542;
  uint64_t v543;
  void *v544;
  int v545;
  unsigned int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  char v550;
  char v551;
  int v552;
  int v553;
  char v554;
  uint64_t v555;
  JSC::DFG::Graph *v556;
  uint64_t v557;
  _QWORD *v558;
  WTF *v559;
  JSC::DFG::BasicBlock *v560;
  uint64_t v561;
  uint64_t v562;
  int64x2_t v563;
  __int16 v564;
  int v565;
  uint64_t v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  uint64_t *v571;
  int v572;
  int v573;
  int v574;
  _BYTE v575[32];

  v2 = (JSC::DFG::Graph **)MEMORY[0x1E0C80A78](a1, a2);
  v502 = *v2;
  v503 = v2;
  JSC::FTL::AbstractHeapRepository::AbstractHeapRepository((JSC::FTL::AbstractHeapRepository *)v504);
  v10 = 0uLL;
  v510 = 0u;
  v511 = 0u;
  v508 = 0u;
  v509 = 0u;
  v506 = 0u;
  v507 = 0u;
  v505 = 0u;
  v512 = 0;
  v513 = v2[1];
  v514 = 0;
  v515 = 0u;
  v517 = 1.0;
  v521 = 0;
  v518 = 0u;
  v520 = (uint64_t *)&v519;
  v519 = &v519;
  v522 = v513;
  v524 = 0;
  v531 = 0u;
  v532 = 0u;
  v530 = 0u;
  v533 = 0;
  v11 = *((unsigned int *)v502 + 77);
  v534 = 0u;
  HIDWORD(v534) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197CEEAE4);
    }
    v236 = (void *)WTF::fastMalloc((WTF *)(16 * v11));
    DWORD2(v534) = v11;
    *(_QWORD *)&v534 = v236;
    v10 = 0uLL;
    if (HIDWORD(v534))
    {
      bzero(v236, 16 * HIDWORD(v534));
      v10 = 0uLL;
    }
  }
  v535 = 0;
  v536 = v10;
  v537 = v10;
  v538 = v502;
  v12 = *v2;
  v539[0] = v12;
  v539[1] = *((_QWORD *)v12 + 123);
  if (!*((_DWORD *)v12 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197CEEAB4);
  }
  v13 = **((_QWORD **)v12 + 6);
  *(_OWORD *)v575 = v10;
  *(_OWORD *)&v575[16] = v10;
  v14 = *(unsigned int *)(v13 + 84);
  v540 = 0;
  v541 = 0;
  v542 = v14;
  if ((_DWORD)v14)
  {
    if (v14 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197CEEACCLL);
    }
    v15 = WTF::fastMalloc((WTF *)(32 * v14));
    v541 = v14;
    v540 = v15;
    if (v542)
    {
      v16 = v15 + 32 * v542;
      do
      {
        *(_QWORD *)v15 = 0;
        *(_OWORD *)(v15 + 8) = *(_OWORD *)&v575[8];
        *(_QWORD *)(v15 + 24) = *(_QWORD *)&v575[24];
        v15 += 32;
      }
      while (v15 != v16);
    }
  }
  v543 = *(_QWORD *)(v13 + 88);
  v17 = *((unsigned int *)v12 + 77);
  v545 = 0;
  v544 = 0;
  v546 = v17;
  if ((_DWORD)v17)
  {
    if (v17 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x197CEEAD4);
    }
    v18 = (void *)WTF::fastMalloc((WTF *)(32 * v17));
    v545 = v17;
    v544 = v18;
    bzero(v18, 32 * v546);
  }
  v552 = 0;
  v553 = 0;
  v547 = 0;
  v549 = 0;
  v548 = 0;
  v19 = *v2;
  v555 = *((_QWORD *)*v2 + 4);
  v556 = v19;
  v557 = *((_QWORD *)v19 + 2);
  v558 = v539;
  v559 = 0;
  if (*((_DWORD *)v19 + 236) == 2)
  {
    v220 = (JSC::DFG::PhiChildren *)WTF::fastMalloc((WTF *)8);
    v227 = JSC::DFG::PhiChildren::PhiChildren(v220, v19, v221, v222, v223, v224, v225, v226);
    v228 = v559;
    v559 = v227;
    if (v228)
    {
      v229 = *(_QWORD *)v228;
      if (*(_QWORD *)v228)
      {
        v230 = *(unsigned int *)(v229 - 4);
        if ((_DWORD)v230)
        {
          v231 = v229 + 24;
          do
          {
            if (*(_QWORD *)(v231 - 24) != -1)
            {
              v232 = *(_QWORD *)(v231 - 16);
              if (v231 != v232 && v232 != 0)
              {
                *(_QWORD *)(v231 - 16) = 0;
                *(_DWORD *)(v231 - 8) = 0;
                WTF::fastFree(v232, v3, v4, v5, v6, v7, v8, v9);
              }
            }
            v231 += 48;
            --v230;
          }
          while (v230);
        }
        WTF::fastFree(v229 - 16, v3, v4, v5, v6, v7, v8, v9);
      }
      WTF::fastFree((unint64_t)v228, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  v563 = vdupq_n_s64(2uLL);
  v564 = 0;
  v565 = 0;
  v567 = 0u;
  v568 = 0u;
  v569 = 0u;
  if (!HIBYTE(word_1ECF4C738))
    goto LABEL_13;
  JSC::DFG::performGraphPackingAndLivenessAnalysis(v502, (JSC::DFG::Graph *)v3, v4, v5, v6, v7, v8, v9);
  JSC::DFG::performCFA((JSC::DFG **)v502, v398);
  v406 = v502;
  v499 = *((unsigned int *)v502 + 15);
  if (!(_DWORD)v499)
    goto LABEL_13;
  v407 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v502 + 6) + 8 * v407))
  {
    if (v499 == ++v407)
      goto LABEL_13;
  }
  if ((_DWORD)v499 == (_DWORD)v407)
    goto LABEL_13;
  LODWORD(v414) = *((_DWORD *)v502 + 15);
  LODWORD(v415) = v407;
  v496 = v502;
  do
  {
    if (v414 <= v415)
    {
      __break(0xC471u);
      JUMPOUT(0x197CEEAECLL);
    }
    v416 = *(_QWORD *)(*((_QWORD *)v406 + 6) + 8 * v415);
    *(_QWORD *)&v570 = 0;
    v417 = *(_QWORD *)(v416 + 200);
    v418 = *(unsigned int *)(v417 + 92);
    if ((_DWORD)v418)
    {
      v419 = *(_QWORD **)(v417 + 80);
      v420 = 8 * v418;
      do
      {
        if ((*v419 & 1) == 0)
        {
          *(_QWORD *)v575 = *v419 & 0xFFFFFFFFFFFFFFFELL;
          WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)&v570, (uint64_t *)v575, v400, v401, v402, v403, v404, v405);
        }
        ++v419;
        v420 -= 8;
      }
      while (v420);
    }
    v501 = v415;
    v421 = *(_DWORD *)(v416 + 220);
    while (v421)
    {
      if (*(_DWORD *)(v416 + 220) <= --v421)
      {
        __break(0xC471u);
        JUMPOUT(0x197CEEADCLL);
      }
      v422 = *(_QWORD *)(*(_QWORD *)(v416 + 208) + 8 * v421);
      v423 = ~(v422 << 32);
      if ((_QWORD)v570)
      {
        v424 = *(_DWORD *)(v570 - 8);
        v425 = ((v423 + v422) ^ ((unint64_t)(v423 + v422) >> 22))
             + ~(((v423 + v422) ^ ((unint64_t)(v423 + v422) >> 22)) << 13);
        v426 = (9 * (v425 ^ (v425 >> 8))) ^ ((9 * (v425 ^ (v425 >> 8))) >> 15);
        v427 = v424 & (((v426 + ~(v426 << 27)) >> 31) ^ ((_DWORD)v426 + ~((_DWORD)v426 << 27)));
        v428 = *(_QWORD *)(v570 + 8 * v427);
        if (v428 != v422)
        {
          v429 = 1;
          while (v428)
          {
            v427 = ((_DWORD)v427 + v429) & v424;
            v428 = *(_QWORD *)(v570 + 8 * v427);
            ++v429;
            if (v428 == v422)
              goto LABEL_434;
          }
          v427 = *(unsigned int *)(v570 - 4);
        }
LABEL_434:
        if (v427 != *(_DWORD *)(v570 - 4))
        {
          *(_QWORD *)(v570 + 8 * v427) = -1;
          ++*(_DWORD *)(v570 - 16);
          v430 = (_QWORD)v570 ? *(_DWORD *)(v570 - 12) - 1 : -1;
          *(_DWORD *)(v570 - 12) = v430;
          if ((_QWORD)v570)
          {
            v431 = *(_DWORD *)(v570 - 4);
            if (6 * *(_DWORD *)(v570 - 12) < v431 && v431 >= 9)
              WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash((uint64_t *)&v570, v431 >> 1, 0, v401, v402, v403, v404, v405);
          }
        }
      }
      v433 = v416;
      v434 = *(_QWORD *)(v422 + 24);
      if ((*(_BYTE *)(v422 + 56) & 0x10) != 0)
      {
        v436 = *(_QWORD *)(v422 + 32);
        if ((int)v436 + (int)v434 > v434)
        {
          v437 = *(_QWORD *)(v422 + 24);
          do
          {
            if (v437 >= *((unsigned int *)v502 + 41))
            {
              __break(0xC471u);
              JUMPOUT(0x197CEEAACLL);
            }
            if ((*(_QWORD *)(*((_QWORD *)v502 + 19) + 8 * v437) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              *(_QWORD *)v575 = *(_QWORD *)(*((_QWORD *)v502 + 19) + 8 * v437) & 0xFF00FFFFFFFFFFFFLL;
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)&v570, (uint64_t *)v575, v400, v401, v402, v403, v404, v405);
              v434 = *(_QWORD *)(v422 + 24);
              v436 = *(_QWORD *)(v422 + 32);
            }
            ++v437;
          }
          while (v437 < (v434 + v436));
        }
      }
      else
      {
        v435 = v434 & 0xFF00FFFFFFFFFFFFLL;
        if (v435)
        {
          *(_QWORD *)v575 = v435;
          WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)&v570, (uint64_t *)v575, v400, v401, v402, v403, v404, v405);
          if ((*(_QWORD *)(v422 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            *(_QWORD *)v575 = *(_QWORD *)(v422 + 32) & 0xFF00FFFFFFFFFFFFLL;
            WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)&v570, (uint64_t *)v575, v400, v401, v402, v403, v404, v405);
            if ((*(_QWORD *)(v422 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              *(_QWORD *)v575 = *(_QWORD *)(v422 + 40) & 0xFF00FFFFFFFFFFFFLL;
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)&v570, (uint64_t *)v575, v400, v401, v402, v403, v404, v405);
            }
          }
        }
      }
      v438 = v567;
      if ((_QWORD)v567
        || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash((uint64_t *)&v567, 8u, 0), (v438 = v567) != 0))
      {
        v439 = *(_DWORD *)(v438 - 8);
      }
      else
      {
        v439 = 0;
      }
      v440 = ((v423 + v422) ^ ((unint64_t)(v423 + v422) >> 22))
           + ~(((v423 + v422) ^ ((unint64_t)(v423 + v422) >> 22)) << 13);
      v441 = (9 * (v440 ^ (v440 >> 8))) ^ ((9 * (v440 ^ (v440 >> 8))) >> 15);
      v442 = v439 & (((v441 + ~(v441 << 27)) >> 31) ^ (v441 + ~((_DWORD)v441 << 27)));
      v443 = (uint64_t *)(v438 + 16 * v442);
      v444 = *v443;
      v416 = v433;
      if (*v443)
      {
        v445 = 0;
        v446 = 1;
        while (v444 != v422)
        {
          if (v444 == -1)
            v445 = v443;
          v442 = (v442 + v446) & v439;
          v443 = (uint64_t *)(v438 + 16 * v442);
          v444 = *v443;
          ++v446;
          if (!*v443)
          {
            if (v445)
            {
              *v445 = 0;
              v445[1] = 0;
              --*(_DWORD *)(v567 - 16);
              v443 = v445;
            }
            goto LABEL_465;
          }
        }
      }
      else
      {
LABEL_465:
        *v443 = v422;
        WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::HashTable((uint64_t *)v575, &v570, v400, v401, v402, v403, v404, v405);
        v447 = v443[1];
        v443[1] = *(_QWORD *)v575;
        *(_QWORD *)v575 = v447;
        if (v447)
          WTF::fastFree(v447 - 16, v399, v400, v401, v402, v403, v404, v405);
        if ((_QWORD)v567)
          v448 = *(_DWORD *)(v567 - 12) + 1;
        else
          v448 = 1;
        *(_DWORD *)(v567 - 12) = v448;
        if ((_QWORD)v567)
          v449 = *(_DWORD *)(v567 - 12);
        else
          v449 = 0;
        v450 = (*(_DWORD *)(v567 - 16) + v449);
        v451 = *(unsigned int *)(v567 - 4);
        if (v451 > 0x400)
        {
          if (v451 <= 2 * v450)
            goto LABEL_480;
        }
        else if (3 * v451 <= 4 * v450)
        {
          if (!(_DWORD)v451)
          {
            v452 = 8;
            goto LABEL_475;
          }
LABEL_480:
          v452 = (_DWORD)v451 << (6 * *(_DWORD *)(v567 - 12) >= (2 * v451));
LABEL_475:
          WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash((uint64_t *)&v567, v452, v443);
        }
      }
    }
    v406 = v496;
    if ((_QWORD)v570)
      WTF::fastFree(v570 - 16, v399, v400, v401, v402, v403, v404, v405);
    v415 = (v501 + 1);
    v414 = *((unsigned int *)v496 + 15);
    if (v414 > v415)
    {
      while (!*(_QWORD *)(*((_QWORD *)v496 + 6) + 8 * v415))
      {
        if (v414 == ++v415)
        {
          LODWORD(v415) = *((_DWORD *)v496 + 15);
          break;
        }
      }
    }
  }
  while ((_DWORD)v499 != (_DWORD)v415);
LABEL_13:
  v500 = v503;
  if ((_BYTE)qword_1ECF4C32A)
    v20 = 0;
  else
    v20 = byte_1ECF4C323 == 0;
  if (v20 && BYTE1(qword_1ECF4C32A) == 0)
  {
    v22 = WTF::fastMalloc((WTF *)0x17);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 8) = 6;
    strcpy((char *)(v22 + 16), "jsBody");
    v493 = (WTF *)v22;
  }
  else
  {
    do
    {
      v395 = v394 + 1;
    }
    LODWORD(v571) = v395;
    JSC::CodeBlock::inferredName(*((JSC::CodeBlock **)v502 + 4));
    v574 = JSC::CodeBlock::hash(*((JSC::CodeBlock **)v502 + 4));
    WTF::toCString<char [8],int,char [2],WTF::CString,char [2],JSC::CodeBlockHash>((uint64_t *)v575, &v571, &v570, &v574);
    v493 = *(WTF **)v575;
    v397 = (_DWORD *)v570;
    *(_QWORD *)&v570 = 0;
    if (v397)
    {
      if (*v397 == 1)
        WTF::fastFree((unint64_t)v397, v396, v23, v24, v25, v26, v27, v28);
      else
        --*v397;
    }
  }
  v29 = v522;
  v30 = (void *)*((unsigned int *)v502 + 216);
  *((_DWORD *)v522 + 50) = (_DWORD)v30;
  JSC::B3::Air::Code::setNumEntrypoints(*((JSC::B3::Air::Code **)v29 + 20), v30, v23, v24, v25, v26, v27, v28);
  v37 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
  v37[2] = 1;
  v38 = v37 + 2;
  *(_QWORD *)v37 = off_1E3575578;
  v39 = v502;
  v40 = *((_QWORD *)v502 + 109);
  if (!v40)
  {
    v41 = 0;
    v42 = 0;
    goto LABEL_24;
  }
  v42 = *(unsigned int *)(v40 - 4);
  v43 = (_DWORD *)(v40 + 8 * v42);
  if (*(_DWORD *)(v40 - 12))
  {
    v41 = (_DWORD *)*((_QWORD *)v502 + 109);
    if ((_DWORD)v42)
    {
      v393 = 8 * v42;
      v41 = (_DWORD *)*((_QWORD *)v502 + 109);
      while ((*v41 + 1) <= 1)
      {
        v41 += 2;
        v393 -= 8;
        if (!v393)
        {
          v41 = v43;
          break;
        }
      }
    }
  }
  else
  {
    v41 = (_DWORD *)(v40 + 8 * v42);
LABEL_24:
    v43 = (_DWORD *)(v40 + 8 * v42);
  }
  if (v40)
    v44 = (_DWORD *)(v40 + 8 * *(unsigned int *)(v40 - 4));
  else
    v44 = 0;
  if (v44 != v41)
  {
    do
    {
      v484 = *v41;
      if (!(_DWORD)v484)
      {
        __break(0xC471u);
        JUMPOUT(0x197CEEBD4);
      }
      v485 = *((_QWORD *)v522 + 20);
      do
        v486 = __ldaxr(v38);
      while (__stlxr(v486 + 1, v38));
      if (*(_DWORD *)(v485 + 284) <= v484)
      {
        __break(0xC471u);
        JUMPOUT(0x197CEEBF8);
      }
      v487 = *(_QWORD *)(v485 + 272);
      v488 = *(unsigned int **)(v487 + 8 * v484);
      *(_QWORD *)(v487 + 8 * v484) = v37;
      if (v488)
      {
        v489 = v488 + 2;
        do
        {
          v490 = __ldaxr(v489);
          v491 = v490 - 1;
        }
        while (__stlxr(v491, v489));
        if (!v491)
        {
          atomic_store(1u, v488 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v488 + 8))(v488);
        }
      }
      v492 = v41 + 2;
      v41 = v43;
      if (v492 != v43)
      {
        v41 = v492;
        while ((*v41 + 1) <= 1)
        {
          v41 += 2;
          if (v41 == v43)
          {
            v41 = v43;
            break;
          }
        }
      }
    }
    while (v41 != v44);
    v39 = v502;
  }
  if (*((_BYTE *)v39 + 972))
  {
    v408 = *((_DWORD *)v39 + 242);
    if (v408 <= 1)
      v408 = 1;
    *((_QWORD *)v503[3] + 26) = JSC::VM::scratchBufferForSize(*((JSC::VM **)v39 + 2), 8 * v408, v31, v32, v33, v34, v35, v36);
  }
  do
  {
    v45 = __ldaxr(v38);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v38));
  if (!v46)
  {
    atomic_store(1u, v37 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
  }
  JSC::DFG::Graph::ensureSSADominators(v502);
  if ((_BYTE)qword_1ECF4C32A)
    v47 = 0;
  else
    v47 = byte_1ECF4C323 == 0;
  if (!v47 || BYTE1(qword_1ECF4C32A) != 0)
    WTF::dataLog<char [16]>("Function ready, beginning lowering.\n");
  v516 = v504;
  v517 = 1.0;
  v49 = *((_DWORD *)v502 + 216);
  v50 = JSC::B3::Procedure::addBlock((uint64_t *)v502, v513, 1.0);
  v51 = (char **)v50;
  if (*((_QWORD *)&v515 + 1))
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)&v518, *((uint64_t *)&v515 + 1), (uint64_t)v50);
  }
  else
  {
    *(_QWORD *)&v570 = v50;
    v203 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v203 = 0u;
    *((_OWORD *)v203 + 1) = 0u;
    v203[3] = *((_QWORD *)&v518 + 1);
    *((_QWORD *)&v518 + 1) = v203;
    v571 = v203;
    v203[2] = v51;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)&v518, (uint64_t *)&v570, (uint64_t *)&v571, v204, v205, v206, v207, v208, (uint64_t)v575);
    v52 = v571;
    v209 = (uint64_t **)v520;
    *v571 = (uint64_t)&v519;
    v52[1] = (uint64_t)v209;
    *v209 = v52;
    v520 = v52;
  }
  if (v49 >= 2)
    v53 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)&v505);
  else
    v53 = 0;
  v54 = JSC::B3::Procedure::addBlock(v52, v513, v517);
  v55 = v54;
  if (*((_QWORD *)&v515 + 1))
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)&v518, *((uint64_t *)&v515 + 1), (uint64_t)v54);
  }
  else
  {
    *(_QWORD *)&v570 = v54;
    v210 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v210 = 0u;
    *((_OWORD *)v210 + 1) = 0u;
    v210[3] = *((_QWORD *)&v518 + 1);
    *((_QWORD *)&v518 + 1) = v210;
    v571 = v210;
    v210[2] = v55;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)&v518, (uint64_t *)&v570, (uint64_t *)&v571, v211, v212, v213, v214, v215, (uint64_t)v575);
    v216 = v571;
    v217 = v520;
    *v571 = (uint64_t)&v519;
    v216[1] = (uint64_t)v217;
    *v217 = (uint64_t)v216;
    v520 = v216;
  }
  v523 = v55;
  v56 = v502;
  if (*((_DWORD *)v502 + 15))
  {
    v57 = 0;
    while (1)
    {
      v58 = *(float **)(*((_QWORD *)v56 + 6) + 8 * v57);
      v560 = (JSC::DFG::BasicBlock *)v58;
      if (v58)
        break;
LABEL_61:
      if (++v57 >= (unint64_t)*((unsigned int *)v56 + 15))
      {
        v55 = v523;
        goto LABEL_80;
      }
    }
    v59 = v58[48];
    v517 = v59;
    v60 = JSC::B3::Procedure::addBlock((uint64_t *)v56, v513, v59);
    v61 = v60;
    if (*((_QWORD *)&v515 + 1))
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)&v518, *((uint64_t *)&v515 + 1), (uint64_t)v60);
    }
    else
    {
      *(_QWORD *)&v570 = v60;
      v82 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v82 = 0u;
      *((_OWORD *)v82 + 1) = 0u;
      v82[3] = *((_QWORD *)&v518 + 1);
      *((_QWORD *)&v518 + 1) = v82;
      v571 = v82;
      v82[2] = v61;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)&v518, (uint64_t *)&v570, (uint64_t *)&v571, v83, v84, v85, v86, v87, (uint64_t)v575);
      v88 = v571;
      v89 = v520;
      *v571 = (uint64_t)&v519;
      v88[1] = (uint64_t)v89;
      *v89 = (uint64_t)v88;
      v520 = v88;
    }
    v67 = v524;
    if (v524
      || (WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(&v524, 8uLL, 0, v62, v63, v64, v65, v66), (v67 = v524) != 0))
    {
      v68 = *(_DWORD *)(v67 - 8);
    }
    else
    {
      v68 = 0;
    }
    v69 = v560;
    v70 = ((unint64_t)v560 + ~((_QWORD)v560 << 32)) ^ (((unint64_t)v560 + ~((_QWORD)v560 << 32)) >> 22);
    v71 = 9 * ((v70 + ~(v70 << 13)) ^ ((v70 + ~(v70 << 13)) >> 8));
    v72 = (v71 ^ (v71 >> 15)) + ~((v71 ^ (v71 >> 15)) << 27);
    v73 = v68 & ((v72 >> 31) ^ v72);
    v74 = (JSC::DFG::BasicBlock **)(v67 + 16 * v73);
    v75 = *v74;
    if (*v74)
    {
      v80 = 0;
      v81 = 1;
      while (v75 != v560)
      {
        if (v75 == (JSC::DFG::BasicBlock *)-1)
          v80 = v74;
        v73 = (v73 + v81) & v68;
        v74 = (JSC::DFG::BasicBlock **)(v67 + 16 * v73);
        v75 = *v74;
        ++v81;
        if (!*v74)
        {
          if (v80)
          {
            *v80 = 0;
            v80[1] = 0;
            --*(_DWORD *)(v524 - 16);
            v69 = v560;
            v74 = v80;
          }
          goto LABEL_54;
        }
      }
      goto LABEL_60;
    }
LABEL_54:
    *v74 = v69;
    v74[1] = (JSC::DFG::BasicBlock *)v61;
    if (v524)
      v76 = *(_DWORD *)(v524 - 12) + 1;
    else
      v76 = 1;
    *(_DWORD *)(v524 - 12) = v76;
    if (v524)
      v77 = *(_DWORD *)(v524 - 12);
    else
      v77 = 0;
    v78 = (*(_DWORD *)(v524 - 16) + v77);
    v79 = *(unsigned int *)(v524 - 4);
    if (v79 > 0x400)
    {
      if (v79 > 2 * v78)
        goto LABEL_60;
    }
    else
    {
      if (3 * v79 > 4 * v78)
      {
LABEL_60:
        v56 = v502;
        goto LABEL_61;
      }
      if (!(_DWORD)v79)
      {
        v90 = 8;
LABEL_73:
        WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(&v524, v90, (uint64_t)v74, v62, v63, v64, v65, v66);
        goto LABEL_60;
      }
    }
    v90 = ((_DWORD)v79 << (6 * *(_DWORD *)(v524 - 12) >= (2 * v79)));
    goto LABEL_73;
  }
LABEL_80:
  v517 = 1.0;
  v494 = v49;
  v495 = v53;
  if (v49 <= 1)
    v91 = (uint64_t)v55;
  else
    v91 = v53;
  *(_QWORD *)&v515 = v51;
  *((_QWORD *)&v515 + 1) = v91;
  JSC::FTL::CommonValues::initializeConstants((JSC::FTL::CommonValues *)&v505, v522, v51);
  v92 = v502;
  v93 = *((_DWORD *)v502 + 15);
  if (v93)
  {
    do
    {
      if (*((_DWORD *)v502 + 15) <= --v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197CEEA94);
      }
      v94 = *(_QWORD *)(*((_QWORD *)v502 + 6) + 8 * v93);
      if (v94)
      {
        v95 = *(_DWORD *)(v94 + 220);
        if (v95)
        {
          while (1)
          {
            if (*(_DWORD *)(v94 + 220) <= --v95)
            {
              __break(0xC471u);
              JUMPOUT(0x197CEEA8CLL);
            }
            v96 = *(_QWORD *)(*(_QWORD *)(v94 + 208) + 8 * v95);
            if (*(_WORD *)(v96 + 18) != 27)
              goto LABEL_89;
            v97 = (*(_DWORD *)(v96 + 56) & 7) - 1;
            if ((*(_DWORD *)(v96 + 56) & 7u) - 1 >= 6 || ((0x3Du >> v97) & 1) == 0)
            {
              JSC::DFG::Graph::logAssertionFailure(v502, *(JSC::DFG::Node **)(*(_QWORD *)(v94 + 208) + 8 * v95), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1DC, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::createPhiVariables()", "Bad Phi node result type");
              __break(0xC471u);
              JUMPOUT(0x197CEEA20);
            }
            v98 = dword_199124524[v97];
            v99 = v522;
            v100 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v100 = off_1E357F5F0;
            *(_DWORD *)(v100 + 8) = -1;
            *(_WORD *)(v100 + 12) = 153;
            *(_DWORD *)(v100 + 16) = v98;
            *(_BYTE *)(v100 + 20) = 0;
            *(_QWORD *)(v100 + 24) = v96;
            *(_QWORD *)(v100 + 32) = 0;
            JSC::B3::Procedure::addValueImpl(v99, (JSC::B3::Value *)v100);
            v106 = v535;
            if (v535
              || (WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(&v535, 8uLL, 0, v101, v102, v103, v104, v105), (v106 = v535) != 0))
            {
              v107 = *(_DWORD *)(v106 - 8);
            }
            else
            {
              v107 = 0;
            }
            v108 = (~(v96 << 32) + v96) ^ ((unint64_t)(~(v96 << 32) + v96) >> 22);
            v109 = 9 * ((v108 + ~(v108 << 13)) ^ ((v108 + ~(v108 << 13)) >> 8));
            v110 = (v109 ^ (v109 >> 15)) + ~((v109 ^ (v109 >> 15)) << 27);
            v111 = v107 & ((v110 >> 31) ^ v110);
            v112 = (_QWORD *)(v106 + 16 * v111);
            v113 = *v112;
            if (*v112)
            {
              v118 = 0;
              v119 = 1;
              while (v113 != v96)
              {
                if (v113 == -1)
                  v118 = v112;
                v111 = (v111 + v119) & v107;
                v112 = (_QWORD *)(v106 + 16 * v111);
                v113 = *v112;
                ++v119;
                if (!*v112)
                {
                  if (v118)
                  {
                    *v118 = 0;
                    v118[1] = 0;
                    --*(_DWORD *)(v535 - 16);
                    v112 = v118;
                  }
                  goto LABEL_97;
                }
              }
              goto LABEL_89;
            }
LABEL_97:
            *v112 = v96;
            v112[1] = v100;
            v114 = v535 ? *(_DWORD *)(v535 - 12) + 1 : 1;
            *(_DWORD *)(v535 - 12) = v114;
            v115 = v535 ? *(_DWORD *)(v535 - 12) : 0;
            v116 = (*(_DWORD *)(v535 - 16) + v115);
            v117 = *(unsigned int *)(v535 - 4);
            if (v117 > 0x400)
              break;
            if (3 * v117 <= 4 * v116)
            {
              if (!(_DWORD)v117)
              {
                v219 = 8;
LABEL_173:
                WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(&v535, v219, (uint64_t)v112, v101, v102, v103, v104, v105);
                goto LABEL_89;
              }
LABEL_175:
              v219 = ((_DWORD)v117 << (6 * *(_DWORD *)(v535 - 12) >= (2 * v117)));
              goto LABEL_173;
            }
LABEL_89:
            if (!v95)
              goto LABEL_90;
          }
          if (v117 > 2 * v116)
            goto LABEL_89;
          goto LABEL_175;
        }
      }
LABEL_90:
      ;
    }
    while (v93);
    v92 = v502;
  }
  v120 = 8 * *((unsigned int *)v92 + 214);
  locked = (JSC::B3::Value *)JSC::FTL::Output::lockedStackSlot((JSC::FTL::Output *)&v505, v120);
  v122 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)&v505, v120);
  v527 = JSC::FTL::Output::add((JSC::FTL::Output *)&v505, locked, v122);
  v500[8] = (JSC::DFG::Graph *)*((_QWORD *)locked + 5);
  JSC::DFG::Graph::blocksInPreOrder(v502, v123, v124, v125, v126, v127, v128, v129, (uint64_t)&v571);
  v130 = *((_QWORD *)v502 + 2);
  v525 = JSC::FTL::Output::framePointer((JSC::FTL::Output *)&v505);
  v526 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)&v505, v130);
  v528 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)&v505, 0xFFFE000000000000);
  v529 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)&v505, 0xFFFE000000000002);
  if ((*(_DWORD *)(*((_QWORD *)v502 + 4) + 32) & 0x80000000) != 0)
  {
    v455 = *((_QWORD *)&v506 + 1);
    v456 = JSC::FTL::Output::absolute((JSC::FTL::Output *)&v505, v130 + 41452, v131, v132, v133, v134, v135, v136);
    JSC::FTL::Output::store32As8((uint64_t)&v505, v455, v456, v457);
  }
  if ((_BYTE)word_1ECF4C630)
  {
    v458 = v506;
    v459 = JSC::FTL::Output::absolute((JSC::FTL::Output *)&v505, v130 + 93120, v131, v132, v133, v134, v135, v136);
    JSC::FTL::Output::store32As8((uint64_t)&v505, v458, v459, v460);
  }
  v137 = v522;
  JSC::B3::Value::key((uint64_t)v528, (uint64_t)&v570);
  if (BYTE1(v570) - 3 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x197CEE04CLL);
  }
  WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::add((uint64_t)v137 + 136, &v570, (uint64_t)v575);
  v138 = v522;
  JSC::B3::Value::key((uint64_t)v529, (uint64_t)&v570);
  if (BYTE1(v570) - 3 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x197CEE06CLL);
  }
  WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::add((uint64_t)v138 + 136, &v570, (uint64_t)v575);
  v146 = 8 * JSC::DFG::Graph::requiredRegisterCountForExit(v502, v139, v140, v141, v142, v143, v144, v145);
  v147 = (__int128 *)JSC::FTL::Output::patchpoint(&v505, 0);
  v148 = *((_QWORD *)v503[3] + 8);
  *(_QWORD *)v575 = 0;
  v156 = JSC::DFG::CodeOriginPool::addCodeOrigin(v148, (uint64_t *)v575);
  if ((v575[0] & 1) != 0 && (*(_QWORD *)v575 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)v575 & 0xFFFFFFFF8, v149, v150, v151, v152, v153, v154, v155);
  *(_QWORD *)v575 = v525;
  *(_QWORD *)&v575[8] = 0;
  v575[16] = 3;
  JSC::B3::StackmapValue::append(v147, v525, (unint64_t)&v575[8]);
  *(_QWORD *)v575 = v526;
  *(_QWORD *)&v575[8] = 0;
  v575[16] = 3;
  JSC::B3::StackmapValue::append(v147, v526, (unint64_t)&v575[8]);
  *((_QWORD *)v147 + 8) |= 0x30000uLL;
  *((_QWORD *)v147 + 10) |= 0x30000uLL;
  *((_BYTE *)v147 + 168) = 1;
  v164 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v164 + 8) = 1;
  *(_QWORD *)v164 = off_1E35755A0;
  *(_DWORD *)(v164 + 16) = v146;
  *(_DWORD *)(v164 + 20) = v156;
  *(_QWORD *)(v164 + 24) = v130;
  v165 = (unsigned int *)*((_QWORD *)v147 + 7);
  *((_QWORD *)v147 + 7) = v164;
  if (v165)
  {
    v166 = v165 + 2;
    do
    {
      v167 = __ldaxr(v166);
      v168 = v167 - 1;
    }
    while (__stlxr(v168, v166));
    if (!v168)
    {
      atomic_store(1u, v165 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v165 + 8))(v165);
    }
  }
  if (!*((_DWORD *)v502 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197CEEABCLL);
  }
  if (v524)
  {
    v169 = **((_QWORD **)v502 + 6);
    v170 = *(_DWORD *)(v524 - 8);
    v171 = (~(v169 << 32) + v169) ^ ((unint64_t)(~(v169 << 32) + v169) >> 22);
    v172 = 9 * ((v171 + ~(v171 << 13)) ^ ((v171 + ~(v171 << 13)) >> 8));
    v173 = (v172 ^ (v172 >> 15)) + ~((v172 ^ (v172 >> 15)) << 27);
    v174 = v170 & ((v173 >> 31) ^ v173);
    v175 = *(_QWORD *)(v524 + 16 * v174);
    if (v175 == v169)
    {
LABEL_130:
      v176 = *(_QWORD *)(v524 + 16 * v174 + 8);
      goto LABEL_131;
    }
    v218 = 1;
    while (v175)
    {
      v174 = ((_DWORD)v174 + v218) & v170;
      v175 = *(_QWORD *)(v524 + 16 * v174);
      ++v218;
      if (v175 == v169)
        goto LABEL_130;
    }
  }
  v176 = 0;
LABEL_131:
  if (v494 >= 2)
  {
    v409 = *((unsigned int *)v502 + 216);
    *(_QWORD *)v575 = 0;
    *(_DWORD *)&v575[8] = 0;
    *(_DWORD *)&v575[12] = v409;
    if (!(_DWORD)v409)
      goto LABEL_546;
    if (v409 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197CEEB0CLL);
    }
    v410 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v409));
    *(_DWORD *)&v575[8] = v409;
    *(_QWORD *)v575 = v410;
    v411 = *(unsigned int *)&v575[12];
    if (!*(_DWORD *)&v575[12])
    {
LABEL_546:
      __break(0xC471u);
      JUMPOUT(0x197CEEAF4);
    }
    *v410 = v495;
    if (*((_DWORD *)v502 + 216) >= 2u)
    {
      v412 = 1;
      do
      {
        if (v411 == v412)
        {
          __break(0xC471u);
          JUMPOUT(0x197CEEB14);
        }
        *(_QWORD *)(*(_QWORD *)v575 + 8 * v412++) = v176;
      }
      while (v412 < *((unsigned int *)v502 + 216));
    }
    JSC::FTL::Output::entrySwitch(&v505, (uint64_t)v575);
    *(_QWORD *)&v515 = v495;
    *((_QWORD *)&v515 + 1) = v523;
    v413 = *(_QWORD *)v575;
    if (*(_QWORD *)v575)
    {
      *(_QWORD *)v575 = 0;
      *(_DWORD *)&v575[8] = 0;
      WTF::fastFree(v413, v157, v158, v159, v160, v161, v162, v163);
    }
  }
  v566 = 0;
  v565 = 0;
  if ((v563.i8[0] & 1) != 0 && (v563.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v563.i64[0] & 0xFFFFFFFF8, v157, v158, v159, v160, v161, v162, v163);
  v563.i64[0] = 0;
  if ((v563.i8[8] & 1) != 0 && (v563.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v563.i64[1] & 0xFFFFFFFF8, v157, v158, v159, v160, v161, v162, v163);
  v563.i64[1] = 0;
  v564 = 1;
  if (HIDWORD(v536))
  {
    v177 = 0;
    do
      *(_OWORD *)(v536 + 16 * v177++) = xmmword_1991243B0;
    while (v177 < HIDWORD(v536));
  }
  v178 = *((_QWORD *)&v537 + 1);
  if (*((_QWORD *)&v537 + 1))
  {
    *((_QWORD *)&v537 + 1) = 0;
    WTF::fastFree(v178 - 16, v157, v158, v159, v160, v161, v162, v163);
  }
  v179 = *(unsigned int *)(*((_QWORD *)v502 + 4) + 28);
  if ((_DWORD)v179)
  {
    if (v179 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197CEEAC4);
    }
    v180 = WTF::fastMalloc((WTF *)(16 * v179));
    v181 = v180;
    do
    {
      *(_QWORD *)v181 = 0;
      *(_BYTE *)(v181 + 8) = 0;
      *(_DWORD *)(v181 + 12) = 0x3FFFFFFF;
      v181 += 16;
    }
    while (v181 != v180 + 16 * v179);
  }
  else
  {
    v180 = 0;
  }
  v182 = v536;
  if ((_QWORD)v536)
  {
    *(_QWORD *)&v536 = 0;
    DWORD2(v536) = 0;
    WTF::fastFree(v182, v157, v158, v159, v160, v161, v162, v163);
  }
  *(_QWORD *)&v536 = v180;
  DWORD2(v536) = v179;
  HIDWORD(v536) = v179;
  *(_QWORD *)&v537 = v179;
  v183 = v502;
  v184 = *(unsigned int *)(*((_QWORD *)v502 + 4) + 28);
  v498 = v176;
  if ((_DWORD)v184)
  {
    v185 = (v184 << 32) + 0x400000006;
    v186 = v184 - 1;
    do
    {
      v187 = (_QWORD *)(v536 + 16 * v186);
      *v187 = 1;
      v187[1] = v185;
      v185 -= 0x100000000;
    }
    while ((unint64_t)v186--);
    v183 = v502;
  }
  if (*(_DWORD *)(*((_QWORD *)v183 + 3) + 16) == 5)
  {
    v241 = (*(uint64_t (**)(JSC::DFG::Graph *))(*(_QWORD *)v503[3] + 104))(v503[3]);
    v242 = *(unsigned int *)(*((_QWORD *)v502 + 4) + 28);
    if ((_DWORD)v242)
    {
      v243 = (_DWORD *)WTF::fastMalloc((WTF *)(v242 + 4));
      *v243 = v242;
      v469 = *(unsigned int *)(*((_QWORD *)v502 + 4) + 28);
      if ((_DWORD)v469)
      {
        if (!*((_DWORD *)v502 + 115))
        {
          __break(0xC471u);
          JUMPOUT(0x197CEEB1CLL);
        }
        v470 = 0;
        v471 = *((_QWORD *)v502 + 56);
        v472 = *(unsigned int *)(v471 + 12);
        do
        {
          if (v472 == v470)
          {
            __break(0xC471u);
            JUMPOUT(0x197CEEB04);
          }
          if (v242 == v470)
          {
            __break(0xC471u);
            JUMPOUT(0x197CEEA40);
          }
          *((_BYTE *)v243 + v470 + 4) = *(_BYTE *)(*(_QWORD *)v471 + v470);
          ++v470;
        }
        while (v469 != v470);
      }
    }
    else
    {
      v243 = 0;
    }
    v244 = *(_QWORD *)(v241 + 344);
    *(_QWORD *)(v241 + 344) = v243;
    if (v244)
      WTF::fastFree(v244, v237, v238, v239, v240, v161, v162, v163);
  }
  else
  {
    v189 = *(_DWORD *)(*((_QWORD *)v183 + 4) + 28);
    if (v189)
    {
      v190 = v189 + 4;
      v191 = (v189 - 1);
      do
      {
        v192 = v563.i64[0];
        if ((v563.i8[0] & 1) != 0)
        {
          v382 = *(_QWORD *)(v563.i64[0] & 0xFFFFFFFF8);
          if ((v563.i8[0] & 2) != 0
            || ((v383 = *(unsigned int *)((v563.i64[0] & 0xFFFFFFFF8) + 8), (_DWORD)v383 != 0x3FFFFFFF)
              ? (v384 = (_DWORD)v383 == -1)
              : (v384 = 1),
                v384))
          {
            v385 = 2;
          }
          else if (v383 >> 28)
          {
            v481 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v481 = v382;
            *(_DWORD *)(v481 + 8) = v383;
            v385 = 1;
            v382 = v481;
          }
          else
          {
            v385 = *(_QWORD *)(v563.i64[0] & 0xFFFFFFFF8);
            v382 = v383 << 36;
          }
          v192 = v382 | v385;
        }
        v193 = v190 | ((unint64_t)(v190 >> 31) << 32);
        v194 = ((unint64_t)v575[12] >> 5 << 37) | 0x1000000000;
        if ((v192 & 1) != 0)
        {
          v386 = v192 & 0xFFFFFFFF8;
          v387 = *(_QWORD *)(v192 & 0xFFFFFFFF8);
          if ((v192 & 2) != 0
            || ((v388 = *(unsigned int *)((v192 & 0xFFFFFFFF8) + 8), (_DWORD)v388 != 0x3FFFFFFF)
              ? (v389 = (_DWORD)v388 == -1)
              : (v389 = 1),
                v389))
          {
            v390 = 2;
          }
          else if (v388 >> 28)
          {
            v497 = v192 & 0xFFFFFFFF8;
            v482 = *(_QWORD *)(v192 & 0xFFFFFFFF8);
            v483 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v483 = v482;
            *(_DWORD *)(v483 + 8) = v388;
            v390 = 1;
            v387 = v483;
            v386 = v497;
          }
          else
          {
            v390 = *(_QWORD *)(v192 & 0xFFFFFFFF8);
            v387 = v388 << 36;
          }
          v192 = v387 | v390;
          *(_QWORD *)v575 = v387 | v390;
          *(_DWORD *)&v575[8] = v194 | v190;
          v575[12] = (v194 | v193) >> 32;
          if (v386)
            WTF::fastFree(v386, v157, v158, v159, v160, v161, v162, v163);
        }
        else
        {
          *(_QWORD *)v575 = v192;
          *(_DWORD *)&v575[8] = v190;
          v575[12] = (v194 | v193) >> 32;
        }
        v197 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)&v505, v195, v196, 2);
        if (!*((_DWORD *)v502 + 115))
        {
          __break(0xC471u);
          JUMPOUT(0x197CEEAA4);
        }
        v198 = *((_QWORD *)v502 + 56);
        if (*(_DWORD *)(v198 + 12) <= v191)
        {
          __break(0xC471u);
          JUMPOUT(0x197CEEA9CLL);
        }
        switch(*(_BYTE *)(*(_QWORD *)v198 + v191))
        {
          case 1:
            v202 = JSC::FTL::Output::below((JSC::FTL::Output *)&v505, v197, v528);
            goto LABEL_163;
          case 4:
            v199 = v529;
            v200 = v197;
            goto LABEL_162;
          case 5:
            v234 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)&v505, 6);
            v235 = JSC::FTL::Output::bitXor((JSC::FTL::Output *)&v505, v197, v234);
            v199 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)&v505, -2);
            v200 = v235;
LABEL_162:
            v201 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)&v505, v200, v199);
            v202 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)&v505, v201);
LABEL_163:
            break;
          case 6:
            break;
          default:
            JSC::DFG::Graph::logAssertionFailure(v502, 0, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x190, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::lower()", "Bad flush format for argument");
            __break(0xC471u);
            JUMPOUT(0x197CEE808);
        }
        if ((v192 & 1) != 0 && (v192 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v192 & 0xFFFFFFFF8, v157, v158, v159, v160, v161, v162, v163);
        --v190;
        --v191;
      }
      while (v190 != 4);
    }
  }
  *(_QWORD *)v575 = v498;
  v575[8] = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v515, (uint64_t)v513, 154, v514, (uint64_t *)v575, v161, v162, v163);
  *(_QWORD *)&v515 = v523;
  *((_QWORD *)&v515 + 1) = v498;
  v245 = (unsigned int *)v500[7];
  if (v245)
  {
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 + 1, v245));
    v247 = JSC::FTL::Output::patchpoint(&v505, 0);
    do
      v248 = __ldaxr(v245);
    while (__stlxr(v248 + 1, v245));
    v249 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v249 + 8) = 1;
    *(_QWORD *)v249 = &off_1E3575640;
    do
      v257 = __ldaxr(v245);
    while (__stlxr(v257 + 1, v245));
  }
  else
  {
    v247 = JSC::FTL::Output::patchpoint(&v505, 0);
    v249 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v249 + 8) = 1;
    *(_QWORD *)v249 = &off_1E3575640;
  }
  *(_QWORD *)(v249 + 16) = v245;
  v258 = (unsigned int *)v247[7];
  v247[7] = v249;
  if (v258)
  {
    v259 = v258 + 2;
    do
    {
      v260 = __ldaxr(v259);
      v261 = v260 - 1;
    }
    while (__stlxr(v261, v259));
    if (!v261)
    {
      atomic_store(1u, v258 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v258 + 8))(v258);
    }
  }
  if (v245)
  {
    do
    {
      v262 = __ldaxr(v245);
      v263 = v262 - 1;
    }
    while (__stlxr(v263, v245));
    if (!v263)
    {
      atomic_store(1u, v245);
      WTF::fastFree((unint64_t)v245, v250, v251, v252, v253, v254, v255, v256);
    }
  }
  JSC::B3::BasicBlock::appendNewControlValue(v515, (uint64_t)v513, 159, v514, v253, v254, v255, v256);
  if (v573)
  {
    v271 = v571;
    v272 = &v571[v573];
    while (1)
    {
      v273 = *v271;
      if (*v271)
        break;
LABEL_249:
      if (++v271 == v272)
        goto LABEL_262;
    }
    if ((_BYTE)qword_1ECF4C32A)
      v274 = 0;
    else
      v274 = byte_1ECF4C323 == 0;
    if (!v274 || BYTE1(qword_1ECF4C32A) != 0)
      WTF::dataLog<char [17],JSC::DFG::BasicBlock,char [2]>(*v271);
    v560 = (JSC::DFG::BasicBlock *)v273;
    v517 = *(float *)(v273 + 192);
    v276 = v524;
    if (v524)
    {
      v277 = *(_DWORD *)(v524 - 8);
      v278 = (~(v273 << 32) + v273) ^ ((unint64_t)(~(v273 << 32) + v273) >> 22);
      v279 = 9 * ((v278 + ~(v278 << 13)) ^ ((v278 + ~(v278 << 13)) >> 8));
      v280 = (v279 ^ (v279 >> 15)) + ~((v279 ^ (v279 >> 15)) << 27);
      v281 = v277 & ((v280 >> 31) ^ v280);
      v282 = *(_QWORD *)(v524 + 16 * v281);
      if (v282 == v273)
      {
LABEL_226:
        v283 = *(_QWORD *)(v524 + 16 * v281 + 8);
LABEL_227:
        v561 = 0;
        v284 = *((_DWORD *)v502 + 15);
        v285 = *(_DWORD *)(v273 + 8) + 1;
        while (v285 < v284)
        {
          v286 = *(_QWORD *)(*((_QWORD *)v502 + 6) + 8 * v285);
          v561 = v286;
          ++v285;
          if (v286)
          {
            if (!v524)
              goto LABEL_233;
            v287 = *(_DWORD *)(v524 - 8);
            v288 = (~(v286 << 32) + v286) ^ ((unint64_t)(~(v286 << 32) + v286) >> 22);
            v289 = 9 * ((v288 + ~(v288 << 13)) ^ ((v288 + ~(v288 << 13)) >> 8));
            v290 = (v289 ^ (v289 >> 15)) + ~((v289 ^ (v289 >> 15)) << 27);
            v291 = v287 & ((v290 >> 31) ^ v290);
            v292 = *(_QWORD *)(v524 + 16 * v291);
            if (v292 == v286)
            {
LABEL_232:
              v276 = *(_QWORD *)(v524 + 16 * v291 + 8);
              goto LABEL_233;
            }
            v311 = 1;
            while (v292)
            {
              v291 = ((_DWORD)v291 + v311) & v287;
              v292 = *(_QWORD *)(v524 + 16 * v291);
              ++v311;
              if (v292 == v286)
                goto LABEL_232;
            }
            break;
          }
        }
        v276 = 0;
LABEL_233:
        v562 = v276;
        *(_QWORD *)&v515 = v283;
        *((_QWORD *)&v515 + 1) = v276;
        if (HIBYTE(dword_1ECF4C424))
        {
          JSC::FTL::Output::trap((JSC::FTL::Output *)&v505, (uint64_t)v264, v265, v266, v267, v268, v269, v270);
          v273 = (uint64_t)v560;
        }
        if (!*(_BYTE *)(v273 + 15))
        {
          if ((_BYTE)qword_1ECF4C32A)
            v371 = 0;
          else
            v371 = byte_1ECF4C323 == 0;
          if (!v371 || BYTE1(qword_1ECF4C32A) != 0)
          {
            WTF::dataLog<char [16]>("Bailing because CFA didn't reach.\n");
            v273 = (uint64_t)v560;
          }
          v373 = *(_DWORD *)(v273 + 8);
          v374 = JSC::FTL::Output::patchpoint(&v505, 0);
          v379 = WTF::fastMalloc((WTF *)0x28);
          *(_DWORD *)(v379 + 8) = 1;
          *(_QWORD *)v379 = off_1E3575690;
          *(_DWORD *)(v379 + 16) = v373;
          *(_DWORD *)(v379 + 20) = -1;
          *(_QWORD *)(v379 + 24) = 0;
          *(_WORD *)(v379 + 32) = 433;
          v380 = (unsigned int *)v374[7];
          v374[7] = v379;
          if (v380)
          {
            v381 = v380 + 2;
            do
            {
              v312 = __ldaxr(v381);
              v313 = v312 - 1;
            }
            while (__stlxr(v313, v381));
            if (!v313)
            {
              atomic_store(1u, v380 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v380 + 8))(v380);
            }
          }
          JSC::B3::BasicBlock::appendNewControlValue(v515, (uint64_t)v513, 159, v514, v375, v376, v377, v378);
          goto LABEL_249;
        }
        v293 = *((_QWORD *)&v567 + 1);
        if (*((_QWORD *)&v567 + 1))
        {
          *((_QWORD *)&v567 + 1) = 0;
          v294 = *(unsigned int *)(v293 - 4);
          if ((_DWORD)v294)
          {
            v295 = (_QWORD *)(v293 + 8);
            do
            {
              if (*(v295 - 1) != -1 && (*v295 & 1) != 0)
                WTF::fastFree(*v295 & 0xFFFFFFFFFFFFFFFCLL, v264, v265, v266, v267, v268, v269, v270);
              v295 += 5;
              --v294;
            }
            while (v294);
          }
          WTF::fastFree(v293 - 16, v264, v265, v266, v267, v268, v269, v270);
          v273 = (uint64_t)v560;
        }
        v296 = *(_QWORD *)(v273 + 200);
        WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)&v536, (const void **)v296, v265, v266, v267, v268, v269, v270);
        *(_QWORD *)&v537 = *(_QWORD *)(v296 + 16);
        WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)&v537 + 1, (_QWORD *)(v296 + 24), v297, v298, v299, v300, v301, v302);
        v549 = 0;
        v550 = 0;
        v554 = 0;
        v551 = 0;
        JSC::DFG::InPlaceAbstractState::beginBasicBlock((JSC::DFG::InPlaceAbstractState *)v539, v560, v303, v304, v305, v306, v307, v308);
        if (!(_BYTE)word_1ECF4C630)
          goto LABEL_245;
        v461 = *((unsigned int *)v560 + 13);
        if ((_DWORD)v461)
        {
          if (*((_BYTE *)v560 + 19))
            v462 = 1;
          else
            v462 = *((_BYTE *)v560 + 20) != 0;
          LOBYTE(v570) = v462;
          *(_QWORD *)v575 = &v570;
          v463 = *((_QWORD *)v560 + 5);
          v464 = v463 + 8 * v461;
          do
          {
            v465 = *(unsigned int *)(*(_QWORD *)v463 + 220);
            if ((_DWORD)v465)
            {
              v466 = 8 * v465;
              while (1)
              {
                v467 = *(unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)v463 + 208) - 8 + v466);
                v468 = v467[9];
                if ((v468 - 364) < 0xC)
                  break;
                if ((v468 - 28) < 2 || (v468 - 23) <= 2)
                {
                  v466 -= 8;
                  if (v466)
                    continue;
                }
                goto LABEL_510;
              }
            }
            else
            {
LABEL_510:
              v467 = 0;
            }
            _ZN3JSC3DFG10clobberizeIZNS_3FTL12_GLOBAL__N_112LowerDFGToB312compileBlockEPNS0_10BasicBlockEEUlDpT_E_ZNS4_12compileBlockES6_EUlS8_E0_ZNS4_12compileBlockES6_EUlS8_E1_ZNS4_12compileBlockES6_EUlvE_EEvRNS0_5GraphEPNS0_4NodeERKT_RKT0_RKT1_RKT2_(v502, (JSC::DFG::Node *)v467, (_BYTE **)v575, v266, v267, v268, v269, v270);
            v463 += 8;
          }
          while (v463 != v464);
          if (!(_BYTE)v570)
          {
            v476 = JSC::FTL::Output::absolute((JSC::FTL::Output *)&v505, *((_QWORD *)v502 + 2) + 93120, v265, v266, v267, v268, v269, v270);
            v478 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(&v505, (uint64_t)v476, v477);
            v479 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)&v505, v478);
            v480 = JSC::FTL::Output::speculate((JSC::FTL::Output *)&v505, v479);
LABEL_245:
            if (*((_DWORD *)v560 + 55))
            {
              v309 = 0;
              do
              {
                ++v309;
              }
              while (*((_DWORD *)v560 + 55) > v309);
            }
            goto LABEL_249;
          }
        }
        else
        {
          LOBYTE(v570) = 1;
        }
        v473 = v506;
        v474 = JSC::FTL::Output::absolute((JSC::FTL::Output *)&v505, *((_QWORD *)v502 + 2) + 93120, v265, v266, v267, v268, v269, v270);
        JSC::FTL::Output::store((uint64_t)&v505, v473, v474, v475);
        goto LABEL_245;
      }
      v310 = 1;
      while (v282)
      {
        v281 = ((_DWORD)v281 + v310) & v277;
        v282 = *(_QWORD *)(v524 + 16 * v281);
        ++v310;
        if (v282 == v273)
          goto LABEL_226;
      }
    }
    v283 = 0;
    goto LABEL_227;
  }
LABEL_262:
  JSC::FTL::AbstractHeapRepository::computeRangesAndDecorateInstructions(v504);
  JSC::B3::Procedure::deleteOrphans(v522, v314, v315, v316, v317, v318, v319, v320);
  v327 = v513;
  *(_QWORD *)v575 = 0;
  *(_QWORD *)&v575[8] = 0;
  v328 = v519;
  if (v519 != &v519)
  {
    v329 = 0;
    do
    {
      v330 = v328[2];
      *(_QWORD *)&v570 = v330;
      if (v329 == *(_DWORD *)&v575[8])
      {
        v331 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v575, v329 + 1, (unint64_t)&v570);
        v329 = *(_DWORD *)&v575[12];
        *(_QWORD *)(*(_QWORD *)v575 + 8 * *(unsigned int *)&v575[12]) = *v331;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v575 + 8 * v329) = v330;
      }
      *(_DWORD *)&v575[12] = ++v329;
      v328 = (_QWORD *)*v328;
    }
    while (v328 != &v519);
  }
  JSC::B3::Procedure::setBlockOrderImpl((uint64_t)v327, (unsigned int *)v575, v321, v322, v323, v324, v325, v326);
  v339 = *(_QWORD *)v575;
  if (*(_QWORD *)v575)
  {
    *(_QWORD *)v575 = 0;
    *(_DWORD *)&v575[8] = 0;
    WTF::fastFree(v339, v332, v333, v334, v335, v336, v337, v338);
  }
  if (v245)
  {
    do
    {
      v340 = __ldaxr(v245);
      v341 = v340 - 1;
    }
    while (__stlxr(v341, v245));
    if (!v341)
    {
      atomic_store(1u, v245);
      WTF::fastFree((unint64_t)v245, v332, v333, v334, v335, v336, v337, v338);
    }
  }
  v342 = (unint64_t)v571;
  if (v571)
  {
    v571 = 0;
    v572 = 0;
    WTF::fastFree(v342, v332, v333, v334, v335, v336, v337, v338);
  }
  if (v493)
  {
    if (*(_DWORD *)v493 == 1)
      WTF::fastFree((unint64_t)v493, v332, v333, v334, v335, v336, v337, v338);
    else
      --*(_DWORD *)v493;
  }
  v343 = (WTF::StringImpl *)v568;
  *(_QWORD *)&v568 = 0;
  if (v343)
  {
    if (*(_DWORD *)v343 == 2)
    {
      WTF::StringImpl::~StringImpl(v343, (WTF::AtomStringImpl *)v332, v333, v334, v335, v336, v337, v338);
      WTF::fastFree(v363, v364, v365, v366, v367, v368, v369, v370);
    }
    else
    {
      *(_DWORD *)v343 -= 2;
    }
  }
  v344 = *((_QWORD *)&v567 + 1);
  if (*((_QWORD *)&v567 + 1))
  {
    v453 = *(unsigned int *)(*((_QWORD *)&v567 + 1) - 4);
    if ((_DWORD)v453)
    {
      v454 = (_QWORD *)(*((_QWORD *)&v567 + 1) + 8);
      do
      {
        if (*(v454 - 1) != -1 && (*v454 & 1) != 0)
          WTF::fastFree(*v454 & 0xFFFFFFFFFFFFFFFCLL, v332, v333, v334, v335, v336, v337, v338);
        v454 += 5;
        --v453;
      }
      while (v453);
    }
    WTF::fastFree(v344 - 16, v332, v333, v334, v335, v336, v337, v338);
  }
  v345 = v567;
  if ((_QWORD)v567)
  {
    v391 = *(unsigned int *)(v567 - 4);
    if ((_DWORD)v391)
    {
      v392 = (_QWORD *)(v567 + 8);
      do
      {
        if (*(v392 - 1) != -1 && *v392)
          WTF::fastFree(*v392 - 16, v332, v333, v334, v335, v336, v337, v338);
        v392 += 2;
        --v391;
      }
      while (v391);
    }
    WTF::fastFree(v345 - 16, v332, v333, v334, v335, v336, v337, v338);
  }
  if ((v563.i8[8] & 1) != 0 && (v563.i64[1] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v563.i64[1] & 0xFFFFFFFF8, v332, v333, v334, v335, v336, v337, v338);
  if ((v563.i8[0] & 1) != 0 && (v563.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v563.i64[0] & 0xFFFFFFFF8, v332, v333, v334, v335, v336, v337, v338);
  v346 = v559;
  v559 = 0;
  if (v346)
  {
    v347 = *(_QWORD *)v346;
    if (*(_QWORD *)v346)
    {
      v348 = *(unsigned int *)(v347 - 4);
      if ((_DWORD)v348)
      {
        v349 = v347 + 24;
        do
        {
          if (*(_QWORD *)(v349 - 24) != -1)
          {
            v350 = *(_QWORD *)(v349 - 16);
            if (v349 != v350 && v350 != 0)
            {
              *(_QWORD *)(v349 - 16) = 0;
              *(_DWORD *)(v349 - 8) = 0;
              WTF::fastFree(v350, v332, v333, v334, v335, v336, v337, v338);
            }
          }
          v349 += 48;
          --v348;
        }
        while (v348);
      }
      WTF::fastFree(v347 - 16, v332, v333, v334, v335, v336, v337, v338);
    }
    WTF::fastFree((unint64_t)v346, v332, v333, v334, v335, v336, v337, v338);
  }
  JSC::DFG::InPlaceAbstractState::~InPlaceAbstractState((JSC::DFG::InPlaceAbstractState *)v539, v332, v333, v334, v335, v336, v337, v338);
  if (*((_QWORD *)&v537 + 1))
    WTF::fastFree(*((_QWORD *)&v537 + 1) - 16, v352, v353, v354, v355, v356, v357, v358);
  v359 = v536;
  if ((_QWORD)v536)
  {
    *(_QWORD *)&v536 = 0;
    DWORD2(v536) = 0;
    WTF::fastFree(v359, v352, v353, v354, v355, v356, v357, v358);
  }
  if (v535)
    WTF::fastFree(v535 - 16, v352, v353, v354, v355, v356, v357, v358);
  v360 = v534;
  if ((_QWORD)v534)
  {
    *(_QWORD *)&v534 = 0;
    DWORD2(v534) = 0;
    WTF::fastFree(v360, v352, v353, v354, v355, v356, v357, v358);
  }
  if (v533)
    WTF::fastFree(v533 - 16, v352, v353, v354, v355, v356, v357, v358);
  if (*((_QWORD *)&v532 + 1))
    WTF::fastFree(*((_QWORD *)&v532 + 1) - 16, v352, v353, v354, v355, v356, v357, v358);
  if ((_QWORD)v532)
    WTF::fastFree(v532 - 16, v352, v353, v354, v355, v356, v357, v358);
  if (*((_QWORD *)&v531 + 1))
    WTF::fastFree(*((_QWORD *)&v531 + 1) - 16, v352, v353, v354, v355, v356, v357, v358);
  if ((_QWORD)v531)
    WTF::fastFree(v531 - 16, v352, v353, v354, v355, v356, v357, v358);
  if (*((_QWORD *)&v530 + 1))
    WTF::fastFree(*((_QWORD *)&v530 + 1) - 16, v352, v353, v354, v355, v356, v357, v358);
  if ((_QWORD)v530)
    WTF::fastFree(v530 - 16, v352, v353, v354, v355, v356, v357, v358);
  if (v524)
    WTF::fastFree(v524 - 16, v352, v353, v354, v355, v356, v357, v358);
  v361 = *((_QWORD *)&v518 + 1);
  if (*((_QWORD *)&v518 + 1))
  {
    do
    {
      v362 = *(_QWORD *)(v361 + 24);
      WTF::fastFree(v361, v352, v353, v354, v355, v356, v357, v358);
      v361 = v362;
    }
    while (v362);
  }
  *((_QWORD *)&v518 + 1) = 0;
  if ((_QWORD)v518)
    WTF::fastFree(v518 - 16, v352, v353, v354, v355, v356, v357, v358);
  JSC::FTL::AbstractHeapRepository::~AbstractHeapRepository((JSC::FTL::AbstractHeapRepository *)v504, v352, v353, v354, v355, v356, v357, v358);
}

uint64_t *WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v9 = result;
  v10 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v10 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = *a2;
  v13 = ~(*a2 << 32) + *a2;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v11 & ((v15 >> 31) ^ v15);
  v17 = (uint64_t *)(v10 + 8 * v16);
  v18 = *v17;
  if (!*v17)
  {
LABEL_11:
    *v17 = v12;
    v21 = *v9;
    if (*v9)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v9;
    if (*v9)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        return result;
    }
    else if (3 * v26 > 4 * v25)
    {
      return result;
    }
    return WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v9, v17, a3, a4, a5, a6, a7, a8);
  }
  v19 = 0;
  v20 = 1;
  while (v18 != v12)
  {
    if (v18 == -1)
      v19 = v17;
    v16 = (v16 + v20) & v11;
    v17 = (uint64_t *)(v10 + 8 * v16);
    v18 = *v17;
    ++v20;
    if (!*v17)
    {
      if (v19)
      {
        *v19 = 0;
        --*(_DWORD *)(*v9 - 16);
        v12 = *a2;
        v17 = v19;
      }
      goto LABEL_11;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 8 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 8 * v33);
        *v35 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if (v7)
  {
    v21 = v7;
    v22 = (uint64_t *)v6;
    do
    {
      if (*v22 != -1)
      {
        if (*v22)
        {
          v24 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(a1, v22, v11, v12, v13, v14, v15, v16);
          v25 = v22[1];
          if (v25)
            WTF::fastFree(v25 - 16, v10, v11, v12, v13, v14, v15, v16);
          if (v22 == a3)
            v19 = v24;
        }
        else
        {
          v23 = v22[1];
          if (v23)
            WTF::fastFree(v23 - 16, v10, v11, v12, v13, v14, v15, v16);
        }
      }
      v22 += 2;
      --v21;
    }
    while (v21);
    goto LABEL_19;
  }
  result = 0;
  if (v6)
  {
LABEL_19:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v9 = *a1;
  if (*a1)
    v10 = *(_DWORD *)(v9 - 8);
  else
    v10 = 0;
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = 1;
  do
  {
    v17 = v15;
    v18 = *(_QWORD *)(v9 + 16 * v15);
    v15 = (v15 + v16++) & v10;
  }
  while (v18);
  v19 = (_QWORD *)(v9 + 16 * v17);
  v21 = v19 + 1;
  v20 = v19[1];
  if (v20)
  {
    WTF::fastFree(v20 - 16, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
  }
  *v19 = v11;
  *v21 = 0;
  v22 = a2[1];
  a2[1] = 0;
  *v21 = v22;
  return v19;
}

uint64_t *WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::HashTable(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;

  *a1 = 0;
  if (!*a2)
    return a1;
  v9 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v9)
    return a1;
  v11 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  v13 = (v12 | HIWORD(v12)) + 1;
  if (v13 > 0x400)
  {
    if (v13 > 2 * v9)
      goto LABEL_34;
  }
  else if (3 * v13 > 4 * v9)
  {
LABEL_6:
    v14 = (double)v9;
    v15 = (double)v13;
    v16 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v13) = 2 * v13;
  if (v13 <= 0x400)
    goto LABEL_6;
LABEL_34:
  v14 = (double)v9;
  v15 = (double)v13;
  v16 = 0.416666667;
LABEL_7:
  if (v15 * v16 <= v14)
    LODWORD(v13) = 2 * v13;
  if (v13 <= 8)
    v17 = 8;
  else
    v17 = v13;
  v18 = WTF::fastZeroedMalloc(8 * v17 + 16, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  *a1 = v18 + 16;
  *(_DWORD *)(v18 + 12) = v17;
  *(_DWORD *)(*a1 - 8) = v17 - 1;
  *(_DWORD *)(*a1 - 12) = v9;
  *(_DWORD *)(*a1 - 16) = 0;
  v19 = (_QWORD *)*a2;
  if (*a2)
  {
    v20 = *((unsigned int *)v19 - 1);
    v21 = &v19[v20];
    if (*((_DWORD *)v19 - 3))
    {
      v22 = (_QWORD *)*a2;
      if ((_DWORD)v20)
      {
        v23 = 8 * v20;
        v22 = (_QWORD *)*a2;
        while ((unint64_t)(*v22 + 1) <= 1)
        {
          ++v22;
          v23 -= 8;
          if (!v23)
          {
            v22 = v21;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v22 = &v19[v20];
  }
  else
  {
    v22 = 0;
    v20 = 0;
  }
  v21 = &v19[v20];
LABEL_19:
  if (v19)
    v19 += *((unsigned int *)v19 - 1);
  while (v22 != v19)
  {
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 8);
    else
      v25 = 0;
    v26 = ~(*v22 << 32) + *v22;
    v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
    v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
    v29 = v25 & (((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~((_DWORD)v28 << 27)));
    v30 = 1;
    do
    {
      v31 = v29;
      v32 = *(_QWORD *)(v24 + 8 * v29);
      v29 = (v29 + v30++) & v25;
    }
    while (v32);
    *(_QWORD *)(v24 + 8 * v31) = *v22;
    v33 = v22 + 1;
    v22 = v21;
    if (v33 != v21)
    {
      v22 = v33;
      while ((unint64_t)(*v22 + 1) <= 1)
      {
        if (++v22 == v21)
        {
          v22 = v21;
          break;
        }
      }
    }
  }
  return a1;
}

void WTF::toCString<char [8],int,char [2],WTF::CString,char [2],JSC::CodeBlockHash>(uint64_t *a1, _DWORD *a2, _QWORD *a3, _DWORD *a4)
{
  const char *v8;
  int v9;
  WTF::PrintStream *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  __int16 v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "jsBody_");
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%d", *a2);
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "_");
  if (*a3)
    v8 = (const char *)(*a3 + 16);
  else
    v8 = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", v8);
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "_");
  v9 = (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a4 / 0x3A2F8u - 62 * ((unsigned __int16)((16913 * (*a4 / 0x3A2F8u)) >> 16) >> 4))] << 16) | (WTF::integerToSixCharacterHashString::table[(*a4 / 0xF04u - 62 * ((69273667 * (unint64_t)(*a4 / 0xF04u)) >> 32))] << 24) | (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a4 / 0xE17810u - 62 * ((1058 * (*a4 / 0xE17810u)) >> 16))] << 8) | WTF::integerToSixCharacterHashString::table[*a4 / 0x369B13E0uLL];
  v24 = (((unint64_t)WTF::integerToSixCharacterHashString::table[*a4 % 0x3Eu] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[*a4 / 0x3Eu - 62 * (((138547333 * (unint64_t)(*a4 / 0x3Eu)) >> 32) >> 1)] << 32)) >> 32;
  v23 = v9;
  v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v25[4])(&v25);
  WTF::PrintStream::printf(v10, "%.*s", 6, (const char *)&v23);
  v25[5]((WTF::StringPrintStream *)&v25);
  v25[5]((WTF::StringPrintStream *)&v25);
  v19 = v26;
  v18 = v27;
  *a1 = 0;
  if (!v19)
  {
    v22 = 0;
LABEL_9:
    WTF::fastFree(v22, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  if (v18 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197CEF584);
  }
  v20 = WTF::fastMalloc((WTF *)(v18 + 17));
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v18;
  *a1 = v20;
  v21 = v20 + 16;
  memcpy((void *)(v20 + 16), v19, v18);
  *(_BYTE *)(v21 + v18) = 0;
  v22 = (unint64_t)v26;
  if (v26 != v28)
    goto LABEL_9;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowBlock(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
      return *(_QWORD *)(result + 16 * v6 + 8);
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          return *(_QWORD *)(result + 16 * v6 + 8);
      }
      return 0;
    }
  }
  return result;
}

void JSC::DFG::NodeOrigin::~NodeOrigin(JSC::DFG::NodeOrigin *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

JSC::FTL::AbstractHeap *JSC::FTL::`anonymous namespace'::LowerDFGToB3::addressFor(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v9;
  unint64_t v10;
  JSC::FTL::IndexedAbstractHeap *v11;
  _QWORD *v12;
  JSC::FTL::AbstractHeap *v13;
  uint64_t v14;
  JSC::FTL::Output *v15;
  JSC::B3::Value *v16;

  if ((a2 & 0x80000000) != 0)
  {
    v9 = (JSC::B3::Value *)a1[3486];
    v13 = (JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::atSlow((JSC::FTL::IndexedAbstractHeap *)(a1 + 2817), (int)a2, a3, a4, a5, a6, a7, a8);
    v14 = *((_QWORD *)v13 + 3);
    if (!v14)
      return v13;
    goto LABEL_6;
  }
  v9 = (JSC::B3::Value *)a1[3484];
  v10 = a2 | (((a2 >> 31) & 1) << 32);
  v11 = (JSC::FTL::IndexedAbstractHeap *)(a1 + 2817);
  if (v10 > 0xF)
  {
    v13 = (JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::atSlow(v11, a2 | (((a2 >> 31) & 1) << 32), v10, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = &a1[6 * v10];
    v13 = (JSC::FTL::AbstractHeap *)(v12 + 2826);
    if (!v12[2831])
      JSC::FTL::IndexedAbstractHeap::initialize(v11, v13, v10);
  }
  v14 = *((_QWORD *)v13 + 3);
  if (v14)
  {
LABEL_6:
    v15 = (JSC::FTL::Output *)(a1 + 3455);
    v16 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v15, v14);
    JSC::FTL::Output::add(v15, v9, v16);
  }
  return v13;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculate(uint64_t a1, char a2, WTF *a3, uint64_t a4, JSC::B3::Value *a5)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  __int16 v42;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 28192);
  if ((v9 & 1) != 0)
  {
    v19 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v20 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v20 != 0x3FFFFFFF)
        ? (v21 = (_DWORD)v20 == -1)
        : (v21 = 1),
          v21))
    {
      v22 = 2;
    }
    else if (v20 >> 28)
    {
      v37 = a3;
      v39 = a1;
      v35 = a5;
      v27 = a4;
      v28 = WTF::fastMalloc((WTF *)0x10);
      v8 = a2;
      a5 = v35;
      a4 = v27;
      v29 = v28;
      a3 = v37;
      a1 = v39;
      *(_QWORD *)v29 = v19;
      *(_DWORD *)(v29 + 8) = v20;
      v22 = 1;
      v19 = v29;
    }
    else
    {
      v22 = v19;
      v19 = v20 << 36;
    }
    v9 = v19 | v22;
  }
  v41[0] = v9;
  v10 = *(_QWORD *)(a1 + 28200);
  if ((v10 & 1) != 0)
  {
    v23 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v24 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v25 = (_DWORD)v24 == -1)
        : (v25 = 1),
          v25))
    {
      v26 = 2;
    }
    else if (v24 >> 28)
    {
      v38 = a3;
      v40 = a1;
      v34 = v8;
      v36 = a5;
      v30 = a4;
      v31 = v23;
      v32 = WTF::fastMalloc((WTF *)0x10);
      v8 = v34;
      a5 = v36;
      a4 = v30;
      v23 = v32;
      a3 = v38;
      a1 = v40;
      *(_QWORD *)v23 = v31;
      *(_DWORD *)(v23 + 8) = v24;
      v26 = 1;
    }
    else
    {
      v26 = v23;
      v23 = v24 << 36;
    }
    v10 = v23 | v26;
    v11 = ((v23 | v26) & 1) == 0;
  }
  else
  {
    v11 = 1;
  }
  v41[1] = v10;
  v42 = *(_WORD *)(a1 + 28208);
  if (!v11 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNotInt32(JSC::B3::Value **this, JSC::B3::Value *a2, uint64_t a3)
{
  uint64_t v4;
  JSC::B3::Value *v5;

  if ((a3 & 0x300000000) != 0)
  {
    if ((a3 & 0xFFFFFFFCFFFFFFFFLL) != 0)
      return JSC::FTL::Output::below((JSC::FTL::Output *)(this + 3455), a2, this[3487]);
    v4 = 3456;
  }
  else
  {
    v4 = 3455;
  }
  v5 = this[v4];
  if (!v5)
    return JSC::FTL::Output::below((JSC::FTL::Output *)(this + 3455), a2, this[3487]);
  return v5;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNotCell(JSC::B3::Value **this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  uint64_t v6;
  JSC::B3::Value *v7;

  if ((a3 & 0x2C00FFFFFFF7) != 0)
  {
    if ((a3 & 0xFFFFD3FF00000008) != 0)
    {
LABEL_3:
      v3 = (JSC::FTL::Output *)(this + 3455);
      v4 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(this + 3455), a2, this[3488]);
      return JSC::FTL::Output::notZero64(v3, v4);
    }
    v6 = 3456;
  }
  else
  {
    v6 = 3455;
  }
  v7 = this[v6];
  if (!v7)
    goto LABEL_3;
  return v7;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::Code &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::Code &)#1}>::run(uint64_t a1, uint64_t a2, JSC::B3::Air::Code *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::Code &)#1}::operator()(uint64_t a1, JSC::B3::Air::Code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25[2];

  v10 = *(_BYTE *)(a1 + 212);
  if (!v10)
    *(_DWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 1;
  JSC::MacroAssemblerARM64::add64(a1, -*((_DWORD *)a2 + 46), 29, 31, a5, a6, a7, a8);
  JSC::B3::Air::Code::calleeSaveRegisterAtOffsetList(a2, v25);
  JSC::AssemblyHelpers::emitSave((JSC::AssemblyHelpers *)a1, (const JSC::RegisterAtOffsetList *)v25, v11, v12, v13, v14, v15, v16);
  v24 = v25[0];
  v25[0] = 0;
  if (v24)
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  *(_BYTE *)(a1 + 212) = v10;
}

void WTF::HashTable<JSC::DFG::BasicBlock *,WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *>>,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashMap<JSC::DFG::BasicBlock *,JSC::B3::BasicBlock *,WTF::DefaultHash<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::DFG::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::BasicBlock *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (_QWORD *)(v10 + 16 * i);
      if ((unint64_t)(*v22 + 1) >= 2)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = (~(*v22 << 32) + *v22) ^ ((~(*v22 << 32) + *v22) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((unint64_t)(v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        v29 = 1;
        do
        {
          v30 = v28;
          v31 = *(_QWORD *)(v23 + 16 * v28);
          v28 = (v28 + v29++) & v24;
        }
        while (v31);
        *(_OWORD *)(v23 + 16 * v30) = *(_OWORD *)v22;
      }
    }
    goto LABEL_12;
  }
  if (v10)
LABEL_12:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t JSC::B3::Value::childrenAlloc(JSC::B3::Value *this)
{
  uint64_t result;

  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      result = (uint64_t)this + 40;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      result = (uint64_t)this + 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      result = (uint64_t)this + 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      result = (uint64_t)this + 64;
      break;
    case 0x53:
      result = (uint64_t)this + 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      result = (uint64_t)this + 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197CEFC20);
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int *v35;
  int *v36;
  int v37;
  char *v38;
  unsigned int v39;
  _BYTE *v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  uint64_t v53;
  unsigned int v54;
  _BYTE *v55;
  WTF *v56;
  WTF *v57;
  unsigned int v58;
  WTF *v59;
  WTF *v60;
  uint64_t v61;
  __int128 v62;
  unsigned int v63;
  WTF *v64;
  unsigned int v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  _OWORD *v80;
  WTF *v81;
  uint64_t v82;
  __int128 v83;
  WTF *v84;
  void *v85;
  WTF *v86;
  unint64_t v87;
  uint64_t *v88;
  WTF *v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  void *v94;
  WTF *v95;
  WTF *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  const void *v100;
  void *v101;
  WTF *v102;
  WTF *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  unsigned int v112;
  _BYTE v113[17];
  uint64_t v114;
  WTF *v115;
  int v116;
  unsigned int v117;
  void *__src;
  int __n;
  unsigned int __n_4;
  WTF *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  __int128 v125;
  int v126;
  int v127;
  _DWORD v128[3];
  WTF *v129;
  uint64_t v130;
  _BYTE v131[24];
  WTF *v132;
  unsigned int v133;
  unsigned int v134;
  _BYTE v135[24];
  uint64_t v136;
  WTF *v137;
  unsigned int v138;
  unsigned int v139;
  WTF *v140;
  unsigned int v141;
  unsigned int v142;
  WTF *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  __int128 v147;

  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v12 = *((_DWORD *)a3 + 5);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x197CF062CLL);
  }
  if (v12 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197CF0634);
  }
  if (!*((_DWORD *)a3 + 9))
  {
    __break(0xC471u);
    JUMPOUT(0x197CF063CLL);
  }
  v13 = (_BYTE *)a3[1];
  v14 = *v13 & 0x7F;
  v15 = v13[16];
  v16 = *(_BYTE *)a3[3];
  if (*(_DWORD *)(a1 + 16) <= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3[7] + 48) + 8) + 160) + 184))
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3[7] + 48) + 8) + 160) + 184);
  else
    v17 = *(_DWORD *)(a1 + 16);
  JSC::MacroAssemblerARM64::add64(a2, -v17, v14, *(char *)a3[3], a5, a6, a7, a8);
  v129 = (WTF *)v131;
  v130 = 2;
  v23 = v16;
  if (v17 > dword_1ECF4C250)
  {
    JSC::MacroAssemblerARM64::branch64(a2, 8, v23, v14, v19, v20, v21, v22, (uint64_t)v128);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v129, v128, v105, v106, v107, v108, v109, v110);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_111;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load64(a2, v15 & 0x7F | 0x800000000, *(char *)(a2 + 304), v18, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::branch64(a2, 8, 17, v23, v24, v25, v26, v27, (uint64_t)&v126);
  v33 = v126;
  v34 = HIDWORD(v130);
  if (v126 != -1)
  {
    if (HIDWORD(v130) == (_DWORD)v130)
    {
      v35 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v129, (void *)(HIDWORD(v130) + 1), (unint64_t)&v126, v28, v29, v30, v31, v32);
      v37 = *v35;
      v36 = v35 + 1;
      v33 = v37;
      v34 = HIDWORD(v130);
    }
    else
    {
      v36 = &v127;
    }
    v38 = (char *)v129 + 12 * v34;
    *(_DWORD *)v38 = v33;
    *(_QWORD *)(v38 + 4) = *(_QWORD *)v36;
    v34 = ++HIDWORD(v130);
  }
  v39 = v34;
  v111 = (WTF *)v113;
  v112 = v34;
  if (v34 < 3)
  {
    v40 = v113;
  }
  else
  {
    if (v34 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF065CLL);
    }
    v40 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v34));
    v111 = (WTF *)v40;
    v39 = HIDWORD(v130);
    v34 = HIDWORD(v130);
  }
  if (v34)
  {
    v41 = v129;
    v42 = (WTF *)((char *)v129 + 12 * v39);
    do
    {
      *(_DWORD *)v40 = *(_DWORD *)v41;
      *(_QWORD *)(v40 + 4) = *(_QWORD *)((char *)v41 + 4);
      v41 = (WTF *)((char *)v41 + 12);
      v40 += 12;
    }
    while (v41 != v42);
  }
  v43 = *a3;
  v44 = *((unsigned int *)a3 + 5);
  v115 = 0;
  v116 = 0;
  v114 = v43;
  v117 = v44;
  if ((_DWORD)v44)
  {
    if (v44 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF0644);
    }
    v45 = (WTF *)WTF::fastMalloc((WTF *)(16 * v44));
    v116 = v44;
    v115 = v45;
    v46 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v46)
    {
      v47 = (__int128 *)a3[1];
      v48 = 16 * v46;
      do
      {
        v49 = *v47++;
        *(_OWORD *)v45 = v49;
        v45 = (WTF *)((char *)v45 + 16);
        v48 -= 16;
      }
      while (v48);
    }
  }
  v50 = (WTF *)*((unsigned int *)a3 + 9);
  __src = 0;
  __n = 0;
  __n_4 = v50;
  if ((_DWORD)v50)
  {
    v51 = (void *)WTF::fastMalloc(v50);
    __n = (int)v50;
    __src = v51;
    memcpy(v51, (const void *)a3[3], *((unsigned int *)a3 + 9));
  }
  v52 = (WTF *)*((unsigned int *)a3 + 13);
  v121 = 0;
  v122 = 0;
  v123 = v52;
  if ((_DWORD)v52)
  {
    v102 = (WTF *)WTF::fastMalloc(v52);
    v122 = (int)v52;
    v121 = v102;
    memcpy(v102, (const void *)a3[5], *((unsigned int *)a3 + 13));
  }
  v53 = a3[7];
  v124 = v53;
  LODWORD(v125) = *(_DWORD *)(a1 + 20);
  *((_QWORD *)&v125 + 1) = *(_QWORD *)(a1 + 24);
  v54 = v112;
  v132 = (WTF *)v135;
  v133 = 2;
  v134 = v112;
  if (v112 < 3)
  {
    v55 = v135;
  }
  else
  {
    if (v112 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF0664);
    }
    v55 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v112));
    v133 = 12 * v112 / 0xC;
    v132 = (WTF *)v55;
    v54 = v112;
  }
  if (v54)
  {
    v56 = v111;
    v57 = (WTF *)((char *)v111 + 12 * v54);
    do
    {
      *(_DWORD *)v55 = *(_DWORD *)v56;
      *(_QWORD *)(v55 + 4) = *(_QWORD *)((char *)v56 + 4);
      v56 = (WTF *)((char *)v56 + 12);
      v55 += 12;
    }
    while (v56 != v57);
  }
  v58 = v117;
  v137 = 0;
  v138 = 0;
  v136 = v114;
  v139 = v117;
  if (v117)
  {
    if (v117 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF064CLL);
    }
    v59 = (WTF *)WTF::fastMalloc((WTF *)(16 * v117));
    v138 = v58;
    v137 = v59;
    if (v117)
    {
      v60 = v115;
      v61 = 16 * v117;
      do
      {
        v62 = *(_OWORD *)v60;
        v60 = (WTF *)((char *)v60 + 16);
        *(_OWORD *)v59 = v62;
        v59 = (WTF *)((char *)v59 + 16);
        v61 -= 16;
      }
      while (v61);
    }
  }
  v63 = __n_4;
  v140 = 0;
  v141 = 0;
  v142 = __n_4;
  if (__n_4)
  {
    v64 = (WTF *)WTF::fastMalloc((WTF *)__n_4);
    v141 = v63;
    v140 = v64;
    memcpy(v64, __src, __n_4);
  }
  v65 = v123;
  v143 = 0;
  v144 = 0;
  v145 = v123;
  if (v123)
  {
    v103 = (WTF *)WTF::fastMalloc((WTF *)v123);
    v144 = v65;
    v143 = v103;
    memcpy(v103, v121, v123);
  }
  v146 = v124;
  v147 = v125;
  v73 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v73 + 8) = 1;
  *(_QWORD *)v73 = &off_1E35755C8;
  v74 = v73 + 32;
  v75 = v134;
  *(_QWORD *)(v73 + 16) = v73 + 32;
  *(_DWORD *)(v73 + 24) = 2;
  *(_DWORD *)(v73 + 28) = v75;
  if (v75 >= 3)
  {
    if (v75 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF066CLL);
    }
    v76 = 12 * v75;
    v74 = WTF::fastMalloc((WTF *)(12 * v75));
    *(_DWORD *)(v73 + 24) = (v76 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)(v73 + 16) = v74;
    LODWORD(v75) = v134;
  }
  if ((_DWORD)v75)
  {
    v77 = v132;
    v78 = (WTF *)((char *)v132 + 12 * v75);
    do
    {
      *(_DWORD *)v74 = *(_DWORD *)v77;
      *(_QWORD *)(v74 + 4) = *(_QWORD *)((char *)v77 + 4);
      v77 = (WTF *)((char *)v77 + 12);
      v74 += 12;
    }
    while (v77 != v78);
  }
  *(_QWORD *)(v73 + 56) = v136;
  *(_QWORD *)(v73 + 64) = 0;
  v79 = v139;
  *(_QWORD *)(v73 + 72) = 0;
  *(_DWORD *)(v73 + 76) = v79;
  if ((_DWORD)v79)
  {
    if (v79 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF0654);
    }
    v80 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v79));
    *(_DWORD *)(v73 + 72) = v79;
    *(_QWORD *)(v73 + 64) = v80;
    if (v139)
    {
      v81 = v137;
      v82 = 16 * v139;
      do
      {
        v83 = *(_OWORD *)v81;
        v81 = (WTF *)((char *)v81 + 16);
        *v80++ = v83;
        v82 -= 16;
      }
      while (v82);
    }
  }
  v84 = (WTF *)v142;
  *(_QWORD *)(v73 + 80) = 0;
  *(_QWORD *)(v73 + 88) = 0;
  *(_DWORD *)(v73 + 92) = (_DWORD)v84;
  if ((_DWORD)v84)
  {
    v85 = (void *)WTF::fastMalloc(v84);
    *(_DWORD *)(v73 + 88) = (_DWORD)v84;
    *(_QWORD *)(v73 + 80) = v85;
    memcpy(v85, v140, v142);
  }
  v86 = (WTF *)v145;
  *(_QWORD *)(v73 + 96) = 0;
  *(_QWORD *)(v73 + 104) = 0;
  *(_DWORD *)(v73 + 108) = (_DWORD)v86;
  if ((_DWORD)v86)
  {
    v104 = (void *)WTF::fastMalloc(v86);
    *(_DWORD *)(v73 + 104) = (_DWORD)v86;
    *(_QWORD *)(v73 + 96) = v104;
    memcpy(v104, v143, v145);
  }
  *(_QWORD *)(v73 + 112) = v146;
  *(_OWORD *)(v73 + 120) = v147;
  v87 = *(unsigned int *)(v53 + 12);
  if ((_DWORD)v87 != *(_DWORD *)(v53 + 8))
  {
    v88 = (uint64_t *)(*(_QWORD *)v53 + 8 * v87);
    goto LABEL_64;
  }
  v97 = v87 + (v87 >> 2);
  if (v97 >= 0x10)
    v98 = v97 + 1;
  else
    v98 = 16;
  if (v98 <= v87 + 1)
    v99 = v87 + 1;
  else
    v99 = v98;
  if (v99 >> 29)
  {
    __break(0xC471u);
LABEL_111:
    JUMPOUT(0x197CF061CLL);
  }
  v100 = *(const void **)v53;
  v101 = (void *)WTF::fastMalloc((WTF *)(8 * v99));
  *(_DWORD *)(v53 + 8) = v99;
  *(_QWORD *)v53 = v101;
  memcpy(v101, v100, 8 * v87);
  if (v100)
  {
    if (*(const void **)v53 == v100)
    {
      *(_QWORD *)v53 = 0;
      *(_DWORD *)(v53 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v100, v66, v67, v68, v69, v70, v71, v72);
  }
  v87 = *(unsigned int *)(v53 + 12);
  v88 = (uint64_t *)(*(_QWORD *)v53 + 8 * v87);
LABEL_64:
  *v88 = v73;
  *(_DWORD *)(v53 + 12) = v87 + 1;
  v89 = v143;
  if (v143)
  {
    v143 = 0;
    v144 = 0;
    WTF::fastFree((unint64_t)v89, v66, v67, v68, v69, v70, v71, v72);
  }
  v90 = v140;
  if (v140)
  {
    v140 = 0;
    v141 = 0;
    WTF::fastFree((unint64_t)v90, v66, v67, v68, v69, v70, v71, v72);
  }
  v91 = v137;
  if (v137)
  {
    v137 = 0;
    v138 = 0;
    WTF::fastFree((unint64_t)v91, v66, v67, v68, v69, v70, v71, v72);
  }
  v92 = v132;
  if (v135 != (_BYTE *)v132 && v132)
  {
    v132 = 0;
    v133 = 0;
    WTF::fastFree((unint64_t)v92, v66, v67, v68, v69, v70, v71, v72);
  }
  v93 = v121;
  if (v121)
  {
    v121 = 0;
    v122 = 0;
    WTF::fastFree((unint64_t)v93, v66, v67, v68, v69, v70, v71, v72);
  }
  v94 = __src;
  if (__src)
  {
    __src = 0;
    __n = 0;
    WTF::fastFree((unint64_t)v94, v66, v67, v68, v69, v70, v71, v72);
  }
  v95 = v115;
  if (v115)
  {
    v115 = 0;
    v116 = 0;
    WTF::fastFree((unint64_t)v95, v66, v67, v68, v69, v70, v71, v72);
  }
  if (v113 != (_BYTE *)v111 && v111)
    WTF::fastFree((unint64_t)v111, v66, v67, v68, v69, v70, v71, v72);
  v96 = v129;
  if (v131 != (_BYTE *)v129 && v129)
  {
    v129 = 0;
    LODWORD(v130) = 0;
    WTF::fastFree((unint64_t)v96, v66, v67, v68, v69, v70, v71, v72);
  }
  *(_BYTE *)(a2 + 212) = v11;
}

uint64_t JSC::B3::StackmapGenerationParams::StackmapGenerationParams(uint64_t this, const JSC::B3::StackmapGenerationParams *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;

  v3 = this;
  v4 = *(_QWORD *)a2;
  v5 = *((unsigned int *)a2 + 5);
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = v4;
  *(_DWORD *)(this + 20) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      return this;
    }
    v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v3 + 16) = v5;
    *(_QWORD *)(v3 + 8) = v6;
    v7 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)*((_QWORD *)a2 + 1);
      v9 = 16 * v7;
      do
      {
        v10 = *v8++;
        *v6++ = v10;
        v9 -= 16;
      }
      while (v9);
    }
  }
  v11 = (WTF *)*((unsigned int *)a2 + 9);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 36) = (_DWORD)v11;
  if ((_DWORD)v11)
  {
    v12 = (void *)WTF::fastMalloc(v11);
    *(_DWORD *)(v3 + 32) = (_DWORD)v11;
    *(_QWORD *)(v3 + 24) = v12;
    memcpy(v12, *((const void **)a2 + 3), *((unsigned int *)a2 + 9));
  }
  v13 = (WTF *)*((unsigned int *)a2 + 13);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 52) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    *(_DWORD *)(v3 + 48) = (_DWORD)v13;
    *(_QWORD *)(v3 + 40) = v14;
    memcpy(v14, *((const void **)a2 + 5), *((unsigned int *)a2 + 13));
  }
  *(_QWORD *)(v3 + 56) = *((_QWORD *)a2 + 7);
  return v3;
}

void WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v18 = *(unsigned int *)(a1 + 12);
    v19 = *(_QWORD **)a1;
    v20 = *a2;
    *a2 = 0;
    v19[v18] = v20;
    *(_DWORD *)(a1 + 12) = v18 + 1;
    return;
  }
  if (!(v8 >> 29))
  {
    v9 = *(_QWORD **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v9 = *(_QWORD *)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)(a1 + 80);
  if (v10)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (v11)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (a1 + 32 != v12 && v12 != 0)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;

  v9 = *((_QWORD *)this + 12);
  if (v9)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 8);
  if (v11)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (WTF *)*((_QWORD *)this + 2);
  if ((WTF *)((char *)this + 32) != v12 && v12 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int i;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int j;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  const void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91[2];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    do
    {
      if (v13 >= *(unsigned int *)(a1 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x197CF0FB4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
    }
    while (v14 != v12);
  }
  JSC::B3::Air::Code::calleeSaveRegisterAtOffsetList(*(JSC::B3::Air::Code **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48) + 8) + 160), v91);
  JSC::AssemblyHelpers::emitRestore((_DWORD *)a2, (_DWORD **)v91, 29, v15, v16, v17, v18, v19);
  v27 = v91[0];
  v91[0] = 0;
  if (v27)
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v28 = -1207811152;
  v29 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v29)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197CF0F6CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v29, a2 + 264, v22, v23, v24, v25, v26);
  }
  else
  {
    v28 = -1207811137;
  }
  v30 = *(_DWORD *)(a2 + 200);
  if (v30 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v29, v21, v22, v23, v24, v25, v26);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = v28;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a2, *(_QWORD *)(a1 + 128) + 48, 0, v22, v23, v24, v25, v26);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)a2, 0);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a2 + 336), 0, v31, v32, v33, v34, v35);
  for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  if (!*(_BYTE *)(a2 + 212))
    goto LABEL_74;
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v44 = *(_BYTE *)(a2 + 272) & 0x1F;
  if (i + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
    i = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = v44 | 0xD2800000;
  v45 = *(_DWORD *)(a2 + 200);
  v46 = v45 + 4;
  *(_DWORD *)(a2 + 200) = v45 + 4;
  if ((v45 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
    v46 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v46) = v44 | 0xF2A00000;
  v47 = *(_DWORD *)(a2 + 200);
  v48 = v47 + 4;
  *(_DWORD *)(a2 + 200) = v47 + 4;
  if ((v47 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
    v48 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v48) = v44 | 0xF2C00000;
  v49 = *(_DWORD *)(a2 + 200);
  v50 = v49 + 4;
  *(_DWORD *)(a2 + 200) = v49 + 4;
  *(_DWORD *)(a2 + 208) = 0;
  if ((v49 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
    v50 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v50) = -700513792;
  v51 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v51; v51 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v51)
  {
    if ((v51 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v36, v37, v38, v39, v40, v41, v42);
      v51 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v51) = -721215457;
    v51 = *(_DWORD *)(a2 + 200) + 4;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 128), 0, v38, v39, v40, v41, v42);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v52, v53, v54, v55, v56, v57, v58);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CF0EC0);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  v60 = *(_BYTE *)(a2 + 272) & 0x1F;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v52, v53, v54, v55, v56, v57, v58);
    j = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = v60 | 0xD2800000;
  v61 = *(_DWORD *)(a2 + 200);
  v62 = v61 + 4;
  *(_DWORD *)(a2 + 200) = v61 + 4;
  if ((v61 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v52, v53, v54, v55, v56, v57, v58);
    v62 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v62) = v60 | 0xF2A00000;
  v63 = *(_DWORD *)(a2 + 200);
  v64 = v63 + 4;
  *(_DWORD *)(a2 + 200) = v63 + 4;
  if ((v63 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v52, v53, v54, v55, v56, v57, v58);
    v64 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v64) = v60 | 0xF2C00000;
  v65 = *(_DWORD *)(a2 + 200);
  v66 = v65 + 4;
  *(_DWORD *)(a2 + 200) = v65 + 4;
  *(_DWORD *)(a2 + 208) = 0;
  if ((v65 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v52, v53, v54, v55, v56, v57, v58);
    v66 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v66) = -700513792;
  v67 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v67; v67 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v67)
  {
    if ((v67 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v52, v53, v54, v55, v56, v57, v58);
      v67 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v67) = -721215457;
    v67 = *(_DWORD *)(a2 + 200) + 4;
  }
  JSC::MacroAssemblerARM64::load64(a2, *(_QWORD *)(a1 + 128) + 90488, 1, v54, v55, v56, v57, v58);
  v75 = *(_DWORD *)(a2 + 200);
  if (v75 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v68, v69, v70, v71, v72, v73, v74);
    v75 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v75) = -702611424;
  *(_DWORD *)(a2 + 200) += 4;
  v76 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v76 = off_1E35755F0;
  *(_DWORD *)(v76 + 8) = 1;
  *(_DWORD *)(v76 + 12) = v51;
  *(_DWORD *)(v76 + 16) = 1;
  *(_DWORD *)(v76 + 20) = v67;
  *(_DWORD *)(v76 + 24) = 1;
  v77 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v77 != *(_DWORD *)(a2 + 240))
  {
    v78 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v77);
    goto LABEL_40;
  }
  v79 = v77 + (v77 >> 2);
  v80 = v79 >= 0x10 ? v79 + 1 : 16;
  v81 = v80 <= v77 + 1 ? v77 + 1 : v80;
  if (v81 >> 29)
  {
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x197CF0DE8);
  }
  v82 = *(const void **)(a2 + 232);
  v83 = (void *)WTF::fastMalloc((WTF *)(8 * v81));
  *(_DWORD *)(a2 + 240) = v81;
  *(_QWORD *)(a2 + 232) = v83;
  memcpy(v83, v82, 8 * v77);
  if (v82)
  {
    if (*(const void **)(a2 + 232) == v82)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v82, v84, v85, v86, v87, v88, v89, v90);
  }
  v77 = *(unsigned int *)(a2 + 244);
  v78 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v77);
LABEL_40:
  *v78 = v76;
  *(_DWORD *)(a2 + 244) = v77 + 1;
  *(_BYTE *)(a2 + 212) = v10;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(_DWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  JSC::ExecutableAllocator *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  JSC::ExecutableAllocator *v13;
  unsigned int v14;

  v5 = a1[3];
  v4 = a1[4];
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + *(_QWORD *)(a2 + 24) - 4);
  v7 = v5 - v6;
  v8 = *(JSC::ExecutableAllocator **)(a2 + 184);
  if ((v4 & 2) != 0)
  {
    if ((v4 & 4) != 0)
    {
      v14 = v7;
      JSC::ARM64Assembler::linkJump(v8, &v14, (unint64_t)operationThrowStackOverflowError);
    }
    else
    {
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v8 + v7 - 4), (unint64_t)v8 + v7 - 4, (unint64_t)operationThrowStackOverflowError);
    }
  }
  else
  {
    v14 = v7 - 16;
    JSC::ARM64Assembler::linkPointer((uint64_t)v8, &v14, (unint64_t)operationThrowStackOverflowError);
  }
  v10 = a1[5];
  v9 = a1[6];
  if (v10 < 4)
    v11 = 0;
  else
    v11 = *(_DWORD *)((v10 & 0xFFFFFFFC) + *(_QWORD *)(a2 + 24) - 4);
  v12 = v10 - v11;
  v13 = *(JSC::ExecutableAllocator **)(a2 + 184);
  if ((v9 & 2) != 0)
  {
    if ((v9 & 4) != 0)
    {
      v14 = v12;
      JSC::ARM64Assembler::linkJump(v13, &v14, (unint64_t)operationLookupExceptionHandlerFromCallerFrame);
    }
    else
    {
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)v13 + v12 - 4), (unint64_t)v13 + v12 - 4, (unint64_t)operationLookupExceptionHandlerFromCallerFrame);
    }
  }
  else
  {
    v14 = v12 - 16;
    JSC::ARM64Assembler::linkPointer((uint64_t)v13, &v14, (unint64_t)operationLookupExceptionHandlerFromCallerFrame);
  }
}

const JSC::FTL::AbstractHeap *JSC::FTL::Output::address(JSC::FTL::Output *this, JSC::B3::Value *a2, const JSC::FTL::AbstractHeap *a3)
{
  uint64_t v5;
  JSC::B3::Value *v7;

  v5 = *((_QWORD *)a3 + 3);
  if (v5)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(this, v5);
    JSC::FTL::Output::add(this, a2, v7);
  }
  return a3;
}

uint64_t JSC::FTL::IndexedAbstractHeap::operator[](JSC::FTL::IndexedAbstractHeap *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  JSC::FTL::AbstractHeap *v9;

  if (a2 > 0xF)
    return JSC::FTL::IndexedAbstractHeap::atSlow(a1, a2, a2, a4, a5, a6, a7, a8);
  v8 = (char *)a1 + 48 * a2;
  v9 = (JSC::FTL::AbstractHeap *)(v8 + 72);
  if (!*((_QWORD *)v8 + 14))
    JSC::FTL::IndexedAbstractHeap::initialize(a1, v9, a2);
  return (uint64_t)v9;
}

const JSC::FTL::AbstractHeap *JSC::FTL::Output::address(JSC::FTL::Output *this, const JSC::FTL::AbstractHeap *a2, JSC::B3::Value *a3, uint64_t a4)
{
  JSC::B3::Value *v7;

  if (a4)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(this, a4);
    JSC::FTL::Output::add(this, a3, v7);
  }
  return a2;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::appendOSRExit(uint64_t a1, JSC::CodeBlock *a2, char a3, WTF *a4, uint64_t a5, JSC::B3::Value *a6, uint64_t a7, char a8)
{
  char v14;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  JSC::DFG *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  JSC::FTL::AbstractHeap *v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::FTL::AbstractHeap *v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  __int16 v67;
  uint64_t v68;

  v14 = (char)a2;
  if ((_BYTE)qword_1ECF4C32A)
    v16 = 0;
  else
    v16 = byte_1ECF4C323 == 0;
  if (!v16 || BYTE1(qword_1ECF4C32A) != 0)
  {
    v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 272);
    WTF::dataLog<char [15],unsigned long,char [21],JSC::DFG::AvailabilityMap,char [2]>(&v68, a1 + 27992);
  }
  if (!*(_BYTE *)(a7 + 16))
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5933, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::appendOSRExit(ExitKind, FormattedValue, const MethodOfGettingAValueProfile &, LValue, NodeOrigin, BOOL)", "origin.exitOK");
    __break(0xC471u);
    JUMPOUT(0x197CF141CLL);
  }
  if ((a8 & 1) == 0 && HIBYTE(word_1ECF4C648))
  {
    v38 = *(JSC::DFG **)(*(_QWORD *)a1 + 40);
    v39 = *(_QWORD *)(a1 + 28192);
    v40 = (_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 1) != 0)
      v40 = (_QWORD *)*v40;
    if (v40)
      v38 = (JSC::DFG *)v40[1];
    if (JSC::DFG::canUseOSRExitFuzzing(v38, a2))
    {
      v47 = ++JSC::DFG::g_numberOfStaticOSRExitFuzzChecks;
      if (!unk_1ECF4C64C || unk_1ECF4C64C == v47)
      {
        v48 = JSC::FTL::Output::absolute((JSC::FTL::Output *)(a1 + 27640), (uint64_t)&JSC::DFG::g_numberOfOSRExitFuzzChecks, v41, v42, v43, v44, v45, v46);
        v50 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, v48, v49, 1);
        v51 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v50, *(JSC::B3::Value **)(a1 + 27664));
        v58 = JSC::FTL::Output::absolute((JSC::FTL::Output *)(a1 + 27640), (uint64_t)&JSC::DFG::g_numberOfOSRExitFuzzChecks, v52, v53, v54, v55, v56, v57);
        JSC::FTL::Output::store(a1 + 27640, (uint64_t)v51, v58, v59);
        if (HIDWORD(qword_1ECF4C650))
        {
          v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), SHIDWORD(qword_1ECF4C650));
          v61 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 27640), v51, v60);
          a6 = JSC::FTL::Output::bitOr((JSC::FTL::Output *)(a1 + 27640), a6, v61);
        }
        if ((_DWORD)qword_1ECF4C650)
        {
          v62 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), qword_1ECF4C650);
          v63 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v51, v62);
          a6 = JSC::FTL::Output::bitOr((JSC::FTL::Output *)(a1 + 27640), a6, v63);
        }
      }
    }
  }
  if (a6 != *(JSC::B3::Value **)(a1 + 27648))
  {
    v19 = JSC::FTL::Output::speculate((JSC::FTL::Output *)(a1 + 27640), a6);
    v20 = *(_QWORD *)a7;
    if ((*(_QWORD *)a7 & 1) != 0)
    {
      v30 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 2) != 0
        || ((v31 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
          ? (v32 = (_DWORD)v31 == -1)
          : (v32 = 1),
            v32))
      {
        v33 = 2;
      }
      else if (v31 >> 28)
      {
        v64 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v64 = v30;
        *(_DWORD *)(v64 + 8) = v31;
        v33 = 1;
        v30 = v64;
      }
      else
      {
        v33 = v30;
        v30 = v31 << 36;
      }
      v20 = v30 | v33;
    }
    v66[0] = v20;
    v21 = *(_QWORD *)(a7 + 8);
    if ((v21 & 1) != 0)
    {
      v34 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      if ((v21 & 2) != 0
        || ((v35 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v35 != 0x3FFFFFFF)
          ? (v36 = (_DWORD)v35 == -1)
          : (v36 = 1),
            v36))
      {
        v37 = 2;
      }
      else if (v35 >> 28)
      {
        v65 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v65 = v34;
        *(_DWORD *)(v65 + 8) = v35;
        v37 = 1;
        v34 = v65;
      }
      else
      {
        v37 = v34;
        v34 = v35 << 36;
      }
      v21 = v34 | v37;
      v22 = ((v34 | v37) & 1) == 0;
    }
    else
    {
      v22 = 1;
    }
    v66[1] = v21;
    v67 = *(_WORD *)(a7 + 16);
    if (!v22 && (v21 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v21 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
    if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v20 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  }
}

uint64_t JSC::DFG::NodeOrigin::NodeOrigin(uint64_t this, const JSC::DFG::NodeOrigin *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  const JSC::DFG::NodeOrigin *v16;
  const JSC::DFG::NodeOrigin *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v5 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v5 != 0x3FFFFFFF)
        ? (v6 = (_DWORD)v5 == -1)
        : (v6 = 1),
          v6))
    {
      v7 = 2;
    }
    else if (v5 >> 28)
    {
      v16 = a2;
      v18 = this;
      v12 = v4;
      v13 = v5;
      v4 = WTF::fastMalloc((WTF *)0x10);
      a2 = v16;
      this = v18;
      *(_QWORD *)v4 = v12;
      *(_DWORD *)(v4 + 8) = v13;
      v7 = 1;
    }
    else
    {
      v7 = v4;
      v4 = v5 << 36;
    }
    v2 = v4 | v7;
  }
  *(_QWORD *)this = v2;
  v3 = *((_QWORD *)a2 + 1);
  if ((v3 & 1) != 0)
  {
    v8 = *(_QWORD *)(v3 & 0xFFFFFFFF8);
    if ((v3 & 2) != 0
      || ((v9 = *(unsigned int *)((v3 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v17 = a2;
      v19 = this;
      v14 = v8;
      v15 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v17;
      this = v19;
      *(_QWORD *)v8 = v14;
      *(_DWORD *)(v8 + 8) = v15;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v3 = v8 | v11;
  }
  *(_QWORD *)(this + 8) = v3;
  *(_WORD *)(this + 16) = *((_WORD *)a2 + 8);
  return this;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::blessSpeculation(uint64_t a1, uint64_t a2, char a3, char a4, WTF *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79[3];
  char v80;
  uint64_t v81;
  char v82;

  v14 = a1 + 28004;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v80 = a4;
  v17 = *(unsigned int *)(a1 + 28004);
  v16 = (WTF *)*(unsigned int *)(a1 + 28008);
  v75 = v16;
  v81 = *(unsigned int *)(a1 + 28012);
  *(_QWORD *)v79 = v17 - ((_QWORD)v16 + v81);
  WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::append<JSC::DataFormat,JSC::MethodOfGettingAValueProfile const&,unsigned long,unsigned long,unsigned long>(v15 + 272, &v80, a6, (uint64_t *)&v75, &v81, v79, a7, a8);
  v18 = *(_QWORD *)(v15 + 272) - 1;
  if (v18 >> 3 >= *(unsigned int *)(v15 + 292))
  {
    __break(0xC471u);
  }
  else
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v15 + 280) + 8 * (v18 >> 3)) + 48 * (v18 & 7);
    v20 = *(_QWORD *)(a7 + 8);
    if ((v20 & 1) != 0)
    {
      v51 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 2) != 0
        || ((v52 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v52 != 0x3FFFFFFF)
          ? (v53 = (_DWORD)v52 == -1)
          : (v53 = 1),
            v53))
      {
        v54 = 2;
      }
      else if (v52 >> 28)
      {
        v70 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v70 = v51;
        *(_DWORD *)(v70 + 8) = v52;
        v54 = 1;
        v51 = v70;
      }
      else
      {
        v54 = v51;
        v51 = v52 << 36;
      }
      v20 = v51 | v54;
    }
    v81 = 0;
    v82 = 1;
    v28 = v75;
    if (v77)
    {
      v29 = 8 * v77;
      do
      {
        v30 = *(_QWORD *)v28;
        v28 = (WTF *)((char *)v28 + 8);
        JSC::B3::StackmapValue::append((__int128 *)a2, v30, (unint64_t)&v81);
        v29 -= 8;
      }
      while (v29);
      v28 = v75;
    }
    if (&v78 != (uint64_t *)v28 && v28 != 0)
    {
      v75 = 0;
      v76 = 0;
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    }
    if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v20 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
    v32 = *(_QWORD *)(a1 + 8);
    v33 = *(_DWORD *)(v14 + 212);
    v34 = *(_QWORD *)a7;
    if ((*(_QWORD *)a7 & 1) != 0)
    {
      v55 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
      if ((v34 & 2) != 0
        || ((v56 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v56 != 0x3FFFFFFF)
          ? (v57 = (_DWORD)v56 == -1)
          : (v57 = 1),
            v57))
      {
        v58 = 2;
      }
      else if (v56 >> 28)
      {
        v71 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v71 = v55;
        *(_DWORD *)(v71 + 8) = v56;
        v58 = 1;
        v55 = v71;
      }
      else
      {
        v58 = v55;
        v55 = v56 << 36;
      }
      v34 = v55 | v58;
    }
    v35 = *(_QWORD *)(a7 + 8);
    if ((v35 & 1) != 0)
    {
      v59 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      if ((v35 & 2) != 0
        || ((v60 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v60 != 0x3FFFFFFF)
          ? (v61 = (_DWORD)v60 == -1)
          : (v61 = 1),
            v61))
      {
        v62 = 2;
      }
      else if (v60 >> 28)
      {
        v72 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v72 = v59;
        *(_DWORD *)(v72 + 8) = v60;
        v62 = 1;
        v59 = v72;
      }
      else
      {
        v62 = v59;
        v59 = v60 << 36;
      }
      v35 = v59 | v62;
    }
    v36 = *(_WORD *)(a7 + 16);
    v44 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v44 + 8) = 1;
    *(_QWORD *)v44 = &off_1E3575618;
    *(_QWORD *)(v44 + 16) = v19;
    *(_QWORD *)(v44 + 24) = v32;
    *(_BYTE *)(v44 + 32) = a3;
    v45 = v34;
    if ((v34 & 1) != 0)
    {
      v63 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
      if ((v34 & 2) != 0
        || ((v64 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v64 != 0x3FFFFFFF)
          ? (v65 = (_DWORD)v64 == -1)
          : (v65 = 1),
            v65))
      {
        v66 = 2;
      }
      else if (v64 >> 28)
      {
        v73 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v73 = v63;
        *(_DWORD *)(v73 + 8) = v64;
        v66 = 1;
        v63 = v73;
      }
      else
      {
        v66 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
        v63 = v64 << 36;
      }
      v45 = v63 | v66;
    }
    *(_QWORD *)(v44 + 40) = v45;
    v46 = v35;
    if ((v35 & 1) != 0)
    {
      v67 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      if ((v35 & 2) != 0
        || (v68 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v68 == 0x3FFFFFFF)
        || (_DWORD)v68 == -1)
      {
        v69 = 2;
      }
      else if (v68 >> 28)
      {
        v74 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v74 = v67;
        *(_DWORD *)(v74 + 8) = v68;
        v69 = 1;
        v67 = v74;
      }
      else
      {
        v69 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
        v67 = v68 << 36;
      }
      v46 = v67 | v69;
    }
    *(_QWORD *)(v44 + 48) = v46;
    *(_WORD *)(v44 + 56) = v36;
    *(_DWORD *)(v44 + 64) = v33;
    v47 = *(unsigned int **)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v44;
    if (v47)
    {
      v48 = v47 + 2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v47 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
      }
    }
    if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v35 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
    if ((v34 & 1) != 0 && (v34 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v34 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  }
}

uint64_t WTF::dataLog<char [15],unsigned long,char [21],JSC::DFG::AvailabilityMap,char [2]>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  uint64_t **v10;
  uint64_t *v11[7];
  char v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v11[0] = (uint64_t *)&v9;
    v10 = v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    OSR exit #");
  WTF::PrintStream::printf(v6, "%lu", *a1);
  WTF::PrintStream::printf(v6, "%s", " with availability: ");
  v11[0] = (uint64_t *)(a2 + 24);
  v11[1] = (uint64_t *)"=>";
  v11[2] = (uint64_t *)3;
  v11[3] = (uint64_t *)", ";
  v11[4] = (uint64_t *)3;
  v11[5] = (uint64_t *)&str_90_2;
  v11[6] = (uint64_t *)1;
  v12 = 0;
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v7, "%s", "{locals = ");
  JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a2, (uint64_t)v7);
  WTF::PrintStream::printf(v7, "%s", "; heap = ");
  WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(v11, (uint64_t)v7);
  WTF::PrintStream::printf(v7, "%s", "}");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildExitArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, WTF *a6)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN *__ptr32 *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  char *v34;
  unint64_t v35;
  int v36;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  WTF *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  BOOL v94;
  uint64_t v95;
  int v96;
  int v97;
  BOOL v98;
  int v99;
  uint64_t i;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  JSC::DFG::Graph *v109;
  JSC::DFG::Node *v110;
  const char *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int isLiveInBytecode;
  WTF *v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::DFG::Graph *v140;
  JSC::DFG::Node *v141;
  const char *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156[2];
  uint64_t v157;
  uint64_t v158;
  WTF *v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  __int128 v166;
  int v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 16;
  if ((a4 & 1) != 0)
  {
    v101 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
    if ((a4 & 2) != 0
      || ((v102 = *(unsigned int *)((a4 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v134 = a6;
      v135 = a5;
      v136 = a3;
      v137 = WTF::fastMalloc((WTF *)0x10);
      a3 = v136;
      a5 = v135;
      a6 = v134;
      *(_QWORD *)v137 = v101;
      *(_DWORD *)(v137 + 8) = v102;
      v104 = 1;
      v101 = v137;
    }
    else
    {
      v104 = *(_QWORD *)(a4 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    a4 = v101 | v104;
  }
  v154 = a4;
  v164 = a3;
  if (a5)
  {
    v159 = a6;
    v8 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *>(a1, (unint64_t)&v159);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a6;
      *(_DWORD *)(a1 + 12) = v8 + 1;
    }
  }
  v9 = *(unsigned int *)(a2 + 28004);
  v159 = 0;
  v160 = 0;
  v161 = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF255CLL);
    }
    v10 = (WTF *)WTF::fastMalloc((WTF *)(16 * v9));
    v160 = v9;
    v159 = v10;
    v11 = *(unsigned int *)(a2 + 28004);
    if ((_DWORD)v11)
    {
      v12 = *(__int128 **)(a2 + 27992);
      v13 = 16 * v11;
      do
      {
        v14 = *v12++;
        *(_OWORD *)v10 = v14;
        v10 = (WTF *)((char *)v10 + 16);
        v13 -= 16;
      }
      while (v13);
    }
  }
  v162 = *(_QWORD *)(a2 + 28008);
  WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::HashTable(&v163, (uint64_t *)(a2 + 28016));
  v19 = *(_QWORD *)a2;
  v20 = v154;
  if ((v154 & 1) != 0)
  {
    v105 = *(_QWORD *)(v154 & 0xFFFFFFFF8);
    if ((v154 & 2) != 0
      || ((v106 = *(unsigned int *)((v154 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v138 = *(_QWORD *)a2;
      v139 = WTF::fastMalloc((WTF *)0x10);
      v19 = v138;
      *(_QWORD *)v139 = v105;
      *(_DWORD *)(v139 + 8) = v106;
      v108 = 1;
      v105 = v139;
    }
    else
    {
      v108 = *(_QWORD *)(v154 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v20 = v105 | v108;
  }
  v158 = v20;
  JSC::DFG::AvailabilityMap::pruneByLiveness((uint64_t)&v159, v19, &v158, v15, v16, v17, v18);
  if ((v158 & 1) != 0 && (v158 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v158 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  v156[0] = &v157;
  v156[1] = &v164;
  v157 = 0;
  if (v161)
  {
    v28 = v161 - 1;
    do
    {
      v34 = (char *)v159 + 16 * v28;
      v35 = *(_QWORD *)v34;
      v36 = v34[8];
      if ((v36 == 7 || v36 == 0) && v35 >= 2)
      {
        v165 = v35;
        v39 = *(unsigned __int16 *)(v35 + 18);
        v40 = (v39 - 278) > 0xC || ((1 << (v39 - 22)) & 0x15F1) == 0;
        if (!v40
          || ((v29 = v39 - 348, v30 = v29 > 7, v31 = (1 << v29) & 0x9F, !v30) ? (v32 = v31 == 0) : (v32 = 1), !v32))
        {
          WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)&v166, &v157, (uint64_t *)&v165, v23, v24, v25, v26, v27);
          if ((_BYTE)v167)
          {
            LOWORD(v155) = *(_WORD *)(v35 + 18);
            v41 = WTF::Bag<JSC::FTL::ExitTimeObjectMaterialization,WTF::RawPtrTraits<JSC::FTL::ExitTimeObjectMaterialization>,WTF::FastMalloc>::add<JSC::DFG::NodeType,JSC::CodeOrigin &>((uint64_t *)(v164 + 40), (__int16 *)&v155, (uint64_t *)v35);
            *(_QWORD *)(v166 + 8) = v41;
          }
        }
      }
    }
    while ((unint64_t)v28--);
  }
  if (!v163)
  {
    v42 = 0;
    v43 = 0;
LABEL_36:
    v44 = v163 + 32 * v43;
    goto LABEL_37;
  }
  v43 = *(unsigned int *)(v163 - 4);
  v44 = v163 + 32 * v43;
  if (!*(_DWORD *)(v163 - 12))
  {
    v42 = v163 + 32 * v43;
    goto LABEL_36;
  }
  v42 = v163;
  if (!(_DWORD)v43)
    goto LABEL_37;
  v91 = 32 * v43;
  v42 = v163;
  do
  {
    v92 = *(_DWORD *)(v42 + 8);
    if (*(_QWORD *)v42)
    {
      v93 = *(_DWORD *)(v42 + 12);
    }
    else
    {
      v93 = *(_DWORD *)(v42 + 12);
      if (!(v92 | v93))
        goto LABEL_103;
    }
    if (v92)
      v94 = 1;
    else
      v94 = v93 == 0;
    if (v94)
      goto LABEL_37;
LABEL_103:
    v42 += 32;
    v91 -= 32;
  }
  while (v91);
  v42 = v44;
LABEL_37:
  if (v163)
    v45 = v163 + 32 * *(unsigned int *)(v163 - 4);
  else
    v45 = 0;
  if (v45 == v42)
    goto LABEL_40;
  while (2)
  {
    v150 = v42 + 32;
    v42 = v44;
    if (v150 == v44)
      goto LABEL_194;
    v42 = v150;
    while (2)
    {
      v151 = *(_DWORD *)(v42 + 8);
      if (*(_QWORD *)v42)
      {
        v152 = *(_DWORD *)(v42 + 12);
      }
      else
      {
        v152 = *(_DWORD *)(v42 + 12);
        if (!(v151 | v152))
          goto LABEL_187;
      }
      if (v151)
        v153 = 1;
      else
        v153 = v152 == 0;
      if (v153)
        goto LABEL_194;
LABEL_187:
      v42 += 32;
      if (v42 != v44)
        continue;
      break;
    }
    v42 = v44;
LABEL_194:
    if (v42 != v45)
      continue;
    break;
  }
LABEL_40:
  v46 = v164;
  v47 = *(unsigned int **)(v164 + 24);
  if (v47)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    do
    {
      if (v50 >= *v47)
        break;
      v52 = *(unsigned int *)(v46 + 32);
      if (v50 < v52)
      {
        v56 = v50 + 5;
        v55 = (v50 + 5) >> 31;
      }
      else
      {
        v55 = *(unsigned int *)(v46 + 36);
        v53 = v55 + v52;
        v54 = v50 - (v52 + v55);
        LODWORD(v55) = (v51 + v52) >> 31;
        v55 = v53 > v50 ? v55 : 2;
        v56 = v53 > v50 ? v52 + ~(_DWORD)v50 : v54;
      }
      v57 = (uint64_t *)(v56 | (unint64_t)(v55 << 32));
      v156[0] = v57;
      v166 = *(_OWORD *)((char *)v159 + v48);
      if (byte_1ECF4C41C)
      {
        if ((v119 = *(_QWORD *)a2,
              v120 = *((_QWORD *)&v166 + 1),
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16) == 5)
          || BYTE8(v166) != 7 && BYTE8(v166)
          || (unint64_t)v166 > 1)
        {
          v58 = *((_QWORD *)&v166 + 1);
        }
        else
        {
          JSC::CodeOrigin::CodeOrigin((uint64_t *)&v165, (const JSC::CodeOrigin *)&v154);
          isLiveInBytecode = JSC::DFG::Graph::isLiveInBytecode(v119, (unint64_t)v57, &v165, v121, v122, v123, v124, v125);
          if ((v165 & 1) != 0 && (v165 & 0xFFFFFFFF8) != 0)
          {
            WTF::fastFree(v165 & 0xFFFFFFFF8, v126, v127, v128, v129, v130, v131, v132);
            v58 = v120;
            if ((isLiveInBytecode & 1) != 0)
            {
LABEL_176:
              v140 = *(JSC::DFG::Graph **)a2;
              v141 = *(JSC::DFG::Node **)(a2 + 28224);
              WTF::toCString<char [46],JSC::Operand,char [18],JSC::DFG::Availability,char [12],JSC::CodeOrigin>(&v155, (unsigned int *)v156, (JSC::DFG::Availability *)&v166, (JSC::CodeOrigin *)&v154);
              if (v155)
                v142 = (const char *)(v155 + 16);
              else
                v142 = 0;
              JSC::DFG::Graph::logAssertionFailure(v140, v141, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5995, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::buildExitArguments(OSRExitDescriptor *, CodeOrigin, StackmapArgumentList &, FormattedValue, unsigned int)", v142);
              WTF::CString::~CString((WTF::CString *)&v155, v143, v144, v145, v146, v147, v148, v149);
              __break(0xC471u);
              JUMPOUT(0x197CF2554);
            }
          }
          else
          {
            v58 = v120;
            if (isLiveInBytecode)
              goto LABEL_176;
          }
        }
      }
      else
      {
        v58 = *((_QWORD *)&v166 + 1);
      }
      v60 = *(unsigned int **)(v164 + 24);
      if (v50 >= *v60)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF2258);
      }
      v61 = (char *)v60 + v49;
      *(_QWORD *)(v61 + 4) = v59;
      v61[12] = (char)v21;
      ++v50;
      v46 = v164;
      v47 = *(unsigned int **)(v164 + 24);
      v49 += 9;
      --v51;
      v48 += 16;
    }
    while (v47);
  }
  if (!v163)
  {
    v62 = 0;
    v63 = 0;
LABEL_58:
    v64 = v163 + 32 * v63;
    goto LABEL_59;
  }
  v63 = *(unsigned int *)(v163 - 4);
  v64 = v163 + 32 * v63;
  if (!*(_DWORD *)(v163 - 12))
  {
    v62 = v163 + 32 * v63;
    goto LABEL_58;
  }
  v62 = v163;
  if (!(_DWORD)v63)
    goto LABEL_59;
  v95 = 32 * v63;
  v62 = v163;
  while (2)
  {
    v96 = *(_DWORD *)(v62 + 8);
    if (*(_QWORD *)v62)
    {
      v97 = *(_DWORD *)(v62 + 12);
    }
    else
    {
      v97 = *(_DWORD *)(v62 + 12);
      if (!(v96 | v97))
        goto LABEL_116;
    }
    if (v96)
      v98 = 1;
    else
      v98 = v97 == 0;
    if (v98)
      goto LABEL_59;
LABEL_116:
    v62 += 32;
    v95 -= 32;
    if (v95)
      continue;
    break;
  }
  v62 = v64;
LABEL_59:
  if (v163)
    v65 = v163 + 32 * *(unsigned int *)(v163 - 4);
  else
    v65 = 0;
  if (v65 != v62)
  {
    while (1)
    {
      v69 = *(uint64_t **)v62;
      v70 = *(_QWORD *)(v62 + 8);
      v71 = *(_QWORD *)(v62 + 16);
      v72 = *(_QWORD *)(v62 + 24);
      v156[0] = *(uint64_t **)v62;
      if (!v157)
        goto LABEL_156;
      v73 = *(_DWORD *)(v157 - 8);
      v74 = ((unint64_t)v69 + ~((_QWORD)v69 << 32)) ^ (((unint64_t)v69 + ~((_QWORD)v69 << 32)) >> 22);
      v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
      v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
      v77 = v73 & ((v76 >> 31) ^ v76);
      v78 = *(uint64_t **)(v157 + 16 * v77);
      if (v78 != v69)
      {
        v99 = 1;
        while (v78)
        {
          v77 = ((_DWORD)v77 + v99) & v73;
          v78 = *(uint64_t **)(v157 + 16 * v77);
          ++v99;
          if (v78 == v69)
            goto LABEL_80;
        }
LABEL_156:
        v109 = *(JSC::DFG::Graph **)a2;
        v110 = *(JSC::DFG::Node **)(a2 + 28224);
        WTF::toCString<char [36],JSC::DFG::Node *,char [5],JSC::DFG::AvailabilityMap>((uint64_t *)&v166, (uint64_t *)v156, (uint64_t)&v159);
        if ((_QWORD)v166)
          v111 = (const char *)(v166 + 16);
        else
          v111 = 0;
        JSC::DFG::Graph::logAssertionFailure(v109, v110, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x59A1, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::buildExitArguments(OSRExitDescriptor *, CodeOrigin, StackmapArgumentList &, FormattedValue, unsigned int)", v111);
        WTF::CString::~CString((WTF::CString *)&v166, v112, v113, v114, v115, v116, v117, v118);
        __break(0xC471u);
        JUMPOUT(0x197CF23C0);
      }
LABEL_80:
      v79 = *(_QWORD *)(v157 + 16 * v77 + 8);
      if (!v79)
        goto LABEL_156;
      v81 = (_QWORD *)(v79 + 16);
      *(_QWORD *)&v166 = v70;
      *((_QWORD *)&v166 + 1) = v80;
      LOBYTE(v167) = (_BYTE)v21;
      v82 = *(unsigned int *)(v79 + 28);
      if ((_DWORD)v82 == *(_DWORD *)(v79 + 24))
      {
        v90 = WTF::Vector<JSC::FTL::ExitPropertyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v81, v82 + 1, (unint64_t)&v166);
        v83 = *(_QWORD *)(v79 + 16) + 20 * *(unsigned int *)(v79 + 28);
        v84 = *(_OWORD *)v90;
        v85 = *(_DWORD *)(v90 + 16);
      }
      else
      {
        v83 = *v81 + 20 * v82;
        v84 = v166;
        v85 = v167;
      }
      *(_DWORD *)(v83 + 16) = v85;
      *(_OWORD *)v83 = v84;
      ++*(_DWORD *)(v79 + 28);
      v86 = v62 + 32;
      v62 = v64;
      if (v86 != v64)
        break;
LABEL_94:
      if (v62 == v65)
        goto LABEL_62;
    }
    v62 = v86;
    while (1)
    {
      v87 = *(_DWORD *)(v62 + 8);
      if (*(_QWORD *)v62)
        break;
      v88 = *(_DWORD *)(v62 + 12);
      if (v87 | v88)
        goto LABEL_89;
LABEL_87:
      v62 += 32;
      if (v62 == v64)
      {
        v62 = v64;
        goto LABEL_94;
      }
    }
    v88 = *(_DWORD *)(v62 + 12);
LABEL_89:
    if (v87)
      v89 = 1;
    else
      v89 = v88 == 0;
    if (v89)
      goto LABEL_94;
    goto LABEL_87;
  }
LABEL_62:
  if ((_BYTE)qword_1ECF4C32A)
    v66 = 0;
  else
    v66 = byte_1ECF4C323 == 0;
  if (!v66 || BYTE1(qword_1ECF4C32A) != 0)
  {
    WTF::dataLog<char [22],JSC::Operands<JSC::FTL::ExitValue,WTF::FixedVector<JSC::FTL::ExitValue>>,char [2]>(v164 + 24);
    if (*(_QWORD *)(v164 + 40))
    {
      WTF::dataLog<char [16]>("        Materializations: \n");
      for (i = *(_QWORD *)(v164 + 40); i; i = *(_QWORD *)(i + 32))
      {
        *(_QWORD *)&v166 = i;
        WTF::dataLog<char [13],WTF::PointerDump<JSC::FTL::ExitTimeObjectMaterialization>,char [2]>((const void **)&v166);
      }
    }
  }
  if (v157)
    WTF::fastFree(v157 - 16, v21, v22, v23, v24, v25, v26, v27);
  if (v163)
    WTF::fastFree(v163 - 16, v21, v22, v23, v24, v25, v26, v27);
  v68 = v159;
  if (v159)
  {
    v159 = 0;
    v160 = 0;
    WTF::fastFree((unint64_t)v68, v21, v22, v23, v24, v25, v26, v27);
  }
  if ((v154 & 1) != 0 && (v154 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v154 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
}

void WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::append<JSC::DataFormat,JSC::MethodOfGettingAValueProfile const&,unsigned long,unsigned long,unsigned long>(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;

  v14 = (*(_QWORD *)a1)++;
  v15 = v14 >> 3;
  v16 = *(unsigned int *)(a1 + 20);
  if (v14 >> 3 >= v16)
  {
    v28 = (_QWORD *)(a1 + 8);
    v29 = WTF::fastMalloc((WTF *)0x180);
    v48 = v29;
    v30 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v30 == *(_DWORD *)(a1 + 16))
    {
      v31 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v30 + 1, (unint64_t)&v48);
      v30 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v30) = *v31;
    }
    else
    {
      *(_QWORD *)(*v28 + 8 * v30) = v29;
    }
    v16 = (v30 + 1);
    *(_DWORD *)(a1 + 20) = v16;
    v14 = *(_QWORD *)a1 - 1;
    v15 = v14 >> 3;
  }
  if (v15 >= v16)
  {
    __break(0xC471u);
  }
  else
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) + 48 * (v14 & 7);
    v18 = *a2;
    v19 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v32 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      if ((v19 & 2) != 0
        || ((v33 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
          ? (v34 = (_DWORD)v33 == -1)
          : (v34 = 1),
            v34))
      {
        v35 = 2;
      }
      else if (v33 >> 28)
      {
        v42 = v18;
        v43 = WTF::fastMalloc((WTF *)0x10);
        v18 = v42;
        *(_QWORD *)v43 = v32;
        *(_DWORD *)(v43 + 8) = v33;
        v35 = 1;
        v32 = v43;
      }
      else
      {
        v35 = v32;
        v32 = v33 << 36;
      }
      v19 = v32 | v35;
      v20 = ((v32 | v35) & 1) == 0;
    }
    else
    {
      v20 = 1;
    }
    v46 = *(_DWORD *)(a3 + 8);
    v47 = *(_BYTE *)(a3 + 12);
    v21 = *a4;
    v22 = *a5;
    v23 = v22;
    v24 = *a6;
    *(_BYTE *)v17 = v18;
    v25 = v19;
    if (!v20)
    {
      v36 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      if ((v19 & 2) != 0
        || ((v37 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v37 != 0x3FFFFFFF)
          ? (v38 = (_DWORD)v37 == -1)
          : (v38 = 1),
            v38))
      {
        v39 = 2;
      }
      else if (v37 >> 28)
      {
        v44 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        v45 = *(_DWORD *)((v19 & 0xFFFFFFFF8) + 8);
        v36 = WTF::fastMalloc((WTF *)0x10);
        v23 = v22;
        *(_QWORD *)v36 = v44;
        *(_DWORD *)(v36 + 8) = v45;
        v39 = 1;
      }
      else
      {
        v39 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        v36 = v37 << 36;
      }
      v25 = v36 | v39;
    }
    *(_QWORD *)(v17 + 8) = v25;
    *(_DWORD *)(v17 + 16) = v46;
    *(_BYTE *)(v17 + 20) = v47;
    v26 = v23 + v21 + v24;
    if (v26)
    {
      v40 = 9 * (v23 + v21 + v24);
      v41 = (_DWORD *)WTF::fastMalloc((WTF *)(v40 + 4));
      v27 = v41;
      *v41 = v26;
      if ((_DWORD)v26)
        bzero(v41 + 1, 9 * ((v40 - 9) / 9uLL) + 9);
    }
    else
    {
      v27 = 0;
    }
    *(_QWORD *)(v17 + 24) = v27;
    *(_DWORD *)(v17 + 32) = v21;
    *(_DWORD *)(v17 + 36) = v22;
    *(_QWORD *)(v17 + 40) = 0;
    if (!v20 && (v19 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v19 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  }
}

uint64_t WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 8 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::toCString<char [46],JSC::Operand,char [18],JSC::DFG::Availability,char [12],JSC::CodeOrigin>(uint64_t *a1, unsigned int *a2, JSC::DFG::Availability *a3, JSC::CodeOrigin *a4)
{
  unsigned int v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  void (**v24)(WTF::StringPrintStream *__hidden);
  _BYTE *v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = off_1E3572250;
  v25 = v27;
  v26 = xmmword_199122F80;
  v27[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v24, "%s", "Live bytecode local not available: operand = ");
  v8 = *a2;
  if (a2[1] == 2)
  {
    v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v24[4])(&v24);
    WTF::PrintStream::printf(v9, "%s", "tmp");
    WTF::PrintStream::printf(v9, "%d", v8);
  }
  else
  {
    v23 = *a2;
    v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v24[4])(&v24);
    JSC::VirtualRegister::dump(&v23, v10);
  }
  v24[5]((WTF::StringPrintStream *)&v24);
  WTF::PrintStream::printf((WTF::PrintStream *)&v24, "%s", ", availability = ");
  JSC::DFG::Availability::dump(a3, (WTF::PrintStream *)&v24);
  WTF::PrintStream::printf((WTF::PrintStream *)&v24, "%s", ", origin = ");
  JSC::CodeOrigin::dump(a4, (WTF::PrintStream *)&v24);
  v24[5]((WTF::StringPrintStream *)&v24);
  v19 = v25;
  v18 = v26;
  *a1 = 0;
  if (!v19)
  {
    v22 = 0;
LABEL_9:
    WTF::fastFree(v22, v11, v12, v13, v14, v15, v16, v17);
    return;
  }
  if (v18 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197CF2C00);
  }
  v20 = WTF::fastMalloc((WTF *)(v18 + 17));
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v18;
  *a1 = v20;
  v21 = v20 + 16;
  memcpy((void *)(v20 + 16), v19, v18);
  *(_BYTE *)(v21 + v18) = 0;
  v22 = (unint64_t)v25;
  if (v25 != v27)
    goto LABEL_9;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::exitValueForAvailability(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  BOOL v105;
  int v106;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  JSC::DFG::Graph *v134;
  JSC::DFG::Node *v135;
  const char *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  _QWORD *v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  _BYTE v149[9];
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  if (a5 != 7)
  {
    switch((char)a5)
    {
      case 0:
        goto LABEL_2;
      case 1:
        v144 = 5;
        goto LABEL_101;
      case 2:
        v144 = 6;
        goto LABEL_101;
      case 3:
        v144 = 7;
        goto LABEL_101;
      case 4:
      case 5:
      case 6:
        v144 = 4;
LABEL_101:
        v149[0] = v144;
        *(_QWORD *)&v149[1] = HIDWORD(a5);
        break;
      default:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x59D3, "ExitValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::exitValueForAvailability(StackmapArgumentList &, const HashMap<Node *, ExitTimeObjectMaterialization *> &, Availability)", "Invalid flush format");
        __break(0xC471u);
        JUMPOUT(0x197CF3514);
    }
    return *(_QWORD *)v149;
  }
LABEL_2:
  if (a4 < 2)
  {
    *(_QWORD *)&v149[1] = 0;
    v149[0] = 1;
    return *(_QWORD *)v149;
  }
  v147 = a4;
  v8 = *(unsigned __int16 *)(a4 + 18);
  if (v8 <= 0x115)
  {
    if (v8 >= 3)
      goto LABEL_8;
    v114 = **(_QWORD **)(a4 + 72);
    v115 = 3;
LABEL_90:
    v149[0] = v115;
    *(_QWORD *)&v149[1] = v114;
    return *(_QWORD *)v149;
  }
  if (*(unsigned __int16 *)(a4 + 18) > 0x15Bu)
  {
    if (v8 == 355 || v8 - 348 < 5)
      goto LABEL_73;
    if (v8 == 380)
    {
      *(_QWORD *)&v149[1] = 0;
      v149[0] = 1;
      return 1;
    }
  }
  else
  {
    v104 = v8 - 278;
    v105 = v104 > 0xC;
    v106 = (1 << v104) & 0x15F1;
    if (!v105 && v106 != 0)
    {
LABEL_73:
      if (a3)
      {
        v108 = *(_DWORD *)(a3 - 8);
        v109 = (a4 + ~(a4 << 32)) ^ ((a4 + ~(a4 << 32)) >> 22);
        v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
        v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
        v112 = v108 & ((v111 >> 31) ^ v111);
        v113 = *(_QWORD *)(a3 + 16 * v112);
        if (v113 == a4)
        {
LABEL_75:
          v114 = *(_QWORD *)(a3 + 16 * v112 + 8);
LABEL_76:
          v115 = 8;
          goto LABEL_90;
        }
        v146 = 1;
        while (v113)
        {
          v112 = ((_DWORD)v112 + v146) & v108;
          v113 = *(_QWORD *)(a3 + 16 * v112);
          ++v146;
          if (v113 == a4)
            goto LABEL_75;
        }
      }
      v114 = 0;
      goto LABEL_76;
    }
  }
LABEL_8:
  v9 = *(_QWORD *)(a1 + 27912);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (a4 + ~(a4 << 32)) ^ ((a4 + ~(a4 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 24 * v14);
    if (v15 == a4)
    {
LABEL_13:
      v17 = v9 + 24 * v14;
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v17 + 16);
        v20 = *(_QWORD *)(a1 + 28168);
        if (v20 == v19)
          goto LABEL_19;
        v21 = *(_QWORD *)(*(_QWORD *)a1 + 784);
        v22 = *(unsigned int *)(v20 + 8);
        v23 = *(_DWORD *)(v21 + 20);
        if (v23 <= v22)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF351CLL);
        }
        v24 = *(unsigned int *)(v19 + 8);
        if (v23 <= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF3524);
        }
        v25 = *(_QWORD *)(v21 + 8);
        v26 = v25 + 32 * v22;
        v27 = v25 + 32 * v24;
        if (*(_DWORD *)(v26 + 24) > *(_DWORD *)(v27 + 24) && *(_DWORD *)(v26 + 28) < *(_DWORD *)(v27 + 28))
        {
LABEL_19:
          v148 = v18;
          v149[0] = 2;
          v28 = 1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = (v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 24 * v14);
        ++v16;
        if (v15 == a4)
          goto LABEL_13;
      }
    }
  }
  v31 = *(_QWORD *)(a1 + 27928);
  if (v31)
  {
    v32 = *(_DWORD *)(v31 - 8);
    v33 = (a4 + ~(a4 << 32)) ^ ((a4 + ~(a4 << 32)) >> 22);
    v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
    v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
    v36 = v32 & ((v35 >> 31) ^ v35);
    v37 = *(_QWORD *)(v31 + 24 * v36);
    if (v37 == a4)
    {
LABEL_28:
      v39 = v31 + 24 * v36;
      v18 = *(_QWORD *)(v39 + 8);
      if (v18)
      {
        v40 = *(_QWORD *)(v39 + 16);
        v41 = *(_QWORD *)(a1 + 28168);
        if (v41 == v40)
          goto LABEL_102;
        v42 = *(_QWORD *)(*(_QWORD *)a1 + 784);
        v43 = *(unsigned int *)(v41 + 8);
        v44 = *(_DWORD *)(v42 + 20);
        if (v44 <= v43)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF352CLL);
        }
        v45 = *(unsigned int *)(v40 + 8);
        if (v44 <= v45)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF3534);
        }
        v46 = *(_QWORD *)(v42 + 8);
        v47 = v46 + 32 * v43;
        v48 = v46 + 32 * v45;
        if (*(_DWORD *)(v47 + 24) > *(_DWORD *)(v48 + 24) && *(_DWORD *)(v47 + 28) < *(_DWORD *)(v48 + 28))
        {
LABEL_102:
          v148 = v18;
          v28 = 2;
          v149[0] = 2;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v38 = 1;
      while (v37)
      {
        v36 = (v36 + v38) & v32;
        v37 = *(_QWORD *)(v31 + 24 * v36);
        ++v38;
        if (v37 == a4)
          goto LABEL_28;
      }
    }
  }
  v49 = *(_QWORD *)(a1 + 27920);
  if (v49)
  {
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (a4 + ~(a4 << 32)) ^ ((a4 + ~(a4 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 24 * v54);
    if (v55 == a4)
    {
LABEL_39:
      v57 = v49 + 24 * v54;
      v58 = *(_QWORD *)(v57 + 8);
      if (v58)
      {
        v59 = *(_QWORD *)(v57 + 16);
        v60 = *(_QWORD *)(a1 + 28168);
        if (v60 == v59)
        v61 = *(_QWORD *)(*(_QWORD *)a1 + 784);
        v62 = *(unsigned int *)(v60 + 8);
        v63 = *(_DWORD *)(v61 + 20);
        if (v63 <= v62)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF353CLL);
        }
        v64 = *(unsigned int *)(v59 + 8);
        if (v63 <= v64)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF3544);
        }
        v65 = *(_QWORD *)(v61 + 8);
        v66 = v65 + 32 * v62;
        v67 = v65 + 32 * v64;
        if (*(_DWORD *)(v66 + 24) > *(_DWORD *)(v67 + 24) && *(_DWORD *)(v66 + 28) < *(_DWORD *)(v67 + 28))
      }
    }
    else
    {
      v56 = 1;
      while (v55)
      {
        v54 = (v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 24 * v54);
        ++v56;
        if (v55 == a4)
          goto LABEL_39;
      }
    }
  }
  v68 = *(_QWORD *)(a1 + 27944);
  if (v68)
  {
    v69 = *(_DWORD *)(v68 - 8);
    v70 = (a4 + ~(a4 << 32)) ^ ((a4 + ~(a4 << 32)) >> 22);
    v71 = 9 * ((v70 + ~(v70 << 13)) ^ ((v70 + ~(v70 << 13)) >> 8));
    v72 = (v71 ^ (v71 >> 15)) + ~((v71 ^ (v71 >> 15)) << 27);
    v73 = v69 & ((v72 >> 31) ^ v72);
    v74 = *(_QWORD *)(v68 + 24 * v73);
    if (v74 == a4)
    {
LABEL_50:
      v76 = v68 + 24 * v73;
      v18 = *(_QWORD *)(v76 + 8);
      if (v18)
      {
        v77 = *(_QWORD *)(v76 + 16);
        v78 = *(_QWORD *)(a1 + 28168);
        if (v78 == v77)
          goto LABEL_104;
        v79 = *(_QWORD *)(*(_QWORD *)a1 + 784);
        v80 = *(unsigned int *)(v78 + 8);
        v81 = *(_DWORD *)(v79 + 20);
        if (v81 <= v80)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF354CLL);
        }
        v82 = *(unsigned int *)(v77 + 8);
        if (v81 <= v82)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF3554);
        }
        v83 = *(_QWORD *)(v79 + 8);
        v84 = v83 + 32 * v80;
        v85 = v83 + 32 * v82;
        if (*(_DWORD *)(v84 + 24) > *(_DWORD *)(v85 + 24) && *(_DWORD *)(v84 + 28) < *(_DWORD *)(v85 + 28))
        {
LABEL_104:
          v148 = v18;
          v149[0] = 2;
          v28 = 5;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v75 = 1;
      while (v74)
      {
        v73 = (v73 + v75) & v69;
        v74 = *(_QWORD *)(v68 + 24 * v73);
        ++v75;
        if (v74 == a4)
          goto LABEL_50;
      }
    }
  }
  v86 = *(_QWORD *)(a1 + 27936);
  if (v86)
  {
    v87 = *(_DWORD *)(v86 - 8);
    v88 = (a4 + ~(a4 << 32)) ^ ((a4 + ~(a4 << 32)) >> 22);
    v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
    v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
    v91 = v87 & ((v90 >> 31) ^ v90);
    v92 = *(_QWORD *)(v86 + 24 * v91);
    if (v92 == a4)
    {
LABEL_61:
      v94 = v86 + 24 * v91;
      v18 = *(_QWORD *)(v94 + 8);
      if (v18)
      {
        v95 = *(_QWORD *)(v94 + 16);
        v96 = *(_QWORD *)(a1 + 28168);
        if (v96 == v95)
          goto LABEL_67;
        v97 = *(_QWORD *)(*(_QWORD *)a1 + 784);
        v98 = *(unsigned int *)(v96 + 8);
        v99 = *(_DWORD *)(v97 + 20);
        if (v99 <= v98)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF355CLL);
        }
        v100 = *(unsigned int *)(v95 + 8);
        if (v99 <= v100)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF3564);
        }
        v101 = *(_QWORD *)(v97 + 8);
        v102 = v101 + 32 * v98;
        v103 = v101 + 32 * v100;
        if (*(_DWORD *)(v102 + 24) > *(_DWORD *)(v103 + 24) && *(_DWORD *)(v102 + 28) < *(_DWORD *)(v103 + 28))
        {
LABEL_67:
          v148 = v18;
          v149[0] = 2;
          v28 = 16;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v93 = 1;
      while (v92)
      {
        v91 = (v91 + v93) & v87;
        v92 = *(_QWORD *)(v86 + 24 * v91);
        ++v93;
        if (v92 == a4)
          goto LABEL_61;
      }
    }
  }
  v116 = *(_QWORD *)(a1 + 27960);
  if (!v116)
    goto LABEL_91;
  v117 = *(_DWORD *)(v116 - 8);
  v118 = (a4 + ~(a4 << 32)) ^ ((a4 + ~(a4 << 32)) >> 22);
  v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
  v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
  v121 = v117 & ((v120 >> 31) ^ v120);
  v122 = *(_QWORD *)(v116 + 24 * v121);
  if (v122 != a4)
  {
    v123 = 1;
    while (v122)
    {
      v121 = (v121 + v123) & v117;
      v122 = *(_QWORD *)(v116 + 24 * v121);
      ++v123;
      if (v122 == a4)
        goto LABEL_82;
    }
LABEL_91:
    v134 = *(JSC::DFG::Graph **)a1;
    v135 = *(JSC::DFG::Node **)(a1 + 28224);
    WTF::toCString<char [29],JSC::DFG::Node *>((uint64_t *)v149, (uint64_t *)&v147);
    if (*(_QWORD *)v149)
      v136 = (const char *)(*(_QWORD *)v149 + 16);
    else
      v136 = 0;
    JSC::DFG::Graph::logAssertionFailure(v134, v135, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5A0D, "ExitValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::exitValueForNode(StackmapArgumentList &, const HashMap<Node *, ExitTimeObjectMaterialization *> &, Node *)", v136);
    WTF::CString::~CString((WTF::CString *)v149, v137, v138, v139, v140, v141, v142, v143);
    __break(0xC471u);
    JUMPOUT(0x197CF33ACLL);
  }
LABEL_82:
  v124 = v116 + 24 * v121;
  v18 = *(_QWORD *)(v124 + 8);
  if (!v18)
    goto LABEL_91;
  v125 = *(_QWORD *)(v124 + 16);
  v126 = *(_QWORD *)(a1 + 28168);
  if (v126 != v125)
  {
    v127 = *(_QWORD *)(*(_QWORD *)a1 + 784);
    v128 = *(unsigned int *)(v126 + 8);
    v129 = *(_DWORD *)(v127 + 20);
    if (v129 <= v128)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF356CLL);
    }
    v130 = *(unsigned int *)(v125 + 8);
    if (v129 <= v130)
    {
      __break(0xC471u);
      JUMPOUT(0x197CF3574);
    }
    v131 = *(_QWORD *)(v127 + 8);
    v132 = v131 + 32 * v128;
    v133 = v131 + 32 * v130;
    if (*(_DWORD *)(v132 + 24) <= *(_DWORD *)(v133 + 24) || *(_DWORD *)(v132 + 28) >= *(_DWORD *)(v133 + 28))
      goto LABEL_91;
  }
  v148 = v18;
  v149[0] = 2;
  v28 = 4;
LABEL_20:
  v29 = *(_DWORD *)(a2 + 8);
  v30 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)&v149[1] = v28 | (v30 << 32);
  v6 = *(_QWORD *)v149;
  if ((_DWORD)v30 == v29)
  {
    v145 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v30 + 1, (unint64_t)&v148);
    v18 = *(unsigned int *)(a2 + 12);
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = *v145;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v30) = v18;
    LODWORD(v18) = v30;
  }
  *(_DWORD *)(a2 + 12) = v18 + 1;
  return v6;
}

void WTF::toCString<char [36],JSC::DFG::Node *,char [5],JSC::DFG::AvailabilityMap>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  WTF::PrintStream *v8;
  const char *v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24[7];
  char v25;
  void (**v26)(WTF::StringPrintStream *__hidden);
  _BYTE *v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = off_1E3572250;
  v27 = v29;
  v28 = xmmword_199122F80;
  v29[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", "Could not find materialization for ");
  v6 = *a2;
  if (*a2)
  {
    v7 = *(_DWORD *)(v6 + 20);
    v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
    WTF::PrintStream::printf(v8, "%s", "D@");
    WTF::PrintStream::printf(v8, "%u", v7);
    v26[5]((WTF::StringPrintStream *)&v26);
    if ((*(_DWORD *)(v6 + 56) & 7) == 3)
    {
      v9 = "<Double>";
    }
    else
    {
      if ((*(_DWORD *)(v6 + 56) & 7) != 5)
        goto LABEL_8;
      v9 = "<Int52>";
    }
  }
  else
  {
    v9 = "-";
  }
  v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v10, "%s", v9);
  v26[5]((WTF::StringPrintStream *)&v26);
LABEL_8:
  WTF::PrintStream::printf((WTF::PrintStream *)&v26, "%s", " in ");
  v24[0] = (uint64_t *)(a3 + 24);
  v24[1] = (uint64_t *)"=>";
  v24[2] = (uint64_t *)3;
  v24[3] = (uint64_t *)", ";
  v24[4] = (uint64_t *)3;
  v24[5] = (uint64_t *)&str_90_2;
  v24[6] = (uint64_t *)1;
  v25 = 0;
  v11 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v26[4])(&v26);
  WTF::PrintStream::printf(v11, "%s", "{locals = ");
  JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a3, (uint64_t)v11);
  WTF::PrintStream::printf(v11, "%s", "; heap = ");
  WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(v24, (uint64_t)v11);
  WTF::PrintStream::printf(v11, "%s", "}");
  v26[5]((WTF::StringPrintStream *)&v26);
  v26[5]((WTF::StringPrintStream *)&v26);
  v20 = v27;
  v19 = v28;
  *a1 = 0;
  if (!v20)
  {
    v23 = 0;
LABEL_13:
    WTF::fastFree(v23, v12, v13, v14, v15, v16, v17, v18);
    return;
  }
  if (v19 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197CF3854);
  }
  v21 = WTF::fastMalloc((WTF *)(v19 + 17));
  *(_DWORD *)v21 = 1;
  *(_QWORD *)(v21 + 8) = v19;
  *a1 = v21;
  v22 = v21 + 16;
  memcpy((void *)(v21 + 16), v20, v19);
  *(_BYTE *)(v22 + v19) = 0;
  v23 = (unint64_t)v27;
  if (v27 != v29)
    goto LABEL_13;
}

uint64_t WTF::dataLog<char [22],JSC::Operands<JSC::FTL::ExitValue,WTF::FixedVector<JSC::FTL::ExitValue>>,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "        Exit values: ");
  JSC::Operands<JSC::FTL::ExitValue,WTF::FixedVector<JSC::FTL::ExitValue>>::dump(a1, (uint64_t)v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [13],WTF::PointerDump<JSC::FTL::ExitTimeObjectMaterialization>,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  unsigned __int16 *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  int **v9[5];
  char v10;
  __int128 v11;
  const void *v12;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9[0] = (int **)&v12;
    *(_QWORD *)&v11 = v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "            ");
  v5 = (unsigned __int16 *)*a1;
  if (*a1)
  {
    v12 = *a1;
    v11 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * *v5];
    v9[0] = (int **)(v5 + 8);
    v9[1] = (int **)", ";
    v9[2] = (int **)3;
    v9[3] = (int **)"";
    v9[4] = (int **)1;
    v10 = 0;
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printImpl<WTF::RawPointer,char [2],WTF::ASCIILiteral,char [2],WTF::ListDump<WTF::Vector<JSC::FTL::ExitPropertyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [2]>(v6, &v12, ":", (uint64_t)&v11, "(", v9, ")");
  }
  else
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v7, "%s", "(null)");
  }
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_QWORD *WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x11)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 16;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x11)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 16;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int i;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;

  *a1 = 0;
  if (!*a2)
    return a1;
  v4 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v4)
    return a1;
  v6 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v4)
      goto LABEL_53;
    goto LABEL_6;
  }
  if (3 * v8 <= 4 * v4)
  {
LABEL_6:
    LODWORD(v8) = 2 * v8;
    if (v8 <= 0x400)
      goto LABEL_7;
LABEL_53:
    v9 = (double)v4;
    v10 = (double)v8;
    v11 = 0.416666667;
    goto LABEL_8;
  }
LABEL_7:
  v9 = (double)v4;
  v10 = (double)v8;
  v11 = 0.604166667;
LABEL_8:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastMalloc((WTF *)((32 * v12) | 0x10));
  v14 = (_QWORD *)(v13 + 40);
  v15 = v12;
  do
  {
    *(v14 - 3) = 0;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *v14 = 0x3FFFFFFF00000000;
    v14 += 4;
    --v15;
  }
  while (v15);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v16 = *a2;
  if (!*a2)
  {
    v17 = 0;
    v18 = 0;
LABEL_17:
    v19 = v16 + 32 * v18;
    goto LABEL_18;
  }
  v18 = *(unsigned int *)(v16 - 4);
  v19 = v16 + 32 * v18;
  if (!*(_DWORD *)(v16 - 12))
  {
    v17 = v16 + 32 * v18;
    goto LABEL_17;
  }
  v17 = *a2;
  if (!(_DWORD)v18)
    goto LABEL_18;
  v34 = 32 * v18;
  v17 = *a2;
  do
  {
    v35 = *(_DWORD *)(v17 + 8);
    if (*(_QWORD *)v17)
    {
      v36 = *(_DWORD *)(v17 + 12);
    }
    else
    {
      v36 = *(_DWORD *)(v17 + 12);
      if (!(v35 | v36))
        goto LABEL_45;
    }
    if (v35)
      v37 = 1;
    else
      v37 = v36 == 0;
    if (v37)
      goto LABEL_18;
LABEL_45:
    v17 += 32;
    v34 -= 32;
  }
  while (v34);
  v17 = v19;
LABEL_18:
  if (v16)
    v16 += 32 * *(unsigned int *)(v16 - 4);
  if (v16 != v17)
  {
    while (1)
    {
      v20 = *a1;
      v21 = *a1 ? *(_DWORD *)(v20 - 8) : 0;
      v22 = 0;
      v23 = ~(*(_QWORD *)v17 << 32) + *(_QWORD *)v17;
      v24 = (v23 ^ (v23 >> 22)) + ~((v23 ^ (v23 >> 22)) << 13);
      v25 = (9 * (v24 ^ (v24 >> 8))) ^ ((9 * (v24 ^ (v24 >> 8))) >> 15);
      for (i = *(_DWORD *)(v17 + 12)
              + *(_DWORD *)(v17 + 8)
              + (((v25 + ~(v25 << 27)) >> 31) ^ (v25 + ~((_DWORD)v25 << 27))); ; i = v22 + v27)
      {
        v27 = i & v21;
        v28 = v20 + 32 * v27;
        if (!*(_QWORD *)v28 && !*(_QWORD *)(v28 + 8))
          break;
        ++v22;
      }
      v29 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)v28 = *(_OWORD *)v17;
      *(_OWORD *)(v28 + 16) = v29;
      v30 = v17 + 32;
      v17 = v19;
      if (v30 != v19)
        break;
LABEL_38:
      if (v17 == v16)
        return a1;
    }
    v17 = v30;
    while (2)
    {
      v31 = *(_DWORD *)(v17 + 8);
      if (*(_QWORD *)v17)
      {
        v32 = *(_DWORD *)(v17 + 12);
      }
      else
      {
        v32 = *(_DWORD *)(v17 + 12);
        if (!(v31 | v32))
          goto LABEL_31;
      }
      if (v31)
        v33 = 1;
      else
        v33 = v32 == 0;
      if (v33)
        goto LABEL_38;
LABEL_31:
      v17 += 32;
      if (v17 == v19)
      {
        v17 = v19;
        goto LABEL_38;
      }
      continue;
    }
  }
  return a1;
}

uint64_t **JSC::FTL::`anonymous namespace'::LowerDFGToB3::buildExitArguments(JSC::FTL::OSRExitDescriptor *,JSC::CodeOrigin,WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::FTL::FormattedValue,unsigned int)::{lambda(JSC::DFG::Availability)#1}::operator()(uint64_t **result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  __int16 v21;
  uint64_t v22;
  char v23;
  uint64_t v24[5];

  if ((a3 == 7 || a3 == 0) && a2 >= 2)
  {
    v24[3] = v8;
    v24[4] = v9;
    v13 = result;
    v24[0] = a2;
    v14 = *(unsigned __int16 *)(a2 + 18);
    v15 = (v14 - 278) > 0xC || ((1 << (v14 - 22)) & 0x15F1) == 0;
    if (!v15 || ((v16 = v14 - 348, v17 = v16 > 7, v18 = (1 << v16) & 0x9F, !v17) ? (v19 = v18 == 0) : (v19 = 1), !v19))
    {
      result = (uint64_t **)WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)&v22, *result, v24, a4, a5, a6, a7, a8);
      if (v23)
      {
        v20 = (uint64_t *)(*v13[1] + 40);
        v21 = *(_WORD *)(a2 + 18);
        result = (uint64_t **)WTF::Bag<JSC::FTL::ExitTimeObjectMaterialization,WTF::RawPtrTraits<JSC::FTL::ExitTimeObjectMaterialization>,WTF::FastMalloc>::add<JSC::DFG::NodeType,JSC::CodeOrigin &>(v20, &v21, (uint64_t *)a2);
        *(_QWORD *)(v22 + 8) = result;
      }
    }
  }
  return result;
}

uint64_t WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = ~(*a3 << 32) + *a3;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (_QWORD *)(v11 + 16 * v18);
  v20 = *v19;
  if (*v19)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v28 = 0;
        v27 = v11 + 16 * v31;
        goto LABEL_12;
      }
      if (v20 == -1)
        v29 = v19;
      v18 = (v18 + v30) & v13;
      v19 = (_QWORD *)(v11 + 16 * v18);
      v20 = *v19;
      ++v30;
    }
    while (*v19);
    if (v29)
    {
      *v29 = 0;
      v29[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v19 = v29;
    }
  }
  *v19 = v14;
  v19[1] = 0;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_11;
LABEL_27:
    result = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, (unint64_t)v19, (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = (_QWORD *)result;
    v23 = *a2;
    if (*a2)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
    goto LABEL_11;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_27;
LABEL_11:
  v27 = v23 + 16 * v26;
  v28 = 1;
LABEL_12:
  *(_QWORD *)v10 = v19;
  *(_QWORD *)(v10 + 8) = v27;
  *(_BYTE *)(v10 + 16) = v28;
  return result;
}

uint64_t WTF::Bag<JSC::FTL::ExitTimeObjectMaterialization,WTF::RawPtrTraits<JSC::FTL::ExitTimeObjectMaterialization>,WTF::FastMalloc>::add<JSC::DFG::NodeType,JSC::CodeOrigin &>(uint64_t *a1, __int16 *a2, uint64_t *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v13 = WTF::fastMalloc((WTF *)0x28);
  v14 = *a2;
  v15 = *a3;
  if ((*a3 & 1) != 0)
  {
    v17 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v18 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
        ? (v19 = (_DWORD)v18 == -1)
        : (v19 = 1),
          v19))
    {
      v20 = 2;
    }
    else if (v18 >> 28)
    {
      v26 = v18;
      v27 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v27 = v17;
      *(_DWORD *)(v27 + 8) = v26;
      v20 = 1;
      v17 = v27;
    }
    else
    {
      v20 = v17;
      v17 = v18 << 36;
    }
    v15 = v17 | v20;
  }
  *(_WORD *)v13 = v14;
  if ((v15 & 1) != 0)
  {
    v21 = v15 & 0xFFFFFFFF8;
    v22 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v23 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v29 = v15 & 0xFFFFFFFF8;
      v28 = WTF::fastMalloc((WTF *)0x10);
      v21 = v29;
      *(_QWORD *)v28 = v22;
      *(_DWORD *)(v28 + 8) = v23;
      v25 = 1;
      v22 = v28;
    }
    else
    {
      v25 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v22 = v23 << 36;
    }
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 8) = v22 | v25;
    if (v21)
      WTF::fastFree(v21, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 8) = v15;
  }
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 32) = *a1;
  *a1 = v13;
  return v13;
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;

  v10 = *a1;
  if (!*a1)
  {
    LODWORD(v11) = 0;
    v12 = 0;
    goto LABEL_3;
  }
  LODWORD(v11) = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!(_DWORD)v11)
  {
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v13 = (_DWORD)v11 << (6 * v12 >= (2 * v11));
LABEL_4:
  v14 = WTF::fastZeroedMalloc(16 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  v22 = 0;
  if ((_DWORD)v11)
  {
    v11 = v11;
    v24 = (__n128 *)v10;
    do
    {
      if (v24->n128_u64[0] + 1 >= 2)
      {
        v26 = v24;
        WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(*a1, v24);
        v24 = v26;
        if (v26 == (__n128 *)a2)
          v22 = v25;
      }
      ++v24;
      --v11;
    }
    while (v11);
    goto LABEL_14;
  }
  result = 0;
  if (v10)
  {
LABEL_14:
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

__n128 WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::ExitTimeObjectMaterialization *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::ExitTimeObjectMaterialization *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(uint64_t a1, __n128 *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  __n128 result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(a2->n128_u64[0] << 32) + a2->n128_u64[0];
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = *a2;
  *(__n128 *)(a1 + 16 * v8) = *a2;
  return result;
}

uint64_t WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::get(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 24 * v6);
    if (v7 == a2)
    {
      return *(_QWORD *)(result + 24 * v6 + 8);
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = (v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 24 * v6);
        ++v8;
        if (v7 == a2)
          return *(_QWORD *)(result + 24 * v6 + 8);
      }
      return 0;
    }
  }
  return result;
}

BOOL JSC::FTL::`anonymous namespace'::LowerDFGToB3::isValid(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a2)
    return 0;
  v4 = a1[3521];
  if (v4 == a3)
    return 1;
  v5 = *(_QWORD *)(*a1 + 784);
  v6 = *(unsigned int *)(v4 + 8);
  v7 = *(_DWORD *)(v5 + 20);
  if (v7 <= v6 || (v8 = *(unsigned int *)(a3 + 8), v7 <= v8))
  {
    __break(0xC471u);
    JUMPOUT(0x197CF45C0);
  }
  v9 = *(_QWORD *)(v5 + 8);
  v10 = v9 + 32 * v6;
  v11 = v9 + 32 * v8;
  if (*(_DWORD *)(v10 + 24) <= *(_DWORD *)(v11 + 24))
    return 0;
  return *(_DWORD *)(v10 + 28) < *(_DWORD *)(v11 + 28);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::exitArgument(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  LOBYTE(v10[0]) = 2;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)((char *)v10 + 1) = (v4 << 32) | 3;
  v5 = v10[0];
  if ((_DWORD)v4 == v3)
  {
    v8 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v4 + 1, (unint64_t)&v9);
    v6 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = *v8;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a2;
    LODWORD(v6) = v4;
  }
  *(_DWORD *)(a1 + 12) = v6 + 1;
  return v5;
}

void WTF::toCString<char [29],JSC::DFG::Node *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  WTF::PrintStream *v6;
  const char *v7;
  WTF::PrintStream *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (**v21)(WTF::StringPrintStream *__hidden);
  _BYTE *v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = off_1E3572250;
  v22 = v24;
  v23 = xmmword_199122F80;
  v24[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v21, "%s", "Cannot find value for node: ");
  v4 = *a2;
  if (*a2)
  {
    v5 = *(_DWORD *)(v4 + 20);
    v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v21[4])(&v21);
    WTF::PrintStream::printf(v6, "%s", "D@");
    WTF::PrintStream::printf(v6, "%u", v5);
    v21[5]((WTF::StringPrintStream *)&v21);
    if ((*(_DWORD *)(v4 + 56) & 7) == 3)
    {
      v7 = "<Double>";
    }
    else
    {
      if ((*(_DWORD *)(v4 + 56) & 7) != 5)
        goto LABEL_8;
      v7 = "<Int52>";
    }
  }
  else
  {
    v7 = "-";
  }
  v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v21[4])(&v21);
  WTF::PrintStream::printf(v8, "%s", v7);
  v21[5]((WTF::StringPrintStream *)&v21);
LABEL_8:
  v21[5]((WTF::StringPrintStream *)&v21);
  v17 = v22;
  v16 = v23;
  *a1 = 0;
  if (!v17)
  {
    v20 = 0;
LABEL_13:
    WTF::fastFree(v20, v9, v10, v11, v12, v13, v14, v15);
    return;
  }
  if (v16 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197CF4868);
  }
  v18 = WTF::fastMalloc((WTF *)(v16 + 17));
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v16;
  *a1 = v18;
  v19 = v18 + 16;
  memcpy((void *)(v18 + 16), v17, v16);
  *(_BYTE *)(v19 + v16) = 0;
  v20 = (unint64_t)v22;
  if (v22 != v24)
    goto LABEL_13;
}

uint64_t JSC::Operands<JSC::FTL::ExitValue,WTF::FixedVector<JSC::FTL::ExitValue>>::dump(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  char *v7;
  JSC::FTL::ExitValue *v8;
  int v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  unsigned int v14;
  unsigned int *v15;
  char *v16;
  JSC::FTL::ExitValue *v17;
  int v18;
  WTF::PrintStream *v19;
  unint64_t j;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  JSC::FTL::ExitValue *v25;
  int v26;
  WTF::PrintStream *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[4];
  char v34;

  v3 = result;
  v33[0] = " ";
  v33[1] = 2;
  v33[2] = "";
  v33[3] = 1;
  v34 = 0;
  v4 = *(unsigned int *)(result + 8);
  v5 = v4 - 1;
  v32 = v4 - 1;
  if ((_DWORD)v4)
  {
    do
    {
      v6 = *(unsigned int **)v3;
      if (**(_DWORD **)v3 <= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF4B48);
      }
      v7 = (char *)v6 + 9 * v5;
      v9 = v7[4];
      v8 = (JSC::FTL::ExitValue *)(v7 + 4);
      if (v9)
      {
        v30 = "arg";
        v31 = 4;
        v28 = ":";
        v29 = 2;
        if (*v6 <= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF4BA8);
        }
        v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::FTL::ExitValue>(v10, (uint64_t)v33, (uint64_t)&v30, &v32, (uint64_t)&v28, v8);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v5 = v32;
      }
      v11 = v5--;
      v32 = v5;
    }
    while (v11);
  }
  v32 = 0;
  v12 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v12)
  {
    for (i = 0; i < v12; v32 = i)
    {
      v14 = i + *(_DWORD *)(v3 + 8);
      v15 = *(unsigned int **)v3;
      if (**(_DWORD **)v3 <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF4B68);
      }
      v16 = (char *)v15 + 9 * (i + *(_DWORD *)(v3 + 8));
      v18 = v16[4];
      v17 = (JSC::FTL::ExitValue *)(v16 + 4);
      if (v18)
      {
        v30 = "loc";
        v31 = 4;
        v28 = ":";
        v29 = 2;
        if (*v15 <= v14)
        {
LABEL_30:
          __break(0xC471u);
          JUMPOUT(0x197CF4B28);
        }
        v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::FTL::ExitValue>(v19, (uint64_t)v33, (uint64_t)&v30, &v32, (uint64_t)&v28, v17);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        i = v32;
        v12 = *(unsigned int *)(v3 + 12);
      }
      ++i;
    }
  }
  for (j = 0; ; ++j)
  {
    v32 = j;
    v21 = *(unsigned int **)v3;
    v22 = *(_QWORD *)v3 ? *v21 : 0;
    v23 = *(unsigned int *)(v3 + 12) + (unint64_t)*(unsigned int *)(v3 + 8);
    if (j >= v22 - v23)
      break;
    if (*v21 <= (int)v23 + (int)j)
      goto LABEL_30;
    v24 = (char *)v21 + 9 * (v23 + j);
    v26 = v24[4];
    v25 = (JSC::FTL::ExitValue *)(v24 + 4);
    if (v26)
    {
      v30 = "tmp";
      v31 = 4;
      v28 = ":";
      v29 = 2;
      if (*v21 <= (int)v23 + (int)j)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF4B88);
      }
      v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::FTL::ExitValue>(v27, (uint64_t)v33, (uint64_t)&v30, &v32, (uint64_t)&v28, v25);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      j = v32;
    }
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,JSC::FTL::ExitValue>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, JSC::FTL::ExitValue *a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  char v41;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v39, v16);
    }
    else
    {
      v24 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      v39 = v24;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v39, v22);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v39 = v25;
      v40 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v39);
    if (v40 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v26 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v26)
  {
    v30 = v27 - 1;
    if (!v27)
      v30 = 0;
    WTF::StringImpl::utf8ForCharacters(v26, v30, (uint64_t)&v39, v29);
  }
  else
  {
    v31 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = 0;
    v39 = v31;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v28, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v32 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v32)
  {
    v36 = v33 - 1;
    if (!v33)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(v32, v36, (uint64_t)&v39, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v39 = v37;
    v40 = 0;
  }
  WTF::printExpectedCStringHelper(v34, "StringView", &v39);
  if (v40 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v41, &v39);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  return JSC::FTL::ExitValue::dumpInContext(a6, a1, 0);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::blessSpeculation(JSC::B3::CheckValue *,JSC::ExitKind,JSC::FTL::FormattedValue,JSC::MethodOfGettingAValueProfile const&,JSC::DFG::NodeOrigin)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::blessSpeculation(JSC::B3::CheckValue *,JSC::ExitKind,JSC::FTL::FormattedValue,JSC::MethodOfGettingAValueProfile const&,JSC::DFG::NodeOrigin)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  if ((v10 & 1) != 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::blessSpeculation(JSC::B3::CheckValue *,JSC::ExitKind,JSC::FTL::FormattedValue,JSC::MethodOfGettingAValueProfile const&,JSC::DFG::NodeOrigin)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25[2];

  v9 = *(_QWORD **)(a1 + 24);
  JSC::FTL::OSRExitDescriptor::prepareOSRExitHandle(*(_QWORD *)(a1 + 16), v9, *(unsigned __int8 *)(a1 + 32), a1 + 40, a3, *(unsigned int *)(a1 + 64), 0, a8, (uint64_t *)v25);
  v10 = *(unsigned int **)v25;
  JSC::FTL::OSRExitHandle::emitExitThunk(*(unsigned int **)v25, (uint64_t)v9, a2, v11, v12, v13, v14, v15);
  *(_QWORD *)v25 = 0;
  if (v10)
  {
    do
    {
      v23 = __ldaxr(v10);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v10));
    if (!v24)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  void *v34;

  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v13 = 0xFF000F4500000000;
  else
    v13 = 0xFF000F4100000000;
  v14 = *(unsigned int **)(a1 + 16);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = WTF::fastMalloc((WTF *)0x28);
  v24 = v16;
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)v16 = &off_1E3575668;
  *(_DWORD *)(v16 + 16) = i;
  *(_QWORD *)(v16 + 20) = v13;
  if (v14)
  {
    do
      v25 = __ldaxr(v14);
    while (__stlxr(v25 + 1, v14));
  }
  *(_QWORD *)(v16 + 32) = v14;
  v26 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v26 == *(_DWORD *)(a2 + 240))
  {
    v30 = v26 + (v26 >> 2);
    if (v30 >= 0x10)
      v31 = v30 + 1;
    else
      v31 = 16;
    if (v31 <= v26 + 1)
      v32 = v26 + 1;
    else
      v32 = v31;
    if (v32 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v33 = *(const void **)(a2 + 232);
    v34 = (void *)WTF::fastMalloc((WTF *)(8 * v32));
    *(_DWORD *)(a2 + 240) = v32;
    *(_QWORD *)(a2 + 232) = v34;
    memcpy(v34, v33, 8 * v26);
    if (v33)
    {
      if (*(const void **)(a2 + 232) == v33)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v33, v17, v18, v19, v20, v21, v22, v23);
    }
    v26 = *(unsigned int *)(a2 + 244);
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v26);
  }
  else
  {
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v26);
  }
  *v27 = v24;
  *(_DWORD *)(a2 + 244) = v26 + 1;
  if (v14)
  {
    do
    {
      v28 = __ldaxr(v14);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v14));
    if (!v29)
    {
      atomic_store(1u, v14);
      WTF::fastFree((unint64_t)v14, v17, v18, v19, v20, v21, v22, v23);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::lower(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  JSC::ExecutableAllocator *v5;
  unint64_t v6;
  int v8;
  int v9;
  unsigned int v10;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (JSC::ExecutableAllocator *)a2[23];
  v6 = (unint64_t)v5 + (v3 - v4);
  if ((unint64_t)v5 <= v6 && (unint64_t)v5 + a2[1] >= v6)
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (v8 < 4)
      v9 = 0;
    else
      v9 = *(_DWORD *)((v8 & 0xFFFFFFFC) + a2[3] - 4);
    v10 = v8 - v9;
    JSC::ARM64Assembler::linkJump(v5, &v10, v6);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WTF::dataLog<char [17],JSC::DFG::BasicBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Compiling block ");
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "#");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)(a1 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void _ZN3JSC3DFG10clobberizeIZNS_3FTL12_GLOBAL__N_112LowerDFGToB312compileBlockEPNS0_10BasicBlockEEUlDpT_E_ZNS4_12compileBlockES6_EUlS8_E0_ZNS4_12compileBlockES6_EUlS8_E1_ZNS4_12compileBlockES6_EUlvE_EEvRNS0_5GraphEPNS0_4NodeERKT_RKT0_RKT1_RKT2_(JSC::DFG::Graph *this, JSC::DFG::Node *a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t *v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v126;
  int v129;
  int v130;
  BOOL v131;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  BOOL v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v157;
  int v158;
  unsigned int v159;
  BOOL v160;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  uint64_t v166;
  unsigned int v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  const char *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v209;
  __int128 v210;

  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v11 = *((unsigned __int16 *)a2 + 9);
    if (v11 > 0xC9)
    {
      if (v11 - 202 > 0x3E || ((1 << (v11 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v13 = v11 - 333;
        if (v13 > 0x3A || ((1 << v13) & 0x7A8000000000003) == 0)
        {
LABEL_39:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x197CF57D8);
        }
      }
      goto LABEL_16;
    }
    v14 = v11 - 101;
    if (v11 - 101 > 0x3E)
      goto LABEL_38;
    if (((1 << v14) & 0x7E0070000000000FLL) != 0)
      goto LABEL_16;
    if (((1 << v14) & 0x18000000000) == 0)
    {
LABEL_38:
      if (v11 - 92 >= 2)
        goto LABEL_39;
      goto LABEL_16;
    }
  }
  v15 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x4B:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x64:
    case 0x6D:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xD6:
    case 0xDA:
    case 0xDD:
    case 0xDE:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x113:
    case 0x116:
    case 0x117:
    case 0x118:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x123:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x144:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x153:
    case 0x154:
    case 0x157:
    case 0x158:
    case 0x159:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x164:
    case 0x165:
    case 0x166:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
    case 0x17C:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x190:
    case 0x191:
    case 0x192:
    case 0x193:
    case 0x194:
    case 0x196:
    case 0x197:
    case 0x198:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19E:
    case 0x19F:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AD:
    case 0x1AE:
    case 0x1AF:
    case 0x1B0:
      return;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x63:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      break;
    case 0xF:
      v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      v102 = v53;
      do
      {
        v103 = v102;
        v102 = (_QWORD *)*v102;
      }
      while (v102);
      if (v103 != v53)
      {
        *v53 = v103;
        v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      }
      v104 = v53;
      do
      {
        v55 = v104;
        v104 = (_QWORD *)*v104;
      }
      while (v104);
      goto LABEL_178;
    case 0x10:
      v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      v99 = v53;
      do
      {
        v100 = v99;
        v99 = (_QWORD *)*v99;
      }
      while (v99);
      if (v100 != v53)
      {
        *v53 = v100;
        v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      }
      v101 = v53;
      do
      {
        v55 = v101;
        v101 = (_QWORD *)*v101;
      }
      while (v101);
      goto LABEL_178;
    case 0x1C:
      v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      v54 = v53;
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
LABEL_178:
      if (v55 != v53)
        *v53 = v55;
      return;
    case 0x29:
      v96 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26;
      goto LABEL_222;
    case 0x2A:
    case 0x142:
    case 0x143:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)a2 + 30);
      goto LABEL_52;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v16 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v16)
      {
        case 0x1A:
          v17 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v18 = 0x68000000000000;
          break;
        case 0x1C:
          v17 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v18 = 0x70000000000000;
          break;
        case 0x1B:
          v17 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v18 = 0x6C000000000000;
          break;
        default:
          goto LABEL_16;
      }
LABEL_121:
      if (v17 == v18)
        return;
      break;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
        goto LABEL_35;
      break;
    case 0x3F:
      v97 = word_1ECF4C630;
      v98 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2;
      goto LABEL_223;
    case 0x40:
    case 0x42:
    case 0x44:
      v33 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v33 == 49 || (_DWORD)v33 == 52)
          return;
LABEL_88:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197CF5B14);
      }
      if ((_DWORD)v33)
      {
        if ((_DWORD)v33 == 1)
          return;
        goto LABEL_88;
      }
      break;
    case 0x41:
      v61 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v57 = v61 > 0x34;
      v62 = (1 << v61) & 0x12000000000002;
      if (!v57 && v62 != 0)
        return;
      break;
    case 0x46:
      v48 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v48 != 1 && (_DWORD)v48 != 49)
        break;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v24 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0xC4000000000000;
      goto LABEL_240;
    case 0x52:
    case 0x53:
      v35 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v35 > 0x34)
        goto LABEL_61;
      if (((1 << v35) & 0x1200001C000002) != 0)
        return;
      if (v35)
      {
LABEL_61:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197CF590CLL);
      }
      break;
    case 0x5C:
    case 0x5D:
      v39 = *((_DWORD *)a2 + 18);
      v40 = *((_DWORD *)a2 + 14) & 7;
      if (v40 >= 2 && v40 - 3 >= 3)
      {
        if (v40 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF66BCLL);
        }
        __break(0xC471u);
        JUMPOUT(0x197CF6948);
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_16;
        case 3u:
        case 6u:
          return;
        case 5u:
          v97 = word_1ECF4C630;
          v98 = __CFADD__(BYTE2(v39) - 5, 2);
          goto LABEL_223;
        case 7u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v188 = *((_DWORD *)a2 + 6);
          v189 = *((_DWORD *)this + 41);
          if (v189 <= v188)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF6B5CLL);
          }
          if (v189 <= v188 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF678CLL);
          }
          return;
        case 8u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v190 = *((_DWORD *)a2 + 6);
          v191 = *((_DWORD *)this + 41);
          if (v191 <= v190)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF6B64);
          }
          if (v191 <= v190 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF67C0);
          }
          return;
        case 9u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v194 = *((_DWORD *)a2 + 6);
          v195 = *((_DWORD *)this + 41);
          if (v195 <= v194)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF6B6CLL);
          }
          if (v195 <= v194 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF6838);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v39) < 2u)
            return;
          goto LABEL_16;
        case 0xCu:
          if (BYTE2(v39) > 1u)
            goto LABEL_16;
          v192 = *((_DWORD *)a2 + 6);
          v193 = *((_DWORD *)this + 41);
          if (v193 <= v192)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF6B74);
          }
          if (v193 <= v192 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF67ECLL);
          }
          return;
        case 0xDu:
          v196 = *((_DWORD *)a2 + 6);
          v197 = *((_DWORD *)this + 41);
          if (v197 <= v196)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF6B4CLL);
          }
          if (v197 <= v196 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF685CLL);
          }
          return;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v39 & 0x40000000) == 0)
          {
            v41 = *((_DWORD *)a2 + 6);
            v42 = *((_DWORD *)this + 41);
            if (v42 <= v41)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF6B24);
            }
            if (v42 <= v41 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF5AACLL);
            }
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x197CF6A6CLL);
        default:
          __break(0xC471u);
          JUMPOUT(0x197CF6A24);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v29 = *((_DWORD *)a2 + 6);
      v30 = *((_DWORD *)this + 41);
      if (v30 > v29)
      {
        if (v30 > v29 + 1)
        {
          if (v30 > v29 + 2)
          {
            v31 = *((_DWORD *)a2 + 18);
            v32 = *((_DWORD *)a2 + 14) & 7;
            if (v32 >= 2 && v32 - 3 >= 3)
            {
              if (v32 == 7)
              {
                __break(0xC471u);
                JUMPOUT(0x197CF65C4);
              }
              __break(0xC471u);
              JUMPOUT(0x197CF6928);
            }
            switch(*((_DWORD *)a2 + 18))
            {
              case 0u:
              case 1u:
              case 2u:
              case 4u:
              case 5u:
              case 6u:
              case 0xCu:
              case 0xDu:
              case 0x17u:
              case 0x18u:
                goto LABEL_16;
              case 3u:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
                return;
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                if (BYTE2(v31) - 5 < 0xFFFFFFFE)
                  return;
                goto LABEL_16;
              case 0xBu:
                if ((v31 & 0xFE0000) == 0)
                  return;
                goto LABEL_16;
              case 0x19u:
                JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "impossible array mode for put");
                __break(0xC471u);
                JUMPOUT(0x197CF6720);
              default:
                __break(0xC471u);
                JUMPOUT(0x197CF674CLL);
            }
          }
          __break(0xC471u);
          JUMPOUT(0x197CF6A94);
        }
        __break(0xC471u);
        JUMPOUT(0x197CF6A8CLL);
      }
      __break(0xC471u);
      JUMPOUT(0x197CF6A84);
    case 0x9C:
      v146 = *((_QWORD *)a2 + 9);
      v147 = *(unsigned int *)(v146 + 20);
      v148 = (v147 << 6) - 64;
      do
      {
        if (!v147)
          break;
        if (--v147 >= (unint64_t)*(unsigned int *)(v146 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x197CF6B14);
        }
        v149 = v148 - 64;
        v150 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v146 + 8) + v148));
        v148 = v149;
      }
      while (!v150);
      return;
    case 0x9D:
      JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
      return;
    case 0x9E:
      v123 = *((_DWORD *)a2 + 18);
      if ((v123 - 5) >= 9 && v123 != 3 && v123 != 25)
      {
        v126 = JSC::DFG::toTypedArrayType(v123);
        if (v126 == 12 || v126 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197CF6160);
        }
      }
      return;
    case 0x9F:
      v105 = *((_DWORD *)a2 + 18);
      if (v105 != 25)
      {
        v207 = JSC::DFG::toTypedArrayType(v105);
        if (v207 == 12 || v207 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197CF6B0CLL);
        }
      }
      if ((v105 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x197CF5F6CLL);
      }
      return;
    case 0xA0:
      v142 = *((unsigned __int8 *)a2 + 72);
      if (v142 != 25)
      {
        v143 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        v144 = v143 == 12 || v143 == 0;
        if (v144 && v142 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197CF6364);
        }
      }
      return;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF63B4);
      }
      return;
    case 0xA2:
      v49 = *((unsigned __int8 *)a2 + 72);
      if (v49 != 25)
      {
        v50 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        v51 = v50 == 12 || v50 == 0;
        if (v51 && v49 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197CF5C40);
        }
      }
      return;
    case 0xA3:
      v129 = *((unsigned __int8 *)a2 + 72);
      if (v129 != 25)
      {
        v130 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        v131 = v130 == 12 || v130 == 0;
        if (v131 && v129 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197CF61F4);
        }
      }
      return;
    case 0xC1:
      v56 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v57 = v56 > 0x31;
      v58 = (1 << v56) & 0x2000000200002;
      if (v57 || v58 == 0)
        break;
      v60 = *((_QWORD *)a2 + 4);
      if ((v60 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
      v17 = v60 & 0xFC000000000000;
      v18 = 0x4000000000000;
      goto LABEL_121;
    case 0xC2:
      v96 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12;
LABEL_222:
      v97 = word_1ECF4C630;
      v98 = v96 >= 3;
LABEL_223:
      if (v98 && v97 != 0)
        goto LABEL_17;
      return;
    case 0xC4:
      v140 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v140 == 11)
        return;
      if ((_DWORD)v140)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF629CLL);
      }
      break;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v19 = v15 - 202;
      if (v19 >= 0xAu || ((0x3EFu >> v19) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF6908);
      }
      v20 = dword_199124728[(__int16)v19];
      v21 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v162 = v20 + *v21;
        if (*((_DWORD *)this + 41) <= v162)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF6B1CLL);
        }
        v22 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v162);
      }
      else
      {
        v22 = &v21[2 * v20];
      }
      if ((*v22 & 0xFF00FFFFFFFFFFFFLL) == 0 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0xCE:
      v95 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v198 = *v95;
        if (*((_DWORD *)this + 41) <= v198)
        {
          __break(0xC471u);
          JUMPOUT(0x197CF6B54);
        }
        v95 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v198);
      }
      v24 = *v95 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x4000000000000;
      goto LABEL_240;
    case 0xD7:
      if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF5F9CLL);
      }
      return;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000)
      {
        break;
      }
      v17 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
      v18 = 0x54000000000000;
      goto LABEL_121;
    case 0xE1:
      v66 = *((_QWORD *)a2 + 5);
      goto LABEL_239;
    case 0xE6:
      v106 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v106 - 1) < 2)
        return;
      if ((_DWORD)v106)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197CF5FFCLL);
      }
      break;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
        return;
LABEL_35:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)a2 + 38);
LABEL_52:
      if ((v28 & 0xFC) == 0 && v27 != 0)
        goto LABEL_17;
      return;
    case 0x106:
      v107 = *((_QWORD *)a2 + 4);
      v108 = v107;
      if ((v107 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v107) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v107 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)v107)
          return;
      }
      v115 = *((unsigned __int16 *)a2 + 9);
      switch(v115)
      {
        case 267:
          goto LABEL_385;
        case 264:
          v116 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_385:
          v116 = *((_DWORD *)a2 + 21);
          break;
        default:
          v116 = *((_DWORD *)a2 + 18);
          goto LABEL_194;
      }
      LOBYTE(v116) = v116 & 0xF;
LABEL_194:
      if (v116 <= 0x19u && ((1 << v116) & 0x2A003F0) != 0)
      {
        v117 = *((unsigned int *)this + 107);
        if (v107 >= v117)
        {
          if ((_DWORD)v117)
          {
            v180 = (unsigned int *)*((_QWORD *)this + 52);
            v181 = 4 * v117;
            do
            {
              v182 = *v180;
              if (v182 < v107)
              {
                if (*((_DWORD *)this + 41) <= (v182 + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CF6A9CLL);
                }
                if ((v182 & 0x80000000) != 0)
                  v183 = COERCE__INT64((double)v182) + 0x2000000000000;
                else
                  v183 = v182 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v183, v109, v110, v111, v112, v113, v114);
              }
              ++v180;
              v181 -= 4;
            }
            while (v181);
          }
        }
        else
        {
          v118 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v118 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x197CF6A7CLL);
            }
            if ((v118 & 0x80000000) != 0)
              v119 = COERCE__INT64((double)v118) + 0x2000000000000;
            else
              v119 = v118 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v119, v109, v110, v111, v112, v113, v114);
            ++v118;
          }
          while (v108 != v118);
        }
      }
      return;
    case 0x107:
      if (*((_DWORD *)a2 + 8))
      {
        v134 = *((_QWORD *)a2 + 3);
        v135 = *((_DWORD *)this + 41);
        v98 = v135 >= v134;
        LODWORD(v136) = v135 - v134;
        if (v98)
          v136 = v136;
        else
          v136 = 0;
        v137 = *((unsigned int *)a2 + 8) - 1;
        do
        {
          if (!v136)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF6A74);
          }
          v138 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v134++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v139 = v138 == 350 || v137-- == 0;
          --v136;
        }
        while (!v139);
      }
      return;
    case 0x10A:
      v120 = *((unsigned int *)a2 + 20);
      if ((v120 & 0x80000000) != 0)
        v121 = COERCE__INT64((double)v120) + 0x2000000000000;
      else
        v121 = v120 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v121, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 0x10B:
      v67 = (uint64_t *)*((_QWORD *)a2 + 9);
      v68 = *v67;
      v69 = *(unsigned int *)(*v67 + 8);
      if ((v69 & 0x80000000) != 0)
        v70 = COERCE__INT64((double)v69) + 0x2000000000000;
      else
        v70 = v69 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v70, (uint64_t)a3, a4, a5, a6, a7, a8);
      v78 = *((unsigned __int16 *)a2 + 9);
      switch(v78)
      {
        case 267:
          goto LABEL_383;
        case 264:
          v79 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_383:
          v79 = *((_DWORD *)a2 + 21);
          break;
        default:
          v79 = *((_DWORD *)a2 + 18);
          goto LABEL_142;
      }
      LOBYTE(v79) = v79 & 0xF;
LABEL_142:
      v57 = v79 > 0x19u;
      v80 = (1 << v79) & 0x2A003F0;
      if (!v57 && v80 != 0)
      {
        v82 = *((unsigned int *)this + 107);
        if (v82 <= v69)
        {
          v210 = 0uLL;
          if ((_DWORD)v82)
          {
            v163 = 0;
            v164 = 0;
            v165 = (unsigned int *)*((_QWORD *)this + 52);
            v166 = 4 * v82;
            do
            {
              v167 = *v165;
              LODWORD(v209) = v167;
              if (v167 < v69)
              {
                if (v164 == DWORD2(v210))
                {
                  v168 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, v164 + 1, (unint64_t)&v209);
                  v163 = (unsigned int *)v210;
                  *(_DWORD *)(v210 + 4 * HIDWORD(v210)) = *v168;
                }
                else
                {
                  v163[v164] = v167;
                }
                v164 = ++HIDWORD(v210);
              }
              ++v165;
              v166 -= 4;
            }
            while (v166);
            if (v164)
            {
              v169 = v68 + 16;
              v170 = 4 * v164;
              do
              {
                v171 = *v163;
                if ((v171 & 0x80000000) != 0)
                  v172 = COERCE__INT64((double)v171) + 0x2000000000000;
                else
                  v172 = v171 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v172, v72, v73, v74, v75, v76, v77);
                if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
                  v179 = *(_QWORD *)(v169 + 8 * v171) + 0x2000000000000;
                else
                  v179 = *(_QWORD *)(v169 + 8 * v171);
                JSC::DFG::Graph::freeze((uint64_t)this, v179, v173, v174, v175, v176, v177, v178);
                ++v163;
                v170 -= 4;
              }
              while (v170);
              v163 = (unsigned int *)v210;
            }
            if (v163)
            {
              *(_QWORD *)&v210 = 0;
              DWORD2(v210) = 0;
              WTF::fastFree((unint64_t)v163, v71, v72, v73, v74, v75, v76, v77);
            }
          }
        }
        else if ((_DWORD)v69)
        {
          v83 = 0;
          v84 = v68 + 16;
          do
          {
            if ((v83 & 0x80000000) != 0)
              v85 = COERCE__INT64((double)v83) + 0x2000000000000;
            else
              v85 = v83 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v85, v72, v73, v74, v75, v76, v77);
            if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
              v92 = *(_QWORD *)(v84 + 8 * v83) + 0x2000000000000;
            else
              v92 = *(_QWORD *)(v84 + 8 * v83);
            JSC::DFG::Graph::freeze((uint64_t)this, v92, v86, v87, v88, v89, v90, v91);
            ++v83;
          }
          while (v69 != v83);
        }
      }
      return;
    case 0x10D:
      v64 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v64 == 52 || (_DWORD)v64 == 1)
        return;
      if ((_DWORD)v64)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197CF5D30);
      }
      break;
    case 0x10F:
      v152 = *((_QWORD *)a2 + 3);
      v153 = v152 & 0xFF00FFFFFFFFFFFFLL;
      v154 = v152 & 0xFC000000000000;
      if (v153)
        v155 = v154 == 0x54000000000000;
      else
        v155 = 1;
      if (!v155 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) != 0)
        return;
      break;
    case 0x115:
      v151 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v151 != 349 && v151 != 352)
        break;
      return;
    case 0x13E:
    case 0x145:
      v37 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v37 > 0x34)
        goto LABEL_73;
      if (((1 << v37) & 0x12026001400002) != 0)
        return;
      if (((1 << v37) & 0x101) == 0)
      {
LABEL_73:
        __break(0xC471u);
        JUMPOUT(0x197CF59F4);
      }
      break;
    case 0x13F:
      v66 = *((_QWORD *)a2 + 3);
LABEL_239:
      v24 = v66 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x54000000000000;
      goto LABEL_240;
    case 0x146:
      v141 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v141 == 28)
        return;
      if ((_DWORD)v141)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197CF62F8);
      }
      break;
    case 0x180:
    case 0x182:
      if ((_DWORD)v15 != 386 || (v38 = *((unsigned __int8 *)a2 + 80), v38 == 1))
      {
        v43 = BYTE2(*((_DWORD *)a2 + 18));
        switch(*((_DWORD *)a2 + 18))
        {
          case 3u:
            return;
          case 7u:
            if (v43 > 1)
              goto LABEL_16;
            v44 = *((_DWORD *)a2 + 6);
            v45 = *((_DWORD *)this + 41);
            if (v45 <= v44)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF6B34);
            }
            if (v45 <= v44 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF5B80);
            }
            return;
          case 8u:
            if (v43 > 1)
              goto LABEL_16;
            v184 = *((_DWORD *)a2 + 6);
            v185 = *((_DWORD *)this + 41);
            if (v185 <= v184)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF6B3CLL);
            }
            if (v185 <= v184 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF6650);
            }
            return;
          case 9u:
            if (v43 > 1)
              goto LABEL_16;
            v186 = *((_DWORD *)a2 + 6);
            v187 = *((_DWORD *)this + 41);
            if (v187 <= v186)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF6B44);
            }
            if (v187 <= v186 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197CF667CLL);
            }
            return;
          case 0xAu:
            if (v43 >= 2)
              goto LABEL_16;
            break;
          default:
            goto LABEL_16;
        }
        return;
      }
      if (v38 != 2)
        break;
      if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x197CF6B2CLL);
      }
      v24 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x20000000000000;
LABEL_240:
      if (v24 != v26 && v25 != 0)
        goto LABEL_17;
      return;
    case 0x195:
      v46 = *((_DWORD *)a2 + 6);
      v47 = *((_DWORD *)this + 41);
      if (v47 <= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF6AA4);
      }
      if (v47 <= v46 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF5BB8);
      }
      return;
    case 0x199:
      v93 = *((_DWORD *)a2 + 6);
      v94 = *((_DWORD *)this + 41);
      if (v94 <= v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF6AACLL);
      }
      if (v94 <= v93 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF6AB4);
      }
      if (v94 <= v93 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197CF5E3CLL);
      }
      return;
    case 0x1A0:
      v157 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
      if (!v157)
        break;
      v122 = *(_DWORD *)(v157 + 24);
LABEL_295:
      v158 = (unsigned __int16)v122;
      if ((unsigned __int16)v122 != HIWORD(v122))
      {
        v159 = HIWORD(v122);
        v160 = !v158 && v159 == 0xFFFF;
        if (v160 && word_1ECF4C630 != 0)
          goto LABEL_17;
      }
      return;
    case 0x1A1:
      v122 = *(_DWORD *)(*((_QWORD *)a2 + 9) + 48);
      goto LABEL_295;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)a2 + 74) & 1) == 0)
      {
        v36 = *((_DWORD *)a2 + 14) & 7;
        if (v36 >= 2 && v36 - 3 >= 3)
        {
          if (v36 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x197CF5990);
          }
          __break(0xC471u);
          JUMPOUT(0x197CF6968);
        }
      }
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x197CF6988);
    default:
      v210 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v15];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v210, &v209);
      if (v209)
        v199 = (const char *)(v209 + 16);
      else
        v199 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:539:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:534:39)]", v199);
      WTF::CString::~CString((WTF::CString *)&v209, v200, v201, v202, v203, v204, v205, v206);
      __break(0xC471u);
      JUMPOUT(0x197CF6A04);
  }
LABEL_16:
  if ((_BYTE)word_1ECF4C630)
LABEL_17:
    **a3 = 1;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35756B8;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

#error "197CF73B0: too big function (funcsize=0)"

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::crash(JSC::DFG::BasicBlock *,JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::crash(JSC::DFG::BasicBlock *,JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*a1, 0, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)a1[1], 1, v11, v12, v13, v14, v15);
  if (*((_QWORD *)a1 + 1))
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*((unsigned __int16 *)a1 + 8), 2, v17, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::abortWithReason((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)0xEC, v16, v17, v18, v19, v20, v21);
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::MacroAssemblerARM64::abortWithReason(unsigned int *a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)this, 16, a4, a5, a6, a7, a8);
  v16 = a1[50];
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v9, v10, v11, v12, v13, v14, v15);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = -734491104;
  a1[50] += 4;
}

uint64_t JSC::DFG::Node::arrayMode(JSC::DFG::Node *this)
{
  if (*((_WORD *)this + 9) == 146)
    return *((unsigned int *)this + 20);
  else
    return *((unsigned int *)this + 18);
}

uint64_t JSC::DFG::ArrayMode::typedArrayType(JSC::DFG::ArrayMode *this)
{
  int v1;
  uint64_t result;

  v1 = this - 14;
  result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 4;
      break;
    case 2:
      result = 6;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 7;
      break;
    case 7:
      result = 8;
      break;
    case 8:
      result = 9;
      break;
    case 9:
      result = 10;
      break;
    case 10:
      result = 11;
      break;
    case 11:
      __break(0xC471u);
      JUMPOUT(0x197D2A728);
    default:
      result = 0;
      break;
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2[50];
  if (v9 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v9 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v9) = -734491104;
  a2[50] += 4;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::safelyInvalidateAfterTermination(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  BOOL v2;
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  int v19;
  unsigned int v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;

  if ((_BYTE)qword_1ECF4C32A)
    v2 = 0;
  else
    v2 = byte_1ECF4C323 == 0;
  if (!v2 || BYTE1(qword_1ECF4C32A) != 0)
    WTF::dataLog<char [16]>("Bailing.\n");
  v4 = *((_QWORD *)this + 3528);
  v5 = *(_DWORD *)(*((_QWORD *)this + 3521) + 8);
  if (v4)
  {
    v6 = *(_DWORD *)(v4 + 20);
    v7 = *(_WORD *)(v4 + 18);
  }
  else
  {
    v7 = 433;
    v6 = -1;
  }
  v8 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E3575690;
  *(_DWORD *)(v13 + 16) = v5;
  *(_DWORD *)(v13 + 20) = v6;
  *(_QWORD *)(v13 + 24) = v4;
  *(_WORD *)(v13 + 32) = v7;
  v14 = (unsigned int *)v8[7];
  v8[7] = v13;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  result = JSC::B3::BasicBlock::appendNewControlValue(*((_QWORD *)this + 3472), *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v9, v10, v11, v12);
  v19 = *(_DWORD *)(*(_QWORD *)this + 60);
  if (v19)
  {
    v20 = v19 - 1;
    for (i = 8 * (v19 - 1); ; i -= 8)
    {
      v22 = *(_QWORD *)this;
      if (*(_DWORD *)(*(_QWORD *)this + 60) <= v20)
        break;
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 48) + i);
      if (v23)
      {
        v24 = *((_QWORD *)this + 3521);
        if (v24 == v23)
          goto LABEL_27;
        v25 = *(_QWORD *)(v22 + 784);
        v26 = *(unsigned int *)(v23 + 8);
        v27 = *(_DWORD *)(v25 + 20);
        if (v27 <= v26)
        {
          __break(0xC471u);
          JUMPOUT(0x197D2A9C0);
        }
        v28 = *(unsigned int *)(v24 + 8);
        if (v27 <= v28)
          break;
        v29 = *(_QWORD *)(v25 + 8);
        v30 = v29 + 32 * v26;
        v31 = v29 + 32 * v28;
        if (*(_DWORD *)(v30 + 24) > *(_DWORD *)(v31 + 24) && *(_DWORD *)(v30 + 28) < *(_DWORD *)(v31 + 28))
        {
LABEL_27:
          if ((_BYTE)qword_1ECF4C32A)
            v32 = 0;
          else
            v32 = byte_1ECF4C323 == 0;
          if (!v32 || BYTE1(qword_1ECF4C32A) != 0)
            result = WTF::dataLog<char [7],JSC::DFG::BasicBlock,char [18]>(v23);
          *(_BYTE *)(v23 + 15) = 0;
        }
      }
      if (--v20 == -1)
        return result;
    }
    __break(0xC471u);
    JUMPOUT(0x197D2A9B8);
  }
  return result;
}

uint64_t WTF::dataLog<char [10],JSC::DFG::Node *,char [2]>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  int v6;
  WTF::PrintStream *v7;
  const char *v8;
  WTF::PrintStream *v9;
  char v11;
  char **v12;
  char *v13;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Lowering ");
  v5 = *a1;
  if (!*a1)
  {
    v8 = "-";
    goto LABEL_9;
  }
  v6 = *(_DWORD *)(v5 + 20);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v7, "%s", "D@");
  WTF::PrintStream::printf(v7, "%u", v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  if ((*(_DWORD *)(v5 + 56) & 7) == 3)
  {
    v8 = "<Double>";
    goto LABEL_9;
  }
  if ((*(_DWORD *)(v5 + 56) & 7) == 5)
  {
    v8 = "<Int52>";
LABEL_9:
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v9, "%s", v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  }
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLazyJSConstant(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::B3::Value *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v2 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v3 = *(uint64_t **)(*((_QWORD *)this + 3528) + 72);
  v5 = *v3;
  v4 = v3[1];
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)&v8 = v5;
  DWORD2(v8) = v4;
  v9 = v6;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 16) = 0;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDoubleAsInt32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2)
{
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;
  unint64_t v5;
  double result;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;

  v9 = *((_QWORD *)this + 3528);
  v5 = *((_QWORD *)this + 3521);
  v8.n128_u64[0] = (unint64_t)v4;
  v8.n128_u64[1] = v5;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v7, (uint64_t *)this + 3489, &v9, &v8).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileExtractCatchLocal(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  JSC::FTL::AbstractHeap *v10;
  uint64_t v11;
  JSC::B3::Value *v12;

  v9 = (char *)this + 27640;
  v10 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 208)+ 8 * *(unsigned int *)(*((_QWORD *)this + 3528) + 72)+ 8, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v9, v10, v11, 2);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileClearCatchLocals(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v1;
  JSC::FTL::Output *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::FTL::AbstractHeap *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 208);
  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v10 = JSC::FTL::Output::absolute(v2, v1, v4, v5, v6, v7, v8, v9);
  return JSC::FTL::Output::store((uint64_t)v2, v3, v10, v11);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToObjectOrCallObjectConstructor(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::B3::Value *v2;
  uint64_t v3;
  uint64_t v4;
  JSC::B3::BasicBlock *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSCell *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::B3::Value *v69;

  v69 = v2;
  v3 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v4 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v5 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v13, v3, v4, 1.0, 0.0, v14, v15, v16, v17);
  *((_QWORD *)this + 3472) = v3;
  v18 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v4;
  v19 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v2);
  v21 = v20;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v22, (uint64_t)v5, v4, 1.0, 0.0, v23, v24, v25, v26);
  *((_QWORD *)this + 3472) = v4;
  *((_QWORD *)this + 3473) = v5;
  v27 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v27 + 18) == 321)
  {
    v45 = *(_DWORD *)(v27 + 72);
    if (v45 == -1)
      v46 = 0;
    else
      v46 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), v45);
    v47 = *(_QWORD *)this;
    JSC::CodeOrigin::CodeOrigin(&v68, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
    v61 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v47, &v68, v48, v49, v50, v51, v52, v53);
    if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v68 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
    v66 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v46);
  }
  else
  {
  }
  v34 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v33);
  v36 = v35;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5, v37, v38, v39, v40, v41, v42);
  *((_QWORD *)this + 3472) = v5;
  *((_QWORD *)this + 3473) = v18;
  v43 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v19, v21, v34, v36);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::BasicBlock *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  JSC::FTL::AbstractHeap *v95;
  uint64_t v96;
  uint64_t v97;
  JSC::B3::Value *v98;
  uint64_t v99;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v99, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v99, v3, v4, v5, v6, v7, v8);
  if ((v99 & 1) != 0 && (v99 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v99 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v98 = v17;
  v18 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v19 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v20 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v21 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v22 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v30, v18, v21, 1.0, 0.0, v31, v32, v33, v34);
  *((_QWORD *)this + 3472) = v18;
  v35 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v19;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v43, v19, v21, 1.0, 0.0, v44, v45, v46, v47);
  *((_QWORD *)this + 3472) = v19;
  *((_QWORD *)this + 3473) = v20;
  v48 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v50 = v49;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v51, v20, (uint64_t)v22, NAN, NAN, v52, v53, v54, v55);
  *((_QWORD *)this + 3472) = v20;
  *((_QWORD *)this + 3473) = v21;
  if (JSC::DFG::Node::ecmaMode(*((JSC::DFG::Node **)this + 3528)))
  {
    v95 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v16 + 64, v56, v57, v58, v59, v60, v61);
    v62 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v95, v96, 2);
  }
  else
  {
    v62 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  }
  v63 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62);
  v65 = v64;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v66, v67, v68, v69, v70, v71);
  *((_QWORD *)this + 3472) = v21;
  *((_QWORD *)this + 3473) = v22;
  if (JSC::DFG::Node::ecmaMode(*((JSC::DFG::Node **)this + 3528)))
    v78 = operationToThis;
  else
    v78 = operationToThisStrict;
  v84 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v83);
  v86 = v85;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v87, v88, v89, v90, v91, v92);
  *((_QWORD *)this + 3472) = v22;
  *((_QWORD *)this + 3473) = v35;
  v93 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v48, v50, v63, v65, v84, v86);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIncOrDec(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::DFG::Node *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSCell *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v2 = *(_QWORD *)this;
  if ((*((_BYTE *)v1 + 30) & 0xFC) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v1, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xDC2, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileIncOrDec()", "m_node->child1().useKind() == UntypedUse");
    __break(0xC471u);
    JUMPOUT(0x197D2B320);
  }
  JSC::CodeOrigin::CodeOrigin(&v33, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v17 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v33, v4, v5, v6, v7, v8, v9);
  if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  if (*(_WORD *)(*((_QWORD *)this + 3528) + 18) == 82)
    v24 = operationInc;
  else
    v24 = operationDec;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueNegate(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::DFG::Node *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  __n128 v72;
  uint64_t v73;
  __int128 v74;
  char v75;

  v2 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  if ((*((_BYTE *)v2 + 30) & 0xFC) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xDCB, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueNegate()", "m_node->child1().useKind() == UntypedUse");
    __break(0xC471u);
    JUMPOUT(0x197D2B734);
  }
  v3 = *(_QWORD *)(**((_QWORD **)this + 1) + 40);
  v4 = *((_QWORD *)this + 3524);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFF8);
  v6 = v4 & 0xFFFFFFFF8;
  if ((v4 & 1) != 0)
  {
    v6 = *v5;
    if (!*v5)
    {
LABEL_4:
      if ((v4 & 2) == 0)
        goto LABEL_5;
LABEL_29:
      LODWORD(v4) = -1;
      goto LABEL_7;
    }
  }
  else if (!v6)
  {
    goto LABEL_4;
  }
  v3 = *(_QWORD *)(v6 + 8);
  if ((v4 & 2) != 0)
    goto LABEL_29;
LABEL_5:
  if ((v4 & 1) != 0)
    LODWORD(v4) = *(_DWORD *)((v4 & 0xFFFFFFFF8) + 8);
  else
    v4 >>= 36;
LABEL_7:
  v7 = JSC::CodeBlock::unaryArithProfileForPC(v3, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v3 + 56) + 80) + (v4 >> 2)));
  v8 = (uint64_t *)*((_QWORD *)this + 3528);
  v10 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v74 = (unint64_t)v9;
  v75 = 3;
  JSC::B3::StackmapValue::append(v10, v9, (unint64_t)&v74 + 8);
  v11 = *((_QWORD *)this + 3488);
  v74 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v10, v11, (unint64_t)&v74);
  v12 = *((_QWORD *)this + 3487);
  v74 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v10, v12, (unint64_t)&v74);
  *((_BYTE *)v10 + 168) = 1;
  *((_QWORD *)v10 + 8) |= 0x30000uLL;
  *((_QWORD *)v10 + 10) |= 0x30000uLL;
  v18 = *((_QWORD *)this + 1);
  v19 = *v8;
  if ((v19 & 1) != 0)
  {
    v51 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || (v52 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v52 == 0x3FFFFFFF)
      || (_DWORD)v52 == -1)
    {
      v53 = 2;
    }
    else if (v52 >> 28)
    {
      v66 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v66 = v51;
      *(_DWORD *)(v66 + 8) = v52;
      v53 = 1;
      v51 = v66;
    }
    else
    {
      v53 = v51;
      v51 = v52 << 36;
    }
    v19 = v51 | v53;
  }
  v20 = v71;
  if (v71)
  {
    do
      v21 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v21 + 1, (unsigned int *)v20));
  }
  v22 = v19;
  if ((v19 & 1) != 0)
  {
    v54 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v55 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v55 != 0x3FFFFFFF)
        ? (v56 = (_DWORD)v55 == -1)
        : (v56 = 1),
          v56))
    {
      v57 = 2;
    }
    else if (v55 >> 28)
    {
      v67 = *(_DWORD *)((v19 & 0xFFFFFFFF8) + 8);
      v68 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v68 = v54;
      *(_DWORD *)(v68 + 8) = v67;
      v57 = 1;
      v54 = v68;
    }
    else
    {
      v57 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v54 = v55 << 36;
    }
    v22 = v54 | v57;
  }
  v23 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)v23 = &off_1E3575790;
  if (v20)
  {
    do
      v31 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v31 + 1, (unsigned int *)v20));
  }
  *(_QWORD *)(v23 + 16) = v20;
  *(_QWORD *)(v23 + 24) = v18;
  v32 = v22;
  *(_QWORD *)(v23 + 32) = v7;
  if ((v22 & 1) != 0)
  {
    v58 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v59 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v59 != 0x3FFFFFFF)
        ? (v60 = (_DWORD)v59 == -1)
        : (v60 = 1),
          v60))
    {
      v61 = 2;
    }
    else if (v59 >> 28)
    {
      v70 = v23;
      v69 = WTF::fastMalloc((WTF *)0x10);
      v23 = v70;
      *(_QWORD *)v69 = v58;
      *(_DWORD *)(v69 + 8) = v59;
      v61 = 1;
      v58 = v69;
    }
    else
    {
      v61 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      v58 = v59 << 36;
    }
    v32 = v58 | v61;
  }
  *(_QWORD *)(v23 + 40) = v32;
  *(_QWORD *)(v23 + 48) = operationArithNegateOptimize;
  *(_QWORD *)(v23 + 56) = operationArithNegate;
  v33 = (unsigned int *)*((_QWORD *)v10 + 7);
  *((_QWORD *)v10 + 7) = v23;
  if (!v33)
    goto LABEL_18;
  v34 = v33 + 2;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
  {
    atomic_store(1u, v33 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    if ((v22 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if ((v22 & 1) == 0)
      goto LABEL_19;
  }
  if ((v22 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
LABEL_19:
  if (v20)
  {
    do
    {
      v37 = __ldaxr((unsigned int *)v20);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)v20));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)v20);
      v62 = *((_QWORD *)v20 + 4);
      if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v62 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
      v63 = *((_QWORD *)v20 + 3);
      if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v63 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree((unint64_t)v20, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  v39 = *((_QWORD *)this + 3528);
  v40 = *((_QWORD *)this + 3521);
  v72.n128_u64[0] = (unint64_t)v10;
  v72.n128_u64[1] = v40;
  v73 = v39;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v74, (uint64_t *)this + 3492, &v73, &v72);
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  v48 = v71;
  v71 = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)v48));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)v48);
      v64 = *((_QWORD *)v48 + 4);
      if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v64 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
      v65 = *((_QWORD *)v48 + 3);
      if ((v65 & 1) != 0 && (v65 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v65 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueAdd(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  uint64_t v45;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v45, v3, v4, v5, v6, v7, v8);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0x6C000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
  {
  }
  else
  {
    v20 = *(_QWORD *)(**((_QWORD **)this + 1) + 40);
    v21 = *((_QWORD *)this + 3524);
    v22 = v21 & 0xFFFFFFFF8;
    if ((v21 & 1) != 0)
      v22 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if (v22)
      v20 = *(_QWORD *)(v22 + 8);
    if ((v21 & 2) != 0)
    {
      LODWORD(v21) = -1;
    }
    else if ((v21 & 1) != 0)
    {
      LODWORD(v21) = *(_DWORD *)((v21 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v21 >>= 36;
    }
    v23 = JSC::CodeBlock::binaryArithProfileForPC(v20, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v20 + 56) + 80) + (v21 >> 2)));
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueMul(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  uint64_t v45;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v45, v3, v4, v5, v6, v7, v8);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0x6C000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
  {
  }
  else
  {
    v20 = *(_QWORD *)(**((_QWORD **)this + 1) + 40);
    v21 = *((_QWORD *)this + 3524);
    v22 = v21 & 0xFFFFFFFF8;
    if ((v21 & 1) != 0)
      v22 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if (v22)
      v20 = *(_QWORD *)(v22 + 8);
    if ((v21 & 2) != 0)
    {
      LODWORD(v21) = -1;
    }
    else if ((v21 & 1) != 0)
    {
      LODWORD(v21) = *(_DWORD *)((v21 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v21 >>= 36;
    }
    v23 = JSC::CodeBlock::binaryArithProfileForPC(v20, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v20 + 56) + 80) + (v21 >> 2)));
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStrCat(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v30, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v30, v3, v4, v5, v6, v7, v8);
  if ((v30 & 1) != 0 && (v30 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
  }
  else
  {
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithClz32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  unint64_t v34;
  double result;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];
  __n128 v50;
  uint64_t v51;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v36 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v37 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v37 != 0x3FFFFFFF) ? (v38 = v37 == -1) : (v38 = 1), v38))
  {
    v39 = 2;
  }
  else if (v37 >> 28)
  {
    v45 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v45 = v36;
    *(_DWORD *)(v45 + 8) = v37;
    v39 = 1;
    v36 = v45;
  }
  else
  {
    v39 = v36;
    v36 = 0;
  }
  v11 = v36 | v39;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v36 | v39) & 1) == 0)
    goto LABEL_3;
  v40 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v41 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v41 != 0x3FFFFFFF) ? (v42 = v41 == -1) : (v42 = 1), v42))
  {
    v43 = 2;
  }
  else if (v41 >> 28)
  {
    v46 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v47 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v47 = v40;
    *(_DWORD *)(v47 + 8) = v46;
    v43 = 1;
    v40 = v47;
  }
  else
  {
    v43 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v40 = 0;
  }
  v44 = v40 | v43;
  v13 = (_QWORD *)(v44 & 0xFFFFFFFF8);
  if ((v44 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = (v18[3] >> 50) & 0x3F;
  if ((v19 - 1) >= 2)
  {
    if ((_DWORD)v19)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xB0F, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithClz32()", "m_node->child1().useKind() == UntypedUse");
      __break(0xC471u);
      JUMPOUT(0x197D2BE18);
    }
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v22, v23, v24, v25, v26, v27);
    v49[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v21 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32);
  }
  else
  {
    v21 = (JSC::B3::Value *)JSC::FTL::Output::ctlz32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20);
  }
  v33 = *((_QWORD *)this + 3528);
  v34 = *((_QWORD *)this + 3521);
  v50.n128_u64[0] = (unint64_t)v21;
  v50.n128_u64[1] = v34;
  v51 = v33;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v49, (uint64_t *)this + 3489, &v51, &v50).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueDiv(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  char v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  WTF **v84;
  char v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  unsigned int v122;
  unsigned int v123;
  JSC::B3::Value *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int8x8_t v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  JSC::B3::Value *v203;
  WTF *v204[2];
  uint64_t v205;
  char v206;
  WTF *v207;
  __n128 v208;
  uint64_t v209;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v163 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v164 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v164 != 0x3FFFFFFF) ? (v165 = v164 == -1) : (v165 = 1), v165))
  {
    v166 = 2;
  }
  else if (v164 >> 28)
  {
    v197 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v197 = v163;
    *(_DWORD *)(v197 + 8) = v164;
    v166 = 1;
    v163 = v197;
  }
  else
  {
    v166 = v163;
    v163 = 0;
  }
  v11 = v163 | v166;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v163 | v166) & 1) == 0)
    goto LABEL_3;
  v190 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v191 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v191 != 0x3FFFFFFF) ? (v192 = v191 == -1) : (v192 = 1), v192))
  {
    v193 = 2;
  }
  else if (v191 >> 28)
  {
    v198 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v198 = v190;
    *(_DWORD *)(v198 + 8) = v191;
    v193 = 1;
    v190 = v198;
  }
  else
  {
    v193 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v190 = 0;
  }
  v194 = v190 | v193;
  v13 = (_QWORD *)(v194 & 0xFFFFFFFF8);
  if ((v194 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = (uint64_t *)*((_QWORD *)this + 3528);
  v19 = v18[3];
  if ((v19 & 0xFC000000000000) == 0x6C000000000000 && (v18[4] & 0xFC000000000000) == 0x6C000000000000)
  {
    v207 = v124;
    v130 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
    v203 = v137;
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v143, v144, v145, v146, v147, v148);
    v204[0] = (WTF *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v153 = *((_QWORD *)this + 3528);
    v154 = *((_QWORD *)this + 3521);
    v208.n128_u64[0] = v152;
    v208.n128_u64[1] = v154;
    v209 = v153;
    WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v204, (uint64_t *)this + 3492, &v209, &v208);
    return;
  }
  v43 = v18[3];
  v44 = *((_QWORD *)this + 3505);
  v45 = *(unsigned int *)((v43 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v46 = (uint64_t *)(v44 + 24);
  v47 = (uint64_t *)(v44 + 8);
  if ((v43 & 1) != 0)
    v48 = v46;
  else
    v48 = v47;
  v49 = *v48;
  v50 = *v48 + 32 * v45;
  v51 = *((_DWORD *)this + 7030);
  v52 = *(_DWORD *)(v50 + 20);
  if (v51 != v52)
  {
    if ((*(_QWORD *)(v50 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v52 ^ v51) >= 2)
      {
        v155 = *(_QWORD *)v50;
        if (*(_QWORD *)v50 != 4)
        {
          *(_QWORD *)v50 = v155 | 2;
          v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v155 & 1) != 0)
          {
            v182 = 2 * *v156;
            while (v182 * 4)
            {
              v183 = *(_QWORD *)&v156[v182];
              if ((*(_BYTE *)(v183 + 19) & 0xC) == 0)
              {
                v184 = *(_QWORD *)(v183 + 96);
                v185 = (v184 & 1) != 0 ? (v184 >> 1) & 3 : *(unsigned __int8 *)(v184 + 4);
                v182 -= 2;
                if (v185 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v156, v36, v37, v38, v39, v40, v41, v42);
              goto LABEL_155;
            }
          }
          else if (v156)
          {
            if ((*((_BYTE *)v156 + 19) & 0xC) != 0
              || ((v157 = *((_QWORD *)v156 + 12), (v157 & 1) != 0)
                ? (v158 = (v157 >> 1) & 3)
                : (v158 = *(unsigned __int8 *)(v157 + 4)),
                  v158 == 2))
            {
LABEL_155:
              *(_QWORD *)v50 = 4;
            }
          }
        }
        *(_DWORD *)(v49 + 32 * v45 + 16) = -21020677;
      }
      if ((v51 & 1) != 0)
        *(_QWORD *)v50 &= ~2uLL;
    }
    *(_DWORD *)(v50 + 20) = v51;
  }
  v53 = *(_QWORD *)(v50 + 8);
  if ((v53 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v53 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v53 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v53 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v53 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v54 = 126;
          else
            v54 = 6;
        }
        else
        {
          v54 = 4;
        }
      }
      else
      {
        v54 = 2;
      }
    }
    else
    {
      v54 = 3;
    }
  }
  else
  {
    v54 = 32;
  }
  v202 = v54;
  v55 = v18[4];
  v56 = *((_QWORD *)this + 3505);
  v57 = *(unsigned int *)((v55 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v58 = (uint64_t *)(v56 + 24);
  v59 = (uint64_t *)(v56 + 8);
  if ((v55 & 1) != 0)
    v60 = v58;
  else
    v60 = v59;
  v61 = *v60;
  v62 = *v60 + 32 * v57;
  v63 = *((_DWORD *)this + 7030);
  v64 = *(_DWORD *)(v62 + 20);
  if (v63 != v64)
  {
    if ((*(_QWORD *)(v62 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v64 ^ v63) >= 2)
      {
        v159 = *(_QWORD *)v62;
        if (*(_QWORD *)v62 != 4)
        {
          *(_QWORD *)v62 = v159 | 2;
          v160 = (unsigned int *)(v159 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v159 & 1) != 0)
          {
            v186 = 2 * *v160;
            while (v186 * 4)
            {
              v187 = *(_QWORD *)&v160[v186];
              if ((*(_BYTE *)(v187 + 19) & 0xC) == 0)
              {
                v188 = *(_QWORD *)(v187 + 96);
                v189 = (v188 & 1) != 0 ? (v188 >> 1) & 3 : *(unsigned __int8 *)(v188 + 4);
                v186 -= 2;
                if (v189 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v160, v36, v37, v38, v39, v40, v41, v42);
              goto LABEL_157;
            }
          }
          else if (v160)
          {
            if ((*((_BYTE *)v160 + 19) & 0xC) != 0
              || ((v161 = *((_QWORD *)v160 + 12), (v161 & 1) != 0)
                ? (v162 = (v161 >> 1) & 3)
                : (v162 = *(unsigned __int8 *)(v161 + 4)),
                  v162 == 2))
            {
LABEL_157:
              *(_QWORD *)v62 = 4;
            }
          }
        }
        *(_DWORD *)(v61 + 32 * v57 + 16) = -21020677;
      }
      if ((v63 & 1) != 0)
        *(_QWORD *)v62 &= ~2uLL;
    }
    *(_DWORD *)(v62 + 20) = v63;
  }
  v65 = *(_QWORD *)(v62 + 8);
  if ((v65 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v65 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v65 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v65 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v65 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v66 = 126;
          else
            v66 = 6;
        }
        else
        {
          v66 = 4;
        }
      }
      else
      {
        v66 = 2;
      }
    }
    else
    {
      v66 = 3;
    }
  }
  else
  {
    v66 = 32;
  }
  v67 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v204[1] = 0;
  LOBYTE(v205) = 3;
  JSC::B3::StackmapValue::append(v67, v20, (unint64_t)&v204[1]);
  v204[0] = v21;
  v204[1] = 0;
  LOBYTE(v205) = 3;
  JSC::B3::StackmapValue::append(v67, (uint64_t)v21, (unint64_t)&v204[1]);
  v68 = *((_QWORD *)this + 3488);
  *(_OWORD *)v204 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v67, v68, (unint64_t)v204);
  v69 = *((_QWORD *)this + 3487);
  *(_OWORD *)v204 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v67, v69, (unint64_t)v204);
  *((_WORD *)v67 + 84) = 769;
  *((_QWORD *)v67 + 8) |= 0x30000uLL;
  *((_QWORD *)v67 + 10) |= 0x30000uLL;
  v204[0] = (WTF *)&v205;
  v205 = 0;
  v206 = 5;
  v204[1] = (WTF *)0x100000001;
  v82 = *((_QWORD *)v67 + 17);
  v83 = (_QWORD *)v67 + 19;
  if ((__int128 *)v82 == (__int128 *)((char *)v67 + 152))
  {
    v84 = &v207;
  }
  else
  {
    if (v82)
    {
      *((_QWORD *)v67 + 17) = 0;
      *((_DWORD *)v67 + 36) = 0;
      WTF::fastFree(v82, v75, v76, v77, v78, v79, v80, v81);
      v195 = v204[0];
      *((_QWORD *)v67 + 17) = v83;
      v196 = HIDWORD(v204[1]);
      if (v195 == (WTF *)&v205)
      {
        if (HIDWORD(v204[1]))
        {
          v84 = (WTF **)(&v205 + 2 * HIDWORD(v204[1]));
          goto LABEL_35;
        }
        *((_QWORD *)v67 + 18) = LODWORD(v204[1]);
      }
      else
      {
        *((_QWORD *)v67 + 17) = v195;
        *((_DWORD *)v67 + 36) = v204[1];
        *((_DWORD *)v67 + 37) = v196;
      }
      v85 = v202;
      goto LABEL_42;
    }
    *((_QWORD *)v67 + 17) = v83;
    v84 = &v207;
  }
LABEL_35:
  v85 = v202;
  v86 = 0;
  do
  {
    *(_OWORD *)&v83[v86] = *(_OWORD *)((char *)&v205 + v86 * 8);
    v86 += 2;
  }
  while ((WTF **)((char *)&v205 + v86 * 8) != v84);
  v87 = v204[0];
  v88 = v204[1];
  HIDWORD(v204[1]) = 0;
  *((_QWORD *)v67 + 18) = v88;
  if (&v205 != (uint64_t *)v87 && v87 != 0)
  {
    v204[0] = 0;
    LODWORD(v204[1]) = 0;
    WTF::fastFree((unint64_t)v87, v75, v76, v77, v78, v79, v80, v81);
  }
LABEL_42:
  v90 = *((_QWORD *)this + 1);
  v91 = *v18;
  if ((*v18 & 1) != 0)
  {
    v167 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
    if ((v91 & 2) != 0
      || ((v168 = *(unsigned int *)((v91 & 0xFFFFFFFF8) + 8), (_DWORD)v168 != 0x3FFFFFFF)
        ? (v169 = (_DWORD)v168 == -1)
        : (v169 = 1),
          v169))
    {
      v170 = 2;
    }
    else if (v168 >> 28)
    {
      v199 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v199 = v167;
      *(_DWORD *)(v199 + 8) = v168;
      v170 = 1;
      v167 = v199;
    }
    else
    {
      v170 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
      v167 = v168 << 36;
    }
    v91 = v167 | v170;
  }
  v92 = v207;
  if (v207)
  {
    do
      v93 = __ldaxr((unsigned int *)v92);
    while (__stlxr(v93 + 1, (unsigned int *)v92));
  }
  v94 = v91;
  if ((v91 & 1) != 0)
  {
    v171 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
    if ((v91 & 2) != 0
      || ((v172 = *(unsigned int *)((v91 & 0xFFFFFFFF8) + 8), (_DWORD)v172 != 0x3FFFFFFF)
        ? (v173 = (_DWORD)v172 == -1)
        : (v173 = 1),
          v173))
    {
      v174 = 2;
    }
    else if (v172 >> 28)
    {
      v200 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v200 = v171;
      *(_DWORD *)(v200 + 8) = v172;
      v174 = 1;
      v171 = v200;
    }
    else
    {
      v174 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
      v171 = v172 << 36;
    }
    v94 = v171 | v174;
  }
  v95 = WTF::fastMalloc((WTF *)0x48);
  v103 = v95;
  *(_DWORD *)(v95 + 8) = 1;
  *(_QWORD *)v95 = &off_1E3575970;
  if (v92)
  {
    do
      v104 = __ldaxr((unsigned int *)v92);
    while (__stlxr(v104 + 1, (unsigned int *)v92));
  }
  *(_QWORD *)(v95 + 16) = v92;
  *(_BYTE *)(v95 + 24) = v85;
  *(_BYTE *)(v95 + 25) = 0;
  *(_QWORD *)(v95 + 26) = 0;
  *(_BYTE *)(v95 + 34) = v66;
  *(_BYTE *)(v95 + 35) = 0;
  *(_QWORD *)(v95 + 36) = 0;
  v105 = v94;
  *(_QWORD *)(v95 + 48) = v90;
  if ((v94 & 1) != 0)
  {
    v175 = *(_QWORD *)(v94 & 0xFFFFFFFF8);
    if ((v94 & 2) != 0
      || (v176 = *(unsigned int *)((v94 & 0xFFFFFFFF8) + 8), (_DWORD)v176 == 0x3FFFFFFF)
      || (_DWORD)v176 == -1)
    {
      v177 = 2;
    }
    else if (v176 >> 28)
    {
      v201 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v201 = v175;
      *(_DWORD *)(v201 + 8) = v176;
      v177 = 1;
      v175 = v201;
    }
    else
    {
      v177 = *(_QWORD *)(v94 & 0xFFFFFFFF8);
      v175 = v176 << 36;
    }
    v105 = v175 | v177;
  }
  *(_QWORD *)(v103 + 56) = v105;
  *(_QWORD *)(v103 + 64) = operationValueDiv;
  v106 = (unsigned int *)*((_QWORD *)v67 + 7);
  *((_QWORD *)v67 + 7) = v103;
  if (!v106)
    goto LABEL_53;
  v107 = v106 + 2;
  do
  {
    v108 = __ldaxr(v107);
    v109 = v108 - 1;
  }
  while (__stlxr(v109, v107));
  if (v109)
  {
LABEL_53:
    if ((v94 & 1) == 0)
      goto LABEL_54;
LABEL_128:
    if ((v94 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v94 & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
    goto LABEL_54;
  }
  atomic_store(1u, v106 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 8))(v106);
  if ((v94 & 1) != 0)
    goto LABEL_128;
LABEL_54:
  if (v92)
  {
    do
    {
      v110 = __ldaxr((unsigned int *)v92);
      v111 = v110 - 1;
    }
    while (__stlxr(v111, (unsigned int *)v92));
    if (!v111)
    {
      atomic_store(1u, (unsigned int *)v92);
      v178 = *((_QWORD *)v92 + 4);
      if ((v178 & 1) != 0 && (v178 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v178 & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
      v179 = *((_QWORD *)v92 + 3);
      if ((v179 & 1) != 0 && (v179 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v179 & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
      WTF::fastFree((unint64_t)v92, v96, v97, v98, v99, v100, v101, v102);
    }
  }
  v112 = *((_QWORD *)this + 3528);
  v113 = *((_QWORD *)this + 3521);
  v208.n128_u64[0] = (unint64_t)v67;
  v208.n128_u64[1] = v113;
  v209 = v112;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v204, (uint64_t *)this + 3492, &v209, &v208);
  if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v91 & 0xFFFFFFFF8, v114, v115, v116, v117, v118, v119, v120);
  v121 = v207;
  v207 = 0;
  if (v121)
  {
    do
    {
      v122 = __ldaxr((unsigned int *)v121);
      v123 = v122 - 1;
    }
    while (__stlxr(v123, (unsigned int *)v121));
    if (!v123)
    {
      atomic_store(1u, (unsigned int *)v121);
      v180 = *((_QWORD *)v121 + 4);
      if ((v180 & 1) != 0 && (v180 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v180 & 0xFFFFFFFF8, v114, v115, v116, v117, v118, v119, v120);
      v181 = *((_QWORD *)v121 + 3);
      if ((v181 & 1) != 0 && (v181 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v181 & 0xFFFFFFFF8, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree((unint64_t)v121, v114, v115, v116, v117, v118, v119, v120);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueMod(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v64, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v64, v3, v4, v5, v6, v7, v8);
  if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v64 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = (v18[3] >> 50) & 0x3F;
  if ((_DWORD)v19)
  {
    if ((_DWORD)v19 == 27)
    {
    }
    if ((_DWORD)v19 != 26)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xBBC, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueMod()", "m_node->binaryUseKind() == UntypedUse || m_node->binaryUseKind() == AnyBigIntUse");
      __break(0xC471u);
      JUMPOUT(0x197D2C9ECLL);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithMod(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  JSC::B3::Value *v20;
  JSC::FTL::Output *v21;
  uint64_t v22;
  JSC::B3::BasicBlock *v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  int8x8_t v33;
  JSC::B3::Value *v34;
  int8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  JSC::B3::BasicBlock *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  int8x8_t v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;

  v10 = (unint64_t *)*((_QWORD *)this + 3528);
  v11 = (v10[3] >> 50) & 0x3F;
  if ((_DWORD)v11 == 1)
  {
    v21 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    if (*(_DWORD *)(*((_QWORD *)this + 3528) + 72) == 1)
    {
      v42 = JSC::FTL::Output::chillMod(v21, v12, v20);
    }
    else
    {
      v22 = JSC::FTL::Output::newBlock(v21);
      v23 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v24 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20, *((JSC::B3::Value **)this + 3458));
      v25 = JSC::FTL::Output::above((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, *((JSC::B3::Value **)this + 3458));
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v25, (uint64_t)v23, v22, 1.0, 0.0, v26, v27, v28, v29);
      *((_QWORD *)this + 3472) = v22;
      v30 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v23;
      v31 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x80000000);
      v32 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20);
      v34 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, v31);
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v23, v36, v37, v38, v39, v40, v41);
      *((_QWORD *)this + 3472) = v23;
      *((_QWORD *)this + 3473) = v30;
      v42 = (JSC::B3::Value *)JSC::FTL::Output::mod((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, v20);
    }
    v43 = v42;
    if ((*(_DWORD *)(*((_QWORD *)this + 3528) + 72) - 3) <= 0xFFFFFFFD)
    {
      v44 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v45 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v46 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, *((JSC::B3::Value **)this + 3457));
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v46, v44, (uint64_t)v45, NAN, NAN, v47, v48, v49, v50);
      *((_QWORD *)this + 3472) = v44;
      v51 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v45;
      v52 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43);
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45, v54, v55, v56, v57, v58, v59);
      *((_QWORD *)this + 3472) = v45;
      *((_QWORD *)this + 3473) = v51;
    }
  }
  else if ((_DWORD)v11 == 49)
  {
    v63 = (JSC::B3::Value *)JSC::FTL::Output::mod((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v60, v62);
  }
  else
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v10, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xBFE, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithMod()", "Bad use kind");
    __break(0xC471u);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithAbs(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  JSC::B3::Value *v26;
  JSC::B3::Value *v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v41, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v41, v3, v4, v5, v6, v7, v8);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v19 = (v18 >> 50) & 0x3F;
  if ((_DWORD)v19 == 49)
  {
    v21 = JSC::FTL::Output::doubleAbs((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20);
LABEL_4:
    return;
  }
  if ((_DWORD)v19 != 1)
  {
    if ((_DWORD)v19)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xC69, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithAbs()", "m_node->child1().useKind() == UntypedUse");
      __break(0xC471u);
      return;
    }
    goto LABEL_4;
  }
  v23 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 31);
  v24 = JSC::FTL::Output::aShr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v23);
  v25 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v22);
  v26 = JSC::FTL::Output::bitXor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v25);
  if (*(_DWORD *)(*((_QWORD *)this + 3528) + 72) != 1)
  {
    v27 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, *((JSC::B3::Value **)this + 3457));
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValuePow(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  double result;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  __n128 v90;
  uint64_t v91;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v75 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v76 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v76 != 0x3FFFFFFF) ? (v77 = v76 == -1) : (v77 = 1), v77))
  {
    v78 = 2;
  }
  else if (v76 >> 28)
  {
    v84 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v84 = v75;
    *(_DWORD *)(v84 + 8) = v76;
    v78 = 1;
    v75 = v84;
  }
  else
  {
    v78 = v75;
    v75 = 0;
  }
  v11 = v75 | v78;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v75 | v78) & 1) == 0)
    goto LABEL_3;
  v79 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v80 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v80 != 0x3FFFFFFF) ? (v81 = v80 == -1) : (v81 = 1), v81))
  {
    v82 = 2;
  }
  else if (v80 >> 28)
  {
    v85 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v86 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v86 = v79;
    *(_DWORD *)(v86 + 8) = v85;
    v82 = 1;
    v79 = v86;
  }
  else
  {
    v82 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v79 = 0;
  }
  v83 = v79 | v82;
  v13 = (_QWORD *)(v83 & 0xFFFFFFFF8);
  if ((v83 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0x6C000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
  {
    v88 = (uint64_t)v47;
    v53 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
    v87 = (uint64_t)v60;
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v66, v67, v68, v69, v70, v71);
    v89[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  }
  else
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v34, v35, v36, v37, v38, v39);
    v89[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  }
  v44 = *((_QWORD *)this + 3528);
  v45 = *((_QWORD *)this + 3521);
  v90.n128_u64[0] = v43;
  v90.n128_u64[1] = v45;
  v91 = v44;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v89, (uint64_t *)this + 3492, &v91, &v90).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithPow(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2)
{
  uint64_t v3;
  int8x8_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::B3::BasicBlock *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  JSC::B3::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  JSC::B3::Value *v97;
  JSC::B3::Value *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::B3::Value *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  JSC::B3::Value *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  JSC::B3::Value *v117;
  JSC::B3::Value *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  JSC::B3::Value *v123;
  JSC::B3::Value *v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  JSC::B3::Value *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  JSC::B3::Value *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  JSC::B3::Value *v164;
  JSC::B3::Value *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int8x8_t v173;
  JSC::B3::Value *v174;
  JSC::B3::Value *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v3 = *((_QWORD *)this + 3528);
  if ((*(_QWORD *)(v3 + 32) & 0xFC000000000000) == 0x4000000000000)
  {
    v164 = (JSC::B3::Value *)JSC::FTL::Output::doublePowi((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v166, v174);
  }
  else
  {
    v6 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v7 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v8 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v9 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v176 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v10 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v180 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v182 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v184 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v186 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v188 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v189 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v191 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v178 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v193 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v197 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v199 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v200 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v11 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v12 = (JSC::B3::Value *)JSC::FTL::Output::doubleToInt((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5);
    v13 = (JSC::B3::Value *)JSC::FTL::Output::intToDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
    v14 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5, v13);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v14, v6, v8, NAN, NAN, v15, v16, v17, v18);
    *((_QWORD *)this + 3472) = v6;
    v19 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v7;
    v20 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1000);
    v21 = JSC::FTL::Output::belowOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, v20);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v21, v7, v8, 1.0, 0.0, v22, v23, v24, v25);
    *((_QWORD *)this + 3472) = v7;
    *((_QWORD *)this + 3473) = v8;
    v26 = (JSC::B3::Value *)JSC::FTL::Output::doublePowi((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175, v12);
    v27 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26);
    v195 = v28;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v29, v30, v31, v32, v33, v34);
    *((_QWORD *)this + 3472) = v8;
    *((_QWORD *)this + 3473) = v9;
    v198 = v19;
    v196 = v27;
    else
      v45 = (JSC::B3::Value *)*((_QWORD *)this + 3456);
    v46 = v178;
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v45, v200, v9, 0.0, 1.0, v41, v42, v43, v44);
    *((_QWORD *)this + 3472) = v9;
    *((_QWORD *)this + 3473) = v176;
    v47 = JSC::FTL::Output::doubleAbs((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175);
    v48 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1.0);
    v49 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v47, v48);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v49, v176, v10, 0.0, 1.0, v50, v51, v52, v53);
    *((_QWORD *)this + 3472) = v176;
    *((_QWORD *)this + 3473) = v10;
    v54 = JSC::FTL::Output::doubleAbs((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5);
    v55 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), INFINITY);
    v56 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v54, v55);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v56, v200, v10, 0.0, 1.0, v57, v58, v59, v60);
    *((_QWORD *)this + 3472) = v10;
    *((_QWORD *)this + 3473) = v180;
    v61 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0.5);
    v62 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5, v61);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v62, v180, v188, 0.0, 1.0, v63, v64, v65, v66);
    *((_QWORD *)this + 3472) = v180;
    *((_QWORD *)this + 3473) = v182;
    v67 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175, *((JSC::B3::Value **)this + 3465));
    v68 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3465));
    v179 = v69;
    v181 = v68;
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v67, (uint64_t)v11, v182, 0.0, 1.0, v70, v71, v72, v73);
    *((_QWORD *)this + 3472) = v182;
    *((_QWORD *)this + 3473) = v184;
    v74 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), INFINITY);
    v75 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v47, v74);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v75, v186, v184, 0.0, 1.0, v76, v77, v78, v79);
    *((_QWORD *)this + 3472) = v184;
    *((_QWORD *)this + 3473) = v186;
    v80 = (JSC::B3::Value *)JSC::FTL::Output::doubleSqrt((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175);
    v81 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v80);
    v183 = v82;
    v185 = v81;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v83, v84, v85, v86, v87, v88);
    *((_QWORD *)this + 3472) = v186;
    *((_QWORD *)this + 3473) = v188;
    v89 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), INFINITY);
    v187 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v89);
    v177 = v90;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v91, v92, v93, v94, v95, v96);
    *((_QWORD *)this + 3472) = v188;
    *((_QWORD *)this + 3473) = v189;
    v97 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -0.5);
    v98 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5, v97);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v98, v189, v199, 0.0, 1.0, v99, v100, v101, v102);
    *((_QWORD *)this + 3472) = v189;
    *((_QWORD *)this + 3473) = v191;
    v103 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175, *((JSC::B3::Value **)this + 3465));
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v103, v191, v46, 0.0, 1.0, v104, v105, v106, v107);
    *((_QWORD *)this + 3472) = v191;
    *((_QWORD *)this + 3473) = v46;
    v108 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), INFINITY);
    v109 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v108);
    v190 = v110;
    v192 = v109;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v111, v112, v113, v114, v115, v116);
    *((_QWORD *)this + 3472) = v46;
    *((_QWORD *)this + 3473) = v193;
    v117 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), INFINITY);
    v118 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v47, v117);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v118, v197, v193, 0.0, 1.0, v119, v120, v121, v122);
    *((_QWORD *)this + 3472) = v193;
    *((_QWORD *)this + 3473) = v197;
    v123 = (JSC::B3::Value *)JSC::FTL::Output::doubleSqrt((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175);
    v124 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1.0);
    v125 = (JSC::B3::Value *)JSC::FTL::Output::div((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v124, v123);
    v194 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v125);
    v127 = v126;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v128, v129, v130, v131, v132, v133);
    *((_QWORD *)this + 3472) = v197;
    *((_QWORD *)this + 3473) = v199;
    v134 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3465));
    v136 = v135;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v137, v138, v139, v140, v141, v142);
    *((_QWORD *)this + 3472) = v199;
    *((_QWORD *)this + 3473) = v200;
    v143 = (JSC::B3::Value *)JSC::FTL::Output::doubleStdPow((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175, v5);
    v144 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v143);
    v146 = v145;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v147, v148, v149, v150, v151, v152);
    *((_QWORD *)this + 3472) = v200;
    *((_QWORD *)this + 3473) = v11;
    v153 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), NAN);
    v154 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v153);
    v156 = v155;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v157, v158, v159, v160, v161, v162);
    *((_QWORD *)this + 3472) = v11;
    *((_QWORD *)this + 3473) = v198;
    v164 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, v196, v195, v181, v179, v185, v183, v163, v187, v177, v192, v190, v194, v127, v134, v136, v144, v146, v154,
                               v156);
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithRandom(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::FTL::AbstractHeap *v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::FTL::AbstractHeap *v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::FTL::AbstractHeap *v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  JSC::B3::Value *v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::FTL::AbstractHeap *v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  uint64_t v64;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v64, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = JSC::DFG::Graph::globalObjectFor(v2, &v64, v3, v4, v5, v6, v7, v8);
  if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v64 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = v16 + 2104;
  v18 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16 + 2104, v10, v11, v12, v13, v14, v15);
  v20 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v18, v19, 2);
  v21 = v16 + 2112;
  v28 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21, v22, v23, v24, v25, v26, v27);
  v30 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v28, v29, 2);
  v37 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v31, v32, v33, v34, v35, v36);
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v30, v37, v38);
  v39 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 23);
  v40 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20, v39);
  v41 = JSC::FTL::Output::bitXor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v40, v20);
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 17);
  v43 = JSC::FTL::Output::lShr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v41, v42);
  v44 = JSC::FTL::Output::bitXor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43, v41);
  v45 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 26);
  v46 = JSC::FTL::Output::lShr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v30, v45);
  v47 = JSC::FTL::Output::bitXor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v30, v46);
  v48 = JSC::FTL::Output::bitXor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v47, v44);
  v55 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21, v49, v50, v51, v52, v53, v54);
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v48, v55, v56);
  v57 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v48, v30);
  v58 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x1FFFFFFFFFFFFFLL);
  v59 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57, v58);
  v60 = (JSC::B3::Value *)JSC::FTL::Output::intToDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v59);
  v61 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1.11022302e-16);
  v62 = JSC::FTL::Output::mul((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v60, v61);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithRound(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::BasicBlock *v22;
  int8x8_t v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  unsigned int v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v67, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v67, v3, v4, v5, v6, v7, v8);
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  v20 = (v19 >> 50) & 0x3F;
  if ((_DWORD)v20 == 49)
  {
    if (*(_DWORD *)(v18 + 72))
    {
      v21 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v22 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v25 = JSC::FTL::Output::doubleCeil((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24);
      v26 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v25);
      v28 = v27;
      v29 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0.5);
      v30 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v25, v29);
      v31 = JSC::FTL::Output::doubleGreaterThanOrUnordered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v30, v24);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v31, v21, (uint64_t)v22, NAN, NAN, v32, v33, v34, v35);
      *((_QWORD *)this + 3472) = v21;
      v36 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v22;
      v37 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1.0);
      v38 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v25, v37);
      v39 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v38);
      v41 = v40;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v42, v43, v44, v45, v46, v47);
      *((_QWORD *)this + 3472) = v22;
      *((_QWORD *)this + 3473) = v36;
      v48 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 4, v26, v28, v39, v41);
    }
    else
    {
      v63 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0.5);
      v64 = JSC::FTL::Output::doubleAdd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62, v63);
      v48 = JSC::FTL::Output::doubleFloor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v64);
    }
    v49 = *(_DWORD *)(*((_QWORD *)this + 3528) + 72);
    if (v49 <= 1)
    {
    }
    else
    {
    }
  }
  else if ((_DWORD)v20)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xD70, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithRound()", "m_node->child1().useKind() == UntypedUse");
    __break(0xC471u);
  }
  else
  {
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithFloor(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t *v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  unsigned int v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v37, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v37, v3, v4, v5, v6, v7, v8);
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = (v18[3] >> 50) & 0x3F;
  if ((_DWORD)v19 == 49)
  {
    v21 = JSC::FTL::Output::doubleFloor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20);
    v22 = *(_DWORD *)(*((_QWORD *)this + 3528) + 72);
    if (v22 > 1)
    {
    }
    else
    {
    }
  }
  else if ((_DWORD)v19)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xD81, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithFloor()", "m_node->child1().useKind() == UntypedUse");
    __break(0xC471u);
  }
  else
  {
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithCeil(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t *v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  unsigned int v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v37, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v37, v3, v4, v5, v6, v7, v8);
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = (v18[3] >> 50) & 0x3F;
  if ((_DWORD)v19 == 49)
  {
    v21 = JSC::FTL::Output::doubleCeil((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20);
    v22 = *(_DWORD *)(*((_QWORD *)this + 3528) + 72);
    if (v22 > 1)
    {
    }
    else
    {
    }
  }
  else if ((_DWORD)v19)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xD92, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithCeil()", "m_node->child1().useKind() == UntypedUse");
    __break(0xC471u);
  }
  else
  {
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithTrunc(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  __int128 *v33;
  unsigned int v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  double result;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  __n128 v54;
  uint64_t v55;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v39 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v40 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v40 != 0x3FFFFFFF) ? (v41 = v40 == -1) : (v41 = 1), v41))
  {
    v42 = 2;
  }
  else if (v40 >> 28)
  {
    v48 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v48 = v39;
    *(_DWORD *)(v48 + 8) = v40;
    v42 = 1;
    v39 = v48;
  }
  else
  {
    v42 = v39;
    v39 = 0;
  }
  v11 = v39 | v42;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v39 | v42) & 1) == 0)
    goto LABEL_3;
  v43 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v44 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v44 != 0x3FFFFFFF) ? (v45 = v44 == -1) : (v45 = 1), v45))
  {
    v46 = 2;
  }
  else if (v44 >> 28)
  {
    v49 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v50 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v50 = v43;
    *(_DWORD *)(v50 + 8) = v49;
    v46 = 1;
    v43 = v50;
  }
  else
  {
    v46 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v43 = 0;
  }
  v47 = v43 | v46;
  v13 = (_QWORD *)(v47 & 0xFFFFFFFF8);
  if ((v47 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = (v18[3] >> 50) & 0x3F;
  if ((_DWORD)v19)
  {
    if ((_DWORD)v19 != 49)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xDA3, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithTrunc()", "m_node->child1().useKind() == UntypedUse");
      __break(0xC471u);
      JUMPOUT(0x197D2E284);
    }
    v33 = JSC::FTL::Output::doubleTrunc((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32);
    v34 = *(_DWORD *)(*((_QWORD *)this + 3528) + 72);
    if (v34 > 1)
    {
      v55 = *((_QWORD *)this + 3528);
      v35 = (uint64_t *)((char *)this + 27960);
      v37 = *((_QWORD *)this + 3521);
      v54.n128_u64[0] = (unint64_t)v33;
      v54.n128_u64[1] = v37;
      goto LABEL_15;
    }
    v55 = *((_QWORD *)this + 3528);
    v31 = 27912;
  }
  else
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v20, v21, v22, v23, v24, v25);
    v51 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v55 = *((_QWORD *)this + 3528);
    v31 = 27936;
  }
  v35 = (uint64_t *)((char *)this + v31);
  v36 = *((_QWORD *)this + 3521);
  v54.n128_u64[0] = v30;
  v54.n128_u64[1] = v36;
LABEL_15:
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v53, v35, &v55, &v54).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithSqrt(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v34, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v34, v3, v4, v5, v6, v7, v8);
  if ((v34 & 1) != 0 && (v34 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v34 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  if ((v18 & 0xFC000000000000) == 0xC4000000000000)
  {
    v20 = (JSC::B3::Value *)JSC::FTL::Output::doubleSqrt((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19);
  }
  else
  {
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithFRound(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double result;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];
  __n128 v48;
  uint64_t v49;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v34 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v35 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v35 != 0x3FFFFFFF) ? (v36 = v35 == -1) : (v36 = 1), v36))
  {
    v37 = 2;
  }
  else if (v35 >> 28)
  {
    v43 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v43 = v34;
    *(_DWORD *)(v43 + 8) = v35;
    v37 = 1;
    v34 = v43;
  }
  else
  {
    v37 = v34;
    v34 = 0;
  }
  v11 = v34 | v37;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v34 | v37) & 1) == 0)
    goto LABEL_3;
  v38 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v39 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v39 != 0x3FFFFFFF) ? (v40 = v39 == -1) : (v40 = 1), v40))
  {
    v41 = 2;
  }
  else if (v39 >> 28)
  {
    v44 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v45 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v45 = v38;
    *(_DWORD *)(v45 + 8) = v44;
    v41 = 1;
    v38 = v45;
  }
  else
  {
    v41 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v38 = 0;
  }
  v42 = v38 | v41;
  v13 = (_QWORD *)(v42 & 0xFFFFFFFF8);
  if ((v42 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  if ((v18 & 0xFC000000000000) == 0xC4000000000000)
  {
    v20 = JSC::FTL::Output::fround((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19);
  }
  else
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v21, v22, v23, v24, v25, v26);
    v47[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  }
  v31 = *((_QWORD *)this + 3528);
  v32 = *((_QWORD *)this + 3521);
  v48.n128_u64[0] = v20;
  v48.n128_u64[1] = v32;
  v49 = v31;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v47, (uint64_t *)this + 3495, &v49, &v48).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithUnary(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v37, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v37, v3, v4, v5, v6, v7, v8);
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0xC4000000000000)
  {
    v20 = *(_DWORD *)(v18 + 72);
    v22 = JSC::FTL::Output::doubleUnary((_QWORD *)this + 3455, v20, v21);
  }
  else
  {
    v24 = JSC::DFG::arithUnaryOperation(*(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueBitNot(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  double result;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[3];
  __n128 v73;
  uint64_t v74;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v59 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v60 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v60 != 0x3FFFFFFF) ? (v61 = v60 == -1) : (v61 = 1), v61))
  {
    v62 = 2;
  }
  else if (v60 >> 28)
  {
    v68 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v68 = v59;
    *(_DWORD *)(v68 + 8) = v60;
    v62 = 1;
    v59 = v68;
  }
  else
  {
    v62 = v59;
    v59 = 0;
  }
  v11 = v59 | v62;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v59 | v62) & 1) == 0)
    goto LABEL_3;
  v63 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v64 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v64 != 0x3FFFFFFF) ? (v65 = v64 == -1) : (v65 = 1), v65))
  {
    v66 = 2;
  }
  else if (v64 >> 28)
  {
    v69 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v70 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v70 = v63;
    *(_DWORD *)(v70 + 8) = v69;
    v66 = 1;
    v63 = v70;
  }
  else
  {
    v66 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v63 = 0;
  }
  v67 = v63 | v66;
  v13 = (_QWORD *)(v67 & 0xFFFFFFFF8);
  if ((v67 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = v18[3];
  v20 = (v19 >> 50) & 0x3F;
  if ((_DWORD)v20)
    v21 = (_DWORD)v20 == 26;
  else
    v21 = 1;
  if (v21)
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v29, v30, v31, v32, v33, v34);
    v72[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  }
  else
  {
    if ((_DWORD)v20 != 27)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xE21, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueBitNot()", "m_node->child1().useKind() == UntypedUse || m_node->child1().useKind() == AnyBigIntUse");
      __break(0xC471u);
      JUMPOUT(0x197D2E8F8);
    }
    v71 = (uint64_t)v40;
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v46, v47, v48, v49, v50, v51);
    v72[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  }
  v56 = *((_QWORD *)this + 3528);
  v57 = *((_QWORD *)this + 3521);
  v73.n128_u64[0] = v39;
  v73.n128_u64[1] = v57;
  v74 = v56;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v72, (uint64_t *)this + 3492, &v74, &v73).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArithBitNot(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v12 = JSC::FTL::Output::bitNot(v10, v11);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueBitAnd(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  uint64_t v41;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v41, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v41, v3, v4, v5, v6, v7, v8);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0x6C000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
  {
  }
  else
  {
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueBitOr(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  uint64_t v41;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v41, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v41, v3, v4, v5, v6, v7, v8);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0x6C000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
  {
  }
  else
  {
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueBitXor(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x8_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int *v86;
  int v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  char v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  WTF **v119;
  uint64_t v120;
  WTF *v121;
  WTF *v122;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  BOOL v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  JSC::B3::Value *v208;
  WTF *v209[2];
  uint64_t v210;
  char v211;
  WTF *v212;
  __n128 v213;
  uint64_t v214;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v166 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v167 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v167 != 0x3FFFFFFF) ? (v168 = v167 == -1) : (v168 = 1), v168))
  {
    v169 = 2;
  }
  else if (v167 >> 28)
  {
    v200 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v200 = v166;
    *(_DWORD *)(v200 + 8) = v167;
    v169 = 1;
    v166 = v200;
  }
  else
  {
    v169 = v166;
    v166 = 0;
  }
  v11 = v166 | v169;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v166 | v169) & 1) == 0)
    goto LABEL_3;
  v193 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v194 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v194 != 0x3FFFFFFF) ? (v195 = v194 == -1) : (v195 = 1), v195))
  {
    v196 = 2;
  }
  else if (v194 >> 28)
  {
    v201 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v201 = v193;
    *(_DWORD *)(v201 + 8) = v194;
    v196 = 1;
    v193 = v201;
  }
  else
  {
    v196 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v193 = 0;
  }
  v197 = v193 | v196;
  v13 = (_QWORD *)(v197 & 0xFFFFFFFF8);
  if ((v197 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  v20 = (v19 >> 50) & 0x3F;
  if (((v19 >> 50) & 0x3F) > 0x1A)
  {
    if ((_DWORD)v20 == 27)
    {
      if ((*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
      {
        v212 = v23;
        v29 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
        v208 = v36;
        JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v42, v43, v44, v45, v46, v47);
        v209[0] = (WTF *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
        v52 = *((_QWORD *)this + 3528);
        v53 = *((_QWORD *)this + 3521);
        v213.n128_u64[0] = v51;
        v213.n128_u64[1] = v53;
        v214 = v52;
        WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v209, (uint64_t *)this + 3492, &v214, &v213);
        return;
      }
    }
    else if ((_DWORD)v20 == 28)
    {
      v21 = *(_QWORD *)(v18 + 32) & 0xFC000000000000;
      v22 = 0x70000000000000;
      goto LABEL_20;
    }
LABEL_14:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x495C, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitXorGenerator]", "node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(BigInt32Use)");
    __break(0xC471u);
    JUMPOUT(0x197D2EC3CLL);
  }
  if (!(_DWORD)v20)
  {
    if ((*(_BYTE *)(v18 + 38) & 0xFC) == 0)
      goto LABEL_21;
    goto LABEL_14;
  }
  if ((_DWORD)v20 != 26)
    goto LABEL_14;
  v21 = *(_QWORD *)(v18 + 32) & 0xFC000000000000;
  v22 = 0x68000000000000;
LABEL_20:
  if (v21 != v22)
    goto LABEL_14;
LABEL_21:
  v77 = *(_QWORD *)(v18 + 24);
  v78 = *((_QWORD *)this + 3505);
  v79 = *(unsigned int *)((v77 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v80 = (uint64_t *)(v78 + 24);
  v81 = (uint64_t *)(v78 + 8);
  if ((v77 & 1) != 0)
    v82 = v80;
  else
    v82 = v81;
  v83 = *v82;
  v84 = *v82 + 32 * v79;
  v85 = *((_DWORD *)this + 7030);
  v86 = (unsigned int *)(v84 + 20);
  v87 = *(_DWORD *)(v84 + 20);
  if (v85 != v87)
  {
    if ((*(_QWORD *)(v84 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v87 ^ v85) >= 2)
      {
        v158 = *(_QWORD *)v84;
        if (*(_QWORD *)v84 != 4)
        {
          *(_QWORD *)v84 = v158 | 2;
          v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v158 & 1) != 0)
          {
            v185 = 2 * *v159;
            while (v185 * 4)
            {
              v186 = *(_QWORD *)&v159[v185];
              if ((*(_BYTE *)(v186 + 19) & 0xC) == 0)
              {
                v187 = *(_QWORD *)(v186 + 96);
                v188 = (v187 & 1) != 0 ? (v187 >> 1) & 3 : *(unsigned __int8 *)(v187 + 4);
                v185 -= 2;
                if (v188 != 2)
                  continue;
              }
              v205 = v83;
              WTF::fastFree((unint64_t)v159, v70, v71, v72, v73, v74, v75, v76);
              v83 = v205;
              v86 = (unsigned int *)(v84 + 20);
              goto LABEL_180;
            }
          }
          else if (v159)
          {
            if ((*((_BYTE *)v159 + 19) & 0xC) != 0
              || ((v160 = *((_QWORD *)v159 + 12), (v160 & 1) != 0)
                ? (v161 = (v160 >> 1) & 3)
                : (v161 = *(unsigned __int8 *)(v160 + 4)),
                  v161 == 2))
            {
LABEL_180:
              *(_QWORD *)v84 = 4;
            }
          }
        }
        *(_DWORD *)(v83 + 32 * v79 + 16) = -21020677;
      }
      if ((v85 & 1) != 0)
        *(_QWORD *)v84 &= ~2uLL;
    }
    *v86 = v85;
  }
  v88 = *(_QWORD *)(v84 + 8);
  if ((v88 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v88 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v88 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v88 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v88 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v89 = 126;
          else
            v89 = 6;
        }
        else
        {
          v89 = 4;
        }
      }
      else
      {
        v89 = 2;
      }
    }
    else
    {
      v89 = 3;
    }
  }
  else
  {
    v89 = 32;
  }
  v90 = *(_QWORD *)(v18 + 32);
  v91 = *((_QWORD *)this + 3505);
  v92 = *(unsigned int *)((v90 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v93 = (uint64_t *)(v91 + 24);
  v94 = (uint64_t *)(v91 + 8);
  if ((v90 & 1) != 0)
    v95 = v93;
  else
    v95 = v94;
  v96 = *v95;
  v97 = (uint64_t *)(v96 + 32 * v92);
  v98 = *((_DWORD *)this + 7030);
  v99 = *((_DWORD *)v97 + 5);
  if (v98 != v99)
  {
    if ((v97[1] & 0x2800FFFFFFF7) != 0)
    {
      if ((v99 ^ v98) >= 2)
      {
        v162 = *v97;
        if (*v97 != 4)
        {
          *v97 = v162 | 2;
          v163 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v162 & 1) != 0)
          {
            v189 = 2 * *v163;
            while (v189 * 4)
            {
              v190 = *(_QWORD *)&v163[v189];
              if ((*(_BYTE *)(v190 + 19) & 0xC) == 0)
              {
                v191 = *(_QWORD *)(v190 + 96);
                v192 = (v191 & 1) != 0 ? (v191 >> 1) & 3 : *(unsigned __int8 *)(v191 + 4);
                v189 -= 2;
                if (v192 != 2)
                  continue;
              }
              v206 = v96;
              v207 = v92;
              WTF::fastFree((unint64_t)v163, v70, v71, v72, v73, v74, v75, v76);
              v96 = v206;
              v92 = v207;
              goto LABEL_182;
            }
          }
          else if (v163)
          {
            if ((*((_BYTE *)v163 + 19) & 0xC) != 0
              || ((v164 = *((_QWORD *)v163 + 12), (v164 & 1) != 0)
                ? (v165 = (v164 >> 1) & 3)
                : (v165 = *(unsigned __int8 *)(v164 + 4)),
                  v165 == 2))
            {
LABEL_182:
              *v97 = 4;
            }
          }
        }
        *(_DWORD *)(v96 + 32 * v92 + 16) = -21020677;
      }
      if ((v98 & 1) != 0)
        *v97 &= ~2uLL;
    }
    *((_DWORD *)v97 + 5) = v98;
  }
  v100 = v97[1];
  if ((v100 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v100 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v100 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v100 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v100 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v101 = 126;
          else
            v101 = 6;
        }
        else
        {
          v101 = 4;
        }
      }
      else
      {
        v101 = 2;
      }
    }
    else
    {
      v101 = 3;
    }
  }
  else
  {
    v101 = 32;
  }
  v102 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v209[1] = 0;
  LOBYTE(v210) = 3;
  JSC::B3::StackmapValue::append(v102, v54, (unint64_t)&v209[1]);
  v209[0] = v55;
  v209[1] = 0;
  LOBYTE(v210) = 3;
  JSC::B3::StackmapValue::append(v102, (uint64_t)v55, (unint64_t)&v209[1]);
  v103 = *((_QWORD *)this + 3488);
  *(_OWORD *)v209 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v102, v103, (unint64_t)v209);
  v104 = *((_QWORD *)this + 3487);
  *(_OWORD *)v209 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v102, v104, (unint64_t)v209);
  *((_BYTE *)v102 + 168) = 1;
  *((_QWORD *)v102 + 8) |= 0x30000uLL;
  *((_QWORD *)v102 + 10) |= 0x30000uLL;
  v209[0] = (WTF *)&v210;
  v210 = 0;
  v211 = 5;
  v209[1] = (WTF *)0x100000001;
  v117 = *((_QWORD *)v102 + 17);
  v118 = (_QWORD *)v102 + 19;
  if ((__int128 *)v117 == (__int128 *)((char *)v102 + 152))
  {
    v119 = &v212;
  }
  else if (v117)
  {
    *((_QWORD *)v102 + 17) = 0;
    *((_DWORD *)v102 + 36) = 0;
    WTF::fastFree(v117, v110, v111, v112, v113, v114, v115, v116);
    v198 = v209[0];
    *((_QWORD *)v102 + 17) = v118;
    v199 = HIDWORD(v209[1]);
    if (v198 != (WTF *)&v210)
    {
      *((_QWORD *)v102 + 17) = v198;
      *((_DWORD *)v102 + 36) = v209[1];
      *((_DWORD *)v102 + 37) = v199;
      goto LABEL_54;
    }
    if (!HIDWORD(v209[1]))
    {
      *((_QWORD *)v102 + 18) = LODWORD(v209[1]);
      goto LABEL_54;
    }
    v119 = (WTF **)(&v210 + 2 * HIDWORD(v209[1]));
  }
  else
  {
    *((_QWORD *)v102 + 17) = v118;
    v119 = &v212;
  }
  v120 = 0;
  do
  {
    *(_OWORD *)&v118[v120] = *(_OWORD *)((char *)&v210 + v120 * 8);
    v120 += 2;
  }
  while ((WTF **)((char *)&v210 + v120 * 8) != v119);
  v121 = v209[0];
  v122 = v209[1];
  HIDWORD(v209[1]) = 0;
  *((_QWORD *)v102 + 18) = v122;
  if (&v210 != (uint64_t *)v121 && v121 != 0)
  {
    v209[0] = 0;
    LODWORD(v209[1]) = 0;
    WTF::fastFree((unint64_t)v121, v110, v111, v112, v113, v114, v115, v116);
  }
LABEL_54:
  v124 = *((_QWORD *)this + 1);
  v125 = *(_QWORD *)v18;
  if ((*(_QWORD *)v18 & 1) != 0)
  {
    v170 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
    if ((v125 & 2) != 0
      || ((v171 = *(unsigned int *)((v125 & 0xFFFFFFFF8) + 8), (_DWORD)v171 != 0x3FFFFFFF)
        ? (v172 = (_DWORD)v171 == -1)
        : (v172 = 1),
          v172))
    {
      v173 = 2;
    }
    else if (v171 >> 28)
    {
      v202 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v202 = v170;
      *(_DWORD *)(v202 + 8) = v171;
      v173 = 1;
      v170 = v202;
    }
    else
    {
      v173 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
      v170 = v171 << 36;
    }
    v125 = v170 | v173;
  }
  v126 = v212;
  if (v212)
  {
    do
      v127 = __ldaxr((unsigned int *)v126);
    while (__stlxr(v127 + 1, (unsigned int *)v126));
  }
  v128 = v125;
  if ((v125 & 1) != 0)
  {
    v174 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
    if ((v125 & 2) != 0
      || ((v175 = *(unsigned int *)((v125 & 0xFFFFFFFF8) + 8), (_DWORD)v175 != 0x3FFFFFFF)
        ? (v176 = (_DWORD)v175 == -1)
        : (v176 = 1),
          v176))
    {
      v177 = 2;
    }
    else if (v175 >> 28)
    {
      v203 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v203 = v174;
      *(_DWORD *)(v203 + 8) = v175;
      v177 = 1;
      v174 = v203;
    }
    else
    {
      v177 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
      v174 = v175 << 36;
    }
    v128 = v174 | v177;
  }
  v129 = WTF::fastMalloc((WTF *)0x48);
  v137 = v129;
  *(_DWORD *)(v129 + 8) = 1;
  *(_QWORD *)v129 = &off_1E3575A60;
  if (v126)
  {
    do
      v138 = __ldaxr((unsigned int *)v126);
    while (__stlxr(v138 + 1, (unsigned int *)v126));
  }
  *(_QWORD *)(v129 + 16) = v126;
  *(_BYTE *)(v129 + 24) = v89;
  *(_BYTE *)(v129 + 25) = 0;
  *(_QWORD *)(v129 + 26) = 0;
  *(_BYTE *)(v129 + 34) = v101;
  *(_BYTE *)(v129 + 35) = 0;
  *(_QWORD *)(v129 + 36) = 0;
  v139 = v128;
  *(_QWORD *)(v129 + 48) = v124;
  if ((v128 & 1) != 0)
  {
    v178 = *(_QWORD *)(v128 & 0xFFFFFFFF8);
    if ((v128 & 2) != 0
      || (v179 = *(unsigned int *)((v128 & 0xFFFFFFFF8) + 8), (_DWORD)v179 == 0x3FFFFFFF)
      || (_DWORD)v179 == -1)
    {
      v180 = 2;
    }
    else if (v179 >> 28)
    {
      v204 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v204 = v178;
      *(_DWORD *)(v204 + 8) = v179;
      v180 = 1;
      v178 = v204;
    }
    else
    {
      v180 = *(_QWORD *)(v128 & 0xFFFFFFFF8);
      v178 = v179 << 36;
    }
    v139 = v178 | v180;
  }
  *(_QWORD *)(v137 + 56) = v139;
  *(_QWORD *)(v137 + 64) = operationValueBitXor;
  v140 = (unsigned int *)*((_QWORD *)v102 + 7);
  *((_QWORD *)v102 + 7) = v137;
  if (!v140)
    goto LABEL_65;
  v141 = v140 + 2;
  do
  {
    v142 = __ldaxr(v141);
    v143 = v142 - 1;
  }
  while (__stlxr(v143, v141));
  if (v143)
  {
LABEL_65:
    if ((v128 & 1) == 0)
      goto LABEL_66;
LABEL_138:
    if ((v128 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v128 & 0xFFFFFFFF8, v130, v131, v132, v133, v134, v135, v136);
    goto LABEL_66;
  }
  atomic_store(1u, v140 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v140 + 8))(v140);
  if ((v128 & 1) != 0)
    goto LABEL_138;
LABEL_66:
  if (v126)
  {
    do
    {
      v144 = __ldaxr((unsigned int *)v126);
      v145 = v144 - 1;
    }
    while (__stlxr(v145, (unsigned int *)v126));
    if (!v145)
    {
      atomic_store(1u, (unsigned int *)v126);
      v181 = *((_QWORD *)v126 + 4);
      if ((v181 & 1) != 0 && (v181 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v181 & 0xFFFFFFFF8, v130, v131, v132, v133, v134, v135, v136);
      v182 = *((_QWORD *)v126 + 3);
      if ((v182 & 1) != 0 && (v182 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v182 & 0xFFFFFFFF8, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree((unint64_t)v126, v130, v131, v132, v133, v134, v135, v136);
    }
  }
  v146 = *((_QWORD *)this + 3528);
  v147 = *((_QWORD *)this + 3521);
  v213.n128_u64[0] = (unint64_t)v102;
  v213.n128_u64[1] = v147;
  v214 = v146;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v209, (uint64_t *)this + 3492, &v214, &v213);
  if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v125 & 0xFFFFFFFF8, v148, v149, v150, v151, v152, v153, v154);
  v155 = v212;
  v212 = 0;
  if (v155)
  {
    do
    {
      v156 = __ldaxr((unsigned int *)v155);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, (unsigned int *)v155));
    if (!v157)
    {
      atomic_store(1u, (unsigned int *)v155);
      v183 = *((_QWORD *)v155 + 4);
      if ((v183 & 1) != 0 && (v183 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v183 & 0xFFFFFFFF8, v148, v149, v150, v151, v152, v153, v154);
      v184 = *((_QWORD *)v155 + 3);
      if ((v184 & 1) != 0 && (v184 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v184 & 0xFFFFFFFF8, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueBitRShift(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  uint64_t v41;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v41, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v41, v3, v4, v5, v6, v7, v8);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0x6C000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
  {
  }
  else
  {
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileValueBitLShift(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x8_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int *v86;
  int v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  char v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  WTF **v119;
  uint64_t v120;
  WTF *v121;
  WTF *v122;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  BOOL v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  JSC::B3::Value *v208;
  WTF *v209[2];
  uint64_t v210;
  char v211;
  WTF *v212;
  __n128 v213;
  uint64_t v214;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v166 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v167 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v167 != 0x3FFFFFFF) ? (v168 = v167 == -1) : (v168 = 1), v168))
  {
    v169 = 2;
  }
  else if (v167 >> 28)
  {
    v200 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v200 = v166;
    *(_DWORD *)(v200 + 8) = v167;
    v169 = 1;
    v166 = v200;
  }
  else
  {
    v169 = v166;
    v166 = 0;
  }
  v11 = v166 | v169;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v166 | v169) & 1) == 0)
    goto LABEL_3;
  v193 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v194 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v194 != 0x3FFFFFFF) ? (v195 = v194 == -1) : (v195 = 1), v195))
  {
    v196 = 2;
  }
  else if (v194 >> 28)
  {
    v201 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v201 = v193;
    *(_DWORD *)(v201 + 8) = v194;
    v196 = 1;
    v193 = v201;
  }
  else
  {
    v196 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v193 = 0;
  }
  v197 = v193 | v196;
  v13 = (_QWORD *)(v197 & 0xFFFFFFFF8);
  if ((v197 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  v20 = (v19 >> 50) & 0x3F;
  if (((v19 >> 50) & 0x3F) > 0x1A)
  {
    if ((_DWORD)v20 == 27)
    {
      if ((*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x6C000000000000)
      {
        v212 = v23;
        v29 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
        v208 = v36;
        JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v42, v43, v44, v45, v46, v47);
        v209[0] = (WTF *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
        v52 = *((_QWORD *)this + 3528);
        v53 = *((_QWORD *)this + 3521);
        v213.n128_u64[0] = v51;
        v213.n128_u64[1] = v53;
        v214 = v52;
        WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v209, (uint64_t *)this + 3492, &v214, &v213);
        return;
      }
    }
    else if ((_DWORD)v20 == 28)
    {
      v21 = *(_QWORD *)(v18 + 32) & 0xFC000000000000;
      v22 = 0x70000000000000;
      goto LABEL_20;
    }
LABEL_14:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0xECA, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueBitLShift()", "m_node->isBinaryUseKind(UntypedUse) || m_node->isBinaryUseKind(AnyBigIntUse) || m_node->isBinaryUseKind(BigInt32Use)");
    __break(0xC471u);
    JUMPOUT(0x197D2F808);
  }
  if (!(_DWORD)v20)
  {
    if ((*(_BYTE *)(v18 + 38) & 0xFC) == 0)
      goto LABEL_21;
    goto LABEL_14;
  }
  if ((_DWORD)v20 != 26)
    goto LABEL_14;
  v21 = *(_QWORD *)(v18 + 32) & 0xFC000000000000;
  v22 = 0x68000000000000;
LABEL_20:
  if (v21 != v22)
    goto LABEL_14;
LABEL_21:
  v77 = *(_QWORD *)(v18 + 24);
  v78 = *((_QWORD *)this + 3505);
  v79 = *(unsigned int *)((v77 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v80 = (uint64_t *)(v78 + 24);
  v81 = (uint64_t *)(v78 + 8);
  if ((v77 & 1) != 0)
    v82 = v80;
  else
    v82 = v81;
  v83 = *v82;
  v84 = *v82 + 32 * v79;
  v85 = *((_DWORD *)this + 7030);
  v86 = (unsigned int *)(v84 + 20);
  v87 = *(_DWORD *)(v84 + 20);
  if (v85 != v87)
  {
    if ((*(_QWORD *)(v84 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v87 ^ v85) >= 2)
      {
        v158 = *(_QWORD *)v84;
        if (*(_QWORD *)v84 != 4)
        {
          *(_QWORD *)v84 = v158 | 2;
          v159 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v158 & 1) != 0)
          {
            v185 = 2 * *v159;
            while (v185 * 4)
            {
              v186 = *(_QWORD *)&v159[v185];
              if ((*(_BYTE *)(v186 + 19) & 0xC) == 0)
              {
                v187 = *(_QWORD *)(v186 + 96);
                v188 = (v187 & 1) != 0 ? (v187 >> 1) & 3 : *(unsigned __int8 *)(v187 + 4);
                v185 -= 2;
                if (v188 != 2)
                  continue;
              }
              v205 = v83;
              WTF::fastFree((unint64_t)v159, v70, v71, v72, v73, v74, v75, v76);
              v83 = v205;
              v86 = (unsigned int *)(v84 + 20);
              goto LABEL_180;
            }
          }
          else if (v159)
          {
            if ((*((_BYTE *)v159 + 19) & 0xC) != 0
              || ((v160 = *((_QWORD *)v159 + 12), (v160 & 1) != 0)
                ? (v161 = (v160 >> 1) & 3)
                : (v161 = *(unsigned __int8 *)(v160 + 4)),
                  v161 == 2))
            {
LABEL_180:
              *(_QWORD *)v84 = 4;
            }
          }
        }
        *(_DWORD *)(v83 + 32 * v79 + 16) = -21020677;
      }
      if ((v85 & 1) != 0)
        *(_QWORD *)v84 &= ~2uLL;
    }
    *v86 = v85;
  }
  v88 = *(_QWORD *)(v84 + 8);
  if ((v88 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v88 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v88 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v88 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v88 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v89 = 126;
          else
            v89 = 6;
        }
        else
        {
          v89 = 4;
        }
      }
      else
      {
        v89 = 2;
      }
    }
    else
    {
      v89 = 3;
    }
  }
  else
  {
    v89 = 32;
  }
  v90 = *(_QWORD *)(v18 + 32);
  v91 = *((_QWORD *)this + 3505);
  v92 = *(unsigned int *)((v90 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v93 = (uint64_t *)(v91 + 24);
  v94 = (uint64_t *)(v91 + 8);
  if ((v90 & 1) != 0)
    v95 = v93;
  else
    v95 = v94;
  v96 = *v95;
  v97 = (uint64_t *)(v96 + 32 * v92);
  v98 = *((_DWORD *)this + 7030);
  v99 = *((_DWORD *)v97 + 5);
  if (v98 != v99)
  {
    if ((v97[1] & 0x2800FFFFFFF7) != 0)
    {
      if ((v99 ^ v98) >= 2)
      {
        v162 = *v97;
        if (*v97 != 4)
        {
          *v97 = v162 | 2;
          v163 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v162 & 1) != 0)
          {
            v189 = 2 * *v163;
            while (v189 * 4)
            {
              v190 = *(_QWORD *)&v163[v189];
              if ((*(_BYTE *)(v190 + 19) & 0xC) == 0)
              {
                v191 = *(_QWORD *)(v190 + 96);
                v192 = (v191 & 1) != 0 ? (v191 >> 1) & 3 : *(unsigned __int8 *)(v191 + 4);
                v189 -= 2;
                if (v192 != 2)
                  continue;
              }
              v206 = v96;
              v207 = v92;
              WTF::fastFree((unint64_t)v163, v70, v71, v72, v73, v74, v75, v76);
              v96 = v206;
              v92 = v207;
              goto LABEL_182;
            }
          }
          else if (v163)
          {
            if ((*((_BYTE *)v163 + 19) & 0xC) != 0
              || ((v164 = *((_QWORD *)v163 + 12), (v164 & 1) != 0)
                ? (v165 = (v164 >> 1) & 3)
                : (v165 = *(unsigned __int8 *)(v164 + 4)),
                  v165 == 2))
            {
LABEL_182:
              *v97 = 4;
            }
          }
        }
        *(_DWORD *)(v96 + 32 * v92 + 16) = -21020677;
      }
      if ((v98 & 1) != 0)
        *v97 &= ~2uLL;
    }
    *((_DWORD *)v97 + 5) = v98;
  }
  v100 = v97[1];
  if ((v100 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v100 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v100 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v100 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v100 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v101 = 126;
          else
            v101 = 6;
        }
        else
        {
          v101 = 4;
        }
      }
      else
      {
        v101 = 2;
      }
    }
    else
    {
      v101 = 3;
    }
  }
  else
  {
    v101 = 32;
  }
  v102 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v209[1] = 0;
  LOBYTE(v210) = 3;
  JSC::B3::StackmapValue::append(v102, v54, (unint64_t)&v209[1]);
  v209[0] = v55;
  v209[1] = 0;
  LOBYTE(v210) = 3;
  JSC::B3::StackmapValue::append(v102, (uint64_t)v55, (unint64_t)&v209[1]);
  v103 = *((_QWORD *)this + 3488);
  *(_OWORD *)v209 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v102, v103, (unint64_t)v209);
  v104 = *((_QWORD *)this + 3487);
  *(_OWORD *)v209 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v102, v104, (unint64_t)v209);
  *((_BYTE *)v102 + 168) = 1;
  *((_QWORD *)v102 + 8) |= 0x30000uLL;
  *((_QWORD *)v102 + 10) |= 0x30000uLL;
  v209[0] = (WTF *)&v210;
  v210 = 0;
  v211 = 5;
  v209[1] = (WTF *)0x100000001;
  v117 = *((_QWORD *)v102 + 17);
  v118 = (_QWORD *)v102 + 19;
  if ((__int128 *)v117 == (__int128 *)((char *)v102 + 152))
  {
    v119 = &v212;
  }
  else if (v117)
  {
    *((_QWORD *)v102 + 17) = 0;
    *((_DWORD *)v102 + 36) = 0;
    WTF::fastFree(v117, v110, v111, v112, v113, v114, v115, v116);
    v198 = v209[0];
    *((_QWORD *)v102 + 17) = v118;
    v199 = HIDWORD(v209[1]);
    if (v198 != (WTF *)&v210)
    {
      *((_QWORD *)v102 + 17) = v198;
      *((_DWORD *)v102 + 36) = v209[1];
      *((_DWORD *)v102 + 37) = v199;
      goto LABEL_54;
    }
    if (!HIDWORD(v209[1]))
    {
      *((_QWORD *)v102 + 18) = LODWORD(v209[1]);
      goto LABEL_54;
    }
    v119 = (WTF **)(&v210 + 2 * HIDWORD(v209[1]));
  }
  else
  {
    *((_QWORD *)v102 + 17) = v118;
    v119 = &v212;
  }
  v120 = 0;
  do
  {
    *(_OWORD *)&v118[v120] = *(_OWORD *)((char *)&v210 + v120 * 8);
    v120 += 2;
  }
  while ((WTF **)((char *)&v210 + v120 * 8) != v119);
  v121 = v209[0];
  v122 = v209[1];
  HIDWORD(v209[1]) = 0;
  *((_QWORD *)v102 + 18) = v122;
  if (&v210 != (uint64_t *)v121 && v121 != 0)
  {
    v209[0] = 0;
    LODWORD(v209[1]) = 0;
    WTF::fastFree((unint64_t)v121, v110, v111, v112, v113, v114, v115, v116);
  }
LABEL_54:
  v124 = *((_QWORD *)this + 1);
  v125 = *(_QWORD *)v18;
  if ((*(_QWORD *)v18 & 1) != 0)
  {
    v170 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
    if ((v125 & 2) != 0
      || ((v171 = *(unsigned int *)((v125 & 0xFFFFFFFF8) + 8), (_DWORD)v171 != 0x3FFFFFFF)
        ? (v172 = (_DWORD)v171 == -1)
        : (v172 = 1),
          v172))
    {
      v173 = 2;
    }
    else if (v171 >> 28)
    {
      v202 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v202 = v170;
      *(_DWORD *)(v202 + 8) = v171;
      v173 = 1;
      v170 = v202;
    }
    else
    {
      v173 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
      v170 = v171 << 36;
    }
    v125 = v170 | v173;
  }
  v126 = v212;
  if (v212)
  {
    do
      v127 = __ldaxr((unsigned int *)v126);
    while (__stlxr(v127 + 1, (unsigned int *)v126));
  }
  v128 = v125;
  if ((v125 & 1) != 0)
  {
    v174 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
    if ((v125 & 2) != 0
      || ((v175 = *(unsigned int *)((v125 & 0xFFFFFFFF8) + 8), (_DWORD)v175 != 0x3FFFFFFF)
        ? (v176 = (_DWORD)v175 == -1)
        : (v176 = 1),
          v176))
    {
      v177 = 2;
    }
    else if (v175 >> 28)
    {
      v203 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v203 = v174;
      *(_DWORD *)(v203 + 8) = v175;
      v177 = 1;
      v174 = v203;
    }
    else
    {
      v177 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
      v174 = v175 << 36;
    }
    v128 = v174 | v177;
  }
  v129 = WTF::fastMalloc((WTF *)0x48);
  v137 = v129;
  *(_DWORD *)(v129 + 8) = 1;
  *(_QWORD *)v129 = &off_1E3575B00;
  if (v126)
  {
    do
      v138 = __ldaxr((unsigned int *)v126);
    while (__stlxr(v138 + 1, (unsigned int *)v126));
  }
  *(_QWORD *)(v129 + 16) = v126;
  *(_BYTE *)(v129 + 24) = v89;
  *(_BYTE *)(v129 + 25) = 0;
  *(_QWORD *)(v129 + 26) = 0;
  *(_BYTE *)(v129 + 34) = v101;
  *(_BYTE *)(v129 + 35) = 0;
  *(_QWORD *)(v129 + 36) = 0;
  v139 = v128;
  *(_QWORD *)(v129 + 48) = v124;
  if ((v128 & 1) != 0)
  {
    v178 = *(_QWORD *)(v128 & 0xFFFFFFFF8);
    if ((v128 & 2) != 0
      || (v179 = *(unsigned int *)((v128 & 0xFFFFFFFF8) + 8), (_DWORD)v179 == 0x3FFFFFFF)
      || (_DWORD)v179 == -1)
    {
      v180 = 2;
    }
    else if (v179 >> 28)
    {
      v204 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v204 = v178;
      *(_DWORD *)(v204 + 8) = v179;
      v180 = 1;
      v178 = v204;
    }
    else
    {
      v180 = *(_QWORD *)(v128 & 0xFFFFFFFF8);
      v178 = v179 << 36;
    }
    v139 = v178 | v180;
  }
  *(_QWORD *)(v137 + 56) = v139;
  *(_QWORD *)(v137 + 64) = operationValueBitLShift;
  v140 = (unsigned int *)*((_QWORD *)v102 + 7);
  *((_QWORD *)v102 + 7) = v137;
  if (!v140)
    goto LABEL_65;
  v141 = v140 + 2;
  do
  {
    v142 = __ldaxr(v141);
    v143 = v142 - 1;
  }
  while (__stlxr(v143, v141));
  if (v143)
  {
LABEL_65:
    if ((v128 & 1) == 0)
      goto LABEL_66;
LABEL_138:
    if ((v128 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v128 & 0xFFFFFFFF8, v130, v131, v132, v133, v134, v135, v136);
    goto LABEL_66;
  }
  atomic_store(1u, v140 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v140 + 8))(v140);
  if ((v128 & 1) != 0)
    goto LABEL_138;
LABEL_66:
  if (v126)
  {
    do
    {
      v144 = __ldaxr((unsigned int *)v126);
      v145 = v144 - 1;
    }
    while (__stlxr(v145, (unsigned int *)v126));
    if (!v145)
    {
      atomic_store(1u, (unsigned int *)v126);
      v181 = *((_QWORD *)v126 + 4);
      if ((v181 & 1) != 0 && (v181 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v181 & 0xFFFFFFFF8, v130, v131, v132, v133, v134, v135, v136);
      v182 = *((_QWORD *)v126 + 3);
      if ((v182 & 1) != 0 && (v182 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v182 & 0xFFFFFFFF8, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree((unint64_t)v126, v130, v131, v132, v133, v134, v135, v136);
    }
  }
  v146 = *((_QWORD *)this + 3528);
  v147 = *((_QWORD *)this + 3521);
  v213.n128_u64[0] = (unint64_t)v102;
  v213.n128_u64[1] = v147;
  v214 = v146;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v209, (uint64_t *)this + 3492, &v214, &v213);
  if ((v125 & 1) != 0 && (v125 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v125 & 0xFFFFFFFF8, v148, v149, v150, v151, v152, v153, v154);
  v155 = v212;
  v212 = 0;
  if (v155)
  {
    do
    {
      v156 = __ldaxr((unsigned int *)v155);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, (unsigned int *)v155));
    if (!v157)
    {
      atomic_store(1u, (unsigned int *)v155);
      v183 = *((_QWORD *)v155 + 4);
      if ((v183 & 1) != 0 && (v183 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v183 & 0xFFFFFFFF8, v148, v149, v150, v151, v152, v153, v154);
      v184 = *((_QWORD *)v155 + 3);
      if ((v184 & 1) != 0 && (v184 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v184 & 0xFFFFFFFF8, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUInt32ToNumber(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  JSC::FTL::Output *v11;
  JSC::B3::Value *v12;
  int8x8_t v13;
  JSC::B3::Value *v15;

  v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  if (*(_DWORD *)(*((_QWORD *)this + 3528) + 72) >= 4u)
  {
    v15 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v11, (uint64_t)v10, 2);
  }
  else
  {
    v12 = JSC::FTL::Output::lessThan(v11, v10, *((JSC::B3::Value **)this + 3457));
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckIdent(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t Ptr;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  int8x8_t v17;
  JSC::B3::Value *v18;

  v10 = *((_QWORD *)this + 3528);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = *(_QWORD *)(v10 + 24);
  if ((v12 & 0xFC000000000000) == 0x50000000000000)
  {
  }
  else
  {
    Ptr = JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6592));
  }
  v14 = (JSC::B3::Value *)Ptr;
  v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11);
  v16 = JSC::FTL::Output::notEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14, v15);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetById(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned int v9;
  JSC::DFG::Graph *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  __int128 *v22;
  uint64_t *v23;
  unint64_t v24;
  double result;
  JSC::B3::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value **v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  uint64_t v100;
  uint64_t v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unsigned int v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  JSC::FTL::Output *v148;
  JSC::FTL::Output *v149;
  JSC::B3::Value *v150;
  __n128 v151;
  uint64_t v152;
  char v153;
  _QWORD *v154;

  v9 = a2;
  v11 = *(JSC::DFG::Graph **)a1;
  v12 = *(_QWORD *)(a1 + 28192);
  if ((v12 & 1) == 0)
  {
    v13 = *((_QWORD *)v11 + 4);
LABEL_3:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
LABEL_4:
    v17 = v14;
    goto LABEL_5;
  }
  v135 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v136 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v136 != 0x3FFFFFFF) ? (v137 = v136 == -1) : (v137 = 1), v137))
  {
    v138 = 2;
  }
  else if (v136 >> 28)
  {
    v145 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v145 = v135;
    *(_DWORD *)(v145 + 8) = v136;
    v138 = 1;
    v135 = v145;
  }
  else
  {
    v138 = v135;
    v135 = 0;
  }
  v12 = v135 | v138;
  v13 = *((_QWORD *)v11 + 4);
  if (((v135 | v138) & 1) == 0)
    goto LABEL_3;
  v139 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v140 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v140 != 0x3FFFFFFF) ? (v141 = v140 == -1) : (v141 = 1), v141))
  {
    v142 = 2;
  }
  else if (v140 >> 28)
  {
    v146 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v146 = v139;
    *(_DWORD *)(v146 + 8) = v140;
    v142 = 1;
    v139 = v146;
  }
  else
  {
    v142 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v139 = 0;
  }
  v143 = v139 | v142;
  v14 = (_QWORD *)(v143 & 0xFFFFFFFF8);
  if ((v143 & 1) == 0)
  {
    v16 = 0;
    v15 = 1;
    goto LABEL_4;
  }
  v15 = 0;
  v16 = 0;
  v17 = (_QWORD *)*v14;
LABEL_5:
  if (v17)
    v13 = v17[1];
  v18 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(unint64_t **)(a1 + 28224);
  v20 = (v19[3] >> 50) & 0x3F;
  if ((_DWORD)v20 == 8)
  {
    v154 = *(_QWORD **)(a1 + 28224);
    v23 = (uint64_t *)(a1 + 27936);
    v24 = *(_QWORD *)(a1 + 28168);
    v151.n128_u64[0] = (unint64_t)v22;
    goto LABEL_11;
  }
  if ((_DWORD)v20)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)v19, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x100B, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetById(AccessType)", "Bad use kind");
    __break(0xC471u);
    JUMPOUT(0x197D30A7CLL);
  }
  v150 = v26;
  v27 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v28 = v27;
  v29 = *(_QWORD *)(a1 + 27784);
  if (v29)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v29, v27);
  }
  else
  {
    v151.n128_u64[0] = v27;
    v107 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v107 = 0u;
    *((_OWORD *)v107 + 1) = 0u;
    v107[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v107;
    v154 = v107;
    v107[2] = v28;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v151, (uint64_t *)&v154, v108, v109, v110, v111, v112, (uint64_t)&v152);
    v113 = v154;
    v114 = *(_QWORD **)(a1 + 27832);
    *v154 = a1 + 27824;
    v113[1] = v114;
    *v114 = v113;
    *(_QWORD *)(a1 + 27832) = v113;
  }
  v30 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v31 = v30;
  v32 = *(_QWORD *)(a1 + 27784);
  if (v32)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v32, v30);
  }
  else
  {
    v151.n128_u64[0] = v30;
    v115 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v115 = 0u;
    *((_OWORD *)v115 + 1) = 0u;
    v115[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v115;
    v154 = v115;
    v115[2] = v31;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v151, (uint64_t *)&v154, v116, v117, v118, v119, v120, (uint64_t)&v152);
    v121 = v154;
    v122 = *(_QWORD **)(a1 + 27832);
    *v154 = a1 + 27824;
    v121[1] = v122;
    *v122 = v121;
    *(_QWORD *)(a1 + 27832) = v121;
  }
  v33 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v34 = v33;
  v35 = *(_QWORD *)(a1 + 27784);
  if (v35)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v35, v33);
  }
  else
  {
    v151.n128_u64[0] = v33;
    v123 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v123 = 0u;
    *((_OWORD *)v123 + 1) = 0u;
    v123[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v123;
    v154 = v123;
    v123[2] = v34;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v151, (uint64_t *)&v154, v124, v125, v126, v127, v128, (uint64_t)&v152);
    v129 = v154;
    v130 = *(_QWORD **)(a1 + 27832);
    *v154 = a1 + 27824;
    v129[1] = v130;
    *v130 = v129;
    *(_QWORD *)(a1 + 27832) = v129;
  }
  v47 = (JSC::B3::Value **)(a1 + 27640);
  if ((v42 & 0xFFFFD3FF00000008) == 0)
  {
LABEL_50:
    v53 = *v47;
    if (*v47)
      goto LABEL_24;
    goto LABEL_21;
  }
  if ((v42 & 0x2C00FFFFFFF7) == 0)
  {
    v47 = (JSC::B3::Value **)(a1 + 27648);
    goto LABEL_50;
  }
LABEL_21:
  v148 = (JSC::FTL::Output *)v18;
  v48 = v28;
  v49 = v26;
  v50 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v26, *(JSC::B3::Value **)(a1 + 27904));
  v51 = *(_QWORD *)(a1 + 27776);
  v52 = *(JSC::B3::Value **)(a1 + 27760);
  v53 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v50, *(_QWORD *)(a1 + 27672));
  JSC::B3::Procedure::addValueImpl(v52, v53);
  v152 = (uint64_t)v53;
  v54 = (char **)(v51 + 8);
  v55 = *(unsigned int *)(v51 + 20);
  if ((_DWORD)v55 == *(_DWORD *)(v51 + 16))
  {
    v134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54, v55 + 1, (unint64_t)&v152);
    v55 = *(unsigned int *)(v51 + 20);
    *(_QWORD *)(*(_QWORD *)(v51 + 8) + 8 * v55) = *(_QWORD *)v134;
    v56 = v152;
  }
  else
  {
    *(_QWORD *)&(*v54)[8 * v55] = v53;
    v56 = (uint64_t)v53;
  }
  *(_DWORD *)(v51 + 20) = v55 + 1;
  *(_QWORD *)(v56 + 32) = v51;
  v26 = v49;
  v28 = v48;
  v18 = (unint64_t)v148;
LABEL_24:
  v149 = (JSC::FTL::Output *)(a1 + 27640);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v53, v28, v31, NAN, NAN, v43, v44, v45, v46);
  *(_QWORD *)(a1 + 27776) = v28;
  v147 = *(_QWORD *)(a1 + 27784);
  v57 = v31;
  *(_QWORD *)(a1 + 27784) = v31;
  v59 = *(_QWORD *)(a1 + 27776);
  v60 = *(JSC::B3::Value **)(a1 + 27760);
  v61 = *(_QWORD *)(a1 + 27768);
  v62 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v62 + 8) = -1;
  *(_WORD *)(v62 + 12) = 152;
  *(_BYTE *)(v62 + 20) = 1;
  *(_QWORD *)v62 = &unk_1E357EDA0;
  *(_DWORD *)(v62 + 16) = 0;
  *(_QWORD *)(v62 + 40) = 0;
  *(_QWORD *)(v62 + 48) = v58;
  *(_QWORD *)(v62 + 24) = v61;
  *(_QWORD *)(v62 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v60, (JSC::B3::Value *)v62);
  v152 = v62;
  v66 = (char **)(v59 + 8);
  v67 = *(unsigned int *)(v59 + 20);
  if ((_DWORD)v67 == *(_DWORD *)(v59 + 16))
  {
    v131 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v66, v67 + 1, (unint64_t)&v152);
    v67 = *(unsigned int *)(v59 + 20);
    *(_QWORD *)(*(_QWORD *)(v59 + 8) + 8 * v67) = *(_QWORD *)v131;
    v68 = v152;
  }
  else
  {
    *(_QWORD *)&(*v66)[8 * v67] = v62;
    v68 = v62;
  }
  *(_DWORD *)(v59 + 20) = v67 + 1;
  *(_QWORD *)(v68 + 32) = v59;
  v69 = *(_QWORD *)(a1 + 27776);
  v70 = *(_QWORD *)(a1 + 27760);
  v71 = *(_QWORD *)(a1 + 27768);
  v152 = v34;
  v153 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v69, v70, 154, v71, &v152, v63, v64, v65);
  if (v9 > 3)
    v78 = 0;
  else
    v78 = (uint64_t)off_1E3577D78[v9];
  *(_QWORD *)(a1 + 27776) = v57;
  *(_QWORD *)(a1 + 27784) = v34;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 280), v18, v72, v73, v74, v75, v76, v77);
  v151.n128_u64[0] = JSC::FTL::Output::constInt64(v149, v18);
  v79 = *(_QWORD *)(a1 + 28224);
  v80 = *(unsigned __int16 *)(v79 + 18);
  if ((v80 - 109) >= 0xD)
  {
    if ((v80 - 255) < 2)
    {
      v81 = (uint64_t *)(*(_QWORD *)(v79 + 72) + 8);
      goto LABEL_31;
    }
    if ((v80 - 335) >= 2)
    {
      v144 = v80 - 106;
      if (v144 > 0x25 || ((1 << v144) & 0x2001000001) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D30B5CLL);
      }
    }
  }
  v81 = (uint64_t *)(v79 + 72);
LABEL_31:
  v154 = (_QWORD *)JSC::FTL::Output::constInt64(v149, *v81);
  v86 = *(_QWORD *)(a1 + 27776);
  v87 = *(JSC::B3::Value **)(a1 + 27760);
  v88 = *(_QWORD *)(a1 + 27768);
  v89 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v89 + 8) = -1;
  *(_WORD *)(v89 + 12) = 152;
  *(_DWORD *)(v89 + 16) = 0;
  *(_BYTE *)(v89 + 20) = 1;
  *(_QWORD *)v89 = &unk_1E357EDA0;
  *(_QWORD *)(v89 + 40) = 0;
  *(_QWORD *)(v89 + 48) = v85;
  *(_QWORD *)(v89 + 24) = v88;
  *(_QWORD *)(v89 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v87, (JSC::B3::Value *)v89);
  v152 = v89;
  v93 = (char **)(v86 + 8);
  v94 = *(unsigned int *)(v86 + 20);
  if ((_DWORD)v94 == *(_DWORD *)(v86 + 16))
  {
    v132 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v93, v94 + 1, (unint64_t)&v152);
    v94 = *(unsigned int *)(v86 + 20);
    *(_QWORD *)(*(_QWORD *)(v86 + 8) + 8 * v94) = *(_QWORD *)v132;
    v95 = v152;
  }
  else
  {
    *(_QWORD *)&(*v93)[8 * v94] = v89;
    v95 = v89;
  }
  *(_DWORD *)(v86 + 20) = v94 + 1;
  *(_QWORD *)(v95 + 32) = v86;
  v96 = *(_QWORD *)(a1 + 27776);
  v97 = *(_QWORD *)(a1 + 27760);
  v98 = *(_QWORD *)(a1 + 27768);
  v152 = v34;
  v153 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v96, v97, 154, v98, &v152, v90, v91, v92);
  *(_QWORD *)(a1 + 27776) = v34;
  *(_QWORD *)(a1 + 27784) = v147;
  v99 = *(JSC::B3::Value **)(a1 + 27760);
  v100 = *(_QWORD *)(a1 + 27768);
  v101 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v101 = off_1E357F5F0;
  *(_DWORD *)(v101 + 8) = -1;
  *(_WORD *)(v101 + 12) = 153;
  *(_DWORD *)(v101 + 16) = 2;
  *(_BYTE *)(v101 + 20) = 0;
  *(_QWORD *)(v101 + 24) = v100;
  *(_QWORD *)(v101 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v99, (JSC::B3::Value *)v101);
  v152 = v101;
  v102 = (char **)(v34 + 8);
  v103 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v103 == *(_DWORD *)(v34 + 16))
  {
    v133 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v102, v103 + 1, (unint64_t)&v152);
    v103 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v103) = *(_QWORD *)v133;
    v104 = v152;
  }
  else
  {
    *(_QWORD *)&(*v102)[8 * v103] = v101;
    v104 = v101;
  }
  *(_DWORD *)(v34 + 20) = v103 + 1;
  *(_QWORD *)(v104 + 32) = v34;
  if ((*(_WORD *)(v62 + 12) & 0xFFF) == 0x98)
    v105 = v62;
  else
    v105 = 0;
  *(_QWORD *)(v105 + 40) = v101;
  if ((*(_WORD *)(v89 + 12) & 0xFFF) == 0x98)
    v106 = v89;
  else
    v106 = 0;
  *(_QWORD *)(v106 + 40) = v101;
  v154 = *(_QWORD **)(a1 + 28224);
  v23 = (uint64_t *)(a1 + 27936);
  v24 = *(_QWORD *)(a1 + 28168);
  v151.n128_u64[0] = v101;
LABEL_11:
  v151.n128_u64[1] = v24;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v152, v23, (uint64_t *)&v154, &v151).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::BasicBlock *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::B3::Value *v92;
  JSC::B3::Value *v93;
  uint64_t v94;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v94, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v94, v3, v4, v5, v6, v7, v8);
  if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0x20000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0x20000000000000)
  {
  }
  else
  {
    v93 = v29;
    v92 = v30;
    v31 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v32 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v33 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v34 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v42, v31, v32, NAN, NAN, v43, v44, v45, v46);
    *((_QWORD *)this + 3472) = v31;
    v47 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v33;
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v55, v33, v32, NAN, NAN, v56, v57, v58, v59);
    *((_QWORD *)this + 3472) = v33;
    *((_QWORD *)this + 3473) = v32;
    v61 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v60);
    v63 = v62;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v34, v64, v65, v66, v67, v68, v69);
    *((_QWORD *)this + 3472) = v32;
    *((_QWORD *)this + 3473) = v34;
    v76 = JSC::DFG::Node::cacheableIdentifier(*((JSC::DFG::Node **)this + 3528));
    v90 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v76);
    v81 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v80);
    v83 = v82;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v34, v84, v85, v86, v87, v88, v89);
    *((_QWORD *)this + 3472) = v34;
    *((_QWORD *)this + 3473) = v47;
    v28 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v61, v63, v81, v83);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  __n128 v100;
  uint64_t v101;
  __int128 v102;
  char v103;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v69 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v70 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v70 != 0x3FFFFFFF) ? (v71 = v70 == -1) : (v71 = 1), v71))
  {
    v72 = 2;
  }
  else if (v70 >> 28)
  {
    v92 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v92 = v69;
    *(_DWORD *)(v92 + 8) = v70;
    v72 = 1;
    v69 = v92;
  }
  else
  {
    v72 = v69;
    v69 = 0;
  }
  v11 = v69 | v72;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v69 | v72) & 1) == 0)
    goto LABEL_3;
  v87 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v88 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v88 != 0x3FFFFFFF) ? (v89 = v88 == -1) : (v89 = 1), v89))
  {
    v90 = 2;
  }
  else if (v88 >> 28)
  {
    v93 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v93 = v87;
    *(_DWORD *)(v93 + 8) = v88;
    v90 = 1;
    v87 = v93;
  }
  else
  {
    v90 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v87 = 0;
  }
  v91 = v87 | v90;
  v13 = (_QWORD *)(v91 & 0xFFFFFFFF8);
  if ((v91 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v20 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v102 = (unint64_t)v18;
  v103 = 3;
  JSC::B3::StackmapValue::append(v20, (uint64_t)v18, (unint64_t)&v102 + 8);
  v102 = (unint64_t)v19;
  v103 = 3;
  JSC::B3::StackmapValue::append(v20, v19, (unint64_t)&v102 + 8);
  v21 = *((_QWORD *)this + 3488);
  v102 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v20, v21, (unint64_t)&v102);
  v22 = *((_QWORD *)this + 3487);
  v102 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v20, v22, (unint64_t)&v102);
  *((_QWORD *)v20 + 8) |= 0x30000uLL;
  *((_QWORD *)v20 + 10) |= 0x30000uLL;
  *((_BYTE *)v20 + 168) = 3;
  v28 = *((_QWORD *)this + 1);
  v29 = *((_QWORD *)this + 3528);
  v30 = *(unsigned __int16 *)(v29 + 18);
  if ((v30 - 109) < 0xD)
    goto LABEL_9;
  if ((v30 - 255) >= 2)
  {
    if ((v30 - 335) >= 2
      && ((v30 - 106) > 0x25 || ((1 << (v30 - 106)) & 0x2001000001) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x197D311A4);
    }
LABEL_9:
    v31 = (uint64_t *)(v29 + 72);
    goto LABEL_10;
  }
  v31 = (uint64_t *)(*(_QWORD *)(v29 + 72) + 8);
LABEL_10:
  v32 = *v31;
  if (v32)
  {
    if ((v32 & 1) != 0)
      v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    else
      v33 = *(_QWORD *)(v32 + 8);
  }
  else
  {
    v33 = 0;
  }
  v34 = *(_QWORD *)v29;
  if ((*(_QWORD *)v29 & 1) != 0)
  {
    v73 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
    if ((v34 & 2) != 0
      || (v74 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v74 == 0x3FFFFFFF)
      || (_DWORD)v74 == -1)
    {
      v75 = 2;
    }
    else if (v74 >> 28)
    {
      v94 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v94 = v73;
      *(_DWORD *)(v94 + 8) = v74;
      v29 = *((_QWORD *)this + 3528);
      v30 = *(unsigned __int16 *)(v29 + 18);
      v75 = 1;
      v73 = v94;
    }
    else
    {
      v75 = v73;
      v73 = v74 << 36;
    }
    v34 = v73 | v75;
  }
  if ((v30 - 109) < 0xD)
    goto LABEL_15;
  if ((v30 - 255) >= 2)
  {
    if ((v30 - 335) >= 2)
    {
      v68 = v30 - 106;
      if (v68 > 0x25 || ((1 << v68) & 0x2001000001) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D311F8);
      }
    }
LABEL_15:
    v35 = (uint64_t *)(v29 + 72);
    goto LABEL_16;
  }
  v35 = (uint64_t *)(*(_QWORD *)(v29 + 72) + 8);
LABEL_16:
  v36 = *v35;
  v37 = v34;
  if ((v34 & 1) != 0)
  {
    v76 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
    if ((v34 & 2) != 0
      || (v77 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v77 == 0x3FFFFFFF)
      || (_DWORD)v77 == -1)
    {
      v78 = 2;
    }
    else if (v77 >> 28)
    {
      v97 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v97 = v76;
      *(_DWORD *)(v97 + 8) = v77;
      v78 = 1;
      v76 = v97;
    }
    else
    {
      v78 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
      v76 = v77 << 36;
    }
    v37 = v76 | v78;
  }
  v38 = v99;
  if (v99)
  {
    do
      v39 = __ldaxr((unsigned int *)v38);
    while (__stlxr(v39 + 1, (unsigned int *)v38));
  }
  v40 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v40 + 8) = 1;
  *(_QWORD *)v40 = &off_1E3575CB8;
  *(_QWORD *)(v40 + 16) = v28;
  v48 = v37;
  if ((v37 & 1) != 0)
  {
    v79 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v80 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v98 = v40;
      v95 = *(_DWORD *)((v37 & 0xFFFFFFFF8) + 8);
      v96 = WTF::fastMalloc((WTF *)0x10);
      v40 = v98;
      *(_QWORD *)v96 = v79;
      *(_DWORD *)(v96 + 8) = v95;
      v82 = 1;
      v79 = v96;
    }
    else
    {
      v82 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v48 = v79 | v82;
  }
  *(_QWORD *)(v40 + 24) = v48;
  if (v38)
  {
    do
      v49 = __ldaxr((unsigned int *)v38);
    while (__stlxr(v49 + 1, (unsigned int *)v38));
  }
  *(_QWORD *)(v40 + 32) = v38;
  *(_QWORD *)(v40 + 40) = v33;
  *(_QWORD *)(v40 + 48) = v17;
  *(_QWORD *)(v40 + 56) = v36;
  v50 = (unsigned int *)*((_QWORD *)v20 + 7);
  *((_QWORD *)v20 + 7) = v40;
  if (!v50)
    goto LABEL_26;
  v51 = v50 + 2;
  do
  {
    v52 = __ldaxr(v51);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, v51));
  if (!v53)
  {
    atomic_store(1u, v50 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
    if (!v38)
      goto LABEL_29;
  }
  else
  {
LABEL_26:
    if (!v38)
      goto LABEL_29;
  }
  do
  {
    v54 = __ldaxr((unsigned int *)v38);
    v55 = v54 - 1;
  }
  while (__stlxr(v55, (unsigned int *)v38));
  if (!v55)
  {
    atomic_store(1u, (unsigned int *)v38);
    v83 = *((_QWORD *)v38 + 4);
    if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v83 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
    v84 = *((_QWORD *)v38 + 3);
    if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v84 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
    WTF::fastFree((unint64_t)v38, v41, v42, v43, v44, v45, v46, v47);
  }
LABEL_29:
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  v56 = *((_QWORD *)this + 3528);
  v57 = *((_QWORD *)this + 3521);
  v100.n128_u64[0] = (unint64_t)v20;
  v100.n128_u64[1] = v57;
  v101 = v56;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v102, (uint64_t *)this + 3492, &v101, &v100);
  if ((v34 & 1) != 0 && (v34 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v34 & 0xFFFFFFFF8, v58, v59, v60, v61, v62, v63, v64);
  v65 = v99;
  v99 = 0;
  if (v65)
  {
    do
    {
      v66 = __ldaxr((unsigned int *)v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, (unsigned int *)v65));
    if (!v67)
    {
      atomic_store(1u, (unsigned int *)v65);
      v85 = *((_QWORD *)v65 + 4);
      if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v85 & 0xFFFFFFFF8, v58, v59, v60, v61, v62, v63, v64);
      v86 = *((_QWORD *)v65 + 3);
      if ((v86 & 1) != 0 && (v86 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v86 & 0xFFFFFFFF8, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetPrivateName(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *PrivateName;
  uint64_t *v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  JSC::B3::Value **v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  JSC::B3::Value *v90;
  char **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  JSC::B3::Value *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char v120;
  char v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  JSC::B3::Value *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::B3::Value *v141;
  uint64_t v142;
  uint64_t v143;
  char **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double result;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  JSC::B3::Value *v163;
  JSC::B3::Value *v164;
  __n128 v165;
  uint64_t v166;
  char v167;
  _QWORD *v168;

  v10 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  if ((v10 & 0xFC000000000000) == 0x20000000000000)
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
    v168 = (_QWORD *)*((_QWORD *)this + 3528);
    v26 = (uint64_t *)((char *)this + 27936);
    v27 = *((_QWORD *)this + 3521);
    v165.n128_u64[0] = (unint64_t)PrivateName;
    goto LABEL_37;
  }
  v164 = v28;
  v29 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  v163 = v36;
  v42 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v43 = v42;
  v44 = *((_QWORD *)this + 3473);
  if (v44)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v44, v42);
  }
  else
  {
    v165.n128_u64[0] = v42;
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v45 = 0u;
    *((_OWORD *)v45 + 1) = 0u;
    v45[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v45;
    v168 = v45;
    v45[2] = v43;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v165, (uint64_t *)&v168, v46, v47, v48, v49, v50, (uint64_t)&v166);
    v51 = v168;
    v52 = (_QWORD *)*((_QWORD *)this + 3479);
    *v168 = (char *)this + 27824;
    v51[1] = v52;
    *v52 = v51;
    *((_QWORD *)this + 3479) = v51;
  }
  v53 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v54 = v53;
  v55 = *((_QWORD *)this + 3473);
  if (v55)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v55, v53);
  }
  else
  {
    v165.n128_u64[0] = v53;
    v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v56 = 0u;
    *((_OWORD *)v56 + 1) = 0u;
    v56[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v56;
    v168 = v56;
    v56[2] = v54;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v165, (uint64_t *)&v168, v57, v58, v59, v60, v61, (uint64_t)&v166);
    v62 = v168;
    v63 = (_QWORD *)*((_QWORD *)this + 3479);
    *v168 = (char *)this + 27824;
    v62[1] = v63;
    *v63 = v62;
    *((_QWORD *)this + 3479) = v62;
  }
  v64 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v65 = v64;
  v66 = *((_QWORD *)this + 3473);
  if (v66)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v66, v64);
  }
  else
  {
    v165.n128_u64[0] = v64;
    v73 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v73 = 0u;
    *((_OWORD *)v73 + 1) = 0u;
    v73[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v73;
    v168 = v73;
    v73[2] = v65;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v165, (uint64_t *)&v168, v74, v75, v76, v77, v78, (uint64_t)&v166);
    v79 = v168;
    v80 = (_QWORD *)*((_QWORD *)this + 3479);
    *v168 = (char *)this + 27824;
    v79[1] = v80;
    *v80 = v79;
    *((_QWORD *)this + 3479) = v79;
  }
  v86 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v81 & 0xFFFFD3FF00000008) == 0)
  {
LABEL_43:
    v90 = *v86;
    if (*v86)
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v81 & 0x2C00FFFFFFF7) == 0)
  {
    v86 = (JSC::B3::Value **)((char *)this + 27648);
    goto LABEL_43;
  }
LABEL_14:
  v87 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v28, *((JSC::B3::Value **)this + 3488));
  v88 = *((_QWORD *)this + 3472);
  v89 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v90 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v87, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v89, v90);
  v166 = (uint64_t)v90;
  v91 = (char **)(v88 + 8);
  v92 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v92 == *(_DWORD *)(v88 + 16))
  {
    v153 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91, v92 + 1, (unint64_t)&v166);
    v92 = *(unsigned int *)(v88 + 20);
    *(_QWORD *)(*(_QWORD *)(v88 + 8) + 8 * v92) = *(_QWORD *)v153;
    v93 = v166;
  }
  else
  {
    *(_QWORD *)&(*v91)[8 * v92] = v90;
    v93 = (uint64_t)v90;
  }
  *(_DWORD *)(v88 + 20) = v92 + 1;
  *(_QWORD *)(v93 + 32) = v88;
LABEL_17:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v90, v43, v54, NAN, NAN, v82, v83, v84, v85);
  *((_QWORD *)this + 3472) = v43;
  v94 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v54;
  v96 = *((_QWORD *)this + 3472);
  v97 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v98 = *((_QWORD *)this + 3471);
  v99 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v99 + 8) = -1;
  *(_WORD *)(v99 + 12) = 152;
  *(_BYTE *)(v99 + 20) = 1;
  *(_QWORD *)v99 = &unk_1E357EDA0;
  *(_DWORD *)(v99 + 16) = 0;
  *(_QWORD *)(v99 + 40) = 0;
  *(_QWORD *)(v99 + 48) = v95;
  *(_QWORD *)(v99 + 24) = v98;
  *(_QWORD *)(v99 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v97, (JSC::B3::Value *)v99);
  v166 = v99;
  v103 = (char **)(v96 + 8);
  v104 = *(unsigned int *)(v96 + 20);
  if ((_DWORD)v104 == *(_DWORD *)(v96 + 16))
  {
    v150 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103, v104 + 1, (unint64_t)&v166);
    v104 = *(unsigned int *)(v96 + 20);
    *(_QWORD *)(*(_QWORD *)(v96 + 8) + 8 * v104) = *(_QWORD *)v150;
    v105 = v166;
  }
  else
  {
    *(_QWORD *)&(*v103)[8 * v104] = v99;
    v105 = v99;
  }
  *(_DWORD *)(v96 + 20) = v104 + 1;
  *(_QWORD *)(v105 + 32) = v96;
  v106 = *((_QWORD *)this + 3472);
  v107 = *((_QWORD *)this + 3470);
  v108 = *((_QWORD *)this + 3471);
  v166 = v65;
  v167 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v106, v107, 154, v108, &v166, v100, v101, v102);
  *((_QWORD *)this + 3472) = v54;
  *((_QWORD *)this + 3473) = v65;
  v116 = *(_QWORD *)this;
  v117 = *((_QWORD *)this + 3524);
  if ((v117 & 1) == 0)
  {
    v118 = *(_QWORD *)(v116 + 32);
LABEL_21:
    v119 = (_QWORD *)(v117 & 0xFFFFFFFF8);
    v120 = 1;
    v121 = 1;
    goto LABEL_22;
  }
  v154 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
  if ((v117 & 2) != 0 || (v155 = *(_DWORD *)((v117 & 0xFFFFFFFF8) + 8), v155 == 0x3FFFFFFF) || v155 == -1)
  {
    v156 = 2;
  }
  else if (v155 >> 28)
  {
    v161 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v161 = v154;
    *(_DWORD *)(v161 + 8) = v155;
    v156 = 1;
    v154 = v161;
  }
  else
  {
    v156 = v154;
    v154 = 0;
  }
  v117 = v154 | v156;
  v118 = *(_QWORD *)(v116 + 32);
  if (((v154 | v156) & 1) == 0)
    goto LABEL_21;
  v157 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
  if ((v117 & 2) != 0 || (v158 = *(_DWORD *)((v117 & 0xFFFFFFFF8) + 8), v158 == 0x3FFFFFFF) || v158 == -1)
  {
    v159 = 2;
  }
  else if (v158 >> 28)
  {
    v162 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v162 = v157;
    *(_DWORD *)(v162 + 8) = v158;
    v159 = 1;
    v157 = v162;
  }
  else
  {
    v159 = *(_QWORD *)(v117 & 0xFFFFFFFF8);
    v157 = 0;
  }
  v160 = v157 | v159;
  v119 = (_QWORD *)(v160 & 0xFFFFFFFF8);
  if ((v160 & 1) == 0)
  {
    v121 = 0;
    v120 = 1;
LABEL_22:
    v122 = v119;
    if (!v119)
      goto LABEL_24;
    goto LABEL_23;
  }
  v120 = 0;
  v121 = 0;
  v122 = (_QWORD *)*v119;
  if (*v119)
LABEL_23:
    v118 = v122[1];
LABEL_24:
  v123 = *(_QWORD *)(v118 + 8);
  if ((v120 & 1) == 0 && v119)
    WTF::fastFree((unint64_t)v119, v109, v110, v111, v112, v113, v114, v115);
  if ((v121 & 1) == 0 && (v117 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v117 & 0xFFFFFFFF8, v109, v110, v111, v112, v113, v114, v115);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v123, v110, v111, v112, v113, v114, v115);
  v165.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v123);
  v128 = *((_QWORD *)this + 3472);
  v129 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v130 = *((_QWORD *)this + 3471);
  v131 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v131 + 8) = -1;
  *(_WORD *)(v131 + 12) = 152;
  *(_DWORD *)(v131 + 16) = 0;
  *(_BYTE *)(v131 + 20) = 1;
  *(_QWORD *)v131 = &unk_1E357EDA0;
  *(_QWORD *)(v131 + 40) = 0;
  *(_QWORD *)(v131 + 48) = v127;
  *(_QWORD *)(v131 + 24) = v130;
  *(_QWORD *)(v131 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v129, (JSC::B3::Value *)v131);
  v166 = v131;
  v135 = (char **)(v128 + 8);
  v136 = *(unsigned int *)(v128 + 20);
  if ((_DWORD)v136 == *(_DWORD *)(v128 + 16))
  {
    v151 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v135, v136 + 1, (unint64_t)&v166);
    v136 = *(unsigned int *)(v128 + 20);
    *(_QWORD *)(*(_QWORD *)(v128 + 8) + 8 * v136) = *(_QWORD *)v151;
    v137 = v166;
  }
  else
  {
    *(_QWORD *)&(*v135)[8 * v136] = v131;
    v137 = v131;
  }
  *(_DWORD *)(v128 + 20) = v136 + 1;
  *(_QWORD *)(v137 + 32) = v128;
  v138 = *((_QWORD *)this + 3472);
  v139 = *((_QWORD *)this + 3470);
  v140 = *((_QWORD *)this + 3471);
  v166 = v65;
  v167 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v138, v139, 154, v140, &v166, v132, v133, v134);
  *((_QWORD *)this + 3472) = v65;
  *((_QWORD *)this + 3473) = v94;
  v141 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v142 = *((_QWORD *)this + 3471);
  v143 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v143 = off_1E357F5F0;
  *(_DWORD *)(v143 + 8) = -1;
  *(_WORD *)(v143 + 12) = 153;
  *(_DWORD *)(v143 + 16) = 2;
  *(_BYTE *)(v143 + 20) = 0;
  *(_QWORD *)(v143 + 24) = v142;
  *(_QWORD *)(v143 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v141, (JSC::B3::Value *)v143);
  v166 = v143;
  v144 = (char **)(v65 + 8);
  v145 = *(unsigned int *)(v65 + 20);
  if ((_DWORD)v145 == *(_DWORD *)(v65 + 16))
  {
    v152 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v144, v145 + 1, (unint64_t)&v166);
    v145 = *(unsigned int *)(v65 + 20);
    *(_QWORD *)(*(_QWORD *)(v65 + 8) + 8 * v145) = *(_QWORD *)v152;
    v146 = v166;
  }
  else
  {
    *(_QWORD *)&(*v144)[8 * v145] = v143;
    v146 = v143;
  }
  *(_DWORD *)(v65 + 20) = v145 + 1;
  *(_QWORD *)(v146 + 32) = v65;
  if ((*(_WORD *)(v99 + 12) & 0xFFF) == 0x98)
    v147 = v99;
  else
    v147 = 0;
  *(_QWORD *)(v147 + 40) = v143;
  if ((*(_WORD *)(v131 + 12) & 0xFFF) == 0x98)
    v148 = v131;
  else
    v148 = 0;
  *(_QWORD *)(v148 + 40) = v143;
  v168 = (_QWORD *)*((_QWORD *)this + 3528);
  v26 = (uint64_t *)((char *)this + 27936);
  v27 = *((_QWORD *)this + 3521);
  v165.n128_u64[0] = v143;
LABEL_37:
  v165.n128_u64[1] = v27;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v166, v26, (uint64_t *)&v168, &v165).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetPrivateNameById(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::B3::Value *v19;
  __int128 *v20;
  uint64_t *v21;
  unint64_t v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::B3::Value **v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  JSC::B3::Value *v71;
  JSC::B3::Value *v72;
  char **v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  JSC::B3::Value *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  JSC::B3::Value *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  JSC::B3::Value *v116;
  uint64_t v117;
  uint64_t v118;
  char **v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double result;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  JSC::B3::Value *v142;
  __n128 v143;
  uint64_t v144;
  char v145;
  _QWORD *v146;

  v10 = *(_QWORD **)this;
  v11 = **((_QWORD **)this + 3528);
  if ((v11 & 1) == 0)
  {
    v12 = v10[4];
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v130 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v131 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v131 != 0x3FFFFFFF) ? (v132 = v131 == -1) : (v132 = 1), v132))
  {
    v133 = 2;
  }
  else if (v131 >> 28)
  {
    v139 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v139 = v130;
    *(_DWORD *)(v139 + 8) = v131;
    v133 = 1;
    v130 = v139;
  }
  else
  {
    v133 = v130;
    v130 = 0;
  }
  v11 = v130 | v133;
  v12 = v10[4];
  if (((v130 | v133) & 1) == 0)
    goto LABEL_3;
  v134 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v135 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v135 != 0x3FFFFFFF) ? (v136 = v135 == -1) : (v136 = 1), v136))
  {
    v137 = 2;
  }
  else if (v135 >> 28)
  {
    v140 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v140 = v134;
    *(_DWORD *)(v140 + 8) = v135;
    v137 = 1;
    v134 = v140;
  }
  else
  {
    v137 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v134 = 0;
  }
  v138 = v134 | v137;
  v13 = (_QWORD *)(v138 & 0xFFFFFFFF8);
  if ((v138 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  if ((v18 & 0xFC000000000000) == 0x20000000000000)
  {
    v146 = (_QWORD *)*((_QWORD *)this + 3528);
    v21 = (uint64_t *)((char *)this + 27936);
    v22 = *((_QWORD *)this + 3521);
    v143.n128_u64[0] = (unint64_t)v20;
    goto LABEL_39;
  }
  v142 = v23;
  v24 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v25 = v24;
  v26 = *((_QWORD *)this + 3473);
  if (v26)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v26, v24);
  }
  else
  {
    v143.n128_u64[0] = v24;
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v27 = 0u;
    *((_OWORD *)v27 + 1) = 0u;
    v27[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v27;
    v146 = v27;
    v27[2] = v25;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v143, (uint64_t *)&v146, v28, v29, v30, v31, v32, (uint64_t)&v144);
    v33 = v146;
    v34 = (_QWORD *)*((_QWORD *)this + 3479);
    *v146 = (char *)this + 27824;
    v33[1] = v34;
    *v34 = v33;
    *((_QWORD *)this + 3479) = v33;
  }
  v35 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v36 = v35;
  v37 = *((_QWORD *)this + 3473);
  if (v37)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v37, v35);
  }
  else
  {
    v143.n128_u64[0] = v35;
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v38 = 0u;
    *((_OWORD *)v38 + 1) = 0u;
    v38[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v38;
    v146 = v38;
    v38[2] = v36;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v143, (uint64_t *)&v146, v39, v40, v41, v42, v43, (uint64_t)&v144);
    v44 = v146;
    v45 = (_QWORD *)*((_QWORD *)this + 3479);
    *v146 = (char *)this + 27824;
    v44[1] = v45;
    *v45 = v44;
    *((_QWORD *)this + 3479) = v44;
  }
  v46 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v47 = v46;
  v48 = *((_QWORD *)this + 3473);
  if (v48)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v48, v46);
  }
  else
  {
    v143.n128_u64[0] = v46;
    v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v55 = 0u;
    *((_OWORD *)v55 + 1) = 0u;
    v55[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v55;
    v146 = v55;
    v55[2] = v47;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v143, (uint64_t *)&v146, v56, v57, v58, v59, v60, (uint64_t)&v144);
    v61 = v146;
    v62 = (_QWORD *)*((_QWORD *)this + 3479);
    *v146 = (char *)this + 27824;
    v61[1] = v62;
    *v62 = v61;
    *((_QWORD *)this + 3479) = v61;
  }
  v68 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v63 & 0xFFFFD3FF00000008) == 0)
  {
LABEL_45:
    v72 = *v68;
    if (*v68)
      goto LABEL_24;
    goto LABEL_21;
  }
  if ((v63 & 0x2C00FFFFFFF7) == 0)
  {
    v68 = (JSC::B3::Value **)((char *)this + 27648);
    goto LABEL_45;
  }
LABEL_21:
  v69 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v23, *((JSC::B3::Value **)this + 3488));
  v70 = *((_QWORD *)this + 3472);
  v71 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v72 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v69, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v71, v72);
  v144 = (uint64_t)v72;
  v73 = (char **)(v70 + 8);
  v74 = *(unsigned int *)(v70 + 20);
  if ((_DWORD)v74 == *(_DWORD *)(v70 + 16))
  {
    v128 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v73, v74 + 1, (unint64_t)&v144);
    v74 = *(unsigned int *)(v70 + 20);
    *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v74) = *(_QWORD *)v128;
    v75 = v144;
  }
  else
  {
    *(_QWORD *)&(*v73)[8 * v74] = v72;
    v75 = (uint64_t)v72;
  }
  *(_DWORD *)(v70 + 20) = v74 + 1;
  *(_QWORD *)(v75 + 32) = v70;
LABEL_24:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v72, v25, v36, NAN, NAN, v64, v65, v66, v67);
  *((_QWORD *)this + 3472) = v25;
  v141 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v36;
  v77 = *((_QWORD *)this + 3472);
  v78 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v79 = *((_QWORD *)this + 3471);
  v80 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v80 + 8) = -1;
  *(_WORD *)(v80 + 12) = 152;
  *(_BYTE *)(v80 + 20) = 1;
  *(_QWORD *)v80 = &unk_1E357EDA0;
  *(_DWORD *)(v80 + 16) = 0;
  *(_QWORD *)(v80 + 40) = 0;
  *(_QWORD *)(v80 + 48) = v76;
  *(_QWORD *)(v80 + 24) = v79;
  *(_QWORD *)(v80 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v78, (JSC::B3::Value *)v80);
  v144 = v80;
  v84 = (char **)(v77 + 8);
  v85 = *(unsigned int *)(v77 + 20);
  if ((_DWORD)v85 == *(_DWORD *)(v77 + 16))
  {
    v125 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84, v85 + 1, (unint64_t)&v144);
    v85 = *(unsigned int *)(v77 + 20);
    *(_QWORD *)(*(_QWORD *)(v77 + 8) + 8 * v85) = *(_QWORD *)v125;
    v86 = v144;
  }
  else
  {
    *(_QWORD *)&(*v84)[8 * v85] = v80;
    v86 = v80;
  }
  *(_DWORD *)(v77 + 20) = v85 + 1;
  *(_QWORD *)(v86 + 32) = v77;
  v87 = *((_QWORD *)this + 3472);
  v88 = *((_QWORD *)this + 3470);
  v89 = *((_QWORD *)this + 3471);
  v144 = v47;
  v145 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v87, v88, 154, v89, &v144, v81, v82, v83);
  *((_QWORD *)this + 3472) = v36;
  *((_QWORD *)this + 3473) = v47;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v90, v91, v92, v93, v94, v95);
  v143.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v96 = *((_QWORD *)this + 3528);
  v97 = *(unsigned __int16 *)(v96 + 18);
  if ((v97 - 109) >= 0xD)
  {
    if ((v97 - 255) < 2)
    {
      v98 = (uint64_t *)(*(_QWORD *)(v96 + 72) + 8);
      goto LABEL_28;
    }
    if ((v97 - 335) >= 2)
    {
      v129 = v97 - 106;
      if (v129 > 0x25 || ((1 << v129) & 0x2001000001) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D323ACLL);
      }
    }
  }
  v98 = (uint64_t *)(v96 + 72);
LABEL_28:
  v146 = (_QWORD *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *v98);
  v103 = *((_QWORD *)this + 3472);
  v104 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v105 = *((_QWORD *)this + 3471);
  v106 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v106 + 8) = -1;
  *(_WORD *)(v106 + 12) = 152;
  *(_DWORD *)(v106 + 16) = 0;
  *(_BYTE *)(v106 + 20) = 1;
  *(_QWORD *)v106 = &unk_1E357EDA0;
  *(_QWORD *)(v106 + 40) = 0;
  *(_QWORD *)(v106 + 48) = v102;
  *(_QWORD *)(v106 + 24) = v105;
  *(_QWORD *)(v106 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v104, (JSC::B3::Value *)v106);
  v144 = v106;
  v110 = (char **)(v103 + 8);
  v111 = *(unsigned int *)(v103 + 20);
  if ((_DWORD)v111 == *(_DWORD *)(v103 + 16))
  {
    v126 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v110, v111 + 1, (unint64_t)&v144);
    v111 = *(unsigned int *)(v103 + 20);
    *(_QWORD *)(*(_QWORD *)(v103 + 8) + 8 * v111) = *(_QWORD *)v126;
    v112 = v144;
  }
  else
  {
    *(_QWORD *)&(*v110)[8 * v111] = v106;
    v112 = v106;
  }
  *(_DWORD *)(v103 + 20) = v111 + 1;
  *(_QWORD *)(v112 + 32) = v103;
  v113 = *((_QWORD *)this + 3472);
  v114 = *((_QWORD *)this + 3470);
  v115 = *((_QWORD *)this + 3471);
  v144 = v47;
  v145 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v113, v114, 154, v115, &v144, v107, v108, v109);
  *((_QWORD *)this + 3472) = v47;
  *((_QWORD *)this + 3473) = v141;
  v116 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v117 = *((_QWORD *)this + 3471);
  v118 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v118 = off_1E357F5F0;
  *(_DWORD *)(v118 + 8) = -1;
  *(_WORD *)(v118 + 12) = 153;
  *(_DWORD *)(v118 + 16) = 2;
  *(_BYTE *)(v118 + 20) = 0;
  *(_QWORD *)(v118 + 24) = v117;
  *(_QWORD *)(v118 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v116, (JSC::B3::Value *)v118);
  v144 = v118;
  v119 = (char **)(v47 + 8);
  v120 = *(unsigned int *)(v47 + 20);
  if ((_DWORD)v120 == *(_DWORD *)(v47 + 16))
  {
    v127 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v119, v120 + 1, (unint64_t)&v144);
    v120 = *(unsigned int *)(v47 + 20);
    *(_QWORD *)(*(_QWORD *)(v47 + 8) + 8 * v120) = *(_QWORD *)v127;
    v121 = v144;
  }
  else
  {
    *(_QWORD *)&(*v119)[8 * v120] = v118;
    v121 = v118;
  }
  *(_DWORD *)(v47 + 20) = v120 + 1;
  *(_QWORD *)(v121 + 32) = v47;
  if ((*(_WORD *)(v80 + 12) & 0xFFF) == 0x98)
    v122 = v80;
  else
    v122 = 0;
  *(_QWORD *)(v122 + 40) = v118;
  if ((*(_WORD *)(v106 + 12) & 0xFFF) == 0x98)
    v123 = v106;
  else
    v123 = 0;
  *(_QWORD *)(v123 + 40) = v118;
  v146 = (_QWORD *)*((_QWORD *)this + 3528);
  v21 = (uint64_t *)((char *)this + 27936);
  v22 = *((_QWORD *)this + 3521);
  v143.n128_u64[0] = v118;
LABEL_39:
  v143.n128_u64[1] = v22;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v144, v21, (uint64_t *)&v146, &v143).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInById(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;

  v11 = JSC::DFG::Node::cacheableIdentifier(*((JSC::DFG::Node **)this + 3528));
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByVal(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  __n128 v99;
  uint64_t v100;
  __int128 v101;
  char v102;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v68 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v69 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v69 != 0x3FFFFFFF) ? (v70 = v69 == -1) : (v70 = 1), v70))
  {
    v71 = 2;
  }
  else if (v69 >> 28)
  {
    v91 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v91 = v68;
    *(_DWORD *)(v91 + 8) = v69;
    v71 = 1;
    v68 = v91;
  }
  else
  {
    v71 = v68;
    v68 = 0;
  }
  v11 = v68 | v71;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v68 | v71) & 1) == 0)
    goto LABEL_3;
  v86 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v87 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v87 != 0x3FFFFFFF) ? (v88 = v87 == -1) : (v88 = 1), v88))
  {
    v89 = 2;
  }
  else if (v87 >> 28)
  {
    v92 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v92 = v86;
    *(_DWORD *)(v92 + 8) = v87;
    v89 = 1;
    v86 = v92;
  }
  else
  {
    v89 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v86 = 0;
  }
  v90 = v86 | v89;
  v13 = (_QWORD *)(v90 & 0xFFFFFFFF8);
  if ((v90 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v19 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v101 = (unint64_t)v18;
  v102 = 3;
  JSC::B3::StackmapValue::append(v19, (uint64_t)v18, (unint64_t)&v101 + 8);
  v20 = *((_QWORD *)this + 3488);
  v101 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v19, v20, (unint64_t)&v101);
  v21 = *((_QWORD *)this + 3487);
  v101 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v19, v21, (unint64_t)&v101);
  *((_QWORD *)v19 + 8) |= 0x30000uLL;
  *((_QWORD *)v19 + 10) |= 0x30000uLL;
  *((_BYTE *)v19 + 168) = 3;
  v27 = *((_QWORD *)this + 1);
  v28 = *((_QWORD *)this + 3528);
  v29 = *(unsigned __int16 *)(v28 + 18);
  if ((v29 - 109) < 0xD)
    goto LABEL_9;
  if ((v29 - 255) >= 2)
  {
    if ((v29 - 335) >= 2
      && ((v29 - 106) > 0x25 || ((1 << (v29 - 106)) & 0x2001000001) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x197D32838);
    }
LABEL_9:
    v30 = (uint64_t *)(v28 + 72);
    goto LABEL_10;
  }
  v30 = (uint64_t *)(*(_QWORD *)(v28 + 72) + 8);
LABEL_10:
  v31 = *v30;
  if (v31)
  {
    if ((v31 & 1) != 0)
      v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
    else
      v32 = *(_QWORD *)(v31 + 8);
  }
  else
  {
    v32 = 0;
  }
  v33 = *(_QWORD *)v28;
  if ((*(_QWORD *)v28 & 1) != 0)
  {
    v72 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || (v73 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v73 == 0x3FFFFFFF)
      || (_DWORD)v73 == -1)
    {
      v74 = 2;
    }
    else if (v73 >> 28)
    {
      v93 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = v72;
      *(_DWORD *)(v93 + 8) = v73;
      v28 = *((_QWORD *)this + 3528);
      v29 = *(unsigned __int16 *)(v28 + 18);
      v74 = 1;
      v72 = v93;
    }
    else
    {
      v74 = v72;
      v72 = v73 << 36;
    }
    v33 = v72 | v74;
  }
  if ((v29 - 109) < 0xD)
    goto LABEL_15;
  if ((v29 - 255) >= 2)
  {
    if ((v29 - 335) >= 2)
    {
      v67 = v29 - 106;
      if (v67 > 0x25 || ((1 << v67) & 0x2001000001) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D3288CLL);
      }
    }
LABEL_15:
    v34 = (uint64_t *)(v28 + 72);
    goto LABEL_16;
  }
  v34 = (uint64_t *)(*(_QWORD *)(v28 + 72) + 8);
LABEL_16:
  v35 = *v34;
  v36 = v33;
  if ((v33 & 1) != 0)
  {
    v75 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || (v76 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v76 == 0x3FFFFFFF)
      || (_DWORD)v76 == -1)
    {
      v77 = 2;
    }
    else if (v76 >> 28)
    {
      v96 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v96 = v75;
      *(_DWORD *)(v96 + 8) = v76;
      v77 = 1;
      v75 = v96;
    }
    else
    {
      v77 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v75 = v76 << 36;
    }
    v36 = v75 | v77;
  }
  v37 = v98;
  if (v98)
  {
    do
      v38 = __ldaxr((unsigned int *)v37);
    while (__stlxr(v38 + 1, (unsigned int *)v37));
  }
  v39 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v39 + 8) = 1;
  *(_QWORD *)v39 = &off_1E3575E70;
  *(_QWORD *)(v39 + 16) = v27;
  v47 = v36;
  if ((v36 & 1) != 0)
  {
    v78 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || ((v79 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
        ? (v80 = (_DWORD)v79 == -1)
        : (v80 = 1),
          v80))
    {
      v81 = 2;
    }
    else if (v79 >> 28)
    {
      v97 = v39;
      v94 = *(_DWORD *)((v36 & 0xFFFFFFFF8) + 8);
      v95 = WTF::fastMalloc((WTF *)0x10);
      v39 = v97;
      *(_QWORD *)v95 = v78;
      *(_DWORD *)(v95 + 8) = v94;
      v81 = 1;
      v78 = v95;
    }
    else
    {
      v81 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v47 = v78 | v81;
  }
  *(_QWORD *)(v39 + 24) = v47;
  if (v37)
  {
    do
      v48 = __ldaxr((unsigned int *)v37);
    while (__stlxr(v48 + 1, (unsigned int *)v37));
  }
  *(_QWORD *)(v39 + 32) = v37;
  *(_QWORD *)(v39 + 40) = v32;
  *(_QWORD *)(v39 + 48) = v17;
  *(_QWORD *)(v39 + 56) = v35;
  v49 = (unsigned int *)*((_QWORD *)v19 + 7);
  *((_QWORD *)v19 + 7) = v39;
  if (!v49)
    goto LABEL_26;
  v50 = v49 + 2;
  do
  {
    v51 = __ldaxr(v50);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, v50));
  if (!v52)
  {
    atomic_store(1u, v49 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    if (!v37)
      goto LABEL_29;
  }
  else
  {
LABEL_26:
    if (!v37)
      goto LABEL_29;
  }
  do
  {
    v53 = __ldaxr((unsigned int *)v37);
    v54 = v53 - 1;
  }
  while (__stlxr(v54, (unsigned int *)v37));
  if (!v54)
  {
    atomic_store(1u, (unsigned int *)v37);
    v82 = *((_QWORD *)v37 + 4);
    if ((v82 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v82 & 0xFFFFFFFF8, v40, v41, v42, v43, v44, v45, v46);
    v83 = *((_QWORD *)v37 + 3);
    if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v83 & 0xFFFFFFFF8, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree((unint64_t)v37, v40, v41, v42, v43, v44, v45, v46);
  }
LABEL_29:
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v40, v41, v42, v43, v44, v45, v46);
  v55 = *((_QWORD *)this + 3528);
  v56 = *((_QWORD *)this + 3521);
  v99.n128_u64[0] = (unint64_t)v19;
  v99.n128_u64[1] = v56;
  v100 = v55;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v101, (uint64_t *)this + 3492, &v100, &v99);
  if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v57, v58, v59, v60, v61, v62, v63);
  v64 = v98;
  v98 = 0;
  if (v64)
  {
    do
    {
      v65 = __ldaxr((unsigned int *)v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, (unsigned int *)v64));
    if (!v66)
    {
      atomic_store(1u, (unsigned int *)v64);
      v84 = *((_QWORD *)v64 + 4);
      if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v84 & 0xFFFFFFFF8, v57, v58, v59, v60, v61, v62, v63);
      v85 = *((_QWORD *)v64 + 3);
      if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v85 & 0xFFFFFFFF8, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  int8x8_t v27;
  uint64_t v28;
  unint64_t *v29;
  JSC::B3::Value *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  __int128 v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v63, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = JSC::DFG::Graph::globalObjectFor(v2, &v63, v3, v4, v5, v6, v7, v8);
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = (unint64_t *)(v18 + 24);
  if ((*(_BYTE *)(v18 + 56) & 0x10) != 0)
  {
    v56 = *v19;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v56)
      goto LABEL_19;
    v19 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v56);
  }
  v28 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v28 + 56) & 0x10) == 0)
  {
    v29 = (unint64_t *)(v28 + 32);
    goto LABEL_5;
  }
  v57 = *(_DWORD *)(v28 + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v57)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x197D32DCCLL);
  }
  v29 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v57);
LABEL_5:
  v31 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v58 = (unint64_t)v26;
  LOBYTE(v59) = 3;
  JSC::B3::StackmapValue::append(v31, (uint64_t)v26, (unint64_t)&v58 + 8);
  v58 = (unint64_t)v30;
  LOBYTE(v59) = 3;
  JSC::B3::StackmapValue::append(v31, (uint64_t)v30, (unint64_t)&v58 + 8);
  v32 = *((_QWORD *)this + 3488);
  v58 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v31, v32, (unint64_t)&v58);
  v33 = *((_QWORD *)this + 3487);
  v58 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v31, v33, (unint64_t)&v58);
  *((_QWORD *)v31 + 8) |= 0x30000uLL;
  *((_QWORD *)v31 + 10) |= 0x30000uLL;
  *((_BYTE *)v31 + 168) = 4;
  v39 = *((_QWORD *)this + 1);
  JSC::CodeOrigin::CodeOrigin(&v61, *((const JSC::CodeOrigin **)this + 3528));
  *(_QWORD *)&v58 = v39;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v58 + 1, (const JSC::CodeOrigin *)&v61);
  v40 = v62;
  if (v62)
  {
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
  }
  v59 = v40;
  v60 = v16;
  if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v61 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  if (v62)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v62, v49, v50, v51, v52, v53, v54, v55);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileHasPrivateName(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  __n128 v88;
  uint64_t v89;
  __int128 v90;
  char v91;

  v11 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  v24 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v90 = (unint64_t)v10;
  v91 = 3;
  JSC::B3::StackmapValue::append(v24, (uint64_t)v10, (unint64_t)&v90 + 8);
  v90 = (unint64_t)v18;
  v91 = 3;
  JSC::B3::StackmapValue::append(v24, (uint64_t)v18, (unint64_t)&v90 + 8);
  v25 = *((_QWORD *)this + 3488);
  v90 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v24, v25, (unint64_t)&v90);
  v26 = *((_QWORD *)this + 3487);
  v90 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v24, v26, (unint64_t)&v90);
  *((_QWORD *)v24 + 8) |= 0x30000uLL;
  *((_QWORD *)v24 + 10) |= 0x30000uLL;
  *((_BYTE *)v24 + 168) = HIBYTE(qword_1ECF4C780);
  v32 = *((_QWORD *)this + 1);
  v33 = **((_QWORD **)this + 3528);
  if ((v33 & 1) == 0)
    goto LABEL_2;
  v66 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
  if ((v33 & 2) != 0
    || ((v67 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v67 != 0x3FFFFFFF)
      ? (v68 = (_DWORD)v67 == -1)
      : (v68 = 1),
        v68))
  {
    v69 = 2;
  }
  else if (v67 >> 28)
  {
    v82 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v82 = v66;
    *(_DWORD *)(v82 + 8) = v67;
    v69 = 1;
    v66 = v82;
  }
  else
  {
    v69 = v66;
    v66 = v67 << 36;
  }
  v33 = v66 | v69;
  if (((v66 | v69) & 1) != 0)
  {
    v78 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v79 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
        ? (v80 = (_DWORD)v79 == -1)
        : (v80 = 1),
          v80))
    {
      v81 = 2;
    }
    else if (v79 >> 28)
    {
      v85 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v85 = v78;
      *(_DWORD *)(v85 + 8) = v79;
      v81 = 1;
      v78 = v85;
    }
    else
    {
      v81 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v34 = 0;
    v35 = v78 | v81;
  }
  else
  {
LABEL_2:
    v34 = 1;
    v35 = v33;
  }
  v36 = v87;
  if (v87)
  {
    do
      v37 = __ldaxr((unsigned int *)v36);
    while (__stlxr(v37 + 1, (unsigned int *)v36));
  }
  v38 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v38 + 8) = 1;
  *(_QWORD *)v38 = &off_1E3575F10;
  *(_QWORD *)(v38 + 16) = v32;
  v46 = v35;
  if ((v35 & 1) != 0)
  {
    v70 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v71 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v71 != 0x3FFFFFFF)
        ? (v72 = (_DWORD)v71 == -1)
        : (v72 = 1),
          v72))
    {
      v73 = 2;
    }
    else if (v71 >> 28)
    {
      v86 = v38;
      v83 = *(_DWORD *)((v35 & 0xFFFFFFFF8) + 8);
      v84 = WTF::fastMalloc((WTF *)0x10);
      v38 = v86;
      *(_QWORD *)v84 = v70;
      *(_DWORD *)(v84 + 8) = v83;
      v73 = 1;
      v70 = v84;
    }
    else
    {
      v73 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v70 = v71 << 36;
    }
    v46 = v70 | v73;
  }
  *(_QWORD *)(v38 + 24) = v46;
  if (v36)
  {
    do
      v47 = __ldaxr((unsigned int *)v36);
    while (__stlxr(v47 + 1, (unsigned int *)v36));
  }
  *(_QWORD *)(v38 + 32) = v36;
  v48 = (unsigned int *)*((_QWORD *)v24 + 7);
  *((_QWORD *)v24 + 7) = v38;
  if (!v48)
    goto LABEL_12;
  v49 = v48 + 2;
  do
  {
    v50 = __ldaxr(v49);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, v49));
  if (!v51)
  {
    atomic_store(1u, v48 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
    if (!v36)
      goto LABEL_15;
  }
  else
  {
LABEL_12:
    if (!v36)
      goto LABEL_15;
  }
  do
  {
    v52 = __ldaxr((unsigned int *)v36);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, (unsigned int *)v36));
  if (!v53)
  {
    atomic_store(1u, (unsigned int *)v36);
    v74 = *((_QWORD *)v36 + 4);
    if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v74 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
    v75 = *((_QWORD *)v36 + 3);
    if ((v75 & 1) != 0 && (v75 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v75 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree((unint64_t)v36, v39, v40, v41, v42, v43, v44, v45);
  }
LABEL_15:
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v35 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  v54 = *((_QWORD *)this + 3528);
  v55 = *((_QWORD *)this + 3521);
  v88.n128_u64[0] = (unint64_t)v24;
  v88.n128_u64[1] = v55;
  v89 = v54;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v90, (uint64_t *)this + 3492, &v89, &v88);
  if ((v34 & 1) == 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
  v63 = v87;
  v87 = 0;
  if (v63)
  {
    do
    {
      v64 = __ldaxr((unsigned int *)v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, (unsigned int *)v63));
    if (!v65)
    {
      atomic_store(1u, (unsigned int *)v63);
      v76 = *((_QWORD *)v63 + 4);
      if ((v76 & 1) != 0 && (v76 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v76 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
      v77 = *((_QWORD *)v63 + 3);
      if ((v77 & 1) != 0 && (v77 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v77 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileHasPrivateBrand(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  __n128 v88;
  uint64_t v89;
  __int128 v90;
  char v91;

  v11 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  v24 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v90 = (unint64_t)v10;
  v91 = 3;
  JSC::B3::StackmapValue::append(v24, (uint64_t)v10, (unint64_t)&v90 + 8);
  v90 = (unint64_t)v18;
  v91 = 3;
  JSC::B3::StackmapValue::append(v24, (uint64_t)v18, (unint64_t)&v90 + 8);
  v25 = *((_QWORD *)this + 3488);
  v90 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v24, v25, (unint64_t)&v90);
  v26 = *((_QWORD *)this + 3487);
  v90 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v24, v26, (unint64_t)&v90);
  *((_QWORD *)v24 + 8) |= 0x30000uLL;
  *((_QWORD *)v24 + 10) |= 0x30000uLL;
  *((_BYTE *)v24 + 168) = HIBYTE(qword_1ECF4C780);
  v32 = *((_QWORD *)this + 1);
  v33 = **((_QWORD **)this + 3528);
  if ((v33 & 1) == 0)
    goto LABEL_2;
  v66 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
  if ((v33 & 2) != 0
    || ((v67 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v67 != 0x3FFFFFFF)
      ? (v68 = (_DWORD)v67 == -1)
      : (v68 = 1),
        v68))
  {
    v69 = 2;
  }
  else if (v67 >> 28)
  {
    v82 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v82 = v66;
    *(_DWORD *)(v82 + 8) = v67;
    v69 = 1;
    v66 = v82;
  }
  else
  {
    v69 = v66;
    v66 = v67 << 36;
  }
  v33 = v66 | v69;
  if (((v66 | v69) & 1) != 0)
  {
    v78 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v79 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
        ? (v80 = (_DWORD)v79 == -1)
        : (v80 = 1),
          v80))
    {
      v81 = 2;
    }
    else if (v79 >> 28)
    {
      v85 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v85 = v78;
      *(_DWORD *)(v85 + 8) = v79;
      v81 = 1;
      v78 = v85;
    }
    else
    {
      v81 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v34 = 0;
    v35 = v78 | v81;
  }
  else
  {
LABEL_2:
    v34 = 1;
    v35 = v33;
  }
  v36 = v87;
  if (v87)
  {
    do
      v37 = __ldaxr((unsigned int *)v36);
    while (__stlxr(v37 + 1, (unsigned int *)v36));
  }
  v38 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v38 + 8) = 1;
  *(_QWORD *)v38 = &off_1E3575F88;
  *(_QWORD *)(v38 + 16) = v32;
  v46 = v35;
  if ((v35 & 1) != 0)
  {
    v70 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v71 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v71 != 0x3FFFFFFF)
        ? (v72 = (_DWORD)v71 == -1)
        : (v72 = 1),
          v72))
    {
      v73 = 2;
    }
    else if (v71 >> 28)
    {
      v86 = v38;
      v83 = *(_DWORD *)((v35 & 0xFFFFFFFF8) + 8);
      v84 = WTF::fastMalloc((WTF *)0x10);
      v38 = v86;
      *(_QWORD *)v84 = v70;
      *(_DWORD *)(v84 + 8) = v83;
      v73 = 1;
      v70 = v84;
    }
    else
    {
      v73 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v70 = v71 << 36;
    }
    v46 = v70 | v73;
  }
  *(_QWORD *)(v38 + 24) = v46;
  if (v36)
  {
    do
      v47 = __ldaxr((unsigned int *)v36);
    while (__stlxr(v47 + 1, (unsigned int *)v36));
  }
  *(_QWORD *)(v38 + 32) = v36;
  v48 = (unsigned int *)*((_QWORD *)v24 + 7);
  *((_QWORD *)v24 + 7) = v38;
  if (!v48)
    goto LABEL_12;
  v49 = v48 + 2;
  do
  {
    v50 = __ldaxr(v49);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, v49));
  if (!v51)
  {
    atomic_store(1u, v48 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
    if (!v36)
      goto LABEL_15;
  }
  else
  {
LABEL_12:
    if (!v36)
      goto LABEL_15;
  }
  do
  {
    v52 = __ldaxr((unsigned int *)v36);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, (unsigned int *)v36));
  if (!v53)
  {
    atomic_store(1u, (unsigned int *)v36);
    v74 = *((_QWORD *)v36 + 4);
    if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v74 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
    v75 = *((_QWORD *)v36 + 3);
    if ((v75 & 1) != 0 && (v75 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v75 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree((unint64_t)v36, v39, v40, v41, v42, v43, v44, v45);
  }
LABEL_15:
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v35 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  v54 = *((_QWORD *)this + 3528);
  v55 = *((_QWORD *)this + 3521);
  v88.n128_u64[0] = (unint64_t)v24;
  v88.n128_u64[1] = v55;
  v89 = v54;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v90, (uint64_t *)this + 3492, &v89, &v88);
  if ((v34 & 1) == 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
  v63 = v87;
  v87 = 0;
  if (v63)
  {
    do
    {
      v64 = __ldaxr((unsigned int *)v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, (unsigned int *)v63));
    if (!v65)
    {
      atomic_store(1u, (unsigned int *)v63);
      v76 = *((_QWORD *)v63 + 4);
      if ((v76 & 1) != 0 && (v76 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v76 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
      v77 = *((_QWORD *)v63 + 3);
      if ((v77 & 1) != 0 && (v77 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v77 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckPrivateBrand(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSetPrivateBrand(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  JSC::B3::Value *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = (unint64_t *)*((_QWORD *)this + 3528);
  if ((v10[3] & 0xFC000000000000) == 0x20000000000000)
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  }
  else
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v10, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1289, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileSetPrivateBrand()", "m_node->child1().useKind() == CellUse");
    __break(0xC471u);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdWithThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(JSC::JSGlobalObject *, uint64_t, uint64_t, const JSC::PropertyTable *, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  JSC::DFG::Node *v47;
  char **v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  char *v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::B3::Value *v66;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v55 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v56 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v56 != 0x3FFFFFFF) ? (v57 = v56 == -1) : (v57 = 1), v57))
  {
    v58 = 2;
  }
  else if (v56 >> 28)
  {
    v64 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v64 = v55;
    *(_DWORD *)(v64 + 8) = v56;
    v58 = 1;
    v55 = v64;
  }
  else
  {
    v58 = v55;
    v55 = 0;
  }
  v10 = v55 | v58;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v55 | v58) & 1) == 0)
    goto LABEL_3;
  v59 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v60 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v60 != 0x3FFFFFFF) ? (v61 = v60 == -1) : (v61 = 1), v61))
  {
    v62 = 2;
  }
  else if (v60 >> 28)
  {
    v65 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v65 = v59;
    *(_DWORD *)(v65 + 8) = v60;
    v62 = 1;
    v59 = v65;
  }
  else
  {
    v62 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v59 = 0;
  }
  v63 = v59 | v62;
  v12 = (_QWORD *)(v63 & 0xFFFFFFFF8);
  if ((v63 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v26 = *((_QWORD *)this + 3528);
  v27 = *(unsigned __int16 *)(v26 + 18);
  if (v27 == 6)
    goto LABEL_9;
  if (*(unsigned __int16 *)(v26 + 18) <= 0x74u)
  {
    if ((v27 - 101) >= 4)
    {
LABEL_60:
      __break(0xC471u);
      JUMPOUT(0x197D33AF4);
    }
  }
  else
  {
    v53 = v27 - 117;
    if ((v27 - 117) <= 0x3C)
    {
      if (((1 << v53) & 0x100000000000201FLL) != 0)
        goto LABEL_27;
      if (((1 << v53) & 0x4020) != 0)
        goto LABEL_9;
    }
    if (v27 != 391)
    {
      if (v27 != 253)
        goto LABEL_60;
LABEL_9:
      v28 = (unsigned __int8 *)(v26 + 72);
      goto LABEL_10;
    }
  }
LABEL_27:
  v28 = (unsigned __int8 *)(v26 + 80);
LABEL_10:
  v29 = *v28;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v19, v20, v21, v22, v23, v24);
  v30 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v31 = *((_QWORD *)this + 3528);
  v32 = *(unsigned __int16 *)(v31 + 18);
  if ((v32 - 109) < 0xD)
  {
LABEL_11:
    v33 = (uint64_t *)(v31 + 72);
    goto LABEL_12;
  }
  if ((v32 - 255) >= 2)
  {
    if ((v32 - 335) >= 2)
    {
      v54 = v32 - 106;
      if (v54 > 0x25 || ((1 << v54) & 0x2001000001) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D33A1CLL);
      }
    }
    goto LABEL_11;
  }
  v33 = (uint64_t *)(*(_QWORD *)(v31 + 72) + 8);
LABEL_12:
  v34 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *v33);
  if (v29)
    v42 = operationPutByIdWithThis;
  else
    v42 = operationPutByIdWithThisStrict;
  v43 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v42);
  v44 = *((_QWORD *)this + 3472);
  v45 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v46 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, *((_QWORD *)this + 3471), v43, v30, v17, v18, v25, v34);
  JSC::B3::Procedure::addValueImpl(v45, v46);
  v66 = v46;
  v48 = (char **)(v44 + 8);
  v49 = *(unsigned int *)(v44 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v44 + 16))
  {
    v52 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v66);
    v49 = *(unsigned int *)(v44 + 20);
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v49) = *(_QWORD *)v52;
    v50 = v66;
  }
  else
  {
    *(_QWORD *)&(*v48)[8 * v49] = v46;
    v50 = v46;
  }
  *(_DWORD *)(v44 + 20) = v49 + 1;
  *((_QWORD *)v50 + 4) = v44;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutAccessorById(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  JSC::B3::Value *v51;
  JSC::DFG::Node *v52;
  char **v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::B3::Value *v69;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v58 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v59 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v59 != 0x3FFFFFFF) ? (v60 = v59 == -1) : (v60 = 1), v60))
  {
    v61 = 2;
  }
  else if (v59 >> 28)
  {
    v67 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v67 = v58;
    *(_DWORD *)(v67 + 8) = v59;
    v61 = 1;
    v58 = v67;
  }
  else
  {
    v61 = v58;
    v58 = 0;
  }
  v11 = v58 | v61;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v58 | v61) & 1) == 0)
    goto LABEL_3;
  v62 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v63 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v63 != 0x3FFFFFFF) ? (v64 = v63 == -1) : (v64 = 1), v64))
  {
    v65 = 2;
  }
  else if (v63 >> 28)
  {
    v68 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v68 = v62;
    *(_DWORD *)(v68 + 8) = v63;
    v65 = 1;
    v62 = v68;
  }
  else
  {
    v65 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v62 = 0;
  }
  v66 = v62 | v65;
  v13 = (_QWORD *)(v66 & 0xFFFFFFFF8);
  if ((v66 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v26 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  v27 = *(unsigned __int16 *)(*((_QWORD *)this + 3528) + 18);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v28, v29, v30, v31, v32, v33);
  v34 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v35 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26);
  v36 = *((_QWORD *)this + 3528);
  v37 = *(unsigned __int16 *)(v36 + 18);
  if ((v37 - 123) >= 3)
  {
    if ((v37 - 126) >= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197D33D54);
    }
    v38 = (int *)(v36 + 72);
  }
  else
  {
    v38 = (int *)(v36 + 80);
  }
  v39 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *v38);
  if (v27 == 123)
    v47 = operationPutGetterById;
  else
    v47 = operationPutSetterById;
  v48 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v47);
  v49 = *((_QWORD *)this + 3472);
  v50 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v51 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, *((_QWORD *)this + 3471), v48, v34, (uint64_t)v18, v35, v39, (uint64_t)v25);
  JSC::B3::Procedure::addValueImpl(v50, v51);
  v69 = v51;
  v53 = (char **)(v49 + 8);
  v54 = *(unsigned int *)(v49 + 20);
  if ((_DWORD)v54 == *(_DWORD *)(v49 + 16))
  {
    v57 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)&v69);
    v54 = *(unsigned int *)(v49 + 20);
    *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * v54) = *(_QWORD *)v57;
    v55 = v69;
  }
  else
  {
    *(_QWORD *)&(*v53)[8 * v54] = v51;
    v55 = v51;
  }
  *(_DWORD *)(v49 + 20) = v54 + 1;
  *((_QWORD *)v55 + 4) = v49;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutGetterSetterById(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v36, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v36, v3, v4, v5, v6, v7, v8);
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  v31 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18);
  v25 = *((_QWORD *)this + 3528);
  v26 = *(unsigned __int16 *)(v25 + 18);
  if ((v26 - 123) >= 3)
  {
    if ((v26 - 126) >= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197D33FB0);
    }
    v27 = (int *)(v25 + 72);
  }
  else
  {
    v27 = (int *)(v25 + 80);
  }
  v30 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *v27);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutAccessorByVal(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  JSC::B3::Value *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, WTF::AtomStringImpl *, uint64_t, uint64_t, WTF::StringImpl *, __n128, int32x2_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  JSC::B3::Value *v50;
  JSC::DFG::Node *v51;
  char **v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v57 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v58 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v58 != 0x3FFFFFFF) ? (v59 = v58 == -1) : (v59 = 1), v59))
  {
    v60 = 2;
  }
  else if (v58 >> 28)
  {
    v66 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v66 = v57;
    *(_DWORD *)(v66 + 8) = v58;
    v60 = 1;
    v57 = v66;
  }
  else
  {
    v60 = v57;
    v57 = 0;
  }
  v11 = v57 | v60;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v57 | v60) & 1) == 0)
    goto LABEL_3;
  v61 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v62 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v62 != 0x3FFFFFFF) ? (v63 = v62 == -1) : (v63 = 1), v63))
  {
    v64 = 2;
  }
  else if (v62 >> 28)
  {
    v67 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v67 = v61;
    *(_DWORD *)(v67 + 8) = v62;
    v64 = 1;
    v61 = v67;
  }
  else
  {
    v64 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v61 = 0;
  }
  v65 = v61 | v64;
  v13 = (_QWORD *)(v65 & 0xFFFFFFFF8);
  if ((v65 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v27 = *(unsigned __int16 *)(*((_QWORD *)this + 3528) + 18);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v28, v29, v30, v31, v32, v33);
  v34 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v35 = *((_QWORD *)this + 3528);
  v36 = *(unsigned __int16 *)(v35 + 18);
  if ((v36 - 123) >= 3)
  {
    if ((v36 - 126) >= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197D341C8);
    }
    v37 = (int *)(v35 + 72);
  }
  else
  {
    v37 = (int *)(v35 + 80);
  }
  v38 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *v37);
  if (v27 == 126)
    v46 = operationPutGetterByVal;
  else
    v46 = operationPutSetterByVal;
  v47 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v46);
  v48 = *((_QWORD *)this + 3472);
  v49 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v50 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, *((_QWORD *)this + 3471), v47, v34, (uint64_t)v18, v19, v38, (uint64_t)v26);
  JSC::B3::Procedure::addValueImpl(v49, v50);
  v68 = v50;
  v52 = (char **)(v48 + 8);
  v53 = *(unsigned int *)(v48 + 20);
  if ((_DWORD)v53 == *(_DWORD *)(v48 + 16))
  {
    v56 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v52, v53 + 1, (unint64_t)&v68);
    v53 = *(unsigned int *)(v48 + 20);
    *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8 * v53) = *(_QWORD *)v56;
    v54 = v68;
  }
  else
  {
    *(_QWORD *)&(*v52)[8 * v53] = v50;
    v54 = v50;
  }
  *(_DWORD *)(v48 + 20) = v53 + 1;
  *((_QWORD *)v54 + 4) = v48;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDeleteById(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(JSC::JSGlobalObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v10 = (unint64_t *)*((_QWORD *)this + 3528);
  v11 = (v10[3] >> 50) & 0x3F;
  if ((_DWORD)v11 == 8)
  {
    v13 = JSC::DFG::Node::ecmaMode(*((JSC::DFG::Node **)this + 3528));
    v14 = JSC::DFG::Node::cacheableIdentifier(*((JSC::DFG::Node **)this + 3528));
    if (v13)
    else
  }
  else
  {
    if ((_DWORD)v11)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v10, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1BA5, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDeleteById()", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197D3445CLL);
    }
    v15 = *(_QWORD *)this;
    JSC::CodeOrigin::CodeOrigin(&v46, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
    v29 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v15, &v46, v16, v17, v18, v19, v20, v21);
    if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v46 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
    if (JSC::DFG::Node::ecmaMode(*((JSC::DFG::Node **)this + 3528)))
      v36 = operationDeleteByIdSloppyGeneric;
    else
      v36 = operationDeleteByIdStrictGeneric;
    v37 = JSC::DFG::Node::cacheableIdentifier(*((JSC::DFG::Node **)this + 3528));
    v43 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37);
    v42 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v41);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDeleteByVal(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  int8x8_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  uint64_t (*v39)(JSC::JSGlobalObject *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  unsigned int v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  JSC::B3::Value *v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  unsigned int v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  unsigned int v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  JSC::B3::Value *v135;
  uint64_t v136;
  unint64_t v137;
  unsigned int v138;
  char v139;
  char v140;
  uint64_t v141;
  unsigned int v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  JSC::FTL::Output *v185;
  uint64_t v186;
  uint64_t v187;
  WTF *v188;
  __int128 v189;
  char v190;
  __n128 v191;
  uint64_t v192;

  v10 = (unint64_t *)*((_QWORD *)this + 3528);
  v11 = (v10[3] >> 50) & 0x3F;
  if (!(_DWORD)v11)
  {
    v22 = *(_QWORD *)this;
    v23 = *((_QWORD *)this + 3524);
    if ((v23 & 1) != 0)
    {
      v141 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 2) != 0
        || ((v142 = *(_DWORD *)((v23 & 0xFFFFFFFF8) + 8), v142 != 0x3FFFFFFF) ? (v143 = v142 == -1) : (v143 = 1), v143))
      {
        v144 = 2;
      }
      else if (v142 >> 28)
      {
        v175 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v175 = v141;
        *(_DWORD *)(v175 + 8) = v142;
        v144 = 1;
        v141 = v175;
      }
      else
      {
        v144 = v141;
        v141 = 0;
      }
      v23 = v141 | v144;
      v24 = *(_QWORD *)(v22 + 32);
      if (((v141 | v144) & 1) != 0)
      {
        v170 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
        if ((v23 & 2) != 0
          || ((v171 = *(_DWORD *)((v23 & 0xFFFFFFFF8) + 8), v171 != 0x3FFFFFFF) ? (v172 = v171 == -1) : (v172 = 1),
              v172))
        {
          v173 = 2;
        }
        else if (v171 >> 28)
        {
          v176 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v176 = v170;
          *(_DWORD *)(v176 + 8) = v171;
          v173 = 1;
          v170 = v176;
        }
        else
        {
          v173 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
          v170 = 0;
        }
        v174 = v170 | v173;
        v25 = (_QWORD *)(v174 & 0xFFFFFFFF8);
        if ((v174 & 1) != 0)
        {
          v26 = 0;
          v27 = 0;
          v28 = (_QWORD *)*v25;
          if (!*v25)
            goto LABEL_11;
          goto LABEL_10;
        }
        v27 = 0;
        v26 = 1;
LABEL_9:
        v28 = v25;
        if (!v25)
        {
LABEL_11:
          v29 = *(_QWORD *)(v24 + 8);
          if ((v26 & 1) == 0 && v25)
            WTF::fastFree((unint64_t)v25, v10, a4, a5, a6, a7, a8, a9);
          if ((v27 & 1) == 0 && (v23 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v23 & 0xFFFFFFFF8, v10, a4, a5, a6, a7, a8, a9);
          v36 = *((_QWORD *)this + 3528);
          v37 = *(unsigned __int16 *)(v36 + 18);
          if (v37 == 6)
            goto LABEL_14;
          if (*(unsigned __int16 *)(v36 + 18) <= 0x74u)
          {
            if ((v37 - 101) >= 4)
            {
LABEL_177:
              __break(0xC471u);
              JUMPOUT(0x197D34E44);
            }
          }
          else
          {
            v139 = v37 - 117;
            if ((v37 - 117) <= 0x3C)
            {
              if (((1 << v139) & 0x100000000000201FLL) != 0)
                goto LABEL_79;
              if (((1 << v139) & 0x4020) != 0)
                goto LABEL_14;
            }
            if (v37 != 391)
            {
              if (v37 != 253)
                goto LABEL_177;
LABEL_14:
              v38 = (_BYTE *)(v36 + 72);
LABEL_15:
              if (*v38)
                v39 = operationDeleteByValSloppyGeneric;
              else
                v39 = operationDeleteByValStrictGeneric;
              JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v29, v30, v31, v32, v33, v34, v35);
              v186 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v29);
              v44 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43);
              v45 = *((_QWORD *)this + 3528);
              v46 = *((_QWORD *)this + 3521);
              v191.n128_u64[0] = (unint64_t)v44;
              v191.n128_u64[1] = v46;
              v192 = v45;
              WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v189, (uint64_t *)this + 3493, &v192, &v191);
              return;
            }
          }
LABEL_79:
          v38 = (_BYTE *)(v36 + 80);
          goto LABEL_15;
        }
LABEL_10:
        v24 = v28[1];
        goto LABEL_11;
      }
    }
    else
    {
      v24 = *(_QWORD *)(v22 + 32);
    }
    v25 = (_QWORD *)(v23 & 0xFFFFFFFF8);
    v26 = 1;
    v27 = 1;
    goto LABEL_9;
  }
  if ((_DWORD)v11 != 8)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v10, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1BD1, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDeleteByVal()", "Bad use kind");
    __break(0xC471u);
    JUMPOUT(0x197D34EA8);
  }
  v19 = (unint64_t *)*((_QWORD *)this + 3528);
  v20 = (v19[4] >> 50) & 0x3F;
  if ((_DWORD)v20)
  {
    if ((_DWORD)v20 != 8)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v19, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1BBC, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDeleteByVal()", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197D34EECLL);
    }
  }
  else
  {
  }
  v47 = v21;
  v48 = *((_QWORD *)this + 3528);
  v49 = *(unsigned __int16 *)(v48 + 18);
  if (v49 == 6)
    goto LABEL_21;
  if (*(unsigned __int16 *)(v48 + 18) <= 0x74u)
  {
    if ((v49 - 101) >= 4)
    {
LABEL_178:
      __break(0xC471u);
      JUMPOUT(0x197D34E64);
    }
  }
  else
  {
    v140 = v49 - 117;
    if ((v49 - 117) <= 0x3C)
    {
      if (((1 << v140) & 0x100000000000201FLL) != 0)
        goto LABEL_81;
      if (((1 << v140) & 0x4020) != 0)
        goto LABEL_21;
    }
    if (v49 != 391)
    {
      if (v49 != 253)
        goto LABEL_178;
LABEL_21:
      v50 = (unsigned __int8 *)(v48 + 72);
      goto LABEL_22;
    }
  }
LABEL_81:
  v50 = (unsigned __int8 *)(v48 + 80);
LABEL_22:
  v51 = *v50;
  v185 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v52 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v53 = v52;
  if (v51)
  {
    v189 = (unint64_t)v17;
    v190 = 6;
    JSC::B3::StackmapValue::append(v52, (uint64_t)v17, (unint64_t)&v189 + 8);
    v189 = (unint64_t)v47;
    v190 = 6;
    JSC::B3::StackmapValue::append(v53, v47, (unint64_t)&v189 + 8);
    v54 = *((_QWORD *)this + 3488);
    v189 = xmmword_1991243E0;
    JSC::B3::StackmapValue::append(v53, v54, (unint64_t)&v189);
    v55 = *((_QWORD *)this + 3487);
    v189 = xmmword_1991243F0;
    JSC::B3::StackmapValue::append(v53, v55, (unint64_t)&v189);
    *((_QWORD *)v53 + 8) |= 0x30000uLL;
    *((_QWORD *)v53 + 10) |= 0x30000uLL;
    *((_BYTE *)v53 + 168) = HIBYTE(qword_1ECF4C780);
    v61 = *((_QWORD *)this + 1);
    v62 = (uint64_t *)*((_QWORD *)this + 3528);
    v63 = *v62;
    if ((*v62 & 1) != 0)
    {
      v147 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      if ((v63 & 2) != 0
        || (v148 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v148 == 0x3FFFFFFF)
        || (_DWORD)v148 == -1)
      {
        v149 = 2;
      }
      else if (v148 >> 28)
      {
        v178 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v178 = v147;
        *(_DWORD *)(v178 + 8) = v148;
        v149 = 1;
        v147 = v178;
      }
      else
      {
        v149 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
        v147 = v148 << 36;
      }
      v63 = v147 | v149;
      v64 = (v147 | v149) & 1;
    }
    else
    {
      v64 = 0;
    }
    v66 = v62[3];
    v65 = v62[4];
    v67 = v63;
    if (v64)
    {
      v150 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      if ((v63 & 2) != 0
        || (v151 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v151 == 0x3FFFFFFF)
        || (_DWORD)v151 == -1)
      {
        v152 = 2;
      }
      else if (v151 >> 28)
      {
        v179 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v179 = v150;
        *(_DWORD *)(v179 + 8) = v151;
        v152 = 1;
        v150 = v179;
      }
      else
      {
        v152 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
        v150 = v151 << 36;
      }
      v67 = v150 | v152;
    }
    v68 = (v66 >> 50) & 0x3F;
    v69 = (v65 >> 50) & 0x3F;
    v70 = v188;
    if (v188)
    {
      do
        v71 = __ldaxr((unsigned int *)v70);
      while (__stlxr(v71 + 1, (unsigned int *)v70));
    }
    v79 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)(v79 + 8) = 1;
    *(_QWORD *)v79 = &off_1E35762A8;
    *(_QWORD *)(v79 + 16) = v61;
    v80 = v67;
    if ((v67 & 1) != 0)
    {
      v153 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
      if ((v67 & 2) != 0
        || ((v154 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v154 != 0x3FFFFFFF)
          ? (v155 = (_DWORD)v154 == -1)
          : (v155 = 1),
            v155))
      {
        v156 = 2;
      }
      else
      {
        v184 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
        if (v154 >> 28)
        {
          v177 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v177 = v184;
          *(_DWORD *)(v177 + 8) = v154;
          v156 = 1;
          v153 = v177;
        }
        else
        {
          v156 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
          v153 = v154 << 36;
        }
      }
      v80 = v153 | v156;
    }
    *(_QWORD *)(v79 + 24) = v80;
    if (v70)
    {
      do
        v81 = __ldaxr((unsigned int *)v70);
      while (__stlxr(v81 + 1, (unsigned int *)v70));
    }
    *(_QWORD *)(v79 + 32) = v70;
    *(_WORD *)(v79 + 40) = v68 | ((_WORD)v69 << 8);
    v82 = (unsigned int *)*((_QWORD *)v53 + 7);
    *((_QWORD *)v53 + 7) = v79;
    if (!v82)
      goto LABEL_35;
    v83 = v82 + 2;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v82 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v82 + 8))(v82);
      if (!v70)
        goto LABEL_38;
    }
    else
    {
LABEL_35:
      if (!v70)
        goto LABEL_38;
    }
    do
    {
      v86 = __ldaxr((unsigned int *)v70);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, (unsigned int *)v70));
    if (!v87)
    {
      atomic_store(1u, (unsigned int *)v70);
      v157 = *((_QWORD *)v70 + 4);
      if ((v157 & 1) != 0 && (v157 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v157 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
      v158 = *((_QWORD *)v70 + 3);
      if ((v158 & 1) != 0 && (v158 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v158 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree((unint64_t)v70, v72, v73, v74, v75, v76, v77, v78);
    }
LABEL_38:
    if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v67 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
    v88 = JSC::FTL::Output::notZero64(v185, (JSC::B3::Value *)v53);
    v89 = *((_QWORD *)this + 3528);
    v90 = *((_QWORD *)this + 3521);
    v191.n128_u64[0] = (unint64_t)v88;
    v191.n128_u64[1] = v90;
    v192 = v89;
    WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v189, (uint64_t *)this + 3493, &v192, &v191);
    if (v64 && (v63 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v63 & 0xFFFFFFFF8, v91, v92, v93, v94, v95, v96, v97);
    v98 = v188;
    v188 = 0;
    if (v98)
    {
      do
      {
        v99 = __ldaxr((unsigned int *)v98);
        v100 = --v99 == 0;
      }
      while (__stlxr(v99, (unsigned int *)v98));
      goto LABEL_62;
    }
    return;
  }
  v189 = (unint64_t)v17;
  v190 = 6;
  JSC::B3::StackmapValue::append(v52, (uint64_t)v17, (unint64_t)&v189 + 8);
  v189 = (unint64_t)v47;
  v190 = 6;
  JSC::B3::StackmapValue::append(v53, v47, (unint64_t)&v189 + 8);
  v101 = *((_QWORD *)this + 3488);
  v189 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v53, v101, (unint64_t)&v189);
  v102 = *((_QWORD *)this + 3487);
  v189 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v53, v102, (unint64_t)&v189);
  *((_QWORD *)v53 + 8) |= 0x30000uLL;
  *((_QWORD *)v53 + 10) |= 0x30000uLL;
  *((_BYTE *)v53 + 168) = HIBYTE(qword_1ECF4C780);
  v108 = *((_QWORD *)this + 1);
  v109 = (uint64_t *)*((_QWORD *)this + 3528);
  v110 = *v109;
  if ((*v109 & 1) != 0)
  {
    v159 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
    if ((v110 & 2) != 0
      || (v160 = *(unsigned int *)((v110 & 0xFFFFFFFF8) + 8), (_DWORD)v160 == 0x3FFFFFFF)
      || (_DWORD)v160 == -1)
    {
      v161 = 2;
    }
    else if (v160 >> 28)
    {
      v181 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v181 = v159;
      *(_DWORD *)(v181 + 8) = v160;
      v161 = 1;
      v159 = v181;
    }
    else
    {
      v161 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
      v159 = v160 << 36;
    }
    v110 = v159 | v161;
    v111 = (v159 | v161) & 1;
  }
  else
  {
    v111 = 0;
  }
  v113 = v109[3];
  v112 = v109[4];
  v114 = v110;
  if (v111)
  {
    v162 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
    if ((v110 & 2) != 0
      || (v163 = *(unsigned int *)((v110 & 0xFFFFFFFF8) + 8), (_DWORD)v163 == 0x3FFFFFFF)
      || (_DWORD)v163 == -1)
    {
      v164 = 2;
    }
    else if (v163 >> 28)
    {
      v182 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v182 = v162;
      *(_DWORD *)(v182 + 8) = v163;
      v164 = 1;
      v162 = v182;
    }
    else
    {
      v164 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
      v162 = v163 << 36;
    }
    v114 = v162 | v164;
  }
  v115 = (v113 >> 50) & 0x3F;
  v116 = (v112 >> 50) & 0x3F;
  v117 = v188;
  if (v188)
  {
    do
      v118 = __ldaxr((unsigned int *)v117);
    while (__stlxr(v118 + 1, (unsigned int *)v117));
  }
  v126 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v126 + 8) = 1;
  *(_QWORD *)v126 = &off_1E3576230;
  *(_QWORD *)(v126 + 16) = v108;
  v127 = v114;
  if ((v114 & 1) != 0)
  {
    v183 = *(_QWORD *)(v114 & 0xFFFFFFFF8);
    if ((v114 & 2) != 0
      || ((v165 = *(unsigned int *)((v114 & 0xFFFFFFFF8) + 8), (_DWORD)v165 != 0x3FFFFFFF)
        ? (v166 = (_DWORD)v165 == -1)
        : (v166 = 1),
          v166))
    {
      v167 = 2;
    }
    else if (v165 >> 28)
    {
      v180 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v180 = v183;
      *(_DWORD *)(v180 + 8) = v165;
      v167 = 1;
      v183 = v180;
    }
    else
    {
      v167 = *(_QWORD *)(v114 & 0xFFFFFFFF8);
      v183 = v165 << 36;
    }
    v127 = v183 | v167;
  }
  *(_QWORD *)(v126 + 24) = v127;
  if (v117)
  {
    do
      v128 = __ldaxr((unsigned int *)v117);
    while (__stlxr(v128 + 1, (unsigned int *)v117));
  }
  *(_QWORD *)(v126 + 32) = v117;
  *(_WORD *)(v126 + 40) = v115 | ((_WORD)v116 << 8);
  v129 = (unsigned int *)*((_QWORD *)v53 + 7);
  *((_QWORD *)v53 + 7) = v126;
  if (!v129)
    goto LABEL_55;
  v130 = v129 + 2;
  do
  {
    v131 = __ldaxr(v130);
    v132 = v131 - 1;
  }
  while (__stlxr(v132, v130));
  if (!v132)
  {
    atomic_store(1u, v129 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v129 + 8))(v129);
    if (!v117)
      goto LABEL_58;
  }
  else
  {
LABEL_55:
    if (!v117)
      goto LABEL_58;
  }
  do
  {
    v133 = __ldaxr((unsigned int *)v117);
    v134 = v133 - 1;
  }
  while (__stlxr(v134, (unsigned int *)v117));
  if (!v134)
  {
    atomic_store(1u, (unsigned int *)v117);
    v168 = *((_QWORD *)v117 + 4);
    if ((v168 & 1) != 0 && (v168 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v168 & 0xFFFFFFFF8, v119, v120, v121, v122, v123, v124, v125);
    v169 = *((_QWORD *)v117 + 3);
    if ((v169 & 1) != 0 && (v169 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v169 & 0xFFFFFFFF8, v119, v120, v121, v122, v123, v124, v125);
    WTF::fastFree((unint64_t)v117, v119, v120, v121, v122, v123, v124, v125);
  }
LABEL_58:
  if ((v114 & 1) != 0 && (v114 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v114 & 0xFFFFFFFF8, v119, v120, v121, v122, v123, v124, v125);
  v135 = JSC::FTL::Output::notZero64(v185, (JSC::B3::Value *)v53);
  v136 = *((_QWORD *)this + 3528);
  v137 = *((_QWORD *)this + 3521);
  v191.n128_u64[0] = (unint64_t)v135;
  v191.n128_u64[1] = v137;
  v192 = v136;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v189, (uint64_t *)this + 3493, &v192, &v191);
  if (v111 && (v110 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v110 & 0xFFFFFFFF8, v91, v92, v93, v94, v95, v96, v97);
  v98 = v188;
  v188 = 0;
  if (v98)
  {
    do
    {
      v138 = __ldaxr((unsigned int *)v98);
      v100 = --v138 == 0;
    }
    while (__stlxr(v138, (unsigned int *)v98));
LABEL_62:
    if (v100)
    {
      atomic_store(1u, (unsigned int *)v98);
      v145 = *((_QWORD *)v98 + 4);
      if ((v145 & 1) != 0 && (v145 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v145 & 0xFFFFFFFF8, v91, v92, v93, v94, v95, v96, v97);
      v146 = *((_QWORD *)v98 + 3);
      if ((v146 & 1) != 0 && (v146 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v146 & 0xFFFFFFFF8, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree((unint64_t)v98, v91, v92, v93, v94, v95, v96, v97);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckArrayOrEmpty(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  int v18;
  JSC::DFG::Graph *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::BasicBlock *v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[4];
  int v62;

  v10 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v17 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v17 + 18) == 146)
    v18 = *(_DWORD *)(v17 + 80);
  else
    v18 = *(_DWORD *)(v17 + 72);
  v62 = v18;
  v19 = *(JSC::DFG::Graph **)this;
  v31 = JSC::DFG::ArrayMode::alreadyChecked((JSC::DFG::ArrayMode *)&v62, v19, (JSC::DFG::Node *)v17, (const JSC::DFG::AbstractValue *)v61, v20, v21, v22, v23);
  if ((v61[0] & 1) != 0)
    WTF::fastFree(v61[0] & 0xFFFFFFFFFFFFFFFCLL, v24, v25, v26, v27, v28, v29, v30);
  if ((v31 & 1) == 0)
  {
    v32 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
    v33 = *((_QWORD *)this + 3519);
    v34 = *(_QWORD *)(v33 + 8);
    v35 = *(unsigned int *)((v32 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v36 = (_QWORD *)(v34 + 24);
    v37 = (_QWORD *)(v34 + 8);
    if ((v32 & 1) != 0)
      v38 = v36;
    else
      v38 = v37;
    v39 = *v38 + 32 * v35;
    v40 = (void *)*(unsigned int *)(v33 + 88);
    if ((_DWORD)v40 != *(_DWORD *)(v39 + 20))
    {
      if ((*(_QWORD *)(v39 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v39, v40, v25, v26, v27, v28, v29, v30);
      else
        *(_DWORD *)(v39 + 20) = (_DWORD)v40;
    }
    v41 = *(_QWORD *)(v39 + 8);
    if ((v41 & 0x40000000000) != 0)
    {
      v42 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v43 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v44 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v44, (uint64_t)v43, v42, NAN, NAN, v45, v46, v47, v48);
      *((_QWORD *)this + 3472) = v42;
      v49 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v43;
    }
    else
    {
      v49 = 0;
      v43 = 0;
    }
    v50 = *((_QWORD *)this + 3528);
    if (*(_WORD *)(v50 + 18) == 146)
      v51 = *(_DWORD *)(v50 + 80);
    else
      v51 = *(_DWORD *)(v50 + 72);
    v53 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v52);
    if ((v41 & 0x40000000000) != 0)
    {
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43, v55, v56, v57, v58, v59, v60);
      *((_QWORD *)this + 3472) = v43;
      *((_QWORD *)this + 3473) = v49;
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckDetached(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  int8x8_t v19;
  char **v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  char *v23;
  JSC::B3::Value *v24;

  v10 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v12 = *((_QWORD *)this + 299);
  v13 = (uint64_t)v11;
  if (v12)
  {
    v14 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
    v13 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v14);
  }
  v15 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2368), v13, 2);
  v16 = *((_QWORD *)this + 3472);
  v17 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v18 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v15, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v17, v18);
  v24 = v18;
  v20 = (char **)(v16 + 8);
  v21 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v16 + 16))
  {
    v23 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)&v24);
    v21 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v21) = *(_QWORD *)v23;
    v22 = v24;
  }
  else
  {
    *(_QWORD *)&(*v20)[8 * v21] = v18;
    v22 = v18;
  }
  *(_DWORD *)(v16 + 20) = v21 + 1;
  *((_QWORD *)v22 + 4) = v16;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetTypedArrayLengthAsInt52(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  int v21;
  BOOL v22;

  v10 = *((_QWORD *)this + 3528);
  v11 = *(unsigned __int16 *)(v10 + 18);
  if (v11 == 146)
    v12 = *(_DWORD *)(v10 + 80);
  else
    v12 = *(_DWORD *)(v10 + 72);
  if (v12 != 25)
  {
    v21 = JSC::DFG::toTypedArrayType(v12);
    if (v21)
      v22 = v21 == 12;
    else
      v22 = 1;
    if (v22)
    {
      __break(0xC471u);
      return;
    }
    v10 = *((_QWORD *)this + 3528);
    v11 = *(unsigned __int16 *)(v10 + 18);
  }
  if (v11 == 146)
    v13 = *(_DWORD *)(v10 + 80);
  else
    v13 = *(_DWORD *)(v10 + 72);
  if (v13 == 25)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v18 = JSC::DFG::toTypedArrayType(v13);
    v19 = 256;
  }
}

int8x8_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetVectorLength(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  JSC::B3::Value *v12;
  const JSC::FTL::AbstractHeap *v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v10 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v10 + 18) == 146)
    v11 = *(_DWORD *)(v10 + 80);
  else
    v11 = *(_DWORD *)(v10 + 72);
  if ((v11 & 0xFE) == 0xA)
  {
    v13 = (const JSC::FTL::AbstractHeap *)*((_QWORD *)this + 832);
    v14 = *((_QWORD *)v13 + 3);
    if (v14)
    {
      v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14);
      v12 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, v15);
    }
    v16 = JSC::FTL::Output::load((uint64_t)this + 27640, v13, (uint64_t)v12, 1);
    v17 = *((_QWORD *)this + 3528);
    v18 = *((_QWORD *)this + 3521);
    v20.n128_u64[0] = v16;
    v20.n128_u64[1] = v18;
    v21 = v17;
    return (int8x8_t)WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v19, (uint64_t *)this + 3489, &v21, &v20).n128_u64[0];
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileAssertInBounds(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  JSC::DFG::Node *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  _BYTE v68[24];
  _QWORD *v69;
  uint64_t v70;

  v19 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v20 = v19;
  v21 = *((_QWORD *)this + 3473);
  if (v21)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v21, v19);
  }
  else
  {
    v70 = v19;
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    v22[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v22;
    v69 = v22;
    v22[2] = v20;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v70, (uint64_t *)&v69, v23, v24, v25, v26, v27, (uint64_t)v68);
    v28 = v69;
    v29 = (_QWORD *)*((_QWORD *)this + 3479);
    *v69 = (char *)this + 27824;
    v28[1] = v29;
    *v29 = v28;
    *((_QWORD *)this + 3479) = v28;
  }
  v30 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v31 = v30;
  v32 = *((_QWORD *)this + 3473);
  if (v32)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v32, v30);
  }
  else
  {
    v70 = v30;
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v33 = 0u;
    *((_OWORD *)v33 + 1) = 0u;
    v33[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v33;
    v69 = v33;
    v33[2] = v31;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v70, (uint64_t *)&v69, v34, v35, v36, v37, v38, (uint64_t)v68);
    v39 = v69;
    v40 = (_QWORD *)*((_QWORD *)this + 3479);
    *v69 = (char *)this + 27824;
    v39[1] = v40;
    *v40 = v39;
    *((_QWORD *)this + 3479) = v39;
  }
  v41 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10, v18);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v41, v31, v20, 1.0, 0.0, v42, v43, v44, v45);
  *((_QWORD *)this + 3472) = v20;
  v46 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v31;
  v47 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(*(_QWORD *)this + 32));
  v48 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 20));
  v49 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x14));
  v50 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)((*(_QWORD *)(*((_QWORD *)this + 3528) + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x14));
  v58 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationReportBoundsCheckEliminationErrorAndCrash);
  JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), 0, *((_QWORD *)this + 3471), v58, v47, v48, v49, v50, (uint64_t)v10, (uint64_t)v18);
  if (JSC::DFG::mayExit(*(JSC::DFG **)this, *((JSC::DFG::Graph **)this + 3528), v59))
  result = JSC::B3::BasicBlock::appendNewControlValue(*((_QWORD *)this + 3472), *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v63, v64, v65, v66);
  *((_QWORD *)this + 3472) = v31;
  *((_QWORD *)this + 3473) = v46;
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckInBoundsInt52(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  int8x8_t v15;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v12 = (JSC::B3::Value *)JSC::FTL::Output::signExt32To64(v10, v11);
  v14 = JSC::FTL::Output::aboveOrEqual(v10, v12, v13);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  BOOL v91;
  uint64_t v92;
  unsigned int *v93;
  __int128 v94;
  unsigned int *v95;
  BOOL v96;
  char v97;
  BOOL v98;
  BOOL v99;

  v2 = (unint64_t *)*((_QWORD *)this + 3528);
  v39 = *((_QWORD *)&v94 + 1);
  if ((v94 & 1) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFFFFFFFFFCLL, v32, v33, v34, v35, v36, v37, v38);
  v47 = *((_QWORD *)&v94 + 1) & 0xFFFFFFFFCFFFFFFFLL;
  if ((v94 & 1) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFFFFFFFFFCLL, v40, v41, v42, v43, v44, v45, v46);
  v48 = v39 & 0xFFFFD7FF00000008;
  if (!v47)
  {
    v91 = 0;
LABEL_7:
    v90 = 0;
    goto LABEL_8;
  }
  v82 = *((_QWORD *)&v94 + 1) & 0xFFFFFFFCFFFFFFFFLL;
  if ((v94 & 1) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFFFFFFFFFCLL, v75, v76, v77, v78, v79, v80, v81);
  if (v82)
  {
    v91 = (*((_QWORD *)&v94 + 1) & 0xFFFFFFFFBFFFFFFFLL) == 0;
    if ((v94 & 1) != 0)
      WTF::fastFree(v94 & 0xFFFFFFFFFFFFFFFCLL, v83, v84, v85, v86, v87, v88, v89);
    goto LABEL_7;
  }
  v90 = 1;
  v91 = 0;
LABEL_8:
  v49 = v48 == 0;
  v50 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v94 = (unint64_t)v3;
  LOBYTE(v95) = 3;
  JSC::B3::StackmapValue::append(v50, v3, (unint64_t)&v94 + 8);
  v94 = (unint64_t)v4;
  LOBYTE(v95) = 3;
  JSC::B3::StackmapValue::append(v50, v4, (unint64_t)&v94 + 8);
  v94 = (unint64_t)v5;
  LOBYTE(v95) = 3;
  JSC::B3::StackmapValue::append(v50, v5, (unint64_t)&v94 + 8);
  v51 = *((_QWORD *)this + 3488);
  v94 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v50, v51, (unint64_t)&v94);
  v52 = *((_QWORD *)this + 3487);
  v94 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v50, v52, (unint64_t)&v94);
  *((_QWORD *)v50 + 8) |= 0x30000uLL;
  *((_QWORD *)v50 + 10) |= 0x30000uLL;
  *((_BYTE *)v50 + 168) = HIBYTE(qword_1ECF4C780);
  v58 = *((_QWORD *)this + 1);
  JSC::CodeOrigin::CodeOrigin(&v92, (const JSC::CodeOrigin *)v2);
  *(_QWORD *)&v94 = v58;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v94 + 1, (const JSC::CodeOrigin *)&v92);
  v59 = v93;
  if (v93)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v95 = v59;
  v96 = v47 == 0;
  v97 = v90;
  v98 = v91;
  v99 = v49;
  if ((v92 & 1) != 0 && (v92 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v92 & 0xFFFFFFFF8, v68, v69, v70, v71, v72, v73, v74);
  if (v93)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v93, v68, v69, v70, v71, v72, v73, v74);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  __n128 v103;
  uint64_t v104;
  __int128 v105;
  char v106;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v72 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v73 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v73 != 0x3FFFFFFF) ? (v74 = v73 == -1) : (v74 = 1), v74))
  {
    v75 = 2;
  }
  else if (v73 >> 28)
  {
    v95 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v95 = v72;
    *(_DWORD *)(v95 + 8) = v73;
    v75 = 1;
    v72 = v95;
  }
  else
  {
    v75 = v72;
    v72 = 0;
  }
  v11 = v72 | v75;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v72 | v75) & 1) == 0)
    goto LABEL_3;
  v87 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v88 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v88 != 0x3FFFFFFF) ? (v89 = v88 == -1) : (v89 = 1), v89))
  {
    v90 = 2;
  }
  else if (v88 >> 28)
  {
    v99 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v99 = v87;
    *(_DWORD *)(v99 + 8) = v88;
    v90 = 1;
    v87 = v99;
  }
  else
  {
    v90 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v87 = 0;
  }
  v94 = v87 | v90;
  v13 = (_QWORD *)(v94 & 0xFFFFFFFF8);
  if ((v94 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_QWORD *)this + 3528);
  v19 = (unint64_t *)(v18 + 24);
  if ((*(_BYTE *)(v18 + 56) & 0x10) != 0)
  {
    v69 = *v19;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v69)
    {
      __break(0xC471u);
      JUMPOUT(0x197D36190);
    }
    v19 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v69);
  }
  v21 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v21 + 56) & 0x10) != 0)
  {
    v70 = *(_DWORD *)(v21 + 24) + 1;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v70)
    {
      __break(0xC471u);
      JUMPOUT(0x197D36198);
    }
    v22 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v70);
  }
  else
  {
    v22 = (unint64_t *)(v21 + 32);
  }
  v24 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v24 + 56) & 0x10) != 0)
  {
    v71 = *(_DWORD *)(v24 + 24) + 2;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v71)
    {
      __break(0xC471u);
      JUMPOUT(0x197D361A0);
    }
    v25 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v71);
  }
  else
  {
    v25 = (unint64_t *)(v24 + 40);
  }
  v27 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v105 = (unint64_t)v20;
  v106 = 3;
  JSC::B3::StackmapValue::append(v27, (uint64_t)v20, (unint64_t)&v105 + 8);
  v105 = (unint64_t)v26;
  v106 = 3;
  JSC::B3::StackmapValue::append(v27, v26, (unint64_t)&v105 + 8);
  v105 = (unint64_t)v23;
  v106 = 3;
  JSC::B3::StackmapValue::append(v27, v23, (unint64_t)&v105 + 8);
  v28 = *((_QWORD *)this + 3488);
  v105 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v27, v28, (unint64_t)&v105);
  v29 = *((_QWORD *)this + 3487);
  v105 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v27, v29, (unint64_t)&v105);
  *((_QWORD *)v27 + 8) |= 0x30000uLL;
  *((_QWORD *)v27 + 10) |= 0x30000uLL;
  *((_BYTE *)v27 + 168) = 4;
  v35 = *((_QWORD *)this + 1);
  v36 = **((_QWORD **)this + 3528);
  if ((v36 & 1) == 0)
    goto LABEL_14;
  v76 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
  if ((v36 & 2) != 0
    || (v77 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v77 == 0x3FFFFFFF)
    || (_DWORD)v77 == -1)
  {
    v78 = 2;
  }
  else if (v77 >> 28)
  {
    v98 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v98 = v76;
    *(_DWORD *)(v98 + 8) = v77;
    v78 = 1;
    v76 = v98;
  }
  else
  {
    v78 = v76;
    v76 = v77 << 36;
  }
  v36 = v76 | v78;
  if (((v76 | v78) & 1) != 0)
  {
    v91 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || (v92 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v92 == 0x3FFFFFFF)
      || (_DWORD)v92 == -1)
    {
      v93 = 2;
    }
    else if (v92 >> 28)
    {
      v100 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v100 = v91;
      *(_DWORD *)(v100 + 8) = v92;
      v93 = 1;
      v91 = v100;
    }
    else
    {
      v93 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      v91 = v92 << 36;
    }
    v37 = 0;
    v38 = v91 | v93;
  }
  else
  {
LABEL_14:
    v37 = 1;
    v38 = v36;
  }
  v39 = v102;
  if (v102)
  {
    do
      v40 = __ldaxr((unsigned int *)v39);
    while (__stlxr(v40 + 1, (unsigned int *)v39));
  }
  v41 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v41 + 8) = 1;
  *(_QWORD *)v41 = &off_1E35764B0;
  *(_QWORD *)(v41 + 16) = v35;
  v49 = v38;
  if ((v38 & 1) != 0)
  {
    v79 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
    if ((v38 & 2) != 0
      || ((v80 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v101 = v41;
      v96 = *(_DWORD *)((v38 & 0xFFFFFFFF8) + 8);
      v97 = WTF::fastMalloc((WTF *)0x10);
      v41 = v101;
      *(_QWORD *)v97 = v79;
      *(_DWORD *)(v97 + 8) = v96;
      v82 = 1;
      v79 = v97;
    }
    else
    {
      v82 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v49 = v79 | v82;
  }
  *(_QWORD *)(v41 + 24) = v49;
  if (v39)
  {
    do
      v50 = __ldaxr((unsigned int *)v39);
    while (__stlxr(v50 + 1, (unsigned int *)v39));
  }
  *(_QWORD *)(v41 + 32) = v39;
  *(_QWORD *)(v41 + 40) = v17;
  v51 = (unsigned int *)*((_QWORD *)v27 + 7);
  *((_QWORD *)v27 + 7) = v41;
  if (!v51)
    goto LABEL_24;
  v52 = v51 + 2;
  do
  {
    v53 = __ldaxr(v52);
    v54 = v53 - 1;
  }
  while (__stlxr(v54, v52));
  if (!v54)
  {
    atomic_store(1u, v51 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    if (!v39)
      goto LABEL_27;
  }
  else
  {
LABEL_24:
    if (!v39)
      goto LABEL_27;
  }
  do
  {
    v55 = __ldaxr((unsigned int *)v39);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v39));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)v39);
    v83 = *((_QWORD *)v39 + 4);
    if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v83 & 0xFFFFFFFF8, v42, v43, v44, v45, v46, v47, v48);
    v84 = *((_QWORD *)v39 + 3);
    if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v84 & 0xFFFFFFFF8, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree((unint64_t)v39, v42, v43, v44, v45, v46, v47, v48);
  }
LABEL_27:
  if ((v38 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v38 & 0xFFFFFFFF8, v42, v43, v44, v45, v46, v47, v48);
  v57 = *((_QWORD *)this + 3528);
  v58 = *((_QWORD *)this + 3521);
  v103.n128_u64[0] = (unint64_t)v27;
  v103.n128_u64[1] = v58;
  v104 = v57;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v105, (uint64_t *)this + 3492, &v104, &v103);
  if ((v37 & 1) == 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
  v66 = v102;
  v102 = 0;
  if (v66)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)v66));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)v66);
      v85 = *((_QWORD *)v66 + 4);
      if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v85 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
      v86 = *((_QWORD *)v66 + 3);
      if ((v86 & 1) != 0 && (v86 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v86 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree((unint64_t)v66, v59, v60, v61, v62, v63, v64, v65);
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValWithThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(unint64_t, uint64_t, uint64_t, uint64_t, const JSC::PropertyTable *, unint64_t, uint64_t, uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  JSC::DFG::Node *v50;
  char **v51;
  uint64_t v52;
  JSC::B3::Value *v53;
  char *v55;
  char v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v57 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v58 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v58 != 0x3FFFFFFF) ? (v59 = v58 == -1) : (v59 = 1), v59))
  {
    v60 = 2;
  }
  else if (v58 >> 28)
  {
    v66 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v66 = v57;
    *(_DWORD *)(v66 + 8) = v58;
    v60 = 1;
    v57 = v66;
  }
  else
  {
    v60 = v57;
    v57 = 0;
  }
  v10 = v57 | v60;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v57 | v60) & 1) == 0)
    goto LABEL_3;
  v61 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v62 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v62 != 0x3FFFFFFF) ? (v63 = v62 == -1) : (v63 = 1), v63))
  {
    v64 = 2;
  }
  else if (v62 >> 28)
  {
    v67 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v67 = v61;
    *(_DWORD *)(v67 + 8) = v62;
    v64 = 1;
    v61 = v67;
  }
  else
  {
    v64 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v61 = 0;
  }
  v65 = v61 | v64;
  v12 = (_QWORD *)(v65 & 0xFFFFFFFF8);
  if ((v65 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197D36570);
  }
  v18 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197D36578);
  }
  v19 = v17;
  v21 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197D36580);
  }
  v22 = v20;
  v24 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 3;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197D36588);
  }
  v25 = v23;
  v33 = *((_QWORD *)this + 3528);
  v34 = *(unsigned __int16 *)(v33 + 18);
  if (v34 == 6)
    goto LABEL_13;
  if (*(unsigned __int16 *)(v33 + 18) <= 0x74u)
  {
    if ((v34 - 101) >= 4)
    {
LABEL_56:
      __break(0xC471u);
      JUMPOUT(0x197D36530);
    }
  }
  else
  {
    v56 = v34 - 117;
    if ((v34 - 117) <= 0x3C)
    {
      if (((1 << v56) & 0x100000000000201FLL) != 0)
        goto LABEL_29;
      if (((1 << v56) & 0x4020) != 0)
        goto LABEL_13;
    }
    if (v34 != 391)
    {
      if (v34 != 253)
        goto LABEL_56;
LABEL_13:
      v35 = (unsigned __int8 *)(v33 + 72);
      goto LABEL_14;
    }
  }
LABEL_29:
  v35 = (unsigned __int8 *)(v33 + 80);
LABEL_14:
  v36 = *v35;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v26, v27, v28, v29, v30, v31);
  v37 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  if (v36)
    v45 = operationPutByValWithThis;
  else
    v45 = operationPutByValWithThisStrict;
  v46 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v45);
  v47 = *((_QWORD *)this + 3472);
  v48 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v49 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, *((_QWORD *)this + 3471), v46, v37, v19, v22, v25, v32);
  JSC::B3::Procedure::addValueImpl(v48, v49);
  v68 = v49;
  v51 = (char **)(v47 + 8);
  v52 = *(unsigned int *)(v47 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v47 + 16))
  {
    v55 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v68);
    v52 = *(unsigned int *)(v47 + 20);
    *(_QWORD *)(*(_QWORD *)(v47 + 8) + 8 * v52) = *(_QWORD *)v55;
    v53 = v68;
  }
  else
  {
    *(_QWORD *)&(*v51)[8 * v52] = v49;
    v53 = v49;
  }
  *(_DWORD *)(v47 + 20) = v52 + 1;
  *((_QWORD *)v53 + 4) = v47;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  void *v54;
  char v55;
  uint64_t v56;
  WTF *v57;
  unsigned int v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  WTF *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int8x8_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  JSC::B3::Value *v114;
  JSC::B3::Value *v115;
  JSC::DFG::Node *v116;
  char **v117;
  uint64_t v118;
  WTF *v119;
  char *v120;
  uint64_t v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE v148[7];
  WTF *v149[2];
  char v150;

  v10 = *(_QWORD **)this;
  v11 = **((_QWORD **)this + 3528);
  if ((v11 & 1) == 0)
  {
    v12 = v10[4];
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v121 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v122 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v122 != 0x3FFFFFFF) ? (v123 = v122 == -1) : (v123 = 1), v123))
  {
    v124 = 2;
  }
  else if (v122 >> 28)
  {
    v142 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v142 = v121;
    *(_DWORD *)(v142 + 8) = v122;
    v124 = 1;
    v121 = v142;
  }
  else
  {
    v124 = v121;
    v121 = 0;
  }
  v11 = v121 | v124;
  v12 = v10[4];
  if (((v121 | v124) & 1) == 0)
    goto LABEL_3;
  v125 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v126 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v126 != 0x3FFFFFFF) ? (v127 = v126 == -1) : (v127 = 1), v127))
  {
    v128 = 2;
  }
  else if (v126 >> 28)
  {
    v143 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v143 = v125;
    *(_DWORD *)(v143 + 8) = v126;
    v128 = 1;
    v125 = v143;
  }
  else
  {
    v128 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v125 = 0;
  }
  v129 = v125 | v128;
  v13 = (_QWORD *)(v129 & 0xFFFFFFFF8);
  if ((v129 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = (uint64_t *)*((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(*(_QWORD *)this + 1024);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)v18 + ~((_QWORD)v18 << 32)) ^ (((unint64_t)v18 + ~((_QWORD)v18 << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(uint64_t **)(v19 + 8 * v24);
    if (v25 == v18)
    {
LABEL_40:
      v80 = v18[3];
      if ((v80 & 0xFC000000000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x12FF, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutPrivateName()", "child1.useKind() == UntypedUse");
        __break(0xC471u);
        JUMPOUT(0x197D36D40);
      }
      v82 = v18[4];
      v96 = *(unsigned __int8 *)(*((_QWORD *)this + 3528) + 80);
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v97, v98, v99, v100, v101, v102);
      v103 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
      if (v96 == 2)
        v111 = operationPutByValDefinePrivateFieldGeneric;
      else
        v111 = operationPutByValSetPrivateFieldGeneric;
      v112 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v111);
      v113 = *((_QWORD *)this + 3472);
      v114 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v115 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, *((_QWORD *)this + 3471), v112, v103, v81, (uint64_t)v89, v95);
      JSC::B3::Procedure::addValueImpl(v114, v115);
      v149[0] = v115;
      v117 = (char **)(v113 + 8);
      v118 = *(unsigned int *)(v113 + 20);
      if ((_DWORD)v118 == *(_DWORD *)(v113 + 16))
      {
        v120 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v117, v118 + 1, (unint64_t)v149);
        v118 = *(unsigned int *)(v113 + 20);
        *(_QWORD *)(*(_QWORD *)(v113 + 8) + 8 * v118) = *(_QWORD *)v120;
        v119 = v149[0];
      }
      else
      {
        *(_QWORD *)&(*v117)[8 * v118] = v115;
        v119 = v115;
      }
      *(_DWORD *)(v113 + 20) = v118 + 1;
      *((_QWORD *)v119 + 4) = v113;
      return;
    }
    v26 = 1;
    while (v25)
    {
      v24 = (v24 + v26) & v20;
      v25 = *(uint64_t **)(v19 + 8 * v24);
      ++v26;
      if (v25 == v18)
        goto LABEL_40;
    }
  }
  v27 = v18[3];
  if ((v27 & 0xF8000000000000) != 0x20000000000000)
    goto LABEL_40;
  v29 = v18[4];
  v43 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
  v149[1] = 0;
  v150 = 3;
  JSC::B3::StackmapValue::append(v43, (uint64_t)v28, (unint64_t)&v149[1]);
  v149[1] = 0;
  v150 = 3;
  JSC::B3::StackmapValue::append(v43, (uint64_t)v36, (unint64_t)&v149[1]);
  v149[0] = v42;
  v149[1] = 0;
  v150 = 3;
  JSC::B3::StackmapValue::append(v43, (uint64_t)v42, (unint64_t)&v149[1]);
  v44 = *((_QWORD *)this + 3488);
  *(_OWORD *)v149 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v43, v44, (unint64_t)v149);
  v45 = *((_QWORD *)this + 3487);
  *(_OWORD *)v149 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v43, v45, (unint64_t)v149);
  *((_QWORD *)v43 + 8) |= 0x30000uLL;
  *((_QWORD *)v43 + 10) |= 0x30000uLL;
  *((_BYTE *)v43 + 168) = HIBYTE(qword_1ECF4C780);
  v51 = *((_QWORD *)this + 1);
  v52 = *v18;
  if ((*v18 & 1) == 0)
  {
    v53 = *(unsigned __int8 *)(*((_QWORD *)this + 3528) + 80);
    if (v53 == 2)
      v54 = operationPutByValDefinePrivateFieldOptimize;
    else
      v54 = operationPutByValSetPrivateFieldOptimize;
LABEL_19:
    v55 = 1;
    v56 = v52;
    goto LABEL_20;
  }
  v130 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
  if ((v52 & 2) != 0
    || (v131 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v131 == 0x3FFFFFFF)
    || (_DWORD)v131 == -1)
  {
    v132 = 2;
  }
  else if (v131 >> 28)
  {
    v144 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v144 = v130;
    *(_DWORD *)(v144 + 8) = v131;
    v132 = 1;
    v130 = v144;
  }
  else
  {
    v132 = v130;
    v130 = v131 << 36;
  }
  v52 = v130 | v132;
  v53 = *(unsigned __int8 *)(*((_QWORD *)this + 3528) + 80);
  if (v53 == 2)
    v54 = operationPutByValDefinePrivateFieldOptimize;
  else
    v54 = operationPutByValSetPrivateFieldOptimize;
  if ((v52 & 1) == 0)
    goto LABEL_19;
  v139 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
  if ((v52 & 2) != 0
    || (v140 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v140 == 0x3FFFFFFF)
    || (_DWORD)v140 == -1)
  {
    v141 = 2;
  }
  else if (v140 >> 28)
  {
    v146 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v146 = v139;
    *(_DWORD *)(v146 + 8) = v140;
    v141 = 1;
    v139 = v146;
  }
  else
  {
    v141 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
    v139 = v140 << 36;
  }
  v55 = 0;
  v56 = v139 | v141;
LABEL_20:
  v57 = v149[0];
  if (v149[0])
  {
    do
      v58 = __ldaxr((unsigned int *)v57);
    while (__stlxr(v58 + 1, (unsigned int *)v57));
  }
  v66 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v66 + 8) = 1;
  *(_QWORD *)v66 = &off_1E3576618;
  *(_QWORD *)(v66 + 16) = v51;
  v67 = v56;
  if ((v56 & 1) != 0)
  {
    v133 = *(_QWORD *)(v56 & 0xFFFFFFFF8);
    if ((v56 & 2) != 0
      || ((v134 = *(_DWORD *)((v56 & 0xFFFFFFFF8) + 8), v134 != 0x3FFFFFFF) ? (v135 = v134 == -1) : (v135 = 1), v135))
    {
      v136 = 2;
    }
    else
    {
      v147 = *(unsigned int *)((v56 & 0xFFFFFFFF8) + 8);
      if (v134 >> 28)
      {
        v145 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v145 = v133;
        *(_DWORD *)(v145 + 8) = v147;
        v136 = 1;
        v133 = v145;
      }
      else
      {
        v136 = *(_QWORD *)(v56 & 0xFFFFFFFF8);
        v133 = v147 << 36;
      }
    }
    v67 = v133 | v136;
  }
  *(_QWORD *)(v66 + 24) = v67;
  if (v57)
  {
    do
      v68 = __ldaxr((unsigned int *)v57);
    while (__stlxr(v68 + 1, (unsigned int *)v57));
  }
  *(_QWORD *)(v66 + 32) = v57;
  *(_BYTE *)(v66 + 40) = v53;
  *(_DWORD *)(v66 + 41) = *(_DWORD *)v148;
  *(_DWORD *)(v66 + 44) = *(_DWORD *)&v148[3];
  *(_QWORD *)(v66 + 48) = v54;
  v69 = (unsigned int *)*((_QWORD *)v43 + 7);
  *((_QWORD *)v43 + 7) = v66;
  if (!v69)
    goto LABEL_29;
  v70 = v69 + 2;
  do
  {
    v71 = __ldaxr(v70);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, v70));
  if (!v72)
  {
    atomic_store(1u, v69 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
    if (v57)
    {
      do
      {
LABEL_30:
        v73 = __ldaxr((unsigned int *)v57);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, (unsigned int *)v57));
      if (!v74)
      {
        atomic_store(1u, (unsigned int *)v57);
        v137 = *((_QWORD *)v57 + 4);
        if ((v137 & 1) != 0 && (v137 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v137 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
        v138 = *((_QWORD *)v57 + 3);
        if ((v138 & 1) != 0 && (v138 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v138 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
        WTF::fastFree((unint64_t)v57, v59, v60, v61, v62, v63, v64, v65);
      }
    }
  }
  else
  {
LABEL_29:
    if (v57)
      goto LABEL_30;
  }
  if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v56 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
  if ((v55 & 1) == 0 && (v52 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v52 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
  v75 = v149[0];
  v149[0] = 0;
  if (v75)
  {
    do
    {
      v76 = __ldaxr((unsigned int *)v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, (unsigned int *)v75));
    if (!v77)
    {
      atomic_store(1u, (unsigned int *)v75);
      v78 = *((_QWORD *)v75 + 4);
      if ((v78 & 1) != 0 && (v78 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v78 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
      v79 = *((_QWORD *)v75 + 3);
      if ((v79 & 1) != 0 && (v79 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v79 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree((unint64_t)v75, v59, v60, v61, v62, v63, v64, v65);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateNameById(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  JSC::B3::Value *v11;
  JSC::FTL::PatchpointExceptionHandle *v12;
  uint64_t v13;
  char v14;

  v10 = (unint64_t *)*((_QWORD *)this + 3528);
  if ((v10[3] & 0xFC000000000000) == 0x20000000000000)
  {
    v13 = *((_QWORD *)this + 3528);
    if (*(_BYTE *)(v13 + 80) == 2)
      v14 = 15;
    else
      v14 = 17;
  }
  else
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v10, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x12EE, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutPrivateNameById()", "m_node->child1().useKind() == CellUse");
    __break(0xC471u);
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileAtomicsReadModifyWrite(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  int8x8_t v50;
  uint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  void *v58;
  unsigned int v59;
  char v60;
  JSC::FTL::Output *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  JSC::FTL::Output *v84;
  int v85;
  JSC::B3::Value *v86;
  _QWORD *v87;
  uint64_t v88;
  int8x8_t v89;
  JSC::B3::Value *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x8_t v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  JSC::DFG::Node *v104;
  unint64_t v105;
  WTF *v106;
  uint64_t v107;
  double result;
  JSC::B3::Value *v109;
  JSC::B3::Value *v110;
  __int128 *v111;
  uint64_t *v112;
  uint64_t v113;
  WTF **v114;
  __n128 *v115;
  JSC::B3::Value *v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  JSC::B3::Value *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  uint64_t v153;
  JSC::B3::Value *v154;
  JSC::B3::Value *v155;
  JSC::DFG::Node *v156;
  char **v157;
  uint64_t v158;
  WTF *v159;
  uint64_t v160;
  uint64_t *v161;
  int v162;
  unsigned int v163;
  char *v164;
  uint64_t v165;
  unsigned int v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  unint64_t *v177;
  unint64_t *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  WTF *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  JSC::B3::Value *v188;
  uint64_t v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v165 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v166 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v166 != 0x3FFFFFFF) ? (v167 = v166 == -1) : (v167 = 1), v167))
  {
    v168 = 2;
  }
  else if (v166 >> 28)
  {
    v174 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v174 = v165;
    *(_DWORD *)(v174 + 8) = v166;
    v168 = 1;
    v165 = v174;
  }
  else
  {
    v168 = v165;
    v165 = 0;
  }
  v10 = v165 | v168;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v165 | v168) & 1) == 0)
    goto LABEL_3;
  v169 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v170 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v170 != 0x3FFFFFFF) ? (v171 = v170 == -1) : (v171 = 1), v171))
  {
    v172 = 2;
  }
  else if (v170 >> 28)
  {
    v175 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v175 = v169;
    *(_DWORD *)(v175 + 8) = v170;
    v172 = 1;
    v169 = v175;
  }
  else
  {
    v172 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v169 = 0;
  }
  v173 = v169 | v172;
  v12 = (_QWORD *)(v173 & 0xFFFFFFFF8);
  if ((v173 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v182 = v16;
  v17 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v17 + 18) == 146)
    v18 = *(_DWORD *)(v17 + 80);
  else
    v18 = *(_DWORD *)(v17 + 72);
  v19 = JSC::DFG::toTypedArrayType(v18);
  v27 = *((_QWORD *)this + 3528);
  v28 = *(unsigned __int16 *)(v27 + 18) - 202;
  if (v28 > 9)
    goto LABEL_165;
  v29 = v19;
  v30 = 1;
  if (((1 << (*(_WORD *)(v27 + 18) + 54)) & 0x3CB) != 0)
  {
    v30 = 0;
    v31 = 1;
    goto LABEL_13;
  }
  if (*(_WORD *)(v27 + 18) != 204)
  {
    if (*(_WORD *)(v27 + 18) == 207)
    {
      v31 = 0;
      goto LABEL_13;
    }
LABEL_165:
    __break(0xC471u);
    JUMPOUT(0x197D37B74);
  }
  v30 = 0;
  v31 = 2;
LABEL_13:
  v32 = *(_QWORD *)this;
  v34 = v27 + 24;
  v33 = *(_QWORD *)(v27 + 24);
  v35 = *(_DWORD *)(v27 + 56);
  if ((v35 & 0x10) != 0)
  {
    v117 = *(_DWORD *)(v32 + 164);
    if (v117 <= v33)
    {
      __break(0xC471u);
      JUMPOUT(0x197D37C60);
    }
    v118 = *(_QWORD *)(v32 + 152);
    v38 = *(_QWORD *)(v118 + 8 * v33);
    v181 = v38;
    v119 = v33 + 1;
    if (v117 <= (int)v33 + 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D37C68);
    }
    v36 = *(_QWORD *)(v118 + 8 * v119);
    v180 = v36;
    v186 = 0;
    v187 = 0;
    if ((v30 & 1) != 0)
    {
      v37 = v31 + 2;
      goto LABEL_134;
    }
    v161 = (uint64_t *)(&v186 + (v31 - 1));
    v162 = v31;
    do
    {
      if (v117 <= v119 + v162)
      {
        __break(0xC471u);
        JUMPOUT(0x197D37C58);
      }
      *v161-- = *(_QWORD *)(v118 + 8 * (v119 + v162--));
    }
    while (v162);
  }
  else
  {
    v36 = *(_QWORD *)(v27 + 32);
    v180 = v36;
    v181 = v33;
    v186 = 0;
    v187 = 0;
    if ((v30 & 1) != 0)
    {
      v37 = v31 + 2;
      v38 = v33;
LABEL_20:
      v41 = (unint64_t *)(v34 + 8 * v37);
      goto LABEL_21;
    }
    v39 = v31 + 1;
    v40 = (uint64_t *)(&v186 + (v31 - 1));
    do
      *v40-- = *(_QWORD *)(v34 + 8 * v39--);
    while (v39 != 1);
    v38 = v33;
  }
  v37 = v31 + 2;
  if ((v35 & 0x10) == 0)
    goto LABEL_20;
  v117 = *(_DWORD *)(v32 + 164);
LABEL_134:
  v163 = v37 + v33;
  if (v117 <= v163)
  {
    __break(0xC471u);
    JUMPOUT(0x197D37C70);
  }
  v41 = (unint64_t *)(*(_QWORD *)(v32 + 152) + 8 * v163);
LABEL_21:
  v42 = *v41;
  if ((*v41 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v188 = 0;
    v189 = 0;
    if ((v30 & 1) == 0)
    {
      v51 = (uint64_t *)(&v188 + (v31 - 1));
      v52 = &v186 + (v31 - 1);
      do
      {
        --v31;
        v53 = *v52--;
      }
      while (v31);
    }
    if ((v29 - 4) > 7u)
      LOBYTE(v57) = 0;
    else
      v57 = dword_199124958[(char)(v29 - 4)];
    v59 = -1 << v57;
    if (v59 <= 0xFFFFFFF7)
      v60 = 4;
    else
      v60 = 0x303030302020100uLL >> (8 * ~(_BYTE)v59);
    switch(*(_WORD *)(*((_QWORD *)this + 3528) + 18))
    {
      case 0xCA:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchgAdd((_QWORD *)this + 3455, (uint64_t)v188, v56, v55, v60);
        v68 = v29 - 1;
        if ((v29 - 1) > 9)
          goto LABEL_86;
        if (((0x3A9u >> v68) & 1) == 0)
          goto LABEL_86;
        v69 = 1 << qword_1991246D8[v68];
        if (v69 == 4)
          goto LABEL_86;
        if (v69 == 2)
          goto LABEL_109;
        if (v69 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D37100);
        }
        goto LABEL_85;
      case 0xCB:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchgAnd((_QWORD *)this + 3455, (uint64_t)v188, v56, v55, v60);
        v82 = v29 - 1;
        if ((v29 - 1) > 9)
          goto LABEL_86;
        if (((0x3A9u >> v82) & 1) == 0)
          goto LABEL_86;
        v83 = 1 << qword_1991246D8[v82];
        if (v83 == 4)
          goto LABEL_86;
        if (v83 == 2)
          goto LABEL_109;
        if (v83 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D37C50);
        }
        goto LABEL_85;
      case 0xCC:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicStrongCAS((_QWORD *)this + 3455, (uint64_t)v188, v189, v56, v55, v60);
        v76 = v29 - 1;
        if ((v29 - 1) > 9)
          goto LABEL_86;
        if (((0x3A9u >> v76) & 1) == 0)
          goto LABEL_86;
        v77 = 1 << qword_1991246D8[v76];
        if (v77 == 4)
          goto LABEL_86;
        if (v77 == 2)
          goto LABEL_109;
        if (v77 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D37350);
        }
        goto LABEL_85;
      case 0xCD:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchg((_QWORD *)this + 3455, (uint64_t)v188, v56, v55, v60);
        v80 = v29 - 1;
        if ((v29 - 1) > 9)
          goto LABEL_86;
        if (((0x3A9u >> v80) & 1) == 0)
          goto LABEL_86;
        v81 = 1 << qword_1991246D8[v80];
        if (v81 == 4)
          goto LABEL_86;
        if (v81 == 2)
          goto LABEL_109;
        if (v81 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D37468);
        }
        goto LABEL_85;
      case 0xCF:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchgAdd((_QWORD *)this + 3455, *((_QWORD *)this + 3457), v56, v55, v60);
        v72 = v29 - 1;
        if ((v29 - 1) > 9)
          goto LABEL_86;
        if (((0x3A9u >> v72) & 1) == 0)
          goto LABEL_86;
        v73 = 1 << qword_1991246D8[v72];
        if (v73 == 4)
          goto LABEL_86;
        if (v73 == 2)
          goto LABEL_109;
        if (v73 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D3723CLL);
        }
        goto LABEL_85;
      case 0xD0:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchgOr((_QWORD *)this + 3455, (uint64_t)v188, v56, v55, v60);
        v74 = v29 - 1;
        if ((v29 - 1) > 9)
          goto LABEL_86;
        if (((0x3A9u >> v74) & 1) == 0)
          goto LABEL_86;
        v75 = 1 << qword_1991246D8[v74];
        if (v75 == 4)
          goto LABEL_86;
        if (v75 == 2)
          goto LABEL_109;
        if (v75 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D372C8);
        }
        goto LABEL_85;
      case 0xD1:
        v86 = v188;
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchg((_QWORD *)this + 3455, (uint64_t)v188, v56, v55, v60);
        goto LABEL_87;
      case 0xD2:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchgSub((_QWORD *)this + 3455, (uint64_t)v188, v56, v55, v60);
        v78 = v29 - 1;
        if ((v29 - 1) > 9)
          goto LABEL_86;
        if (((0x3A9u >> v78) & 1) == 0)
          goto LABEL_86;
        v79 = 1 << qword_1991246D8[v78];
        if (v79 == 4)
          goto LABEL_86;
        if (v79 == 2)
          goto LABEL_109;
        if (v79 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D373DCLL);
        }
        goto LABEL_85;
      case 0xD3:
        v61 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v67 = (JSC::B3::Value *)JSC::FTL::Output::atomicXchgXor((_QWORD *)this + 3455, (uint64_t)v188, v56, v55, v60);
        v70 = v29 - 1;
        if ((v29 - 1) > 9 || ((0x3A9u >> v70) & 1) == 0 || (v71 = 1 << qword_1991246D8[v70], v71 == 4))
        {
LABEL_86:
          v86 = v67;
        }
        else
        {
          if (v71 == 2)
          {
LABEL_109:
            v84 = v61;
            v85 = 0xFFFF;
          }
          else
          {
            if (v71 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197D371B0);
            }
LABEL_85:
            v84 = v61;
            v85 = 255;
          }
          v120 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v84, v85);
          v86 = JSC::FTL::Output::bitAnd(v61, v67, v120);
        }
LABEL_87:
        v87 = (_QWORD *)((char *)this + 27624);
        *(_QWORD *)&v176 = (char *)this + 64;
        *((_QWORD *)&v176 + 1) = v67;
        v88 = *((unsigned int *)this + 6909);
        if ((_DWORD)v88 == *((_DWORD *)this + 6908))
        {
          WTF::Vector<JSC::FTL::AbstractHeapRepository::HeapForValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::AbstractHeapRepository::HeapForValue>((uint64_t)v87, (unint64_t)&v176);
        }
        else
        {
          v89 = (int8x8_t)v176;
          *(_OWORD *)(*v87 + 16 * v88) = v176;
          ++*((_DWORD *)this + 6909);
        }
        v91 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
        v91[14] = 0;
        v91[15] = 0;
        *((_BYTE *)v91 + 115) = 1;
        v91[16] = 0xFFFFFFFF00000000;
        *(_QWORD *)&v176 = 0;
        BYTE8(v176) = 1;
        JSC::B3::StackmapValue::append((__int128 *)v91, (uint64_t)v90, (unint64_t)&v176);
        v98 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)(v98 + 8) = 1;
        *(_QWORD *)v98 = off_1E3576348;
        v100 = (unsigned int *)v91[7];
        v91[7] = v98;
        if (v100)
        {
          v101 = v100 + 2;
          do
          {
            v102 = __ldaxr(v101);
            v103 = v102 - 1;
          }
          while (__stlxr(v103, v101));
          if (!v103)
          {
            atomic_store(1u, v100 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 8))(v100);
          }
        }
        v104 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
        if (*((_WORD *)v104 + 9) != 209)
        v105 = (v186 >> 50) & 0x3F;
        switch((_DWORD)v105)
        {
          case 0x34:
          case 0x31:
            v110 = JSC::FTL::Output::doubleNotEqualAndOrdered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v109, *((JSC::B3::Value **)this + 3465));
            v111 = JSC::FTL::Output::doubleTrunc((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v109);
            v106 = (WTF *)JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v110, (uint64_t)v111, *((_QWORD *)this + 3465), 0);
            v185 = *((_QWORD *)this + 3528);
            v107 = 27960;
            break;
          case 1:
            v185 = *((_QWORD *)this + 3528);
            v107 = 27912;
            break;
          default:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v104, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x13F8, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileAtomicsReadModifyWrite()", "Bad result type");
            __break(0xC471u);
            JUMPOUT(0x197D37BB8);
        }
        v112 = (uint64_t *)((char *)this + v107);
        v113 = *((_QWORD *)this + 3521);
        v183 = v106;
        v184 = v113;
        v114 = (WTF **)&v176;
        v115 = (__n128 *)&v183;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197D37C10);
    }
  }
  else
  {
    *(_QWORD *)&v176 = this;
    *((_QWORD *)&v176 + 1) = &v182;
    v177 = &v181;
    v178 = &v180;
    v179 = &v186;
    switch(v28)
    {
      case 0u:
        v58 = operationAtomicsAdd;
        goto LABEL_126;
      case 1u:
        v58 = operationAtomicsAnd;
        goto LABEL_126;
      case 2u:
        JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(v32 + 24) + 280), v16, v20, v21, v22, v23, v24, v25);
        v125 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
        v137 = *((_DWORD *)this + 7066);
        if ((v137 & 0x80000000) == 0)
        {
          v138 = *((_QWORD *)this + 3481);
          v183 = (WTF *)WTF::fastMalloc((WTF *)8);
          *(_QWORD *)v183 = 0x200000002;
          v184 = 0x200000002;
          v146 = (_QWORD *)(v138 + 32);
          v147 = *(unsigned int *)(v138 + 44);
          if ((_DWORD)v147 == *(_DWORD *)(v138 + 40))
          {
            v148 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v183);
            v149 = *(_QWORD *)(v138 + 32) + 16 * *(unsigned int *)(v138 + 44);
          }
          else
          {
            v149 = *v146 + 16 * v147;
            v148 = (unint64_t)&v183;
          }
          *(_QWORD *)v149 = 0;
          *(_QWORD *)(v149 + 8) = 0;
          v150 = *(_QWORD *)v148;
          *(_QWORD *)v148 = 0;
          *(_QWORD *)v149 = v150;
          LODWORD(v150) = *(_DWORD *)(v148 + 8);
          *(_DWORD *)(v148 + 8) = 0;
          *(_DWORD *)(v149 + 8) = v150;
          LODWORD(v150) = *(_DWORD *)(v148 + 12);
          *(_DWORD *)(v148 + 12) = 0;
          *(_DWORD *)(v149 + 12) = v150;
          ++*(_DWORD *)(v138 + 44);
          v137 = v147 | 0x80000000;
          *((_DWORD *)this + 7066) = v147 | 0x80000000;
          v151 = v183;
          if (v183)
          {
            v183 = 0;
            LODWORD(v184) = 0;
            WTF::fastFree((unint64_t)v151, v139, v140, v141, v142, v143, v144, v145);
            v137 = *((_DWORD *)this + 7066);
          }
        }
        v152 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationAtomicsCompareExchange);
        v153 = *((_QWORD *)this + 3472);
        v154 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
        v155 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v137, *((_QWORD *)this + 3471), v152, v125, v126, v127, v128, v129);
        JSC::B3::Procedure::addValueImpl(v154, v155);
        v183 = v155;
        v157 = (char **)(v153 + 8);
        v158 = *(unsigned int *)(v153 + 20);
        if ((_DWORD)v158 == *(_DWORD *)(v153 + 16))
        {
          v164 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v157, v158 + 1, (unint64_t)&v183);
          v158 = *(unsigned int *)(v153 + 20);
          *(_QWORD *)(*(_QWORD *)(v153 + 8) + 8 * v158) = *(_QWORD *)v164;
          v159 = v183;
        }
        else
        {
          *(_QWORD *)&(*v157)[8 * v158] = v155;
          v159 = v155;
        }
        *(_DWORD *)(v153 + 20) = v158 + 1;
        *((_QWORD *)v159 + 4) = v153;
        goto LABEL_127;
      case 3u:
        v58 = operationAtomicsExchange;
        goto LABEL_126;
      case 5u:
        JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(v32 + 24) + 280), v16, v20, v21, v22, v23, v24, v25);
        v183 = (WTF *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
        goto LABEL_127;
      case 6u:
        v58 = operationAtomicsOr;
        goto LABEL_126;
      case 7u:
        v58 = operationAtomicsStore;
        goto LABEL_126;
      case 8u:
        v58 = operationAtomicsSub;
        goto LABEL_126;
      case 9u:
        v58 = operationAtomicsXor;
LABEL_126:
        v124 = _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB329compileAtomicsReadModifyWriteEvENKUlPT_E0_clIFNS_24ExceptionOperationResultIxEEPNS_14JSGlobalObjectExxxEEEDaS4_((uint64_t *)&v176, (uint64_t)v58, v20, v21, v22, v23, v24, v25);
LABEL_127:
        v185 = *((_QWORD *)this + 3528);
        v112 = (uint64_t *)((char *)this + 27936);
        v160 = *((_QWORD *)this + 3521);
        v188 = (JSC::B3::Value *)v124;
        v189 = v160;
        v114 = &v183;
        v115 = (__n128 *)&v188;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197D37C30);
    }
  }
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v114, v112, &v185, v115).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileAtomicsIsLockFree(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  JSC::B3::Value *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char **v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  WTF *v116;
  WTF *v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  uint64_t v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char **v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::B3::Value *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char **v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  JSC::B3::Value *v150;
  uint64_t v151;
  uint64_t v152;
  char **v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  unint64_t v171;
  uint64_t v172;
  unsigned int v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF *v185;
  uint64_t v186;
  _BYTE v187[96];
  uint64_t v188;
  __n128 v189;
  uint64_t v190;
  __n128 v191;
  uint64_t v192;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v172 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v173 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v173 != 0x3FFFFFFF) ? (v174 = v173 == -1) : (v174 = 1), v174))
  {
    v175 = 2;
  }
  else if (v173 >> 28)
  {
    v183 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v183 = v172;
    *(_DWORD *)(v183 + 8) = v173;
    v175 = 1;
    v172 = v183;
  }
  else
  {
    v175 = v172;
    v172 = 0;
  }
  v11 = v172 | v175;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v172 | v175) & 1) == 0)
    goto LABEL_3;
  v176 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v177 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v177 != 0x3FFFFFFF) ? (v178 = v177 == -1) : (v178 = 1), v178))
  {
    v179 = 2;
  }
  else if (v177 >> 28)
  {
    v184 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v184 = v176;
    *(_DWORD *)(v184 + 8) = v177;
    v179 = 1;
    v176 = v184;
  }
  else
  {
    v179 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v176 = 0;
  }
  v180 = v176 | v179;
  v13 = (_QWORD *)(v180 & 0xFFFFFFFF8);
  if ((v180 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
LABEL_4:
    v16 = v13;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
  if (*v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)this;
  v19 = *((_QWORD *)this + 3528);
  v20 = (unint64_t *)(v19 + 24);
  if ((*(_BYTE *)(v19 + 56) & 0x10) != 0)
  {
    v171 = *v20;
    if (*(_DWORD *)(v18 + 164) <= v171)
    {
      __break(0xC471u);
      JUMPOUT(0x197D38714);
    }
    v20 = (unint64_t *)(*(_QWORD *)(v18 + 152) + 8 * v171);
  }
  v21 = *v20;
  if ((*v20 & 0xFC000000000000) != 0x4000000000000)
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(v18 + 24) + 280), v17, a3, a4, a5, a6, a7, a8);
    v190 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v189.n128_u64[0] = *((_QWORD *)this + 3528);
    v31 = *((_QWORD *)this + 3521);
    v191.n128_u64[0] = v30;
    v191.n128_u64[1] = v31;
    WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v185, (uint64_t *)this + 3492, (uint64_t *)&v189, &v191);
    return;
  }
  v23 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v24 = v23;
  v25 = *((_QWORD *)this + 3473);
  if (v25)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v25, v23);
  }
  else
  {
    v191.n128_u64[0] = v23;
    v32 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)(v32 + 16) = 0u;
    *(_QWORD *)(v32 + 24) = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v32;
    v189.n128_u64[0] = v32;
    *(_QWORD *)(v32 + 16) = v24;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v191, (uint64_t *)&v189, v33, v34, v35, v36, v37, (uint64_t)&v185);
    v38 = v189.n128_u64[0];
    v39 = (unint64_t *)*((_QWORD *)this + 3479);
    *(_QWORD *)v189.n128_u64[0] = (char *)this + 27824;
    *(_QWORD *)(v38 + 8) = v39;
    *v39 = v38;
    *((_QWORD *)this + 3479) = v38;
  }
  v40 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v41 = v40;
  v42 = *((_QWORD *)this + 3473);
  if (v42)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v42, v40);
  }
  else
  {
    v191.n128_u64[0] = v40;
    v43 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v43 = 0u;
    *(_OWORD *)(v43 + 16) = 0u;
    *(_QWORD *)(v43 + 24) = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v43;
    v189.n128_u64[0] = v43;
    *(_QWORD *)(v43 + 16) = v41;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v191, (uint64_t *)&v189, v44, v45, v46, v47, v48, (uint64_t)&v185);
    v49 = v189.n128_u64[0];
    v50 = (unint64_t *)*((_QWORD *)this + 3479);
    *(_QWORD *)v189.n128_u64[0] = (char *)this + 27824;
    *(_QWORD *)(v49 + 8) = v50;
    *v50 = v49;
    *((_QWORD *)this + 3479) = v49;
  }
  v51 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v52 = v51;
  v53 = *((_QWORD *)this + 3473);
  if (v53)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v53, v51);
  }
  else
  {
    v191.n128_u64[0] = v51;
    v54 = WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v54 = 0u;
    *(_OWORD *)(v54 + 16) = 0u;
    *(_QWORD *)(v54 + 24) = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v54;
    v189.n128_u64[0] = v54;
    *(_QWORD *)(v54 + 16) = v52;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v191, (uint64_t *)&v189, v55, v56, v57, v58, v59, (uint64_t)&v185);
    v60 = v189.n128_u64[0];
    v61 = (unint64_t *)*((_QWORD *)this + 3479);
    *(_QWORD *)v189.n128_u64[0] = (char *)this + 27824;
    *(_QWORD *)(v60 + 8) = v61;
    *v61 = v60;
    *((_QWORD *)this + 3479) = v60;
  }
  v62 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v24;
  v185 = (WTF *)v187;
  v186 = 4;
  v191.n128_u64[0] = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v191.n128_u64[1] = v24;
  LODWORD(v192) = 2143289344;
  if (HIDWORD(v186) == (_DWORD)v186)
  {
    v68 = WTF::Vector<JSC::FTL::SwitchCase,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v185, (void *)(HIDWORD(v186) + 1), (unint64_t)&v191, v63, v64, v65, v66, v67);
    v69 = (char *)v185 + 24 * HIDWORD(v186);
    v70 = *(__n128 *)v68;
    v71 = *(_QWORD *)(v68 + 16);
  }
  else
  {
    v69 = (char *)v185 + 24 * HIDWORD(v186);
    v70 = v191;
    v71 = v192;
  }
  *((_QWORD *)v69 + 2) = v71;
  *(__n128 *)v69 = v70;
  ++HIDWORD(v186);
  v191.n128_u64[0] = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
  v191.n128_u64[1] = v24;
  LODWORD(v192) = 2143289344;
  if (HIDWORD(v186) == (_DWORD)v186)
  {
    v77 = WTF::Vector<JSC::FTL::SwitchCase,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v185, (void *)(HIDWORD(v186) + 1), (unint64_t)&v191, v72, v73, v74, v75, v76);
    v78 = (char *)v185 + 24 * HIDWORD(v186);
    v79 = *(__n128 *)v77;
    v80 = *(_QWORD *)(v77 + 16);
  }
  else
  {
    v78 = (char *)v185 + 24 * HIDWORD(v186);
    v79 = v191;
    v80 = v192;
  }
  *((_QWORD *)v78 + 2) = v80;
  *(__n128 *)v78 = v79;
  ++HIDWORD(v186);
  v191.n128_u64[0] = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v191.n128_u64[1] = v24;
  LODWORD(v192) = 2143289344;
  if (HIDWORD(v186) == (_DWORD)v186)
  {
    v86 = WTF::Vector<JSC::FTL::SwitchCase,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v185, (void *)(HIDWORD(v186) + 1), (unint64_t)&v191, v81, v82, v83, v84, v85);
    v87 = (char *)v185 + 24 * HIDWORD(v186);
    v88 = *(__n128 *)v86;
    v89 = *(_QWORD *)(v86 + 16);
  }
  else
  {
    v87 = (char *)v185 + 24 * HIDWORD(v186);
    v88 = v191;
    v89 = v192;
  }
  *((_QWORD *)v87 + 2) = v89;
  *(__n128 *)v87 = v88;
  ++HIDWORD(v186);
  v191.n128_u64[0] = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 8);
  v191.n128_u64[1] = v24;
  LODWORD(v192) = 2143289344;
  if (HIDWORD(v186) == (_DWORD)v186)
  {
    v95 = WTF::Vector<JSC::FTL::SwitchCase,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v185, (void *)(HIDWORD(v186) + 1), (unint64_t)&v191, v90, v91, v92, v93, v94);
    v96 = (char *)v185 + 24 * HIDWORD(v186);
    v97 = *(__n128 *)v95;
    v98 = *(_QWORD *)(v95 + 16);
  }
  else
  {
    v96 = (char *)v185 + 24 * HIDWORD(v186);
    v97 = v191;
    v98 = v192;
  }
  *((_QWORD *)v96 + 2) = v98;
  *(__n128 *)v96 = v97;
  ++HIDWORD(v186);
  v99 = *((_QWORD *)this + 3472);
  v100 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v101 = *((_QWORD *)this + 3471);
  v102 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v102 + 8) = -1;
  *(_WORD *)(v102 + 12) = 156;
  *(_DWORD *)(v102 + 16) = 0;
  *(_BYTE *)(v102 + 20) = 1;
  *(_QWORD *)(v102 + 24) = v101;
  *(_QWORD *)(v102 + 32) = 0;
  *(_QWORD *)(v102 + 48) = 0;
  *(_QWORD *)(v102 + 56) = v22;
  *(_QWORD *)v102 = off_1E357EBF8;
  *(_QWORD *)(v102 + 40) = 0;
  JSC::B3::Procedure::addValueImpl(v100, (JSC::B3::Value *)v102);
  v191.n128_u64[0] = v102;
  v109 = (char **)(v99 + 8);
  v110 = *(unsigned int *)(v99 + 20);
  if ((_DWORD)v110 == *(_DWORD *)(v99 + 16))
  {
    v167 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v109, v110 + 1, (unint64_t)&v191);
    v110 = *(unsigned int *)(v99 + 20);
    *(_QWORD *)(*(_QWORD *)(v99 + 8) + 8 * v110) = *(_QWORD *)v167;
    v111 = v191.n128_u64[0];
  }
  else
  {
    *(_QWORD *)&(*v109)[8 * v110] = v102;
    v111 = v102;
  }
  *(_DWORD *)(v99 + 20) = v110 + 1;
  *(_QWORD *)(v111 + 32) = v99;
  v191.n128_u64[0] = v41;
  v191.n128_u8[8] = 0;
  v112 = *(_QWORD *)(v102 + 32);
  v113 = *(unsigned int *)(v112 + 68);
  v114 = *(_DWORD *)(v102 + 52);
  v115 = v114 + 1;
  if ((_DWORD)v113 != v114 && v115 != (_DWORD)v113)
    goto LABEL_106;
  if (v115 != (_DWORD)v113)
  {
    if ((_DWORD)v113 == *(_DWORD *)(v112 + 64))
    {
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock> const&>(v112 + 56, (unint64_t)&v191, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(__n128 *)(*(_QWORD *)(v112 + 56) + 16 * v113) = v191;
      ++*(_DWORD *)(v112 + 68);
    }
    goto LABEL_39;
  }
  if (!(_DWORD)v113)
  {
LABEL_106:
    __break(0xC471u);
    JUMPOUT(0x197D38630);
  }
  v181 = *(_QWORD *)(v112 + 56) + 16 * v113;
  v182 = v191.n128_u64[0];
  *(_BYTE *)(v181 - 8) = v191.n128_u8[8];
  *(_QWORD *)(v181 - 16) = v182;
LABEL_39:
  if (HIDWORD(v186))
  {
    v116 = v185;
    v117 = (WTF *)((char *)v185 + 24 * HIDWORD(v186));
    do
    {
      v118 = *(_QWORD *)v116;
      v119 = *(_WORD *)(*(_QWORD *)v116 + 12) & 0xFFF;
      if (*(_QWORD *)v116)
        v120 = v119 == 3;
      else
        v120 = 0;
      if (v120)
      {
        v121 = *(int *)(v118 + 40);
      }
      else
      {
        if (v119 != 4)
          v118 = 0;
        v121 = *(_QWORD *)(v118 + 40);
      }
      v122 = *((_QWORD *)v116 + 1);
      v123 = *((float *)v116 + 4) == 0.0;
      v191.n128_u64[0] = v121;
      v191.n128_u64[1] = v122;
      LOBYTE(v192) = v123;
      JSC::B3::SwitchValue::appendCase(v102, *(_QWORD *)(v102 + 32), &v191, v104, v105, v106, v107, v108);
      v116 = (WTF *)((char *)v116 + 24);
    }
    while (v116 != v117);
  }
  *((_QWORD *)this + 3472) = v24;
  *((_QWORD *)this + 3473) = v41;
  v124 = *((_QWORD *)this + 3455);
  v125 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v126 = *((_QWORD *)this + 3471);
  v127 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v127 + 8) = -1;
  *(_WORD *)(v127 + 12) = 152;
  *(_BYTE *)(v127 + 20) = 1;
  *(_QWORD *)v127 = &unk_1E357EDA0;
  *(_DWORD *)(v127 + 16) = 0;
  *(_QWORD *)(v127 + 40) = 0;
  *(_QWORD *)(v127 + 48) = v124;
  *(_QWORD *)(v127 + 24) = v126;
  *(_QWORD *)(v127 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v125, (JSC::B3::Value *)v127);
  v191.n128_u64[0] = v127;
  v131 = (char **)(v24 + 8);
  v132 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v132 == *(_DWORD *)(v24 + 16))
  {
    v168 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v131, v132 + 1, (unint64_t)&v191);
    v132 = *(unsigned int *)(v24 + 20);
    *(_QWORD *)(*(_QWORD *)(v24 + 8) + 8 * v132) = *(_QWORD *)v168;
    v133 = v191.n128_u64[0];
  }
  else
  {
    *(_QWORD *)&(*v131)[8 * v132] = v127;
    v133 = v127;
  }
  *(_DWORD *)(v24 + 20) = v132 + 1;
  *(_QWORD *)(v133 + 32) = v24;
  v134 = *((_QWORD *)this + 3472);
  v135 = *((_QWORD *)this + 3470);
  v136 = *((_QWORD *)this + 3471);
  v191.n128_u64[0] = v52;
  v191.n128_u8[8] = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v134, v135, 154, v136, (uint64_t *)&v191, v128, v129, v130);
  *((_QWORD *)this + 3472) = v41;
  *((_QWORD *)this + 3473) = v52;
  v137 = *((_QWORD *)this + 3456);
  v138 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v139 = *((_QWORD *)this + 3471);
  v140 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v140 + 8) = -1;
  *(_WORD *)(v140 + 12) = 152;
  *(_DWORD *)(v140 + 16) = 0;
  *(_BYTE *)(v140 + 20) = 1;
  *(_QWORD *)v140 = &unk_1E357EDA0;
  *(_QWORD *)(v140 + 40) = 0;
  *(_QWORD *)(v140 + 48) = v137;
  *(_QWORD *)(v140 + 24) = v139;
  *(_QWORD *)(v140 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v138, (JSC::B3::Value *)v140);
  v191.n128_u64[0] = v140;
  v144 = (char **)(v41 + 8);
  v145 = *(unsigned int *)(v41 + 20);
  if ((_DWORD)v145 == *(_DWORD *)(v41 + 16))
  {
    v169 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v144, v145 + 1, (unint64_t)&v191);
    v145 = *(unsigned int *)(v41 + 20);
    *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8 * v145) = *(_QWORD *)v169;
    v146 = v191.n128_u64[0];
  }
  else
  {
    *(_QWORD *)&(*v144)[8 * v145] = v140;
    v146 = v140;
  }
  *(_DWORD *)(v41 + 20) = v145 + 1;
  *(_QWORD *)(v146 + 32) = v41;
  v147 = *((_QWORD *)this + 3472);
  v148 = *((_QWORD *)this + 3470);
  v149 = *((_QWORD *)this + 3471);
  v191.n128_u64[0] = v52;
  v191.n128_u8[8] = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v147, v148, 154, v149, (uint64_t *)&v191, v141, v142, v143);
  *((_QWORD *)this + 3472) = v52;
  *((_QWORD *)this + 3473) = v62;
  v150 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v151 = *((_QWORD *)this + 3471);
  v152 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v152 = off_1E357F5F0;
  *(_DWORD *)(v152 + 8) = -1;
  *(_WORD *)(v152 + 12) = 153;
  *(_DWORD *)(v152 + 16) = 1;
  *(_BYTE *)(v152 + 20) = 0;
  *(_QWORD *)(v152 + 24) = v151;
  *(_QWORD *)(v152 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v150, (JSC::B3::Value *)v152);
  v191.n128_u64[0] = v152;
  v153 = (char **)(v52 + 8);
  v154 = *(unsigned int *)(v52 + 20);
  if ((_DWORD)v154 == *(_DWORD *)(v52 + 16))
  {
    v170 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v153, v154 + 1, (unint64_t)&v191);
    v154 = *(unsigned int *)(v52 + 20);
    *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8 * v154) = *(_QWORD *)v170;
    v155 = v191.n128_u64[0];
  }
  else
  {
    *(_QWORD *)&(*v153)[8 * v154] = v152;
    v155 = v152;
  }
  *(_DWORD *)(v52 + 20) = v154 + 1;
  *(_QWORD *)(v155 + 32) = v52;
  if ((*(_WORD *)(v127 + 12) & 0xFFF) == 0x98)
    v156 = v127;
  else
    v156 = 0;
  *(_QWORD *)(v156 + 40) = v152;
  if ((*(_WORD *)(v140 + 12) & 0xFFF) == 0x98)
    v157 = v140;
  else
    v157 = 0;
  *(_QWORD *)(v157 + 40) = v152;
  v190 = *((_QWORD *)this + 3528);
  v158 = *((_QWORD *)this + 3521);
  v189.n128_u64[0] = v152;
  v189.n128_u64[1] = v158;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v191, (uint64_t *)this + 3493, &v190, &v189);
  v166 = v185;
  if (v187 != (_BYTE *)v185)
  {
    if (v185)
    {
      v185 = 0;
      LODWORD(v186) = 0;
      WTF::fastFree((unint64_t)v166, v159, v160, v161, v162, v163, v164, v165);
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDefineDataProperty(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  uint64_t v75;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v75, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v75, v3, v4, v5, v6, v7, v8);
  if ((v75 & 1) != 0 && (v75 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v75 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197D38980);
  }
  v18 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197D38988);
  }
  v26 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 3;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197D38990);
  }
  v34 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v34)
    goto LABEL_21;
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v34);
  v36 = (v35 >> 50) & 0x3F;
  if (((v35 >> 50) & 0x3F) <= 0x14)
  {
    if ((_DWORD)v36 == 20)
    {
    }
    if (!(_DWORD)v36)
    {
    }
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197D3892CLL);
  }
  if ((_DWORD)v36 != 25)
  {
    if ((_DWORD)v36 == 21)
    {
    }
    goto LABEL_21;
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDefineAccessorProperty(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  unsigned int v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  unsigned int v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  unsigned int v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::FTL::Output *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  JSC::B3::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  JSC::FTL::Output *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::B3::Value *v111;
  JSC::DFG::Node *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v133 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v134 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v134 != 0x3FFFFFFF) ? (v135 = v134 == -1) : (v135 = 1), v135))
  {
    v136 = 2;
  }
  else if (v134 >> 28)
  {
    v142 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v142 = v133;
    *(_DWORD *)(v142 + 8) = v134;
    v136 = 1;
    v133 = v142;
  }
  else
  {
    v136 = v133;
    v133 = 0;
  }
  v11 = v133 | v136;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v133 | v136) & 1) == 0)
    goto LABEL_3;
  v137 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v138 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v138 != 0x3FFFFFFF) ? (v139 = v138 == -1) : (v139 = 1), v139))
  {
    v140 = 2;
  }
  else if (v138 >> 28)
  {
    v143 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v143 = v137;
    *(_DWORD *)(v143 + 8) = v138;
    v140 = 1;
    v137 = v143;
  }
  else
  {
    v140 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v137 = 0;
  }
  v141 = v137 | v140;
  v13 = (_QWORD *)(v141 & 0xFFFFFFFF8);
  if ((v141 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197D38E0CLL);
  }
  v25 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v25)
  {
    __break(0xC471u);
    JUMPOUT(0x197D38E14);
  }
  v26 = (uint64_t)v18;
  v34 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 3;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v34)
  {
    __break(0xC471u);
    JUMPOUT(0x197D38E1CLL);
  }
  v35 = (uint64_t)v27;
  v44 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 4;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v44)
  {
    __break(0xC471u);
    JUMPOUT(0x197D38E24);
  }
  v45 = (uint64_t)v36;
  v54 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v54)
  {
    __break(0xC471u);
    JUMPOUT(0x197D38E2CLL);
  }
  v55 = (uint64_t)v46;
  v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v54);
  v57 = (v56 >> 50) & 0x3F;
  if (((v56 >> 50) & 0x3F) > 0x14)
  {
    if ((_DWORD)v57 == 25)
    {
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v118, v119, v120, v121, v122, v123);
      v87 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      v88 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
      v96 = operationDefineAccessorPropertySymbol;
    }
    else
    {
      if ((_DWORD)v57 != 21)
        goto LABEL_51;
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v81, v82, v83, v84, v85, v86);
      v87 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      v88 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
      v96 = operationDefineAccessorPropertyString;
    }
    v131 = JSC::FTL::Output::constInt64(v87, (uint64_t)v96);
    v111 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), 2, *((_QWORD *)this + 3471), v131, v88, v26, (uint64_t)v75, v35, v45, v55);
  }
  if (!(_DWORD)v57)
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v97, v98, v99, v100, v101, v102);
    v65 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    v66 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v74 = operationDefineAccessorProperty;
    goto LABEL_21;
  }
  if ((_DWORD)v57 != 20)
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197D38DCCLL);
  }
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v59, v60, v61, v62, v63, v64);
  v65 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v66 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v74 = operationDefineAccessorPropertyStringIdent;
LABEL_21:
  v110 = JSC::FTL::Output::constInt64(v65, (uint64_t)v74);
  v111 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), 2, *((_QWORD *)this + 3471), v110, v66, v26, v58, v35, v45, v55);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArrayPop(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  JSC::FTL::IndexedAbstractHeap *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::BasicBlock *v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  JSC::FTL::IndexedAbstractHeap *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  JSC::B3::Value *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::JSCell *v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Value *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  JSC::B3::Value *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF *v95;
  JSC::B3::Value *v96;
  uint64_t v97;
  JSC::B3::Value *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  JSC::B3::BasicBlock *v109;
  JSC::B3::Value *v110;
  JSC::B3::Value *v111;
  uint64_t v112;
  JSC::B3::Value *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  JSC::B3::Value *v118;
  JSC::B3::Value *v119;
  JSC::B3::Value *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  JSC::FTL::IndexedAbstractHeap *v127;
  uint64_t v128;
  uint64_t v129;
  JSC::B3::Value *v130;
  JSC::B3::Value *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  JSC::B3::Value *v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  JSC::B3::Value *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  JSC::B3::Value *v163;
  uint64_t v164;
  uint64_t v165;
  JSC::JSCell *v166;
  uint64_t v167;
  __int128 v168;
  WTF *v169;
  uint64_t v170;
  _OWORD v171[3];
  JSC::B3::Value *v172;
  uint64_t v173;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v173, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = JSC::DFG::Graph::globalObjectFor(v2, &v173, v3, v4, v5, v6, v7, v8);
  if ((v173 & 1) != 0 && (v173 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v173 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v172 = v18;
  v27 = *((_QWORD *)this + 3528);
  v28 = *(unsigned __int16 *)(v27 + 18);
  if (v28 == 146)
    v29 = *(_DWORD *)(v27 + 80);
  else
    v29 = *(_DWORD *)(v27 + 72);
  v166 = (JSC::JSCell *)v16;
  if (v29 - 7 < 3)
  {
    if (v28 == 146)
      v30 = *(_DWORD *)(v27 + 80);
    else
      v30 = *(_DWORD *)(v27 + 72);
    v31 = (JSC::FTL::IndexedAbstractHeap *)JSC::FTL::AbstractHeapRepository::forArrayType((uint64_t)this + 16, v30);
    v32 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v33 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v34 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v35 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
    v169 = (WTF *)v171;
    v170 = 0x100000003;
    v36 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
    *(_QWORD *)&v168 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v36);
    *((_QWORD *)&v168 + 1) = v37;
    v171[0] = v168;
    v38 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v35);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v38, (uint64_t)v34, v32, 0.0, 1.0, v39, v40, v41, v42);
    *((_QWORD *)this + 3472) = v32;
    v43 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v33;
    v44 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v35, *((JSC::B3::Value **)this + 3458));
    JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44, v26, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
    v45 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v44, 2);
    v48 = JSC::FTL::IndexedAbstractHeap::baseIndex(v31, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, v45, 0, 0, 0, v46);
    v49 = v47;
    v50 = *((_QWORD *)this + 3528);
    v51 = *(unsigned __int16 *)(v50 + 18);
    if (v51 == 264)
    {
      LODWORD(v50) = *(_DWORD *)(v50 + 72);
    }
    else if (v51 == 146)
    {
      LOBYTE(v50) = *(_BYTE *)(v50 + 80);
    }
    else
    {
      LOBYTE(v50) = *(_BYTE *)(v50 + 72);
    }
    v52 = (char *)this + 27640;
    if (v50 == 8)
    {
      v96 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v52, v48, v47, 4);
      v97 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x7FF8000000000000);
      JSC::FTL::Output::store((uint64_t)this + 27640, v97, v48, v49);
      *(_QWORD *)&v168 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v98);
      *((_QWORD *)&v168 + 1) = v99;
      if (HIDWORD(v170) == (_DWORD)v170)
      {
        WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v169, (unint64_t)&v168, v100, v101, v102, v103, v104, v105);
      }
      else
      {
        *((_OWORD *)v169 + HIDWORD(v170)) = v168;
        ++HIDWORD(v170);
      }
      v63 = v166;
      v64 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v96, v96);
    }
    else
    {
      v53 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v52, v48, v47, 2);
      v54 = *((_QWORD *)this + 3528);
      v55 = *(unsigned __int16 *)(v54 + 18);
      if (v55 == 264)
      {
        LODWORD(v54) = *(_DWORD *)(v54 + 72);
      }
      else if (v55 == 146)
      {
        LOBYTE(v54) = *(_BYTE *)(v54 + 80);
      }
      else
      {
        LOBYTE(v54) = *(_BYTE *)(v54 + 72);
      }
      if (v54 == 9)
      JSC::FTL::Output::store((uint64_t)this + 27640, *((_QWORD *)this + 3459), v48, v49);
      *(_QWORD *)&v168 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53);
      *((_QWORD *)&v168 + 1) = v56;
      if (HIDWORD(v170) == (_DWORD)v170)
      {
        WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v169, (unint64_t)&v168, v57, v58, v59, v60, v61, v62);
      }
      else
      {
        *((_OWORD *)v169 + HIDWORD(v170)) = v168;
        ++HIDWORD(v170);
      }
      v63 = v166;
      v64 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53);
    }
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v64, (uint64_t)v34, v33, 1.0, 0.0, v65, v66, v67, v68);
    *((_QWORD *)this + 3472) = v33;
    *((_QWORD *)this + 3473) = v34;
    *(_QWORD *)&v168 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v79);
    *((_QWORD *)&v168 + 1) = v80;
    if (HIDWORD(v170) == (_DWORD)v170)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v169, (unint64_t)&v168, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *((_OWORD *)v169 + HIDWORD(v170)) = v168;
      ++HIDWORD(v170);
    }
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v34, v81, v82, v83, v84, v85, v86);
    *((_QWORD *)this + 3472) = v34;
    *((_QWORD *)this + 3473) = v43;
    v87 = (JSC::B3::Value *)JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)this + 3455, 2, (unsigned int *)&v169);
    v95 = v169;
    if (v171 == (_OWORD *)v169)
      return;
LABEL_32:
    if (v95)
    {
      v169 = 0;
      LODWORD(v170) = 0;
      WTF::fastFree((unint64_t)v95, v88, v89, v90, v91, v92, v93, v94);
    }
    return;
  }
  if (v29 != 10)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v27, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1E25, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayPop()", "Bad array type");
    __break(0xC471u);
    JUMPOUT(0x197D39600);
  }
  v106 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v107 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v108 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v165 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v109 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v110 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, *((const JSC::FTL::AbstractHeap **)this + 831));
  v169 = (WTF *)v171;
  v170 = 0x100000003;
  v111 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  *(_QWORD *)&v168 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v111);
  *((_QWORD *)&v168 + 1) = v112;
  v171[0] = v168;
  v113 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v110);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v113, (uint64_t)v109, v106, 0.0, 1.0, v114, v115, v116, v117);
  *((_QWORD *)this + 3472) = v106;
  v164 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v107;
  v118 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v110, *((JSC::B3::Value **)this + 3458));
  v119 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, *((const JSC::FTL::AbstractHeap **)this + 832));
  v120 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v118, v119);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v120, v165, v107, 0.0, 1.0, v121, v122, v123, v124);
  *((_QWORD *)this + 3472) = v107;
  *((_QWORD *)this + 3473) = v108;
  v125 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v118, 2);
  v127 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6664), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, v125, 0, 0, 0, v126);
  v129 = v128;
  v130 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v127, v128, 2);
  v131 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v130);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v131, v108, v165, 1.0, 0.0, v132, v133, v134, v135);
  *((_QWORD *)this + 3472) = v108;
  *((_QWORD *)this + 3473) = v165;
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v118, v26, *((const JSC::FTL::AbstractHeap **)this + 831));
  JSC::FTL::Output::store((uint64_t)this + 27640, *((_QWORD *)this + 3459), v127, v129);
  v136 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 208));
  v137 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v136, *((JSC::B3::Value **)this + 3458));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v137, v26, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 208));
  *(_QWORD *)&v168 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v130);
  *((_QWORD *)&v168 + 1) = v138;
  if (HIDWORD(v170) == (_DWORD)v170)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v169, (unint64_t)&v168, v139, v140, v141, v142, v143, v144);
  }
  else
  {
    *((_OWORD *)v169 + HIDWORD(v170)) = v168;
    ++HIDWORD(v170);
  }
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v109, v139, v140, v141, v142, v143, v144);
  *((_QWORD *)this + 3472) = v165;
  *((_QWORD *)this + 3473) = v109;
  *(_QWORD *)&v168 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v155);
  *((_QWORD *)&v168 + 1) = v156;
  if (HIDWORD(v170) == (_DWORD)v170)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v169, (unint64_t)&v168, v157, v158, v159, v160, v161, v162);
  }
  else
  {
    *((_OWORD *)v169 + HIDWORD(v170)) = v168;
    ++HIDWORD(v170);
  }
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v109, v157, v158, v159, v160, v161, v162);
  *((_QWORD *)this + 3472) = v109;
  *((_QWORD *)this + 3473) = v164;
  v163 = (JSC::B3::Value *)JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)this + 3455, 2, (unsigned int *)&v169);
  v95 = v169;
  if (v171 != (_OWORD *)v169)
    goto LABEL_32;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArraySlice(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  unsigned int v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  int8x8_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  int8x8_t v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  JSC::B3::Value *v50;
  JSC::B3::Value *v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  JSC::B3::Value *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  JSC::B3::Value *v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  JSC::B3::Value *v100;
  uint64_t v101;
  uint64_t v102;
  JSC::B3::Value *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::B3::Value *v107;
  JSC::B3::Value *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  JSC::B3::Value *v114;
  uint64_t v115;
  JSC::B3::Value *v116;
  JSC::B3::Value *v117;
  uint64_t v118;
  JSC::B3::Value *v119;
  uint64_t v120;
  JSC::B3::Value *v121;
  JSC::B3::Value *v122;
  JSC::B3::Value *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  JSC::B3::Value *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  JSC::B3::Value *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  JSC::B3::Value *JSArray;
  const JSC::FTL::AbstractHeap *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v144, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = JSC::DFG::Graph::globalObjectFor(v2, &v144, v3, v4, v5, v6, v7, v8);
  if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v144 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
    goto LABEL_55;
  v26 = *(_DWORD *)(*((_QWORD *)this + 3528) + 32) + *(_DWORD *)(*((_QWORD *)this + 3528) + 24) - 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197D39CA0);
  }
  v27 = v18;
  v35 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v28, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
  v37 = *((_QWORD *)this + 3528);
  v143 = (uint64_t)v28;
  if (*(_DWORD *)(v37 + 32) != 2)
  {
    v38 = *(_DWORD *)(v37 + 24) + 1;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v38)
    {
      __break(0xC471u);
      JUMPOUT(0x197D39CA8);
    }
    v47 = *((_QWORD *)this + 3528);
    if (*(_DWORD *)(v47 + 32) == 3)
    {
      v48 = 0;
LABEL_8:
      v51 = v50;
      v52 = JSC::FTL::Output::belowOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v49, v50);
      v53 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v51, v49);
      v54 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
      v35 = (JSC::B3::Value *)JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v52, (uint64_t)v53, v54, 0);
      goto LABEL_9;
    }
    v138 = *(_DWORD *)(v47 + 24) + 2;
    if (*(_DWORD *)(*(_QWORD *)this + 164) > v138)
    {
      goto LABEL_8;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x197D39C98);
  }
  v49 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
LABEL_9:
  v142 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16);
  v55 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v27, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2992));
  v56 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 47);
  v57 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v55, v56);
  v58 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 5);
  v64 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57, v58);
  v65 = *(_DWORD *)(v16 + 900);
  if (v65)
    v66 = 16 * (v65 & 0xFFFFFFFE);
  else
    v66 = 0;
  v67 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v66, &v145, v59, v60, v61, v62, v63);
  v68 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v67);
  v69 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 9);
  v75 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57, v69);
  v76 = *(_DWORD *)(v16 + 908);
  if (v76)
    v77 = 16 * (v76 & 0xFFFFFFFE);
  else
    v77 = 0;
  v78 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v77, &v145, v70, v71, v72, v73, v74);
  v79 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v78);
  v85 = v16;
  v86 = v27;
  v87 = v79;
  v88 = *(_DWORD *)(v85 + 904);
  if (v88)
    v89 = 16 * (v88 & 0xFFFFFFFE);
  else
    v89 = 0;
  v90 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v89, &v145, v80, v81, v82, v83, v84);
  v91 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v90);
  v92 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v75, v87, v91, 0);
  v93 = (JSC::B3::Value *)JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v64, v68, v92, 0);
  v96 = v95;
  v97 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v98 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v99 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v35, 2);
  v100 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v49, 2);
  v101 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v100);
  v139 = v102;
  v103 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v104 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v103);
  v106 = v105;
  v107 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v108 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v107, v99);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v108, v97, v98, NAN, NAN, v109, v110, v111, v112);
  *((_QWORD *)this + 3472) = v97;
  v140 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v98;
  v113 = JSC::FTL::Output::phi((_QWORD *)this + 3455, 2);
  v114 = (JSC::B3::Value *)v113;
  if (v104 || v106)
  {
    if ((*(_WORD *)(v104 + 12) & 0xFFF) == 0x98)
      v115 = v104;
    else
      v115 = 0;
    *(_QWORD *)(v115 + 40) = v113;
  }
  v116 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 2);
  v117 = v116;
  if (v101 || v139)
  {
    if ((*(_WORD *)(v101 + 12) & 0xFFF) == 0x98)
      v118 = v101;
    else
      v118 = 0;
    *(_QWORD *)(v118 + 40) = v116;
  }
  v119 = JSC::FTL::Output::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v143, v116, 3, 0);
  v120 = JSC::FTL::Output::load((uint64_t)this + 27640, v142, (uint64_t)v119, 2);
  v121 = JSC::FTL::Output::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v96, v114, 3, 0);
  JSC::FTL::Output::store((uint64_t)this + 27640, v120, v142, (uint64_t)v121);
  v122 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v123 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v114, v122);
  v124 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v123);
  if (v124 || v125)
  {
    if ((*(_WORD *)(v124 + 12) & 0xFFF) == 0x98)
      v126 = v124;
    else
      v126 = 0;
    *(_QWORD *)(v126 + 40) = v114;
  }
  v127 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v128 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v117, v127);
  v129 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v128);
  if (v129 || v130)
  {
    if ((*(_WORD *)(v129 + 12) & 0xFFF) == 0x98)
      v131 = v129;
    else
      v131 = 0;
    *(_QWORD *)(v131 + 40) = v117;
  }
  v132 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v123, v99);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v132, v97, v98, NAN, NAN, v133, v134, v135, v136);
  *((_QWORD *)this + 3472) = v98;
  *((_QWORD *)this + 3473) = v140;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArraySpliceExtract(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v49;
  JSC::B3::Value *v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  JSC::B3::Value *v53;
  uint64_t v54;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v54, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v54, v3, v4, v5, v6, v7, v8);
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_DWORD *)(v18 + 52) + ((int)(*(_DWORD *)(v18 + 56) << 28) >> 31);
  v49 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArrayIndexOf(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  int8x8_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  int8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x8_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  JSC::B3::Value *v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  JSC::B3::Value *v95;
  JSC::B3::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  JSC::B3::Value *v100;
  JSC::B3::Value *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::B3::Value *v110;
  JSC::B3::Value *v111;
  uint64_t v112;
  JSC::B3::Value *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::FTL::IndexedAbstractHeap *v124;
  uint64_t v125;
  JSC::B3::Value *v126;
  JSC::B3::Value *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  JSC::FTL::IndexedAbstractHeap *v132;
  uint64_t v133;
  JSC::B3::Value *v134;
  JSC::B3::Value *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  JSC::B3::Value *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  JSC::B3::BasicBlock *v160;
  JSC::B3::BasicBlock *v161;
  JSC::B3::Value *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::B3::Value *v166;
  uint64_t v167;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v167, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v167, v3, v4, v5, v6, v7, v8);
  if ((v167 & 1) != 0 && (v167 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v167 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197D3A568);
  }
  v26 = *((_QWORD *)this + 3528);
  v27 = *(_DWORD *)(v26 + 32);
  v28 = *(_DWORD *)(v26 + 24);
  v29 = *(_DWORD *)(*(_QWORD *)this + 164);
  if (v27 == 3)
  {
    v30 = v28 + 2;
    if (v29 <= v30)
      goto LABEL_68;
  }
  else
  {
    v30 = v28 + 3;
    if (v29 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x197D3A578);
    }
  }
  v166 = v31;
  v38 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v31, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
  v40 = *((_QWORD *)this + 3528);
  if (*(_DWORD *)(v40 + 32) == 4)
  {
    v91 = *(_DWORD *)(v40 + 24) + 2;
    if (*(_DWORD *)(*(_QWORD *)this + 164) > v91)
    {
      v162 = JSC::FTL::Output::greaterThanOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v92, *((JSC::B3::Value **)this + 3457));
      v93 = JSC::FTL::Output::above((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v92, v38);
      v94 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v93, (uint64_t)v38, (uint64_t)v92, 0);
      v95 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v38, v92);
      v96 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v95, *((JSC::B3::Value **)this + 3457));
      v97 = *((_QWORD *)this + 3457);
      v98 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v38, v92);
      v99 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v96, v97, v98, 0);
      v41 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v162, v94, v99, 0);
      v40 = *((_QWORD *)this + 3528);
      goto LABEL_7;
    }
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x197D3A128);
  }
  v41 = *((_QWORD *)this + 3457);
LABEL_7:
  v165 = v41;
  v42 = (*(_DWORD *)(v40 + 24) + 1);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v42)
  {
    __break(0xC471u);
    JUMPOUT(0x197D3A570);
  }
  v43 = *(_QWORD *)(*(_QWORD *)this + 152);
  v44 = *(_QWORD *)(v43 + 8 * v42);
  v45 = (v44 >> 50) & 0x3F;
  if (v45 <= 0x31)
  {
    if (v45 == 21)
    {
      goto LABEL_11;
    }
    if (((1 << v45) & 0x800002000800) != 0)
    {
      switch((_DWORD)v45)
      {
        case 0xB:
          break;
        case 0x19:
          break;
        case 0x2F:
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197D3A4D4);
      }
      v164 = v65;
      goto LABEL_11;
    }
    if (((1 << v45) & 0x2000000000002) != 0)
    {
      v161 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v70 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v158 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v71 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v72 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v80 = *(_QWORD *)(v43 + 8 * v42);
      v81 = (v80 >> 50) & 0x3F;
      v159 = v71;
      v160 = (JSC::B3::BasicBlock *)v72;
      if ((_DWORD)v81 == 49)
      {
      }
      else
      {
        if ((_DWORD)v81 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D3A540);
        }
      }
      v156 = (JSC::B3::Value *)v82;
      v100 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v41, 2);
      v101 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v38, 2);
      v102 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v100);
      v155 = v103;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v161, v104, v105, v106, v107, v108, v109);
      *((_QWORD *)this + 3472) = v161;
      v157 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v70;
      v110 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 2);
      v111 = v110;
      if (v102 || v155)
      {
        if ((*(_WORD *)(v102 + 12) & 0xFFF) == 0x98)
          v112 = v102;
        else
          v112 = 0;
        *(_QWORD *)(v112 + 40) = v110;
      }
      v113 = JSC::FTL::Output::notEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v110, v101);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v113, v70, v159, NAN, NAN, v114, v115, v116, v117);
      *((_QWORD *)this + 3472) = v70;
      *((_QWORD *)this + 3473) = v158;
      v118 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v111);
      v121 = (*(_QWORD *)(v43 + 8 * v42) >> 50) & 0x3FLL;
      if ((_DWORD)v121 == 49)
      {
        v122 = v119;
        v123 = v118;
        v132 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 17576), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v31, v111, 0, 0, 0, v120);
        v134 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v132, v133, 4);
        v127 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v134, v156);
      }
      else
      {
        if ((_DWORD)v121 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197D3A560);
        }
        v122 = v119;
        v123 = v118;
        v124 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16584), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v31, v111, 0, 0, 0, v120);
        v126 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v124, v125, 2);
        v127 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v126, v156);
      }
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v127, (uint64_t)v160, v158, NAN, NAN, v128, v129, v130, v131);
      *((_QWORD *)this + 3472) = v158;
      *((_QWORD *)this + 3473) = v159;
      v135 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v111, *((JSC::B3::Value **)this + 3461));
      v136 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v135);
      if (v136 || v137)
      {
        if ((*(_WORD *)(v136 + 12) & 0xFFF) == 0x98)
          v144 = v136;
        else
          v144 = 0;
        *(_QWORD *)(v144 + 40) = v111;
      }
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v161, v138, v139, v140, v141, v142, v143);
      *((_QWORD *)this + 3472) = v159;
      *((_QWORD *)this + 3473) = v160;
      v145 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -1);
      v146 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v145);
      v148 = v147;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v160, v149, v150, v151, v152, v153, v154);
      *((_QWORD *)this + 3472) = v160;
      *((_QWORD *)this + 3473) = v157;
      v62 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v146, v148, v123, v122);
      goto LABEL_11;
    }
  }
  if ((_DWORD)v45)
  {
    __break(0xC471u);
    JUMPOUT(0x197D3A228);
  }
  if (*(_WORD *)(v40 + 18) == 146)
    v83 = *(_DWORD *)(v40 + 80);
  else
    v83 = *(_DWORD *)(v40 + 72);
  if (v83 == 9)
  {
LABEL_28:
    goto LABEL_11;
  }
  if (v83 == 7)
    goto LABEL_28;
  if (v83 != 8)
  {
    __break(0xC471u);
    JUMPOUT(0x197D3A4F4);
  }
LABEL_11:
  v63 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePushWithScope(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  int8x8_t v25;
  unint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::DFG::Node *v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  char v61;
  _QWORD *v62;
  unint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  JSC::B3::Value *v66;
  JSC::B3::Value *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  JSC::B3::Value *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  int8x8_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  int v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  int64x2_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  JSC::DFG::Node *v136;
  JSC::B3::Value *v137;
  char **v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  double result;
  uint64_t v162;
  unsigned int v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int *v191;
  unint64_t v192;
  __n128 v193;
  int64x2_t v194;
  _QWORD *v195;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v162 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v163 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v163 != 0x3FFFFFFF) ? (v164 = v163 == -1) : (v164 = 1), v164))
  {
    v165 = 2;
  }
  else if (v163 >> 28)
  {
    v184 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v184 = v162;
    *(_DWORD *)(v184 + 8) = v163;
    v165 = 1;
    v162 = v184;
  }
  else
  {
    v165 = v162;
    v162 = 0;
  }
  v11 = v162 | v165;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v162 | v165) & 1) == 0)
    goto LABEL_3;
  v172 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v173 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v173 != 0x3FFFFFFF) ? (v174 = v173 == -1) : (v174 = 1), v174))
  {
    v175 = 2;
  }
  else if (v173 >> 28)
  {
    v185 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v185 = v172;
    *(_DWORD *)(v185 + 8) = v173;
    v175 = 1;
    v172 = v185;
  }
  else
  {
    v175 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v172 = 0;
  }
  v176 = v172 | v175;
  v13 = (_QWORD *)(v176 & 0xFFFFFFFF8);
  if ((v176 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v26 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  if ((v26 & 0xFC000000000000) == 0x2C000000000000)
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v28, v29, v30, v31, v32, v33);
    v34 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v42 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationPushWithScopeObject);
    v43 = *((_QWORD *)this + 3472);
    v45 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), 2, *((_QWORD *)this + 3471), v42, v34, (uint64_t)v24, (uint64_t)v27);
    v194.i64[0] = v45;
    v46 = (char **)(v43 + 8);
    v47 = *(unsigned int *)(v43 + 20);
    if ((_DWORD)v47 == *(_DWORD *)(v43 + 16))
    {
      v151 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46, v47 + 1, (unint64_t)&v194);
      v47 = *(unsigned int *)(v43 + 20);
      *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v47) = *(_QWORD *)v151;
      v48 = v194.i64[0];
    }
    else
    {
      *(_QWORD *)&(*v46)[8 * v47] = v45;
      v48 = v45;
    }
    *(_DWORD *)(v43 + 20) = v47 + 1;
    *(_QWORD *)(v48 + 32) = v43;
    if (!JSC::DFG::mayExit(*(JSC::DFG **)this, *((JSC::DFG::Graph **)this + 3528), v44))
    {
LABEL_49:
      v195 = (_QWORD *)*((_QWORD *)this + 3528);
      v142 = (uint64_t *)((char *)this + 27936);
      v143 = *((_QWORD *)this + 3521);
      v193.n128_u64[0] = v45;
      goto LABEL_50;
    }
    v56 = *(_QWORD *)this;
    v57 = *((_QWORD *)this + 3524);
    if ((v57 & 1) != 0)
    {
      v166 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
      if ((v57 & 2) != 0 || (v167 = *(_DWORD *)((v57 & 0xFFFFFFFF8) + 8), v167 == 0x3FFFFFFF) || v167 == -1)
      {
        v168 = 2;
      }
      else if (v167 >> 28)
      {
        v186 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v186 = v166;
        *(_DWORD *)(v186 + 8) = v167;
        v168 = 1;
        v166 = v186;
      }
      else
      {
        v168 = v166;
        v166 = 0;
      }
      v57 = v166 | v168;
      v58 = *(_QWORD *)(v56 + 32);
      if (((v166 | v168) & 1) != 0)
      {
        v180 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
        if ((v57 & 2) != 0 || (v181 = *(_DWORD *)((v57 & 0xFFFFFFFF8) + 8), v181 == 0x3FFFFFFF) || v181 == -1)
        {
          v182 = 2;
        }
        else if (v181 >> 28)
        {
          v188 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v188 = v180;
          *(_DWORD *)(v188 + 8) = v181;
          v182 = 1;
          v180 = v188;
        }
        else
        {
          v182 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
          v180 = 0;
        }
        v183 = v180 | v182;
        v59 = (_QWORD *)(v183 & 0xFFFFFFFF8);
        if ((v183 & 1) != 0)
        {
          v60 = 0;
          v61 = 0;
          v62 = (_QWORD *)*v59;
          if (!*v59)
          {
LABEL_17:
            v63 = *(_QWORD *)(v58 + 8);
            if ((v60 & 1) == 0 && v59)
              WTF::fastFree((unint64_t)v59, v49, v50, v51, v52, v53, v54, v55);
            if ((v61 & 1) == 0 && (v57 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v57 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
            v64 = (JSC::B3::Value *)*((_QWORD *)this + 3485);
            v65 = *((_QWORD *)this + 791);
            if (v65)
            {
              v66 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v65);
              v64 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v64, v66);
            }
            v67 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6304), (uint64_t)v64, 2);
            if (HIBYTE(word_1ECF4C620))
            {
              v68 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationExceptionFuzz);
              JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v63, v69, v70, v71, v72, v73, v74);
              v75 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v63);
              JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), 0, *((_QWORD *)this + 3471), v68, v75);
              v76 = (JSC::B3::Value *)*((_QWORD *)this + 3485);
              v77 = *((_QWORD *)this + 791);
              if (v77)
              {
                v78 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v77);
                v76 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v76, v78);
              }
              v67 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6304), (uint64_t)v76, 2);
            }
            v83 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v67);
            v191 = 0;
            v192 = 2;
            v84 = *(_QWORD *)this;
            v85 = *((_QWORD *)this + 3525);
            if ((v85 & 1) != 0)
            {
              v169 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
              if ((v85 & 2) != 0
                || (v170 = *(unsigned int *)((v85 & 0xFFFFFFFF8) + 8), (_DWORD)v170 == 0x3FFFFFFF)
                || (_DWORD)v170 == -1)
              {
                v171 = 2;
              }
              else if (v170 >> 28)
              {
                v187 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v187 = v169;
                *(_DWORD *)(v187 + 8) = v170;
                v171 = 1;
                v169 = v187;
              }
              else
              {
                v171 = *(_QWORD *)(v85 & 0xFFFFFFFF8);
                v169 = v170 << 36;
              }
              v85 = v169 | v171;
            }
            v190 = v85;
            v93 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v84, &v190, (uint64_t *)&v192, &v191, v79, v80, v81, v82);
            if ((v190 & 1) != 0 && (v190 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v190 & 0xFFFFFFFF8, v86, v87, v88, v89, v90, v91, v92);
            if (v93)
            {
              v94 = v192;
              if ((v192 & 1) != 0)
              {
                v177 = *(_QWORD *)(v192 & 0xFFFFFFFF8);
                if ((v192 & 2) != 0
                  || (v178 = *(unsigned int *)((v192 & 0xFFFFFFFF8) + 8), (_DWORD)v178 == 0x3FFFFFFF)
                  || (_DWORD)v178 == -1)
                {
                  v179 = 2;
                }
                else if (v178 >> 28)
                {
                  v189 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v189 = v177;
                  *(_DWORD *)(v189 + 8) = v178;
                  v179 = 1;
                  v177 = v189;
                }
                else
                {
                  v179 = *(_QWORD *)(v192 & 0xFFFFFFFF8);
                  v177 = v178 << 36;
                }
                v94 = v177 | v179;
              }
              v193.n128_u64[0] = v94;
              v95 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v194, (uint64_t *)this + 3524, v193.n128_u64, v88, v89, v90, v91, v92).u64[0];
              if ((v194.i8[8] & 1) != 0 && (v194.i64[1] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v194.i64[1] & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
              if ((v194.i8[0] & 1) != 0 && (v194.i64[0] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v194.i64[0] & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
              if ((v193.n128_u8[0] & 1) != 0 && (v193.n128_u64[0] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v193.n128_u64[0] & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
            }
            else
            {
              v144 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
              v145 = v144;
              v146 = *((_QWORD *)this + 3473);
              if (v146)
              {
                WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v146, v144);
              }
              else
              {
                v193.n128_u64[0] = v144;
                v153 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *(_OWORD *)v153 = 0u;
                *((_OWORD *)v153 + 1) = 0u;
                v153[3] = *((_QWORD *)this + 3477);
                *((_QWORD *)this + 3477) = v153;
                v195 = v153;
                v153[2] = v145;
                WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v193, (uint64_t *)&v195, v154, v155, v156, v157, v158, (uint64_t)&v194);
                v159 = v195;
                v160 = (_QWORD *)*((_QWORD *)this + 3479);
                *v195 = (char *)this + 27824;
                v159[1] = v160;
                *v160 = v159;
                *((_QWORD *)this + 3479) = v159;
              }
              JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v83, *((_QWORD *)this + 3482), v145, 0.0, 1.0, v147, v148, v149, v150);
              *((_QWORD *)this + 3472) = v145;
            }
            if ((v192 & 1) != 0 && (v192 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v192 & 0xFFFFFFFF8, v96, v97, v98, v99, v100, v101, v102);
            goto LABEL_49;
          }
LABEL_16:
          v58 = v62[1];
          goto LABEL_17;
        }
        v61 = 0;
        v60 = 1;
LABEL_15:
        v62 = v59;
        if (!v59)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    else
    {
      v58 = *(_QWORD *)(v56 + 32);
    }
    v59 = (_QWORD *)(v57 & 0xFFFFFFFF8);
    v60 = 1;
    v61 = 1;
    goto LABEL_15;
  }
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v104, v105, v106, v107, v108, v109);
  v110 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v118 = (int *)((char *)this + 28264);
  v119 = *((_DWORD *)this + 7066);
  if ((v119 & 0x80000000) == 0)
  {
    v120 = *((_QWORD *)this + 3481);
    v194.i64[0] = WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v194.i64[0] = 0x200000002;
    v194.i64[1] = 0x200000002;
    v128 = (_QWORD *)(v120 + 32);
    v129 = *(unsigned int *)(v120 + 44);
    if ((_DWORD)v129 == *(_DWORD *)(v120 + 40))
    {
      v130 = (int64x2_t *)WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v128, v129 + 1, (unint64_t)&v194);
      v131 = *(_QWORD *)(v120 + 32) + 16 * *(unsigned int *)(v120 + 44);
    }
    else
    {
      v131 = *v128 + 16 * v129;
      v130 = &v194;
    }
    *(_QWORD *)v131 = 0;
    *(_QWORD *)(v131 + 8) = 0;
    v132 = v130->i64[0];
    v130->i64[0] = 0;
    *(_QWORD *)v131 = v132;
    LODWORD(v132) = v130->i32[2];
    v130->i32[2] = 0;
    *(_DWORD *)(v131 + 8) = v132;
    LODWORD(v132) = v130->i32[3];
    v130->i32[3] = 0;
    *(_DWORD *)(v131 + 12) = v132;
    ++*(_DWORD *)(v120 + 44);
    v119 = v129 | 0x80000000;
    *v118 = v129 | 0x80000000;
    v133 = v194.i64[0];
    if (v194.i64[0])
    {
      v194.i64[0] = 0;
      v194.i32[2] = 0;
      WTF::fastFree(v133, v121, v122, v123, v124, v125, v126, v127);
      v119 = *v118;
    }
  }
  v134 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationPushWithScope);
  v135 = *((_QWORD *)this + 3472);
  v137 = (JSC::B3::Value *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), v119, *((_QWORD *)this + 3471), v134, v110, (uint64_t)v24, v103);
  v194.i64[0] = (uint64_t)v137;
  v138 = (char **)(v135 + 8);
  v139 = *(unsigned int *)(v135 + 20);
  if ((_DWORD)v139 == *(_DWORD *)(v135 + 16))
  {
    v152 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v138, v139 + 1, (unint64_t)&v194);
    v139 = *(unsigned int *)(v135 + 20);
    *(_QWORD *)(*(_QWORD *)(v135 + 8) + 8 * v139) = *(_QWORD *)v152;
    v140 = v194.i64[0];
  }
  else
  {
    *(_QWORD *)&(*v138)[8 * v139] = v137;
    v140 = (uint64_t)v137;
  }
  *(_DWORD *)(v135 + 20) = v139 + 1;
  *(_QWORD *)(v140 + 32) = v135;
  v195 = (_QWORD *)*((_QWORD *)this + 3528);
  v142 = (uint64_t *)((char *)this + 27936);
  v143 = *((_QWORD *)this + 3521);
  v193.n128_u64[0] = v141;
LABEL_50:
  v193.n128_u64[1] = v143;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v194, v142, (uint64_t *)&v195, &v193).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  unint64_t *v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  unint64_t *v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  char v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSCell *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  JSC::B3::BasicBlock *v43;
  JSC::B3::BasicBlock *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  JSC::B3::Value *v92;
  __int128 v93;
  uint64_t v94;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v94, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v94, v3, v4, v5, v6, v7, v8);
  if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 3528);
  v19 = (unint64_t *)(v18 + 24);
  if ((*(_BYTE *)(v18 + 56) & 0x10) != 0)
  {
    v84 = *v19;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v84)
      goto LABEL_31;
    v19 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v84);
  }
  v21 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v21 + 56) & 0x10) != 0)
  {
    v85 = *(_DWORD *)(v21 + 24) + 1;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v85)
    {
      __break(0xC471u);
      JUMPOUT(0x197D3B298);
    }
    v22 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v85);
  }
  else
  {
    v22 = (unint64_t *)(v21 + 32);
  }
  v24 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v24 + 56) & 0x10) != 0)
  {
    v86 = *(_DWORD *)(v24 + 24) + 2;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v86)
    {
      __break(0xC471u);
      JUMPOUT(0x197D3B2A0);
    }
    v25 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v86);
  }
  else
  {
    v25 = (unint64_t *)(v24 + 40);
  }
  v27 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v27 + 56) & 0x10) != 0)
  {
    v87 = *(_DWORD *)(v27 + 24) + 3;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v87)
    {
      __break(0xC471u);
      JUMPOUT(0x197D3B2A8);
    }
    v28 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v87);
  }
  else
  {
    v28 = (unint64_t *)(v27 + 48);
  }
  v30 = *((_QWORD *)this + 3528);
  v32 = *(_BYTE *)(v30 + 56);
  v31 = (unint64_t *)(v30 + 56);
  v92 = (JSC::B3::Value *)v29;
  if ((v32 & 0x10) == 0)
  {
    v33 = v20;
    goto LABEL_11;
  }
  v88 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 4;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v88)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197D3B290);
  }
  v33 = v20;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v88);
LABEL_11:
  v39 = **(JSC::JSCell ***)(*((_QWORD *)this + 3528) + 72);
  v40 = *((_DWORD *)v16 + 242);
  if (v40)
    v41 = 16 * (v40 & 0xFFFFFFFE);
  else
    v41 = 0;
  v42 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v41, (int *)&v93, v34, v35, v36, v37, v38);
  v43 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v44 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v91 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v43;
  v89 = *(_DWORD *)(*((_QWORD *)this + 3528) + 80);
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v52, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3280));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v59, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3232));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v33, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2464));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v23, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2512));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2560));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v92, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2608));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v90, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2656));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3460), v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2704));
  v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x7FF8000000000000);
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v60, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2752));
  v61 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v89);
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v61, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2800));
  v62 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
  JSC::FTL::Output::store32As8((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62, v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2848));
  v63 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45);
  v65 = v64;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44, v66, v67, v68, v69, v70, v71);
  *((_QWORD *)this + 3472) = v43;
  *((_QWORD *)this + 3473) = v44;
  *(_QWORD *)&v93 = *(_QWORD *)(*(_QWORD *)this + 16);
  *((_QWORD *)&v93 + 1) = v16;
  v73 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v72);
  v75 = v74;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44, v76, v77, v78, v79, v80, v81);
  *((_QWORD *)this + 3472) = v44;
  *((_QWORD *)this + 3473) = v91;
  v82 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v63, v65, v73, v75);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  JSC::B3::BasicBlock *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::BasicBlock *v35;
  uint64_t v36;
  JSC::InlineCallFrame *v37;
  unint64_t ArgumentsLength;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  unint64_t v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC::B3::Value *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  JSC::B3::Value *CurrentCallee;
  JSC::B3::Value *ArgumentsStart;
  JSC::B3::BasicBlock *v83;
  uint64_t v84;
  JSC::FTL::Output *v85;
  JSC::B3::Value *v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  JSC::B3::Value *v101;
  JSC::B3::Value *v102;
  uint64_t v103;
  JSC::B3::Value *v104;
  uint64_t v105;
  JSC::FTL::IndexedAbstractHeap *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::FTL::IndexedAbstractHeap *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  JSC::B3::Value *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  JSC::FTL::AbstractHeap *v132;
  uint64_t v133;
  JSC::B3::Value *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const JSC::FTL::AbstractHeap *v141;
  JSC::B3::Value *v142;
  uint64_t v143;
  JSC::B3::Value *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD v152[2];
  unsigned int v153;
  uint64_t v154;

  v2 = *(_QWORD *)this;
  v149 = (uint64_t *)((char *)this + 28192);
  JSC::CodeOrigin::CodeOrigin(&v154, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v14 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v2, &v154, v3, v4, v5, v6, v7, v8) + 836);
  if (v14)
    v15 = 16 * (v14 & 0xFFFFFFFE);
  else
    v15 = 0;
  v23 = JSC::DFG::Graph::registerStructure(v2, v15, (int *)v152, v9, v10, v11, v12, v13);
  if ((v154 & 1) != 0 && (v154 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v154 & 0xFFFFFFFF8, v16, v17, v18, v19, v20, v21, v22);
  v24 = *(_QWORD *)(*(_QWORD *)this + 40);
  v25 = *((_QWORD *)this + 3524);
  v26 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) != 0)
    v26 = (_QWORD *)*v26;
  if (v26)
    v24 = v26[1];
  v27 = *(_DWORD *)(v24 + 28) - 1;
  v28 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v35 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v151 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v28;
  v36 = *((_QWORD *)this + 3524);
  v37 = (JSC::InlineCallFrame *)(v36 & 0xFFFFFFFF8);
  if ((v36 & 1) != 0)
    v37 = *(JSC::InlineCallFrame **)v37;
  v40 = v39;
  v41 = HIDWORD(ArgumentsLength);
  v150 = ArgumentsLength;
  if ((_BYTE)ArgumentsLength)
  {
    if (v27 <= HIDWORD(ArgumentsLength))
      v121 = HIDWORD(ArgumentsLength);
    else
      v121 = v27;
  }
  else
  {
    v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 3);
    v43 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v40, v42);
    v44 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 48);
    v45 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43, v44);
    v46 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v27);
    v47 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v40, v46);
    v48 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 8 * v27 + 48);
    v49 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v47, v45, v48, 0);
    v50 = JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v49, 2);
  }
  v52 = v51;
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v40, v51, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1552));
  v53 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v27);
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53, v52, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1600));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3460), v52, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1648));
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3460), v52, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1696));
  v54 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v52);
  v56 = v55;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v35, v57, v58, v59, v60, v61, v62);
  *((_QWORD *)this + 3472) = v28;
  *((_QWORD *)this + 3473) = v35;
  v152[0] = *(_QWORD *)(*(_QWORD *)this + 16);
  v152[1] = v23;
  v153 = v27;
  v64 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v63);
  v66 = v65;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v35, v67, v68, v69, v70, v71, v72);
  *((_QWORD *)this + 3472) = v35;
  *((_QWORD *)this + 3473) = v151;
  v73 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v54, v56, v64, v66);
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), CurrentCallee, v73, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1504));
  if (v150)
  {
    v122 = JSC::AssemblyHelpers::argumentsStart(*v149);
    if (v27 <= v41)
      v129 = v41;
    else
      v129 = v27;
    if ((_DWORD)v129)
    {
      v130 = 0;
      v131 = v122;
      do
      {
        v134 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v132, v133, 2);
        v141 = (const JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::operator[]((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 8648), v130, v135, v136, v137, v138, v139, v140);
        JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v134, v73, v141);
        ++v130;
      }
      while (v129 != v130);
    }
  }
  else
  {
    v83 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v84 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v85 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    if (v27)
    {
      v86 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v85, v27);
      v87 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v40, v86);
      v88 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v27);
      v89 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v87, (uint64_t)v40, v88, 0);
      v90 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v89, 2);
      v91 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v90);
      v93 = v92;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v83, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      v142 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v85, (uint64_t)v40, 2);
      v91 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v142);
      v93 = v143;
      v144 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v142);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v144, v84, (uint64_t)v83, NAN, NAN, v145, v146, v147, v148);
    }
    *((_QWORD *)this + 3472) = v83;
    v100 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v84;
    v101 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 2);
    v102 = v101;
    if (v91 || v93)
    {
      if ((*(_WORD *)(v91 + 12) & 0xFFF) == 0x98)
        v103 = v91;
      else
        v103 = 0;
      *(_QWORD *)(v103 + 40) = v101;
    }
    v104 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v101, *((JSC::B3::Value **)this + 3461));
    v106 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 22536), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), ArgumentsStart, v104, 0, 0, 0, v105);
    v108 = JSC::FTL::Output::load((uint64_t)this + 27640, v106, v107, 2);
    v110 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 8648), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v73, v104, 0, 0, 0, v109);
    JSC::FTL::Output::store((uint64_t)this + 27640, v108, v110, v111);
    v112 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v104);
    if (v112 || v113)
    {
      if ((*(_WORD *)(v112 + 12) & 0xFFF) == 0x98)
        v114 = v112;
      else
        v114 = 0;
      *(_QWORD *)(v114 + 40) = v102;
    }
    v115 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v104);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v115, v84, (uint64_t)v83, NAN, NAN, v116, v117, v118, v119);
    *((_QWORD *)this + 3472) = v84;
    *((_QWORD *)this + 3473) = v100;
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateScopedArguments(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  const JSC::CodeOrigin *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSCell *v17;
  int8x8_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  JSC::JSCell *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::InlineCallFrame *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  uint64_t v65[2];
  uint64_t v66;
  uint64_t ArgumentsStart;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::B3::Value *v71;
  uint64_t v72;

  v2 = *(_QWORD *)this;
  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192);
  JSC::CodeOrigin::CodeOrigin(&v72, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v17 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v72, v4, v5, v6, v7, v8, v9);
  if ((v72 & 1) != 0 && (v72 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v72 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  v25 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v68, v3);
  v38 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor(v25, &v68, v26, v27, v28, v29, v30, v31) + 840);
  if (v38)
    v39 = (JSC::JSCell *)(16 * (v38 & 0xFFFFFFFE));
  else
    v39 = 0;
  v46 = *((_QWORD *)this + 3524);
  v47 = (JSC::InlineCallFrame *)(v46 & 0xFFFFFFFF8);
  if ((v46 & 1) != 0)
    v47 = *(JSC::InlineCallFrame **)v47;
  v66 = v48;
  if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v68 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateClonedArguments(JSC::DFG::Graph **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int isWatchingHavingABadTimeWatchpoint;
  JSC::DFG::Graph *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::B3::BasicBlock *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  JSC::Structure *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  JSC::InlineCallFrame *v40;
  unint64_t ArgumentsLength;
  uint64_t v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *HeapCell;
  uint64_t v64;
  uint64_t v65;
  const JSC::FTL::AbstractHeap *v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  const JSC::FTL::AbstractHeap *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  JSC::B3::Value *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  JSC::B3::Value *v94;
  uint64_t v95;
  JSC::B3::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  JSC::FTL::IndexedAbstractHeap *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::FTL::IndexedAbstractHeap *v105;
  uint64_t v106;
  JSC::B3::Value *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  JSC::DFG::Graph *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  JSC::JSCell *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  JSC::B3::Value *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  JSC::B3::Value *v160;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v161;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  JSC::JSCell *v176;
  JSC::DFG::Graph *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  JSC::JSCell *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  JSC::InlineCallFrame *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  JSC::B3::Value *CurrentCallee;
  uint64_t v217;
  uint64_t v218;
  JSC::B3::Value *ArgumentsStart;
  uint64_t v220;
  JSC::DFG::Graph *v221;
  uint64_t v222;
  uint64_t v223;
  JSC::JSCell *v224;
  JSC::B3::BasicBlock *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237[2];

  isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*this, this[3528], a3, a4, a5, a6, a7, a8);
  v10 = *this;
  if (isWatchingHavingABadTimeWatchpoint)
  {
    JSC::CodeOrigin::CodeOrigin(v237, (const JSC::CodeOrigin *)(this + 3524));
    v24 = JSC::DFG::Graph::globalObjectFor((uint64_t)v10, v237, v11, v12, v13, v14, v15, v16);
    if ((v237[0] & 1) != 0 && (v237[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v237[0] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
    v25 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
    v26 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
    v27 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
    v226 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
    v225 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
    v28 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), this[3460]);
    v222 = v29;
    v223 = v28;
    v224 = (JSC::JSCell *)v24;
    v30 = *(_DWORD *)(v24 + 844);
    if (v30)
      v31 = (JSC::Structure *)(16 * (v30 & 0xFFFFFFFE));
    else
      v31 = 0;
    v38 = JSC::Structure::outOfLineCapacity(v31);
    v39 = (unint64_t)this[3524];
    v40 = (JSC::InlineCallFrame *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 1) != 0)
      v40 = *(JSC::InlineCallFrame **)v40;
    v43 = (JSC::B3::Value *)v42;
    v227 = v42;
    v236 = (uint64_t)ArgumentsStart;
    v235 = (uint64_t)CurrentCallee;
    v51 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), 0x10000000);
    v52 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(this + 3455), v43, v51);
    JSC::FTL::Output::branch(this + 3455, (uint64_t)v52, (uint64_t)v25, v26, NAN, NAN, v53, v54, v55, v56);
    this[3472] = (JSC::DFG::Graph *)v26;
    v220 = v27;
    v221 = this[3473];
    this[3473] = (JSC::DFG::Graph *)v27;
    if ((ArgumentsLength & 1) != 0)
    {
      v61 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 8 * v38 + 8 + 8 * HIDWORD(ArgumentsLength));
    }
    else
    {
      v57 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 8 * v38 + 8);
      v58 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(this + 3455, (uint64_t)v43, 2);
      v59 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), 3);
      v60 = JSC::FTL::Output::shl((JSC::FTL::Output *)(this + 3455), v58, v59);
      v61 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v57, v60);
    }
    if ((_DWORD)v38)
    {
      v64 = 0;
      do
      {
        v65 = (uint64_t)this[3459];
        v66 = JSC::FTL::Output::address((JSC::FTL::Output *)(this + 3455), (const JSC::FTL::AbstractHeap *)(this + 3189), HeapCell, v64);
        JSC::FTL::Output::store((uint64_t)(this + 3455), v65, v66, v67);
        v64 += 8;
      }
      while (8 * v38 != v64);
    }
    v68 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 8 * v38 + 8);
    v69 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v68, HeapCell);
    JSC::FTL::Output::store32((JSC::FTL::Output *)(this + 3455), v43, v69, (const JSC::FTL::AbstractHeap *)(this + 38));
    JSC::FTL::Output::store32((JSC::FTL::Output *)(this + 3455), v43, v69, (const JSC::FTL::AbstractHeap *)(this + 44));
    v71 = JSC::FTL::Output::address((JSC::FTL::Output *)(this + 3455), (const JSC::FTL::AbstractHeap *)(this + 3189), v69, -16);
    JSC::FTL::Output::store((uint64_t)(this + 3455), v70, v71, v72);
    v73 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v69);
    v217 = v79;
    v218 = v73;
    v80 = *((_DWORD *)v224 + 211);
    if (v80)
      v81 = 16 * (v80 & 0xFFFFFFFE);
    else
      v81 = 0;
    v82 = JSC::DFG::Graph::registerStructure((uint64_t)*this, v81, (int *)&v234, v74, v75, v76, v77, v78);
    JSC::FTL::Output::store32((JSC::FTL::Output *)(this + 3455), CurrentCallee, v83, (const JSC::FTL::AbstractHeap *)(this + 62));
    v84 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(this + 3455, (uint64_t)v43, 2);
    v85 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v84);
    v87 = v86;
    v88 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(this + 3455), v43);
    JSC::FTL::Output::branch(this + 3455, (uint64_t)v88, v226, v220, NAN, NAN, v89, v90, v91, v92);
    this[3472] = (JSC::DFG::Graph *)v220;
    this[3473] = (JSC::DFG::Graph *)v226;
    v93 = (JSC::B3::Value *)JSC::FTL::Output::phi(this + 3455, 2);
    v94 = v93;
    if (v85 || v87)
    {
      if ((*(_WORD *)(v85 + 12) & 0xFFF) == 0x98)
        v95 = v85;
      else
        v95 = 0;
      *(_QWORD *)(v95 + 40) = v93;
    }
    v96 = JSC::FTL::Output::sub((JSC::FTL::Output *)(this + 3455), v93, this[3461]);
    v97 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v96);
    if (v97 || v98)
    {
      if ((*(_WORD *)(v97 + 12) & 0xFFF) == 0x98)
        v100 = v97;
      else
        v100 = 0;
      *(_QWORD *)(v100 + 40) = v94;
    }
    v101 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(this + 2817), (JSC::FTL::Output *)(this + 3455), ArgumentsStart, v96, 0, 0, 0, v99);
    v103 = JSC::FTL::Output::load((uint64_t)(this + 3455), v101, v102, 2);
    v105 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(this + 2321), (JSC::FTL::Output *)(this + 3455), v69, v96, 0, 0, 0, v104);
    JSC::FTL::Output::store((uint64_t)(this + 3455), v103, v105, v106);
    v107 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(this + 3455), v96);
    JSC::FTL::Output::branch(this + 3455, (uint64_t)v107, v226, v220, NAN, NAN, v108, v109, v110, v111);
    this[3472] = (JSC::DFG::Graph *)v226;
    this[3473] = v25;
    v112 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v83);
    v114 = v113;
    JSC::FTL::Output::jump((JSC::FTL::Output *)(this + 3455), v225, v115, v116, v117, v118, v119, v120);
    this[3472] = v25;
    this[3473] = v225;
    v127 = *this;
    JSC::CodeOrigin::CodeOrigin(&v232, (const JSC::CodeOrigin *)(this + 3524));
    v140 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor((uint64_t)v127, &v232, v128, v129, v130, v131, v132, v133) + 844);
    if (v140)
      v141 = (JSC::JSCell *)(16 * (v140 & 0xFFFFFFFE));
    else
      v141 = 0;
    v231 = JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(this + 3455, 2, v223, v222, v218, v217);
    if ((v232 & 1) != 0 && (v232 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v232 & 0xFFFFFFFF8, v143, v144, v145, v146, v147, v148, v149);
    v151 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v150);
    v153 = v152;
    JSC::FTL::Output::jump((JSC::FTL::Output *)(this + 3455), v225, v154, v155, v156, v157, v158, v159);
    this[3472] = v225;
    this[3473] = v221;
    v160 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(this + 3455, 2, v112, v114, v151, v153);
    v161 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)this;
  }
  else
  {
    JSC::CodeOrigin::CodeOrigin(&v230, (const JSC::CodeOrigin *)(this + 3524));
    v176 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor((uint64_t)v10, &v230, v163, v164, v165, v166, v167, v168);
    if ((v230 & 1) != 0 && (v230 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v230 & 0xFFFFFFFF8, v169, v170, v171, v172, v173, v174, v175);
    v177 = *this;
    JSC::CodeOrigin::CodeOrigin(&v229, (const JSC::CodeOrigin *)(this + 3524));
    v190 = *(_DWORD *)(JSC::DFG::Graph::globalObjectFor((uint64_t)v177, &v229, v178, v179, v180, v181, v182, v183) + 844);
    if (v190)
      v191 = (JSC::JSCell *)(16 * (v190 & 0xFFFFFFFE));
    else
      v191 = 0;
    v198 = (unint64_t)this[3524];
    v199 = (JSC::InlineCallFrame *)(v198 & 0xFFFFFFFF8);
    if ((v198 & 1) != 0)
      v199 = *(JSC::InlineCallFrame **)v199;
    v228 = v200;
    if ((v229 & 1) != 0 && (v229 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v229 & 0xFFFFFFFF8, v208, v209, v210, v211, v212, v213, v214);
    v161 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)this;
    v160 = (JSC::B3::Value *)v215;
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectAssign(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::BasicBlock *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  JSC::B3::Value *v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::B3::Value *Structure;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x8_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  JSC::B3::Value *v88;
  uint64_t v89;
  uint64_t v90;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v90, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v90, v3, v4, v5, v6, v7, v8);
  if ((v90 & 1) != 0 && (v90 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v90 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v18 = (*((_QWORD *)v17 + 4) >> 50) & 0x3FLL;
  if ((_DWORD)v18)
  {
    if ((_DWORD)v18 != 11)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v17, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x20AF, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileObjectAssign()", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197D3C3E4);
    }
    v19 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v20 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v21 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v22 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v88 = v36;
    v37 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v36, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3136));
    v38 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 24);
    v39 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37, v38);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v39, v19, v21, NAN, NAN, v40, v41, v42, v43);
    *((_QWORD *)this + 3472) = v19;
    v44 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v20;
    v45 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v36, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2992));
    v46 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 14);
    v47 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45, v46);
    v48 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v47);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v48, v20, v21, NAN, NAN, v49, v50, v51, v52);
    *((_QWORD *)this + 3472) = v20;
    *((_QWORD *)this + 3473) = v21;
    v54 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Structure, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5728));
    v55 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v54);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v55, (uint64_t)v22, v21, NAN, NAN, v56, v57, v58, v59);
    *((_QWORD *)this + 3472) = v21;
    *((_QWORD *)this + 3473) = v22;
    result = JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v70, v71, v72, v73, v74, v75);
    *((_QWORD *)this + 3472) = v22;
    *((_QWORD *)this + 3473) = v44;
  }
  else
  {
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectCreate(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v38, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v38, v3, v4, v5, v6, v7, v8);
  if ((v38 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v38 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (*(_QWORD *)(*((_QWORD *)this + 3528) + 24) >> 50) & 0x3FLL;
  if ((_DWORD)v17 == 11)
  {
  }
  else
  {
    if ((_DWORD)v17)
    {
      __break(0xC471u);
      JUMPOUT(0x197D3C500);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileObjectToString(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::BasicBlock *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *Structure;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::B3::Value *v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v78, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v78, v3, v4, v5, v6, v7, v8);
  if ((v78 & 1) != 0 && (v78 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v78 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (*(_QWORD *)(*((_QWORD *)this + 3528) + 24) >> 50) & 0x3FLL;
  if ((_DWORD)v17 == 11)
  {
    v18 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v19 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v20 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v21 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v22 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Structure, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5584));
    v33 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v33, v18, v21, NAN, NAN, v34, v35, v36, v37);
    *((_QWORD *)this + 3472) = v18;
    v75 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v19;
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v38, v21, v19, NAN, NAN, v39, v40, v41, v42);
    *((_QWORD *)this + 3472) = v19;
    *((_QWORD *)this + 3473) = v20;
    v43 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6016));
    v44 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v44, v21, v20, NAN, NAN, v45, v46, v47, v48);
    *((_QWORD *)this + 3472) = v20;
    *((_QWORD *)this + 3473) = v21;
    v49 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6064));
    v50 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v49);
    v52 = v51;
    v53 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
    v54 = JSC::FTL::Output::belowOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v49, v53);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v54, v21, (uint64_t)v22, NAN, NAN, v55, v56, v57, v58);
    *((_QWORD *)this + 3472) = v21;
    *((_QWORD *)this + 3473) = v22;
    *(_QWORD *)&v77 = *(_QWORD *)(*(_QWORD *)this + 16);
    *((_QWORD *)&v77 + 1) = v16;
    v60 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v59);
    v62 = v61;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v63, v64, v65, v66, v67, v68);
    *((_QWORD *)this + 3472) = v22;
    *((_QWORD *)this + 3473) = v75;
    v69 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v50, v52, v60, v62);
  }
  else
  {
    if ((_DWORD)v17)
    {
      __break(0xC471u);
      JUMPOUT(0x197D3C820);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewInternalFieldObject(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::DFG::Node *v1;
  uint64_t v2;
  double result;

  v1 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v2 = *((_QWORD *)v1 + 9);
  switch(*(_BYTE *)(v2 + 9))
  {
    case '@':
      break;
    case 'A':
      break;
    case 'B':
      break;
    case 'D':
      if (&JSC::JSInternalPromise::s_info == (char **)(16 * *(unsigned int *)(v2 + 76)))
      else
      break;
    default:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v1, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x2102, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewInternalFieldObject()", "Bad structure");
      __break(0xC471u);
      JUMPOUT(0x197D3C8F4);
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewStringObject(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::BasicBlock *v13;
  JSC::B3::BasicBlock *v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  __int128 v38;

  v10 = *((_QWORD *)this + 3528);
  v11 = *(_QWORD *)(v10 + 72);
  v13 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v14 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v15 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v13;
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, v16, *((const JSC::FTL::AbstractHeap **)this + 3314));
  v17 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v19 = v18;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14, v20, v21, v22, v23, v24, v25);
  *((_QWORD *)this + 3472) = v13;
  *((_QWORD *)this + 3473) = v14;
  *(_QWORD *)&v38 = *(_QWORD *)(*(_QWORD *)this + 16);
  *((_QWORD *)&v38 + 1) = v11;
  v27 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v26);
  v29 = v28;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14, v30, v31, v32, v33, v34, v35);
  *((_QWORD *)this + 3472) = v14;
  *((_QWORD *)this + 3473) = v15;
  v36 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v17, v19, v27, v29);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSymbol(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int *v62;
  int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  JSC::B3::Value *v79;
  JSC::DFG::Node *v80;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char **v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  double result;
  char *v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v117 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v118 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v118 != 0x3FFFFFFF) ? (v119 = v118 == -1) : (v119 = 1), v119))
  {
    v120 = 2;
  }
  else if (v118 >> 28)
  {
    v126 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v126 = v117;
    *(_DWORD *)(v126 + 8) = v118;
    v120 = 1;
    v117 = v126;
  }
  else
  {
    v120 = v117;
    v117 = 0;
  }
  v10 = v117 | v120;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v117 | v120) & 1) == 0)
    goto LABEL_3;
  v121 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v122 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v122 != 0x3FFFFFFF) ? (v123 = v122 == -1) : (v123 = 1), v123))
  {
    v124 = 2;
  }
  else if (v122 >> 28)
  {
    v127 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v127 = v121;
    *(_DWORD *)(v127 + 8) = v122;
    v124 = 1;
    v121 = v127;
  }
  else
  {
    v124 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v121 = 0;
  }
  v125 = v121 | v124;
  v12 = (_QWORD *)(v125 & 0xFFFFFFFF8);
  if ((v125 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v18 = v17 & 0xFC000000000000;
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, a3, a4, a5, a6, a7, a8);
    v24 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    v26 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
    if (v18 == 0x54000000000000)
    {
      v40 = (int *)((char *)this + 28264);
      v41 = *((_DWORD *)this + 7066);
      if ((v41 & 0x80000000) == 0)
      {
        v42 = *((_QWORD *)this + 3481);
        v128 = (WTF *)WTF::fastMalloc((WTF *)8);
        *(_QWORD *)v128 = 0x200000002;
        v129 = 0x200000002;
        v50 = (_QWORD *)(v42 + 32);
        v51 = *(unsigned int *)(v42 + 44);
        if ((_DWORD)v51 == *(_DWORD *)(v42 + 40))
        {
          v52 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v128);
          v53 = *(_QWORD *)(v42 + 32) + 16 * *(unsigned int *)(v42 + 44);
        }
        else
        {
          v53 = *v50 + 16 * v51;
          v52 = (unint64_t)&v128;
        }
        *(_QWORD *)v53 = 0;
        *(_QWORD *)(v53 + 8) = 0;
        v54 = *(_QWORD *)v52;
        *(_QWORD *)v52 = 0;
        *(_QWORD *)v53 = v54;
        LODWORD(v54) = *(_DWORD *)(v52 + 8);
        *(_DWORD *)(v52 + 8) = 0;
        *(_DWORD *)(v53 + 8) = v54;
        LODWORD(v54) = *(_DWORD *)(v52 + 12);
        *(_DWORD *)(v52 + 12) = 0;
        *(_DWORD *)(v53 + 12) = v54;
        ++*(_DWORD *)(v42 + 44);
        v41 = v51 | 0x80000000;
        *v40 = v51 | 0x80000000;
        v55 = v128;
        if (v128)
        {
          v128 = 0;
          LODWORD(v129) = 0;
          WTF::fastFree((unint64_t)v55, v43, v44, v45, v46, v47, v48, v49);
          v41 = *v40;
        }
      }
      v56 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationNewSymbolWithStringDescription);
      v57 = *((_QWORD *)this + 3472);
      v58 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v59 = *((_QWORD *)this + 3471);
      v60 = WTF::fastMalloc((WTF *)0x68);
      *(_QWORD *)v60 = off_1E357F5F0;
      *(_DWORD *)(v60 + 8) = -1;
      *(_WORD *)(v60 + 12) = 82;
      *(_DWORD *)(v60 + 16) = v41;
      *(_BYTE *)(v60 + 20) = 4;
      *(_QWORD *)(v60 + 24) = v59;
      *(_QWORD *)(v60 + 32) = 0;
      v61 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v60);
      v61[2] = v56;
      *v61 = v61 + 2;
      v61[3] = v24;
      v61[4] = v27;
      v61[1] = 0x300000003;
      *(_QWORD *)v60 = &unk_1E357CF78;
      *(_OWORD *)(v60 + 40) = xmmword_1991243D0;
      *(_QWORD *)(v60 + 56) = 0xFFFFFFFF00000000;
      if (!*(_DWORD *)(v60 + 76))
      {
        __break(0xC471u);
        JUMPOUT(0x197D3CCA0);
      }
    }
    else
    {
      v90 = (int *)((char *)this + 28264);
      v91 = *((_DWORD *)this + 7066);
      if ((v91 & 0x80000000) == 0)
      {
        v92 = *((_QWORD *)this + 3481);
        v128 = (WTF *)WTF::fastMalloc((WTF *)8);
        *(_QWORD *)v128 = 0x200000002;
        v129 = 0x200000002;
        v100 = (_QWORD *)(v92 + 32);
        v101 = *(unsigned int *)(v92 + 44);
        if ((_DWORD)v101 == *(_DWORD *)(v92 + 40))
        {
          v102 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&v128);
          v103 = *(_QWORD *)(v92 + 32) + 16 * *(unsigned int *)(v92 + 44);
        }
        else
        {
          v103 = *v100 + 16 * v101;
          v102 = (unint64_t)&v128;
        }
        *(_QWORD *)v103 = 0;
        *(_QWORD *)(v103 + 8) = 0;
        v104 = *(_QWORD *)v102;
        *(_QWORD *)v102 = 0;
        *(_QWORD *)v103 = v104;
        LODWORD(v104) = *(_DWORD *)(v102 + 8);
        *(_DWORD *)(v102 + 8) = 0;
        *(_DWORD *)(v103 + 8) = v104;
        LODWORD(v104) = *(_DWORD *)(v102 + 12);
        *(_DWORD *)(v102 + 12) = 0;
        *(_DWORD *)(v103 + 12) = v104;
        ++*(_DWORD *)(v92 + 44);
        v91 = v101 | 0x80000000;
        *v90 = v101 | 0x80000000;
        v105 = v128;
        if (v128)
        {
          v128 = 0;
          LODWORD(v129) = 0;
          WTF::fastFree((unint64_t)v105, v93, v94, v95, v96, v97, v98, v99);
          v91 = *v90;
        }
      }
      v106 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationNewSymbolWithDescription);
      v57 = *((_QWORD *)this + 3472);
      v58 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v107 = *((_QWORD *)this + 3471);
      v60 = WTF::fastMalloc((WTF *)0x68);
      *(_QWORD *)v60 = off_1E357F5F0;
      *(_DWORD *)(v60 + 8) = -1;
      *(_WORD *)(v60 + 12) = 82;
      *(_DWORD *)(v60 + 16) = v91;
      *(_BYTE *)(v60 + 20) = 4;
      *(_QWORD *)(v60 + 24) = v107;
      *(_QWORD *)(v60 + 32) = 0;
      v108 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v60);
      v108[2] = v106;
      *v108 = v108 + 2;
      v108[3] = v24;
      v108[4] = v82;
      v108[1] = 0x300000003;
      *(_QWORD *)v60 = &unk_1E357CF78;
      *(_OWORD *)(v60 + 40) = xmmword_1991243D0;
      *(_QWORD *)(v60 + 56) = 0xFFFFFFFF00000000;
      if (!*(_DWORD *)(v60 + 76))
      {
        __break(0xC471u);
        JUMPOUT(0x197D3D034);
      }
    }
    JSC::B3::Procedure::addValueImpl(v58, (JSC::B3::Value *)v60);
    v128 = (WTF *)v60;
    v109 = (char **)(v57 + 8);
    v110 = *(unsigned int *)(v57 + 20);
    if ((_DWORD)v110 == *(_DWORD *)(v57 + 16))
    {
      v116 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v109, v110 + 1, (unint64_t)&v128);
      v110 = *(unsigned int *)(v57 + 20);
      *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8 * v110) = *(_QWORD *)v116;
      v111 = v128;
    }
    else
    {
      *(_QWORD *)&(*v109)[8 * v110] = v60;
      v111 = (WTF *)v60;
    }
    *(_DWORD *)(v57 + 20) = v110 + 1;
    *((_QWORD *)v111 + 4) = v57;
    v81 = this;
    v79 = (JSC::B3::Value *)v60;
  }
  else
  {
    v62 = (int *)((char *)this + 28264);
    v63 = *((_DWORD *)this + 7066);
    if ((v63 & 0x80000000) == 0)
    {
      v64 = *((_QWORD *)this + 3481);
      v128 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v128 = 0x200000002;
      v129 = 0x200000002;
      v72 = (_QWORD *)(v64 + 32);
      v73 = *(unsigned int *)(v64 + 44);
      if ((_DWORD)v73 == *(_DWORD *)(v64 + 40))
      {
        v74 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)&v128);
        v75 = *(_QWORD *)(v64 + 32) + 16 * *(unsigned int *)(v64 + 44);
      }
      else
      {
        v75 = *v72 + 16 * v73;
        v74 = (unint64_t)&v128;
      }
      *(_QWORD *)v75 = 0;
      *(_QWORD *)(v75 + 8) = 0;
      v76 = *(_QWORD *)v74;
      *(_QWORD *)v74 = 0;
      *(_QWORD *)v75 = v76;
      LODWORD(v76) = *(_DWORD *)(v74 + 8);
      *(_DWORD *)(v74 + 8) = 0;
      *(_DWORD *)(v75 + 8) = v76;
      LODWORD(v76) = *(_DWORD *)(v74 + 12);
      *(_DWORD *)(v74 + 12) = 0;
      *(_DWORD *)(v75 + 12) = v76;
      ++*(_DWORD *)(v64 + 44);
      v63 = v73 | 0x80000000;
      *v62 = v73 | 0x80000000;
      v77 = v128;
      if (v128)
      {
        v128 = 0;
        LODWORD(v129) = 0;
        WTF::fastFree((unint64_t)v77, v65, v66, v67, v68, v69, v70, v71);
        v63 = *v62;
      }
    }
    v78 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationNewSymbol);
    v79 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), v63, *((_QWORD *)this + 3471), v78, *((_QWORD *)this + 3485));
    v81 = this;
  }
  v113 = *((_QWORD *)this + 3528);
  v114 = *((_QWORD *)this + 3521);
  v130.n128_u64[0] = v112;
  v130.n128_u64[1] = v114;
  v131 = v113;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v128, (uint64_t *)this + 3492, &v131, &v130).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewArrayWithSpread(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  int isWatchingHavingABadTimeWatchpoint;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  JSC::B3::BasicBlock *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::FTL::AbstractHeap *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  JSC::B3::Value **v90;
  uint64_t v91;
  JSC::B3::Value *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::DFG::Node *v96;
  JSC::B3::Value *v97;
  char **v98;
  uint64_t v99;
  JSC::B3::Value *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  JSC::B3::Value *v115;
  int8x8_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  __n128 *v134;
  JSC::InlineCallFrame *v135;
  __n128 *v136;
  int v137;
  uint64_t v138;
  int v139;
  JSC::B3::Value *v140;
  JSC::B3::Value *v141;
  JSC::B3::Value *v142;
  uint64_t v143;
  JSC::B3::Value *v144;
  JSC::B3::Value *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  JSC::B3::Value *v165;
  JSC::B3::Value *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int8x8_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  char v187;
  char v188;
  _QWORD *v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  JSC::B3::Value *v201;
  JSC::B3::Value *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  unsigned int v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  int v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  JSC::FTL::IndexedAbstractHeap *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  JSC::FTL::IndexedAbstractHeap *v227;
  uint64_t v228;
  JSC::FTL::Output *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int8x8_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  JSC::B3::Value *v267;
  JSC::B3::Value *v268;
  uint64_t v269;
  uint64_t v270;
  JSC::B3::Value *v271;
  uint64_t v272;
  uint64_t v273;
  char **v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  JSC::B3::Value *v278;
  uint64_t v279;
  uint64_t v280;
  char **v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  JSC::B3::Value *v285;
  uint64_t v286;
  uint64_t v287;
  char **v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  JSC::B3::Value *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  JSC::B3::Value *v297;
  JSC::B3::Value *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char **v303;
  uint64_t v304;
  JSC::B3::Value *v305;
  JSC::B3::Value *v306;
  uint64_t v307;
  uint64_t v308;
  char **v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  JSC::B3::Value *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char **v318;
  uint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  JSC::FTL::IndexedAbstractHeap *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  JSC::FTL::IndexedAbstractHeap *v326;
  uint64_t v327;
  JSC::B3::Value *v328;
  uint64_t v329;
  JSC::B3::Value *v330;
  uint64_t v331;
  JSC::B3::Value *v332;
  uint64_t v333;
  uint64_t v334;
  char **v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  JSC::B3::Value *v339;
  uint64_t v340;
  uint64_t v341;
  char **v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  JSC::B3::Value *v347;
  uint64_t v348;
  uint64_t v349;
  char **v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  JSC::B3::Value *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  JSC::B3::Value *v359;
  uint64_t v360;
  char **v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  JSC::B3::Value *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  JSC::B3::Value *v399;
  uint64_t v400;
  uint64_t v401;
  char **v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  JSC::B3::Value *v406;
  uint64_t v407;
  uint64_t v408;
  char **v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  JSC::B3::Value *v413;
  uint64_t v414;
  uint64_t v415;
  char **v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  JSC::B3::Value *v420;
  JSC::B3::Value *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char **v426;
  uint64_t v427;
  JSC::B3::Value *v428;
  JSC::B3::Value *v429;
  uint64_t v430;
  uint64_t v431;
  char **v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  JSC::B3::Value *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char **v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  JSC::FTL::IndexedAbstractHeap *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  JSC::FTL::IndexedAbstractHeap *v449;
  uint64_t v450;
  JSC::B3::Value *v451;
  uint64_t v452;
  JSC::B3::Value *v453;
  uint64_t v454;
  JSC::B3::Value *v455;
  uint64_t v456;
  uint64_t v457;
  char **v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  JSC::B3::Value *v462;
  uint64_t v463;
  uint64_t v464;
  char **v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  uint64_t v469;
  JSC::B3::Value *v470;
  uint64_t v471;
  uint64_t v472;
  char **v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  JSC::B3::Value *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  JSC::B3::Value *v482;
  uint64_t v483;
  char **v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  char *v489;
  char *v490;
  char *v491;
  char *v492;
  char *v493;
  char *v494;
  char *v495;
  char *v496;
  char *v497;
  char *v498;
  JSC::B3::Value *v499;
  char *v500;
  char *v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  uint64_t v510;
  unint64_t v511;
  void *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  char *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  JSC::B3::Value *v525;
  int v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  JSC::B3::BasicBlock *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t *v539;
  uint64_t v540;
  JSC::B3::Value *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t *v550;
  JSC::B3::Value *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  JSC::B3::Value *Object;
  uint64_t v559;
  JSC::B3::Value *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  char **v566;
  uint64_t v567;
  _QWORD *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  JSC::B3::Value *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  char **v585;
  uint64_t v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  JSC::B3::Value *v592;
  uint64_t v593;
  uint64_t v594;
  char **v595;
  uint64_t v596;
  _QWORD *v597;
  uint64_t v598;
  uint64_t v599;
  char *v600;
  char *v601;
  char *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  JSC::B3::Value *v626;
  uint64_t v627;
  JSC::B3::Value *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  char **v633;
  uint64_t v634;
  _QWORD *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  char *v644;
  uint64_t v645;
  unsigned int v646;
  BOOL v647;
  uint64_t v648;
  uint64_t v649;
  unsigned int v650;
  BOOL v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  BOOL v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  BOOL v660;
  uint64_t v661;
  uint64_t v662;
  unsigned int v663;
  uint64_t v664;
  uint64_t v665;
  unsigned int v666;
  BOOL v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t UninitializedContiguousJSArrayInternal;
  uint64_t v677;
  JSC::B3::Value *v678;
  char *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  JSC::B3::Value *v684;
  JSC::B3::Value *v685;
  JSC::B3::Value *v686;
  unint64_t v687;
  unint64_t v688;
  JSC::B3::Value *v689;
  JSC::B3::Value *v690;
  JSC::B3::Value *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  JSC::B3::Value *v695;
  uint64_t *v696;
  uint64_t *v697;
  JSC::FTL::IndexedAbstractHeap *v698;
  uint64_t v699;
  _QWORD v700[2];
  __int16 v701;
  _QWORD v702[2];
  __int16 v703;
  JSC::B3::Value *v704;
  uint64_t v705;
  __n128 v706;
  JSC::B3::Value *v707;
  uint64_t v708;
  uint64_t v709[2];

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v645 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v646 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v646 != 0x3FFFFFFF) ? (v647 = v646 == -1) : (v647 = 1), v647))
  {
    v648 = 2;
  }
  else if (v646 >> 28)
  {
    v670 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v670 = v645;
    *(_DWORD *)(v670 + 8) = v646;
    v648 = 1;
    v645 = v670;
  }
  else
  {
    v648 = v645;
    v645 = 0;
  }
  v10 = v645 | v648;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v645 | v648) & 1) == 0)
    goto LABEL_3;
  v649 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v650 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v650 != 0x3FFFFFFF) ? (v651 = v650 == -1) : (v651 = 1), v651))
  {
    v652 = 2;
  }
  else if (v650 >> 28)
  {
    v671 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v671 = v649;
    *(_DWORD *)(v671 + 8) = v650;
    v652 = 1;
    v649 = v671;
  }
  else
  {
    v652 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v649 = 0;
  }
  v653 = v649 | v652;
  v12 = (_QWORD *)(v653 & 0xFFFFFFFF8);
  if ((v653 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
LABEL_5:
  if (v15)
    v11 = v15[1];
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  isWatchingHavingABadTimeWatchpoint = JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), a3, a4, a5, a6, a7, a8);
  v25 = (_QWORD *)*((_QWORD *)this + 3528);
  if (!isWatchingHavingABadTimeWatchpoint)
  {
    v41 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*(_QWORD *)this + 16), 8 * v25[4], v18, v19, v20, v21, v22, v23);
    v49 = v41 + 8;
    v50 = *((_QWORD *)this + 3528);
    if (*(_DWORD *)(v50 + 32))
    {
      v51 = 0;
      v52 = *(uint64_t **)(v50 + 72);
      v53 = v41 + 8;
      do
      {
        v54 = v51 + *(_QWORD *)(v50 + 24);
        if (*(_DWORD *)(*(_QWORD *)this + 164) <= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x197D3FB74);
        }
        v55 = (unint64_t *)(2 * *v52);
        if (*v52 < 0)
          v56 = 63;
        else
          v56 = *v55;
        v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v54);
        if (v56 <= v51)
          goto LABEL_37;
        v58 = (uint64_t *)(v55 + 1);
        if (*v52 < 0)
          v58 = v52;
        if (((*(unint64_t *)((char *)v58 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v51) & 1) != 0)
        else
LABEL_37:
        v66 = v59;
        v67 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53, v60, v61, v62, v63, v64, v65);
        JSC::FTL::Output::store((uint64_t)this + 27640, v66, v67, v68);
        ++v51;
        v50 = *((_QWORD *)this + 3528);
        v53 += 8;
      }
      while (v51 < *(unsigned int *)(v50 + 32));
    }
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v42, v43, v44, v45, v46, v47);
    v69 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    v70 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v49);
    v71 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 32));
    v79 = *((_DWORD *)this + 7066);
    if ((v79 & 0x80000000) == 0)
    {
      v80 = *((_QWORD *)this + 3481);
      v707 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v707 = 0x200000002;
      v708 = 0x200000002;
      v88 = (_QWORD *)(v80 + 32);
      v89 = *(unsigned int *)(v80 + 44);
      if ((_DWORD)v89 == *(_DWORD *)(v80 + 40))
      {
        v90 = (JSC::B3::Value **)WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v707);
        v91 = *(_QWORD *)(v80 + 32) + 16 * *(unsigned int *)(v80 + 44);
      }
      else
      {
        v91 = *v88 + 16 * v89;
        v90 = &v707;
      }
      *(_QWORD *)v91 = 0;
      *(_QWORD *)(v91 + 8) = 0;
      v92 = *v90;
      *v90 = 0;
      *(_QWORD *)v91 = v92;
      LODWORD(v92) = *((_DWORD *)v90 + 2);
      *((_DWORD *)v90 + 2) = 0;
      *(_DWORD *)(v91 + 8) = (_DWORD)v92;
      LODWORD(v92) = *((_DWORD *)v90 + 3);
      *((_DWORD *)v90 + 3) = 0;
      *(_DWORD *)(v91 + 12) = (_DWORD)v92;
      ++*(_DWORD *)(v80 + 44);
      v79 = v89 | 0x80000000;
      *((_DWORD *)this + 7066) = v89 | 0x80000000;
      v93 = (unint64_t)v707;
      if (v707)
      {
        v707 = 0;
        LODWORD(v708) = 0;
        WTF::fastFree(v93, v81, v82, v83, v84, v85, v86, v87);
        v79 = *((_DWORD *)this + 7066);
      }
    }
    v94 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationNewArrayWithSpreadSlow);
    v95 = *((_QWORD *)this + 3472);
    v97 = (JSC::B3::Value *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), v79, *((_QWORD *)this + 3471), v94, v69, v70, v71);
    v707 = v97;
    v98 = (char **)(v95 + 8);
    v99 = *(unsigned int *)(v95 + 20);
    if ((_DWORD)v99 == *(_DWORD *)(v95 + 16))
    {
      v519 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v98, v99 + 1, (unint64_t)&v707);
      v99 = *(unsigned int *)(v95 + 20);
      *(_QWORD *)(*(_QWORD *)(v95 + 8) + 8 * v99) = *(_QWORD *)v519;
      v100 = v707;
    }
    else
    {
      *(_QWORD *)&(*v98)[8 * v99] = v97;
      v100 = v97;
    }
    *(_DWORD *)(v95 + 20) = v99 + 1;
    *((_QWORD *)v100 + 4) = v95;
    v709[0] = *((_QWORD *)this + 3528);
    v102 = (uint64_t *)((char *)this + 27936);
    v103 = *((_QWORD *)this + 3521);
    v706.n128_u64[0] = v101;
    goto LABEL_47;
  }
  v26 = (uint64_t *)v25[9];
  v705 = 0;
  v27 = v25[4];
  v697 = v26;
  if ((_DWORD)v27)
  {
    if ((_DWORD)v27 == 1)
    {
      v28 = *v26;
      v29 = (_QWORD *)(2 * *v26);
      if (*v26 < 0 || *v29)
      {
        v30 = v29 + 1;
        if (v28 < 0)
          v30 = v26;
        if ((*(_BYTE *)v30 & 1) != 0)
        {
          v31 = *(_QWORD *)this;
          if (*(_DWORD *)(*(_QWORD *)this + 164) <= v25[3])
          {
            __break(0xC471u);
            JUMPOUT(0x197D3FB94);
          }
          v32 = *(_QWORD *)(*(_QWORD *)(v31 + 152) + 8 * v25[3]);
          v33 = v32 & 0xFF00FFFFFFFFFFFFLL;
          if (*(_WORD *)((v32 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 350)
          {
            v704 = v525;
            v526 = *(_DWORD *)(v16 + 928);
            if (v526)
              v527 = 16 * (v526 & 0xFFFFFFFE);
            else
              v527 = 0;
            v528 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v527, (int *)&v707, v520, v521, v522, v523, v524);
            v529 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v530 = (JSC::B3::BasicBlock *)v529;
            v531 = *((_QWORD *)this + 3473);
            if (v531)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v531, v529);
            }
            else
            {
              v706.n128_u64[0] = v529;
              v532 = WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v532 = 0u;
              *(_OWORD *)(v532 + 16) = 0u;
              *(_QWORD *)(v532 + 24) = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v532;
              v709[0] = v532;
              *(_QWORD *)(v532 + 16) = v530;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v706, v709, v533, v534, v535, v536, v537, (uint64_t)&v707);
              v538 = v709[0];
              v539 = (uint64_t *)*((_QWORD *)this + 3479);
              *(_QWORD *)v709[0] = (char *)this + 27824;
              *(_QWORD *)(v538 + 8) = v539;
              *v539 = v538;
              *((_QWORD *)this + 3479) = v538;
            }
            v540 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v541 = (JSC::B3::Value *)v540;
            v542 = *((_QWORD *)this + 3473);
            if (v542)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v542, v540);
            }
            else
            {
              v706.n128_u64[0] = v540;
              v543 = WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v543 = 0u;
              *(_OWORD *)(v543 + 16) = 0u;
              *(_QWORD *)(v543 + 24) = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v543;
              v709[0] = v543;
              *(_QWORD *)(v543 + 16) = v541;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v706, v709, v544, v545, v546, v547, v548, (uint64_t)&v707);
              v549 = v709[0];
              v550 = (uint64_t *)*((_QWORD *)this + 3479);
              *(_QWORD *)v709[0] = (char *)this + 27824;
              *(_QWORD *)(v549 + 8) = v550;
              *v550 = v549;
              *((_QWORD *)this + 3479) = v549;
            }
            v551 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 16);
            v552 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v525, v551);
            v553 = *(_QWORD *)(*(_QWORD *)this + 16);
            if (*(_DWORD *)(v553 + 37620) <= 0xFu)
            {
              __break(0xC471u);
              JUMPOUT(0x197D3FA5CLL);
            }
            v554 = v552;
            v555 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v553 + 37560);
            v556 = v528;
            v557 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v528);
            v559 = *((_QWORD *)this + 3472);
            v560 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v561 = *((_QWORD *)this + 3471);
            v562 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v562 + 8) = -1;
            *(_WORD *)(v562 + 12) = 152;
            *(_BYTE *)(v562 + 20) = 1;
            *(_QWORD *)v562 = &unk_1E357EDA0;
            *(_DWORD *)(v562 + 16) = 0;
            *(_QWORD *)(v562 + 40) = 0;
            *(_QWORD *)(v562 + 48) = Object;
            *(_QWORD *)(v562 + 24) = v561;
            *(_QWORD *)(v562 + 32) = 0;
            JSC::B3::Procedure::addValueImpl(v560, (JSC::B3::Value *)v562);
            v707 = (JSC::B3::Value *)v562;
            v566 = (char **)(v559 + 8);
            v567 = *(unsigned int *)(v559 + 20);
            if ((_DWORD)v567 == *(_DWORD *)(v559 + 16))
            {
              v602 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v566, v567 + 1, (unint64_t)&v707);
              v567 = *(unsigned int *)(v559 + 20);
              *(_QWORD *)(*(_QWORD *)(v559 + 8) + 8 * v567) = *(_QWORD *)v602;
              v568 = v707;
            }
            else
            {
              *(_QWORD *)&(*v566)[8 * v567] = v562;
              v568 = (_QWORD *)v562;
            }
            *(_DWORD *)(v559 + 20) = v567 + 1;
            v568[4] = v559;
            v569 = *((_QWORD *)this + 3472);
            v570 = *((_QWORD *)this + 3470);
            v571 = *((_QWORD *)this + 3471);
            v707 = v541;
            LOBYTE(v708) = 0;
            JSC::B3::BasicBlock::appendNewControlValue(v569, v570, 154, v571, (uint64_t *)&v707, v563, v564, v565);
            *((_QWORD *)this + 3472) = v530;
            *((_QWORD *)this + 3473) = v541;
            v707 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v556);
            goto LABEL_334;
          }
          if (*(_WORD *)((*(_QWORD *)((v32 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 352)
          {
            v34 = **(_QWORD **)((*(_QWORD *)((v32 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
            if ((*(_BYTE *)(v34 + 4) & 0xE) == 8)
            {
              v35 = *(_DWORD *)(v16 + 888);
              if (v35)
                v36 = 16 * (v35 & 0xFFFFFFFE);
              else
                v36 = 0;
              v37 = JSC::DFG::Graph::registerStructure(v31, v36, (int *)&v707, v19, v20, v21, v22, v23);
              v38 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
              v39 = (JSC::B3::BasicBlock *)v38;
              v40 = *((_QWORD *)this + 3473);
              if (v40)
              {
                WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v40, v38);
              }
              else
              {
                v706.n128_u64[0] = v38;
                v603 = WTF::fastMalloc((WTF *)0x20);
                *(_OWORD *)v603 = 0u;
                *(_OWORD *)(v603 + 16) = 0u;
                *(_QWORD *)(v603 + 24) = *((_QWORD *)this + 3477);
                *((_QWORD *)this + 3477) = v603;
                v709[0] = v603;
                *(_QWORD *)(v603 + 16) = v39;
                WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v706, v709, v604, v605, v606, v607, v608, (uint64_t)&v707);
                v609 = v709[0];
                v610 = (uint64_t *)*((_QWORD *)this + 3479);
                *(_QWORD *)v709[0] = (char *)this + 27824;
                *(_QWORD *)(v609 + 8) = v610;
                *v610 = v609;
                *((_QWORD *)this + 3479) = v609;
              }
              v611 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
              v541 = (JSC::B3::Value *)v611;
              v612 = *((_QWORD *)this + 3473);
              if (v612)
              {
                WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v612, v611);
              }
              else
              {
                v706.n128_u64[0] = v611;
                v613 = WTF::fastMalloc((WTF *)0x20);
                *(_OWORD *)v613 = 0u;
                *(_OWORD *)(v613 + 16) = 0u;
                *(_QWORD *)(v613 + 24) = *((_QWORD *)this + 3477);
                *((_QWORD *)this + 3477) = v613;
                v709[0] = v613;
                *(_QWORD *)(v613 + 16) = v541;
                WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v706, v709, v614, v615, v616, v617, v618, (uint64_t)&v707);
                v619 = v709[0];
                v620 = (uint64_t *)*((_QWORD *)this + 3479);
                *(_QWORD *)v709[0] = (char *)this + 27824;
                *(_QWORD *)(v619 + 8) = v620;
                *v620 = v619;
                *((_QWORD *)this + 3479) = v619;
              }
              v621 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v34 + 16);
              v622 = *(_QWORD *)(*(_QWORD *)this + 16);
              if (*(_DWORD *)(v622 + 37620) <= 0xFu)
              {
                __break(0xC471u);
                JUMPOUT(0x197D3FA9CLL);
              }
              v623 = v621;
              v624 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v622 + 37560);
              v699 = v37;
              v625 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37);
              v627 = *((_QWORD *)this + 3472);
              v628 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
              v629 = *((_QWORD *)this + 3471);
              v562 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)(v562 + 8) = -1;
              *(_WORD *)(v562 + 12) = 152;
              *(_BYTE *)(v562 + 20) = 1;
              *(_QWORD *)v562 = &unk_1E357EDA0;
              *(_DWORD *)(v562 + 16) = 0;
              *(_QWORD *)(v562 + 40) = 0;
              *(_QWORD *)(v562 + 48) = v626;
              *(_QWORD *)(v562 + 24) = v629;
              *(_QWORD *)(v562 + 32) = 0;
              JSC::B3::Procedure::addValueImpl(v628, (JSC::B3::Value *)v562);
              v707 = (JSC::B3::Value *)v562;
              v633 = (char **)(v627 + 8);
              v634 = *(unsigned int *)(v627 + 20);
              if ((_DWORD)v634 == *(_DWORD *)(v627 + 16))
              {
                v644 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v633, v634 + 1, (unint64_t)&v707);
                v634 = *(unsigned int *)(v627 + 20);
                *(_QWORD *)(*(_QWORD *)(v627 + 8) + 8 * v634) = *(_QWORD *)v644;
                v635 = v707;
              }
              else
              {
                *(_QWORD *)&(*v633)[8 * v634] = v562;
                v635 = (_QWORD *)v562;
              }
              *(_DWORD *)(v627 + 20) = v634 + 1;
              v635[4] = v627;
              v636 = *((_QWORD *)this + 3472);
              v637 = *((_QWORD *)this + 3470);
              v638 = *((_QWORD *)this + 3471);
              v707 = v541;
              LOBYTE(v708) = 0;
              JSC::B3::BasicBlock::appendNewControlValue(v636, v637, 154, v638, (uint64_t *)&v707, v630, v631, v632);
              *((_QWORD *)this + 3472) = v39;
              *((_QWORD *)this + 3473) = v541;
              v707 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v699);
              v639 = **(_QWORD **)((*(_QWORD *)(v33 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
              if ((v639 & 0xFFFE000000000002) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x197D3FABCLL);
              }
              v706.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v639);
LABEL_334:
              v577 = v576;
              v578 = *((_QWORD *)this + 3472);
              v579 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
              v580 = *((_QWORD *)this + 3471);
              v581 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)(v581 + 8) = -1;
              *(_WORD *)(v581 + 12) = 152;
              *(_DWORD *)(v581 + 16) = 0;
              *(_BYTE *)(v581 + 20) = 1;
              *(_QWORD *)v581 = &unk_1E357EDA0;
              *(_QWORD *)(v581 + 40) = 0;
              *(_QWORD *)(v581 + 48) = v577;
              *(_QWORD *)(v581 + 24) = v580;
              *(_QWORD *)(v581 + 32) = 0;
              JSC::B3::Procedure::addValueImpl(v579, (JSC::B3::Value *)v581);
              v707 = (JSC::B3::Value *)v581;
              v585 = (char **)(v578 + 8);
              v586 = *(unsigned int *)(v578 + 20);
              if ((_DWORD)v586 == *(_DWORD *)(v578 + 16))
              {
                v600 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v585, v586 + 1, (unint64_t)&v707);
                v586 = *(unsigned int *)(v578 + 20);
                *(_QWORD *)(*(_QWORD *)(v578 + 8) + 8 * v586) = *(_QWORD *)v600;
                v587 = v707;
              }
              else
              {
                *(_QWORD *)&(*v585)[8 * v586] = v581;
                v587 = (_QWORD *)v581;
              }
              *(_DWORD *)(v578 + 20) = v586 + 1;
              v587[4] = v578;
              v588 = *((_QWORD *)this + 3472);
              v589 = *((_QWORD *)this + 3470);
              v590 = *((_QWORD *)this + 3471);
              v707 = v541;
              LOBYTE(v708) = 0;
              JSC::B3::BasicBlock::appendNewControlValue(v588, v589, 154, v590, (uint64_t *)&v707, v582, v583, v584);
              *((_QWORD *)this + 3472) = v541;
              v591 = *((_QWORD *)this + 3472);
              v592 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
              v593 = *((_QWORD *)this + 3471);
              v594 = WTF::fastMalloc((WTF *)0x30);
              *(_QWORD *)v594 = off_1E357F5F0;
              *(_DWORD *)(v594 + 8) = -1;
              *(_WORD *)(v594 + 12) = 153;
              *(_DWORD *)(v594 + 16) = 2;
              *(_BYTE *)(v594 + 20) = 0;
              *(_QWORD *)(v594 + 24) = v593;
              *(_QWORD *)(v594 + 32) = 0;
              JSC::B3::Procedure::addValueImpl(v592, (JSC::B3::Value *)v594);
              v707 = (JSC::B3::Value *)v594;
              v595 = (char **)(v591 + 8);
              v596 = *(unsigned int *)(v591 + 20);
              if ((_DWORD)v596 == *(_DWORD *)(v591 + 16))
              {
                v601 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v595, v596 + 1, (unint64_t)&v707);
                v596 = *(unsigned int *)(v591 + 20);
                *(_QWORD *)(*(_QWORD *)(v591 + 8) + 8 * v596) = *(_QWORD *)v601;
                v597 = v707;
              }
              else
              {
                *(_QWORD *)&(*v595)[8 * v596] = v594;
                v597 = (_QWORD *)v594;
              }
              *(_DWORD *)(v591 + 20) = v596 + 1;
              v597[4] = v591;
              if ((*(_WORD *)(v581 + 12) & 0xFFF) == 0x98)
                v598 = v581;
              else
                v598 = 0;
              *(_QWORD *)(v598 + 40) = v594;
              if ((*(_WORD *)(v562 + 12) & 0xFFF) == 0x98)
                v599 = v562;
              else
                v599 = 0;
              *(_QWORD *)(v599 + 40) = v594;
              v709[0] = *((_QWORD *)this + 3528);
              v102 = (uint64_t *)((char *)this + 27936);
              v103 = *((_QWORD *)this + 3521);
              v706.n128_u64[0] = v594;
LABEL_47:
              v706.n128_u64[1] = v103;
              WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v707, v102, v709, &v706);
              return;
            }
          }
        }
      }
    }
    else
    {
      v28 = *v26;
      v29 = (_QWORD *)(2 * *v26);
    }
    v104 = 0;
    v105 = 0;
    v106 = v29 + 1;
    if (v28 < 0)
      v106 = v26;
    LODWORD(v27) = 0;
    do
    {
      if (v28 < 0)
        v107 = 63;
      else
        v107 = *v29;
      if (v107 > v104
        && ((*(unint64_t *)((char *)v106 + ((v104 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v104) & 1) != 0)
      {
        v108 = v104 + v25[3];
        if (*(_DWORD *)(*(_QWORD *)this + 164) <= v108)
        {
          __break(0xC471u);
          JUMPOUT(0x197D3FB7CLL);
        }
        if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v108) & 0xFF00FFFFFFFFFFFFLL)
                      + 0x12) == 350
          && *(_WORD *)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v108) & 0xFF00FFFFFFFFFFFFLL)
                                   + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                      + 0x12) == 352)
        {
          v109 = *(unsigned int *)(**(_QWORD **)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152)
                                                                         + 8 * v108) & 0xFF00FFFFFFFFFFFFLL)
                                                            + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                               + 0x48)
                                 + 8)
               + (uint64_t)(int)v27;
          if ((int)v109 == v109)
            LODWORD(v27) = *(_DWORD *)(**(_QWORD **)((*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152)
                                                                             + 8 * v108) & 0xFF00FFFFFFFFFFFFLL)
                                                                + 0x18) & 0xFF00FFFFFFFFFFFFLL)
                                                   + 0x48)
                                     + 8)
                         + v27;
          else
            v105 = 1;
        }
      }
      else
      {
        if ((_DWORD)v27 == 0x7FFFFFFF)
          v105 = 1;
        LODWORD(v27) = v27 + 1;
      }
      ++v104;
    }
    while (v25[4] != v104);
    if (v105)
    {
      *((_BYTE *)this + 28112) = 0;
      return;
    }
  }
  v115 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v27);
  v117 = *((_QWORD *)this + 3528);
  if (*(_DWORD *)(v117 + 32))
  {
    v118 = 0;
    while (1)
    {
      v119 = (_QWORD *)(2 * *v26);
      v120 = *v26 < 0 ? 63 : *v119;
      if (v120 > v118)
      {
        v121 = v119 + 1;
        v122 = *v26 >= 0 ? v121 : v26;
        if (((*(unint64_t *)((char *)v122 + ((v118 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v118) & 1) != 0)
        {
          v123 = *(_DWORD *)(v117 + 24) + v118;
          if (*(_DWORD *)(*(_QWORD *)this + 164) <= v123)
          {
            __break(0xC471u);
            JUMPOUT(0x197D3FB8CLL);
          }
          v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v123);
          if (*(_WORD *)((v124 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 350)
          {
            v141 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 16);
            v142 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v140, v141);
            v143 = *((_QWORD *)this + 41);
            if (v143)
            {
              v144 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v143);
              v142 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v142, v144);
            }
            v145 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304), (uint64_t)v142, 1);
            goto LABEL_105;
          }
          v125 = *(_QWORD *)((v124 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
          if (*(_WORD *)(v125 + 0x12) == 349)
            break;
        }
      }
LABEL_112:
      ++v118;
      v117 = *((_QWORD *)this + 3528);
      if (v118 >= *(unsigned int *)(v117 + 32))
        goto LABEL_144;
    }
    v126 = *(_QWORD *)v125 & 0xFFFFFFFF8;
    if ((*(_QWORD *)v125 & 1) != 0)
      v126 = *(_QWORD *)v126;
    v127 = *(unsigned int *)((*(_QWORD *)((v124 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v128 = v705;
    if (v705
      || (WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(&v705, 0), (v128 = v705) != 0))
    {
      v129 = *(_DWORD *)(v128 - 8);
    }
    else
    {
      v129 = 0;
    }
    v130 = (~(v126 << 32) + v126) ^ ((unint64_t)(~(v126 << 32) + v126) >> 22);
    v131 = 9 * ((v130 + ~(v130 << 13)) ^ ((v130 + ~(v130 << 13)) >> 8));
    v132 = (v131 ^ (v131 >> 15)) + ~((v131 ^ (v131 >> 15)) << 27);
    v133 = v129 & ((v132 >> 31) ^ v132);
    v134 = (__n128 *)(v128 + 16 * v133);
    v135 = (JSC::InlineCallFrame *)v134->n128_u64[0];
    if (v134->n128_u64[0] != 1)
    {
      v136 = 0;
      v137 = 1;
      while (v135 != (JSC::InlineCallFrame *)v126)
      {
        if (v135 == (JSC::InlineCallFrame *)-1)
          v136 = v134;
        v133 = (v133 + v137) & v129;
        v134 = (__n128 *)(v128 + 16 * v133);
        v135 = (JSC::InlineCallFrame *)v134->n128_u64[0];
        ++v137;
        if (v134->n128_u64[0] == 1)
        {
          if (v136)
          {
            v136->n128_u64[0] = 1;
            v136->n128_u64[1] = 0;
            --*(_DWORD *)(v705 - 16);
            v134 = v136;
          }
          goto LABEL_95;
        }
      }
      goto LABEL_104;
    }
LABEL_95:
    v134->n128_u64[0] = v126;
    v138 = v705;
    if (v705)
      v139 = *(_DWORD *)(v705 - 12) + 1;
    else
      v139 = 1;
    *(_DWORD *)(v705 - 12) = v139;
    v146 = (*(_DWORD *)(v138 - 16) + v139);
    v147 = *(unsigned int *)(v138 - 4);
    if (v147 > 0x400)
    {
      if (v147 > 2 * v146)
        goto LABEL_104;
    }
    else if (3 * v147 > 4 * v146)
    {
LABEL_104:
      v145 = (JSC::B3::Value *)v134->n128_u64[1];
      v26 = v697;
LABEL_105:
      v148 = JSC::FTL::Output::speculateAdd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v115, v145);
      if (v148)
      {
        v149 = v148;
        v150 = *((_QWORD *)this + 3524);
        if ((v150 & 1) != 0)
        {
          v155 = *(_QWORD *)(v150 & 0xFFFFFFFF8);
          if ((v150 & 2) != 0
            || ((v156 = *(unsigned int *)((v150 & 0xFFFFFFFF8) + 8), (_DWORD)v156 != 0x3FFFFFFF)
              ? (v157 = (_DWORD)v156 == -1)
              : (v157 = 1),
                v157))
          {
            v158 = 2;
          }
          else if (v156 >> 28)
          {
            v163 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v163 = v155;
            *(_DWORD *)(v163 + 8) = v156;
            v158 = 1;
            v155 = v163;
          }
          else
          {
            v158 = v155;
            v155 = v156 << 36;
          }
          v150 = v155 | v158;
        }
        v702[0] = v150;
        v151 = *((_QWORD *)this + 3525);
        if ((v151 & 1) != 0)
        {
          v159 = *(_QWORD *)(v151 & 0xFFFFFFFF8);
          if ((v151 & 2) != 0
            || ((v160 = *(unsigned int *)((v151 & 0xFFFFFFFF8) + 8), (_DWORD)v160 != 0x3FFFFFFF)
              ? (v161 = (_DWORD)v160 == -1)
              : (v161 = 1),
                v161))
          {
            v162 = 2;
          }
          else if (v160 >> 28)
          {
            v164 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v164 = v159;
            *(_DWORD *)(v164 + 8) = v160;
            v162 = 1;
            v159 = v164;
          }
          else
          {
            v162 = v159;
            v159 = v160 << 36;
          }
          v151 = v159 | v162;
          v152 = (v159 | v162) & 1;
        }
        else
        {
          v152 = 0;
        }
        v702[1] = v151;
        v703 = *((_WORD *)this + 14104);
        if (v152 && (v151 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v151 & 0xFFFFFFFF8, v153, v154, v110, v111, v112, v113, v114);
        if ((v150 & 1) != 0)
        {
          v26 = v697;
          if ((v150 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v150 & 0xFFFFFFFF8, v153, v154, v110, v111, v112, v113, v114);
          v115 = (JSC::B3::Value *)v149;
        }
        else
        {
          v115 = (JSC::B3::Value *)v149;
          v26 = v697;
        }
      }
      goto LABEL_112;
    }
    v134 = (__n128 *)WTF::HashTable<JSC::InlineCallFrame *,WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::InlineCallFrame *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::HashMap<JSC::InlineCallFrame *,JSC::B3::Value *,WTF::DefaultHash<JSC::InlineCallFrame *>,WTF::NullableHashTraits<JSC::InlineCallFrame *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::NullableHashTraits<JSC::InlineCallFrame *>>::expand(&v705, v134);
    goto LABEL_104;
  }
LABEL_144:
  v165 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x8000000);
  v166 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v115, v165);
  v171 = JSC::FTL::Output::speculate((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v166);
  v173 = *((_QWORD *)this + 3524);
  if ((v173 & 1) != 0)
  {
    v654 = *(_QWORD *)(v173 & 0xFFFFFFFF8);
    if ((v173 & 2) != 0
      || ((v655 = *(unsigned int *)((v173 & 0xFFFFFFFF8) + 8), (_DWORD)v655 != 0x3FFFFFFF)
        ? (v656 = (_DWORD)v655 == -1)
        : (v656 = 1),
          v656))
    {
      v657 = 2;
    }
    else if (v655 >> 28)
    {
      v672 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v672 = v654;
      *(_DWORD *)(v672 + 8) = v655;
      v657 = 1;
      v654 = v672;
    }
    else
    {
      v657 = v654;
      v654 = v655 << 36;
    }
    v173 = v654 | v657;
  }
  v700[0] = v173;
  v174 = *((_QWORD *)this + 3525);
  if ((v174 & 1) != 0)
  {
    v658 = *(_QWORD *)(v174 & 0xFFFFFFFF8);
    if ((v174 & 2) != 0
      || ((v659 = *(unsigned int *)((v174 & 0xFFFFFFFF8) + 8), (_DWORD)v659 != 0x3FFFFFFF)
        ? (v660 = (_DWORD)v659 == -1)
        : (v660 = 1),
          v660))
    {
      v661 = 2;
    }
    else if (v659 >> 28)
    {
      v673 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v673 = v658;
      *(_DWORD *)(v673 + 8) = v659;
      v661 = 1;
      v658 = v673;
    }
    else
    {
      v661 = v658;
      v658 = v659 << 36;
    }
    v174 = v658 | v661;
    v175 = (v658 | v661) & 1;
  }
  else
  {
    v175 = 0;
  }
  v700[1] = v174;
  v701 = *((_WORD *)this + 14104);
  if (v175 && (v174 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v174 & 0xFFFFFFFF8, v176, v177, v178, v179, v180, v181, v182);
  if ((v173 & 1) != 0 && (v173 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v173 & 0xFFFFFFFF8, v176, v177, v178, v179, v180, v181, v182);
  v183 = *(_QWORD *)this;
  v184 = *((_QWORD *)this + 3524);
  if ((v184 & 1) == 0)
  {
    v185 = *(_QWORD *)(v183 + 32);
LABEL_151:
    v186 = (_QWORD *)(v184 & 0xFFFFFFFF8);
    v187 = 1;
    v188 = 1;
    goto LABEL_152;
  }
  v662 = *(_QWORD *)(v184 & 0xFFFFFFFF8);
  if ((v184 & 2) != 0 || (v663 = *(_DWORD *)((v184 & 0xFFFFFFFF8) + 8), v663 == 0x3FFFFFFF) || v663 == -1)
  {
    v664 = 2;
  }
  else if (v663 >> 28)
  {
    v674 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v674 = v662;
    *(_DWORD *)(v674 + 8) = v663;
    v664 = 1;
    v662 = v674;
  }
  else
  {
    v664 = v662;
    v662 = 0;
  }
  v184 = v662 | v664;
  v185 = *(_QWORD *)(v183 + 32);
  if ((v184 & 1) == 0)
    goto LABEL_151;
  v665 = *(_QWORD *)(v184 & 0xFFFFFFFF8);
  if ((v184 & 2) != 0
    || ((v666 = *(_DWORD *)((v184 & 0xFFFFFFFF8) + 8), v666 != 0x3FFFFFFF) ? (v667 = v666 == -1) : (v667 = 1), v667))
  {
    v668 = 2;
  }
  else if (v666 >> 28)
  {
    v675 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v675 = v665;
    *(_DWORD *)(v675 + 8) = v666;
    v668 = 1;
    v665 = v675;
  }
  else
  {
    v668 = *(_QWORD *)(v184 & 0xFFFFFFFF8);
    v665 = 0;
  }
  v669 = v665 | v668;
  v186 = (_QWORD *)(v669 & 0xFFFFFFFF8);
  if ((v669 & 1) != 0)
  {
    v187 = 0;
    v188 = 0;
    v189 = (_QWORD *)*v186;
    if (!*v186)
      goto LABEL_154;
    goto LABEL_153;
  }
  v188 = 0;
  v187 = 1;
LABEL_152:
  v189 = v186;
  if (v186)
LABEL_153:
    v185 = v189[1];
LABEL_154:
  v190 = *(_QWORD *)(v185 + 8);
  if ((v187 & 1) == 0 && v186)
    WTF::fastFree((unint64_t)v186, v176, v177, v178, v179, v180, v181, v182);
  v191 = *(_DWORD *)(v190 + 868);
  if (v191)
    v192 = 16 * (v191 & 0xFFFFFFFE);
  else
    v192 = 0;
  v200 = JSC::DFG::Graph::registerStructure(v183, v192, (int *)&v707, v178, v179, v180, v181, v182);
  if ((v188 & 1) == 0 && (v184 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v184 & 0xFFFFFFFF8, v193, v194, v195, v196, v197, v198, v199);
  v202 = v201;
  v203 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v204 = *((_QWORD *)this + 3528);
  v205 = v697;
  if (*(_DWORD *)(v204 + 32))
  {
    v206 = v203;
    v207 = 0;
    v698 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 18568);
    v696 = (uint64_t *)((char *)this + 27808);
    v679 = (char *)this + 27824;
    v678 = v202;
    do
    {
      v208 = *(_DWORD *)(v204 + 24) + v207;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v208)
      {
        __break(0xC471u);
        JUMPOUT(0x197D3FB84);
      }
      v209 = (unint64_t *)(2 * *v205);
      if (*v205 < 0)
        v210 = 63;
      else
        v210 = *v209;
      v211 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v208);
      if (v210 > v207
        && (*v205 >= 0 ? (v212 = (uint64_t *)(v209 + 1)) : (v212 = v205),
            ((*(unint64_t *)((char *)v212 + ((v207 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v207) & 1) != 0))
      {
        if (*(_WORD *)((v211 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 350)
        {
          v230 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
          v231 = v230;
          v232 = *((_QWORD *)this + 3473);
          v692 = v230;
          if (v232)
          {
            WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(v696, v232, v230);
          }
          else
          {
            v706.n128_u64[0] = v230;
            v242 = WTF::fastMalloc((WTF *)0x20);
            *(_OWORD *)v242 = 0u;
            *(_OWORD *)(v242 + 16) = 0u;
            *(_QWORD *)(v242 + 24) = *((_QWORD *)this + 3477);
            *((_QWORD *)this + 3477) = v242;
            v709[0] = v242;
            *(_QWORD *)(v242 + 16) = v231;
            WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(v696, (uint64_t *)&v706, v709, v243, v244, v245, v246, v247, (uint64_t)&v707);
            v248 = v709[0];
            v249 = (uint64_t *)*((_QWORD *)this + 3479);
            *(_QWORD *)v709[0] = v679;
            *(_QWORD *)(v248 + 8) = v249;
            *v249 = v248;
            *((_QWORD *)this + 3479) = v248;
          }
          v250 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
          v251 = v250;
          v252 = *((_QWORD *)this + 3473);
          v694 = v250;
          if (v252)
          {
            WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(v696, v252, v250);
          }
          else
          {
            v706.n128_u64[0] = v250;
            v259 = WTF::fastMalloc((WTF *)0x20);
            *(_OWORD *)v259 = 0u;
            *(_OWORD *)(v259 + 16) = 0u;
            *(_QWORD *)(v259 + 24) = *((_QWORD *)this + 3477);
            *((_QWORD *)this + 3477) = v259;
            v709[0] = v259;
            *(_QWORD *)(v259 + 16) = v251;
            WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(v696, (uint64_t *)&v706, v709, v260, v261, v262, v263, v264, (uint64_t)&v707);
            v265 = v709[0];
            v266 = (uint64_t *)*((_QWORD *)this + 3479);
            *(_QWORD *)v709[0] = v679;
            *(_QWORD *)(v265 + 8) = v266;
            *v266 = v265;
            *((_QWORD *)this + 3479) = v265;
          }
          v268 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 16);
          v689 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v267, v268);
          v269 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
          v270 = *((_QWORD *)this + 3472);
          v271 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v272 = *((_QWORD *)this + 3471);
          v273 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v273 + 8) = -1;
          *(_WORD *)(v273 + 12) = 152;
          *(_DWORD *)(v273 + 16) = 0;
          *(_BYTE *)(v273 + 20) = 1;
          *(_QWORD *)v273 = &unk_1E357EDA0;
          *(_QWORD *)(v273 + 40) = 0;
          *(_QWORD *)(v273 + 48) = v269;
          *(_QWORD *)(v273 + 24) = v272;
          *(_QWORD *)(v273 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v271, (JSC::B3::Value *)v273);
          v707 = (JSC::B3::Value *)v273;
          v274 = (char **)(v270 + 8);
          v275 = *(unsigned int *)(v270 + 20);
          if ((_DWORD)v275 == *(_DWORD *)(v270 + 16))
          {
            v489 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v274, v275 + 1, (unint64_t)&v707);
            v275 = *(unsigned int *)(v270 + 20);
            *(_QWORD *)(*(_QWORD *)(v270 + 8) + 8 * v275) = *(_QWORD *)v489;
            v276 = v707;
          }
          else
          {
            *(_QWORD *)&(*v274)[8 * v275] = v273;
            v276 = (_QWORD *)v273;
          }
          *(_DWORD *)(v270 + 20) = v275 + 1;
          v276[4] = v270;
          v277 = *((_QWORD *)this + 3472);
          v278 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v279 = *((_QWORD *)this + 3471);
          v280 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v280 + 8) = -1;
          *(_WORD *)(v280 + 12) = 152;
          *(_DWORD *)(v280 + 16) = 0;
          *(_BYTE *)(v280 + 20) = 1;
          *(_QWORD *)v280 = &unk_1E357EDA0;
          *(_QWORD *)(v280 + 40) = 0;
          *(_QWORD *)(v280 + 48) = v206;
          *(_QWORD *)(v280 + 24) = v279;
          *(_QWORD *)(v280 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v278, (JSC::B3::Value *)v280);
          v707 = (JSC::B3::Value *)v280;
          v281 = (char **)(v277 + 8);
          v282 = *(unsigned int *)(v277 + 20);
          v687 = v207;
          if ((_DWORD)v282 == *(_DWORD *)(v277 + 16))
          {
            v490 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v281, v282 + 1, (unint64_t)&v707);
            v282 = *(unsigned int *)(v277 + 20);
            *(_QWORD *)(*(_QWORD *)(v277 + 8) + 8 * v282) = *(_QWORD *)v490;
            v283 = v707;
          }
          else
          {
            *(_QWORD *)&(*v281)[8 * v282] = v280;
            v283 = (_QWORD *)v280;
          }
          *(_DWORD *)(v277 + 20) = v282 + 1;
          v283[4] = v277;
          v284 = *((_QWORD *)this + 3472);
          v285 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v286 = *((_QWORD *)this + 3471);
          v287 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v287 + 8) = -1;
          *(_WORD *)(v287 + 12) = 152;
          *(_DWORD *)(v287 + 16) = 0;
          *(_BYTE *)(v287 + 20) = 1;
          *(_QWORD *)v287 = &unk_1E357EDA0;
          *(_QWORD *)(v287 + 40) = 0;
          *(_QWORD *)(v287 + 48) = v206;
          *(_QWORD *)(v287 + 24) = v286;
          *(_QWORD *)(v287 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v285, (JSC::B3::Value *)v287);
          v707 = (JSC::B3::Value *)v287;
          v288 = (char **)(v284 + 8);
          v289 = *(unsigned int *)(v284 + 20);
          if ((_DWORD)v289 == *(_DWORD *)(v284 + 16))
          {
            v491 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v288, v289 + 1, (unint64_t)&v707);
            v289 = *(unsigned int *)(v284 + 20);
            *(_QWORD *)(*(_QWORD *)(v284 + 8) + 8 * v289) = *(_QWORD *)v491;
            v290 = v707;
          }
          else
          {
            *(_QWORD *)&(*v288)[8 * v289] = v287;
            v290 = (_QWORD *)v287;
          }
          *(_DWORD *)(v284 + 20) = v289 + 1;
          v290[4] = v284;
          v291 = *((_QWORD *)this + 41);
          v292 = (uint64_t)v689;
          if (v291)
          {
            v293 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v291);
            v292 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v689, v293);
          }
          v294 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304), v292, 1);
          v295 = JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v294, 2);
          v296 = *((_QWORD *)this + 3472);
          v297 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v684 = (JSC::B3::Value *)v295;
          v298 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v295, *((_QWORD *)this + 3459));
          JSC::B3::Procedure::addValueImpl(v297, v298);
          v707 = v298;
          v303 = (char **)(v296 + 8);
          v304 = *(unsigned int *)(v296 + 20);
          if ((_DWORD)v304 == *(_DWORD *)(v296 + 16))
          {
            v492 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v303, v304 + 1, (unint64_t)&v707);
            v304 = *(unsigned int *)(v296 + 20);
            *(_QWORD *)(*(_QWORD *)(v296 + 8) + 8 * v304) = *(_QWORD *)v492;
            v305 = v707;
          }
          else
          {
            *(_QWORD *)&(*v303)[8 * v304] = v298;
            v305 = v298;
          }
          *(_DWORD *)(v296 + 20) = v304 + 1;
          *((_QWORD *)v305 + 4) = v296;
          JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v298, v694, v692, NAN, NAN, v299, v300, v301, v302);
          *((_QWORD *)this + 3472) = v692;
          v682 = *((_QWORD *)this + 3473);
          *((_QWORD *)this + 3473) = v694;
          v306 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v307 = *((_QWORD *)this + 3471);
          v308 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v308 = off_1E357F5F0;
          *(_DWORD *)(v308 + 8) = -1;
          *(_WORD *)(v308 + 12) = 153;
          *(_DWORD *)(v308 + 16) = 2;
          *(_BYTE *)(v308 + 20) = 0;
          *(_QWORD *)(v308 + 24) = v307;
          *(_QWORD *)(v308 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v306, (JSC::B3::Value *)v308);
          v707 = (JSC::B3::Value *)v308;
          v309 = (char **)(v692 + 8);
          v310 = *(unsigned int *)(v692 + 20);
          if ((_DWORD)v310 == *(_DWORD *)(v692 + 16))
          {
            v493 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v309, v310 + 1, (unint64_t)&v707);
            v310 = *(unsigned int *)(v692 + 20);
            *(_QWORD *)(*(_QWORD *)(v692 + 8) + 8 * v310) = *(_QWORD *)v493;
            v311 = v707;
          }
          else
          {
            *(_QWORD *)&(*v309)[8 * v310] = v308;
            v311 = (_QWORD *)v308;
          }
          *(_DWORD *)(v692 + 20) = v310 + 1;
          v311[4] = v692;
          if ((*(_WORD *)(v280 + 12) & 0xFFF) == 0x98)
            v312 = v280;
          else
            v312 = 0;
          *(_QWORD *)(v312 + 40) = v308;
          v313 = *((_QWORD *)this + 3472);
          v314 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v315 = *((_QWORD *)this + 3471);
          v316 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v316 = off_1E357F5F0;
          *(_DWORD *)(v316 + 8) = -1;
          *(_WORD *)(v316 + 12) = 153;
          *(_DWORD *)(v316 + 16) = 2;
          *(_BYTE *)(v316 + 20) = 0;
          *(_QWORD *)(v316 + 24) = v315;
          *(_QWORD *)(v316 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v314, (JSC::B3::Value *)v316);
          v707 = (JSC::B3::Value *)v316;
          v318 = (char **)(v313 + 8);
          v319 = *(unsigned int *)(v313 + 20);
          if ((_DWORD)v319 == *(_DWORD *)(v313 + 16))
          {
            v494 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v318, v319 + 1, (unint64_t)&v707);
            v319 = *(unsigned int *)(v313 + 20);
            *(_QWORD *)(*(_QWORD *)(v313 + 8) + 8 * v319) = *(_QWORD *)v494;
            v320 = v707;
          }
          else
          {
            *(_QWORD *)&(*v318)[8 * v319] = v316;
            v320 = (_QWORD *)v316;
          }
          *(_DWORD *)(v313 + 20) = v319 + 1;
          v320[4] = v313;
          if ((*(_WORD *)(v273 + 12) & 0xFFF) == 0x98)
            v321 = v273;
          else
            v321 = 0;
          *(_QWORD *)(v321 + 40) = v316;
          v322 = JSC::FTL::IndexedAbstractHeap::baseIndex(v698, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v689, (JSC::B3::Value *)v316, 0, 0, 0, v317);
          v324 = JSC::FTL::Output::load((uint64_t)this + 27640, v322, v323, 2);
          v326 = JSC::FTL::IndexedAbstractHeap::baseIndex(v698, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202, (JSC::B3::Value *)v308, 0, 0, 0, v325);
          JSC::FTL::Output::store((uint64_t)this + 27640, v324, v326, v327);
          v328 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
          v329 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v308, v328);
          v330 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
          v690 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v316, v330);
          v331 = *((_QWORD *)this + 3472);
          v332 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v333 = *((_QWORD *)this + 3471);
          v334 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v334 + 8) = -1;
          *(_WORD *)(v334 + 12) = 152;
          *(_DWORD *)(v334 + 16) = 0;
          *(_BYTE *)(v334 + 20) = 1;
          *(_QWORD *)v334 = &unk_1E357EDA0;
          v680 = v329;
          *(_QWORD *)(v334 + 40) = 0;
          *(_QWORD *)(v334 + 48) = v329;
          *(_QWORD *)(v334 + 24) = v333;
          *(_QWORD *)(v334 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v332, (JSC::B3::Value *)v334);
          v707 = (JSC::B3::Value *)v334;
          v335 = (char **)(v331 + 8);
          v336 = *(unsigned int *)(v331 + 20);
          if ((_DWORD)v336 == *(_DWORD *)(v331 + 16))
          {
            v495 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v335, v336 + 1, (unint64_t)&v707);
            v336 = *(unsigned int *)(v331 + 20);
            *(_QWORD *)(*(_QWORD *)(v331 + 8) + 8 * v336) = *(_QWORD *)v495;
            v337 = v707;
          }
          else
          {
            *(_QWORD *)&(*v335)[8 * v336] = v334;
            v337 = (_QWORD *)v334;
          }
          *(_DWORD *)(v331 + 20) = v336 + 1;
          v337[4] = v331;
          v338 = *((_QWORD *)this + 3472);
          v339 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v340 = *((_QWORD *)this + 3471);
          v341 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v341 + 8) = -1;
          *(_WORD *)(v341 + 12) = 152;
          *(_DWORD *)(v341 + 16) = 0;
          *(_BYTE *)(v341 + 20) = 1;
          *(_QWORD *)v341 = &unk_1E357EDA0;
          *(_QWORD *)(v341 + 40) = 0;
          *(_QWORD *)(v341 + 48) = v690;
          *(_QWORD *)(v341 + 24) = v340;
          *(_QWORD *)(v341 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v339, (JSC::B3::Value *)v341);
          v707 = (JSC::B3::Value *)v341;
          v342 = (char **)(v338 + 8);
          v343 = *(unsigned int *)(v338 + 20);
          if ((_DWORD)v343 == *(_DWORD *)(v338 + 16))
          {
            v496 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v342, v343 + 1, (unint64_t)&v707);
            v343 = *(unsigned int *)(v338 + 20);
            *(_QWORD *)(*(_QWORD *)(v338 + 8) + 8 * v343) = *(_QWORD *)v496;
            v344 = v707;
          }
          else
          {
            *(_QWORD *)&(*v342)[8 * v343] = v341;
            v344 = (_QWORD *)v341;
          }
          *(_DWORD *)(v338 + 20) = v343 + 1;
          v344[4] = v338;
          v345 = *((_QWORD *)this + 3472);
          if ((*(_WORD *)(v341 + 12) & 0xFFF) == 0x98)
            v346 = v341;
          else
            v346 = 0;
          *(_QWORD *)(v346 + 40) = v316;
          v347 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v348 = *((_QWORD *)this + 3471);
          v349 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v349 + 8) = -1;
          *(_WORD *)(v349 + 12) = 152;
          *(_DWORD *)(v349 + 16) = 0;
          *(_BYTE *)(v349 + 20) = 1;
          *(_QWORD *)v349 = &unk_1E357EDA0;
          *(_QWORD *)(v349 + 40) = 0;
          *(_QWORD *)(v349 + 48) = v680;
          *(_QWORD *)(v349 + 24) = v348;
          *(_QWORD *)(v349 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v347, (JSC::B3::Value *)v349);
          v707 = (JSC::B3::Value *)v349;
          v350 = (char **)(v345 + 8);
          v351 = *(unsigned int *)(v345 + 20);
          v202 = v678;
          if ((_DWORD)v351 == *(_DWORD *)(v345 + 16))
          {
            v497 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v350, v351 + 1, (unint64_t)&v707);
            v351 = *(unsigned int *)(v345 + 20);
            *(_QWORD *)(*(_QWORD *)(v345 + 8) + 8 * v351) = *(_QWORD *)v497;
            v352 = v707;
          }
          else
          {
            *(_QWORD *)&(*v350)[8 * v351] = v349;
            v352 = (_QWORD *)v349;
          }
          *(_DWORD *)(v345 + 20) = v351 + 1;
          v352[4] = v345;
          if ((*(_WORD *)(v349 + 12) & 0xFFF) == 0x98)
            v353 = v349;
          else
            v353 = 0;
          *(_QWORD *)(v353 + 40) = v308;
          v354 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v690, v684);
          JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v354, v692, v694, NAN, NAN, v355, v356, v357, v358);
          *((_QWORD *)this + 3472) = v694;
          *((_QWORD *)this + 3473) = v682;
          v359 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v360 = *((_QWORD *)this + 3471);
          v206 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v206 = off_1E357F5F0;
          *(_DWORD *)(v206 + 8) = -1;
          *(_WORD *)(v206 + 12) = 153;
          *(_DWORD *)(v206 + 16) = 2;
          *(_BYTE *)(v206 + 20) = 0;
          *(_QWORD *)(v206 + 24) = v360;
          *(_QWORD *)(v206 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v359, (JSC::B3::Value *)v206);
          v707 = (JSC::B3::Value *)v206;
          v361 = (char **)(v694 + 8);
          v362 = *(unsigned int *)(v694 + 20);
          if ((_DWORD)v362 == *(_DWORD *)(v694 + 16))
          {
            v498 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v361, v362 + 1, (unint64_t)&v707);
            v362 = *(unsigned int *)(v694 + 20);
            *(_QWORD *)(*(_QWORD *)(v694 + 8) + 8 * v362) = *(_QWORD *)v498;
            v363 = v707;
          }
          else
          {
            *(_QWORD *)&(*v361)[8 * v362] = v206;
            v363 = (_QWORD *)v206;
          }
          v207 = v687;
          *(_DWORD *)(v694 + 20) = v362 + 1;
          v363[4] = v694;
          if ((*(_WORD *)(v287 + 12) & 0xFFF) == 0x98)
            v364 = v287;
          else
            v364 = 0;
          *(_QWORD *)(v364 + 40) = v206;
          if ((*(_WORD *)(v334 + 12) & 0xFFF) == 0x98)
            v365 = v334;
          else
            v365 = 0;
          *(_QWORD *)(v365 + 40) = v206;
          v205 = v697;
          goto LABEL_298;
        }
        v213 = *(_QWORD *)((v211 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
        v214 = *(unsigned __int16 *)(v213 + 0x12);
        if (v214 != 352)
        {
          if (v214 != 349)
          {
            __break(0xC471u);
            JUMPOUT(0x197D3F86CLL);
          }
          v233 = *(_QWORD *)v213 & 0xFFFFFFFF8;
          if ((*(_QWORD *)v213 & 1) != 0)
            v233 = *(_QWORD *)v233;
          if (!v705)
            goto LABEL_237;
          v234 = *(_DWORD *)(v705 - 8);
          v235 = (~(v233 << 32) + v233) ^ ((unint64_t)(~(v233 << 32) + v233) >> 22);
          v236 = 9 * ((v235 + ~(v235 << 13)) ^ ((v235 + ~(v235 << 13)) >> 8));
          v237 = (v236 ^ (v236 >> 15)) + ~((v236 ^ (v236 >> 15)) << 27);
          v238 = v234 & ((v237 >> 31) ^ v237);
          v239 = *(_QWORD *)(v705 + 16 * v238);
          if (v239 == v233)
          {
LABEL_191:
            v241 = *(_QWORD *)(v705 + 16 * v238 + 8);
          }
          else
          {
            v240 = 1;
            while (v239 != 1)
            {
              v238 = ((_DWORD)v238 + v240) & v234;
              v239 = *(_QWORD *)(v705 + 16 * v238);
              ++v240;
              if (v239 == v233)
                goto LABEL_191;
            }
LABEL_237:
            v241 = 0;
          }
          v366 = *(_DWORD *)((*(_QWORD *)((v211 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          v695 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v241, 2);
          if (v233)
          {
            v510 = *(_QWORD *)v233;
            if (*(_QWORD *)v233 && *(_DWORD *)v510 >= 2u)
            {
              if (*(_BYTE *)(v510 + 13) != 8)
              {
                __break(0xC471u);
                JUMPOUT(0x197D3FA7CLL);
              }
              v373 = *(_DWORD *)(v510 + 14);
            }
            else
            {
              v373 = -1;
            }
          }
          else
          {
            v373 = 6;
          }
          v685 = v374;
          v375 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
          v376 = v375;
          v377 = *((_QWORD *)this + 3473);
          if (v377)
          {
            WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(v696, v377, v375);
          }
          else
          {
            v706.n128_u64[0] = v375;
            v378 = WTF::fastMalloc((WTF *)0x20);
            *(_OWORD *)v378 = 0u;
            *(_OWORD *)(v378 + 16) = 0u;
            *(_QWORD *)(v378 + 24) = *((_QWORD *)this + 3477);
            *((_QWORD *)this + 3477) = v378;
            v709[0] = v378;
            *(_QWORD *)(v378 + 16) = v376;
            WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(v696, (uint64_t *)&v706, v709, v379, v380, v381, v382, v383, (uint64_t)&v707);
            v384 = v709[0];
            v385 = (uint64_t *)*((_QWORD *)this + 3479);
            *(_QWORD *)v709[0] = v679;
            *(_QWORD *)(v384 + 8) = v385;
            *v385 = v384;
            *((_QWORD *)this + 3479) = v384;
          }
          v386 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
          v387 = v386;
          v388 = *((_QWORD *)this + 3473);
          v691 = (JSC::B3::Value *)v386;
          v693 = v376;
          if (v388)
          {
            WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(v696, v388, v386);
          }
          else
          {
            v706.n128_u64[0] = v386;
            v389 = WTF::fastMalloc((WTF *)0x20);
            *(_OWORD *)v389 = 0u;
            *(_OWORD *)(v389 + 16) = 0u;
            *(_QWORD *)(v389 + 24) = *((_QWORD *)this + 3477);
            *((_QWORD *)this + 3477) = v389;
            v709[0] = v389;
            *(_QWORD *)(v389 + 16) = v387;
            WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(v696, (uint64_t *)&v706, v709, v390, v391, v392, v393, v394, (uint64_t)&v707);
            v395 = v709[0];
            v396 = (uint64_t *)*((_QWORD *)this + 3479);
            *(_QWORD *)v709[0] = v679;
            *(_QWORD *)(v395 + 8) = v396;
            *v396 = v395;
            *((_QWORD *)this + 3479) = v395;
          }
          v397 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
          v398 = *((_QWORD *)this + 3472);
          v399 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v400 = *((_QWORD *)this + 3471);
          v401 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v401 + 8) = -1;
          *(_WORD *)(v401 + 12) = 152;
          *(_DWORD *)(v401 + 16) = 0;
          *(_BYTE *)(v401 + 20) = 1;
          *(_QWORD *)v401 = &unk_1E357EDA0;
          *(_QWORD *)(v401 + 40) = 0;
          *(_QWORD *)(v401 + 48) = v397;
          *(_QWORD *)(v401 + 24) = v400;
          *(_QWORD *)(v401 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v399, (JSC::B3::Value *)v401);
          v707 = (JSC::B3::Value *)v401;
          v402 = (char **)(v398 + 8);
          v403 = *(unsigned int *)(v398 + 20);
          v688 = v207;
          if ((_DWORD)v403 == *(_DWORD *)(v398 + 16))
          {
            v500 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v402, v403 + 1, (unint64_t)&v707);
            v403 = *(unsigned int *)(v398 + 20);
            *(_QWORD *)(*(_QWORD *)(v398 + 8) + 8 * v403) = *(_QWORD *)v500;
            v404 = v707;
          }
          else
          {
            *(_QWORD *)&(*v402)[8 * v403] = v401;
            v404 = (_QWORD *)v401;
          }
          *(_DWORD *)(v398 + 20) = v403 + 1;
          v404[4] = v398;
          v405 = *((_QWORD *)this + 3472);
          v406 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v407 = *((_QWORD *)this + 3471);
          v408 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v408 + 8) = -1;
          *(_WORD *)(v408 + 12) = 152;
          *(_DWORD *)(v408 + 16) = 0;
          *(_BYTE *)(v408 + 20) = 1;
          *(_QWORD *)v408 = &unk_1E357EDA0;
          *(_QWORD *)(v408 + 40) = 0;
          *(_QWORD *)(v408 + 48) = v206;
          *(_QWORD *)(v408 + 24) = v407;
          *(_QWORD *)(v408 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v406, (JSC::B3::Value *)v408);
          v707 = (JSC::B3::Value *)v408;
          v409 = (char **)(v405 + 8);
          v410 = *(unsigned int *)(v405 + 20);
          if ((_DWORD)v410 == *(_DWORD *)(v405 + 16))
          {
            v501 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v409, v410 + 1, (unint64_t)&v707);
            v410 = *(unsigned int *)(v405 + 20);
            *(_QWORD *)(*(_QWORD *)(v405 + 8) + 8 * v410) = *(_QWORD *)v501;
            v411 = v707;
          }
          else
          {
            *(_QWORD *)&(*v409)[8 * v410] = v408;
            v411 = (_QWORD *)v408;
          }
          *(_DWORD *)(v405 + 20) = v410 + 1;
          v411[4] = v405;
          v412 = *((_QWORD *)this + 3472);
          v413 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v414 = *((_QWORD *)this + 3471);
          v415 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v415 + 8) = -1;
          *(_WORD *)(v415 + 12) = 152;
          *(_DWORD *)(v415 + 16) = 0;
          *(_BYTE *)(v415 + 20) = 1;
          *(_QWORD *)v415 = &unk_1E357EDA0;
          *(_QWORD *)(v415 + 40) = 0;
          *(_QWORD *)(v415 + 48) = v206;
          *(_QWORD *)(v415 + 24) = v414;
          *(_QWORD *)(v415 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v413, (JSC::B3::Value *)v415);
          v707 = (JSC::B3::Value *)v415;
          v416 = (char **)(v412 + 8);
          v417 = *(unsigned int *)(v412 + 20);
          if ((_DWORD)v417 == *(_DWORD *)(v412 + 16))
          {
            v502 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v416, v417 + 1, (unint64_t)&v707);
            v417 = *(unsigned int *)(v412 + 20);
            *(_QWORD *)(*(_QWORD *)(v412 + 8) + 8 * v417) = *(_QWORD *)v502;
            v418 = v707;
          }
          else
          {
            *(_QWORD *)&(*v416)[8 * v417] = v415;
            v418 = (_QWORD *)v415;
          }
          v683 = v415;
          *(_DWORD *)(v412 + 20) = v417 + 1;
          v418[4] = v412;
          v419 = *((_QWORD *)this + 3472);
          v420 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v421 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v695, *((_QWORD *)this + 3459));
          JSC::B3::Procedure::addValueImpl(v420, v421);
          v707 = v421;
          v426 = (char **)(v419 + 8);
          v427 = *(unsigned int *)(v419 + 20);
          if ((_DWORD)v427 == *(_DWORD *)(v419 + 16))
          {
            v503 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v426, v427 + 1, (unint64_t)&v707);
            v427 = *(unsigned int *)(v419 + 20);
            *(_QWORD *)(*(_QWORD *)(v419 + 8) + 8 * v427) = *(_QWORD *)v503;
            v428 = v707;
          }
          else
          {
            *(_QWORD *)&(*v426)[8 * v427] = v421;
            v428 = v421;
          }
          *(_DWORD *)(v419 + 20) = v427 + 1;
          *((_QWORD *)v428 + 4) = v419;
          JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v421, (uint64_t)v691, v693, NAN, NAN, v422, v423, v424, v425);
          *((_QWORD *)this + 3472) = v693;
          v681 = *((_QWORD *)this + 3473);
          *((_QWORD *)this + 3473) = v691;
          v429 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v430 = *((_QWORD *)this + 3471);
          v431 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v431 = off_1E357F5F0;
          *(_DWORD *)(v431 + 8) = -1;
          *(_WORD *)(v431 + 12) = 153;
          *(_DWORD *)(v431 + 16) = 2;
          *(_BYTE *)(v431 + 20) = 0;
          *(_QWORD *)(v431 + 24) = v430;
          *(_QWORD *)(v431 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v429, (JSC::B3::Value *)v431);
          v707 = (JSC::B3::Value *)v431;
          v432 = (char **)(v693 + 8);
          v433 = *(unsigned int *)(v693 + 20);
          if ((_DWORD)v433 == *(_DWORD *)(v693 + 16))
          {
            v504 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v432, v433 + 1, (unint64_t)&v707);
            v433 = *(unsigned int *)(v693 + 20);
            *(_QWORD *)(*(_QWORD *)(v693 + 8) + 8 * v433) = *(_QWORD *)v504;
            v434 = v707;
          }
          else
          {
            *(_QWORD *)&(*v432)[8 * v433] = v431;
            v434 = (_QWORD *)v431;
          }
          *(_DWORD *)(v693 + 20) = v433 + 1;
          v434[4] = v693;
          if ((*(_WORD *)(v408 + 12) & 0xFFF) == 0x98)
            v435 = v408;
          else
            v435 = 0;
          *(_QWORD *)(v435 + 40) = v431;
          v436 = *((_QWORD *)this + 3472);
          v437 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v438 = *((_QWORD *)this + 3471);
          v439 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v439 = off_1E357F5F0;
          *(_DWORD *)(v439 + 8) = -1;
          *(_WORD *)(v439 + 12) = 153;
          *(_DWORD *)(v439 + 16) = 2;
          *(_BYTE *)(v439 + 20) = 0;
          *(_QWORD *)(v439 + 24) = v438;
          *(_QWORD *)(v439 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v437, (JSC::B3::Value *)v439);
          v707 = (JSC::B3::Value *)v439;
          v441 = (char **)(v436 + 8);
          v442 = *(unsigned int *)(v436 + 20);
          if ((_DWORD)v442 == *(_DWORD *)(v436 + 16))
          {
            v505 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v441, v442 + 1, (unint64_t)&v707);
            v442 = *(unsigned int *)(v436 + 20);
            *(_QWORD *)(*(_QWORD *)(v436 + 8) + 8 * v442) = *(_QWORD *)v505;
            v443 = v707;
          }
          else
          {
            *(_QWORD *)&(*v441)[8 * v442] = v439;
            v443 = (_QWORD *)v439;
          }
          *(_DWORD *)(v436 + 20) = v442 + 1;
          v443[4] = v436;
          if ((*(_WORD *)(v401 + 12) & 0xFFF) == 0x98)
            v444 = v401;
          else
            v444 = 0;
          *(_QWORD *)(v444 + 40) = v439;
          v445 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 22536), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v685, (JSC::B3::Value *)v439, 0, 0, 0, v440);
          v447 = JSC::FTL::Output::load((uint64_t)this + 27640, v445, v446, 2);
          v449 = JSC::FTL::IndexedAbstractHeap::baseIndex(v698, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202, (JSC::B3::Value *)v431, 0, 0, 0, v448);
          JSC::FTL::Output::store((uint64_t)this + 27640, v447, v449, v450);
          v451 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
          v452 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v431, v451);
          v453 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
          v686 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v439, v453);
          v454 = *((_QWORD *)this + 3472);
          v455 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v456 = *((_QWORD *)this + 3471);
          v457 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v457 + 8) = -1;
          *(_WORD *)(v457 + 12) = 152;
          *(_DWORD *)(v457 + 16) = 0;
          *(_BYTE *)(v457 + 20) = 1;
          *(_QWORD *)v457 = &unk_1E357EDA0;
          v677 = v452;
          *(_QWORD *)(v457 + 40) = 0;
          *(_QWORD *)(v457 + 48) = v452;
          *(_QWORD *)(v457 + 24) = v456;
          *(_QWORD *)(v457 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v455, (JSC::B3::Value *)v457);
          v707 = (JSC::B3::Value *)v457;
          v458 = (char **)(v454 + 8);
          v459 = *(unsigned int *)(v454 + 20);
          if ((_DWORD)v459 == *(_DWORD *)(v454 + 16))
          {
            v506 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v458, v459 + 1, (unint64_t)&v707);
            v459 = *(unsigned int *)(v454 + 20);
            *(_QWORD *)(*(_QWORD *)(v454 + 8) + 8 * v459) = *(_QWORD *)v506;
            v460 = v707;
          }
          else
          {
            *(_QWORD *)&(*v458)[8 * v459] = v457;
            v460 = (_QWORD *)v457;
          }
          *(_DWORD *)(v454 + 20) = v459 + 1;
          v460[4] = v454;
          v461 = *((_QWORD *)this + 3472);
          v462 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v463 = *((_QWORD *)this + 3471);
          v464 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v464 + 8) = -1;
          *(_WORD *)(v464 + 12) = 152;
          *(_DWORD *)(v464 + 16) = 0;
          *(_BYTE *)(v464 + 20) = 1;
          *(_QWORD *)v464 = &unk_1E357EDA0;
          *(_QWORD *)(v464 + 40) = 0;
          *(_QWORD *)(v464 + 48) = v686;
          *(_QWORD *)(v464 + 24) = v463;
          *(_QWORD *)(v464 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v462, (JSC::B3::Value *)v464);
          v707 = (JSC::B3::Value *)v464;
          v465 = (char **)(v461 + 8);
          v466 = *(unsigned int *)(v461 + 20);
          if ((_DWORD)v466 == *(_DWORD *)(v461 + 16))
          {
            v507 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v465, v466 + 1, (unint64_t)&v707);
            v466 = *(unsigned int *)(v461 + 20);
            *(_QWORD *)(*(_QWORD *)(v461 + 8) + 8 * v466) = *(_QWORD *)v507;
            v467 = v707;
          }
          else
          {
            *(_QWORD *)&(*v465)[8 * v466] = v464;
            v467 = (_QWORD *)v464;
          }
          *(_DWORD *)(v461 + 20) = v466 + 1;
          v467[4] = v461;
          v468 = *((_QWORD *)this + 3472);
          if ((*(_WORD *)(v464 + 12) & 0xFFF) == 0x98)
            v469 = v464;
          else
            v469 = 0;
          *(_QWORD *)(v469 + 40) = v439;
          v470 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v471 = *((_QWORD *)this + 3471);
          v472 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v472 + 8) = -1;
          *(_WORD *)(v472 + 12) = 152;
          *(_DWORD *)(v472 + 16) = 0;
          *(_BYTE *)(v472 + 20) = 1;
          *(_QWORD *)v472 = &unk_1E357EDA0;
          *(_QWORD *)(v472 + 40) = 0;
          *(_QWORD *)(v472 + 48) = v677;
          *(_QWORD *)(v472 + 24) = v471;
          *(_QWORD *)(v472 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v470, (JSC::B3::Value *)v472);
          v707 = (JSC::B3::Value *)v472;
          v473 = (char **)(v468 + 8);
          v474 = *(unsigned int *)(v468 + 20);
          if ((_DWORD)v474 == *(_DWORD *)(v468 + 16))
          {
            v508 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v473, v474 + 1, (unint64_t)&v707);
            v474 = *(unsigned int *)(v468 + 20);
            *(_QWORD *)(*(_QWORD *)(v468 + 8) + 8 * v474) = *(_QWORD *)v508;
            v475 = v707;
          }
          else
          {
            *(_QWORD *)&(*v473)[8 * v474] = v472;
            v475 = (_QWORD *)v472;
          }
          v205 = v697;
          *(_DWORD *)(v468 + 20) = v474 + 1;
          v475[4] = v468;
          if ((*(_WORD *)(v472 + 12) & 0xFFF) == 0x98)
            v476 = v472;
          else
            v476 = 0;
          *(_QWORD *)(v476 + 40) = v431;
          v477 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v686, v695);
          JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v477, v693, (uint64_t)v691, NAN, NAN, v478, v479, v480, v481);
          *((_QWORD *)this + 3472) = v691;
          *((_QWORD *)this + 3473) = v681;
          v482 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v483 = *((_QWORD *)this + 3471);
          v206 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v206 = off_1E357F5F0;
          *(_DWORD *)(v206 + 8) = -1;
          *(_WORD *)(v206 + 12) = 153;
          *(_DWORD *)(v206 + 16) = 2;
          *(_BYTE *)(v206 + 20) = 0;
          *(_QWORD *)(v206 + 24) = v483;
          *(_QWORD *)(v206 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v482, (JSC::B3::Value *)v206);
          v707 = (JSC::B3::Value *)v206;
          v484 = (char **)((char *)v691 + 8);
          v485 = *((unsigned int *)v691 + 5);
          if ((_DWORD)v485 == *((_DWORD *)v691 + 4))
          {
            v509 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v484, v485 + 1, (unint64_t)&v707);
            v485 = *((unsigned int *)v691 + 5);
            *(_QWORD *)(*((_QWORD *)v691 + 1) + 8 * v485) = *(_QWORD *)v509;
            v486 = v707;
          }
          else
          {
            *(_QWORD *)&(*v484)[8 * v485] = v206;
            v486 = (_QWORD *)v206;
          }
          v207 = v688;
          *((_DWORD *)v691 + 5) = v485 + 1;
          v486[4] = v691;
          if ((*(_WORD *)(v683 + 12) & 0xFFF) == 0x98)
            v487 = v683;
          else
            v487 = 0;
          *(_QWORD *)(v487 + 40) = v206;
          if ((*(_WORD *)(v457 + 12) & 0xFFF) == 0x98)
            v488 = v457;
          else
            v488 = 0;
          *(_QWORD *)(v488 + 40) = v206;
          goto LABEL_298;
        }
        v215 = **(_QWORD **)((*(_QWORD *)((v211 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
        if (*(_DWORD *)(v215 + 8))
        {
          v216 = 0;
          v217 = v215 + 16;
          do
          {
            if ((*(_BYTE *)(v215 + 4) & 0xE) == 6)
              v218 = *(_QWORD *)(v217 + 8 * v216) + 0x2000000000000;
            else
              v218 = *(_QWORD *)(v217 + 8 * v216);
            v219 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v218);
            if (v216 == 0x20000000)
            {
              __break(0xC471u);
              JUMPOUT(0x197D3FB6CLL);
            }
            v221 = v219;
            v222 = JSC::FTL::IndexedAbstractHeap::baseIndex(v698, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202, (JSC::B3::Value *)v206, 0, (8 * v216), 0, v220);
            JSC::FTL::Output::store((uint64_t)this + 27640, v221, v222, v223);
            ++v216;
            v224 = *(unsigned int *)(v215 + 8);
          }
          while (v216 < v224);
        }
        else
        {
          v224 = 0;
        }
        v229 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      }
      else
      {
        v227 = JSC::FTL::IndexedAbstractHeap::baseIndex(v698, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202, (JSC::B3::Value *)v206, 0, 0, 0, v226);
        JSC::FTL::Output::store((uint64_t)this + 27640, v225, v227, v228);
        v229 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v224 = 1;
      }
      v499 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v229, v224);
      v206 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v206, v499);
LABEL_298:
      ++v207;
      v204 = *((_QWORD *)this + 3528);
    }
    while (v207 < *(unsigned int *)(v204 + 32));
  }
  v709[0] = *((_QWORD *)this + 3528);
  v511 = *((_QWORD *)this + 3521);
  v706.n128_u64[0] = UninitializedContiguousJSArrayInternal;
  v706.n128_u64[1] = v511;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v707, (uint64_t *)this + 3492, v709, &v706);
  if (v705)
    WTF::fastFree(v705 - 16, v512, v513, v514, v515, v516, v517, v518);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  JSC::B3::BasicBlock *v21;
  JSC::B3::BasicBlock *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::B3::Value *Object;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Value *v79;
  uint64_t v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v84, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v84, v3, v4, v5, v6, v7, v8);
  if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v84 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v83 = v18;
  v19 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v20 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v21 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v22 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v30, v19, (uint64_t)v21, 1.0, 0.0, v31, v32, v33, v34);
  *((_QWORD *)this + 3472) = v19;
  v35 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v20;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3232));
  v37 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v38 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, v37);
  v39 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v38);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v39, (uint64_t)v21, v20, 0.0, 1.0, v40, v41, v42, v43);
  *((_QWORD *)this + 3472) = v20;
  *((_QWORD *)this + 3473) = v21;
  v44 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v45 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, v44);
  v46 = JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1840));
  v47 = JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1888));
  v48 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v50 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object);
  v52 = v51;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v53, v54, v55, v56, v57, v58);
  *((_QWORD *)this + 3472) = v21;
  *((_QWORD *)this + 3473) = v22;
  v81 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  v70 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v69);
  v72 = v71;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22, v73, v74, v75, v76, v77, v78);
  *((_QWORD *)this + 3472) = v22;
  *((_QWORD *)this + 3473) = v35;
  v79 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v50, v52, v70, v72);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreatePromise(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  JSC::B3::Value *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  JSC::B3::Value *v132;
  uint64_t v133;
  JSC::B3::Value *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::B3::Value **v151;
  uint64_t v152;
  uint64_t v153;
  JSC::B3::Value *v154;
  JSC::B3::Value *v155;
  JSC::B3::Value *v156;
  JSC::B3::Value *v157;
  uint64_t v158;
  uint64_t v159;
  JSC::B3::Value *v160;
  JSC::B3::Value *v161;
  JSC::B3::Value *v162;
  JSC::B3::Value *v163;
  uint64_t v164;
  JSC::B3::Value *v165;
  JSC::B3::Value *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char **v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  JSC::B3::Value *v176;
  JSC::B3::Value *v177;
  char **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  JSC::B3::Value *v182;
  uint64_t v183;
  uint64_t v184;
  JSC::B3::Value *v185;
  JSC::B3::Value *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char **v191;
  uint64_t v192;
  uint64_t v193;
  JSC::B3::Value *v194;
  JSC::B3::Value *v195;
  JSC::B3::Value *v196;
  uint64_t v197;
  uint64_t v198;
  JSC::B3::Value *v199;
  uint64_t v200;
  JSC::B3::Value *v201;
  JSC::B3::Value *v202;
  JSC::B3::Value *v203;
  char **v204;
  JSC::B3::Value *v205;
  JSC::B3::Value *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  JSC::B3::Value *v211;
  uint64_t v212;
  uint64_t v213;
  char **v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  JSC::B3::Value *v218;
  JSC::B3::Value *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  JSC::B3::Value *v226;
  JSC::B3::Value *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  JSC::B3::Value *v233;
  uint64_t v234;
  uint64_t v235;
  char **v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  JSC::B3::Value *Object;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  JSC::B3::Value *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  JSC::B3::Value *v253;
  uint64_t v254;
  JSC::B3::Value *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char **v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t (*v273)(JSC::InternalFunction *, JSC::ProxyObject *, uint64_t, JSC::Structure *, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  JSC::B3::Value *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char **v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  JSC::B3::Value *v292;
  uint64_t v293;
  uint64_t v294;
  char **v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  double result;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  uint64_t v311;
  unsigned int v312;
  BOOL v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  BOOL v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  JSC::B3::Value *v325;
  uint64_t v326;
  JSC::JSCell *v327;
  JSC::B3::BasicBlock *v328;
  JSC::B3::Value *v329;
  __n128 v330;
  uint64_t v331;
  char v332;
  _QWORD *v333;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v311 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v312 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v312 != 0x3FFFFFFF) ? (v313 = v312 == -1) : (v313 = 1), v313))
  {
    v314 = 2;
  }
  else if (v312 >> 28)
  {
    v320 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v320 = v311;
    *(_DWORD *)(v320 + 8) = v312;
    v314 = 1;
    v311 = v320;
  }
  else
  {
    v314 = v311;
    v311 = 0;
  }
  v11 = v311 | v314;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v311 | v314) & 1) == 0)
    goto LABEL_3;
  v315 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v316 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v316 != 0x3FFFFFFF) ? (v317 = v316 == -1) : (v317 = 1), v317))
  {
    v318 = 2;
  }
  else if (v316 >> 28)
  {
    v321 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v321 = v315;
    *(_DWORD *)(v321 + 8) = v316;
    v318 = 1;
    v315 = v321;
  }
  else
  {
    v318 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v315 = 0;
  }
  v319 = v315 | v318;
  v13 = (_QWORD *)(v319 & 0xFFFFFFFF8);
  if ((v319 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v327 = *(JSC::JSCell **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v329 = v17;
  v18 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v19 = v18;
  v20 = *((_QWORD *)this + 3473);
  v322 = v18;
  if (v20)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v20, v18);
  }
  else
  {
    v330.n128_u64[0] = v18;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v21[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v21;
    v333 = v21;
    v21[2] = v19;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v22, v23, v24, v25, v26, (uint64_t)&v331);
    v27 = v333;
    v28 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v27[1] = v28;
    *v28 = v27;
    *((_QWORD *)this + 3479) = v27;
  }
  v29 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = v29;
  v31 = *((_QWORD *)this + 3473);
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, v29);
  }
  else
  {
    v330.n128_u64[0] = v29;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v32 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    v32[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v32;
    v333 = v32;
    v32[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v33, v34, v35, v36, v37, (uint64_t)&v331);
    v38 = v333;
    v39 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v38[1] = v39;
    *v39 = v38;
    *((_QWORD *)this + 3479) = v38;
  }
  v40 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v41 = v40;
  v42 = *((_QWORD *)this + 3473);
  if (v42)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v42, v40);
  }
  else
  {
    v330.n128_u64[0] = v40;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v43 = 0u;
    *((_OWORD *)v43 + 1) = 0u;
    v43[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v43;
    v333 = v43;
    v43[2] = v41;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v44, v45, v46, v47, v48, (uint64_t)&v331);
    v49 = v333;
    v50 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v49[1] = v50;
    *v50 = v49;
    *((_QWORD *)this + 3479) = v49;
  }
  v51 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v52 = v51;
  v53 = *((_QWORD *)this + 3473);
  if (v53)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v53, v51);
  }
  else
  {
    v330.n128_u64[0] = v51;
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v54 = 0u;
    *((_OWORD *)v54 + 1) = 0u;
    v54[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v54;
    v333 = v54;
    v54[2] = v52;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v55, v56, v57, v58, v59, (uint64_t)&v331);
    v60 = v333;
    v61 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v60[1] = v61;
    *v61 = v60;
    *((_QWORD *)this + 3479) = v60;
  }
  v62 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v63 = v62;
  v64 = *((_QWORD *)this + 3473);
  v323 = v30;
  if (v64)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v64, v62);
  }
  else
  {
    v330.n128_u64[0] = v62;
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v65 = 0u;
    *((_OWORD *)v65 + 1) = 0u;
    v65[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v65;
    v333 = v65;
    v65[2] = v63;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v66, v67, v68, v69, v70, (uint64_t)&v331);
    v71 = v333;
    v72 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v71[1] = v72;
    *v72 = v71;
    *((_QWORD *)this + 3479) = v71;
  }
  v73 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v74 = v73;
  v75 = *((_QWORD *)this + 3473);
  if (v75)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v75, v73);
  }
  else
  {
    v330.n128_u64[0] = v73;
    v76 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v76 = 0u;
    *((_OWORD *)v76 + 1) = 0u;
    v76[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v76;
    v333 = v76;
    v76[2] = v74;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v77, v78, v79, v80, v81, (uint64_t)&v331);
    v82 = v333;
    v83 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v82[1] = v83;
    *v83 = v82;
    *((_QWORD *)this + 3479) = v82;
  }
  v84 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v85 = v84;
  v86 = *((_QWORD *)this + 3473);
  v328 = (JSC::B3::BasicBlock *)v84;
  if (v86)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v86, v84);
  }
  else
  {
    v330.n128_u64[0] = v84;
    v87 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v87 = 0u;
    *((_OWORD *)v87 + 1) = 0u;
    v87[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v87;
    v333 = v87;
    v87[2] = v85;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v88, v89, v90, v91, v92, (uint64_t)&v331);
    v93 = v333;
    v94 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v93[1] = v94;
    *v94 = v93;
    *((_QWORD *)this + 3479) = v93;
  }
  v325 = v17;
  v95 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v96 = v95;
  v97 = *((_QWORD *)this + 3473);
  v326 = v95;
  if (v97)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v97, v95);
  }
  else
  {
    v330.n128_u64[0] = v95;
    v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v103 = 0u;
    *((_OWORD *)v103 + 1) = 0u;
    v103[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v103;
    v333 = v103;
    v103[2] = v96;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v330, (uint64_t *)&v333, v104, v105, v106, v107, v108, (uint64_t)&v331);
    v109 = v333;
    v110 = (_QWORD *)*((_QWORD *)this + 3479);
    *v333 = (char *)this + 27824;
    v109[1] = v110;
    *v110 = v109;
    *((_QWORD *)this + 3479) = v109;
  }
  v111 = 1184;
  if (!*(_DWORD *)(*((_QWORD *)this + 3528) + 80))
    v111 = 1164;
  v112 = *(_DWORD *)((char *)v327 + v111);
  if (v112)
    v113 = 16 * (v112 & 0xFFFFFFFE);
  else
    v113 = 0;
  v114 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v113, (int *)&v331, v98, v99, v100, v101, v102);
  v115 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v114);
  v116 = *((_QWORD *)this + 3472);
  v117 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v118 = *((_QWORD *)this + 3471);
  v119 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v119 + 8) = -1;
  *(_WORD *)(v119 + 12) = 152;
  *(_BYTE *)(v119 + 20) = 1;
  *(_QWORD *)v119 = &unk_1E357EDA0;
  *(_DWORD *)(v119 + 16) = 0;
  *(_QWORD *)(v119 + 40) = 0;
  *(_QWORD *)(v119 + 48) = v115;
  *(_QWORD *)(v119 + 24) = v118;
  *(_QWORD *)(v119 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v117, (JSC::B3::Value *)v119);
  v331 = v119;
  v126 = (char **)(v116 + 8);
  v127 = *(unsigned int *)(v116 + 20);
  if ((_DWORD)v127 == *(_DWORD *)(v116 + 16))
  {
    v302 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v126, v127 + 1, (unint64_t)&v331);
    v127 = *(unsigned int *)(v116 + 20);
    *(_QWORD *)(*(_QWORD *)(v116 + 8) + 8 * v127) = *(_QWORD *)v302;
    v128 = v331;
  }
  else
  {
    *(_QWORD *)&(*v126)[8 * v127] = v119;
    v128 = v119;
  }
  v129 = v41;
  *(_DWORD *)(v116 + 20) = v127 + 1;
  *(_QWORD *)(v128 + 32) = v116;
  v130 = 272;
  if (!*(_DWORD *)(*((_QWORD *)this + 3528) + 80))
    v130 = 264;
  v131 = *(_QWORD *)((char *)v327 + v130);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v131, v120, v121, v122, v123, v124, v125);
  v132 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v131);
  v133 = (uint64_t)v325;
  v134 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v325, v132);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v134, v74, v322, NAN, NAN, v135, v136, v137, v138);
  *((_QWORD *)this + 3472) = v322;
  v139 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v323;
  v151 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v146 & 0x2800FFFFFFF3) == 0)
  {
LABEL_112:
    v157 = *v151;
    if (*v151)
      goto LABEL_46;
    goto LABEL_43;
  }
  if ((v146 & 4) == 0)
  {
    v151 = (JSC::B3::Value **)((char *)this + 27648);
    goto LABEL_112;
  }
LABEL_43:
  v152 = *((_QWORD *)this + 395);
  v153 = (uint64_t)v325;
  if (v152)
  {
    v154 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v152);
    v153 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v325, v154);
  }
  v155 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 3136, v153);
  v156 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 26);
  v157 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v155, v156);
LABEL_46:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v157, v323, (uint64_t)v328, 1.0, 0.0, v147, v148, v149, v150);
  *((_QWORD *)this + 3472) = v323;
  v158 = v129;
  *((_QWORD *)this + 3473) = v129;
  v159 = *((_QWORD *)this + 407);
  v324 = v139;
  if (v159)
  {
    v160 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v159);
    v133 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v325, v160);
  }
  v161 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3232), v133, 2);
  v162 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v163 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v161, v162);
  v164 = *((_QWORD *)this + 3472);
  v165 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v166 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v163, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v165, v166);
  v331 = (uint64_t)v166;
  v171 = (char **)(v164 + 8);
  v172 = *(unsigned int *)(v164 + 20);
  if ((_DWORD)v172 == *(_DWORD *)(v164 + 16))
  {
    v303 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v171, v172 + 1, (unint64_t)&v331);
    v172 = *(unsigned int *)(v164 + 20);
    *(_QWORD *)(*(_QWORD *)(v164 + 8) + 8 * v172) = *(_QWORD *)v303;
    v173 = v331;
  }
  else
  {
    *(_QWORD *)&(*v171)[8 * v172] = v166;
    v173 = (uint64_t)v166;
  }
  *(_DWORD *)(v164 + 20) = v172 + 1;
  *(_QWORD *)(v173 + 32) = v164;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v166, (uint64_t)v328, v158, 0.0, 1.0, v167, v168, v169, v170);
  *((_QWORD *)this + 3472) = v158;
  *((_QWORD *)this + 3473) = v52;
  v174 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v175 = *((_QWORD *)this + 3472);
  v176 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v177 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *((_QWORD *)this + 3471), (uint64_t)v161, v174);
  JSC::B3::Procedure::addValueImpl(v176, v177);
  v331 = (uint64_t)v177;
  v178 = (char **)(v175 + 8);
  v179 = *(unsigned int *)(v175 + 20);
  if ((_DWORD)v179 == *(_DWORD *)(v175 + 16))
  {
    v304 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v178, v179 + 1, (unint64_t)&v331);
    v179 = *(unsigned int *)(v175 + 20);
    *(_QWORD *)(*(_QWORD *)(v175 + 8) + 8 * v179) = *(_QWORD *)v304;
    v180 = v331;
  }
  else
  {
    *(_QWORD *)&(*v178)[8 * v179] = v177;
    v180 = (uint64_t)v177;
  }
  *(_DWORD *)(v175 + 20) = v179 + 1;
  *(_QWORD *)(v180 + 32) = v175;
  v181 = *((_QWORD *)this + 263);
  if (v181)
  {
    v182 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v181);
    v177 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v177, v182);
  }
  v183 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2080), (uint64_t)v177, 1);
  v184 = *((_QWORD *)this + 3472);
  v185 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v186 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v183, *((_QWORD *)this + 3457));
  JSC::B3::Procedure::addValueImpl(v185, v186);
  v331 = (uint64_t)v186;
  v191 = (char **)(v184 + 8);
  v192 = *(unsigned int *)(v184 + 20);
  if ((_DWORD)v192 == *(_DWORD *)(v184 + 16))
  {
    v305 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v191, v192 + 1, (unint64_t)&v331);
    v192 = *(unsigned int *)(v184 + 20);
    *(_QWORD *)(*(_QWORD *)(v184 + 8) + 8 * v192) = *(_QWORD *)v305;
    v193 = v331;
  }
  else
  {
    *(_QWORD *)&(*v191)[8 * v192] = v186;
    v193 = (uint64_t)v186;
  }
  *(_DWORD *)(v184 + 20) = v192 + 1;
  *(_QWORD *)(v193 + 32) = v184;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v186, (uint64_t)v328, v52, 0.0, 1.0, v187, v188, v189, v190);
  *((_QWORD *)this + 3472) = v52;
  *((_QWORD *)this + 3473) = v63;
  v194 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v183, 2);
  v195 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v196 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v194, v195);
  v197 = *((_QWORD *)this + 671);
  v198 = (uint64_t)v196;
  if (v197)
  {
    v199 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v197);
    v198 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v196, v199);
  }
  v200 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5344), v198, 1);
  v201 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v200, 2);
  v202 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v203 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v201, v202);
  if (*(_DWORD *)(*((_QWORD *)this + 3528) + 80))
    v204 = &JSC::JSInternalPromise::s_info;
  else
    v204 = &JSC::JSPromise::s_info;
  v205 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v204);
  v206 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v203, v205);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v206, v63, (uint64_t)v328, 1.0, 0.0, v207, v208, v209, v210);
  *((_QWORD *)this + 3472) = v63;
  *((_QWORD *)this + 3473) = v74;
  v211 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v212 = *((_QWORD *)this + 3471);
  v213 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v213 + 8) = -1;
  *(_WORD *)(v213 + 12) = 152;
  *(_DWORD *)(v213 + 16) = 0;
  *(_BYTE *)(v213 + 20) = 1;
  *(_QWORD *)v213 = &unk_1E357EDA0;
  *(_QWORD *)(v213 + 40) = 0;
  *(_QWORD *)(v213 + 48) = v196;
  *(_QWORD *)(v213 + 24) = v212;
  *(_QWORD *)(v213 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v211, (JSC::B3::Value *)v213);
  v331 = v213;
  v214 = (char **)(v63 + 8);
  v215 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v215 == *(_DWORD *)(v63 + 16))
  {
    v306 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v214, v215 + 1, (unint64_t)&v331);
    v215 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v215) = *(_QWORD *)v306;
    v216 = v331;
  }
  else
  {
    *(_QWORD *)&(*v214)[8 * v215] = v213;
    v216 = v213;
  }
  *(_DWORD *)(v63 + 20) = v215 + 1;
  *(_QWORD *)(v216 + 32) = v63;
  v217 = *((_QWORD *)this + 677);
  if (v217)
  {
    v218 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v217);
    v196 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v196, v218);
  }
  v219 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5392), (uint64_t)v196, 2);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v327, v220, v221, v222, v223, v224, v225);
  v226 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v327);
  v227 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v219, v226);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v227, v74, (uint64_t)v328, 1.0, 0.0, v228, v229, v230, v231);
  *((_QWORD *)this + 3472) = v74;
  *((_QWORD *)this + 3473) = v328;
  v232 = *(_DWORD *)(*((_QWORD *)this + 3528) + 80);
  v233 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v234 = *((_QWORD *)this + 3471);
  v235 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v235 = off_1E357F5F0;
  *(_DWORD *)(v235 + 8) = -1;
  *(_WORD *)(v235 + 12) = 153;
  *(_DWORD *)(v235 + 16) = 2;
  *(_BYTE *)(v235 + 20) = 0;
  *(_QWORD *)(v235 + 24) = v234;
  *(_QWORD *)(v235 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v233, (JSC::B3::Value *)v235);
  v331 = v235;
  v236 = (char **)(v74 + 8);
  v237 = *(unsigned int *)(v74 + 20);
  if ((_DWORD)v237 == *(_DWORD *)(v74 + 16))
  {
    v307 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v236, v237 + 1, (unint64_t)&v331);
    v237 = *(unsigned int *)(v74 + 20);
    *(_QWORD *)(*(_QWORD *)(v74 + 8) + 8 * v237) = *(_QWORD *)v307;
    v238 = v331;
  }
  else
  {
    *(_QWORD *)&(*v236)[8 * v237] = v235;
    v238 = v235;
  }
  *(_DWORD *)(v74 + 20) = v237 + 1;
  *(_QWORD *)(v238 + 32) = v74;
  if ((*(_WORD *)(v119 + 12) & 0xFFF) == 0x98)
    v239 = v119;
  else
    v239 = 0;
  *(_QWORD *)(v239 + 40) = v235;
  if ((*(_WORD *)(v213 + 12) & 0xFFF) == 0x98)
    v240 = v213;
  else
    v240 = 0;
  *(_QWORD *)(v240 + 40) = v235;
  v241 = *(_QWORD *)(*(_QWORD *)this + 16);
  v242 = *(_DWORD *)(v241 + 39028);
  if (v232)
  {
    if (v242 <= 0x1F)
    {
      __break(0xC471u);
      JUMPOUT(0x197D40A08);
    }
  }
  else if (v242 <= 0x1F)
  {
    __break(0xC471u);
    JUMPOUT(0x197D40F8CLL);
  }
  v243 = *((_QWORD *)this + 3460);
  v244 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v241 + 38968);
  v246 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0xFFFE000000000000);
  if (!*((_QWORD *)this + 1467))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11696), 0);
  v247 = *((_QWORD *)this + 1465);
  v248 = (uint64_t)Object;
  if (v247)
  {
    v249 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v247);
    v248 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v249);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v246, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11696), v248);
  v250 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1473))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11744), 1);
  v251 = *((_QWORD *)this + 1471);
  v252 = (uint64_t)Object;
  if (v251)
  {
    v253 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v251);
    v252 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v253);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v250, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11744), v252);
  v254 = *((_QWORD *)this + 3472);
  v255 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v256 = *((_QWORD *)this + 3471);
  v257 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v257 + 8) = -1;
  *(_WORD *)(v257 + 12) = 152;
  *(_DWORD *)(v257 + 16) = 0;
  *(_BYTE *)(v257 + 20) = 1;
  *(_QWORD *)v257 = &unk_1E357EDA0;
  *(_QWORD *)(v257 + 40) = 0;
  *(_QWORD *)(v257 + 48) = Object;
  *(_QWORD *)(v257 + 24) = v256;
  *(_QWORD *)(v257 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v255, (JSC::B3::Value *)v257);
  v331 = v257;
  v261 = (char **)(v254 + 8);
  v262 = *(unsigned int *)(v254 + 20);
  if ((_DWORD)v262 == *(_DWORD *)(v254 + 16))
  {
    v308 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v261, v262 + 1, (unint64_t)&v331);
    v262 = *(unsigned int *)(v254 + 20);
    *(_QWORD *)(*(_QWORD *)(v254 + 8) + 8 * v262) = *(_QWORD *)v308;
    v263 = v331;
  }
  else
  {
    *(_QWORD *)&(*v261)[8 * v262] = v257;
    v263 = v257;
  }
  *(_DWORD *)(v254 + 20) = v262 + 1;
  *(_QWORD *)(v263 + 32) = v254;
  v264 = *((_QWORD *)this + 3472);
  v265 = *((_QWORD *)this + 3470);
  v266 = *((_QWORD *)this + 3471);
  v331 = v326;
  v332 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v264, v265, 154, v266, &v331, v258, v259, v260);
  *((_QWORD *)this + 3472) = v328;
  *((_QWORD *)this + 3473) = v326;
  if (*(_DWORD *)(*((_QWORD *)this + 3528) + 80))
    v273 = operationCreateInternalPromise;
  else
    v273 = operationCreatePromise;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v327, v267, v268, v269, v270, v271, v272);
  v330.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v327);
  v279 = *((_QWORD *)this + 3472);
  v280 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v281 = *((_QWORD *)this + 3471);
  v282 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v282 + 8) = -1;
  *(_WORD *)(v282 + 12) = 152;
  *(_DWORD *)(v282 + 16) = 0;
  *(_BYTE *)(v282 + 20) = 1;
  *(_QWORD *)v282 = &unk_1E357EDA0;
  *(_QWORD *)(v282 + 40) = 0;
  *(_QWORD *)(v282 + 48) = v278;
  *(_QWORD *)(v282 + 24) = v281;
  *(_QWORD *)(v282 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v280, (JSC::B3::Value *)v282);
  v331 = v282;
  v286 = (char **)(v279 + 8);
  v287 = *(unsigned int *)(v279 + 20);
  if ((_DWORD)v287 == *(_DWORD *)(v279 + 16))
  {
    v309 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v286, v287 + 1, (unint64_t)&v331);
    v287 = *(unsigned int *)(v279 + 20);
    *(_QWORD *)(*(_QWORD *)(v279 + 8) + 8 * v287) = *(_QWORD *)v309;
    v288 = v331;
  }
  else
  {
    *(_QWORD *)&(*v286)[8 * v287] = v282;
    v288 = v282;
  }
  *(_DWORD *)(v279 + 20) = v287 + 1;
  *(_QWORD *)(v288 + 32) = v279;
  v289 = *((_QWORD *)this + 3472);
  v290 = *((_QWORD *)this + 3470);
  v291 = *((_QWORD *)this + 3471);
  v331 = v326;
  v332 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v289, v290, 154, v291, &v331, v283, v284, v285);
  *((_QWORD *)this + 3472) = v326;
  *((_QWORD *)this + 3473) = v324;
  v292 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v293 = *((_QWORD *)this + 3471);
  v294 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v294 = off_1E357F5F0;
  *(_DWORD *)(v294 + 8) = -1;
  *(_WORD *)(v294 + 12) = 153;
  *(_DWORD *)(v294 + 16) = 2;
  *(_BYTE *)(v294 + 20) = 0;
  *(_QWORD *)(v294 + 24) = v293;
  *(_QWORD *)(v294 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v292, (JSC::B3::Value *)v294);
  v331 = v294;
  v295 = (char **)(v326 + 8);
  v296 = *(unsigned int *)(v326 + 20);
  if ((_DWORD)v296 == *(_DWORD *)(v326 + 16))
  {
    v310 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v295, v296 + 1, (unint64_t)&v331);
    v296 = *(unsigned int *)(v326 + 20);
    *(_QWORD *)(*(_QWORD *)(v326 + 8) + 8 * v296) = *(_QWORD *)v310;
    v297 = v331;
  }
  else
  {
    *(_QWORD *)&(*v295)[8 * v296] = v294;
    v297 = v294;
  }
  *(_DWORD *)(v326 + 20) = v296 + 1;
  *(_QWORD *)(v297 + 32) = v326;
  if ((*(_WORD *)(v257 + 12) & 0xFFF) == 0x98)
    v298 = v257;
  else
    v298 = 0;
  *(_QWORD *)(v298 + 40) = v294;
  if ((*(_WORD *)(v282 + 12) & 0xFFF) == 0x98)
    v299 = v282;
  else
    v299 = 0;
  *(_QWORD *)(v299 + 40) = v294;
  v333 = (_QWORD *)*((_QWORD *)this + 3528);
  v300 = *((_QWORD *)this + 3521);
  v330.n128_u64[0] = v294;
  v330.n128_u64[1] = v300;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v331, (uint64_t *)this + 3492, (uint64_t *)&v333, &v330).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateGenerator(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  JSC::B3::BasicBlock *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  JSC::B3::Value **v106;
  uint64_t v107;
  uint64_t v108;
  JSC::B3::Value *v109;
  JSC::B3::Value *v110;
  JSC::B3::Value *v111;
  JSC::B3::Value *v112;
  uint64_t v113;
  uint64_t v114;
  JSC::B3::Value *v115;
  JSC::B3::Value *v116;
  JSC::B3::Value *v117;
  JSC::B3::Value *v118;
  uint64_t v119;
  JSC::B3::Value *v120;
  JSC::B3::Value *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  JSC::B3::Value *v131;
  JSC::B3::Value *v132;
  char **v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  uint64_t v139;
  JSC::B3::Value *v140;
  JSC::B3::Value *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char **v146;
  uint64_t v147;
  uint64_t v148;
  JSC::B3::Value *v149;
  JSC::B3::Value *v150;
  JSC::B3::Value *v151;
  uint64_t v152;
  uint64_t v153;
  JSC::B3::Value *v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  JSC::B3::Value *v157;
  JSC::B3::Value *v158;
  JSC::B3::Value *v159;
  JSC::B3::Value *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::B3::Value *v167;
  JSC::B3::Value *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  JSC::B3::Value *v175;
  JSC::B3::Value *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  JSC::B3::Value *Object;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  JSC::B3::Value *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  JSC::B3::Value *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  JSC::B3::Value *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::B3::Value *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  JSC::B3::Value *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  JSC::B3::Value *v208;
  uint64_t v209;
  JSC::B3::Value *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char **v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  JSC::B3::Value *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char **v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  JSC::B3::Value *v246;
  uint64_t v247;
  uint64_t v248;
  char **v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  double result;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  unsigned int v263;
  BOOL v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  BOOL v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  JSC::JSCell *v276;
  JSC::B3::Value *v277;
  __n128 v278;
  uint64_t v279;
  char v280;
  _QWORD *v281;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v262 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v263 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v263 != 0x3FFFFFFF) ? (v264 = v263 == -1) : (v264 = 1), v264))
  {
    v265 = 2;
  }
  else if (v263 >> 28)
  {
    v271 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v271 = v262;
    *(_DWORD *)(v271 + 8) = v263;
    v265 = 1;
    v262 = v271;
  }
  else
  {
    v265 = v262;
    v262 = 0;
  }
  v11 = v262 | v265;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v262 | v265) & 1) == 0)
    goto LABEL_3;
  v266 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v267 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v267 != 0x3FFFFFFF) ? (v268 = v267 == -1) : (v268 = 1), v268))
  {
    v269 = 2;
  }
  else if (v267 >> 28)
  {
    v272 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v272 = v266;
    *(_DWORD *)(v272 + 8) = v267;
    v269 = 1;
    v266 = v272;
  }
  else
  {
    v269 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v266 = 0;
  }
  v270 = v266 | v269;
  v13 = (_QWORD *)(v270 & 0xFFFFFFFF8);
  if ((v270 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v276 = *(JSC::JSCell **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v277 = v17;
  v18 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v19 = v18;
  v20 = *((_QWORD *)this + 3473);
  if (v20)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v20, v18);
  }
  else
  {
    v278.n128_u64[0] = v18;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v21[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v21;
    v281 = v21;
    v21[2] = v19;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v278, (uint64_t *)&v281, v22, v23, v24, v25, v26, (uint64_t)&v279);
    v27 = v281;
    v28 = (_QWORD *)*((_QWORD *)this + 3479);
    *v281 = (char *)this + 27824;
    v27[1] = v28;
    *v28 = v27;
    *((_QWORD *)this + 3479) = v27;
  }
  v29 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = v29;
  v31 = *((_QWORD *)this + 3473);
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, v29);
  }
  else
  {
    v278.n128_u64[0] = v29;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v32 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    v32[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v32;
    v281 = v32;
    v32[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v278, (uint64_t *)&v281, v33, v34, v35, v36, v37, (uint64_t)&v279);
    v38 = v281;
    v39 = (_QWORD *)*((_QWORD *)this + 3479);
    *v281 = (char *)this + 27824;
    v38[1] = v39;
    *v39 = v38;
    *((_QWORD *)this + 3479) = v38;
  }
  v40 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v41 = v40;
  v42 = *((_QWORD *)this + 3473);
  if (v42)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v42, v40);
  }
  else
  {
    v278.n128_u64[0] = v40;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v43 = 0u;
    *((_OWORD *)v43 + 1) = 0u;
    v43[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v43;
    v281 = v43;
    v43[2] = v41;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v278, (uint64_t *)&v281, v44, v45, v46, v47, v48, (uint64_t)&v279);
    v49 = v281;
    v50 = (_QWORD *)*((_QWORD *)this + 3479);
    *v281 = (char *)this + 27824;
    v49[1] = v50;
    *v50 = v49;
    *((_QWORD *)this + 3479) = v49;
  }
  v51 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v52 = v51;
  v53 = *((_QWORD *)this + 3473);
  if (v53)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v53, v51);
  }
  else
  {
    v278.n128_u64[0] = v51;
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v54 = 0u;
    *((_OWORD *)v54 + 1) = 0u;
    v54[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v54;
    v281 = v54;
    v54[2] = v52;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v278, (uint64_t *)&v281, v55, v56, v57, v58, v59, (uint64_t)&v279);
    v60 = v281;
    v61 = (_QWORD *)*((_QWORD *)this + 3479);
    *v281 = (char *)this + 27824;
    v60[1] = v61;
    *v61 = v60;
    *((_QWORD *)this + 3479) = v60;
  }
  v62 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v63 = v62;
  v64 = *((_QWORD *)this + 3473);
  v275 = v62;
  if (v64)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v64, v62);
  }
  else
  {
    v278.n128_u64[0] = v62;
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v65 = 0u;
    *((_OWORD *)v65 + 1) = 0u;
    v65[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v65;
    v281 = v65;
    v65[2] = v63;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v278, (uint64_t *)&v281, v66, v67, v68, v69, v70, (uint64_t)&v279);
    v71 = v281;
    v72 = (_QWORD *)*((_QWORD *)this + 3479);
    *v281 = (char *)this + 27824;
    v71[1] = v72;
    *v72 = v71;
    *((_QWORD *)this + 3479) = v71;
  }
  v73 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v74 = (JSC::B3::BasicBlock *)v73;
  v75 = *((_QWORD *)this + 3473);
  if (v75)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v75, v73);
  }
  else
  {
    v278.n128_u64[0] = v73;
    v76 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v76 = 0u;
    *((_OWORD *)v76 + 1) = 0u;
    v76[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v76;
    v281 = v76;
    v76[2] = v74;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v278, (uint64_t *)&v281, v77, v78, v79, v80, v81, (uint64_t)&v279);
    v82 = v281;
    v83 = (_QWORD *)*((_QWORD *)this + 3479);
    *v281 = (char *)this + 27824;
    v82[1] = v83;
    *v83 = v82;
    *((_QWORD *)this + 3479) = v82;
  }
  v84 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v85 = v84;
  v86 = *((_QWORD *)this + 3473);
  if (v86)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v86, v84);
  }
  else
  {
    v278.n128_u64[0] = v84;
    v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v93 = 0u;
    *((_OWORD *)v93 + 1) = 0u;
    v93[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v93;
    v281 = v93;
    v93[2] = v85;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v278, (uint64_t *)&v281, v94, v95, v96, v97, v98, (uint64_t)&v279);
    v99 = v281;
    v100 = (_QWORD *)*((_QWORD *)this + 3479);
    *v281 = (char *)this + 27824;
    v99[1] = v100;
    *v100 = v99;
    *((_QWORD *)this + 3479) = v99;
  }
  v106 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v101 & 0x2800FFFFFFF3) == 0)
  {
LABEL_94:
    v112 = *v106;
    if (*v106)
      goto LABEL_34;
    goto LABEL_31;
  }
  if ((v101 & 4) == 0)
  {
    v106 = (JSC::B3::Value **)((char *)this + 27648);
    goto LABEL_94;
  }
LABEL_31:
  v107 = *((_QWORD *)this + 395);
  v108 = (uint64_t)v17;
  if (v107)
  {
    v109 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v107);
    v108 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v109);
  }
  v110 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 3136, v108);
  v111 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 26);
  v112 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v110, v111);
LABEL_34:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v112, v19, (uint64_t)v74, 1.0, 0.0, v102, v103, v104, v105);
  *((_QWORD *)this + 3472) = v19;
  v113 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v30;
  v114 = *((_QWORD *)this + 407);
  v273 = v113;
  v274 = v52;
  if (v114)
  {
    v115 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v114);
    v17 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v115);
  }
  v116 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3232), (uint64_t)v17, 2);
  v117 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v118 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v116, v117);
  v119 = *((_QWORD *)this + 3472);
  v120 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v121 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v118, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v120, v121);
  v279 = (uint64_t)v121;
  v126 = (char **)(v119 + 8);
  v127 = *(unsigned int *)(v119 + 20);
  if ((_DWORD)v127 == *(_DWORD *)(v119 + 16))
  {
    v256 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v126, v127 + 1, (unint64_t)&v279);
    v127 = *(unsigned int *)(v119 + 20);
    *(_QWORD *)(*(_QWORD *)(v119 + 8) + 8 * v127) = *(_QWORD *)v256;
    v128 = v279;
  }
  else
  {
    *(_QWORD *)&(*v126)[8 * v127] = v121;
    v128 = (uint64_t)v121;
  }
  *(_DWORD *)(v119 + 20) = v127 + 1;
  *(_QWORD *)(v128 + 32) = v119;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v121, (uint64_t)v74, v30, 0.0, 1.0, v122, v123, v124, v125);
  *((_QWORD *)this + 3472) = v30;
  *((_QWORD *)this + 3473) = v41;
  v129 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v130 = *((_QWORD *)this + 3472);
  v131 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v132 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *((_QWORD *)this + 3471), (uint64_t)v116, v129);
  JSC::B3::Procedure::addValueImpl(v131, v132);
  v279 = (uint64_t)v132;
  v133 = (char **)(v130 + 8);
  v134 = *(unsigned int *)(v130 + 20);
  if ((_DWORD)v134 == *(_DWORD *)(v130 + 16))
  {
    v257 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v133, v134 + 1, (unint64_t)&v279);
    v134 = *(unsigned int *)(v130 + 20);
    *(_QWORD *)(*(_QWORD *)(v130 + 8) + 8 * v134) = *(_QWORD *)v257;
    v135 = v279;
  }
  else
  {
    *(_QWORD *)&(*v133)[8 * v134] = v132;
    v135 = (uint64_t)v132;
  }
  *(_DWORD *)(v130 + 20) = v134 + 1;
  *(_QWORD *)(v135 + 32) = v130;
  v136 = *((_QWORD *)this + 263);
  if (v136)
  {
    v137 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v136);
    v132 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v132, v137);
  }
  v138 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2080), (uint64_t)v132, 1);
  v139 = *((_QWORD *)this + 3472);
  v140 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v141 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v138, *((_QWORD *)this + 3457));
  JSC::B3::Procedure::addValueImpl(v140, v141);
  v279 = (uint64_t)v141;
  v146 = (char **)(v139 + 8);
  v147 = *(unsigned int *)(v139 + 20);
  if ((_DWORD)v147 == *(_DWORD *)(v139 + 16))
  {
    v258 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v146, v147 + 1, (unint64_t)&v279);
    v147 = *(unsigned int *)(v139 + 20);
    *(_QWORD *)(*(_QWORD *)(v139 + 8) + 8 * v147) = *(_QWORD *)v258;
    v148 = v279;
  }
  else
  {
    *(_QWORD *)&(*v146)[8 * v147] = v141;
    v148 = (uint64_t)v141;
  }
  *(_DWORD *)(v139 + 20) = v147 + 1;
  *(_QWORD *)(v148 + 32) = v139;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v141, (uint64_t)v74, v41, 0.0, 1.0, v142, v143, v144, v145);
  *((_QWORD *)this + 3472) = v41;
  *((_QWORD *)this + 3473) = v274;
  v149 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v138, 2);
  v150 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v151 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v149, v150);
  v152 = *((_QWORD *)this + 671);
  v153 = (uint64_t)v151;
  if (v152)
  {
    v154 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v152);
    v153 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v151, v154);
  }
  v155 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5344), v153, 1);
  v156 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v155, 2);
  v157 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v158 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v156, v157);
  v159 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)&JSC::JSGenerator::s_info);
  v160 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v158, v159);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v160, v274, (uint64_t)v74, 1.0, 0.0, v161, v162, v163, v164);
  *((_QWORD *)this + 3472) = v274;
  *((_QWORD *)this + 3473) = v275;
  v165 = *((_QWORD *)this + 677);
  v166 = (uint64_t)v151;
  if (v165)
  {
    v167 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v165);
    v166 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v151, v167);
  }
  v168 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5392), v166, 2);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v276, v169, v170, v171, v172, v173, v174);
  v175 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v276);
  v176 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v168, v175);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v176, v275, (uint64_t)v74, 1.0, 0.0, v177, v178, v179, v180);
  *((_QWORD *)this + 3472) = v275;
  *((_QWORD *)this + 3473) = v74;
  v181 = *((_QWORD *)this + 3460);
  v182 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 40488);
  if (v182 && *(_DWORD *)(v182 + 60) <= 0x3Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197D41F5CLL);
  }
  v183 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v182);
  v185 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
  if (!*((_QWORD *)this + 1467))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11696), 0);
  v186 = *((_QWORD *)this + 1465);
  v187 = (uint64_t)Object;
  if (v186)
  {
    v188 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v186);
    v187 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v188);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v185, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11696), v187);
  v189 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0xFFFE000000000000);
  if (!*((_QWORD *)this + 1473))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11744), 1);
  v190 = *((_QWORD *)this + 1471);
  v191 = (uint64_t)Object;
  if (v190)
  {
    v192 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v190);
    v191 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v192);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v189, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11744), v191);
  v193 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1479))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11792), 2);
  v194 = *((_QWORD *)this + 1477);
  v195 = (uint64_t)Object;
  if (v194)
  {
    v196 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v194);
    v195 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v196);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v193, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11792), v195);
  v197 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1485))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11840), 3);
  v198 = *((_QWORD *)this + 1483);
  v199 = (uint64_t)Object;
  if (v198)
  {
    v200 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v198);
    v199 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v200);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v197, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11840), v199);
  v201 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1491))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11888), 4);
  v202 = *((_QWORD *)this + 1489);
  v203 = (uint64_t)Object;
  if (v202)
  {
    v204 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202);
    v203 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v204);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v201, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11888), v203);
  v205 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1497))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11936), 5);
  v206 = *((_QWORD *)this + 1495);
  v207 = (uint64_t)Object;
  if (v206)
  {
    v208 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v206);
    v207 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v208);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v205, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11936), v207);
  v209 = *((_QWORD *)this + 3472);
  v210 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v211 = *((_QWORD *)this + 3471);
  v212 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v212 + 8) = -1;
  *(_WORD *)(v212 + 12) = 152;
  *(_BYTE *)(v212 + 20) = 1;
  *(_QWORD *)v212 = &unk_1E357EDA0;
  *(_DWORD *)(v212 + 16) = 0;
  *(_QWORD *)(v212 + 40) = 0;
  *(_QWORD *)(v212 + 48) = Object;
  *(_QWORD *)(v212 + 24) = v211;
  *(_QWORD *)(v212 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v210, (JSC::B3::Value *)v212);
  v279 = v212;
  v216 = (char **)(v209 + 8);
  v217 = *(unsigned int *)(v209 + 20);
  if ((_DWORD)v217 == *(_DWORD *)(v209 + 16))
  {
    v259 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v216, v217 + 1, (unint64_t)&v279);
    v217 = *(unsigned int *)(v209 + 20);
    *(_QWORD *)(*(_QWORD *)(v209 + 8) + 8 * v217) = *(_QWORD *)v259;
    v218 = v279;
  }
  else
  {
    *(_QWORD *)&(*v216)[8 * v217] = v212;
    v218 = v212;
  }
  *(_DWORD *)(v209 + 20) = v217 + 1;
  *(_QWORD *)(v218 + 32) = v209;
  v219 = *((_QWORD *)this + 3472);
  v220 = *((_QWORD *)this + 3470);
  v221 = *((_QWORD *)this + 3471);
  v279 = v85;
  v280 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v219, v220, 154, v221, &v279, v213, v214, v215);
  *((_QWORD *)this + 3472) = v74;
  *((_QWORD *)this + 3473) = v85;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v276, v222, v223, v224, v225, v226, v227);
  v278.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v276);
  v233 = *((_QWORD *)this + 3472);
  v234 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v235 = *((_QWORD *)this + 3471);
  v236 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v236 + 8) = -1;
  *(_WORD *)(v236 + 12) = 152;
  *(_DWORD *)(v236 + 16) = 0;
  *(_BYTE *)(v236 + 20) = 1;
  *(_QWORD *)v236 = &unk_1E357EDA0;
  *(_QWORD *)(v236 + 40) = 0;
  *(_QWORD *)(v236 + 48) = v232;
  *(_QWORD *)(v236 + 24) = v235;
  *(_QWORD *)(v236 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v234, (JSC::B3::Value *)v236);
  v279 = v236;
  v240 = (char **)(v233 + 8);
  v241 = *(unsigned int *)(v233 + 20);
  if ((_DWORD)v241 == *(_DWORD *)(v233 + 16))
  {
    v260 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v240, v241 + 1, (unint64_t)&v279);
    v241 = *(unsigned int *)(v233 + 20);
    *(_QWORD *)(*(_QWORD *)(v233 + 8) + 8 * v241) = *(_QWORD *)v260;
    v242 = v279;
  }
  else
  {
    *(_QWORD *)&(*v240)[8 * v241] = v236;
    v242 = v236;
  }
  *(_DWORD *)(v233 + 20) = v241 + 1;
  *(_QWORD *)(v242 + 32) = v233;
  v243 = *((_QWORD *)this + 3472);
  v244 = *((_QWORD *)this + 3470);
  v245 = *((_QWORD *)this + 3471);
  v279 = v85;
  v280 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v243, v244, 154, v245, &v279, v237, v238, v239);
  *((_QWORD *)this + 3472) = v85;
  *((_QWORD *)this + 3473) = v273;
  v246 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v247 = *((_QWORD *)this + 3471);
  v248 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v248 = off_1E357F5F0;
  *(_DWORD *)(v248 + 8) = -1;
  *(_WORD *)(v248 + 12) = 153;
  *(_DWORD *)(v248 + 16) = 2;
  *(_BYTE *)(v248 + 20) = 0;
  *(_QWORD *)(v248 + 24) = v247;
  *(_QWORD *)(v248 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v246, (JSC::B3::Value *)v248);
  v279 = v248;
  v249 = (char **)(v85 + 8);
  v250 = *(unsigned int *)(v85 + 20);
  if ((_DWORD)v250 == *(_DWORD *)(v85 + 16))
  {
    v261 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v249, v250 + 1, (unint64_t)&v279);
    v250 = *(unsigned int *)(v85 + 20);
    *(_QWORD *)(*(_QWORD *)(v85 + 8) + 8 * v250) = *(_QWORD *)v261;
    v251 = v279;
  }
  else
  {
    *(_QWORD *)&(*v249)[8 * v250] = v248;
    v251 = v248;
  }
  *(_DWORD *)(v85 + 20) = v250 + 1;
  *(_QWORD *)(v251 + 32) = v85;
  if ((*(_WORD *)(v212 + 12) & 0xFFF) == 0x98)
    v252 = v212;
  else
    v252 = 0;
  *(_QWORD *)(v252 + 40) = v248;
  if ((*(_WORD *)(v236 + 12) & 0xFFF) == 0x98)
    v253 = v236;
  else
    v253 = 0;
  *(_QWORD *)(v253 + 40) = v248;
  v281 = (_QWORD *)*((_QWORD *)this + 3528);
  v254 = *((_QWORD *)this + 3521);
  v278.n128_u64[0] = v248;
  v278.n128_u64[1] = v254;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v279, (uint64_t *)this + 3492, (uint64_t *)&v281, &v278).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateAsyncGenerator(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  JSC::B3::BasicBlock *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  JSC::B3::Value **v106;
  uint64_t v107;
  uint64_t v108;
  JSC::B3::Value *v109;
  JSC::B3::Value *v110;
  JSC::B3::Value *v111;
  JSC::B3::Value *v112;
  uint64_t v113;
  uint64_t v114;
  JSC::B3::Value *v115;
  JSC::B3::Value *v116;
  JSC::B3::Value *v117;
  JSC::B3::Value *v118;
  uint64_t v119;
  JSC::B3::Value *v120;
  JSC::B3::Value *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  JSC::B3::Value *v131;
  JSC::B3::Value *v132;
  char **v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  uint64_t v139;
  JSC::B3::Value *v140;
  JSC::B3::Value *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char **v146;
  uint64_t v147;
  uint64_t v148;
  JSC::B3::Value *v149;
  JSC::B3::Value *v150;
  JSC::B3::Value *v151;
  uint64_t v152;
  uint64_t v153;
  JSC::B3::Value *v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  JSC::B3::Value *v157;
  JSC::B3::Value *v158;
  JSC::B3::Value *v159;
  JSC::B3::Value *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::B3::Value *v167;
  JSC::B3::Value *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  JSC::B3::Value *v175;
  JSC::B3::Value *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  JSC::B3::Value *Object;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  JSC::B3::Value *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  JSC::B3::Value *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  JSC::B3::Value *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  JSC::B3::Value *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  JSC::B3::Value *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  JSC::B3::Value *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  JSC::B3::Value *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  JSC::B3::Value *v216;
  uint64_t v217;
  JSC::B3::Value *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char **v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  JSC::B3::Value *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char **v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  JSC::B3::Value *v254;
  uint64_t v255;
  uint64_t v256;
  char **v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  double result;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  unsigned int v271;
  BOOL v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  BOOL v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  JSC::JSCell *v284;
  JSC::B3::Value *v285;
  __n128 v286;
  uint64_t v287;
  char v288;
  _QWORD *v289;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v270 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v271 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v271 != 0x3FFFFFFF) ? (v272 = v271 == -1) : (v272 = 1), v272))
  {
    v273 = 2;
  }
  else if (v271 >> 28)
  {
    v279 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v279 = v270;
    *(_DWORD *)(v279 + 8) = v271;
    v273 = 1;
    v270 = v279;
  }
  else
  {
    v273 = v270;
    v270 = 0;
  }
  v11 = v270 | v273;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v270 | v273) & 1) == 0)
    goto LABEL_3;
  v274 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v275 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v275 != 0x3FFFFFFF) ? (v276 = v275 == -1) : (v276 = 1), v276))
  {
    v277 = 2;
  }
  else if (v275 >> 28)
  {
    v280 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v280 = v274;
    *(_DWORD *)(v280 + 8) = v275;
    v277 = 1;
    v274 = v280;
  }
  else
  {
    v277 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v274 = 0;
  }
  v278 = v274 | v277;
  v13 = (_QWORD *)(v278 & 0xFFFFFFFF8);
  if ((v278 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v284 = *(JSC::JSCell **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v285 = v17;
  v18 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v19 = v18;
  v20 = *((_QWORD *)this + 3473);
  if (v20)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v20, v18);
  }
  else
  {
    v286.n128_u64[0] = v18;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v21[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v21;
    v289 = v21;
    v21[2] = v19;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v286, (uint64_t *)&v289, v22, v23, v24, v25, v26, (uint64_t)&v287);
    v27 = v289;
    v28 = (_QWORD *)*((_QWORD *)this + 3479);
    *v289 = (char *)this + 27824;
    v27[1] = v28;
    *v28 = v27;
    *((_QWORD *)this + 3479) = v27;
  }
  v29 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = v29;
  v31 = *((_QWORD *)this + 3473);
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, v29);
  }
  else
  {
    v286.n128_u64[0] = v29;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v32 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    v32[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v32;
    v289 = v32;
    v32[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v286, (uint64_t *)&v289, v33, v34, v35, v36, v37, (uint64_t)&v287);
    v38 = v289;
    v39 = (_QWORD *)*((_QWORD *)this + 3479);
    *v289 = (char *)this + 27824;
    v38[1] = v39;
    *v39 = v38;
    *((_QWORD *)this + 3479) = v38;
  }
  v40 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v41 = v40;
  v42 = *((_QWORD *)this + 3473);
  if (v42)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v42, v40);
  }
  else
  {
    v286.n128_u64[0] = v40;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v43 = 0u;
    *((_OWORD *)v43 + 1) = 0u;
    v43[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v43;
    v289 = v43;
    v43[2] = v41;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v286, (uint64_t *)&v289, v44, v45, v46, v47, v48, (uint64_t)&v287);
    v49 = v289;
    v50 = (_QWORD *)*((_QWORD *)this + 3479);
    *v289 = (char *)this + 27824;
    v49[1] = v50;
    *v50 = v49;
    *((_QWORD *)this + 3479) = v49;
  }
  v51 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v52 = v51;
  v53 = *((_QWORD *)this + 3473);
  if (v53)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v53, v51);
  }
  else
  {
    v286.n128_u64[0] = v51;
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v54 = 0u;
    *((_OWORD *)v54 + 1) = 0u;
    v54[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v54;
    v289 = v54;
    v54[2] = v52;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v286, (uint64_t *)&v289, v55, v56, v57, v58, v59, (uint64_t)&v287);
    v60 = v289;
    v61 = (_QWORD *)*((_QWORD *)this + 3479);
    *v289 = (char *)this + 27824;
    v60[1] = v61;
    *v61 = v60;
    *((_QWORD *)this + 3479) = v60;
  }
  v62 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v63 = v62;
  v64 = *((_QWORD *)this + 3473);
  v283 = v62;
  if (v64)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v64, v62);
  }
  else
  {
    v286.n128_u64[0] = v62;
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v65 = 0u;
    *((_OWORD *)v65 + 1) = 0u;
    v65[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v65;
    v289 = v65;
    v65[2] = v63;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v286, (uint64_t *)&v289, v66, v67, v68, v69, v70, (uint64_t)&v287);
    v71 = v289;
    v72 = (_QWORD *)*((_QWORD *)this + 3479);
    *v289 = (char *)this + 27824;
    v71[1] = v72;
    *v72 = v71;
    *((_QWORD *)this + 3479) = v71;
  }
  v73 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v74 = (JSC::B3::BasicBlock *)v73;
  v75 = *((_QWORD *)this + 3473);
  if (v75)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v75, v73);
  }
  else
  {
    v286.n128_u64[0] = v73;
    v76 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v76 = 0u;
    *((_OWORD *)v76 + 1) = 0u;
    v76[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v76;
    v289 = v76;
    v76[2] = v74;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v286, (uint64_t *)&v289, v77, v78, v79, v80, v81, (uint64_t)&v287);
    v82 = v289;
    v83 = (_QWORD *)*((_QWORD *)this + 3479);
    *v289 = (char *)this + 27824;
    v82[1] = v83;
    *v83 = v82;
    *((_QWORD *)this + 3479) = v82;
  }
  v84 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v85 = v84;
  v86 = *((_QWORD *)this + 3473);
  if (v86)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v86, v84);
  }
  else
  {
    v286.n128_u64[0] = v84;
    v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v93 = 0u;
    *((_OWORD *)v93 + 1) = 0u;
    v93[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v93;
    v289 = v93;
    v93[2] = v85;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v286, (uint64_t *)&v289, v94, v95, v96, v97, v98, (uint64_t)&v287);
    v99 = v289;
    v100 = (_QWORD *)*((_QWORD *)this + 3479);
    *v289 = (char *)this + 27824;
    v99[1] = v100;
    *v100 = v99;
    *((_QWORD *)this + 3479) = v99;
  }
  v106 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v101 & 0x2800FFFFFFF3) == 0)
  {
LABEL_102:
    v112 = *v106;
    if (*v106)
      goto LABEL_34;
    goto LABEL_31;
  }
  if ((v101 & 4) == 0)
  {
    v106 = (JSC::B3::Value **)((char *)this + 27648);
    goto LABEL_102;
  }
LABEL_31:
  v107 = *((_QWORD *)this + 395);
  v108 = (uint64_t)v17;
  if (v107)
  {
    v109 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v107);
    v108 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v109);
  }
  v110 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 3136, v108);
  v111 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 26);
  v112 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v110, v111);
LABEL_34:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v112, v19, (uint64_t)v74, 1.0, 0.0, v102, v103, v104, v105);
  *((_QWORD *)this + 3472) = v19;
  v113 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v30;
  v114 = *((_QWORD *)this + 407);
  v281 = v113;
  v282 = v52;
  if (v114)
  {
    v115 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v114);
    v17 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v115);
  }
  v116 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3232), (uint64_t)v17, 2);
  v117 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v118 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v116, v117);
  v119 = *((_QWORD *)this + 3472);
  v120 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v121 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v118, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v120, v121);
  v287 = (uint64_t)v121;
  v126 = (char **)(v119 + 8);
  v127 = *(unsigned int *)(v119 + 20);
  if ((_DWORD)v127 == *(_DWORD *)(v119 + 16))
  {
    v264 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v126, v127 + 1, (unint64_t)&v287);
    v127 = *(unsigned int *)(v119 + 20);
    *(_QWORD *)(*(_QWORD *)(v119 + 8) + 8 * v127) = *(_QWORD *)v264;
    v128 = v287;
  }
  else
  {
    *(_QWORD *)&(*v126)[8 * v127] = v121;
    v128 = (uint64_t)v121;
  }
  *(_DWORD *)(v119 + 20) = v127 + 1;
  *(_QWORD *)(v128 + 32) = v119;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v121, (uint64_t)v74, v30, 0.0, 1.0, v122, v123, v124, v125);
  *((_QWORD *)this + 3472) = v30;
  *((_QWORD *)this + 3473) = v41;
  v129 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v130 = *((_QWORD *)this + 3472);
  v131 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v132 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *((_QWORD *)this + 3471), (uint64_t)v116, v129);
  JSC::B3::Procedure::addValueImpl(v131, v132);
  v287 = (uint64_t)v132;
  v133 = (char **)(v130 + 8);
  v134 = *(unsigned int *)(v130 + 20);
  if ((_DWORD)v134 == *(_DWORD *)(v130 + 16))
  {
    v265 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v133, v134 + 1, (unint64_t)&v287);
    v134 = *(unsigned int *)(v130 + 20);
    *(_QWORD *)(*(_QWORD *)(v130 + 8) + 8 * v134) = *(_QWORD *)v265;
    v135 = v287;
  }
  else
  {
    *(_QWORD *)&(*v133)[8 * v134] = v132;
    v135 = (uint64_t)v132;
  }
  *(_DWORD *)(v130 + 20) = v134 + 1;
  *(_QWORD *)(v135 + 32) = v130;
  v136 = *((_QWORD *)this + 263);
  if (v136)
  {
    v137 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v136);
    v132 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v132, v137);
  }
  v138 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2080), (uint64_t)v132, 1);
  v139 = *((_QWORD *)this + 3472);
  v140 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v141 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v138, *((_QWORD *)this + 3457));
  JSC::B3::Procedure::addValueImpl(v140, v141);
  v287 = (uint64_t)v141;
  v146 = (char **)(v139 + 8);
  v147 = *(unsigned int *)(v139 + 20);
  if ((_DWORD)v147 == *(_DWORD *)(v139 + 16))
  {
    v266 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v146, v147 + 1, (unint64_t)&v287);
    v147 = *(unsigned int *)(v139 + 20);
    *(_QWORD *)(*(_QWORD *)(v139 + 8) + 8 * v147) = *(_QWORD *)v266;
    v148 = v287;
  }
  else
  {
    *(_QWORD *)&(*v146)[8 * v147] = v141;
    v148 = (uint64_t)v141;
  }
  *(_DWORD *)(v139 + 20) = v147 + 1;
  *(_QWORD *)(v148 + 32) = v139;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v141, (uint64_t)v74, v41, 0.0, 1.0, v142, v143, v144, v145);
  *((_QWORD *)this + 3472) = v41;
  *((_QWORD *)this + 3473) = v282;
  v149 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v138, 2);
  v150 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v151 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v149, v150);
  v152 = *((_QWORD *)this + 671);
  v153 = (uint64_t)v151;
  if (v152)
  {
    v154 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v152);
    v153 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v151, v154);
  }
  v155 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5344), v153, 1);
  v156 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v155, 2);
  v157 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v158 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v156, v157);
  v159 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)&JSC::JSAsyncGenerator::s_info);
  v160 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v158, v159);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v160, v282, (uint64_t)v74, 1.0, 0.0, v161, v162, v163, v164);
  *((_QWORD *)this + 3472) = v282;
  *((_QWORD *)this + 3473) = v283;
  v165 = *((_QWORD *)this + 677);
  v166 = (uint64_t)v151;
  if (v165)
  {
    v167 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v165);
    v166 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v151, v167);
  }
  v168 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5392), v166, 2);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v284, v169, v170, v171, v172, v173, v174);
  v175 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v284);
  v176 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v168, v175);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v176, v283, (uint64_t)v74, 1.0, 0.0, v177, v178, v179, v180);
  *((_QWORD *)this + 3472) = v283;
  *((_QWORD *)this + 3473) = v74;
  v181 = *((_QWORD *)this + 3460);
  v182 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 40336);
  if (v182 && *(_DWORD *)(v182 + 60) <= 0x4Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197D43018);
  }
  v183 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v182);
  v185 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
  if (!*((_QWORD *)this + 1467))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11696), 0);
  v186 = *((_QWORD *)this + 1465);
  v187 = (uint64_t)Object;
  if (v186)
  {
    v188 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v186);
    v187 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v188);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v185, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11696), v187);
  v189 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0xFFFE0000FFFFFFFDLL);
  if (!*((_QWORD *)this + 1473))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11744), 1);
  v190 = *((_QWORD *)this + 1471);
  v191 = (uint64_t)Object;
  if (v190)
  {
    v192 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v190);
    v191 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v192);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v189, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11744), v191);
  v193 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1479))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11792), 2);
  v194 = *((_QWORD *)this + 1477);
  v195 = (uint64_t)Object;
  if (v194)
  {
    v196 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v194);
    v195 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v196);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v193, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11792), v195);
  v197 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1485))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11840), 3);
  v198 = *((_QWORD *)this + 1483);
  v199 = (uint64_t)Object;
  if (v198)
  {
    v200 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v198);
    v199 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v200);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v197, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11840), v199);
  v201 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  if (!*((_QWORD *)this + 1491))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11888), 4);
  v202 = *((_QWORD *)this + 1489);
  v203 = (uint64_t)Object;
  if (v202)
  {
    v204 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202);
    v203 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v204);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v201, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11888), v203);
  v205 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0xFFFE000000000000);
  if (!*((_QWORD *)this + 1497))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11936), 5);
  v206 = *((_QWORD *)this + 1495);
  v207 = (uint64_t)Object;
  if (v206)
  {
    v208 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v206);
    v207 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v208);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v205, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11936), v207);
  v209 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
  if (!*((_QWORD *)this + 1503))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11984), 6);
  v210 = *((_QWORD *)this + 1501);
  v211 = (uint64_t)Object;
  if (v210)
  {
    v212 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v210);
    v211 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v212);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v209, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11984), v211);
  v213 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
  if (!*((_QWORD *)this + 1509))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 12032), 7);
  v214 = *((_QWORD *)this + 1507);
  v215 = (uint64_t)Object;
  if (v214)
  {
    v216 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v214);
    v215 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object, v216);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v213, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 12032), v215);
  v217 = *((_QWORD *)this + 3472);
  v218 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v219 = *((_QWORD *)this + 3471);
  v220 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v220 + 8) = -1;
  *(_WORD *)(v220 + 12) = 152;
  *(_BYTE *)(v220 + 20) = 1;
  *(_QWORD *)v220 = &unk_1E357EDA0;
  *(_DWORD *)(v220 + 16) = 0;
  *(_QWORD *)(v220 + 40) = 0;
  *(_QWORD *)(v220 + 48) = Object;
  *(_QWORD *)(v220 + 24) = v219;
  *(_QWORD *)(v220 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v218, (JSC::B3::Value *)v220);
  v287 = v220;
  v224 = (char **)(v217 + 8);
  v225 = *(unsigned int *)(v217 + 20);
  if ((_DWORD)v225 == *(_DWORD *)(v217 + 16))
  {
    v267 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v224, v225 + 1, (unint64_t)&v287);
    v225 = *(unsigned int *)(v217 + 20);
    *(_QWORD *)(*(_QWORD *)(v217 + 8) + 8 * v225) = *(_QWORD *)v267;
    v226 = v287;
  }
  else
  {
    *(_QWORD *)&(*v224)[8 * v225] = v220;
    v226 = v220;
  }
  *(_DWORD *)(v217 + 20) = v225 + 1;
  *(_QWORD *)(v226 + 32) = v217;
  v227 = *((_QWORD *)this + 3472);
  v228 = *((_QWORD *)this + 3470);
  v229 = *((_QWORD *)this + 3471);
  v287 = v85;
  v288 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v227, v228, 154, v229, &v287, v221, v222, v223);
  *((_QWORD *)this + 3472) = v74;
  *((_QWORD *)this + 3473) = v85;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v284, v230, v231, v232, v233, v234, v235);
  v286.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v284);
  v241 = *((_QWORD *)this + 3472);
  v242 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v243 = *((_QWORD *)this + 3471);
  v244 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v244 + 8) = -1;
  *(_WORD *)(v244 + 12) = 152;
  *(_DWORD *)(v244 + 16) = 0;
  *(_BYTE *)(v244 + 20) = 1;
  *(_QWORD *)v244 = &unk_1E357EDA0;
  *(_QWORD *)(v244 + 40) = 0;
  *(_QWORD *)(v244 + 48) = v240;
  *(_QWORD *)(v244 + 24) = v243;
  *(_QWORD *)(v244 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v242, (JSC::B3::Value *)v244);
  v287 = v244;
  v248 = (char **)(v241 + 8);
  v249 = *(unsigned int *)(v241 + 20);
  if ((_DWORD)v249 == *(_DWORD *)(v241 + 16))
  {
    v268 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v248, v249 + 1, (unint64_t)&v287);
    v249 = *(unsigned int *)(v241 + 20);
    *(_QWORD *)(*(_QWORD *)(v241 + 8) + 8 * v249) = *(_QWORD *)v268;
    v250 = v287;
  }
  else
  {
    *(_QWORD *)&(*v248)[8 * v249] = v244;
    v250 = v244;
  }
  *(_DWORD *)(v241 + 20) = v249 + 1;
  *(_QWORD *)(v250 + 32) = v241;
  v251 = *((_QWORD *)this + 3472);
  v252 = *((_QWORD *)this + 3470);
  v253 = *((_QWORD *)this + 3471);
  v287 = v85;
  v288 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v251, v252, 154, v253, &v287, v245, v246, v247);
  *((_QWORD *)this + 3472) = v85;
  *((_QWORD *)this + 3473) = v281;
  v254 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v255 = *((_QWORD *)this + 3471);
  v256 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v256 = off_1E357F5F0;
  *(_DWORD *)(v256 + 8) = -1;
  *(_WORD *)(v256 + 12) = 153;
  *(_DWORD *)(v256 + 16) = 2;
  *(_BYTE *)(v256 + 20) = 0;
  *(_QWORD *)(v256 + 24) = v255;
  *(_QWORD *)(v256 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v254, (JSC::B3::Value *)v256);
  v287 = v256;
  v257 = (char **)(v85 + 8);
  v258 = *(unsigned int *)(v85 + 20);
  if ((_DWORD)v258 == *(_DWORD *)(v85 + 16))
  {
    v269 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v257, v258 + 1, (unint64_t)&v287);
    v258 = *(unsigned int *)(v85 + 20);
    *(_QWORD *)(*(_QWORD *)(v85 + 8) + 8 * v258) = *(_QWORD *)v269;
    v259 = v287;
  }
  else
  {
    *(_QWORD *)&(*v257)[8 * v258] = v256;
    v259 = v256;
  }
  *(_DWORD *)(v85 + 20) = v258 + 1;
  *(_QWORD *)(v259 + 32) = v85;
  if ((*(_WORD *)(v220 + 12) & 0xFFF) == 0x98)
    v260 = v220;
  else
    v260 = 0;
  *(_QWORD *)(v260 + 40) = v256;
  if ((*(_WORD *)(v244 + 12) & 0xFFF) == 0x98)
    v261 = v244;
  else
    v261 = 0;
  *(_QWORD *)(v261 + 40) = v256;
  v289 = (_QWORD *)*((_QWORD *)this + 3528);
  v262 = *((_QWORD *)this + 3521);
  v286.n128_u64[0] = v256;
  v286.n128_u64[1] = v262;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v287, (uint64_t *)this + 3492, (uint64_t *)&v289, &v286).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSpread(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  int8x8_t v27;
  JSC::DFG::Node *v28;
  unint64_t v29;
  JSC::DFG::Graph *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v47;
  JSC::B3::Value *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::BasicBlock *v52;
  JSC::B3::Value *v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v64;
  JSC::B3::Value *v65;
  JSC::B3::Value *v66;
  JSC::B3::Value *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  JSC::B3::Value *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  JSC::B3::Value *v86;
  uint64_t v87;
  JSC::B3::Value *v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC::B3::Value *v94;
  JSC::B3::Value *v95;
  uint64_t v96;
  uint64_t v97;
  JSC::B3::Value *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::B3::Value *v102;
  uint64_t v103;
  uint64_t v104;
  JSC::B3::Value *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::B3::Value *v110;
  JSC::B3::Value *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  JSC::B3::Value *v116;
  JSC::B3::Value *v117;
  uint64_t v118;
  JSC::B3::Value *v119;
  JSC::B3::Value *v120;
  JSC::B3::Value *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::FTL::IndexedAbstractHeap *v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  JSC::B3::Value *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  JSC::B3::Value *v132;
  JSC::B3::Value *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::B3::Value *v138;
  uint64_t v139;
  JSC::B3::Value *v140;
  uint64_t v141;
  JSC::FTL::IndexedAbstractHeap *v142;
  uint64_t v143;
  JSC::B3::Value *v144;
  JSC::B3::Value *v145;
  uint64_t v146;
  JSC::B3::Value *v147;
  uint64_t v148;
  uint64_t v149;
  JSC::FTL::IndexedAbstractHeap *v150;
  uint64_t v151;
  JSC::B3::Value *v152;
  JSC::B3::Value *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  JSC::B3::Value *v157;
  JSC::B3::Value *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  JSC::B3::Value *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  JSC::B3::BasicBlock *v185;
  uint64_t v186;
  JSC::B3::BasicBlock *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  JSC::B3::Value *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  JSC::B3::Value *v205;
  JSC::B3::Value *v206;
  JSC::B3::Value *v207;
  JSC::B3::Value *v208;
  JSC::B3::Value *v209;
  uint64_t v210;
  JSC::B3::Value *v211;
  JSC::B3::Value *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  JSC::B3::Value *v217;
  JSC::B3::Value *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  JSC::B3::Value *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  JSC::B3::Value *v249;
  JSC::B3::Value *v250;
  JSC::B3::Value *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  JSC::B3::Value *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  JSC::B3::Value *v260;
  uint64_t v261;
  JSC::B3::Value *v262;
  uint64_t v263;
  JSC::FTL::IndexedAbstractHeap *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  JSC::FTL::IndexedAbstractHeap *v268;
  uint64_t v269;
  JSC::B3::Value *v270;
  JSC::B3::Value *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  JSC::B3::Value *v275;
  JSC::B3::Value *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  JSC::B3::BasicBlock *v281;
  JSC::B3::BasicBlock *v282;
  uint64_t v283;
  JSC::B3::Value *v284;
  JSC::B3::Value *v285;
  JSC::B3::Value *v286;
  JSC::B3::Value *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  JSC::B3::Value *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  JSC::B3::Value *v319;
  uint64_t v320;
  JSC::B3::Value *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  JSC::B3::Value *v326;
  uint64_t v327;
  uint64_t v328;
  JSC::FTL::IndexedAbstractHeap *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  JSC::B3::Value *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  JSC::JSCell *v339;
  JSC::B3::Value *v340;
  uint64_t v341;
  uint64_t v342;
  JSC::B3::BasicBlock *v343;
  JSC::B3::BasicBlock *v344;
  JSC::B3::Value *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350[2];

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(v350, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, v350, v3, v4, v5, v6, v7, v8);
  if ((v350[0] & 1) != 0 && (v350[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v350[0] & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v19 = *(unsigned __int16 *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v19 == 352)
  {
    v183 = **(_QWORD **)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if ((*(_BYTE *)(v183 + 4) & 0xE) == 8)
    {
      v47 = this;
    }
    else
    {
      v281 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v282 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v283 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 8 * *(unsigned int *)(v183 + 8) + 16);
      v286 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(v183 + 8));
      JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v286, v285, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
      v287 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(v183 + 8));
      JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v287, v285, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 352));
      v288 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v284);
      v290 = v289;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v282, v291, v292, v293, v294, v295, v296);
      *((_QWORD *)this + 3472) = v281;
      v297 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v282;
      v348 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(v183 + 8));
      v310 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v309);
      v312 = v311;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v282, v313, v314, v315, v316, v317, v318);
      *((_QWORD *)this + 3472) = v282;
      *((_QWORD *)this + 3473) = v297;
      v319 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v288, v290, v310, v312);
      if (*(_DWORD *)(v183 + 8))
      {
        v321 = (JSC::B3::Value *)v320;
        v322 = 0;
        v323 = v183 + 16;
        do
        {
          if ((*(_BYTE *)(v183 + 4) & 0xE) == 6)
            v324 = *(_QWORD *)(v323 + 8 * v322) + 0x2000000000000;
          else
            v324 = *(_QWORD *)(v323 + 8 * v322);
          v325 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v324);
          v326 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v322);
          if ((v322 & 0x80000000) != 0)
            v328 = COERCE__INT64((double)v322) + 0x2000000000000;
          else
            v328 = v322 | 0xFFFE000000000000;
          v329 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 18568), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v321, v326, v328, 0, 0, v327);
          JSC::FTL::Output::store((uint64_t)this + 27640, v325, v329, v330);
          ++v322;
        }
        while (v322 < *(unsigned int *)(v183 + 8));
      }
      v47 = this;
      v48 = v319;
    }
  }
  else if (v19 == 349)
  {
    v184 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v185 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v186 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v187 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v188 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v189 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFF00FFFFFFFFFFFFLL);
    v190 = (uint64_t *)(v189 & 0xFFFFFFFF8);
    if ((v189 & 1) != 0)
      v190 = (uint64_t *)*v190;
    v191 = *(unsigned int *)((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v192 = JSC::AssemblyHelpers::argumentsStart(v190);
    v345 = v199;
    v349 = (uint64_t)v205;
    v206 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v205, 2);
    v207 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 3);
    v208 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v206, v207);
    v209 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 16);
    v210 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v208, v209);
    v211 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x10000000);
    v212 = JSC::FTL::Output::above((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v205, v211);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v212, (uint64_t)v187, v184, 0.0, 1.0, v213, v214, v215, v216);
    *((_QWORD *)this + 3472) = v184;
    v347 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v187;
    JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v205, v218, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 352));
    JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v205, v218, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
    v219 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v217);
    v221 = v220;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v185, v222, v223, v224, v225, v226, v227);
    *((_QWORD *)this + 3472) = v187;
    *((_QWORD *)this + 3473) = v185;
    v240 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v239);
    v242 = v241;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v185, v243, v244, v245, v246, v247, v248);
    *((_QWORD *)this + 3472) = v185;
    *((_QWORD *)this + 3473) = v186;
    v249 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v219, v221, v240, v242);
    v251 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
    v252 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v251);
    v254 = v253;
    v255 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v205);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v255, v188, v186, NAN, NAN, v256, v257, v258, v259);
    *((_QWORD *)this + 3472) = v186;
    *((_QWORD *)this + 3473) = v188;
    v260 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 2);
    v262 = v260;
    if (v252 || v254)
    {
      if ((*(_WORD *)(v252 + 12) & 0xFFF) == 0x98)
        v263 = v252;
      else
        v263 = 0;
      *(_QWORD *)(v263 + 40) = v260;
    }
    v264 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 22536), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v345, v260, 0, 0, 0, v261);
    v266 = JSC::FTL::Output::load((uint64_t)this + 27640, v264, v265, 2);
    v268 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 18568), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v250, v262, 0, 0, 0, v267);
    JSC::FTL::Output::store((uint64_t)this + 27640, v266, v268, v269);
    v270 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
    v271 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v270, v262);
    v272 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v271);
    if (v272 || v273)
    {
      if ((*(_WORD *)(v272 + 12) & 0xFFF) == 0x98)
        v274 = v272;
      else
        v274 = 0;
      *(_QWORD *)(v274 + 40) = v262;
    }
    v275 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v205, 2);
    v276 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v271, v275);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v276, v186, v188, NAN, NAN, v277, v278, v279, v280);
    *((_QWORD *)this + 3472) = v188;
    *((_QWORD *)this + 3473) = v347;
    v47 = this;
    v48 = v249;
  }
  else
  {
    v349 = (uint64_t)v26;
    v28 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
    v29 = *((_QWORD *)v28 + 3);
    if ((v29 & 0xFC000000000000) == 0x30000000000000)
    {
      v28 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
      v29 = *((_QWORD *)v28 + 3);
    }
    v30 = *(JSC::DFG::Graph **)this;
    v31 = *((_QWORD *)this + 3505);
    v32 = (_QWORD *)(v31 + 24);
    v33 = (_QWORD *)(v31 + 8);
    if ((v29 & 1) != 0)
      v33 = v32;
    v34 = *v33 + 32 * *(unsigned int *)((v29 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v35 = (void *)*((unsigned int *)this + 7030);
    if ((_DWORD)v35 != *(_DWORD *)(v34 + 20))
    {
      if ((*(_QWORD *)(v34 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v34, v35, v20, v21, v22, v23, v24, v25);
      else
        *(_DWORD *)(v34 + 20) = (_DWORD)v35;
    }
    if (JSC::DFG::Graph::canDoFastSpread(v30, v28, (const JSC::DFG::AbstractValue *)v34, v21, v22, v23, v24, v25))
    {
      v339 = v16;
      v49 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v50 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v51 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v332 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v341 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v346 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v342 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v52 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v344 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v53 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2992));
      v54 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 14);
      v333 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53, v54);
      v55 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
      v56 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v333, v55);
      v57 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
      v58 = JSC::FTL::Output::belowOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v56, v57);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v58, v49, (uint64_t)v52, NAN, NAN, v59, v60, v61, v62);
      *((_QWORD *)this + 3472) = v49;
      v338 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v50;
      Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3568));
      v64 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 31);
      v65 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53, v64);
      v66 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 25);
      v67 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v65, v66);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v67, v50, v51, NAN, NAN, v68, v69, v70, v71);
      *((_QWORD *)this + 3472) = v50;
      *((_QWORD *)this + 3473) = v51;
      v72 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -16);
      v73 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, v72);
      v74 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v73);
      v336 = v75;
      v337 = v74;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v344, v76, v77, v78, v79, v80, v81);
      *((_QWORD *)this + 3472) = v51;
      *((_QWORD *)this + 3473) = v342;
      v340 = Ptr;
      v82 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
      v83 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v82, 2);
      v84 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 3);
      v85 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v83, v84);
      v86 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 16);
      v87 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v85, v86);
      v88 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x10000000);
      v89 = JSC::FTL::Output::above((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v82, v88);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v89, (uint64_t)v52, v342, 0.0, 1.0, v90, v91, v92, v93);
      *((_QWORD *)this + 3472) = v342;
      *((_QWORD *)this + 3473) = v332;
      v343 = v52;
      JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v82, v95, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 352));
      JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v82, v95, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
      v96 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v94);
      v334 = v97;
      v335 = v96;
      v98 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
      v99 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v98);
      v101 = v100;
      v102 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
      v103 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v102);
      v331 = v104;
      v105 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v82);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v105, (uint64_t)v344, v332, NAN, NAN, v106, v107, v108, v109);
      *((_QWORD *)this + 3472) = v332;
      *((_QWORD *)this + 3473) = v341;
      v110 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 6);
      v111 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v333, v110);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v111, v346, v341, NAN, NAN, v112, v113, v114, v115);
      *((_QWORD *)this + 3472) = v341;
      *((_QWORD *)this + 3473) = v346;
      v116 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 2);
      v117 = v116;
      if (v99 || v101)
      {
        if ((*(_WORD *)(v99 + 12) & 0xFFF) == 0x98)
          v118 = v99;
        else
          v118 = 0;
        *(_QWORD *)(v118 + 40) = v116;
      }
      v119 = JSC::FTL::Output::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v340, v116, 3, 0);
      v120 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16), (uint64_t)v119, 2);
      v121 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v120);
      v122 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
      v123 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v121, v122, (uint64_t)v120, 0);
      v125 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 18568), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v95, v117, 0, 0, 0, v124);
      JSC::FTL::Output::store((uint64_t)this + 27640, v123, v125, v126);
      v127 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
      v128 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v117, v127);
      v129 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v128);
      if (v129 || v130)
      {
        if ((*(_WORD *)(v129 + 12) & 0xFFF) == 0x98)
          v131 = v129;
        else
          v131 = 0;
        *(_QWORD *)(v131 + 40) = v117;
      }
      v132 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v82, 2);
      v133 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v128, v132);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v133, v341, (uint64_t)v344, NAN, NAN, v134, v135, v136, v137);
      *((_QWORD *)this + 3472) = v346;
      *((_QWORD *)this + 3473) = v343;
      v138 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 2);
      v140 = v138;
      if (v103 || v331)
      {
        if ((*(_WORD *)(v103 + 12) & 0xFFF) == 0x98)
          v141 = v103;
        else
          v141 = 0;
        *(_QWORD *)(v141 + 40) = v138;
      }
      v142 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 17576), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v340, v138, 0, 0, 0, v139);
      v144 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v142, v143, 4);
      v145 = JSC::FTL::Output::doubleNotEqualOrUnordered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v144, v144);
      v146 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
      v148 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v145, v146, (uint64_t)v147, 0);
      v150 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 18568), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v95, v140, 0, 0, 0, v149);
      JSC::FTL::Output::store((uint64_t)this + 27640, v148, v150, v151);
      v152 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
      v153 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v140, v152);
      v154 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v153);
      if (v154 || v155)
      {
        if ((*(_WORD *)(v154 + 12) & 0xFFF) == 0x98)
          v156 = v154;
        else
          v156 = 0;
        *(_QWORD *)(v156 + 40) = v140;
      }
      v157 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v82, 2);
      v158 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v153, v157);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v158, v346, (uint64_t)v344, NAN, NAN, v159, v160, v161, v162);
      *((_QWORD *)this + 3472) = v343;
      *((_QWORD *)this + 3473) = v344;
      v174 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v173);
      v176 = v175;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v344, v177, v178, v179, v180, v181, v182);
      *((_QWORD *)this + 3472) = v344;
      *((_QWORD *)this + 3473) = v338;
      v46 = JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v337, v336, v335, v334, v174, v176);
    }
    else
    {
    }
    v47 = this;
    v48 = (JSC::B3::Value *)v46;
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewArrayWithConstantSize(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  JSC::B3::Value *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  JSC::JSCell *v24;
  JSC::B3::Value *v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  JSC::B3::Value *JSArray;
  int v30;
  uint64_t v31;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 80));
  v4 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v31, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v18 = JSC::DFG::Graph::globalObjectFor(v4, &v31, v5, v6, v7, v8, v9, v10);
  if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v31 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  v19 = *((_QWORD *)this + 3528);
  v20 = *(unsigned __int16 *)(v19 + 18);
  if (v20 != 267)
  {
    if (v20 == 264)
    {
      v30 = *(_DWORD *)(v19 + 76);
      goto LABEL_13;
    }
    if (v20 != 352)
    {
      v21 = *(unsigned __int8 *)(v19 + 72);
      goto LABEL_6;
    }
  }
  v30 = *(_DWORD *)(v19 + 84);
LABEL_13:
  v21 = v30 & 0xF;
LABEL_6:
  v22 = (v21 >> 1) & 7;
  if ((v21 & 0x10) != 0)
    v22 = ((v21 & 0xE) + 10) >> 1;
  v23 = *(_DWORD *)(v18 + 4 * v22 + 892);
  if (v23)
    v24 = (JSC::JSCell *)(16 * (v23 & 0xFFFFFFFE));
  else
    v24 = 0;
  v26 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, v21);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewArrayWithSpecies(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  JSC::B3::Value *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v56, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v56, v3, v4, v5, v6, v7, v8);
  if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v56 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFC000000000000) != 0x4000000000000)
  {
    v44 = *((_QWORD *)this + 3528);
    v45 = *(unsigned __int16 *)(v44 + 18);
    if (v45 != 267)
    {
      if (v45 == 264)
      {
        v51 = *(_DWORD *)(v44 + 76);
        goto LABEL_17;
      }
      if (v45 != 352)
      {
        v46 = *(unsigned __int8 *)(v44 + 72);
LABEL_13:
        v52 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v46);
      }
    }
    v51 = *(_DWORD *)(v44 + 84);
LABEL_17:
    v46 = v51 & 0xF;
    goto LABEL_13;
  }
  v30 = *((_QWORD *)this + 3528);
  v31 = *(unsigned __int16 *)(v30 + 18);
  switch(v31)
  {
    case 267:
      goto LABEL_14;
    case 264:
      v50 = *(_DWORD *)(v30 + 76);
      goto LABEL_15;
    case 352:
LABEL_14:
      v50 = *(_DWORD *)(v30 + 84);
LABEL_15:
      v32 = v50 & 0xF;
      goto LABEL_7;
  }
  v32 = *(unsigned __int8 *)(v30 + 72);
LABEL_7:
  v52 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewTypedArray(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = *(_DWORD *)(*((_QWORD *)this + 3528) + 72);
  v3 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v59, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v17 = (uint64_t *)JSC::DFG::Graph::globalObjectFor(v3, &v59, v4, v5, v6, v7, v8, v9);
  if ((v59 & 1) != 0 && (v59 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v59 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = (v18[3] >> 50) & 0x3F;
  if ((_DWORD)v19)
  {
    if ((_DWORD)v19 == 1)
    {
      v33 = *(_QWORD *)this;
      v2 = v2;
      v34 = JSC::JSGlobalObject::typedArrayStructureConcurrently(v17, v2, 0);
      v40 = JSC::DFG::Graph::registerStructure(v33, v34, (int *)&v58, v35, v36, v37, v38, v39);
      v49 = (JSC::B3::Value *)JSC::FTL::Output::signExt32To64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v48);
    }
    else
    {
      if ((_DWORD)v19 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x2462, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewTypedArray()", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197D444B4);
      }
      v50 = *(_QWORD *)this;
      v2 = v2;
      v51 = JSC::JSGlobalObject::typedArrayStructureConcurrently(v17, v2, 0);
      v40 = JSC::DFG::Graph::registerStructure(v50, v51, (int *)&v58, v52, v53, v54, v55, v56);
    }
  }
  else
  {
    v20 = JSC::DFG::operationNewTypedArrayWithOneArgumentForType(v2);
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetTypedArrayByteOffset(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  __int128 *TypedArrayByteOffsetExceptSettingResult;
  uint64_t v11;
  int v12;
  int8x8_t v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  char **v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  unint64_t v22;
  double result;
  char *v24;
  uint64_t v25;
  _QWORD v26[3];
  __n128 v27;
  uint64_t v28;

  v11 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x7FFFFFFFLL);
  v12 = (*(uint64_t (**)(__int128 *, uint64_t))(*(_QWORD *)TypedArrayByteOffsetExceptSettingResult + 352))(TypedArrayByteOffsetExceptSettingResult, v11);
  if (v12 == 2)
  {
    v14 = *((_QWORD *)this + 3472);
    v15 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v16 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, *((_QWORD *)this + 3471), (uint64_t)TypedArrayByteOffsetExceptSettingResult, v11);
    JSC::B3::Procedure::addValueImpl(v15, v16);
    v26[0] = v16;
    v17 = (char **)(v14 + 8);
    v18 = *(unsigned int *)(v14 + 20);
    if ((_DWORD)v18 == *(_DWORD *)(v14 + 16))
    {
      v24 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)v26);
      v18 = *(unsigned int *)(v14 + 20);
      *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v18) = *(_QWORD *)v24;
      v19 = (JSC::B3::Value *)v26[0];
    }
    else
    {
      *(_QWORD *)&(*v17)[8 * v18] = v16;
      v19 = v16;
    }
    *(_DWORD *)(v14 + 20) = v18 + 1;
    *((_QWORD *)v19 + 4) = v14;
  }
  else
  {
    v25 = 27648;
    if (v12 == 1)
      v25 = 27640;
    v16 = *(JSC::B3::Value **)((char *)this + v25);
  }
  v20 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)TypedArrayByteOffsetExceptSettingResult);
  v21 = *((_QWORD *)this + 3528);
  v22 = *((_QWORD *)this + 3521);
  v27.n128_u64[0] = (unint64_t)v20;
  v27.n128_u64[1] = v22;
  v28 = v21;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v26, (uint64_t *)this + 3489, &v28, &v27).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetPrototypeOf(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::BasicBlock *v24;
  int8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *Structure;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  JSC::B3::Value *v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Value *Ptr;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::B3::Value *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::B3::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  JSC::B3::Value *v101;
  JSC::B3::Value *v102;
  JSC::B3::Value *v103;
  JSC::B3::Value *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  JSC::B3::Value *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  JSC::B3::Value *v129;
  JSC::B3::Value *v130;
  JSC::B3::Value *v131;
  JSC::B3::Value *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  JSC::B3::Value *v148;
  JSC::B3::Value *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153[2];
  char v154;
  uint64_t v155;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v155, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v155, v3, v4, v5, v6, v7, v8);
  if ((v155 & 1) != 0 && (v155 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v155 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v24 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v26 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v24;
  v27 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v28 = (v27 >> 50) & 0x3F;
  v151 = v26;
  if ((v28 - 12) >= 3)
  {
    if ((_DWORD)v28 == 11)
    {
      v153[0] = v34;
      v105 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v128 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v129 = (JSC::B3::Value *)JSC::FTL::Output::load16ZeroExt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Structure, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5536));
      v130 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2048);
      v131 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v129, v130);
      v132 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v131);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v132, v105, v128, 1.0, 0.0, v133, v134, v135, v136);
      *((_QWORD *)this + 3472) = v128;
      *((_QWORD *)this + 3473) = v105;
    }
    else
    {
      v153[0] = v34;
      v88 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v89 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v150 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v90 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v91, v88, v90, 1.0, 0.0, v92, v93, v94, v95);
      *((_QWORD *)this + 3472) = v88;
      *((_QWORD *)this + 3473) = v89;
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v96, v89, v90, 1.0, 0.0, v97, v98, v99, v100);
      *((_QWORD *)this + 3472) = v89;
      *((_QWORD *)this + 3473) = v90;
      v101 = (JSC::B3::Value *)JSC::FTL::Output::load16ZeroExt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Structure, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5536));
      v102 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2048);
      v103 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v101, v102);
      v104 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v103);
      v105 = v150;
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v104, v150, v90, 1.0, 0.0, v106, v107, v108, v109);
      *((_QWORD *)this + 3472) = v90;
      *((_QWORD *)this + 3473) = v150;
    }
    v57 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v120);
    v56 = v121;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v122, v123, v124, v125, v126, v127);
    *((_QWORD *)this + 3472) = v105;
    *((_QWORD *)this + 3473) = v17;
  }
  else
  {
    v35 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
    v36 = (v35 >> 50) & 0x3F;
    switch((_DWORD)v36)
    {
      case 0xD:
        break;
      case 0xE:
        break;
      case 0xC:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197D44B54);
    }
    v44 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
    v45 = *((_QWORD *)this + 3505);
    v46 = *(unsigned int *)((v44 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v47 = (_QWORD *)(v45 + 24);
    v48 = (_QWORD *)(v45 + 8);
    if ((v44 & 1) != 0)
      v49 = v47;
    else
      v49 = v48;
    v50 = *v49 + 32 * v46;
    v51 = (void *)*((unsigned int *)this + 7030);
    if ((_DWORD)v51 != *(_DWORD *)(v50 + 20))
    {
      if ((*(_QWORD *)(v50 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v50, v51, v37, v38, v39, v40, v41, v42);
      else
        *(_DWORD *)(v50 + 20) = (_DWORD)v51;
    }
    v52 = *(_QWORD *)(v50 + 8);
    if (v52)
      v53 = (v52 & 0xFFFFDFFFF0000008) == 0;
    else
      v53 = 0;
    if (v53)
    {
      v54 = *(_QWORD *)v50;
      if (*(_QWORD *)v50 != 4 && (*(_QWORD *)v50 & 2) == 0)
      {
        LOBYTE(v152) = 0;
        v154 = 0;
        v153[0] = &v152;
        v153[1] = &v154;
        JSC::DFG::StructureAbstractValue::forEach<JSC::DFG::SpeculativeJIT::compileGetPrototypeOf(JSC::DFG::Node *)::$_0>(v54, v153);
        if (v154 && !(_BYTE)v152)
        {
          Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Structure, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5680));
        }
        if (!v154 && (_BYTE)v152)
        {
          v148 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
          v149 = JSC::FTL::Output::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v34, v148, 3, 16);
          Ptr = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512), (uint64_t)v149, 2);
        }
      }
    }
    v56 = 0;
    v57 = 0;
  }
  v58 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Structure, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5680));
  v59 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v58);
  v61 = v60;
  v62 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v58);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v62, v17, (uint64_t)v24, NAN, NAN, v63, v64, v65, v66);
  *((_QWORD *)this + 3472) = v17;
  *((_QWORD *)this + 3473) = v24;
  v67 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v68 = JSC::FTL::Output::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v34, v67, 3, 16);
  v69 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512), (uint64_t)v68, 2);
  v70 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v69);
  v72 = v71;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v73, v74, v75, v76, v77, v78);
  *((_QWORD *)this + 3472) = v24;
  *((_QWORD *)this + 3473) = v151;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v59, v61, v70, v72, v57, v56);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetWebAssemblyInstanceExports(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double result;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;

  v11 = *((_QWORD *)this + 539);
  if (v11)
  {
    v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11);
    v10 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10, v12);
  }
  v13 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4288), (uint64_t)v10, 2);
  v14 = *((_QWORD *)this + 821);
  if (v14)
  {
    v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14);
    v13 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v13, v15);
  }
  v16 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6544), (uint64_t)v13, 2);
  v17 = *((_QWORD *)this + 3528);
  v18 = *((_QWORD *)this + 3521);
  v21.n128_u64[0] = v16;
  v21.n128_u64[1] = v18;
  v22 = v17;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v20, (uint64_t *)this + 3492, &v22, &v21).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileReallocatePropertyStorage(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  JSC::Structure **v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  JSC::B3::Value *v20;
  JSC::Structure *v21;
  JSC::B3::Value *v22;

  v10 = *((_QWORD *)this + 3528);
  v11 = *(JSC::Structure ***)(v10 + 72);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToNumber(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::B3::BasicBlock *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  JSC::B3::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[4];
  uint64_t v90;
  uint64_t v91;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v91, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v91, v3, v4, v5, v6, v7, v8);
  if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v91 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = (v18[3] >> 50) & 0x3F;
  if ((_DWORD)v19 == 21)
  {
  }
  else
  {
    if ((_DWORD)v19)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x24F9, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileToNumber()", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197D44F7CLL);
    }
    v90 = (uint64_t)v33;
    v46 = v89[1] & 0x7300000000;
    if ((v89[0] & 1) != 0)
      WTF::fastFree(v89[0] & 0xFFFFFFFFFFFFFFFCLL, v39, v40, v41, v42, v43, v44, v45);
    if (v46)
    {
      v47 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v48 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v49 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v33);
      v51 = v50;
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v59, (uint64_t)v48, v47, NAN, NAN, v60, v61, v62, v63);
      *((_QWORD *)this + 3472) = v47;
      v64 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v48;
      v76 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v75);
      v78 = v77;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v48, v79, v80, v81, v82, v83, v84);
      *((_QWORD *)this + 3472) = v48;
      *((_QWORD *)this + 3473) = v64;
      v31 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v49, v51, v76, v78);
    }
    else
    {
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToNumeric(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  JSC::B3::Value *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::B3::Value **v105;
  JSC::B3::Value *v106;
  JSC::B3::Value *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  JSC::B3::Value **v120;
  uint64_t v121;
  JSC::B3::Value *v122;
  uint64_t v123;
  JSC::B3::Value *v124;
  JSC::B3::Value *v125;
  char **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::B3::Value **v140;
  uint64_t v141;
  JSC::B3::Value *v142;
  JSC::B3::Value *v143;
  JSC::B3::Value *v144;
  JSC::B3::Value *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  JSC::B3::Value *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char **v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  JSC::B3::Value *v170;
  uint64_t v171;
  uint64_t v172;
  char **v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  uint64_t v182;
  unsigned int v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  double result;
  uint64_t v194;
  unsigned int v195;
  BOOL v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  unsigned int v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  JSC::B3::Value *v214;
  __n128 v215;
  _QWORD *v216;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v194 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v195 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v195 != 0x3FFFFFFF) ? (v196 = v195 == -1) : (v196 = 1), v196))
  {
    v197 = 2;
  }
  else if (v195 >> 28)
  {
    v207 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v207 = v194;
    *(_DWORD *)(v207 + 8) = v195;
    v197 = 1;
    v194 = v207;
  }
  else
  {
    v197 = v194;
    v194 = 0;
  }
  v10 = v194 | v197;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v194 | v197) & 1) == 0)
    goto LABEL_3;
  v202 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v203 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v203 != 0x3FFFFFFF) ? (v204 = v203 == -1) : (v204 = 1), v204))
  {
    v205 = 2;
  }
  else if (v203 >> 28)
  {
    v208 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v208 = v202;
    *(_DWORD *)(v208 + 8) = v203;
    v205 = 1;
    v202 = v208;
  }
  else
  {
    v205 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v202 = 0;
  }
  v206 = v202 | v205;
  v12 = (_QWORD *)(v206 & 0xFFFFFFFF8);
  if ((v206 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v214 = v24;
  v25 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v26 = *((_QWORD *)this + 3505);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *((_DWORD *)this + 7030);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v180 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v180 | 2;
          v181 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v180 & 1) != 0)
          {
            v198 = 2 * *v181;
            while (v198 * 4)
            {
              v199 = *(_QWORD *)&v181[v198];
              if ((*(_BYTE *)(v199 + 19) & 0xC) == 0)
              {
                v200 = *(_QWORD *)(v199 + 96);
                v201 = (v200 & 1) != 0 ? (v200 >> 1) & 3 : *(unsigned __int8 *)(v200 + 4);
                v198 -= 2;
                if (v201 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v181, v17, v18, v19, v20, v21, v22, v23);
              goto LABEL_109;
            }
          }
          else if (v181)
          {
            if ((*((_BYTE *)v181 + 19) & 0xC) != 0
              || ((v182 = *((_QWORD *)v181 + 12), (v182 & 1) != 0)
                ? (v183 = (v182 >> 1) & 3)
                : (v183 = *(unsigned __int8 *)(v182 + 4)),
                  v183 == 2))
            {
LABEL_109:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  v211 = 0;
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 1) == 0 || v35 == 4)
  {
    v36 = v35 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(&v211, (_QWORD *)v32);
    v36 = v211;
    v35 = *(_QWORD *)v32;
  }
  v37 = v36 & 0xFFFFFFFFFFFFFFFDLL;
  v38 = v36 | 2;
  if ((v35 & 2) != 0)
    v39 = v38;
  else
    v39 = v37;
  v211 = v39;
  v40 = v31 + 32 * v27;
  v41 = *(_QWORD *)(v40 + 24);
  v212 = *(_OWORD *)(v40 + 8);
  v213 = v41;
  v42 = v212 & 0x87300000000;
  if ((v39 & 1) == 0)
  {
    if (v42)
      goto LABEL_19;
LABEL_86:
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v18, v19, v20, v21, v22, v23);
    v210 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    v216 = (_QWORD *)*((_QWORD *)this + 3528);
    v178 = (uint64_t *)((char *)this + 27936);
    v179 = *((_QWORD *)this + 3521);
    v215.n128_u64[0] = v192;
    goto LABEL_87;
  }
  WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, v17, v18, v19, v20, v21, v22, v23);
  if (!v42)
    goto LABEL_86;
LABEL_19:
  v43 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v44 = v43;
  v45 = *((_QWORD *)this + 3473);
  if (v45)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v45, v43);
  }
  else
  {
    v215.n128_u64[0] = v43;
    v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v46 = 0u;
    *((_OWORD *)v46 + 1) = 0u;
    v46[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v46;
    v216 = v46;
    v46[2] = v44;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v215, (uint64_t *)&v216, v47, v48, v49, v50, v51, (uint64_t)&v211);
    v52 = v216;
    v53 = (_QWORD *)*((_QWORD *)this + 3479);
    *v216 = (char *)this + 27824;
    v52[1] = v53;
    *v53 = v52;
    *((_QWORD *)this + 3479) = v52;
  }
  v54 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v55 = v54;
  v56 = *((_QWORD *)this + 3473);
  if (v56)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v56, v54);
  }
  else
  {
    v215.n128_u64[0] = v54;
    v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v57 = 0u;
    *((_OWORD *)v57 + 1) = 0u;
    v57[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v57;
    v216 = v57;
    v57[2] = v55;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v215, (uint64_t *)&v216, v58, v59, v60, v61, v62, (uint64_t)&v211);
    v63 = v216;
    v64 = (_QWORD *)*((_QWORD *)this + 3479);
    *v216 = (char *)this + 27824;
    v63[1] = v64;
    *v64 = v63;
    *((_QWORD *)this + 3479) = v63;
  }
  v65 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v66 = v65;
  v67 = *((_QWORD *)this + 3473);
  v209 = v55;
  if (v67)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v67, v65);
  }
  else
  {
    v215.n128_u64[0] = v65;
    v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v68 = 0u;
    *((_OWORD *)v68 + 1) = 0u;
    v68[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v68;
    v216 = v68;
    v68[2] = v66;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v215, (uint64_t *)&v216, v69, v70, v71, v72, v73, (uint64_t)&v211);
    v74 = v216;
    v75 = (_QWORD *)*((_QWORD *)this + 3479);
    *v216 = (char *)this + 27824;
    v74[1] = v75;
    *v75 = v74;
    *((_QWORD *)this + 3479) = v74;
  }
  v76 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v77 = v76;
  v78 = *((_QWORD *)this + 3473);
  if (v78)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v78, v76);
  }
  else
  {
    v215.n128_u64[0] = v76;
    v79 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v79 = 0u;
    *((_OWORD *)v79 + 1) = 0u;
    v79[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v79;
    v216 = v79;
    v79[2] = v77;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v215, (uint64_t *)&v216, v80, v81, v82, v83, v84, (uint64_t)&v211);
    v85 = v216;
    v86 = (_QWORD *)*((_QWORD *)this + 3479);
    *v216 = (char *)this + 27824;
    v85[1] = v86;
    *v86 = v85;
    *((_QWORD *)this + 3479) = v85;
  }
  v87 = *((_QWORD *)this + 3472);
  v88 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v89 = *((_QWORD *)this + 3471);
  v90 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v90 + 8) = -1;
  *(_WORD *)(v90 + 12) = 152;
  *(_BYTE *)(v90 + 20) = 1;
  *(_QWORD *)v90 = &unk_1E357EDA0;
  *(_DWORD *)(v90 + 16) = 0;
  *(_QWORD *)(v90 + 40) = 0;
  *(_QWORD *)(v90 + 48) = v24;
  *(_QWORD *)(v90 + 24) = v89;
  *(_QWORD *)(v90 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v88, (JSC::B3::Value *)v90);
  v211 = v90;
  v97 = (char **)(v87 + 8);
  v98 = *(unsigned int *)(v87 + 20);
  if ((_DWORD)v98 == *(_DWORD *)(v87 + 16))
  {
    v184 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v97, v98 + 1, (unint64_t)&v211);
    v98 = *(unsigned int *)(v87 + 20);
    *(_QWORD *)(*(_QWORD *)(v87 + 8) + 8 * v98) = *(_QWORD *)v184;
    v99 = v211;
  }
  else
  {
    *(_QWORD *)&(*v97)[8 * v98] = v90;
    v99 = v90;
  }
  *(_DWORD *)(v87 + 20) = v98 + 1;
  *(_QWORD *)(v99 + 32) = v87;
  v105 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v100 & 0xFFFFFF00FFFFFFFFLL) != 0)
  {
    if ((v100 & 0xFF00000000) != 0)
    {
LABEL_35:
      v106 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, *((JSC::B3::Value **)this + 3487));
      v107 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v106);
      goto LABEL_36;
    }
    v105 = (JSC::B3::Value **)((char *)this + 27648);
  }
  v107 = *v105;
  if (!*v105)
    goto LABEL_35;
LABEL_36:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v107, v77, v44, NAN, NAN, v101, v102, v103, v104);
  *((_QWORD *)this + 3472) = v44;
  v108 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v77;
  v120 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v115 & 0xFFFFD3FF00000008) == 0)
    goto LABEL_78;
  if ((v115 & 0x2C00FFFFFFF7) == 0)
  {
    v120 = (JSC::B3::Value **)((char *)this + 27648);
LABEL_78:
    v125 = *v120;
    if (*v120)
      goto LABEL_41;
  }
  v121 = v108;
  v122 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, *((JSC::B3::Value **)this + 3488));
  v123 = *((_QWORD *)this + 3472);
  v124 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v125 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v122, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v124, v125);
  v211 = (uint64_t)v125;
  v126 = (char **)(v123 + 8);
  v127 = *(unsigned int *)(v123 + 20);
  if ((_DWORD)v127 == *(_DWORD *)(v123 + 16))
  {
    v187 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v126, v127 + 1, (unint64_t)&v211);
    v127 = *(unsigned int *)(v123 + 20);
    *(_QWORD *)(*(_QWORD *)(v123 + 8) + 8 * v127) = *(_QWORD *)v187;
    v128 = v211;
  }
  else
  {
    *(_QWORD *)&(*v126)[8 * v127] = v125;
    v128 = (uint64_t)v125;
  }
  *(_DWORD *)(v123 + 20) = v127 + 1;
  *(_QWORD *)(v128 + 32) = v123;
  v108 = v121;
LABEL_41:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v125, v209, v66, NAN, NAN, v116, v117, v118, v119);
  *((_QWORD *)this + 3472) = v209;
  v140 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v135 & 0x2000FFFFFFF7) != 0)
  {
    if ((v135 & 0x80000000000) != 0)
    {
LABEL_43:
      v141 = *((_QWORD *)this + 395);
      if (v141)
      {
        v142 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v141);
        v24 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v142);
      }
      v143 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 3136, (uint64_t)v24);
      v144 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 3);
      v145 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v143, v144);
      goto LABEL_46;
    }
    v140 = (JSC::B3::Value **)((char *)this + 27648);
  }
  v145 = *v140;
  if (!*v140)
    goto LABEL_43;
LABEL_46:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v145, v77, v66, NAN, NAN, v136, v137, v138, v139);
  *((_QWORD *)this + 3472) = v66;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v146, v147, v148, v149, v150, v151);
  v215.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v157 = *((_QWORD *)this + 3472);
  v158 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v159 = *((_QWORD *)this + 3471);
  v160 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v160 + 8) = -1;
  *(_WORD *)(v160 + 12) = 152;
  *(_DWORD *)(v160 + 16) = 0;
  *(_BYTE *)(v160 + 20) = 1;
  *(_QWORD *)v160 = &unk_1E357EDA0;
  *(_QWORD *)(v160 + 40) = 0;
  *(_QWORD *)(v160 + 48) = v156;
  *(_QWORD *)(v160 + 24) = v159;
  *(_QWORD *)(v160 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v158, (JSC::B3::Value *)v160);
  v211 = v160;
  v164 = (char **)(v157 + 8);
  v165 = *(unsigned int *)(v157 + 20);
  if ((_DWORD)v165 == *(_DWORD *)(v157 + 16))
  {
    v185 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v164, v165 + 1, (unint64_t)&v211);
    v165 = *(unsigned int *)(v157 + 20);
    *(_QWORD *)(*(_QWORD *)(v157 + 8) + 8 * v165) = *(_QWORD *)v185;
    v166 = v211;
  }
  else
  {
    *(_QWORD *)&(*v164)[8 * v165] = v160;
    v166 = v160;
  }
  *(_DWORD *)(v157 + 20) = v165 + 1;
  *(_QWORD *)(v166 + 32) = v157;
  v167 = *((_QWORD *)this + 3472);
  v168 = *((_QWORD *)this + 3470);
  v169 = *((_QWORD *)this + 3471);
  v211 = v77;
  LOBYTE(v212) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v167, v168, 154, v169, &v211, v161, v162, v163);
  *((_QWORD *)this + 3472) = v77;
  *((_QWORD *)this + 3473) = v108;
  v170 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v171 = *((_QWORD *)this + 3471);
  v172 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v172 = off_1E357F5F0;
  *(_DWORD *)(v172 + 8) = -1;
  *(_WORD *)(v172 + 12) = 153;
  *(_DWORD *)(v172 + 16) = 2;
  *(_BYTE *)(v172 + 20) = 0;
  *(_QWORD *)(v172 + 24) = v171;
  *(_QWORD *)(v172 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v170, (JSC::B3::Value *)v172);
  v211 = v172;
  v173 = (char **)(v77 + 8);
  v174 = *(unsigned int *)(v77 + 20);
  if ((_DWORD)v174 == *(_DWORD *)(v77 + 16))
  {
    v186 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v173, v174 + 1, (unint64_t)&v211);
    v174 = *(unsigned int *)(v77 + 20);
    *(_QWORD *)(*(_QWORD *)(v77 + 8) + 8 * v174) = *(_QWORD *)v186;
    v175 = v211;
  }
  else
  {
    *(_QWORD *)&(*v173)[8 * v174] = v172;
    v175 = v172;
  }
  *(_DWORD *)(v77 + 20) = v174 + 1;
  *(_QWORD *)(v175 + 32) = v77;
  if ((*(_WORD *)(v90 + 12) & 0xFFF) == 0x98)
    v176 = v90;
  else
    v176 = 0;
  *(_QWORD *)(v176 + 40) = v172;
  if ((*(_WORD *)(v160 + 12) & 0xFFF) == 0x98)
    v177 = v160;
  else
    v177 = 0;
  *(_QWORD *)(v177 + 40) = v172;
  v216 = (_QWORD *)*((_QWORD *)this + 3528);
  v178 = (uint64_t *)((char *)this + 27936);
  v179 = *((_QWORD *)this + 3521);
  v215.n128_u64[0] = v172;
LABEL_87:
  v215.n128_u64[1] = v179;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v211, v178, (uint64_t *)&v216, &v215).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallNumberConstructor(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value **v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  JSC::B3::Value *v86;
  uint64_t v87;
  uint64_t v88;
  char **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  double result;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::B3::Value *v110;
  __n128 v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v99 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v100 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v100 != 0x3FFFFFFF) ? (v101 = v100 == -1) : (v101 = 1), v101))
  {
    v102 = 2;
  }
  else if (v100 >> 28)
  {
    v108 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v108 = v99;
    *(_DWORD *)(v108 + 8) = v100;
    v102 = 1;
    v99 = v108;
  }
  else
  {
    v102 = v99;
    v99 = 0;
  }
  v10 = v99 | v102;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v99 | v102) & 1) == 0)
    goto LABEL_3;
  v103 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v104 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v104 != 0x3FFFFFFF) ? (v105 = v104 == -1) : (v105 = 1), v105))
  {
    v106 = 2;
  }
  else if (v104 >> 28)
  {
    v109 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v109 = v103;
    *(_DWORD *)(v109 + 8) = v104;
    v106 = 1;
    v103 = v109;
  }
  else
  {
    v106 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v103 = 0;
  }
  v107 = v103 | v106;
  v12 = (_QWORD *)(v107 & 0xFFFFFFFF8);
  if ((v107 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v110 = v17;
  v18 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v19 = v18;
  v20 = *((_QWORD *)this + 3473);
  if (v20)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v20, v18);
  }
  else
  {
    v111.n128_u64[0] = v18;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v21[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v21;
    v114 = v21;
    v21[2] = v19;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v111, (uint64_t *)&v114, v22, v23, v24, v25, v26, (uint64_t)&v112);
    v27 = v114;
    v28 = (_QWORD *)*((_QWORD *)this + 3479);
    *v114 = (char *)this + 27824;
    v27[1] = v28;
    *v28 = v27;
    *((_QWORD *)this + 3479) = v27;
  }
  v29 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = v29;
  v31 = *((_QWORD *)this + 3473);
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, v29);
  }
  else
  {
    v111.n128_u64[0] = v29;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v32 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    v32[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v32;
    v114 = v32;
    v32[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v111, (uint64_t *)&v114, v33, v34, v35, v36, v37, (uint64_t)&v112);
    v38 = v114;
    v39 = (_QWORD *)*((_QWORD *)this + 3479);
    *v114 = (char *)this + 27824;
    v38[1] = v39;
    *v39 = v38;
    *((_QWORD *)this + 3479) = v38;
  }
  v40 = *((_QWORD *)this + 3472);
  v41 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v42 = *((_QWORD *)this + 3471);
  v43 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v43 + 8) = -1;
  *(_WORD *)(v43 + 12) = 152;
  *(_BYTE *)(v43 + 20) = 1;
  *(_QWORD *)v43 = &unk_1E357EDA0;
  *(_DWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 40) = 0;
  *(_QWORD *)(v43 + 48) = v17;
  *(_QWORD *)(v43 + 24) = v42;
  *(_QWORD *)(v43 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v41, (JSC::B3::Value *)v43);
  v112 = v43;
  v50 = (char **)(v40 + 8);
  v51 = *(unsigned int *)(v40 + 20);
  if ((_DWORD)v51 == *(_DWORD *)(v40 + 16))
  {
    v96 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50, v51 + 1, (unint64_t)&v112);
    v51 = *(unsigned int *)(v40 + 20);
    *(_QWORD *)(*(_QWORD *)(v40 + 8) + 8 * v51) = *(_QWORD *)v96;
    v52 = v112;
  }
  else
  {
    *(_QWORD *)&(*v50)[8 * v51] = v43;
    v52 = v43;
  }
  *(_DWORD *)(v40 + 20) = v51 + 1;
  *(_QWORD *)(v52 + 32) = v40;
  v58 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v53 & 0xFFFFFF00FFFFFFFFLL) != 0)
  {
    if ((v53 & 0xFF00000000) != 0)
    {
LABEL_18:
      v59 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, *((JSC::B3::Value **)this + 3487));
      v60 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v59);
      goto LABEL_19;
    }
    v58 = (JSC::B3::Value **)((char *)this + 27648);
  }
  v60 = *v58;
  if (!*v58)
    goto LABEL_18;
LABEL_19:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v60, v30, v19, NAN, NAN, v54, v55, v56, v57);
  *((_QWORD *)this + 3472) = v19;
  v61 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v30;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v62, v63, v64, v65, v66, v67);
  v111.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v73 = *((_QWORD *)this + 3472);
  v74 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v75 = *((_QWORD *)this + 3471);
  v76 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v76 + 8) = -1;
  *(_WORD *)(v76 + 12) = 152;
  *(_DWORD *)(v76 + 16) = 0;
  *(_BYTE *)(v76 + 20) = 1;
  *(_QWORD *)v76 = &unk_1E357EDA0;
  *(_QWORD *)(v76 + 40) = 0;
  *(_QWORD *)(v76 + 48) = v72;
  *(_QWORD *)(v76 + 24) = v75;
  *(_QWORD *)(v76 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v74, (JSC::B3::Value *)v76);
  v112 = v76;
  v80 = (char **)(v73 + 8);
  v81 = *(unsigned int *)(v73 + 20);
  if ((_DWORD)v81 == *(_DWORD *)(v73 + 16))
  {
    v97 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v80, v81 + 1, (unint64_t)&v112);
    v81 = *(unsigned int *)(v73 + 20);
    *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v81) = *(_QWORD *)v97;
    v82 = v112;
  }
  else
  {
    *(_QWORD *)&(*v80)[8 * v81] = v76;
    v82 = v76;
  }
  *(_DWORD *)(v73 + 20) = v81 + 1;
  *(_QWORD *)(v82 + 32) = v73;
  v83 = *((_QWORD *)this + 3472);
  v84 = *((_QWORD *)this + 3470);
  v85 = *((_QWORD *)this + 3471);
  v112 = v30;
  v113 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v83, v84, 154, v85, &v112, v77, v78, v79);
  *((_QWORD *)this + 3472) = v30;
  *((_QWORD *)this + 3473) = v61;
  v86 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v87 = *((_QWORD *)this + 3471);
  v88 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v88 = off_1E357F5F0;
  *(_DWORD *)(v88 + 8) = -1;
  *(_WORD *)(v88 + 12) = 153;
  *(_DWORD *)(v88 + 16) = 2;
  *(_BYTE *)(v88 + 20) = 0;
  *(_QWORD *)(v88 + 24) = v87;
  *(_QWORD *)(v88 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v86, (JSC::B3::Value *)v88);
  v112 = v88;
  v89 = (char **)(v30 + 8);
  v90 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v90 == *(_DWORD *)(v30 + 16))
  {
    v98 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v89, v90 + 1, (unint64_t)&v112);
    v90 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v90) = *(_QWORD *)v98;
    v91 = v112;
  }
  else
  {
    *(_QWORD *)&(*v89)[8 * v90] = v88;
    v91 = v88;
  }
  *(_DWORD *)(v30 + 20) = v90 + 1;
  *(_QWORD *)(v91 + 32) = v30;
  if ((*(_WORD *)(v43 + 12) & 0xFFF) == 0x98)
    v92 = v43;
  else
    v92 = 0;
  *(_QWORD *)(v92 + 40) = v88;
  if ((*(_WORD *)(v76 + 12) & 0xFFF) == 0x98)
    v93 = v76;
  else
    v93 = 0;
  *(_QWORD *)(v93 + 40) = v88;
  v114 = (_QWORD *)*((_QWORD *)this + 3528);
  v94 = *((_QWORD *)this + 3521);
  v111.n128_u64[0] = v88;
  v111.n128_u64[1] = v94;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v112, (uint64_t *)this + 3492, (uint64_t *)&v114, &v111).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileFunctionToString(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int8x8_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  JSC::B3::Value *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  JSC::B3::Value *v119;
  uint64_t v120;
  JSC::B3::Value *v121;
  JSC::B3::Value *v122;
  JSC::B3::Value *v123;
  uint64_t v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  JSC::B3::Value *v128;
  JSC::B3::Value *v129;
  JSC::B3::Value *v130;
  JSC::B3::Value *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  JSC::B3::Value *v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  JSC::B3::Value *Executable;
  uint64_t v143;
  uint64_t v144;
  JSC::B3::Value *v145;
  JSC::B3::Value *v146;
  JSC::B3::Value *v147;
  JSC::B3::Value *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  JSC::B3::Value *v155;
  uint64_t v156;
  uint64_t v157;
  JSC::B3::Value *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char **v164;
  uint64_t v165;
  WTF *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  JSC::B3::Value *v171;
  JSC::B3::Value *v172;
  JSC::B3::Value *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  JSC::B3::Value *v179;
  uint64_t v180;
  uint64_t v181;
  JSC::B3::Value *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char **v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  JSC::B3::Value *v194;
  uint64_t v195;
  uint64_t v196;
  char **v197;
  uint64_t v198;
  WTF *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  JSC::B3::Value *v203;
  uint64_t v204;
  uint64_t v205;
  char **v206;
  uint64_t v207;
  WTF *v208;
  JSC::B3::Value *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int *v228;
  int v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF *v243;
  uint64_t v244;
  uint64_t v245;
  JSC::B3::Value *v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  JSC::DFG::Node *v250;
  char **v251;
  uint64_t v252;
  WTF *v253;
  uint64_t v254;
  uint64_t v255;
  JSC::B3::Value *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char **v262;
  uint64_t v263;
  WTF *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  JSC::B3::Value *v268;
  uint64_t v269;
  uint64_t v270;
  char **v271;
  uint64_t v272;
  WTF *v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  uint64_t v284;
  unsigned int v285;
  BOOL v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  BOOL v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  JSC::B3::Value *v298;
  unint64_t v299;
  uint64_t v300;
  __n128 v301;
  WTF *v302;
  uint64_t v303;
  _QWORD *v304;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v284 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v285 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v285 != 0x3FFFFFFF) ? (v286 = v285 == -1) : (v286 = 1), v286))
  {
    v287 = 2;
  }
  else if (v285 >> 28)
  {
    v293 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v293 = v284;
    *(_DWORD *)(v293 + 8) = v285;
    v287 = 1;
    v284 = v293;
  }
  else
  {
    v287 = v284;
    v284 = 0;
  }
  v10 = v284 | v287;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v284 | v287) & 1) == 0)
    goto LABEL_3;
  v288 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v289 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v289 != 0x3FFFFFFF) ? (v290 = v289 == -1) : (v290 = 1), v290))
  {
    v291 = 2;
  }
  else if (v289 >> 28)
  {
    v294 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v294 = v288;
    *(_DWORD *)(v294 + 8) = v289;
    v291 = 1;
    v288 = v294;
  }
  else
  {
    v291 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v288 = 0;
  }
  v292 = v288 | v291;
  v12 = (_QWORD *)(v292 & 0xFFFFFFFF8);
  if ((v292 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v18 = v17;
  v19 = *((_QWORD *)this + 3473);
  if (v19)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v19, v17);
  }
  else
  {
    v301.n128_u64[0] = v17;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    v20[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v20;
    v304 = v20;
    v20[2] = v18;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v21, v22, v23, v24, v25, (uint64_t)&v302);
    v26 = v304;
    v27 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v26[1] = v27;
    *v27 = v26;
    *((_QWORD *)this + 3479) = v26;
  }
  v28 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v29 = v28;
  v30 = *((_QWORD *)this + 3473);
  if (v30)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v30, v28);
  }
  else
  {
    v301.n128_u64[0] = v28;
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v31 = 0u;
    *((_OWORD *)v31 + 1) = 0u;
    v31[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v31;
    v304 = v31;
    v31[2] = v29;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v32, v33, v34, v35, v36, (uint64_t)&v302);
    v37 = v304;
    v38 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v37[1] = v38;
    *v38 = v37;
    *((_QWORD *)this + 3479) = v37;
  }
  v39 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v40 = v39;
  v41 = *((_QWORD *)this + 3473);
  v299 = v16;
  if (v41)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v41, v39);
  }
  else
  {
    v301.n128_u64[0] = v39;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v42 = 0u;
    *((_OWORD *)v42 + 1) = 0u;
    v42[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v42;
    v304 = v42;
    v42[2] = v40;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v43, v44, v45, v46, v47, (uint64_t)&v302);
    v48 = v304;
    v49 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v48[1] = v49;
    *v49 = v48;
    *((_QWORD *)this + 3479) = v48;
  }
  v50 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v51 = v50;
  v52 = *((_QWORD *)this + 3473);
  if (v52)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v52, v50);
  }
  else
  {
    v301.n128_u64[0] = v50;
    v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v53 = 0u;
    *((_OWORD *)v53 + 1) = 0u;
    v53[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v53;
    v304 = v53;
    v53[2] = v51;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v54, v55, v56, v57, v58, (uint64_t)&v302);
    v59 = v304;
    v60 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v59[1] = v60;
    *v60 = v59;
    *((_QWORD *)this + 3479) = v59;
  }
  v61 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v62 = v61;
  v63 = *((_QWORD *)this + 3473);
  if (v63)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v63, v61);
  }
  else
  {
    v301.n128_u64[0] = v61;
    v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v64 = 0u;
    *((_OWORD *)v64 + 1) = 0u;
    v64[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v64;
    v304 = v64;
    v64[2] = v62;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v65, v66, v67, v68, v69, (uint64_t)&v302);
    v70 = v304;
    v71 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v70[1] = v71;
    *v71 = v70;
    *((_QWORD *)this + 3479) = v70;
  }
  v72 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v73 = v72;
  v74 = *((_QWORD *)this + 3473);
  v296 = v72;
  if (v74)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v74, v72);
  }
  else
  {
    v301.n128_u64[0] = v72;
    v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v75 = 0u;
    *((_OWORD *)v75 + 1) = 0u;
    v75[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v75;
    v304 = v75;
    v75[2] = v73;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v76, v77, v78, v79, v80, (uint64_t)&v302);
    v81 = v304;
    v82 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v81[1] = v82;
    *v82 = v81;
    *((_QWORD *)this + 3479) = v81;
  }
  v83 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v84 = v83;
  v85 = *((_QWORD *)this + 3473);
  if (v85)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v85, v83);
  }
  else
  {
    v301.n128_u64[0] = v83;
    v86 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v86 = 0u;
    *((_OWORD *)v86 + 1) = 0u;
    v86[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v86;
    v304 = v86;
    v86[2] = v84;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v87, v88, v89, v90, v91, (uint64_t)&v302);
    v92 = v304;
    v93 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v92[1] = v93;
    *v93 = v92;
    *((_QWORD *)this + 3479) = v92;
  }
  v94 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v95 = v94;
  v96 = *((_QWORD *)this + 3473);
  v300 = v84;
  v297 = v40;
  if (v96)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v96, v94);
  }
  else
  {
    v301.n128_u64[0] = v94;
    v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v103 = 0u;
    *((_OWORD *)v103 + 1) = 0u;
    v103[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v103;
    v304 = v103;
    v103[2] = v95;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v301, (uint64_t *)&v304, v104, v105, v106, v107, v108, (uint64_t)&v302);
    v109 = v304;
    v110 = (_QWORD *)*((_QWORD *)this + 3479);
    *v304 = (char *)this + 27824;
    v109[1] = v110;
    *v110 = v109;
    *((_QWORD *)this + 3479) = v109;
  }
  v117 = *((_QWORD *)this + 383);
  v118 = (uint64_t)v111;
  if (v117)
  {
    v119 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v117);
    v118 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v111, v119);
  }
  v120 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040), v118, 1);
  v121 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v120, 2);
  v122 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v123 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v121, v122);
  v124 = *((_QWORD *)this + 671);
  if (v124)
  {
    v125 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v124);
    v123 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v123, v125);
  }
  v126 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5344), (uint64_t)v123, 1);
  v127 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v126, 2);
  v128 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v129 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v127, v128);
  v130 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)&JSC::JSBoundFunction::s_info);
  v131 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v129, v130);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v131, v84, v18, NAN, NAN, v132, v133, v134, v135);
  *((_QWORD *)this + 3472) = v18;
  *((_QWORD *)this + 3473) = v29;
  v136 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)&JSC::JSRemoteFunction::s_info);
  v137 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v129, v136);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v137, v84, v29, NAN, NAN, v138, v139, v140, v141);
  *((_QWORD *)this + 3472) = v29;
  v295 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v51;
  v143 = *((_QWORD *)this + 395);
  v144 = (uint64_t)Executable;
  if (v143)
  {
    v145 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v143);
    v144 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Executable, v145);
  }
  v298 = v111;
  v146 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 3136, v144);
  v147 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 8);
  v148 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v146, v147);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v148, v51, v297, NAN, NAN, v149, v150, v151, v152);
  *((_QWORD *)this + 3472) = v51;
  *((_QWORD *)this + 3473) = v297;
  v153 = *((_QWORD *)this + 545);
  v154 = (uint64_t)Executable;
  if (v153)
  {
    v155 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v153);
    v154 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Executable, v155);
  }
  v156 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4336), v154, 2);
  v157 = *((_QWORD *)this + 3472);
  v158 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v159 = *((_QWORD *)this + 3471);
  v160 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v160 + 8) = -1;
  *(_WORD *)(v160 + 12) = 152;
  *(_BYTE *)(v160 + 20) = 1;
  *(_QWORD *)v160 = &unk_1E357EDA0;
  *(_DWORD *)(v160 + 16) = 0;
  *(_QWORD *)(v160 + 40) = 0;
  *(_QWORD *)(v160 + 48) = v156;
  *(_QWORD *)(v160 + 24) = v159;
  *(_QWORD *)(v160 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v158, (JSC::B3::Value *)v160);
  v302 = (WTF *)v160;
  v164 = (char **)(v157 + 8);
  v165 = *(unsigned int *)(v157 + 20);
  if ((_DWORD)v165 == *(_DWORD *)(v157 + 16))
  {
    v277 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v164, v165 + 1, (unint64_t)&v302);
    v165 = *(unsigned int *)(v157 + 20);
    *(_QWORD *)(*(_QWORD *)(v157 + 8) + 8 * v165) = *(_QWORD *)v277;
    v166 = v302;
  }
  else
  {
    *(_QWORD *)&(*v164)[8 * v165] = v160;
    v166 = (WTF *)v160;
  }
  *(_DWORD *)(v157 + 20) = v165 + 1;
  *((_QWORD *)v166 + 4) = v157;
  v167 = *((_QWORD *)this + 3472);
  v168 = *((_QWORD *)this + 3470);
  v169 = *((_QWORD *)this + 3471);
  v302 = (WTF *)v62;
  LOBYTE(v303) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v167, v168, 154, v169, (uint64_t *)&v302, v161, v162, v163);
  *((_QWORD *)this + 3472) = v297;
  *((_QWORD *)this + 3473) = v62;
  v170 = *((_QWORD *)this + 221);
  if (v170)
  {
    v171 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v170);
    Executable = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Executable, v171);
  }
  v172 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1744), (uint64_t)Executable, 2);
  v173 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v172);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v173, v296, v300, 1.0, 0.0, v174, v175, v176, v177);
  *((_QWORD *)this + 3472) = v296;
  *((_QWORD *)this + 3473) = v300;
  v178 = *((_QWORD *)this + 227);
  if (v178)
  {
    v179 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v178);
    v172 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v172, v179);
  }
  v180 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1792), (uint64_t)v172, 2);
  v181 = *((_QWORD *)this + 3472);
  v182 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v183 = *((_QWORD *)this + 3471);
  v184 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v184 + 8) = -1;
  *(_WORD *)(v184 + 12) = 152;
  *(_DWORD *)(v184 + 16) = 0;
  *(_BYTE *)(v184 + 20) = 1;
  *(_QWORD *)v184 = &unk_1E357EDA0;
  *(_QWORD *)(v184 + 40) = 0;
  *(_QWORD *)(v184 + 48) = v180;
  *(_QWORD *)(v184 + 24) = v183;
  *(_QWORD *)(v184 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v182, (JSC::B3::Value *)v184);
  v302 = (WTF *)v184;
  v188 = (char **)(v181 + 8);
  v189 = *(unsigned int *)(v181 + 20);
  if ((_DWORD)v189 == *(_DWORD *)(v181 + 16))
  {
    v278 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v188, v189 + 1, (unint64_t)&v302);
    v189 = *(unsigned int *)(v181 + 20);
    *(_QWORD *)(*(_QWORD *)(v181 + 8) + 8 * v189) = *(_QWORD *)v278;
    v190 = v302;
  }
  else
  {
    *(_QWORD *)&(*v188)[8 * v189] = v184;
    v190 = (WTF *)v184;
  }
  *(_DWORD *)(v181 + 20) = v189 + 1;
  *((_QWORD *)v190 + 4) = v181;
  v191 = *((_QWORD *)this + 3472);
  v192 = *((_QWORD *)this + 3470);
  v193 = *((_QWORD *)this + 3471);
  v302 = (WTF *)v62;
  LOBYTE(v303) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v191, v192, 154, v193, (uint64_t *)&v302, v185, v186, v187);
  *((_QWORD *)this + 3472) = v62;
  *((_QWORD *)this + 3473) = v95;
  v194 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v195 = *((_QWORD *)this + 3471);
  v196 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v196 = off_1E357F5F0;
  *(_DWORD *)(v196 + 8) = -1;
  *(_WORD *)(v196 + 12) = 153;
  *(_DWORD *)(v196 + 16) = 2;
  *(_BYTE *)(v196 + 20) = 0;
  *(_QWORD *)(v196 + 24) = v195;
  *(_QWORD *)(v196 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v194, (JSC::B3::Value *)v196);
  v302 = (WTF *)v196;
  v197 = (char **)(v62 + 8);
  v198 = *(unsigned int *)(v62 + 20);
  if ((_DWORD)v198 == *(_DWORD *)(v62 + 16))
  {
    v279 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v197, v198 + 1, (unint64_t)&v302);
    v198 = *(unsigned int *)(v62 + 20);
    *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v198) = *(_QWORD *)v279;
    v199 = v302;
  }
  else
  {
    *(_QWORD *)&(*v197)[8 * v198] = v196;
    v199 = (WTF *)v196;
  }
  *(_DWORD *)(v62 + 20) = v198 + 1;
  *((_QWORD *)v199 + 4) = v62;
  if ((*(_WORD *)(v160 + 12) & 0xFFF) == 0x98)
    v200 = v160;
  else
    v200 = 0;
  *(_QWORD *)(v200 + 40) = v196;
  if ((*(_WORD *)(v184 + 12) & 0xFFF) == 0x98)
    v201 = v184;
  else
    v201 = 0;
  *(_QWORD *)(v201 + 40) = v196;
  v202 = *((_QWORD *)this + 3472);
  v203 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v204 = *((_QWORD *)this + 3471);
  v205 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v205 + 8) = -1;
  *(_WORD *)(v205 + 12) = 152;
  *(_DWORD *)(v205 + 16) = 0;
  *(_BYTE *)(v205 + 20) = 1;
  *(_QWORD *)v205 = &unk_1E357EDA0;
  *(_QWORD *)(v205 + 40) = 0;
  *(_QWORD *)(v205 + 48) = v196;
  *(_QWORD *)(v205 + 24) = v204;
  *(_QWORD *)(v205 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v203, (JSC::B3::Value *)v205);
  v302 = (WTF *)v205;
  v206 = (char **)(v202 + 8);
  v207 = *(unsigned int *)(v202 + 20);
  if ((_DWORD)v207 == *(_DWORD *)(v202 + 16))
  {
    v280 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v206, v207 + 1, (unint64_t)&v302);
    v207 = *(unsigned int *)(v202 + 20);
    *(_QWORD *)(*(_QWORD *)(v202 + 8) + 8 * v207) = *(_QWORD *)v280;
    v208 = v302;
  }
  else
  {
    *(_QWORD *)&(*v206)[8 * v207] = v205;
    v208 = (WTF *)v205;
  }
  *(_DWORD *)(v202 + 20) = v207 + 1;
  *((_QWORD *)v208 + 4) = v202;
  v209 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v196);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v209, v95, v300, 1.0, 0.0, v210, v211, v212, v213);
  *((_QWORD *)this + 3472) = v300;
  *((_QWORD *)this + 3473) = v95;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v299, v214, v215, v216, v217, v218, v219);
  v220 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v299);
  v228 = (int *)((char *)this + 28264);
  v229 = *((_DWORD *)this + 7066);
  if ((v229 & 0x80000000) == 0)
  {
    v230 = *((_QWORD *)this + 3481);
    v302 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v302 = 0x200000002;
    v303 = 0x200000002;
    v238 = (_QWORD *)(v230 + 32);
    v239 = *(unsigned int *)(v230 + 44);
    if ((_DWORD)v239 == *(_DWORD *)(v230 + 40))
    {
      v240 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v238, v239 + 1, (unint64_t)&v302);
      v241 = *(_QWORD *)(v230 + 32) + 16 * *(unsigned int *)(v230 + 44);
    }
    else
    {
      v241 = *v238 + 16 * v239;
      v240 = (unint64_t)&v302;
    }
    *(_QWORD *)v241 = 0;
    *(_QWORD *)(v241 + 8) = 0;
    v242 = *(_QWORD *)v240;
    *(_QWORD *)v240 = 0;
    *(_QWORD *)v241 = v242;
    LODWORD(v242) = *(_DWORD *)(v240 + 8);
    *(_DWORD *)(v240 + 8) = 0;
    *(_DWORD *)(v241 + 8) = v242;
    LODWORD(v242) = *(_DWORD *)(v240 + 12);
    *(_DWORD *)(v240 + 12) = 0;
    *(_DWORD *)(v241 + 12) = v242;
    ++*(_DWORD *)(v230 + 44);
    v229 = v239 | 0x80000000;
    *v228 = v239 | 0x80000000;
    v243 = v302;
    if (v302)
    {
      v302 = 0;
      LODWORD(v303) = 0;
      WTF::fastFree((unint64_t)v243, v231, v232, v233, v234, v235, v236, v237);
      v229 = *v228;
    }
  }
  v244 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationFunctionToString);
  v245 = *((_QWORD *)this + 3472);
  v246 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v247 = *((_QWORD *)this + 3471);
  v248 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v248 = off_1E357F5F0;
  *(_DWORD *)(v248 + 8) = -1;
  *(_WORD *)(v248 + 12) = 82;
  *(_DWORD *)(v248 + 16) = v229;
  *(_BYTE *)(v248 + 20) = 4;
  *(_QWORD *)(v248 + 24) = v247;
  *(_QWORD *)(v248 + 32) = 0;
  v249 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v248);
  v249[2] = v244;
  *v249 = v249 + 2;
  v249[3] = v220;
  v249[4] = v298;
  v249[1] = 0x300000003;
  *(_QWORD *)v248 = &unk_1E357CF78;
  *(_OWORD *)(v248 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v248 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v248 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x197D46F80);
  }
  JSC::B3::Procedure::addValueImpl(v246, (JSC::B3::Value *)v248);
  v302 = (WTF *)v248;
  v251 = (char **)(v245 + 8);
  v252 = *(unsigned int *)(v245 + 20);
  if ((_DWORD)v252 == *(_DWORD *)(v245 + 16))
  {
    v281 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v251, v252 + 1, (unint64_t)&v302);
    v252 = *(unsigned int *)(v245 + 20);
    *(_QWORD *)(*(_QWORD *)(v245 + 8) + 8 * v252) = *(_QWORD *)v281;
    v253 = v302;
  }
  else
  {
    *(_QWORD *)&(*v251)[8 * v252] = v248;
    v253 = (WTF *)v248;
  }
  *(_DWORD *)(v245 + 20) = v252 + 1;
  *((_QWORD *)v253 + 4) = v245;
  v255 = *((_QWORD *)this + 3472);
  v256 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v257 = *((_QWORD *)this + 3471);
  v258 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v258 + 8) = -1;
  *(_WORD *)(v258 + 12) = 152;
  *(_DWORD *)(v258 + 16) = 0;
  *(_BYTE *)(v258 + 20) = 1;
  *(_QWORD *)v258 = &unk_1E357EDA0;
  *(_QWORD *)(v258 + 40) = 0;
  *(_QWORD *)(v258 + 48) = v254;
  *(_QWORD *)(v258 + 24) = v257;
  *(_QWORD *)(v258 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v256, (JSC::B3::Value *)v258);
  v302 = (WTF *)v258;
  v262 = (char **)(v255 + 8);
  v263 = *(unsigned int *)(v255 + 20);
  if ((_DWORD)v263 == *(_DWORD *)(v255 + 16))
  {
    v282 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v262, v263 + 1, (unint64_t)&v302);
    v263 = *(unsigned int *)(v255 + 20);
    *(_QWORD *)(*(_QWORD *)(v255 + 8) + 8 * v263) = *(_QWORD *)v282;
    v264 = v302;
  }
  else
  {
    *(_QWORD *)&(*v262)[8 * v263] = v258;
    v264 = (WTF *)v258;
  }
  *(_DWORD *)(v255 + 20) = v263 + 1;
  *((_QWORD *)v264 + 4) = v255;
  v265 = *((_QWORD *)this + 3472);
  v266 = *((_QWORD *)this + 3470);
  v267 = *((_QWORD *)this + 3471);
  v302 = (WTF *)v95;
  LOBYTE(v303) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v265, v266, 154, v267, (uint64_t *)&v302, v259, v260, v261);
  *((_QWORD *)this + 3472) = v95;
  *((_QWORD *)this + 3473) = v295;
  v268 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v269 = *((_QWORD *)this + 3471);
  v270 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v270 = off_1E357F5F0;
  *(_DWORD *)(v270 + 8) = -1;
  *(_WORD *)(v270 + 12) = 153;
  *(_DWORD *)(v270 + 16) = 2;
  *(_BYTE *)(v270 + 20) = 0;
  *(_QWORD *)(v270 + 24) = v269;
  *(_QWORD *)(v270 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v268, (JSC::B3::Value *)v270);
  v302 = (WTF *)v270;
  v271 = (char **)(v95 + 8);
  v272 = *(unsigned int *)(v95 + 20);
  if ((_DWORD)v272 == *(_DWORD *)(v95 + 16))
  {
    v283 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v271, v272 + 1, (unint64_t)&v302);
    v272 = *(unsigned int *)(v95 + 20);
    *(_QWORD *)(*(_QWORD *)(v95 + 8) + 8 * v272) = *(_QWORD *)v283;
    v273 = v302;
  }
  else
  {
    *(_QWORD *)&(*v271)[8 * v272] = v270;
    v273 = (WTF *)v270;
  }
  *(_DWORD *)(v95 + 20) = v272 + 1;
  *((_QWORD *)v273 + 4) = v95;
  if ((*(_WORD *)(v205 + 12) & 0xFFF) == 0x98)
    v274 = v205;
  else
    v274 = 0;
  *(_QWORD *)(v274 + 40) = v270;
  if ((*(_WORD *)(v258 + 12) & 0xFFF) == 0x98)
    v275 = v258;
  else
    v275 = 0;
  *(_QWORD *)(v275 + 40) = v270;
  v304 = (_QWORD *)*((_QWORD *)this + 3528);
  v276 = *((_QWORD *)this + 3521);
  v301.n128_u64[0] = v270;
  v301.n128_u64[1] = v276;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v302, (uint64_t *)this + 3492, (uint64_t *)&v304, &v301);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileFunctionBind(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  JSC::DFG::Node *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;
  char v69;
  _QWORD *v70;
  unint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  JSC::B3::Value *v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  JSC::B3::Value *v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  int8x8_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  double result;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unsigned int *v159;
  unint64_t v160;
  __n128 v161;
  int64x2_t v162;
  _QWORD *v163;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v130 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v131 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v131 != 0x3FFFFFFF) ? (v132 = v131 == -1) : (v132 = 1), v132))
  {
    v133 = 2;
  }
  else if (v131 >> 28)
  {
    v152 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v152 = v130;
    *(_DWORD *)(v152 + 8) = v131;
    v133 = 1;
    v130 = v152;
  }
  else
  {
    v133 = v130;
    v130 = 0;
  }
  v10 = v130 | v133;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v130 | v133) & 1) == 0)
    goto LABEL_3;
  v143 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v144 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v144 != 0x3FFFFFFF) ? (v145 = v144 == -1) : (v145 = 1), v145))
  {
    v146 = 2;
  }
  else if (v144 >> 28)
  {
    v153 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v153 = v143;
    *(_DWORD *)(v153 + 8) = v144;
    v146 = 1;
    v143 = v153;
  }
  else
  {
    v146 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v143 = 0;
  }
  v147 = v143 | v146;
  v12 = (_QWORD *)(v147 & 0xFFFFFFFF8);
  if ((v147 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, a3, a4, a5, a6, a7, a8);
  v22 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v24 = *((_QWORD *)this + 3528);
  v25 = (unint64_t *)(v24 + 24);
  if ((*(_BYTE *)(v24 + 56) & 0x10) != 0)
  {
    v125 = *v25;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v125)
    {
      __break(0xC471u);
      JUMPOUT(0x197D47854);
    }
    v25 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v125);
  }
  v26 = *v25;
  v33 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v33 + 56) & 0x10) != 0)
  {
    v126 = *(_DWORD *)(v33 + 24) + 1;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v126)
    {
      __break(0xC471u);
      JUMPOUT(0x197D4785CLL);
    }
    v34 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v126);
  }
  else
  {
    v34 = (unint64_t *)(v33 + 32);
  }
  v36 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v36 + 56) & 0x10) != 0)
  {
    v127 = *(_DWORD *)(v36 + 24) + 2;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v127)
    {
      __break(0xC471u);
      JUMPOUT(0x197D47864);
    }
    v37 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v127);
  }
  else
  {
    v37 = (unint64_t *)(v36 + 40);
  }
  v39 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v39 + 56) & 0x10) != 0)
  {
    v128 = *(_DWORD *)(v39 + 24) + 3;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v128)
    {
      __break(0xC471u);
      JUMPOUT(0x197D4786CLL);
    }
    v40 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v128);
  }
  else
  {
    v40 = (unint64_t *)(v39 + 48);
  }
  v42 = *((_QWORD *)this + 3528);
  v44 = *(_BYTE *)(v42 + 56);
  v43 = (unint64_t *)(v42 + 56);
  if ((v44 & 0x10) != 0)
  {
    v129 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 4;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v129)
    {
      __break(0xC471u);
      JUMPOUT(0x197D47874);
    }
    v43 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v129);
  }
  v54 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationFunctionBind);
  v55 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), v53, *((_QWORD *)this + 3471), v54, v22, (uint64_t)v27, v35, v38, v41, v45);
  if (JSC::DFG::mayExit(*(JSC::DFG **)this, *((JSC::DFG::Graph **)this + 3528), v56))
  {
    v64 = *(_QWORD *)this;
    v65 = *((_QWORD *)this + 3524);
    if ((v65 & 1) != 0)
    {
      v134 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
      if ((v65 & 2) != 0 || (v135 = *(_DWORD *)((v65 & 0xFFFFFFFF8) + 8), v135 == 0x3FFFFFFF) || v135 == -1)
      {
        v136 = 2;
      }
      else if (v135 >> 28)
      {
        v154 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v154 = v134;
        *(_DWORD *)(v154 + 8) = v135;
        v136 = 1;
        v134 = v154;
      }
      else
      {
        v136 = v134;
        v134 = 0;
      }
      v65 = v134 | v136;
      v66 = *(_QWORD *)(v64 + 32);
      if (((v134 | v136) & 1) != 0)
      {
        v148 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
        if ((v65 & 2) != 0 || (v149 = *(_DWORD *)((v65 & 0xFFFFFFFF8) + 8), v149 == 0x3FFFFFFF) || v149 == -1)
        {
          v150 = 2;
        }
        else if (v149 >> 28)
        {
          v156 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v156 = v148;
          *(_DWORD *)(v156 + 8) = v149;
          v150 = 1;
          v148 = v156;
        }
        else
        {
          v150 = *(_QWORD *)(v65 & 0xFFFFFFFF8);
          v148 = 0;
        }
        v151 = v148 | v150;
        v67 = (_QWORD *)(v151 & 0xFFFFFFFF8);
        if ((v151 & 1) != 0)
        {
          v68 = 0;
          v69 = 0;
          v70 = (_QWORD *)*v67;
          if (!*v67)
          {
LABEL_22:
            v71 = *(_QWORD *)(v66 + 8);
            if ((v68 & 1) == 0 && v67)
              WTF::fastFree((unint64_t)v67, v57, v58, v59, v60, v61, v62, v63);
            if ((v69 & 1) == 0 && (v65 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v65 & 0xFFFFFFFF8, v57, v58, v59, v60, v61, v62, v63);
            v72 = v55;
            if ((*((_DWORD *)v55 + 4) & 0x80000000) != 0)
              v72 = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v55, 1u);
            if (HIBYTE(word_1ECF4C620))
            {
              v73 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationExceptionFuzz);
              JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v71, v74, v75, v76, v77, v78, v79);
              v80 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v71);
              JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), 0, *((_QWORD *)this + 3471), v73, v80);
              v81 = (JSC::B3::Value *)*((_QWORD *)this + 3485);
              v82 = *((_QWORD *)this + 791);
              if (v82)
              {
                v83 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v82);
                v81 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v81, v83);
              }
              v72 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6304), (uint64_t)v81, 2);
            }
            v88 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v72);
            v159 = 0;
            v160 = 2;
            v89 = *(_QWORD *)this;
            v90 = *((_QWORD *)this + 3525);
            if ((v90 & 1) != 0)
            {
              v137 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
              if ((v90 & 2) != 0
                || (v138 = *(unsigned int *)((v90 & 0xFFFFFFFF8) + 8), (_DWORD)v138 == 0x3FFFFFFF)
                || (_DWORD)v138 == -1)
              {
                v139 = 2;
              }
              else if (v138 >> 28)
              {
                v155 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v155 = v137;
                *(_DWORD *)(v155 + 8) = v138;
                v139 = 1;
                v137 = v155;
              }
              else
              {
                v139 = *(_QWORD *)(v90 & 0xFFFFFFFF8);
                v137 = v138 << 36;
              }
              v90 = v137 | v139;
            }
            v158 = v90;
            v98 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v89, &v158, (uint64_t *)&v160, &v159, v84, v85, v86, v87);
            if ((v158 & 1) != 0 && (v158 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v158 & 0xFFFFFFFF8, v91, v92, v93, v94, v95, v96, v97);
            if (v98)
            {
              v99 = v160;
              if ((v160 & 1) != 0)
              {
                v140 = *(_QWORD *)(v160 & 0xFFFFFFFF8);
                if ((v160 & 2) != 0
                  || (v141 = *(unsigned int *)((v160 & 0xFFFFFFFF8) + 8), (_DWORD)v141 == 0x3FFFFFFF)
                  || (_DWORD)v141 == -1)
                {
                  v142 = 2;
                }
                else if (v141 >> 28)
                {
                  v157 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v157 = v140;
                  *(_DWORD *)(v157 + 8) = v141;
                  v142 = 1;
                  v140 = v157;
                }
                else
                {
                  v142 = *(_QWORD *)(v160 & 0xFFFFFFFF8);
                  v140 = v141 << 36;
                }
                v99 = v140 | v142;
              }
              v161.n128_u64[0] = v99;
              v100 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v162, (uint64_t *)this + 3524, v161.n128_u64, v93, v94, v95, v96, v97).u64[0];
              if ((v162.i8[8] & 1) != 0 && (v162.i64[1] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v162.i64[1] & 0xFFFFFFFF8, v101, v102, v103, v104, v105, v106, v107);
              if ((v162.i8[0] & 1) != 0 && (v162.i64[0] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v162.i64[0] & 0xFFFFFFFF8, v101, v102, v103, v104, v105, v106, v107);
              if ((v161.n128_u8[0] & 1) != 0 && (v161.n128_u64[0] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v161.n128_u64[0] & 0xFFFFFFFF8, v101, v102, v103, v104, v105, v106, v107);
            }
            else
            {
              v108 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
              v109 = v108;
              v110 = *((_QWORD *)this + 3473);
              if (v110)
              {
                WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v110, v108);
              }
              else
              {
                v161.n128_u64[0] = v108;
                v115 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *(_OWORD *)v115 = 0u;
                *((_OWORD *)v115 + 1) = 0u;
                v115[3] = *((_QWORD *)this + 3477);
                *((_QWORD *)this + 3477) = v115;
                v163 = v115;
                v115[2] = v109;
                WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v161, (uint64_t *)&v163, v116, v117, v118, v119, v120, (uint64_t)&v162);
                v121 = v163;
                v122 = (_QWORD *)*((_QWORD *)this + 3479);
                *v163 = (char *)this + 27824;
                v121[1] = v122;
                *v122 = v121;
                *((_QWORD *)this + 3479) = v121;
              }
              JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v88, *((_QWORD *)this + 3482), v109, 0.0, 1.0, v111, v112, v113, v114);
              *((_QWORD *)this + 3472) = v109;
            }
            if ((v160 & 1) != 0 && (v160 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v160 & 0xFFFFFFFF8, v101, v102, v103, v104, v105, v106, v107);
            goto LABEL_44;
          }
LABEL_21:
          v66 = v70[1];
          goto LABEL_22;
        }
        v69 = 0;
        v68 = 1;
LABEL_20:
        v70 = v67;
        if (!v67)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    else
    {
      v66 = *(_QWORD *)(v64 + 32);
    }
    v67 = (_QWORD *)(v65 & 0xFFFFFFFF8);
    v68 = 1;
    v69 = 1;
    goto LABEL_20;
  }
LABEL_44:
  if ((*((_DWORD *)v55 + 4) & 0x80000000) != 0)
    v55 = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v55, 0);
  v163 = (_QWORD *)*((_QWORD *)this + 3528);
  v123 = *((_QWORD *)this + 3521);
  v161.n128_u64[0] = (unint64_t)v55;
  v161.n128_u64[1] = v123;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v162, (uint64_t *)this + 3492, (uint64_t *)&v163, &v161).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToPropertyKey(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::B3::BasicBlock *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  uint64_t v85;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v85, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v85, v3, v4, v5, v6, v7, v8);
  if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v85 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v84 = v17;
  v18 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v19 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v20 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v21 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v22 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v24 = v23;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v32, v18, v20, NAN, NAN, v33, v34, v35, v36);
  *((_QWORD *)this + 3472) = v18;
  v37 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v19;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v45, (uint64_t)v21, v19, NAN, NAN, v46, v47, v48, v49);
  *((_QWORD *)this + 3472) = v19;
  *((_QWORD *)this + 3473) = v20;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v57, (uint64_t)v21, v20, NAN, NAN, v58, v59, v60, v61);
  *((_QWORD *)this + 3472) = v20;
  *((_QWORD *)this + 3473) = v21;
  v73 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v72);
  v75 = v74;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21, v76, v77, v78, v79, v80, v81);
  *((_QWORD *)this + 3472) = v21;
  *((_QWORD *)this + 3473) = v37;
  v82 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v22, v24, v73, v75);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToPropertyKeyOrNumber(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  JSC::JSCell *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::B3::Value **v91;
  JSC::B3::Value *v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::B3::Value **v105;
  JSC::B3::Value *v106;
  uint64_t v107;
  JSC::B3::Value *v108;
  JSC::B3::Value *v109;
  char **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::B3::Value **v124;
  uint64_t v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  JSC::B3::Value *v128;
  JSC::B3::Value *v129;
  JSC::B3::Value *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::B3::Value *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  JSC::B3::Value *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  JSC::B3::Value *v167;
  uint64_t v168;
  uint64_t v169;
  char **v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  unsigned int v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  JSC::JSCell *v194;
  JSC::B3::Value *v195;
  __n128 v196;
  uint64_t v197;
  char v198;
  _QWORD *v199;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v180 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v181 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v181 != 0x3FFFFFFF) ? (v182 = v181 == -1) : (v182 = 1), v182))
  {
    v183 = 2;
  }
  else if (v181 >> 28)
  {
    v189 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v189 = v180;
    *(_DWORD *)(v189 + 8) = v181;
    v183 = 1;
    v180 = v189;
  }
  else
  {
    v183 = v180;
    v180 = 0;
  }
  v10 = v180 | v183;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v180 | v183) & 1) == 0)
    goto LABEL_3;
  v184 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v185 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v185 != 0x3FFFFFFF) ? (v186 = v185 == -1) : (v186 = 1), v186))
  {
    v187 = 2;
  }
  else if (v185 >> 28)
  {
    v190 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v190 = v184;
    *(_DWORD *)(v190 + 8) = v185;
    v187 = 1;
    v184 = v190;
  }
  else
  {
    v187 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v184 = 0;
  }
  v188 = v184 | v187;
  v12 = (_QWORD *)(v188 & 0xFFFFFFFF8);
  if ((v188 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(JSC::JSCell **)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v195 = v17;
  v18 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v19 = v18;
  v20 = *((_QWORD *)this + 3473);
  if (v20)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v20, v18);
  }
  else
  {
    v196.n128_u64[0] = v18;
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v21[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v21;
    v199 = v21;
    v21[2] = v19;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v196, (uint64_t *)&v199, v22, v23, v24, v25, v26, (uint64_t)&v197);
    v27 = v199;
    v28 = (_QWORD *)*((_QWORD *)this + 3479);
    *v199 = (char *)this + 27824;
    v27[1] = v28;
    *v28 = v27;
    *((_QWORD *)this + 3479) = v27;
  }
  v29 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = v29;
  v31 = *((_QWORD *)this + 3473);
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, v29);
  }
  else
  {
    v196.n128_u64[0] = v29;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v32 = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    v32[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v32;
    v199 = v32;
    v32[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v196, (uint64_t *)&v199, v33, v34, v35, v36, v37, (uint64_t)&v197);
    v38 = v199;
    v39 = (_QWORD *)*((_QWORD *)this + 3479);
    *v199 = (char *)this + 27824;
    v38[1] = v39;
    *v39 = v38;
    *((_QWORD *)this + 3479) = v38;
  }
  v40 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v41 = v40;
  v42 = *((_QWORD *)this + 3473);
  v194 = v16;
  v191 = v19;
  if (v42)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v42, v40);
  }
  else
  {
    v196.n128_u64[0] = v40;
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v43 = 0u;
    *((_OWORD *)v43 + 1) = 0u;
    v43[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v43;
    v199 = v43;
    v43[2] = v41;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v196, (uint64_t *)&v199, v44, v45, v46, v47, v48, (uint64_t)&v197);
    v49 = v199;
    v50 = (_QWORD *)*((_QWORD *)this + 3479);
    *v199 = (char *)this + 27824;
    v49[1] = v50;
    *v50 = v49;
    *((_QWORD *)this + 3479) = v49;
  }
  v51 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v52 = v51;
  v53 = *((_QWORD *)this + 3473);
  if (v53)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v53, v51);
  }
  else
  {
    v196.n128_u64[0] = v51;
    v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v54 = 0u;
    *((_OWORD *)v54 + 1) = 0u;
    v54[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v54;
    v199 = v54;
    v54[2] = v52;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v196, (uint64_t *)&v199, v55, v56, v57, v58, v59, (uint64_t)&v197);
    v60 = v199;
    v61 = (_QWORD *)*((_QWORD *)this + 3479);
    *v199 = (char *)this + 27824;
    v60[1] = v61;
    *v61 = v60;
    *((_QWORD *)this + 3479) = v60;
  }
  v62 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v63 = v62;
  v64 = *((_QWORD *)this + 3473);
  v193 = v41;
  if (v64)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v64, v62);
  }
  else
  {
    v196.n128_u64[0] = v62;
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v65 = 0u;
    *((_OWORD *)v65 + 1) = 0u;
    v65[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v65;
    v199 = v65;
    v65[2] = v63;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v196, (uint64_t *)&v199, v66, v67, v68, v69, v70, (uint64_t)&v197);
    v71 = v199;
    v72 = (_QWORD *)*((_QWORD *)this + 3479);
    *v199 = (char *)this + 27824;
    v71[1] = v72;
    *v72 = v71;
    *((_QWORD *)this + 3479) = v71;
  }
  v73 = *((_QWORD *)this + 3472);
  v74 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v75 = *((_QWORD *)this + 3471);
  v76 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v76 + 8) = -1;
  *(_WORD *)(v76 + 12) = 152;
  *(_BYTE *)(v76 + 20) = 1;
  *(_QWORD *)v76 = &unk_1E357EDA0;
  *(_DWORD *)(v76 + 16) = 0;
  *(_QWORD *)(v76 + 40) = 0;
  *(_QWORD *)(v76 + 48) = v17;
  *(_QWORD *)(v76 + 24) = v75;
  *(_QWORD *)(v76 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v74, (JSC::B3::Value *)v76);
  v197 = v76;
  v83 = (char **)(v73 + 8);
  v84 = *(unsigned int *)(v73 + 20);
  if ((_DWORD)v84 == *(_DWORD *)(v73 + 16))
  {
    v176 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83, v84 + 1, (unint64_t)&v197);
    v84 = *(unsigned int *)(v73 + 20);
    *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v84) = *(_QWORD *)v176;
    v85 = v197;
  }
  else
  {
    *(_QWORD *)&(*v83)[8 * v84] = v76;
    v85 = v76;
  }
  *(_DWORD *)(v73 + 20) = v84 + 1;
  *(_QWORD *)(v85 + 32) = v73;
  v91 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v86 & 0xFFFFFF00FFFFFFFFLL) != 0)
  {
    if ((v86 & 0xFF00000000) != 0)
    {
LABEL_27:
      v92 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, *((JSC::B3::Value **)this + 3487));
      v93 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v92);
      goto LABEL_28;
    }
    v91 = (JSC::B3::Value **)((char *)this + 27648);
  }
  v93 = *v91;
  if (!*v91)
    goto LABEL_27;
LABEL_28:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v93, v63, v191, NAN, NAN, v87, v88, v89, v90);
  *((_QWORD *)this + 3472) = v191;
  v192 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v30;
  v105 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v100 & 0xFFFFD3FF00000008) == 0)
    goto LABEL_57;
  if ((v100 & 0x2C00FFFFFFF7) == 0)
  {
    v105 = (JSC::B3::Value **)((char *)this + 27648);
LABEL_57:
    v109 = *v105;
    if (*v105)
      goto LABEL_33;
  }
  v106 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, *((JSC::B3::Value **)this + 3488));
  v107 = *((_QWORD *)this + 3472);
  v108 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v109 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v106, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v108, v109);
  v197 = (uint64_t)v109;
  v110 = (char **)(v107 + 8);
  v111 = *(unsigned int *)(v107 + 20);
  if ((_DWORD)v111 == *(_DWORD *)(v107 + 16))
  {
    v179 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v110, v111 + 1, (unint64_t)&v197);
    v111 = *(unsigned int *)(v107 + 20);
    *(_QWORD *)(*(_QWORD *)(v107 + 8) + 8 * v111) = *(_QWORD *)v179;
    v112 = v197;
  }
  else
  {
    *(_QWORD *)&(*v110)[8 * v111] = v109;
    v112 = (uint64_t)v109;
  }
  *(_DWORD *)(v107 + 20) = v111 + 1;
  *(_QWORD *)(v112 + 32) = v107;
LABEL_33:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v109, v30, v52, NAN, NAN, v101, v102, v103, v104);
  *((_QWORD *)this + 3472) = v30;
  *((_QWORD *)this + 3473) = v193;
  v124 = (JSC::B3::Value **)((char *)this + 27640);
  if ((v119 & 0x2800CFFFFFF7) == 0)
    goto LABEL_60;
  if ((v119 & 0x30000000) == 0)
  {
    v124 = (JSC::B3::Value **)((char *)this + 27648);
LABEL_60:
    v130 = *v124;
    if (*v124)
      goto LABEL_38;
  }
  v125 = *((_QWORD *)this + 395);
  v126 = (uint64_t)v17;
  if (v125)
  {
    v127 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v125);
    v126 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v127);
  }
  v128 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 3136, v126);
  v129 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
  v130 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v128, v129);
LABEL_38:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v130, v63, v193, NAN, NAN, v120, v121, v122, v123);
  *((_QWORD *)this + 3472) = v193;
  *((_QWORD *)this + 3473) = v52;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v138, v63, v52, NAN, NAN, v139, v140, v141, v142);
  *((_QWORD *)this + 3472) = v52;
  *((_QWORD *)this + 3473) = v63;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v194, v143, v144, v145, v146, v147, v148);
  v196.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v194);
  v154 = *((_QWORD *)this + 3472);
  v155 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v156 = *((_QWORD *)this + 3471);
  v157 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v157 + 8) = -1;
  *(_WORD *)(v157 + 12) = 152;
  *(_DWORD *)(v157 + 16) = 0;
  *(_BYTE *)(v157 + 20) = 1;
  *(_QWORD *)v157 = &unk_1E357EDA0;
  *(_QWORD *)(v157 + 40) = 0;
  *(_QWORD *)(v157 + 48) = v153;
  *(_QWORD *)(v157 + 24) = v156;
  *(_QWORD *)(v157 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v155, (JSC::B3::Value *)v157);
  v197 = v157;
  v161 = (char **)(v154 + 8);
  v162 = *(unsigned int *)(v154 + 20);
  if ((_DWORD)v162 == *(_DWORD *)(v154 + 16))
  {
    v177 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v161, v162 + 1, (unint64_t)&v197);
    v162 = *(unsigned int *)(v154 + 20);
    *(_QWORD *)(*(_QWORD *)(v154 + 8) + 8 * v162) = *(_QWORD *)v177;
    v163 = v197;
  }
  else
  {
    *(_QWORD *)&(*v161)[8 * v162] = v157;
    v163 = v157;
  }
  *(_DWORD *)(v154 + 20) = v162 + 1;
  *(_QWORD *)(v163 + 32) = v154;
  v164 = *((_QWORD *)this + 3472);
  v165 = *((_QWORD *)this + 3470);
  v166 = *((_QWORD *)this + 3471);
  v197 = v63;
  v198 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v164, v165, 154, v166, &v197, v158, v159, v160);
  *((_QWORD *)this + 3472) = v63;
  *((_QWORD *)this + 3473) = v192;
  v167 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v168 = *((_QWORD *)this + 3471);
  v169 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v169 = off_1E357F5F0;
  *(_DWORD *)(v169 + 8) = -1;
  *(_WORD *)(v169 + 12) = 153;
  *(_DWORD *)(v169 + 16) = 2;
  *(_BYTE *)(v169 + 20) = 0;
  *(_QWORD *)(v169 + 24) = v168;
  *(_QWORD *)(v169 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v167, (JSC::B3::Value *)v169);
  v197 = v169;
  v170 = (char **)(v63 + 8);
  v171 = *(unsigned int *)(v63 + 20);
  if ((_DWORD)v171 == *(_DWORD *)(v63 + 16))
  {
    v178 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v170, v171 + 1, (unint64_t)&v197);
    v171 = *(unsigned int *)(v63 + 20);
    *(_QWORD *)(*(_QWORD *)(v63 + 8) + 8 * v171) = *(_QWORD *)v178;
    v172 = v197;
  }
  else
  {
    *(_QWORD *)&(*v170)[8 * v171] = v169;
    v172 = v169;
  }
  *(_DWORD *)(v63 + 20) = v171 + 1;
  *(_QWORD *)(v172 + 32) = v63;
  if ((*(_WORD *)(v76 + 12) & 0xFFF) == 0x98)
    v173 = v76;
  else
    v173 = 0;
  *(_QWORD *)(v173 + 40) = v169;
  if ((*(_WORD *)(v157 + 12) & 0xFFF) == 0x98)
    v174 = v157;
  else
    v174 = 0;
  *(_QWORD *)(v174 + 40) = v169;
  v199 = (_QWORD *)*((_QWORD *)this + 3528);
  v175 = *((_QWORD *)this + 3521);
  v196.n128_u64[0] = v169;
  v196.n128_u64[1] = v175;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v197, (uint64_t *)this + 3492, (uint64_t *)&v199, &v196);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMakeAtomString(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  uint64_t v56[2];

  v56[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v53, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v53, v3, v4, v5, v6, v7, v8);
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v55 = 0;
  v56[0] = 0;
  v25 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  if ((v25 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v33 = *(_QWORD *)(*((_QWORD *)this + 3528) + 40);
    if ((v33 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
    }
    else
    {
    }
  }
  else
  {
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringCodePointAt(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::B3::BasicBlock *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;
  int8x8_t v25;
  JSC::B3::Value *v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  JSC::FTL::IndexedAbstractHeap *v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  JSC::FTL::IndexedAbstractHeap *v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v74;
  JSC::B3::Value *v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  JSC::FTL::IndexedAbstractHeap *v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  JSC::B3::Value *v81;
  JSC::B3::Value *v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  JSC::B3::Value *v90;
  JSC::B3::Value *v91;
  JSC::B3::Value *v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::B3::Value *v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  JSC::B3::Value *v112;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v4 = JSC::FTL::Output::newBlock(v2);
  v5 = JSC::FTL::Output::newBlock(v2);
  v105 = JSC::FTL::Output::newBlock(v2);
  v108 = JSC::FTL::Output::newBlock(v2);
  v6 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v2, v112, *((const JSC::FTL::AbstractHeap **)this + 3313));
  v23 = (JSC::B3::Value *)JSC::FTL::Output::load32(v2, Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5248));
  v24 = JSC::FTL::Output::aboveOrEqual(v2, v21, v23);
  v26 = (JSC::B3::Value *)JSC::FTL::Output::load32(v2, Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5200));
  v27 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 4);
  v28 = JSC::FTL::Output::bitAnd(v2, v26, v27);
  v29 = JSC::FTL::Output::logicalNot(v2, v28);
  JSC::FTL::Output::branch(v2, (uint64_t)v29, v4, v3, NAN, NAN, v30, v31, v32, v33);
  *((_QWORD *)this + 3472) = v3;
  v111 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v4;
  v34 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v2, Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5152));
  v37 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v2, (uint64_t)v35, v36);
  v38 = JSC::FTL::Output::anchor(v2, v37);
  v109 = v39;
  v110 = v38;
  JSC::FTL::Output::jump(v2, v6, v40, v41, v42, v43, v44, v45);
  *((_QWORD *)this + 3472) = v4;
  *((_QWORD *)this + 3473) = v5;
  v46 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v2, Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5152));
  v49 = (JSC::B3::Value *)JSC::FTL::Output::load16ZeroExt32(v2, (uint64_t)v47, v48);
  v50 = JSC::FTL::Output::anchor(v2, v49);
  v106 = v51;
  v107 = v50;
  v52 = (JSC::B3::Value *)JSC::FTL::Output::add(v2, v21, *((JSC::B3::Value **)this + 3458));
  v53 = JSC::FTL::Output::aboveOrEqual(v2, v52, v23);
  JSC::FTL::Output::branch(v2, (uint64_t)v53, (uint64_t)v6, v5, NAN, NAN, v54, v55, v56, v57);
  *((_QWORD *)this + 3472) = v5;
  *((_QWORD *)this + 3473) = v105;
  v58 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, -1024);
  v59 = JSC::FTL::Output::bitAnd(v2, v49, v58);
  v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 55296);
  v61 = JSC::FTL::Output::notEqual(v2, v59, v60);
  JSC::FTL::Output::branch(v2, (uint64_t)v61, (uint64_t)v6, v105, NAN, NAN, v62, v63, v64, v65);
  *((_QWORD *)this + 3472) = v105;
  *((_QWORD *)this + 3473) = v108;
  if ((_DWORD)v72 != 0x7FFFFFFF && v72 >= 0xFFFE000000000000)
    v74 = (v72 + 1) | 0xFFFE000000000000;
  else
    v74 = 0;
  v75 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v2, Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5152));
  v76 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v2, (uint64_t)v52, 2);
  v78 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 15592), v2, v75, v76, v74, 0, 0, v77);
  v80 = (JSC::B3::Value *)JSC::FTL::Output::load16ZeroExt32(v2, (uint64_t)v78, v79);
  v81 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, -1024);
  v82 = JSC::FTL::Output::bitAnd(v2, v80, v81);
  v83 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 56320);
  v84 = JSC::FTL::Output::notEqual(v2, v82, v83);
  JSC::FTL::Output::branch(v2, (uint64_t)v84, (uint64_t)v6, v108, NAN, NAN, v85, v86, v87, v88);
  *((_QWORD *)this + 3472) = v108;
  *((_QWORD *)this + 3473) = v6;
  v89 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 10);
  v90 = JSC::FTL::Output::shl(v2, v49, v89);
  v91 = (JSC::B3::Value *)JSC::FTL::Output::add(v2, v90, v80);
  v92 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 56613888);
  v93 = JSC::FTL::Output::sub(v2, v91, v92);
  v94 = JSC::FTL::Output::anchor(v2, v93);
  v96 = v95;
  JSC::FTL::Output::jump(v2, v6, v97, v98, v99, v100, v101, v102);
  *((_QWORD *)this + 3472) = v6;
  *((_QWORD *)this + 3473) = v111;
  v103 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(v2, 1, v110, v109, v107, v106, v94, v96);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringFromCharCode(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::BasicBlock *v24;
  JSC::B3::Value *v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  JSC::FTL::IndexedAbstractHeap *v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v75, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v75, v3, v4, v5, v6, v7, v8);
  if ((v75 & 1) != 0 && (v75 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v75 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = v18[3];
  v20 = (v19 >> 50) & 0x3F;
  if ((v20 - 1) < 2)
  {
    v74 = (uint64_t)v21;
    v22 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v23 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v24 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v25 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 255);
    v26 = JSC::FTL::Output::above((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21, v25);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v26, v23, v22, 0.0, 1.0, v27, v28, v29, v30);
    *((_QWORD *)this + 3472) = v22;
    v31 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v23;
    v32 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(*(_QWORD *)this + 16) + 42216);
    v33 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v21, 2);
    v35 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 20552), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32, v33, 0, 0, 0, v34);
    v37 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v35, v36, 2);
    v38 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37);
    v40 = v39;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v41, v42, v43, v44, v45, v46);
    *((_QWORD *)this + 3472) = v23;
    *((_QWORD *)this + 3473) = v24;
    v59 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v58);
    v61 = v60;
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v62, v63, v64, v65, v66, v67);
    *((_QWORD *)this + 3472) = v24;
    *((_QWORD *)this + 3473) = v31;
    v68 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v38, v40, v59, v61);
LABEL_4:
    return;
  }
  if (!(_DWORD)v20)
  {
    goto LABEL_4;
  }
  JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x27F6, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileStringFromCharCode()", "childEdge.useKind() == Int32Use || childEdge.useKind() == KnownInt32Use");
  __break(0xC471u);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringLocaleCompare(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  JSC::B3::Value *v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v41, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v41, v3, v4, v5, v6, v7, v8);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v36 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v35);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringIndexOf(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSCell *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  uint64_t v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  WTF::StringImpl *v85;

  JSC::DFG::Node::tryGetString((JSC::DFG::Node *)(*(_QWORD *)(*((_QWORD *)this + 3528) + 32) & 0xFF00FFFFFFFFFFFFLL), *(JSC::DFG::Graph **)this, a4, a5, a6, a7, a8, (int **)&v85);
  if (v85 && *((_DWORD *)v85 + 1) == 1)
  {
    v16 = WTF::StringImpl::at(v85, 0);
    v17 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v25 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v82, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v39 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v25, &v82, v26, v27, v28, v29, v30, v31);
  if ((v82 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v82 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((v17 & 1) != 0)
    {
    }
    else
    {
      v79 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    }
  }
  else
  {
    if ((v17 & 1) != 0)
    {
    }
    else
    {
      v80 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    }
  }
  v49 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v48);
  v57 = v85;
  v85 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetGetter(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double result;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v12 = *((_QWORD *)this + 269);
  if (v12)
  {
    v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, v12);
    v11 = (JSC::B3::Value *)JSC::FTL::Output::add(v10, v11, v13);
  }
  v14 = JSC::FTL::Output::load((uint64_t)v10, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2128), (uint64_t)v11, 2);
  v15 = *((_QWORD *)this + 3528);
  v16 = *((_QWORD *)this + 3521);
  v19.n128_u64[0] = v14;
  v19.n128_u64[1] = v16;
  v20 = v15;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v18, (uint64_t *)this + 3492, &v20, &v19).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetSetter(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double result;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v12 = *((_QWORD *)this + 275);
  if (v12)
  {
    v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, v12);
    v11 = (JSC::B3::Value *)JSC::FTL::Output::add(v10, v11, v13);
  }
  v14 = JSC::FTL::Output::load((uint64_t)v10, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2176), (uint64_t)v11, 2);
  v15 = *((_QWORD *)this + 3528);
  v16 = *((_QWORD *)this + 3521);
  v19.n128_u64[0] = v14;
  v19.n128_u64[1] = v16;
  v20 = v15;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v18, (uint64_t *)this + 3492, &v20, &v19).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMultiDeleteByOffset(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::BasicBlock *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  JSC::FTL::Output *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  uint64_t isSubsetOf;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int8x8_t v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::B3::BasicBlock *v96;
  uint64_t v97;
  JSC::B3::Value *Ptr;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  JSC::B3::Value *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  JSC::B3::Value *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  JSC::B3::Value *v122;
  WTF *v123;
  WTF *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  char v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  JSC::B3::Value *v149;
  JSC::B3::BasicBlock *v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153;
  int v154;
  WTF *v155;
  unint64_t v156;
  _QWORD v157[4];
  uint64_t v158;
  WTF *v159;
  uint64_t v160;
  _QWORD v161[6];
  _BYTE *v162;
  int v163;
  unsigned int v164;
  _BYTE v165[24];

  v11 = *(unsigned int **)(*((_QWORD *)this + 3528) + 72);
  v12 = v11[5];
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = v12 - 1;
    v16 = 40 * (v12 - 1);
    do
    {
      if (v11[5] <= v15)
        goto LABEL_114;
      JSC::DeleteByVariant::DeleteByVariant((JSC::DeleteByVariant *)&v159, (const JSC::DeleteByVariant *)(*((_QWORD *)v11 + 1) + v16));
      if (!v161[0])
      {
        if ((_BYTE)v159)
          ++v13;
        else
          ++v14;
      }
      JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)&v159);
      v16 -= 40;
      --v15;
    }
    while (v15 != -1);
    v12 = v11[5];
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v17 = v13 - 1;
  if (!v13)
    v17 = 0;
  v18 = v14 - 1;
  if (!v14)
    v18 = 0;
  v19 = v12 - (v18 + v17);
  if (v13)
    v20 = v19 - 1;
  else
    v20 = -1;
  v146 = v20;
  v142 = v19 - 1;
  v21 = v19 - 1 - (v13 != 0);
  if (v14)
    v22 = v19 - 1 - (v13 != 0);
  else
    v22 = -1;
  v144 = v22;
  v162 = v165;
  v163 = 2;
  v164 = v19;
  v149 = v10;
  if (v19 >= 3)
  {
    if (v19 >> 29)
    {
LABEL_114:
      __break(0xC471u);
      JUMPOUT(0x197D4996CLL);
    }
    v140 = WTF::fastMalloc((WTF *)(8 * v19));
    v163 = v19;
    v162 = (_BYTE *)v140;
    LODWORD(v19) = v164;
  }
  if ((_DWORD)v19)
  {
    v23 = v19 - 1;
    v24 = 8 * v23;
    do
    {
      v25 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      if (v164 <= v23)
      {
        __break(0xC471u);
        JUMPOUT(0x197D49974);
      }
      *(_QWORD *)&v162[v24] = v25;
      v24 -= 8;
      --v23;
    }
    while (v23 != -1);
  }
  v141 = v21;
  v147 = v14;
  v148 = v13;
  v26 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v150 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v158 = 0;
  v159 = (WTF *)v161;
  v160 = 2;
  v33 = v11[5];
  if (v33)
  {
    v34 = 0;
    v35 = v33 - 1;
    v36 = 40 * (v33 - 1);
    do
    {
      if (v11[5] <= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x197D4997CLL);
      }
      JSC::DeleteByVariant::DeleteByVariant((JSC::DeleteByVariant *)&v155, (const JSC::DeleteByVariant *)(*((_QWORD *)v11 + 1) + v36));
      v42 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v156, (int *)&v152, v37, v38, v39, v40, v41);
      v43 = v42;
      if ((v158 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v158, v42);
      }
      else if ((v158 & 0xFFFFFFFFFFFFFFFCLL) != v42)
      {
        if ((v158 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v68 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v68 = 0x400000002;
          v69 = v158;
          *(_QWORD *)(v68 + 8) = v158 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v68 + 16) = v43;
          v56 = v69 & 2 | (unint64_t)v68 | 1;
        }
        else
        {
          v56 = v158 & 2 | v42;
        }
        v158 = v56;
      }
      v44 = v43 >> 4;
      v45 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      if (v157[0])
      {
        v46 = JSC::FTL::Output::constInt32(v45, v44);
        if (v164 <= v34)
        {
          __break(0xC471u);
          JUMPOUT(0x197D49984);
        }
        v53 = *(_QWORD *)&v162[8 * v34];
        *(_QWORD *)&v152 = v46;
        *((_QWORD *)&v152 + 1) = v53;
        LODWORD(v153) = 1065353216;
        if (HIDWORD(v160) == (_DWORD)v160)
        {
          WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v159, (unint64_t)&v152, v47, v48, v49, v50, v51, v52);
        }
        else
        {
          v54 = (char *)v159 + 24 * HIDWORD(v160);
          v55 = v152;
          *((_QWORD *)v54 + 2) = v153;
          *(_OWORD *)v54 = v55;
          ++HIDWORD(v160);
        }
        ++v34;
      }
      else
      {
        v57 = JSC::FTL::Output::constInt32(v45, v44);
        v64 = v146;
        if (!(_BYTE)v155)
          v64 = v144;
        if (v164 <= (unint64_t)v64)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4999CLL);
        }
        v65 = *(_QWORD *)&v162[8 * v64];
        *(_QWORD *)&v152 = v57;
        *((_QWORD *)&v152 + 1) = v65;
        LODWORD(v153) = 1065353216;
        if (HIDWORD(v160) == (_DWORD)v160)
        {
          WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v159, (unint64_t)&v152, v58, v59, v60, v61, v62, v63);
        }
        else
        {
          v66 = (char *)v159 + 24 * HIDWORD(v160);
          v67 = v152;
          *((_QWORD *)v66 + 2) = v153;
          *(_OWORD *)v66 = v67;
          ++HIDWORD(v160);
        }
      }
      JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)&v155);
      v36 -= 40;
      --v35;
    }
    while (v35 != -1);
  }
  v70 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v71 = *((_QWORD *)this + 3519);
  v72 = *(_QWORD *)(v71 + 8);
  v73 = *(unsigned int *)((v70 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v74 = (_QWORD *)(v72 + 24);
  v75 = (_QWORD *)(v72 + 8);
  if ((v70 & 1) != 0)
    v76 = v74;
  else
    v76 = v75;
  v77 = *v76 + 32 * v73;
  v78 = (void *)*(unsigned int *)(v71 + 88);
  if ((_DWORD)v78 != *(_DWORD *)(v77 + 20))
  {
    if ((*(_QWORD *)(v77 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v77, v78, v27, v28, v29, v30, v31, v32);
    else
      *(_DWORD *)(v77 + 20) = (_DWORD)v78;
  }
  isSubsetOf = JSC::DFG::StructureAbstractValue::isSubsetOf((uint64_t *)v77, &v158);
  v143 = isSubsetOf;
  v145 = *((_QWORD *)this + 3473);
  v155 = (WTF *)v157;
  v156 = 2;
  v89 = v11[5];
  if (v89)
  {
    v90 = 0;
    v91 = v89 - 1;
    v92 = 40 * (v89 - 1);
    do
    {
      if (v11[5] <= v91)
      {
        __break(0xC471u);
        JUMPOUT(0x197D4998CLL);
      }
      JSC::DeleteByVariant::DeleteByVariant((JSC::DeleteByVariant *)&v152, (const JSC::DeleteByVariant *)(*((_QWORD *)v11 + 1) + v92));
      if (v153)
      {
        if (v164 <= v90)
        {
          __break(0xC471u);
          JUMPOUT(0x197D49994);
        }
        v96 = v26;
        if (v164 > v90 + 1)
          v96 = *(JSC::B3::BasicBlock **)&v162[8 * v90 + 8];
        *((_QWORD *)this + 3472) = *(_QWORD *)&v162[8 * v90];
        *((_QWORD *)this + 3473) = v96;
        v97 = v154;
        if (v154 < 64)
        {
          Ptr = v149;
        }
        else
        {
          Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v149, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3568));
          v97 = v154;
        }
        v104 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v153, (int *)&v151, v99, v100, v101, v102, v103);
        v105 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v104 >> 4);
        JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v105, v149, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040));
        v106 = 27640;
        if (!(_BYTE)v152)
          v106 = 27648;
        *(_QWORD *)&v151 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(JSC::B3::Value **)((char *)this + v106));
        *((_QWORD *)&v151 + 1) = v107;
        if (HIDWORD(v156) == (_DWORD)v156)
        {
          WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v155, (unint64_t)&v151, v108, v109, v110, v111, v112, v113);
        }
        else
        {
          *((_OWORD *)v155 + HIDWORD(v156)) = v151;
          ++HIDWORD(v156);
        }
        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v150, v108, v109, v110, v111, v112, v113);
        ++v90;
      }
      JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)&v152);
      v92 -= 40;
      --v91;
    }
    while (v91 != -1);
  }
  if (v147)
  {
    if (v164 <= (unint64_t)v141)
    {
      __break(0xC471u);
      JUMPOUT(0x197D499A4);
    }
    *((_QWORD *)this + 3472) = *(_QWORD *)&v162[8 * v141];
    *(_QWORD *)&v152 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3456));
    *((_QWORD *)&v152 + 1) = v126;
    if (HIDWORD(v156) == (_DWORD)v156)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v155, (unint64_t)&v152, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *((_OWORD *)v155 + HIDWORD(v156)) = v152;
      ++HIDWORD(v156);
    }
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v150, v127, v128, v129, v130, v131, v132);
  }
  if (v148)
  {
    if (v164 <= (unint64_t)v142)
    {
      __break(0xC471u);
      JUMPOUT(0x197D499ACLL);
    }
    *((_QWORD *)this + 3472) = *(_QWORD *)&v162[8 * v142];
    *((_QWORD *)this + 3473) = v26;
    *(_QWORD *)&v152 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3455));
    *((_QWORD *)&v152 + 1) = v133;
    if (HIDWORD(v156) == (_DWORD)v156)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v155, (unint64_t)&v152, v134, v135, v136, v137, v138, v139);
    }
    else
    {
      *((_OWORD *)v155 + HIDWORD(v156)) = v152;
      ++HIDWORD(v156);
    }
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v150, v134, v135, v136, v137, v138, v139);
  }
  *((_QWORD *)this + 3472) = v26;
  *((_QWORD *)this + 3473) = v150;
  if ((v143 & 1) == 0)
  {
    v26 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 3472);
  }
  JSC::B3::BasicBlock::appendNewControlValue((uint64_t)v26, *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v84, v85, v86, v87);
  *((_QWORD *)this + 3472) = v150;
  *((_QWORD *)this + 3473) = v145;
  v114 = (JSC::B3::Value *)JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)this + 3455, 1, (unsigned int *)&v155);
  if (JSC::DFG::MultiDeleteByOffsetData::writesStructures((_BOOL8)v11))
  {
    v122 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
    JSC::FTL::AbstractHeapRepository::decoratePatchpointWrite((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 112), v122);
  }
  v123 = v155;
  if (v157 != (_QWORD *)v155 && v155)
  {
    v155 = 0;
    LODWORD(v156) = 0;
    WTF::fastFree((unint64_t)v123, v115, v116, v117, v118, v119, v120, v121);
  }
  if ((v158 & 1) != 0)
    WTF::fastFree(v158 & 0xFFFFFFFFFFFFFFFCLL, v115, v116, v117, v118, v119, v120, v121);
  v124 = v159;
  if (v161 != (_QWORD *)v159 && v159)
  {
    v159 = 0;
    LODWORD(v160) = 0;
    WTF::fastFree((unint64_t)v124, v115, v116, v117, v118, v119, v120, v121);
  }
  v125 = (unint64_t)v162;
  if (v165 != v162)
  {
    if (v162)
    {
      v162 = 0;
      v163 = 0;
      WTF::fastFree(v125, v115, v116, v117, v118, v119, v120, v121);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMatchStructure(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t isSubsetOf;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x8_t v69;
  JSC::B3::Value *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  JSC::B3::Value *v79;
  uint64_t v80;
  JSC::B3::BasicBlock *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  _BYTE v87[48];

  v10 = *(uint64_t **)(*((_QWORD *)this + 3528) + 72);
  v11 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v12 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v13 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v14 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v80 = *((_QWORD *)this + 3473);
  v81 = (JSC::B3::BasicBlock *)v14;
  *((_QWORD *)this + 3473) = v11;
  v84 = 0;
  v85 = (WTF *)v87;
  v86 = 2;
  v21 = *((unsigned int *)v10 + 3);
  if ((_DWORD)v21)
  {
    v22 = *v10;
    v23 = *v10 + 16 * v21;
    do
    {
      v24 = *(_QWORD *)v22;
      if ((v84 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v84, *(_QWORD *)v22);
      }
      else if (v24 != (v84 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v84 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v30 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v30 = 0x400000002;
          v31 = v84;
          *(_QWORD *)(v30 + 8) = v84 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v30 + 16) = v24;
          v29 = v31 & 2 | (unint64_t)v30 | 1;
        }
        else
        {
          v29 = v84 & 2 | v24;
        }
        v84 = v29;
      }
      v25 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)v22 >> 4);
      if (*(_BYTE *)(v22 + 8))
        v26 = v11;
      else
        v26 = v12;
      *(_QWORD *)&v82 = v25;
      *((_QWORD *)&v82 + 1) = v26;
      LODWORD(v83) = 1065353216;
      if (HIDWORD(v86) == (_DWORD)v86)
      {
        WTF::Vector<JSC::FTL::SwitchCase,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::SwitchCase>((uint64_t)&v85, (unint64_t)&v82, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        v27 = (char *)v85 + 24 * HIDWORD(v86);
        v28 = v82;
        *((_QWORD *)v27 + 2) = v83;
        *(_OWORD *)v27 = v28;
        ++HIDWORD(v86);
      }
      v22 += 16;
    }
    while (v22 != v23);
  }
  v32 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v33 = *((_QWORD *)this + 3519);
  v34 = *(_QWORD *)(v33 + 8);
  v35 = *(unsigned int *)((v32 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v36 = (_QWORD *)(v34 + 24);
  v37 = (_QWORD *)(v34 + 8);
  if ((v32 & 1) != 0)
    v38 = v36;
  else
    v38 = v37;
  v39 = *v38 + 32 * v35;
  v40 = (void *)*(unsigned int *)(v33 + 88);
  if ((_DWORD)v40 != *(_DWORD *)(v39 + 20))
  {
    if ((*(_QWORD *)(v39 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v39, v40, v15, v16, v17, v18, v19, v20);
    else
      *(_DWORD *)(v39 + 20) = (_DWORD)v40;
  }
  isSubsetOf = JSC::DFG::StructureAbstractValue::isSubsetOf((uint64_t *)v39, &v84);
  v42 = isSubsetOf;
  *((_QWORD *)this + 3472) = v11;
  *((_QWORD *)this + 3473) = v12;
  v47 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3455));
  v49 = v48;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v81, v50, v51, v52, v53, v54, v55);
  *((_QWORD *)this + 3472) = v12;
  *((_QWORD *)this + 3473) = v13;
  v56 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3456));
  v58 = v57;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v81, v59, v60, v61, v62, v63, v64);
  *((_QWORD *)this + 3472) = v13;
  *((_QWORD *)this + 3473) = v81;
  if ((v42 & 1) == 0)
  {
    v13 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 3472);
  }
  JSC::B3::BasicBlock::appendNewControlValue((uint64_t)v13, *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v65, v66, v67, v68);
  *((_QWORD *)this + 3472) = v81;
  *((_QWORD *)this + 3473) = v80;
  v70 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 1, v47, v49, v56, v58);
  if ((v84 & 1) != 0)
    WTF::fastFree(v84 & 0xFFFFFFFFFFFFFFFCLL, v71, v72, v73, v74, v75, v76, v77);
  v78 = v85;
  if (v87 != (_BYTE *)v85)
  {
    if (v85)
    {
      v85 = 0;
      LODWORD(v86) = 0;
      WTF::fastFree((unint64_t)v78, v71, v72, v73, v74, v75, v76, v77);
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNotifyWrite(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  JSC::FTL::Output *v3;
  uint64_t v4;
  JSC::B3::BasicBlock *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::FTL::AbstractHeap *v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  __int128 v29;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3528) + 72);
  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v5 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v3);
  v12 = JSC::FTL::Output::absolute(v3, v2 + 4, v6, v7, v8, v9, v10, v11);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v3, (uint64_t)v12, v13);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 2);
  v16 = JSC::FTL::Output::equal(v3, v14, v15);
  JSC::FTL::Output::branch(v3, (uint64_t)v16, (uint64_t)v5, v4, 1.0, 0.0, v17, v18, v19, v20);
  *((_QWORD *)this + 3472) = v4;
  v21 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v5;
  *(_QWORD *)&v29 = *(_QWORD *)(*(_QWORD *)this + 16);
  *((_QWORD *)&v29 + 1) = v2;
  result = JSC::FTL::Output::jump(v3, v5, v22, v23, v24, v25, v26, v27);
  *((_QWORD *)this + 3472) = v5;
  *((_QWORD *)this + 3473) = v21;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSetCallee(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::FTL::AbstractHeap *v17;
  uint64_t v18;

  return JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v10, v17, v18);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSetArgumentCountIncludingThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::FTL::AbstractHeap *v10;
  uint64_t v11;

  v2 = (char *)this + 27640;
  v3 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  return JSC::FTL::Output::store((uint64_t)v2, v3, v10, v11);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetGlobalObject(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double result;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;

  v11 = *((_QWORD *)this + 383);
  if (v11)
  {
    v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11);
    v10 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10, v12);
  }
  v13 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040), (uint64_t)v10, 1);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v13, 2);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v16 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14, v15);
  v17 = *((_QWORD *)this + 677);
  if (v17)
  {
    v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v16 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16, v18);
  }
  v19 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5392), (uint64_t)v16, 2);
  v20 = *((_QWORD *)this + 3528);
  v21 = *((_QWORD *)this + 3521);
  v24.n128_u64[0] = v19;
  v24.n128_u64[1] = v21;
  v25 = v20;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v23, (uint64_t *)this + 3492, &v25, &v24).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetGlobalThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  JSC::FTL::AbstractHeap *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  __n128 v36;
  uint64_t v37;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v22 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v23 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v23 != 0x3FFFFFFF) ? (v24 = v23 == -1) : (v24 = 1), v24))
  {
    v25 = 2;
  }
  else if (v23 >> 28)
  {
    v31 = *(_QWORD *)this;
    v32 = WTF::fastMalloc((WTF *)0x10);
    v9 = v31;
    *(_QWORD *)v32 = v22;
    *(_DWORD *)(v32 + 8) = v23;
    v25 = 1;
    v22 = v32;
  }
  else
  {
    v25 = v22;
    v22 = 0;
  }
  v10 = v22 | v25;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v22 | v25) & 1) == 0)
    goto LABEL_3;
  v26 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v27 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v27 != 0x3FFFFFFF) ? (v28 = v27 == -1) : (v28 = 1), v28))
  {
    v29 = 2;
  }
  else if (v27 >> 28)
  {
    v34 = v11;
    v33 = WTF::fastMalloc((WTF *)0x10);
    v11 = v34;
    *(_QWORD *)v33 = v26;
    *(_DWORD *)(v33 + 8) = v27;
    v29 = 1;
    v26 = v33;
  }
  else
  {
    v29 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v26 = 0;
  }
  v30 = v26 | v29;
  v12 = (_QWORD *)(v30 & 0xFFFFFFFF8);
  if ((v30 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16 + 64, a3, a4, a5, a6, a7, a8);
  v19 = JSC::FTL::Output::load((uint64_t)this + 27640, v17, v18, 2);
  v37 = *((_QWORD *)this + 3528);
  v20 = *((_QWORD *)this + 3521);
  v36.n128_u64[0] = v19;
  v36.n128_u64[1] = v20;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v35, (uint64_t *)this + 3492, &v37, &v36).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetFromArguments(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const JSC::FTL::AbstractHeap *v18;
  JSC::B3::Value *Ptr;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v18 = (const JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::operator[]((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 8648), *(unsigned int *)(*((_QWORD *)this + 3528) + 72), v12, v13, v14, v15, v16, v17);
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v10, v11, v18);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutToArguments(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::FTL::IndexedAbstractHeap *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  JSC::FTL::AbstractHeap *v20;
  uint64_t v21;
  JSC::B3::Value *v22;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v16 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 8648);
  v17 = *((_QWORD *)this + 3528);
  v18 = *(unsigned int *)(v17 + 72);
  if (v18 > 0xF)
  {
    v20 = (JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::atSlow(v16, *(unsigned int *)(v17 + 72), v18, v10, v11, v12, v13, v14);
  }
  else
  {
    v19 = (char *)this + 48 * v18;
    v20 = (JSC::FTL::AbstractHeap *)(v19 + 8720);
    if (!*((_QWORD *)v19 + 1095))
      JSC::FTL::IndexedAbstractHeap::initialize(v16, v20, v18);
  }
  v21 = *((_QWORD *)v20 + 3);
  if (v21)
  {
    v22 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, v21);
    v15 = (JSC::B3::Value *)JSC::FTL::Output::add(v2, v15, v22);
  }
  return JSC::FTL::Output::store((uint64_t)v2, v3, v20, (uint64_t)v15);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCompareStrictEq(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  JSC::JSCell *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::FTL::Output *v34;
  uint64_t v35;
  JSC::FTL::Output *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  char **v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  unint64_t v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  JSC::B3::Value *v68;
  JSC::FTL::Output *v69;
  JSC::B3::Value *v70;
  unint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  uint64_t v95;
  char **v96;
  uint64_t v97;
  JSC::B3::Value *v98;
  JSC::B3::Value *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  JSC::B3::Value *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char **v121;
  uint64_t v122;
  JSC::B3::Value *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  uint64_t v128;
  uint64_t v129;
  char **v130;
  uint64_t v131;
  JSC::B3::Value *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int8x8_t v142;
  unint64_t v143;
  JSC::B3::Value *v144;
  JSC::B3::Value *v145;
  JSC::B3::Value *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int8x8_t v158;
  JSC::B3::Value *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int8x8_t v171;
  uint64_t v172;
  JSC::B3::BasicBlock *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  JSC::B3::Value *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  JSC::B3::Value *v192;
  JSC::B3::Value *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v224;
  unint64_t v225;
  JSC::FTL::Output *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int8x8_t v233;
  uint64_t v234;
  unint64_t v235;
  JSC::B3::Value *v236;
  uint64_t v237;
  uint64_t v238;
  JSC::B3::BasicBlock *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  JSC::B3::Value *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  JSC::B3::Value *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  JSC::B3::Value *Ptr;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  JSC::B3::Value *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  BOOL v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  char v306;
  char v307;
  _QWORD *v308;
  JSC::B3::Value *v309;
  JSC::B3::Value *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int8x8_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int8x8_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  JSC::B3::Value **v348;
  JSC::B3::Value *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  JSC::B3::Value **v361;
  JSC::B3::Value *v362;
  JSC::B3::Value *v363;
  JSC::B3::Value *v364;
  JSC::B3::Value *v365;
  uint64_t v366;
  JSC::B3::Value *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  char **v373;
  uint64_t v374;
  JSC::B3::Value *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  JSC::B3::Value *v388;
  JSC::B3::Value *v389;
  uint64_t v390;
  JSC::B3::Value *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char **v397;
  uint64_t v398;
  JSC::B3::Value *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  JSC::B3::Value *v403;
  uint64_t v404;
  char **v405;
  uint64_t v406;
  JSC::B3::Value *v407;
  uint64_t v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  _QWORD *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  _QWORD *v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  char *v441;
  char *v442;
  char *v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  JSC::JSCell *v455;
  JSC::B3::Value *v456;
  JSC::JSCell *v457;
  JSC::B3::Value *v458;
  JSC::B3::Value *v459;
  __n128 v460;
  JSC::B3::Value *v461;
  char v462;
  _QWORD *v463;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v285 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v286 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v286 != 0x3FFFFFFF) ? (v287 = v286 == -1) : (v287 = 1), v287))
  {
    v288 = 2;
  }
  else if (v286 >> 28)
  {
    v294 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v294 = v285;
    *(_DWORD *)(v294 + 8) = v286;
    v288 = 1;
    v285 = v294;
  }
  else
  {
    v288 = v285;
    v285 = 0;
  }
  v11 = v285 | v288;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v285 | v288) & 1) == 0)
    goto LABEL_3;
  v289 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v290 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v290 != 0x3FFFFFFF) ? (v291 = v290 == -1) : (v291 = 1), v291))
  {
    v292 = 2;
  }
  else if (v290 >> 28)
  {
    v295 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v295 = v289;
    *(_DWORD *)(v295 + 8) = v290;
    v292 = 1;
    v289 = v295;
  }
  else
  {
    v292 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v289 = 0;
  }
  v293 = v289 | v292;
  v13 = (_QWORD *)(v293 & 0xFFFFFFFF8);
  if ((v293 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(JSC::JSCell **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = (unint64_t *)*((_QWORD *)this + 3528);
  v19 = v18[3];
  v20 = (v19 >> 50) & 0x3F;
  if (((v19 >> 50) & 0x3F) > 0xA)
  {
    switch((int)v20)
    {
      case 20:
        v35 = v18[4] & 0xFC000000000000;
        if (v35 == 0x50000000000000)
        {
          v36 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
LABEL_24:
          v33 = (JSC::B3::Value *)v44;
          v34 = v36;
          goto LABEL_25;
        }
        v235 = v18[3];
        v19 = v18[4];
        if (v35 != 0x9C000000000000)
          goto LABEL_169;
LABEL_87:
        v237 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v238 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v239 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v453 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3456));
        v241 = v240;
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v249, v237, (uint64_t)v239, NAN, NAN, v250, v251, v252, v253);
        *((_QWORD *)this + 3472) = v237;
        v254 = *((_QWORD *)this + 3473);
        *((_QWORD *)this + 3473) = v238;
        v255 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3456));
        v257 = v256;
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v265, v238, (uint64_t)v239, NAN, NAN, v266, v267, v268, v269);
        *((_QWORD *)this + 3472) = v238;
        *((_QWORD *)this + 3473) = v239;
        Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v236, *((const JSC::FTL::AbstractHeap **)this + 3313));
        v275 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v456, Ptr);
        v276 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v275);
        v278 = v277;
        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v239, v279, v280, v281, v282, v283, v284);
        *((_QWORD *)this + 3472) = v239;
        *((_QWORD *)this + 3473) = v254;
        v145 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 1, v453, v241, v255, v257, v276, v278);
      case 21:
        v71 = v18[4];
        if ((v71 & 0xFC000000000000) == 0x54000000000000)
        {
          v79 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
          v80 = v79;
          v81 = *((_QWORD *)this + 3473);
          if (v81)
          {
            WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v81, v79);
          }
          else
          {
            v460.n128_u64[0] = v79;
            v203 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *(_OWORD *)v203 = 0u;
            *((_OWORD *)v203 + 1) = 0u;
            v203[3] = *((_QWORD *)this + 3477);
            *((_QWORD *)this + 3477) = v203;
            v463 = v203;
            v203[2] = v80;
            WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v460, (uint64_t *)&v463, v204, v205, v206, v207, v208, (uint64_t)&v461);
            v209 = v463;
            v210 = (_QWORD *)*((_QWORD *)this + 3479);
            *v463 = (char *)this + 27824;
            v209[1] = v210;
            *v210 = v209;
            *((_QWORD *)this + 3479) = v209;
          }
          v82 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
          v83 = v82;
          v84 = *((_QWORD *)this + 3473);
          if (v84)
          {
            WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v84, v82);
          }
          else
          {
            v460.n128_u64[0] = v82;
            v211 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *(_OWORD *)v211 = 0u;
            *((_OWORD *)v211 + 1) = 0u;
            v211[3] = *((_QWORD *)this + 3477);
            *((_QWORD *)this + 3477) = v211;
            v463 = v211;
            v211[2] = v83;
            WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v460, (uint64_t *)&v463, v212, v213, v214, v215, v216, (uint64_t)&v461);
            v217 = v463;
            v218 = (_QWORD *)*((_QWORD *)this + 3479);
            *v463 = (char *)this + 27824;
            v217[1] = v218;
            *v218 = v217;
            *((_QWORD *)this + 3479) = v217;
          }
          v90 = v72;
          v91 = *((_QWORD *)this + 3455);
          v92 = *((_QWORD *)this + 3472);
          v93 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v94 = *((_QWORD *)this + 3471);
          v95 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v95 + 8) = -1;
          *(_WORD *)(v95 + 12) = 152;
          *(_BYTE *)(v95 + 20) = 1;
          *(_QWORD *)v95 = &unk_1E357EDA0;
          *(_DWORD *)(v95 + 16) = 0;
          *(_QWORD *)(v95 + 40) = 0;
          *(_QWORD *)(v95 + 48) = v91;
          *(_QWORD *)(v95 + 24) = v94;
          *(_QWORD *)(v95 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v93, (JSC::B3::Value *)v95);
          v461 = (JSC::B3::Value *)v95;
          v96 = (char **)(v92 + 8);
          v97 = *(unsigned int *)(v92 + 20);
          if ((_DWORD)v97 == *(_DWORD *)(v92 + 16))
          {
            v221 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96, v97 + 1, (unint64_t)&v461);
            v97 = *(unsigned int *)(v92 + 20);
            *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * v97) = *(_QWORD *)v221;
            v98 = v461;
          }
          else
          {
            *(_QWORD *)&(*v96)[8 * v97] = v95;
            v98 = (JSC::B3::Value *)v95;
          }
          *(_DWORD *)(v92 + 20) = v97 + 1;
          *((_QWORD *)v98 + 4) = v92;
          v99 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v90, v455);
          JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v99, v83, v80, NAN, NAN, v100, v101, v102, v103);
          *((_QWORD *)this + 3472) = v80;
          v104 = *((_QWORD *)this + 3473);
          *((_QWORD *)this + 3473) = v83;
          v114 = *((_QWORD *)this + 3472);
          v115 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v116 = *((_QWORD *)this + 3471);
          v117 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v117 + 8) = -1;
          *(_WORD *)(v117 + 12) = 152;
          *(_DWORD *)(v117 + 16) = 0;
          *(_BYTE *)(v117 + 20) = 1;
          *(_QWORD *)v117 = &unk_1E357EDA0;
          *(_QWORD *)(v117 + 40) = 0;
          *(_QWORD *)(v117 + 48) = v113;
          *(_QWORD *)(v117 + 24) = v116;
          *(_QWORD *)(v117 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v115, (JSC::B3::Value *)v117);
          v461 = (JSC::B3::Value *)v117;
          v121 = (char **)(v114 + 8);
          v122 = *(unsigned int *)(v114 + 20);
          if ((_DWORD)v122 == *(_DWORD *)(v114 + 16))
          {
            v222 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v121, v122 + 1, (unint64_t)&v461);
            v122 = *(unsigned int *)(v114 + 20);
            *(_QWORD *)(*(_QWORD *)(v114 + 8) + 8 * v122) = *(_QWORD *)v222;
            v123 = v461;
          }
          else
          {
            *(_QWORD *)&(*v121)[8 * v122] = v117;
            v123 = (JSC::B3::Value *)v117;
          }
          *(_DWORD *)(v114 + 20) = v122 + 1;
          *((_QWORD *)v123 + 4) = v114;
          v124 = *((_QWORD *)this + 3472);
          v125 = *((_QWORD *)this + 3470);
          v126 = *((_QWORD *)this + 3471);
          v461 = (JSC::B3::Value *)v83;
          v462 = 0;
          JSC::B3::BasicBlock::appendNewControlValue(v124, v125, 154, v126, (uint64_t *)&v461, v118, v119, v120);
          *((_QWORD *)this + 3472) = v83;
          *((_QWORD *)this + 3473) = v104;
          v127 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v128 = *((_QWORD *)this + 3471);
          v129 = WTF::fastMalloc((WTF *)0x30);
          *(_QWORD *)v129 = off_1E357F5F0;
          *(_DWORD *)(v129 + 8) = -1;
          *(_WORD *)(v129 + 12) = 153;
          *(_DWORD *)(v129 + 16) = 1;
          *(_BYTE *)(v129 + 20) = 0;
          *(_QWORD *)(v129 + 24) = v128;
          *(_QWORD *)(v129 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v127, (JSC::B3::Value *)v129);
          v461 = (JSC::B3::Value *)v129;
          v130 = (char **)(v83 + 8);
          v131 = *(unsigned int *)(v83 + 20);
          if ((_DWORD)v131 == *(_DWORD *)(v83 + 16))
          {
            v223 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v130, v131 + 1, (unint64_t)&v461);
            v131 = *(unsigned int *)(v83 + 20);
            *(_QWORD *)(*(_QWORD *)(v83 + 8) + 8 * v131) = *(_QWORD *)v223;
            v132 = v461;
          }
          else
          {
            *(_QWORD *)&(*v130)[8 * v131] = v129;
            v132 = (JSC::B3::Value *)v129;
          }
          *(_DWORD *)(v83 + 20) = v131 + 1;
          *((_QWORD *)v132 + 4) = v83;
          if ((*(_WORD *)(v95 + 12) & 0xFFF) == 0x98)
            v133 = v95;
          else
            v133 = 0;
          *(_QWORD *)(v133 + 40) = v129;
          if ((*(_WORD *)(v117 + 12) & 0xFFF) == 0x98)
            v134 = v117;
          else
            v134 = 0;
LABEL_54:
          *(_QWORD *)(v134 + 40) = v129;
          v463 = (_QWORD *)*((_QWORD *)this + 3528);
          v54 = (uint64_t *)((char *)this + 27944);
          v55 = *((_QWORD *)this + 3521);
          v460.n128_u64[0] = v129;
          goto LABEL_27;
        }
        if ((v71 & 0xFC000000000000) != 0)
          goto LABEL_169;
        v224 = this;
        v225 = v18[3];
        break;
      case 22:
      case 23:
      case 24:
      case 26:
        goto LABEL_169;
      case 25:
        v143 = v18[4];
        if ((v143 & 0xFC000000000000) == 0x64000000000000)
        {
          v152 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
          v34 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
          v52 = v146;
          v33 = v159;
          goto LABEL_26;
        }
        if ((v143 & 0xFC000000000000) != 0)
          goto LABEL_169;
        goto LABEL_60;
      case 27:
        if ((v18[4] & 0xFC000000000000) != 0x6C000000000000)
          goto LABEL_169;
        v172 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v173 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v174 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3455));
        v176 = v175;
        v177 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v461, (JSC::B3::Value *)v460.n128_u64[0]);
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v177, (uint64_t)v173, v172, 0.0, 1.0, v178, v179, v180, v181);
        *((_QWORD *)this + 3472) = v172;
        v182 = *((_QWORD *)this + 3473);
        *((_QWORD *)this + 3473) = v173;
        v193 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v192);
        v194 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v193);
        v196 = v195;
        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v173, v197, v198, v199, v200, v201, v202);
        *((_QWORD *)this + 3472) = v173;
        *((_QWORD *)this + 3473) = v182;
        v23 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 1, v174, v176, v194, v196);
      default:
        switch((int)v20)
        {
          case '\'':
            v235 = v18[4];
            if ((v235 & 0xFC000000000000) != 0x50000000000000)
              goto LABEL_169;
            goto LABEL_87;
          case '(':
          case ')':
          case '*':
          case '.':
          case '2':
          case '3':
            goto LABEL_169;
          case '+':
            v298 = v18[4] & 0xFC000000000000;
            if (v298 == 0xB4000000000000)
              goto LABEL_18;
            if (v298 != 0xB0000000000000)
              goto LABEL_169;
            v299 = this;
            v300 = v18[4];
            v301 = v19;
          case ',':
            v301 = v18[4];
            if ((v301 & 0xFC000000000000) != 0xAC000000000000)
              goto LABEL_169;
            v299 = this;
            v300 = v18[3];
          case '-':
            v296 = v18[4] & 0xFC000000000000;
            v297 = 0xAC000000000000;
            goto LABEL_116;
          case '/':
            v296 = v18[4] & 0xFC000000000000;
            if (!v296)
              goto LABEL_18;
            v297 = 0xBC000000000000;
            goto LABEL_116;
          case '0':
            v296 = v18[4] & 0xFC000000000000;
            if (!v296)
              goto LABEL_18;
            v297 = 0xC0000000000000;
LABEL_116:
            if (v296 != v297)
              goto LABEL_169;
            goto LABEL_18;
          case '1':
            if ((v18[4] & 0xFC000000000000) != 0xC4000000000000)
              goto LABEL_169;
            v59 = *((_QWORD *)this + 3472);
            v60 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v61 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v56, v58);
            JSC::B3::Procedure::addValueImpl(v60, v61);
            v461 = v61;
            v62 = (char **)(v59 + 8);
            v63 = *(unsigned int *)(v59 + 20);
            if ((_DWORD)v63 == *(_DWORD *)(v59 + 16))
            {
              v220 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v62, v63 + 1, (unint64_t)&v461);
              v63 = *(unsigned int *)(v59 + 20);
              *(_QWORD *)(*(_QWORD *)(v59 + 8) + 8 * v63) = *(_QWORD *)v220;
              v64 = v461;
            }
            else
            {
              *(_QWORD *)&(*v62)[8 * v63] = v61;
              v64 = v61;
            }
            *(_DWORD *)(v59 + 20) = v63 + 1;
            *((_QWORD *)v64 + 4) = v59;
            v463 = (_QWORD *)*((_QWORD *)this + 3528);
            v54 = (uint64_t *)((char *)this + 27944);
            v55 = *((_QWORD *)this + 3521);
            v460.n128_u64[0] = (unint64_t)v61;
            goto LABEL_27;
          case '4':
            if ((v18[4] & 0xFC000000000000) != 0xD0000000000000)
              goto LABEL_169;
            LODWORD(v461) = 0;
            v23 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21, v22);
          default:
            if ((_DWORD)v20 != 11)
              goto LABEL_169;
            v135 = v18[4] & 0xFC000000000000;
            if (v135 == 0x2C000000000000)
            {
              v36 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
              goto LABEL_24;
            }
            if (v135)
              goto LABEL_169;
            v226 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
            break;
        }
        goto LABEL_83;
    }
  }
  if ((_DWORD)v20 == 1)
  {
    if ((v18[4] & 0xFC000000000000) == 0x4000000000000)
    {
      v36 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      goto LABEL_24;
    }
    goto LABEL_169;
  }
  if ((_DWORD)v20 == 6)
  {
    if ((v18[4] & 0xFC000000000000) == 0)
    {
LABEL_18:
      v34 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
LABEL_25:
      v52 = (JSC::B3::Value *)v32;
LABEL_26:
      v53 = JSC::FTL::Output::equal(v34, v52, v33);
      v463 = (_QWORD *)*((_QWORD *)this + 3528);
      v54 = (uint64_t *)((char *)this + 27944);
      v55 = *((_QWORD *)this + 3521);
      v460.n128_u64[0] = (unint64_t)v53;
LABEL_27:
      v460.n128_u64[1] = v55;
      *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v461, v54, (uint64_t *)&v463, &v460).n128_u64[0];
      return result;
    }
    if ((v18[4] & 0xFC000000000000) == 0x18000000000000)
    {
      v226 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
LABEL_83:
      v68 = (JSC::B3::Value *)v234;
      v69 = v226;
      goto LABEL_61;
    }
LABEL_169:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x2B69, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCompareStrictEq()", "m_node->isBinaryUseKind(UntypedUse)");
    __break(0xC471u);
    JUMPOUT(0x197D4B5F8);
  }
  if ((_DWORD)v20)
    goto LABEL_169;
  v65 = v18[4];
  v66 = v65 & 0xFC000000000000;
  if ((v65 & 0xFC000000000000) <= 0x63FFFFFFFFFFFFLL)
  {
    if ((v65 & 0xFC000000000000) > 0x2BFFFFFFFFFFFFLL)
    {
      if (v66 == 0x2C000000000000)
      {
        v69 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
        v70 = v67;
        goto LABEL_62;
      }
      if (v66 == 0x54000000000000)
      {
        v224 = this;
        v225 = v18[4];
        v71 = v19;
      }
      goto LABEL_169;
    }
    if (!v66)
    {
      v302 = *(_QWORD *)this;
      v303 = *((_QWORD *)this + 3524);
      if ((v303 & 1) != 0)
      {
        v444 = *(_QWORD *)(v303 & 0xFFFFFFFF8);
        if ((v303 & 2) != 0 || (v445 = *(_DWORD *)((v303 & 0xFFFFFFFF8) + 8), v445 == 0x3FFFFFFF) || v445 == -1)
        {
          v446 = 2;
        }
        else if (v445 >> 28)
        {
          v451 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v451 = v444;
          *(_DWORD *)(v451 + 8) = v445;
          v446 = 1;
          v444 = v451;
        }
        else
        {
          v446 = v444;
          v444 = 0;
        }
        v303 = v444 | v446;
        v304 = *(_QWORD *)(v302 + 32);
        if (((v444 | v446) & 1) != 0)
        {
          v447 = *(_QWORD *)(v303 & 0xFFFFFFFF8);
          if ((v303 & 2) != 0 || (v448 = *(_DWORD *)((v303 & 0xFFFFFFFF8) + 8), v448 == 0x3FFFFFFF) || v448 == -1)
          {
            v449 = 2;
          }
          else if (v448 >> 28)
          {
            v452 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v452 = v447;
            *(_DWORD *)(v452 + 8) = v448;
            v449 = 1;
            v447 = v452;
          }
          else
          {
            v449 = *(_QWORD *)(v303 & 0xFFFFFFFF8);
            v447 = 0;
          }
          v450 = v447 | v449;
          v305 = (_QWORD *)(v450 & 0xFFFFFFFF8);
          if ((v450 & 1) != 0)
          {
            v306 = 0;
            v307 = 0;
            v308 = (_QWORD *)*v305;
LABEL_135:
            if (v308)
              v304 = v308[1];
            v457 = *(JSC::JSCell **)(v304 + 8);
            if ((v306 & 1) == 0 && v305)
              WTF::fastFree((unint64_t)v305, v18, a3, a4, a5, a6, a7, a8);
            if ((v307 & 1) == 0 && (v303 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v303 & 0xFFFFFFFF8, v18, a3, a4, a5, a6, a7, a8);
            v459 = v309;
            v458 = v310;
            v325 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v326 = v325;
            v327 = *((_QWORD *)this + 3473);
            if (v327)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v327, v325);
            }
            else
            {
              v460.n128_u64[0] = v325;
              v409 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v409 = 0u;
              *((_OWORD *)v409 + 1) = 0u;
              v409[3] = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v409;
              v463 = v409;
              v409[2] = v326;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v460, (uint64_t *)&v463, v410, v411, v412, v413, v414, (uint64_t)&v461);
              v415 = v463;
              v416 = (_QWORD *)*((_QWORD *)this + 3479);
              *v463 = (char *)this + 27824;
              v415[1] = v416;
              *v416 = v415;
              *((_QWORD *)this + 3479) = v415;
            }
            v328 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v329 = v328;
            v330 = *((_QWORD *)this + 3473);
            if (v330)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v330, v328);
            }
            else
            {
              v460.n128_u64[0] = v328;
              v417 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v417 = 0u;
              *((_OWORD *)v417 + 1) = 0u;
              v417[3] = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v417;
              v463 = v417;
              v417[2] = v329;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v460, (uint64_t *)&v463, v418, v419, v420, v421, v422, (uint64_t)&v461);
              v423 = v463;
              v424 = (_QWORD *)*((_QWORD *)this + 3479);
              *v463 = (char *)this + 27824;
              v423[1] = v424;
              *v424 = v423;
              *((_QWORD *)this + 3479) = v423;
            }
            v331 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v332 = v331;
            v333 = *((_QWORD *)this + 3473);
            if (v333)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v333, v331);
            }
            else
            {
              v460.n128_u64[0] = v331;
              v425 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v425 = 0u;
              *((_OWORD *)v425 + 1) = 0u;
              v425[3] = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v425;
              v463 = v425;
              v425[2] = v332;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v460, (uint64_t *)&v463, v426, v427, v428, v429, v430, (uint64_t)&v461);
              v431 = v463;
              v432 = (_QWORD *)*((_QWORD *)this + 3479);
              *v463 = (char *)this + 27824;
              v431[1] = v432;
              *v432 = v431;
              *((_QWORD *)this + 3479) = v431;
            }
            v334 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v335 = v334;
            v336 = *((_QWORD *)this + 3473);
            if (v336)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v336, v334);
            }
            else
            {
              v460.n128_u64[0] = v334;
              v433 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v433 = 0u;
              *((_OWORD *)v433 + 1) = 0u;
              v433[3] = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v433;
              v463 = v433;
              v433[2] = v335;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v460, (uint64_t *)&v463, v434, v435, v436, v437, v438, (uint64_t)&v461);
              v439 = v463;
              v440 = (_QWORD *)*((_QWORD *)this + 3479);
              *v463 = (char *)this + 27824;
              v439[1] = v440;
              *v440 = v439;
              *((_QWORD *)this + 3479) = v439;
            }
            v348 = (JSC::B3::Value **)((char *)this + 27640);
            if ((v343 & 0x300000000) != 0)
            {
              if ((v343 & 0xFFFFFFFCFFFFFFFFLL) != 0)
                goto LABEL_149;
              v348 = (JSC::B3::Value **)((char *)this + 27648);
            }
            v349 = *v348;
            if (*v348)
            {
LABEL_150:
              JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v349, v332, v326, 0.0, 1.0, v344, v345, v346, v347);
              *((_QWORD *)this + 3472) = v326;
              v454 = *((_QWORD *)this + 3473);
              *((_QWORD *)this + 3473) = v329;
              v361 = (JSC::B3::Value **)((char *)this + 27640);
              if ((v356 & 0x300000000) != 0)
              {
                if ((v356 & 0xFFFFFFFCFFFFFFFFLL) != 0)
                {
LABEL_152:
                  v362 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v310, *((JSC::B3::Value **)this + 3487));
LABEL_153:
                  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v362, v332, v329, 0.0, 1.0, v357, v358, v359, v360);
                  *((_QWORD *)this + 3472) = v329;
                  *((_QWORD *)this + 3473) = v332;
                  v363 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v309);
                  v364 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v310);
                  v365 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v363, v364);
                  v366 = *((_QWORD *)this + 3472);
                  v367 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
                  v368 = *((_QWORD *)this + 3471);
                  v369 = WTF::fastMalloc((WTF *)0x38);
                  *(_DWORD *)(v369 + 8) = -1;
                  *(_WORD *)(v369 + 12) = 152;
                  *(_BYTE *)(v369 + 20) = 1;
                  *(_QWORD *)v369 = &unk_1E357EDA0;
                  *(_DWORD *)(v369 + 16) = 0;
                  *(_QWORD *)(v369 + 40) = 0;
                  *(_QWORD *)(v369 + 48) = v365;
                  *(_QWORD *)(v369 + 24) = v368;
                  *(_QWORD *)(v369 + 32) = 0;
                  JSC::B3::Procedure::addValueImpl(v367, (JSC::B3::Value *)v369);
                  v461 = (JSC::B3::Value *)v369;
                  v373 = (char **)(v366 + 8);
                  v374 = *(unsigned int *)(v366 + 20);
                  if ((_DWORD)v374 == *(_DWORD *)(v366 + 16))
                  {
                    v441 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v373, v374 + 1, (unint64_t)&v461);
                    v374 = *(unsigned int *)(v366 + 20);
                    *(_QWORD *)(*(_QWORD *)(v366 + 8) + 8 * v374) = *(_QWORD *)v441;
                    v375 = v461;
                  }
                  else
                  {
                    *(_QWORD *)&(*v373)[8 * v374] = v369;
                    v375 = (JSC::B3::Value *)v369;
                  }
                  *(_DWORD *)(v366 + 20) = v374 + 1;
                  *((_QWORD *)v375 + 4) = v366;
                  v376 = *((_QWORD *)this + 3472);
                  v377 = *((_QWORD *)this + 3470);
                  v378 = *((_QWORD *)this + 3471);
                  v461 = (JSC::B3::Value *)v335;
                  v462 = 0;
                  JSC::B3::BasicBlock::appendNewControlValue(v376, v377, 154, v378, (uint64_t *)&v461, v370, v371, v372);
                  *((_QWORD *)this + 3472) = v332;
                  *((_QWORD *)this + 3473) = v335;
                  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)v457, v379, v380, v381, v382, v383, v384);
                  v460.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v457);
                  v389 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v388);
                  v390 = *((_QWORD *)this + 3472);
                  v391 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
                  v392 = *((_QWORD *)this + 3471);
                  v393 = WTF::fastMalloc((WTF *)0x38);
                  *(_DWORD *)(v393 + 8) = -1;
                  *(_WORD *)(v393 + 12) = 152;
                  *(_DWORD *)(v393 + 16) = 0;
                  *(_BYTE *)(v393 + 20) = 1;
                  *(_QWORD *)v393 = &unk_1E357EDA0;
                  *(_QWORD *)(v393 + 40) = 0;
                  *(_QWORD *)(v393 + 48) = v389;
                  *(_QWORD *)(v393 + 24) = v392;
                  *(_QWORD *)(v393 + 32) = 0;
                  JSC::B3::Procedure::addValueImpl(v391, (JSC::B3::Value *)v393);
                  v461 = (JSC::B3::Value *)v393;
                  v397 = (char **)(v390 + 8);
                  v398 = *(unsigned int *)(v390 + 20);
                  if ((_DWORD)v398 == *(_DWORD *)(v390 + 16))
                  {
                    v442 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v397, v398 + 1, (unint64_t)&v461);
                    v398 = *(unsigned int *)(v390 + 20);
                    *(_QWORD *)(*(_QWORD *)(v390 + 8) + 8 * v398) = *(_QWORD *)v442;
                    v399 = v461;
                  }
                  else
                  {
                    *(_QWORD *)&(*v397)[8 * v398] = v393;
                    v399 = (JSC::B3::Value *)v393;
                  }
                  *(_DWORD *)(v390 + 20) = v398 + 1;
                  *((_QWORD *)v399 + 4) = v390;
                  v400 = *((_QWORD *)this + 3472);
                  v401 = *((_QWORD *)this + 3470);
                  v402 = *((_QWORD *)this + 3471);
                  v461 = (JSC::B3::Value *)v335;
                  v462 = 0;
                  JSC::B3::BasicBlock::appendNewControlValue(v400, v401, 154, v402, (uint64_t *)&v461, v394, v395, v396);
                  *((_QWORD *)this + 3472) = v335;
                  *((_QWORD *)this + 3473) = v454;
                  v403 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
                  v404 = *((_QWORD *)this + 3471);
                  v129 = WTF::fastMalloc((WTF *)0x30);
                  *(_QWORD *)v129 = off_1E357F5F0;
                  *(_DWORD *)(v129 + 8) = -1;
                  *(_WORD *)(v129 + 12) = 153;
                  *(_DWORD *)(v129 + 16) = 1;
                  *(_BYTE *)(v129 + 20) = 0;
                  *(_QWORD *)(v129 + 24) = v404;
                  *(_QWORD *)(v129 + 32) = 0;
                  JSC::B3::Procedure::addValueImpl(v403, (JSC::B3::Value *)v129);
                  v461 = (JSC::B3::Value *)v129;
                  v405 = (char **)(v335 + 8);
                  v406 = *(unsigned int *)(v335 + 20);
                  if ((_DWORD)v406 == *(_DWORD *)(v335 + 16))
                  {
                    v443 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v405, v406 + 1, (unint64_t)&v461);
                    v406 = *(unsigned int *)(v335 + 20);
                    *(_QWORD *)(*(_QWORD *)(v335 + 8) + 8 * v406) = *(_QWORD *)v443;
                    v407 = v461;
                  }
                  else
                  {
                    *(_QWORD *)&(*v405)[8 * v406] = v129;
                    v407 = (JSC::B3::Value *)v129;
                  }
                  *(_DWORD *)(v335 + 20) = v406 + 1;
                  *((_QWORD *)v407 + 4) = v335;
                  if ((*(_WORD *)(v369 + 12) & 0xFFF) == 0x98)
                    v408 = v369;
                  else
                    v408 = 0;
                  *(_QWORD *)(v408 + 40) = v129;
                  if ((*(_WORD *)(v393 + 12) & 0xFFF) == 0x98)
                    v134 = v393;
                  else
                    v134 = 0;
                  goto LABEL_54;
                }
                v361 = (JSC::B3::Value **)((char *)this + 27648);
              }
              v362 = *v361;
              if (*v361)
                goto LABEL_153;
              goto LABEL_152;
            }
LABEL_149:
            v349 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v309, *((JSC::B3::Value **)this + 3487));
            goto LABEL_150;
          }
          v307 = 0;
          v306 = 1;
LABEL_134:
          v308 = v305;
          goto LABEL_135;
        }
      }
      else
      {
        v304 = *(_QWORD *)(v302 + 32);
      }
      v305 = (_QWORD *)(v303 & 0xFFFFFFFF8);
      v306 = 1;
      v307 = 1;
      goto LABEL_134;
    }
    v219 = 0x18000000000000;
LABEL_168:
    if (v66 == v219)
      goto LABEL_18;
    goto LABEL_169;
  }
  if (v66 != 0x64000000000000)
  {
    if (v66 == 0xBC000000000000)
      goto LABEL_18;
    v219 = 0xC0000000000000;
    goto LABEL_168;
  }
  v143 = v18[3];
  v19 = v18[4];
LABEL_60:
  v69 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
LABEL_61:
  v70 = v144;
LABEL_62:
  v145 = JSC::FTL::Output::equal(v69, v70, v68);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCompareBelow(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v20 = JSC::FTL::Output::below(v10, v11, v19);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCompareBelowEq(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v20 = JSC::FTL::Output::belowOrEqual(v10, v11, v19);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSameValue(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  JSC::DFG::Node *v48;
  WTF *v49;
  char **v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  double result;
  char *v57;
  uint64_t v58;
  int8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  __int128 *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char **v97;
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  JSC::B3::Value *v101;
  JSC::B3::Value *v102;
  char **v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  JSC::B3::Value *v107;
  JSC::B3::Value *v108;
  char **v109;
  uint64_t v110;
  WTF *v111;
  JSC::B3::Value *v112;
  uint64_t v113;
  JSC::B3::Value *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char **v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  JSC::B3::Value *v126;
  uint64_t v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::FTL::Output *v151;
  __n128 v152;
  WTF *v153;
  uint64_t v154;
  _QWORD *v155;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v139 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v140 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v140 != 0x3FFFFFFF) ? (v141 = v140 == -1) : (v141 = 1), v141))
  {
    v142 = 2;
  }
  else if (v140 >> 28)
  {
    v148 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v148 = v139;
    *(_DWORD *)(v148 + 8) = v140;
    v142 = 1;
    v139 = v148;
  }
  else
  {
    v142 = v139;
    v139 = 0;
  }
  v11 = v139 | v142;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v139 | v142) & 1) == 0)
    goto LABEL_3;
  v143 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v144 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v144 != 0x3FFFFFFF) ? (v145 = v144 == -1) : (v145 = 1), v145))
  {
    v146 = 2;
  }
  else if (v144 >> 28)
  {
    v149 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v149 = v143;
    *(_DWORD *)(v149 + 8) = v144;
    v146 = 1;
    v143 = v149;
  }
  else
  {
    v146 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v143 = 0;
  }
  v147 = v143 | v146;
  v13 = (_QWORD *)(v147 & 0xFFFFFFFF8);
  if ((v147 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_QWORD *)this + 3528);
  v19 = *(_QWORD *)(v18 + 24);
  if ((v19 & 0xFC000000000000) == 0xC4000000000000
    && (*(_QWORD *)(v18 + 32) & 0xFC000000000000) == 0xC4000000000000)
  {
    v61 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
    v62 = v61;
    v63 = *((_QWORD *)this + 3473);
    if (v63)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v63, v61);
    }
    else
    {
      v152.n128_u64[0] = v61;
      v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v64 = 0u;
      *((_OWORD *)v64 + 1) = 0u;
      v64[3] = *((_QWORD *)this + 3477);
      *((_QWORD *)this + 3477) = v64;
      v155 = v64;
      v64[2] = v62;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v152, (uint64_t *)&v155, v65, v66, v67, v68, v69, (uint64_t)&v153);
      v70 = v155;
      v71 = (_QWORD *)*((_QWORD *)this + 3479);
      *v155 = (char *)this + 27824;
      v70[1] = v71;
      *v71 = v70;
      *((_QWORD *)this + 3479) = v70;
    }
    v72 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
    v73 = v72;
    v74 = *((_QWORD *)this + 3473);
    if (v74)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v74, v72);
    }
    else
    {
      v152.n128_u64[0] = v72;
      v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v75 = 0u;
      *((_OWORD *)v75 + 1) = 0u;
      v75[3] = *((_QWORD *)this + 3477);
      *((_QWORD *)this + 3477) = v75;
      v155 = v75;
      v75[2] = v73;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v152, (uint64_t *)&v155, v76, v77, v78, v79, v80, (uint64_t)&v153);
      v81 = v155;
      v82 = (_QWORD *)*((_QWORD *)this + 3479);
      *v155 = (char *)this + 27824;
      v81[1] = v82;
      *v82 = v81;
      *((_QWORD *)this + 3479) = v81;
    }
    v83 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 1);
    v153 = 0;
    LOBYTE(v154) = 3;
    JSC::B3::StackmapValue::append(v83, v58, (unint64_t)&v153);
    v153 = 0;
    LOBYTE(v154) = 3;
    JSC::B3::StackmapValue::append(v83, v60, (unint64_t)&v153);
    *((_BYTE *)v83 + 168) = 1;
    v84 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v84 + 8) = 1;
    *(_QWORD *)v84 = off_1E3577068;
    v85 = (unsigned int *)*((_QWORD *)v83 + 7);
    *((_QWORD *)v83 + 7) = v84;
    if (v85)
    {
      v86 = v85 + 2;
      do
      {
        v87 = __ldaxr(v86);
        v88 = v87 - 1;
      }
      while (__stlxr(v88, v86));
      if (!v88)
      {
        atomic_store(1u, v85 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v85 + 8))(v85);
      }
    }
    v150 = v60;
    v151 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    *((_QWORD *)v83 + 14) = 0;
    *((_QWORD *)v83 + 15) = 0;
    *((_QWORD *)v83 + 16) = 0;
    v89 = *((_QWORD *)this + 3472);
    v90 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v91 = *((_QWORD *)this + 3471);
    v92 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v92 + 8) = -1;
    *(_WORD *)(v92 + 12) = 152;
    *(_DWORD *)(v92 + 16) = 0;
    *(_BYTE *)(v92 + 20) = 1;
    *(_QWORD *)v92 = &unk_1E357EDA0;
    *(_QWORD *)(v92 + 40) = 0;
    *(_QWORD *)(v92 + 48) = v83;
    *(_QWORD *)(v92 + 24) = v91;
    *(_QWORD *)(v92 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v90, (JSC::B3::Value *)v92);
    v153 = (WTF *)v92;
    v97 = (char **)(v89 + 8);
    v98 = *(unsigned int *)(v89 + 20);
    if ((_DWORD)v98 == *(_DWORD *)(v89 + 16))
    {
      v134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v97, v98 + 1, (unint64_t)&v153);
      v98 = *(unsigned int *)(v89 + 20);
      *(_QWORD *)(*(_QWORD *)(v89 + 8) + 8 * v98) = *(_QWORD *)v134;
      v99 = v153;
    }
    else
    {
      *(_QWORD *)&(*v97)[8 * v98] = v92;
      v99 = (WTF *)v92;
    }
    *(_DWORD *)(v89 + 20) = v98 + 1;
    *((_QWORD *)v99 + 4) = v89;
    JSC::FTL::Output::branch(v151, (uint64_t)v83, v73, v62, NAN, NAN, v93, v94, v95, v96);
    *((_QWORD *)this + 3472) = v62;
    v100 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v73;
    v101 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v102 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 3471), v58, v58);
    JSC::B3::Procedure::addValueImpl(v101, v102);
    v153 = v102;
    v103 = (char **)(v62 + 8);
    v104 = *(unsigned int *)(v62 + 20);
    if ((_DWORD)v104 == *(_DWORD *)(v62 + 16))
    {
      v135 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103, v104 + 1, (unint64_t)&v153);
      v104 = *(unsigned int *)(v62 + 20);
      *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v104) = *(_QWORD *)v135;
      v105 = v153;
    }
    else
    {
      *(_QWORD *)&(*v103)[8 * v104] = v102;
      v105 = v102;
    }
    *(_DWORD *)(v62 + 20) = v104 + 1;
    *((_QWORD *)v105 + 4) = v62;
    v106 = *((_QWORD *)this + 3472);
    v107 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v108 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 3471), v150, v150);
    JSC::B3::Procedure::addValueImpl(v107, v108);
    v153 = v108;
    v109 = (char **)(v106 + 8);
    v110 = *(unsigned int *)(v106 + 20);
    if ((_DWORD)v110 == *(_DWORD *)(v106 + 16))
    {
      v136 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v109, v110 + 1, (unint64_t)&v153);
      v110 = *(unsigned int *)(v106 + 20);
      *(_QWORD *)(*(_QWORD *)(v106 + 8) + 8 * v110) = *(_QWORD *)v136;
      v111 = v153;
    }
    else
    {
      *(_QWORD *)&(*v109)[8 * v110] = v108;
      v111 = v108;
    }
    *(_DWORD *)(v106 + 20) = v110 + 1;
    *((_QWORD *)v111 + 4) = v106;
    v112 = JSC::FTL::Output::bitAnd(v151, v102, v108);
    v113 = *((_QWORD *)this + 3472);
    v114 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v115 = *((_QWORD *)this + 3471);
    v116 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v116 + 8) = -1;
    *(_WORD *)(v116 + 12) = 152;
    *(_DWORD *)(v116 + 16) = 0;
    *(_BYTE *)(v116 + 20) = 1;
    *(_QWORD *)v116 = &unk_1E357EDA0;
    *(_QWORD *)(v116 + 40) = 0;
    *(_QWORD *)(v116 + 48) = v112;
    *(_QWORD *)(v116 + 24) = v115;
    *(_QWORD *)(v116 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v114, (JSC::B3::Value *)v116);
    v153 = (WTF *)v116;
    v120 = (char **)(v113 + 8);
    v121 = *(unsigned int *)(v113 + 20);
    if ((_DWORD)v121 == *(_DWORD *)(v113 + 16))
    {
      v137 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v120, v121 + 1, (unint64_t)&v153);
      v121 = *(unsigned int *)(v113 + 20);
      *(_QWORD *)(*(_QWORD *)(v113 + 8) + 8 * v121) = *(_QWORD *)v137;
      v122 = v153;
    }
    else
    {
      *(_QWORD *)&(*v120)[8 * v121] = v116;
      v122 = (WTF *)v116;
    }
    *(_DWORD *)(v113 + 20) = v121 + 1;
    *((_QWORD *)v122 + 4) = v113;
    v123 = *((_QWORD *)this + 3472);
    v124 = *((_QWORD *)this + 3470);
    v125 = *((_QWORD *)this + 3471);
    v153 = (WTF *)v73;
    LOBYTE(v154) = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v123, v124, 154, v125, (uint64_t *)&v153, v117, v118, v119);
    *((_QWORD *)this + 3472) = v73;
    *((_QWORD *)this + 3473) = v100;
    v126 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v127 = *((_QWORD *)this + 3471);
    v128 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v128 = off_1E357F5F0;
    *(_DWORD *)(v128 + 8) = -1;
    *(_WORD *)(v128 + 12) = 153;
    *(_DWORD *)(v128 + 16) = 1;
    *(_BYTE *)(v128 + 20) = 0;
    *(_QWORD *)(v128 + 24) = v127;
    *(_QWORD *)(v128 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v126, (JSC::B3::Value *)v128);
    v153 = (WTF *)v128;
    v129 = (char **)(v73 + 8);
    v130 = *(unsigned int *)(v73 + 20);
    if ((_DWORD)v130 == *(_DWORD *)(v73 + 16))
    {
      v138 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v130 + 1, (unint64_t)&v153);
      v130 = *(unsigned int *)(v73 + 20);
      *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v130) = *(_QWORD *)v138;
      v131 = v153;
    }
    else
    {
      *(_QWORD *)&(*v129)[8 * v130] = v128;
      v131 = (WTF *)v128;
    }
    *(_DWORD *)(v73 + 20) = v130 + 1;
    *((_QWORD *)v131 + 4) = v73;
    if ((*(_WORD *)(v92 + 12) & 0xFFF) == 0x98)
      v132 = v92;
    else
      v132 = 0;
    *(_QWORD *)(v132 + 40) = v128;
    if ((*(_WORD *)(v116 + 12) & 0xFFF) == 0x98)
      v133 = v116;
    else
      v133 = 0;
    *(_QWORD *)(v133 + 40) = v128;
    v155 = (_QWORD *)*((_QWORD *)this + 3528);
    v54 = (uint64_t *)((char *)this + 27944);
    v55 = *((_QWORD *)this + 3521);
    v152.n128_u64[0] = v128;
  }
  else
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, a3, a4, a5, a6, a7, a8);
    v20 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
    v30 = (int *)((char *)this + 28260);
    v31 = *((_DWORD *)this + 7065);
    if ((v31 & 0x80000000) == 0)
    {
      v32 = *((_QWORD *)this + 3481);
      v153 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v153 = 0x200000001;
      v154 = 0x200000002;
      v40 = (_QWORD *)(v32 + 32);
      v41 = *(unsigned int *)(v32 + 44);
      if ((_DWORD)v41 == *(_DWORD *)(v32 + 40))
      {
        v42 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v153);
        v43 = *(_QWORD *)(v32 + 32) + 16 * *(unsigned int *)(v32 + 44);
      }
      else
      {
        v43 = *v40 + 16 * v41;
        v42 = (unint64_t)&v153;
      }
      *(_QWORD *)v43 = 0;
      *(_QWORD *)(v43 + 8) = 0;
      v44 = *(_QWORD *)v42;
      *(_QWORD *)v42 = 0;
      *(_QWORD *)v43 = v44;
      LODWORD(v44) = *(_DWORD *)(v42 + 8);
      *(_DWORD *)(v42 + 8) = 0;
      *(_DWORD *)(v43 + 8) = v44;
      LODWORD(v44) = *(_DWORD *)(v42 + 12);
      *(_DWORD *)(v42 + 12) = 0;
      *(_DWORD *)(v43 + 12) = v44;
      ++*(_DWORD *)(v32 + 44);
      v31 = v41 | 0x80000000;
      *v30 = v41 | 0x80000000;
      v45 = v153;
      if (v153)
      {
        v153 = 0;
        LODWORD(v154) = 0;
        WTF::fastFree((unint64_t)v45, v33, v34, v35, v36, v37, v38, v39);
        v31 = *v30;
      }
    }
    v46 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationSameValue);
    v47 = *((_QWORD *)this + 3472);
    v49 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), v31, *((_QWORD *)this + 3471), v46, v20, v21, v22);
    v153 = v49;
    v50 = (char **)(v47 + 8);
    v51 = *(unsigned int *)(v47 + 20);
    if ((_DWORD)v51 == *(_DWORD *)(v47 + 16))
    {
      v57 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50, v51 + 1, (unint64_t)&v153);
      v51 = *(unsigned int *)(v47 + 20);
      *(_QWORD *)(*(_QWORD *)(v47 + 8) + 8 * v51) = *(_QWORD *)v57;
      v52 = v153;
    }
    else
    {
      *(_QWORD *)&(*v50)[8 * v51] = v49;
      v52 = v49;
    }
    *(_DWORD *)(v47 + 20) = v51 + 1;
    *((_QWORD *)v52 + 4) = v47;
    v155 = (_QWORD *)*((_QWORD *)this + 3528);
    v54 = (uint64_t *)((char *)this + 27944);
    v55 = *((_QWORD *)this + 3521);
    v152.n128_u64[0] = v53;
  }
  v152.n128_u64[1] = v55;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v153, v54, (uint64_t *)&v155, &v152).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToBoolean(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  unint64_t v11;
  double result;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;

  v15 = *((_QWORD *)this + 3528);
  v11 = *((_QWORD *)this + 3521);
  v14.n128_u64[0] = (unint64_t)v10;
  v14.n128_u64[1] = v11;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v13, (uint64_t *)this + 3493, &v15, &v14).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallOrConstructVarargs(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  int v5;
  int v6;
  WTF *v7;
  char v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  unsigned int v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  __int16 v38;
  unsigned int *v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59[2];
  unsigned int *v60;
  uint64_t v61[2];
  char v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  unsigned int *v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3528);
  v5 = *(unsigned __int16 *)(v2 + 18);
  if ((v5 - 245) <= 7)
  {
    v6 = 1 << (v5 + 11);
    if ((v6 & 0x8A) != 0)
      goto LABEL_3;
    if ((v6 & 0x45) != 0)
    {
LABEL_30:
      v8 = 0;
      goto LABEL_5;
    }
  }
  if (v5 != 372)
  {
    if (v5 != 371)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x2F73, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargs()", "bad node type");
      __break(0xC471u);
      JUMPOUT(0x197D4C788);
    }
    goto LABEL_30;
  }
LABEL_3:
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 40) & 0xFF00FFFFFFFFFFFFLL) != 0
    && *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 3528) + 40) & 0xFF00FFFFFFFFFFFFLL) + 0x12)
     - 350 <= 2)
  {
    return;
  }
  v7 = 0;
  v8 = 1;
LABEL_5:
  v9 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  *(_OWORD *)v59 = xmmword_199124410;
  JSC::B3::StackmapValue::append(v9, v3, (unint64_t)v59);
  if (v7)
  {
    v59[0] = v7;
    v59[1] = 0;
    LOBYTE(v60) = 3;
    JSC::B3::StackmapValue::append(v9, (uint64_t)v7, (unint64_t)&v59[1]);
  }
  v59[0] = v4;
  v59[1] = 0;
  LOBYTE(v60) = 3;
  JSC::B3::StackmapValue::append(v9, (uint64_t)v4, (unint64_t)&v59[1]);
  if ((v8 & 1) == 0)
  {
    v59[0] = 0;
    LOBYTE(v59[1]) = 2;
    JSC::B3::StackmapValue::append(v9, v3, (unint64_t)v59);
    v59[0] = 0;
    LOBYTE(v59[1]) = 2;
    JSC::B3::StackmapValue::append(v9, (uint64_t)v7, (unint64_t)v59);
    v59[0] = 0;
    LOBYTE(v59[1]) = 2;
    JSC::B3::StackmapValue::append(v9, (uint64_t)v4, (unint64_t)v59);
  }
  v15 = *((_QWORD *)this + 3488);
  *(_OWORD *)v59 = xmmword_199124420;
  JSC::B3::StackmapValue::append(v9, v15, (unint64_t)v59);
  v16 = *((_QWORD *)this + 3487);
  *(_OWORD *)v59 = xmmword_199124430;
  JSC::B3::StackmapValue::append(v9, v16, (unint64_t)v59);
  *((_QWORD *)v9 + 8) |= 0x30000uLL;
  *((_QWORD *)v9 + 10) |= 0xFFFF00FF0003FFFFLL;
  v70 = xmmword_199124410;
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v59, &v70, 1uLL);
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v9 + 136, v59, v17, v18, v19, v20, v21, v22);
  v30 = v59[0];
  if (&v60 != (unsigned int **)v59[0] && v59[0])
  {
    v59[0] = 0;
    LODWORD(v59[1]) = 0;
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  }
  v31 = *(_QWORD *)(*((_QWORD *)this + 3481) + 160);
  v32 = *(_DWORD *)(v31 + 188);
  if (v32 <= 0x40)
    v32 = 64;
  *(_DWORD *)(v31 + 188) = v32;
  v33 = (WTF *)*((_QWORD *)this + 1);
  v34 = *(_QWORD *)(*(_QWORD *)this + 16);
  JSC::CodeOrigin::CodeOrigin(&v68, (const JSC::CodeOrigin *)v2);
  if ((*(_QWORD *)(v2 + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
    v35 = *(_QWORD *)(*(_QWORD *)(v2 + 40) & 0xFF00FFFFFFFFFFFFLL);
  else
    v35 = v68;
  v36 = (_QWORD *)(v35 & 0xFFFFFFFF8);
  if ((v35 & 1) != 0)
    v36 = (_QWORD *)*v36;
  v37 = *(_QWORD *)(v2 + 72);
  v38 = *(_WORD *)(v2 + 18);
  v59[0] = v33;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v59[1], (const JSC::CodeOrigin *)&v70);
  v39 = v69;
  if (v69)
  {
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
  }
  v60 = v39;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)&v68);
  v61[1] = (uint64_t)v7;
  v62 = v8;
  v63 = v34;
  v64 = v36;
  v65 = v37;
  v66 = 64;
  v67 = v38;
  if (*(unsigned __int16 *)(v2 + 18) - 371 <= 1)
    JSC::B3::BasicBlock::appendNewControlValue(*((_QWORD *)this + 3472), *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v48, v49, v50, v51);
  else
  if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v68 & 0xFFFFFFFF8, v52, v53, v54, v55, v56, v57, v58);
  if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v70 & 0xFFFFFFFF8, v52, v53, v54, v55, v56, v57, v58);
  if (v69)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v69, v52, v53, v54, v55, v56, v57, v58);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDirectEval(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  unsigned int v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  WTF *v37;
  WTF *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int *v60;
  unsigned int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  _BYTE v77[24];
  unsigned int *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unsigned int *v82;
  WTF *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 3528);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v1 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197D4CC24);
  }
  v3 = *(_DWORD *)(v1 + 32);
  v5 = *(_DWORD *)(v1 + 32) + *(_DWORD *)(v1 + 24) - 2;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v5)
  {
    __break(0xC471u);
    JUMPOUT(0x197D4CC2CLL);
  }
  v6 = v4;
  v14 = *(_DWORD *)(v1 + 32) + *(_DWORD *)(v1 + 24) - 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v14)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  v15 = v7;
  v17 = *(_QWORD *)(*((_QWORD *)this + 3481) + 160);
  v18 = (8 * v3 + 31) & 0xFFFFFFF0;
  if (*(_DWORD *)(v17 + 188) > v18)
    v18 = *(_DWORD *)(v17 + 188);
  *(_DWORD *)(v17 + 188) = v18;
  v83 = 0;
  v84 = 0;
  *(_QWORD *)v77 = v6;
  *(_OWORD *)&v77[8] = xmmword_199124410;
  WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v83, (unint64_t)v77);
  v19 = v84;
  *(_QWORD *)v77 = v16;
  *(_OWORD *)&v77[8] = xmmword_199124460;
  if (HIDWORD(v84) == (_DWORD)v84)
  {
    WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v83, (unint64_t)v77);
    v19 = v84;
    v20 = HIDWORD(v84);
  }
  else
  {
    v20 = HIDWORD(v84) + 1;
    v21 = (char *)v83 + 24 * HIDWORD(v84);
    v22 = *(_QWORD *)&v77[16];
    *(_OWORD *)v21 = *(_OWORD *)v77;
    *((_QWORD *)v21 + 2) = v22;
    HIDWORD(v84) = v20;
  }
  *(_QWORD *)v77 = v15;
  *(_OWORD *)&v77[8] = xmmword_199124470;
  if (v20 == v19)
  {
    WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v83, (unint64_t)v77);
  }
  else
  {
    v23 = v20 + 1;
    v24 = (char *)v83 + 24 * v20;
    v25 = *(_QWORD *)&v77[16];
    *(_OWORD *)v24 = *(_OWORD *)v77;
    *((_QWORD *)v24 + 2) = v25;
    HIDWORD(v84) = v23;
  }
  v26 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v3 - 3);
  if (v3 != 3)
  {
    v27 = 0;
    while (1)
    {
      v28 = v27 + 1;
      v29 = v27 + 1 + *(_QWORD *)(v1 + 24);
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v29)
        break;
      if (v3 - 3 == v28)
        goto LABEL_14;
    }
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x197D4CC1CLL);
  }
LABEL_14:
  v36 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  if (HIDWORD(v84))
  {
    v37 = v83;
    v38 = (WTF *)((char *)v83 + 24 * HIDWORD(v84));
    do
    {
      v39 = (unint64_t)v37 + 8;
      v40 = *(_QWORD *)v37;
      v37 = (WTF *)((char *)v37 + 24);
      JSC::B3::StackmapValue::append(v36, v40, v39);
    }
    while (v37 != v38);
  }
  v41 = *((_QWORD *)this + 3488);
  *(_OWORD *)v77 = xmmword_199124420;
  JSC::B3::StackmapValue::append(v36, v41, (unint64_t)v77);
  v42 = *((_QWORD *)this + 3487);
  *(_OWORD *)v77 = xmmword_199124430;
  JSC::B3::StackmapValue::append(v36, v42, (unint64_t)v77);
  *((_QWORD *)v36 + 8) |= 0x30000uLL;
  *((_QWORD *)v36 + 10) |= 0xFFFF00FF0003FFFFLL;
  v85 = xmmword_199124410;
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v77, &v85, 1uLL);
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v36 + 136, v77, v43, v44, v45, v46, v47, v48);
  v56 = *(_QWORD *)v77;
  if (&v77[16] != *(_BYTE **)v77 && *(_QWORD *)v77)
  {
    *(_QWORD *)v77 = 0;
    *(_DWORD *)&v77[8] = 0;
    WTF::fastFree(v56, v49, v50, v51, v52, v53, v54, v55);
  }
  v57 = *((_QWORD *)this + 1);
  v58 = *(_QWORD *)(*(_QWORD *)this + 16);
  JSC::CodeOrigin::CodeOrigin(&v81, (const JSC::CodeOrigin *)v1);
  v59 = JSC::DFG::Node::ecmaMode((JSC::DFG::Node *)v1);
  *(_QWORD *)v77 = v58;
  *(_QWORD *)&v77[8] = v57;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v77[16], (const JSC::CodeOrigin *)&v85);
  v60 = v82;
  if (v82)
  {
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 + 1, v60));
  }
  v78 = v60;
  JSC::CodeOrigin::CodeOrigin(&v79, (const JSC::CodeOrigin *)&v81);
  v80 = v59;
  if ((v81 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v81 & 0xFFFFFFFF8, v69, v70, v71, v72, v73, v74, v75);
  if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v85 & 0xFFFFFFFF8, v69, v70, v71, v72, v73, v74, v75);
  if (v82)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v82, v69, v70, v71, v72, v73, v74, v75);
  v76 = v83;
  if (v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree((unint64_t)v76, v69, v70, v71, v72, v73, v74, v75);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallWasm(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  JSC::B3::Value *v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  WTF *v68;
  WTF *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  JSC::B3::Value *v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  char *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  WTF *v129;
  WTF *v130;
  uint64_t v131;
  int v132;
  char *v133;
  uint64_t v134;
  JSC::B3::Value *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::B3::Value *v141;
  JSC::B3::Value *v142;
  unsigned int v143;
  JSC::B3::Value *v144;
  _QWORD *v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  JSC::B3::Value *v150;
  unint64_t v151;
  int v152;
  char *v153;
  uint64_t v154;
  unsigned int v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  unint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned __int8 v161;
  unsigned int v162;
  JSC::B3::Value *v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned int v166;
  unsigned int v167;
  JSC::FTL::Output *v168;
  unsigned __int8 v169;
  JSC::JSCell *v170;
  _BYTE v171[24];
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  JSC::B3::Value *v175;
  WTF *v176;
  uint64_t v177;
  WTF *v178;
  int v179;
  unsigned int *v180[4];
  uint64_t v181;
  unsigned int v182;
  _BYTE *v183;
  int v184;
  int v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3528);
  v3 = **(_QWORD **)(v2 + 72);
  v4 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v186, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v170 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v4, &v186, v5, v6, v7, v8, v9, v10);
  if ((v186 & 1) != 0 && (v186 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v186 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  v18 = (unsigned __int8 **)JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(v3 + 40));
  if (*((_DWORD *)v18 + 8))
    v19 = 0;
  else
    v19 = v18 + 1;
  v20 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)v18);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v20, v19, 0, (char *)v180);
  JSC::Wasm::CallInformation::computeResultsOffsetList(v180, (unsigned int **)&v178);
  v28 = *(_QWORD *)(*((_QWORD *)this + 3481) + 160);
  v29 = (v179 + v185 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(v28 + 188) > v29)
    v29 = *(_DWORD *)(v28 + 188);
  *(_DWORD *)(v28 + 188) = v29;
  v176 = 0;
  v177 = 0;
  v30 = *((_DWORD *)v19 + 2);
  if (v30)
  {
    v113 = v30 + 1;
    v114 = 24 * (v30 - 1);
    v168 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    v165 = (_BYTE)this - 8;
    v164 = (_BYTE)this - 8;
    v169 = (_BYTE)this - 8;
    v167 = (_DWORD)this + 27640;
    v166 = (_DWORD)this + 27640;
    while (2)
    {
      v115 = v113 - 2;
      if (v182 > v113 - 2)
      {
        v116 = *(unsigned __int8 *)(v181 + v114 + 8);
        v117 = (*v19)[16 * (v113 + *((_DWORD *)v19 + 3) - 2)];
        switch((*v19)[16 * (v113 + *((_DWORD *)v19 + 3) - 2)])
        {
          case 0xFCu:
            if (v116 == 3)
            {
              v148 = v113 + *(_DWORD *)(v2 + 24);
              if (*(_DWORD *)(*(_QWORD *)this + 164) <= v148)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D824);
              }
              if (v182 <= v115)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D58CLL);
              }
              goto LABEL_54;
            }
            v159 = v113 + *(_DWORD *)(v2 + 24);
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v159)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D84CLL);
            }
            if (v182 <= v115)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D854);
            }
            v161 = v166 & 0x80 | (*(_BYTE *)(v181 + v114) + 32) & 0x7F;
            v166 = v166 & 0xFFFFFF80 | (*(unsigned __int8 *)(v181 + v114) + 32) & 0x7F;
            goto LABEL_125;
          case 0xFDu:
            if (v116 == 3)
            {
              v149 = v113 + *(_DWORD *)(v2 + 24);
              if (*(_DWORD *)(*(_QWORD *)this + 164) <= v149)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D82CLL);
              }
              v119 = JSC::FTL::Output::doubleToFloat(v168, v150);
              if (v182 <= v115)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D5DCLL);
              }
              goto LABEL_54;
            }
            v162 = v113 + *(_DWORD *)(v2 + 24);
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v162)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D85CLL);
            }
            v160 = JSC::FTL::Output::doubleToFloat(v168, v163);
            if (v182 <= v115)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D864);
            }
            v161 = v167 & 0x80 | (*(_BYTE *)(v181 + v114) + 32) & 0x7F;
            v167 = v167 & 0xFFFFFF80 | (*(unsigned __int8 *)(v181 + v114) + 32) & 0x7F;
LABEL_125:
            *(_QWORD *)v171 = v160;
            *(_QWORD *)&v171[8] = v161;
            goto LABEL_64;
          case 0xFEu:
            v143 = v113 + *(_DWORD *)(v2 + 24);
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v143)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D80CLL);
            }
            v145 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
            *((_BYTE *)v145 + 168) = 2;
            *(_QWORD *)v171 = v144;
            *(_QWORD *)&v171[8] = 0;
            v171[16] = 6;
            JSC::B3::StackmapValue::append((__int128 *)v145, (uint64_t)v144, (unint64_t)&v171[8]);
            v145[8] |= 0x30000uLL;
            v145[10] |= 0x30000uLL;
            if (v116 == 3)
            {
              if (v182 <= v115)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D814);
              }
              v146 = *(_QWORD *)(v181 + v114);
              *(_QWORD *)v171 = v145;
              *(_QWORD *)&v171[8] = v146;
              goto LABEL_55;
            }
            if (v182 <= v115)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D834);
            }
            v151 = v164 & 0x80 | (unint64_t)(*(_BYTE *)(v181 + v114) & 0x7F);
            *(_QWORD *)v171 = v145;
            *(_QWORD *)&v171[8] = v151;
            v164 = v151;
            *(_QWORD *)&v171[16] = 7;
            if (HIDWORD(v177) != (_DWORD)v177)
            {
              v152 = HIDWORD(v177) + 1;
              v153 = (char *)v176 + 24 * HIDWORD(v177);
              v154 = *(_QWORD *)&v171[16];
              v27 = *(int8x8_t *)v171;
              *(_OWORD *)v153 = *(_OWORD *)v171;
              *((_QWORD *)v153 + 2) = v154;
              HIDWORD(v177) = v152;
              goto LABEL_58;
            }
            goto LABEL_127;
          case 0xFFu:
            if (v116 == 3)
            {
              v147 = v113 + *(_DWORD *)(v2 + 24);
              if (*(_DWORD *)(*(_QWORD *)this + 164) <= v147)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D81CLL);
              }
              if (v182 <= v115)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D548);
              }
              goto LABEL_54;
            }
            v155 = v113 + *(_DWORD *)(v2 + 24);
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v155)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D83CLL);
            }
            v157 = JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v156, 2);
            if (v182 <= v115)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D844);
            }
            v158 = v165 & 0x80 | (unint64_t)(*(_BYTE *)(v181 + v114) & 0x7F);
            *(_QWORD *)v171 = v157;
            *(_QWORD *)&v171[8] = v158;
            v165 = v158;
            *(_QWORD *)&v171[16] = 7;
            v121 = HIDWORD(v177);
            if (HIDWORD(v177) == (_DWORD)v177)
              goto LABEL_127;
            goto LABEL_57;
          default:
            if ((v117 - 227) >= 2 && (v117 - 239) >= 2)
            {
              __break(0xC471u);
              JUMPOUT(0x197D4D7F4);
            }
            if (v116 == 3)
            {
              v118 = v113 + *(_DWORD *)(v2 + 24);
              if (*(_DWORD *)(*(_QWORD *)this + 164) <= v118)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D86CLL);
              }
              if (v182 <= v115)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D874);
              }
LABEL_54:
              v120 = *(_QWORD *)(v181 + v114);
              *(_QWORD *)v171 = v119;
              *(_QWORD *)&v171[8] = v120;
LABEL_55:
              *(_QWORD *)&v171[16] = 10;
            }
            else
            {
              v125 = v113 + *(_DWORD *)(v2 + 24);
              if (*(_DWORD *)(*(_QWORD *)this + 164) <= v125)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D87CLL);
              }
              if (v182 <= v115)
              {
                __break(0xC471u);
                JUMPOUT(0x197D4D884);
              }
              v127 = v169 & 0x80 | (unint64_t)(*(_BYTE *)(v181 + v114) & 0x7F);
              *(_QWORD *)v171 = v126;
              *(_QWORD *)&v171[8] = v127;
              v169 = v127;
LABEL_64:
              *(_QWORD *)&v171[16] = 7;
            }
            v121 = HIDWORD(v177);
            if (HIDWORD(v177) == (_DWORD)v177)
            {
LABEL_127:
              WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v176, (unint64_t)v171);
            }
            else
            {
LABEL_57:
              v122 = v121 + 1;
              v123 = (char *)v176 + 24 * v121;
              v124 = *(_QWORD *)&v171[16];
              v27 = *(int8x8_t *)v171;
              *(_OWORD *)v123 = *(_OWORD *)v171;
              *((_QWORD *)v123 + 2) = v124;
              HIDWORD(v177) = v122;
            }
LABEL_58:
            --v113;
            v114 -= 24;
            if (v113 != 1)
              continue;
            goto LABEL_8;
        }
      }
      break;
    }
    __break(0xC471u);
    JUMPOUT(0x197D4D804);
  }
LABEL_8:
  v31 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)v171 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(v31 + 16));
  *(_OWORD *)&v171[8] = xmmword_199124480;
  if (HIDWORD(v177) == (_DWORD)v177)
  {
    WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v176, (unint64_t)v171);
  }
  else
  {
    v38 = HIDWORD(v177) + 1;
    v39 = (char *)v176 + 24 * HIDWORD(v177);
    v40 = *(_QWORD *)&v171[16];
    *(_OWORD *)v39 = *(_OWORD *)v171;
    *((_QWORD *)v39 + 2) = v40;
    HIDWORD(v177) = v38;
  }
  v41 = *(_QWORD *)(v31 + 16);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 56) + 8) + 104) == -1)
    goto LABEL_84;
  v42 = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 56) + 16) + 8) + 6) != 1)
  {
    v43 = 0;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 56) + 16) + 8) + 6))
      goto LABEL_16;
    v131 = *(_QWORD *)(*(_QWORD *)(v41 + 64) + 8);
    if (*(_BYTE *)(v131 + 5) == 1)
    {
      *(_QWORD *)v171 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(v131 + 24));
      *(_OWORD *)&v171[8] = xmmword_199124490;
      if (HIDWORD(v177) == (_DWORD)v177)
      {
        WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v176, (unint64_t)v171);
      }
      else
      {
        v132 = HIDWORD(v177) + 1;
        v133 = (char *)v176 + 24 * HIDWORD(v177);
        v134 = *(_QWORD *)&v171[16];
        *(_OWORD *)v133 = *(_OWORD *)v171;
        *((_QWORD *)v133 + 2) = v134;
        HIDWORD(v177) = v132;
      }
      v41 = *(_QWORD *)(v31 + 16);
      v43 = 1;
      goto LABEL_13;
    }
LABEL_84:
    v42 = 0;
    v43 = 0;
    goto LABEL_16;
  }
  v43 = 0;
LABEL_13:
  v44 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(v41 + 64) + 8));
  *(_QWORD *)v171 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44);
  *(_OWORD *)&v171[8] = xmmword_1991244A0;
  if (HIDWORD(v177) == (_DWORD)v177)
  {
    WTF::Vector<JSC::B3::ConstrainedValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::ConstrainedValue>((uint64_t)&v176, (unint64_t)v171);
  }
  else
  {
    v45 = HIDWORD(v177) + 1;
    v46 = (char *)v176 + 24 * HIDWORD(v177);
    v47 = *(_QWORD *)&v171[16];
    *(_OWORD *)v46 = *(_OWORD *)v171;
    *((_QWORD *)v46 + 2) = v47;
    HIDWORD(v177) = v45;
  }
  v42 = 1;
LABEL_16:
  v48 = (uint64_t *)JSC::DFG::Graph::freeze(*(_QWORD *)this, v31, v32, v33, v34, v35, v36, v37);
  if (*((_DWORD *)v19 + 3))
  {
    v50 = **v19;
    switch(**v19)
    {
      case 0xFCu:
        v135 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 4);
        v175 = v135;
        if (!v184)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4D3C0);
        }
        goto LABEL_91;
      case 0xFDu:
        v135 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 3);
        v175 = v135;
        if (!v184)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4D88CLL);
        }
LABEL_91:
        v52 = v135;
        v53 = (*v183 + 32) & 0x7F;
        goto LABEL_20;
      case 0xFEu:
        v51 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
        v175 = v51;
        if (!v184)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4D3A0);
        }
        goto LABEL_19;
      case 0xFFu:
        v51 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 1);
        v175 = v51;
        if (!v184)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4D7FCLL);
        }
        goto LABEL_19;
      default:
        if ((v50 - 227) >= 2 && (v50 - 239) >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4D250);
        }
        v51 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
        v175 = v51;
        if (!v184)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4D034);
        }
LABEL_19:
        v52 = v51;
        v53 = *v183 & 0x7F;
LABEL_20:
        *(_QWORD *)&v187 = v53;
        *((_QWORD *)&v187 + 1) = 7;
        WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v171, &v187, 1uLL);
        WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v52 + 136, v171, v54, v55, v56, v57, v58, v59);
        v67 = *(_QWORD *)v171;
        if (&v171[16] != *(_BYTE **)v171 && *(_QWORD *)v171)
        {
          *(_QWORD *)v171 = 0;
          *(_DWORD *)&v171[8] = 0;
          WTF::fastFree(v67, v60, v61, v62, v63, v64, v65, v66);
        }
        break;
    }
  }
  else
  {
    v52 = (JSC::B3::Value *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
    v175 = v52;
  }
  if (HIDWORD(v177))
  {
    v68 = v176;
    v69 = (WTF *)((char *)v176 + 24 * HIDWORD(v177));
    do
    {
      v70 = (unint64_t)v68 + 8;
      v71 = *(_QWORD *)v68;
      v68 = (WTF *)((char *)v68 + 24);
      JSC::B3::StackmapValue::append((__int128 *)v52, v71, v70);
    }
    while (v68 != v69);
    v52 = v175;
  }
  v72 = 8585216;
  if (v43)
  {
    v72 = 196608;
    v73 = 8912896;
  }
  else
  {
    v73 = 0x80000;
  }
  if (!v42)
    v72 |= 0x400000uLL;
  *((_QWORD *)v52 + 8) |= v72;
  *((_QWORD *)v52 + 10) |= v72;
  v74 = JSC::RegisterSetBuilder::registersToSaveForCCall(-1);
  v81 = v74 | v73;
  if (v42)
    v81 = v74 | v73 | 0x400000;
  v82 = *((_QWORD *)v52 + 11) | v75;
  *((_QWORD *)v52 + 10) |= v81;
  *((_QWORD *)v52 + 11) = v82;
  *(_QWORD *)v171 = *((_QWORD *)this + 1);
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v171[8], (const JSC::CodeOrigin *)&v174);
  v89 = (unsigned int *)v187;
  if ((_QWORD)v187)
  {
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 + 1, v89));
  }
  *(_QWORD *)&v171[16] = v89;
  v172 = v31;
  v173 = v3;
  if (*((_DWORD *)v19 + 3))
  {
    v104 = **v19;
    switch(**v19)
    {
      case 0xFCu:
        v141 = v175;
        goto LABEL_95;
      case 0xFDu:
        v141 = (JSC::B3::Value *)JSC::FTL::Output::floatToDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v175);
LABEL_95:
        goto LABEL_69;
      case 0xFEu:
        goto LABEL_69;
      case 0xFFu:
        goto LABEL_71;
      default:
        if ((v104 - 227) >= 2 && (v104 - 239) >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197D4D380);
        }
        v112 = v175;
        goto LABEL_70;
    }
  }
  v128 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
LABEL_69:
  v112 = (JSC::B3::Value *)v128;
LABEL_70:
LABEL_71:
  if ((v174 & 1) != 0 && (v174 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v174 & 0xFFFFFFFF8, v105, v106, v107, v108, v109, v110, v111);
  if ((_QWORD)v187)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref((unsigned int *)v187, v105, v106, v107, v108, v109, v110, v111);
  v129 = v176;
  if (v176)
  {
    v176 = 0;
    LODWORD(v177) = 0;
    WTF::fastFree((unint64_t)v129, v105, v106, v107, v108, v109, v110, v111);
  }
  v130 = v178;
  v178 = 0;
  if (v130)
    WTF::fastFree((unint64_t)v130, v105, v106, v107, v108, v109, v110, v111);
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v180, v105, v106, v107, v108, v109, v110, v111);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallCustomAccessorGetter(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  JSC::FTL::AbstractHeap *v18;
  uint64_t v19;
  JSC::DFG::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v42, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v42, v3, v4, v5, v6, v7, v8);
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = *((_QWORD *)this + 3484);
  v18 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(*(_QWORD *)this + 16) + 40, v10, v11, v12, v13, v14, v15);
  JSC::FTL::Output::store((uint64_t)this + 27640, v17, v18, v19);
  v20 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v21 = **((_QWORD **)v20 + 9);
  v22 = JSC::DFG::Node::cacheableIdentifier(v20);
  if (v22)
  {
    if ((v22 & 1) != 0)
      v29 = v22 & 0xFFFFFFFFFFFFFFFELL;
    else
      v29 = *(_QWORD *)(v22 + 8);
  }
  else
  {
    v29 = 0;
  }
  if (BYTE1(qword_1ECF4C780))
  {
    v39 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v29);
    v38 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21);
  }
  else
  {
    v39 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v29);
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileVarargsLength(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v37, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v37, v3, v4, v5, v6, v7, v8);
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v18 = *((_QWORD *)v17 + 9);
  v19 = (unint64_t *)JSC::DFG::Node::argumentsChild(v17);
  v34 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(v18 + 16));
  v31 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v30);
  v32 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v31, *((JSC::B3::Value **)this + 3458));
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLoadVarargs(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::FTL::AbstractHeap *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  uint64_t v64;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v64, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v64, v3, v4, v5, v6, v7, v8);
  if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v64 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v18 = *((_QWORD *)v17 + 9);
  v19 = (unint64_t *)JSC::DFG::Node::argumentsChild(v17);
  v27 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62);
  v28 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(v18 + 24));
  v29 = JSC::FTL::Output::above((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62, v28);
  v30 = JSC::FTL::Output::bitOr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v27, v29);
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v62, v38, v39);
  v47 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v46, *((JSC::B3::Value **)this + 3484));
  v48 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 3);
  v49 = JSC::FTL::Output::lShr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v47, v48);
  v60 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v49);
  v59 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(v18 + 16));
  v58 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(v18 + 20));
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileForwardVarargs(JSC::DFG::Node **this)
{
  uint64_t result;
  JSC::DFG::Node *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  unint64_t v12;
  uint64_t *v13;
  int v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::FTL::AbstractHeap *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  JSC::FTL::IndexedAbstractHeap *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  JSC::B3::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  JSC::B3::Value *v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;
  JSC::FTL::IndexedAbstractHeap *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::FTL::IndexedAbstractHeap *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC::B3::Value *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC::B3::Value *v99;
  JSC::DFG::Node *v100;
  uint64_t v101;
  JSC::B3::Value *v102;

  if ((*(_QWORD *)JSC::DFG::Node::argumentsChild(this[3528]) & 0xFF00FFFFFFFFFFFFLL) != 0
    && *(unsigned __int16 *)((*(_QWORD *)JSC::DFG::Node::argumentsChild(this[3528]) & 0xFF00FFFFFFFFFFFFLL)
                                         + 0x12)
     - 350 <= 2)
  {
  }
  v3 = this[3528];
  v4 = (_DWORD *)*((_QWORD *)v3 + 9);
  if ((*(_QWORD *)JSC::DFG::Node::argumentsChild(v3) & 0xFF00FFFFFFFFFFFFLL) != 0)
    v12 = *(_QWORD *)(*(_QWORD *)JSC::DFG::Node::argumentsChild(this[3528]) & 0xFF00FFFFFFFFFFFFLL);
  else
    v12 = (unint64_t)this[3524];
  v13 = (uint64_t *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 1) != 0)
    v13 = (uint64_t *)*v13;
  v14 = v4[4];
  v16 = JSC::FTL::Output::sub((JSC::FTL::Output *)(this + 3455), v15, this[3458]);
  v17 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), v4[6]);
  v18 = JSC::FTL::Output::above((JSC::FTL::Output *)(this + 3455), v15, v17);
  JSC::FTL::Output::store((uint64_t)(this + 3455), (uint64_t)v15, v26, v27);
  v28 = JSC::AssemblyHelpers::argumentsStart(v13);
  v99 = v35;
  v102 = v42;
  v43 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
  v44 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
  v101 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
  v45 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(this + 3455));
  v46 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(this + 3455, (uint64_t)v16, 2);
  v47 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v4[5]);
  v48 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v47);
  v50 = v49;
  v51 = JSC::FTL::Output::above((JSC::FTL::Output *)(this + 3455), v47, v46);
  JSC::FTL::Output::branch(this + 3455, (uint64_t)v51, v43, v44, NAN, NAN, v52, v53, v54, v55);
  this[3472] = (JSC::DFG::Node *)v43;
  v100 = this[3473];
  this[3473] = (JSC::DFG::Node *)v44;
  v56 = (JSC::B3::Value *)JSC::FTL::Output::phi(this + 3455, 2);
  v57 = v56;
  if (v48 || v50)
  {
    if ((*(_WORD *)(v48 + 12) & 0xFFF) == 0x98)
      v58 = v48;
    else
      v58 = 0;
    *(_QWORD *)(v58 + 40) = v56;
  }
  v59 = JSC::FTL::Output::sub((JSC::FTL::Output *)(this + 3455), v56, this[3461]);
  v60 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 10);
  v62 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(this + 2817), (JSC::FTL::Output *)(this + 3455), v102, v59, 0, 0, 0, v61);
  JSC::FTL::Output::store((uint64_t)(this + 3455), v60, v62, v63);
  v64 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v59);
  if (v64 || v65)
  {
    if ((*(_WORD *)(v64 + 12) & 0xFFF) == 0x98)
      v66 = v64;
    else
      v66 = 0;
    *(_QWORD *)(v66 + 40) = v57;
  }
  v67 = JSC::FTL::Output::above((JSC::FTL::Output *)(this + 3455), v59, v46);
  JSC::FTL::Output::branch(this + 3455, (uint64_t)v67, v43, v44, NAN, NAN, v68, v69, v70, v71);
  this[3472] = (JSC::DFG::Node *)v44;
  this[3473] = (JSC::DFG::Node *)v101;
  v72 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v46);
  v74 = v73;
  v75 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(this + 3455), v46);
  JSC::FTL::Output::branch(this + 3455, (uint64_t)v75, v101, v45, NAN, NAN, v76, v77, v78, v79);
  this[3472] = (JSC::DFG::Node *)v101;
  this[3473] = (JSC::DFG::Node *)v45;
  v80 = (JSC::B3::Value *)JSC::FTL::Output::phi(this + 3455, 2);
  v81 = v80;
  if (v72 || v74)
  {
    if ((*(_WORD *)(v72 + 12) & 0xFFF) == 0x98)
      v82 = v72;
    else
      v82 = 0;
    *(_QWORD *)(v82 + 40) = v80;
  }
  v83 = JSC::FTL::Output::sub((JSC::FTL::Output *)(this + 3455), v80, this[3461]);
  v85 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(this + 2817), (JSC::FTL::Output *)(this + 3455), v99, v83, 0, 0, 0, v84);
  v87 = JSC::FTL::Output::load((uint64_t)(this + 3455), v85, v86, 2);
  v89 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(this + 2817), (JSC::FTL::Output *)(this + 3455), v102, v83, 0, 0, 0, v88);
  JSC::FTL::Output::store((uint64_t)(this + 3455), v87, v89, v90);
  v91 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(this + 3455), v83);
  if (v91 || v92)
  {
    if ((*(_WORD *)(v91 + 12) & 0xFFF) == 0x98)
      v93 = v91;
    else
      v93 = 0;
    *(_QWORD *)(v93 + 40) = v81;
  }
  v94 = JSC::FTL::Output::isZero64((JSC::FTL::Output *)(this + 3455), v83);
  result = JSC::FTL::Output::branch(this + 3455, (uint64_t)v94, v45, v101, NAN, NAN, v95, v96, v97, v98);
  this[3472] = (JSC::DFG::Node *)v45;
  this[3473] = v100;
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEntrySwitch(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3528) + 72);
  v3 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)v2;
    v5 = 8 * v3;
    do
    {
      v16 = v6;
      v7 = HIDWORD(v18);
      if (HIDWORD(v18) == (_DWORD)v18)
      {
        WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::BasicBlock *>((uint64_t)&v17, (unint64_t)&v16);
      }
      else
      {
        *((_QWORD *)v17 + HIDWORD(v18)) = v6;
        HIDWORD(v18) = v7 + 1;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  JSC::FTL::Output::entrySwitch((_QWORD *)this + 3455, (uint64_t)&v17);
  v15 = v17;
  if (v17)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileThrow(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v35, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v35, v3, v4, v5, v6, v7, v8);
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v35 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  return JSC::B3::BasicBlock::appendNewControlValue(*((_QWORD *)this + 3472), *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v28, v29, v30, v31);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsEmpty(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = JSC::FTL::Output::isZero64(v2, v3);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOfIsUndefined(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::B3::Value *v2;

}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsCallable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char **v45;
  uint64_t v46;
  JSC::FTL::PatchpointExceptionHandle *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::B3::Value **v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  char **v58;
  uint64_t v59;
  JSC::FTL::PatchpointExceptionHandle *v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  JSC::FTL::PatchpointExceptionHandle *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Value **v79;
  uint64_t v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  uint64_t v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char **v96;
  uint64_t v97;
  JSC::FTL::PatchpointExceptionHandle *v98;
  int v99;
  JSC::B3::Value *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::FTL::PatchpointExceptionHandle **v105;
  uint64_t v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  JSC::B3::Value *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char **v145;
  uint64_t v146;
  JSC::FTL::PatchpointExceptionHandle *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::B3::Value *v151;
  uint64_t v152;
  uint64_t v153;
  char **v154;
  uint64_t v155;
  JSC::FTL::PatchpointExceptionHandle *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t **v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t **v175;
  uint64_t *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t **v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t **v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  unsigned int v199;
  BOOL v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF *v246;
  WTF *v247;
  uint64_t v248;
  JSC::FTL::PatchpointExceptionHandle *v249;
  uint64_t v250;
  char v251;
  uint64_t *v252;
  uint64_t *v253;

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 28192);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v198 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v199 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v199 != 0x3FFFFFFF) ? (v200 = v199 == -1) : (v200 = 1), v200))
  {
    v201 = 2;
  }
  else if (v199 >> 28)
  {
    v234 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v234 = v198;
    *(_DWORD *)(v234 + 8) = v199;
    v201 = 1;
    v198 = v234;
  }
  else
  {
    v201 = v198;
    v198 = 0;
  }
  v11 = v198 | v201;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v198 | v201) & 1) == 0)
    goto LABEL_3;
  v202 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v203 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v203 != 0x3FFFFFFF) ? (v204 = v203 == -1) : (v204 = 1), v204))
  {
    v205 = 2;
  }
  else if (v203 >> 28)
  {
    v238 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v238 = v202;
    *(_DWORD *)(v238 + 8) = v203;
    v205 = 1;
    v202 = v238;
  }
  else
  {
    v205 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v202 = 0;
  }
  v206 = v202 | v205;
  v13 = (_QWORD *)(v206 & 0xFFFFFFFF8);
  if ((v206 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v246 = *(WTF **)(*(_QWORD *)(a1 + 28224) + 24);
  v20 = JSC::B3::Procedure::addBlock(v19, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v21 = (uint64_t)v20;
  v22 = *(_QWORD *)(a1 + 27784);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v22, (uint64_t)v20);
  }
  else
  {
    v253 = v20;
    v162 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v162 = 0u;
    *((_OWORD *)v162 + 1) = 0u;
    v162[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v162;
    v252 = v162;
    v162[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v253, (uint64_t *)&v252, v163, v164, v165, v166, v167, (uint64_t)&v249);
    v23 = v252;
    v168 = *(uint64_t ***)(a1 + 27832);
    *v252 = a1 + 27824;
    v23[1] = (uint64_t)v168;
    *v168 = v23;
    *(_QWORD *)(a1 + 27832) = v23;
  }
  v24 = JSC::B3::Procedure::addBlock(v23, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v25 = (uint64_t)v24;
  v26 = *(_QWORD *)(a1 + 27784);
  v240 = v17;
  if (v26)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v26, (uint64_t)v24);
  }
  else
  {
    v253 = v24;
    v169 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v169 = 0u;
    *((_OWORD *)v169 + 1) = 0u;
    v169[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v169;
    v252 = v169;
    v169[2] = v25;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v253, (uint64_t *)&v252, v170, v171, v172, v173, v174, (uint64_t)&v249);
    v27 = v252;
    v175 = *(uint64_t ***)(a1 + 27832);
    *v252 = a1 + 27824;
    v27[1] = (uint64_t)v175;
    *v175 = v27;
    *(_QWORD *)(a1 + 27832) = v27;
  }
  v28 = JSC::B3::Procedure::addBlock(v27, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v29 = *(_QWORD *)(a1 + 27784);
  v242 = (uint64_t)v28;
  if (v29)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v29, (uint64_t)v28);
  }
  else
  {
    v253 = v28;
    v176 = v28;
    v177 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v177 = 0u;
    *((_OWORD *)v177 + 1) = 0u;
    v177[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v177;
    v252 = v177;
    v177[2] = v176;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v253, (uint64_t *)&v252, v178, v179, v180, v181, v182, (uint64_t)&v249);
    v30 = v252;
    v183 = *(uint64_t ***)(a1 + 27832);
    *v252 = a1 + 27824;
    v30[1] = (uint64_t)v183;
    *v183 = v30;
    *(_QWORD *)(a1 + 27832) = v30;
  }
  v31 = JSC::B3::Procedure::addBlock(v30, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = v31;
  v33 = *(_QWORD *)(a1 + 27784);
  v248 = (uint64_t)v31;
  v241 = a2;
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, (uint64_t)v31);
  }
  else
  {
    v253 = v31;
    v184 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v184 = 0u;
    *((_OWORD *)v184 + 1) = 0u;
    v184[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v184;
    v252 = v184;
    v184[2] = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v253, (uint64_t *)&v252, v185, v186, v187, v188, v189, (uint64_t)&v249);
    v190 = v252;
    v191 = *(uint64_t ***)(a1 + 27832);
    *v252 = a1 + 27824;
    v190[1] = (uint64_t)v191;
    *v191 = v190;
    *(_QWORD *)(a1 + 27832) = v190;
  }
  v34 = *(_QWORD *)(a1 + 27648);
  v35 = *(_QWORD *)(a1 + 27776);
  v36 = *(JSC::B3::Value **)(a1 + 27760);
  v37 = *(_QWORD *)(a1 + 27768);
  v38 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v38 + 8) = -1;
  *(_WORD *)(v38 + 12) = 152;
  *(_BYTE *)(v38 + 20) = 1;
  *(_QWORD *)v38 = &unk_1E357EDA0;
  *(_DWORD *)(v38 + 16) = 0;
  *(_QWORD *)(v38 + 40) = 0;
  *(_QWORD *)(v38 + 48) = v34;
  *(_QWORD *)(v38 + 24) = v37;
  *(_QWORD *)(v38 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v36, (JSC::B3::Value *)v38);
  v249 = (JSC::FTL::PatchpointExceptionHandle *)v38;
  v45 = (char **)(v35 + 8);
  v46 = *(unsigned int *)(v35 + 20);
  if ((_DWORD)v46 == *(_DWORD *)(v35 + 16))
  {
    v192 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45, v46 + 1, (unint64_t)&v249);
    v46 = *(unsigned int *)(v35 + 20);
    *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v46) = *(_QWORD *)v192;
    v47 = v249;
  }
  else
  {
    *(_QWORD *)&(*v45)[8 * v46] = v38;
    v47 = (JSC::FTL::PatchpointExceptionHandle *)v38;
  }
  *(_DWORD *)(v35 + 20) = v46 + 1;
  *((_QWORD *)v47 + 4) = v35;
  v53 = (JSC::B3::Value **)(a1 + 27640);
  if ((v48 & 0xFFFFD3FF00000008) != 0 && (v53 = (JSC::B3::Value **)(a1 + 27648), (v48 & 0x2C00FFFFFFF7) != 0)
    || (v57 = *v53) == 0)
  {
    v54 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v18, *(JSC::B3::Value **)(a1 + 27904));
    v55 = *(_QWORD *)(a1 + 27776);
    v56 = *(JSC::B3::Value **)(a1 + 27760);
    v57 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v54, *(_QWORD *)(a1 + 27672));
    JSC::B3::Procedure::addValueImpl(v56, v57);
    v249 = v57;
    v58 = (char **)(v55 + 8);
    v59 = *(unsigned int *)(v55 + 20);
    if ((_DWORD)v59 == *(_DWORD *)(v55 + 16))
    {
      v197 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v58, v59 + 1, (unint64_t)&v249);
      v59 = *(unsigned int *)(v55 + 20);
      *(_QWORD *)(*(_QWORD *)(v55 + 8) + 8 * v59) = *(_QWORD *)v197;
      v60 = v249;
    }
    else
    {
      *(_QWORD *)&(*v58)[8 * v59] = v57;
      v60 = v57;
    }
    *(_DWORD *)(v55 + 20) = v59 + 1;
    *((_QWORD *)v60 + 4) = v55;
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v57, v21, v248, NAN, NAN, v49, v50, v51, v52);
  *(_QWORD *)(a1 + 27776) = v21;
  v239 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v25;
  v61 = *(_QWORD *)(a1 + 27640);
  v62 = *(JSC::B3::Value **)(a1 + 27760);
  v63 = *(_QWORD *)(a1 + 27768);
  v64 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v64 + 8) = -1;
  *(_WORD *)(v64 + 12) = 152;
  *(_DWORD *)(v64 + 16) = 0;
  *(_BYTE *)(v64 + 20) = 1;
  *(_QWORD *)v64 = &unk_1E357EDA0;
  *(_QWORD *)(v64 + 40) = 0;
  *(_QWORD *)(v64 + 48) = v61;
  *(_QWORD *)(v64 + 24) = v63;
  *(_QWORD *)(v64 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v62, (JSC::B3::Value *)v64);
  v249 = (JSC::FTL::PatchpointExceptionHandle *)v64;
  v71 = (char **)(v21 + 8);
  v72 = *(unsigned int *)(v21 + 20);
  if ((_DWORD)v72 == *(_DWORD *)(v21 + 16))
  {
    v193 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, v72 + 1, (unint64_t)&v249);
    v72 = *(unsigned int *)(v21 + 20);
    *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * v72) = *(_QWORD *)v193;
    v73 = v249;
  }
  else
  {
    *(_QWORD *)&(*v71)[8 * v72] = v64;
    v73 = (JSC::FTL::PatchpointExceptionHandle *)v64;
  }
  *(_DWORD *)(v21 + 20) = v72 + 1;
  *((_QWORD *)v73 + 4) = v21;
  v79 = (JSC::B3::Value **)(a1 + 27640);
  if ((v74 & 0x2800FFFFFFF3) != 0 && (v79 = (JSC::B3::Value **)(a1 + 27648), (v74 & 4) != 0) || (v85 = *v79) == 0)
  {
    v80 = *(_QWORD *)(a1 + 3160);
    v81 = (uint64_t)v18;
    if (v80)
    {
      v82 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v80);
      v81 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v18, v82);
    }
    v83 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v81);
    v84 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 26);
    v85 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v83, v84);
  }
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v85, v248, v25, NAN, NAN, v75, v76, v77, v78);
  *(_QWORD *)(a1 + 27776) = v25;
  *(_QWORD *)(a1 + 27784) = v242;
  v86 = *(_QWORD *)(a1 + 27648);
  v87 = *(JSC::B3::Value **)(a1 + 27760);
  v88 = *(_QWORD *)(a1 + 27768);
  v89 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v89 + 8) = -1;
  *(_WORD *)(v89 + 12) = 152;
  *(_DWORD *)(v89 + 16) = 0;
  *(_BYTE *)(v89 + 20) = 1;
  *(_QWORD *)v89 = &unk_1E357EDA0;
  *(_QWORD *)(v89 + 40) = 0;
  *(_QWORD *)(v89 + 48) = v86;
  *(_QWORD *)(v89 + 24) = v88;
  *(_QWORD *)(v89 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v87, (JSC::B3::Value *)v89);
  v249 = (JSC::FTL::PatchpointExceptionHandle *)v89;
  v96 = (char **)(v25 + 8);
  v97 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v97 == *(_DWORD *)(v25 + 16))
  {
    v194 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96, v97 + 1, (unint64_t)&v249);
    v97 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v97) = *(_QWORD *)v194;
    v98 = v249;
  }
  else
  {
    *(_QWORD *)&(*v96)[8 * v97] = v89;
    v98 = (JSC::FTL::PatchpointExceptionHandle *)v89;
  }
  *(_DWORD *)(v25 + 20) = v97 + 1;
  *((_QWORD *)v98 + 4) = v25;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v100, v242, v248, 0.0, 1.0, v101, v102, v103, v104);
  *(_QWORD *)(a1 + 27776) = v242;
  *(_QWORD *)(a1 + 27784) = v248;
  v243 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v105 = (JSC::FTL::PatchpointExceptionHandle **)WTF::fastMalloc((WTF *)8);
  *v105 = v18;
  v106 = *(_QWORD *)(a1 + 28192);
  if ((v106 & 1) != 0)
  {
    v207 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
    if ((v106 & 2) != 0
      || (v208 = *(unsigned int *)((v106 & 0xFFFFFFFF8) + 8), (_DWORD)v208 == 0x3FFFFFFF)
      || (_DWORD)v208 == -1)
    {
      v209 = 2;
    }
    else if (v208 >> 28)
    {
      v237 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v237 = v207;
      *(_DWORD *)(v237 + 8) = v208;
      v209 = 1;
      v207 = v237;
    }
    else
    {
      v209 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
      v207 = v208 << 36;
    }
    v106 = v207 | v209;
  }
  v107 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  v247 = (WTF *)v105;
  v249 = *v105;
  v250 = 0;
  v251 = 3;
  JSC::B3::StackmapValue::append(v107, (uint64_t)v249, (unint64_t)&v250);
  *((_QWORD *)v107 + 8) |= 0x30000uLL;
  *((_QWORD *)v107 + 10) |= 0x30000uLL;
  v113 = *(_QWORD *)(a1 + 8);
  v114 = (unsigned int *)v249;
  if (v249)
  {
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 + 1, v114));
  }
  v116 = v106;
  v245 = v106;
  if ((v106 & 1) != 0)
  {
    v210 = *(_QWORD *)(v106 & 0xFFFFFFFF8);
    if ((v106 & 2) != 0
      || ((v211 = *(unsigned int *)((v106 & 0xFFFFFFFF8) + 8), (_DWORD)v211 != 0x3FFFFFFF)
        ? (v212 = (_DWORD)v211 == -1)
        : (v212 = 1),
          v212))
    {
      v213 = 2;
    }
    else if (v211 >> 28)
    {
      v235 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v235 = v210;
      *(_DWORD *)(v235 + 8) = v211;
      v213 = 1;
      v210 = v235;
    }
    else
    {
      v213 = v210;
      v210 = v211 << 36;
    }
    v116 = v210 | v213;
  }
  v117 = WTF::fastMalloc((WTF *)0x40);
  v125 = v117;
  *(_DWORD *)(v117 + 8) = 1;
  *(_QWORD *)v117 = &off_1E3577338;
  *(_QWORD *)(v117 + 16) = v243;
  *(_QWORD *)(v117 + 24) = v241;
  *(_QWORD *)(v117 + 32) = v240;
  if (v114)
  {
    do
      v126 = __ldaxr(v114);
    while (__stlxr(v126 + 1, v114));
  }
  *(_QWORD *)(v117 + 40) = v114;
  *(_QWORD *)(v117 + 48) = v113;
  v127 = v116;
  if ((v116 & 1) != 0)
  {
    v214 = *(_QWORD *)(v116 & 0xFFFFFFFF8);
    if ((v116 & 2) != 0
      || ((v215 = *(unsigned int *)((v116 & 0xFFFFFFFF8) + 8), (_DWORD)v215 != 0x3FFFFFFF)
        ? (v216 = (_DWORD)v215 == -1)
        : (v216 = 1),
          v216))
    {
      v217 = 2;
    }
    else if (v215 >> 28)
    {
      v244 = *(_QWORD *)(v116 & 0xFFFFFFFF8);
      v236 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v236 = v244;
      *(_DWORD *)(v236 + 8) = v215;
      v217 = 1;
      v214 = v236;
    }
    else
    {
      v217 = *(_QWORD *)(v116 & 0xFFFFFFFF8);
      v214 = v215 << 36;
    }
    v127 = v214 | v217;
  }
  *(_QWORD *)(v125 + 56) = v127;
  v128 = (unsigned int *)*((_QWORD *)v107 + 7);
  *((_QWORD *)v107 + 7) = v125;
  if (v128)
  {
    v129 = v128 + 2;
    do
    {
      v130 = __ldaxr(v129);
      v131 = v130 - 1;
    }
    while (__stlxr(v131, v129));
    if (!v131)
    {
      atomic_store(1u, v128 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v128 + 8))(v128);
    }
  }
  if ((v116 & 1) != 0 && (v116 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v116 & 0xFFFFFFFF8, v118, v119, v120, v121, v122, v123, v124);
  if (v114)
  {
    do
    {
      v132 = __ldaxr(v114);
      v133 = v132 - 1;
    }
    while (__stlxr(v133, v114));
    if (!v133)
    {
      atomic_store(1u, v114);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v114, v118, v119, v120, v121, v122, v123, v124);
      WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    }
  }
  v134 = (unsigned int *)v249;
  v249 = 0;
  if (v134)
  {
    do
    {
      v135 = __ldaxr(v134);
      v136 = v135 - 1;
    }
    while (__stlxr(v136, v134));
    if (!v136)
    {
      atomic_store(1u, v134);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v134, v118, v119, v120, v121, v122, v123, v124);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
    }
  }
  if ((v245 & 1) != 0 && (v245 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v245 & 0xFFFFFFFF8, v118, v119, v120, v121, v122, v123, v124);
  WTF::fastFree((unint64_t)v247, v118, v119, v120, v121, v122, v123, v124);
  v137 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), (JSC::B3::Value *)v107);
  v138 = *(_QWORD *)(a1 + 27776);
  v139 = *(JSC::B3::Value **)(a1 + 27760);
  v140 = *(_QWORD *)(a1 + 27768);
  v141 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v141 + 8) = -1;
  *(_WORD *)(v141 + 12) = 152;
  *(_DWORD *)(v141 + 16) = 0;
  *(_BYTE *)(v141 + 20) = 1;
  *(_QWORD *)v141 = &unk_1E357EDA0;
  *(_QWORD *)(v141 + 40) = 0;
  *(_QWORD *)(v141 + 48) = v137;
  *(_QWORD *)(v141 + 24) = v140;
  *(_QWORD *)(v141 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v139, (JSC::B3::Value *)v141);
  v249 = (JSC::FTL::PatchpointExceptionHandle *)v141;
  v145 = (char **)(v138 + 8);
  v146 = *(unsigned int *)(v138 + 20);
  if ((_DWORD)v146 == *(_DWORD *)(v138 + 16))
  {
    v195 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v145, v146 + 1, (unint64_t)&v249);
    v146 = *(unsigned int *)(v138 + 20);
    *(_QWORD *)(*(_QWORD *)(v138 + 8) + 8 * v146) = *(_QWORD *)v195;
    v147 = v249;
  }
  else
  {
    *(_QWORD *)&(*v145)[8 * v146] = v141;
    v147 = (JSC::FTL::PatchpointExceptionHandle *)v141;
  }
  *(_DWORD *)(v138 + 20) = v146 + 1;
  *((_QWORD *)v147 + 4) = v138;
  v148 = *(_QWORD *)(a1 + 27776);
  v149 = *(_QWORD *)(a1 + 27760);
  v150 = *(_QWORD *)(a1 + 27768);
  v249 = (JSC::FTL::PatchpointExceptionHandle *)v248;
  LOBYTE(v250) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v148, v149, 154, v150, (uint64_t *)&v249, v142, v143, v144);
  *(_QWORD *)(a1 + 27776) = v248;
  *(_QWORD *)(a1 + 27784) = v239;
  v151 = *(JSC::B3::Value **)(a1 + 27760);
  v152 = *(_QWORD *)(a1 + 27768);
  v153 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v153 = off_1E357F5F0;
  *(_DWORD *)(v153 + 8) = -1;
  *(_WORD *)(v153 + 12) = 153;
  *(_DWORD *)(v153 + 16) = 1;
  *(_BYTE *)(v153 + 20) = 0;
  *(_QWORD *)(v153 + 24) = v152;
  *(_QWORD *)(v153 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v151, (JSC::B3::Value *)v153);
  v249 = (JSC::FTL::PatchpointExceptionHandle *)v153;
  v154 = (char **)(v248 + 8);
  v155 = *(unsigned int *)(v248 + 20);
  if ((_DWORD)v155 == *(_DWORD *)(v248 + 16))
  {
    v196 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v154, v155 + 1, (unint64_t)&v249);
    v155 = *(unsigned int *)(v248 + 20);
    *(_QWORD *)(*(_QWORD *)(v248 + 8) + 8 * v155) = *(_QWORD *)v196;
    v156 = v249;
  }
  else
  {
    *(_QWORD *)&(*v154)[8 * v155] = v153;
    v156 = (JSC::FTL::PatchpointExceptionHandle *)v153;
  }
  *(_DWORD *)(v248 + 20) = v155 + 1;
  *((_QWORD *)v156 + 4) = v248;
  if ((*(_WORD *)(v38 + 12) & 0xFFF) == 0x98)
    v157 = v38;
  else
    v157 = 0;
  *(_QWORD *)(v157 + 40) = v153;
  if ((*(_WORD *)(v64 + 12) & 0xFFF) == 0x98)
    v158 = v64;
  else
    v158 = 0;
  *(_QWORD *)(v158 + 40) = v153;
  if ((*(_WORD *)(v89 + 12) & 0xFFF) == 0x98)
    v159 = v89;
  else
    v159 = 0;
  *(_QWORD *)(v159 + 40) = v153;
  if ((*(_WORD *)(v141 + 12) & 0xFFF) == 0x98)
    v160 = v141;
  else
    v160 = 0;
  *(_QWORD *)(v160 + 40) = v153;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsUndefinedOrNull(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::B3::Value *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;

}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsBoolean(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::B3::Value *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNumberIsInteger(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::B3::BasicBlock *v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  JSC::B3::Value *v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  JSC::B3::Value *v62[2];
  uint64_t v63;
  char v64;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v4 = JSC::FTL::Output::newBlock(v2);
  v5 = JSC::FTL::Output::newBlock(v2);
  v6 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v61 = JSC::FTL::Output::anchor(v2, *((JSC::B3::Value **)this + 3455));
  v9 = v8;
  JSC::FTL::Output::branch(v2, (uint64_t)v17, (uint64_t)v6, v3, NAN, NAN, v18, v19, v20, v21);
  *((_QWORD *)this + 3472) = v3;
  v22 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v4;
  v23 = JSC::FTL::Output::anchor(v2, *((JSC::B3::Value **)this + 3456));
  v25 = v24;
  JSC::FTL::Output::branch(v2, (uint64_t)v33, (uint64_t)v6, v4, NAN, NAN, v34, v35, v36, v37);
  *((_QWORD *)this + 3472) = v4;
  *((_QWORD *)this + 3473) = v5;
  v62[0] = 0;
  v39 = v62[0];
  v40 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 52);
  v41 = JSC::FTL::Output::lShr(v2, v39, v40);
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2047);
  v43 = JSC::FTL::Output::bitAnd(v2, v41, v42);
  v44 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 2047);
  v45 = JSC::FTL::Output::equal(v2, v43, v44);
  JSC::FTL::Output::branch(v2, (uint64_t)v45, (uint64_t)v6, v5, NAN, NAN, v46, v47, v48, v49);
  *((_QWORD *)this + 3472) = v5;
  *((_QWORD *)this + 3473) = v6;
  v50 = (__int128 *)JSC::FTL::Output::patchpoint(v2, 1);
  v62[1] = v38;
  v63 = 0;
  v64 = 3;
  JSC::B3::StackmapValue::append(v50, (uint64_t)v38, (unint64_t)&v63);
  *((_BYTE *)v50 + 169) = 1;
  *((_QWORD *)v50 + 15) = 0;
  *((_QWORD *)v50 + 16) = 0;
  *((_QWORD *)v50 + 14) = 0;
  v51 = JSC::FTL::Output::anchor(v2, (JSC::B3::Value *)v50);
  v53 = v52;
  JSC::FTL::Output::jump(v2, v6, v54, v55, v56, v57, v58, v59);
  *((_QWORD *)this + 3472) = v6;
  *((_QWORD *)this + 3473) = v22;
  v60 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(v2, 1, v61, v9, v23, v25, v51, v53);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGlobalIsNaN(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSCell *v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::BasicBlock *v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::B3::Value *v66;
  JSC::B3::Value *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::B3::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  uint64_t v83[4];
  JSC::B3::Value *v84;
  uint64_t v85;

  v3 = (unint64_t *)*((_QWORD *)this + 3528);
  v4 = (v3[3] >> 50) & 0x3F;
  if ((_DWORD)v4 == 49)
  {
    v6 = JSC::FTL::Output::doubleNotEqualOrUnordered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5, v5);
  }
  else
  {
    if ((_DWORD)v4)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v3, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x3495, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGlobalIsNaN()", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197D4F5E0);
    }
    v8 = *(_QWORD *)this;
    JSC::CodeOrigin::CodeOrigin(&v85, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
    v22 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v8, &v85, v9, v10, v11, v12, v13, v14);
    if ((v85 & 1) != 0 && (v85 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v85 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
    v84 = v23;
    v36 = v83[1] & 0x300000000;
    if ((v83[0] & 1) != 0)
      WTF::fastFree(v83[0] & 0xFFFFFFFFFFFFFFFCLL, v29, v30, v31, v32, v33, v34, v35);
    if (v36)
    {
      v37 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v38 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v39 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
      v40 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v39);
      v42 = v41;
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v50, (uint64_t)v38, v37, NAN, NAN, v51, v52, v53, v54);
      *((_QWORD *)this + 3472) = v37;
      v55 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v38;
      v67 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v66);
      v68 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v67);
      v70 = v69;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v38, v71, v72, v73, v74, v75, v76);
      *((_QWORD *)this + 3472) = v38;
      *((_QWORD *)this + 3473) = v55;
      v77 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 1, v40, v42, v68, v70);
    }
    else
    {
      v77 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v82);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNumberIsNaN(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::BasicBlock *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  JSC::B3::Value *v59;
  _QWORD v60[4];
  JSC::B3::Value *v61;

  v3 = (unint64_t *)*((_QWORD *)this + 3528);
  v4 = (v3[3] >> 50) & 0x3F;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 49)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v3, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x34B7, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNumberIsNaN()", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197D4F840);
    }
    v58 = JSC::FTL::Output::doubleNotEqualOrUnordered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57, v57);
  }
  else
  {
    v61 = v5;
    v18 = v60[1] & 0x300000000;
    if ((v60[0] & 1) != 0)
      WTF::fastFree(v60[0] & 0xFFFFFFFFFFFFFFFCLL, v11, v12, v13, v14, v15, v16, v17);
    if (v18)
    {
      v19 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v20 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
      v22 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21);
      v24 = v23;
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v32, (uint64_t)v20, v19, NAN, NAN, v33, v34, v35, v36);
      *((_QWORD *)this + 3472) = v19;
      v37 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v20;
      v45 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44);
      v46 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45);
      v48 = v47;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20, v49, v50, v51, v52, v53, v54);
      *((_QWORD *)this + 3472) = v20;
      *((_QWORD *)this + 3473) = v37;
      v55 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 1, v22, v24, v46, v48);
    }
    else
    {
      v55 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v59);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapIterationNext(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  JSC::B3::Value *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  unint64_t (*v58)(uint64_t, JSC::VM *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  JSC::DFG::Node *v61;
  WTF *v62;
  char **v63;
  uint64_t v64;
  WTF *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  double result;
  char *v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v71 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v72 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v72 != 0x3FFFFFFF) ? (v73 = v72 == -1) : (v73 = 1), v73))
  {
    v74 = 2;
  }
  else if (v72 >> 28)
  {
    v80 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v80 = v71;
    *(_DWORD *)(v80 + 8) = v72;
    v74 = 1;
    v71 = v80;
  }
  else
  {
    v74 = v71;
    v71 = 0;
  }
  v11 = v71 | v74;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v71 | v74) & 1) == 0)
    goto LABEL_3;
  v75 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v76 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v76 != 0x3FFFFFFF) ? (v77 = v76 == -1) : (v77 = 1), v77))
  {
    v78 = 2;
  }
  else if (v76 >> 28)
  {
    v81 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v81 = v75;
    *(_DWORD *)(v81 + 8) = v76;
    v78 = 1;
    v75 = v81;
  }
  else
  {
    v78 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v75 = 0;
  }
  v79 = v75 | v78;
  v13 = (_QWORD *)(v79 & 0xFFFFFFFF8);
  if ((v79 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v27 = *(_DWORD *)(*((_QWORD *)this + 3528) + 72);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v28, v29, v30, v31, v32, v33);
  v34 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v42 = (int *)((char *)this + 28264);
  v43 = *((_DWORD *)this + 7066);
  if ((v43 & 0x80000000) == 0)
  {
    v44 = *((_QWORD *)this + 3481);
    v82 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v82 = 0x200000002;
    v83 = 0x200000002;
    v52 = (_QWORD *)(v44 + 32);
    v53 = *(unsigned int *)(v44 + 44);
    if ((_DWORD)v53 == *(_DWORD *)(v44 + 40))
    {
      v54 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v82);
      v55 = *(_QWORD *)(v44 + 32) + 16 * *(unsigned int *)(v44 + 44);
    }
    else
    {
      v55 = *v52 + 16 * v53;
      v54 = (unint64_t)&v82;
    }
    *(_QWORD *)v55 = 0;
    *(_QWORD *)(v55 + 8) = 0;
    v56 = *(_QWORD *)v54;
    *(_QWORD *)v54 = 0;
    *(_QWORD *)v55 = v56;
    LODWORD(v56) = *(_DWORD *)(v54 + 8);
    *(_DWORD *)(v54 + 8) = 0;
    *(_DWORD *)(v55 + 8) = v56;
    LODWORD(v56) = *(_DWORD *)(v54 + 12);
    *(_DWORD *)(v54 + 12) = 0;
    *(_DWORD *)(v55 + 12) = v56;
    ++*(_DWORD *)(v44 + 44);
    v43 = v53 | 0x80000000;
    *v42 = v53 | 0x80000000;
    v57 = v82;
    if (v82)
    {
      v82 = 0;
      LODWORD(v83) = 0;
      WTF::fastFree((unint64_t)v57, v45, v46, v47, v48, v49, v50, v51);
      v43 = *v42;
    }
  }
  if (v27)
    v58 = operationSetIterationNext;
  else
    v58 = operationMapIterationNext;
  v59 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v58);
  v60 = *((_QWORD *)this + 3472);
  v62 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), v43, *((_QWORD *)this + 3471), v59, v34, (uint64_t)v18, (uint64_t)v26);
  v82 = v62;
  v63 = (char **)(v60 + 8);
  v64 = *(unsigned int *)(v60 + 20);
  if ((_DWORD)v64 == *(_DWORD *)(v60 + 16))
  {
    v70 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v63, v64 + 1, (unint64_t)&v82);
    v64 = *(unsigned int *)(v60 + 20);
    *(_QWORD *)(*(_QWORD *)(v60 + 8) + 8 * v64) = *(_QWORD *)v70;
    v65 = v82;
  }
  else
  {
    *(_QWORD *)&(*v63)[8 * v64] = v62;
    v65 = v62;
  }
  *(_DWORD *)(v60 + 20) = v64 + 1;
  *((_QWORD *)v65 + 4) = v60;
  v67 = *((_QWORD *)this + 3528);
  v68 = *((_QWORD *)this + 3521);
  v84.n128_u64[0] = v66;
  v84.n128_u64[1] = v68;
  v85 = v67;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v82, (uint64_t *)this + 3492, &v85, &v84).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapIterationEntry(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double result;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46[3];
  __n128 v47;
  uint64_t v48;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v33 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v34 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v34 != 0x3FFFFFFF) ? (v35 = v34 == -1) : (v35 = 1), v35))
  {
    v36 = 2;
  }
  else if (v34 >> 28)
  {
    v42 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v42 = v33;
    *(_DWORD *)(v42 + 8) = v34;
    v36 = 1;
    v33 = v42;
  }
  else
  {
    v36 = v33;
    v33 = 0;
  }
  v11 = v33 | v36;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v33 | v36) & 1) == 0)
    goto LABEL_3;
  v37 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v38 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v38 != 0x3FFFFFFF) ? (v39 = v38 == -1) : (v39 = 1), v39))
  {
    v40 = 2;
  }
  else if (v38 >> 28)
  {
    v43 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v44 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v44 = v37;
    *(_DWORD *)(v44 + 8) = v43;
    v40 = 1;
    v37 = v44;
  }
  else
  {
    v40 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v37 = 0;
  }
  v41 = v37 | v40;
  v13 = (_QWORD *)(v41 & 0xFFFFFFFF8);
  if ((v41 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(*((_QWORD *)this + 3528) + 72))
    v24 = operationSetIterationEntry;
  else
    v24 = operationMapIterationEntry;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v18, v19, v20, v21, v22, v23);
  v46[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v30 = *((_QWORD *)this + 3528);
  v31 = *((_QWORD *)this + 3521);
  v47.n128_u64[0] = v29;
  v47.n128_u64[1] = v31;
  v48 = v30;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v46, (uint64_t *)this + 3492, &v48, &v47).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapIterationEntryKey(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double result;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  uint64_t v46[3];
  __n128 v47;
  uint64_t v48;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v33 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v34 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v34 != 0x3FFFFFFF) ? (v35 = v34 == -1) : (v35 = 1), v35))
  {
    v36 = 2;
  }
  else if (v34 >> 28)
  {
    v42 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v42 = v33;
    *(_DWORD *)(v42 + 8) = v34;
    v36 = 1;
    v33 = v42;
  }
  else
  {
    v36 = v33;
    v33 = 0;
  }
  v11 = v33 | v36;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v33 | v36) & 1) == 0)
    goto LABEL_3;
  v37 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v38 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v38 != 0x3FFFFFFF) ? (v39 = v38 == -1) : (v39 = 1), v39))
  {
    v40 = 2;
  }
  else if (v38 >> 28)
  {
    v43 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v44 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v44 = v37;
    *(_DWORD *)(v44 + 8) = v43;
    v40 = 1;
    v37 = v44;
  }
  else
  {
    v40 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v37 = 0;
  }
  v41 = v37 | v40;
  v13 = (_QWORD *)(v41 & 0xFFFFFFFF8);
  if ((v41 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(*((_QWORD *)this + 3528) + 72))
    v24 = operationSetIterationEntryKey;
  else
    v24 = operationMapIterationEntryKey;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v18, v19, v20, v21, v22, v23);
  v46[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v30 = *((_QWORD *)this + 3528);
  v31 = *((_QWORD *)this + 3521);
  v47.n128_u64[0] = v29;
  v47.n128_u64[1] = v31;
  v48 = v30;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v46, (uint64_t *)this + 3492, &v48, &v47).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapIterationEntryValue(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double result;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  uint64_t v45[3];
  __n128 v46;
  uint64_t v47;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v32 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v33 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v33 != 0x3FFFFFFF) ? (v34 = v33 == -1) : (v34 = 1), v34))
  {
    v35 = 2;
  }
  else if (v33 >> 28)
  {
    v41 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v41 = v32;
    *(_DWORD *)(v41 + 8) = v33;
    v35 = 1;
    v32 = v41;
  }
  else
  {
    v35 = v32;
    v32 = 0;
  }
  v11 = v32 | v35;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v32 | v35) & 1) == 0)
    goto LABEL_3;
  v36 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v37 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v37 != 0x3FFFFFFF) ? (v38 = v37 == -1) : (v38 = 1), v38))
  {
    v39 = 2;
  }
  else if (v37 >> 28)
  {
    v42 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
    v43 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v43 = v36;
    *(_DWORD *)(v43 + 8) = v42;
    v39 = 1;
    v36 = v43;
  }
  else
  {
    v39 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v36 = 0;
  }
  v40 = v36 | v39;
  v13 = (_QWORD *)(v40 & 0xFFFFFFFF8);
  if ((v40 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v18, v19, v20, v21, v22, v23);
  v45[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v29 = *((_QWORD *)this + 3528);
  v30 = *((_QWORD *)this + 3521);
  v46.n128_u64[0] = v28;
  v46.n128_u64[1] = v30;
  v47 = v29;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v45, (uint64_t *)this + 3492, &v47, &v46).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapStorage(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t (*v27)(uint64_t, JSC::VM *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v36, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v36, v3, v4, v5, v6, v7, v8);
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v19 = (v18 >> 50) & 0x3F;
  if ((_DWORD)v19 == 31)
  {
  }
  else
  {
    if ((_DWORD)v19 != 30)
    {
      __break(0xC471u);
      JUMPOUT(0x197D502BCLL);
    }
  }
  v35 = v20;
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFC000000000000) == 0x78000000000000)
    v27 = operationMapStorage;
  else
    v27 = operationSetStorage;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapIteratorNext(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v36, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v36, v3, v4, v5, v6, v7, v8);
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v19 = (v18 >> 50) & 0x3F;
  if ((_DWORD)v19 == 33)
  {
  }
  else
  {
    if ((_DWORD)v19 != 32)
    {
      __break(0xC471u);
      JUMPOUT(0x197D503D0);
    }
  }
  v35 = v20;
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFC000000000000) == 0x80000000000000)
    v27 = operationMapIteratorNext;
  else
    v27 = operationSetIteratorNext;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapIteratorKey(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v36, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v36, v3, v4, v5, v6, v7, v8);
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v19 = (v18 >> 50) & 0x3F;
  if ((_DWORD)v19 == 33)
  {
  }
  else
  {
    if ((_DWORD)v19 != 32)
    {
      __break(0xC471u);
      JUMPOUT(0x197D504E4);
    }
  }
  v35 = v20;
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFC000000000000) == 0x80000000000000)
    v27 = operationMapIteratorKey;
  else
    v27 = operationSetIteratorKey;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapIteratorValue(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v32, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v32, v3, v4, v5, v6, v7, v8);
  if ((v32 & 1) != 0 && (v32 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v32 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileExtractValueFromWeakMapGet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::B3::Value *v2;
  JSC::B3::Value *v3;
  uint64_t v4;
  JSC::B3::Value *v5;

  v3 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v2);
  v4 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
  v5 = (JSC::B3::Value *)JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v3, v4, (uint64_t)v2, 0);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSetAdd(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  uint64_t v39;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v39, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v39, v3, v4, v5, v6, v7, v8);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMapOrSetDelete(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  JSC::B3::Value *v37;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v43, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v43, v3, v4, v5, v6, v7, v8);
  if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v19 = (v18 >> 50) & 0x3F;
  if ((_DWORD)v19 == 31)
  {
  }
  else
  {
    if ((_DWORD)v19 != 30)
    {
      __break(0xC471u);
      JUMPOUT(0x197D50818);
    }
  }
  v42 = v20;
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFC000000000000) == 0x78000000000000)
  {
    v36 = operationMapDelete;
  }
  else
  {
    v36 = operationSetDelete;
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileWeakMapGet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  JSC::B3::BasicBlock *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  int8x8_t v33;
  unint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  int v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  JSC::B3::Value *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::B3::Value *v81;
  uint64_t v82;
  uint64_t v83;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v4 = JSC::FTL::Output::newBlock(v2);
  v5 = JSC::FTL::Output::newBlock(v2);
  v12 = JSC::FTL::Output::newBlock(v2);
  v14 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v3;
  v15 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v16 = (v15 >> 50) & 0x3F;
  v83 = v14;
  if ((_DWORD)v16 == 34)
  {
  }
  else
  {
    if ((_DWORD)v16 != 35)
    {
      __break(0xC471u);
      JUMPOUT(0x197D50B6CLL);
    }
  }
  v25 = v17;
  v34 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  v35 = (v34 >> 50) & 0x3F;
  v82 = v4;
  if ((_DWORD)v35 == 11)
  {
  }
  else if ((_DWORD)v35 == 25)
  {
  }
  else
  {
  }
  v81 = v36;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v2, v25, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6400));
  v38 = (JSC::B3::Value *)JSC::FTL::Output::load32(v2, v25, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6352));
  v39 = JSC::FTL::Output::sub(v2, v38, *((JSC::B3::Value **)this + 3458));
  v40 = JSC::FTL::Output::anchor(v2, v32);
  v42 = v41;
  JSC::FTL::Output::jump(v2, v3, v43, v44, v45, v46, v47, v48);
  *((_QWORD *)this + 3472) = v3;
  *((_QWORD *)this + 3473) = v5;
  v49 = (JSC::B3::Value *)JSC::FTL::Output::phi(v2, 1);
  v50 = v49;
  if (v40 || v42)
  {
    if ((*(_WORD *)(v40 + 12) & 0xFFF) == 0x98)
      v51 = v40;
    else
      v51 = 0;
    *(_QWORD *)(v51 + 40) = v49;
  }
  v52 = JSC::FTL::Output::bitAnd(v2, v39, v49);
  v53 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFC000000000000;
  v54 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v2, (uint64_t)v52, 2);
  if (v53 == 0x88000000000000)
    v55 = 4;
  else
    v55 = 3;
  v56 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, v55);
  v57 = JSC::FTL::Output::shl(v2, v54, v56);
  v58 = (JSC::B3::Value *)JSC::FTL::Output::add(v2, Ptr, v57);
  v59 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v2, v58, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6496));
  v60 = JSC::FTL::Output::equal(v2, v81, v59);
  JSC::FTL::Output::branch(v2, (uint64_t)v60, v12, v5, NAN, NAN, v61, v62, v63, v64);
  *((_QWORD *)this + 3472) = v5;
  *((_QWORD *)this + 3473) = v82;
  v65 = JSC::FTL::Output::isZero64(v2, v59);
  JSC::FTL::Output::branch(v2, (uint64_t)v65, v12, v82, NAN, NAN, v66, v67, v68, v69);
  *((_QWORD *)this + 3472) = v82;
  *((_QWORD *)this + 3473) = v12;
  v70 = (JSC::B3::Value *)JSC::FTL::Output::add(v2, v52, *((JSC::B3::Value **)this + 3458));
  v71 = JSC::FTL::Output::anchor(v2, v70);
  if (v71 || v72)
  {
    if ((*(_WORD *)(v71 + 12) & 0xFFF) == 0x98)
      v79 = v71;
    else
      v79 = 0;
    *(_QWORD *)(v79 + 40) = v50;
  }
  JSC::FTL::Output::jump(v2, v3, v73, v74, v75, v76, v77, v78);
  *((_QWORD *)this + 3472) = v12;
  *((_QWORD *)this + 3473) = v83;
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 24) & 0xFC000000000000) == 0x88000000000000)
    v59 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v2, v58, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6448));
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileWeakSetAdd(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  int8x8_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  JSC::DFG::Node *v59;
  char **v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  char *v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v65 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v66 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v66 != 0x3FFFFFFF) ? (v67 = v66 == -1) : (v67 = 1), v67))
  {
    v68 = 2;
  }
  else if (v66 >> 28)
  {
    v74 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v74 = v65;
    *(_DWORD *)(v74 + 8) = v66;
    v68 = 1;
    v65 = v74;
  }
  else
  {
    v68 = v65;
    v65 = 0;
  }
  v11 = v65 | v68;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v65 | v68) & 1) == 0)
    goto LABEL_3;
  v69 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v70 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v70 != 0x3FFFFFFF) ? (v71 = v70 == -1) : (v71 = 1), v71))
  {
    v72 = 2;
  }
  else if (v70 >> 28)
  {
    v75 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v75 = v69;
    *(_DWORD *)(v75 + 8) = v70;
    v72 = 1;
    v69 = v75;
  }
  else
  {
    v72 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v69 = 0;
  }
  v73 = v69 | v72;
  v13 = (_QWORD *)(v73 & 0xFFFFFFFF8);
  if ((v73 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v25 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  if ((v25 & 0xFC000000000000) == 0x2C000000000000)
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v17, v41, v42, v43, v44, v45, v46);
  v47 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v55 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationWeakSetAdd);
  v56 = *((_QWORD *)this + 3472);
  v57 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v58 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, *((_QWORD *)this + 3471), v55, v47, (uint64_t)v19, (uint64_t)v38, (uint64_t)v40);
  JSC::B3::Procedure::addValueImpl(v57, v58);
  v76 = v58;
  v60 = (char **)(v56 + 8);
  v61 = *(unsigned int *)(v56 + 20);
  if ((_DWORD)v61 == *(_DWORD *)(v56 + 16))
  {
    v64 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)&v76);
    v61 = *(unsigned int *)(v56 + 20);
    *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v61) = *(_QWORD *)v64;
    v62 = v76;
  }
  else
  {
    *(_QWORD *)&(*v60)[8 * v61] = v58;
    v62 = v58;
  }
  *(_DWORD *)(v56 + 20) = v61 + 1;
  *((_QWORD *)v62 + 4) = v56;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileWeakMapSet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  unsigned int v25;
  unint64_t v26;
  JSC::B3::Value *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  JSC::B3::Value *v49;
  JSC::B3::Value *v50;
  uint64_t v51;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v51, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v51, v3, v4, v5, v6, v7, v8);
  if ((v51 & 1) != 0 && (v51 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v51 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
    goto LABEL_15;
  v25 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v25)
  {
    __break(0xC471u);
    JUMPOUT(0x197D50FB8);
  }
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v25);
  v27 = (v26 & 0xFC000000000000) == 0x2C000000000000
  v49 = v27;
  v28 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197D50FC0);
  }
  v36 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 3;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v36)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x197D50FB0);
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsConstructor(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  JSC::DFG::Node *v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  char v54;
  _QWORD *v55;
  unint64_t v56;
  JSC::B3::Value *v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  JSC::B3::Value *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  int8x8_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v114;
  unsigned int v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int *v143;
  uint64_t v144;
  int64x2_t v145;
  _QWORD *v146;
  uint64_t v147;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v114 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v115 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v115 != 0x3FFFFFFF) ? (v116 = v115 == -1) : (v116 = 1), v116))
  {
    v117 = 2;
  }
  else if (v115 >> 28)
  {
    v136 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v136 = v114;
    *(_DWORD *)(v136 + 8) = v115;
    v117 = 1;
    v114 = v136;
  }
  else
  {
    v117 = v114;
    v114 = 0;
  }
  v10 = v114 | v117;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v114 | v117) & 1) == 0)
    goto LABEL_3;
  v127 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v128 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v128 != 0x3FFFFFFF) ? (v129 = v128 == -1) : (v129 = 1), v129))
  {
    v130 = 2;
  }
  else if (v128 >> 28)
  {
    v137 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v137 = v127;
    *(_DWORD *)(v137 + 8) = v128;
    v130 = 1;
    v127 = v137;
  }
  else
  {
    v130 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v127 = 0;
  }
  v131 = v127 | v130;
  v12 = (_QWORD *)(v131 & 0xFFFFFFFF8);
  if ((v131 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v18, v19, v20, v21, v22, v23);
  v24 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v32 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationIsConstructor);
  v33 = *((_QWORD *)this + 3472);
  v34 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v35 = *((_QWORD *)this + 3471);
  v36 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v36 = off_1E357F5F0;
  *(_DWORD *)(v36 + 8) = -1;
  *(_WORD *)(v36 + 12) = 82;
  *(_DWORD *)(v36 + 16) = 1;
  *(_BYTE *)(v36 + 20) = 4;
  *(_QWORD *)(v36 + 24) = v35;
  *(_QWORD *)(v36 + 32) = 0;
  v37 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v36);
  v37[2] = v32;
  *v37 = v37 + 2;
  v37[3] = v24;
  v37[4] = v17;
  v37[1] = 0x300000003;
  *(_QWORD *)v36 = &unk_1E357CF78;
  *(_OWORD *)(v36 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v36 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v36 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x197D51490);
  }
  JSC::B3::Procedure::addValueImpl(v34, (JSC::B3::Value *)v36);
  v145.i64[0] = v36;
  v39 = (char **)(v33 + 8);
  v40 = *(unsigned int *)(v33 + 20);
  if ((_DWORD)v40 == *(_DWORD *)(v33 + 16))
  {
    v104 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v39, v40 + 1, (unint64_t)&v145);
    v40 = *(unsigned int *)(v33 + 20);
    *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v40) = *(_QWORD *)v104;
    v41 = v145.i64[0];
  }
  else
  {
    *(_QWORD *)&(*v39)[8 * v40] = v36;
    v41 = v36;
  }
  *(_DWORD *)(v33 + 20) = v40 + 1;
  *(_QWORD *)(v41 + 32) = v33;
  if (JSC::DFG::mayExit(*(JSC::DFG **)this, *((JSC::DFG::Graph **)this + 3528), v38))
  {
    v49 = *(_QWORD *)this;
    v50 = *((_QWORD *)this + 3524);
    if ((v50 & 1) != 0)
    {
      v118 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
      if ((v50 & 2) != 0 || (v119 = *(_DWORD *)((v50 & 0xFFFFFFFF8) + 8), v119 == 0x3FFFFFFF) || v119 == -1)
      {
        v120 = 2;
      }
      else if (v119 >> 28)
      {
        v138 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v138 = v118;
        *(_DWORD *)(v138 + 8) = v119;
        v120 = 1;
        v118 = v138;
      }
      else
      {
        v120 = v118;
        v118 = 0;
      }
      v50 = v118 | v120;
      v51 = *(_QWORD *)(v49 + 32);
      if (((v118 | v120) & 1) != 0)
      {
        v132 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
        if ((v50 & 2) != 0 || (v133 = *(_DWORD *)((v50 & 0xFFFFFFFF8) + 8), v133 == 0x3FFFFFFF) || v133 == -1)
        {
          v134 = 2;
        }
        else if (v133 >> 28)
        {
          v140 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v140 = v132;
          *(_DWORD *)(v140 + 8) = v133;
          v134 = 1;
          v132 = v140;
        }
        else
        {
          v134 = *(_QWORD *)(v50 & 0xFFFFFFFF8);
          v132 = 0;
        }
        v135 = v132 | v134;
        v52 = (_QWORD *)(v135 & 0xFFFFFFFF8);
        if ((v135 & 1) != 0)
        {
          v53 = 0;
          v54 = 0;
          v55 = (_QWORD *)*v52;
          if (!*v52)
          {
LABEL_17:
            v56 = *(_QWORD *)(v51 + 8);
            if ((v53 & 1) == 0 && v52)
              WTF::fastFree((unint64_t)v52, v42, v43, v44, v45, v46, v47, v48);
            if ((v54 & 1) == 0 && (v50 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v50 & 0xFFFFFFFF8, v42, v43, v44, v45, v46, v47, v48);
            v57 = (JSC::B3::Value *)*((_QWORD *)this + 3485);
            v58 = *((_QWORD *)this + 791);
            if (v58)
            {
              v59 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v58);
              v57 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57, v59);
            }
            v60 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6304), (uint64_t)v57, 2);
            if (HIBYTE(word_1ECF4C620))
            {
              v61 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationExceptionFuzz);
              JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v56, v62, v63, v64, v65, v66, v67);
              v68 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v56);
              JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), 0, *((_QWORD *)this + 3471), v61, v68);
              v69 = (JSC::B3::Value *)*((_QWORD *)this + 3485);
              v70 = *((_QWORD *)this + 791);
              if (v70)
              {
                v71 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v70);
                v69 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v69, v71);
              }
              v60 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 6304), (uint64_t)v69, 2);
            }
            v76 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v60);
            v143 = 0;
            v144 = 2;
            v77 = *(_QWORD *)this;
            v78 = *((_QWORD *)this + 3525);
            if ((v78 & 1) != 0)
            {
              v121 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
              if ((v78 & 2) != 0
                || (v122 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v122 == 0x3FFFFFFF)
                || (_DWORD)v122 == -1)
              {
                v123 = 2;
              }
              else if (v122 >> 28)
              {
                v139 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v139 = v121;
                *(_DWORD *)(v139 + 8) = v122;
                v123 = 1;
                v121 = v139;
              }
              else
              {
                v123 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
                v121 = v122 << 36;
              }
              v78 = v121 | v123;
            }
            v142 = v78;
            v86 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v142, &v144, &v143, v72, v73, v74, v75);
            v87 = (uint64_t *)v142;
            if ((v142 & 1) != 0 && (v142 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v142 & 0xFFFFFFFF8, v79, v80, v81, v82, v83, v84, v85);
            if (v86)
            {
              v88 = v144;
              if ((v144 & 1) != 0)
              {
                v124 = *(_QWORD *)(v144 & 0xFFFFFFFF8);
                if ((v144 & 2) != 0
                  || (v125 = *(unsigned int *)((v144 & 0xFFFFFFFF8) + 8), (_DWORD)v125 == 0x3FFFFFFF)
                  || (_DWORD)v125 == -1)
                {
                  v126 = 2;
                }
                else if (v125 >> 28)
                {
                  v141 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v141 = v124;
                  *(_DWORD *)(v141 + 8) = v125;
                  v126 = 1;
                  v124 = v141;
                }
                else
                {
                  v126 = *(_QWORD *)(v144 & 0xFFFFFFFF8);
                  v124 = v125 << 36;
                }
                v88 = v124 | v126;
              }
              v147 = v88;
              v89 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v145, (uint64_t *)this + 3524, (unint64_t *)&v147, v81, v82, v83, v84, v85).u64[0];
              if ((v145.i8[8] & 1) != 0 && (v145.i64[1] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v145.i64[1] & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
              if ((v145.i8[0] & 1) != 0 && (v145.i64[0] & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v145.i64[0] & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
              if ((v147 & 1) != 0 && (v147 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v147 & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
            }
            else
            {
              v97 = JSC::B3::Procedure::addBlock(v87, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
              v98 = (uint64_t)v97;
              v99 = *((_QWORD *)this + 3473);
              if (v99)
              {
                WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v99, (uint64_t)v97);
              }
              else
              {
                v147 = (uint64_t)v97;
                v105 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *(_OWORD *)v105 = 0u;
                *((_OWORD *)v105 + 1) = 0u;
                v105[3] = *((_QWORD *)this + 3477);
                *((_QWORD *)this + 3477) = v105;
                v146 = v105;
                v105[2] = v98;
                WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v147, (uint64_t *)&v146, v106, v107, v108, v109, v110, (uint64_t)&v145);
                v111 = v146;
                v112 = (_QWORD *)*((_QWORD *)this + 3479);
                *v146 = (char *)this + 27824;
                v111[1] = v112;
                *v112 = v111;
                *((_QWORD *)this + 3479) = v111;
              }
              JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v76, *((_QWORD *)this + 3482), v98, 0.0, 1.0, v100, v101, v102, v103);
              *((_QWORD *)this + 3472) = v98;
            }
            if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v144 & 0xFFFFFFFF8, v90, v91, v92, v93, v94, v95, v96);
          }
LABEL_16:
          v51 = v55[1];
          goto LABEL_17;
        }
        v54 = 0;
        v53 = 1;
LABEL_15:
        v55 = v52;
        if (!v52)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    else
    {
      v51 = *(_QWORD *)(v49 + 32);
    }
    v52 = (_QWORD *)(v50 & 0xFFFFFFFF8);
    v53 = 1;
    v54 = 1;
    goto LABEL_15;
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileIsTypedArrayView(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::B3::Value *v2;
  uint64_t v3;
  JSC::B3::BasicBlock *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;

  v3 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v5 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3456));
  v7 = v6;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v15, v3, (uint64_t)v4, NAN, NAN, v16, v17, v18, v19);
  *((_QWORD *)this + 3472) = v3;
  v20 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v4;
  v29 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v28);
  v31 = v30;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v4, v32, v33, v34, v35, v36, v37);
  *((_QWORD *)this + 3472) = v4;
  *((_QWORD *)this + 3473) = v20;
  v38 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 1, v5, v7, v29, v31);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileParseInt(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  int8x8_t v17;
  JSC::DFG::Node *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::DFG::Node *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v86, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v86, v3, v4, v5, v6, v7, v8);
  if ((v86 & 1) != 0 && (v86 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v86 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  if ((*((_QWORD *)v18 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v39 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
    v40 = (*((_QWORD *)v39 + 3) >> 50) & 0x3FLL;
    switch((_DWORD)v40)
    {
      case 0x15:
        break;
      case 0x31:
        break;
      case 1:
        break;
      default:
        if ((_DWORD)v40)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v39, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x39E6, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileParseInt()", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x197D51B78);
        }
        break;
    }
  }
  else
  {
    v19 = (*((_QWORD *)v18 + 3) >> 50) & 0x3FLL;
    if ((_DWORD)v19 == 21)
    {
    }
    else if ((_DWORD)v19 == 49)
    {
    }
    else
    {
      if ((_DWORD)v19)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x39F6, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileParseInt()", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197D51ABCLL);
      }
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToIntegerOrInfinity(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::DFG::Node *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::B3::Value *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  JSC::B3::Value *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char **v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  JSC::B3::Value *v126;
  uint64_t v127;
  uint64_t v128;
  char **v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  unsigned int v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double result;
  uint64_t v147;
  unsigned int v148;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  __int128 v164;
  uint64_t v165;
  JSC::B3::Value *v166;
  __n128 v167;
  uint64_t *v168;

  v10 = (unint64_t *)*((_QWORD *)this + 3528);
  v11 = (v10[3] >> 50) & 0x3F;
  if (!(_DWORD)v11)
  {
    v26 = *(_QWORD *)this;
    v27 = *((_QWORD *)this + 3524);
    if ((v27 & 1) != 0)
    {
      v147 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      if ((v27 & 2) != 0
        || ((v148 = *(_DWORD *)((v27 & 0xFFFFFFFF8) + 8), v148 != 0x3FFFFFFF) ? (v149 = v148 == -1) : (v149 = 1), v149))
      {
        v150 = 2;
      }
      else if (v148 >> 28)
      {
        v160 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v160 = v147;
        *(_DWORD *)(v160 + 8) = v148;
        v150 = 1;
        v147 = v160;
      }
      else
      {
        v150 = v147;
        v147 = 0;
      }
      v27 = v147 | v150;
      v28 = *(_QWORD *)(v26 + 32);
      if (((v147 | v150) & 1) != 0)
      {
        v155 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
        if ((v27 & 2) != 0
          || ((v156 = *(_DWORD *)((v27 & 0xFFFFFFFF8) + 8), v156 != 0x3FFFFFFF) ? (v157 = v156 == -1) : (v157 = 1),
              v157))
        {
          v158 = 2;
        }
        else if (v156 >> 28)
        {
          v161 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v161 = v155;
          *(_DWORD *)(v161 + 8) = v156;
          v158 = 1;
          v155 = v161;
        }
        else
        {
          v158 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
          v155 = 0;
        }
        v159 = v155 | v158;
        v29 = (_QWORD *)(v159 & 0xFFFFFFFF8);
        if ((v159 & 1) != 0)
        {
          v30 = 0;
          v31 = 0;
          v32 = (_QWORD *)*v29;
          if (!*v29)
            goto LABEL_9;
          goto LABEL_8;
        }
        v31 = 0;
        v30 = 1;
LABEL_7:
        v32 = v29;
        if (!v29)
        {
LABEL_9:
          v33 = *(_QWORD *)(v28 + 8);
          if ((v30 & 1) == 0 && v29)
            WTF::fastFree((unint64_t)v29, v10, a4, a5, a6, a7, a8, a9);
          if ((v31 & 1) == 0 && (v27 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v27 & 0xFFFFFFFF8, v10, a4, a5, a6, a7, a8, a9);
          v166 = v41;
          v42 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
          v43 = *((_QWORD *)this + 3505);
          v44 = *(unsigned int *)((v42 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v45 = (uint64_t *)(v43 + 24);
          v46 = (uint64_t *)(v43 + 8);
          if ((v42 & 1) != 0)
            v47 = v45;
          else
            v47 = v46;
          v48 = *v47;
          v49 = *v47 + 32 * v44;
          v50 = *((_DWORD *)this + 7030);
          v51 = *(_DWORD *)(v49 + 20);
          if (v50 != v51)
          {
            if ((*(_QWORD *)(v49 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v51 ^ v50) >= 2)
              {
                v134 = *(_QWORD *)v49;
                if (*(_QWORD *)v49 != 4)
                {
                  *(_QWORD *)v49 = v134 | 2;
                  v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v134 & 1) != 0)
                  {
                    v151 = 2 * *v135;
                    while (v151 * 4)
                    {
                      v152 = *(_QWORD *)&v135[v151];
                      if ((*(_BYTE *)(v152 + 19) & 0xC) == 0)
                      {
                        v153 = *(_QWORD *)(v152 + 96);
                        v154 = (v153 & 1) != 0 ? (v153 >> 1) & 3 : *(unsigned __int8 *)(v153 + 4);
                        v151 -= 2;
                        if (v154 != 2)
                          continue;
                      }
                      WTF::fastFree((unint64_t)v135, v34, v35, v36, v37, v38, v39, v40);
                      goto LABEL_83;
                    }
                  }
                  else if (v135)
                  {
                    if ((*((_BYTE *)v135 + 19) & 0xC) != 0
                      || ((v136 = *((_QWORD *)v135 + 12), (v136 & 1) != 0)
                        ? (v137 = (v136 >> 1) & 3)
                        : (v137 = *(unsigned __int8 *)(v136 + 4)),
                          v137 == 2))
                    {
LABEL_83:
                      *(_QWORD *)v49 = 4;
                    }
                  }
                }
                *(_DWORD *)(v48 + 32 * v44 + 16) = -21020677;
              }
              if ((v50 & 1) != 0)
                *(_QWORD *)v49 &= ~2uLL;
            }
            *(_DWORD *)(v49 + 20) = v50;
          }
          v163 = 0;
          v52 = *(_QWORD *)v49;
          if ((*(_QWORD *)v49 & 1) == 0 || v52 == 4)
          {
            v53 = v52 & 0xFFFFFFFFFFFFFFFDLL;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v163, (_QWORD *)v49);
            v53 = (unint64_t)v163;
            v52 = *(_QWORD *)v49;
          }
          v54 = v53 & 0xFFFFFFFFFFFFFFFDLL;
          v55 = v53 | 2;
          if ((v52 & 2) != 0)
            v56 = v55;
          else
            v56 = v54;
          v163 = (uint64_t *)v56;
          v57 = v48 + 32 * v44;
          v58 = *(_QWORD *)(v57 + 24);
          v164 = *(_OWORD *)(v57 + 8);
          v165 = v58;
          v59 = v164 & 0x300000000;
          if ((v56 & 1) != 0)
          {
            WTF::fastFree(v56 & 0xFFFFFFFFFFFFFFFCLL, v34, v35, v36, v37, v38, v39, v40);
            if (v59)
              goto LABEL_22;
          }
          else if (v59)
          {
LABEL_22:
            v60 = JSC::B3::Procedure::addBlock((uint64_t *)v56, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v61 = (uint64_t)v60;
            v62 = *((_QWORD *)this + 3473);
            if (v62)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v62, (uint64_t)v60);
            }
            else
            {
              v167.n128_u64[0] = (unint64_t)v60;
              v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v64 = 0u;
              *((_OWORD *)v64 + 1) = 0u;
              v64[3] = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v64;
              v168 = v64;
              v64[2] = v61;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v167, (uint64_t *)&v168, v65, v66, v67, v68, v69, (uint64_t)&v163);
              v63 = v168;
              v70 = (uint64_t **)*((_QWORD *)this + 3479);
              *v168 = (uint64_t)this + 27824;
              v63[1] = (uint64_t)v70;
              *v70 = v63;
              *((_QWORD *)this + 3479) = v63;
            }
            v71 = JSC::B3::Procedure::addBlock(v63, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
            v72 = (uint64_t)v71;
            v73 = *((_QWORD *)this + 3473);
            if (v73)
            {
              WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v73, (uint64_t)v71);
            }
            else
            {
              v167.n128_u64[0] = (unint64_t)v71;
              v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *(_OWORD *)v74 = 0u;
              *((_OWORD *)v74 + 1) = 0u;
              v74[3] = *((_QWORD *)this + 3477);
              *((_QWORD *)this + 3477) = v74;
              v168 = v74;
              v74[2] = v72;
              WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v167, (uint64_t *)&v168, v75, v76, v77, v78, v79, (uint64_t)&v163);
              v80 = v168;
              v81 = (uint64_t **)*((_QWORD *)this + 3479);
              *v168 = (uint64_t)this + 27824;
              v80[1] = (uint64_t)v81;
              *v81 = v80;
              *((_QWORD *)this + 3479) = v80;
            }
            v82 = *((_QWORD *)this + 3472);
            v83 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v84 = *((_QWORD *)this + 3471);
            v85 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v85 + 8) = -1;
            *(_WORD *)(v85 + 12) = 152;
            *(_BYTE *)(v85 + 20) = 1;
            *(_QWORD *)v85 = &unk_1E357EDA0;
            *(_DWORD *)(v85 + 16) = 0;
            *(_QWORD *)(v85 + 40) = 0;
            *(_QWORD *)(v85 + 48) = v41;
            *(_QWORD *)(v85 + 24) = v84;
            *(_QWORD *)(v85 + 32) = 0;
            JSC::B3::Procedure::addValueImpl(v83, (JSC::B3::Value *)v85);
            v163 = (uint64_t *)v85;
            v92 = (char **)(v82 + 8);
            v93 = *(unsigned int *)(v82 + 20);
            if ((_DWORD)v93 == *(_DWORD *)(v82 + 16))
            {
              v138 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92, v93 + 1, (unint64_t)&v163);
              v93 = *(unsigned int *)(v82 + 20);
              *(_QWORD *)(*(_QWORD *)(v82 + 8) + 8 * v93) = *(_QWORD *)v138;
              v94 = (uint64_t)v163;
            }
            else
            {
              *(_QWORD *)&(*v92)[8 * v93] = v85;
              v94 = v85;
            }
            *(_DWORD *)(v82 + 20) = v93 + 1;
            *(_QWORD *)(v94 + 32) = v82;
            JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v96, v72, v61, NAN, NAN, v97, v98, v99, v100);
            *((_QWORD *)this + 3472) = v61;
            v101 = *((_QWORD *)this + 3473);
            *((_QWORD *)this + 3473) = v72;
            JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v33, v102, v103, v104, v105, v106, v107);
            v167.n128_u64[0] = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v33);
            v113 = *((_QWORD *)this + 3472);
            v114 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v115 = *((_QWORD *)this + 3471);
            v116 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v116 + 8) = -1;
            *(_WORD *)(v116 + 12) = 152;
            *(_DWORD *)(v116 + 16) = 0;
            *(_BYTE *)(v116 + 20) = 1;
            *(_QWORD *)v116 = &unk_1E357EDA0;
            *(_QWORD *)(v116 + 40) = 0;
            *(_QWORD *)(v116 + 48) = v112;
            *(_QWORD *)(v116 + 24) = v115;
            *(_QWORD *)(v116 + 32) = 0;
            JSC::B3::Procedure::addValueImpl(v114, (JSC::B3::Value *)v116);
            v163 = (uint64_t *)v116;
            v120 = (char **)(v113 + 8);
            v121 = *(unsigned int *)(v113 + 20);
            if ((_DWORD)v121 == *(_DWORD *)(v113 + 16))
            {
              v139 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v120, v121 + 1, (unint64_t)&v163);
              v121 = *(unsigned int *)(v113 + 20);
              *(_QWORD *)(*(_QWORD *)(v113 + 8) + 8 * v121) = *(_QWORD *)v139;
              v122 = (uint64_t)v163;
            }
            else
            {
              *(_QWORD *)&(*v120)[8 * v121] = v116;
              v122 = v116;
            }
            *(_DWORD *)(v113 + 20) = v121 + 1;
            *(_QWORD *)(v122 + 32) = v113;
            v123 = *((_QWORD *)this + 3472);
            v124 = *((_QWORD *)this + 3470);
            v125 = *((_QWORD *)this + 3471);
            v163 = (uint64_t *)v72;
            LOBYTE(v164) = 0;
            JSC::B3::BasicBlock::appendNewControlValue(v123, v124, 154, v125, (uint64_t *)&v163, v117, v118, v119);
            *((_QWORD *)this + 3472) = v72;
            *((_QWORD *)this + 3473) = v101;
            v126 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v127 = *((_QWORD *)this + 3471);
            v128 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v128 = off_1E357F5F0;
            *(_DWORD *)(v128 + 8) = -1;
            *(_WORD *)(v128 + 12) = 153;
            *(_DWORD *)(v128 + 16) = 2;
            *(_BYTE *)(v128 + 20) = 0;
            *(_QWORD *)(v128 + 24) = v127;
            *(_QWORD *)(v128 + 32) = 0;
            JSC::B3::Procedure::addValueImpl(v126, (JSC::B3::Value *)v128);
            v163 = (uint64_t *)v128;
            v129 = (char **)(v72 + 8);
            v130 = *(unsigned int *)(v72 + 20);
            if ((_DWORD)v130 == *(_DWORD *)(v72 + 16))
            {
              v140 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v130 + 1, (unint64_t)&v163);
              v130 = *(unsigned int *)(v72 + 20);
              *(_QWORD *)(*(_QWORD *)(v72 + 8) + 8 * v130) = *(_QWORD *)v140;
              v131 = (uint64_t)v163;
            }
            else
            {
              *(_QWORD *)&(*v129)[8 * v130] = v128;
              v131 = v128;
            }
            *(_DWORD *)(v72 + 20) = v130 + 1;
            *(_QWORD *)(v131 + 32) = v72;
            if ((*(_WORD *)(v85 + 12) & 0xFFF) == 0x98)
              v132 = v85;
            else
              v132 = 0;
            *(_QWORD *)(v132 + 40) = v128;
            if ((*(_WORD *)(v116 + 12) & 0xFFF) == 0x98)
              v133 = v116;
            else
              v133 = 0;
            *(_QWORD *)(v133 + 40) = v128;
            v168 = (uint64_t *)*((_QWORD *)this + 3528);
            v24 = (uint64_t *)((char *)this + 27936);
            v25 = *((_QWORD *)this + 3521);
            v167.n128_u64[0] = v128;
            goto LABEL_61;
          }
          JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v33, v35, v36, v37, v38, v39, v40);
          v162 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v33);
          v168 = (uint64_t *)*((_QWORD *)this + 3528);
          v24 = (uint64_t *)((char *)this + 27936);
          v25 = *((_QWORD *)this + 3521);
          v167.n128_u64[0] = v145;
          goto LABEL_61;
        }
LABEL_8:
        v28 = v32[1];
        goto LABEL_9;
      }
    }
    else
    {
      v28 = *(_QWORD *)(v26 + 32);
    }
    v29 = (_QWORD *)(v27 & 0xFFFFFFFF8);
    v30 = 1;
    v31 = 1;
    goto LABEL_7;
  }
  if ((_DWORD)v11 != 49)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v10, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x3A1B, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileToIntegerOrInfinity()", "Bad use kind");
    __break(0xC471u);
    JUMPOUT(0x197D523A4);
  }
  v20 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationToIntegerOrInfinityDouble);
  v21 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::BasicBlock **)this + 3472), *((JSC::B3::Value **)this + 3470), 2, *((_QWORD *)this + 3471), v20, v12);
  v168 = (uint64_t *)*((_QWORD *)this + 3528);
  v24 = (uint64_t *)((char *)this + 27936);
  v25 = *((_QWORD *)this + 3521);
  v167.n128_u64[0] = (unint64_t)v21;
LABEL_61:
  v167.n128_u64[1] = v25;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v163, v24, (uint64_t *)&v168, &v167).n128_u64[0];
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileTypeOf(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  unint64_t v2;
  JSC::B3::Value *v3;
  uint64_t v4;
  JSC::B3::Value *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  _QWORD v14[3];
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v16 = 0;
  v17 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v4 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v17;
  v14[0] = &v15;
  v14[1] = this;
  v14[2] = &v17;
  v15 = 0;
  *((_QWORD *)this + 3472) = v17;
  *((_QWORD *)this + 3473) = v4;
  v5 = (JSC::B3::Value *)JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)this + 3455, 2, (unsigned int *)&v15);
  v13 = v15;
  if (v15)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTypeInfoFlags(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  int8x8_t v20;
  char **v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  char *v24;
  JSC::B3::Value *v25;

  v10 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v12 = *((_QWORD *)this + 389);
  if (v12)
  {
    v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, v12);
    v11 = (JSC::B3::Value *)JSC::FTL::Output::add(v10, v11, v13);
  }
  v14 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v10, (uint64_t)this + 3088, (uint64_t)v11);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v10, *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  v16 = JSC::FTL::Output::bitAnd(v10, v14, v15);
  v17 = *((_QWORD *)this + 3472);
  v18 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v19 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v16, *((_QWORD *)this + 3457));
  JSC::B3::Procedure::addValueImpl(v18, v19);
  v25 = v19;
  v21 = (char **)(v17 + 8);
  v22 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v17 + 16))
  {
    v24 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v25);
    v22 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v22) = *(_QWORD *)v24;
    v23 = v25;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v17 + 20) = v22 + 1;
  *((_QWORD *)v23 + 4) = v17;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileHasStructureWithFlags(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  JSC::B3::Value *Structure;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;

  v12 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Structure, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5296));
  v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  v14 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, v13);
  v15 = JSC::FTL::Output::notZero32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileOverridesHasInstance(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  JSC::B3::Value *v66;
  char **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::B3::Value *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  JSC::B3::Value *v83;
  uint64_t v84;
  uint64_t v85;
  char **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  JSC::B3::Value *v97;
  uint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t *v101;

  v10 = *((_QWORD *)this + 3528);
  v11 = *(uint64_t **)(v10 + 72);
  v15 = JSC::B3::Procedure::addBlock(v14, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v16 = (uint64_t)v15;
  v17 = *((_QWORD *)this + 3473);
  if (v17)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v17, (uint64_t)v15);
  }
  else
  {
    v101 = v15;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    v19[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v19;
    v100 = v19;
    v19[2] = v16;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v101, (uint64_t *)&v100, v20, v21, v22, v23, v24, (uint64_t)&v98);
    v18 = v100;
    v25 = (uint64_t **)*((_QWORD *)this + 3479);
    *v100 = (uint64_t)this + 27824;
    v18[1] = (uint64_t)v25;
    *v25 = v18;
    *((_QWORD *)this + 3479) = v18;
  }
  v26 = JSC::B3::Procedure::addBlock(v18, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v27 = (uint64_t)v26;
  v28 = *((_QWORD *)this + 3473);
  v97 = v12;
  if (v28)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v28, (uint64_t)v26);
  }
  else
  {
    v101 = v26;
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v29 = 0u;
    *((_OWORD *)v29 + 1) = 0u;
    v29[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v29;
    v100 = v29;
    v29[2] = v27;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v101, (uint64_t *)&v100, v30, v31, v32, v33, v34, (uint64_t)&v98);
    v35 = v100;
    v36 = (uint64_t **)*((_QWORD *)this + 3479);
    *v100 = (uint64_t)this + 27824;
    v35[1] = (uint64_t)v36;
    *v36 = v35;
    *((_QWORD *)this + 3479) = v35;
  }
  v37 = *((_QWORD *)this + 3455);
  v38 = *((_QWORD *)this + 3472);
  v39 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v40 = *((_QWORD *)this + 3471);
  v41 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v41 + 8) = -1;
  *(_WORD *)(v41 + 12) = 152;
  *(_BYTE *)(v41 + 20) = 1;
  *(_QWORD *)v41 = &unk_1E357EDA0;
  *(_DWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 40) = 0;
  *(_QWORD *)(v41 + 48) = v37;
  *(_QWORD *)(v41 + 24) = v40;
  *(_QWORD *)(v41 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v39, (JSC::B3::Value *)v41);
  v98 = v41;
  v42 = (char **)(v38 + 8);
  v43 = *(unsigned int *)(v38 + 20);
  if ((_DWORD)v43 == *(_DWORD *)(v38 + 16))
  {
    v91 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42, v43 + 1, (unint64_t)&v98);
    v43 = *(unsigned int *)(v38 + 20);
    *(_QWORD *)(*(_QWORD *)(v38 + 8) + 8 * v43) = *(_QWORD *)v91;
    v44 = v98;
  }
  else
  {
    *(_QWORD *)&(*v42)[8 * v43] = v41;
    v44 = v41;
  }
  *(_DWORD *)(v38 + 20) = v43 + 1;
  *(_QWORD *)(v44 + 32) = v38;
  if ((*v11 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
  }
  else
  {
    v45 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *v11);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 312))(v13, v45);
    if (v46 == 2)
    {
      v51 = *((_QWORD *)this + 3472);
      v52 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v53 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 3471), v13, v45);
      JSC::B3::Procedure::addValueImpl(v52, v53);
      v98 = (uint64_t)v53;
      v54 = (char **)(v51 + 8);
      v55 = *(unsigned int *)(v51 + 20);
      if ((_DWORD)v55 == *(_DWORD *)(v51 + 16))
      {
        v95 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54, v55 + 1, (unint64_t)&v98);
        v55 = *(unsigned int *)(v51 + 20);
        *(_QWORD *)(*(_QWORD *)(v51 + 8) + 8 * v55) = *(_QWORD *)v95;
        v56 = v98;
      }
      else
      {
        *(_QWORD *)&(*v54)[8 * v55] = v53;
        v56 = (uint64_t)v53;
      }
      v57 = v97;
      *(_DWORD *)(v51 + 20) = v55 + 1;
      *(_QWORD *)(v56 + 32) = v51;
    }
    else
    {
      v96 = 27648;
      if (v46 == 1)
        v96 = 27640;
      v53 = *(JSC::B3::Value **)((char *)this + v96);
      v57 = v97;
    }
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v53, v27, v16, NAN, NAN, v47, v48, v49, v50);
    *((_QWORD *)this + 3472) = v16;
    v58 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v27;
    v59 = *((_QWORD *)this + 389);
    if (v59)
    {
      v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v59);
      v57 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57, v60);
    }
    v61 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 3088, (uint64_t)v57);
    v62 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 2);
    v63 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v61, v62);
    v64 = *((_QWORD *)this + 3472);
    v65 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v66 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v63, *((_QWORD *)this + 3457));
    JSC::B3::Procedure::addValueImpl(v65, v66);
    v98 = (uint64_t)v66;
    v67 = (char **)(v64 + 8);
    v68 = *(unsigned int *)(v64 + 20);
    if ((_DWORD)v68 == *(_DWORD *)(v64 + 16))
    {
      v92 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67, v68 + 1, (unint64_t)&v98);
      v68 = *(unsigned int *)(v64 + 20);
      *(_QWORD *)(*(_QWORD *)(v64 + 8) + 8 * v68) = *(_QWORD *)v92;
      v69 = v98;
    }
    else
    {
      *(_QWORD *)&(*v67)[8 * v68] = v66;
      v69 = (uint64_t)v66;
    }
    *(_DWORD *)(v64 + 20) = v68 + 1;
    *(_QWORD *)(v69 + 32) = v64;
    v70 = *((_QWORD *)this + 3472);
    v71 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v72 = *((_QWORD *)this + 3471);
    v73 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v73 + 8) = -1;
    *(_WORD *)(v73 + 12) = 152;
    *(_DWORD *)(v73 + 16) = 0;
    *(_BYTE *)(v73 + 20) = 1;
    *(_QWORD *)v73 = &unk_1E357EDA0;
    *(_QWORD *)(v73 + 40) = 0;
    *(_QWORD *)(v73 + 48) = v66;
    *(_QWORD *)(v73 + 24) = v72;
    *(_QWORD *)(v73 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v71, (JSC::B3::Value *)v73);
    v98 = v73;
    v77 = (char **)(v70 + 8);
    v78 = *(unsigned int *)(v70 + 20);
    if ((_DWORD)v78 == *(_DWORD *)(v70 + 16))
    {
      v93 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v77, v78 + 1, (unint64_t)&v98);
      v78 = *(unsigned int *)(v70 + 20);
      *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8 * v78) = *(_QWORD *)v93;
      v79 = v98;
    }
    else
    {
      *(_QWORD *)&(*v77)[8 * v78] = v73;
      v79 = v73;
    }
    *(_DWORD *)(v70 + 20) = v78 + 1;
    *(_QWORD *)(v79 + 32) = v70;
    v80 = *((_QWORD *)this + 3472);
    v81 = *((_QWORD *)this + 3470);
    v82 = *((_QWORD *)this + 3471);
    v98 = v27;
    v99 = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v80, v81, 154, v82, &v98, v74, v75, v76);
    *((_QWORD *)this + 3472) = v27;
    *((_QWORD *)this + 3473) = v58;
    v83 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v84 = *((_QWORD *)this + 3471);
    v85 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v85 = off_1E357F5F0;
    *(_DWORD *)(v85 + 8) = -1;
    *(_WORD *)(v85 + 12) = 153;
    *(_DWORD *)(v85 + 16) = 1;
    *(_BYTE *)(v85 + 20) = 0;
    *(_QWORD *)(v85 + 24) = v84;
    *(_QWORD *)(v85 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v83, (JSC::B3::Value *)v85);
    v98 = v85;
    v86 = (char **)(v27 + 8);
    v87 = *(unsigned int *)(v27 + 20);
    if ((_DWORD)v87 == *(_DWORD *)(v27 + 16))
    {
      v94 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v86, v87 + 1, (unint64_t)&v98);
      v87 = *(unsigned int *)(v27 + 20);
      *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v87) = *(_QWORD *)v94;
      v88 = v98;
    }
    else
    {
      *(_QWORD *)&(*v86)[8 * v87] = v85;
      v88 = v85;
    }
    *(_DWORD *)(v27 + 20) = v87 + 1;
    *(_QWORD *)(v88 + 32) = v27;
    if ((*(_WORD *)(v73 + 12) & 0xFFF) == 0x98)
      v89 = v73;
    else
      v89 = 0;
    *(_QWORD *)(v89 + 40) = v85;
    if ((*(_WORD *)(v41 + 12) & 0xFFF) == 0x98)
      v90 = v41;
    else
      v90 = 0;
    *(_QWORD *)(v90 + 40) = v85;
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInstanceOfCustom(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  JSC::DFG::Node *v61;
  char **v62;
  uint64_t v63;
  WTF *v64;
  JSC::B3::Value *v65;
  JSC::B3::Value *v66;
  char *v68;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v69 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v70 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v70 != 0x3FFFFFFF) ? (v71 = v70 == -1) : (v71 = 1), v71))
  {
    v72 = 2;
  }
  else if (v70 >> 28)
  {
    v78 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v78 = v69;
    *(_DWORD *)(v78 + 8) = v70;
    v72 = 1;
    v69 = v78;
  }
  else
  {
    v72 = v69;
    v69 = 0;
  }
  v10 = v69 | v72;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v69 | v72) & 1) == 0)
    goto LABEL_3;
  v73 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v74 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v74 != 0x3FFFFFFF) ? (v75 = v74 == -1) : (v75 = 1), v75))
  {
    v76 = 2;
  }
  else if (v74 >> 28)
  {
    v79 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v79 = v73;
    *(_DWORD *)(v79 + 8) = v74;
    v76 = 1;
    v73 = v79;
  }
  else
  {
    v76 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v73 = 0;
  }
  v77 = v73 | v76;
  v12 = (_QWORD *)(v77 & 0xFFFFFFFF8);
  if ((v77 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v26, v27, v28, v29, v30, v31);
  v32 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v40 = (int *)((char *)this + 28264);
  v41 = *((_DWORD *)this + 7066);
  if ((v41 & 0x80000000) == 0)
  {
    v42 = *((_QWORD *)this + 3481);
    v80 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v80 = 0x200000002;
    v81 = 0x200000002;
    v50 = (_QWORD *)(v42 + 32);
    v51 = *(unsigned int *)(v42 + 44);
    if ((_DWORD)v51 == *(_DWORD *)(v42 + 40))
    {
      v52 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v80);
      v53 = *(_QWORD *)(v42 + 32) + 16 * *(unsigned int *)(v42 + 44);
    }
    else
    {
      v53 = *v50 + 16 * v51;
      v52 = (unint64_t)&v80;
    }
    *(_QWORD *)v53 = 0;
    *(_QWORD *)(v53 + 8) = 0;
    v54 = *(_QWORD *)v52;
    *(_QWORD *)v52 = 0;
    *(_QWORD *)v53 = v54;
    LODWORD(v54) = *(_DWORD *)(v52 + 8);
    *(_DWORD *)(v52 + 8) = 0;
    *(_DWORD *)(v53 + 8) = v54;
    LODWORD(v54) = *(_DWORD *)(v52 + 12);
    *(_DWORD *)(v52 + 12) = 0;
    *(_DWORD *)(v53 + 12) = v54;
    ++*(_DWORD *)(v42 + 44);
    v41 = v51 | 0x80000000;
    *v40 = v51 | 0x80000000;
    v55 = v80;
    if (v80)
    {
      v80 = 0;
      LODWORD(v81) = 0;
      WTF::fastFree((unint64_t)v55, v43, v44, v45, v46, v47, v48, v49);
      v41 = *v40;
    }
  }
  v56 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationInstanceOfCustom);
  v57 = v41;
  v58 = *((_QWORD *)this + 3472);
  v59 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v60 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v57, *((_QWORD *)this + 3471), v56, v32, v17, (uint64_t)v24, v25);
  JSC::B3::Procedure::addValueImpl(v59, v60);
  v80 = v60;
  v62 = (char **)(v58 + 8);
  v63 = *(unsigned int *)(v58 + 20);
  if ((_DWORD)v63 == *(_DWORD *)(v58 + 16))
  {
    v68 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v62, v63 + 1, (unint64_t)&v80);
    v63 = *(unsigned int *)(v58 + 20);
    *(_QWORD *)(*(_QWORD *)(v58 + 8) + 8 * v63) = *(_QWORD *)v68;
    v64 = v80;
  }
  else
  {
    *(_QWORD *)&(*v62)[8 * v63] = v60;
    v64 = v60;
  }
  *(_DWORD *)(v58 + 20) = v63 + 1;
  *((_QWORD *)v64 + 4) = v58;
  v66 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v65);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCountExecution(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FTL::Output *v8;
  JSC::FTL::AbstractHeap *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  uint64_t v14;

  v8 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v9 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(*((_QWORD *)this + 3528) + 72), a3, a4, a5, a6, a7, a8);
  v11 = v10;
  v12 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v8, v9, v10, 2);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v8, 1);
  v14 = JSC::FTL::Output::add(v8, v12, v13);
  return JSC::FTL::Output::store((uint64_t)v8, v14, v9, v11);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSuperSamplerBegin(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FTL::Output *v8;
  JSC::FTL::AbstractHeap *v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  uint64_t v14;

  v8 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v9 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)&g_superSamplerCount, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  v12 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v8, v9, v10, 1);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v8, 1);
  v14 = JSC::FTL::Output::add(v8, v12, v13);
  return JSC::FTL::Output::store((uint64_t)v8, v14, v9, v11);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSuperSamplerEnd(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FTL::Output *v9;
  JSC::FTL::AbstractHeap *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  char **v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  char *v22;
  JSC::B3::Value *v23;

  v9 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v10 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)&g_superSamplerCount, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  v13 = JSC::FTL::Output::load((uint64_t)v9, v10, v11, 1);
  v14 = JSC::FTL::Output::constInt32(v9, 1);
  v15 = *((_QWORD *)this + 3472);
  v16 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v17 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *((_QWORD *)this + 3471), v13, v14);
  JSC::B3::Procedure::addValueImpl(v16, v17);
  v23 = v17;
  v18 = (char **)(v15 + 8);
  v19 = *(unsigned int *)(v15 + 20);
  if ((_DWORD)v19 == *(_DWORD *)(v15 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v23);
    v19 = *(unsigned int *)(v15 + 20);
    *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v19) = *(_QWORD *)v22;
    v20 = v23;
  }
  else
  {
    *(_QWORD *)&(*v18)[8 * v19] = v17;
    v20 = v17;
  }
  *(_DWORD *)(v15 + 20) = v19 + 1;
  *((_QWORD *)v20 + 4) = v15;
  return JSC::FTL::Output::store((uint64_t)v9, (uint64_t)v17, v10, v12);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileHasIndexedProperty(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  unint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  unsigned int v30;
  uint64_t v31;

  v10 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v10 + 18) == 146)
    v11 = *(_DWORD *)(v10 + 80);
  else
    v11 = *(_DWORD *)(v10 + 72);
  v12 = v11 - 7;
  v13 = *(_QWORD *)this;
  v14 = *(_QWORD *)(v10 + 24);
  if (v12 <= 3)
  {
    v15 = v14 + 1;
    if (*(_DWORD *)(v13 + 164) > v15)
    {
      return;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x197D53318);
  }
  if (*(_DWORD *)(v13 + 164) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53320);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 8 * v14);
  if ((v18 & 0xFC000000000000) == 0x2C000000000000)
  else
  v20 = (uint64_t)v19;
  v21 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53328);
  }
  v30 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v30)
    goto LABEL_17;
  v31 = v22;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileEnumeratorPutByVal(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  unsigned int v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  unsigned int v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  JSC::B3::Value *v52;
  JSC::B3::Value *v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  JSC::B3::Value *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  char v86;
  JSC::B3::Value *v87;
  JSC::B3::Value *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  JSC::B3::Value *v94;
  JSC::B3::Value *v95;
  JSC::B3::Value *v96;
  JSC::B3::Value *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::B3::Value *v102;
  JSC::B3::Value *v103;
  JSC::B3::Value *v104;
  JSC::B3::BasicBlock *v105;
  JSC::B3::Value *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC::B3::Value *v111;
  JSC::B3::Value *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t Ptr;
  JSC::B3::Value *v120;
  uint64_t v121;
  JSC::B3::Value *v122;
  JSC::B3::Value *v123;
  JSC::B3::Value *v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  unsigned int *v143;
  unsigned int v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  JSC::JSCell *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  BOOL v191;
  JSC::B3::BasicBlock *v192;
  uint64_t v193;
  uint64_t v194;
  JSC::B3::Value *v195;
  uint64_t v196;
  uint64_t v197;
  JSC::B3::Value *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  unsigned int *v204;
  char v205;
  uint64_t v206;
  unsigned int *v207;
  JSC::B3::Value *v208;
  JSC::B3::Value *v209;
  uint64_t v210;
  uint64_t v211;

  v9 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v10 = *(_DWORD *)(*(_QWORD *)this + 164);
  if (v10 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53B20);
  }
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53B28);
  }
  if (v10 <= (int)v9 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53B30);
  }
  if (v10 <= (int)v9 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53B38);
  }
  v12 = *(_QWORD *)(*(_QWORD *)this + 152);
  v13 = *(_QWORD *)(v12 + 8 * *(_QWORD *)(*((_QWORD *)this + 3528) + 24));
  v14 = *(_QWORD *)(v12 + 8 * (v9 + 1));
  v15 = *(_QWORD *)(v12 + 8 * (v9 + 2));
  v16 = *(_QWORD *)(v12 + 8 * (v9 + 4));
  v17 = (v13 >> 50) & 0x3F;
  if ((v17 - 8) >= 2
    && ((v189 = v17 > 0x26, v190 = (1 << v17) & 0x7FEAB7F800, !v189) ? (v191 = v190 == 0) : (v191 = 1),
        v191))
  {
  }
  else
  {
  }
  v19 = (JSC::B3::Value *)v18;
  v211 = v18;
  v210 = v20;
  v209 = v28;
  v36 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 5;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v36)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53B40);
  }
  v198 = v28;
  v200 = v14;
  v44 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 6;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v44)
  {
    __break(0xC471u);
    JUMPOUT(0x197D53B48);
  }
  v45 = v37;
  v208 = v195;
  v46 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v47 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v193 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v194 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v196 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v197 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v48 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v49 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v50 = v16 & 0xFF00FFFFFFFFFFFFLL;
  v51 = v48;
  v199 = v50;
  if (v50 == (v200 & 0xFF00FFFFFFFFFFFFLL))
    v48 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v52 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 5);
  v53 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45, v52);
  v54 = JSC::FTL::Output::notZero32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v54, v51, v46, NAN, NAN, v55, v56, v57, v58);
  *((_QWORD *)this + 3472) = v46;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v66, v47, v48, 1.0, 0.0, v67, v68, v69, v70);
  *((_QWORD *)this + 3472) = v47;
  v77 = *((_QWORD *)this + 3505);
  v192 = (JSC::B3::BasicBlock *)v49;
  if ((v13 & 1) != 0)
    v78 = (_QWORD *)(v77 + 24);
  else
    v78 = (_QWORD *)(v77 + 8);
  v79 = *v78 + 32 * *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v80 = (void *)*((unsigned int *)this + 7030);
  if ((_DWORD)v80 != *(_DWORD *)(v79 + 20))
  {
    if ((*(_QWORD *)(v79 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v79, v80, v71, v72, v73, v74, v75, v76);
    else
      *(_DWORD *)(v79 + 20) = (_DWORD)v80;
  }
  v81 = *(_QWORD *)v79;
  if (*(_QWORD *)v79 == 4 || (*(_QWORD *)v79 & 2) != 0)
    goto LABEL_21;
  v83 = v81 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v81 & 1) != 0)
  {
    if (*(_DWORD *)v83 != 1)
      goto LABEL_21;
    v83 = *(_QWORD *)(v83 + 8);
  }
  if (!v83)
  {
LABEL_21:
    v84 = v19;
    v85 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040));
    v86 = 0;
    v83 = 0;
    goto LABEL_22;
  }
  v84 = v19;
  v85 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v83 >> 4);
  v86 = 1;
LABEL_22:
  v87 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v195, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3712));
  v88 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v85, v87);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v88, v193, v48, 1.0, 0.0, v89, v90, v91, v92);
  *((_QWORD *)this + 3472) = v193;
  v94 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x40000);
  v95 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v93, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5296));
  v96 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v94, v95);
  v97 = JSC::FTL::Output::notZero32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v96);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v97, v48, v194, 0.0, 1.0, v98, v99, v100, v101);
  *((_QWORD *)this + 3472) = v194;
  if ((v86 & 1) == 0)
  {
    v102 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v195, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3616));
    v103 = v198;
LABEL_24:
    v104 = v84;
    v105 = v192;
    v106 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v103, v102);
    goto LABEL_25;
  }
  v165 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v83);
  v166 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(unsigned __int8 *)(v83 + 14));
  v103 = v198;
  if (!v166)
    v166 = JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v195, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3616));
  v102 = (JSC::B3::Value *)v166;
  if (v165)
    goto LABEL_24;
  v104 = v84;
  v105 = v192;
  v106 = (JSC::B3::Value *)*((_QWORD *)this + 3458);
LABEL_25:
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v106, v196, v197, NAN, NAN, v107, v108, v109, v110);
  *((_QWORD *)this + 3472) = v196;
  v111 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v103, 2);
  v112 = JSC::FTL::Output::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v104, v111, 3, 16);
  JSC::FTL::Output::store((uint64_t)this + 27640, v20, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512), (uint64_t)v112);
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v105, v113, v114, v115, v116, v117, v118);
  *((_QWORD *)this + 3472) = v197;
  Ptr = JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v104, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3568));
  v120 = v103;
  v121 = Ptr;
  v122 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v120, v102);
  v123 = (JSC::B3::Value *)JSC::FTL::Output::neg((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v122);
  v124 = (JSC::B3::Value *)JSC::FTL::Output::signExt32To64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v123);
  v125 = JSC::FTL::Output::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v121, v124, 3, -16);
  JSC::FTL::Output::store((uint64_t)this + 27640, v20, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512), (uint64_t)v125);
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v105, v126, v127, v128, v129, v130, v131);
  *((_QWORD *)this + 3472) = v51;
  v132 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
  v203 = (unint64_t)v104;
  LOBYTE(v204) = 3;
  JSC::B3::StackmapValue::append(v132, (uint64_t)v104, (unint64_t)&v203 + 8);
  v203 = (unint64_t)v133;
  LOBYTE(v204) = 3;
  JSC::B3::StackmapValue::append(v132, v133, (unint64_t)&v203 + 8);
  v203 = (unint64_t)v20;
  LOBYTE(v204) = 3;
  JSC::B3::StackmapValue::append(v132, v20, (unint64_t)&v203 + 8);
  v134 = *((_QWORD *)this + 3488);
  v203 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v132, v134, (unint64_t)&v203);
  v135 = *((_QWORD *)this + 3487);
  v203 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v132, v135, (unint64_t)&v203);
  *((_QWORD *)v132 + 8) |= 0x30000uLL;
  *((_QWORD *)v132 + 10) |= 0x30000uLL;
  *((_BYTE *)v132 + 168) = HIBYTE(qword_1ECF4C780);
  v141 = *((_QWORD *)this + 1);
  JSC::CodeOrigin::CodeOrigin(&v206, *((const JSC::CodeOrigin **)this + 3528));
  v142 = JSC::DFG::Node::ecmaMode(*((JSC::DFG::Node **)this + 3528));
  *(_QWORD *)&v203 = v141;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v203 + 1, (const JSC::CodeOrigin *)&v206);
  v143 = v207;
  if (v207)
  {
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 + 1, v143));
  }
  v204 = v143;
  v205 = v142;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v105, v152, v153, v154, v155, v156, v157);
  if (v199 == (v200 & 0xFF00FFFFFFFFFFFFLL))
  {
    *((_QWORD *)this + 3472) = v48;
    v167 = *(_QWORD *)this;
    JSC::CodeOrigin::CodeOrigin(&v202, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
    v174 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v167, &v202, v168, v169, v170, v171, v172, v173);
    v201 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v142 == 0);
    if ((v202 & 1) != 0 && (v202 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v202 & 0xFFFFFFFF8, v182, v183, v184, v185, v186, v187, v188);
    JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v105, v183, v184, v185, v186, v187, v188);
  }
  *((_QWORD *)this + 3472) = v105;
  if ((v206 & 1) != 0 && (v206 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v206 & 0xFFFFFFFF8, v158, v159, v160, v161, v162, v163, v164);
  if (v207)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v207, v158, v159, v160, v161, v162, v163, v164);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckStructureImmediate(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  int8x8_t v11;
  unint64_t *v12;
  unint64_t v13;
  JSC::B3::Value *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int8x8_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int8x8_t v63;
  uint64_t v64;
  JSC::B3::Value *v65;
  JSC::B3::Value *v66;
  char **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  _QWORD *v83;
  uint64_t *v84;

  v12 = *(unint64_t **)(*((_QWORD *)this + 3528) + 72);
  v13 = *v12;
  if ((*v12 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    *((_BYTE *)this + 28112) = 0;
    return;
  }
  v14 = v10;
  if ((v13 & 1) != 0)
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(_DWORD *)v16 == 1)
    {
      v15 = *(_QWORD *)(v16 + 8);
      goto LABEL_8;
    }
  }
  else if (v13 > 3)
  {
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_8:
    v17 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v15);
    v18 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v14 + 312))(v14, v17);
    if (v18 == 2)
    {
      v20 = *((_QWORD *)this + 3472);
      v21 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v22 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 3471), (uint64_t)v14, v17);
      JSC::B3::Procedure::addValueImpl(v21, v22);
      v81 = (uint64_t)v22;
      v23 = (char **)(v20 + 8);
      v24 = *(unsigned int *)(v20 + 20);
      if ((_DWORD)v24 == *(_DWORD *)(v20 + 16))
      {
        v76 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v81);
        v24 = *(unsigned int *)(v20 + 20);
        *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v24) = *(_QWORD *)v76;
        v25 = v81;
      }
      else
      {
        *(_QWORD *)&(*v23)[8 * v24] = v22;
        v25 = (uint64_t)v22;
      }
      *(_DWORD *)(v20 + 20) = v24 + 1;
      *(_QWORD *)(v25 + 32) = v20;
    }
    else
    {
      v78 = 27648;
      if (v18 == 1)
        v78 = 27640;
      v22 = *(JSC::B3::Value **)((char *)this + v78);
    }
    return;
  }
  v26 = JSC::B3::Procedure::addBlock((uint64_t *)0x6BF8, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v27 = (uint64_t)v26;
  v28 = *((_QWORD *)this + 3473);
  if (v28)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v28, (uint64_t)v26);
  }
  else
  {
    v84 = v26;
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v29 = 0u;
    *((_OWORD *)v29 + 1) = 0u;
    v29[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v29;
    v83 = v29;
    v29[2] = v27;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v84, (uint64_t *)&v83, v30, v31, v32, v33, v34, (uint64_t)&v81);
    v35 = v83;
    v36 = (_QWORD *)*((_QWORD *)this + 3479);
    *v83 = (char *)this + 27824;
    v35[1] = v36;
    *v36 = v35;
    *((_QWORD *)this + 3479) = v35;
  }
  v37 = 0;
  v80 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v27;
  while (1)
  {
    v38 = v37;
    v39 = *v12;
    if ((*v12 & 1) != 0)
      break;
    if (v39 >= 4)
      v40 = 0;
    else
      v40 = -1;
    if (v40 <= v38)
    {
      v60 = v39 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_31;
    }
LABEL_24:
    v42 = JSC::B3::Procedure::addBlock((uint64_t *)v39, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
    v43 = (uint64_t)v42;
    v44 = *((_QWORD *)this + 3473);
    if (v44)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v44, (uint64_t)v42);
    }
    else
    {
      v84 = v42;
      v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v45 = 0u;
      *((_OWORD *)v45 + 1) = 0u;
      v45[3] = *((_QWORD *)this + 3477);
      *((_QWORD *)this + 3477) = v45;
      v83 = v45;
      v45[2] = v43;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v84, (uint64_t *)&v83, v46, v47, v48, v49, v50, (uint64_t)&v81);
      v51 = v83;
      v52 = (_QWORD *)*((_QWORD *)this + 3479);
      *v83 = (char *)this + 27824;
      v51[1] = v52;
      *v52 = v51;
      *((_QWORD *)this + 3479) = v51;
    }
    v53 = *v12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*v12 & 1) != 0)
      v53 = *(_QWORD *)(v53 + 8 * v38 + 8);
    v54 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v53);
    v55 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v14, v54);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v55, v27, v43, NAN, NAN, v56, v57, v58, v59);
    *((_QWORD *)this + 3472) = v43;
    v37 = v38 + 1;
  }
  v39 &= 0xFFFFFFFFFFFFFFFCLL;
  v41 = *(unsigned int *)v39;
  if (v41 - 1 > v38)
    goto LABEL_24;
  v60 = *(_QWORD *)(v39 + 8 * (v41 - 1) + 8);
LABEL_31:
  v61 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v60);
  v62 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v14 + 312))(v14, v61);
  if (v62 == 2)
  {
    v64 = *((_QWORD *)this + 3472);
    v65 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v66 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 3471), (uint64_t)v14, v61);
    JSC::B3::Procedure::addValueImpl(v65, v66);
    v81 = (uint64_t)v66;
    v67 = (char **)(v64 + 8);
    v68 = *(unsigned int *)(v64 + 20);
    if ((_DWORD)v68 == *(_DWORD *)(v64 + 16))
    {
      v77 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67, v68 + 1, (unint64_t)&v81);
      v68 = *(unsigned int *)(v64 + 20);
      *(_QWORD *)(*(_QWORD *)(v64 + 8) + 8 * v68) = *(_QWORD *)v77;
      v69 = v81;
    }
    else
    {
      *(_QWORD *)&(*v67)[8 * v68] = v66;
      v69 = (uint64_t)v66;
    }
    *(_DWORD *)(v64 + 20) = v68 + 1;
    *(_QWORD *)(v69 + 32) = v64;
  }
  else
  {
    v79 = 27648;
    if (v62 == 1)
      v79 = 27640;
    v66 = *(JSC::B3::Value **)((char *)this + v79);
  }
  v70 = *((_QWORD *)this + 3472);
  v71 = *((_QWORD *)this + 3470);
  v72 = *((_QWORD *)this + 3471);
  v81 = v27;
  v82 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v70, v71, 154, v72, &v81, v73, v74, v75);
  *((_QWORD *)this + 3472) = v27;
  *((_QWORD *)this + 3473) = v80;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewObject(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  JSC::Structure *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  int v66;
  WTF *v67;
  WTF *v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  JSC::B3::Value *v74;
  void *v75;
  uint64_t v76;
  unsigned int v77;
  int *v78;
  int v79;
  int v80;
  JSC::B3::Value *v81;
  uint64_t v82;
  uint64_t *v83;
  unsigned int v84;
  int v85;
  char v86;
  unint64_t v87;
  int v88;
  int v89;
  unint64_t *v90;
  unint64_t v91;
  WTF **v92;
  WTF **v93;
  uint64_t v94;
  int v95;
  const JSC::FTL::AbstractHeap *v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::BitVector::OutOfLineBits *v105;
  JSC::B3::Value *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  unsigned int v122;
  WTF *v123;
  JSC::Structure *v124;
  int v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  JSC::B3::Value *v128;
  unsigned int v129;
  JSC::B3::Value *v130;
  uint64_t v131;
  JSC::B3::BasicBlock *v132;
  JSC::B3::BasicBlock *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::B3::Value *HeapCell;
  unsigned int v138;
  JSC::B3::Value *v139;
  JSC::B3::Value *v140;
  uint64_t v141;
  JSC::B3::BasicBlock *v142;
  int v143;
  JSC::B3::Value *v144;
  JSC::B3::Value *v145;
  uint64_t v146;
  uint64_t v147;
  JSC::B3::Value *Object;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  JSC::FTL::AbstractHeap *v152;
  JSC::FTL::AbstractHeap *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  JSC::B3::BasicBlock *v160;
  unint64_t v161;
  __int128 *v162;
  JSC::B3::Value *v163;
  uint64_t v164;
  uint64_t v165;
  JSC::B3::Value *Ptr;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  JSC::B3::Value *v176;
  JSC::B3::Value *v177;
  JSC::B3::Value *v178;
  int v179;
  JSC::Structure *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  JSC::B3::Value *v202;
  int v203;
  JSC::B3::Value *v204;
  JSC::B3::Value *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  JSC::FTL::IndexedAbstractHeap *v219;
  JSC::B3::Value *v220;
  int8x8_t v221;
  uint64_t v222;
  uint64_t v223;
  JSC::B3::Value *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  JSC::B3::Value *v229;
  JSC::B3::Value *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  JSC::B3::Value *v239;
  int8x8_t v240;
  JSC::B3::Value *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const JSC::FTL::AbstractHeap *v251;
  const JSC::FTL::AbstractHeap *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  JSC::B3::Value *v263;
  JSC::B3::BasicBlock *v264;
  JSC::B3::BasicBlock *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  JSC::FTL::AbstractHeap *v272;
  int v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  int v280;
  WTF *v281;
  WTF *v282;
  WTF *v283;
  int v284;
  WTF *v285;
  WTF *v286;
  JSC::B3::Value *v287;
  JSC::B3::Value *v288;
  uint64_t v289;
  JSC::B3::BasicBlock *v290;
  JSC::FTL::AbstractHeap *v291;
  uint64_t v292;
  unint64_t v293;
  JSC::B3::Value *v294;
  JSC::B3::Value *v295;
  WTF *v296[2];
  char v297;
  int v298;
  WTF *v299;
  uint64_t v300;
  uint64_t v301;
  WTF *v302;
  uint64_t v303;
  _BYTE v304[16];
  uint64_t *v305;
  int v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t *v309;
  int v310;
  unsigned int v311;
  uint64_t v312;
  unint64_t v313;
  _BYTE *v314;
  uint64_t v315;
  _BYTE v316[72];

  v9 = *((_QWORD *)this + 3528);
  v10 = *(_QWORD *)(v9 + 80);
  v314 = v316;
  v11 = (int8x8_t)8;
  v315 = 8;
  if (*(_DWORD *)(v10 + 12))
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = ++v13 + *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197D55060);
      }
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v14);
      if ((*(_DWORD *)(*(_QWORD *)v10 + v12) | 2) == 0xE)
      else
      v305 = v16;
      v17 = HIDWORD(v315);
      if (HIDWORD(v315) == (_DWORD)v315)
      {
        WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)&v314, (unint64_t)&v305);
      }
      else
      {
        *(_QWORD *)&v314[8 * HIDWORD(v315)] = v16;
        HIDWORD(v315) = v17 + 1;
      }
      v12 += 8;
    }
    while (v13 < *(unsigned int *)(v10 + 12));
    v9 = *((_QWORD *)this + 3528);
  }
  JSC::DFG::RegisteredStructureSet::RegisteredStructureSet((uint64_t *)&v313, *(uint64_t **)(v9 + 72));
  v18 = v313;
  if ((v313 & 1) != 0)
  {
    v118 = *(unsigned int *)(v313 & 0xFFFFFFFFFFFFFFFCLL);
    v309 = &v312;
    v310 = 1;
    v311 = v118;
    if (v118 >= 2)
    {
      if (v118 >> 29)
      {
        __break(0xC471u);
LABEL_200:
        JUMPOUT(0x197D54C38);
      }
      v119 = WTF::fastMalloc((WTF *)(8 * v118));
      v310 = v118;
      v309 = (uint64_t *)v119;
      v18 = v313;
    }
  }
  else
  {
    v309 = &v312;
    v310 = 1;
    v311 = v313 > 3;
  }
  if ((v18 & 1) != 0)
    v19 = *(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v19 = v18 > 3;
  if (v19)
  {
    v20 = v19 - 1;
    v21 = (v19 - 1);
    do
    {
      v22 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      if (v311 <= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x197D55078);
      }
      v309[v21--] = v22;
      --v20;
    }
    while (v20 != -1);
  }
  v23 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v24 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  if ((v313 & 1) != 0)
    v25 = *(unsigned int *)(v313 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v25 = v313 > 3;
  WTF::Vector<JSC::FTL::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v305, v25);
  if ((v313 & 1) != 0)
    v32 = *(_DWORD *)(v313 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v32 = v313 > 3;
  if (v32)
  {
    v33 = v32 - 1;
    v34 = 3 * (v32 - 1);
    v35 = (v32 - 1);
    do
    {
      v36 = v313 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v313 & 1) != 0)
        v36 = *(_QWORD *)(v36 + v35 * 8 + 8);
      v37 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v36);
      if (v311 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x197D55080);
      }
      if (v307 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x197D55088);
      }
      v38 = v309[v35];
      v39 = &v305[v34];
      *v39 = v37;
      v39[1] = v38;
      *((_DWORD *)v39 + 4) = 1065353216;
      v34 -= 3;
      --v33;
      --v35;
    }
    while (v33 != -1);
  }
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197D55098);
  }
  JSC::FTL::Output::switchInstruction<WTF::Vector<JSC::FTL::SwitchCase,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this + 27640, (uint64_t)v40, &v305, v23);
  v292 = *((_QWORD *)this + 3473);
  v45 = (WTF *)v304;
  v302 = (WTF *)v304;
  v303 = 1;
  if ((v313 & 1) != 0)
    LODWORD(v46) = *(_DWORD *)(v313 & 0xFFFFFFFFFFFFFFFCLL);
  else
    LODWORD(v46) = v313 > 3;
  if ((_DWORD)v46)
  {
    v290 = (JSC::B3::BasicBlock *)v24;
    v291 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 25512);
    v46 = v46;
    v289 = v23;
    do
    {
      if (v311 <= (int)v46 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197D55090);
      }
      v47 = v313;
      if ((v313 & 1) != 0)
        v48 = *(unsigned int *)(v313 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v48 = v313 > 3;
      v49 = v23;
      if (v48 > v46)
      {
        if (v46 >= v311)
        {
          __break(0xC471u);
          JUMPOUT(0x197D550B8);
        }
        v49 = v309[v46];
      }
      *((_QWORD *)this + 3472) = v309[(v46 - 1)];
      *((_QWORD *)this + 3473) = v49;
      v50 = (JSC::Structure *)(v47 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v47 & 1) != 0)
        v50 = (JSC::Structure *)*((_QWORD *)v50 + (v46 - 1) + 1);
      v293 = v46 - 1;
      if (JSC::Structure::outOfLineCapacity(v50) || (*((_BYTE *)v50 + 8) & 0xE) != 0)
      {
        if (*((_BYTE *)v50 + 9) == 36)
        {
          v120 = *(_QWORD *)(*(_QWORD *)this + 16);
          if (*(_DWORD *)(v120 + 37620) <= 0xFu)
          {
            __break(0xC471u);
            goto LABEL_200;
          }
          v121 = (WTF *)(v120 + 37560);
        }
        else
        {
          v121 = *(WTF **)(*(_QWORD *)(*(_QWORD *)this + 16)
                         + (((8 * *((unsigned __int8 *)v50 + 14) + 31) >> 1) & 0x7F8)
                         + 15024);
        }
        v82 = *((_QWORD *)this + 3457);
        v286 = v45;
        v284 = *((_BYTE *)v50 + 8) & 0xE;
        v281 = v121;
        if ((*((_BYTE *)v50 + 8) & 0xE) != 0)
        {
          v124 = v50;
          v125 = *(_DWORD *)(v10 + 12);
          if (v125)
          {
            v84 = v125 - 1;
            v83 = (uint64_t *)&v314[8 * v84];
            v78 = (int *)(*(_QWORD *)v10 + 8 * v84);
            v81 = (JSC::B3::Value *)*((_QWORD *)this + 3457);
            do
            {
              v80 = *v78;
              v78 -= 2;
              v79 = v80;
              if (v80 == 14)
              {
                if (HIDWORD(v315) <= v84)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197D550B0);
                }
                v82 = *v83;
              }
              else if (v79 == 12)
              {
                if (HIDWORD(v315) <= v84)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197D550A8);
                }
                v81 = (JSC::B3::Value *)*v83;
              }
              --v83;
              --v84;
            }
            while (v84 != -1);
          }
          else
          {
            v81 = (JSC::B3::Value *)*((_QWORD *)this + 3457);
          }
          v295 = (JSC::B3::Value *)v82;
          v128 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v82, 2);
          v127 = JSC::FTL::Output::mul((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v128, *((JSC::B3::Value **)this + 3464));
          v288 = v81;
          v126 = 8;
          v50 = v124;
        }
        else
        {
          v126 = 0;
          v127 = (JSC::B3::Value *)*((_QWORD *)this + 3460);
          v288 = (JSC::B3::Value *)*((_QWORD *)this + 3457);
          v295 = v288;
        }
        v129 = JSC::Structure::outOfLineCapacity(v50);
        v130 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v126 + 8 * v129);
        v131 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v130, v127);
        v132 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v133 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v279 = *((_QWORD *)this + 3473);
        *((_QWORD *)this + 3473) = v132;
        v134 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::Value **)this + 3460));
        v274 = v135;
        v276 = v134;
        v138 = JSC::Structure::outOfLineCapacity(v50);
        v139 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 8 * v138 + 8);
        v140 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), HeapCell, v139);
        v141 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v140);
        v264 = v142;
        v266 = v141;
        v143 = JSC::Structure::outOfLineCapacity(v50);
        v144 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), ~v143);
        v145 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -1);
        JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v295, v140, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 352));
        v146 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v281);
        v147 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v50);
        v149 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Object);
        v268 = v150;
        v270 = v149;
        v151 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v140);
        v153 = v152;
        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v133, v154, v155, v156, v157, v158, v159);
        *((_QWORD *)this + 3472) = v132;
        v160 = v133;
        *((_QWORD *)this + 3473) = v133;
        v161 = JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v276, v274, v266, (uint64_t)v264);
        v282 = (WTF *)v151;
        v272 = v153;
        v296[0] = *(WTF **)(*(_QWORD *)this + 16);
        v296[1] = v50;
        if (v284)
        else
        v163 = (JSC::B3::Value *)v162;
        v45 = v286;
        v277 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v162);
        v165 = v164;
        Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v163, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3568));
        v167 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr);
        v169 = v168;
        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v160, v170, v171, v172, v173, v174, v175);
        *((_QWORD *)this + 3472) = v160;
        *((_QWORD *)this + 3473) = v279;
        v57 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v270, v268, v277, v165);
        v176 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, (uint64_t)v282, (uint64_t)v272, v167, v169);
        JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v288, v176, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
        v177 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((_BYTE *)v50 + 8) & 0xF);
        v178 = v295;
        v294 = v176;
        v300 = 0;
        v301 = 0;
        v299 = 0;
        v179 = *(_DWORD *)(v10 + 12);
        if (v179)
        {
          v180 = v50;
          v77 = v179 - 1;
          v76 = 8 * (v179 - 1);
          do
          {
            if (*(_DWORD *)(v10 + 12) <= v77)
            {
              __break(0xC471u);
              JUMPOUT(0x197D55070);
            }
            if (*(_QWORD *)(*(_QWORD *)v10 + v76) == 10)
            {
              v298 = HIDWORD(*(_QWORD *)(*(_QWORD *)v10 + v76));
              if (HIDWORD(v315) <= v77)
              {
                __break(0xC471u);
                JUMPOUT(0x197D550A0);
              }
              WTF::HashMap<int,JSC::B3::Value *,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>(v296, &v301, &v298, &v314[v76]);
              if (!v297)
              {
                JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x3EB8, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewObject()", "result");
                __break(0xC471u);
                JUMPOUT(0x197D54C80);
              }
              if (HIDWORD(v300) == (_DWORD)v300)
              {
                WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)&v299, (unint64_t)&v298);
              }
              else
              {
                *((_DWORD *)v299 + HIDWORD(v300)) = v298;
                ++HIDWORD(v300);
              }
            }
            v76 -= 8;
            --v77;
          }
          while (v77 != -1);
          if (HIDWORD(v300))
          {
            std::__sort<std::__less<int,int> &,int *>();
            v122 = HIDWORD(v300);
            if (HIDWORD(v300))
            {
              v263 = v57;
              if (HIDWORD(v300) >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x197D550C0);
              }
              v283 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v300)));
              v278 = HIDWORD(v300);
              if (HIDWORD(v300))
              {
                if (HIDWORD(v300) >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197D550C8);
                }
                v285 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v300)));
                if (HIDWORD(v300))
                {
                  v195 = HIDWORD(v300) - 1;
                  v196 = HIDWORD(v300) - 1;
                  do
                  {
                    v197 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
                    if (v195 >= v122)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197D550D0);
                    }
                    v198 = v196;
                    *((_QWORD *)v283 + v196) = v197;
                    v199 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
                    if (v195 >= v278)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197D550D8);
                    }
                    *((_QWORD *)v285 + v196--) = v199;
                  }
                  while (v198);
                  v280 = HIDWORD(v300);
                  if (HIDWORD(v300))
                  {
                    v275 = HIDWORD(v300) - 1;
                    if (HIDWORD(v300) <= HIDWORD(v300) - 1)
                    {
LABEL_175:
                      __break(0xC471u);
                      JUMPOUT(0x197D55028);
                    }
                    v262 = *((_QWORD *)this + 3473);
                    v273 = HIDWORD(v300) - 1;
                    while (1)
                    {
                      v200 = (v280 - 1);
                      v201 = *((_DWORD *)v299 + v200);
                      v202 = (JSC::B3::Value *)WTF::HashMap<int,JSC::B3::Value *,WTF::DefaultHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::get(v301, v201);
                      v203 = v201;
                      v204 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v201);
                      v205 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v204, v288);
                      if (v275 >= v122)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197D550E0);
                      }
                      if (v275 >= v278)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197D550E8);
                      }
                      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v205, *((_QWORD *)v283 + v200), *((_QWORD *)v285 + v200), NAN, NAN, v206, v207, v208, v209);
                      v216 = *((_QWORD *)v285 + v200);
                      *((_QWORD *)this + 3472) = *((_QWORD *)v283 + v200);
                      *((_QWORD *)this + 3473) = v216;
                      v217 = *((_BYTE *)v180 + 8) & 0xF;
                      if (v217 > 9)
                      {
LABEL_198:
                        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x3F08, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewObject()", "Invalid indexing type");
                        __break(0xC471u);
                        JUMPOUT(0x197D55130);
                      }
                      if (((1 << v217) & 0x30) != 0)
                      {
                        v220 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202, *((JSC::B3::Value **)this + 3487));
                        v218 = 3;
                        v219 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16584);
                      }
                      else if (((1 << v217) & 0xC0) != 0)
                      {
                        v222 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
                        v223 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
                        v265 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
                        v224 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202, *((JSC::B3::Value **)this + 3487));
                        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v224, v222, v223, NAN, NAN, v225, v226, v227, v228);
                        *((_QWORD *)this + 3472) = v222;
                        v267 = *((_QWORD *)this + 3473);
                        *((_QWORD *)this + 3473) = v223;
                        v229 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v202);
                        v230 = (JSC::B3::Value *)JSC::FTL::Output::intToDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v229);
                        v231 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v230);
                        v269 = v232;
                        v271 = v231;
                        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v265, v233, v234, v235, v236, v237, v238);
                        *((_QWORD *)this + 3472) = v223;
                        *((_QWORD *)this + 3473) = v265;
                        v242 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v241);
                        v244 = v243;
                        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v265, v245, v246, v247, v248, v249, v250);
                        *((_QWORD *)this + 3472) = v265;
                        *((_QWORD *)this + 3473) = v267;
                        v202 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 4, v271, v269, v242, v244);
                        v218 = 6;
                        v219 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 17576);
                      }
                      else
                      {
                        if (((1 << v217) & 0x300) == 0)
                          goto LABEL_198;
                        v218 = 3;
                        v219 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 18568);
                      }
                      v251 = (const JSC::FTL::AbstractHeap *)JSC::FTL::IndexedAbstractHeap::operator[](v219, v203, v210, v211, v212, v213, v214, v215);
                      v252 = JSC::FTL::Output::address((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v294, v251);
                      JSC::FTL::Output::store((_QWORD *)this + 3455, (uint64_t)v202, (uint64_t)v252, v253, v218);
                      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *((JSC::B3::BasicBlock **)v285 + v200), v254, v255, v256, v257, v258, v259);
                      v260 = *((_QWORD *)v285 + v200);
                      if (v280 == 1)
                        break;
                      v261 = *((_QWORD *)v283 + (v280 - 2));
                      *((_QWORD *)this + 3472) = v260;
                      *((_QWORD *)this + 3473) = v261;
                      --v280;
                      if (HIDWORD(v300) <= --v273)
                        goto LABEL_175;
                    }
                    *((_QWORD *)this + 3472) = v260;
                    *((_QWORD *)this + 3473) = v262;
                  }
                }
                WTF::fastFree((unint64_t)v285, v188, v189, v190, v191, v192, v193, v194);
              }
              WTF::fastFree((unint64_t)v283, v181, v182, v183, v184, v185, v186, v187);
              v45 = v286;
              v57 = v263;
            }
          }
          v123 = v299;
          v50 = v180;
          if (v299)
          {
            v299 = 0;
            LODWORD(v300) = 0;
            WTF::fastFree((unint64_t)v123, v75, v51, v52, v53, v54, v55, v56);
          }
          if (v301)
            WTF::fastFree(v301 - 16, v75, v51, v52, v53, v54, v55, v56);
        }
      }
      else
      {
        v294 = 0;
      }
      v299 = (WTF *)0x8000000000000000;
      JSC::Structure::getPropertiesConcurrently(v50, v51, v52, v53, v54, v55, v56, v296);
      v65 = v296[0];
      if (HIDWORD(v296[1]))
      {
        v66 = *(_DWORD *)(v10 + 12);
        if (v66)
        {
          v287 = v50;
          v67 = v45;
          v68 = (WTF *)((char *)v296[0] + 16 * HIDWORD(v296[1]));
          while (1)
          {
            if (v66)
            {
              v69 = v66 - 1;
              v70 = 8 * (v66 - 1);
              while (1)
              {
                if (*(_DWORD *)(v10 + 12) <= v69)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197D55058);
                }
                v71 = *(_QWORD *)(*(_QWORD *)v10 + v70);
                if ((_DWORD)v71 == 11)
                {
                  v72 = HIDWORD(v71);
                  if (JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), HIDWORD(v71)) == *(_QWORD *)v65)break;
                }
                v70 -= 8;
                if (--v69 == -1)
                  goto LABEL_57;
              }
              v73 = *((int *)v65 + 2);
              v74 = v294;
              if ((int)v73 <= 63)
              {
                WTF::BitVector::set((WTF::BitVector *)&v299, v73);
                v74 = v57;
              }
              if (HIDWORD(v315) <= v69)
              {
                __break(0xC471u);
                JUMPOUT(0x197D55068);
              }
            }
LABEL_57:
            v65 = (WTF *)((char *)v65 + 16);
            if (v65 == v68)
              break;
            v66 = *(_DWORD *)(v10 + 12);
          }
          v65 = v296[0];
          v45 = v67;
          v50 = v287;
        }
      }
      if (v65)
      {
        v296[0] = 0;
        LODWORD(v296[1]) = 0;
        WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
      }
      v85 = *((unsigned __int8 *)v50 + 14);
      if (*((_BYTE *)v50 + 14))
      {
        v86 = v85 - 1;
        v87 = (v85 - 1);
        v88 = 8 * v85 + 8;
        v89 = 504 - 8 * v85;
        do
        {
          v90 = (unint64_t *)(2 * (_QWORD)v299);
          if (((unint64_t)v299 & 0x8000000000000000) != 0)
            v91 = 63;
          else
            v91 = *v90;
          if (v91 <= v87
            || ((v92 = (WTF **)(v90 + 1), (uint64_t)v299 >= 0) ? (v93 = v92) : (v93 = &v299),
                ((*(unint64_t *)((char *)v93 + ((v87 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v86) & 1) == 0))
          {
            v94 = *((_QWORD *)this + 3459);
            if ((int)v87 <= 63)
              v95 = v88;
            else
              v95 = v89;
            v96 = JSC::FTL::Output::address((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v291, v57, v95);
            JSC::FTL::Output::store((uint64_t)this + 27640, v94, v96, v97);
          }
          --v86;
          --v87;
          v88 -= 8;
          v89 += 8;
        }
        while (v88 != 8);
      }
      v296[0] = (WTF *)JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57);
      v296[1] = v98;
      if (HIDWORD(v303) == (_DWORD)v303)
      {
        WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v302, (unint64_t)v296);
      }
      else
      {
        *((_OWORD *)v302 + HIDWORD(v303)) = *(_OWORD *)v296;
        ++HIDWORD(v303);
      }
      v23 = v289;
      v24 = (uint64_t)v290;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v290, v99, v100, v101, v102, v103, v104);
      if (((unint64_t)v299 & 0x8000000000000000) == 0)
        WTF::BitVector::OutOfLineBits::destroy((WTF::BitVector::OutOfLineBits *)(2 * (_QWORD)v299), v105);
      v46 = v293;
    }
    while ((_DWORD)v293);
  }
  *((_QWORD *)this + 3472) = v23;
  *((_QWORD *)this + 3473) = v24;
  JSC::B3::BasicBlock::appendNewControlValue(v23, *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v41, v42, v43, v44);
  *((_QWORD *)this + 3472) = v24;
  *((_QWORD *)this + 3473) = v292;
  v106 = (JSC::B3::Value *)JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)this + 3455, (unsigned int *)&v302);
  v114 = v302;
  if (v45 != v302 && v302)
  {
    v302 = 0;
    LODWORD(v303) = 0;
    WTF::fastFree((unint64_t)v114, v107, v108, v109, v110, v111, v112, v113);
  }
  v115 = v305;
  if (&v308 != v305 && v305)
  {
    v305 = 0;
    v306 = 0;
    WTF::fastFree((unint64_t)v115, v107, v108, v109, v110, v111, v112, v113);
  }
  v116 = (unint64_t)v309;
  if (&v312 != v309 && v309)
  {
    v309 = 0;
    v310 = 0;
    WTF::fastFree(v116, v107, v108, v109, v110, v111, v112, v113);
  }
  if ((v313 & 1) != 0)
    WTF::fastFree(v313 & 0xFFFFFFFFFFFFFFFCLL, v107, v108, v109, v110, v111, v112, v113);
  v117 = (unint64_t)v314;
  if (v316 != v314)
  {
    if (v314)
    {
      v314 = 0;
      LODWORD(v315) = 0;
      WTF::fastFree(v117, v107, v108, v109, v110, v111, v112, v113);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileMaterializeNewInternalFieldObject(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::DFG::Node *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  JSC::B3::BasicBlock *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;
  int v34;
  char *v35;
  uint64_t *v36;
  JSC::B3::BasicBlock *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  JSC::B3::BasicBlock *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  JSC::B3::BasicBlock *v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t **v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char **v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  WTF **v102;
  uint64_t v103;
  __int128 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  WTF *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  JSC::B3::Value *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char **v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  JSC::B3::Value *v146;
  uint64_t v147;
  uint64_t v148;
  char **v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  JSC::B3::Value *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  JSC::B3::Value *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char **v179;
  uint64_t v180;
  WTF *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF *v185;
  WTF **v186;
  uint64_t v187;
  __int128 *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  WTF *v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  JSC::B3::Value *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char **v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  JSC::B3::Value *v230;
  uint64_t v231;
  char **v232;
  uint64_t v233;
  WTF *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  JSC::FTL::AbstractHeap *v242;
  uint64_t v243;
  uint64_t v244;
  JSC::B3::Value *v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t **v253;
  WTF *v254;
  uint64_t v255;
  uint64_t v256;
  JSC::B3::Value *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char **v263;
  uint64_t v264;
  WTF *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF *v269;
  WTF **v270;
  uint64_t v271;
  __int128 *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF *v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int *v292;
  unsigned int *v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  WTF *v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  JSC::B3::Value *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char **v308;
  uint64_t v309;
  WTF *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  JSC::B3::Value *v314;
  uint64_t v315;
  char **v316;
  uint64_t v317;
  WTF *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  JSC::FTL::AbstractHeap *v326;
  uint64_t v327;
  uint64_t v328;
  JSC::B3::Value *v329;
  uint64_t *v330;
  unsigned int v331;
  unsigned int v332;
  WTF *v333;
  int v334;
  char *v335;
  uint64_t *v336;
  JSC::B3::BasicBlock *v337;
  uint64_t v338;
  uint64_t *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t **v357;
  uint64_t v358;
  uint64_t v359;
  JSC::B3::Value *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char **v366;
  uint64_t v367;
  WTF *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  WTF *v373;
  WTF **v374;
  uint64_t v375;
  __int128 *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  WTF *v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  unint64_t v395;
  unsigned int *v396;
  unsigned int *v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  WTF *v402;
  unint64_t v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  JSC::B3::Value *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char **v413;
  uint64_t v414;
  WTF *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  JSC::B3::Value *v419;
  uint64_t v420;
  char **v421;
  uint64_t v422;
  WTF *v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  char *v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  JSC::FTL::AbstractHeap *v431;
  uint64_t v432;
  uint64_t v433;
  JSC::B3::Value *v434;
  char *v435;
  char *v436;
  char *v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t **v450;
  uint64_t *v451;
  uint64_t *v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t **v461;
  WTF *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  JSC::B3::Value *Object;
  uint64_t v468;
  JSC::B3::Value *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  char **v475;
  uint64_t v476;
  WTF *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  WTF *v481;
  WTF **v482;
  uint64_t v483;
  __int128 *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  WTF *v491;
  unsigned int v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unsigned int v502;
  unint64_t v503;
  unsigned int *v504;
  unsigned int *v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  WTF *v510;
  unint64_t v511;
  unsigned int v512;
  unsigned int v513;
  uint64_t v514;
  JSC::B3::Value *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  char **v521;
  uint64_t v522;
  WTF *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  JSC::B3::Value *v527;
  uint64_t v528;
  char **v529;
  uint64_t v530;
  WTF *v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  char *v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  JSC::FTL::AbstractHeap *v539;
  uint64_t v540;
  uint64_t v541;
  JSC::B3::Value *v542;
  unint64_t v543;
  void *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  WTF *v551;
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  char *v556;
  char *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  BOOL v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  BOOL v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  BOOL v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  BOOL v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  BOOL v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  BOOL v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  BOOL v607;
  uint64_t v608;
  uint64_t v609;
  BOOL v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  BOOL v620;
  uint64_t v621;
  uint64_t v622;
  BOOL v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  WTF *v658;
  WTF *v659;
  WTF *v660;
  WTF *v661;
  WTF *v662;
  WTF *v663;
  WTF *v664;
  WTF *v665;
  WTF *v666;
  WTF *v667;
  WTF *v668;
  JSC::FTL::IndexedAbstractHeap *v669;
  JSC::FTL::IndexedAbstractHeap *v670;
  JSC::FTL::IndexedAbstractHeap *v671;
  JSC::FTL::IndexedAbstractHeap *v672;
  JSC::FTL::IndexedAbstractHeap *v673;
  uint64_t v674;
  uint64_t v675;
  JSC::FTL::IndexedAbstractHeap *v676;
  JSC::FTL::IndexedAbstractHeap *v677;
  JSC::FTL::IndexedAbstractHeap *v678;
  WTF *v679;
  uint64_t v680;
  _BYTE v681[32];
  __n128 v682;
  WTF *v683;
  uint64_t v684;
  char v685;
  uint64_t *v686;

  v2 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v3 = *((_QWORD *)v2 + 9);
  switch(*(_BYTE *)(v3 + 9))
  {
    case '@':
      v4 = *((_QWORD *)v2 + 10);
      v679 = (WTF *)v681;
      v680 = 3;
      v5 = (uint64_t *)*(unsigned int *)(v4 + 12);
      if ((_DWORD)v5)
      {
        v6 = 0;
        do
        {
          v7 = ++v6 + *(_DWORD *)(*((_QWORD *)this + 3528) + 24);
          if (*(_DWORD *)(*(_QWORD *)this + 164) <= v7)
          {
            __break(0xC471u);
            JUMPOUT(0x197D57EC0);
          }
          v683 = v8;
          v9 = HIDWORD(v680);
          if (HIDWORD(v680) == (_DWORD)v680)
          {
            v10 = (_QWORD *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v679, HIDWORD(v680) + 1, (unint64_t)&v683);
            v9 = HIDWORD(v680);
            *((_QWORD *)v679 + HIDWORD(v680)) = *v10;
          }
          else
          {
            *((_QWORD *)v679 + HIDWORD(v680)) = v8;
          }
          HIDWORD(v680) = v9 + 1;
        }
        while (*(_DWORD *)(v4 + 12) > v6);
        v5 = (uint64_t *)*((_QWORD *)this + 3528);
        v3 = v5[9];
      }
      v11 = JSC::B3::Procedure::addBlock(v5, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v12 = (JSC::B3::BasicBlock *)v11;
      v13 = *((_QWORD *)this + 3473);
      if (v13)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v13, (uint64_t)v11);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v11;
        v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v48 = 0u;
        *((_OWORD *)v48 + 1) = 0u;
        v48[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v48;
        v686 = v48;
        v48[2] = v12;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v49, v50, v51, v52, v53, (uint64_t)&v683);
        v14 = v686;
        v54 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v14[1] = (uint64_t)v54;
        *v54 = v14;
        *((_QWORD *)this + 3479) = v14;
      }
      v55 = JSC::B3::Procedure::addBlock(v14, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v56 = v55;
      v57 = *((_QWORD *)this + 3473);
      if (v57)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v57, (uint64_t)v55);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v55;
        v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v78 = 0u;
        *((_OWORD *)v78 + 1) = 0u;
        v78[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v78;
        v686 = v78;
        v78[2] = v56;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v79, v80, v81, v82, v83, (uint64_t)&v683);
        v84 = v686;
        v85 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v84[1] = (uint64_t)v85;
        *v85 = v84;
        *((_QWORD *)this + 3479) = v84;
      }
      v86 = (WTF *)*((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v12;
      if (*(_DWORD *)(v4 + 12) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197D573D4);
      }
      v664 = v86;
      v669 = (JSC::FTL::IndexedAbstractHeap *)v3;
      v88 = *((_QWORD *)this + 3472);
      v89 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v90 = *((_QWORD *)this + 3471);
      v91 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v91 + 8) = -1;
      *(_WORD *)(v91 + 12) = 152;
      *(_BYTE *)(v91 + 20) = 1;
      *(_QWORD *)v91 = &unk_1E357EDA0;
      *(_DWORD *)(v91 + 16) = 0;
      *(_QWORD *)(v91 + 40) = 0;
      *(_QWORD *)(v91 + 48) = v87;
      *(_QWORD *)(v91 + 24) = v90;
      *(_QWORD *)(v91 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v89, (JSC::B3::Value *)v91);
      v683 = (WTF *)v91;
      v95 = (char **)(v88 + 8);
      v96 = *(unsigned int *)(v88 + 20);
      if ((_DWORD)v96 == *(_DWORD *)(v88 + 16))
      {
        v435 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v95, v96 + 1, (unint64_t)&v683);
        v96 = *(unsigned int *)(v88 + 20);
        *(_QWORD *)(*(_QWORD *)(v88 + 8) + 8 * v96) = *(_QWORD *)v435;
        v97 = v683;
      }
      else
      {
        *(_QWORD *)&(*v95)[8 * v96] = v91;
        v97 = (WTF *)v91;
      }
      *(_DWORD *)(v88 + 20) = v96 + 1;
      *((_QWORD *)v97 + 4) = v88;
      v98 = *((_QWORD *)this + 3472);
      v99 = *((_QWORD *)this + 3470);
      v100 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v56;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v98, v99, 154, v100, (uint64_t *)&v683, v92, v93, v94);
      *((_QWORD *)this + 3472) = v12;
      *((_QWORD *)this + 3473) = v56;
      v649 = *(_QWORD *)(*(_QWORD *)this + 16);
      v101 = (WTF *)*((_QWORD *)this + 3485);
      v102 = (WTF **)WTF::fastMalloc((WTF *)8);
      *v102 = v101;
      v103 = *((_QWORD *)this + 3524);
      if ((v103 & 1) != 0)
      {
        v558 = *(_QWORD *)(v103 & 0xFFFFFFFF8);
        if ((v103 & 2) != 0
          || (v559 = *(unsigned int *)((v103 & 0xFFFFFFFF8) + 8), (_DWORD)v559 == 0x3FFFFFFF)
          || (_DWORD)v559 == -1)
        {
          v560 = 2;
        }
        else if (v559 >> 28)
        {
          v629 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v629 = v558;
          *(_DWORD *)(v629 + 8) = v559;
          v560 = 1;
          v558 = v629;
        }
        else
        {
          v560 = v558;
          v558 = v559 << 36;
        }
        v103 = v558 | v560;
      }
      v104 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
      v658 = (WTF *)v102;
      v683 = *v102;
      v684 = 0;
      v685 = 3;
      JSC::B3::StackmapValue::append(v104, (uint64_t)v683, (unint64_t)&v684);
      *((_QWORD *)v104 + 8) |= 0x30000uLL;
      *((_QWORD *)v104 + 10) |= 0x30000uLL;
      v110 = *((_QWORD *)this + 1);
      v111 = v683;
      if (v683)
      {
        do
          v112 = __ldaxr((unsigned int *)v111);
        while (__stlxr(v112 + 1, (unsigned int *)v111));
      }
      v113 = v103;
      if ((v103 & 1) != 0)
      {
        v561 = *(_QWORD *)(v103 & 0xFFFFFFFF8);
        if ((v103 & 2) != 0
          || ((v562 = *(unsigned int *)((v103 & 0xFFFFFFFF8) + 8), (_DWORD)v562 != 0x3FFFFFFF)
            ? (v563 = (_DWORD)v562 == -1)
            : (v563 = 1),
              v563))
        {
          v564 = 2;
        }
        else
        {
          v646 = *(_QWORD *)(v103 & 0xFFFFFFFF8);
          if (v562 >> 28)
          {
            v630 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v630 = v646;
            *(_DWORD *)(v630 + 8) = v562;
            v564 = 1;
            v561 = v630;
          }
          else
          {
            v564 = *(_QWORD *)(v103 & 0xFFFFFFFF8);
            v561 = v562 << 36;
          }
        }
        v113 = v561 | v564;
      }
      v114 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(v114 + 8) = 1;
      *(_QWORD *)v114 = &off_1E35776F8;
      *(_QWORD *)(v114 + 16) = v649;
      *(_QWORD *)(v114 + 24) = operationNewArrayIterator;
      *(_QWORD *)(v114 + 32) = v669;
      if (v111)
      {
        do
          v122 = __ldaxr((unsigned int *)v111);
        while (__stlxr(v122 + 1, (unsigned int *)v111));
      }
      *(_QWORD *)(v114 + 40) = v111;
      *(_QWORD *)(v114 + 48) = v110;
      v123 = v113;
      if ((v113 & 1) != 0)
      {
        v565 = *(_QWORD *)(v113 & 0xFFFFFFFF8);
        if ((v113 & 2) != 0
          || ((v566 = *(unsigned int *)((v113 & 0xFFFFFFFF8) + 8), (_DWORD)v566 != 0x3FFFFFFF)
            ? (v567 = (_DWORD)v566 == -1)
            : (v567 = 1),
              v567))
        {
          v568 = 2;
        }
        else
        {
          v656 = *(_QWORD *)(v113 & 0xFFFFFFFF8);
          v676 = (JSC::FTL::IndexedAbstractHeap *)v114;
          if (v566 >> 28)
          {
            v631 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v631 = v656;
            *(_DWORD *)(v631 + 8) = v566;
            v568 = 1;
            v565 = v631;
          }
          else
          {
            v568 = *(_QWORD *)(v113 & 0xFFFFFFFF8);
            v565 = v566 << 36;
          }
          v114 = (uint64_t)v676;
        }
        v123 = v565 | v568;
      }
      *(_QWORD *)(v114 + 56) = v123;
      v124 = (unsigned int *)*((_QWORD *)v104 + 7);
      *((_QWORD *)v104 + 7) = v114;
      if (!v124)
        goto LABEL_67;
      v125 = v124 + 2;
      do
      {
        v126 = __ldaxr(v125);
        v127 = v126 - 1;
      }
      while (__stlxr(v127, v125));
      if (!v127)
      {
        atomic_store(1u, v124 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
        if ((v113 & 1) == 0)
          goto LABEL_68;
      }
      else
      {
LABEL_67:
        if ((v113 & 1) == 0)
          goto LABEL_68;
      }
      if ((v113 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v113 & 0xFFFFFFFF8, v115, v116, v117, v118, v119, v120, v121);
LABEL_68:
      if (v111)
      {
        do
        {
          v128 = __ldaxr((unsigned int *)v111);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, (unsigned int *)v111));
        if (!v129)
        {
          atomic_store(1u, (unsigned int *)v111);
          v591 = *((_QWORD *)v111 + 4);
          if ((v591 & 1) != 0 && (v591 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v591 & 0xFFFFFFFF8, v115, v116, v117, v118, v119, v120, v121);
          v592 = *((_QWORD *)v111 + 3);
          if ((v592 & 1) != 0 && (v592 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v592 & 0xFFFFFFFF8, v115, v116, v117, v118, v119, v120, v121);
          WTF::fastFree((unint64_t)v111, v115, v116, v117, v118, v119, v120, v121);
        }
      }
      v130 = v683;
      v683 = 0;
      if (!v130)
        goto LABEL_74;
      do
      {
        v131 = __ldaxr((unsigned int *)v130);
        v132 = v131 - 1;
      }
      while (__stlxr(v132, (unsigned int *)v130));
      if (v132)
      {
LABEL_74:
        if ((v103 & 1) == 0)
          goto LABEL_75;
        goto LABEL_373;
      }
      atomic_store(1u, (unsigned int *)v130);
      v593 = *((_QWORD *)v130 + 4);
      if ((v593 & 1) != 0 && (v593 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v593 & 0xFFFFFFFF8, v115, v116, v117, v118, v119, v120, v121);
      v594 = *((_QWORD *)v130 + 3);
      if ((v594 & 1) != 0 && (v594 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v594 & 0xFFFFFFFF8, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree((unint64_t)v130, v115, v116, v117, v118, v119, v120, v121);
      if ((v103 & 1) != 0)
      {
LABEL_373:
        if ((v103 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v103 & 0xFFFFFFFF8, v115, v116, v117, v118, v119, v120, v121);
      }
LABEL_75:
      WTF::fastFree((unint64_t)v658, v115, v116, v117, v118, v119, v120, v121);
      v133 = *((_QWORD *)this + 3472);
      v134 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v135 = *((_QWORD *)this + 3471);
      v136 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v136 + 8) = -1;
      *(_WORD *)(v136 + 12) = 152;
      *(_DWORD *)(v136 + 16) = 0;
      *(_BYTE *)(v136 + 20) = 1;
      *(_QWORD *)v136 = &unk_1E357EDA0;
      *(_QWORD *)(v136 + 40) = 0;
      *(_QWORD *)(v136 + 48) = v104;
      *(_QWORD *)(v136 + 24) = v135;
      *(_QWORD *)(v136 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v134, (JSC::B3::Value *)v136);
      v683 = (WTF *)v136;
      v140 = (char **)(v133 + 8);
      v141 = *(unsigned int *)(v133 + 20);
      if ((_DWORD)v141 == *(_DWORD *)(v133 + 16))
      {
        v436 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v140, v141 + 1, (unint64_t)&v683);
        v141 = *(unsigned int *)(v133 + 20);
        *(_QWORD *)(*(_QWORD *)(v133 + 8) + 8 * v141) = *(_QWORD *)v436;
        v142 = v683;
      }
      else
      {
        *(_QWORD *)&(*v140)[8 * v141] = v136;
        v142 = (WTF *)v136;
      }
      *(_DWORD *)(v133 + 20) = v141 + 1;
      *((_QWORD *)v142 + 4) = v133;
      v143 = *((_QWORD *)this + 3472);
      v144 = *((_QWORD *)this + 3470);
      v145 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v56;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v143, v144, 154, v145, (uint64_t *)&v683, v137, v138, v139);
      *((_QWORD *)this + 3472) = v56;
      *((_QWORD *)this + 3473) = v664;
      v146 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v147 = *((_QWORD *)this + 3471);
      v148 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v148 = off_1E357F5F0;
      *(_DWORD *)(v148 + 8) = -1;
      *(_WORD *)(v148 + 12) = 153;
      *(_DWORD *)(v148 + 16) = 2;
      *(_BYTE *)(v148 + 20) = 0;
      *(_QWORD *)(v148 + 24) = v147;
      *(_QWORD *)(v148 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v146, (JSC::B3::Value *)v148);
      v683 = (WTF *)v148;
      v149 = (char **)(v56 + 1);
      v150 = *((unsigned int *)v56 + 5);
      if ((_DWORD)v150 == *((_DWORD *)v56 + 4))
      {
        v437 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v149, v150 + 1, (unint64_t)&v683);
        v150 = *((unsigned int *)v56 + 5);
        *(_QWORD *)(v56[1] + 8 * v150) = *(_QWORD *)v437;
        v151 = v683;
      }
      else
      {
        *(_QWORD *)&(*v149)[8 * v150] = v148;
        v151 = (WTF *)v148;
      }
      *((_DWORD *)v56 + 5) = v150 + 1;
      *((_QWORD *)v151 + 4) = v56;
      if ((*(_WORD *)(v91 + 12) & 0xFFF) == 0x98)
        v152 = v91;
      else
        v152 = 0;
      *(_QWORD *)(v152 + 40) = v148;
      if ((*(_WORD *)(v136 + 12) & 0xFFF) == 0x98)
        v153 = v136;
      else
        v153 = 0;
      *(_QWORD *)(v153 + 40) = v148;
      if (*(_DWORD *)(v4 + 12))
      {
        v154 = 0;
        v155 = (char *)this + 11696;
        do
        {
          v156 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v154);
          v157 = HIDWORD(v156);
          if (HIDWORD(v156) >= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x197D57334);
          }
          if (v154 >= HIDWORD(v680))
          {
            __break(0xC471u);
            JUMPOUT(0x197D57ED8);
          }
          v158 = *((_QWORD *)v679 + v154);
          if (!*(_QWORD *)&v155[48 * HIDWORD(v156) + 40])
            JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), (JSC::FTL::AbstractHeap *)&v155[48 * HIDWORD(v156)], HIDWORD(v156));
          v159 = *(_QWORD *)&v155[48 * v157 + 24];
          v160 = v148;
          if (v159)
          {
            v161 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v159);
            v160 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v148, v161);
          }
          JSC::FTL::Output::store((uint64_t)this + 27640, v158, (const JSC::FTL::AbstractHeap *)&v155[48 * v157], v160);
          ++v154;
        }
        while (v154 < *(unsigned int *)(v4 + 12));
      }
      goto LABEL_292;
    case 'A':
      v22 = *((_QWORD *)v2 + 10);
      v679 = (WTF *)v681;
      v680 = 4;
      v23 = (uint64_t *)*(unsigned int *)(v22 + 12);
      if ((_DWORD)v23)
      {
        v24 = 0;
        do
        {
          v25 = ++v24 + *(_DWORD *)(*((_QWORD *)this + 3528) + 24);
          if (*(_DWORD *)(*(_QWORD *)this + 164) <= v25)
          {
            __break(0xC471u);
            JUMPOUT(0x197D57ED0);
          }
          v683 = v26;
          v27 = HIDWORD(v680);
          if (HIDWORD(v680) == (_DWORD)v680)
          {
            v28 = (_QWORD *)WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v679, HIDWORD(v680) + 1, (unint64_t)&v683);
            v27 = HIDWORD(v680);
            *((_QWORD *)v679 + HIDWORD(v680)) = *v28;
          }
          else
          {
            *((_QWORD *)v679 + HIDWORD(v680)) = v26;
          }
          HIDWORD(v680) = v27 + 1;
        }
        while (*(_DWORD *)(v22 + 12) > v24);
        v23 = (uint64_t *)*((_QWORD *)this + 3528);
        v3 = v23[9];
      }
      v44 = JSC::B3::Procedure::addBlock(v23, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v45 = (JSC::B3::BasicBlock *)v44;
      v46 = *((_QWORD *)this + 3473);
      if (v46)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v46, (uint64_t)v44);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v44;
        v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v68 = 0u;
        *((_OWORD *)v68 + 1) = 0u;
        v68[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v68;
        v686 = v68;
        v68[2] = v45;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v69, v70, v71, v72, v73, (uint64_t)&v683);
        v47 = v686;
        v74 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v47[1] = (uint64_t)v74;
        *v74 = v47;
        *((_QWORD *)this + 3479) = v47;
      }
      v75 = JSC::B3::Procedure::addBlock(v47, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v76 = v75;
      v77 = *((_QWORD *)this + 3473);
      if (v77)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v77, (uint64_t)v75);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v75;
        v246 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v246 = 0u;
        *((_OWORD *)v246 + 1) = 0u;
        v246[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v246;
        v686 = v246;
        v246[2] = v76;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v247, v248, v249, v250, v251, (uint64_t)&v683);
        v252 = v686;
        v253 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v252[1] = (uint64_t)v253;
        *v253 = v252;
        *((_QWORD *)this + 3479) = v252;
      }
      v254 = (WTF *)*((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v45;
      if (*(_DWORD *)(v22 + 12) != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197D57414);
      }
      v666 = v254;
      v671 = (JSC::FTL::IndexedAbstractHeap *)v3;
      v256 = *((_QWORD *)this + 3472);
      v257 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v258 = *((_QWORD *)this + 3471);
      v259 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v259 + 8) = -1;
      *(_WORD *)(v259 + 12) = 152;
      *(_BYTE *)(v259 + 20) = 1;
      *(_QWORD *)v259 = &unk_1E357EDA0;
      *(_DWORD *)(v259 + 16) = 0;
      *(_QWORD *)(v259 + 40) = 0;
      *(_QWORD *)(v259 + 48) = v255;
      *(_QWORD *)(v259 + 24) = v258;
      *(_QWORD *)(v259 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v257, (JSC::B3::Value *)v259);
      v683 = (WTF *)v259;
      v263 = (char **)(v256 + 8);
      v264 = *(unsigned int *)(v256 + 20);
      if ((_DWORD)v264 == *(_DWORD *)(v256 + 16))
      {
        v441 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v263, v264 + 1, (unint64_t)&v683);
        v264 = *(unsigned int *)(v256 + 20);
        *(_QWORD *)(*(_QWORD *)(v256 + 8) + 8 * v264) = *(_QWORD *)v441;
        v265 = v683;
      }
      else
      {
        *(_QWORD *)&(*v263)[8 * v264] = v259;
        v265 = (WTF *)v259;
      }
      *(_DWORD *)(v256 + 20) = v264 + 1;
      *((_QWORD *)v265 + 4) = v256;
      v266 = *((_QWORD *)this + 3472);
      v267 = *((_QWORD *)this + 3470);
      v268 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v76;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v266, v267, 154, v268, (uint64_t *)&v683, v260, v261, v262);
      *((_QWORD *)this + 3472) = v45;
      *((_QWORD *)this + 3473) = v76;
      v651 = *(_QWORD *)(*(_QWORD *)this + 16);
      v269 = (WTF *)*((_QWORD *)this + 3485);
      v270 = (WTF **)WTF::fastMalloc((WTF *)8);
      *v270 = v269;
      v271 = *((_QWORD *)this + 3524);
      if ((v271 & 1) != 0)
      {
        v580 = *(_QWORD *)(v271 & 0xFFFFFFFF8);
        if ((v271 & 2) != 0
          || (v581 = *(unsigned int *)((v271 & 0xFFFFFFFF8) + 8), (_DWORD)v581 == 0x3FFFFFFF)
          || (_DWORD)v581 == -1)
        {
          v582 = 2;
        }
        else if (v581 >> 28)
        {
          v635 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v635 = v580;
          *(_DWORD *)(v635 + 8) = v581;
          v582 = 1;
          v580 = v635;
        }
        else
        {
          v582 = v580;
          v580 = v581 << 36;
        }
        v271 = v580 | v582;
      }
      v272 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
      v660 = (WTF *)v270;
      v683 = *v270;
      v684 = 0;
      v685 = 3;
      JSC::B3::StackmapValue::append(v272, (uint64_t)v683, (unint64_t)&v684);
      *((_QWORD *)v272 + 8) |= 0x30000uLL;
      *((_QWORD *)v272 + 10) |= 0x30000uLL;
      v278 = *((_QWORD *)this + 1);
      v279 = v683;
      if (v683)
      {
        do
          v280 = __ldaxr((unsigned int *)v279);
        while (__stlxr(v280 + 1, (unsigned int *)v279));
      }
      v281 = v271;
      if ((v271 & 1) != 0)
      {
        v583 = *(_QWORD *)(v271 & 0xFFFFFFFF8);
        if ((v271 & 2) != 0
          || ((v584 = *(unsigned int *)((v271 & 0xFFFFFFFF8) + 8), (_DWORD)v584 != 0x3FFFFFFF)
            ? (v585 = (_DWORD)v584 == -1)
            : (v585 = 1),
              v585))
        {
          v586 = 2;
        }
        else
        {
          v648 = *(_QWORD *)(v271 & 0xFFFFFFFF8);
          if (v584 >> 28)
          {
            v636 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v636 = v648;
            *(_DWORD *)(v636 + 8) = v584;
            v586 = 1;
            v583 = v636;
          }
          else
          {
            v586 = *(_QWORD *)(v271 & 0xFFFFFFFF8);
            v583 = v584 << 36;
          }
        }
        v281 = v583 | v586;
      }
      v282 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(v282 + 8) = 1;
      *(_QWORD *)v282 = &off_1E3577770;
      *(_QWORD *)(v282 + 16) = v651;
      *(_QWORD *)(v282 + 24) = operationNewMapIterator;
      *(_QWORD *)(v282 + 32) = v671;
      if (v279)
      {
        do
          v290 = __ldaxr((unsigned int *)v279);
        while (__stlxr(v290 + 1, (unsigned int *)v279));
      }
      *(_QWORD *)(v282 + 40) = v279;
      *(_QWORD *)(v282 + 48) = v278;
      v291 = v281;
      if ((v281 & 1) != 0)
      {
        v587 = *(_QWORD *)(v281 & 0xFFFFFFFF8);
        if ((v281 & 2) != 0
          || ((v588 = *(unsigned int *)((v281 & 0xFFFFFFFF8) + 8), (_DWORD)v588 != 0x3FFFFFFF)
            ? (v589 = (_DWORD)v588 == -1)
            : (v589 = 1),
              v589))
        {
          v590 = 2;
        }
        else
        {
          v657 = *(_QWORD *)(v281 & 0xFFFFFFFF8);
          v678 = (JSC::FTL::IndexedAbstractHeap *)v282;
          if (v588 >> 28)
          {
            v637 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v637 = v657;
            *(_DWORD *)(v637 + 8) = v588;
            v590 = 1;
            v587 = v637;
          }
          else
          {
            v590 = *(_QWORD *)(v281 & 0xFFFFFFFF8);
            v587 = v588 << 36;
          }
          v282 = (uint64_t)v678;
        }
        v291 = v587 | v590;
      }
      *(_QWORD *)(v282 + 56) = v291;
      v292 = (unsigned int *)*((_QWORD *)v272 + 7);
      *((_QWORD *)v272 + 7) = v282;
      if (!v292)
        goto LABEL_153;
      v293 = v292 + 2;
      do
      {
        v294 = __ldaxr(v293);
        v295 = v294 - 1;
      }
      while (__stlxr(v295, v293));
      if (!v295)
      {
        atomic_store(1u, v292 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v292 + 8))(v292);
        if ((v281 & 1) == 0)
          goto LABEL_154;
      }
      else
      {
LABEL_153:
        if ((v281 & 1) == 0)
          goto LABEL_154;
      }
      if ((v281 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v281 & 0xFFFFFFFF8, v283, v284, v285, v286, v287, v288, v289);
LABEL_154:
      if (v279)
      {
        do
        {
          v296 = __ldaxr((unsigned int *)v279);
          v297 = v296 - 1;
        }
        while (__stlxr(v297, (unsigned int *)v279));
        if (!v297)
        {
          atomic_store(1u, (unsigned int *)v279);
          v599 = *((_QWORD *)v279 + 4);
          if ((v599 & 1) != 0 && (v599 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v599 & 0xFFFFFFFF8, v283, v284, v285, v286, v287, v288, v289);
          v600 = *((_QWORD *)v279 + 3);
          if ((v600 & 1) != 0 && (v600 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v600 & 0xFFFFFFFF8, v283, v284, v285, v286, v287, v288, v289);
          WTF::fastFree((unint64_t)v279, v283, v284, v285, v286, v287, v288, v289);
        }
      }
      v298 = v683;
      v683 = 0;
      if (!v298)
        goto LABEL_160;
      do
      {
        v299 = __ldaxr((unsigned int *)v298);
        v300 = v299 - 1;
      }
      while (__stlxr(v300, (unsigned int *)v298));
      if (v300)
      {
LABEL_160:
        if ((v271 & 1) == 0)
          goto LABEL_161;
        goto LABEL_395;
      }
      atomic_store(1u, (unsigned int *)v298);
      v601 = *((_QWORD *)v298 + 4);
      if ((v601 & 1) != 0 && (v601 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v601 & 0xFFFFFFFF8, v283, v284, v285, v286, v287, v288, v289);
      v602 = *((_QWORD *)v298 + 3);
      if ((v602 & 1) != 0 && (v602 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v602 & 0xFFFFFFFF8, v283, v284, v285, v286, v287, v288, v289);
      WTF::fastFree((unint64_t)v298, v283, v284, v285, v286, v287, v288, v289);
      if ((v271 & 1) != 0)
      {
LABEL_395:
        if ((v271 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v271 & 0xFFFFFFFF8, v283, v284, v285, v286, v287, v288, v289);
      }
LABEL_161:
      WTF::fastFree((unint64_t)v660, v283, v284, v285, v286, v287, v288, v289);
      v301 = *((_QWORD *)this + 3472);
      v302 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v303 = *((_QWORD *)this + 3471);
      v304 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v304 + 8) = -1;
      *(_WORD *)(v304 + 12) = 152;
      *(_DWORD *)(v304 + 16) = 0;
      *(_BYTE *)(v304 + 20) = 1;
      *(_QWORD *)v304 = &unk_1E357EDA0;
      *(_QWORD *)(v304 + 40) = 0;
      *(_QWORD *)(v304 + 48) = v272;
      *(_QWORD *)(v304 + 24) = v303;
      *(_QWORD *)(v304 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v302, (JSC::B3::Value *)v304);
      v683 = (WTF *)v304;
      v308 = (char **)(v301 + 8);
      v309 = *(unsigned int *)(v301 + 20);
      if ((_DWORD)v309 == *(_DWORD *)(v301 + 16))
      {
        v442 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v308, v309 + 1, (unint64_t)&v683);
        v309 = *(unsigned int *)(v301 + 20);
        *(_QWORD *)(*(_QWORD *)(v301 + 8) + 8 * v309) = *(_QWORD *)v442;
        v310 = v683;
      }
      else
      {
        *(_QWORD *)&(*v308)[8 * v309] = v304;
        v310 = (WTF *)v304;
      }
      *(_DWORD *)(v301 + 20) = v309 + 1;
      *((_QWORD *)v310 + 4) = v301;
      v311 = *((_QWORD *)this + 3472);
      v312 = *((_QWORD *)this + 3470);
      v313 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v76;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v311, v312, 154, v313, (uint64_t *)&v683, v305, v306, v307);
      *((_QWORD *)this + 3472) = v76;
      *((_QWORD *)this + 3473) = v666;
      v314 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v315 = *((_QWORD *)this + 3471);
      v148 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v148 = off_1E357F5F0;
      *(_DWORD *)(v148 + 8) = -1;
      *(_WORD *)(v148 + 12) = 153;
      *(_DWORD *)(v148 + 16) = 2;
      *(_BYTE *)(v148 + 20) = 0;
      *(_QWORD *)(v148 + 24) = v315;
      *(_QWORD *)(v148 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v314, (JSC::B3::Value *)v148);
      v683 = (WTF *)v148;
      v316 = (char **)(v76 + 1);
      v317 = *((unsigned int *)v76 + 5);
      if ((_DWORD)v317 == *((_DWORD *)v76 + 4))
      {
        v443 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v316, v317 + 1, (unint64_t)&v683);
        v317 = *((unsigned int *)v76 + 5);
        *(_QWORD *)(v76[1] + 8 * v317) = *(_QWORD *)v443;
        v318 = v683;
      }
      else
      {
        *(_QWORD *)&(*v316)[8 * v317] = v148;
        v318 = (WTF *)v148;
      }
      *((_DWORD *)v76 + 5) = v317 + 1;
      *((_QWORD *)v318 + 4) = v76;
      if ((*(_WORD *)(v259 + 12) & 0xFFF) == 0x98)
        v319 = v259;
      else
        v319 = 0;
      *(_QWORD *)(v319 + 40) = v148;
      if ((*(_WORD *)(v304 + 12) & 0xFFF) == 0x98)
        v320 = v304;
      else
        v320 = 0;
      *(_QWORD *)(v320 + 40) = v148;
      if (*(_DWORD *)(v22 + 12))
      {
        v321 = 0;
        v322 = (char *)this + 11696;
        do
        {
          v323 = *(_QWORD *)(*(_QWORD *)v22 + 8 * v321);
          if (v323 >> 34)
          {
            __break(0xC471u);
            JUMPOUT(0x197D57374);
          }
          if (v321 >= HIDWORD(v680))
          {
            __break(0xC471u);
            JUMPOUT(0x197D57EE8);
          }
          v324 = HIDWORD(v323);
          v325 = *((_QWORD *)v679 + v321);
          v326 = (JSC::FTL::AbstractHeap *)&v322[48 * HIDWORD(v323)];
          if (!*((_QWORD *)v326 + 5))
            JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), v326, v324);
          v327 = *(_QWORD *)&v322[48 * v324 + 24];
          v328 = v148;
          if (v327)
          {
            v329 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v327);
            v328 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v148, v329);
          }
          JSC::FTL::Output::store((uint64_t)this + 27640, v325, v326, v328);
          ++v321;
        }
        while (v321 < *(unsigned int *)(v22 + 12));
      }
      goto LABEL_292;
    case 'B':
      v15 = *((_QWORD *)v2 + 10);
      v679 = (WTF *)v681;
      v680 = 4;
      v16 = (uint64_t *)*(unsigned int *)(v15 + 12);
      if ((_DWORD)v16)
      {
        v17 = 0;
        do
        {
          v18 = ++v17 + *(_DWORD *)(*((_QWORD *)this + 3528) + 24);
          if (*(_DWORD *)(*(_QWORD *)this + 164) <= v18)
          {
            __break(0xC471u);
            JUMPOUT(0x197D57EC8);
          }
          v683 = v19;
          v20 = HIDWORD(v680);
          if (HIDWORD(v680) == (_DWORD)v680)
          {
            v21 = (_QWORD *)WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v679, HIDWORD(v680) + 1, (unint64_t)&v683);
            v20 = HIDWORD(v680);
            *((_QWORD *)v679 + HIDWORD(v680)) = *v21;
          }
          else
          {
            *((_QWORD *)v679 + HIDWORD(v680)) = v19;
          }
          HIDWORD(v680) = v20 + 1;
        }
        while (*(_DWORD *)(v15 + 12) > v17);
        v16 = (uint64_t *)*((_QWORD *)this + 3528);
        v3 = v16[9];
      }
      v40 = JSC::B3::Procedure::addBlock(v16, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v41 = (JSC::B3::BasicBlock *)v40;
      v42 = *((_QWORD *)this + 3473);
      if (v42)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v42, (uint64_t)v40);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v40;
        v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v58 = 0u;
        *((_OWORD *)v58 + 1) = 0u;
        v58[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v58;
        v686 = v58;
        v58[2] = v41;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v59, v60, v61, v62, v63, (uint64_t)&v683);
        v43 = v686;
        v64 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v43[1] = (uint64_t)v64;
        *v64 = v43;
        *((_QWORD *)this + 3479) = v43;
      }
      v65 = JSC::B3::Procedure::addBlock(v43, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v66 = v65;
      v67 = *((_QWORD *)this + 3473);
      if (v67)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v67, (uint64_t)v65);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v65;
        v162 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v162 = 0u;
        *((_OWORD *)v162 + 1) = 0u;
        v162[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v162;
        v686 = v162;
        v162[2] = v66;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v163, v164, v165, v166, v167, (uint64_t)&v683);
        v168 = v686;
        v169 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v168[1] = (uint64_t)v169;
        *v169 = v168;
        *((_QWORD *)this + 3479) = v168;
      }
      v170 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v41;
      if (*(_DWORD *)(v15 + 12) != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197D573F4);
      }
      v650 = v170;
      v670 = (JSC::FTL::IndexedAbstractHeap *)v3;
      v172 = *((_QWORD *)this + 3472);
      v173 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v174 = *((_QWORD *)this + 3471);
      v175 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v175 + 8) = -1;
      *(_WORD *)(v175 + 12) = 152;
      *(_BYTE *)(v175 + 20) = 1;
      *(_QWORD *)v175 = &unk_1E357EDA0;
      *(_DWORD *)(v175 + 16) = 0;
      *(_QWORD *)(v175 + 40) = 0;
      *(_QWORD *)(v175 + 48) = v171;
      *(_QWORD *)(v175 + 24) = v174;
      *(_QWORD *)(v175 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v173, (JSC::B3::Value *)v175);
      v683 = (WTF *)v175;
      v179 = (char **)(v172 + 8);
      v180 = *(unsigned int *)(v172 + 20);
      if ((_DWORD)v180 == *(_DWORD *)(v172 + 16))
      {
        v438 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v179, v180 + 1, (unint64_t)&v683);
        v180 = *(unsigned int *)(v172 + 20);
        *(_QWORD *)(*(_QWORD *)(v172 + 8) + 8 * v180) = *(_QWORD *)v438;
        v181 = v683;
      }
      else
      {
        *(_QWORD *)&(*v179)[8 * v180] = v175;
        v181 = (WTF *)v175;
      }
      *(_DWORD *)(v172 + 20) = v180 + 1;
      *((_QWORD *)v181 + 4) = v172;
      v182 = *((_QWORD *)this + 3472);
      v183 = *((_QWORD *)this + 3470);
      v184 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v66;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v182, v183, 154, v184, (uint64_t *)&v683, v176, v177, v178);
      *((_QWORD *)this + 3472) = v41;
      *((_QWORD *)this + 3473) = v66;
      v659 = *(WTF **)(*(_QWORD *)this + 16);
      v185 = (WTF *)*((_QWORD *)this + 3485);
      v186 = (WTF **)WTF::fastMalloc((WTF *)8);
      *v186 = v185;
      v187 = *((_QWORD *)this + 3524);
      if ((v187 & 1) != 0)
      {
        v569 = *(_QWORD *)(v187 & 0xFFFFFFFF8);
        if ((v187 & 2) != 0
          || (v570 = *(unsigned int *)((v187 & 0xFFFFFFFF8) + 8), (_DWORD)v570 == 0x3FFFFFFF)
          || (_DWORD)v570 == -1)
        {
          v571 = 2;
        }
        else if (v570 >> 28)
        {
          v632 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v632 = v569;
          *(_DWORD *)(v632 + 8) = v570;
          v571 = 1;
          v569 = v632;
        }
        else
        {
          v571 = v569;
          v569 = v570 << 36;
        }
        v187 = v569 | v571;
      }
      v188 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
      v665 = (WTF *)v186;
      v683 = *v186;
      v684 = 0;
      v685 = 3;
      JSC::B3::StackmapValue::append(v188, (uint64_t)v683, (unint64_t)&v684);
      *((_QWORD *)v188 + 8) |= 0x30000uLL;
      *((_QWORD *)v188 + 10) |= 0x30000uLL;
      v194 = *((_QWORD *)this + 1);
      v195 = v683;
      if (v683)
      {
        do
          v196 = __ldaxr((unsigned int *)v195);
        while (__stlxr(v196 + 1, (unsigned int *)v195));
      }
      v197 = v187;
      if ((v187 & 1) != 0)
      {
        v572 = *(_QWORD *)(v187 & 0xFFFFFFFF8);
        if ((v187 & 2) != 0
          || ((v573 = *(unsigned int *)((v187 & 0xFFFFFFFF8) + 8), (_DWORD)v573 != 0x3FFFFFFF)
            ? (v574 = (_DWORD)v573 == -1)
            : (v574 = 1),
              v574))
        {
          v575 = 2;
        }
        else
        {
          v647 = *(_QWORD *)(v187 & 0xFFFFFFFF8);
          if (v573 >> 28)
          {
            v633 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v633 = v647;
            *(_DWORD *)(v633 + 8) = v573;
            v575 = 1;
            v572 = v633;
          }
          else
          {
            v575 = *(_QWORD *)(v187 & 0xFFFFFFFF8);
            v572 = v573 << 36;
          }
        }
        v197 = v572 | v575;
      }
      v198 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(v198 + 8) = 1;
      *(_QWORD *)v198 = &off_1E35777E8;
      *(_QWORD *)(v198 + 16) = v659;
      *(_QWORD *)(v198 + 24) = operationNewSetIterator;
      *(_QWORD *)(v198 + 32) = v670;
      if (v195)
      {
        do
          v206 = __ldaxr((unsigned int *)v195);
        while (__stlxr(v206 + 1, (unsigned int *)v195));
      }
      *(_QWORD *)(v198 + 40) = v195;
      *(_QWORD *)(v198 + 48) = v194;
      v207 = v197;
      if ((v197 & 1) != 0)
      {
        v576 = *(_QWORD *)(v197 & 0xFFFFFFFF8);
        if ((v197 & 2) != 0
          || ((v577 = *(unsigned int *)((v197 & 0xFFFFFFFF8) + 8), (_DWORD)v577 != 0x3FFFFFFF)
            ? (v578 = (_DWORD)v577 == -1)
            : (v578 = 1),
              v578))
        {
          v579 = 2;
        }
        else
        {
          v663 = *(WTF **)(v197 & 0xFFFFFFFF8);
          v677 = (JSC::FTL::IndexedAbstractHeap *)v198;
          if (v577 >> 28)
          {
            v634 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v634 = v663;
            *(_DWORD *)(v634 + 8) = v577;
            v579 = 1;
            v576 = v634;
          }
          else
          {
            v579 = *(_QWORD *)(v197 & 0xFFFFFFFF8);
            v576 = v577 << 36;
          }
          v198 = (uint64_t)v677;
        }
        v207 = v576 | v579;
      }
      *(_QWORD *)(v198 + 56) = v207;
      v208 = (unsigned int *)*((_QWORD *)v188 + 7);
      *((_QWORD *)v188 + 7) = v198;
      if (!v208)
        goto LABEL_110;
      v209 = v208 + 2;
      do
      {
        v210 = __ldaxr(v209);
        v211 = v210 - 1;
      }
      while (__stlxr(v211, v209));
      if (!v211)
      {
        atomic_store(1u, v208 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v208 + 8))(v208);
        if ((v197 & 1) == 0)
          goto LABEL_111;
      }
      else
      {
LABEL_110:
        if ((v197 & 1) == 0)
          goto LABEL_111;
      }
      if ((v197 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v197 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
LABEL_111:
      if (v195)
      {
        do
        {
          v212 = __ldaxr((unsigned int *)v195);
          v213 = v212 - 1;
        }
        while (__stlxr(v213, (unsigned int *)v195));
        if (!v213)
        {
          atomic_store(1u, (unsigned int *)v195);
          v595 = *((_QWORD *)v195 + 4);
          if ((v595 & 1) != 0 && (v595 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v595 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
          v596 = *((_QWORD *)v195 + 3);
          if ((v596 & 1) != 0 && (v596 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v596 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
          WTF::fastFree((unint64_t)v195, v199, v200, v201, v202, v203, v204, v205);
        }
      }
      v214 = v683;
      v683 = 0;
      if (!v214)
        goto LABEL_117;
      do
      {
        v215 = __ldaxr((unsigned int *)v214);
        v216 = v215 - 1;
      }
      while (__stlxr(v216, (unsigned int *)v214));
      if (v216)
      {
LABEL_117:
        if ((v187 & 1) == 0)
          goto LABEL_118;
        goto LABEL_384;
      }
      atomic_store(1u, (unsigned int *)v214);
      v597 = *((_QWORD *)v214 + 4);
      if ((v597 & 1) != 0 && (v597 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v597 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
      v598 = *((_QWORD *)v214 + 3);
      if ((v598 & 1) != 0 && (v598 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v598 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
      WTF::fastFree((unint64_t)v214, v199, v200, v201, v202, v203, v204, v205);
      if ((v187 & 1) != 0)
      {
LABEL_384:
        if ((v187 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v187 & 0xFFFFFFFF8, v199, v200, v201, v202, v203, v204, v205);
      }
LABEL_118:
      WTF::fastFree((unint64_t)v665, v199, v200, v201, v202, v203, v204, v205);
      v217 = *((_QWORD *)this + 3472);
      v218 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v219 = *((_QWORD *)this + 3471);
      v220 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v220 + 8) = -1;
      *(_WORD *)(v220 + 12) = 152;
      *(_DWORD *)(v220 + 16) = 0;
      *(_BYTE *)(v220 + 20) = 1;
      *(_QWORD *)v220 = &unk_1E357EDA0;
      *(_QWORD *)(v220 + 40) = 0;
      *(_QWORD *)(v220 + 48) = v188;
      *(_QWORD *)(v220 + 24) = v219;
      *(_QWORD *)(v220 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v218, (JSC::B3::Value *)v220);
      v683 = (WTF *)v220;
      v224 = (char **)(v217 + 8);
      v225 = *(unsigned int *)(v217 + 20);
      if ((_DWORD)v225 == *(_DWORD *)(v217 + 16))
      {
        v439 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v224, v225 + 1, (unint64_t)&v683);
        v225 = *(unsigned int *)(v217 + 20);
        *(_QWORD *)(*(_QWORD *)(v217 + 8) + 8 * v225) = *(_QWORD *)v439;
        v226 = v683;
      }
      else
      {
        *(_QWORD *)&(*v224)[8 * v225] = v220;
        v226 = (WTF *)v220;
      }
      *(_DWORD *)(v217 + 20) = v225 + 1;
      *((_QWORD *)v226 + 4) = v217;
      v227 = *((_QWORD *)this + 3472);
      v228 = *((_QWORD *)this + 3470);
      v229 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v66;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v227, v228, 154, v229, (uint64_t *)&v683, v221, v222, v223);
      *((_QWORD *)this + 3472) = v66;
      *((_QWORD *)this + 3473) = v650;
      v230 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v231 = *((_QWORD *)this + 3471);
      v148 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v148 = off_1E357F5F0;
      *(_DWORD *)(v148 + 8) = -1;
      *(_WORD *)(v148 + 12) = 153;
      *(_DWORD *)(v148 + 16) = 2;
      *(_BYTE *)(v148 + 20) = 0;
      *(_QWORD *)(v148 + 24) = v231;
      *(_QWORD *)(v148 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v230, (JSC::B3::Value *)v148);
      v683 = (WTF *)v148;
      v232 = (char **)(v66 + 1);
      v233 = *((unsigned int *)v66 + 5);
      if ((_DWORD)v233 == *((_DWORD *)v66 + 4))
      {
        v440 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v232, v233 + 1, (unint64_t)&v683);
        v233 = *((unsigned int *)v66 + 5);
        *(_QWORD *)(v66[1] + 8 * v233) = *(_QWORD *)v440;
        v234 = v683;
      }
      else
      {
        *(_QWORD *)&(*v232)[8 * v233] = v148;
        v234 = (WTF *)v148;
      }
      *((_DWORD *)v66 + 5) = v233 + 1;
      *((_QWORD *)v234 + 4) = v66;
      if ((*(_WORD *)(v175 + 12) & 0xFFF) == 0x98)
        v235 = v175;
      else
        v235 = 0;
      *(_QWORD *)(v235 + 40) = v148;
      if ((*(_WORD *)(v220 + 12) & 0xFFF) == 0x98)
        v236 = v220;
      else
        v236 = 0;
      *(_QWORD *)(v236 + 40) = v148;
      if (*(_DWORD *)(v15 + 12))
      {
        v237 = 0;
        v238 = (char *)this + 11696;
        do
        {
          v239 = *(_QWORD *)(*(_QWORD *)v15 + 8 * v237);
          if (v239 >> 34)
          {
            __break(0xC471u);
            JUMPOUT(0x197D57354);
          }
          if (v237 >= HIDWORD(v680))
          {
            __break(0xC471u);
            JUMPOUT(0x197D57EE0);
          }
          v240 = HIDWORD(v239);
          v241 = *((_QWORD *)v679 + v237);
          v242 = (JSC::FTL::AbstractHeap *)&v238[48 * HIDWORD(v239)];
          if (!*((_QWORD *)v242 + 5))
            JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), v242, v240);
          v243 = *(_QWORD *)&v238[48 * v240 + 24];
          v244 = v148;
          if (v243)
          {
            v245 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v243);
            v244 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v148, v245);
          }
          JSC::FTL::Output::store((uint64_t)this + 27640, v241, v242, v244);
          ++v237;
        }
        while (v237 < *(unsigned int *)(v15 + 12));
      }
      goto LABEL_292;
    case 'D':
      v29 = *((_QWORD *)v2 + 10);
      if (&JSC::JSInternalPromise::s_info != (char **)(16 * *(unsigned int *)(v3 + 76)))
      {
        v679 = (WTF *)v681;
        v680 = 2;
        v30 = (uint64_t *)*(unsigned int *)(v29 + 12);
        if ((_DWORD)v30)
        {
          v31 = 0;
          do
          {
            v32 = ++v31 + *(_DWORD *)(*((_QWORD *)this + 3528) + 24);
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v32)
            {
              __break(0xC471u);
              JUMPOUT(0x197D57EF0);
            }
            v683 = v33;
            v34 = HIDWORD(v680);
            if (HIDWORD(v680) == (_DWORD)v680)
            {
              v35 = WTF::Vector<JSC::B3::Value *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v679, HIDWORD(v680) + 1, (unint64_t)&v683);
              v34 = HIDWORD(v680);
              *((_QWORD *)v679 + HIDWORD(v680)) = *(_QWORD *)v35;
            }
            else
            {
              *((_QWORD *)v679 + HIDWORD(v680)) = v33;
            }
            HIDWORD(v680) = v34 + 1;
          }
          while (*(_DWORD *)(v29 + 12) > v31);
          v30 = (uint64_t *)*((_QWORD *)this + 3528);
          v3 = v30[9];
        }
        v36 = JSC::B3::Procedure::addBlock(v30, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
        v37 = (JSC::B3::BasicBlock *)v36;
        v38 = *((_QWORD *)this + 3473);
        if (v38)
        {
          WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v38, (uint64_t)v36);
        }
        else
        {
          v682.n128_u64[0] = (unint64_t)v36;
          v340 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *(_OWORD *)v340 = 0u;
          *((_OWORD *)v340 + 1) = 0u;
          v340[3] = *((_QWORD *)this + 3477);
          *((_QWORD *)this + 3477) = v340;
          v686 = v340;
          v340[2] = v37;
          WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v341, v342, v343, v344, v345, (uint64_t)&v683);
          v39 = v686;
          v346 = (uint64_t **)*((_QWORD *)this + 3479);
          *v686 = (uint64_t)this + 27824;
          v39[1] = (uint64_t)v346;
          *v346 = v39;
          *((_QWORD *)this + 3479) = v39;
        }
        v347 = JSC::B3::Procedure::addBlock(v39, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
        v348 = v347;
        v349 = *((_QWORD *)this + 3473);
        if (v349)
        {
          WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v349, (uint64_t)v347);
        }
        else
        {
          v682.n128_u64[0] = (unint64_t)v347;
          v350 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *(_OWORD *)v350 = 0u;
          *((_OWORD *)v350 + 1) = 0u;
          v350[3] = *((_QWORD *)this + 3477);
          *((_QWORD *)this + 3477) = v350;
          v686 = v350;
          v350[2] = v348;
          WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v351, v352, v353, v354, v355, (uint64_t)&v683);
          v356 = v686;
          v357 = (uint64_t **)*((_QWORD *)this + 3479);
          *v686 = (uint64_t)this + 27824;
          v356[1] = (uint64_t)v357;
          *v357 = v356;
          *((_QWORD *)this + 3479) = v356;
        }
        v667 = (WTF *)*((_QWORD *)this + 3473);
        *((_QWORD *)this + 3473) = v37;
        if (*(_DWORD *)(v29 + 12) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197D57740);
        }
        v672 = (JSC::FTL::IndexedAbstractHeap *)v3;
        v359 = *((_QWORD *)this + 3472);
        v360 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
        v361 = *((_QWORD *)this + 3471);
        v362 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v362 + 8) = -1;
        *(_WORD *)(v362 + 12) = 152;
        *(_BYTE *)(v362 + 20) = 1;
        *(_QWORD *)v362 = &unk_1E357EDA0;
        *(_DWORD *)(v362 + 16) = 0;
        *(_QWORD *)(v362 + 40) = 0;
        *(_QWORD *)(v362 + 48) = v358;
        *(_QWORD *)(v362 + 24) = v361;
        *(_QWORD *)(v362 + 32) = 0;
        JSC::B3::Procedure::addValueImpl(v360, (JSC::B3::Value *)v362);
        v683 = (WTF *)v362;
        v366 = (char **)(v359 + 8);
        v367 = *(unsigned int *)(v359 + 20);
        if ((_DWORD)v367 == *(_DWORD *)(v359 + 16))
        {
          v552 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v366, v367 + 1, (unint64_t)&v683);
          v367 = *(unsigned int *)(v359 + 20);
          *(_QWORD *)(*(_QWORD *)(v359 + 8) + 8 * v367) = *(_QWORD *)v552;
          v368 = v683;
        }
        else
        {
          *(_QWORD *)&(*v366)[8 * v367] = v362;
          v368 = (WTF *)v362;
        }
        *(_DWORD *)(v359 + 20) = v367 + 1;
        *((_QWORD *)v368 + 4) = v359;
        v369 = *((_QWORD *)this + 3472);
        v370 = *((_QWORD *)this + 3470);
        v371 = *((_QWORD *)this + 3471);
        v683 = (WTF *)v348;
        LOBYTE(v684) = 0;
        JSC::B3::BasicBlock::appendNewControlValue(v369, v370, 154, v371, (uint64_t *)&v683, v363, v364, v365);
        *((_QWORD *)this + 3472) = v37;
        *((_QWORD *)this + 3473) = v348;
        v372 = *(_QWORD *)(*(_QWORD *)this + 16);
        v373 = (WTF *)*((_QWORD *)this + 3485);
        v374 = (WTF **)WTF::fastMalloc((WTF *)8);
        *v374 = v373;
        v375 = *((_QWORD *)this + 3524);
        v652 = v372;
        if ((v375 & 1) != 0)
        {
          v603 = *(_QWORD *)(v375 & 0xFFFFFFFF8);
          if ((v375 & 2) != 0
            || (v604 = *(unsigned int *)((v375 & 0xFFFFFFFF8) + 8), (_DWORD)v604 == 0x3FFFFFFF)
            || (_DWORD)v604 == -1)
          {
            v605 = 2;
          }
          else if (v604 >> 28)
          {
            v638 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v638 = v603;
            *(_DWORD *)(v638 + 8) = v604;
            v605 = 1;
            v603 = v638;
          }
          else
          {
            v605 = *(_QWORD *)(v375 & 0xFFFFFFFF8);
            v603 = v604 << 36;
          }
          v375 = v603 | v605;
        }
        v376 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
        v661 = (WTF *)v374;
        v683 = *v374;
        v684 = 0;
        v685 = 3;
        JSC::B3::StackmapValue::append(v376, (uint64_t)v683, (unint64_t)&v684);
        *((_QWORD *)v376 + 8) |= 0x30000uLL;
        *((_QWORD *)v376 + 10) |= 0x30000uLL;
        v382 = *((_QWORD *)this + 1);
        v383 = v683;
        if (v683)
        {
          do
            v384 = __ldaxr((unsigned int *)v383);
          while (__stlxr(v384 + 1, (unsigned int *)v383));
        }
        v385 = v375;
        if ((v375 & 1) != 0)
        {
          v644 = *(_QWORD *)(v375 & 0xFFFFFFFF8);
          if ((v375 & 2) != 0
            || ((v606 = *(unsigned int *)((v375 & 0xFFFFFFFF8) + 8), (_DWORD)v606 != 0x3FFFFFFF)
              ? (v607 = (_DWORD)v606 == -1)
              : (v607 = 1),
                v607))
          {
            v608 = 2;
          }
          else if (v606 >> 28)
          {
            v639 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v639 = v644;
            *(_DWORD *)(v639 + 8) = v606;
            v608 = 1;
            v644 = v639;
          }
          else
          {
            v608 = *(_QWORD *)(v375 & 0xFFFFFFFF8);
            v644 = v606 << 36;
          }
          v385 = v644 | v608;
        }
        v386 = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)(v386 + 8) = 1;
        *(_QWORD *)v386 = &off_1E35778D8;
        *(_QWORD *)(v386 + 16) = v652;
        *(_QWORD *)(v386 + 24) = operationNewPromise;
        *(_QWORD *)(v386 + 32) = v672;
        if (v383)
        {
          do
            v394 = __ldaxr((unsigned int *)v383);
          while (__stlxr(v394 + 1, (unsigned int *)v383));
        }
        *(_QWORD *)(v386 + 40) = v383;
        *(_QWORD *)(v386 + 48) = v382;
        v395 = v385;
        if ((v385 & 1) != 0)
        {
          v654 = v386;
          v674 = *(_QWORD *)(v385 & 0xFFFFFFFF8);
          if ((v385 & 2) != 0
            || ((v609 = *(unsigned int *)((v385 & 0xFFFFFFFF8) + 8), (_DWORD)v609 != 0x3FFFFFFF)
              ? (v610 = (_DWORD)v609 == -1)
              : (v610 = 1),
                v610))
          {
            v611 = 2;
          }
          else if (v609 >> 28)
          {
            v640 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v640 = v674;
            *(_DWORD *)(v640 + 8) = v609;
            v611 = 1;
            v674 = v640;
          }
          else
          {
            v611 = *(_QWORD *)(v385 & 0xFFFFFFFF8);
            v674 = v609 << 36;
          }
          v395 = v674 | v611;
          v386 = v654;
        }
        *(_QWORD *)(v386 + 56) = v395;
        v396 = (unsigned int *)*((_QWORD *)v376 + 7);
        *((_QWORD *)v376 + 7) = v386;
        if (!v396)
          goto LABEL_209;
        v397 = v396 + 2;
        do
        {
          v398 = __ldaxr(v397);
          v399 = v398 - 1;
        }
        while (__stlxr(v399, v397));
        if (!v399)
        {
          atomic_store(1u, v396 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v396 + 8))(v396);
          if ((v385 & 1) == 0)
            goto LABEL_210;
        }
        else
        {
LABEL_209:
          if ((v385 & 1) == 0)
            goto LABEL_210;
        }
        if ((v385 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v385 & 0xFFFFFFFF8, v387, v388, v389, v390, v391, v392, v393);
LABEL_210:
        if (v383)
        {
          do
          {
            v400 = __ldaxr((unsigned int *)v383);
            v401 = v400 - 1;
          }
          while (__stlxr(v401, (unsigned int *)v383));
          if (!v401)
          {
            atomic_store(1u, (unsigned int *)v383);
            v612 = *((_QWORD *)v383 + 4);
            if ((v612 & 1) != 0 && (v612 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v612 & 0xFFFFFFFF8, v387, v388, v389, v390, v391, v392, v393);
            v613 = *((_QWORD *)v383 + 3);
            if ((v613 & 1) != 0 && (v613 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v613 & 0xFFFFFFFF8, v387, v388, v389, v390, v391, v392, v393);
            WTF::fastFree((unint64_t)v383, v387, v388, v389, v390, v391, v392, v393);
          }
        }
        v402 = v683;
        v683 = 0;
        v403 = (unint64_t)v661;
        if (!v402)
          goto LABEL_216;
        do
        {
          v404 = __ldaxr((unsigned int *)v402);
          v405 = v404 - 1;
        }
        while (__stlxr(v405, (unsigned int *)v402));
        if (!v405)
        {
          atomic_store(1u, (unsigned int *)v402);
          v614 = *((_QWORD *)v402 + 4);
          if ((v614 & 1) != 0 && (v614 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v614 & 0xFFFFFFFF8, v387, v388, v389, v390, v391, v392, v393);
          v615 = *((_QWORD *)v402 + 3);
          if ((v615 & 1) != 0 && (v615 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v615 & 0xFFFFFFFF8, v387, v388, v389, v390, v391, v392, v393);
          WTF::fastFree((unint64_t)v402, v387, v388, v389, v390, v391, v392, v393);
          v403 = (unint64_t)v661;
          if ((v375 & 1) == 0)
            goto LABEL_217;
        }
        else
        {
LABEL_216:
          if ((v375 & 1) == 0)
          {
LABEL_217:
            WTF::fastFree(v403, v387, v388, v389, v390, v391, v392, v393);
            v406 = *((_QWORD *)this + 3472);
            v407 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v408 = *((_QWORD *)this + 3471);
            v409 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v409 + 8) = -1;
            *(_WORD *)(v409 + 12) = 152;
            *(_DWORD *)(v409 + 16) = 0;
            *(_BYTE *)(v409 + 20) = 1;
            *(_QWORD *)v409 = &unk_1E357EDA0;
            *(_QWORD *)(v409 + 40) = 0;
            *(_QWORD *)(v409 + 48) = v376;
            *(_QWORD *)(v409 + 24) = v408;
            *(_QWORD *)(v409 + 32) = 0;
            JSC::B3::Procedure::addValueImpl(v407, (JSC::B3::Value *)v409);
            v683 = (WTF *)v409;
            v413 = (char **)(v406 + 8);
            v414 = *(unsigned int *)(v406 + 20);
            if ((_DWORD)v414 == *(_DWORD *)(v406 + 16))
            {
              v553 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v413, v414 + 1, (unint64_t)&v683);
              v414 = *(unsigned int *)(v406 + 20);
              *(_QWORD *)(*(_QWORD *)(v406 + 8) + 8 * v414) = *(_QWORD *)v553;
              v415 = v683;
            }
            else
            {
              *(_QWORD *)&(*v413)[8 * v414] = v409;
              v415 = (WTF *)v409;
            }
            *(_DWORD *)(v406 + 20) = v414 + 1;
            *((_QWORD *)v415 + 4) = v406;
            v416 = *((_QWORD *)this + 3472);
            v417 = *((_QWORD *)this + 3470);
            v418 = *((_QWORD *)this + 3471);
            v683 = (WTF *)v348;
            LOBYTE(v684) = 0;
            JSC::B3::BasicBlock::appendNewControlValue(v416, v417, 154, v418, (uint64_t *)&v683, v410, v411, v412);
            *((_QWORD *)this + 3472) = v348;
            *((_QWORD *)this + 3473) = v667;
            v419 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v420 = *((_QWORD *)this + 3471);
            v148 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v148 = off_1E357F5F0;
            *(_DWORD *)(v148 + 8) = -1;
            *(_WORD *)(v148 + 12) = 153;
            *(_DWORD *)(v148 + 16) = 2;
            *(_BYTE *)(v148 + 20) = 0;
            *(_QWORD *)(v148 + 24) = v420;
            *(_QWORD *)(v148 + 32) = 0;
            JSC::B3::Procedure::addValueImpl(v419, (JSC::B3::Value *)v148);
            v683 = (WTF *)v148;
            v421 = (char **)(v348 + 1);
            v422 = *((unsigned int *)v348 + 5);
            if ((_DWORD)v422 == *((_DWORD *)v348 + 4))
            {
              v554 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v421, v422 + 1, (unint64_t)&v683);
              v422 = *((unsigned int *)v348 + 5);
              *(_QWORD *)(v348[1] + 8 * v422) = *(_QWORD *)v554;
              v423 = v683;
            }
            else
            {
              *(_QWORD *)&(*v421)[8 * v422] = v148;
              v423 = (WTF *)v148;
            }
            *((_DWORD *)v348 + 5) = v422 + 1;
            *((_QWORD *)v423 + 4) = v348;
            if ((*(_WORD *)(v362 + 12) & 0xFFF) == 0x98)
              v424 = v362;
            else
              v424 = 0;
            *(_QWORD *)(v424 + 40) = v148;
            if ((*(_WORD *)(v409 + 12) & 0xFFF) == 0x98)
              v425 = v409;
            else
              v425 = 0;
            *(_QWORD *)(v425 + 40) = v148;
            if (*(_DWORD *)(v29 + 12))
            {
              v426 = 0;
              v427 = (char *)this + 11696;
              do
              {
                v428 = *(_QWORD *)(*(_QWORD *)v29 + 8 * v426);
                if (v428 >> 33)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197D57394);
                }
                if (v426 >= HIDWORD(v680))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197D57EF8);
                }
                v429 = HIDWORD(v428);
                v430 = *((_QWORD *)v679 + v426);
                v431 = (JSC::FTL::AbstractHeap *)&v427[48 * HIDWORD(v428)];
                if (!*((_QWORD *)v431 + 5))
                  JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), v431, v429);
                v432 = *(_QWORD *)&v427[48 * v429 + 24];
                v433 = v148;
                if (v432)
                {
                  v434 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v432);
                  v433 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v148, v434);
                }
                JSC::FTL::Output::store((uint64_t)this + 27640, v430, v431, v433);
                ++v426;
              }
              while (v426 < *(unsigned int *)(v29 + 12));
            }
            goto LABEL_292;
          }
        }
        if ((v375 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v375 & 0xFFFFFFFF8, v387, v388, v389, v390, v391, v392, v393);
        goto LABEL_217;
      }
      v679 = (WTF *)v681;
      v680 = 2;
      v330 = (uint64_t *)*(unsigned int *)(v29 + 12);
      if ((_DWORD)v330)
      {
        v331 = 0;
        do
        {
          v332 = ++v331 + *(_DWORD *)(*((_QWORD *)this + 3528) + 24);
          if (*(_DWORD *)(*(_QWORD *)this + 164) <= v332)
          {
            __break(0xC471u);
            JUMPOUT(0x197D57F00);
          }
          v683 = v333;
          v334 = HIDWORD(v680);
          if (HIDWORD(v680) == (_DWORD)v680)
          {
            v335 = WTF::Vector<JSC::B3::Value *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v679, HIDWORD(v680) + 1, (unint64_t)&v683);
            v334 = HIDWORD(v680);
            *((_QWORD *)v679 + HIDWORD(v680)) = *(_QWORD *)v335;
          }
          else
          {
            *((_QWORD *)v679 + HIDWORD(v680)) = v333;
          }
          HIDWORD(v680) = v334 + 1;
        }
        while (*(_DWORD *)(v29 + 12) > v331);
        v330 = (uint64_t *)*((_QWORD *)this + 3528);
        v3 = v330[9];
      }
      v336 = JSC::B3::Procedure::addBlock(v330, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v337 = (JSC::B3::BasicBlock *)v336;
      v338 = *((_QWORD *)this + 3473);
      if (v338)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v338, (uint64_t)v336);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v336;
        v444 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v444 = 0u;
        *((_OWORD *)v444 + 1) = 0u;
        v444[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v444;
        v686 = v444;
        v444[2] = v337;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v445, v446, v447, v448, v449, (uint64_t)&v683);
        v339 = v686;
        v450 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v339[1] = (uint64_t)v450;
        *v450 = v339;
        *((_QWORD *)this + 3479) = v339;
      }
      v451 = JSC::B3::Procedure::addBlock(v339, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
      v452 = v451;
      v453 = *((_QWORD *)this + 3473);
      if (v453)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v453, (uint64_t)v451);
      }
      else
      {
        v682.n128_u64[0] = (unint64_t)v451;
        v454 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v454 = 0u;
        *((_OWORD *)v454 + 1) = 0u;
        v454[3] = *((_QWORD *)this + 3477);
        *((_QWORD *)this + 3477) = v454;
        v686 = v454;
        v454[2] = v452;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v682, (uint64_t *)&v686, v455, v456, v457, v458, v459, (uint64_t)&v683);
        v460 = v686;
        v461 = (uint64_t **)*((_QWORD *)this + 3479);
        *v686 = (uint64_t)this + 27824;
        v460[1] = (uint64_t)v461;
        *v461 = v460;
        *((_QWORD *)this + 3479) = v460;
      }
      v462 = (WTF *)*((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v337;
      if (*(_DWORD *)(v29 + 12) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197D57874);
      }
      v668 = v462;
      v463 = *(_QWORD *)(*(_QWORD *)this + 16);
      if (*(_DWORD *)(v463 + 39028) <= 0x1Fu)
      {
        __break(0xC471u);
        JUMPOUT(0x197D57894);
      }
      v464 = *((_QWORD *)this + 3460);
      v465 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v463 + 38968);
      v673 = (JSC::FTL::IndexedAbstractHeap *)v3;
      v466 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v3);
      v468 = *((_QWORD *)this + 3472);
      v469 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v470 = *((_QWORD *)this + 3471);
      v471 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v471 + 8) = -1;
      *(_WORD *)(v471 + 12) = 152;
      *(_BYTE *)(v471 + 20) = 1;
      *(_QWORD *)v471 = &unk_1E357EDA0;
      *(_DWORD *)(v471 + 16) = 0;
      *(_QWORD *)(v471 + 40) = 0;
      *(_QWORD *)(v471 + 48) = Object;
      *(_QWORD *)(v471 + 24) = v470;
      *(_QWORD *)(v471 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v469, (JSC::B3::Value *)v471);
      v683 = (WTF *)v471;
      v475 = (char **)(v468 + 8);
      v476 = *(unsigned int *)(v468 + 20);
      if ((_DWORD)v476 == *(_DWORD *)(v468 + 16))
      {
        v555 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v475, v476 + 1, (unint64_t)&v683);
        v476 = *(unsigned int *)(v468 + 20);
        *(_QWORD *)(*(_QWORD *)(v468 + 8) + 8 * v476) = *(_QWORD *)v555;
        v477 = v683;
      }
      else
      {
        *(_QWORD *)&(*v475)[8 * v476] = v471;
        v477 = (WTF *)v471;
      }
      *(_DWORD *)(v468 + 20) = v476 + 1;
      *((_QWORD *)v477 + 4) = v468;
      v478 = *((_QWORD *)this + 3472);
      v479 = *((_QWORD *)this + 3470);
      v480 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v452;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v478, v479, 154, v480, (uint64_t *)&v683, v472, v473, v474);
      *((_QWORD *)this + 3472) = v337;
      *((_QWORD *)this + 3473) = v452;
      v653 = *(_QWORD *)(*(_QWORD *)this + 16);
      v481 = (WTF *)*((_QWORD *)this + 3485);
      v482 = (WTF **)WTF::fastMalloc((WTF *)8);
      *v482 = v481;
      v483 = *((_QWORD *)this + 3524);
      if ((v483 & 1) != 0)
      {
        v616 = *(_QWORD *)(v483 & 0xFFFFFFFF8);
        if ((v483 & 2) != 0
          || (v617 = *(unsigned int *)((v483 & 0xFFFFFFFF8) + 8), (_DWORD)v617 == 0x3FFFFFFF)
          || (_DWORD)v617 == -1)
        {
          v618 = 2;
        }
        else if (v617 >> 28)
        {
          v641 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v641 = v616;
          *(_DWORD *)(v641 + 8) = v617;
          v618 = 1;
          v616 = v641;
        }
        else
        {
          v618 = *(_QWORD *)(v483 & 0xFFFFFFFF8);
          v616 = v617 << 36;
        }
        v483 = v616 | v618;
      }
      v484 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
      v662 = (WTF *)v482;
      v683 = *v482;
      v684 = 0;
      v685 = 3;
      JSC::B3::StackmapValue::append(v484, (uint64_t)v683, (unint64_t)&v684);
      *((_QWORD *)v484 + 8) |= 0x30000uLL;
      *((_QWORD *)v484 + 10) |= 0x30000uLL;
      v490 = *((_QWORD *)this + 1);
      v491 = v683;
      if (v683)
      {
        do
          v492 = __ldaxr((unsigned int *)v491);
        while (__stlxr(v492 + 1, (unsigned int *)v491));
      }
      v493 = v483;
      if ((v483 & 1) != 0)
      {
        v645 = *(_QWORD *)(v483 & 0xFFFFFFFF8);
        if ((v483 & 2) != 0
          || ((v619 = *(unsigned int *)((v483 & 0xFFFFFFFF8) + 8), (_DWORD)v619 != 0x3FFFFFFF)
            ? (v620 = (_DWORD)v619 == -1)
            : (v620 = 1),
              v620))
        {
          v621 = 2;
        }
        else if (v619 >> 28)
        {
          v642 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v642 = v645;
          *(_DWORD *)(v642 + 8) = v619;
          v621 = 1;
          v645 = v642;
        }
        else
        {
          v621 = *(_QWORD *)(v483 & 0xFFFFFFFF8);
          v645 = v619 << 36;
        }
        v493 = v645 | v621;
      }
      v494 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)(v494 + 8) = 1;
      *(_QWORD *)v494 = &off_1E3577860;
      *(_QWORD *)(v494 + 16) = v653;
      *(_QWORD *)(v494 + 24) = operationNewInternalPromise;
      *(_QWORD *)(v494 + 32) = v673;
      if (v491)
      {
        do
          v502 = __ldaxr((unsigned int *)v491);
        while (__stlxr(v502 + 1, (unsigned int *)v491));
      }
      *(_QWORD *)(v494 + 40) = v491;
      *(_QWORD *)(v494 + 48) = v490;
      v503 = v493;
      if ((v493 & 1) != 0)
      {
        v655 = v494;
        v675 = *(_QWORD *)(v493 & 0xFFFFFFFF8);
        if ((v493 & 2) != 0
          || ((v622 = *(unsigned int *)((v493 & 0xFFFFFFFF8) + 8), (_DWORD)v622 != 0x3FFFFFFF)
            ? (v623 = (_DWORD)v622 == -1)
            : (v623 = 1),
              v623))
        {
          v624 = 2;
        }
        else if (v622 >> 28)
        {
          v643 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v643 = v675;
          *(_DWORD *)(v643 + 8) = v622;
          v624 = 1;
          v675 = v643;
        }
        else
        {
          v624 = *(_QWORD *)(v493 & 0xFFFFFFFF8);
          v675 = v622 << 36;
        }
        v503 = v675 | v624;
        v494 = v655;
      }
      *(_QWORD *)(v494 + 56) = v503;
      v504 = (unsigned int *)*((_QWORD *)v484 + 7);
      *((_QWORD *)v484 + 7) = v494;
      if (!v504)
        goto LABEL_265;
      v505 = v504 + 2;
      do
      {
        v506 = __ldaxr(v505);
        v507 = v506 - 1;
      }
      while (__stlxr(v507, v505));
      if (!v507)
      {
        atomic_store(1u, v504 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v504 + 8))(v504);
        if ((v493 & 1) == 0)
          goto LABEL_266;
      }
      else
      {
LABEL_265:
        if ((v493 & 1) == 0)
          goto LABEL_266;
      }
      if ((v493 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v493 & 0xFFFFFFFF8, v495, v496, v497, v498, v499, v500, v501);
LABEL_266:
      if (v491)
      {
        do
        {
          v508 = __ldaxr((unsigned int *)v491);
          v509 = v508 - 1;
        }
        while (__stlxr(v509, (unsigned int *)v491));
        if (!v509)
        {
          atomic_store(1u, (unsigned int *)v491);
          v625 = *((_QWORD *)v491 + 4);
          if ((v625 & 1) != 0 && (v625 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v625 & 0xFFFFFFFF8, v495, v496, v497, v498, v499, v500, v501);
          v626 = *((_QWORD *)v491 + 3);
          if ((v626 & 1) != 0 && (v626 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v626 & 0xFFFFFFFF8, v495, v496, v497, v498, v499, v500, v501);
          WTF::fastFree((unint64_t)v491, v495, v496, v497, v498, v499, v500, v501);
        }
      }
      v510 = v683;
      v683 = 0;
      v511 = (unint64_t)v662;
      if (!v510)
        goto LABEL_272;
      do
      {
        v512 = __ldaxr((unsigned int *)v510);
        v513 = v512 - 1;
      }
      while (__stlxr(v513, (unsigned int *)v510));
      if (v513)
      {
LABEL_272:
        if ((v483 & 1) == 0)
          goto LABEL_273;
        goto LABEL_456;
      }
      atomic_store(1u, (unsigned int *)v510);
      v627 = *((_QWORD *)v510 + 4);
      if ((v627 & 1) != 0 && (v627 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v627 & 0xFFFFFFFF8, v495, v496, v497, v498, v499, v500, v501);
      v628 = *((_QWORD *)v510 + 3);
      if ((v628 & 1) != 0 && (v628 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v628 & 0xFFFFFFFF8, v495, v496, v497, v498, v499, v500, v501);
      WTF::fastFree((unint64_t)v510, v495, v496, v497, v498, v499, v500, v501);
      v511 = (unint64_t)v662;
      if ((v483 & 1) != 0)
      {
LABEL_456:
        if ((v483 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v483 & 0xFFFFFFFF8, v495, v496, v497, v498, v499, v500, v501);
      }
LABEL_273:
      WTF::fastFree(v511, v495, v496, v497, v498, v499, v500, v501);
      v514 = *((_QWORD *)this + 3472);
      v515 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v516 = *((_QWORD *)this + 3471);
      v517 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v517 + 8) = -1;
      *(_WORD *)(v517 + 12) = 152;
      *(_DWORD *)(v517 + 16) = 0;
      *(_BYTE *)(v517 + 20) = 1;
      *(_QWORD *)v517 = &unk_1E357EDA0;
      *(_QWORD *)(v517 + 40) = 0;
      *(_QWORD *)(v517 + 48) = v484;
      *(_QWORD *)(v517 + 24) = v516;
      *(_QWORD *)(v517 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v515, (JSC::B3::Value *)v517);
      v683 = (WTF *)v517;
      v521 = (char **)(v514 + 8);
      v522 = *(unsigned int *)(v514 + 20);
      if ((_DWORD)v522 == *(_DWORD *)(v514 + 16))
      {
        v556 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v521, v522 + 1, (unint64_t)&v683);
        v522 = *(unsigned int *)(v514 + 20);
        *(_QWORD *)(*(_QWORD *)(v514 + 8) + 8 * v522) = *(_QWORD *)v556;
        v523 = v683;
      }
      else
      {
        *(_QWORD *)&(*v521)[8 * v522] = v517;
        v523 = (WTF *)v517;
      }
      *(_DWORD *)(v514 + 20) = v522 + 1;
      *((_QWORD *)v523 + 4) = v514;
      v524 = *((_QWORD *)this + 3472);
      v525 = *((_QWORD *)this + 3470);
      v526 = *((_QWORD *)this + 3471);
      v683 = (WTF *)v452;
      LOBYTE(v684) = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v524, v525, 154, v526, (uint64_t *)&v683, v518, v519, v520);
      *((_QWORD *)this + 3472) = v452;
      *((_QWORD *)this + 3473) = v668;
      v527 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v528 = *((_QWORD *)this + 3471);
      v148 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v148 = off_1E357F5F0;
      *(_DWORD *)(v148 + 8) = -1;
      *(_WORD *)(v148 + 12) = 153;
      *(_DWORD *)(v148 + 16) = 2;
      *(_BYTE *)(v148 + 20) = 0;
      *(_QWORD *)(v148 + 24) = v528;
      *(_QWORD *)(v148 + 32) = 0;
      JSC::B3::Procedure::addValueImpl(v527, (JSC::B3::Value *)v148);
      v683 = (WTF *)v148;
      v529 = (char **)(v452 + 1);
      v530 = *((unsigned int *)v452 + 5);
      if ((_DWORD)v530 == *((_DWORD *)v452 + 4))
      {
        v557 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v529, v530 + 1, (unint64_t)&v683);
        v530 = *((unsigned int *)v452 + 5);
        *(_QWORD *)(v452[1] + 8 * v530) = *(_QWORD *)v557;
        v531 = v683;
      }
      else
      {
        *(_QWORD *)&(*v529)[8 * v530] = v148;
        v531 = (WTF *)v148;
      }
      *((_DWORD *)v452 + 5) = v530 + 1;
      *((_QWORD *)v531 + 4) = v452;
      if ((*(_WORD *)(v471 + 12) & 0xFFF) == 0x98)
        v532 = v471;
      else
        v532 = 0;
      *(_QWORD *)(v532 + 40) = v148;
      if ((*(_WORD *)(v517 + 12) & 0xFFF) == 0x98)
        v533 = v517;
      else
        v533 = 0;
      *(_QWORD *)(v533 + 40) = v148;
      if (*(_DWORD *)(v29 + 12))
      {
        v534 = 0;
        v535 = (char *)this + 11696;
        do
        {
          v536 = *(_QWORD *)(*(_QWORD *)v29 + 8 * v534);
          if (v536 >> 33)
          {
            __break(0xC471u);
            JUMPOUT(0x197D573B4);
          }
          if (v534 >= HIDWORD(v680))
          {
            __break(0xC471u);
            JUMPOUT(0x197D57F08);
          }
          v537 = HIDWORD(v536);
          v538 = *((_QWORD *)v679 + v534);
          v539 = (JSC::FTL::AbstractHeap *)&v535[48 * HIDWORD(v536)];
          if (!*((_QWORD *)v539 + 5))
            JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 11624), v539, v537);
          v540 = *(_QWORD *)&v535[48 * v537 + 24];
          v541 = v148;
          if (v540)
          {
            v542 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v540);
            v541 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v148, v542);
          }
          JSC::FTL::Output::store((uint64_t)this + 27640, v538, v539, v541);
          ++v534;
        }
        while (v534 < *(unsigned int *)(v29 + 12));
      }
LABEL_292:
      v686 = (uint64_t *)*((_QWORD *)this + 3528);
      v543 = *((_QWORD *)this + 3521);
      v682.n128_u64[0] = v148;
      v682.n128_u64[1] = v543;
      WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v683, (uint64_t *)this + 3492, (uint64_t *)&v686, &v682);
      v551 = v679;
      if (v681 != (_BYTE *)v679)
      {
        if (v679)
        {
          v679 = 0;
          LODWORD(v680) = 0;
          WTF::fastFree((unint64_t)v551, v544, v545, v546, v547, v548, v549, v550);
        }
      }
      return;
    default:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, v2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x3FCE, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObject()", "Bad structure");
      __break(0xC471u);
      JUMPOUT(0x197D57BACLL);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckTraps(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  JSC::FTL::AbstractHeap *v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::B3::Procedure *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  JSC::B3::StackmapValue *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  WTF *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  char *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  char v127;
  uint64_t *v128;
  uint64_t *v129;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = JSC::B3::Procedure::addBlock((uint64_t *)0x6BF8, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v4 = (uint64_t)v3;
  v5 = *((_QWORD *)this + 3473);
  if (v5)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v5, (uint64_t)v3);
  }
  else
  {
    v129 = v3;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    v7[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v7;
    v128 = v7;
    v7[2] = v4;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v129, (uint64_t *)&v128, v8, v9, v10, v11, v12, (uint64_t)&v126);
    v6 = v128;
    v13 = (uint64_t **)*((_QWORD *)this + 3479);
    *v128 = (uint64_t)this + 27824;
    v6[1] = (uint64_t)v13;
    *v13 = v6;
    *((_QWORD *)this + 3479) = v6;
  }
  v14 = JSC::B3::Procedure::addBlock(v6, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v15 = (WTF *)v14;
  v16 = *((_QWORD *)this + 3473);
  if (v16)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v16, (uint64_t)v14);
  }
  else
  {
    v129 = v14;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    v23[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v23;
    v128 = v23;
    v23[2] = v15;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v129, (uint64_t *)&v128, v24, v25, v26, v27, v28, (uint64_t)&v126);
    v29 = v128;
    v30 = (uint64_t **)*((_QWORD *)this + 3479);
    *v128 = (uint64_t)this + 27824;
    v29[1] = (uint64_t)v30;
    *v30 = v29;
    *((_QWORD *)this + 3479) = v29;
  }
  v31 = JSC::FTL::Output::absolute(v2, *(_QWORD *)(*(_QWORD *)this + 16) + 80, v17, v18, v19, v20, v21, v22);
  v33 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v2, v31, v32, 1);
  v34 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 15);
  v35 = JSC::FTL::Output::bitAnd(v2, v33, v34);
  v36 = *((_QWORD *)this + 3472);
  v37 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v38 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v35, *((_QWORD *)this + 3457));
  JSC::B3::Procedure::addValueImpl(v37, v38);
  v126 = v38;
  v43 = (char **)(v36 + 8);
  v44 = *(unsigned int *)(v36 + 20);
  if ((_DWORD)v44 == *(_DWORD *)(v36 + 16))
  {
    v97 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43, v44 + 1, (unint64_t)&v126);
    v44 = *(unsigned int *)(v36 + 20);
    *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8 * v44) = *(_QWORD *)v97;
    v45 = v126;
  }
  else
  {
    *(_QWORD *)&(*v43)[8 * v44] = v38;
    v45 = v38;
  }
  *(_DWORD *)(v36 + 20) = v44 + 1;
  *((_QWORD *)v45 + 4) = v36;
  JSC::FTL::Output::branch(v2, (uint64_t)v38, (uint64_t)v15, v4, 1.0, 0.0, v39, v40, v41, v42);
  *((_QWORD *)this + 3472) = v4;
  v125 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v15;
  v53 = *(JSC::B3::Procedure **)this;
  v54 = *(_QWORD *)(*(_QWORD *)this + 16);
  v55 = *((_QWORD *)this + 3524);
  if ((v55 & 1) == 0)
  {
    v56 = *((_QWORD *)v53 + 4);
LABEL_11:
    v57 = (_QWORD *)(v55 & 0xFFFFFFFF8);
    v58 = 1;
    v59 = 1;
    goto LABEL_12;
  }
  v98 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
  if ((v55 & 2) != 0 || (v99 = *(_DWORD *)((v55 & 0xFFFFFFFF8) + 8), v99 == 0x3FFFFFFF) || v99 == -1)
  {
    v100 = 2;
  }
  else if (v99 >> 28)
  {
    v122 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v122 = v98;
    *(_DWORD *)(v122 + 8) = v99;
    v100 = 1;
    v98 = v122;
  }
  else
  {
    v100 = v98;
    v98 = 0;
  }
  v55 = v98 | v100;
  v56 = *((_QWORD *)v53 + 4);
  if (((v98 | v100) & 1) == 0)
    goto LABEL_11;
  v116 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
  if ((v55 & 2) != 0 || (v117 = *(_DWORD *)((v55 & 0xFFFFFFFF8) + 8), v117 == 0x3FFFFFFF) || v117 == -1)
  {
    v118 = 2;
  }
  else if (v117 >> 28)
  {
    v124 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v124 = v116;
    *(_DWORD *)(v124 + 8) = v117;
    v118 = 1;
    v116 = v124;
  }
  else
  {
    v118 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    v116 = 0;
  }
  v119 = v116 | v118;
  v57 = (_QWORD *)(v119 & 0xFFFFFFFF8);
  if ((v119 & 1) != 0)
  {
    v58 = 0;
    v59 = 0;
    v60 = (_QWORD *)*v57;
    if (!*v57)
      goto LABEL_14;
    goto LABEL_13;
  }
  v59 = 0;
  v58 = 1;
LABEL_12:
  v60 = v57;
  if (v57)
LABEL_13:
    v56 = v60[1];
LABEL_14:
  v61 = *(_QWORD *)(v56 + 8);
  if ((v58 & 1) == 0 && v57)
    WTF::fastFree((unint64_t)v57, v46, v47, v48, v49, v50, v51, v52);
  if ((v59 & 1) == 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v46, v47, v48, v49, v50, v51, v52);
  v62 = *((_QWORD *)this + 3524);
  if ((v62 & 1) != 0)
  {
    v101 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
    if ((v62 & 2) != 0
      || (v102 = *(unsigned int *)((v62 & 0xFFFFFFFF8) + 8), (_DWORD)v102 == 0x3FFFFFFF)
      || (_DWORD)v102 == -1)
    {
      v103 = 2;
    }
    else if (v102 >> 28)
    {
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v101;
      *(_DWORD *)(v123 + 8) = v102;
      v103 = 1;
      v101 = v123;
    }
    else
    {
      v103 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v62 = v101 | v103;
  }
  v63 = (JSC::B3::StackmapValue *)JSC::FTL::Output::patchpoint(v2, 2);
  *((_QWORD *)v63 + 8) |= 0x30000uLL;
  *((_QWORD *)v63 + 10) |= 0x30000uLL;
  v69 = *((_QWORD *)this + 1);
  v70 = v126;
  if (v126)
  {
    do
      v71 = __ldaxr((unsigned int *)v70);
    while (__stlxr(v71 + 1, (unsigned int *)v70));
  }
  v72 = v62;
  if ((v62 & 1) != 0)
  {
    v104 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
    if ((v62 & 2) != 0
      || ((v105 = *(unsigned int *)((v62 & 0xFFFFFFFF8) + 8), (_DWORD)v105 != 0x3FFFFFFF)
        ? (v106 = (_DWORD)v105 == -1)
        : (v106 = 1),
          v106))
    {
      v107 = 2;
    }
    else if (v105 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v104;
      *(_DWORD *)(v120 + 8) = v105;
      v107 = 1;
      v104 = v120;
    }
    else
    {
      v107 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
      v104 = v105 << 36;
    }
    v72 = v104 | v107;
  }
  v73 = WTF::fastMalloc((WTF *)0x38);
  v81 = v73;
  *(_DWORD *)(v73 + 8) = 1;
  *(_QWORD *)v73 = &off_1E3577950;
  *(_QWORD *)(v73 + 16) = v54;
  *(_QWORD *)(v73 + 24) = v61;
  if (v70)
  {
    do
      v82 = __ldaxr((unsigned int *)v70);
    while (__stlxr(v82 + 1, (unsigned int *)v70));
  }
  *(_QWORD *)(v73 + 32) = v70;
  *(_QWORD *)(v73 + 40) = v69;
  v83 = v72;
  if ((v72 & 1) != 0)
  {
    v108 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
    if ((v72 & 2) != 0
      || ((v109 = *(unsigned int *)((v72 & 0xFFFFFFFF8) + 8), (_DWORD)v109 != 0x3FFFFFFF)
        ? (v110 = (_DWORD)v109 == -1)
        : (v110 = 1),
          v110))
    {
      v111 = 2;
    }
    else if (v109 >> 28)
    {
      v121 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v121 = v108;
      *(_DWORD *)(v121 + 8) = v109;
      v111 = 1;
      v108 = v121;
    }
    else
    {
      v111 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
      v108 = v109 << 36;
    }
    v83 = v108 | v111;
  }
  *(_QWORD *)(v81 + 48) = v83;
  v84 = (unsigned int *)*((_QWORD *)v63 + 7);
  *((_QWORD *)v63 + 7) = v81;
  if (!v84)
    goto LABEL_27;
  v85 = v84 + 2;
  do
  {
    v86 = __ldaxr(v85);
    v87 = v86 - 1;
  }
  while (__stlxr(v87, v85));
  if (!v87)
  {
    atomic_store(1u, v84 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
    if ((v72 & 1) == 0)
      goto LABEL_28;
  }
  else
  {
LABEL_27:
    if ((v72 & 1) == 0)
      goto LABEL_28;
  }
  if ((v72 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v72 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
LABEL_28:
  if (v70)
  {
    do
    {
      v88 = __ldaxr((unsigned int *)v70);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, (unsigned int *)v70));
    if (!v89)
    {
      atomic_store(1u, (unsigned int *)v70);
      v112 = *((_QWORD *)v70 + 4);
      if ((v112 & 1) != 0 && (v112 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v112 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
      v113 = *((_QWORD *)v70 + 3);
      if ((v113 & 1) != 0 && (v113 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v113 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
      WTF::fastFree((unint64_t)v70, v74, v75, v76, v77, v78, v79, v80);
    }
  }
  v90 = v126;
  v126 = 0;
  if (!v90)
    goto LABEL_34;
  do
  {
    v91 = __ldaxr((unsigned int *)v90);
    v92 = v91 - 1;
  }
  while (__stlxr(v92, (unsigned int *)v90));
  if (v92)
  {
LABEL_34:
    if ((v62 & 1) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
  atomic_store(1u, (unsigned int *)v90);
  v114 = *((_QWORD *)v90 + 4);
  if ((v114 & 1) != 0 && (v114 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v114 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
  v115 = *((_QWORD *)v90 + 3);
  if ((v115 & 1) != 0 && (v115 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v115 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
  WTF::fastFree((unint64_t)v90, v74, v75, v76, v77, v78, v79, v80);
  if ((v62 & 1) != 0)
  {
LABEL_72:
    if ((v62 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v62 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
  }
LABEL_35:
  v93 = *((_QWORD *)this + 3472);
  v94 = *((_QWORD *)this + 3470);
  v95 = *((_QWORD *)this + 3471);
  v126 = v15;
  v127 = 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v93, v94, 154, v95, (uint64_t *)&v126, v78, v79, v80);
  *((_QWORD *)this + 3472) = v15;
  *((_QWORD *)this + 3473) = v125;
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateRest(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value *ArgumentsStart;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  JSC::B3::Value *v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;
  JSC::FTL::IndexedAbstractHeap *v66;
  uint64_t v67;
  uint64_t v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  JSC::FTL::IndexedAbstractHeap *v71;
  uint64_t v72;
  JSC::B3::Value *v73;
  JSC::B3::Value *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v79;
  JSC::B3::Value *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::B3::Value *UninitializedContiguousJSArrayInternal;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::B3::Value *v95;
  uint64_t v96;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v96, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v96, v3, v4, v5, v6, v7, v8);
  if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v96 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if (JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), v10, v11, v12, v13, v14, v15))
  {
    v24 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v38 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
    v39 = *((_DWORD *)v16 + 217);
    if (v39)
      v40 = 16 * (v39 & 0xFFFFFFFE);
    else
      v40 = 0;
    v41 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v40, (int *)&v95, v33, v34, v35, v36, v37);
    v43 = v42;
    v44 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32);
    v46 = v45;
    v48 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 8 * *(unsigned int *)(*((_QWORD *)this + 3528) + 72));
    v49 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), ArgumentsStart, v48);
    v50 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
    v51 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32, v50);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v51, v24, v38, NAN, NAN, v52, v53, v54, v55);
    *((_QWORD *)this + 3472) = v38;
    v56 = *((_QWORD *)this + 3473);
    *((_QWORD *)this + 3473) = v24;
    v57 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 1);
    v58 = v57;
    if (v44 || v46)
    {
      if ((*(_WORD *)(v44 + 12) & 0xFFF) == 0x98)
        v59 = v44;
      else
        v59 = 0;
      *(_QWORD *)(v59 + 40) = v57;
    }
    v60 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57, *((JSC::B3::Value **)this + 3458));
    v61 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v60);
    if (v61 || v62)
    {
      if ((*(_WORD *)(v61 + 12) & 0xFFF) == 0x98)
        v63 = v61;
      else
        v63 = 0;
      *(_QWORD *)(v63 + 40) = v58;
    }
    v64 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v60, 2);
    v66 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 22536), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v49, v64, 0, 0, 0, v65);
    v68 = JSC::FTL::Output::load((uint64_t)this + 27640, v66, v67, 2);
    v69 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v60, 2);
    v71 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 18568), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43, v69, 0, 0, 0, v70);
    JSC::FTL::Output::store((uint64_t)this + 27640, v68, v71, v72);
    v73 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
    v74 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v60, v73);
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v74, v24, v38, NAN, NAN, v75, v76, v77, v78);
    *((_QWORD *)this + 3472) = v24;
    *((_QWORD *)this + 3473) = v56;
    v79 = this;
    v80 = UninitializedContiguousJSArrayInternal;
  }
  else
  {
    v93 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
    v79 = this;
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetRestLength(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  JSC::FTL::Output *v2;
  uint64_t v3;
  JSC::B3::BasicBlock *v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  JSC::InlineCallFrame *v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v4 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v2);
  v5 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, 0);
  v6 = JSC::FTL::Output::anchor(v2, v5);
  v8 = v7;
  v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v2, *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  v16 = *((_QWORD *)this + 3524);
  v17 = (JSC::InlineCallFrame *)(v16 & 0xFFFFFFFF8);
  if ((v16 & 1) != 0)
    v17 = *(JSC::InlineCallFrame **)v17;
  v19 = v18;
  v20 = JSC::FTL::Output::above(v2, v18, v15);
  JSC::FTL::Output::branch(v2, (uint64_t)v20, v3, (uint64_t)v4, NAN, NAN, v21, v22, v23, v24);
  *((_QWORD *)this + 3472) = v3;
  v25 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v4;
  v26 = JSC::FTL::Output::sub(v2, v19, v15);
  v27 = JSC::FTL::Output::anchor(v2, v26);
  v29 = v28;
  JSC::FTL::Output::jump(v2, v4, v30, v31, v32, v33, v34, v35);
  *((_QWORD *)this + 3472) = v4;
  *((_QWORD *)this + 3473) = v25;
  v36 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v2, 1, v6, v8, v27, v29);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileRegExpExec(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;

  v17 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  if ((v17 & 0xFC000000000000) == 0x40000000000000)
  {
    v25 = *(_QWORD *)(*((_QWORD *)this + 3528) + 40);
    if ((v25 & 0xFC000000000000) == 0x54000000000000)
    {
    }
    else
    {
    }
  }
  else
  {
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileRegExpExecNonGlobalOrSticky(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;

}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileRegExpTest(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;

  v17 = *(_QWORD *)(*((_QWORD *)this + 3528) + 32);
  if ((v17 & 0xFC000000000000) == 0x40000000000000)
  {
    v25 = *(_QWORD *)(*((_QWORD *)this + 3528) + 40);
    if ((v25 & 0xFC000000000000) == 0x54000000000000)
    {
    }
    else
    {
    }
  }
  else
  {
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileRegExpMatchFast(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;

}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileRegExpMatchFastGlobal(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;

}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewMap(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v5;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3528) + 72);
  *(_QWORD *)&v5 = *(_QWORD *)(*(_QWORD *)this + 16);
  *((_QWORD *)&v5 + 1) = v2;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewSet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v5;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3528) + 72);
  *(_QWORD *)&v5 = *(_QWORD *)(*(_QWORD *)this + 16);
  *((_QWORD *)&v5 + 1) = v2;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSetFunctionName(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::DFG::Node *v35;
  JSC::B3::Value *v36;
  char **v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::B3::Value *v53;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v42 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v43 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v43 != 0x3FFFFFFF) ? (v44 = v43 == -1) : (v44 = 1), v44))
  {
    v45 = 2;
  }
  else if (v43 >> 28)
  {
    v51 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v51 = v42;
    *(_DWORD *)(v51 + 8) = v43;
    v45 = 1;
    v42 = v51;
  }
  else
  {
    v45 = v42;
    v42 = 0;
  }
  v10 = v42 | v45;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v42 | v45) & 1) == 0)
    goto LABEL_3;
  v46 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v47 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v47 != 0x3FFFFFFF) ? (v48 = v47 == -1) : (v48 = 1), v48))
  {
    v49 = 2;
  }
  else if (v47 >> 28)
  {
    v52 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v52 = v46;
    *(_DWORD *)(v52 + 8) = v47;
    v49 = 1;
    v46 = v52;
  }
  else
  {
    v49 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v46 = 0;
  }
  v50 = v46 | v49;
  v12 = (_QWORD *)(v50 & 0xFFFFFFFF8);
  if ((v50 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, a3, a4, a5, a6, a7, a8);
  v17 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v33 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationSetFunctionName);
  v34 = *((_QWORD *)this + 3472);
  v36 = (JSC::B3::Value *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), 2, *((_QWORD *)this + 3471), v33, v17, (uint64_t)v24, v25);
  v53 = v36;
  v37 = (char **)(v34 + 8);
  v38 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v38 == *(_DWORD *)(v34 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v38 + 1, (unint64_t)&v53);
    v38 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v38) = *(_QWORD *)v41;
    v39 = v53;
  }
  else
  {
    *(_QWORD *)&(*v37)[8 * v38] = v36;
    v39 = v36;
  }
  *(_DWORD *)(v34 + 20) = v38 + 1;
  *((_QWORD *)v39 + 4) = v34;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringReplaceString(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(JSC::JSGlobalObject *, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t, double, float);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x8_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int8x8_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int8x8_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  JSC::B3::Value *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  JSC::B3::Value *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  uint64_t v149;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v149, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v149, v3, v4, v5, v6, v7, v8);
  if ((v149 & 1) != 0 && (v149 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v149 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v17 = *((_QWORD *)this + 3528);
  if ((*(_QWORD *)(v17 + 40) & 0xFC000000000000) != 0x54000000000000)
  {
    return;
  }
  JSC::DFG::Node::tryGetString((JSC::DFG::Node *)(*(_QWORD *)(v17 + 32) & 0xFF00FFFFFFFFFFFFLL), *(JSC::DFG::Graph **)this, v11, v12, v13, v14, v15, (int **)&v148);
  if (v148)
    v24 = JSC::DFG::Graph::tryAddStringSearchTable8(*(JSC::DFG::Graph **)this, &v148, v18, v19, v20, v21, v22, v23);
  else
    v24 = 0;
  JSC::DFG::Node::tryGetString((JSC::DFG::Node *)(*(_QWORD *)(*((_QWORD *)this + 3528) + 40) & 0xFF00FFFFFFFFFFFFLL), *(JSC::DFG::Graph **)this, v19, v20, v21, v22, v23, (int **)&v147);
  if (!v147)
    goto LABEL_13;
  if (!*((_DWORD *)v147 + 1))
  {
    if (v24)
    {
      v143 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v24);
    }
    else
    {
    }
    goto LABEL_16;
  }
  if (WTF::String::find((uint64_t)&v147, 0x24u, 0, v31, v32, v33) != -1)
  {
LABEL_13:
    if (!v24)
    {
      v73 = operationStringReplaceStringString;
      goto LABEL_12;
    }
    v142 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v24);
    v95 = operationStringReplaceStringStringWithTable8;
LABEL_15:
    goto LABEL_16;
  }
  if (v24)
  {
    v142 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v24);
    v95 = operationStringReplaceStringStringWithoutSubstitutionWithTable8;
    goto LABEL_15;
  }
  v73 = operationStringReplaceStringStringWithoutSubstitution;
LABEL_12:
LABEL_16:
  v103 = v147;
  v147 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v96, v97, v98, v99, v100, v101, v102);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  v104 = v148;
  v148 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v96, v97, v98, v99, v100, v101, v102);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileSetRegExpObjectLastIndex(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  int8x8_t v17;
  const JSC::FTL::AbstractHeap *v18;
  JSC::FTL::Output *v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;

  v10 = *((_QWORD *)this + 3528);
  if (*(_DWORD *)(v10 + 72))
  {
    v18 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4432);
    v19 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    v20 = (JSC::B3::Value *)v23;
  }
  else
  {
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4384));
    v14 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
    v15 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, v14);
    v16 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v15);
    v18 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4432);
    v19 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    v20 = (JSC::B3::Value *)v12;
    v21 = v11;
  }
  return JSC::FTL::Output::store32(v19, v20, v21, v18);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLogShadowChickenPrologue(JSC::B3::Procedure **this)
{
  JSC::B3::Value *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  JSC::B3::Value *v29;

  v10 = (uint64_t)this[3484];
  v11 = (uint64_t)this[569];
  v12 = (uint64_t)v2;
  if (v11)
  {
    v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v11);
    v12 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v13);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), v10, (const JSC::FTL::AbstractHeap *)(this + 566), v12);
  v14 = this[3484];
  if (!this[2831])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(this + 2817), (JSC::FTL::AbstractHeap *)(this + 2826), 0);
  v15 = (uint64_t)this[2829];
  if (v15)
  {
    v16 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v15);
    v14 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v14, v16);
  }
  v17 = JSC::FTL::Output::load((uint64_t)(this + 3455), (const JSC::FTL::AbstractHeap *)(this + 2826), (uint64_t)v14, 2);
  v18 = (uint64_t)this[575];
  v19 = (uint64_t)v2;
  if (v18)
  {
    v20 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v18);
    v19 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v20);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), v17, (const JSC::FTL::AbstractHeap *)(this + 572), v19);
  v21 = this[3484];
  if (!this[2849])
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::IndexedAbstractHeap *)(this + 2817), (JSC::FTL::AbstractHeap *)(this + 2844), 3);
  v22 = (uint64_t)this[2847];
  if (v22)
  {
    v23 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v22);
    v21 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v21, v23);
  }
  v24 = JSC::FTL::Output::load((uint64_t)(this + 3455), (const JSC::FTL::AbstractHeap *)(this + 2844), (uint64_t)v21, 2);
  v25 = (uint64_t)this[563];
  v26 = (uint64_t)v2;
  if (v25)
  {
    v27 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v25);
    v26 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v27);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), v24, (const JSC::FTL::AbstractHeap *)(this + 560), v26);
  v28 = (uint64_t)this[587];
  if (v28)
  {
    v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v28);
    v2 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v29);
  }
  return JSC::FTL::Output::store((uint64_t)(this + 3455), (uint64_t)v9, (const JSC::FTL::AbstractHeap *)(this + 584), (uint64_t)v2);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLogShadowChickenTail(JSC::B3::Procedure **this)
{
  JSC::B3::Value *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v11 = *(_QWORD *)(*((_QWORD *)this[1] + 3) + 64);
  v12 = (uint64_t)this[3524];
  if ((v12 & 1) != 0)
  {
    v43 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v44 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
        ? (v45 = (_DWORD)v44 == -1)
        : (v45 = 1),
          v45))
    {
      v46 = 2;
    }
    else if (v44 >> 28)
    {
      v47 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v47 = v43;
      *(_DWORD *)(v47 + 8) = v44;
      v46 = 1;
      v43 = v47;
    }
    else
    {
      v46 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v43 = v44 << 36;
    }
    v12 = v43 | v46;
  }
  v48 = v12;
  v20 = JSC::DFG::CodeOriginPool::addCodeOrigin(v11, &v48);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  v21 = (uint64_t)this[3484];
  v22 = (uint64_t)this[569];
  v23 = (uint64_t)v2;
  if (v22)
  {
    v24 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v22);
    v23 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v24);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), v21, (const JSC::FTL::AbstractHeap *)(this + 566), v23);
  v25 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), 31249);
  v26 = (uint64_t)this[563];
  v27 = (uint64_t)v2;
  if (v26)
  {
    v28 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v26);
    v27 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v28);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), v25, (const JSC::FTL::AbstractHeap *)(this + 560), v27);
  v29 = (uint64_t)this[581];
  v30 = (uint64_t)v2;
  if (v29)
  {
    v31 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v29);
    v30 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v31);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), v3, (const JSC::FTL::AbstractHeap *)(this + 578), v30);
  v32 = (uint64_t)this[587];
  v33 = (uint64_t)v2;
  if (v32)
  {
    v34 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v32);
    v33 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v34);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), (uint64_t)v10, (const JSC::FTL::AbstractHeap *)(this + 584), v33);
  v35 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), *((_QWORD *)*this + 4));
  v36 = (uint64_t)this[593];
  v37 = (uint64_t)v2;
  if (v36)
  {
    v38 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v36);
    v37 = JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v38);
  }
  JSC::FTL::Output::store((uint64_t)(this + 3455), v35, (const JSC::FTL::AbstractHeap *)(this + 590), v37);
  v39 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), v20);
  v40 = (uint64_t)this[599];
  if (v40)
  {
    v41 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v40);
    v2 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), v2, v41);
  }
  return JSC::FTL::Output::store((uint64_t)(this + 3455), v39, (const JSC::FTL::AbstractHeap *)(this + 596), (uint64_t)v2);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileRecordRegExpCachedResult(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  uint64_t v52;
  JSC::B3::Value *v53;
  uint64_t v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Value *v62;

  v9 = *(_QWORD *)(*((_QWORD *)this + 3528) + 24);
  v10 = *(_DWORD *)(*(_QWORD *)this + 164);
  if (v10 <= v9)
    goto LABEL_21;
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D59CD8);
  }
  if (v10 <= (int)v9 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D59CE0);
  }
  if (v10 <= (int)v9 + 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197D59CE8);
  }
  if (v10 <= (int)v9 + 4)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197D59CD0);
  }
  v12 = *(_QWORD *)(*(_QWORD *)this + 152);
  v13 = *(_QWORD *)(v12 + 8 * (v9 + 1));
  v14 = *(_QWORD *)(v12 + 8 * (v9 + 2));
  v15 = *(_QWORD *)(v12 + 8 * (v9 + 3));
  v16 = *(_QWORD *)(v12 + 8 * (v9 + 4));
  v48 = *((_QWORD *)this + 419);
  v49 = (uint64_t)v17;
  if (v48)
  {
    v50 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v48);
    v49 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v50);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v24, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3328), v49);
  v51 = *((_QWORD *)this + 425);
  v52 = (uint64_t)v17;
  if (v51)
  {
    v53 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v51);
    v52 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v53);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v31, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3376), v52);
  v54 = *((_QWORD *)this + 431);
  v55 = (uint64_t)v17;
  if (v54)
  {
    v56 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v54);
    v55 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v56);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v39, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3424), v55);
  v57 = *((_QWORD *)this + 437);
  v58 = (uint64_t)v17;
  if (v57)
  {
    v59 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57);
    v58 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v59);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, (uint64_t)v47, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3472), v58);
  v60 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v61 = *((_QWORD *)this + 443);
  if (v61)
  {
    v62 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v61);
    v17 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17, v62);
  }
  return JSC::FTL::Output::store32As8((uint64_t)this + 27640, v60, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3520), (uint64_t)v17);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileResolveScopeForHoistingFuncDeclInEval(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  JSC::DFG::Node *v58;
  WTF *v59;
  char **v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  double result;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v68 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v69 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v69 != 0x3FFFFFFF) ? (v70 = v69 == -1) : (v70 = 1), v70))
  {
    v71 = 2;
  }
  else if (v69 >> 28)
  {
    v77 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v77 = v68;
    *(_DWORD *)(v77 + 8) = v69;
    v71 = 1;
    v68 = v77;
  }
  else
  {
    v71 = v68;
    v68 = 0;
  }
  v10 = v68 | v71;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v68 | v71) & 1) == 0)
    goto LABEL_3;
  v72 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v73 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v73 != 0x3FFFFFFF) ? (v74 = v73 == -1) : (v74 = 1), v74))
  {
    v75 = 2;
  }
  else if (v73 >> 28)
  {
    v78 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v78 = v72;
    *(_DWORD *)(v78 + 8) = v73;
    v75 = 1;
    v72 = v78;
  }
  else
  {
    v75 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v72 = 0;
  }
  v76 = v72 | v75;
  v12 = (_QWORD *)(v76 & 0xFFFFFFFF8);
  if ((v76 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v18, v19, v20, v21, v22, v23);
  v24 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v32 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v40 = (int *)((char *)this + 28264);
  v41 = *((_DWORD *)this + 7066);
  if ((v41 & 0x80000000) == 0)
  {
    v42 = *((_QWORD *)this + 3481);
    v79 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v79 = 0x200000002;
    v80 = 0x200000002;
    v50 = (_QWORD *)(v42 + 32);
    v51 = *(unsigned int *)(v42 + 44);
    if ((_DWORD)v51 == *(_DWORD *)(v42 + 40))
    {
      v52 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v79);
      v53 = *(_QWORD *)(v42 + 32) + 16 * *(unsigned int *)(v42 + 44);
    }
    else
    {
      v53 = *v50 + 16 * v51;
      v52 = (unint64_t)&v79;
    }
    *(_QWORD *)v53 = 0;
    *(_QWORD *)(v53 + 8) = 0;
    v54 = *(_QWORD *)v52;
    *(_QWORD *)v52 = 0;
    *(_QWORD *)v53 = v54;
    LODWORD(v54) = *(_DWORD *)(v52 + 8);
    *(_DWORD *)(v52 + 8) = 0;
    *(_DWORD *)(v53 + 8) = v54;
    LODWORD(v54) = *(_DWORD *)(v52 + 12);
    *(_DWORD *)(v52 + 12) = 0;
    *(_DWORD *)(v53 + 12) = v54;
    ++*(_DWORD *)(v42 + 44);
    v41 = v51 | 0x80000000;
    *v40 = v51 | 0x80000000;
    v55 = v79;
    if (v79)
    {
      v79 = 0;
      LODWORD(v80) = 0;
      WTF::fastFree((unint64_t)v55, v43, v44, v45, v46, v47, v48, v49);
      v41 = *v40;
    }
  }
  v56 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationResolveScopeForHoistingFuncDeclInEval);
  v57 = *((_QWORD *)this + 3472);
  v59 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), v41, *((_QWORD *)this + 3471), v56, v24, (uint64_t)v31, v32);
  v79 = v59;
  v60 = (char **)(v57 + 8);
  v61 = *(unsigned int *)(v57 + 20);
  if ((_DWORD)v61 == *(_DWORD *)(v57 + 16))
  {
    v67 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)&v79);
    v61 = *(unsigned int *)(v57 + 20);
    *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8 * v61) = *(_QWORD *)v67;
    v62 = v79;
  }
  else
  {
    *(_QWORD *)&(*v60)[8 * v61] = v59;
    v62 = v59;
  }
  *(_DWORD *)(v57 + 20) = v61 + 1;
  *((_QWORD *)v62 + 4) = v57;
  v64 = *((_QWORD *)this + 3528);
  v65 = *((_QWORD *)this + 3521);
  v81.n128_u64[0] = v63;
  v81.n128_u64[1] = v65;
  v82 = v64;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v79, (uint64_t *)this + 3492, &v82, &v81).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileResolveScope(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  JSC::DFG::Node *v58;
  WTF *v59;
  char **v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  double result;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v68 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v69 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v69 != 0x3FFFFFFF) ? (v70 = v69 == -1) : (v70 = 1), v70))
  {
    v71 = 2;
  }
  else if (v69 >> 28)
  {
    v77 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v77 = v68;
    *(_DWORD *)(v77 + 8) = v69;
    v71 = 1;
    v68 = v77;
  }
  else
  {
    v71 = v68;
    v68 = 0;
  }
  v10 = v68 | v71;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v68 | v71) & 1) == 0)
    goto LABEL_3;
  v72 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v73 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v73 != 0x3FFFFFFF) ? (v74 = v73 == -1) : (v74 = 1), v74))
  {
    v75 = 2;
  }
  else if (v73 >> 28)
  {
    v78 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v78 = v72;
    *(_DWORD *)(v78 + 8) = v73;
    v75 = 1;
    v72 = v78;
  }
  else
  {
    v75 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v72 = 0;
  }
  v76 = v72 | v75;
  v12 = (_QWORD *)(v76 & 0xFFFFFFFF8);
  if ((v76 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v18, v19, v20, v21, v22, v23);
  v24 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v32 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v40 = (int *)((char *)this + 28264);
  v41 = *((_DWORD *)this + 7066);
  if ((v41 & 0x80000000) == 0)
  {
    v42 = *((_QWORD *)this + 3481);
    v79 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v79 = 0x200000002;
    v80 = 0x200000002;
    v50 = (_QWORD *)(v42 + 32);
    v51 = *(unsigned int *)(v42 + 44);
    if ((_DWORD)v51 == *(_DWORD *)(v42 + 40))
    {
      v52 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v79);
      v53 = *(_QWORD *)(v42 + 32) + 16 * *(unsigned int *)(v42 + 44);
    }
    else
    {
      v53 = *v50 + 16 * v51;
      v52 = (unint64_t)&v79;
    }
    *(_QWORD *)v53 = 0;
    *(_QWORD *)(v53 + 8) = 0;
    v54 = *(_QWORD *)v52;
    *(_QWORD *)v52 = 0;
    *(_QWORD *)v53 = v54;
    LODWORD(v54) = *(_DWORD *)(v52 + 8);
    *(_DWORD *)(v52 + 8) = 0;
    *(_DWORD *)(v53 + 8) = v54;
    LODWORD(v54) = *(_DWORD *)(v52 + 12);
    *(_DWORD *)(v52 + 12) = 0;
    *(_DWORD *)(v53 + 12) = v54;
    ++*(_DWORD *)(v42 + 44);
    v41 = v51 | 0x80000000;
    *v40 = v51 | 0x80000000;
    v55 = v79;
    if (v79)
    {
      v79 = 0;
      LODWORD(v80) = 0;
      WTF::fastFree((unint64_t)v55, v43, v44, v45, v46, v47, v48, v49);
      v41 = *v40;
    }
  }
  v56 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationResolveScope);
  v57 = *((_QWORD *)this + 3472);
  v59 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), v41, *((_QWORD *)this + 3471), v56, v24, (uint64_t)v31, v32);
  v79 = v59;
  v60 = (char **)(v57 + 8);
  v61 = *(unsigned int *)(v57 + 20);
  if ((_DWORD)v61 == *(_DWORD *)(v57 + 16))
  {
    v67 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)&v79);
    v61 = *(unsigned int *)(v57 + 20);
    *(_QWORD *)(*(_QWORD *)(v57 + 8) + 8 * v61) = *(_QWORD *)v67;
    v62 = v79;
  }
  else
  {
    *(_QWORD *)&(*v60)[8 * v61] = v59;
    v62 = v59;
  }
  *(_DWORD *)(v57 + 20) = v61 + 1;
  *((_QWORD *)v62 + 4) = v57;
  v64 = *((_QWORD *)this + 3528);
  v65 = *((_QWORD *)this + 3521);
  v81.n128_u64[0] = v63;
  v81.n128_u64[1] = v65;
  v82 = v64;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v79, (uint64_t *)this + 3492, &v82, &v81).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetDynamicVar(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  JSC::DFG::Node *v61;
  char **v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  double result;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v70 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v71 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v71 != 0x3FFFFFFF) ? (v72 = v71 == -1) : (v72 = 1), v72))
  {
    v73 = 2;
  }
  else if (v71 >> 28)
  {
    v79 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v79 = v70;
    *(_DWORD *)(v79 + 8) = v71;
    v73 = 1;
    v70 = v79;
  }
  else
  {
    v73 = v70;
    v70 = 0;
  }
  v10 = v70 | v73;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v70 | v73) & 1) == 0)
    goto LABEL_3;
  v74 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v75 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v75 != 0x3FFFFFFF) ? (v76 = v75 == -1) : (v76 = 1), v76))
  {
    v77 = 2;
  }
  else if (v75 >> 28)
  {
    v80 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v80 = v74;
    *(_DWORD *)(v80 + 8) = v75;
    v77 = 1;
    v74 = v80;
  }
  else
  {
    v77 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v74 = 0;
  }
  v78 = v74 | v77;
  v12 = (_QWORD *)(v78 & 0xFFFFFFFF8);
  if ((v78 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v18, v19, v20, v21, v22, v23);
  v24 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v32 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v17);
  v33 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 76));
  v41 = (int *)((char *)this + 28264);
  v42 = *((_DWORD *)this + 7066);
  if ((v42 & 0x80000000) == 0)
  {
    v43 = *((_QWORD *)this + 3481);
    v81 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v81 = 0x200000002;
    v82 = 0x200000002;
    v51 = (_QWORD *)(v43 + 32);
    v52 = *(unsigned int *)(v43 + 44);
    if ((_DWORD)v52 == *(_DWORD *)(v43 + 40))
    {
      v53 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v81);
      v54 = *(_QWORD *)(v43 + 32) + 16 * *(unsigned int *)(v43 + 44);
    }
    else
    {
      v54 = *v51 + 16 * v52;
      v53 = (unint64_t)&v81;
    }
    *(_QWORD *)v54 = 0;
    *(_QWORD *)(v54 + 8) = 0;
    v55 = *(_QWORD *)v53;
    *(_QWORD *)v53 = 0;
    *(_QWORD *)v54 = v55;
    LODWORD(v55) = *(_DWORD *)(v53 + 8);
    *(_DWORD *)(v53 + 8) = 0;
    *(_DWORD *)(v54 + 8) = v55;
    LODWORD(v55) = *(_DWORD *)(v53 + 12);
    *(_DWORD *)(v53 + 12) = 0;
    *(_DWORD *)(v54 + 12) = v55;
    ++*(_DWORD *)(v43 + 44);
    v42 = v52 | 0x80000000;
    *v41 = v52 | 0x80000000;
    v56 = v81;
    if (v81)
    {
      v81 = 0;
      LODWORD(v82) = 0;
      WTF::fastFree((unint64_t)v56, v44, v45, v46, v47, v48, v49, v50);
      v42 = *v41;
    }
  }
  v57 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationGetDynamicVar);
  v58 = *((_QWORD *)this + 3472);
  v59 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v60 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v42, *((_QWORD *)this + 3471), v57, v24, (uint64_t)v31, v32, v33);
  JSC::B3::Procedure::addValueImpl(v59, v60);
  v81 = v60;
  v62 = (char **)(v58 + 8);
  v63 = *(unsigned int *)(v58 + 20);
  if ((_DWORD)v63 == *(_DWORD *)(v58 + 16))
  {
    v69 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v62, v63 + 1, (unint64_t)&v81);
    v63 = *(unsigned int *)(v58 + 20);
    *(_QWORD *)(*(_QWORD *)(v58 + 8) + 8 * v63) = *(_QWORD *)v69;
    v64 = v81;
  }
  else
  {
    *(_QWORD *)&(*v62)[8 * v63] = v60;
    v64 = v60;
  }
  *(_DWORD *)(v58 + 20) = v63 + 1;
  *((_QWORD *)v64 + 4) = v58;
  v66 = *((_QWORD *)this + 3528);
  v67 = *((_QWORD *)this + 3521);
  v83.n128_u64[0] = v65;
  v83.n128_u64[1] = v67;
  v84 = v66;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v81, (uint64_t *)this + 3492, &v84, &v83).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutDynamicVar(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  JSC::DFG::Node *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double result;
  char v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v55 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v56 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v56 != 0x3FFFFFFF) ? (v57 = v56 == -1) : (v57 = 1), v57))
  {
    v58 = 2;
  }
  else if (v56 >> 28)
  {
    v64 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v64 = v55;
    *(_DWORD *)(v64 + 8) = v56;
    v58 = 1;
    v55 = v64;
  }
  else
  {
    v58 = v55;
    v55 = 0;
  }
  v10 = v55 | v58;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v55 | v58) & 1) == 0)
    goto LABEL_3;
  v59 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v60 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v60 != 0x3FFFFFFF) ? (v61 = v60 == -1) : (v61 = 1), v61))
  {
    v62 = 2;
  }
  else if (v60 >> 28)
  {
    v65 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v65 = v59;
    *(_DWORD *)(v65 + 8) = v60;
    v62 = 1;
    v59 = v65;
  }
  else
  {
    v62 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v59 = 0;
  }
  v63 = v59 | v62;
  v12 = (_QWORD *)(v63 & 0xFFFFFFFF8);
  if ((v63 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v23 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*((_QWORD *)this + 3528) + 72));
  v24 = *((_QWORD *)this + 3528);
  v25 = *(unsigned __int16 *)(v24 + 18);
  if (v25 == 6)
    goto LABEL_9;
  if (*(unsigned __int16 *)(v24 + 18) <= 0x74u)
  {
    if ((v25 - 101) >= 4)
    {
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x197D5AA08);
    }
  }
  else
  {
    v54 = v25 - 117;
    if ((v25 - 117) <= 0x3C)
    {
      if (((1 << v54) & 0x100000000000201FLL) != 0)
        goto LABEL_22;
      if (((1 << v54) & 0x4020) != 0)
        goto LABEL_9;
    }
    if (v25 != 391)
    {
      if (v25 != 253)
        goto LABEL_49;
LABEL_9:
      v26 = (unsigned __int8 *)(v24 + 72);
      goto LABEL_10;
    }
  }
LABEL_22:
  v26 = (unsigned __int8 *)(v24 + 80);
LABEL_10:
  v27 = *v26;
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, v17, v18, v19, v20, v21, v22);
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
  v37 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v23);
  v38 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_DWORD *)(*((_QWORD *)this + 3528) + 76));
  if (v27)
    v46 = operationPutDynamicVarSloppy;
  else
    v46 = operationPutDynamicVarStrict;
  v47 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v46);
  v48 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)this + 3455, 2, v47, v28, (uint64_t)v35, v36, v37, v38);
  v51 = *((_QWORD *)this + 3528);
  v52 = *((_QWORD *)this + 3521);
  v67.n128_u64[0] = v50;
  v67.n128_u64[1] = v52;
  v68 = v51;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v66, (uint64_t *)this + 3492, &v68, &v67).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringSubstring(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSCell *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;
  uint64_t v64;
  uint64_t v65;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v65, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v16 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v65, v3, v4, v5, v6, v7, v8);
  if ((v65 & 1) != 0 && (v65 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v65 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((*(_QWORD *)(*((_QWORD *)this + 3528) + 40) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
  }
  else
  {
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileToLowerCase(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::BasicBlock *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  JSC::B3::Value *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  JSC::B3::Value *v75;
  uint64_t v76;
  JSC::FTL::IndexedAbstractHeap *v77;
  uint64_t v78;
  JSC::B3::Value *v79;
  JSC::B3::Value *v80;
  JSC::B3::Value *v81;
  JSC::B3::Value *v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  JSC::B3::Value *v85;
  JSC::B3::Value *v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::B3::Value *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  JSC::B3::Value *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  JSC::JSCell *v122;
  JSC::B3::BasicBlock *v123;
  uint64_t v124;
  uint64_t v125;
  JSC::B3::Value *v126;
  uint64_t v127;

  v2 = *(_QWORD *)this;
  JSC::CodeOrigin::CodeOrigin(&v127, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
  v122 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v127, v3, v4, v5, v6, v7, v8);
  if ((v127 & 1) != 0 && (v127 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v127 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  v16 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v17 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v18 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v19 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v20 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v123 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v126 = v28;
  v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v30 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v29);
  v116 = v31;
  v32 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v33 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32);
  v119 = v34;
  v120 = v33;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v40, v20, v16, NAN, NAN, v41, v42, v43, v44);
  *((_QWORD *)this + 3472) = v16;
  v121 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v17;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v28, *((const JSC::FTL::AbstractHeap **)this + 3313));
  v46 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5200));
  v47 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v48 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v46, v47);
  v49 = JSC::FTL::Output::logicalNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v48);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v49, v20, v17, NAN, NAN, v50, v51, v52, v53);
  *((_QWORD *)this + 3472) = v17;
  *((_QWORD *)this + 3473) = v18;
  v54 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5248));
  v55 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5152));
  v56 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v28);
  v117 = v57;
  v118 = v56;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18, v58, v59, v60, v61, v62, v63);
  *((_QWORD *)this + 3472) = v18;
  *((_QWORD *)this + 3473) = v19;
  v64 = (JSC::B3::Value *)JSC::FTL::Output::phi((_QWORD *)this + 3455, 1);
  v65 = v64;
  if (v30 || v116)
  {
    if ((*(_WORD *)(v30 + 12) & 0xFFF) == 0x98)
      v66 = v30;
    else
      v66 = 0;
    *(_QWORD *)(v66 + 40) = v64;
  }
  v67 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v64);
  v69 = v68;
  v70 = JSC::FTL::Output::below((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v65, v54);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v70, v19, (uint64_t)v123, NAN, NAN, v71, v72, v73, v74);
  *((_QWORD *)this + 3472) = v19;
  *((_QWORD *)this + 3473) = v20;
  v75 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v65, 2);
  v77 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 14600), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v55, v75, 0, 0, 0, v76);
  v79 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)v77, v78);
  v80 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -128);
  v81 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v79, v80);
  v82 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 65);
  v83 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v79, v82);
  v84 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 25);
  v85 = JSC::FTL::Output::belowOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v83, v84);
  v86 = JSC::FTL::Output::bitOr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v81, v85);
  v87 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v65, *((JSC::B3::Value **)this + 3458));
  v88 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v87);
  if (v88 || v89)
  {
    if ((*(_WORD *)(v88 + 12) & 0xFFF) == 0x98)
      v94 = v88;
    else
      v94 = 0;
    *(_QWORD *)(v94 + 40) = v65;
  }
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v86, v20, (uint64_t)v18, NAN, NAN, v90, v91, v92, v93);
  *((_QWORD *)this + 3472) = v20;
  *((_QWORD *)this + 3473) = v123;
  v125 = JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 1, v120, v119, v67, v69);
  v106 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v105);
  v108 = v107;
  JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v123, v109, v110, v111, v112, v113, v114);
  *((_QWORD *)this + 3472) = v123;
  *((_QWORD *)this + 3473) = v121;
  v115 = (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v118, v117, v106, v108);
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNumberToStringWithRadix(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t valid;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  double result;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[24];
  __n128 v76;
  uint64_t v77;

  v9 = *((_QWORD *)this + 3528);
  if (*(unsigned __int16 *)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    a3 = **(_QWORD **)((*(_QWORD *)(v9 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if (a3 >= 0xFFFE000000000000 && (a3 - 2) <= 0x22)
    {
      goto LABEL_18;
    }
  }
  v11 = *(_QWORD *)this;
  v12 = *((_QWORD *)this + 3524);
  if ((v12 & 1) == 0)
  {
    v13 = *(_QWORD *)(v11 + 32);
LABEL_7:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
    goto LABEL_8;
  }
  v60 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v61 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v61 != 0x3FFFFFFF) ? (v62 = v61 == -1) : (v62 = 1), v62))
  {
    v63 = 2;
  }
  else if (v61 >> 28)
  {
    v69 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v69 = v60;
    *(_DWORD *)(v69 + 8) = v61;
    v63 = 1;
    v60 = v69;
  }
  else
  {
    v63 = v60;
    v60 = 0;
  }
  v12 = v60 | v63;
  v13 = *(_QWORD *)(v11 + 32);
  if (((v60 | v63) & 1) == 0)
    goto LABEL_7;
  v64 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v65 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v65 != 0x3FFFFFFF) ? (v66 = v65 == -1) : (v66 = 1), v66))
  {
    v67 = 2;
  }
  else if (v65 >> 28)
  {
    v70 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
    v71 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v71 = v64;
    *(_DWORD *)(v71 + 8) = v70;
    v67 = 1;
    v64 = v71;
  }
  else
  {
    v67 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v64 = 0;
  }
  v68 = v64 | v67;
  v14 = (_QWORD *)(v68 & 0xFFFFFFFF8);
  if ((v68 & 1) == 0)
  {
    v16 = 0;
    v15 = 1;
LABEL_8:
    v17 = v14;
    if (!v14)
      goto LABEL_10;
    goto LABEL_9;
  }
  v15 = 0;
  v16 = 0;
  v17 = (_QWORD *)*v14;
  if (*v14)
LABEL_9:
    v13 = v17[1];
LABEL_10:
  v18 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v19 = (*(_QWORD *)(*((_QWORD *)this + 3528) + 24) >> 50) & 0x3FLL;
  switch((_DWORD)v19)
  {
    case 0x34:
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v18, a3, a4, a5, a6, a7, a8);
      v74 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18);
      break;
    case 0x31:
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v18, a3, a4, a5, a6, a7, a8);
      v74 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18);
      break;
    case 1:
      JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v18, a3, a4, a5, a6, a7, a8);
      v74 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197D5B314);
  }
LABEL_18:
  v77 = *((_QWORD *)this + 3528);
  v58 = *((_QWORD *)this + 3521);
  v76.n128_u64[0] = valid;
  v76.n128_u64[1] = v58;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v75, (uint64_t *)this + 3492, &v77, &v76).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNumberToStringWithValidRadixConstant(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *valid;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckJSCast(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  int8x8_t v16;
  uint64_t v17;
  void (*v18)(WTF **__return_ptr);
  unsigned int *v19;
  WTF *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t **v121;
  uint64_t v122;
  uint64_t v123;
  JSC::B3::Value *v124;
  uint64_t v125;
  JSC::B3::Value *v126;
  JSC::B3::Value *v127;
  JSC::B3::Value *v128;
  uint64_t v129;
  JSC::B3::Value *v130;
  uint64_t v131;
  JSC::B3::Value *v132;
  JSC::B3::Value *v133;
  JSC::B3::Value *v134;
  uint64_t v135;
  JSC::B3::Value *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char **v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  JSC::B3::Value *v148;
  uint64_t v149;
  uint64_t v150;
  char **v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v154;
  JSC::B3::Value *v155;
  uint64_t v156;
  JSC::B3::Value *v157;
  uint64_t v158;
  uint64_t v159;
  int8x8_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  JSC::B3::Value *v171;
  uint64_t v172;
  uint64_t v173;
  JSC::B3::Value *v174;
  JSC::B3::Value *v175;
  char **v176;
  uint64_t v177;
  WTF *v178;
  uint64_t v179;
  JSC::B3::Value *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int8x8_t v187;
  char **v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  uint64_t v202;
  unsigned int v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  BOOL v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  BOOL v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  BOOL v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  __int16 v263;
  __int16 v264;
  uint64_t v265;
  uint64_t v266;
  WTF *v267;
  uint64_t v268;
  WTF *v269;
  uint64_t v270;
  uint64_t v271;
  WTF *v272[2];
  char v273;
  uint64_t *v274;
  uint64_t *v275;
  char v276;

  v10 = *((_QWORD *)this + 3528);
  if (*(unsigned __int16 *)(v10 + 18) - 191 >= 2)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v10, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x453B, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCheckJSCast()", "m_node->op() == CheckJSCast || m_node->op() == CheckNotJSCast");
    __break(0xC471u);
    JUMPOUT(0x197D5C330);
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 3528) + 72);
  if (*(_BYTE *)(v12 + 42))
  {
    v13 = *(_WORD *)(v12 + 40);
    v14 = JSC::speculationFromClassInfoInheritance(*(_QWORD *)(*((_QWORD *)this + 3528) + 72));
    v17 = *((_QWORD *)this + 3528);
    if (*(_WORD *)(v17 + 18) == 191)
    {
      v15 = JSC::FTL::Output::bitNot((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v15);
      v17 = *((_QWORD *)this + 3528);
    }
    return;
  }
  v18 = *(void (**)(WTF **__return_ptr))(v12 + 32);
  if (v18)
  {
    v19 = (unsigned int *)((char *)this + 28120);
    v18(v272);
    v20 = v272[0];
    v21 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
    v272[0] = v11;
    v272[1] = 0;
    v273 = 3;
    JSC::B3::StackmapValue::append((__int128 *)v21, (uint64_t)v11, (unint64_t)&v272[1]);
    v22 = *((_QWORD *)this + 3488);
    *(_OWORD *)v272 = xmmword_199124420;
    JSC::B3::StackmapValue::append((__int128 *)v21, v22, (unint64_t)v272);
    v23 = *((_QWORD *)this + 3487);
    *(_OWORD *)v272 = xmmword_199124430;
    JSC::B3::StackmapValue::append((__int128 *)v21, v23, (unint64_t)v272);
    v24 = *((_QWORD *)this + 3524);
    if ((v24 & 1) != 0)
    {
      v208 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || (v209 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v209 == 0x3FFFFFFF)
        || (_DWORD)v209 == -1)
      {
        v210 = 2;
      }
      else if (v209 >> 28)
      {
        v251 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v251 = v208;
        *(_DWORD *)(v251 + 8) = v209;
        v210 = 1;
        v208 = v251;
      }
      else
      {
        v210 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
        v208 = v209 << 36;
      }
      v24 = v208 | v210;
    }
    v268 = v24;
    v270 = *((_QWORD *)this + 3525);
    if ((v270 & 1) != 0)
    {
      v211 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
      if ((v270 & 2) != 0
        || (v212 = *(unsigned int *)((v270 & 0xFFFFFFFF8) + 8), (_DWORD)v212 == 0x3FFFFFFF)
        || (_DWORD)v212 == -1)
      {
        v213 = 2;
      }
      else if (v212 >> 28)
      {
        v252 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v252 = v211;
        *(_DWORD *)(v252 + 8) = v212;
        v213 = 1;
        v211 = v252;
      }
      else
      {
        v213 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
        v211 = v212 << 36;
      }
      v270 = v211 | v213;
      v25 = (v211 | v213) & 1;
    }
    else
    {
      v25 = 0;
    }
    v264 = *((_WORD *)this + 14104);
    v262 = JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)v21);
    v32 = v31;
    v33 = v270;
    v266 = v25;
    if (v25)
    {
      v214 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
      if ((v270 & 2) != 0
        || (v215 = *(unsigned int *)((v270 & 0xFFFFFFFF8) + 8), (_DWORD)v215 == 0x3FFFFFFF)
        || (_DWORD)v215 == -1)
      {
        v216 = 2;
      }
      else if (v215 >> 28)
      {
        v253 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v253 = v214;
        *(_DWORD *)(v253 + 8) = v215;
        v216 = 1;
        v214 = v253;
      }
      else
      {
        v216 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
        v214 = v215 << 36;
      }
      v33 = v214 | v216;
    }
    v41 = v272[0];
    v275 = 0;
    v276 = 1;
    if (HIDWORD(v272[1]))
    {
      v42 = 8 * HIDWORD(v272[1]);
      do
      {
        v43 = *(_QWORD *)v41;
        v41 = (WTF *)((char *)v41 + 8);
        JSC::B3::StackmapValue::append((__int128 *)v21, v43, (unint64_t)&v275);
        v42 -= 8;
      }
      while (v42);
      v41 = v272[0];
    }
    if (&v273 == (char *)v41 || v41 == 0)
    {
      if ((v33 & 1) == 0)
        goto LABEL_21;
    }
    else
    {
      v272[0] = 0;
      LODWORD(v272[1]) = 0;
      WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
      if ((v33 & 1) == 0)
        goto LABEL_21;
    }
    if ((v33 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v33 & 0xFFFFFFFF8, v34, v35, v36, v37, v38, v39, v40);
LABEL_21:
    *((_WORD *)v21 + 84) = *((_WORD *)v20 + 2);
    v21[8] |= 0x30000uLL;
    v21[10] |= 0x30000uLL;
    v45 = *((_QWORD *)this + 3528);
    v46 = *(_QWORD *)v45;
    v263 = *(_WORD *)(v45 + 18);
    v261 = *((_QWORD *)this + 1);
    if ((*(_QWORD *)v45 & 1) != 0)
    {
      v217 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
      if ((v46 & 2) != 0
        || ((v218 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v218 != 0x3FFFFFFF)
          ? (v219 = (_DWORD)v218 == -1)
          : (v219 = 1),
            v219))
      {
        v220 = 2;
      }
      else if (v218 >> 28)
      {
        v254 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v254 = v217;
        *(_DWORD *)(v254 + 8) = v218;
        v45 = *((_QWORD *)this + 3528);
        v220 = 1;
        v217 = v254;
      }
      else
      {
        v220 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
        v217 = v218 << 36;
      }
      v46 = v217 | v220;
    }
    v47 = *(_QWORD *)(v45 + 24);
    v48 = *((_QWORD *)this + 3505);
    v49 = *(unsigned int *)((v47 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v50 = (uint64_t *)(v48 + 24);
    v51 = (uint64_t *)(v48 + 8);
    if ((v47 & 1) != 0)
      v52 = v50;
    else
      v52 = v51;
    v53 = *v52;
    v54 = *v52 + 32 * v49;
    v55 = *v19;
    v56 = *(_DWORD *)(v54 + 20);
    if (*v19 != v56)
    {
      if ((*(_QWORD *)(v54 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v56 ^ v55) >= 2)
        {
          v200 = *(_QWORD *)v54;
          if (*(_QWORD *)v54 != 4)
          {
            *(_QWORD *)v54 = v200 | 2;
            v201 = (unsigned int *)(v200 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v200 & 1) != 0)
            {
              v247 = 2 * *v201;
              while (v247 * 4)
              {
                v248 = *(_QWORD *)&v201[v247];
                if ((*(_BYTE *)(v248 + 19) & 0xC) == 0)
                {
                  v249 = *(_QWORD *)(v248 + 96);
                  v250 = (v249 & 1) != 0 ? (v249 >> 1) & 3 : *(unsigned __int8 *)(v249 + 4);
                  v247 -= 2;
                  if (v250 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v201, v34, v35, v36, v37, v38, v39, v40);
                goto LABEL_197;
              }
            }
            else if (v201)
            {
              if ((*((_BYTE *)v201 + 19) & 0xC) != 0
                || ((v202 = *((_QWORD *)v201 + 12), (v202 & 1) != 0)
                  ? (v203 = (v202 >> 1) & 3)
                  : (v203 = *(unsigned __int8 *)(v202 + 4)),
                    v203 == 2))
              {
LABEL_197:
                *(_QWORD *)v54 = 4;
              }
            }
          }
          *(_DWORD *)(v53 + 32 * v49 + 16) = -21020677;
        }
        if ((v55 & 1) != 0)
          *(_QWORD *)v54 &= ~2uLL;
      }
      *(_DWORD *)(v54 + 20) = v55;
    }
    v57 = *(_QWORD *)(v54 + 24);
    v58 = v19[24];
    do
      v59 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v59 + 1, (unsigned int *)v20));
    v60 = v268;
    if ((v268 & 1) != 0)
    {
      v221 = *(_QWORD *)(v268 & 0xFFFFFFFF8);
      if ((v268 & 2) != 0
        || ((v222 = *(unsigned int *)((v268 & 0xFFFFFFFF8) + 8), (_DWORD)v222 != 0x3FFFFFFF)
          ? (v223 = (_DWORD)v222 == -1)
          : (v223 = 1),
            v223))
      {
        v224 = 2;
      }
      else if (v222 >> 28)
      {
        v255 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v255 = v221;
        *(_DWORD *)(v255 + 8) = v222;
        v224 = 1;
        v221 = v255;
      }
      else
      {
        v224 = *(_QWORD *)(v268 & 0xFFFFFFFF8);
        v221 = v222 << 36;
      }
      v60 = v221 | v224;
    }
    v61 = v270;
    if (v266)
    {
      v225 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
      if ((v270 & 2) != 0
        || ((v226 = *(unsigned int *)((v270 & 0xFFFFFFFF8) + 8), (_DWORD)v226 != 0x3FFFFFFF)
          ? (v227 = (_DWORD)v226 == -1)
          : (v227 = 1),
            v227))
      {
        v228 = 2;
      }
      else if (v226 >> 28)
      {
        v256 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v256 = v225;
        *(_DWORD *)(v256 + 8) = v226;
        v228 = 1;
        v225 = v256;
      }
      else
      {
        v228 = *(_QWORD *)(v270 & 0xFFFFFFFF8);
        v225 = v226 << 36;
      }
      v61 = v225 | v228;
    }
    v62 = v46;
    if ((v46 & 1) != 0)
    {
      v229 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
      if ((v46 & 2) != 0
        || (v230 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v230 == 0x3FFFFFFF)
        || (_DWORD)v230 == -1)
      {
        v231 = 2;
      }
      else if (v230 >> 28)
      {
        v257 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v257 = v229;
        *(_DWORD *)(v257 + 8) = v230;
        v231 = 1;
        v229 = v257;
      }
      else
      {
        v231 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
        v229 = v230 << 36;
      }
      v62 = v229 | v231;
    }
    v63 = v58 | (v262 << 32);
    v64 = WTF::fastMalloc((WTF *)0x60);
    v72 = v64;
    *(_DWORD *)(v64 + 8) = 1;
    *(_QWORD *)v64 = &off_1E3577BA8;
    *(_QWORD *)(v64 + 16) = v57;
    do
      v73 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v73 + 1, (unsigned int *)v20));
    *(_QWORD *)(v64 + 24) = v20;
    *(_QWORD *)(v64 + 32) = v32;
    v74 = v60;
    *(_QWORD *)(v64 + 40) = v261;
    if ((v60 & 1) != 0)
    {
      v232 = *(_QWORD *)(v60 & 0xFFFFFFFF8);
      if ((v60 & 2) != 0
        || ((v233 = *(unsigned int *)((v60 & 0xFFFFFFFF8) + 8), (_DWORD)v233 != 0x3FFFFFFF)
          ? (v234 = (_DWORD)v233 == -1)
          : (v234 = 1),
            v234))
      {
        v235 = 2;
      }
      else if (v233 >> 28)
      {
        v258 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v258 = v232;
        *(_DWORD *)(v258 + 8) = v233;
        v235 = 1;
        v232 = v258;
      }
      else
      {
        v235 = *(_QWORD *)(v60 & 0xFFFFFFFF8);
        v232 = v233 << 36;
      }
      v74 = v232 | v235;
    }
    *(_QWORD *)(v72 + 48) = v74;
    v75 = v61;
    if ((v61 & 1) != 0)
    {
      v236 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
      if ((v61 & 2) != 0
        || ((v237 = *(unsigned int *)((v61 & 0xFFFFFFFF8) + 8), (_DWORD)v237 != 0x3FFFFFFF)
          ? (v238 = (_DWORD)v237 == -1)
          : (v238 = 1),
            v238))
      {
        v239 = 2;
      }
      else if (v237 >> 28)
      {
        v259 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v259 = v236;
        *(_DWORD *)(v259 + 8) = v237;
        v239 = 1;
        v236 = v259;
      }
      else
      {
        v239 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
        v236 = v237 << 36;
      }
      v75 = v236 | v239;
    }
    *(_QWORD *)(v72 + 56) = v75;
    *(_WORD *)(v72 + 64) = v264;
    v76 = v62;
    *(_QWORD *)(v72 + 72) = v63;
    if ((v62 & 1) != 0)
    {
      v240 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
      if ((v62 & 2) != 0
        || (v241 = *(unsigned int *)((v62 & 0xFFFFFFFF8) + 8), (_DWORD)v241 == 0x3FFFFFFF)
        || (_DWORD)v241 == -1)
      {
        v242 = 2;
      }
      else if (v241 >> 28)
      {
        v260 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v260 = v240;
        *(_DWORD *)(v260 + 8) = v241;
        v242 = 1;
        v240 = v260;
      }
      else
      {
        v242 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
        v240 = v241 << 36;
      }
      v76 = v240 | v242;
    }
    *(_QWORD *)(v72 + 80) = v76;
    *(_WORD *)(v72 + 88) = v263;
    v77 = (unsigned int *)v21[7];
    v21[7] = v72;
    if (!v77)
      goto LABEL_40;
    v78 = v77 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v77 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
      if ((v62 & 1) == 0)
      {
LABEL_41:
        if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v61 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
        if ((v60 & 1) != 0 && (v60 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v60 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
        do
        {
          v81 = __ldaxr((unsigned int *)v20);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, (unsigned int *)v20));
        if (!v82)
        {
          atomic_store(1u, (unsigned int *)v20);
          v243 = (unsigned int *)*((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v243)
          {
            v244 = v243 + 2;
            do
            {
              v245 = __ldaxr(v244);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v244));
            if (!v246)
            {
              atomic_store(1u, v243 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v243 + 8))(v243);
            }
          }
          WTF::fastFree((unint64_t)v20, v65, v66, v67, v68, v69, v70, v71);
        }
        *((_WORD *)v21 + 56) = 256;
        *(_QWORD *)((char *)v21 + 114) = 0;
        v21[15] = 0;
        v21[16] = 0xFFFFFFFF00000000;
        if ((v46 & 1) != 0 && (v46 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v46 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
        if (v266 && (v270 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v270 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
        if ((v268 & 1) != 0 && (v268 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v268 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
        do
        {
          v83 = __ldaxr((unsigned int *)v20);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, (unsigned int *)v20));
        if (!v84)
        {
          atomic_store(1u, (unsigned int *)v20);
          v85 = (unsigned int *)*((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v85)
          {
            v86 = v85 + 2;
            do
            {
              v87 = __ldaxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
            {
              atomic_store(1u, v85 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v85 + 8))(v85);
            }
          }
          WTF::fastFree((unint64_t)v20, v65, v66, v67, v68, v69, v70, v71);
        }
        return;
      }
    }
    else
    {
LABEL_40:
      if ((v62 & 1) == 0)
        goto LABEL_41;
    }
    if ((v62 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v62 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
    goto LABEL_41;
  }
  v89 = JSC::B3::Procedure::addBlock((uint64_t *)*(unsigned __int8 *)(v12 + 42), *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v90 = v89;
  v91 = *((_QWORD *)this + 3473);
  if (v91)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v91, (uint64_t)v89);
  }
  else
  {
    v275 = v89;
    v93 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v93 = 0u;
    *((_OWORD *)v93 + 1) = 0u;
    v93[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v93;
    v274 = v93;
    v93[2] = v90;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v275, (uint64_t *)&v274, v94, v95, v96, v97, v98, (uint64_t)v272);
    v92 = v274;
    v99 = (uint64_t **)*((_QWORD *)this + 3479);
    *v274 = (uint64_t)this + 27824;
    v92[1] = (uint64_t)v99;
    *v99 = v92;
    *((_QWORD *)this + 3479) = v92;
  }
  v100 = JSC::B3::Procedure::addBlock(v92, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v101 = v100;
  v102 = *((_QWORD *)this + 3473);
  v267 = (WTF *)v100;
  if (v102)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v102, (uint64_t)v100);
  }
  else
  {
    v275 = v100;
    v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v104 = 0u;
    *((_OWORD *)v104 + 1) = 0u;
    v104[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v104;
    v274 = v104;
    v104[2] = v101;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v275, (uint64_t *)&v274, v105, v106, v107, v108, v109, (uint64_t)v272);
    v103 = v274;
    v110 = (uint64_t **)*((_QWORD *)this + 3479);
    *v274 = (uint64_t)this + 27824;
    v103[1] = (uint64_t)v110;
    *v110 = v103;
    *((_QWORD *)this + 3479) = v103;
  }
  v111 = JSC::B3::Procedure::addBlock(v103, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v112 = v111;
  v113 = *((_QWORD *)this + 3473);
  if (v113)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v113, (uint64_t)v111);
  }
  else
  {
    v275 = v111;
    v114 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v114 = 0u;
    *((_OWORD *)v114 + 1) = 0u;
    v114[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v114;
    v274 = v114;
    v114[2] = v112;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v275, (uint64_t *)&v274, v115, v116, v117, v118, v119, (uint64_t)v272);
    v120 = v274;
    v121 = (uint64_t **)*((_QWORD *)this + 3479);
    *v274 = (uint64_t)this + 27824;
    v120[1] = (uint64_t)v121;
    *v121 = v120;
    *((_QWORD *)this + 3479) = v120;
  }
  v271 = (uint64_t)v112;
  v122 = *((_QWORD *)this + 383);
  v123 = (uint64_t)v11;
  if (v122)
  {
    v124 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v122);
    v123 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v11, v124);
  }
  v125 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040), v123, 1);
  v126 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v125, 2);
  v127 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v128 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v126, v127);
  v129 = *((_QWORD *)this + 671);
  if (v129)
  {
    v130 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v129);
    v128 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v128, v130);
  }
  v131 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5344), (uint64_t)v128, 1);
  v132 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v131, 2);
  v133 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v134 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v132, v133);
  v135 = *((_QWORD *)this + 3472);
  v136 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v137 = *((_QWORD *)this + 3471);
  v138 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v138 + 8) = -1;
  *(_WORD *)(v138 + 12) = 152;
  *(_DWORD *)(v138 + 16) = 0;
  *(_BYTE *)(v138 + 20) = 1;
  *(_QWORD *)v138 = &unk_1E357EDA0;
  *(_QWORD *)(v138 + 40) = 0;
  *(_QWORD *)(v138 + 48) = v134;
  *(_QWORD *)(v138 + 24) = v137;
  *(_QWORD *)(v138 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v136, (JSC::B3::Value *)v138);
  v272[0] = (WTF *)v138;
  v142 = (char **)(v135 + 8);
  v143 = *(unsigned int *)(v135 + 20);
  if ((_DWORD)v143 == *(_DWORD *)(v135 + 16))
  {
    v204 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v142, v143 + 1, (unint64_t)v272);
    v143 = *(unsigned int *)(v135 + 20);
    *(_QWORD *)(*(_QWORD *)(v135 + 8) + 8 * v143) = *(_QWORD *)v204;
    v144 = v272[0];
  }
  else
  {
    *(_QWORD *)&(*v142)[8 * v143] = v138;
    v144 = (WTF *)v138;
  }
  *(_DWORD *)(v135 + 20) = v143 + 1;
  *((_QWORD *)v144 + 4) = v135;
  v145 = *((_QWORD *)this + 3472);
  v146 = *((_QWORD *)this + 3470);
  v147 = *((_QWORD *)this + 3471);
  v272[0] = (WTF *)v90;
  LOBYTE(v272[1]) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v145, v146, 154, v147, (uint64_t *)v272, v139, v140, v141);
  *((_QWORD *)this + 3472) = v90;
  v265 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v267;
  v148 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v149 = *((_QWORD *)this + 3471);
  v150 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v150 = off_1E357F5F0;
  *(_DWORD *)(v150 + 8) = -1;
  *(_WORD *)(v150 + 12) = 153;
  *(_DWORD *)(v150 + 16) = 2;
  *(_BYTE *)(v150 + 20) = 0;
  *(_QWORD *)(v150 + 24) = v149;
  *(_QWORD *)(v150 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v148, (JSC::B3::Value *)v150);
  v272[0] = (WTF *)v150;
  v151 = (char **)(v90 + 1);
  v152 = *((unsigned int *)v90 + 5);
  if ((_DWORD)v152 == *((_DWORD *)v90 + 4))
  {
    v205 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v151, v152 + 1, (unint64_t)v272);
    v152 = *((unsigned int *)v90 + 5);
    *(_QWORD *)(v90[1] + 8 * v152) = *(_QWORD *)v205;
    v153 = v272[0];
  }
  else
  {
    *(_QWORD *)&(*v151)[8 * v152] = v150;
    v153 = (WTF *)v150;
  }
  *((_DWORD *)v90 + 5) = v152 + 1;
  *((_QWORD *)v153 + 4) = v90;
  if ((*(_WORD *)(v138 + 12) & 0xFFF) == 0x98)
    v154 = v138;
  else
    v154 = 0;
  *(_QWORD *)(v154 + 40) = v150;
  v155 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
  v157 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v150, v155);
  v161 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v161 + 18) == 192)
  {
    v162 = *((_QWORD *)this + 3472);
    v163 = *((_QWORD *)this + 3470);
    v164 = *((_QWORD *)this + 3471);
    v272[0] = v267;
    LOBYTE(v272[1]) = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v162, v163, 154, v164, (uint64_t *)v272, v165, v166, v167);
    v168 = v271;
  }
  else
  {
    v168 = v271;
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v157, v271, (uint64_t)v267, NAN, NAN, v156, (uint64_t)v157, v158, v159);
  }
  *((_QWORD *)this + 3472) = v267;
  *((_QWORD *)this + 3473) = v168;
  v169 = v150;
  v170 = *((_QWORD *)this + 59);
  if (v170)
  {
    v171 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v170);
    v169 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v150, v171);
  }
  v172 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 448), v169, 2);
  v173 = *((_QWORD *)this + 3472);
  v174 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v175 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v172, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v174, v175);
  v272[0] = v175;
  v176 = (char **)(v173 + 8);
  v177 = *(unsigned int *)(v173 + 20);
  v269 = (WTF *)v90;
  if ((_DWORD)v177 == *(_DWORD *)(v173 + 16))
  {
    v206 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v176, v177 + 1, (unint64_t)v272);
    v177 = *(unsigned int *)(v173 + 20);
    *(_QWORD *)(*(_QWORD *)(v173 + 8) + 8 * v177) = *(_QWORD *)v206;
    v178 = v272[0];
  }
  else
  {
    *(_QWORD *)&(*v176)[8 * v177] = v175;
    v178 = v175;
  }
  *(_DWORD *)(v173 + 20) = v177 + 1;
  *((_QWORD *)v178 + 4) = v173;
  v179 = *((_QWORD *)this + 3472);
  v180 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v181 = *((_QWORD *)this + 3471);
  v182 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v182 + 8) = -1;
  *(_WORD *)(v182 + 12) = 152;
  *(_DWORD *)(v182 + 16) = 0;
  *(_BYTE *)(v182 + 20) = 1;
  *(_QWORD *)v182 = &unk_1E357EDA0;
  *(_QWORD *)(v182 + 40) = 0;
  *(_QWORD *)(v182 + 48) = v172;
  *(_QWORD *)(v182 + 24) = v181;
  *(_QWORD *)(v182 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v180, (JSC::B3::Value *)v182);
  v272[0] = (WTF *)v182;
  v188 = (char **)(v179 + 8);
  v189 = *(unsigned int *)(v179 + 20);
  if ((_DWORD)v189 == *(_DWORD *)(v179 + 16))
  {
    v207 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v188, v189 + 1, (unint64_t)v272);
    v189 = *(unsigned int *)(v179 + 20);
    *(_QWORD *)(*(_QWORD *)(v179 + 8) + 8 * v189) = *(_QWORD *)v207;
    v190 = v272[0];
  }
  else
  {
    *(_QWORD *)&(*v188)[8 * v189] = v182;
    v190 = (WTF *)v182;
  }
  *(_DWORD *)(v179 + 20) = v189 + 1;
  *((_QWORD *)v190 + 4) = v179;
  if ((*(_WORD *)(v182 + 12) & 0xFFF) == 0x98)
    v191 = v182;
  else
    v191 = 0;
  *(_QWORD *)(v191 + 40) = v150;
  v192 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v192 + 18) == 192)
  {
    v193 = v271;
    JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v175, v271, (uint64_t)v269, NAN, NAN, v183, v184, v185, v186);
  }
  else
  {
    v194 = *((_QWORD *)this + 3472);
    v195 = *((_QWORD *)this + 3470);
    v196 = *((_QWORD *)this + 3471);
    v272[0] = v269;
    LOBYTE(v272[1]) = 0;
    JSC::B3::BasicBlock::appendNewControlValue(v194, v195, 154, v196, (uint64_t *)v272, v197, v198, v199);
    v193 = v271;
  }
  *((_QWORD *)this + 3472) = v193;
  *((_QWORD *)this + 3473) = v265;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDOM(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  int8x8_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  uint64_t v47;
  WTF *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  int *v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::B3::Value *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  JSC::DFG::Node *v96;
  char **v97;
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  int *v110;
  int v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  uint64_t v126;
  uint64_t v127;
  char **v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  int *v141;
  int v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  uint64_t v158;
  JSC::B3::Value *v159;
  char **v160;
  uint64_t v161;
  WTF *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unsigned int v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF *v188;
  uint64_t v189;
  _BYTE v190[24];
  WTF *v191;
  uint64_t v192;
  __n128 v193;
  uint64_t v194;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3524);
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v177 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v178 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v178 != 0x3FFFFFFF) ? (v179 = v178 == -1) : (v179 = 1), v179))
  {
    v180 = 2;
  }
  else if (v178 >> 28)
  {
    v186 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v186 = v177;
    *(_DWORD *)(v186 + 8) = v178;
    v180 = 1;
    v177 = v186;
  }
  else
  {
    v180 = v177;
    v177 = 0;
  }
  v10 = v177 | v180;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v177 | v180) & 1) == 0)
    goto LABEL_3;
  v181 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v182 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v182 != 0x3FFFFFFF) ? (v183 = v182 == -1) : (v183 = 1), v183))
  {
    v184 = 2;
  }
  else if (v182 >> 28)
  {
    v187 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v187 = v181;
    *(_DWORD *)(v187 + 8) = v182;
    v184 = 1;
    v181 = v187;
  }
  else
  {
    v184 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v181 = 0;
  }
  v185 = v181 | v184;
  v12 = (_QWORD *)(v185 & 0xFFFFFFFF8);
  if ((v185 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 3528);
  v18 = *(_QWORD *)(v17 + 72);
  v188 = (WTF *)v190;
  v19 = (int8x8_t)3;
  v189 = 3;
  v20 = *(_QWORD *)(v17 + 24);
  if ((*(_BYTE *)(v17 + 56) & 0x10) != 0)
  {
    v23 = *(_QWORD *)(v17 + 32);
    if ((int)v23 + (int)v20 <= v20)
      goto LABEL_53;
    v24 = 0;
    v25 = *(_QWORD *)(v17 + 24);
    while (1)
    {
      if (v25 >= *(unsigned int *)(*(_QWORD *)this + 164))
      {
        __break(0xC471u);
        JUMPOUT(0x197D5CF6CLL);
      }
      v26 = *(_QWORD *)this;
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v25);
      if ((v27 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_28;
      if (!v24)
      {
        goto LABEL_24;
      }
      v28 = *(_QWORD *)(v18 + 8 * (v24 - 1) + 24);
      if (v28 == 0x10000000000)
        break;
      if (v28 == 0x300000000)
      {
        goto LABEL_24;
      }
      if (v28 != 805306368)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5CEECLL);
      }
      v191 = v29;
      v35 = HIDWORD(v189);
      if (HIDWORD(v189) == (_DWORD)v189)
        goto LABEL_25;
      *((_QWORD *)v188 + HIDWORD(v189)) = v29;
LABEL_27:
      HIDWORD(v189) = v35 + 1;
      ++v24;
      v20 = *(_QWORD *)(v17 + 24);
      v23 = *(_QWORD *)(v17 + 32);
LABEL_28:
      if (++v25 >= (v20 + v23))
        goto LABEL_53;
    }
LABEL_24:
    v191 = v36;
    v35 = HIDWORD(v189);
    if (HIDWORD(v189) != (_DWORD)v189)
    {
      *((_QWORD *)v188 + HIDWORD(v189)) = v36;
      goto LABEL_27;
    }
LABEL_25:
    v37 = (_QWORD *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v188, v35 + 1, (unint64_t)&v191);
    LODWORD(v35) = HIDWORD(v189);
    *((_QWORD *)v188 + HIDWORD(v189)) = *v37;
    goto LABEL_27;
  }
  if ((v20 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v22 = HIDWORD(v189);
    *((_QWORD *)v188 + HIDWORD(v189)) = v191;
    HIDWORD(v189) = v22 + 1;
    v38 = *(_QWORD *)(v17 + 32);
    if ((v38 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v39 = *(_QWORD *)(v18 + 24);
      switch(v39)
      {
        case 0x10000000000:
          break;
        case 0x300000000:
          break;
        case 0x30000000:
          v191 = v40;
          v47 = HIDWORD(v189);
          if (HIDWORD(v189) != (_DWORD)v189)
          {
            *((_QWORD *)v188 + HIDWORD(v189)) = v40;
LABEL_41:
            HIDWORD(v189) = v47 + 1;
            v50 = *(_QWORD *)(v17 + 40);
            if ((v50 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_53;
            v51 = *(_QWORD *)(v18 + 32);
            switch(v51)
            {
              case 0x30000000:
                v191 = v54;
                v53 = HIDWORD(v189);
                if (HIDWORD(v189) != (_DWORD)v189)
                {
                  *((_QWORD *)v188 + HIDWORD(v189)) = v54;
                  goto LABEL_52;
                }
                goto LABEL_50;
              case 0x300000000:
LABEL_47:
                v191 = v52;
                v53 = HIDWORD(v189);
                if (HIDWORD(v189) != (_DWORD)v189)
                {
                  *((_QWORD *)v188 + HIDWORD(v189)) = v52;
LABEL_52:
                  HIDWORD(v189) = v53 + 1;
                  goto LABEL_53;
                }
LABEL_50:
                v60 = (_QWORD *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v188, v53 + 1, (unint64_t)&v191);
                LODWORD(v53) = HIDWORD(v189);
                *((_QWORD *)v188 + HIDWORD(v189)) = *v60;
                goto LABEL_52;
              case 0x10000000000:
                goto LABEL_47;
            }
LABEL_126:
            __break(0xC471u);
            JUMPOUT(0x197D5CF2CLL);
          }
LABEL_39:
          v49 = (_QWORD *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v188, v47 + 1, (unint64_t)&v191);
          LODWORD(v47) = HIDWORD(v189);
          *((_QWORD *)v188 + HIDWORD(v189)) = *v49;
          goto LABEL_41;
        default:
          goto LABEL_126;
      }
      v191 = v48;
      v47 = HIDWORD(v189);
      if (HIDWORD(v189) != (_DWORD)v189)
      {
        *((_QWORD *)v188 + HIDWORD(v189)) = v48;
        goto LABEL_41;
      }
      goto LABEL_39;
    }
  }
LABEL_53:
  v61 = *(_DWORD *)(v18 + 40);
  v62 = *(_QWORD *)v18;
  if (v61 == 2)
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, a3, a4, a5, a6, a7, a8);
    v131 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    if (!HIDWORD(v189))
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CF8CLL);
    }
    if (HIDWORD(v189) == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CF94);
    }
    if (HIDWORD(v189) <= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CF9CLL);
    }
    v139 = v131;
    v140 = (uint64_t *)v188;
    v141 = (int *)((char *)this + 28264);
    v142 = *((_DWORD *)this + 7066);
    if ((v142 & 0x80000000) == 0)
    {
      v143 = *((_QWORD *)this + 3481);
      v191 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v191 = 0x200000002;
      v192 = 0x200000002;
      v151 = (_QWORD *)(v143 + 32);
      v152 = *(unsigned int *)(v143 + 44);
      if ((_DWORD)v152 == *(_DWORD *)(v143 + 40))
      {
        v153 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v151, v152 + 1, (unint64_t)&v191);
        v154 = *(_QWORD *)(v143 + 32) + 16 * *(unsigned int *)(v143 + 44);
      }
      else
      {
        v154 = *v151 + 16 * v152;
        v153 = (unint64_t)&v191;
      }
      *(_QWORD *)v154 = 0;
      *(_QWORD *)(v154 + 8) = 0;
      v155 = *(_QWORD *)v153;
      *(_QWORD *)v153 = 0;
      *(_QWORD *)v154 = v155;
      LODWORD(v155) = *(_DWORD *)(v153 + 8);
      *(_DWORD *)(v153 + 8) = 0;
      *(_DWORD *)(v154 + 8) = v155;
      LODWORD(v155) = *(_DWORD *)(v153 + 12);
      *(_DWORD *)(v153 + 12) = 0;
      *(_DWORD *)(v154 + 12) = v155;
      ++*(_DWORD *)(v143 + 44);
      v142 = v152 | 0x80000000;
      *v141 = v152 | 0x80000000;
      v156 = v191;
      if (v191)
      {
        v191 = 0;
        LODWORD(v192) = 0;
        WTF::fastFree((unint64_t)v156, v144, v145, v146, v147, v148, v149, v150);
        v142 = *v141;
      }
    }
    v157 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62);
    v158 = *((_QWORD *)this + 3472);
    v159 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v94 = JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v142, *((_QWORD *)this + 3471), v157, v139, *v140, v140[1], v140[2]);
    JSC::B3::Procedure::addValueImpl(v159, (JSC::B3::Value *)v94);
    v191 = (WTF *)v94;
    v160 = (char **)(v158 + 8);
    v161 = *(unsigned int *)(v158 + 20);
    if ((_DWORD)v161 == *(_DWORD *)(v158 + 16))
    {
      v175 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v160, v161 + 1, (unint64_t)&v191);
      v161 = *(unsigned int *)(v158 + 20);
      *(_QWORD *)(*(_QWORD *)(v158 + 8) + 8 * v161) = *(_QWORD *)v175;
      v162 = v191;
    }
    else
    {
      *(_QWORD *)&(*v160)[8 * v161] = v94;
      v162 = (WTF *)v94;
    }
    *(_DWORD *)(v158 + 20) = v161 + 1;
    *((_QWORD *)v162 + 4) = v158;
  }
  else if (v61 == 1)
  {
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, a3, a4, a5, a6, a7, a8);
    v100 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    if (!HIDWORD(v189))
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CF7CLL);
    }
    if (HIDWORD(v189) == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CF84);
    }
    v108 = v100;
    v109 = (uint64_t *)v188;
    v110 = (int *)((char *)this + 28264);
    v111 = *((_DWORD *)this + 7066);
    if ((v111 & 0x80000000) == 0)
    {
      v112 = *((_QWORD *)this + 3481);
      v191 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v191 = 0x200000002;
      v192 = 0x200000002;
      v120 = (_QWORD *)(v112 + 32);
      v121 = *(unsigned int *)(v112 + 44);
      if ((_DWORD)v121 == *(_DWORD *)(v112 + 40))
      {
        v122 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v120, v121 + 1, (unint64_t)&v191);
        v123 = *(_QWORD *)(v112 + 32) + 16 * *(unsigned int *)(v112 + 44);
      }
      else
      {
        v123 = *v120 + 16 * v121;
        v122 = (unint64_t)&v191;
      }
      *(_QWORD *)v123 = 0;
      *(_QWORD *)(v123 + 8) = 0;
      v124 = *(_QWORD *)v122;
      *(_QWORD *)v122 = 0;
      *(_QWORD *)v123 = v124;
      LODWORD(v124) = *(_DWORD *)(v122 + 8);
      *(_DWORD *)(v122 + 8) = 0;
      *(_DWORD *)(v123 + 8) = v124;
      LODWORD(v124) = *(_DWORD *)(v122 + 12);
      *(_DWORD *)(v122 + 12) = 0;
      *(_DWORD *)(v123 + 12) = v124;
      ++*(_DWORD *)(v112 + 44);
      v111 = v121 | 0x80000000;
      *v110 = v121 | 0x80000000;
      v125 = v191;
      if (v191)
      {
        v191 = 0;
        LODWORD(v192) = 0;
        WTF::fastFree((unint64_t)v125, v113, v114, v115, v116, v117, v118, v119);
        v111 = *v110;
      }
    }
    v126 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62);
    v127 = *((_QWORD *)this + 3472);
    v94 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*((JSC::B3::Value **)this + 3470), v111, *((_QWORD *)this + 3471), v126, v108, *v109, v109[1]);
    v191 = (WTF *)v94;
    v128 = (char **)(v127 + 8);
    v129 = *(unsigned int *)(v127 + 20);
    if ((_DWORD)v129 == *(_DWORD *)(v127 + 16))
    {
      v174 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v128, v129 + 1, (unint64_t)&v191);
      v129 = *(unsigned int *)(v127 + 20);
      *(_QWORD *)(*(_QWORD *)(v127 + 8) + 8 * v129) = *(_QWORD *)v174;
      v130 = v191;
    }
    else
    {
      *(_QWORD *)&(*v128)[8 * v129] = v94;
      v130 = (WTF *)v94;
    }
    *(_DWORD *)(v127 + 20) = v129 + 1;
    *((_QWORD *)v130 + 4) = v127;
  }
  else
  {
    if (v61)
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CF0CLL);
    }
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), v16, a3, a4, a5, a6, a7, a8);
    v63 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16);
    if (!HIDWORD(v189))
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CF74);
    }
    v71 = v63;
    v72 = v188;
    v73 = (int *)((char *)this + 28264);
    v74 = *((_DWORD *)this + 7066);
    if ((v74 & 0x80000000) == 0)
    {
      v75 = *((_QWORD *)this + 3481);
      v191 = (WTF *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v191 = 0x200000002;
      v192 = 0x200000002;
      v83 = (_QWORD *)(v75 + 32);
      v84 = *(unsigned int *)(v75 + 44);
      if ((_DWORD)v84 == *(_DWORD *)(v75 + 40))
      {
        v85 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v83, v84 + 1, (unint64_t)&v191);
        v86 = *(_QWORD *)(v75 + 32) + 16 * *(unsigned int *)(v75 + 44);
      }
      else
      {
        v86 = *v83 + 16 * v84;
        v85 = (unint64_t)&v191;
      }
      *(_QWORD *)v86 = 0;
      *(_QWORD *)(v86 + 8) = 0;
      v87 = *(_QWORD *)v85;
      *(_QWORD *)v85 = 0;
      *(_QWORD *)v86 = v87;
      LODWORD(v87) = *(_DWORD *)(v85 + 8);
      *(_DWORD *)(v85 + 8) = 0;
      *(_DWORD *)(v86 + 8) = v87;
      LODWORD(v87) = *(_DWORD *)(v85 + 12);
      *(_DWORD *)(v85 + 12) = 0;
      *(_DWORD *)(v86 + 12) = v87;
      ++*(_DWORD *)(v75 + 44);
      v74 = v84 | 0x80000000;
      *v73 = v84 | 0x80000000;
      v88 = v191;
      if (v191)
      {
        v191 = 0;
        LODWORD(v192) = 0;
        WTF::fastFree((unint64_t)v88, v76, v77, v78, v79, v80, v81, v82);
        v74 = *v73;
      }
    }
    v89 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v62);
    v90 = *(_QWORD *)v72;
    v91 = *((_QWORD *)this + 3472);
    v92 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v93 = *((_QWORD *)this + 3471);
    v94 = WTF::fastMalloc((WTF *)0x68);
    *(_QWORD *)v94 = off_1E357F5F0;
    *(_DWORD *)(v94 + 8) = -1;
    *(_WORD *)(v94 + 12) = 82;
    *(_DWORD *)(v94 + 16) = v74;
    *(_BYTE *)(v94 + 20) = 4;
    *(_QWORD *)(v94 + 24) = v93;
    *(_QWORD *)(v94 + 32) = 0;
    v95 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v94);
    v95[2] = v89;
    *v95 = v95 + 2;
    v95[3] = v71;
    v95[4] = v90;
    v95[1] = 0x300000003;
    *(_QWORD *)v94 = &unk_1E357CF78;
    *(_OWORD *)(v94 + 40) = xmmword_1991243D0;
    *(_QWORD *)(v94 + 56) = 0xFFFFFFFF00000000;
    if (!*(_DWORD *)(v94 + 76))
    {
      __break(0xC471u);
      JUMPOUT(0x197D5CE58);
    }
    JSC::B3::Procedure::addValueImpl(v92, (JSC::B3::Value *)v94);
    v191 = (WTF *)v94;
    v97 = (char **)(v91 + 8);
    v98 = *(unsigned int *)(v91 + 20);
    if ((_DWORD)v98 == *(_DWORD *)(v91 + 16))
    {
      v176 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v97, v98 + 1, (unint64_t)&v191);
      v98 = *(unsigned int *)(v91 + 20);
      *(_QWORD *)(*(_QWORD *)(v91 + 8) + 8 * v98) = *(_QWORD *)v176;
      v99 = v191;
    }
    else
    {
      *(_QWORD *)&(*v97)[8 * v98] = v94;
      v99 = (WTF *)v94;
    }
    *(_DWORD *)(v91 + 20) = v98 + 1;
    *((_QWORD *)v99 + 4) = v91;
  }
  v164 = *((_QWORD *)this + 3528);
  v165 = *((_QWORD *)this + 3521);
  v193.n128_u64[0] = v163;
  v193.n128_u64[1] = v165;
  v194 = v164;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v191, (uint64_t *)this + 3492, &v194, &v193);
  v173 = v188;
  if (v190 != (_BYTE *)v188)
  {
    if (v188)
    {
      v188 = 0;
      LODWORD(v189) = 0;
      WTF::fastFree((unint64_t)v173, v166, v167, v168, v169, v170, v171, v172);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCallDOMGetter(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::JSCell *v26;
  uint64_t v27;
  JSC::FTL::AbstractHeap *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  int8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int8x8_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128[2];
  _QWORD v129[3];
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 3528);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 16);
  if (v11)
  {
    v56 = *(_QWORD *)(v10 + 24);
    v57 = *((_QWORD *)this + 3505);
    v58 = *(unsigned int *)((v56 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v59 = (_QWORD *)(v57 + 24);
    v60 = (_QWORD *)(v57 + 8);
    if ((v56 & 1) != 0)
      v61 = v59;
    else
      v61 = v60;
    v62 = *v61 + 32 * v58;
    v63 = (void *)*((unsigned int *)this + 7030);
    if ((_DWORD)v63 != *(_DWORD *)(v62 + 20))
    {
      if ((*(_QWORD *)(v62 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v62, v63, v48, v49, v50, v51, v52, v53);
      else
        *(_DWORD *)(v62 + 20) = (_DWORD)v63;
    }
    v64 = *(WTF **)(v62 + 24);
    if (*(_BYTE *)(v11 + 16))
    {
      v65 = *((_QWORD *)this + 3528);
      v73 = *(_QWORD *)(v65 + 32);
      v74 = *((_QWORD *)this + 3505);
      if ((v73 & 1) != 0)
        v75 = (_QWORD *)(v74 + 24);
      else
        v75 = (_QWORD *)(v74 + 8);
      v76 = *v75 + 32 * *(unsigned int *)((v73 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v77 = (void *)*((unsigned int *)this + 7030);
      if ((_DWORD)v77 != *(_DWORD *)(v76 + 20))
      {
        if ((*(_QWORD *)(v76 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v76, v77, v66, v67, v68, v69, v70, v71);
        else
          *(_DWORD *)(v76 + 20) = (_DWORD)v77;
      }
      v78 = *(_QWORD *)(v76 + 24);
    }
    else
    {
      v78 = 0;
      v72 = 0;
    }
    v79 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
    v128[0] = v54;
    v128[1] = 0;
    LOBYTE(v129[0]) = 3;
    JSC::B3::StackmapValue::append(v79, (uint64_t)v54, (unint64_t)&v128[1]);
    if (*(_BYTE *)(v11 + 16))
    {
      v128[0] = v72;
      v128[1] = 0;
      LOBYTE(v129[0]) = 3;
      JSC::B3::StackmapValue::append(v79, (uint64_t)v72, (unint64_t)&v128[1]);
    }
    v80 = *((_QWORD *)this + 3488);
    *(_OWORD *)v128 = xmmword_199124420;
    JSC::B3::StackmapValue::append(v79, v80, (unint64_t)v128);
    v81 = *((_QWORD *)this + 3487);
    *(_OWORD *)v128 = xmmword_199124430;
    JSC::B3::StackmapValue::append(v79, v81, (unint64_t)v128);
    *((_QWORD *)v79 + 8) |= 0x30000uLL;
    *((_QWORD *)v79 + 10) |= 0x30000uLL;
    *((_WORD *)v79 + 84) = *(_WORD *)(v11 + 4);
    *(_QWORD *)&v134 = 0;
    BYTE8(v134) = 5;
    WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v128, &v134, 1uLL);
    WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v79 + 136, v128, v87, v88, v89, v90, v91, v92);
    v100 = v128[0];
    if (v129 != (_QWORD *)v128[0] && v128[0])
    {
      v128[0] = 0;
      LODWORD(v128[1]) = 0;
      WTF::fastFree((unint64_t)v100, v93, v94, v95, v96, v97, v98, v99);
    }
    v101 = *((_QWORD *)this + 1);
    JSC::CodeOrigin::CodeOrigin((uint64_t *)&v134, *((const JSC::CodeOrigin **)this + 3528));
    v128[0] = v64;
    v128[1] = (WTF *)v11;
    v129[0] = v78;
    v102 = v132;
    if (v132)
    {
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 + 1, v102));
    }
    v129[1] = v102;
    v129[2] = v101;
    JSC::CodeOrigin::CodeOrigin(&v130, (const JSC::CodeOrigin *)&v134);
    v79[7] = xmmword_1991243D0;
    *((_QWORD *)v79 + 16) = 0xFFFFFFFF00000000;
    if ((v134 & 1) != 0 && (v134 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v134 & 0xFFFFFFFF8, v111, v112, v113, v114, v115, v116, v117);
    if (v132)
      WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v132, v111, v112, v113, v114, v115, v116, v117);
  }
  else
  {
    v12 = *(_QWORD *)this;
    JSC::CodeOrigin::CodeOrigin(&v133, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
    v26 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v12, &v133, v13, v14, v15, v16, v17, v18);
    if ((v133 & 1) != 0 && (v133 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v133 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
    v27 = *((_QWORD *)this + 3484);
    v28 = JSC::FTL::Output::absolute((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(*(_QWORD *)this + 16) + 40, v20, v21, v22, v23, v24, v25);
    JSC::FTL::Output::store((uint64_t)this + 27640, v27, v28, v29);
    if (BYTE1(qword_1ECF4C780))
    {
      v124 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3528) + 72) + 24));
      v132 = (unsigned int *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v124);
      v131 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), **(_QWORD **)(*((_QWORD *)this + 3528) + 72));
    }
    else
    {
      v36 = **(_QWORD **)(*((_QWORD *)this + 3528) + 72);
      v43 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)this + 24) + 240), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3528) + 72) + 24));
      v132 = (unsigned int *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v43);
    }
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDateGet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  const JSC::FTL::AbstractHeap *v11;
  const JSC::FTL::AbstractHeap *v12;
  void *v13;
  double result;
  JSC::B3::Value *Double;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  JSC::B3::Value **v27[2];
  JSC::B3::Value *v28;

  v27[0] = (JSC::B3::Value **)this;
  v27[1] = &v28;
  v28 = v10;
  switch(*(_BYTE *)(*((_QWORD *)this + 3528) + 72))
  {
    case 0x1E:
      Double = (JSC::B3::Value *)JSC::FTL::Output::loadDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 544));
    case 0x1F:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 736);
      v13 = operationDateGetFullYear;
      goto LABEL_3;
    case 0x20:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 688);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 784);
      v13 = operationDateGetUTCFullYear;
      goto LABEL_3;
    case 0x21:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 832);
      v13 = operationDateGetMonth;
      goto LABEL_3;
    case 0x22:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 688);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 880);
      v13 = operationDateGetUTCMonth;
      goto LABEL_3;
    case 0x23:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 928);
      v13 = operationDateGetDate;
      goto LABEL_3;
    case 0x24:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 688);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 976);
      v13 = operationDateGetUTCDate;
      goto LABEL_3;
    case 0x25:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1024);
      v13 = operationDateGetDay;
      goto LABEL_3;
    case 0x26:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 688);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1072);
      v13 = operationDateGetUTCDay;
      goto LABEL_3;
    case 0x27:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1120);
      v13 = operationDateGetHours;
      goto LABEL_3;
    case 0x28:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 688);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1168);
      v13 = operationDateGetUTCHours;
      goto LABEL_3;
    case 0x29:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1216);
      v13 = operationDateGetMinutes;
      goto LABEL_3;
    case 0x2A:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 688);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1264);
      v13 = operationDateGetUTCMinutes;
      goto LABEL_3;
    case 0x2B:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1312);
      v13 = operationDateGetSeconds;
      goto LABEL_3;
    case 0x2C:
      v11 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 688);
      v12 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1360);
      v13 = operationDateGetUTCSeconds;
LABEL_3:
      result = _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB314compileDateGetEvENKUlRKNS0_12AbstractHeapES5_PT_T0_E_clIFNS_24ExceptionOperationResultIxEEPNS_2VMEPNS_12DateInstanceEEZZNS2_14compileDateGetEvENKUlS5_S5_S7_E_clISH_EEDaS5_S5_S7_EUlPNS_2B35ValueEE_EESK_S5_S5_S7_S8_(v27, v11, v12, (uint64_t)v13);
      break;
    case 0x2D:
    case 0x2E:
      v16 = (JSC::B3::Value *)JSC::FTL::Output::loadDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 544));
      v17 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1000.0);
      v18 = JSC::FTL::Output::doubleDiv((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16, v17);
      v19 = JSC::FTL::Output::doubleFloor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v18);
      v20 = JSC::FTL::Output::mul((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19, v17);
      v21 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16, v20);
      v22 = (JSC::B3::Value *)JSC::FTL::Output::doubleToInt((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21);
      v23 = JSC::FTL::Output::doubleNotEqualOrUnordered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16, v16);
      v24 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0x7FFA000000000000);
      v26 = (JSC::B3::Value *)JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v23, v24, v25, 0);
      break;
    case 0x2F:
      result = _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB314compileDateGetEvENKUlRKNS0_12AbstractHeapES5_PT_T0_E_clIFNS_24ExceptionOperationResultIxEEPNS_2VMEPNS_12DateInstanceEEZNS2_14compileDateGetEvEUlPNS_2B35ValueEE_EEDaS5_S5_S7_S8_(v27, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1408), (uint64_t)this, (uint64_t *)(*(unsigned __int8 *)(*((_QWORD *)this + 3528) + 72) - 30));
      break;
    case 0x30:
      result = _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB314compileDateGetEvENKUlRKNS0_12AbstractHeapES5_PT_T0_E_clIFNS_24ExceptionOperationResultIxEEPNS_2VMEPNS_12DateInstanceEEZNS2_14compileDateGetEvEUlPNS_2B35ValueEE0_EEDaS5_S5_S7_S8_(v27, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 640), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 736), (uint64_t)this);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197D5D760);
  }
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDateSet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  int8x8_t v11;
  JSC::B3::Value *v12;
  __int128 *v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  JSC::B3::Value *v20;

  v13 = JSC::FTL::Output::doubleTrunc((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0.0);
  v15 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v13, v14);
  v16 = JSC::FTL::Output::doubleAbs((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12);
  v17 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 8.64e15);
  v18 = JSC::FTL::Output::doubleGreaterThanOrUnordered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v16, v17);
  v19 = JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), NAN);
  v20 = (JSC::B3::Value *)JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v18, v19, v15, 0);
  JSC::FTL::Output::store32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v20, v10, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 544));
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewGet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  int8x8_t v25;
  uint64_t *v26;
  unint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  __int128 *v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  int8x8_t v33;
  JSC::B3::Value *v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  int8x8_t v37;
  JSC::B3::Value *Ptr;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  _QWORD *v50;
  const JSC::FTL::AbstractHeap *v51;
  JSC::B3::Value *v52;
  uint64_t *v53;
  JSC::B3::Value *v54;
  uint64_t *v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  uint64_t **v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t **v63;
  _QWORD *v64;
  _QWORD v65[2];
  uint64_t v66;

  v26 = (uint64_t *)*((_QWORD *)this + 3528);
  v27 = v26[5];
  if ((v27 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v26 = (uint64_t *)*((_QWORD *)this + 3528);
  }
  else
  {
    v28 = 0;
  }
  v29 = v26[9];
  v66 = v29;
  v31 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v32 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v24, v31);
  v34 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v24, 2);
  if (v29 >= 2u)
  {
    v35 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v29 - 1);
    v34 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v34, v35);
  }
  v36 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v34, (JSC::B3::Value *)v30);
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2368));
  v46 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v24, 2);
  v47 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v45, v46);
  v65[0] = (char *)this + 64;
  v65[1] = v47;
  if (*(_WORD *)(*((_QWORD *)this + 3528) + 18) != 427)
  {
    if (v29 == 8)
    {
      v62 = (uint64_t *)this;
      v63 = (uint64_t **)v65;
      v59 = (uint64_t *)this;
      v60 = v65;
      if (BYTE4(v29) == 1)
      {
        v48 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 64), v47, 4);
      }
      else if (BYTE4(v29))
      {
      }
      else
      {
      }
    }
    if (v29 == 4)
    {
      v62 = (uint64_t *)this;
      v63 = (uint64_t **)v65;
      v59 = (uint64_t *)this;
      v60 = v65;
      if (BYTE4(v29))
      {
        if (BYTE4(v29) == 1)
        else
      }
      else
      {
      }
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x197D5DB5CLL);
  }
  if (v29 == 4)
  {
    v53 = (uint64_t *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 64), v47, 1);
    v59 = v53;
    if (BYTE4(v29) == 2)
    {
      v58 = &v59;
      v62 = (uint64_t *)this;
      v63 = &v59;
    }
    else
    {
      v54 = (JSC::B3::Value *)v53;
      if (BYTE4(v29))
        goto LABEL_36;
    }
    v54 = (JSC::B3::Value *)v55;
    v59 = v55;
LABEL_36:
    if (!BYTE1(v29))
    {
      v57 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v54, 2);
    }
  }
  if (v29 == 2)
  {
    v62 = &v66;
    v63 = (uint64_t **)this;
    v64 = v65;
    v59 = (uint64_t *)this;
    v60 = v65;
    v61 = &v66;
    if (BYTE4(v29) == 1)
    {
    }
    else if (BYTE4(v29))
    {
    }
    else
    {
    }
    v54 = (JSC::B3::Value *)v56;
  }
  if (v29 != 1)
    goto LABEL_42;
  v50 = (_QWORD *)((char *)this + 27640);
  v51 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 64);
  if (BYTE1(v29))
    v52 = JSC::FTL::Output::load8SignExt32((uint64_t)v50, v51, v47);
  else
    v52 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v50, (uint64_t)v51, v47);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  unsigned int v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  JSC::B3::Value *v32;
  unint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  unint64_t v36;
  __int128 *v37;
  JSC::B3::Value *v38;
  JSC::B3::Value *v39;
  int8x8_t v40;
  JSC::B3::Value *v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *Ptr;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  JSC::B3::Value *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  JSC::B3::Value *v73;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v74;
  uint64_t *v75;
  _QWORD *v76;
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD v80[2];
  uint64_t v81;

  if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x197D5E248);
  }
  v18 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197D5E250);
  }
  v19 = v10;
  v28 = *(_QWORD *)this;
  v29 = *((_QWORD *)this + 3528);
  v30 = *(_QWORD *)(v29 + 24);
  v31 = *(_DWORD *)(*(_QWORD *)this + 164);
  if (v31 <= (int)v30 + 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197D5E258);
  }
  v32 = v20;
  v33 = *(_QWORD *)(*(_QWORD *)(v28 + 152) + 8 * (v30 + 3));
  if ((v33 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v29 = *((_QWORD *)this + 3528);
    v28 = *(_QWORD *)this;
    v30 = *(_QWORD *)(v29 + 24);
    v35 = v30;
    v31 = *(_DWORD *)(*(_QWORD *)this + 164);
  }
  else
  {
    v34 = 0;
    v35 = *(_QWORD *)(v29 + 24);
  }
  if (v31 <= v30)
  {
    __break(0xC471u);
    JUMPOUT(0x197D5E260);
  }
  v36 = *(_QWORD *)(v29 + 72);
  v38 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 0);
  v39 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v32, v38);
  v41 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v32, 2);
  if (v36 >= 2u)
  {
    v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v36 - 1);
    v41 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v41, v42);
  }
  v43 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v41, (JSC::B3::Value *)v37);
  v52 = (*(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2);
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v52)
    goto LABEL_59;
  v53 = *(_QWORD *)(*(_QWORD *)this + 152);
  v81 = 0;
  v54 = *(_QWORD *)(v53 + 8 * v52);
  v55 = (v54 >> 50) & 0x3F;
  switch((_DWORD)v55)
  {
    case 0x31:
      v73 = v34;
      break;
    case 0x34:
      v73 = v34;
      break;
    case 1:
      v73 = v34;
      break;
    default:
LABEL_59:
      __break(0xC471u);
      JUMPOUT(0x197D5E000);
  }
  v57 = (JSC::B3::Value *)v56;
  v81 = v56;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2368));
  v66 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v32, 2);
  v67 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v65, v66);
  v80[0] = (char *)this + 64;
  v80[1] = v67;
  if ((v36 & 0x1000000) != 0)
  {
    if (v36 == 8)
    {
      v77 = this;
      v78 = &v81;
      v79 = v80;
      v74 = this;
      v75 = &v81;
      v76 = v80;
      if (!BYTE4(v36))
      if (BYTE4(v36) != 1)
      goto LABEL_39;
    }
    if (v36 != 4)
    {
      __break(0xC471u);
      JUMPOUT(0x197D5E1C0);
    }
    v69 = JSC::FTL::Output::doubleToFloat((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57);
    v81 = v69;
    v77 = this;
    v78 = &v81;
    v79 = v80;
    v74 = this;
    v75 = &v81;
    v76 = v80;
    if (BYTE4(v36) == 1)
    {
      v72 = v69;
      v71 = (char *)this + 27640;
      return JSC::FTL::Output::store((uint64_t)v71, v72, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 64), v67);
    }
    if (BYTE4(v36))
    else
  }
  else
  {
    switch(v36)
    {
      case 4u:
        v70 = (*(_QWORD *)(v53 + 8 * v52) >> 50) & 0x3FLL;
        if ((_DWORD)v70 != 1)
        {
          if ((_DWORD)v70 != 52)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5E220);
          }
          v57 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v57);
          v81 = (uint64_t)v57;
        }
        v77 = this;
        v78 = &v81;
        v79 = v80;
        v74 = this;
        v75 = &v81;
        v76 = v80;
        if (BYTE4(v36) == 1)
        {
LABEL_39:
          v71 = (char *)this + 27640;
          v72 = (uint64_t)v57;
          return JSC::FTL::Output::store((uint64_t)v71, v72, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 64), v67);
        }
        if (BYTE4(v36))
        else
      case 2u:
        if ((*(_QWORD *)(v53 + 8 * v52) & 0xFC000000000000) != 0x4000000000000)
        {
          __break(0xC471u);
          JUMPOUT(0x197D5E200);
        }
        v77 = this;
        v78 = &v81;
        v79 = v80;
        v74 = this;
        v75 = &v81;
        v76 = v80;
        if (BYTE4(v36) == 1)
        {
          return JSC::FTL::Output::store32As16((uint64_t)this + 27640, (uint64_t)v57, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 64), v67);
        }
        else if (BYTE4(v36))
        {
        }
        else
        {
        }
      case 1u:
        if ((*(_QWORD *)(v53 + 8 * v52) & 0xFC000000000000) != 0x4000000000000)
        {
          __break(0xC471u);
          JUMPOUT(0x197D5E1E0);
        }
        return JSC::FTL::Output::store32As8((uint64_t)this + 27640, (uint64_t)v57, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 64), v67);
      default:
        __break(0xC471u);
        JUMPOUT(0x197D5E240);
    }
  }
}

void _ZN3JSC3DFG10clobberizeIZNS_3FTL12_GLOBAL__N_112LowerDFGToB311compileNodeEjEUlDpT_E_ZNS4_11compileNodeEjEUlS6_E0_ZNS4_11compileNodeEjEUlS6_E1_ZNS4_11compileNodeEjEUlvE_EEvRNS0_5GraphEPNS0_4NodeERKT_RKT0_RKT1_RKT2_(JSC::DFG::Graph *this, JSC::DFG::Node *a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t *v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v126;
  int v129;
  int v130;
  BOOL v131;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  BOOL v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v157;
  int v158;
  unsigned int v159;
  BOOL v160;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int *v165;
  uint64_t v166;
  unsigned int v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  const char *v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v209;
  __int128 v210;

  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v11 = *((unsigned __int16 *)a2 + 9);
    if (v11 > 0xC9)
    {
      if (v11 - 202 > 0x3E || ((1 << (v11 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v13 = v11 - 333;
        if (v13 > 0x3A || ((1 << v13) & 0x7A8000000000003) == 0)
        {
LABEL_39:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x197D5E4C8);
        }
      }
      goto LABEL_16;
    }
    v14 = v11 - 101;
    if (v11 - 101 > 0x3E)
      goto LABEL_38;
    if (((1 << v14) & 0x7E0070000000000FLL) != 0)
      goto LABEL_16;
    if (((1 << v14) & 0x18000000000) == 0)
    {
LABEL_38:
      if (v11 - 92 >= 2)
        goto LABEL_39;
      goto LABEL_16;
    }
  }
  v15 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x4B:
    case 0x5B:
    case 0x60:
    case 0x61:
    case 0x64:
    case 0x6D:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xD6:
    case 0xDA:
    case 0xDD:
    case 0xDE:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x109:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x113:
    case 0x116:
    case 0x117:
    case 0x118:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
    case 0x123:
    case 0x126:
    case 0x127:
    case 0x128:
    case 0x129:
    case 0x12A:
    case 0x12B:
    case 0x12C:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x135:
    case 0x136:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x144:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x153:
    case 0x154:
    case 0x157:
    case 0x158:
    case 0x159:
    case 0x15A:
    case 0x15B:
    case 0x15C:
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
    case 0x161:
    case 0x162:
    case 0x163:
    case 0x164:
    case 0x165:
    case 0x166:
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
    case 0x16B:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x175:
    case 0x176:
    case 0x177:
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17B:
    case 0x17C:
    case 0x17D:
    case 0x17E:
    case 0x17F:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x18A:
    case 0x18B:
    case 0x18C:
    case 0x18D:
    case 0x18E:
    case 0x18F:
    case 0x190:
    case 0x191:
    case 0x192:
    case 0x193:
    case 0x194:
    case 0x196:
    case 0x197:
    case 0x198:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19E:
    case 0x19F:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
    case 0x1AD:
    case 0x1AE:
    case 0x1AF:
    case 0x1B0:
      return;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x62:
    case 0x63:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC3:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x108:
    case 0x124:
    case 0x125:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14A:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x181:
    case 0x184:
    case 0x185:
    case 0x186:
    case 0x187:
    case 0x19B:
      break;
    case 0xF:
      v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      v102 = v53;
      do
      {
        v103 = v102;
        v102 = (_QWORD *)*v102;
      }
      while (v102);
      if (v103 != v53)
      {
        *v53 = v103;
        v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      }
      v104 = v53;
      do
      {
        v55 = v104;
        v104 = (_QWORD *)*v104;
      }
      while (v104);
      goto LABEL_178;
    case 0x10:
      v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      v99 = v53;
      do
      {
        v100 = v99;
        v99 = (_QWORD *)*v99;
      }
      while (v99);
      if (v100 != v53)
      {
        *v53 = v100;
        v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      }
      v101 = v53;
      do
      {
        v55 = v101;
        v101 = (_QWORD *)*v101;
      }
      while (v101);
      goto LABEL_178;
    case 0x1C:
      v53 = (_QWORD *)*((_QWORD *)a2 + 9);
      v54 = v53;
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
LABEL_178:
      if (v55 != v53)
        *v53 = v55;
      return;
    case 0x29:
      v96 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26;
      goto LABEL_222;
    case 0x2A:
    case 0x142:
    case 0x143:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)a2 + 30);
      goto LABEL_52;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v16 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v16)
      {
        case 0x1A:
          v17 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v18 = 0x68000000000000;
          break;
        case 0x1C:
          v17 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v18 = 0x70000000000000;
          break;
        case 0x1B:
          v17 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v18 = 0x6C000000000000;
          break;
        default:
          goto LABEL_16;
      }
LABEL_121:
      if (v17 == v18)
        return;
      break;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
        goto LABEL_35;
      break;
    case 0x3F:
      v97 = word_1ECF4C630;
      v98 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2;
      goto LABEL_223;
    case 0x40:
    case 0x42:
    case 0x44:
      v33 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) > 0x30)
      {
        if ((_DWORD)v33 == 49 || (_DWORD)v33 == 52)
          return;
LABEL_88:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197D5E804);
      }
      if ((_DWORD)v33)
      {
        if ((_DWORD)v33 == 1)
          return;
        goto LABEL_88;
      }
      break;
    case 0x41:
      v61 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v57 = v61 > 0x34;
      v62 = (1 << v61) & 0x12000000000002;
      if (!v57 && v62 != 0)
        return;
      break;
    case 0x46:
      v48 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v48 != 1 && (_DWORD)v48 != 49)
        break;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v24 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0xC4000000000000;
      goto LABEL_240;
    case 0x52:
    case 0x53:
      v35 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v35 > 0x34)
        goto LABEL_61;
      if (((1 << v35) & 0x1200001C000002) != 0)
        return;
      if (v35)
      {
LABEL_61:
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197D5E5FCLL);
      }
      break;
    case 0x5C:
    case 0x5D:
      v39 = *((_DWORD *)a2 + 18);
      v40 = *((_DWORD *)a2 + 14) & 7;
      if (v40 >= 2 && v40 - 3 >= 3)
      {
        if (v40 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x197D5F3ACLL);
        }
        __break(0xC471u);
        JUMPOUT(0x197D5F638);
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_16;
        case 3u:
        case 6u:
          return;
        case 5u:
          v97 = word_1ECF4C630;
          v98 = __CFADD__(BYTE2(v39) - 5, 2);
          goto LABEL_223;
        case 7u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v188 = *((_DWORD *)a2 + 6);
          v189 = *((_DWORD *)this + 41);
          if (v189 <= v188)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F84CLL);
          }
          if (v189 <= v188 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F47CLL);
          }
          return;
        case 8u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v190 = *((_DWORD *)a2 + 6);
          v191 = *((_DWORD *)this + 41);
          if (v191 <= v190)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F854);
          }
          if (v191 <= v190 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F4B0);
          }
          return;
        case 9u:
          if (BYTE2(v39) > 3u || BYTE2(v39) == 2)
            goto LABEL_16;
          v194 = *((_DWORD *)a2 + 6);
          v195 = *((_DWORD *)this + 41);
          if (v195 <= v194)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F85CLL);
          }
          if (v195 <= v194 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F528);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v39) < 2u)
            return;
          goto LABEL_16;
        case 0xCu:
          if (BYTE2(v39) > 1u)
            goto LABEL_16;
          v192 = *((_DWORD *)a2 + 6);
          v193 = *((_DWORD *)this + 41);
          if (v193 <= v192)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F864);
          }
          if (v193 <= v192 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F4DCLL);
          }
          return;
        case 0xDu:
          v196 = *((_DWORD *)a2 + 6);
          v197 = *((_DWORD *)this + 41);
          if (v197 <= v196)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F83CLL);
          }
          if (v197 <= v196 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F54CLL);
          }
          return;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          if ((v39 & 0x40000000) == 0)
          {
            v41 = *((_DWORD *)a2 + 6);
            v42 = *((_DWORD *)this + 41);
            if (v42 <= v41)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5F814);
            }
            if (v42 <= v41 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5E79CLL);
            }
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x197D5F75CLL);
        default:
          __break(0xC471u);
          JUMPOUT(0x197D5F714);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v29 = *((_DWORD *)a2 + 6);
      v30 = *((_DWORD *)this + 41);
      if (v30 > v29)
      {
        if (v30 > v29 + 1)
        {
          if (v30 > v29 + 2)
          {
            v31 = *((_DWORD *)a2 + 18);
            v32 = *((_DWORD *)a2 + 14) & 7;
            if (v32 >= 2 && v32 - 3 >= 3)
            {
              if (v32 == 7)
              {
                __break(0xC471u);
                JUMPOUT(0x197D5F2B4);
              }
              __break(0xC471u);
              JUMPOUT(0x197D5F618);
            }
            switch(*((_DWORD *)a2 + 18))
            {
              case 0u:
              case 1u:
              case 2u:
              case 4u:
              case 5u:
              case 6u:
              case 0xCu:
              case 0xDu:
              case 0x17u:
              case 0x18u:
                goto LABEL_16;
              case 3u:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
                return;
              case 7u:
              case 8u:
              case 9u:
              case 0xAu:
                if (BYTE2(v31) - 5 < 0xFFFFFFFE)
                  return;
                goto LABEL_16;
              case 0xBu:
                if ((v31 & 0xFE0000) == 0)
                  return;
                goto LABEL_16;
              case 0x19u:
                JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "impossible array mode for put");
                __break(0xC471u);
                JUMPOUT(0x197D5F410);
              default:
                __break(0xC471u);
                JUMPOUT(0x197D5F43CLL);
            }
          }
          __break(0xC471u);
          JUMPOUT(0x197D5F784);
        }
        __break(0xC471u);
        JUMPOUT(0x197D5F77CLL);
      }
      __break(0xC471u);
      JUMPOUT(0x197D5F774);
    case 0x9C:
      v146 = *((_QWORD *)a2 + 9);
      v147 = *(unsigned int *)(v146 + 20);
      v148 = (v147 << 6) - 64;
      do
      {
        if (!v147)
          break;
        if (--v147 >= (unint64_t)*(unsigned int *)(v146 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x197D5F804);
        }
        v149 = v148 - 64;
        v150 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v146 + 8) + v148));
        v148 = v149;
      }
      while (!v150);
      return;
    case 0x9D:
      JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9));
      return;
    case 0x9E:
      v123 = *((_DWORD *)a2 + 18);
      if ((v123 - 5) >= 9 && v123 != 3 && v123 != 25)
      {
        v126 = JSC::DFG::toTypedArrayType(v123);
        if (v126 == 12 || v126 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197D5EE50);
        }
      }
      return;
    case 0x9F:
      v105 = *((_DWORD *)a2 + 18);
      if (v105 != 25)
      {
        v207 = JSC::DFG::toTypedArrayType(v105);
        if (v207 == 12 || v207 == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x197D5F7FCLL);
        }
      }
      if ((v105 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x197D5EC5CLL);
      }
      return;
    case 0xA0:
      v142 = *((unsigned __int8 *)a2 + 72);
      if (v142 != 25)
      {
        v143 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        v144 = v143 == 12 || v143 == 0;
        if (v144 && v142 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197D5F054);
        }
      }
      return;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5F0A4);
      }
      return;
    case 0xA2:
      v49 = *((unsigned __int8 *)a2 + 72);
      if (v49 != 25)
      {
        v50 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        v51 = v50 == 12 || v50 == 0;
        if (v51 && v49 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197D5E930);
        }
      }
      return;
    case 0xA3:
      v129 = *((unsigned __int8 *)a2 + 72);
      if (v129 != 25)
      {
        v130 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        v131 = v130 == 12 || v130 == 0;
        if (v131 && v129 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x197D5EEE4);
        }
      }
      return;
    case 0xC1:
      v56 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      v57 = v56 > 0x31;
      v58 = (1 << v56) & 0x2000000200002;
      if (v57 || v58 == 0)
        break;
      v60 = *((_QWORD *)a2 + 4);
      if ((v60 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
      v17 = v60 & 0xFC000000000000;
      v18 = 0x4000000000000;
      goto LABEL_121;
    case 0xC2:
      v96 = ((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12;
LABEL_222:
      v97 = word_1ECF4C630;
      v98 = v96 >= 3;
LABEL_223:
      if (v98 && v97 != 0)
        goto LABEL_17;
      return;
    case 0xC4:
      v140 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v140 == 11)
        return;
      if ((_DWORD)v140)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5EF8CLL);
      }
      break;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v19 = v15 - 202;
      if (v19 >= 0xAu || ((0x3EFu >> v19) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5F5F8);
      }
      v20 = dword_199124728[(__int16)v19];
      v21 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v162 = v20 + *v21;
        if (*((_DWORD *)this + 41) <= v162)
        {
          __break(0xC471u);
          JUMPOUT(0x197D5F80CLL);
        }
        v22 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v162);
      }
      else
      {
        v22 = &v21[2 * v20];
      }
      if ((*v22 & 0xFF00FFFFFFFFFFFFLL) == 0 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0xCE:
      v95 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v198 = *v95;
        if (*((_DWORD *)this + 41) <= v198)
        {
          __break(0xC471u);
          JUMPOUT(0x197D5F844);
        }
        v95 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v198);
      }
      v24 = *v95 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x4000000000000;
      goto LABEL_240;
    case 0xD7:
      if (*((unsigned __int8 *)a2 + 72) - 7 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5EC8CLL);
      }
      return;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000)
      {
        break;
      }
      v17 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
      v18 = 0x54000000000000;
      goto LABEL_121;
    case 0xE1:
      v66 = *((_QWORD *)a2 + 5);
      goto LABEL_239;
    case 0xE6:
      v106 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v106 - 1) < 2)
        return;
      if ((_DWORD)v106)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197D5ECECLL);
      }
      break;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      if ((*((_BYTE *)a2 + 30) & 0xFC) != 0)
        return;
LABEL_35:
      v27 = word_1ECF4C630;
      v28 = *((_BYTE *)a2 + 38);
LABEL_52:
      if ((v28 & 0xFC) == 0 && v27 != 0)
        goto LABEL_17;
      return;
    case 0x106:
      v107 = *((_QWORD *)a2 + 4);
      v108 = v107;
      if ((v107 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v107) + 0x2000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v107 | 0xFFFE000000000000, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!(_DWORD)v107)
          return;
      }
      v115 = *((unsigned __int16 *)a2 + 9);
      switch(v115)
      {
        case 267:
          goto LABEL_385;
        case 264:
          v116 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_385:
          v116 = *((_DWORD *)a2 + 21);
          break;
        default:
          v116 = *((_DWORD *)a2 + 18);
          goto LABEL_194;
      }
      LOBYTE(v116) = v116 & 0xF;
LABEL_194:
      if (v116 <= 0x19u && ((1 << v116) & 0x2A003F0) != 0)
      {
        v117 = *((unsigned int *)this + 107);
        if (v107 >= v117)
        {
          if ((_DWORD)v117)
          {
            v180 = (unsigned int *)*((_QWORD *)this + 52);
            v181 = 4 * v117;
            do
            {
              v182 = *v180;
              if (v182 < v107)
              {
                if (*((_DWORD *)this + 41) <= (v182 + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197D5F78CLL);
                }
                if ((v182 & 0x80000000) != 0)
                  v183 = COERCE__INT64((double)v182) + 0x2000000000000;
                else
                  v183 = v182 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v183, v109, v110, v111, v112, v113, v114);
              }
              ++v180;
              v181 -= 4;
            }
            while (v181);
          }
        }
        else
        {
          v118 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v118 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x197D5F76CLL);
            }
            if ((v118 & 0x80000000) != 0)
              v119 = COERCE__INT64((double)v118) + 0x2000000000000;
            else
              v119 = v118 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v119, v109, v110, v111, v112, v113, v114);
            ++v118;
          }
          while (v108 != v118);
        }
      }
      return;
    case 0x107:
      if (*((_DWORD *)a2 + 8))
      {
        v134 = *((_QWORD *)a2 + 3);
        v135 = *((_DWORD *)this + 41);
        v98 = v135 >= v134;
        LODWORD(v136) = v135 - v134;
        if (v98)
          v136 = v136;
        else
          v136 = 0;
        v137 = *((unsigned int *)a2 + 8) - 1;
        do
        {
          if (!v136)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5F764);
          }
          v138 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v134++) & 0xFF00FFFFFFFFFFFFLL)
                                     + 0x12);
          v139 = v138 == 350 || v137-- == 0;
          --v136;
        }
        while (!v139);
      }
      return;
    case 0x10A:
      v120 = *((unsigned int *)a2 + 20);
      if ((v120 & 0x80000000) != 0)
        v121 = COERCE__INT64((double)v120) + 0x2000000000000;
      else
        v121 = v120 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v121, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 0x10B:
      v67 = (uint64_t *)*((_QWORD *)a2 + 9);
      v68 = *v67;
      v69 = *(unsigned int *)(*v67 + 8);
      if ((v69 & 0x80000000) != 0)
        v70 = COERCE__INT64((double)v69) + 0x2000000000000;
      else
        v70 = v69 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v70, (uint64_t)a3, a4, a5, a6, a7, a8);
      v78 = *((unsigned __int16 *)a2 + 9);
      switch(v78)
      {
        case 267:
          goto LABEL_383;
        case 264:
          v79 = *((_DWORD *)a2 + 19);
          break;
        case 352:
LABEL_383:
          v79 = *((_DWORD *)a2 + 21);
          break;
        default:
          v79 = *((_DWORD *)a2 + 18);
          goto LABEL_142;
      }
      LOBYTE(v79) = v79 & 0xF;
LABEL_142:
      v57 = v79 > 0x19u;
      v80 = (1 << v79) & 0x2A003F0;
      if (!v57 && v80 != 0)
      {
        v82 = *((unsigned int *)this + 107);
        if (v82 <= v69)
        {
          v210 = 0uLL;
          if ((_DWORD)v82)
          {
            v163 = 0;
            v164 = 0;
            v165 = (unsigned int *)*((_QWORD *)this + 52);
            v166 = 4 * v82;
            do
            {
              v167 = *v165;
              LODWORD(v209) = v167;
              if (v167 < v69)
              {
                if (v164 == DWORD2(v210))
                {
                  v168 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, v164 + 1, (unint64_t)&v209);
                  v163 = (unsigned int *)v210;
                  *(_DWORD *)(v210 + 4 * HIDWORD(v210)) = *v168;
                }
                else
                {
                  v163[v164] = v167;
                }
                v164 = ++HIDWORD(v210);
              }
              ++v165;
              v166 -= 4;
            }
            while (v166);
            if (v164)
            {
              v169 = v68 + 16;
              v170 = 4 * v164;
              do
              {
                v171 = *v163;
                if ((v171 & 0x80000000) != 0)
                  v172 = COERCE__INT64((double)v171) + 0x2000000000000;
                else
                  v172 = v171 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v172, v72, v73, v74, v75, v76, v77);
                if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
                  v179 = *(_QWORD *)(v169 + 8 * v171) + 0x2000000000000;
                else
                  v179 = *(_QWORD *)(v169 + 8 * v171);
                JSC::DFG::Graph::freeze((uint64_t)this, v179, v173, v174, v175, v176, v177, v178);
                ++v163;
                v170 -= 4;
              }
              while (v170);
              v163 = (unsigned int *)v210;
            }
            if (v163)
            {
              *(_QWORD *)&v210 = 0;
              DWORD2(v210) = 0;
              WTF::fastFree((unint64_t)v163, v71, v72, v73, v74, v75, v76, v77);
            }
          }
        }
        else if ((_DWORD)v69)
        {
          v83 = 0;
          v84 = v68 + 16;
          do
          {
            if ((v83 & 0x80000000) != 0)
              v85 = COERCE__INT64((double)v83) + 0x2000000000000;
            else
              v85 = v83 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v85, v72, v73, v74, v75, v76, v77);
            if ((*(_BYTE *)(v68 + 4) & 0xE) == 6)
              v92 = *(_QWORD *)(v84 + 8 * v83) + 0x2000000000000;
            else
              v92 = *(_QWORD *)(v84 + 8 * v83);
            JSC::DFG::Graph::freeze((uint64_t)this, v92, v86, v87, v88, v89, v90, v91);
            ++v83;
          }
          while (v69 != v83);
        }
      }
      return;
    case 0x10D:
      v64 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v64 == 52 || (_DWORD)v64 == 1)
        return;
      if ((_DWORD)v64)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197D5EA20);
      }
      break;
    case 0x10F:
      v152 = *((_QWORD *)a2 + 3);
      v153 = v152 & 0xFF00FFFFFFFFFFFFLL;
      v154 = v152 & 0xFC000000000000;
      if (v153)
        v155 = v154 == 0x54000000000000;
      else
        v155 = 1;
      if (!v155 && word_1ECF4C630 != 0)
        goto LABEL_17;
      return;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) != 0)
        return;
      break;
    case 0x115:
      v151 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v151 != 349 && v151 != 352)
        break;
      return;
    case 0x13E:
    case 0x145:
      v37 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v37 > 0x34)
        goto LABEL_73;
      if (((1 << v37) & 0x12026001400002) != 0)
        return;
      if (((1 << v37) & 0x101) == 0)
      {
LABEL_73:
        __break(0xC471u);
        JUMPOUT(0x197D5E6E4);
      }
      break;
    case 0x13F:
      v66 = *((_QWORD *)a2 + 3);
LABEL_239:
      v24 = v66 & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x54000000000000;
      goto LABEL_240;
    case 0x146:
      v141 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v141 == 28)
        return;
      if ((_DWORD)v141)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x197D5EFE8);
      }
      break;
    case 0x180:
    case 0x182:
      if ((_DWORD)v15 != 386 || (v38 = *((unsigned __int8 *)a2 + 80), v38 == 1))
      {
        v43 = BYTE2(*((_DWORD *)a2 + 18));
        switch(*((_DWORD *)a2 + 18))
        {
          case 3u:
            return;
          case 7u:
            if (v43 > 1)
              goto LABEL_16;
            v44 = *((_DWORD *)a2 + 6);
            v45 = *((_DWORD *)this + 41);
            if (v45 <= v44)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5F824);
            }
            if (v45 <= v44 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5E870);
            }
            return;
          case 8u:
            if (v43 > 1)
              goto LABEL_16;
            v184 = *((_DWORD *)a2 + 6);
            v185 = *((_DWORD *)this + 41);
            if (v185 <= v184)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5F82CLL);
            }
            if (v185 <= v184 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5F340);
            }
            return;
          case 9u:
            if (v43 > 1)
              goto LABEL_16;
            v186 = *((_DWORD *)a2 + 6);
            v187 = *((_DWORD *)this + 41);
            if (v187 <= v186)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5F834);
            }
            if (v187 <= v186 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197D5F36CLL);
            }
            return;
          case 0xAu:
            if (v43 >= 2)
              goto LABEL_16;
            break;
          default:
            goto LABEL_16;
        }
        return;
      }
      if (v38 != 2)
        break;
      if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x197D5F81CLL);
      }
      v24 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000;
      v25 = word_1ECF4C630;
      v26 = 0x20000000000000;
LABEL_240:
      if (v24 != v26 && v25 != 0)
        goto LABEL_17;
      return;
    case 0x195:
      v46 = *((_DWORD *)a2 + 6);
      v47 = *((_DWORD *)this + 41);
      if (v47 <= v46)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5F794);
      }
      if (v47 <= v46 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5E8A8);
      }
      return;
    case 0x199:
      v93 = *((_DWORD *)a2 + 6);
      v94 = *((_DWORD *)this + 41);
      if (v94 <= v93)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5F79CLL);
      }
      if (v94 <= v93 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5F7A4);
      }
      if (v94 <= v93 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197D5EB2CLL);
      }
      return;
    case 0x1A0:
      v157 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 16);
      if (!v157)
        break;
      v122 = *(_DWORD *)(v157 + 24);
LABEL_295:
      v158 = (unsigned __int16)v122;
      if ((unsigned __int16)v122 != HIWORD(v122))
      {
        v159 = HIWORD(v122);
        v160 = !v158 && v159 == 0xFFFF;
        if (v160 && word_1ECF4C630 != 0)
          goto LABEL_17;
      }
      return;
    case 0x1A1:
      v122 = *(_DWORD *)(*((_QWORD *)a2 + 9) + 48);
      goto LABEL_295;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)a2 + 74) & 1) == 0)
      {
        v36 = *((_DWORD *)a2 + 14) & 7;
        if (v36 >= 2 && v36 - 3 >= 3)
        {
          if (v36 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x197D5E680);
          }
          __break(0xC471u);
          JUMPOUT(0x197D5F658);
        }
      }
      return;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x197D5F678);
    default:
      v210 = *(_OWORD *)&(&JSC::DFG::dfgOpNames)[2 * v15];
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v210, &v209);
      if (v209)
        v199 = (const char *)(v209 + 16);
      else
        v199 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1858:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1854:39)]", v199);
      WTF::CString::~CString((WTF::CString *)&v209, v200, v201, v202, v203, v204, v205, v206);
      __break(0xC471u);
      JUMPOUT(0x197D5F6F4);
  }
LABEL_16:
  if ((_BYTE)word_1ECF4C630)
LABEL_17:
    **a3 = 1;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNode(unsigned int)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3577D38;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::crash(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  int v3;
  int v4;
  __int16 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *((_QWORD *)this + 3528);
  v3 = *(_DWORD *)(*((_QWORD *)this + 3521) + 8);
  if (v2)
  {
    v4 = *(_DWORD *)(v2 + 20);
    v5 = *(_WORD *)(v2 + 18);
  }
  else
  {
    v5 = 433;
    v4 = -1;
  }
  v6 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
  v11 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E3575690;
  *(_DWORD *)(v11 + 16) = v3;
  *(_DWORD *)(v11 + 20) = v4;
  *(_QWORD *)(v11 + 24) = v2;
  *(_WORD *)(v11 + 32) = v5;
  v12 = (unsigned int *)v6[7];
  v6[7] = v11;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  return JSC::B3::BasicBlock::appendNewControlValue(*((_QWORD *)this + 3472), *((_QWORD *)this + 3470), 159, *((_QWORD *)this + 3471), v7, v8, v9, v10);
}

uint64_t WTF::dataLog<char [7],JSC::DFG::BasicBlock,char [18]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Block ");
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v5, "%s", "#");
  WTF::PrintStream::printf(v5, "%u", *(_DWORD *)(a1 + 8));
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", " will bail also.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowJSValue(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  JSC::FTL::Output *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::DFG::Graph *v72;
  JSC::DFG::Node *v73;
  int v74;
  const char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93[3];
  __n128 v94;
  unint64_t v95;

  v4 = (a2 >> 50) & 0x3F;
  if (a3 != 1 && (a2 & 0xFC000000000000) != 0)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x522A, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowJSValue(Edge, OperandSpeculationMode)", "mode == ManualOperandSpeculation || edge.useKind() == UntypedUse");
    __break(0xC471u);
    JUMPOUT(0x197D607F8);
  }
  if ((v4 - 49) <= 2)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x522B, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowJSValue(Edge, OperandSpeculationMode)", "!isDouble(edge.useKind())");
    __break(0xC471u);
    JUMPOUT(0x197D60834);
  }
  if ((_DWORD)v4 == 52)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x522C, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowJSValue(Edge, OperandSpeculationMode)", "edge.useKind() != Int52RepUse");
    __break(0xC471u);
    JUMPOUT(0x197D60870);
  }
  v5 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v6 = *(unsigned __int16 *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v6 > 0xB5)
  {
    if (v6 == 182 || v6 == 355 || v6 == 348)
      goto LABEL_7;
  }
  else if (v6 < 3)
  {
LABEL_7:
    v7 = (JSC::FTL::Output *)(a1 + 27640);
    if (v6 == 355 || v6 == 348)
    {
      v8 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v8 = *(uint64_t **)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v9 = JSC::FTL::Output::constInt64(v7, *v8);
    *(_QWORD *)(v9 + 24) = v5;
    return v9;
  }
  v10 = *(_QWORD *)(a1 + 27936);
  if (!v10)
  {
LABEL_25:
    v28 = *(_QWORD *)(a1 + 27912);
    if (v28)
    {
      v29 = *(_DWORD *)(v28 - 8);
      v30 = (v5 + ~(a2 << 32)) ^ ((v5 + ~(a2 << 32)) >> 22);
      v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
      v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      v33 = v29 & ((v32 >> 31) ^ v32);
      v34 = *(_QWORD *)(v28 + 24 * v33);
      if (v34 == v5)
      {
LABEL_30:
        v36 = v28 + 24 * v33;
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          v38 = *(_QWORD *)(v36 + 16);
          v39 = *(_QWORD *)(a1 + 28168);
          if (v39 == v38)
            goto LABEL_36;
          v40 = *(_QWORD *)(*(_QWORD *)a1 + 784);
          v41 = *(unsigned int *)(v39 + 8);
          v42 = *(_DWORD *)(v40 + 20);
          if (v42 <= v41)
          {
            __break(0xC471u);
            JUMPOUT(0x197D60890);
          }
          v43 = *(unsigned int *)(v38 + 8);
          if (v42 <= v43)
          {
            __break(0xC471u);
            JUMPOUT(0x197D60898);
          }
          v44 = *(_QWORD *)(v40 + 8);
          v45 = v44 + 32 * v41;
          v46 = v44 + 32 * v43;
          if (*(_DWORD *)(v45 + 24) > *(_DWORD *)(v46 + 24) && *(_DWORD *)(v45 + 28) < *(_DWORD *)(v46 + 28))
          {
LABEL_36:
            v47 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), v37, 2);
            v48 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v47, *(JSC::B3::Value **)(a1 + 27896));
            goto LABEL_37;
          }
        }
      }
      else
      {
        v35 = 1;
        while (v34)
        {
          v33 = (v33 + v35) & v29;
          v34 = *(_QWORD *)(v28 + 24 * v33);
          ++v35;
          if (v34 == v5)
            goto LABEL_30;
        }
      }
    }
    v51 = *(_QWORD *)(a1 + 27944);
    if (!v51)
      goto LABEL_51;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (v5 + ~(a2 << 32)) ^ ((v5 + ~(a2 << 32)) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 24 * v56);
    if (v57 != v5)
    {
      v58 = 1;
      while (v57)
      {
        v56 = (v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 24 * v56);
        ++v58;
        if (v57 == v5)
          goto LABEL_44;
      }
      goto LABEL_51;
    }
LABEL_44:
    v59 = v51 + 24 * v56;
    v60 = *(_QWORD *)(v59 + 8);
    if (!v60)
      goto LABEL_51;
    v61 = *(_QWORD *)(v59 + 16);
    v62 = *(_QWORD *)(a1 + 28168);
    if (v62 != v61)
    {
      v63 = *(_QWORD *)(*(_QWORD *)a1 + 784);
      v64 = *(unsigned int *)(v62 + 8);
      v65 = *(_DWORD *)(v63 + 20);
      if (v65 <= v64)
      {
        __break(0xC471u);
        JUMPOUT(0x197D608A0);
      }
      v66 = *(unsigned int *)(v61 + 8);
      if (v65 <= v66)
      {
        __break(0xC471u);
        goto LABEL_76;
      }
      v67 = *(_QWORD *)(v63 + 8);
      v68 = v67 + 32 * v64;
      v69 = v67 + 32 * v66;
      if (*(_DWORD *)(v68 + 24) <= *(_DWORD *)(v69 + 24) || *(_DWORD *)(v68 + 28) >= *(_DWORD *)(v69 + 28))
      {
LABEL_51:
        v72 = *(JSC::DFG::Graph **)a1;
        v73 = *(JSC::DFG::Node **)(a1 + 28224);
        v74 = *(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x14);
        v93[0] = (WTF *)"Value not defined: ";
        v93[1] = (WTF *)20;
        LODWORD(v95) = v74;
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)v93, (unsigned int *)&v95, (int **)&v94);
        if (!v94.n128_u64[0])
        {
          __break(0xC471u);
          JUMPOUT(0x197D60878);
        }
        WTF::String::ascii((WTF::String *)&v94, (int8x16_t **)v93);
        if (v93[0])
          v75 = (char *)v93[0] + 16;
        else
          v75 = 0;
        JSC::DFG::Graph::logAssertionFailure(v72, v73, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5246, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowJSValue(Edge, OperandSpeculationMode)", v75);
        v83 = v93[0];
        v93[0] = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 1)
            WTF::fastFree((unint64_t)v83, v76, v77, v78, v79, v80, v81, v82);
          else
            --*(_DWORD *)v83;
        }
        v84 = (WTF::StringImpl *)v94.n128_u64[0];
        v94.n128_u64[0] = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
          {
            WTF::StringImpl::~StringImpl(v84, (WTF::AtomStringImpl *)v76, v77, v78, v79, v80, v81, v82);
            WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
          }
          else
          {
            *(_DWORD *)v84 -= 2;
          }
        }
        __break(0xC471u);
LABEL_76:
        JUMPOUT(0x197D60784);
      }
    }
    v70 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 7);
    v71 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 6);
    v48 = JSC::FTL::Output::select((JSC::FTL::Output *)(a1 + 27640), v60, v70, v71, 0);
LABEL_37:
    v9 = v48;
    v49 = *(_QWORD *)(a1 + 28168);
    v94.n128_u64[0] = v48;
    v94.n128_u64[1] = v49;
    v95 = v5;
    WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v93, (uint64_t *)(a1 + 27936), (uint64_t *)&v95, &v94);
    return v9;
  }
  v11 = *(_DWORD *)(v10 - 8);
  v12 = (v5 + ~(a2 << 32)) ^ ((v5 + ~(a2 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = *(_QWORD *)(v10 + 24 * v15);
  if (v16 != v5)
  {
    v17 = 1;
    while (v16)
    {
      v15 = (v15 + v17) & v11;
      v16 = *(_QWORD *)(v10 + 24 * v15);
      ++v17;
      if (v16 == v5)
        goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_19:
  v18 = v10 + 24 * v15;
  v9 = *(_QWORD *)(v18 + 8);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(a1 + 28168);
  if (v20 != v19)
  {
    v21 = *(_QWORD *)(*(_QWORD *)a1 + 784);
    v22 = *(unsigned int *)(v20 + 8);
    v23 = *(_DWORD *)(v21 + 20);
    if (v23 <= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x197D60880);
    }
    v24 = *(unsigned int *)(v19 + 8);
    if (v23 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x197D60888);
    }
    v25 = *(_QWORD *)(v21 + 8);
    v26 = v25 + 32 * v22;
    v27 = v25 + 32 * v24;
    if (*(_DWORD *)(v26 + 24) <= *(_DWORD *)(v27 + 24) || *(_DWORD *)(v26 + 28) >= *(_DWORD *)(v27 + 28))
      goto LABEL_25;
  }
  return v9;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowDouble(uint64_t a1, unint64_t a2, int8x8_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (a2 >> 50) & 0x3F;
  if ((v4 - 49) >= 3)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x521E, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowDouble(Edge)", "isDouble(edge.useKind())");
    __break(0xC471u);
    goto LABEL_22;
  }
  v5 = *(_QWORD *)(a1 + 27960);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((a2 & 0xFF00FFFFFFFFFFFFLL) + ~(a2 << 32)) ^ (((a2 & 0xFF00FFFFFFFFFFFFLL) + ~(a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 24 * v10);
    if (v11 != (a2 & 0xFF00FFFFFFFFFFFFLL))
    {
      v12 = 1;
      while (v11)
      {
        v10 = (v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 24 * v10);
        ++v12;
        if (v11 == (a2 & 0xFF00FFFFFFFFFFFFLL))
          goto LABEL_7;
      }
      goto LABEL_13;
    }
LABEL_7:
    v13 = v5 + 24 * v10;
    result = *(_QWORD *)(v13 + 8);
    if (result)
    {
      v15 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(a1 + 28168);
      if (v16 == v15)
        return result;
      v17 = *(_QWORD *)(*(_QWORD *)a1 + 784);
      v18 = *(unsigned int *)(v16 + 8);
      v19 = *(_DWORD *)(v17 + 20);
      if (v19 <= v18)
      {
        __break(0xC471u);
        JUMPOUT(0x197D60A60);
      }
      v20 = *(unsigned int *)(v15 + 8);
      if (v19 > v20)
      {
        v21 = *(_QWORD *)(v17 + 8);
        v22 = v21 + 32 * v18;
        v23 = v21 + 32 * v20;
        if (*(_DWORD *)(v22 + 24) > *(_DWORD *)(v23 + 24) && *(_DWORD *)(v22 + 28) < *(_DWORD *)(v23 + 28))
          return result;
        goto LABEL_13;
      }
      __break(0xC471u);
LABEL_22:
      JUMPOUT(0x197D60A58);
    }
  }
LABEL_13:
  if ((_DWORD)v4 && (v4 > 0x34 || ((1 << v4) & 0x12400001800284) == 0))
  {
    *(_BYTE *)(a1 + 28112) = 0;
  }
  return *(_QWORD *)(a1 + 27720);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::strictInt52ToJSValue(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v4;
  uint64_t v5;
  uint64_t v6;
  JSC::B3::BasicBlock *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  __int128 v43;
  WTF *v44;
  uint64_t v45;
  _BYTE v46[32];

  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v6 = JSC::FTL::Output::newBlock(v4);
  v7 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v4);
  v44 = (WTF *)v46;
  v45 = 2;
  v8 = JSC::FTL::Output::castToInt32(v4, a2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::signExt32To64(v4, v8);
  v10 = JSC::FTL::Output::equal(v4, v9, a2);
  JSC::FTL::Output::branch(v4, (uint64_t)v10, v5, v6, NAN, NAN, v11, v12, v13, v14);
  *((_QWORD *)this + 3472) = v5;
  v15 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v6;
  *(_QWORD *)&v43 = JSC::FTL::Output::anchor(v4, v16);
  *((_QWORD *)&v43 + 1) = v17;
  if (HIDWORD(v45) == (_DWORD)v45)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v44, (unint64_t)&v43, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    *((_OWORD *)v44 + HIDWORD(v45)) = v43;
    ++HIDWORD(v45);
  }
  JSC::FTL::Output::jump(v4, v7, v18, v19, v20, v21, v22, v23);
  *((_QWORD *)this + 3472) = v6;
  *((_QWORD *)this + 3473) = v7;
  v24 = (JSC::B3::Value *)JSC::FTL::Output::intToDouble(v4, a2);
  *(_QWORD *)&v43 = JSC::FTL::Output::anchor(v4, v25);
  *((_QWORD *)&v43 + 1) = v26;
  if (HIDWORD(v45) == (_DWORD)v45)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v44, (unint64_t)&v43, v27, v28, v29, v30, v31, v32);
  }
  else
  {
    *((_OWORD *)v44 + HIDWORD(v45)) = v43;
    ++HIDWORD(v45);
  }
  JSC::FTL::Output::jump(v4, v7, v27, v28, v29, v30, v31, v32);
  *((_QWORD *)this + 3472) = v7;
  *((_QWORD *)this + 3473) = v15;
  v40 = JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, 2, (unsigned int *)&v44);
  v41 = v44;
  if (v46 != (_BYTE *)v44 && v44)
  {
    v44 = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v41, v33, v34, v35, v36, v37, v38, v39);
  }
  return v40;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::DFG::AbstractValue&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = (_QWORD *)(v12 + 40 * v19);
  v21 = *v20;
  if (!*v20)
  {
LABEL_12:
    *v20 = v15;
    v25 = v20 + 1;
    v24 = v20[1];
    if (v20 + 1 != (_QWORD *)a4)
    {
      if ((v24 & 1) != 0)
        WTF::fastFree(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v26 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 1) == 0 || v26 == 4)
      {
        if ((*v25 & 2) != 0)
          v24 = v26 | 2;
        else
          v24 = v26 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)v25 = v24;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v20 + 1, (_QWORD *)a4);
        v24 = *(_QWORD *)v25;
      }
    }
    v27 = v24 & 0xFFFFFFFFFFFFFFFDLL;
    v28 = v24 | 2;
    if ((*(_BYTE *)a4 & 2) == 0)
      v28 = v27;
    v20[1] = v28;
    v29 = *(_OWORD *)(a4 + 8);
    v20[4] = *(_QWORD *)(a4 + 24);
    *((_OWORD *)v20 + 1) = v29;
    v30 = *a2;
    if (*a2)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v33 = *a2;
    if (*a2)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_32;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_46:
        v20 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, v37, (uint64_t)v20, a4, a5, a6, a7, a8);
        v33 = *a2;
        if (*a2)
          LODWORD(v36) = *(_DWORD *)(v33 - 4);
        else
          LODWORD(v36) = 0;
        goto LABEL_49;
      }
LABEL_32:
      v37 = ((_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36)));
      goto LABEL_46;
    }
LABEL_49:
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v33 + 40 * v36;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != v15)
  {
    if (v21 == -1)
      v22 = v20;
    v19 = (v19 + v23) & v14;
    v20 = (_QWORD *)(v12 + 40 * v19);
    v21 = *v20;
    ++v23;
    if (!*v20)
    {
      if (v22)
      {
        v22[4] = 0;
        *(_OWORD *)v22 = 0u;
        *((_OWORD *)v22 + 1) = 0u;
        --*(_DWORD *)(*a2 - 16);
        v15 = *a3;
        v20 = v22;
      }
      goto LABEL_12;
    }
  }
  if ((v13 & 1) != 0)
    v32 = 0;
  else
    v32 = *(_DWORD *)(v12 - 4);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v12 + 40 * v32;
  *(_BYTE *)(a1 + 16) = 0;
  v39 = v20 + 1;
  v38 = v20[1];
  if (v20 + 1 != (_QWORD *)a4)
  {
    if ((v38 & 1) != 0)
      WTF::fastFree(v38 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v40 = *(_QWORD *)a4;
    if ((*(_QWORD *)a4 & 1) == 0 || v40 == 4)
    {
      v41 = v40 & 0xFFFFFFFFFFFFFFFDLL;
      v38 = v40 | 2;
      if ((*v39 & 2) == 0)
        v38 = v41;
      *(_QWORD *)v39 = v38;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v20 + 1, (_QWORD *)a4);
      v38 = *(_QWORD *)v39;
    }
  }
  v42 = v38 & 0xFFFFFFFFFFFFFFFDLL;
  v43 = v38 | 2;
  if ((*(_BYTE *)a4 & 2) == 0)
    v43 = v42;
  v20[1] = v43;
  v44 = *(_OWORD *)(a4 + 8);
  v20[4] = *(_QWORD *)(a4 + 24);
  *((_OWORD *)v20 + 1) = v44;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AbstractValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::AbstractValue>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::AbstractValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::AbstractValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *result;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v9 - 4);
    v13 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(40 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = a1;
    v23 = 0;
    v24 = 0;
    v25 = v12;
    v26 = (uint64_t *)a3;
    do
    {
      v27 = (uint64_t *)(v9 + 40 * v23);
      v28 = *v27;
      if (*v27 != -1)
      {
        if (v28)
        {
          v33 = *v22;
          if (*v22)
            v34 = *(_DWORD *)(v33 - 8);
          else
            v34 = 0;
          v35 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
          v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
          v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
          v38 = v34 & ((v37 >> 31) ^ v37);
          v39 = 1;
          do
          {
            v40 = v38;
            v41 = (_QWORD *)(v33 + 40 * v38);
            v38 = (v38 + v39++) & v34;
          }
          while (*v41);
          v42 = v40;
          v43 = v33 + 40 * v40;
          v46 = *(_QWORD *)(v43 + 8);
          v45 = (uint64_t *)(v43 + 8);
          v44 = v46;
          if ((v46 & 1) != 0)
          {
            v66 = v24;
            v68 = v26;
            v58 = v22;
            WTF::fastFree(v44 & 0xFFFFFFFFFFFFFFFCLL, v15, v16, v17, v18, v19, v20, v21);
            v24 = v66;
            v26 = v68;
            v22 = v58;
            v28 = *v27;
          }
          *v41 = v28;
          v47 = v9 + 40 * v23;
          *v45 = 0;
          v50 = *(_QWORD *)(v47 + 8);
          v49 = (_QWORD *)(v47 + 8);
          v48 = v50;
          if ((v50 & 1) == 0 || v48 == 4)
          {
            v51 = v48 & 0xFFFFFFFFFFFFFFFDLL;
            *v45 = v51;
          }
          else
          {
            v65 = v24;
            v67 = v26;
            v64 = v22;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v45, v49);
            v22 = v64;
            v24 = v65;
            v26 = v67;
            v51 = *v45;
          }
          v52 = v51 & 0xFFFFFFFFFFFFFFFDLL;
          v53 = v51 | 2;
          if ((*(_BYTE *)v49 & 2) == 0)
            v53 = v52;
          *v45 = v53;
          v54 = v33 + 40 * v42;
          v55 = v9 + 40 * v23;
          v56 = *(_OWORD *)(v55 + 16);
          *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
          *(_OWORD *)(v54 + 16) = v56;
          v57 = *v49;
          if ((*v49 & 1) != 0)
          {
            v59 = v26;
            v60 = v22;
            v61 = v24;
            WTF::fastFree(v57 & 0xFFFFFFFFFFFFFFFCLL, v15, v16, v17, v18, v19, v20, v21);
            v24 = v61;
            v22 = v60;
            v26 = v59;
          }
          if (v27 == v26)
            v24 = v41;
        }
        else
        {
          v29 = *(_QWORD *)(v9 + 40 * v23 + 8);
          if ((v29 & 1) != 0)
          {
            v30 = v26;
            v31 = v22;
            v32 = v24;
            WTF::fastFree(v29 & 0xFFFFFFFFFFFFFFFCLL, v15, v16, v17, v18, v19, v20, v21);
            v24 = v32;
            v22 = v31;
            v26 = v30;
          }
        }
      }
      ++v23;
    }
    while (v23 != v25);
  }
  else
  {
    v24 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  v63 = v24;
  WTF::fastFree(v9 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v63;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::boxInt32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)a2, 2);
  return JSC::FTL::Output::add(v3, v4, *((JSC::B3::Value **)this + 3487));
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int **a4@<X8>)
{
  uint64_t result;
  unsigned int v6;
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v6 = a3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)v7, &v6, a4);
  if (!*a4)
    __break(0xC471u);
  return result;
}

__n128 WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>(uint64_t a1, uint64_t *a2, uint64_t *a3, __n128 *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (_QWORD *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v8 + 24 * v28;
        *(_BYTE *)(a1 + 16) = 0;
        result = *a4;
        *(__n128 *)(v16 + 1) = *a4;
        return result;
      }
      if (v17 == -1)
        v25 = v16;
      v15 = (v15 + v26) & v10;
      v16 = (_QWORD *)(v8 + 24 * v15);
      v17 = *v16;
      ++v26;
    }
    while (*v16);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v25;
    }
  }
  *v16 = v11;
  result = *a4;
  *(__n128 *)(v16 + 1) = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_10;
    goto LABEL_25;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v27 = 8;
      goto LABEL_22;
    }
LABEL_25:
    v27 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_22:
    v16 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, v27, v16);
    v21 = *a2;
    if (*a2)
      LODWORD(v24) = *(_DWORD *)(v21 - 4);
    else
      LODWORD(v24) = 0;
  }
LABEL_10:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v21 + 24 * v24;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_QWORD *)(v6 + 24 * v19);
      if ((unint64_t)(*v21 + 1) >= 2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = (~(*v21 << 32) + *v21) ^ ((~(*v21 << 32) + *v21) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((unint64_t)(v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = v23 & ((v26 >> 31) ^ v26);
        v28 = 1;
        do
        {
          v29 = (_QWORD *)(v22 + 24 * v27);
          v27 = (v27 + v28++) & v23;
        }
        while (*v29);
        v30 = *(_OWORD *)v21;
        v29[2] = v21[2];
        *(_OWORD *)v29 = v30;
        if (v21 == a3)
          v20 = v29;
      }
      ++v19;
    }
    while (v19 != v7);
    goto LABEL_15;
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v20;
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculate(uint64_t a1, unint64_t a2, char a3, WTF *a4, JSC::DFG::Node *a5, JSC::B3::Value *a6, int8x8_t a7)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  __int16 v42;

  v7 = *(_QWORD *)(a1 + 28192);
  if ((v7 & 1) != 0)
  {
    v17 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v18 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
        ? (v19 = (_DWORD)v18 == -1)
        : (v19 = 1),
          v19))
    {
      v20 = 2;
    }
    else if (v18 >> 28)
    {
      v37 = (unint64_t)a4;
      v39 = a1;
      v31 = a3;
      v33 = a6;
      v25 = a5;
      v35 = a2;
      v26 = WTF::fastMalloc((WTF *)0x10);
      a2 = v35;
      a3 = v31;
      a6 = v33;
      a5 = v25;
      v27 = v26;
      a4 = (WTF *)v37;
      a1 = v39;
      *(_QWORD *)v27 = v17;
      *(_DWORD *)(v27 + 8) = v18;
      v20 = 1;
      v17 = v27;
    }
    else
    {
      v20 = v17;
      v17 = v18 << 36;
    }
    v7 = v17 | v20;
  }
  v41[0] = v7;
  v8 = *(_QWORD *)(a1 + 28200);
  if ((v8 & 1) != 0)
  {
    v21 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v22 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v38 = (unint64_t)a4;
      v40 = a1;
      v32 = a3;
      v34 = a6;
      v28 = a5;
      v36 = a2;
      v29 = v21;
      v30 = WTF::fastMalloc((WTF *)0x10);
      a2 = v36;
      a3 = v32;
      a6 = v34;
      a5 = v28;
      v21 = v30;
      a4 = (WTF *)v38;
      a1 = v40;
      *(_QWORD *)v21 = v29;
      *(_DWORD *)(v21 + 8) = v22;
      v24 = 1;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v8 = v21 | v24;
    v9 = ((v21 | v24) & 1) == 0;
  }
  else
  {
    v9 = 1;
  }
  v41[1] = v8;
  v42 = *(_WORD *)(a1 + 28208);
  if (!v9 && (v8 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v8 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  if ((v7 & 1) != 0 && (v7 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v7 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::appendOSRExit(JSC::DFG::Graph **a1, JSC::CodeBlock *a2, char a3, WTF *a4, JSC::DFG::Node *a5, JSC::B3::Value *a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  char v9;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int16 v37;
  _QWORD v38[2];

  v9 = a8;
  JSC::DFG::Graph::methodOfGettingAValueProfileFor(*a1, a1[3528], a5, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (uint64_t)v38, a9);
  v16 = *(_QWORD *)a7;
  if ((*(_QWORD *)a7 & 1) != 0)
  {
    v26 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v27 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v34 = v26;
      v26 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v26 = v34;
      *(_DWORD *)(v26 + 8) = v27;
      v29 = 1;
    }
    else
    {
      v29 = v26;
      v26 = v27 << 36;
    }
    v16 = v26 | v29;
  }
  v36[0] = v16;
  v17 = *(_QWORD *)(a7 + 8);
  if ((v17 & 1) != 0)
  {
    v30 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v31 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
        ? (v32 = (_DWORD)v31 == -1)
        : (v32 = 1),
          v32))
    {
      v33 = 2;
    }
    else if (v31 >> 28)
    {
      v35 = v30;
      v30 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = v35;
      *(_DWORD *)(v30 + 8) = v31;
      v33 = 1;
    }
    else
    {
      v33 = v30;
      v30 = v31 << 36;
    }
    v17 = v30 | v33;
    v18 = ((v30 | v33) & 1) == 0;
  }
  else
  {
    v18 = 1;
  }
  v36[1] = v17;
  v37 = *(_WORD *)(a7 + 16);
  if (!v18 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  if ((v38[0] & 1) != 0 && (v38[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v38[0] & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::boxDouble(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = JSC::FTL::Output::bitCast((_QWORD *)this + 3455, (uint64_t)a2);
  return JSC::FTL::Output::sub(v3, v4, *((JSC::B3::Value **)this + 3487));
}

uint64_t JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *a1, int a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;

  v6 = a1[16];
  v5 = a1[17];
  v7 = (JSC::B3::Value *)a1[15];
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = off_1E357F5F0;
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 153;
  *(_DWORD *)(v8 + 16) = a2;
  *(_BYTE *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v8 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v7, (JSC::B3::Value *)v8);
  v18 = v8;
  v9 = (char **)(v5 + 8);
  v10 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(v5 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v18);
    v10 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v10) = *(_QWORD *)v17;
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v8;
    v11 = v8;
  }
  *(_DWORD *)(v5 + 20) = v10 + 1;
  *(_QWORD *)(v11 + 32) = v5;
  v12 = a3[3];
  if ((_DWORD)v12)
  {
    v13 = 16 * v12;
    v14 = (_QWORD *)(*(_QWORD *)a3 + 8);
    do
    {
      v15 = *(v14 - 1);
      if (v15 || *v14)
      {
        if ((*(_WORD *)(v15 + 12) & 0xFFF) != 0x98)
          v15 = 0;
        *(_QWORD *)(v15 + 40) = v8;
      }
      v14 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  return v8;
}

__n128 WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 3)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 2;
    goto LABEL_13;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_13:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 3)
    {
      v15 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
    else
    {
      if (v11 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowInt52(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  JSC::B3::Value *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::FTL::Output *v43;
  JSC::B3::Value *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::Value *v64;
  uint64_t v65;

  if ((a2 & 0xFC000000000000) != 0xD0000000000000)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5108, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowInt52(Edge, Int52Kind)", "edge.useKind() == Int52RepUse");
    __break(0xC471u);
    goto LABEL_49;
  }
  if (a3 != 1)
  {
    if (a3)
      return *(JSC::B3::Value **)(a1 + 27672);
    v45 = a2 & 0xFF00FFFFFFFFFFFFLL;
    v46 = *(_QWORD *)(a1 + 27920);
    if (!v46)
      goto LABEL_38;
    v47 = *(_DWORD *)(v46 - 8);
    v48 = (v45 + ~(a2 << 32)) ^ ((v45 + ~(a2 << 32)) >> 22);
    v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
    v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
    v51 = v47 & ((v50 >> 31) ^ v50);
    v52 = *(_QWORD *)(v46 + 24 * v51);
    if (v52 != v45)
    {
      v53 = 1;
      while (v52)
      {
        v51 = (v51 + v53) & v47;
        v52 = *(_QWORD *)(v46 + 24 * v51);
        ++v53;
        if (v52 == v45)
          goto LABEL_32;
      }
      goto LABEL_38;
    }
LABEL_32:
    v54 = v46 + 24 * v51;
    result = *(JSC::B3::Value **)(v54 + 8);
    if (!result)
      goto LABEL_38;
    v55 = *(_QWORD *)(v54 + 16);
    v56 = *(_QWORD *)(a1 + 28168);
    if (v56 == v55)
      return result;
    v57 = *(_QWORD *)(*(_QWORD *)a1 + 784);
    v58 = *(unsigned int *)(v56 + 8);
    v59 = *(_DWORD *)(v57 + 20);
    if (v59 <= v58)
    {
      __break(0xC471u);
      JUMPOUT(0x197D620C4);
    }
    v60 = *(unsigned int *)(v55 + 8);
    if (v59 > v60)
    {
      v61 = *(_QWORD *)(v57 + 8);
      v62 = v61 + 32 * v58;
      v63 = v61 + 32 * v60;
      if (*(_DWORD *)(v62 + 24) > *(_DWORD *)(v63 + 24) && *(_DWORD *)(v62 + 28) < *(_DWORD *)(v63 + 28))
        return result;
LABEL_38:
      v64 = (JSC::B3::Value *)WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::get(*(_QWORD *)(a1 + 27928), a2 & 0xFF00FFFFFFFFFFFFLL);
      return *(JSC::B3::Value **)(a1 + 27672);
    }
    __break(0xC471u);
LABEL_49:
    JUMPOUT(0x197D6209CLL);
  }
  v4 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 27928);
  if (!v5)
    goto LABEL_14;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = (v4 + ~(a2 << 32)) ^ ((v4 + ~(a2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v5 + 24 * v10);
  if (v11 != v4)
  {
    v12 = 1;
    while (v11)
    {
      v10 = (v10 + v12) & v6;
      v11 = *(_QWORD *)(v5 + 24 * v10);
      ++v12;
      if (v11 == v4)
        goto LABEL_8;
    }
LABEL_14:
    v24 = *(_QWORD *)(a1 + 27920);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = (v4 + ~(a2 << 32)) ^ ((v4 + ~(a2 << 32)) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      v30 = *(_QWORD *)(v24 + 24 * v29);
      if (v30 == v4)
      {
LABEL_19:
        v32 = v24 + 24 * v29;
        v33 = *(JSC::B3::Value **)(v32 + 8);
        if (v33)
        {
          v34 = *(_QWORD *)(v32 + 16);
          v35 = *(_QWORD *)(a1 + 28168);
          if (v35 == v34)
            goto LABEL_25;
          v36 = *(_QWORD *)(*(_QWORD *)a1 + 784);
          v37 = *(unsigned int *)(v35 + 8);
          v38 = *(_DWORD *)(v36 + 20);
          if (v38 <= v37)
          {
            __break(0xC471u);
            JUMPOUT(0x197D620B4);
          }
          v39 = *(unsigned int *)(v34 + 8);
          if (v38 <= v39)
          {
            __break(0xC471u);
            JUMPOUT(0x197D620BCLL);
          }
          v40 = *(_QWORD *)(v36 + 8);
          v41 = v40 + 32 * v37;
          v42 = v40 + 32 * v39;
          if (*(_DWORD *)(v41 + 24) > *(_DWORD *)(v42 + 24) && *(_DWORD *)(v41 + 28) < *(_DWORD *)(v42 + 28))
          {
LABEL_25:
            v43 = (JSC::FTL::Output *)(a1 + 27640);
            v44 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v43, 12);
            return JSC::FTL::Output::shl(v43, v33, v44);
          }
        }
      }
      else
      {
        v31 = 1;
        while (v30)
        {
          v29 = (v29 + v31) & v25;
          v30 = *(_QWORD *)(v24 + 24 * v29);
          ++v31;
          if (v30 == v4)
            goto LABEL_19;
        }
      }
    }
    return *(JSC::B3::Value **)(a1 + 27672);
  }
LABEL_8:
  v13 = v5 + 24 * v10;
  result = *(JSC::B3::Value **)(v13 + 8);
  if (!result)
    goto LABEL_14;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(a1 + 28168);
  if (v16 != v15)
  {
    v17 = *(_QWORD *)(*(_QWORD *)a1 + 784);
    v18 = *(unsigned int *)(v16 + 8);
    v19 = *(_DWORD *)(v17 + 20);
    if (v19 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x197D620A4);
    }
    v20 = *(unsigned int *)(v15 + 8);
    if (v19 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x197D620ACLL);
    }
    v21 = *(_QWORD *)(v17 + 8);
    v22 = v21 + 32 * v18;
    v23 = v21 + 32 * v20;
    if (*(_DWORD *)(v22 + 24) <= *(_DWORD *)(v23 + 24) || *(_DWORD *)(v22 + 28) >= *(_DWORD *)(v23 + 28))
      goto LABEL_14;
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::int52ToStrictInt52(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 12);
  return JSC::FTL::Output::aShr(v3, a2, v4);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *(_QWORD *)(a1 + 32);
  if ((v10 & 1) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 4);
  if ((v10 & 1) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _BYTE *v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  WTF::StringImpl *v48;
  __int16 v49;

  v5 = *(_BYTE **)(a3 + 8);
  v6 = *(_DWORD *)(a3 + 20);
  if (*(_BYTE *)(a1 + 16) != 3)
  {
    if (v6)
    {
      v8 = *v5 & 0x7F;
      v7 = -1;
      goto LABEL_6;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197D623CCLL);
  }
  if (!v6)
    goto LABEL_28;
  v7 = (*v5 & 0x7F) - 32;
  v8 = -1;
LABEL_6:
  v10 = (_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  v43 = *(_QWORD *)(a1 + 20);
  v44 = 0;
  if ((v9 & 1) != 0 && v9 != 4)
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v44, (_QWORD *)(a1 + 32));
    v11 = v44;
    if ((*v10 & 2) != 0)
      goto LABEL_24;
LABEL_8:
    v12 = v11 & 0xFFFFFFFFFFFFFFFDLL;
    goto LABEL_9;
  }
  v11 = v9 & 0xFFFFFFFFFFFFFFFDLL;
  if ((v9 & 2) == 0)
    goto LABEL_8;
LABEL_24:
  v12 = v11 | 2;
LABEL_9:
  v44 = v12;
  v45 = *(_OWORD *)(a1 + 40);
  v13 = *(WTF::StringImpl **)(a1 + 64);
  v46 = *(_QWORD *)(a1 + 56);
  v47 = *(_BYTE *)(a1 + 16);
  if (v13)
    *(_DWORD *)v13 += 2;
  v48 = v13;
  LOBYTE(v49) = v7;
  HIBYTE(v49) = v8;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
  v15 = v14;
  *v14 = &off_1E3575718;
  v14[1] = v43;
  v14[2] = 0;
  v16 = v14 + 2;
  v17 = v44;
  if ((v44 & 1) == 0 || v44 == 4)
  {
    v18 = v44 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v14 + 2, &v44);
    v18 = *v16;
    v17 = v44;
  }
  if ((v17 & 2) != 0)
    v19 = v18 | 2;
  else
    v19 = v18 & 0xFFFFFFFFFFFFFFFDLL;
  v15[2] = v19;
  v20 = v45;
  v15[5] = v46;
  *(_OWORD *)(v15 + 3) = v20;
  *((_BYTE *)v15 + 48) = v47;
  v21 = v48;
  v48 = 0;
  v15[7] = v21;
  *((_WORD *)v15 + 32) = v49;
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v22 = v15;
  JSC::MacroAssembler::probe(a2, (uint64_t)JSC::stdFunctionCallback, (uint64_t)v22, 1, v23, v24, v25, v26);
  v34 = v48;
  v48 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  if ((v44 & 1) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFFFFFFFFFCLL, v27, v28, v29, v30, v31, v32, v33);
}

_QWORD *WTF::Detail::CallableWrapper<JSC::FTL::`anonymous namespace'::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::Probe::Context &)#1},void,JSC::Probe::Context &>::~CallableWrapper(_QWORD *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = &off_1E3575718;
  v9 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = a1[2];
  if ((v10 & 1) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::FTL::`anonymous namespace'::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::Probe::Context &)#1},void,JSC::Probe::Context &>::~CallableWrapper(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_1E3575718;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 2);
  if ((v10 & 1) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::FTL::`anonymous namespace'::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::Probe::Context &)#1},void,JSC::Probe::Context &>::call(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  JSC::DFG::AbstractValue *v12;
  WTF::PrintStream *v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v29;
  double v30;
  unint64_t v31;

  v8 = result;
  v9 = (_DWORD *)(result + 8);
  v10 = *a2;
  v30 = 0.0;
  v31 = 0;
  v11 = (_DWORD *)(result + 12);
  v12 = (JSC::DFG::AbstractValue *)(result + 16);
  v13 = (WTF::PrintStream *)(result + 56);
  v14 = *(unsigned __int8 *)(result + 48);
  if ((_DWORD)v14 != 3)
  {
    v20 = *(_QWORD *)(v10 + 8 * *(char *)(result + 65));
    v31 = v20;
    if ((_DWORD)v14 == 2)
    {
      if (v20 > 0xFFFDFFFFFFFFFFFFLL)
      {
        v22 = (double)(int)v20;
      }
      else
      {
        *(_QWORD *)&v21 = v20 - 0x2000000000000;
        v22 = (double)(uint64_t)COERCE_DOUBLE(v20 - 0x2000000000000);
        if (v20 >> 49)
          v23 = v22 == v21;
        else
          v23 = 0;
        if (!v23)
          goto LABEL_20;
        if ((uint64_t)v21)
        {
          if ((unint64_t)((uint64_t)v21 + 0x8000000000000) >> 52)
            goto LABEL_20;
        }
        else if ((uint64_t)v20 < 0x2000000000000)
        {
LABEL_20:
          __break(0xC471u);
          goto LABEL_64;
        }
      }
      v20 = *(_QWORD *)&v22 + 0x2000000000000;
      v31 = *(_QWORD *)&v22 + 0x2000000000000;
    }
    result = JSC::DFG::AbstractValue::validateOSREntryValue(result + 16, v20, v14, a4, a5, a6, a7, a8);
    if ((result & 1) != 0)
      return result;
    WTF::dataLog<char [29],unsigned int,char [2]>(v9);
    WTF::dataLog<char [32],unsigned int,char [2]>(v11);
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [21],JSC::DFG::AbstractValue,char [2]>(v12);
    if (*(_BYTE *)(v8 + 48) == 3)
      WTF::dataLog<char [27],double,char [2]>(&v30);
    else
      WTF::dataLog<char [20],JSC::JSValue,char [2]>("Unexpected value = ", (JSC::JSValue *)&v31, "\n");
    WTF::dataLogLn<>();
    WTF::dataLogLn<WTF::String>(v13);
    __break(0xC471u);
LABEL_64:
    JUMPOUT(0x197D625E0);
  }
  v15 = *(double *)(v10 + 8 * *(char *)(result + 64) + 280);
  v30 = v15;
  v16 = *(_QWORD *)&v15 + 0x2000000000000;
  if (v15 == NAN)
  {
    v19 = 0x40000000000;
    goto LABEL_25;
  }
  if (v16 >= 0xFFFE000000000000)
  {
    v24 = (LODWORD(v15) & 0xFFFFFFFE) == 0;
    v19 = 0x200000000;
    v25 = 0x100000000;
    goto LABEL_23;
  }
  if (*(_QWORD *)&v15 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v29 = (uint64_t)v15;
    if (v15 != (double)(uint64_t)v15)
    {
LABEL_44:
      v19 = 0x2000000000;
      goto LABEL_25;
    }
    if (v29)
    {
      if ((unint64_t)(v29 + 0x8000000000000) >> 52)
        goto LABEL_44;
    }
    else if ((*(_QWORD *)&v15 & 0x8000000000000000) != 0)
    {
      goto LABEL_44;
    }
    v19 = 0x1000000000;
    goto LABEL_25;
  }
  if ((v16 & 0xFFFE000000000002) != 0)
  {
    v24 = (v16 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v19 = 0x20000000000;
    v25 = 0x10000000000;
LABEL_23:
    if (v24)
      v19 = v25;
    goto LABEL_25;
  }
  if (qword_1ECF4C080 > v16)
    goto LABEL_57;
  if ((*(_QWORD *)&v15 & 0xFFFFFFFFFLL) == 0 || v16 >> 36 != 0)
    goto LABEL_57;
  v18 = *(unsigned __int8 *)(*(_QWORD *)&v15 + 0x2000000000005);
  if (v18 != 2)
  {
    v19 = JSC::speculatedTypeMapping[v18];
    goto LABEL_25;
  }
  v26 = *(_QWORD *)(*(_QWORD *)&v15 + 0x2000000000008);
  if (v26)
    v27 = (*(_QWORD *)(*(_QWORD *)&v15 + 0x2000000000008) & 1) == 0;
  else
    v27 = 0;
  if (!v27)
  {
LABEL_49:
    v19 = 805306368;
    goto LABEL_25;
  }
  if (v26 >= qword_1ECF4C080 && !(v26 >> 36) && (v26 & 0xFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)(v26 + 16) & 0x10) != 0)
    {
      v19 = 0x10000000;
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_57:
  v19 = 0;
LABEL_25:
  if ((*(_QWORD *)(result + 24) & v19) == 0)
  {
    WTF::dataLog<char [29],unsigned int,char [2]>((_DWORD *)(result + 8));
    WTF::dataLog<char [32],unsigned int,char [2]>(v11);
    WTF::dataLog<char [16]>("\n");
    WTF::dataLog<char [21],JSC::DFG::AbstractValue,char [2]>(v12);
    if (*(_BYTE *)(v8 + 48) == 3)
      WTF::dataLog<char [27],double,char [2]>(&v30);
    else
      WTF::dataLog<char [20],JSC::JSValue,char [2]>("Unexpected value = ", (JSC::JSValue *)&v31, "\n");
    WTF::dataLogLn<>();
    WTF::dataLogLn<WTF::String>(v13);
    __break(0xC471u);
    JUMPOUT(0x197D627C8);
  }
  return result;
}

uint64_t WTF::dataLogLn<>()
{
  return WTF::dataLog<char [16]>("\n");
}

uint64_t WTF::dataLogLn<WTF::String>(WTF::PrintStream *a1)
{
  return WTF::dataLog<WTF::String,char [2]>(a1, "\n");
}

uint64_t WTF::dataLog<char [29],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Validation failed at node: @");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [32],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Failed validating live value: @");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [21],JSC::DFG::AbstractValue,char [2]>(JSC::DFG::AbstractValue *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Expected AI value = ");
  JSC::DFG::AbstractValue::dumpInContext(a1, v4, 0);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [20],JSC::JSValue,char [2]>(const char *a1, JSC::JSValue *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  BOOL v9;
  JSC::Structure *v10;
  char v12;
  char **v13;
  char *v14;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  if (*(_QWORD *)a2)
    v9 = (*(_QWORD *)a2 & 0xFFFE000000000002) == 0;
  else
    v9 = 0;
  if (v9)
    v10 = (JSC::Structure *)(16 * (**(_DWORD **)a2 & 0xFFFFFFFE));
  else
    v10 = 0;
  JSC::JSValue::dumpInContextAssumingStructure(a2, v8, 0, v10);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [27],double,char [2]>(double *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Unexpected double value = ");
  WTF::PrintStream::printf(v4, "%lf", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<WTF::String,char [2]>(WTF::PrintStream *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  const WTF::String *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float v14;
  char v16;
  char **v17;
  char *v18;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::printInternal(v6, a1, v7, v8, v9, v10, v11, v12, v13, v14);
  WTF::PrintStream::printf(v6, "%s", a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowInt32(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unint64_t v11;
  unsigned int v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  void *v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  JSC::B3::Value *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int *v128;
  JSC::B3::Value *v129;
  uint64_t v130;
  uint64_t v131;
  int8x8_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int *v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  _BYTE v161[24];
  __n128 v162;
  unint64_t v163;

  v11 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v12 = *(unsigned __int16 *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v12 > 0xB5)
  {
    if (v12 == 182)
      goto LABEL_3;
    if (v12 == 355 || v12 == 348)
    {
      v13 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        v14 = 0;
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
LABEL_5:
        v15 = a1[3519];
        v16 = *(_QWORD *)(v15 + 8);
        v17 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v18 = (uint64_t *)(v16 + 24);
        v19 = (uint64_t *)(v16 + 8);
        if ((a2 & 1) != 0)
          v19 = v18;
        v20 = *v19;
        v21 = *v19 + 32 * v17;
        v22 = *(_DWORD *)(v15 + 88);
        v23 = *(_DWORD *)(v21 + 20);
        if (v22 != v23)
        {
          if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v23 ^ v22) >= 2)
            {
              v138 = *(_QWORD *)v21;
              if (*(_QWORD *)v21 != 4)
              {
                *(_QWORD *)v21 = v138 | 2;
                v145 = (unsigned int *)(v138 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v138 & 1) != 0)
                {
                  v156 = 2 * *v145;
                  while (v156 * 4)
                  {
                    v157 = *(_QWORD *)&v145[v156];
                    if ((*(_BYTE *)(v157 + 19) & 0xC) == 0)
                    {
                      v158 = *(_QWORD *)(v157 + 96);
                      v159 = (v158 & 1) != 0 ? (v158 >> 1) & 3 : *(unsigned __int8 *)(v158 + 4);
                      v156 -= 2;
                      if (v159 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v145, (void *)a2, a3, a4, a5, a6, a7, a8);
                    goto LABEL_124;
                  }
                }
                else if (v145)
                {
                  if ((*((_BYTE *)v145 + 19) & 0xC) != 0
                    || ((v146 = *((_QWORD *)v145 + 12), (v146 & 1) != 0)
                      ? (v147 = (v146 >> 1) & 3)
                      : (v147 = *(unsigned __int8 *)(v146 + 4)),
                        v147 == 2))
                  {
LABEL_124:
                    *(_QWORD *)v21 = 4;
                  }
                }
              }
              *(_DWORD *)(v20 + 32 * v17 + 16) = -21020677;
            }
            if ((v22 & 1) != 0)
              *(_QWORD *)v21 &= ~2uLL;
          }
          *(_DWORD *)(v21 + 20) = v22;
        }
        v24 = *(_QWORD *)(v21 + 8);
        v25 = v24 & 0x300000000;
        if ((v24 & 0x300000000) == v24)
        {
LABEL_9:
          if (v14 > 0xFFFDFFFFFFFFFFFFLL)
          {
LABEL_10:
            v26 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), v14);
            *((_QWORD *)v26 + 3) = v11;
            return v26;
          }
          goto LABEL_72;
        }
        if ((v24 & 0x2800FFFFFFF7) != 0)
        {
          if (!JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)v21, 0x300000000uLL, a3, a4, a5, a6, a7, a8))goto LABEL_9;
        }
        else
        {
          *(_QWORD *)(v21 + 8) = v25;
          if (v25)
            goto LABEL_9;
          JSC::DFG::AbstractValue::clear((JSC::DFG::AbstractValue *)v21, a2, a3, a4, a5, a6, a7, a8);
        }
        *(_BYTE *)(a1[3519] + 80) = 0;
        goto LABEL_9;
      }
LABEL_4:
      v14 = *(_QWORD *)v13;
      goto LABEL_5;
    }
  }
  else if (v12 < 3)
  {
LABEL_3:
    v13 = *(__int128 **)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    goto LABEL_4;
  }
  if (v27 >= 0xFFFE000000000000)
  {
    LODWORD(v14) = v27;
    goto LABEL_10;
  }
  v35 = a1[3489];
  if (v35)
  {
    v36 = *(_DWORD *)(v35 - 8);
    v37 = (v11 + ~(a2 << 32)) ^ ((v11 + ~(a2 << 32)) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(v35 + 24 * v40);
    if (v41 == v11)
    {
LABEL_20:
      v43 = v35 + 24 * v40;
      v26 = *(JSC::B3::Value **)(v43 + 8);
      if (v26)
      {
        v44 = *(_QWORD *)(v43 + 16);
        v45 = a1[3521];
        if (v45 == v44)
          goto LABEL_26;
        v46 = *(_QWORD *)(*a1 + 784);
        v47 = *(unsigned int *)(v45 + 8);
        v48 = *(_DWORD *)(v46 + 20);
        if (v48 <= v47)
          goto LABEL_169;
        v49 = *(unsigned int *)(v44 + 8);
        if (v48 <= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x197D63734);
        }
        v50 = *(_QWORD *)(v46 + 8);
        v51 = v50 + 32 * v47;
        v52 = v50 + 32 * v49;
        if (*(_DWORD *)(v51 + 24) > *(_DWORD *)(v52 + 24) && *(_DWORD *)(v51 + 28) < *(_DWORD *)(v52 + 28))
        {
LABEL_26:
          v53 = a1[3519];
          v54 = *(_QWORD *)(v53 + 8);
          v55 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v56 = (uint64_t *)(v54 + 24);
          v57 = (uint64_t *)(v54 + 8);
          if ((a2 & 1) != 0)
            v57 = v56;
          v58 = *v57;
          v59 = *v57 + 32 * v55;
          v60 = *(_DWORD *)(v53 + 88);
          v61 = *(_DWORD *)(v59 + 20);
          if (v60 != v61)
          {
            if ((*(_QWORD *)(v59 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v61 ^ v60) >= 2)
              {
                v136 = *(_QWORD *)v59;
                if (*(_QWORD *)v59 != 4)
                {
                  *(_QWORD *)v59 = v136 | 2;
                  v139 = (unsigned int *)(v136 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v136 & 1) != 0)
                  {
                    v148 = 2 * *v139;
                    while (v148 * 4)
                    {
                      v149 = *(_QWORD *)&v139[v148];
                      if ((*(_BYTE *)(v149 + 19) & 0xC) == 0)
                      {
                        v150 = *(_QWORD *)(v149 + 96);
                        v151 = (v150 & 1) != 0 ? (v150 >> 1) & 3 : *(unsigned __int8 *)(v150 + 4);
                        v148 -= 2;
                        if (v151 != 2)
                          continue;
                      }
                      WTF::fastFree((unint64_t)v139, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
                      goto LABEL_110;
                    }
                  }
                  else if (v139)
                  {
                    if ((*((_BYTE *)v139 + 19) & 0xC) != 0
                      || ((v140 = *((_QWORD *)v139 + 12), (v140 & 1) != 0)
                        ? (v141 = (v140 >> 1) & 3)
                        : (v141 = *(unsigned __int8 *)(v140 + 4)),
                          v141 == 2))
                    {
LABEL_110:
                      *(_QWORD *)v59 = 4;
                    }
                  }
                }
                *(_DWORD *)(v58 + 32 * v55 + 16) = -21020677;
              }
              if ((v60 & 1) != 0)
                *(_QWORD *)v59 &= ~2uLL;
            }
            *(_DWORD *)(v59 + 20) = v60;
          }
          v62 = *(_QWORD *)(v59 + 8);
          v63 = v62 & 0x300000000;
          if ((v62 & 0x300000000) == v62)
            return v26;
          if ((v62 & 0x2800FFFFFFF7) != 0)
          {
            if (!JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)v59, 0x300000000uLL, (uint64_t)v29, v30, v31, v32, v33, v34))return v26;
          }
          else
          {
            *(_QWORD *)(v59 + 8) = v63;
            if (v63)
              return v26;
            JSC::DFG::AbstractValue::clear((JSC::DFG::AbstractValue *)v59, (uint64_t)v28, (uint64_t)v29, v30, v31, v32, v33, v34);
          }
          *(_BYTE *)(a1[3519] + 80) = 0;
          return v26;
        }
      }
    }
    else
    {
      v42 = 1;
      while (v41)
      {
        v40 = (v40 + v42) & v36;
        v41 = *(_QWORD *)(v35 + 24 * v40);
        ++v42;
        if (v41 == v11)
          goto LABEL_20;
      }
    }
  }
  v64 = a1[3490];
  if (v64)
  {
    v65 = *(_DWORD *)(v64 - 8);
    v66 = (v11 + ~(a2 << 32)) ^ ((v11 + ~(a2 << 32)) >> 22);
    v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
    v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
    v69 = v65 & ((v68 >> 31) ^ v68);
    v70 = *(_QWORD *)(v64 + 24 * v69);
    if (v70 == v11)
    {
LABEL_38:
      v72 = v64 + 24 * v69;
      v29 = *(JSC::B3::Value **)(v72 + 8);
      if (v29)
      {
        v73 = *(_QWORD *)(v72 + 16);
        v74 = a1[3521];
        if (v74 == v73)
        v75 = *(_QWORD *)(*a1 + 784);
        v76 = *(unsigned int *)(v74 + 8);
        v77 = *(_DWORD *)(v75 + 20);
        if (v77 <= v76)
        {
          __break(0xC471u);
          JUMPOUT(0x197D6373CLL);
        }
        v78 = *(unsigned int *)(v73 + 8);
        if (v77 <= v78)
        {
          __break(0xC471u);
          JUMPOUT(0x197D63744);
        }
        v79 = *(_QWORD *)(v75 + 8);
        v80 = v79 + 32 * v76;
        v81 = v79 + 32 * v78;
        if (*(_DWORD *)(v80 + 24) > *(_DWORD *)(v81 + 24) && *(_DWORD *)(v80 + 28) < *(_DWORD *)(v81 + 28))
      }
    }
    else
    {
      v71 = 1;
      while (v70)
      {
        v69 = (v69 + v71) & v65;
        v70 = *(_QWORD *)(v64 + 24 * v69);
        ++v71;
        if (v70 == v11)
          goto LABEL_38;
      }
    }
  }
  v82 = a1[3491];
  if (!v82)
    goto LABEL_55;
  v83 = *(_DWORD *)(v82 - 8);
  v84 = (v11 + ~(a2 << 32)) ^ ((v11 + ~(a2 << 32)) >> 22);
  v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
  v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
  v87 = v83 & ((v86 >> 31) ^ v86);
  v88 = *(_QWORD *)(v82 + 24 * v87);
  if (v88 != v11)
  {
    v89 = 1;
    while (v88)
    {
      v87 = (v87 + v89) & v83;
      v88 = *(_QWORD *)(v82 + 24 * v87);
      ++v89;
      if (v88 == v11)
        goto LABEL_49;
    }
LABEL_55:
    v100 = a1[3492];
    if (!v100)
      goto LABEL_72;
    v101 = *(_DWORD *)(v100 - 8);
    v102 = (v11 + ~(a2 << 32)) ^ ((v11 + ~(a2 << 32)) >> 22);
    v103 = 9 * ((v102 + ~(v102 << 13)) ^ ((v102 + ~(v102 << 13)) >> 8));
    v104 = (v103 ^ (v103 >> 15)) + ~((v103 ^ (v103 >> 15)) << 27);
    v105 = v101 & ((v104 >> 31) ^ v104);
    v106 = *(_QWORD *)(v100 + 24 * v105);
    if (v106 != v11)
    {
      v107 = 1;
      while (v106)
      {
        v105 = (v105 + v107) & v101;
        v106 = *(_QWORD *)(v100 + 24 * v105);
        ++v107;
        if (v106 == v11)
          goto LABEL_60;
      }
      goto LABEL_72;
    }
LABEL_60:
    v108 = v100 + 24 * v105;
    v109 = *(JSC::B3::Value **)(v108 + 8);
    if (!v109)
    {
LABEL_72:
      v134 = (a2 >> 50) & 0x3F;
      if ((_DWORD)v134 && (v134 > 0x34 || ((1 << v134) & 0x12400001800284) == 0))
      {
        *((_BYTE *)a1 + 28112) = 0;
      }
      return (JSC::B3::Value *)a1[3457];
    }
    v110 = *(_QWORD *)(v108 + 16);
    v111 = a1[3521];
    if (v111 == v110)
    {
LABEL_66:
      v119 = a1[3519];
      v120 = *(_QWORD *)(v119 + 8);
      v121 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v122 = (uint64_t *)(v120 + 24);
      v123 = (uint64_t *)(v120 + 8);
      if ((a2 & 1) != 0)
        v123 = v122;
      v124 = *v123;
      v125 = *v123 + 32 * v121;
      v126 = *(_DWORD *)(v119 + 88);
      v128 = (unsigned int *)(v125 + 20);
      v127 = *(_DWORD *)(v125 + 20);
      if (v126 != v127)
      {
        if ((*(_QWORD *)(v125 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v127 ^ v126) >= 2)
          {
            v137 = *(_QWORD *)v125;
            if (*(_QWORD *)v125 != 4)
            {
              *(_QWORD *)v125 = v137 | 2;
              v142 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v137 & 1) != 0)
              {
                v152 = 2 * *v142;
                while (v152 * 4)
                {
                  v153 = *(_QWORD *)&v142[v152];
                  if ((*(_BYTE *)(v153 + 19) & 0xC) == 0)
                  {
                    v154 = *(_QWORD *)(v153 + 96);
                    v155 = (v154 & 1) != 0 ? (v154 >> 1) & 3 : *(unsigned __int8 *)(v154 + 4);
                    v152 -= 2;
                    if (v155 != 2)
                      continue;
                  }
                  v160 = v125;
                  WTF::fastFree((unint64_t)v142, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
                  v125 = v160;
                  goto LABEL_117;
                }
              }
              else if (v142)
              {
                if ((*((_BYTE *)v142 + 19) & 0xC) != 0
                  || ((v143 = *((_QWORD *)v142 + 12), (v143 & 1) != 0)
                    ? (v144 = (v143 >> 1) & 3)
                    : (v144 = *(unsigned __int8 *)(v143 + 4)),
                      v144 == 2))
                {
LABEL_117:
                  *(_QWORD *)v125 = 4;
                }
              }
            }
            *(_DWORD *)(v124 + 32 * v121 + 16) = -21020677;
          }
          if ((v126 & 1) != 0)
            *(_QWORD *)v125 &= ~2uLL;
        }
        *v128 = v126;
      }
      if ((*(_QWORD *)(v125 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0)
      {
        v129 = JSC::FTL::Output::below((JSC::FTL::Output *)(a1 + 3455), v109, (JSC::B3::Value *)a1[3487]);
      }
      v26 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 3455), v109);
      v133 = a1[3521];
      v162.n128_u64[0] = (unint64_t)v26;
      v162.n128_u64[1] = v133;
      v163 = v11;
      WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v161, a1 + 3489, (uint64_t *)&v163, &v162);
      return v26;
    }
    v112 = *(_QWORD *)(*a1 + 784);
    v113 = *(unsigned int *)(v111 + 8);
    v114 = *(_DWORD *)(v112 + 20);
    if (v114 <= v113)
    {
      __break(0xC471u);
      JUMPOUT(0x197D6375CLL);
    }
    v115 = *(unsigned int *)(v110 + 8);
    if (v114 > v115)
    {
      v116 = *(_QWORD *)(v112 + 8);
      v117 = v116 + 32 * v113;
      v118 = v116 + 32 * v115;
      if (*(_DWORD *)(v117 + 24) <= *(_DWORD *)(v118 + 24) || *(_DWORD *)(v117 + 28) >= *(_DWORD *)(v118 + 28))
        goto LABEL_72;
      goto LABEL_66;
    }
LABEL_169:
    __break(0xC471u);
    JUMPOUT(0x197D6372CLL);
  }
LABEL_49:
  v90 = v82 + 24 * v87;
  v28 = *(void **)(v90 + 8);
  if (!v28)
    goto LABEL_55;
  v91 = *(_QWORD *)(v90 + 16);
  v92 = a1[3521];
  if (v92 != v91)
  {
    v93 = *(_QWORD *)(*a1 + 784);
    v94 = *(unsigned int *)(v92 + 8);
    v95 = *(_DWORD *)(v93 + 20);
    if (v95 <= v94)
    {
      __break(0xC471u);
      JUMPOUT(0x197D6374CLL);
    }
    v96 = *(unsigned int *)(v91 + 8);
    if (v95 <= v96)
    {
      __break(0xC471u);
      JUMPOUT(0x197D63754);
    }
    v97 = *(_QWORD *)(v93 + 8);
    v98 = v97 + 32 * v94;
    v99 = v97 + 32 * v96;
    if (*(_DWORD *)(v98 + 24) <= *(_DWORD *)(v99 + 24) || *(_DWORD *)(v98 + 28) >= *(_DWORD *)(v99 + 28))
      goto LABEL_55;
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowBoolean(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unint64_t v11;
  unsigned int v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  JSC::B3::Value *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int *v84;
  int v85;
  JSC::B3::Value *v86;
  JSC::B3::Value *v87;
  JSC::B3::Value *v88;
  JSC::B3::Value *v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  int8x8_t v93;
  JSC::B3::Value *v94;
  JSC::B3::Value *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  _BYTE v123[24];
  __n128 v124;
  unint64_t v125;

  v11 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v12 = *(unsigned __int16 *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v12 > 0xB5)
  {
    if (v12 == 182)
      goto LABEL_3;
    if (v12 == 355 || v12 == 348)
    {
      v13 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
LABEL_4:
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(a1 + 28152);
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v18 = (uint64_t *)(v16 + 24);
      v19 = (uint64_t *)(v16 + 8);
      if ((a2 & 1) != 0)
        v19 = v18;
      v20 = *v19;
      v21 = *v19 + 32 * v17;
      v22 = *(_DWORD *)(v15 + 88);
      v23 = *(_DWORD *)(v21 + 20);
      if (v22 != v23)
      {
        if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v23 ^ v22) >= 2)
          {
            v101 = *(_QWORD *)v21;
            if (*(_QWORD *)v21 != 4)
            {
              *(_QWORD *)v21 = v101 | 2;
              v108 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v101 & 1) != 0)
              {
                v119 = 2 * *v108;
                while (v119 * 4)
                {
                  v120 = *(_QWORD *)&v108[v119];
                  if ((*(_BYTE *)(v120 + 19) & 0xC) == 0)
                  {
                    v121 = *(_QWORD *)(v120 + 96);
                    v122 = (v121 & 1) != 0 ? (v121 >> 1) & 3 : *(unsigned __int8 *)(v121 + 4);
                    v119 -= 2;
                    if (v122 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v108, (void *)a2, a3, a4, a5, a6, a7, a8);
                  goto LABEL_100;
                }
              }
              else if (v108)
              {
                if ((*((_BYTE *)v108 + 19) & 0xC) != 0
                  || ((v109 = *((_QWORD *)v108 + 12), (v109 & 1) != 0)
                    ? (v110 = (v109 >> 1) & 3)
                    : (v110 = *(unsigned __int8 *)(v109 + 4)),
                      v110 == 2))
                {
LABEL_100:
                  *(_QWORD *)v21 = 4;
                }
              }
            }
            *(_DWORD *)(v20 + 32 * v17 + 16) = -21020677;
          }
          if ((v22 & 1) != 0)
            *(_QWORD *)v21 &= ~2uLL;
        }
        *(_DWORD *)(v21 + 20) = v22;
      }
      v24 = *(_QWORD *)(v21 + 8);
      v25 = v24 & 0x10000000000;
      if ((v24 & 0x10000000000) == v24)
      {
LABEL_8:
        if ((v14 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v26 = 27648;
          if (v14 == 7)
            v26 = 27640;
          v27 = *(JSC::B3::Value **)(a1 + v26);
          *((_QWORD *)v27 + 3) = v11;
          return v27;
        }
        goto LABEL_50;
      }
      if ((v24 & 0x2800FFFFFFF7) != 0)
      {
        if (!JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)v21, 0x10000000000uLL, a3, a4, a5, a6, a7, a8))goto LABEL_8;
      }
      else
      {
        *(_QWORD *)(v21 + 8) = v25;
        if (v25)
          goto LABEL_8;
        JSC::DFG::AbstractValue::clear((JSC::DFG::AbstractValue *)v21, a2, a3, a4, a5, a6, a7, a8);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 28152) + 80) = 0;
      goto LABEL_8;
    }
  }
  else if (v12 < 3)
  {
LABEL_3:
    v13 = *(__int128 **)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    goto LABEL_4;
  }
  v28 = *(_QWORD *)(a1 + 27944);
  if (!v28)
    goto LABEL_33;
  v29 = *(_DWORD *)(v28 - 8);
  v30 = (v11 + ~(a2 << 32)) ^ ((v11 + ~(a2 << 32)) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = v29 & ((v32 >> 31) ^ v32);
  v34 = *(_QWORD *)(v28 + 24 * v33);
  if (v34 != v11)
  {
    v35 = 1;
    while (v34)
    {
      v33 = (v33 + v35) & v29;
      v34 = *(_QWORD *)(v28 + 24 * v33);
      ++v35;
      if (v34 == v11)
        goto LABEL_20;
    }
    goto LABEL_33;
  }
LABEL_20:
  v36 = v28 + 24 * v33;
  v27 = *(JSC::B3::Value **)(v36 + 8);
  if (!v27)
    goto LABEL_33;
  v37 = *(_QWORD *)(v36 + 16);
  v38 = *(_QWORD *)(a1 + 28168);
  if (v38 != v37)
  {
    v39 = *(_QWORD *)(*(_QWORD *)a1 + 784);
    v40 = *(unsigned int *)(v38 + 8);
    v41 = *(_DWORD *)(v39 + 20);
    if (v41 <= v40)
      goto LABEL_140;
    v42 = *(unsigned int *)(v37 + 8);
    if (v41 <= v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197D63F94);
    }
    v43 = *(_QWORD *)(v39 + 8);
    v44 = v43 + 32 * v40;
    v45 = v43 + 32 * v42;
    if (*(_DWORD *)(v44 + 24) <= *(_DWORD *)(v45 + 24) || *(_DWORD *)(v44 + 28) >= *(_DWORD *)(v45 + 28))
    {
LABEL_33:
      v57 = *(_QWORD *)(a1 + 27936);
      if (!v57)
        goto LABEL_50;
      v58 = *(_DWORD *)(v57 - 8);
      v59 = (v11 + ~(a2 << 32)) ^ ((v11 + ~(a2 << 32)) >> 22);
      v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
      v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
      v62 = v58 & ((v61 >> 31) ^ v61);
      v63 = *(_QWORD *)(v57 + 24 * v62);
      if (v63 != v11)
      {
        v64 = 1;
        while (v63)
        {
          v62 = (v62 + v64) & v58;
          v63 = *(_QWORD *)(v57 + 24 * v62);
          ++v64;
          if (v63 == v11)
            goto LABEL_38;
        }
        goto LABEL_50;
      }
LABEL_38:
      v65 = v57 + 24 * v62;
      v66 = *(JSC::B3::Value **)(v65 + 8);
      if (!v66)
        goto LABEL_50;
      v67 = *(_QWORD *)(v65 + 16);
      v68 = *(_QWORD *)(a1 + 28168);
      if (v68 == v67)
      {
LABEL_44:
        v76 = *(_QWORD *)(a1 + 28152);
        v77 = *(_QWORD *)(v76 + 8);
        v78 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v79 = (uint64_t *)(v77 + 24);
        v80 = (uint64_t *)(v77 + 8);
        if ((a2 & 1) != 0)
          v80 = v79;
        v81 = *v80;
        v82 = *v80 + 32 * v78;
        v83 = *(_DWORD *)(v76 + 88);
        v84 = (unsigned int *)(v82 + 20);
        v85 = *(_DWORD *)(v82 + 20);
        if (v83 != v85)
        {
          if ((*(_QWORD *)(v82 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v85 ^ v83) >= 2)
            {
              v100 = *(_QWORD *)v82;
              if (*(_QWORD *)v82 != 4)
              {
                *(_QWORD *)v82 = v100 | 2;
                v105 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v100 & 1) != 0)
                {
                  v115 = 2 * *v105;
                  while (v115 * 4)
                  {
                    v116 = *(_QWORD *)&v105[v115];
                    if ((*(_BYTE *)(v116 + 19) & 0xC) == 0)
                    {
                      v117 = *(_QWORD *)(v116 + 96);
                      v118 = (v117 & 1) != 0 ? (v117 >> 1) & 3 : *(unsigned __int8 *)(v117 + 4);
                      v115 -= 2;
                      if (v118 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v105, (void *)a2, a3, a4, a5, a6, a7, a8);
                    v84 = (unsigned int *)(v82 + 20);
                    goto LABEL_93;
                  }
                }
                else if (v105)
                {
                  if ((*((_BYTE *)v105 + 19) & 0xC) != 0
                    || ((v106 = *((_QWORD *)v105 + 12), (v106 & 1) != 0)
                      ? (v107 = (v106 >> 1) & 3)
                      : (v107 = *(unsigned __int8 *)(v106 + 4)),
                        v107 == 2))
                  {
LABEL_93:
                    *(_QWORD *)v82 = 4;
                  }
                }
              }
              *(_DWORD *)(v81 + 32 * v78 + 16) = -21020677;
            }
            if ((v83 & 1) != 0)
              *(_QWORD *)v82 &= ~2uLL;
          }
          *v84 = v83;
        }
        if ((*(_QWORD *)(v82 + 8) & 0xFFFFFEFFFFFFFFFFLL) != 0)
        {
          v86 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 6);
          v87 = JSC::FTL::Output::bitXor((JSC::FTL::Output *)(a1 + 27640), v66, v86);
          v88 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), -2);
          v89 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v87, v88);
          v90 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v89);
        }
        v94 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 1);
        v95 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v66, v94);
        v27 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v95);
        v96 = *(_QWORD *)(a1 + 28168);
        v124.n128_u64[0] = (unint64_t)v27;
        v124.n128_u64[1] = v96;
        v125 = v11;
        WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v123, (uint64_t *)(a1 + 27944), (uint64_t *)&v125, &v124);
        return v27;
      }
      v69 = *(_QWORD *)(*(_QWORD *)a1 + 784);
      v70 = *(unsigned int *)(v68 + 8);
      v71 = *(_DWORD *)(v69 + 20);
      if (v71 <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x197D63F9CLL);
      }
      v72 = *(unsigned int *)(v67 + 8);
      if (v71 > v72)
      {
        v73 = *(_QWORD *)(v69 + 8);
        v74 = v73 + 32 * v70;
        v75 = v73 + 32 * v72;
        if (*(_DWORD *)(v74 + 24) > *(_DWORD *)(v75 + 24) && *(_DWORD *)(v74 + 28) < *(_DWORD *)(v75 + 28))
          goto LABEL_44;
LABEL_50:
        v97 = (a2 >> 50) & 0x3F;
        if ((_DWORD)v97 && (v97 > 0x34 || ((1 << v97) & 0x12400001800284) == 0))
        {
          *(_BYTE *)(a1 + 28112) = 0;
        }
        return *(JSC::B3::Value **)(a1 + 27648);
      }
LABEL_140:
      __break(0xC471u);
      JUMPOUT(0x197D63F8CLL);
    }
  }
  v46 = *(_QWORD *)(a1 + 28152);
  v47 = *(_QWORD *)(v46 + 8);
  v48 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v49 = (uint64_t *)(v47 + 24);
  v50 = (uint64_t *)(v47 + 8);
  if ((a2 & 1) != 0)
    v50 = v49;
  v51 = *v50;
  v52 = *v50 + 32 * v48;
  v53 = *(_DWORD *)(v46 + 88);
  v54 = *(_DWORD *)(v52 + 20);
  if (v53 != v54)
  {
    if ((*(_QWORD *)(v52 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v54 ^ v53) >= 2)
      {
        v99 = *(_QWORD *)v52;
        if (*(_QWORD *)v52 != 4)
        {
          *(_QWORD *)v52 = v99 | 2;
          v102 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v99 & 1) != 0)
          {
            v111 = 2 * *v102;
            while (v111 * 4)
            {
              v112 = *(_QWORD *)&v102[v111];
              if ((*(_BYTE *)(v112 + 19) & 0xC) == 0)
              {
                v113 = *(_QWORD *)(v112 + 96);
                v114 = (v113 & 1) != 0 ? (v113 >> 1) & 3 : *(unsigned __int8 *)(v113 + 4);
                v111 -= 2;
                if (v114 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v102, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_86;
            }
          }
          else if (v102)
          {
            if ((*((_BYTE *)v102 + 19) & 0xC) != 0
              || ((v103 = *((_QWORD *)v102 + 12), (v103 & 1) != 0)
                ? (v104 = (v103 >> 1) & 3)
                : (v104 = *(unsigned __int8 *)(v103 + 4)),
                  v104 == 2))
            {
LABEL_86:
              *(_QWORD *)v52 = 4;
            }
          }
        }
        *(_DWORD *)(v51 + 32 * v48 + 16) = -21020677;
      }
      if ((v53 & 1) != 0)
        *(_QWORD *)v52 &= ~2uLL;
    }
    *(_DWORD *)(v52 + 20) = v53;
  }
  v55 = *(_QWORD *)(v52 + 8);
  v56 = v55 & 0x10000000000;
  if ((v55 & 0x10000000000) != v55)
  {
    if ((v55 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)v52, 0x10000000000uLL, a3, a4, a5, a6, a7, a8))return v27;
    }
    else
    {
      *(_QWORD *)(v52 + 8) = v56;
      if (v56)
        return v27;
      JSC::DFG::AbstractValue::clear((JSC::DFG::AbstractValue *)v52, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 28152) + 80) = 0;
  }
  return v27;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowCell(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int *v40;
  int v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  JSC::DFG::AbstractValue *v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  unsigned int v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v11 = (a2 >> 50) & 0x3F;
  if ((_DWORD)a3 != 1
    && (v11 - 8) >= 2
    && (v11 > 0x26 || ((1 << v11) & 0x7FEAB7F800) == 0))
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5152, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowCell(Edge, OperandSpeculationMode)", "mode == ManualOperandSpeculation || DFG::isCell(edge.useKind())");
    __break(0xC471u);
    goto LABEL_91;
  }
  v12 = a2 & 0xFF00FFFFFFFFFFFFLL;
  if (!*(_WORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12))
  {
    v47 = *(uint64_t **)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v48 = *(_QWORD *)(a1 + 28152);
    v49 = *(_QWORD *)(v48 + 8);
    v50 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v51 = (uint64_t *)(v49 + 24);
    v52 = (uint64_t *)(v49 + 8);
    if ((a2 & 1) != 0)
      v52 = v51;
    v53 = *v52;
    v54 = *v52 + 32 * v50;
    v55 = (JSC::DFG::AbstractValue *)v54;
    v56 = *(_DWORD *)(v48 + 88);
    v57 = (unsigned int *)(v54 + 20);
    v58 = *(_DWORD *)(v54 + 20);
    if (v56 != v58)
    {
      if ((*(_QWORD *)(v54 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v58 ^ v56) >= 2)
        {
          v65 = *(_QWORD *)v54;
          if (*(_QWORD *)v54 != 4)
          {
            *(_QWORD *)v54 = v65 | 2;
            v69 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v65 & 1) != 0)
            {
              v76 = 2 * *v69;
              v84 = v54;
              v86 = v50;
              v81 = v56;
              v82 = (unsigned int *)(v54 + 20);
              v87 = v53;
              while (v76 * 4)
              {
                v77 = *(_QWORD *)&v69[v76];
                if ((*(_BYTE *)(v77 + 19) & 0xC) == 0)
                {
                  v78 = *(_QWORD *)(v77 + 96);
                  v79 = (v78 & 1) != 0 ? (v78 >> 1) & 3 : *(unsigned __int8 *)(v78 + 4);
                  v76 -= 2;
                  v80 = v79 == 2;
                  v54 = v84;
                  v50 = v86;
                  v56 = v81;
                  v57 = v82;
                  v53 = v87;
                  if (!v80)
                    continue;
                }
                WTF::fastFree((unint64_t)v69, (void *)a2, a3, a4, a5, a6, a7, a8);
                v50 = v86;
                v53 = v87;
                v57 = v82;
                v54 = v84;
                v56 = v81;
                goto LABEL_65;
              }
            }
            else if (v69)
            {
              if ((*((_BYTE *)v69 + 19) & 0xC) != 0
                || ((v70 = *((_QWORD *)v69 + 12), (v70 & 1) != 0)
                  ? (v71 = (v70 >> 1) & 3)
                  : (v71 = *(unsigned __int8 *)(v70 + 4)),
                    v71 == 2))
              {
LABEL_65:
                *(_QWORD *)v55 = 4;
              }
            }
          }
          *(_DWORD *)(v53 + 32 * v50 + 16) = -21020677;
        }
        if ((v56 & 1) != 0)
          *(_QWORD *)v55 &= ~2uLL;
      }
      *v57 = v56;
    }
    v61 = *(_QWORD *)(v54 + 8);
    v59 = (uint64_t *)(v54 + 8);
    v60 = v61;
    v62 = v61 & 0x2C00FFFFFFF7;
    if ((v61 & 0x2C00FFFFFFF7) == v61)
    {
LABEL_24:
      if ((*v47 & 0xFFFE000000000002) == 0)
      {
        v22 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), *v47);
        *((_QWORD *)v22 + 3) = v12;
        return v22;
      }
      goto LABEL_26;
    }
    if ((v60 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v55, 0x2C00FFFFFFF7uLL, a3, a4, a5, a6, a7, a8))
        goto LABEL_24;
    }
    else
    {
      *v59 = v62;
      if (v62)
        goto LABEL_24;
      JSC::DFG::AbstractValue::clear(v55, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 28152) + 80) = 0;
    goto LABEL_24;
  }
  v13 = *(_QWORD *)(a1 + 27936);
  if (!v13)
  {
LABEL_26:
    if ((_DWORD)v11 && (v11 > 0x34 || ((1 << v11) & 0x12400001800284) == 0))
    {
      *(_BYTE *)(a1 + 28112) = 0;
    }
    return *(JSC::B3::Value **)(a1 + 27680);
  }
  v14 = *(_DWORD *)(v13 - 8);
  v15 = (v12 + ~(a2 << 32)) ^ ((v12 + ~(a2 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = *(_QWORD *)(v13 + 24 * v18);
  if (v19 != v12)
  {
    v20 = 1;
    while (v19)
    {
      v18 = (v18 + v20) & v14;
      v19 = *(_QWORD *)(v13 + 24 * v18);
      ++v20;
      if (v19 == v12)
        goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_9:
  v21 = v13 + 24 * v18;
  v22 = *(JSC::B3::Value **)(v21 + 8);
  if (!v22)
    goto LABEL_26;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = *(_QWORD *)(a1 + 28168);
  if (v24 != v23)
  {
    v25 = *(_QWORD *)(*(_QWORD *)a1 + 784);
    v26 = *(unsigned int *)(v24 + 8);
    v27 = *(_DWORD *)(v25 + 20);
    if (v27 <= v26)
    {
      __break(0xC471u);
      JUMPOUT(0x197D64540);
    }
    v28 = *(unsigned int *)(v23 + 8);
    if (v27 <= v28)
    {
      __break(0xC471u);
LABEL_91:
      JUMPOUT(0x197D64284);
    }
    v29 = *(_QWORD *)(v25 + 8);
    v30 = v29 + 32 * v26;
    v31 = v29 + 32 * v28;
    if (*(_DWORD *)(v30 + 24) <= *(_DWORD *)(v31 + 24) || *(_DWORD *)(v30 + 28) >= *(_DWORD *)(v31 + 28))
      goto LABEL_26;
  }
  v32 = *(_QWORD *)(a1 + 28152);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v35 = (uint64_t *)(v33 + 24);
  v36 = (uint64_t *)(v33 + 8);
  if ((a2 & 1) != 0)
    v36 = v35;
  v37 = *v36;
  v38 = (uint64_t *)(v37 + 32 * v34);
  v39 = *(_DWORD *)(v32 + 88);
  v40 = (unsigned int *)v38 + 5;
  v41 = *((_DWORD *)v38 + 5);
  if (v39 != v41)
  {
    if ((v38[1] & 0x2800FFFFFFF7) != 0)
    {
      if ((v41 ^ v39) >= 2)
      {
        v64 = *v38;
        if (*v38 != 4)
        {
          *v38 = v64 | 2;
          v66 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v64 & 1) != 0)
          {
            v72 = 2 * *v66;
            while (v72 * 4)
            {
              v73 = *(_QWORD *)&v66[v72];
              if ((*(_BYTE *)(v73 + 19) & 0xC) == 0)
              {
                v74 = *(_QWORD *)(v73 + 96);
                v75 = (v74 & 1) != 0 ? (v74 >> 1) & 3 : *(unsigned __int8 *)(v74 + 4);
                v72 -= 2;
                if (v75 != 2)
                  continue;
              }
              v85 = v37;
              v83 = v34;
              WTF::fastFree((unint64_t)v66, (void *)a2, a3, a4, a5, a6, a7, a8);
              v34 = v83;
              v37 = v85;
              v40 = (unsigned int *)v38 + 5;
              goto LABEL_58;
            }
          }
          else if (v66)
          {
            if ((*((_BYTE *)v66 + 19) & 0xC) != 0
              || ((v67 = *((_QWORD *)v66 + 12), (v67 & 1) != 0)
                ? (v68 = (v67 >> 1) & 3)
                : (v68 = *(unsigned __int8 *)(v67 + 4)),
                  v68 == 2))
            {
LABEL_58:
              *v38 = 4;
            }
          }
        }
        *(_DWORD *)(v37 + 32 * v34 + 16) = -21020677;
      }
      if ((v39 & 1) != 0)
        *v38 &= ~2uLL;
    }
    *v40 = v39;
  }
  if ((v38[1] & 0xFFFFD3FF00000008) != 0)
  {
    v42 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v22, *(JSC::B3::Value **)(a1 + 27904));
    v43 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v42);
  }
  return v22;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::simulatedTypeCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  JSC::DFG::AbstractValue *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(_QWORD *)(a1 + 28152);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = (_QWORD *)(v10 + 24);
  v12 = (_QWORD *)(v10 + 8);
  if ((a2 & 1) != 0)
    v12 = v11;
  v13 = *v12 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (JSC::DFG::AbstractValue *)v13;
  v15 = *(unsigned int *)(v9 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v13 + 20))
  {
    if ((*(_QWORD *)(v13 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v13, (void *)v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v13 + 20) = v15;
  }
  v18 = *(_QWORD *)(v13 + 8);
  v17 = (uint64_t *)(v13 + 8);
  v16 = v18;
  v19 = v18 & 0x300000000;
  if ((v18 & 0x300000000) != v18)
  {
    if ((v16 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v14, 0x300000000uLL, a3, a4, a5, a6, a7, a8))
        return;
    }
    else
    {
      *v17 = v19;
      if (v19)
        return;
      JSC::DFG::AbstractValue::clear(v14, v15, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 28152) + 80) = 0;
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::provenValue(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;

  v8 = *(_QWORD *)(a1 + 28040);
  v9 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v10 = (uint64_t *)(v8 + 24);
  v11 = (uint64_t *)(v8 + 8);
  if ((a2 & 1) != 0)
    v11 = v10;
  v12 = *v11;
  v13 = *v11 + 32 * v9;
  v14 = *(_DWORD *)(a1 + 28120);
  v15 = *(_DWORD *)(v13 + 20);
  if (v14 != v15)
  {
    if ((*(_QWORD *)(v13 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v15 ^ v14) >= 2)
      {
        v25 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 != 4)
        {
          *(_QWORD *)v13 = v25 | 2;
          v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v25 & 1) != 0)
          {
            v29 = 2 * *v26;
            while (v29 * 4)
            {
              v30 = *(_QWORD *)&v26[v29];
              if ((*(_BYTE *)(v30 + 19) & 0xC) == 0)
              {
                v31 = *(_QWORD *)(v30 + 96);
                v32 = (v31 & 1) != 0 ? (v31 >> 1) & 3 : *(unsigned __int8 *)(v31 + 4);
                v29 -= 2;
                if (v32 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v26, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_25;
            }
          }
          else if (v26)
          {
            if ((*((_BYTE *)v26 + 19) & 0xC) != 0
              || ((v27 = *((_QWORD *)v26 + 12), (v27 & 1) != 0)
                ? (v28 = (v27 >> 1) & 3)
                : (v28 = *(unsigned __int8 *)(v27 + 4)),
                  v28 == 2))
            {
LABEL_25:
              *(_QWORD *)v13 = 4;
            }
          }
        }
        *(_DWORD *)(v12 + 32 * v9 + 16) = -21020677;
      }
      if ((v14 & 1) != 0)
        *(_QWORD *)v13 &= ~2uLL;
    }
    *(_DWORD *)(v13 + 20) = v14;
  }
  v33 = 0;
  v16 = *(_QWORD *)v13;
  if ((*(_QWORD *)v13 & 1) == 0 || v16 == 4)
  {
    v17 = v16 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v33, (_QWORD *)v13);
    v17 = v33;
    v16 = *(_QWORD *)v13;
  }
  v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
  v19 = v17 | 2;
  if ((v16 & 2) != 0)
    v20 = v19;
  else
    v20 = v18;
  v33 = v20;
  v21 = v12 + 32 * v9;
  v22 = *(_OWORD *)(v21 + 8);
  v23 = *(_QWORD *)(v21 + 24);
  v35 = v23;
  v34 = v22;
  if ((v20 & 1) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
  return v23;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::strictInt52ToInt32(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3)
{
  JSC::FTL::Output *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  char **v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  unint64_t v35;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD v47[3];
  __n128 v48;
  unint64_t v49;

  v6 = (JSC::FTL::Output *)(a1 + 3455);
  v14 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 3455), a3);
  v15 = a1[3519];
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v18 = (uint64_t *)(v16 + 24);
  v19 = (uint64_t *)(v16 + 8);
  if ((a2 & 1) != 0)
    v19 = v18;
  v20 = *v19;
  v21 = *v19 + 32 * v17;
  v22 = *(_DWORD *)(v15 + 88);
  v23 = *(_DWORD *)(v21 + 20);
  if (v22 != v23)
  {
    if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v23 ^ v22) >= 2)
      {
        v37 = *(_QWORD *)v21;
        if (*(_QWORD *)v21 != 4)
        {
          *(_QWORD *)v21 = v37 | 2;
          v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v37 & 1) != 0)
          {
            v43 = 2 * *v38;
            while (v43 * 4)
            {
              v44 = *(_QWORD *)&v38[v43];
              if ((*(_BYTE *)(v44 + 19) & 0xC) == 0)
              {
                v45 = *(_QWORD *)(v44 + 96);
                v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
                v43 -= 2;
                if (v46 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v38, v7, v8, v9, v10, v11, v12, v13);
              goto LABEL_37;
            }
          }
          else if (v38)
          {
            if ((*((_BYTE *)v38 + 19) & 0xC) != 0
              || ((v39 = *((_QWORD *)v38 + 12), (v39 & 1) != 0)
                ? (v40 = (v39 >> 1) & 3)
                : (v40 = *(unsigned __int8 *)(v39 + 4)),
                  v40 == 2))
            {
LABEL_37:
              *(_QWORD *)v21 = 4;
            }
          }
        }
        *(_DWORD *)(v20 + 32 * v17 + 16) = -21020677;
      }
      if ((v22 & 1) != 0)
        *(_QWORD *)v21 &= ~2uLL;
    }
    *(_DWORD *)(v21 + 20) = v22;
  }
  if ((*(_QWORD *)(v21 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0)
  {
    v24 = JSC::FTL::Output::signExt32To64(v6, v14);
    v25 = (*(uint64_t (**)(uint64_t, JSC::B3::Value *))(*(_QWORD *)v24 + 312))(v24, a3);
    if (v25 == 2)
    {
      v29 = a1[3472];
      v30 = (JSC::B3::Value *)a1[3470];
      v31 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, a1[3471], v24, (uint64_t)a3);
      JSC::B3::Procedure::addValueImpl(v30, v31);
      v47[0] = v31;
      v32 = (char **)(v29 + 8);
      v33 = *(unsigned int *)(v29 + 20);
      if ((_DWORD)v33 == *(_DWORD *)(v29 + 16))
      {
        v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v33 + 1, (unint64_t)v47);
        v33 = *(unsigned int *)(v29 + 20);
        *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v33) = *(_QWORD *)v41;
        v34 = (JSC::B3::Value *)v47[0];
      }
      else
      {
        *(_QWORD *)&(*v32)[8 * v33] = v31;
        v34 = v31;
      }
      *(_DWORD *)(v29 + 20) = v33 + 1;
      *((_QWORD *)v34 + 4) = v29;
    }
    else
    {
      v42 = 3456;
      if (v25 == 1)
        v42 = 3455;
      v31 = (JSC::B3::Value *)a1[v42];
    }
  }
  v35 = a1[3521];
  v48.n128_u64[0] = (unint64_t)v14;
  v48.n128_u64[1] = v35;
  v49 = a2 & 0xFF00FFFFFFFFFFFFLL;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)v47, a1 + 3489, (uint64_t *)&v49, &v48);
  return v14;
}

BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v11 = (uint64_t *)(v9 + 24);
  v12 = (uint64_t *)(v9 + 8);
  if ((a2 & 1) != 0)
    v12 = v11;
  v13 = *v12;
  v14 = *v12 + 32 * v10;
  v15 = *(_DWORD *)(a1 + 88);
  v16 = *(_DWORD *)(v14 + 20);
  if (v15 != v16)
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v16 ^ v15) >= 2)
      {
        v18 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 != 4)
        {
          *(_QWORD *)v14 = v18 | 2;
          v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v18 & 1) != 0)
          {
            v22 = 2 * *v19;
            while (v22 * 4)
            {
              v23 = *(_QWORD *)&v19[v22];
              if ((*(_BYTE *)(v23 + 19) & 0xC) == 0)
              {
                v24 = *(_QWORD *)(v23 + 96);
                v25 = (v24 & 1) != 0 ? (v24 >> 1) & 3 : *(unsigned __int8 *)(v24 + 4);
                v22 -= 2;
                if (v25 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v19, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_18;
            }
          }
          else if (v19)
          {
            if ((*((_BYTE *)v19 + 19) & 0xC) != 0
              || ((v20 = *((_QWORD *)v19 + 12), (v20 & 1) != 0)
                ? (v21 = (v20 >> 1) & 3)
                : (v21 = *(unsigned __int8 *)(v20 + 4)),
                  v21 == 2))
            {
LABEL_18:
              *(_QWORD *)v14 = 4;
            }
          }
        }
        *(_DWORD *)(v13 + 32 * v10 + 16) = -21020677;
      }
      if ((v15 & 1) != 0)
        *(_QWORD *)v14 &= ~2uLL;
    }
    *(_DWORD *)(v14 + 20) = v15;
  }
  return (*(_QWORD *)(v14 + 8) & ~a3) != 0;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::typeCheck(uint64_t a1, void *a2, WTF *a3, uint64_t a4, unint64_t a5, JSC::B3::Value *a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::DFG::AbstractValue *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;

  v19 = *(_QWORD *)(a1 + 28152);
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(unsigned int *)((a4 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v22 = (uint64_t *)(v20 + 24);
  v23 = (uint64_t *)(v20 + 8);
  if ((a4 & 1) != 0)
    v23 = v22;
  v24 = *v23;
  v25 = *v23 + 32 * v21;
  v26 = (JSC::DFG::AbstractValue *)v25;
  v27 = *(_DWORD *)(v19 + 88);
  v28 = *(_DWORD *)(v25 + 20);
  if (v27 != v28)
  {
    if ((*(_QWORD *)(v25 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v28 ^ v27) >= 2)
      {
        v33 = *(_QWORD *)v25;
        if (*(_QWORD *)v25 != 4)
        {
          *(_QWORD *)v25 = v33 | 2;
          v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v33 & 1) != 0)
          {
            v37 = 2 * *v34;
            while (v37 * 4)
            {
              v38 = *(_QWORD *)&v34[v37];
              if ((*(_BYTE *)(v38 + 19) & 0xC) == 0)
              {
                v39 = *(_QWORD *)(v38 + 96);
                v40 = (v39 & 1) != 0 ? (v39 >> 1) & 3 : *(unsigned __int8 *)(v39 + 4);
                v37 -= 2;
                if (v40 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v34, v12, v13, v14, v15, v16, v17, v18);
              goto LABEL_22;
            }
          }
          else if (v34)
          {
            if ((*((_BYTE *)v34 + 19) & 0xC) != 0
              || ((v35 = *((_QWORD *)v34 + 12), (v35 & 1) != 0)
                ? (v36 = (v35 >> 1) & 3)
                : (v36 = *(unsigned __int8 *)(v35 + 4)),
                  v36 == 2))
            {
LABEL_22:
              *(_QWORD *)v25 = 4;
            }
          }
        }
        *(_DWORD *)(v24 + 32 * v21 + 16) = -21020677;
      }
      if ((v27 & 1) != 0)
        *(_QWORD *)v25 &= ~2uLL;
    }
    *(_DWORD *)(v25 + 20) = v27;
  }
  v31 = *(_QWORD *)(v25 + 8);
  v30 = (unint64_t *)(v25 + 8);
  v29 = v31;
  v32 = v31 & a5;
  if ((v31 & a5) != v31)
  {
    if ((v29 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v26, a5, v13, v14, v15, v16, v17, v18))
        return;
    }
    else
    {
      *v30 = v32;
      if (v32)
        return;
      JSC::DFG::AbstractValue::clear(v26, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 28152) + 80) = 0;
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::typeCheckWithoutUpdatingInterpreter(uint64_t a1, void *a2, WTF *a3, uint64_t a4, uint64_t a5, JSC::B3::Value *a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  JSC::DFG::Node *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  JSC::DFG::Node *v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  JSC::DFG::Node *v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  _QWORD v57[2];
  __int16 v58;

  v12 = (char)a2;
  v14 = *(_QWORD *)(a1 + 28152);
  v15 = *(_QWORD *)(v14 + 8);
  v16 = *(unsigned int *)((a4 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v17 = (uint64_t *)(v15 + 24);
  v18 = (uint64_t *)(v15 + 8);
  if ((a4 & 1) != 0)
    v18 = v17;
  v19 = *v18;
  v20 = *v18 + 32 * v16;
  v21 = *(_DWORD *)(v14 + 88);
  v22 = *(_DWORD *)(v20 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v20 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v34 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 != 4)
        {
          *(_QWORD *)v20 = v34 | 2;
          v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v34 & 1) != 0)
          {
            v46 = 2 * *v35;
            while (v46 * 4)
            {
              v47 = *(_QWORD *)&v35[v46];
              if ((*(_BYTE *)(v47 + 19) & 0xC) == 0)
              {
                v48 = *(_QWORD *)(v47 + 96);
                v49 = (v48 & 1) != 0 ? (v48 >> 1) & 3 : *(unsigned __int8 *)(v48 + 4);
                v46 -= 2;
                if (v49 != 2)
                  continue;
              }
              v56 = a6;
              WTF::fastFree((unint64_t)v35, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              a6 = v56;
              goto LABEL_24;
            }
          }
          else if (v35)
          {
            if ((*((_BYTE *)v35 + 19) & 0xC) != 0
              || ((v36 = *((_QWORD *)v35 + 12), (v36 & 1) != 0)
                ? (v37 = (v36 >> 1) & 3)
                : (v37 = *(unsigned __int8 *)(v36 + 4)),
                  v37 == 2))
            {
LABEL_24:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v19 + 32 * v16 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v20 + 20) = v21;
  }
  if ((*(_QWORD *)(v20 + 8) & ~a5) != 0)
  {
    v23 = (JSC::DFG::Node *)(a4 & 0xFF00FFFFFFFFFFFFLL);
    v24 = *(_QWORD *)(a1 + 28192);
    if ((v24 & 1) != 0)
    {
      v38 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || ((v39 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v39 != 0x3FFFFFFF)
          ? (v40 = (_DWORD)v39 == -1)
          : (v40 = 1),
            v40))
      {
        v41 = 2;
      }
      else if (v39 >> 28)
      {
        v50 = v23;
        v51 = a6;
        v52 = WTF::fastMalloc((WTF *)0x10);
        a6 = v51;
        v23 = v50;
        *(_QWORD *)v52 = v38;
        *(_DWORD *)(v52 + 8) = v39;
        v41 = 1;
        v38 = v52;
      }
      else
      {
        v41 = v38;
        v38 = v39 << 36;
      }
      v24 = v38 | v41;
    }
    v57[0] = v24;
    v25 = *(_QWORD *)(a1 + 28200);
    if ((v25 & 1) != 0)
    {
      v42 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      if ((v25 & 2) != 0
        || ((v43 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
          ? (v44 = (_DWORD)v43 == -1)
          : (v44 = 1),
            v44))
      {
        v45 = 2;
      }
      else if (v43 >> 28)
      {
        v53 = v23;
        v54 = a6;
        v55 = WTF::fastMalloc((WTF *)0x10);
        a6 = v54;
        v23 = v53;
        *(_QWORD *)v55 = v42;
        *(_DWORD *)(v55 + 8) = v43;
        v45 = 1;
        v42 = v55;
      }
      else
      {
        v45 = v42;
        v42 = v43 << 36;
      }
      v25 = v42 | v45;
      v26 = ((v42 | v45) & 1) == 0;
    }
    else
    {
      v26 = 1;
    }
    v57[1] = v25;
    v58 = *(_WORD *)(a1 + 28208);
    if (!v26 && (v25 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v25 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
    if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v24 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::unboxBoolean(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v5 = JSC::FTL::Output::bitAnd(v3, a2, v4);
  return JSC::FTL::Output::notZero64(v3, v5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::frozenPointer(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2)
{
  uint64_t result;

  if ((a2 & 0xFFFE000000000002) == 0)
    return JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2);
  result = 118;
  __break(0xC471u);
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setDouble(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3528);
  v2 = *((_QWORD *)this + 3521);
  v5.n128_u64[0] = (unint64_t)a2;
  v5.n128_u64[1] = v2;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v4, (uint64_t *)this + 3495, &v6, &v5).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setInt32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3528);
  v2 = *((_QWORD *)this + 3521);
  v5.n128_u64[0] = (unint64_t)a2;
  v5.n128_u64[1] = v2;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v4, (uint64_t *)this + 3489, &v6, &v5).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setInt52(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3528);
  v2 = *((_QWORD *)this + 3521);
  v5.n128_u64[0] = (unint64_t)a2;
  v5.n128_u64[1] = v2;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v4, (uint64_t *)this + 3491, &v6, &v5).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setBoolean(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3528);
  v2 = *((_QWORD *)this + 3521);
  v5.n128_u64[0] = (unint64_t)a2;
  v5.n128_u64[1] = v2;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v4, (uint64_t *)this + 3493, &v6, &v5).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setJSValue(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3528);
  v2 = *((_QWORD *)this + 3521);
  v5.n128_u64[0] = (unint64_t)a2;
  v5.n128_u64[1] = v2;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v4, (uint64_t *)this + 3492, &v6, &v5).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setStorage(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3528);
  v2 = *((_QWORD *)this + 3521);
  v5.n128_u64[0] = (unint64_t)a2;
  v5.n128_u64[1] = v2;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v4, (uint64_t *)this + 3494, &v6, &v5).n128_u64[0];
  return result;
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setStrictInt52(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3528);
  v2 = *((_QWORD *)this + 3521);
  v5.n128_u64[0] = (unint64_t)a2;
  v5.n128_u64[1] = v2;
  *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v4, (uint64_t *)this + 3490, &v6, &v5).n128_u64[0];
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLazyJSConstant(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575740;
  v5 = *a2;
  *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v4 + 16) = v5;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLazyJSConstant(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a3 + 20))
    JSC::DFG::LazyJSValue::emit(a1 + 16, a2, **(_BYTE **)(a3 + 8) & 0x7F, *(_QWORD *)(**(_QWORD **)(a1 + 32) + 24), a5, a6, a7, a8);
  else
    __break(0xC471u);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::unboxDouble(JSC::B3::Value **this, JSC::B3::Value *a2, JSC::B3::Value **a3)
{
  _QWORD *v4;
  JSC::B3::Value *v5;

  v4 = this + 3455;
  v5 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(this + 3455), a2, this[3487]);
  if (a3)
    *a3 = v5;
  return JSC::FTL::Output::bitCast(v4, (uint64_t)v5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::provenType(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;

  v8 = *(_QWORD *)(a1 + 28040);
  v9 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v10 = (uint64_t *)(v8 + 24);
  v11 = (uint64_t *)(v8 + 8);
  if ((a2 & 1) != 0)
    v11 = v10;
  v12 = *v11;
  v13 = *v11 + 32 * v9;
  v14 = *(_DWORD *)(a1 + 28120);
  v15 = *(_DWORD *)(v13 + 20);
  if (v14 != v15)
  {
    if ((*(_QWORD *)(v13 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v15 ^ v14) >= 2)
      {
        v25 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 != 4)
        {
          *(_QWORD *)v13 = v25 | 2;
          v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v25 & 1) != 0)
          {
            v29 = 2 * *v26;
            while (v29 * 4)
            {
              v30 = *(_QWORD *)&v26[v29];
              if ((*(_BYTE *)(v30 + 19) & 0xC) == 0)
              {
                v31 = *(_QWORD *)(v30 + 96);
                v32 = (v31 & 1) != 0 ? (v31 >> 1) & 3 : *(unsigned __int8 *)(v31 + 4);
                v29 -= 2;
                if (v32 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v26, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_25;
            }
          }
          else if (v26)
          {
            if ((*((_BYTE *)v26 + 19) & 0xC) != 0
              || ((v27 = *((_QWORD *)v26 + 12), (v27 & 1) != 0)
                ? (v28 = (v27 >> 1) & 3)
                : (v28 = *(unsigned __int8 *)(v27 + 4)),
                  v28 == 2))
            {
LABEL_25:
              *(_QWORD *)v13 = 4;
            }
          }
        }
        *(_DWORD *)(v12 + 32 * v9 + 16) = -21020677;
      }
      if ((v14 & 1) != 0)
        *(_QWORD *)v13 &= ~2uLL;
    }
    *(_DWORD *)(v13 + 20) = v14;
  }
  v33 = 0;
  v16 = *(_QWORD *)v13;
  if ((*(_QWORD *)v13 & 1) == 0 || v16 == 4)
  {
    v17 = v16 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v33, (_QWORD *)v13);
    v17 = v33;
    v16 = *(_QWORD *)v13;
  }
  v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
  v19 = v17 | 2;
  if ((v16 & 2) != 0)
    v20 = v19;
  else
    v20 = v18;
  v33 = v20;
  v21 = v12 + 32 * v9;
  v22 = *(_QWORD *)(v21 + 24);
  v34 = *(_OWORD *)(v21 + 8);
  v35 = v22;
  v23 = v34;
  if ((v20 & 1) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
  return v23;
}

uint64_t JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  uint64_t v22;

  v12 = a1[16];
  v11 = a1[17];
  v13 = (JSC::B3::Value *)a1[15];
  v14 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v14 = off_1E357F5F0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_WORD *)(v14 + 12) = 153;
  *(_DWORD *)(v14 + 16) = a2;
  *(_BYTE *)(v14 + 20) = 0;
  *(_QWORD *)(v14 + 24) = v12;
  *(_QWORD *)(v14 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v13, (JSC::B3::Value *)v14);
  v22 = v14;
  v15 = (char **)(v11 + 8);
  v16 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(v11 + 16))
  {
    v21 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v22);
    v16 = *(unsigned int *)(v11 + 20);
    *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v16) = *(_QWORD *)v21;
    v17 = v22;
  }
  else
  {
    *(_QWORD *)&(*v15)[8 * v16] = v14;
    v17 = v14;
  }
  *(_DWORD *)(v11 + 20) = v16 + 1;
  *(_QWORD *)(v17 + 32) = v11;
  if (a3 || a4)
  {
    if ((*(_WORD *)(a3 + 12) & 0xFFF) == 0x98)
      v18 = a3;
    else
      v18 = 0;
    *(_QWORD *)(v18 + 40) = v14;
  }
  if (a5 || a6)
  {
    if ((*(_WORD *)(a5 + 12) & 0xFFF) == 0x98)
      v19 = a5;
    else
      v19 = 0;
    *(_QWORD *)(v19 + 40) = v14;
  }
  return v14;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNumber(JSC::B3::Value **this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  uint64_t v6;
  JSC::B3::Value *v7;

  if ((a3 & 0xFFFFFF00FFFFFFFFLL) != 0)
  {
    if ((a3 & 0xFF00000000) != 0)
    {
LABEL_3:
      v3 = (JSC::FTL::Output *)(this + 3455);
      v4 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(this + 3455), a2, this[3487]);
      return JSC::FTL::Output::notZero64(v3, v4);
    }
    v6 = 3456;
  }
  else
  {
    v6 = 3455;
  }
  v7 = this[v6];
  if (!v7)
    goto LABEL_3;
  return v7;
}

uint64_t JSC::FTL::Output::addIncomingToPhi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2 || a3)
  {
    if ((*(_WORD *)(a2 + 12) & 0xFFF) == 0x98)
      v14 = a2;
    else
      v14 = 0;
    *(_QWORD *)(v14 + 40) = result;
  }
  v15 = a9;
  if (a4 || a5)
  {
    if ((*(_WORD *)(a4 + 12) & 0xFFF) == 0x98)
      v16 = a4;
    else
      v16 = 0;
    *(_QWORD *)(v16 + 40) = result;
  }
  if (a6 || a7)
  {
    if ((*(_WORD *)(a6 + 12) & 0xFFF) == 0x98)
      v17 = a6;
    else
      v17 = 0;
    *(_QWORD *)(v17 + 40) = result;
  }
  if (a9 || a10)
  {
    if ((*(_WORD *)(a9 + 12) & 0xFFF) != 0x98)
      v15 = 0;
    *(_QWORD *)(v15 + 40) = result;
  }
  if (a11 || a12)
  {
    if ((*(_WORD *)(a11 + 12) & 0xFFF) == 0x98)
      v18 = a11;
    else
      v18 = 0;
    *(_QWORD *)(v18 + 40) = result;
  }
  if (a13 || a14)
  {
    if ((*(_WORD *)(a13 + 12) & 0xFFF) == 0x98)
      v19 = a13;
    else
      v19 = 0;
    *(_QWORD *)(v19 + 40) = result;
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::convertDoubleToInt32(JSC::DFG::Node **this, JSC::B3::Value *a2, int a3)
{
  JSC::FTL::Output *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  int8x8_t v10;
  uint64_t v11;
  JSC::B3::BasicBlock *v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::Node *v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = (JSC::FTL::Output *)(this + 3455);
  v7 = (JSC::B3::Value *)JSC::FTL::Output::doubleToInt((JSC::FTL::Output *)(this + 3455), a2);
  v8 = (JSC::B3::Value *)JSC::FTL::Output::intToDouble(v6, v7);
  v9 = JSC::FTL::Output::doubleNotEqualOrUnordered(v6, a2, v8);
  if (a3)
  {
    v11 = JSC::FTL::Output::newBlock(v6);
    v12 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v6);
    v13 = JSC::FTL::Output::logicalNot(v6, v7);
    JSC::FTL::Output::branch(v6, (uint64_t)v13, v11, (uint64_t)v12, NAN, NAN, v14, v15, v16, v17);
    this[3472] = (JSC::DFG::Node *)v11;
    v18 = this[3473];
    this[3473] = v12;
    v19 = JSC::FTL::Output::bitCast(v6, (uint64_t)a2);
    v20 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v6, 0);
    v21 = JSC::FTL::Output::lessThan(v6, v19, v20);
    JSC::FTL::Output::jump(v6, v12, v23, v24, v25, v26, v27, v28);
    this[3472] = v12;
    this[3473] = v18;
  }
  return v7;
}

__n128 JSC::FTL::`anonymous namespace'::LowerDFGToB3::abstractValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 result;

  v9 = *(_QWORD *)(a2 + 28040);
  v10 = *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v11 = (uint64_t *)(v9 + 24);
  v12 = (uint64_t *)(v9 + 8);
  if ((a3 & 1) != 0)
    v12 = v11;
  v13 = *v12;
  v14 = *v12 + 32 * v10;
  v15 = (void *)*(unsigned int *)(a2 + 28120);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  *(_QWORD *)a1 = 0;
  v16 = *(_QWORD *)v14;
  if ((*(_QWORD *)v14 & 1) == 0 || v16 == 4)
  {
    v17 = v16 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)a1, (_QWORD *)v14);
    v17 = *(_QWORD *)a1;
    v16 = *(_QWORD *)v14;
  }
  v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
  v19 = v17 | 2;
  if ((v16 & 2) != 0)
    v20 = v19;
  else
    v20 = v18;
  *(_QWORD *)a1 = v20;
  v21 = v13 + 32 * v10;
  result = *(__n128 *)(v21 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v21 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::purifyNaN(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  uint64_t v5;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = JSC::FTL::Output::doubleEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2, a2);
  v5 = JSC::FTL::Output::constDouble(v3, NAN);
  return JSC::FTL::Output::select(v3, (uint64_t)v4, (uint64_t)a2, v5, 0);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::jsValueToStrictInt52(uint64_t a1, unint64_t a2, JSC::B3::Value *a3)
{
  JSC::FTL::Output *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::B3::BasicBlock *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  int8x8_t v41;
  JSC::B3::Value *v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = (JSC::FTL::Output *)(a1 + 27640);
  v7 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v8 = JSC::FTL::Output::newBlock(v6);
  v9 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v6);
  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x300000000, v10, v11, v12, v13, v14))
  {
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0xFFFFFFFCFFFFFFFFLL, v15, v16, v17, v18, v19))
    {
      v20 = JSC::FTL::Output::below(v6, a3, *(JSC::B3::Value **)(a1 + 27896));
    }
    else
    {
      v20 = *(JSC::B3::Value **)v6;
    }
  }
  else
  {
    v20 = *(JSC::B3::Value **)(a1 + 27648);
  }
  JSC::FTL::Output::branch(v6, (uint64_t)v20, v8, v7, NAN, NAN, v16, v17, v18, v19);
  *(_QWORD *)(a1 + 27776) = v7;
  v21 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v8;
  v22 = JSC::FTL::Output::castToInt32(v6, a3);
  v23 = (JSC::B3::Value *)JSC::FTL::Output::signExt32To64(v6, v22);
  v24 = JSC::FTL::Output::anchor(v6, v23);
  v26 = v25;
  JSC::FTL::Output::jump(v6, v9, v27, v28, v29, v30, v31, v32);
  *(_QWORD *)(a1 + 27776) = v8;
  *(_QWORD *)(a1 + 27784) = v9;
  v44 = JSC::FTL::Output::anchor(v6, (JSC::B3::Value *)v43);
  v46 = v45;
  JSC::FTL::Output::jump(v6, v9, v47, v48, v49, v50, v51, v52);
  *(_QWORD *)(a1 + 27776) = v9;
  *(_QWORD *)(a1 + 27784) = v21;
  JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filter<JSC::DFG::Edge>(a1 + 28128, a2, 0x1300000000uLL, v53, v54, v55, v56, v57);
  return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v6, 2, v24, v26, v44, v46);
}

