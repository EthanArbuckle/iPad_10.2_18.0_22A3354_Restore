uint64_t *JSC::ObjectPropertyConditionSet::slotBaseCondition@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *this;
  if (*this)
    v3 = *this + 8;
  else
    v3 = 0;
  if (v2)
    v4 = *this + 8 + 24 * *(unsigned int *)(v2 + 4);
  else
    v4 = 0;
  if (v3 == v4)
    goto LABEL_15;
  v5 = 0;
  do
  {
    v6 = *(unsigned __int8 *)(v3 + 14);
    if (v6 < 2 || v6 - 5 <= 1)
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      a2[2] = *(_QWORD *)(v3 + 16);
      ++v5;
    }
    v3 += 24;
  }
  while (v3 != v4);
  if (v5 != 1)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x1981E8944);
  }
  return this;
}

void JSC::ObjectPropertyConditionSet::mergedWith(JSC::ObjectPropertyConditionSet *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WTF *v14;
  __int128 *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  char *v34;
  __int128 v35;
  WTF *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  __int128 v43;
  WTF *v45;
  _QWORD *v47;
  unint64_t v48;
  _DWORD *v49;
  JSC::ObjectPropertyConditionSet *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::ObjectPropertyConditionSet *v56;
  const JSC::ObjectPropertyConditionSet *v57;
  WTF *v58;
  uint64_t v59;
  _BYTE v60[384];
  WTF *v61;
  int v62;
  unsigned int v63;
  _BYTE v64[384];

  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this && !*(_DWORD *)(v10 + 4) || (v11 = *(_QWORD *)a2) != 0 && !*(_DWORD *)(v11 + 4))
  {
    v47 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v47 = 1;
    *a9 = v47;
  }
  else
  {
    v58 = (WTF *)v60;
    v59 = 16;
    if (v10)
    {
      v12 = *(unsigned int *)(v10 + 4);
      if ((_DWORD)v12)
      {
        if (v12 >= 0x11)
        {
          v57 = (const JSC::ObjectPropertyConditionSet *)a2;
          v50 = this;
          WTF::Vector<JSC::ObjectPropertyCondition,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const>((uint64_t)&v58, (void *)v12, a3, a4, a5, a6, a7, a8);
          v13 = HIDWORD(v59);
          if (v12 < HIDWORD(v59))
          {
            __break(0xC471u);
            JUMPOUT(0x1981E8EA0);
          }
          a2 = (unint64_t)v57;
          v14 = v58;
          this = v50;
        }
        else
        {
          v13 = 0;
          v14 = (WTF *)v60;
        }
        v15 = (__int128 *)(v10 + 8);
        v16 = (char *)v14 + 24 * v13;
        v17 = 24 * v12;
        do
        {
          v18 = *v15;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v15 + 2);
          *(_OWORD *)v16 = v18;
          v16 += 24;
          v15 = (__int128 *)((char *)v15 + 24);
          v17 -= 24;
        }
        while (v17);
        HIDWORD(v59) = v12;
        v11 = *(_QWORD *)a2;
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    if (v11)
      v19 = v11 + 8;
    else
      v19 = 0;
    if (v11)
      v20 = v11 + 8 + 24 * *(unsigned int *)(v11 + 4);
    else
      v20 = 0;
    if (v19 == v20)
    {
LABEL_66:
      if ((_DWORD)v12)
      {
        *a9 = 0;
        v61 = (WTF *)v64;
        v62 = 16;
        v36 = v58;
        if (v58 == (WTF *)v60)
        {
          v37 = 24 * v12;
          memcpy(v64, v60, 24 * ((v37 - 24) / 0x18uLL) + 24);
        }
        else
        {
          v58 = (WTF *)v60;
          v61 = v36;
          v51 = v59;
          LODWORD(v59) = 16;
          v62 = v51;
          v37 = 24 * v12;
        }
        HIDWORD(v59) = 0;
        v63 = v12;
        v38 = (_DWORD *)WTF::fastMalloc((WTF *)(v37 + 8));
        v39 = v61;
        v40 = v63;
        *v38 = 1;
        v38[1] = v12;
        if ((_DWORD)v40)
        {
          v41 = v38 + 2;
          v42 = 24 * v40;
          do
          {
            v43 = *(_OWORD *)v39;
            *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
            *(_OWORD *)v41 = v43;
            v41 += 6;
            v39 = (WTF *)((char *)v39 + 24);
            v42 -= 24;
          }
          while (v42);
          v39 = v61;
        }
        if (v64 != (_BYTE *)v39 && v39 != 0)
        {
          v61 = 0;
          v62 = 0;
          v49 = v38;
          WTF::fastFree((unint64_t)v39, (void *)a2, a3, a4, a5, a6, a7, a8);
          v38 = v49;
        }
      }
      else
      {
        v38 = 0;
      }
      goto LABEL_78;
    }
LABEL_18:
    v21 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v22 = *(_QWORD *)this + 8;
    else
      v22 = 0;
    if (v21)
      v23 = *(_QWORD *)this + 8 + 24 * *(unsigned int *)(v21 + 4);
    else
      v23 = 0;
    if (v22 == v23)
      goto LABEL_64;
    v24 = *(_QWORD *)v19;
    v25 = *(_QWORD *)(v19 + 8);
    v26 = v25 & 0xFFFFFFFFFFFFLL;
    v27 = BYTE6(v25);
    if ((v25 & 0xFFFFFFFFFFFFFFLL) != 0)
    {
      a4 = 0;
      v28 = (unsigned int *)(v22 + 16);
      while (1)
      {
        a2 = a4;
        a3 = *((_QWORD *)v28 - 2);
        a5 = *((_QWORD *)v28 - 1);
        v29 = v28 - 4;
        a6 = BYTE6(a5);
        if (v24 != a3 || v26 != (a5 & 0xFFFFFFFFFFFFLL) || v27 != BYTE6(a5))
          goto LABEL_37;
        a7 = v27 - 2;
        if (v27 >= 2)
        {
          a4 = 1;
          switch(v27)
          {
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
              a7 = *(_QWORD *)v28;
              if (*(_QWORD *)(v19 + 16) == *(_QWORD *)v28)
                goto LABEL_56;
              goto LABEL_37;
            case 6u:
              goto LABEL_52;
            default:
              goto LABEL_108;
          }
        }
        a7 = *v28;
        if (*(_DWORD *)(v19 + 16) == (_DWORD)a7 && (a7 = v28[1], *(_DWORD *)(v19 + 20) == (_DWORD)a7))
        {
LABEL_56:
          a4 = 1;
        }
        else
        {
LABEL_37:
          if ((a5 & 0xFFFFFFFFFFFFFFLL) == 0)
            goto LABEL_107;
          a5 &= 0xFFFFFFFFFFFFuLL;
          if (v26 != a5 || v27 != (_DWORD)a6 || v24 != a3)
            goto LABEL_49;
          if (v27 >= 2)
          {
            a4 = a2;
            switch((int)a2)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 5:
                a6 = *(_QWORD *)v28;
                if (*(_QWORD *)(v19 + 16) == *(_QWORD *)v28)
                  goto LABEL_50;
                goto LABEL_49;
              case 4:
                goto LABEL_52;
              default:
                __break(0xC471u);
                JUMPOUT(0x1981E8DC0);
            }
          }
          a6 = *v28;
          if (*(_DWORD *)(v19 + 16) != (_DWORD)a6 || (a6 = v28[1], *(_DWORD *)(v19 + 20) != (_DWORD)a6))
          {
LABEL_49:
            if (v24 == a3)
            {
              a4 = a2;
              if (v26 == a5)
                goto LABEL_107;
              goto LABEL_52;
            }
          }
LABEL_50:
          a4 = a2;
        }
LABEL_52:
        v28 += 6;
        if (v29 + 6 == (unsigned int *)v23)
        {
          if ((a4 & 1) != 0)
            goto LABEL_61;
LABEL_64:
          if (HIDWORD(v59) == (_DWORD)v59)
          {
            v56 = this;
            v48 = v19;
            WTF::Vector<JSC::ObjectPropertyCondition,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const&>((uint64_t)&v58, v19, a3, a4, a5, a6, a7, a8);
            v19 = v48;
            this = v56;
          }
          else
          {
            v34 = (char *)v58 + 24 * HIDWORD(v59);
            v35 = *(_OWORD *)v19;
            *((_QWORD *)v34 + 2) = *(_QWORD *)(v19 + 16);
            *(_OWORD *)v34 = v35;
            ++HIDWORD(v59);
          }
LABEL_61:
          v19 += 24;
          if (v19 == v20)
          {
            LODWORD(v12) = HIDWORD(v59);
            goto LABEL_66;
          }
          goto LABEL_18;
        }
      }
    }
    v52 = v22 + 16;
    while (1)
    {
      v53 = v52 - 16;
      if (v24 != *(_QWORD *)(v52 - 16))
        break;
      v54 = *(_QWORD *)(v52 - 8);
      if (v26 != (v54 & 0xFFFFFFFFFFFFLL) || v27 != BYTE6(v54))
        break;
      a2 = v27 - 2;
      if (v27 >= 2)
      {
        switch(v27)
        {
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
            a2 = *(_QWORD *)(v19 + 16);
            a3 = *(_QWORD *)v52;
            if (a2 != *(_QWORD *)v52)
              goto LABEL_107;
            goto LABEL_103;
          case 6u:
            goto LABEL_103;
          default:
LABEL_108:
            __break(0xC471u);
            JUMPOUT(0x1981E8E98);
        }
      }
      if (*(_DWORD *)(v19 + 16) != *(_DWORD *)v52)
        break;
      a2 = *(unsigned int *)(v19 + 20);
      a3 = *(unsigned int *)(v52 + 4);
      if ((_DWORD)a2 != (_DWORD)a3)
        break;
LABEL_103:
      v52 += 24;
      if (v53 + 24 == v23)
        goto LABEL_61;
    }
LABEL_107:
    v38 = (_DWORD *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v38 = 1;
LABEL_78:
    *a9 = v38;
    v45 = v58;
    if (v60 != (_BYTE *)v58 && v58 != 0)
    {
      v58 = 0;
      LODWORD(v59) = 0;
      WTF::fastFree((unint64_t)v45, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::ObjectPropertyConditionSet::areStillLive(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;

  v2 = *a1;
  if (*a1)
    v3 = (unint64_t *)(*a1 + 8);
  else
    v3 = 0;
  if (v2)
    v4 = *a1 + 8 + 24 * *(unsigned int *)(v2 + 4);
  else
    v4 = 0;
  if (v3 == (unint64_t *)v4)
    return 1;
  LOBYTE(result) = 1;
  do
  {
    v7 = *v3;
    if ((*v3 & 8) != 0)
    {
      LODWORD(v7) = *(_BYTE *)(v7 - 79) & 1;
    }
    else if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
    {
      v7 = (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFC000) + 8 * ((v7 >> 10) & 0xF) + 0x28) >> (v7 >> 4)) & 1;
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if ((_BYTE)result)
      result = v7;
    else
      result = 0;
    v8 = v3[1];
    if ((v8 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v8) <= 7u && ((1 << BYTE6(v3[1])) & 0x9C) != 0)
    {
      v11 = v3[2];
      if (v11)
      {
        if ((v11 & 8) != 0)
        {
          LODWORD(v11) = *(_BYTE *)(v11 - 79) & 1;
        }
        else if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
        {
          v11 = (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFC000) + 8 * ((v11 >> 10) & 0xF) + 0x28) >> (v11 >> 4)) & 1;
        }
        else
        {
          LODWORD(v11) = 0;
        }
        result = result & v11;
        v8 = v3[1];
      }
    }
    if ((v8 & 0xFF000000000000) == 0x5000000000000)
    {
      v6 = v3[2];
      if (v6)
      {
        if ((v6 & 0xFFFE000000000002) == 0)
        {
          if ((v6 & 8) != 0)
          {
            LODWORD(v6) = *(_BYTE *)(v6 - 79) & 1;
          }
          else if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
          {
            v6 = (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFC000) + 8 * ((v6 >> 10) & 0xF) + 0x28) >> (v6 >> 4)) & 1;
          }
          else
          {
            LODWORD(v6) = 0;
          }
          result = result & v6;
        }
      }
    }
    v3 += 3;
  }
  while (v3 != (unint64_t *)v4);
  return result;
}

uint64_t JSC::ObjectPropertyConditionSet::dumpInContext(JSC::ObjectPropertyConditionSet *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  WTF::PrintStream *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v10;
  _QWORD v11[6];
  char v12;

  if (*(_QWORD *)this && !*(_DWORD *)(*(_QWORD *)this + 4))
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v10, "%s", "<invalid>");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  else
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v6, "%s", "[");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    if (*(_QWORD *)this)
    {
      v11[0] = *(_QWORD *)this;
      v11[1] = a3;
      v11[2] = ", ";
      v11[3] = 3;
      v11[4] = "";
      v11[5] = 1;
      v12 = 0;
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::ListDumpInContext<WTF::RefCountedFixedVectorBase<JSC::ObjectPropertyCondition,true>,JSC::DumpContext>::dump((uint64_t)v11, v7);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v8, "%s", "]");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
}

void JSC::generateConditionsForPropertyMiss(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  const JSC::PropertyTable *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned __int8 *p_dst;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  WTF *v49;
  unsigned int v51;
  WTF *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v60;
  int v61;
  WTF *v64;
  uint64_t v65;
  _BYTE v66[192];
  __int128 __dst;
  _QWORD v68[24];
  char __s[16];
  uint64_t v70;
  uint64_t v71;

  v11 = a4;
  v71 = *MEMORY[0x1E0C80C00];
  v64 = (WTF *)v66;
  v65 = 8;
  v14 = a5 | 0x2000000000000;
  while (1)
  {
    v15 = *(unsigned __int8 *)(v11 + 9);
    if (v15 == 61 || v15 == 32 || !*(_QWORD *)(v11 + 48))
    {
LABEL_66:
      v47 = WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v47 = 1;
LABEL_67:
      v48 = a9;
      goto LABEL_68;
    }
    if (!a5)
      goto LABEL_12;
    if (v15 - 39 > 0xA)
      goto LABEL_12;
    v16 = *(_DWORD *)(a5 + 16);
    if ((v16 & 0x20) != 0)
      goto LABEL_12;
    v17 = *(unsigned int *)(a5 + 4);
    if (!(_DWORD)v17)
      goto LABEL_12;
    v18 = *(unsigned __int8 **)(a5 + 8);
    if ((v16 & 4) == 0)
    {
      v19 = *(unsigned __int16 *)v18;
      if ((_DWORD)v17 == 1)
        goto LABEL_11;
      if (v19 != 45)
      {
        if ((v19 - 48) >= 0xA && ((_DWORD)v17 != 8 || v19 != 73))
        {
LABEL_100:
          if ((_DWORD)v17 != 3 || v19 != 78)
            goto LABEL_12;
        }
LABEL_34:
        v9 = v9 & 0xFFFFFF0000000000 | v17 | ((unint64_t)((v16 >> 2) & 1) << 32);
        JSC::jsToNumber(v18, v9);
        v28 = (v27 >> 52) & 0x7FF;
        if ((_DWORD)v28 != 2047)
        {
          v30 = v27 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v27 & 0x8000000000000000) != 0 && v30)
          {
            v31 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            if (!v30)
            {
              v29 = &__s[1];
              __s[0] = 48;
              goto LABEL_41;
            }
            v31 = __s;
          }
          v32 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v27 & 0x800FFFFFFFFFFFFFLL, v28);
          v29 = WTF::dragonbox::detail::to_shortest(v32, v33, (uint64_t)v31, v34);
          goto LABEL_41;
        }
        if ((v27 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          v29 = &__s[3];
          qmemcpy(__s, "NaN", 3);
        }
        else
        {
          if ((v27 & 0x8000000000000000) != 0)
          {
            v46 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            v46 = __s;
          }
          *(_QWORD *)v46 = 0x7974696E69666E49;
          v29 = v46 + 8;
        }
LABEL_41:
        *v29 = 0;
        v35 = strlen(__s);
        memcpy(&__dst, __s, v35);
        *((_BYTE *)&v68[-2] + v35) = 0;
        v36 = *(unsigned int *)(a5 + 4);
        v37 = *(unsigned __int8 **)(a5 + 8);
        if ((*(_BYTE *)(a5 + 16) & 4) != 0)
        {
          if ((_DWORD)v36)
          {
            p_dst = (unsigned __int8 *)&__dst;
            v43 = *(unsigned int *)(a5 + 4);
            do
            {
              v45 = *p_dst++;
              v44 = v45;
              if (!v45 || *v37 != v44)
                goto LABEL_54;
              ++v37;
            }
            while (--v43);
          }
        }
        else if ((_DWORD)v36)
        {
          v38 = (unsigned __int8 *)&__dst;
          v39 = *(unsigned int *)(a5 + 4);
          while (1)
          {
            v41 = *v38++;
            v40 = v41;
            if (!v41 || *(unsigned __int16 *)v37 != v40)
              break;
            v37 += 2;
            if (!--v39)
              goto LABEL_53;
          }
LABEL_54:
          v15 = *(unsigned __int8 *)(v11 + 9);
          goto LABEL_12;
        }
LABEL_53:
        if (!*((_BYTE *)&v68[-2] + v36))
          break;
        goto LABEL_54;
      }
      v19 = *((unsigned __int16 *)v18 + 1);
      goto LABEL_30;
    }
    v19 = *v18;
    if ((_DWORD)v17 == 1)
    {
LABEL_11:
      if ((v19 - 48) < 0xA)
        break;
      goto LABEL_12;
    }
    if (v19 == 45)
    {
      v19 = v18[1];
LABEL_30:
      if ((v19 - 48) < 0xA)
      {
        if ((_DWORD)v17 == 2)
          break;
        goto LABEL_34;
      }
      if ((_DWORD)v17 != 9)
        goto LABEL_12;
      goto LABEL_56;
    }
    if ((v19 - 48) < 0xA)
      goto LABEL_34;
    if ((_DWORD)v17 != 8)
      goto LABEL_100;
LABEL_56:
    if (v19 == 73)
      goto LABEL_34;
LABEL_12:
    if (v15 < 0x17)
    {
      if (v15 == 2)
        v20 = (const JSC::PropertyTable *)a3[149];
      else
        v20 = (const JSC::PropertyTable *)(v15 == 3 ? a3[151] : a3[152]);
    }
    else
    {
      v20 = *(const JSC::PropertyTable **)(v11 + 48);
    }
    if (v20 == (const JSC::PropertyTable *)2)
      break;
    v11 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 0x10) & 3) != 0)
      goto LABEL_66;
    v21 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x30);
    if (!v21)
      goto LABEL_66;
    if (a2 && *(_DWORD *)(a1 + 760) >= a2[7])
      JSC::Heap::writeBarrierSlowPath(a1 + 192, (unint64_t)a2);
    v22 = v21 == 2 ? 0 : v21;
    *(_QWORD *)&__dst = v20;
    *((_QWORD *)&__dst + 1) = v14;
    v68[0] = v22;
    JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)&__dst + 1, 0, 16 * (*(_DWORD *)v20 & 0xFFFFFFFE), v20, a5, a6, a7, a8);
    if ((v23 & 1) == 0)
      goto LABEL_66;
    *(_OWORD *)__s = __dst;
    v70 = v68[0];
    if ((*((_QWORD *)&__dst + 1) & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_66;
    if (HIDWORD(v65) == (_DWORD)v65)
    {
      v60 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, (void *)(HIDWORD(v65) + 1), (unint64_t)__s, a4, a5, a6, a7, a8);
      v24 = (char *)v64 + 24 * HIDWORD(v65);
      v25 = *(_OWORD *)v60;
      v26 = *(_QWORD *)(v60 + 16);
    }
    else
    {
      v24 = (char *)v64 + 24 * HIDWORD(v65);
      v25 = *(_OWORD *)__s;
      v26 = v70;
    }
    *((_QWORD *)v24 + 2) = v26;
    *(_OWORD *)v24 = v25;
    ++HIDWORD(v65);
  }
  v51 = HIDWORD(v65);
  if (!HIDWORD(v65))
  {
    v47 = 0;
    goto LABEL_67;
  }
  v48 = a9;
  v52 = v64;
  *a9 = 0;
  *(_QWORD *)&__dst = v68;
  DWORD2(__dst) = 8;
  if (v52 == (WTF *)v66)
  {
    v53 = 24 * v51;
    memcpy(v68, v66, 24 * ((v53 - 24) / 0x18uLL) + 24);
  }
  else
  {
    v64 = (WTF *)v66;
    *(_QWORD *)&__dst = v52;
    v61 = v65;
    LODWORD(v65) = 8;
    DWORD2(__dst) = v61;
    v53 = 24 * v51;
  }
  HIDWORD(v65) = 0;
  HIDWORD(__dst) = v51;
  v47 = WTF::fastMalloc((WTF *)(v53 + 8));
  v54 = (_QWORD *)__dst;
  v55 = HIDWORD(__dst);
  *(_DWORD *)v47 = 1;
  *(_DWORD *)(v47 + 4) = v51;
  if ((_DWORD)v55)
  {
    v56 = v47 + 8;
    v57 = 24 * v55;
    do
    {
      v58 = *(_OWORD *)v54;
      *(_QWORD *)(v56 + 16) = v54[2];
      *(_OWORD *)v56 = v58;
      v56 += 24;
      v54 += 3;
      v57 -= 24;
    }
    while (v57);
    v54 = (_QWORD *)__dst;
  }
  if (v68 != v54 && v54 != 0)
  {
    *(_QWORD *)&__dst = 0;
    DWORD2(__dst) = 0;
    WTF::fastFree((unint64_t)v54, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_68:
  *v48 = v47;
  v49 = v64;
  if (v66 != (_BYTE *)v64 && v64 != 0)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    WTF::fastFree((unint64_t)v49, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

void JSC::generateConditionsForPropertySetterMiss(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  const JSC::PropertyTable *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned __int8 *p_dst;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  WTF *v49;
  unsigned int v51;
  WTF *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v60;
  int v61;
  WTF *v64;
  uint64_t v65;
  _BYTE v66[192];
  __int128 __dst;
  _QWORD v68[24];
  char __s[16];
  uint64_t v70;
  uint64_t v71;

  v11 = a4;
  v71 = *MEMORY[0x1E0C80C00];
  v64 = (WTF *)v66;
  v65 = 8;
  v14 = a5 | 0x3000000000000;
  while (1)
  {
    v15 = *(unsigned __int8 *)(v11 + 9);
    if (v15 == 61 || v15 == 32 || !*(_QWORD *)(v11 + 48))
    {
LABEL_66:
      v47 = WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v47 = 1;
LABEL_67:
      v48 = a9;
      goto LABEL_68;
    }
    if (!a5)
      goto LABEL_12;
    if (v15 - 39 > 0xA)
      goto LABEL_12;
    v16 = *(_DWORD *)(a5 + 16);
    if ((v16 & 0x20) != 0)
      goto LABEL_12;
    v17 = *(unsigned int *)(a5 + 4);
    if (!(_DWORD)v17)
      goto LABEL_12;
    v18 = *(unsigned __int8 **)(a5 + 8);
    if ((v16 & 4) == 0)
    {
      v19 = *(unsigned __int16 *)v18;
      if ((_DWORD)v17 == 1)
        goto LABEL_11;
      if (v19 != 45)
      {
        if ((v19 - 48) >= 0xA && ((_DWORD)v17 != 8 || v19 != 73))
        {
LABEL_100:
          if ((_DWORD)v17 != 3 || v19 != 78)
            goto LABEL_12;
        }
LABEL_34:
        v9 = v9 & 0xFFFFFF0000000000 | v17 | ((unint64_t)((v16 >> 2) & 1) << 32);
        JSC::jsToNumber(v18, v9);
        v28 = (v27 >> 52) & 0x7FF;
        if ((_DWORD)v28 != 2047)
        {
          v30 = v27 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v27 & 0x8000000000000000) != 0 && v30)
          {
            v31 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            if (!v30)
            {
              v29 = &__s[1];
              __s[0] = 48;
              goto LABEL_41;
            }
            v31 = __s;
          }
          v32 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v27 & 0x800FFFFFFFFFFFFFLL, v28);
          v29 = WTF::dragonbox::detail::to_shortest(v32, v33, (uint64_t)v31, v34);
          goto LABEL_41;
        }
        if ((v27 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          v29 = &__s[3];
          qmemcpy(__s, "NaN", 3);
        }
        else
        {
          if ((v27 & 0x8000000000000000) != 0)
          {
            v46 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            v46 = __s;
          }
          *(_QWORD *)v46 = 0x7974696E69666E49;
          v29 = v46 + 8;
        }
LABEL_41:
        *v29 = 0;
        v35 = strlen(__s);
        memcpy(&__dst, __s, v35);
        *((_BYTE *)&v68[-2] + v35) = 0;
        v36 = *(unsigned int *)(a5 + 4);
        v37 = *(unsigned __int8 **)(a5 + 8);
        if ((*(_BYTE *)(a5 + 16) & 4) != 0)
        {
          if ((_DWORD)v36)
          {
            p_dst = (unsigned __int8 *)&__dst;
            v43 = *(unsigned int *)(a5 + 4);
            do
            {
              v45 = *p_dst++;
              v44 = v45;
              if (!v45 || *v37 != v44)
                goto LABEL_54;
              ++v37;
            }
            while (--v43);
          }
        }
        else if ((_DWORD)v36)
        {
          v38 = (unsigned __int8 *)&__dst;
          v39 = *(unsigned int *)(a5 + 4);
          while (1)
          {
            v41 = *v38++;
            v40 = v41;
            if (!v41 || *(unsigned __int16 *)v37 != v40)
              break;
            v37 += 2;
            if (!--v39)
              goto LABEL_53;
          }
LABEL_54:
          v15 = *(unsigned __int8 *)(v11 + 9);
          goto LABEL_12;
        }
LABEL_53:
        if (!*((_BYTE *)&v68[-2] + v36))
          break;
        goto LABEL_54;
      }
      v19 = *((unsigned __int16 *)v18 + 1);
      goto LABEL_30;
    }
    v19 = *v18;
    if ((_DWORD)v17 == 1)
    {
LABEL_11:
      if ((v19 - 48) < 0xA)
        break;
      goto LABEL_12;
    }
    if (v19 == 45)
    {
      v19 = v18[1];
LABEL_30:
      if ((v19 - 48) < 0xA)
      {
        if ((_DWORD)v17 == 2)
          break;
        goto LABEL_34;
      }
      if ((_DWORD)v17 != 9)
        goto LABEL_12;
      goto LABEL_56;
    }
    if ((v19 - 48) < 0xA)
      goto LABEL_34;
    if ((_DWORD)v17 != 8)
      goto LABEL_100;
LABEL_56:
    if (v19 == 73)
      goto LABEL_34;
LABEL_12:
    if (v15 < 0x17)
    {
      if (v15 == 2)
        v20 = (const JSC::PropertyTable *)a3[149];
      else
        v20 = (const JSC::PropertyTable *)(v15 == 3 ? a3[151] : a3[152]);
    }
    else
    {
      v20 = *(const JSC::PropertyTable **)(v11 + 48);
    }
    if (v20 == (const JSC::PropertyTable *)2)
      break;
    v11 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 0x10) & 3) != 0)
      goto LABEL_66;
    v21 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x30);
    if (!v21)
      goto LABEL_66;
    if (a2 && *(_DWORD *)(a1 + 760) >= a2[7])
      JSC::Heap::writeBarrierSlowPath(a1 + 192, (unint64_t)a2);
    v22 = v21 == 2 ? 0 : v21;
    *(_QWORD *)&__dst = v20;
    *((_QWORD *)&__dst + 1) = v14;
    v68[0] = v22;
    JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)&__dst + 1, 0, 16 * (*(_DWORD *)v20 & 0xFFFFFFFE), v20, a5, a6, a7, a8);
    if ((v23 & 1) == 0)
      goto LABEL_66;
    *(_OWORD *)__s = __dst;
    v70 = v68[0];
    if ((*((_QWORD *)&__dst + 1) & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_66;
    if (HIDWORD(v65) == (_DWORD)v65)
    {
      v60 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, (void *)(HIDWORD(v65) + 1), (unint64_t)__s, a4, a5, a6, a7, a8);
      v24 = (char *)v64 + 24 * HIDWORD(v65);
      v25 = *(_OWORD *)v60;
      v26 = *(_QWORD *)(v60 + 16);
    }
    else
    {
      v24 = (char *)v64 + 24 * HIDWORD(v65);
      v25 = *(_OWORD *)__s;
      v26 = v70;
    }
    *((_QWORD *)v24 + 2) = v26;
    *(_OWORD *)v24 = v25;
    ++HIDWORD(v65);
  }
  v51 = HIDWORD(v65);
  if (!HIDWORD(v65))
  {
    v47 = 0;
    goto LABEL_67;
  }
  v48 = a9;
  v52 = v64;
  *a9 = 0;
  *(_QWORD *)&__dst = v68;
  DWORD2(__dst) = 8;
  if (v52 == (WTF *)v66)
  {
    v53 = 24 * v51;
    memcpy(v68, v66, 24 * ((v53 - 24) / 0x18uLL) + 24);
  }
  else
  {
    v64 = (WTF *)v66;
    *(_QWORD *)&__dst = v52;
    v61 = v65;
    LODWORD(v65) = 8;
    DWORD2(__dst) = v61;
    v53 = 24 * v51;
  }
  HIDWORD(v65) = 0;
  HIDWORD(__dst) = v51;
  v47 = WTF::fastMalloc((WTF *)(v53 + 8));
  v54 = (_QWORD *)__dst;
  v55 = HIDWORD(__dst);
  *(_DWORD *)v47 = 1;
  *(_DWORD *)(v47 + 4) = v51;
  if ((_DWORD)v55)
  {
    v56 = v47 + 8;
    v57 = 24 * v55;
    do
    {
      v58 = *(_OWORD *)v54;
      *(_QWORD *)(v56 + 16) = v54[2];
      *(_OWORD *)v56 = v58;
      v56 += 24;
      v54 += 3;
      v57 -= 24;
    }
    while (v57);
    v54 = (_QWORD *)__dst;
  }
  if (v68 != v54 && v54 != 0)
  {
    *(_QWORD *)&__dst = 0;
    DWORD2(__dst) = 0;
    WTF::fastFree((unint64_t)v54, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_68:
  *v48 = v47;
  v49 = v64;
  if (v66 != (_BYTE *)v64 && v64 != 0)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    WTF::fastFree((unint64_t)v49, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

void JSC::generateConditionsForIndexedMiss(JSC *this@<X0>, JSC::VM *a2@<X1>, JSC::JSCell *a3@<X2>, JSC::JSGlobalObject *a4@<X3>, JSC::Structure *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  JSC::JSGlobalObject *v9;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  WTF **v34;
  WTF **v35;
  uint64_t v36;
  int v37;
  WTF *v40;
  uint64_t i;
  _BYTE v42[192];
  __int128 v43;
  uint64_t v44;
  WTF *v45[2];
  _QWORD v46[25];

  v9 = a4;
  v12 = 0;
  v40 = (WTF *)v42;
  for (i = 8; ; ++HIDWORD(i))
  {
    v13 = *((unsigned __int8 *)v9 + 9);
    if (v13 == 61 || v13 == 32 || (v14 = (WTF *)*((_QWORD *)v9 + 6)) == 0)
    {
LABEL_24:
      v22 = WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v22 = 1;
LABEL_25:
      v23 = a9;
      goto LABEL_26;
    }
    if (v13 <= 0x16)
    {
      v34 = (WTF **)((char *)a3 + 1216);
      if (v13 == 3)
        v34 = (WTF **)((char *)a3 + 1208);
      if (v13 == 2)
        v35 = (WTF **)((char *)a3 + 1192);
      else
        v35 = v34;
      v14 = *v35;
    }
    if (v14 == (WTF *)2)
      break;
    v9 = (JSC::JSGlobalObject *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE));
    if ((*((_BYTE *)v9 + 16) & 3) != 0)
      goto LABEL_24;
    v15 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
    if (!v15)
      goto LABEL_24;
    if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 8) & 0x2E) != 0)
      goto LABEL_24;
    v16 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28);
    if (v16)
    {
      if (*(_BYTE *)(*(_QWORD *)(v16 + 2048) + 4) == 2)
        goto LABEL_24;
    }
    if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x100) != 0)
      goto LABEL_24;
    if (a2 && *((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, (unint64_t)a2);
    v17 = v15 == 2 ? 0 : v15;
    v45[0] = v14;
    v45[1] = (WTF *)0x4000000000000;
    v46[0] = v17;
    JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)&v45[1], 0, 16 * (*(_DWORD *)v14 & 0xFFFFFFFE), v14, (uint64_t)a5, a6, a7, a8);
    if ((v18 & 1) == 0)
      goto LABEL_24;
    v43 = *(_OWORD *)v45;
    v44 = v46[0];
    if (((unint64_t)v45[1] & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_24;
    if (HIDWORD(i) == (_DWORD)i)
    {
      v36 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (void *)(HIDWORD(i) + 1), (unint64_t)&v43, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      v19 = (char *)v40 + 24 * HIDWORD(i);
      v20 = *(_OWORD *)v36;
      v21 = *(_QWORD *)(v36 + 16);
    }
    else
    {
      v19 = (char *)v40 + 24 * HIDWORD(i);
      v20 = v43;
      v21 = v44;
    }
    *((_QWORD *)v19 + 2) = v21;
    *(_OWORD *)v19 = v20;
    v12 = HIDWORD(i) + 1;
  }
  if (!v12)
  {
    v22 = 0;
    goto LABEL_25;
  }
  v23 = a9;
  v26 = v40;
  *a9 = 0;
  v45[0] = (WTF *)v46;
  LODWORD(v45[1]) = 8;
  if (v26 == (WTF *)v42)
  {
    v27 = 24 * v12;
    memcpy(v46, v42, 24 * ((v27 - 24) / 0x18uLL) + 24);
  }
  else
  {
    v40 = (WTF *)v42;
    v45[0] = v26;
    v37 = i;
    LODWORD(i) = 8;
    LODWORD(v45[1]) = v37;
    v27 = 24 * v12;
  }
  HIDWORD(i) = 0;
  HIDWORD(v45[1]) = v12;
  v22 = WTF::fastMalloc((WTF *)(v27 + 8));
  v28 = v45[0];
  v29 = HIDWORD(v45[1]);
  *(_DWORD *)v22 = 1;
  *(_DWORD *)(v22 + 4) = v12;
  if ((_DWORD)v29)
  {
    v30 = v22 + 8;
    v31 = 24 * v29;
    do
    {
      v32 = *(_OWORD *)v28;
      *(_QWORD *)(v30 + 16) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v32;
      v30 += 24;
      v28 = (WTF *)((char *)v28 + 24);
      v31 -= 24;
    }
    while (v31);
    v28 = v45[0];
  }
  if (v46 != (_QWORD *)v28 && v28 != 0)
  {
    v45[0] = 0;
    LODWORD(v45[1]) = 0;
    WTF::fastFree((unint64_t)v28, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  }
LABEL_26:
  *v23 = v22;
  v24 = v40;
  if (v42 != (_BYTE *)v40 && v40 != 0)
  {
    v40 = 0;
    LODWORD(i) = 0;
    WTF::fastFree((unint64_t)v24, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  }
}

void JSC::generateConditionsForPrototypePropertyHit(JSC::VM *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, const JSC::PropertyTable *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  uint64_t v14;
  unsigned int v15;
  const JSC::PropertyTable *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unsigned __int8 *p_dst;
  int v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  size_t v64;
  char *v65;
  uint64_t *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  WTF *v76;
  char *v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  WTF *v84;
  uint64_t v85;
  _BYTE v86[192];
  __int128 __dst;
  _QWORD v88[24];
  char __s[16];
  uint64_t v90;
  uint64_t v91;

  v11 = (uint64_t)a4;
  v91 = *MEMORY[0x1E0C80C00];
  v84 = (WTF *)v86;
  v85 = 8;
  v14 = a6 | 0x2000000000000;
  while (1)
  {
    v15 = *(unsigned __int8 *)(v11 + 9);
    if (v15 == 61 || v15 == 32 || !*(_QWORD *)(v11 + 48))
      goto LABEL_114;
    if (a5)
      goto LABEL_6;
    if (!a6)
      goto LABEL_6;
    if (v15 - 39 > 0xA)
      goto LABEL_6;
    v25 = *(_DWORD *)(a6 + 16);
    if ((v25 & 0x20) != 0)
      goto LABEL_6;
    v26 = *(unsigned int *)(a6 + 4);
    if (!(_DWORD)v26)
      goto LABEL_6;
    v27 = *(unsigned __int8 **)(a6 + 8);
    if ((v25 & 4) == 0)
    {
      v28 = *(unsigned __int16 *)v27;
      if ((_DWORD)v26 == 1)
        goto LABEL_31;
      if (v28 != 45)
      {
        if ((v28 - 48) >= 0xA && ((_DWORD)v26 != 8 || v28 != 73))
        {
LABEL_82:
          if ((_DWORD)v26 != 3 || v28 != 78)
            goto LABEL_6;
        }
LABEL_66:
        v81 = v81 & 0xFFFFFF0000000000 | v26 | ((unint64_t)((v25 >> 2) & 1) << 32);
        JSC::jsToNumber(v27, v81);
        v55 = (v54 >> 52) & 0x7FF;
        if ((_DWORD)v55 == 2047)
        {
          if ((v54 & 0xFFFFFFFFFFFFFLL) != 0)
          {
            v60 = &__s[3];
            qmemcpy(__s, "NaN", 3);
          }
          else
          {
            if ((v54 & 0x8000000000000000) != 0)
            {
              v78 = &__s[1];
              __s[0] = 45;
            }
            else
            {
              v78 = __s;
            }
            *(_QWORD *)v78 = 0x7974696E69666E49;
            v60 = v78 + 8;
          }
        }
        else
        {
          v61 = v54 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v54 & 0x8000000000000000) != 0 && v61)
          {
            v62 = &__s[1];
            __s[0] = 45;
            goto LABEL_91;
          }
          if (v61)
          {
            v62 = __s;
LABEL_91:
            v63 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v54 & 0x800FFFFFFFFFFFFFLL, v55);
            v60 = WTF::dragonbox::detail::to_shortest(v63, v64, (uint64_t)v62, v65);
          }
          else
          {
            v60 = &__s[1];
            __s[0] = 48;
          }
        }
        *v60 = 0;
        v56 = strlen(__s);
        memcpy(&__dst, __s, v56);
        *((_BYTE *)&v88[-2] + v56) = 0;
        v57 = *(unsigned int *)(a6 + 4);
        v43 = *(unsigned __int8 **)(a6 + 8);
        if ((*(_BYTE *)(a6 + 16) & 4) != 0)
        {
          if ((_DWORD)v57)
          {
            p_dst = (unsigned __int8 *)&__dst;
            v44 = *(unsigned int *)(a6 + 4);
            do
            {
              v42 = *p_dst++;
              v41 = v42;
              if (!v42 || *v43 != v41)
                goto LABEL_95;
              ++v43;
            }
            while (--v44);
          }
        }
        else if ((_DWORD)v57)
        {
          v45 = (unsigned __int8 *)&__dst;
          v48 = *(unsigned int *)(a6 + 4);
          while (1)
          {
            v47 = *v45++;
            v46 = v47;
            if (!v47 || *(unsigned __int16 *)v43 != v46)
              break;
            v43 += 2;
            if (!--v48)
              goto LABEL_94;
          }
LABEL_95:
          v15 = *(unsigned __int8 *)(v11 + 9);
          goto LABEL_6;
        }
LABEL_94:
        if (!*((_BYTE *)&v88[-2] + v57))
          goto LABEL_97;
        goto LABEL_95;
      }
      v28 = *((unsigned __int16 *)v27 + 1);
      goto LABEL_76;
    }
    v28 = *v27;
    if ((_DWORD)v26 == 1)
    {
LABEL_31:
      if ((v28 - 48) < 0xA)
        goto LABEL_97;
      goto LABEL_6;
    }
    if (v28 == 45)
    {
      v28 = v27[1];
LABEL_76:
      if ((v28 - 48) < 0xA)
      {
        if ((_DWORD)v26 == 2)
          goto LABEL_97;
        goto LABEL_66;
      }
      if ((_DWORD)v26 != 9)
        goto LABEL_6;
      goto LABEL_111;
    }
    if ((v28 - 48) < 0xA)
      goto LABEL_66;
    if ((_DWORD)v26 != 8)
      goto LABEL_82;
LABEL_111:
    if (v28 == 73)
      goto LABEL_66;
LABEL_6:
    if (v15 < 0x17)
    {
      if (v15 == 2)
        v16 = (const JSC::PropertyTable *)a3[149];
      else
        v16 = (const JSC::PropertyTable *)(v15 == 3 ? a3[151] : a3[152]);
    }
    else
    {
      v16 = *(const JSC::PropertyTable **)(v11 + 48);
    }
    if (v16 == (const JSC::PropertyTable *)2)
      break;
    v11 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 0x10) & 3) != 0)
      goto LABEL_114;
    __dst = 0uLL;
    v88[0] = 0;
    if (v16 == (const JSC::PropertyTable *)a5)
    {
      if (!(a6 >> 4) || ((a6 >> 4) & ~*(_DWORD *)(v11 + 32)) != 0)
        goto LABEL_114;
      v29 = *(_QWORD *)(v11 + 88);
      if (!v29)
      {
        v49 = *(_QWORD *)(v11 + 64);
        if (!v49 || *(_BYTE *)(v49 + 5) != 1 && *(_DWORD *)(v49 + 80) < 2u)
          goto LABEL_114;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v11, a1, 1, a4, a5, a6, a7, a8);
        if (!v29)
          goto LABEL_114;
      }
      if (!*(_DWORD *)(v29 + 24))
        goto LABEL_114;
      v30 = *(_QWORD *)(v29 + 16);
      v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
      v32 = *(unsigned int *)(v29 + 8);
      v33 = *(_DWORD *)(a6 + 16);
      if ((v30 & 1) != 0)
      {
        if ((v33 & 0x20) != 0)
          v33 = *(_DWORD *)(a6 + 32);
        v34 = *(_DWORD *)(v29 + 12);
        v35 = (v33 >> 8) & *(_QWORD *)&v34;
        v36 = *(unsigned __int8 *)(v31 + v35);
        if (!*(_BYTE *)(v31 + v35))
          goto LABEL_114;
        v37 = v31 + v32;
        v38 = 1;
        while (1)
        {
          v39 = *(_QWORD *)(v37 + 8 * (v36 - 1));
          if ((v39 & 0xFFFFFFFFFFFFLL) == a6)
            break;
          v35 = ((_DWORD)v35 + v38) & v34;
          v36 = *(unsigned __int8 *)(v31 + v35);
          ++v38;
          if (!*(_BYTE *)(v31 + v35))
            goto LABEL_114;
        }
        v17 = (v39 >> 16) & 0xFF00000000 | HIBYTE(v39);
      }
      else
      {
        if ((v33 & 0x20) != 0)
          v33 = *(_DWORD *)(a6 + 32);
        v58 = *(_DWORD *)(v29 + 12);
        v51 = v58 & (v33 >> 8);
        v52 = *(_DWORD *)(v31 + 4 * v51);
        if (!v52)
          goto LABEL_114;
        v59 = v31 + 4 * v32;
        v53 = 1;
        while (1)
        {
          v50 = (v52 - 1);
          if (*(_QWORD *)(v59 + 16 * v50) == a6)
            break;
          v51 = (v51 + v53) & v58;
          v52 = *(_DWORD *)(v31 + 4 * v51);
          ++v53;
          if (!v52)
            goto LABEL_114;
        }
        v17 = *(unsigned int *)(v59 + 16 * v50 + 8) | ((unint64_t)*(unsigned __int8 *)(v59 + 16 * v50 + 12) << 32);
      }
      if ((_DWORD)v17 == -1)
        goto LABEL_114;
      if (a2 && *((_DWORD *)a1 + 190) >= a2[7])
        JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, (unint64_t)a2);
      v18 = a5;
      v19 = a6;
    }
    else
    {
      v17 = *(_QWORD *)(v11 + 48);
      if (!v17)
        goto LABEL_114;
      if (a2 && *((_DWORD *)a1 + 190) >= a2[7])
        JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, (unint64_t)a2);
      if (v17 == 2)
        v17 = 0;
      v18 = (uint64_t)v16;
      v19 = v14;
    }
    *(_QWORD *)&__dst = v18;
    *((_QWORD *)&__dst + 1) = v19;
    v88[0] = v17;
    if ((v19 & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_114;
    JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)&__dst + 1, 0, 16 * (*(_DWORD *)v16 & 0xFFFFFFFE), v16, a5, a6, a7, a8);
    if ((v20 & 1) == 0)
      goto LABEL_114;
    *(_OWORD *)__s = __dst;
    v90 = v88[0];
    if ((*((_QWORD *)&__dst + 1) & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_114;
    if (HIDWORD(v85) == (_DWORD)v85)
    {
      v79 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, (void *)(HIDWORD(v85) + 1), (unint64_t)__s, (uint64_t)a4, a5, a6, a7, a8);
      v21 = (char *)v84 + 24 * HIDWORD(v85);
      v22 = *(_OWORD *)v79;
      v23 = *(_QWORD *)(v79 + 16);
    }
    else
    {
      v21 = (char *)v84 + 24 * HIDWORD(v85);
      v22 = *(_OWORD *)__s;
      v23 = v90;
    }
    *((_QWORD *)v21 + 2) = v23;
    *(_OWORD *)v21 = v22;
    v24 = ++HIDWORD(v85);
    if (v16 == (const JSC::PropertyTable *)a5)
      goto LABEL_98;
  }
  if (a5)
  {
LABEL_114:
    v69 = WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v69 = 1;
    v66 = a9;
    goto LABEL_115;
  }
LABEL_97:
  v24 = HIDWORD(v85);
LABEL_98:
  v66 = a9;
  if (v24)
  {
    *a9 = 0;
    *(_QWORD *)&__dst = v88;
    DWORD2(__dst) = 8;
    v67 = v84;
    if (v84 == (WTF *)v86)
    {
      v68 = 24 * v24;
      memcpy(v88, v86, 24 * ((v68 - 24) / 0x18uLL) + 24);
    }
    else
    {
      v84 = (WTF *)v86;
      *(_QWORD *)&__dst = v67;
      v80 = v85;
      LODWORD(v85) = 8;
      DWORD2(__dst) = v80;
      v68 = 24 * v24;
    }
    HIDWORD(v85) = 0;
    HIDWORD(__dst) = v24;
    v69 = WTF::fastMalloc((WTF *)(v68 + 8));
    v70 = (_QWORD *)__dst;
    v71 = HIDWORD(__dst);
    *(_DWORD *)v69 = 1;
    *(_DWORD *)(v69 + 4) = v24;
    if ((_DWORD)v71)
    {
      v72 = v69 + 8;
      v73 = 24 * v71;
      do
      {
        v74 = *(_OWORD *)v70;
        *(_QWORD *)(v72 + 16) = v70[2];
        *(_OWORD *)v72 = v74;
        v72 += 24;
        v70 += 3;
        v73 -= 24;
      }
      while (v73);
      v70 = (_QWORD *)__dst;
    }
    if (v88 != v70 && v70 != 0)
    {
      *(_QWORD *)&__dst = 0;
      DWORD2(__dst) = 0;
      WTF::fastFree((unint64_t)v70, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v69 = 0;
  }
LABEL_115:
  *v66 = v69;
  v76 = v84;
  if (v86 != (_BYTE *)v84 && v84 != 0)
  {
    v84 = 0;
    LODWORD(v85) = 0;
    WTF::fastFree((unint64_t)v76, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
}

void JSC::generateConditionsForPrototypePropertyHitCustom(JSC::VM *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, const JSC::PropertyTable *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  const JSC::PropertyTable *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unsigned __int8 *p_dst;
  int v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  size_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  WTF *v98;
  uint64_t v100;
  unsigned int v101;
  WTF *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  BOOL v125;
  signed int v126;
  unint64_t v127;
  char v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  _BYTE v134[192];
  __int128 __dst;
  _QWORD v136[24];
  char __s[16];
  uint64_t v138;
  uint64_t v139;

  v130 = a7;
  v11 = (uint64_t)a4;
  v139 = *MEMORY[0x1E0C80C00];
  v133 = 8;
  v14 = a6 | 0x2000000000000;
  v15 = a6 >> 4;
  v131 = a6 | 0x2000000000000;
  v132 = (WTF *)v134;
  while (1)
  {
    v16 = *(unsigned __int8 *)(v11 + 9);
    if (v16 == 61 || v16 == 32 || !*(_QWORD *)(v11 + 48))
      goto LABEL_128;
    if (a5)
      goto LABEL_6;
    if (!a6)
      goto LABEL_6;
    if (v16 - 39 > 0xA)
      goto LABEL_6;
    v24 = *(_DWORD *)(a6 + 16);
    if ((v24 & 0x20) != 0)
      goto LABEL_6;
    v25 = *(unsigned int *)(a6 + 4);
    if (!(_DWORD)v25)
      goto LABEL_6;
    v26 = *(unsigned __int8 **)(a6 + 8);
    if ((v24 & 4) != 0)
    {
      v124 = *v26;
      if ((_DWORD)v25 == 1)
      {
        v14 = v131;
        if ((v124 - 48) < 0xA)
          goto LABEL_146;
        goto LABEL_6;
      }
      if (v124 == 45)
      {
        v124 = v26[1];
        if ((v124 - 48) < 0xA)
        {
          v14 = v131;
          if ((_DWORD)v25 == 2)
            goto LABEL_146;
          goto LABEL_80;
        }
        if ((_DWORD)v25 != 9)
        {
LABEL_218:
          v14 = v131;
          goto LABEL_6;
        }
      }
      else
      {
        v14 = v131;
        if ((v124 - 48) < 0xA)
          goto LABEL_80;
        if ((_DWORD)v25 != 8)
        {
          if ((_DWORD)v25 != 3)
            goto LABEL_218;
          v125 = v124 == 78;
          goto LABEL_227;
        }
      }
      v125 = v124 == 73;
LABEL_227:
      v14 = v131;
      if (v125)
        goto LABEL_80;
      goto LABEL_6;
    }
    v27 = *(unsigned __int16 *)v26;
    if ((_DWORD)v25 == 1)
    {
      if ((v27 - 48) < 0xA)
        goto LABEL_146;
      goto LABEL_6;
    }
    if (v27 == 45)
    {
      v56 = *((unsigned __int16 *)v26 + 1);
      if ((v56 - 48) < 0xA)
      {
        if ((_DWORD)v25 == 2)
          goto LABEL_146;
      }
      else if ((_DWORD)v25 != 9 || v56 != 73)
      {
        goto LABEL_6;
      }
LABEL_80:
      v127 = v127 & 0xFFFFFF0000000000 | v25 | ((unint64_t)((v24 >> 2) & 1) << 32);
      JSC::jsToNumber(v26, v127);
      v65 = (v64 >> 52) & 0x7FF;
      if ((_DWORD)v65 != 2047)
      {
        v78 = v64 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v64 & 0x8000000000000000) != 0 && v78)
        {
          v79 = &__s[1];
          __s[0] = 45;
        }
        else
        {
          if (!v78)
          {
            v83 = &__s[1];
            __s[0] = 48;
            goto LABEL_69;
          }
          v79 = __s;
        }
        v80 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v64 & 0x800FFFFFFFFFFFFFLL, v65);
        v83 = WTF::dragonbox::detail::to_shortest(v80, v81, (uint64_t)v79, v82);
        goto LABEL_69;
      }
      if ((v64 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        v83 = &__s[3];
        qmemcpy(__s, "NaN", 3);
      }
      else
      {
        if ((v64 & 0x8000000000000000) != 0)
        {
          v112 = &__s[1];
          __s[0] = 45;
        }
        else
        {
          v112 = __s;
        }
        *(_QWORD *)v112 = 0x7974696E69666E49;
        v83 = v112 + 8;
      }
LABEL_69:
      *v83 = 0;
      v57 = strlen(__s);
      memcpy(&__dst, __s, v57);
      *((_BYTE *)&v136[-2] + v57) = 0;
      v58 = *(unsigned int *)(a6 + 4);
      v42 = *(unsigned __int8 **)(a6 + 8);
      if ((*(_BYTE *)(a6 + 16) & 4) != 0)
      {
        if ((_DWORD)v58)
        {
          p_dst = (unsigned __int8 *)&__dst;
          v43 = *(unsigned int *)(a6 + 4);
          while (1)
          {
            v41 = *p_dst++;
            v40 = v41;
            if (!v41 || *v42 != v40)
              break;
            ++v42;
            if (!--v43)
              goto LABEL_110;
          }
        }
        else
        {
LABEL_110:
          if (!*((_BYTE *)&v136[-2] + v58))
            goto LABEL_146;
        }
      }
      else
      {
        if (!(_DWORD)v58)
          goto LABEL_110;
        v44 = (unsigned __int8 *)&__dst;
        v47 = *(unsigned int *)(a6 + 4);
        while (1)
        {
          v46 = *v44++;
          v45 = v46;
          if (!v46 || *(unsigned __int16 *)v42 != v45)
            break;
          v42 += 2;
          if (!--v47)
            goto LABEL_110;
        }
      }
      v16 = *(unsigned __int8 *)(v11 + 9);
      goto LABEL_6;
    }
    if ((v27 - 48) < 0xA || (_DWORD)v25 == 8 && v27 == 73 || (_DWORD)v25 == 3 && v27 == 78)
      goto LABEL_80;
LABEL_6:
    if (v16 < 0x17)
    {
      if (v16 == 2)
        v17 = (const JSC::PropertyTable *)a3[149];
      else
        v17 = (const JSC::PropertyTable *)(v16 == 3 ? a3[151] : a3[152]);
    }
    else
    {
      v17 = *(const JSC::PropertyTable **)(v11 + 48);
    }
    if (v17 == (const JSC::PropertyTable *)2)
      break;
    v11 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 0x10) & 3) != 0)
      goto LABEL_128;
    if (v17 != (const JSC::PropertyTable *)a5)
    {
      __dst = 0uLL;
      v136[0] = 0;
      v18 = *(_QWORD *)(v11 + 48);
      if (v18)
      {
        if (a2 && *((_DWORD *)a1 + 190) >= a2[7])
          JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, (unint64_t)a2);
        if (v18 == 2)
          v18 = 0;
        *(_QWORD *)&__dst = v17;
        v19 = v14;
        goto LABEL_18;
      }
      goto LABEL_200;
    }
    if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x20)) != 0)
      goto LABEL_94;
    v28 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x58);
    if (!v28)
    {
      v59 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x40);
      if (!v59 || *(_BYTE *)(v59 + 5) != 1 && *(_DWORD *)(v59 + 80) < 2u)
        goto LABEL_94;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE)), a1, 1, a4, a5, a6, a7, a8);
      if (!v28)
        goto LABEL_94;
    }
    if (!*(_DWORD *)(v28 + 24))
      goto LABEL_94;
    v29 = *(_QWORD *)(v28 + 16);
    v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v31 = *(unsigned int *)(v28 + 8);
    v32 = *(_DWORD *)(a6 + 16);
    if ((v29 & 1) == 0)
    {
      if ((v32 & 0x20) != 0)
        v32 = *(_DWORD *)(a6 + 32);
      v68 = *(_DWORD *)(v28 + 12);
      v61 = v68 & (v32 >> 8);
      v62 = *(_DWORD *)(v30 + 4 * v61);
      if (v62)
      {
        v84 = v30 + 4 * v31;
        v63 = 1;
        while (1)
        {
          v60 = (v62 - 1);
          if (*(_QWORD *)(v84 + 16 * v60) == a6)
            break;
          v61 = (v61 + v63) & v68;
          v62 = *(_DWORD *)(v30 + 4 * v61);
          ++v63;
          if (!v62)
            goto LABEL_94;
        }
        v67 = *(unsigned int *)(v84 + 16 * v60 + 8);
        goto LABEL_88;
      }
LABEL_94:
      if (!a6 || (v69 = *(unsigned int *)(v11 + 76), !(_DWORD)v69))
      {
LABEL_107:
        v14 = v131;
        if ((v130 & 8) == 0)
          goto LABEL_128;
        goto LABEL_25;
      }
      v70 = 16 * v69;
      while (2)
      {
        v71 = *(_QWORD *)(v70 + 24);
        if (v71)
        {
          v72 = *(_DWORD *)(a6 + 16);
          if ((v72 & 0x20) == 0)
          {
            v73 = *(_DWORD *)(v71 + 4) & (v72 >> 8);
            v74 = *(_QWORD *)(v71 + 32);
            v75 = *(unsigned __int16 *)(v74 + 4 * v73);
            if (v75 != 0xFFFF)
            {
              while (2)
              {
                v76 = (unint64_t *)(*(_QWORD *)(v71 + 24) + 40 * (__int16)v75);
                v77 = v76[1];
                if (!v77)
                {
LABEL_105:
                  v73 = *(__int16 *)(v74 + 4 * v73 + 2);
                  if (v73 == -1)
                    goto LABEL_98;
                  LOWORD(v75) = *(_WORD *)(v74 + 4 * v73);
                  continue;
                }
                break;
              }
              if (!WTF::equalInternal<unsigned char>(a6, *v76, v77 - 1))
              {
                v74 = *(_QWORD *)(v71 + 32);
                goto LABEL_105;
              }
              if (*(_QWORD *)(v71 + 24))
              {
                __dst = 0uLL;
                v136[0] = 0;
                v100 = *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C);
                if (!(_DWORD)v100)
                  goto LABEL_144;
                v49 = 16 * v100;
                while (1)
                {
                  v48 = *(_QWORD *)(v49 + 24);
                  if (!v48)
                    goto LABEL_56;
                  v50 = *(_DWORD *)(a6 + 16);
                  if ((v50 & 0x20) != 0)
                    goto LABEL_56;
                  v51 = *(_DWORD *)(v48 + 4) & (v50 >> 8);
                  v52 = *(_QWORD *)(v48 + 32);
                  v53 = *(unsigned __int16 *)(v52 + 4 * v51);
                  if (v53 == 0xFFFF)
                    goto LABEL_56;
                  v126 = v51;
                  while (1)
                  {
                    v54 = (unint64_t *)(*(_QWORD *)(v48 + 24) + 40 * (__int16)v53);
                    v55 = v54[1];
                    if (!v55)
                      goto LABEL_64;
                    if (WTF::equalInternal<unsigned char>(a6, *v54, v55 - 1))
                      break;
                    v52 = *(_QWORD *)(v48 + 32);
LABEL_64:
                    v53 = *(__int16 *)(v52 + 4 * v126 + 2);
                    if (v53 == -1)
                      goto LABEL_56;
                    v126 = *(__int16 *)(v52 + 4 * v126 + 2);
                    LOWORD(v53) = *(_WORD *)(v52 + 4 * v53);
                  }
                  if (*(_QWORD *)(v48 + 24))
                  {
                    if (a2 && *((_DWORD *)a1 + 190) >= a2[7])
                      JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, (unint64_t)a2);
                    v18 = 0;
                    v19 = a6 | 0x6000000000000;
                    *(_QWORD *)&__dst = a5;
                    v14 = v131;
                    goto LABEL_18;
                  }
LABEL_56:
                  v49 = *(_QWORD *)(v49 + 16);
                  if (!v49)
                  {
LABEL_144:
                    memset(__s, 0, sizeof(__s));
                    v138 = 0;
                    v14 = v131;
                    goto LABEL_21;
                  }
                }
              }
            }
          }
        }
LABEL_98:
        v70 = *(_QWORD *)(v70 + 16);
        if (!v70)
          goto LABEL_107;
        continue;
      }
    }
    if ((v32 & 0x20) != 0)
      v32 = *(_DWORD *)(a6 + 32);
    v33 = *(_DWORD *)(v28 + 12);
    v34 = (v32 >> 8) & *(_QWORD *)&v33;
    v35 = *(unsigned __int8 *)(v30 + v34);
    if (!*(_BYTE *)(v30 + v34))
      goto LABEL_94;
    v36 = v30 + v31;
    v37 = 1;
    while (1)
    {
      v38 = *(_QWORD *)(v36 + 8 * (v35 - 1));
      if ((v38 & 0xFFFFFFFFFFFFLL) == a6)
        break;
      v34 = ((_DWORD)v34 + v37) & v33;
      v35 = *(unsigned __int8 *)(v30 + v34);
      ++v37;
      if (!*(_BYTE *)(v30 + v34))
        goto LABEL_94;
    }
    v67 = HIBYTE(v38);
LABEL_88:
    if ((_DWORD)v67 == -1)
      goto LABEL_94;
    if ((int)v67 > 63)
    {
      v110 = *(_QWORD *)(a5 + 8) - 8;
      v111 = 0x3F00000000 - (v67 << 32);
    }
    else
    {
      v110 = a5 + 16;
      v111 = v67 << 32;
    }
    v66 = *(_QWORD *)(v110 + (v111 >> 29));
    if ((v66 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v66 + 5) != 6)
      goto LABEL_128;
    __dst = 0uLL;
    v136[0] = 0;
    if ((v15 & ~*(_DWORD *)(v11 + 32)) == 0)
    {
      v85 = *(_QWORD *)(v11 + 88);
      if (v85
        || (v113 = *(_QWORD *)(v11 + 64)) != 0
        && (*(_BYTE *)(v113 + 5) == 1 || *(_DWORD *)(v113 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v11, a1, 1, a4, a5, a6, a7, a8), v85))
      {
        if (*(_DWORD *)(v85 + 24))
        {
          v86 = *(_QWORD *)(v85 + 16);
          v87 = v86 & 0xFFFFFFFFFFFFFFFELL;
          v88 = *(unsigned int *)(v85 + 8);
          v89 = *(_DWORD *)(a6 + 16);
          if ((v86 & 1) != 0)
          {
            if ((v89 & 0x20) != 0)
              v89 = *(_DWORD *)(a6 + 32);
            v90 = *(_DWORD *)(v85 + 12);
            v91 = (v89 >> 8) & *(_QWORD *)&v90;
            v92 = *(unsigned __int8 *)(v87 + v91);
            if (!*(_BYTE *)(v87 + v91))
              goto LABEL_200;
            v93 = v87 + v88;
            v94 = 1;
            while (1)
            {
              v95 = *(_QWORD *)(v93 + 8 * (v92 - 1));
              if ((v95 & 0xFFFFFFFFFFFFLL) == a6)
                break;
              v91 = ((_DWORD)v91 + v94) & v90;
              v92 = *(unsigned __int8 *)(v87 + v91);
              ++v94;
              if (!*(_BYTE *)(v87 + v91))
                goto LABEL_200;
            }
            v114 = HIBYTE(v95);
          }
          else
          {
            if ((v89 & 0x20) != 0)
              v89 = *(_DWORD *)(a6 + 32);
            v116 = *(_DWORD *)(v85 + 12);
            v117 = v116 & (v89 >> 8);
            v118 = *(_DWORD *)(v87 + 4 * v117);
            if (!v118)
              goto LABEL_200;
            v119 = v87 + 4 * v88;
            v120 = 1;
            while (1)
            {
              v121 = (v118 - 1);
              if (*(_QWORD *)(v119 + 16 * v121) == a6)
                break;
              v117 = (v117 + v120) & v116;
              v118 = *(_DWORD *)(v87 + 4 * v117);
              ++v120;
              if (!v118)
                goto LABEL_200;
            }
            LODWORD(v114) = *(_DWORD *)(v119 + 16 * v121 + 8);
          }
          if ((_DWORD)v114 != -1)
          {
            if ((int)v114 < 64)
            {
              v115 = a5 + 16;
            }
            else
            {
              v115 = *(_QWORD *)(a5 + 8) - 8;
              LODWORD(v114) = 63 - v114;
            }
            v18 = *(_QWORD *)(v115 + 8 * (int)v114);
            if (v18)
            {
              if (a2 && *((_DWORD *)a1 + 190) >= a2[7])
                JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, (unint64_t)a2);
              v19 = a6 | 0x5000000000000;
              *(_QWORD *)&__dst = a5;
LABEL_18:
              *((_QWORD *)&__dst + 1) = v19;
              v136[0] = v18;
              if ((v19 & 0xFFFFFFFFFFFFFFLL) != 0)
              {
                JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)&__dst + 1, 0, 16 * (*(_DWORD *)v17 & 0xFFFFFFFE), v17, a5, a6, a7, a8);
                if ((v20 & 1) != 0)
                {
                  *(_OWORD *)__s = __dst;
                  v138 = v136[0];
                  goto LABEL_21;
                }
              }
            }
          }
        }
      }
    }
LABEL_200:
    memset(__s, 0, sizeof(__s));
    v138 = 0;
LABEL_21:
    if ((*(_QWORD *)&__s[8] & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_128;
    if (HIDWORD(v133) == (_DWORD)v133)
    {
      v122 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v132, (void *)(HIDWORD(v133) + 1), (unint64_t)__s, (uint64_t)a4, a5, a6, a7, a8);
      v21 = (char *)v132 + 24 * HIDWORD(v133);
      v22 = *(_OWORD *)v122;
      v23 = *(_QWORD *)(v122 + 16);
    }
    else
    {
      v21 = (char *)v132 + 24 * HIDWORD(v133);
      v22 = *(_OWORD *)__s;
      v23 = v138;
    }
    *((_QWORD *)v21 + 2) = v23;
    *(_OWORD *)v21 = v22;
    ++HIDWORD(v133);
LABEL_25:
    if (v17 == (const JSC::PropertyTable *)a5)
      goto LABEL_146;
  }
  if (a5)
  {
LABEL_128:
    v96 = WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v96 = 1;
    goto LABEL_129;
  }
LABEL_146:
  v101 = HIDWORD(v133);
  if (HIDWORD(v133))
  {
    v97 = a9;
    *a9 = 0;
    *(_QWORD *)&__dst = v136;
    DWORD2(__dst) = 8;
    v102 = v132;
    if (v132 == (WTF *)v134)
    {
      v103 = 24 * v101;
      memcpy(v136, v134, 24 * ((v103 - 24) / 0x18uLL) + 24);
    }
    else
    {
      v132 = (WTF *)v134;
      *(_QWORD *)&__dst = v102;
      v123 = v133;
      LODWORD(v133) = 8;
      DWORD2(__dst) = v123;
      v103 = 24 * v101;
    }
    HIDWORD(v133) = 0;
    HIDWORD(__dst) = v101;
    v96 = WTF::fastMalloc((WTF *)(v103 + 8));
    v104 = (_QWORD *)__dst;
    v105 = HIDWORD(__dst);
    *(_DWORD *)v96 = 1;
    *(_DWORD *)(v96 + 4) = v101;
    if ((_DWORD)v105)
    {
      v106 = v96 + 8;
      v107 = 24 * v105;
      do
      {
        v108 = *(_OWORD *)v104;
        *(_QWORD *)(v106 + 16) = v104[2];
        *(_OWORD *)v106 = v108;
        v106 += 24;
        v104 += 3;
        v107 -= 24;
      }
      while (v107);
      v104 = (_QWORD *)__dst;
    }
    if (v136 != v104 && v104 != 0)
    {
      *(_QWORD *)&__dst = 0;
      DWORD2(__dst) = 0;
      WTF::fastFree((unint64_t)v104, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v96 = 0;
LABEL_129:
    v97 = a9;
  }
  *v97 = v96;
  v98 = v132;
  if (v134 != (_BYTE *)v132 && v132 != 0)
  {
    v132 = 0;
    LODWORD(v133) = 0;
    WTF::fastFree((unint64_t)v98, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
}

void JSC::generateConditionsForInstanceOf(JSC *this@<X0>, JSC::VM *a2@<X1>, JSC::JSCell *a3@<X2>, JSC::JSGlobalObject *a4@<X3>, JSC::Structure *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  JSC::JSGlobalObject *v10;
  uint64_t v13;
  unsigned int v14;
  JSC::Structure *v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  JSC::JSObject *v23;
  char v24;
  _QWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  WTF *v28;
  JSC::JSObject *v30;
  char v31;
  _QWORD *v32;
  char v33;
  JSC::JSObject *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  __int128 v41;
  WTF **v43;
  WTF **v44;
  uint64_t v45;
  int v46;
  char v47;
  void *v48;
  JSC::JSObject *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  JSC::JSCell *v54;
  JSC::JSCell *v55;
  WTF *v57;
  uint64_t v58;
  _BYTE v59[192];
  WTF *v60[2];
  _QWORD v61[25];

  v10 = a4;
  v13 = 0;
  v14 = 0;
  if ((_DWORD)a6)
    v15 = a5;
  else
    v15 = 0;
  v57 = (WTF *)v59;
  v58 = 8;
  while (1)
  {
    v16 = *((unsigned __int8 *)v10 + 9);
    if (v16 == 61 || v16 == 32 || (v17 = (WTF *)*((_QWORD *)v10 + 6)) == 0)
    {
LABEL_26:
      v23 = (JSC::JSObject *)a6;
      v24 = v13;
      v25 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      LOBYTE(v13) = v24;
      a6 = (uint64_t)v23;
      v26 = v25;
      *v25 = 1;
LABEL_27:
      v27 = a9;
      goto LABEL_28;
    }
    if (v16 <= 0x16)
    {
      v43 = (WTF **)((char *)a3 + 1216);
      if (v16 == 3)
        v43 = (WTF **)((char *)a3 + 1208);
      if (v16 == 2)
        v44 = (WTF **)((char *)a3 + 1192);
      else
        v44 = v43;
      v17 = *v44;
    }
    if (v17 == (WTF *)2)
      break;
    v10 = (JSC::JSGlobalObject *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE));
    if ((*((_BYTE *)v10 + 16) & 3) != 0)
      goto LABEL_26;
    if (v17 == a5)
    {
      if ((a6 & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1981EB638);
      }
      v13 = 1;
    }
    else
    {
      v18 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
      if (!v18)
        goto LABEL_26;
      if (a2 && *((_DWORD *)this + 190) >= *((unsigned __int8 *)a2 + 7))
      {
        v53 = a6;
        v45 = v13;
        v54 = a3;
        JSC::Heap::writeBarrierSlowPath((uint64_t)this + 192, (unint64_t)a2);
        a3 = v54;
        v13 = v45;
        a6 = v53;
        v14 = HIDWORD(v58);
      }
      if (v18 == 2)
        v19 = 0;
      else
        v19 = v18;
      v60[0] = v17;
      v60[1] = (WTF *)0x7000000000000;
      v61[0] = v19;
      if (v14 == (_DWORD)v58)
      {
        v48 = (void *)(v14 + 1);
        v55 = a3;
        v49 = (JSC::JSObject *)a6;
        v50 = v13;
        v51 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, v48, (unint64_t)v60, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
        a3 = v55;
        v13 = v50;
        a6 = (uint64_t)v49;
        v20 = (char *)v57 + 24 * HIDWORD(v58);
        v21 = *(_OWORD *)v51;
        v22 = *(_QWORD *)(v51 + 16);
      }
      else
      {
        v20 = (char *)v57 + 24 * v14;
        v21 = *(_OWORD *)v60;
        v22 = v61[0];
      }
      *((_QWORD *)v20 + 2) = v22;
      *(_OWORD *)v20 = v21;
      v14 = ++HIDWORD(v58);
    }
    if (v15 == v17)
      goto LABEL_39;
  }
  v27 = a9;
  if (v15)
  {
    v30 = (JSC::JSObject *)a6;
    v31 = v13;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    LOBYTE(v13) = v31;
    a6 = (uint64_t)v30;
    v26 = v32;
    *v32 = 1;
    goto LABEL_28;
  }
LABEL_39:
  if (!v14)
  {
    v26 = 0;
    goto LABEL_27;
  }
  v33 = v13;
  v34 = (JSC::JSObject *)a6;
  v27 = a9;
  v35 = v57;
  *a9 = 0;
  v60[0] = (WTF *)v61;
  LODWORD(v60[1]) = 8;
  if (v35 == (WTF *)v59)
  {
    v36 = 24 * v14;
    memcpy(v61, v59, 24 * ((v36 - 24) / 0x18uLL) + 24);
  }
  else
  {
    v57 = (WTF *)v59;
    v60[0] = v35;
    v52 = v58;
    LODWORD(v58) = 8;
    LODWORD(v60[1]) = v52;
    v36 = 24 * v14;
  }
  HIDWORD(v58) = 0;
  HIDWORD(v60[1]) = v14;
  v26 = (_DWORD *)WTF::fastMalloc((WTF *)(v36 + 8));
  v37 = v60[0];
  v38 = HIDWORD(v60[1]);
  *v26 = 1;
  v26[1] = v14;
  if ((_DWORD)v38)
  {
    v39 = v26 + 2;
    v40 = 24 * v38;
    a6 = (uint64_t)v34;
    LOBYTE(v13) = v33;
    do
    {
      v41 = *(_OWORD *)v37;
      *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
      *(_OWORD *)v39 = v41;
      v39 += 6;
      v37 = (WTF *)((char *)v37 + 24);
      v40 -= 24;
    }
    while (v40);
    v37 = v60[0];
  }
  else
  {
    a6 = (uint64_t)v34;
    LOBYTE(v13) = v33;
  }
  if (v61 != (_QWORD *)v37 && v37 != 0)
  {
    v60[0] = 0;
    LODWORD(v60[1]) = 0;
    WTF::fastFree((unint64_t)v37, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    LOBYTE(v13) = v33;
    a6 = (uint64_t)v34;
  }
LABEL_28:
  *v27 = v26;
  v28 = v57;
  if (v59 != (_BYTE *)v57 && v57 != 0)
  {
    v57 = 0;
    LODWORD(v58) = 0;
    v46 = a6;
    v47 = v13;
    WTF::fastFree((unint64_t)v28, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    LOBYTE(v13) = v47;
    LODWORD(a6) = v46;
  }
  if ((!v26 || v26[1]) && (_DWORD)a6 != v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1981EB658);
  }
}

void JSC::generateConditionsForPrototypeEquivalenceConcurrently(JSC::VM *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *p_dst;
  int v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  WTF *v45;
  WTF *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  WTF *v61;
  uint64_t v62;
  _BYTE v63[192];
  __int128 __dst;
  _QWORD v65[24];
  char __s[3];
  _BYTE v67[39];

  v11 = a3;
  *(_QWORD *)&v67[23] = *MEMORY[0x1E0C80C00];
  v61 = (WTF *)v63;
  v62 = 8;
  while (1)
  {
    v13 = *(unsigned __int8 *)(v11 + 9);
    if (v13 == 61 || v13 == 32 || !*(_QWORD *)(v11 + 48))
      goto LABEL_53;
    if (a4)
      goto LABEL_6;
    if (!a5)
      goto LABEL_6;
    if (v13 - 39 > 0xA)
      goto LABEL_6;
    v20 = *(_DWORD *)(a5 + 16);
    if ((v20 & 0x20) != 0)
      goto LABEL_6;
    v21 = *(unsigned int *)(a5 + 4);
    if (!(_DWORD)v21)
      goto LABEL_6;
    v22 = *(unsigned __int8 **)(a5 + 8);
    if ((v20 & 4) == 0)
    {
      v23 = *(unsigned __int16 *)v22;
      if ((_DWORD)v21 == 1)
        goto LABEL_24;
      if (v23 != 45)
      {
        if ((v23 - 48) >= 0xA && ((_DWORD)v21 != 8 || v23 != 73))
        {
LABEL_82:
          if ((_DWORD)v21 != 3 || v23 != 78)
            goto LABEL_6;
        }
LABEL_42:
        v58 = v58 & 0xFFFFFF0000000000 | v21 | ((unint64_t)((v20 >> 2) & 1) << 32);
        JSC::jsToNumber(v22, v58);
        v36 = (v35 >> 52) & 0x7FF;
        if ((_DWORD)v36 != 2047)
        {
          v37 = v35 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v35 & 0x8000000000000000) != 0 && v37)
          {
            v38 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            if (!v37)
            {
              v42 = &__s[1];
              __s[0] = 48;
              goto LABEL_38;
            }
            v38 = __s;
          }
          v39 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v35 & 0x800FFFFFFFFFFFFFLL, v36);
          v42 = WTF::dragonbox::detail::to_shortest(v39, v40, (uint64_t)v38, v41);
          goto LABEL_38;
        }
        if ((v35 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          v42 = v67;
          qmemcpy(__s, "NaN", sizeof(__s));
        }
        else
        {
          if ((v35 & 0x8000000000000000) != 0)
          {
            v55 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            v55 = __s;
          }
          *(_QWORD *)v55 = 0x7974696E69666E49;
          v42 = v55 + 8;
        }
LABEL_38:
        *v42 = 0;
        v33 = strlen(__s);
        memcpy(&__dst, __s, v33);
        *((_BYTE *)&v65[-2] + v33) = 0;
        v34 = *(unsigned int *)(a5 + 4);
        v27 = *(unsigned __int8 **)(a5 + 8);
        if ((*(_BYTE *)(a5 + 16) & 4) != 0)
        {
          if ((_DWORD)v34)
          {
            p_dst = (unsigned __int8 *)&__dst;
            v28 = *(unsigned int *)(a5 + 4);
            while (1)
            {
              v26 = *p_dst++;
              v25 = v26;
              if (!v26 || *v27 != v25)
                break;
              ++v27;
              if (!--v28)
                goto LABEL_46;
            }
          }
          else
          {
LABEL_46:
            if (!*((_BYTE *)&v65[-2] + v34))
              goto LABEL_64;
          }
        }
        else
        {
          if (!(_DWORD)v34)
            goto LABEL_46;
          v29 = (unsigned __int8 *)&__dst;
          v32 = *(unsigned int *)(a5 + 4);
          while (1)
          {
            v31 = *v29++;
            v30 = v31;
            if (!v31 || *(unsigned __int16 *)v27 != v30)
              break;
            v27 += 2;
            if (!--v32)
              goto LABEL_46;
          }
        }
        v13 = *(unsigned __int8 *)(v11 + 9);
        goto LABEL_6;
      }
      v23 = *((unsigned __int16 *)v22 + 1);
      goto LABEL_36;
    }
    v23 = *v22;
    if ((_DWORD)v21 == 1)
    {
LABEL_24:
      if ((v23 - 48) < 0xA)
        goto LABEL_64;
      goto LABEL_6;
    }
    if (v23 == 45)
    {
      v23 = v22[1];
LABEL_36:
      if ((v23 - 48) < 0xA)
      {
        if ((_DWORD)v21 == 2)
          goto LABEL_64;
        goto LABEL_42;
      }
      if ((_DWORD)v21 != 9)
        goto LABEL_6;
      goto LABEL_78;
    }
    if ((v23 - 48) < 0xA)
      goto LABEL_42;
    if ((_DWORD)v21 != 8)
      goto LABEL_82;
LABEL_78:
    if (v23 == 73)
      goto LABEL_42;
LABEL_6:
    if (v13 < 0x17)
    {
      if (v13 == 2)
        v14 = (_QWORD *)a2[149];
      else
        v14 = (_QWORD *)(v13 == 3 ? a2[151] : a2[152]);
    }
    else
    {
      v14 = *(_QWORD **)(v11 + 48);
    }
    if (v14 == (_QWORD *)2)
      break;
    v11 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 0x10) & 3) != 0)
      goto LABEL_53;
    v15 = v14 == (_QWORD *)a4 ? 5 : 2;
    if ((*((_QWORD *)&__dst + 1) & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_53;
    if (HIDWORD(v62) == (_DWORD)v62)
    {
      v56 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v61, (void *)(HIDWORD(v62) + 1), (unint64_t)&__dst, a4, a5, a6, a7, a8);
      v16 = (char *)v61 + 24 * HIDWORD(v62);
      v17 = *(_OWORD *)v56;
      v18 = *(_QWORD *)(v56 + 16);
    }
    else
    {
      v16 = (char *)v61 + 24 * HIDWORD(v62);
      v17 = __dst;
      v18 = v65[0];
    }
    *((_QWORD *)v16 + 2) = v18;
    *(_OWORD *)v16 = v17;
    v19 = ++HIDWORD(v62);
    if (v14 == (_QWORD *)a4)
      goto LABEL_65;
  }
  if (a4)
  {
LABEL_53:
    v43 = WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v43 = 1;
    v44 = a9;
    goto LABEL_54;
  }
LABEL_64:
  v19 = HIDWORD(v62);
LABEL_65:
  v44 = a9;
  if (v19)
  {
    *a9 = 0;
    *(_QWORD *)&__dst = v65;
    DWORD2(__dst) = 8;
    v47 = v61;
    if (v61 == (WTF *)v63)
    {
      v48 = 24 * v19;
      memcpy(v65, v63, 24 * ((v48 - 24) / 0x18uLL) + 24);
    }
    else
    {
      v61 = (WTF *)v63;
      *(_QWORD *)&__dst = v47;
      v57 = v62;
      LODWORD(v62) = 8;
      DWORD2(__dst) = v57;
      v48 = 24 * v19;
    }
    HIDWORD(v62) = 0;
    HIDWORD(__dst) = v19;
    v43 = WTF::fastMalloc((WTF *)(v48 + 8));
    v49 = (_QWORD *)__dst;
    v50 = HIDWORD(__dst);
    *(_DWORD *)v43 = 1;
    *(_DWORD *)(v43 + 4) = v19;
    if ((_DWORD)v50)
    {
      v51 = v43 + 8;
      v52 = 24 * v50;
      do
      {
        v53 = *(_OWORD *)v49;
        *(_QWORD *)(v51 + 16) = v49[2];
        *(_OWORD *)v51 = v53;
        v51 += 24;
        v49 += 3;
        v52 -= 24;
      }
      while (v52);
      v49 = (_QWORD *)__dst;
    }
    if (v65 != v49 && v49 != 0)
    {
      *(_QWORD *)&__dst = 0;
      DWORD2(__dst) = 0;
      WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v43 = 0;
  }
LABEL_54:
  *v44 = v43;
  v45 = v61;
  if (v63 != (_BYTE *)v61 && v61 != 0)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    WTF::fastFree((unint64_t)v45, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::generateConditionsForPropertyMissConcurrently(JSC::VM *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int8 *p_dst;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v46;
  WTF *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v55;
  int v56;
  WTF *v57;
  uint64_t i;
  _BYTE v59[192];
  __int128 __dst;
  _QWORD v61[24];
  char __s[3];
  _BYTE v63[39];

  v10 = (unint64_t)a4;
  v11 = a3;
  *(_QWORD *)&v63[23] = *MEMORY[0x1E0C80C00];
  v57 = (WTF *)v59;
  for (i = 8; ; ++HIDWORD(i))
  {
    v15 = *(unsigned __int8 *)(v11 + 9);
    if (v15 == 61 || v15 == 32 || !*(_QWORD *)(v11 + 48))
    {
LABEL_58:
      v43 = WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v43 = 1;
      goto LABEL_59;
    }
    if (!v10)
      goto LABEL_12;
    if (v15 - 39 > 0xA)
      goto LABEL_12;
    v16 = *(_DWORD *)(v10 + 16);
    if ((v16 & 0x20) != 0)
      goto LABEL_12;
    v17 = *(unsigned int *)(v10 + 4);
    if (!(_DWORD)v17)
      goto LABEL_12;
    v18 = *(unsigned __int8 **)(v10 + 8);
    if ((v16 & 4) == 0)
    {
      v19 = *(unsigned __int16 *)v18;
      if ((_DWORD)v17 == 1)
        goto LABEL_11;
      if (v19 != 45)
      {
        if ((v19 - 48) >= 0xA && ((_DWORD)v17 != 8 || v19 != 73))
        {
LABEL_91:
          if ((_DWORD)v17 != 3 || v19 != 78)
            goto LABEL_12;
        }
LABEL_26:
        v9 = v9 & 0xFFFFFF0000000000 | v17 | ((unint64_t)((v16 >> 2) & 1) << 32);
        JSC::jsToNumber(v18, v9);
        v24 = (v23 >> 52) & 0x7FF;
        if ((_DWORD)v24 != 2047)
        {
          v26 = v23 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v23 & 0x8000000000000000) != 0 && v26)
          {
            v27 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            if (!v26)
            {
              v25 = &__s[1];
              __s[0] = 48;
              goto LABEL_33;
            }
            v27 = __s;
          }
          v28 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v23 & 0x800FFFFFFFFFFFFFLL, v24);
          v25 = WTF::dragonbox::detail::to_shortest(v28, v29, (uint64_t)v27, v30);
          goto LABEL_33;
        }
        if ((v23 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          v25 = v63;
          qmemcpy(__s, "NaN", sizeof(__s));
        }
        else
        {
          if ((v23 & 0x8000000000000000) != 0)
          {
            v42 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            v42 = __s;
          }
          *(_QWORD *)v42 = 0x7974696E69666E49;
          v25 = v42 + 8;
        }
LABEL_33:
        *v25 = 0;
        v31 = strlen(__s);
        memcpy(&__dst, __s, v31);
        *((_BYTE *)&v61[-2] + v31) = 0;
        v32 = *(unsigned int *)(v10 + 4);
        v33 = *(unsigned __int8 **)(v10 + 8);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        {
          if ((_DWORD)v32)
          {
            p_dst = (unsigned __int8 *)&__dst;
            v39 = *(unsigned int *)(v10 + 4);
            do
            {
              v41 = *p_dst++;
              v40 = v41;
              if (!v41 || *v33 != v40)
                goto LABEL_46;
              ++v33;
            }
            while (--v39);
          }
        }
        else if ((_DWORD)v32)
        {
          v34 = (unsigned __int8 *)&__dst;
          v35 = *(unsigned int *)(v10 + 4);
          while (1)
          {
            v37 = *v34++;
            v36 = v37;
            if (!v37 || *(unsigned __int16 *)v33 != v36)
              break;
            v33 += 2;
            if (!--v35)
              goto LABEL_45;
          }
LABEL_46:
          v15 = *(unsigned __int8 *)(v11 + 9);
          goto LABEL_12;
        }
LABEL_45:
        if (!*((_BYTE *)&v61[-2] + v32))
          break;
        goto LABEL_46;
      }
      v19 = *((unsigned __int16 *)v18 + 1);
      goto LABEL_22;
    }
    v19 = *v18;
    if ((_DWORD)v17 == 1)
    {
LABEL_11:
      if ((v19 - 48) < 0xA)
        break;
      goto LABEL_12;
    }
    if (v19 == 45)
    {
      v19 = v18[1];
LABEL_22:
      if ((v19 - 48) < 0xA)
      {
        if ((_DWORD)v17 == 2)
          break;
        goto LABEL_26;
      }
      if ((_DWORD)v17 != 9)
        goto LABEL_12;
      goto LABEL_48;
    }
    if ((v19 - 48) < 0xA)
      goto LABEL_26;
    if ((_DWORD)v17 != 8)
      goto LABEL_91;
LABEL_48:
    if (v19 == 73)
      goto LABEL_26;
LABEL_12:
    if (v15 < 0x17)
    {
      if (v15 == 2)
        a4 = (_QWORD *)a2[149];
      else
        a4 = (_QWORD *)(v15 == 3 ? a2[151] : a2[152]);
    }
    else
    {
      a4 = *(_QWORD **)(v11 + 48);
    }
    if (a4 == (_QWORD *)2)
      break;
    v11 = 16 * (*(_DWORD *)a4 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 0x10) & 3) != 0)
      goto LABEL_58;
    if ((*((_QWORD *)&__dst + 1) & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_58;
    if (HIDWORD(i) == (_DWORD)i)
    {
      v55 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, (void *)(HIDWORD(i) + 1), (unint64_t)&__dst, (uint64_t)a4, a5, a6, a7, a8);
      v20 = (char *)v57 + 24 * HIDWORD(i);
      v21 = *(_OWORD *)v55;
      v22 = *(_QWORD *)(v55 + 16);
    }
    else
    {
      v20 = (char *)v57 + 24 * HIDWORD(i);
      v21 = __dst;
      v22 = v61[0];
    }
    *((_QWORD *)v20 + 2) = v22;
    *(_OWORD *)v20 = v21;
  }
  v46 = HIDWORD(i);
  if (HIDWORD(i))
  {
    *a9 = 0;
    *(_QWORD *)&__dst = v61;
    DWORD2(__dst) = 8;
    v47 = v57;
    if (v57 == (WTF *)v59)
    {
      v48 = 24 * v46;
      memcpy(v61, v59, 24 * ((v48 - 24) / 0x18uLL) + 24);
    }
    else
    {
      v57 = (WTF *)v59;
      *(_QWORD *)&__dst = v47;
      v56 = i;
      LODWORD(i) = 8;
      DWORD2(__dst) = v56;
      v48 = 24 * v46;
    }
    HIDWORD(i) = 0;
    HIDWORD(__dst) = v46;
    v43 = WTF::fastMalloc((WTF *)(v48 + 8));
    v49 = (_QWORD *)__dst;
    v50 = HIDWORD(__dst);
    *(_DWORD *)v43 = 1;
    *(_DWORD *)(v43 + 4) = v46;
    if ((_DWORD)v50)
    {
      v51 = v43 + 8;
      v52 = 24 * v50;
      do
      {
        v53 = *(_OWORD *)v49;
        *(_QWORD *)(v51 + 16) = v49[2];
        *(_OWORD *)v51 = v53;
        v51 += 24;
        v49 += 3;
        v52 -= 24;
      }
      while (v52);
      v49 = (_QWORD *)__dst;
    }
    if (v61 != v49 && v49 != 0)
    {
      *(_QWORD *)&__dst = 0;
      DWORD2(__dst) = 0;
      WTF::fastFree((unint64_t)v49, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v43 = 0;
  }
LABEL_59:
  *a9 = v43;
  v44 = v57;
  if (v59 != (_BYTE *)v57 && v57 != 0)
  {
    v57 = 0;
    LODWORD(i) = 0;
    WTF::fastFree((unint64_t)v44, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
}

void JSC::generateConditionsForPropertySetterMissConcurrently(JSC::VM *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int8 *p_dst;
  uint64_t v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v46;
  WTF *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v55;
  int v56;
  WTF *v57;
  uint64_t i;
  _BYTE v59[192];
  __int128 __dst;
  _QWORD v61[24];
  char __s[3];
  _BYTE v63[39];

  v10 = (unint64_t)a4;
  v11 = a3;
  *(_QWORD *)&v63[23] = *MEMORY[0x1E0C80C00];
  v57 = (WTF *)v59;
  for (i = 8; ; ++HIDWORD(i))
  {
    v15 = *(unsigned __int8 *)(v11 + 9);
    if (v15 == 61 || v15 == 32 || !*(_QWORD *)(v11 + 48))
    {
LABEL_58:
      v43 = WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v43 = 1;
      goto LABEL_59;
    }
    if (!v10)
      goto LABEL_12;
    if (v15 - 39 > 0xA)
      goto LABEL_12;
    v16 = *(_DWORD *)(v10 + 16);
    if ((v16 & 0x20) != 0)
      goto LABEL_12;
    v17 = *(unsigned int *)(v10 + 4);
    if (!(_DWORD)v17)
      goto LABEL_12;
    v18 = *(unsigned __int8 **)(v10 + 8);
    if ((v16 & 4) == 0)
    {
      v19 = *(unsigned __int16 *)v18;
      if ((_DWORD)v17 == 1)
        goto LABEL_11;
      if (v19 != 45)
      {
        if ((v19 - 48) >= 0xA && ((_DWORD)v17 != 8 || v19 != 73))
        {
LABEL_91:
          if ((_DWORD)v17 != 3 || v19 != 78)
            goto LABEL_12;
        }
LABEL_26:
        v9 = v9 & 0xFFFFFF0000000000 | v17 | ((unint64_t)((v16 >> 2) & 1) << 32);
        JSC::jsToNumber(v18, v9);
        v24 = (v23 >> 52) & 0x7FF;
        if ((_DWORD)v24 != 2047)
        {
          v26 = v23 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v23 & 0x8000000000000000) != 0 && v26)
          {
            v27 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            if (!v26)
            {
              v25 = &__s[1];
              __s[0] = 48;
              goto LABEL_33;
            }
            v27 = __s;
          }
          v28 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v23 & 0x800FFFFFFFFFFFFFLL, v24);
          v25 = WTF::dragonbox::detail::to_shortest(v28, v29, (uint64_t)v27, v30);
          goto LABEL_33;
        }
        if ((v23 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          v25 = v63;
          qmemcpy(__s, "NaN", sizeof(__s));
        }
        else
        {
          if ((v23 & 0x8000000000000000) != 0)
          {
            v42 = &__s[1];
            __s[0] = 45;
          }
          else
          {
            v42 = __s;
          }
          *(_QWORD *)v42 = 0x7974696E69666E49;
          v25 = v42 + 8;
        }
LABEL_33:
        *v25 = 0;
        v31 = strlen(__s);
        memcpy(&__dst, __s, v31);
        *((_BYTE *)&v61[-2] + v31) = 0;
        v32 = *(unsigned int *)(v10 + 4);
        v33 = *(unsigned __int8 **)(v10 + 8);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        {
          if ((_DWORD)v32)
          {
            p_dst = (unsigned __int8 *)&__dst;
            v39 = *(unsigned int *)(v10 + 4);
            do
            {
              v41 = *p_dst++;
              v40 = v41;
              if (!v41 || *v33 != v40)
                goto LABEL_46;
              ++v33;
            }
            while (--v39);
          }
        }
        else if ((_DWORD)v32)
        {
          v34 = (unsigned __int8 *)&__dst;
          v35 = *(unsigned int *)(v10 + 4);
          while (1)
          {
            v37 = *v34++;
            v36 = v37;
            if (!v37 || *(unsigned __int16 *)v33 != v36)
              break;
            v33 += 2;
            if (!--v35)
              goto LABEL_45;
          }
LABEL_46:
          v15 = *(unsigned __int8 *)(v11 + 9);
          goto LABEL_12;
        }
LABEL_45:
        if (!*((_BYTE *)&v61[-2] + v32))
          break;
        goto LABEL_46;
      }
      v19 = *((unsigned __int16 *)v18 + 1);
      goto LABEL_22;
    }
    v19 = *v18;
    if ((_DWORD)v17 == 1)
    {
LABEL_11:
      if ((v19 - 48) < 0xA)
        break;
      goto LABEL_12;
    }
    if (v19 == 45)
    {
      v19 = v18[1];
LABEL_22:
      if ((v19 - 48) < 0xA)
      {
        if ((_DWORD)v17 == 2)
          break;
        goto LABEL_26;
      }
      if ((_DWORD)v17 != 9)
        goto LABEL_12;
      goto LABEL_48;
    }
    if ((v19 - 48) < 0xA)
      goto LABEL_26;
    if ((_DWORD)v17 != 8)
      goto LABEL_91;
LABEL_48:
    if (v19 == 73)
      goto LABEL_26;
LABEL_12:
    if (v15 < 0x17)
    {
      if (v15 == 2)
        a4 = (_QWORD *)a2[149];
      else
        a4 = (_QWORD *)(v15 == 3 ? a2[151] : a2[152]);
    }
    else
    {
      a4 = *(_QWORD **)(v11 + 48);
    }
    if (a4 == (_QWORD *)2)
      break;
    v11 = 16 * (*(_DWORD *)a4 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v11 + 0x10) & 3) != 0)
      goto LABEL_58;
    if ((*((_QWORD *)&__dst + 1) & 0xFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_58;
    if (HIDWORD(i) == (_DWORD)i)
    {
      v55 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v57, (void *)(HIDWORD(i) + 1), (unint64_t)&__dst, (uint64_t)a4, a5, a6, a7, a8);
      v20 = (char *)v57 + 24 * HIDWORD(i);
      v21 = *(_OWORD *)v55;
      v22 = *(_QWORD *)(v55 + 16);
    }
    else
    {
      v20 = (char *)v57 + 24 * HIDWORD(i);
      v21 = __dst;
      v22 = v61[0];
    }
    *((_QWORD *)v20 + 2) = v22;
    *(_OWORD *)v20 = v21;
  }
  v46 = HIDWORD(i);
  if (HIDWORD(i))
  {
    *a9 = 0;
    *(_QWORD *)&__dst = v61;
    DWORD2(__dst) = 8;
    v47 = v57;
    if (v57 == (WTF *)v59)
    {
      v48 = 24 * v46;
      memcpy(v61, v59, 24 * ((v48 - 24) / 0x18uLL) + 24);
    }
    else
    {
      v57 = (WTF *)v59;
      *(_QWORD *)&__dst = v47;
      v56 = i;
      LODWORD(i) = 8;
      DWORD2(__dst) = v56;
      v48 = 24 * v46;
    }
    HIDWORD(i) = 0;
    HIDWORD(__dst) = v46;
    v43 = WTF::fastMalloc((WTF *)(v48 + 8));
    v49 = (_QWORD *)__dst;
    v50 = HIDWORD(__dst);
    *(_DWORD *)v43 = 1;
    *(_DWORD *)(v43 + 4) = v46;
    if ((_DWORD)v50)
    {
      v51 = v43 + 8;
      v52 = 24 * v50;
      do
      {
        v53 = *(_OWORD *)v49;
        *(_QWORD *)(v51 + 16) = v49[2];
        *(_OWORD *)v51 = v53;
        v51 += 24;
        v49 += 3;
        v52 -= 24;
      }
      while (v52);
      v49 = (_QWORD *)__dst;
    }
    if (v61 != v49 && v49 != 0)
    {
      *(_QWORD *)&__dst = 0;
      DWORD2(__dst) = 0;
      WTF::fastFree((unint64_t)v49, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v43 = 0;
  }
LABEL_59:
  *a9 = v43;
  v44 = v57;
  if (v59 != (_BYTE *)v57 && v57 != 0)
  {
    v57 = 0;
    LODWORD(i) = 0;
    WTF::fastFree((unint64_t)v44, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
}

void JSC::`anonymous namespace'::generateCondition(_QWORD *a1, JSC::VM *a2, unint64_t a3, _QWORD *a4, uint64_t a5, unint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  JSC::JSCellLock *v40;
  int Concurrently;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78[2];
  char v79;
  unsigned int v80;
  __int128 v81;
  unint64_t v82;

  v81 = 0uLL;
  v82 = 0;
  v9 = a6;
  v10 = a5;
  switch((int)a7)
  {
    case 0:
      LODWORD(v78[0]) = 0;
      if ((_DWORD)a8)
      {
        if ((_DWORD)a8 != 1)
          goto LABEL_91;
        Concurrently = JSC::Structure::getConcurrently(a5, (_DWORD *)a6, v78, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
        if (Concurrently == -1)
          goto LABEL_91;
        LODWORD(v10) = Concurrently;
        v42 = LODWORD(v78[0]);
        goto LABEL_49;
      }
      if (!(a6 >> 4) || ((a6 >> 4) & ~*(_DWORD *)(a5 + 32)) != 0)
        goto LABEL_91;
      v18 = *(_QWORD *)(a5 + 88);
      if (!v18)
      {
        v43 = *(_QWORD *)(a5 + 64);
        if (!v43 || *(_BYTE *)(v43 + 5) != 1 && *(_DWORD *)(v43 + 80) < 2u)
          goto LABEL_91;
        JSC::Structure::materializePropertyTable((JSC::Structure *)a5, a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, (uint64_t)a8);
        if (!v18)
          goto LABEL_91;
      }
      if (!*(_DWORD *)(v18 + 24))
        goto LABEL_91;
      v19 = *(_QWORD *)(v18 + 16);
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v21 = *(unsigned int *)(v18 + 8);
      v22 = *(_DWORD *)(v9 + 16);
      if ((v19 & 1) != 0)
      {
        if ((v22 & 0x20) != 0)
          v22 = *(_DWORD *)(v9 + 32);
        v23 = *(_DWORD *)(v18 + 12);
        v24 = (v22 >> 8) & *(_QWORD *)&v23;
        v25 = *(unsigned __int8 *)(v20 + v24);
        if (*(_BYTE *)(v20 + v24))
        {
          v26 = v20 + v21;
          v27 = 1;
          while (1)
          {
            v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
            if ((v28 & 0xFFFFFFFFFFFFLL) == v9)
              break;
            v24 = ((_DWORD)v24 + v27) & v23;
            v25 = *(unsigned __int8 *)(v20 + v24);
            ++v27;
            if (!*(_BYTE *)(v20 + v24))
              goto LABEL_91;
          }
          v10 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
LABEL_58:
          if ((_DWORD)v10 == -1)
            goto LABEL_91;
          v42 = HIDWORD(v10);
          LODWORD(v78[0]) = HIDWORD(v10);
LABEL_49:
          if (a3)
          {
            if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
          }
          goto LABEL_52;
        }
      }
      else
      {
        if ((v22 & 0x20) != 0)
          v22 = *(_DWORD *)(v9 + 32);
        v44 = *(_DWORD *)(v18 + 12);
        v45 = v44 & (v22 >> 8);
        v46 = *(_DWORD *)(v20 + 4 * v45);
        if (v46)
        {
          v47 = v20 + 4 * v21;
          v48 = 1;
          while (1)
          {
            v49 = (v46 - 1);
            if (*(_QWORD *)(v47 + 16 * v49) == v9)
              break;
            v45 = (v45 + v48) & v44;
            v46 = *(_DWORD *)(v20 + 4 * v45);
            ++v48;
            if (!v46)
              goto LABEL_91;
          }
          v10 = *(unsigned int *)(v47 + 16 * v49 + 8) | ((unint64_t)*(unsigned __int8 *)(v47 + 16 * v49 + 12) << 32);
          goto LABEL_58;
        }
      }
      goto LABEL_91;
    case 1:
      v80 = 0;
      if ((_DWORD)a8)
      {
        if ((_DWORD)a8 != 1)
        {
          v42 = 0;
          goto LABEL_159;
        }
        v77 = JSC::Structure::getConcurrently(a5, (_DWORD *)a6, &v80, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
        if (v77 == -1)
          goto LABEL_91;
        LODWORD(v10) = v77;
        v42 = v80;
      }
      else
      {
        if (!(a6 >> 4))
          goto LABEL_91;
        if (((a6 >> 4) & ~*(_DWORD *)(a5 + 32)) != 0)
          goto LABEL_91;
        JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)a5, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, (uint64_t)a8);
        if (!v72)
          goto LABEL_91;
        v78[0] = v9;
        v73 = JSC::PropertyTable::get(v72, v78);
        LODWORD(v10) = v73;
        if ((_DWORD)v73 == -1)
          goto LABEL_91;
        v42 = HIDWORD(v73);
        v80 = HIDWORD(v73);
      }
      if ((v42 & 2) != 0)
        goto LABEL_91;
LABEL_159:
      if (a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
      v9 |= 0x1000000000000uLL;
LABEL_52:
      v16 = v10 | (v42 << 32);
LABEL_10:
      *(_QWORD *)&v81 = a4;
      *((_QWORD *)&v81 + 1) = v9;
      v82 = v16;
      goto LABEL_11;
    case 2:
      v15 = *(_QWORD *)(a5 + 48);
      if (!v15)
        goto LABEL_91;
      if (a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
      v9 |= 0x2000000000000uLL;
      goto LABEL_7;
    case 3:
      v15 = *(_QWORD *)(a5 + 48);
      if (!v15)
        goto LABEL_91;
      if (a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
      v9 |= 0x3000000000000uLL;
LABEL_7:
      if (v15 == 2)
        v16 = 0;
      else
        v16 = v15;
      goto LABEL_10;
    case 4:
      v69 = *(_QWORD *)(a5 + 48);
      if (!v69)
        goto LABEL_91;
      if ((*(_BYTE *)(a5 + 8) & 0xE) != 0)
        goto LABEL_91;
      if ((*(_BYTE *)(a5 + 8) & 0x20) != 0)
        goto LABEL_91;
      v70 = *(_QWORD *)(a5 + 40);
      if (v70)
      {
        if (*(_BYTE *)(*(_QWORD *)(v70 + 2048) + 4) == 2)
          goto LABEL_91;
      }
      if ((*(_WORD *)(a5 + 12) & 0x100) != 0)
        goto LABEL_91;
      if (a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
      if (v69 == 2)
        v71 = 0;
      else
        v71 = v69;
      *(_QWORD *)&v81 = a4;
      *((_QWORD *)&v81 + 1) = 0x4000000000000;
      v82 = v71;
      goto LABEL_12;
    case 5:
      if (!(_DWORD)a8)
      {
        LODWORD(v78[0]) = 0;
        if ((a6 >> 4) && ((a6 >> 4) & ~*(_DWORD *)(a5 + 32)) == 0)
        {
          v29 = *(_QWORD *)(a5 + 88);
          if (v29
            || (v50 = *(_QWORD *)(a5 + 64)) != 0
            && (*(_BYTE *)(v50 + 5) == 1 || *(_DWORD *)(v50 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable((JSC::Structure *)a5, a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, (uint64_t)a8), v29))
          {
            if (*(_DWORD *)(v29 + 24))
            {
              v30 = *(_QWORD *)(v29 + 16);
              v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
              v32 = *(unsigned int *)(v29 + 8);
              v33 = *(_DWORD *)(v9 + 16);
              if ((v30 & 1) != 0)
              {
                if ((v33 & 0x20) != 0)
                  v33 = *(_DWORD *)(v9 + 32);
                v34 = *(_DWORD *)(v29 + 12);
                v35 = (v33 >> 8) & *(_QWORD *)&v34;
                v36 = *(unsigned __int8 *)(v31 + v35);
                if (!*(_BYTE *)(v31 + v35))
                  goto LABEL_106;
                v37 = v31 + v32;
                v38 = 1;
                while (1)
                {
                  v39 = *(_QWORD *)(v37 + 8 * (v36 - 1));
                  if ((v39 & 0xFFFFFFFFFFFFLL) == v9)
                    break;
                  v40 = 0;
                  v35 = ((_DWORD)v35 + v38) & v34;
                  v36 = *(unsigned __int8 *)(v31 + v35);
                  ++v38;
                  if (!*(_BYTE *)(v31 + v35))
                    goto LABEL_107;
                }
                v51 = (v39 >> 16) & 0xFF00000000 | HIBYTE(v39);
              }
              else
              {
                if ((v33 & 0x20) != 0)
                  v33 = *(_DWORD *)(v9 + 32);
                v55 = *(_DWORD *)(v29 + 12);
                v56 = v55 & (v33 >> 8);
                v57 = *(_DWORD *)(v31 + 4 * v56);
                if (!v57)
                  goto LABEL_106;
                v58 = v31 + 4 * v32;
                v59 = 1;
                while (1)
                {
                  v60 = (v57 - 1);
                  if (*(_QWORD *)(v58 + 16 * v60) == v9)
                    break;
                  v40 = 0;
                  v56 = (v56 + v59) & v55;
                  v57 = *(_DWORD *)(v31 + 4 * v56);
                  ++v59;
                  if (!v57)
                    goto LABEL_107;
                }
                v51 = *(unsigned int *)(v58 + 16 * v60 + 8) | ((unint64_t)*(unsigned __int8 *)(v58 + 16 * v60 + 12) << 32);
              }
              if ((_DWORD)v51 != -1)
              {
                v40 = 0;
                LODWORD(v78[0]) = HIDWORD(v51);
                goto LABEL_75;
              }
            }
          }
        }
LABEL_106:
        v40 = 0;
        goto LABEL_107;
      }
      v64 = (unsigned __int8 *)a4 + 4;
      while (1)
      {
        v65 = *v64;
        if ((v65 & 0x40) != 0)
          break;
        v66 = __ldaxr(v64);
        if (v66 == v65)
        {
          if (!__stxr(v65 | 0x40, v64))
            goto LABEL_148;
        }
        else
        {
          __clrex();
        }
      }
      JSC::JSCellLock::lockSlow((JSC::JSCellLock *)a4);
LABEL_148:
      if (v10 != 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
      {
        v53 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        v54 = 1;
        v40 = (JSC::JSCellLock *)a4;
        goto LABEL_165;
      }
      LODWORD(v78[0]) = 0;
      LODWORD(v51) = JSC::Structure::getConcurrently(v10, (_DWORD *)v9, v78, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      v40 = (JSC::JSCellLock *)a4;
      if ((_DWORD)v51 != -1)
      {
LABEL_75:
        if (!(_DWORD)a8)
        {
          if ((int)v51 <= 63)
          {
            v52 = (uint64_t)(a4 + 2);
          }
          else
          {
            v52 = a4[1] - 8;
            LODWORD(v51) = 63 - v51;
          }
          v53 = *(_QWORD *)(v52 + 8 * (int)v51);
LABEL_79:
          if (v53)
          {
            v54 = 0;
            goto LABEL_108;
          }
          goto LABEL_107;
        }
        if ((_DWORD)a8 != 1)
          goto LABEL_107;
        v61 = (unsigned __int8 *)(v10 + 15);
        if (__ldaxr((unsigned __int8 *)(v10 + 15)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v61))
        {
LABEL_96:
          v63 = *(unsigned __int16 *)(v10 + 24);
          if (v63 == 65534)
          {
            v63 = -1;
          }
          else if (v63 == 0xFFFF)
          {
            v63 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 84);
          }
          if (v63 < (int)v51 || (int)v51 <= 63 && (int)v51 >= *(unsigned __int8 *)(v10 + 14))
          {
            v53 = 0;
          }
          else
          {
            if ((int)v51 <= 63)
            {
              v67 = (uint64_t)(a4 + 2);
            }
            else
            {
              v67 = a4[1] - 8;
              LODWORD(v51) = 63 - v51;
            }
            v53 = *(_QWORD *)(v67 + 8 * (int)v51);
          }
          v68 = __ldxr(v61);
          if (v68 == 1)
          {
            if (!__stlxr(0, v61))
              goto LABEL_79;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v61, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
          goto LABEL_79;
        }
        WTF::Lock::lockSlow((WTF::Lock *)(v10 + 15));
        goto LABEL_96;
      }
LABEL_107:
      v53 = 0;
      *a1 = 0;
      a1[1] = 0;
      v54 = 1;
      a1[2] = 0;
LABEL_108:
      if (!v40)
        goto LABEL_109;
LABEL_165:
      v74 = (unsigned __int8 *)v40 + 4;
      while (1)
      {
        v75 = *v74;
        if ((v75 & 0xC0) != 0x40)
          break;
        v76 = __ldxr(v74);
        if (v76 == v75)
        {
          if (!__stxr(v75 & 0xBF, v74))
            goto LABEL_109;
        }
        else
        {
          __clrex();
        }
      }
      JSC::JSCellLock::unlockSlow(v40, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
LABEL_109:
      if (!v54)
      {
        if (a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
        v9 |= 0x5000000000000uLL;
        *(_QWORD *)&v81 = a4;
        *((_QWORD *)&v81 + 1) = v9;
        v82 = v53;
LABEL_11:
        if ((v9 & 0xFFFFFFFFFFFFFFLL) != 0)
        {
LABEL_12:
          JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)&v81 + 1, a8, 16 * (*(_DWORD *)a4 & 0xFFFFFFFE), (const JSC::PropertyTable *)a4, a5, a6, a7, (uint64_t)a8);
          if ((v17 & 1) != 0)
          {
            *(_OWORD *)a1 = v81;
            a1[2] = v82;
            return;
          }
        }
LABEL_91:
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      return;
    case 6:
      JSC::JSObject::findPropertyHashEntry(a4, a6, (uint64_t)v78);
      if (!v79)
        goto LABEL_91;
      v9 |= 0x6000000000000uLL;
      if (a3 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(a3 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, a3);
      *(_QWORD *)&v81 = a4;
      *((_QWORD *)&v81 + 1) = v9;
      v82 = 0;
      goto LABEL_11;
    default:
      __break(0xC471u);
      JUMPOUT(0x1981ECDD8);
  }
}

uint64_t JSC::prepareChainForCaching(_QWORD *a1, JSC::JSObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  char v14;
  char v15;
  JSC::VM *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  __int16 v22;
  unsigned int v23;
  int v24;
  int v25;
  JSC::JSObject *v26;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  double v31;
  const unsigned __int8 *v32;
  _BYTE v33[124];
  uint64_t v34;

  v14 = 0;
  v15 = 0;
  v34 = *MEMORY[0x1E0C80C00];
  v16 = (JSC::VM *)a1[7];
  if (a3)
    v17 = a4 == 0;
  else
    v17 = 0;
  v18 = v17;
  while (1)
  {
    v19 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
    v20 = *(_DWORD *)(v19 + 0x10);
    if ((v20 & 3) != 0)
    {
      if ((v20 & 0x800000) != 0)
        goto LABEL_30;
      JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a2 & 0xFFFFFFFE), v16, a2, a4, a5, a6, a7, a8);
      if ((*(_DWORD *)(v19 + 16) & 3) == 2)
        goto LABEL_30;
      v14 = 1;
    }
    v21 = *(_WORD *)(v19 + 12);
    if ((v21 & 8) != 0 || (v21 & 0x10) != 0 && (v21 & 0x20) == 0)
      goto LABEL_30;
    v22 = 0;
    v23 = *(unsigned __int8 *)(v19 + 9);
    v24 = 0;
    if (v23 == 32 || v23 == 61)
      return (unsigned __int16)(v22 | ((_WORD)v8 << 8)) | (v24 << 16);
    if (a2 == (JSC::JSObject *)a4)
      goto LABEL_22;
    if (v23 - 39 < 0xB)
      v25 = v18;
    else
      v25 = 0;
    if (v25 == 1)
    {
      v28 = *(_DWORD *)(a3 + 16);
      if ((v28 & 0x20) == 0)
      {
        v29 = *(unsigned int *)(a3 + 4);
        if ((_DWORD)v29)
        {
          v30 = *(unsigned __int8 **)(a3 + 8);
          if ((v28 & 4) != 0)
          {
            v8 = *v30;
            if ((_DWORD)v29 == 1)
            {
LABEL_40:
              if ((v8 - 48) < 0xA)
                goto LABEL_22;
              goto LABEL_17;
            }
            if (v8 == 45)
            {
              v8 = v30[1];
              goto LABEL_45;
            }
            if ((v8 - 48) >= 0xA)
            {
              if ((_DWORD)v29 == 8)
                goto LABEL_52;
              goto LABEL_56;
            }
          }
          else
          {
            v8 = *(unsigned __int16 *)v30;
            if ((_DWORD)v29 == 1)
              goto LABEL_40;
            if (v8 == 45)
            {
              v8 = *((unsigned __int16 *)v30 + 1);
LABEL_45:
              if ((v8 - 48) < 0xA)
              {
                if ((_DWORD)v29 == 2)
                  goto LABEL_22;
                goto LABEL_49;
              }
              if ((_DWORD)v29 != 9)
                goto LABEL_17;
LABEL_52:
              if (v8 != 73)
                goto LABEL_17;
              goto LABEL_49;
            }
            if ((v8 - 48) >= 0xA && ((_DWORD)v29 != 8 || v8 != 73))
            {
LABEL_56:
              if ((_DWORD)v29 != 3 || v8 != 78)
                goto LABEL_17;
            }
          }
LABEL_49:
          v9 = v9 & 0xFFFFFF0000000000 | v29 | ((unint64_t)((v28 >> 2) & 1) << 32);
          JSC::jsToNumber(v30, v9);
          WTF::numberToString(v33, v31);
          if (WTF::equal(a3, (unint64_t)v33, v32))
            goto LABEL_22;
          v23 = *(unsigned __int8 *)(v19 + 9);
        }
      }
    }
LABEL_17:
    v26 = *(JSC::JSObject **)(v19 + 48);
    if (v26)
    {
      if (v23 <= 0x16)
      {
        if (v23 == 2)
        {
          v26 = (JSC::JSObject *)a1[149];
        }
        else if (v23 == 3)
        {
          v26 = (JSC::JSObject *)a1[151];
        }
        else
        {
          v26 = (JSC::JSObject *)a1[152];
        }
      }
    }
    else
    {
      if (v23 < 0x17)
      {
        if (v23 == 2)
          v26 = (JSC::JSObject *)a1[149];
        else
          v26 = (JSC::JSObject *)(v23 == 3 ? a1[151] : a1[152]);
      }
      else
      {
        v26 = (JSC::JSObject *)*((_QWORD *)a2 + 2);
      }
      v15 = 1;
    }
    if (v26 == (JSC::JSObject *)2)
      break;
    a2 = v26;
  }
  if (!a4)
  {
LABEL_22:
    v22 = v15 & 1;
    LOWORD(v8) = v14 & 1;
    v24 = 1;
    return (unsigned __int16)(v22 | ((_WORD)v8 << 8)) | (v24 << 16);
  }
LABEL_30:
  v22 = 0;
  v24 = 0;
  return (unsigned __int16)(v22 | ((_WORD)v8 << 8)) | (v24 << 16);
}

{
  int v8;
  unint64_t v9;
  char v13;
  char v14;
  JSC::JSObject *v15;
  JSC::VM *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  __int16 v22;
  unsigned int v23;
  int v24;
  int v25;
  JSC::JSObject *v26;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  double v31;
  const unsigned __int8 *v32;
  _BYTE v33[124];
  uint64_t v34;

  v13 = 0;
  v14 = 0;
  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a4 + 49))
    v15 = *(JSC::JSObject **)(a4 + 32);
  else
    v15 = 0;
  v16 = (JSC::VM *)a1[7];
  if (a3)
    v17 = v15 == 0;
  else
    v17 = 0;
  v18 = v17;
  while (1)
  {
    v19 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
    v20 = *(_DWORD *)(v19 + 0x10);
    if ((v20 & 3) != 0)
    {
      if ((v20 & 0x800000) != 0)
        goto LABEL_33;
      JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a2 & 0xFFFFFFFE), v16, a2, a4, a5, a6, a7, a8);
      if ((*(_DWORD *)(v19 + 16) & 3) == 2)
        goto LABEL_33;
      v13 = 1;
    }
    v21 = *(_WORD *)(v19 + 12);
    if ((v21 & 8) != 0 || (v21 & 0x10) != 0 && (v21 & 0x20) == 0)
      goto LABEL_33;
    v22 = 0;
    v23 = *(unsigned __int8 *)(v19 + 9);
    v24 = 0;
    if (v23 == 32 || v23 == 61)
      return (unsigned __int16)(v22 | ((_WORD)v8 << 8)) | (v24 << 16);
    if (a2 == v15)
      goto LABEL_25;
    if (v23 - 39 < 0xB)
      v25 = v18;
    else
      v25 = 0;
    if (v25 == 1)
    {
      v28 = *(_DWORD *)(a3 + 16);
      if ((v28 & 0x20) == 0)
      {
        v29 = *(unsigned int *)(a3 + 4);
        if ((_DWORD)v29)
        {
          v30 = *(unsigned __int8 **)(a3 + 8);
          if ((v28 & 4) != 0)
          {
            v8 = *v30;
            if ((_DWORD)v29 == 1)
            {
LABEL_43:
              if ((v8 - 48) < 0xA)
                goto LABEL_25;
              goto LABEL_20;
            }
            if (v8 == 45)
            {
              v8 = v30[1];
              goto LABEL_48;
            }
            if ((v8 - 48) >= 0xA)
            {
              if ((_DWORD)v29 == 8)
                goto LABEL_55;
              goto LABEL_59;
            }
          }
          else
          {
            v8 = *(unsigned __int16 *)v30;
            if ((_DWORD)v29 == 1)
              goto LABEL_43;
            if (v8 == 45)
            {
              v8 = *((unsigned __int16 *)v30 + 1);
LABEL_48:
              if ((v8 - 48) < 0xA)
              {
                if ((_DWORD)v29 == 2)
                  goto LABEL_25;
                goto LABEL_52;
              }
              if ((_DWORD)v29 != 9)
                goto LABEL_20;
LABEL_55:
              if (v8 != 73)
                goto LABEL_20;
              goto LABEL_52;
            }
            if ((v8 - 48) >= 0xA && ((_DWORD)v29 != 8 || v8 != 73))
            {
LABEL_59:
              if ((_DWORD)v29 != 3 || v8 != 78)
                goto LABEL_20;
            }
          }
LABEL_52:
          v9 = v9 & 0xFFFFFF0000000000 | v29 | ((unint64_t)((v28 >> 2) & 1) << 32);
          JSC::jsToNumber(v30, v9);
          WTF::numberToString(v33, v31);
          if (WTF::equal(a3, (unint64_t)v33, v32))
            goto LABEL_25;
          v23 = *(unsigned __int8 *)(v19 + 9);
        }
      }
    }
LABEL_20:
    v26 = *(JSC::JSObject **)(v19 + 48);
    if (v26)
    {
      if (v23 <= 0x16)
      {
        if (v23 == 2)
        {
          v26 = (JSC::JSObject *)a1[149];
        }
        else if (v23 == 3)
        {
          v26 = (JSC::JSObject *)a1[151];
        }
        else
        {
          v26 = (JSC::JSObject *)a1[152];
        }
      }
    }
    else
    {
      if (v23 < 0x17)
      {
        if (v23 == 2)
          v26 = (JSC::JSObject *)a1[149];
        else
          v26 = (JSC::JSObject *)(v23 == 3 ? a1[151] : a1[152]);
      }
      else
      {
        v26 = (JSC::JSObject *)*((_QWORD *)a2 + 2);
      }
      v14 = 1;
    }
    if (v26 == (JSC::JSObject *)2)
      break;
    a2 = v26;
  }
  if (!v15)
  {
LABEL_25:
    v22 = v14 & 1;
    LOWORD(v8) = v13 & 1;
    v24 = 1;
    return (unsigned __int16)(v22 | ((_WORD)v8 << 8)) | (v24 << 16);
  }
LABEL_33:
  v22 = 0;
  v24 = 0;
  return (unsigned __int16)(v22 | ((_WORD)v8 << 8)) | (v24 << 16);
}

uint64_t JSC::prepareChainForCaching(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  unint64_t v9;
  char v14;
  char v15;
  JSC::JSObject *v16;
  JSC::VM *v17;
  BOOL v18;
  int v19;
  int v20;
  __int16 v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  JSC::JSObject *v26;
  unsigned int v27;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  double v34;
  const unsigned __int8 *v35;
  _BYTE v36[124];
  uint64_t v37;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v37 = *MEMORY[0x1E0C80C00];
  v17 = (JSC::VM *)a1[7];
  if (a3)
    v18 = a4 == 0;
  else
    v18 = 0;
  v19 = v18;
  while (1)
  {
    v20 = *(_DWORD *)(a2 + 16);
    if ((v20 & 3) != 0)
    {
      v22 = 0;
      if (!v16)
      {
LABEL_31:
        v24 = 0;
        return (unsigned __int16)(v22 | (v8 << 8)) | (v24 << 16);
      }
      v24 = 0;
      if ((v20 & 0x800000) != 0)
        return (unsigned __int16)(v22 | (v8 << 8)) | (v24 << 16);
      JSC::Structure::flattenDictionaryStructure(a2, v17, v16, a4, a5, a6, a7, a8);
      if ((*(_DWORD *)(a2 + 16) & 3) == 2)
        goto LABEL_38;
      v14 = 1;
    }
    v21 = *(_WORD *)(a2 + 12);
    if ((v21 & 8) != 0 || (v21 & 0x10) != 0 && (v21 & 0x20) == 0)
      goto LABEL_38;
    v22 = 0;
    v23 = *(unsigned __int8 *)(a2 + 9);
    if (v23 == 32)
      goto LABEL_31;
    v24 = 0;
    if (v23 == 61)
      return (unsigned __int16)(v22 | (v8 << 8)) | (v24 << 16);
    if (v16 && v16 == (JSC::JSObject *)a4)
      goto LABEL_23;
    if ((v23 - 39) < 0xB)
      v25 = v19;
    else
      v25 = 0;
    if (v25 == 1)
    {
      v30 = *(_DWORD *)(a3 + 16);
      if ((v30 & 0x20) == 0)
      {
        v31 = *(unsigned int *)(a3 + 4);
        if ((_DWORD)v31)
        {
          v32 = *(unsigned __int8 **)(a3 + 8);
          if ((v30 & 4) != 0)
          {
            v33 = *v32;
            if ((_DWORD)v31 == 1)
            {
LABEL_45:
              if ((v33 - 48) < 0xA)
                goto LABEL_23;
              goto LABEL_18;
            }
            if (v33 == 45)
            {
              v33 = v32[1];
              goto LABEL_50;
            }
            v8 = v33 - 48;
            if ((v33 - 48) < 0xA)
              goto LABEL_54;
            if ((_DWORD)v31 == 8)
              goto LABEL_57;
          }
          else
          {
            v33 = *(unsigned __int16 *)v32;
            if ((_DWORD)v31 == 1)
              goto LABEL_45;
            if (v33 == 45)
            {
              v33 = *((unsigned __int16 *)v32 + 1);
LABEL_50:
              v8 = v33 - 48;
              if ((v33 - 48) < 0xA)
              {
                if ((_DWORD)v31 == 2)
                  goto LABEL_23;
LABEL_54:
                v9 = v9 & 0xFFFFFF0000000000 | v31 | ((unint64_t)((v30 >> 2) & 1) << 32);
                JSC::jsToNumber(v32, v9);
                WTF::numberToString(v36, v34);
                if (WTF::equal(a3, (unint64_t)v36, v35))
                  goto LABEL_23;
                goto LABEL_18;
              }
              if ((_DWORD)v31 != 9)
                goto LABEL_18;
LABEL_57:
              if (v33 != 73)
                goto LABEL_18;
              goto LABEL_54;
            }
            v8 = v33 - 48;
            if ((v33 - 48) < 0xA || (_DWORD)v31 == 8 && v33 == 73)
              goto LABEL_54;
          }
          if ((_DWORD)v31 != 3 || v33 != 78)
            goto LABEL_18;
          goto LABEL_54;
        }
      }
    }
LABEL_18:
    v26 = *(JSC::JSObject **)(a2 + 48);
    if (v26)
    {
      v27 = *(unsigned __int8 *)(a2 + 9);
      if (v27 <= 0x16)
      {
        if (v27 == 2)
        {
          v26 = (JSC::JSObject *)a1[149];
        }
        else if (v27 == 3)
        {
          v26 = (JSC::JSObject *)a1[151];
        }
        else
        {
          v26 = (JSC::JSObject *)a1[152];
        }
      }
    }
    else
    {
      if (!v16)
        goto LABEL_38;
      v29 = *(unsigned __int8 *)(a2 + 9);
      if (v29 < 0x17)
      {
        if (v29 == 2)
          v26 = (JSC::JSObject *)a1[149];
        else
          v26 = (JSC::JSObject *)(v29 == 3 ? a1[151] : a1[152]);
      }
      else
      {
        v26 = (JSC::JSObject *)*((_QWORD *)v16 + 2);
      }
      v15 = 1;
    }
    if (v26 == (JSC::JSObject *)2)
      break;
    a2 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
    v16 = v26;
  }
  if (!a4)
  {
LABEL_23:
    v22 = v15 & 1;
    v8 = v14 & 1;
    v24 = 1;
    return (unsigned __int16)(v22 | (v8 << 8)) | (v24 << 16);
  }
LABEL_38:
  v22 = 0;
  v24 = 0;
  return (unsigned __int16)(v22 | (v8 << 8)) | (v24 << 16);
}

JSC::ParseHash *JSC::ParseHash::ParseHash(JSC::ParseHash *this, const SourceCode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  SourceProvider *var0;
  int var2;
  uint64_t var1;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  CC_SHA1_CTX c;
  unsigned __int8 md[20];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  CC_SHA1_Init(&c);
  var0 = a2->var0.var0;
  if (a2->var0.var0)
  {
    var1 = a2->var1;
    var2 = a2->var2;
    v14 = (*(uint64_t (**)(SourceProvider *))(*(_QWORD *)var0 + 24))(var0);
    if (v15 <= var1)
    {
      v18 = 0x100000000;
      v16 = "";
      goto LABEL_12;
    }
    v16 = (const char *)v14;
    v17 = var2 - var1;
    if ((int)v15 - (int)var1 <= (var2 - var1))
    {
      v17 = v15 - var1;
      if (!(_DWORD)var1)
      {
        v18 = v15;
        goto LABEL_12;
      }
    }
    v18 = v17;
    v19 = v15 - var1;
    if ((v15 & 0xFF00000000) != 0)
    {
      if (v19 >= v18)
      {
        v16 = (const char *)(v14 + var1);
        v18 |= 0x100000000uLL;
        goto LABEL_12;
      }
    }
    else if (v19 >= v18)
    {
      v16 = (const char *)(v14 + 2 * var1);
      goto LABEL_12;
    }
    __break(1u);
  }
  v16 = 0;
  v18 = 0x100000000;
LABEL_12:
  WTF::SHA1::addUTF8Bytes(&c, (unint64_t)v16, v18, v4, v5, v6, v7, v8, v9, v10);
  CC_SHA1_Final(md, &c);
  v20 = *(_DWORD *)md;
  if (*(_DWORD *)md < 2u)
    v20 = *(_DWORD *)md + 760910800;
  *(_DWORD *)this = v20;
  *((_DWORD *)this + 1) = v20 ^ 1;
  return this;
}

void JSC::Structure::ensurePropertyTableIfNotEmpty(JSC::Structure *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (!*((_QWORD *)this + 11))
  {
    v8 = *((_QWORD *)this + 8);
    if (v8)
    {
      if (*(_BYTE *)(v8 + 5) == 1 || *(_DWORD *)(v8 + 80) >= 2u)
        JSC::Structure::materializePropertyTable(this, a2, 1, a4, a5, a6, a7, a8);
    }
  }
}

unint64_t JSC::PropertyTable::get(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t result;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;

  if (!*(_DWORD *)(a1 + 24))
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 16);
  if ((v2 & 1) != 0)
  {
    if ((v6 & 0x20) != 0)
    {
      v7 = *(_DWORD *)(a1 + 12);
      v8 = (*(_DWORD *)(v5 + 32) >> 8) & *(_QWORD *)&v7;
      v9 = *(unsigned __int8 *)(v3 + v8);
      if (*(_BYTE *)(v3 + v8))
      {
LABEL_5:
        v10 = v3 + v4;
        v11 = 1;
        result = 0xFFFFFFFFLL;
        while (1)
        {
          v13 = *(_QWORD *)(v10 + 8 * (v9 - 1));
          if (v5 == (v13 & 0xFFFFFFFFFFFFLL))
            break;
          v8 = ((_DWORD)v8 + v11) & v7;
          v9 = *(unsigned __int8 *)(v3 + v8);
          ++v11;
          if (!*(_BYTE *)(v3 + v8))
            return result;
        }
        return (v13 >> 16) & 0xFF00000000 | HIBYTE(v13);
      }
    }
    else
    {
      v7 = *(_DWORD *)(a1 + 12);
      v8 = (v6 >> 8) & *(_QWORD *)&v7;
      v9 = *(unsigned __int8 *)(v3 + v8);
      if (*(_BYTE *)(v3 + v8))
        goto LABEL_5;
    }
    return 0xFFFFFFFFLL;
  }
  if ((v6 & 0x20) != 0)
    v6 = *(_DWORD *)(v5 + 32);
  v14 = *(_DWORD *)(a1 + 12);
  v15 = v14 & (v6 >> 8);
  v16 = *(_DWORD *)(v3 + 4 * v15);
  if (!v16)
    return 0xFFFFFFFFLL;
  v17 = v3 + 4 * v4;
  v18 = 1;
  result = 0xFFFFFFFFLL;
  while (1)
  {
    v19 = (v16 - 1);
    if (v5 == *(_QWORD *)(v17 + 16 * v19))
      break;
    v15 = (v15 + v18) & v14;
    v16 = *(_DWORD *)(v3 + 4 * v15);
    ++v18;
    if (!v16)
      return result;
  }
  return *(unsigned int *)(v17 + 16 * v19 + 8) | ((unint64_t)*(unsigned __int8 *)(v17 + 16 * v19 + 12) << 32);
}

void WTF::Vector<JSC::ObjectPropertyCondition,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(unsigned int *)(a1 + 12);
    if (v10 < 0x11)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v13)
        goto LABEL_14;
    }
    else
    {
      if (v10 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      v14 = 24 * v10;
      v15 = WTF::fastMalloc((WTF *)(24 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v15;
      if (!(_DWORD)v13)
        goto LABEL_14;
    }
    v16 = 24 * v13;
    v17 = v12;
    do
    {
      v18 = *(_OWORD *)v17;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v15 = v18;
      v15 += 24;
      v17 += 24;
      v16 -= 24;
    }
    while (v16);
LABEL_14:
    if (a1 + 16 != v12 && v12)
    {
      if (*(_QWORD *)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

__n128 WTF::Vector<JSC::ObjectPropertyCondition,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::ObjectPropertyCondition,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::ObjectPropertyCondition,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 24 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      if (v14 < 0x11)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_31;
      }
      if (v14 < 0xAAAAAAB)
      {
        v15 = 24 * v14;
        v16 = WTF::fastMalloc((WTF *)(24 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v16;
LABEL_31:
        v26 = 0;
        do
        {
          v27 = v16 + v26;
          v28 = *(_OWORD *)(v10 + v26);
          *(_QWORD *)(v27 + 16) = *(_QWORD *)(v10 + v26 + 16);
          *(_OWORD *)v27 = v28;
          v26 += 24;
        }
        while (24 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x1981EDE7CLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(unsigned int *)(a1 + 12);
    if (v19 < 0x11)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    else
    {
      if (v19 >= 0xAAAAAAB)
        goto LABEL_40;
      v21 = 24 * v19;
      v22 = WTF::fastMalloc((WTF *)(24 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    v23 = 24 * v20;
    v24 = v10;
    do
    {
      v25 = *(_OWORD *)v24;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v24 + 16);
      *(_OWORD *)v22 = v25;
      v22 += 24;
      v24 += 24;
      v23 -= 24;
    }
    while (v23);
LABEL_25:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::ListDumpInContext<WTF::RefCountedFixedVectorBase<JSC::ObjectPropertyCondition,true>,JSC::DumpContext>::dump(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  JSC::ObjectPropertyCondition *v4;
  JSC::DumpContext *v5;
  WTF::PrintStream *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char *v12;
  WTF::PrintStream *v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  char v23;

  if (*(_DWORD *)(*(_QWORD *)result + 4))
  {
    v3 = result;
    v4 = (JSC::ObjectPropertyCondition *)(*(_QWORD *)result + 8);
    do
    {
      v5 = *(JSC::DumpContext **)(v3 + 8);
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v7 = *(unsigned __int8 *)(v3 + 48);
      v8 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      v9 = v8;
      v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32);
      if (v7)
      {
        v12 = *(char **)(v3 + 16);
        v11 = *(_QWORD *)(v3 + 24);
        v13 = (WTF::PrintStream *)v10(v8);
        if (v12)
        {
          v15 = v11 - 1;
          if (!v11)
            v15 = 0;
          WTF::StringImpl::utf8ForCharacters(v12, v15, (uint64_t)&v21, v14);
        }
        else
        {
          WTF::CString::CString(&v21, &str_25, 0);
          v22 = 0;
        }
        WTF::printExpectedCStringHelper(v13, "StringView", &v21);
        if (v22 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
      }
      else
      {
        v17 = *(char **)(v3 + 32);
        v16 = *(_QWORD *)(v3 + 40);
        v18 = (WTF::PrintStream *)v10(v8);
        if (v17)
        {
          v20 = v16 - 1;
          if (!v16)
            v20 = 0;
          WTF::StringImpl::utf8ForCharacters(v17, v20, (uint64_t)&v21, v19);
        }
        else
        {
          WTF::CString::CString(&v21, &str_25, 0);
          v22 = 0;
        }
        WTF::printExpectedCStringHelper(v18, "StringView", &v21);
        if (v22 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
        *(_BYTE *)(v3 + 48) = 1;
      }
      JSC::ObjectPropertyCondition::dumpInContext(v4, v6, v5);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = (JSC::ObjectPropertyCondition *)((char *)v4 + 24);
    }
    while (v4 != (JSC::ObjectPropertyCondition *)(*(_QWORD *)v3 + 24 * *(unsigned int *)(*(_QWORD *)v3 + 4) + 8));
  }
  return result;
}

uint64_t WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(unsigned int *)(result + 12);
  if (v13 < 9)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 8;
    goto LABEL_12;
  }
  if (v13 < 0xAAAAAAB)
  {
    v15 = 24 * v13;
    v16 = WTF::fastMalloc((WTF *)(24 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v14)
    {
      v17 = 24 * v14;
      v18 = v10;
      do
      {
        v19 = *(_OWORD *)v18;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v16 = v19;
        v16 += 24;
        v18 += 24;
        v17 -= 24;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 <= v8)
    return 1;
  v11 = result;
  v12 = *(_QWORD *)result;
  v13 = *(unsigned int *)(result + 12);
  if (v10 < 9)
  {
    v15 = result + 16;
    *(_QWORD *)v11 = v11 + 16;
    *(_DWORD *)(v11 + 8) = 8;
    goto LABEL_10;
  }
  if (v10 < 0xAAAAAAB)
  {
    v14 = 24 * v10;
    v15 = WTF::fastMalloc((WTF *)(24 * v10));
    *(_DWORD *)(v11 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v11 = v15;
LABEL_10:
    if ((_DWORD)v13)
    {
      v16 = 24 * v13;
      v17 = v12;
      do
      {
        v18 = *(_OWORD *)v17;
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v17 + 16);
        *(_OWORD *)v15 = v18;
        v15 += 24;
        v17 += 24;
        v16 -= 24;
      }
      while (v16);
    }
    if (v11 + 16 != v12 && v12)
    {
      if (*(_QWORD *)v11 == v12)
      {
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void JSC::PolyProtoAccessChain::tryCreate(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v17;
  _DWORD *v18;
  __int16 v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  WTF *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  void *v38;
  const unsigned __int8 *v39;
  WTF *v40;
  uint64_t v41;
  _DWORD v42[31];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  v41 = 0;
  v11 = *a2 & 0xFFFFFFFE;
  v12 = 16 * v11;
  if ((*(_BYTE *)(16 * v11 + 0x10) & 3) == 0)
  {
    v17 = 0;
    v18 = a2;
    while (1)
    {
      v19 = *(_WORD *)(v12 + 12);
      if ((v19 & 8) != 0 || (v19 & 0x10) != 0 && (v19 & 0x20) == 0)
        goto LABEL_25;
      v20 = 0;
      v21 = *(unsigned __int8 *)(v12 + 9);
      if (v21 == 32 || v21 == 61)
        goto LABEL_26;
      if (v17)
      {
        v42[0] = v11;
        if (HIDWORD(v41) == (_DWORD)v41)
        {
          v24 = (_DWORD *)WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (void *)(HIDWORD(v41) + 1), (unint64_t)v42, a4, a5, a6, a7, a8);
          *((_DWORD *)v40 + HIDWORD(v41)) = *v24;
        }
        else
        {
          *((_DWORD *)v40 + HIDWORD(v41)) = v11;
        }
        ++HIDWORD(v41);
      }
      else if (v18 != a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1981EE4C8);
      }
      if (v18 == (_DWORD *)a4)
        goto LABEL_39;
      v22 = *(unsigned __int8 *)(v12 + 9);
      if (!a4 && v22 - 50 >= 0xFFFFFFF5 && a3)
      {
        v26 = (a3 & 1) != 0 ? a3 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(a3 + 8);
        if (v26)
        {
          v27 = *(_DWORD *)(v26 + 16);
          if ((v27 & 0x20) == 0)
          {
            v28 = *(unsigned int *)(v26 + 4);
            if ((_DWORD)v28)
              break;
          }
        }
      }
LABEL_15:
      if (v22 < 0x17)
      {
        if (v22 == 2)
        {
          v23 = (_DWORD *)a1[149];
        }
        else if (v22 == 3)
        {
          v23 = (_DWORD *)a1[151];
        }
        else
        {
          v23 = (_DWORD *)a1[152];
        }
      }
      else
      {
        v23 = *(_DWORD **)(v12 + 48);
        if (!v23)
          v23 = (_DWORD *)*((_QWORD *)v18 + 2);
      }
      if (v23 == (_DWORD *)2)
      {
        if (a4)
          goto LABEL_25;
LABEL_39:
        v20 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0;
        v31 = v40;
        v32 = HIDWORD(v41);
        v40 = 0;
        v41 = 0;
        if ((_DWORD)v32)
        {
          v33 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v32 + 4));
          v34 = v33;
          v35 = 0;
          *v33 = v32;
          do
          {
            v33[v35 + 1] = *(_DWORD *)((char *)v31 + v35 * 4);
            ++v35;
          }
          while (v32 != v35);
          if (v31)
          {
            WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
            v31 = 0;
          }
        }
        else
        {
          v34 = 0;
        }
        v36 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = v34;
        if (v36)
          WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
        if (v31)
          WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_26;
      }
      v11 = *v23 & 0xFFFFFFFE;
      v12 = 16 * v11;
      --v17;
      v18 = v23;
      if ((*(_BYTE *)(16 * v11 + 0x10) & 3) != 0)
        goto LABEL_25;
    }
    v29 = *(unsigned __int8 **)(v26 + 8);
    if ((v27 & 4) != 0)
    {
      v30 = *v29;
      if ((_DWORD)v28 == 1)
      {
LABEL_38:
        if ((v30 - 48) < 0xA)
          goto LABEL_39;
        goto LABEL_15;
      }
      if (v30 == 45)
      {
        v30 = v29[1];
        goto LABEL_50;
      }
      if ((v30 - 48) >= 0xA)
      {
        if ((_DWORD)v28 == 8)
          goto LABEL_58;
        goto LABEL_62;
      }
    }
    else
    {
      v30 = *(unsigned __int16 *)v29;
      if ((_DWORD)v28 == 1)
        goto LABEL_38;
      if (v30 == 45)
      {
        v30 = *((unsigned __int16 *)v29 + 1);
LABEL_50:
        if ((v30 - 48) < 0xA)
        {
          if ((_DWORD)v28 == 2)
            goto LABEL_39;
          goto LABEL_55;
        }
        if ((_DWORD)v28 != 9)
          goto LABEL_15;
LABEL_58:
        if (v30 != 73)
          goto LABEL_15;
        goto LABEL_55;
      }
      if ((v30 - 48) >= 0xA && ((_DWORD)v28 != 8 || v30 != 73))
      {
LABEL_62:
        if ((_DWORD)v28 != 3 || v30 != 78)
          goto LABEL_15;
      }
    }
LABEL_55:
    v9 = v9 & 0xFFFFFF0000000000 | v28 | ((unint64_t)((v27 >> 2) & 1) << 32);
    JSC::jsToNumber(v29, v9);
    v38 = WTF::numberToString(v42, v37);
    if (WTF::equal(v26, (unint64_t)v38, v39))
      goto LABEL_39;
    v22 = *(unsigned __int8 *)(v12 + 9);
    goto LABEL_15;
  }
LABEL_25:
  v20 = 0;
LABEL_26:
  *a9 = v20;
  v25 = v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::PolyProtoAccessChain::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  _DWORD *v3;
  unint64_t v4;
  unint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;

  v2 = *(unsigned int **)(a1 + 8);
  v3 = *(_DWORD **)(a2 + 8);
  if (!v2)
  {
    if (!v3)
      return 1;
    return *v3 == 0;
  }
  v4 = *v2;
  if (!v3)
    return (_DWORD)v4 == 0;
  if ((_DWORD)v4 != *v3)
    return 0;
  if (!(_DWORD)v4)
    return 1;
  if (v2[1] != v3[1])
    return 0;
  v6 = 0;
  v7 = v2 + 2;
  v8 = v3 + 2;
  while (v4 - 1 != v6)
  {
    v9 = v7[v6];
    v10 = v8[v6++];
    if (v9 != v10)
      return v6 >= v4;
  }
  v6 = v4;
  return v6 >= v4;
}

uint64_t JSC::PolyProtoAccessChain::dump(JSC::PolyProtoAccessChain *this, JSC::Structure *a2, WTF::PrintStream *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  uint64_t result;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;

  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::PrintStream::printf(v6, "%s", "PolyPolyProtoAccessChain: [\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::PrintStream::printf(v7, "%s", "\t");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  JSC::Structure::dump((unint64_t)a2, a3);
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  if (v10)
  {
    v11 = 0;
    do
    {
      if (v11 >= *v10)
        break;
      v12 = v11 + 1;
      v13 = 16 * (v10[v11 + 1] & 0xFFFFFFFE);
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
      WTF::PrintStream::printf(v14, "%s", "\t");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
      JSC::Structure::dump(v13, a3);
      v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 32))(a3);
      WTF::PrintStream::printf(v15, "%s", "\n");
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a3 + 40))(a3);
      v10 = (unsigned int *)*((_QWORD *)this + 1);
      v11 = v12;
    }
    while (v10);
  }
  return result;
}

void JSC::computePreciseJumpTargetsInternal<(JSC::ComputePreciseJumpTargetsMode)0,JSC::CodeBlock,32ul>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  char v20;
  _BOOL4 v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  int v234;
  unint64_t v235;
  int v236;
  unsigned int *v237;
  unsigned int *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  int v253;
  unint64_t v254;
  int v255;
  unsigned int *v256;
  unsigned int *v257;
  int *v258;
  unsigned int **v259;
  int *v260;
  int v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  _DWORD *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  unsigned int v302;
  unsigned int v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  int v316;
  _DWORD *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  uint64_t v329;
  int v330;
  int v331;
  int v332;
  unsigned int *v333;
  unsigned int *v334;
  int *v335;
  unsigned int **v336;
  int *v337;
  int v338;
  unsigned int v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  _DWORD *v343;
  int v344;
  unsigned int **v345;
  int v346;
  int v347;
  unsigned int **v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  unsigned __int8 v353[36];
  unsigned int v354;

  v3 = *(_DWORD **)(*(_QWORD *)(a1 + 56) + 64);
  if (v3 && *v3)
  {
    v6 = a1;
    v7 = *(_QWORD *)(a1 + 224);
    if (v7)
    {
      v11 = *(_DWORD *)(v7 + 12);
      if (v11)
      {
        v12 = v11 - 1;
        do
        {
          v13 = *(_QWORD *)(v6 + 224);
          if (!v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1981EEAB8);
          }
          if (*(unsigned int *)(v13 + 12) <= (unint64_t)v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1981EEAC0);
          }
          v14 = (_DWORD *)(*(_QWORD *)v13 + 24 * v12 + 8);
          v15 = a3[3];
          if ((_DWORD)v15 == a3[2])
          {
            WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v14);
            v13 = *(_QWORD *)(v6 + 224);
            if (!v13)
            {
              __break(0xC471u);
              JUMPOUT(0x1981EEA5CLL);
            }
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v15) = *v14;
            ++a3[3];
          }
          if (*(unsigned int *)(v13 + 12) <= (unint64_t)v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1981EEAC8);
          }
          v16 = (_DWORD *)(*(_QWORD *)v13 + 24 * v12);
          v17 = a3[3];
          if ((_DWORD)v17 == a3[2])
          {
            WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v16);
            v13 = *(_QWORD *)(v6 + 224);
            if (!v13)
            {
              __break(0xC471u);
              JUMPOUT(0x1981EEA8CLL);
            }
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v17) = *v16;
            ++a3[3];
          }
          if (*(unsigned int *)(v13 + 12) <= (unint64_t)v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1981EEAD0);
          }
          v18 = (_DWORD *)(*(_QWORD *)v13 + 24 * v12 + 4);
          v19 = a3[3];
          if ((_DWORD)v19 == a3[2])
          {
            WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v18);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v19) = *v18;
            ++a3[3];
          }
          --v12;
        }
        while (v12 != -1);
      }
    }
    v8 = *((_DWORD *)a2 + 3);
    if (v8)
    {
      v9 = 0;
      v10 = *a2;
      do
      {
        v24 = (unsigned __int8 *)(v10 + v9);
        v25 = *v24;
        v26 = v25;
        if ((v25 | 2) == 0x82)
          v26 = v24[1];
        switch(v26)
        {
          case '.':
            if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v103 = *(_QWORD *)(v6 + 56);
            v104 = *(_QWORD *)(v103 + 80);
            v105 = *(_QWORD *)v104;
            v106 = *(unsigned int *)(v104 + 12) + *(_QWORD *)v104;
            if (v105 > (unint64_t)v24 || (unint64_t)v24 >= v106)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0178);
            }
            v31 = *(_QWORD *)(v103 + 144);
            if (!v31)
              goto LABEL_50;
            v108 = (_DWORD)v24 - v105;
            v109 = *(_DWORD *)(v31 - 8);
            v110 = 9 * ((~(v108 << 15) + v108) ^ ((~(v108 << 15) + v108) >> 10));
            v111 = (v110 ^ (v110 >> 6)) + ~((v110 ^ (v110 >> 6)) << 11);
            v56 = v109 & (v111 ^ HIWORD(v111));
            v112 = *(_DWORD *)(v31 + 8 * v56);
            if (v112 == v108)
              goto LABEL_64;
            v113 = 1;
            do
            {
              if (!v112)
                goto LABEL_511;
              v56 = ((_DWORD)v56 + v113) & v109;
              v112 = *(_DWORD *)(v31 + 8 * v56);
              ++v113;
            }
            while (v112 != v108);
            goto LABEL_64;
          case 'C':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 1);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 2);
            }
            else
            {
              LODWORD(v31) = (char)v24[1];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v81 = *(_QWORD *)(v6 + 56);
            v82 = *(_QWORD *)(v81 + 80);
            v83 = *(_QWORD *)v82;
            v84 = *(unsigned int *)(v82 + 12) + *(_QWORD *)v82;
            if (v83 > (unint64_t)v24 || (unint64_t)v24 >= v84)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0000);
            }
            v31 = *(_QWORD *)(v81 + 144);
            if (!v31)
              goto LABEL_50;
            v86 = (_DWORD)v24 - v83;
            v87 = *(_DWORD *)(v31 - 8);
            v88 = 9 * ((~(v86 << 15) + v86) ^ ((~(v86 << 15) + v86) >> 10));
            v89 = (v88 ^ (v88 >> 6)) + ~((v88 ^ (v88 >> 6)) << 11);
            v56 = v87 & (v89 ^ HIWORD(v89));
            v90 = *(_DWORD *)(v31 + 8 * v56);
            if (v90 == v86)
              goto LABEL_64;
            v91 = 1;
            while (v90)
            {
              v56 = ((_DWORD)v56 + v91) & v87;
              v90 = *(_DWORD *)(v31 + 8 * v56);
              ++v91;
              if (v90 == v86)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'D':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 2);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 6);
            }
            else
            {
              LODWORD(v31) = (char)v24[2];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v92 = *(_QWORD *)(v6 + 56);
            v93 = *(_QWORD *)(v92 + 80);
            v94 = *(_QWORD *)v93;
            v95 = *(unsigned int *)(v93 + 12) + *(_QWORD *)v93;
            if (v94 > (unint64_t)v24 || (unint64_t)v24 >= v95)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0020);
            }
            v31 = *(_QWORD *)(v92 + 144);
            if (!v31)
              goto LABEL_50;
            v97 = (_DWORD)v24 - v94;
            v98 = *(_DWORD *)(v31 - 8);
            v99 = 9 * ((~(v97 << 15) + v97) ^ ((~(v97 << 15) + v97) >> 10));
            v100 = (v99 ^ (v99 >> 6)) + ~((v99 ^ (v99 >> 6)) << 11);
            v56 = v98 & (v100 ^ HIWORD(v100));
            v101 = *(_DWORD *)(v31 + 8 * v56);
            if (v101 == v97)
              goto LABEL_64;
            v102 = 1;
            while (v101)
            {
              v56 = ((_DWORD)v56 + v102) & v98;
              v101 = *(_DWORD *)(v31 + 8 * v56);
              ++v102;
              if (v101 == v97)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'E':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 2);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 6);
            }
            else
            {
              LODWORD(v31) = (char)v24[2];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v70 = *(_QWORD *)(v6 + 56);
            v71 = *(_QWORD *)(v70 + 80);
            v72 = *(_QWORD *)v71;
            v73 = *(unsigned int *)(v71 + 12) + *(_QWORD *)v71;
            if (v72 > (unint64_t)v24 || (unint64_t)v24 >= v73)
            {
              __break(0xC471u);
              JUMPOUT(0x1981EFFD8);
            }
            v31 = *(_QWORD *)(v70 + 144);
            if (!v31)
              goto LABEL_50;
            v75 = (_DWORD)v24 - v72;
            v76 = *(_DWORD *)(v31 - 8);
            v77 = 9 * ((~(v75 << 15) + v75) ^ ((~(v75 << 15) + v75) >> 10));
            v78 = (v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11);
            v56 = v76 & (v78 ^ HIWORD(v78));
            v79 = *(_DWORD *)(v31 + 8 * v56);
            if (v79 == v75)
              goto LABEL_64;
            v80 = 1;
            while (v79)
            {
              v56 = ((_DWORD)v56 + v80) & v76;
              v79 = *(_DWORD *)(v31 + 8 * v56);
              ++v80;
              if (v79 == v75)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'F':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 2);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 6);
            }
            else
            {
              LODWORD(v31) = (char)v24[2];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v202 = *(_QWORD *)(v6 + 56);
            v203 = *(_QWORD *)(v202 + 80);
            v204 = *(_QWORD *)v203;
            v205 = *(unsigned int *)(v203 + 12) + *(_QWORD *)v203;
            if (v204 > (unint64_t)v24 || (unint64_t)v24 >= v205)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0260);
            }
            v31 = *(_QWORD *)(v202 + 144);
            if (!v31)
              goto LABEL_50;
            v207 = (_DWORD)v24 - v204;
            v208 = *(_DWORD *)(v31 - 8);
            v209 = 9 * ((~(v207 << 15) + v207) ^ ((~(v207 << 15) + v207) >> 10));
            v210 = (v209 ^ (v209 >> 6)) + ~((v209 ^ (v209 >> 6)) << 11);
            v56 = v208 & (v210 ^ HIWORD(v210));
            v211 = *(_DWORD *)(v31 + 8 * v56);
            if (v211 == v207)
              goto LABEL_64;
            v212 = 1;
            while (v211)
            {
              v56 = ((_DWORD)v56 + v212) & v208;
              v211 = *(_DWORD *)(v31 + 8 * v56);
              ++v212;
              if (v211 == v207)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'G':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 2);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 6);
            }
            else
            {
              LODWORD(v31) = (char)v24[2];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v213 = *(_QWORD *)(v6 + 56);
            v214 = *(_QWORD *)(v213 + 80);
            v215 = *(_QWORD *)v214;
            v216 = *(unsigned int *)(v214 + 12) + *(_QWORD *)v214;
            if (v215 > (unint64_t)v24 || (unint64_t)v24 >= v216)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0280);
            }
            v31 = *(_QWORD *)(v213 + 144);
            if (!v31)
              goto LABEL_50;
            v218 = (_DWORD)v24 - v215;
            v219 = *(_DWORD *)(v31 - 8);
            v220 = 9 * ((~(v218 << 15) + v218) ^ ((~(v218 << 15) + v218) >> 10));
            v221 = (v220 ^ (v220 >> 6)) + ~((v220 ^ (v220 >> 6)) << 11);
            v56 = v219 & (v221 ^ HIWORD(v221));
            v222 = *(_DWORD *)(v31 + 8 * v56);
            if (v222 == v218)
              goto LABEL_64;
            v223 = 1;
            while (v222)
            {
              v56 = ((_DWORD)v56 + v223) & v219;
              v222 = *(_DWORD *)(v31 + 8 * v56);
              ++v223;
              if (v222 == v218)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'H':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 2);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 6);
            }
            else
            {
              LODWORD(v31) = (char)v24[2];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v158 = *(_QWORD *)(v6 + 56);
            v159 = *(_QWORD *)(v158 + 80);
            v160 = *(_QWORD *)v159;
            v161 = *(unsigned int *)(v159 + 12) + *(_QWORD *)v159;
            if (v160 > (unint64_t)v24 || (unint64_t)v24 >= v161)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0218);
            }
            v31 = *(_QWORD *)(v158 + 144);
            if (!v31)
              goto LABEL_50;
            v163 = (_DWORD)v24 - v160;
            v164 = *(_DWORD *)(v31 - 8);
            v165 = 9 * ((~(v163 << 15) + v163) ^ ((~(v163 << 15) + v163) >> 10));
            v166 = (v165 ^ (v165 >> 6)) + ~((v165 ^ (v165 >> 6)) << 11);
            v56 = v164 & (v166 ^ HIWORD(v166));
            v167 = *(_DWORD *)(v31 + 8 * v56);
            if (v167 == v163)
              goto LABEL_64;
            v168 = 1;
            while (v167)
            {
              v56 = ((_DWORD)v56 + v168) & v164;
              v167 = *(_DWORD *)(v31 + 8 * v56);
              ++v168;
              if (v167 == v163)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'I':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 2);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 6);
            }
            else
            {
              LODWORD(v31) = (char)v24[2];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v136 = *(_QWORD *)(v6 + 56);
            v137 = *(_QWORD *)(v136 + 80);
            v138 = *(_QWORD *)v137;
            v139 = *(unsigned int *)(v137 + 12) + *(_QWORD *)v137;
            if (v138 > (unint64_t)v24 || (unint64_t)v24 >= v139)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F01D8);
            }
            v31 = *(_QWORD *)(v136 + 144);
            if (!v31)
              goto LABEL_50;
            v141 = (_DWORD)v24 - v138;
            v142 = *(_DWORD *)(v31 - 8);
            v143 = 9 * ((~(v141 << 15) + v141) ^ ((~(v141 << 15) + v141) >> 10));
            v144 = (v143 ^ (v143 >> 6)) + ~((v143 ^ (v143 >> 6)) << 11);
            v56 = v142 & (v144 ^ HIWORD(v144));
            v145 = *(_DWORD *)(v31 + 8 * v56);
            if (v145 == v141)
              goto LABEL_64;
            v146 = 1;
            while (v145)
            {
              v56 = ((_DWORD)v56 + v146) & v142;
              v145 = *(_DWORD *)(v31 + 8 * v56);
              ++v146;
              if (v145 == v141)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'J':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v147 = *(_QWORD *)(v6 + 56);
            v148 = *(_QWORD *)(v147 + 80);
            v149 = *(_QWORD *)v148;
            v150 = *(unsigned int *)(v148 + 12) + *(_QWORD *)v148;
            if (v149 > (unint64_t)v24 || (unint64_t)v24 >= v150)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F01F8);
            }
            v31 = *(_QWORD *)(v147 + 144);
            if (!v31)
              goto LABEL_50;
            v152 = (_DWORD)v24 - v149;
            v153 = *(_DWORD *)(v31 - 8);
            v154 = 9 * ((~(v152 << 15) + v152) ^ ((~(v152 << 15) + v152) >> 10));
            v155 = (v154 ^ (v154 >> 6)) + ~((v154 ^ (v154 >> 6)) << 11);
            v56 = v153 & (v155 ^ HIWORD(v155));
            v156 = *(_DWORD *)(v31 + 8 * v56);
            if (v156 == v152)
              goto LABEL_64;
            v157 = 1;
            while (v156)
            {
              v56 = ((_DWORD)v56 + v157) & v153;
              v156 = *(_DWORD *)(v31 + 8 * v56);
              ++v157;
              if (v156 == v152)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'K':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v224 = *(_QWORD *)(v6 + 56);
            v225 = *(_QWORD *)(v224 + 80);
            v226 = *(_QWORD *)v225;
            v227 = *(unsigned int *)(v225 + 12) + *(_QWORD *)v225;
            if (v226 > (unint64_t)v24 || (unint64_t)v24 >= v227)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F02A0);
            }
            v31 = *(_QWORD *)(v224 + 144);
            if (!v31)
              goto LABEL_50;
            v229 = (_DWORD)v24 - v226;
            v230 = *(_DWORD *)(v31 - 8);
            v231 = 9 * ((~(v229 << 15) + v229) ^ ((~(v229 << 15) + v229) >> 10));
            v232 = (v231 ^ (v231 >> 6)) + ~((v231 ^ (v231 >> 6)) << 11);
            v56 = v230 & (v232 ^ HIWORD(v232));
            v233 = *(_DWORD *)(v31 + 8 * v56);
            if (v233 == v229)
              goto LABEL_64;
            v234 = 1;
            while (v233)
            {
              v56 = ((_DWORD)v56 + v234) & v230;
              v233 = *(_DWORD *)(v31 + 8 * v56);
              ++v234;
              if (v233 == v229)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'L':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v191 = *(_QWORD *)(v6 + 56);
            v192 = *(_QWORD *)(v191 + 80);
            v193 = *(_QWORD *)v192;
            v194 = *(unsigned int *)(v192 + 12) + *(_QWORD *)v192;
            if (v193 > (unint64_t)v24 || (unint64_t)v24 >= v194)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0060);
            }
            v31 = *(_QWORD *)(v191 + 144);
            if (!v31)
              goto LABEL_50;
            v196 = (_DWORD)v24 - v193;
            v197 = *(_DWORD *)(v31 - 8);
            v198 = 9 * ((~(v196 << 15) + v196) ^ ((~(v196 << 15) + v196) >> 10));
            v199 = (v198 ^ (v198 >> 6)) + ~((v198 ^ (v198 >> 6)) << 11);
            v56 = v197 & (v199 ^ HIWORD(v199));
            v200 = *(_DWORD *)(v31 + 8 * v56);
            if (v200 == v196)
              goto LABEL_64;
            v201 = 1;
            while (v200)
            {
              v56 = ((_DWORD)v56 + v201) & v197;
              v200 = *(_DWORD *)(v31 + 8 * v56);
              ++v201;
              if (v200 == v196)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'M':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v114 = *(_QWORD *)(v6 + 56);
            v115 = *(_QWORD *)(v114 + 80);
            v116 = *(_QWORD *)v115;
            v117 = *(unsigned int *)(v115 + 12) + *(_QWORD *)v115;
            if (v116 > (unint64_t)v24 || (unint64_t)v24 >= v117)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0198);
            }
            v31 = *(_QWORD *)(v114 + 144);
            if (!v31)
              goto LABEL_50;
            v119 = (_DWORD)v24 - v116;
            v120 = *(_DWORD *)(v31 - 8);
            v121 = 9 * ((~(v119 << 15) + v119) ^ ((~(v119 << 15) + v119) >> 10));
            v122 = (v121 ^ (v121 >> 6)) + ~((v121 ^ (v121 >> 6)) << 11);
            v56 = v120 & (v122 ^ HIWORD(v122));
            v123 = *(_DWORD *)(v31 + 8 * v56);
            if (v123 == v119)
              goto LABEL_64;
            v124 = 1;
            while (v123)
            {
              v56 = ((_DWORD)v56 + v124) & v120;
              v123 = *(_DWORD *)(v31 + 8 * v56);
              ++v124;
              if (v123 == v119)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'N':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v169 = *(_QWORD *)(v6 + 56);
            v170 = *(_QWORD *)(v169 + 80);
            v171 = *(_QWORD *)v170;
            v172 = *(unsigned int *)(v170 + 12) + *(_QWORD *)v170;
            if (v171 > (unint64_t)v24 || (unint64_t)v24 >= v172)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0040);
            }
            v31 = *(_QWORD *)(v169 + 144);
            if (!v31)
              goto LABEL_50;
            v174 = (_DWORD)v24 - v171;
            v175 = *(_DWORD *)(v31 - 8);
            v176 = 9 * ((~(v174 << 15) + v174) ^ ((~(v174 << 15) + v174) >> 10));
            v177 = (v176 ^ (v176 >> 6)) + ~((v176 ^ (v176 >> 6)) << 11);
            v56 = v175 & (v177 ^ HIWORD(v177));
            v178 = *(_DWORD *)(v31 + 8 * v56);
            if (v178 == v174)
              goto LABEL_64;
            v179 = 1;
            while (v178)
            {
              v56 = ((_DWORD)v56 + v179) & v175;
              v178 = *(_DWORD *)(v31 + 8 * v56);
              ++v179;
              if (v178 == v174)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'O':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v59 = *(_QWORD *)(v6 + 56);
            v60 = *(_QWORD *)(v59 + 80);
            v61 = *(_QWORD *)v60;
            v62 = *(unsigned int *)(v60 + 12) + *(_QWORD *)v60;
            if (v61 > (unint64_t)v24 || (unint64_t)v24 >= v62)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0108);
            }
            v31 = *(_QWORD *)(v59 + 144);
            if (!v31)
              goto LABEL_50;
            v64 = (_DWORD)v24 - v61;
            v65 = *(_DWORD *)(v31 - 8);
            v66 = 9 * ((~(v64 << 15) + v64) ^ ((~(v64 << 15) + v64) >> 10));
            v67 = (v66 ^ (v66 >> 6)) + ~((v66 ^ (v66 >> 6)) << 11);
            v56 = v65 & (v67 ^ HIWORD(v67));
            v68 = *(_DWORD *)(v31 + 8 * v56);
            if (v68 == v64)
              goto LABEL_64;
            v69 = 1;
            while (v68)
            {
              v56 = ((_DWORD)v56 + v69) & v65;
              v68 = *(_DWORD *)(v31 + 8 * v56);
              ++v69;
              if (v68 == v64)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'P':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v289 = *(_QWORD *)(v6 + 56);
            v290 = *(_QWORD *)(v289 + 80);
            v291 = *(_QWORD *)v290;
            v292 = *(unsigned int *)(v290 + 12) + *(_QWORD *)v290;
            if (v291 > (unint64_t)v24 || (unint64_t)v24 >= v292)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0420);
            }
            v31 = *(_QWORD *)(v289 + 144);
            if (!v31)
              goto LABEL_50;
            v294 = (_DWORD)v24 - v291;
            v295 = *(_DWORD *)(v31 - 8);
            v296 = 9 * ((~(v294 << 15) + v294) ^ ((~(v294 << 15) + v294) >> 10));
            v297 = (v296 ^ (v296 >> 6)) + ~((v296 ^ (v296 >> 6)) << 11);
            v56 = v295 & (v297 ^ HIWORD(v297));
            v298 = *(_DWORD *)(v31 + 8 * v56);
            if (v298 == v294)
              goto LABEL_64;
            v299 = 1;
            while (v298)
            {
              v56 = ((_DWORD)v56 + v299) & v295;
              v298 = *(_DWORD *)(v31 + 8 * v56);
              ++v299;
              if (v298 == v294)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'Q':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v267 = *(_QWORD *)(v6 + 56);
            v268 = *(_QWORD *)(v267 + 80);
            v269 = *(_QWORD *)v268;
            v270 = *(unsigned int *)(v268 + 12) + *(_QWORD *)v268;
            if (v269 > (unint64_t)v24 || (unint64_t)v24 >= v270)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F03A8);
            }
            v31 = *(_QWORD *)(v267 + 144);
            if (!v31)
              goto LABEL_50;
            v272 = (_DWORD)v24 - v269;
            v273 = *(_DWORD *)(v31 - 8);
            v274 = 9 * ((~(v272 << 15) + v272) ^ ((~(v272 << 15) + v272) >> 10));
            v275 = (v274 ^ (v274 >> 6)) + ~((v274 ^ (v274 >> 6)) << 11);
            v56 = v273 & (v275 ^ HIWORD(v275));
            v276 = *(_DWORD *)(v31 + 8 * v56);
            if (v276 == v272)
              goto LABEL_64;
            v277 = 1;
            while (v276)
            {
              v56 = ((_DWORD)v56 + v277) & v273;
              v276 = *(_DWORD *)(v31 + 8 * v56);
              ++v277;
              if (v276 == v272)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'R':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v278 = *(_QWORD *)(v6 + 56);
            v279 = *(_QWORD *)(v278 + 80);
            v280 = *(_QWORD *)v279;
            v281 = *(unsigned int *)(v279 + 12) + *(_QWORD *)v279;
            if (v280 > (unint64_t)v24 || (unint64_t)v24 >= v281)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F03F8);
            }
            v31 = *(_QWORD *)(v278 + 144);
            if (!v31)
              goto LABEL_50;
            v283 = (_DWORD)v24 - v280;
            v284 = *(_DWORD *)(v31 - 8);
            v285 = 9 * ((~(v283 << 15) + v283) ^ ((~(v283 << 15) + v283) >> 10));
            v286 = (v285 ^ (v285 >> 6)) + ~((v285 ^ (v285 >> 6)) << 11);
            v56 = v284 & (v286 ^ HIWORD(v286));
            v287 = *(_DWORD *)(v31 + 8 * v56);
            if (v287 == v283)
              goto LABEL_64;
            v288 = 1;
            while (v287)
            {
              v56 = ((_DWORD)v56 + v288) & v284;
              v287 = *(_DWORD *)(v31 + 8 * v56);
              ++v288;
              if (v287 == v283)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'S':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v47 = *(_QWORD *)(v6 + 56);
            v48 = *(_QWORD *)(v47 + 80);
            v49 = *(_QWORD *)v48;
            v50 = *(unsigned int *)(v48 + 12) + *(_QWORD *)v48;
            if (v49 > (unint64_t)v24 || (unint64_t)v24 >= v50)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F00B0);
            }
            v31 = *(_QWORD *)(v47 + 144);
            if (!v31)
              goto LABEL_50;
            v52 = (_DWORD)v24 - v49;
            v53 = *(_DWORD *)(v31 - 8);
            v54 = 9 * ((~(v52 << 15) + v52) ^ ((~(v52 << 15) + v52) >> 10));
            v55 = (v54 ^ (v54 >> 6)) + ~((v54 ^ (v54 >> 6)) << 11);
            v56 = v53 & (v55 ^ HIWORD(v55));
            v57 = *(_DWORD *)(v31 + 8 * v56);
            if (v57 == v52)
              goto LABEL_64;
            v58 = 1;
            while (v57)
            {
              v56 = ((_DWORD)v56 + v58) & v53;
              v57 = *(_DWORD *)(v31 + 8 * v56);
              ++v58;
              if (v57 == v52)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'T':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v243 = *(_QWORD *)(v6 + 56);
            v244 = *(_QWORD *)(v243 + 80);
            v245 = *(_QWORD *)v244;
            v246 = *(unsigned int *)(v244 + 12) + *(_QWORD *)v244;
            if (v245 > (unint64_t)v24 || (unint64_t)v24 >= v246)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0360);
            }
            v31 = *(_QWORD *)(v243 + 144);
            if (!v31)
              goto LABEL_50;
            v248 = (_DWORD)v24 - v245;
            v249 = *(_DWORD *)(v31 - 8);
            v250 = 9 * ((~(v248 << 15) + v248) ^ ((~(v248 << 15) + v248) >> 10));
            v251 = (v250 ^ (v250 >> 6)) + ~((v250 ^ (v250 >> 6)) << 11);
            v56 = v249 & (v251 ^ HIWORD(v251));
            v252 = *(_DWORD *)(v31 + 8 * v56);
            if (v252 == v248)
              goto LABEL_64;
            v253 = 1;
            while (v252)
            {
              v56 = ((_DWORD)v56 + v253) & v249;
              v252 = *(_DWORD *)(v31 + 8 * v56);
              ++v253;
              if (v252 == v248)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'U':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v125 = *(_QWORD *)(v6 + 56);
            v126 = *(_QWORD *)(v125 + 80);
            v127 = *(_QWORD *)v126;
            v128 = *(unsigned int *)(v126 + 12) + *(_QWORD *)v126;
            if (v127 > (unint64_t)v24 || (unint64_t)v24 >= v128)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F01B8);
            }
            v31 = *(_QWORD *)(v125 + 144);
            if (!v31)
              goto LABEL_50;
            v130 = (_DWORD)v24 - v127;
            v131 = *(_DWORD *)(v31 - 8);
            v132 = 9 * ((~(v130 << 15) + v130) ^ ((~(v130 << 15) + v130) >> 10));
            v133 = (v132 ^ (v132 >> 6)) + ~((v132 ^ (v132 >> 6)) << 11);
            v56 = v131 & (v133 ^ HIWORD(v133));
            v134 = *(_DWORD *)(v31 + 8 * v56);
            if (v134 == v130)
              goto LABEL_64;
            v135 = 1;
            while (v134)
            {
              v56 = ((_DWORD)v56 + v135) & v131;
              v134 = *(_DWORD *)(v31 + 8 * v56);
              ++v135;
              if (v134 == v130)
                goto LABEL_64;
            }
            goto LABEL_511;
          case 'V':
            if (v25 == 128)
            {
              LODWORD(v31) = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              LODWORD(v31) = *(_DWORD *)(v24 + 10);
            }
            else
            {
              LODWORD(v31) = (char)v24[3];
            }
            if ((_DWORD)v31)
              goto LABEL_50;
            v180 = *(_QWORD *)(v6 + 56);
            v181 = *(_QWORD *)(v180 + 80);
            v182 = *(_QWORD *)v181;
            v183 = *(unsigned int *)(v181 + 12) + *(_QWORD *)v181;
            if (v182 > (unint64_t)v24 || (unint64_t)v24 >= v183)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0238);
            }
            v31 = *(_QWORD *)(v180 + 144);
            if (!v31)
              goto LABEL_50;
            v185 = (_DWORD)v24 - v182;
            v186 = *(_DWORD *)(v31 - 8);
            v187 = 9 * ((~(v185 << 15) + v185) ^ ((~(v185 << 15) + v185) >> 10));
            v188 = (v187 ^ (v187 >> 6)) + ~((v187 ^ (v187 >> 6)) << 11);
            v56 = v186 & (v188 ^ HIWORD(v188));
            v189 = *(_DWORD *)(v31 + 8 * v56);
            if (v189 == v185)
              goto LABEL_64;
            v190 = 1;
            while (v189)
            {
              v56 = ((_DWORD)v56 + v190) & v186;
              v189 = *(_DWORD *)(v31 + 8 * v56);
              ++v190;
              if (v189 == v185)
              {
LABEL_64:
                LODWORD(v31) = *(_DWORD *)(v31 + 8 * v56 + 4);
                goto LABEL_50;
              }
            }
LABEL_511:
            LODWORD(v31) = 0;
LABEL_50:
            v32 = v31 + v9;
            goto LABEL_51;
          case 'W':
          case 'X':
            if (v25 == 128)
            {
              v300 = *((__int16 *)v24 + 3);
            }
            else if (v25 == 130)
            {
              v300 = *(_DWORD *)(v24 + 10);
            }
            else
            {
              v300 = (char)v24[3];
            }
            if (!v300)
              v300 = JSC::CodeBlock::outOfLineJumpOffset(v6, (unint64_t)v24);
            v32 = v300 + v9;
            goto LABEL_51;
          case 'Z':
            if (v25 == 130)
            {
              v254 = *(unsigned int *)(v24 + 2);
              v255 = *(_DWORD *)(v24 + 6);
            }
            else if (v25 == 128)
            {
              v254 = *((unsigned __int16 *)v24 + 1);
              v255 = *((__int16 *)v24 + 2);
            }
            else
            {
              v254 = v24[1];
              v255 = (char)v24[2];
            }
            v350 = v6;
            v256 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 152) + 8);
            if (*v256 <= v254)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0130);
            }
            v257 = &v256[4 * v254];
            v260 = (int *)*((_QWORD *)v257 + 1);
            v259 = (unsigned int **)(v257 + 2);
            v258 = v260;
            if (v260)
            {
              v261 = *v258;
              if (v261)
              {
                v262 = v261 - 1;
                v263 = 4 * (v261 - 1) + 4;
                do
                {
                  if (**v259 <= v262)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1981EFFB8);
                  }
                  v264 = *(unsigned int *)((char *)*v259 + v263) + v9;
                  v352 = v264;
                  v265 = a3[3];
                  if ((_DWORD)v265 == a3[2])
                  {
                    v346 = v255;
                    v345 = v259;
                    v266 = (_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v265 + 1, (unint64_t)&v352);
                    v259 = v345;
                    v255 = v346;
                    *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *v266;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)a3 + 4 * v265) = v264;
                  }
                  ++a3[3];
                  v263 -= 4;
                  --v262;
                }
                while (v262 != -1);
              }
            }
            v6 = v350;
            if (v255)
              goto LABEL_362;
            v318 = *a2 + v9;
            v319 = *(_QWORD *)(v350 + 56);
            v320 = *(unint64_t **)(v319 + 80);
            v321 = *v320;
            v322 = *((unsigned int *)v320 + 3) + *v320;
            if (v321 > v318 || v318 >= v322)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F03C8);
            }
            v324 = *(_QWORD *)(v319 + 144);
            if (!v324)
              goto LABEL_519;
            v325 = v318 - v321;
            v326 = *(_DWORD *)(v324 - 8);
            v327 = 9 * ((~(v325 << 15) + v325) ^ ((~(v325 << 15) + v325) >> 10));
            v328 = (v327 ^ (v327 >> 6)) + ~((v327 ^ (v327 >> 6)) << 11);
            v329 = v326 & (v328 ^ HIWORD(v328));
            v330 = *(_DWORD *)(v324 + 8 * v329);
            if (v330 == v325)
              goto LABEL_428;
            v332 = 1;
            while (v330)
            {
              v329 = ((_DWORD)v329 + v332) & v326;
              v330 = *(_DWORD *)(v324 + 8 * v329);
              ++v332;
              if (v330 == v325)
              {
LABEL_428:
                v255 = *(_DWORD *)(v324 + 8 * v329 + 4);
                goto LABEL_362;
              }
            }
LABEL_519:
            v255 = 0;
LABEL_362:
            v32 = v255 + v9;
            goto LABEL_51;
          case '[':
            JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>(v24, (uint64_t)&v352);
            v351 = v6;
            v333 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 152) + 8);
            if (*v333 <= v352)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0448);
            }
            v334 = &v333[4 * v352];
            v337 = (int *)*((_QWORD *)v334 + 1);
            v336 = (unsigned int **)(v334 + 2);
            v335 = v337;
            if (v337)
            {
              v338 = *v335;
              if (v338)
              {
                v339 = v338 - 1;
                v340 = 4 * (v338 - 1) + 4;
                do
                {
                  if (**v336 <= v339)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1981F0158);
                  }
                  v341 = *(unsigned int *)((char *)*v336 + v340) + v9;
                  v354 = v341;
                  v342 = a3[3];
                  if ((_DWORD)v342 == a3[2])
                  {
                    v348 = v336;
                    v343 = (_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v342 + 1, (unint64_t)&v354);
                    v336 = v348;
                    *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *v343;
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)a3 + 4 * v342) = v341;
                  }
                  ++a3[3];
                  v340 -= 4;
                  --v339;
                }
                while (v339 != -1);
              }
            }
            v344 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v353);
            v6 = v351;
            if (!v344)
              v344 = JSC::CodeBlock::outOfLineJumpOffset(v351, *a2 + v9);
            JSC::getJumpTargetsForInstruction<32ul,JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, v9, v344);
            goto LABEL_41;
          case '\\':
            if (v25 == 130)
            {
              v235 = *(unsigned int *)(v24 + 2);
              v236 = *(_DWORD *)(v24 + 6);
            }
            else if (v25 == 128)
            {
              v235 = *((unsigned __int16 *)v24 + 1);
              v236 = *((__int16 *)v24 + 2);
            }
            else
            {
              v235 = v24[1];
              v236 = (char)v24[2];
            }
            v349 = v6;
            v237 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 152) + 16);
            if (*v237 <= v235)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F00E8);
            }
            v238 = &v237[6 * v235];
            if (!v238[5])
              goto LABEL_412;
            v239 = *((_QWORD *)v238 + 1);
            v240 = v238[4];
            if ((_DWORD)v240)
            {
              v241 = 16 * v240;
              v242 = v239;
              while (!*(_QWORD *)v242)
              {
                v242 += 16;
                v241 -= 16;
                if (!v241)
                  goto LABEL_412;
              }
            }
            else
            {
              v242 = v239;
            }
            v301 = v239 + 16 * v240;
            if (v242 == v301)
              goto LABEL_412;
            v302 = a3[3];
            break;
          default:
            goto LABEL_41;
        }
LABEL_406:
        v303 = *(_DWORD *)(v242 + 8) + v9;
        v352 = v303;
        if (v302 == a3[2])
        {
          v347 = v236;
          v317 = (_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v302 + 1, (unint64_t)&v352);
          v236 = v347;
          *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *v317;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v302) = v303;
        }
        v302 = a3[3] + 1;
        a3[3] = v302;
        while (1)
        {
          v242 += 16;
          if (v242 == v301)
            break;
          if (*(_QWORD *)v242)
          {
            if (v242 != v301)
              goto LABEL_406;
            break;
          }
        }
LABEL_412:
        v6 = v349;
        if (v236)
          goto LABEL_413;
        v304 = *a2 + v9;
        v305 = *(_QWORD *)(v349 + 56);
        v306 = *(unint64_t **)(v305 + 80);
        v307 = *v306;
        v308 = *((unsigned int *)v306 + 3) + *v306;
        if (v307 > v304 || v304 >= v308)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F0310);
        }
        v310 = *(_QWORD *)(v305 + 144);
        if (v310)
        {
          v311 = v304 - v307;
          v312 = *(_DWORD *)(v310 - 8);
          v313 = 9 * ((~(v311 << 15) + v311) ^ ((~(v311 << 15) + v311) >> 10));
          v314 = (v313 ^ (v313 >> 6)) + ~((v313 ^ (v313 >> 6)) << 11);
          v315 = v312 & (v314 ^ HIWORD(v314));
          v316 = *(_DWORD *)(v310 + 8 * v315);
          if (v316 == v311)
          {
LABEL_420:
            v236 = *(_DWORD *)(v310 + 8 * v315 + 4);
            goto LABEL_413;
          }
          v331 = 1;
          while (v316)
          {
            v315 = ((_DWORD)v315 + v331) & v312;
            v316 = *(_DWORD *)(v310 + 8 * v315);
            ++v331;
            if (v316 == v311)
              goto LABEL_420;
          }
        }
        v236 = 0;
LABEL_413:
        v32 = v236 + v9;
LABEL_51:
        v352 = v32;
        v33 = a3[3];
        if ((_DWORD)v33 == a3[2])
          *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *(_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v33 + 1, (unint64_t)&v352);
        else
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v33) = v32;
        ++a3[3];
LABEL_41:
        v10 = *a2;
        v27 = (unsigned __int8 *)(*a2 + v9);
        v28 = *v27;
        v29 = v28;
        if ((v28 | 2) == 0x82)
          v29 = v27[1];
        if (v29 == 89)
        {
          v352 = v9;
          v34 = a3[3];
          if ((_DWORD)v34 == a3[2])
          {
            *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *(_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v34 + 1, (unint64_t)&v352);
            v10 = *a2;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v34) = v9;
          }
          ++a3[3];
          v28 = *(unsigned __int8 *)(v10 + v9);
        }
        v30 = v28;
        if ((v28 | 2) == 0x82)
          v30 = *(unsigned __int8 *)(v10 + v9 + 1);
        v20 = v28 == 128;
        if (v28 == 130)
          v20 = 2;
        v21 = v28 == 128 || v28 == 130;
        v22 = JSC::opcodeLengths[v30] << v20;
        if (v21)
          v23 = 2;
        else
          v23 = 1;
        v9 += v23 + v22;
      }
      while (v9 != v8);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v41 = a3[3];
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = 0;
      v44 = *(_QWORD *)a3;
      v45 = -1;
      do
      {
        v46 = *(_DWORD *)(v44 + 4 * v42);
        if (v46 != v45)
        {
          if (v41 <= v43)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F0460);
          }
          *(_DWORD *)(v44 + 4 * v43++) = v46;
          v41 = a3[3];
          v45 = v46;
        }
        ++v42;
      }
      while (v42 < v41);
    }
    else
    {
      v43 = 0;
    }
    WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)a3, v43, v35, v36, v37, v38, v39, v40);
  }
}

void JSC::computePreciseJumpTargetsInternal<(JSC::ComputePreciseJumpTargetsMode)0,JSC::UnlinkedCodeBlockGenerator,32ul>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  char v28;
  _BOOL4 v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  JSC::UnlinkedCodeBlockGenerator *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::UnlinkedCodeBlockGenerator *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int **v67;
  unsigned int **v68;
  uint64_t *v69;
  unsigned int v70;
  JSC::UnlinkedCodeBlockGenerator *v71;
  signed int v72;
  unsigned __int8 v73[32];

  if (*(_DWORD *)(a1 + 28))
  {
    v6 = *(_DWORD *)(a1 + 196);
    if (v6)
    {
      v7 = v6 - 1;
      do
      {
        if (*(unsigned int *)(a1 + 196) <= (unint64_t)v7)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F0C5CLL);
        }
        v8 = v7;
        v9 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 16 * v7 + 8);
        v10 = a3[3];
        if ((_DWORD)v10 == a3[2])
        {
          WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v9);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v10) = *v9;
          ++a3[3];
        }
        if (*(unsigned int *)(a1 + 196) <= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F0C64);
        }
        v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 16 * v8);
        v12 = a3[3];
        if ((_DWORD)v12 == a3[2])
        {
          WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v11);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v12) = *v11;
          ++a3[3];
        }
        if (*(unsigned int *)(a1 + 196) <= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F0C6CLL);
        }
        v13 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 16 * v8 + 4);
        v14 = a3[3];
        if ((_DWORD)v14 == a3[2])
        {
          WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v13);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = *v13;
          ++a3[3];
        }
        v7 = v8 - 1;
      }
      while ((_DWORD)v8);
    }
    v69 = (uint64_t *)a2;
    v70 = 0;
    v15 = *(_DWORD *)(a2 + 12);
    if (v15)
    {
      v16 = 0;
      v17 = (uint64_t *)a2;
      do
      {
        v71 = (JSC::UnlinkedCodeBlockGenerator *)a1;
        v18 = *v17;
        v19 = (unsigned __int8 *)(v18 + v16);
        v20 = *v19;
        v21 = v20;
        if ((v20 | 2) == 0x82)
          v21 = v19[1];
        switch(v21)
        {
          case '.':
            v51 = JSC::jumpTargetForInstruction<JSC::OpJneqPtr,JSC::UnlinkedCodeBlockGenerator *&>(&v71, (uint64_t)&v69);
            goto LABEL_48;
          case 'C':
            if (v20 == 128)
            {
              v32 = *((__int16 *)v19 + 1);
            }
            else if (v20 == 130)
            {
              v32 = *(_DWORD *)(v19 + 2);
            }
            else
            {
              v32 = (char)v19[1];
            }
            goto LABEL_38;
          case 'D':
          case 'E':
          case 'H':
            if (v20 == 128)
            {
              v32 = *((__int16 *)v19 + 2);
            }
            else if (v20 == 130)
            {
              v32 = *(_DWORD *)(v19 + 6);
            }
            else
            {
              v32 = (char)v19[2];
            }
            goto LABEL_38;
          case 'F':
          case 'G':
          case 'I':
            v51 = JSC::jumpTargetForInstruction<JSC::OpJeqNull,JSC::UnlinkedCodeBlockGenerator *&>(&v71, (uint64_t)&v69);
            goto LABEL_48;
          case 'J':
            v50 = JSC::jumpTargetForInstruction<JSC::OpJeqPtr,JSC::UnlinkedCodeBlockGenerator *&>((JSC::UnlinkedCodeBlockGenerator *)a1, v18, v16);
            goto LABEL_63;
          case 'K':
          case 'M':
          case 'O':
          case 'P':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
            v51 = JSC::jumpTargetForInstruction<JSC::OpJless,JSC::UnlinkedCodeBlockGenerator *&>(&v71, (uint64_t)&v69);
LABEL_48:
            v34 = v51;
            v35 = v70;
            v36 = a3;
            goto LABEL_49;
          case 'L':
          case 'N':
            if (v20 == 128)
            {
              v32 = *((__int16 *)v19 + 3);
            }
            else if (v20 == 130)
            {
              v32 = *(_DWORD *)(v19 + 10);
            }
            else
            {
              v32 = (char)v19[3];
            }
LABEL_38:
            if (!v32)
              v32 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset((JSC::UnlinkedCodeBlockGenerator *)a1, v16);
            v72 = v32 + v16;
            v33 = a3[3];
            if ((_DWORD)v33 == a3[2])
            {
              WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)a3, (unint64_t)&v72);
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)a3 + 4 * v33) = v32 + v16;
              ++a3[3];
            }
            goto LABEL_19;
          case 'Q':
          case 'R':
            v50 = JSC::jumpTargetForInstruction<JSC::OpJgreater,JSC::UnlinkedCodeBlockGenerator *&>(a1, v18, v16);
            goto LABEL_63;
          case 'W':
          case 'X':
            v50 = JSC::jumpTargetForInstruction<JSC::OpJbelow,JSC::UnlinkedCodeBlockGenerator *&>(a1, v18, v16);
LABEL_63:
            v34 = v50;
            v36 = a3;
            v35 = v16;
            goto LABEL_49;
          case 'Z':
            JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchImm>((uint64_t)&v72, v19);
            if (*(unsigned int *)(a1 + 212) <= (unint64_t)v72)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0C7CLL);
            }
            v67 = (unsigned int **)(*(_QWORD *)(a1 + 200) + 16 * v72);
            v58 = (JSC::UnlinkedCodeBlockGenerator *)a1;
            if (!*v67)
              goto LABEL_106;
            v59 = **v67;
            v58 = (JSC::UnlinkedCodeBlockGenerator *)a1;
            if (!v59)
              goto LABEL_106;
            v60 = v59 - 1;
            v61 = 4 * (v59 - 1) + 4;
            do
            {
              if (**v67 <= v60)
              {
                __break(0xC471u);
                JUMPOUT(0x1981F0C3CLL);
              }
              JSC::getJumpTargetsForInstruction<32ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, v70, *(unsigned int *)((char *)*v67 + v61));
              v61 -= 4;
              --v60;
            }
            while (v60 != -1);
            goto LABEL_94;
          case '[':
            JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>(v19, (uint64_t)&v72);
            v58 = v71;
            if (*((unsigned int *)v71 + 53) <= (unint64_t)v72)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0C84);
            }
            v68 = (unsigned int **)(*((_QWORD *)v71 + 25) + 16 * v72);
            if (!*v68)
              goto LABEL_106;
            v62 = **v68;
            if (!v62)
              goto LABEL_106;
            v63 = v62 - 1;
            v64 = 4 * (v62 - 1) + 4;
            do
            {
              if (**v68 <= v63)
              {
                __break(0xC471u);
                JUMPOUT(0x1981F0C1CLL);
              }
              JSC::getJumpTargetsForInstruction<32ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, v70, *(unsigned int *)((char *)*v68 + v64));
              v64 -= 4;
              --v63;
            }
            while (v63 != -1);
LABEL_94:
            v58 = v71;
            goto LABEL_106;
          case '\\':
            JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchImm>((uint64_t)&v72, v19);
            if (*(unsigned int *)(a1 + 228) <= (unint64_t)v72)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F0C74);
            }
            v52 = *(_QWORD *)(a1 + 216) + 24 * v72;
            v53 = (JSC::UnlinkedCodeBlockGenerator *)a1;
            if (!*(_DWORD *)(v52 + 12))
              goto LABEL_105;
            v54 = *(_QWORD *)v52;
            v55 = *(unsigned int *)(v52 + 8);
            if ((_DWORD)v55)
            {
              v56 = 16 * v55;
              v57 = v54;
              while (!*(_QWORD *)v57)
              {
                v57 += 16;
                v56 -= 16;
                if (!v56)
                {
                  v53 = (JSC::UnlinkedCodeBlockGenerator *)a1;
                  goto LABEL_105;
                }
              }
            }
            else
            {
              v57 = v54;
            }
            v65 = v54 + 16 * v55;
            v53 = (JSC::UnlinkedCodeBlockGenerator *)a1;
            if (v57 == v65)
              goto LABEL_105;
            break;
          default:
            goto LABEL_19;
        }
LABEL_100:
        JSC::getJumpTargetsForInstruction<32ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, v70, *(_DWORD *)(v57 + 8));
        while (1)
        {
          v57 += 16;
          if (v57 == v65)
            break;
          if (*(_QWORD *)v57)
          {
            if (v57 != v65)
              goto LABEL_100;
            break;
          }
        }
        v53 = v71;
LABEL_105:
        v58 = v53;
LABEL_106:
        v34 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v73);
        v66 = v70;
        if (!v34)
          v34 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v58, v70);
        v36 = a3;
        v35 = v66;
LABEL_49:
        JSC::getJumpTargetsForInstruction<32ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(v36, v35, v34);
LABEL_19:
        v17 = v69;
        v22 = v70;
        v23 = (unsigned __int8 *)(*v69 + v70);
        v24 = *v23;
        if ((v24 | 2) == 0x82)
          v24 = v23[1];
        if (v24 == 89)
        {
          v72 = v70;
          v37 = a3[3];
          if ((_DWORD)v37 == a3[2])
          {
            WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)a3, (unint64_t)&v72);
            v17 = v69;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v37) = v70;
            ++a3[3];
          }
          v22 = v70;
        }
        v25 = (unsigned __int8 *)(*v17 + v22);
        v26 = *v25;
        v27 = v26;
        if ((v26 | 2) == 0x82)
          v27 = v25[1];
        v28 = v26 == 128;
        if (v26 == 130)
          v28 = 2;
        v29 = v26 == 128 || v26 == 130;
        v30 = JSC::opcodeLengths[v27] << v28;
        if (v29)
          v31 = 2;
        else
          v31 = 1;
        v16 = v31 + v22 + v30;
        v70 = v16;
      }
      while (v17 != (uint64_t *)a2 || v16 != v15);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v44 = a3[3];
    if ((_DWORD)v44)
    {
      v45 = 0;
      v46 = 0;
      v47 = *(_QWORD *)a3;
      v48 = -1;
      do
      {
        v49 = *(_DWORD *)(v47 + 4 * v45);
        if (v49 != v48)
        {
          if (v44 <= v46)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F0C54);
          }
          *(_DWORD *)(v47 + 4 * v46++) = v49;
          v44 = a3[3];
          v48 = v49;
        }
        ++v45;
      }
      while (v45 < v44);
    }
    else
    {
      v46 = 0;
    }
    WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)a3, v46, v38, v39, v40, v41, v42, v43);
  }
}

void JSC::computePreciseJumpTargetsInternal<(JSC::ComputePreciseJumpTargetsMode)1,JSC::UnlinkedCodeBlockGenerator,0ul>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  char v28;
  _BOOL4 v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int **v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  JSC::UnlinkedCodeBlockGenerator *v62;
  uint64_t v63;
  JSC::UnlinkedCodeBlockGenerator *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int **v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t *v76;
  unsigned int v77;
  JSC::UnlinkedCodeBlockGenerator *v78;
  signed int v79;
  unsigned __int8 v80[32];

  v6 = *(_DWORD *)(a1 + 196);
  if (v6)
  {
    v7 = v6 - 1;
    do
    {
      if (*(unsigned int *)(a1 + 196) <= (unint64_t)v7)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F1550);
      }
      v8 = v7;
      v9 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 16 * v7 + 8);
      v10 = a3[3];
      if ((_DWORD)v10 == a3[2])
      {
        WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v9);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v10) = *v9;
        ++a3[3];
      }
      if (*(unsigned int *)(a1 + 196) <= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F1558);
      }
      v11 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 16 * v8);
      v12 = a3[3];
      if ((_DWORD)v12 == a3[2])
      {
        WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v11);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v12) = *v11;
        ++a3[3];
      }
      if (*(unsigned int *)(a1 + 196) <= v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F1560);
      }
      v13 = (_DWORD *)(*(_QWORD *)(a1 + 184) + 16 * v8 + 4);
      v14 = a3[3];
      if ((_DWORD)v14 == a3[2])
      {
        WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)v13);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v14) = *v13;
        ++a3[3];
      }
      v7 = v8 - 1;
    }
    while ((_DWORD)v8);
  }
  v76 = (uint64_t *)a2;
  v77 = 0;
  v15 = *(_DWORD *)(a2 + 12);
  if (v15)
  {
    v16 = 0;
    v17 = (uint64_t *)a2;
    do
    {
      v78 = (JSC::UnlinkedCodeBlockGenerator *)a1;
      v18 = *v17;
      v19 = (unsigned __int8 *)(v18 + v16);
      v20 = *v19;
      v21 = v20;
      if ((v20 | 2) == 0x82)
        v21 = v19[1];
      switch(v21)
      {
        case '.':
          v61 = JSC::jumpTargetForInstruction<JSC::OpJneqPtr,JSC::UnlinkedCodeBlockGenerator *&>(&v78, (uint64_t)&v76);
          goto LABEL_67;
        case 'C':
          if (v20 == 128)
          {
            LODWORD(v32) = *((__int16 *)v19 + 1);
          }
          else if (v20 == 130)
          {
            LODWORD(v32) = *(_DWORD *)(v19 + 2);
          }
          else
          {
            LODWORD(v32) = (char)v19[1];
          }
          goto LABEL_41;
        case 'D':
        case 'E':
        case 'H':
          if (v20 == 128)
          {
            LODWORD(v32) = *((__int16 *)v19 + 2);
          }
          else if (v20 == 130)
          {
            LODWORD(v32) = *(_DWORD *)(v19 + 6);
          }
          else
          {
            LODWORD(v32) = (char)v19[2];
          }
          goto LABEL_41;
        case 'F':
        case 'G':
        case 'I':
          v61 = JSC::jumpTargetForInstruction<JSC::OpJeqNull,JSC::UnlinkedCodeBlockGenerator *&>(&v78, (uint64_t)&v76);
          goto LABEL_67;
        case 'J':
          v60 = JSC::jumpTargetForInstruction<JSC::OpJeqPtr,JSC::UnlinkedCodeBlockGenerator *&>((JSC::UnlinkedCodeBlockGenerator *)a1, v18, v16);
          goto LABEL_89;
        case 'K':
        case 'M':
        case 'O':
        case 'P':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
          v61 = JSC::jumpTargetForInstruction<JSC::OpJless,JSC::UnlinkedCodeBlockGenerator *&>(&v78, (uint64_t)&v76);
LABEL_67:
          v43 = v61;
          v44 = v77;
          v45 = a3;
          goto LABEL_68;
        case 'L':
        case 'N':
          if (v20 == 128)
          {
            LODWORD(v32) = *((__int16 *)v19 + 3);
          }
          else if (v20 == 130)
          {
            LODWORD(v32) = *(_DWORD *)(v19 + 10);
          }
          else
          {
            LODWORD(v32) = (char)v19[3];
          }
LABEL_41:
          if ((_DWORD)v32)
            goto LABEL_42;
          v62 = (JSC::UnlinkedCodeBlockGenerator *)a1;
          goto LABEL_70;
        case 'Q':
        case 'R':
          v60 = JSC::jumpTargetForInstruction<JSC::OpJgreater,JSC::UnlinkedCodeBlockGenerator *&>(a1, v18, v16);
          goto LABEL_89;
        case 'W':
        case 'X':
          v60 = JSC::jumpTargetForInstruction<JSC::OpJbelow,JSC::UnlinkedCodeBlockGenerator *&>(a1, v18, v16);
LABEL_89:
          v43 = v60;
          v45 = a3;
          v44 = v16;
LABEL_68:
          JSC::getJumpTargetsForInstruction<0ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(v45, v44, v43);
          goto LABEL_22;
        case 'Z':
          if (v20 == 130)
          {
            v34 = *(_DWORD *)(v19 + 2);
            v32 = *(unsigned int *)(v19 + 6);
          }
          else if (v20 == 128)
          {
            v34 = *((unsigned __int16 *)v19 + 1);
            v32 = *((__int16 *)v19 + 2);
          }
          else
          {
            v34 = v19[1];
            v32 = (char)v19[2];
          }
          if (*(unsigned int *)(a1 + 212) <= (unint64_t)v34)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F1578);
          }
          v35 = (unsigned int **)(*(_QWORD *)(a1 + 200) + 16 * v34);
          if (*v35)
          {
            v36 = **v35;
            if (v36)
            {
              v37 = v36 - 1;
              v38 = 4 * (v36 - 1) + 4;
              do
              {
                if (**v35 <= v37)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1981F1468);
                }
                v39 = v77 + *(unsigned int *)((char *)*v35 + v38);
                v79 = v39;
                v40 = a3[3];
                if ((_DWORD)v40 == a3[2])
                {
                  v41 = v32;
                  v42 = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v40 + 1, (unint64_t)&v79);
                  v32 = v41;
                  *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = v42;
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)a3 + 4 * v40) = v39;
                }
                ++a3[3];
                v38 -= 4;
                --v37;
              }
              while (v37 != -1);
              v16 = v77;
            }
          }
          if ((_DWORD)v32)
            goto LABEL_42;
          v62 = v78;
LABEL_70:
          LODWORD(v32) = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v62, v16);
LABEL_42:
          v79 = v32 + v16;
          v33 = a3[3];
          if ((_DWORD)v33 == a3[2])
            *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v33 + 1, (unint64_t)&v79);
          else
            *(_DWORD *)(*(_QWORD *)a3 + 4 * v33) = v32 + v16;
          ++a3[3];
          goto LABEL_22;
        case '[':
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>(v19, (uint64_t)&v79);
          v64 = v78;
          if (*((unsigned int *)v78 + 53) <= (unint64_t)v79)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F1570);
          }
          v69 = (unsigned int **)(*((_QWORD *)v78 + 25) + 16 * v79);
          if (!*v69)
            goto LABEL_122;
          v70 = **v69;
          if (!v70)
            goto LABEL_122;
          v71 = v70 - 1;
          v72 = 4 * (v70 - 1) + 4;
          do
          {
            if (**v69 <= v71)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F1530);
            }
            JSC::getJumpTargetsForInstruction<0ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, v77, *(unsigned int *)((char *)*v69 + v72));
            v72 -= 4;
            --v71;
          }
          while (v71 != -1);
          goto LABEL_121;
        case '\\':
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchImm>((uint64_t)&v79, v19);
          if (*(unsigned int *)(a1 + 228) <= (unint64_t)v79)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F1568);
          }
          v63 = *(_QWORD *)(a1 + 216) + 24 * v79;
          v64 = (JSC::UnlinkedCodeBlockGenerator *)a1;
          if (!*(_DWORD *)(v63 + 12))
            goto LABEL_122;
          v65 = *(_QWORD *)v63;
          v66 = *(unsigned int *)(v63 + 8);
          if ((_DWORD)v66)
          {
            v67 = 16 * v66;
            v68 = v65;
            while (!*(_QWORD *)v68)
            {
              v68 += 16;
              v67 -= 16;
              if (!v67)
              {
                v64 = (JSC::UnlinkedCodeBlockGenerator *)a1;
                goto LABEL_122;
              }
            }
          }
          else
          {
            v68 = v65;
          }
          v73 = v65 + 16 * v66;
          v64 = (JSC::UnlinkedCodeBlockGenerator *)a1;
          if (v68 == v73)
            goto LABEL_122;
          break;
        default:
          goto LABEL_22;
      }
LABEL_117:
      JSC::getJumpTargetsForInstruction<0ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, v77, *(_DWORD *)(v68 + 8));
      while (1)
      {
        v68 += 16;
        if (v68 == v73)
          break;
        if (*(_QWORD *)v68)
        {
          if (v68 != v73)
            goto LABEL_117;
          break;
        }
      }
LABEL_121:
      v64 = v78;
LABEL_122:
      v74 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v80);
      v75 = v77;
      if (!v74)
        v74 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v64, v77);
      JSC::getJumpTargetsForInstruction<0ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, v75, v74);
LABEL_22:
      v17 = v76;
      v22 = v77;
      v23 = (unsigned __int8 *)(*v76 + v77);
      v24 = *v23;
      if ((v24 | 2) == 0x82)
        v24 = v23[1];
      if (v24 == 89)
      {
        v79 = v77;
        v46 = a3[3];
        if ((_DWORD)v46 == a3[2])
        {
          WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)a3, (unint64_t)&v79);
          v17 = v76;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v46) = v77;
          ++a3[3];
        }
        v22 = v77;
      }
      v25 = (unsigned __int8 *)(*v17 + v22);
      v26 = *v25;
      v27 = v26;
      if ((v26 | 2) == 0x82)
        v27 = v25[1];
      v28 = v26 == 128;
      if (v26 == 130)
        v28 = 2;
      v29 = v26 == 128 || v26 == 130;
      v30 = JSC::opcodeLengths[v27] << v28;
      if (v29)
        v31 = 2;
      else
        v31 = 1;
      v16 = v31 + v22 + v30;
      v77 = v16;
    }
    while (v17 != (uint64_t *)a2 || v16 != v15);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v54 = a3[3];
  if ((_DWORD)v54)
  {
    v55 = 0;
    v56 = 0;
    v57 = *(_QWORD *)a3;
    v58 = -1;
    do
    {
      v59 = *(_DWORD *)(v57 + 4 * v55);
      if (v59 != v58)
      {
        if (v54 <= v56)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F1548);
        }
        *(_DWORD *)(v57 + 4 * v56++) = v59;
        v54 = a3[3];
        v58 = v59;
      }
      ++v55;
    }
    while (v55 < v54);
    if (a3[2] > v56)
    {
      if (v54 > v56)
        a3[3] = v56;
      if (v56)
      {
        a3[2] = v56;
        *(_QWORD *)a3 = WTF::fastRealloc(v57, 4 * v56, v48, v49, v50, v51, v52, v53);
        return;
      }
LABEL_95:
      *(_QWORD *)a3 = 0;
      a3[2] = 0;
      WTF::fastFree(v57, v47, v48, v49, v50, v51, v52, v53);
    }
  }
  else if (a3[2])
  {
    v57 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
      goto LABEL_95;
  }
}

uint64_t JSC::findJumpTargetsForInstruction(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  int v191;
  unsigned int *v192;
  unsigned int *v193;
  int *v194;
  unsigned int **v195;
  int *v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  unsigned int *v210;
  unsigned int *v211;
  int *v212;
  unsigned int **v213;
  int *v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unsigned __int8 v222[36];
  int v223;

  v5 = result;
  v6 = *(unsigned int *)(a2 + 8);
  v7 = **(_QWORD **)a2;
  v8 = v7 + v6;
  v9 = *(unsigned __int8 *)(v7 + v6);
  v10 = v9;
  if ((v9 | 2) == 0x82)
    v10 = *(unsigned __int8 *)(v8 + 1);
  switch(v10)
  {
    case '.':
      if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v116 = *(_QWORD *)(result + 56);
      v117 = *(_QWORD *)(v116 + 80);
      v118 = *(_QWORD *)v117;
      v119 = *(unsigned int *)(v117 + 12) + *(_QWORD *)v117;
      if (v118 > v8 || v8 >= v119)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F26E8);
      }
      v11 = *(_QWORD *)(v116 + 144);
      if (!v11)
        goto LABEL_8;
      v121 = v8 - v118;
      v122 = *(_DWORD *)(v11 - 8);
      v123 = 9 * ((~(v121 << 15) + v121) ^ ((~(v121 << 15) + v121) >> 10));
      v124 = (v123 ^ (v123 >> 6)) + ~((v123 ^ (v123 >> 6)) << 11);
      v26 = v122 & (v124 ^ HIWORD(v124));
      v125 = *(_DWORD *)(v11 + 8 * v26);
      if (v125 == v121)
        goto LABEL_106;
      v126 = 1;
      do
      {
        if (!v125)
          goto LABEL_340;
        v26 = ((_DWORD)v26 + v126) & v122;
        v125 = *(_DWORD *)(v11 + 8 * v26);
        ++v126;
      }
      while (v125 != v121);
      goto LABEL_106;
    case 'C':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 2);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 2);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 1);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v84 = *(_QWORD *)(result + 56);
      v85 = *(_QWORD *)(v84 + 80);
      v86 = *(_QWORD *)v85;
      v87 = *(unsigned int *)(v85 + 12) + *(_QWORD *)v85;
      if (v86 > v8 || v8 >= v87)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2550);
      }
      v11 = *(_QWORD *)(v84 + 144);
      if (!v11)
        goto LABEL_8;
      v89 = v8 - v86;
      v90 = *(_DWORD *)(v11 - 8);
      v91 = 9 * ((~(v89 << 15) + v89) ^ ((~(v89 << 15) + v89) >> 10));
      v92 = (v91 ^ (v91 >> 6)) + ~((v91 ^ (v91 >> 6)) << 11);
      v26 = v90 & (v92 ^ HIWORD(v92));
      v93 = *(_DWORD *)(v11 + 8 * v26);
      if (v93 == v89)
        goto LABEL_106;
      v182 = 1;
      while (v93)
      {
        v26 = ((_DWORD)v26 + v182) & v90;
        v93 = *(_DWORD *)(v11 + 8 * v26);
        ++v182;
        if (v93 == v89)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'D':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 4);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 6);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 2);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v29 = *(_QWORD *)(result + 56);
      v30 = *(_QWORD *)(v29 + 80);
      v31 = *(_QWORD *)v30;
      v32 = *(unsigned int *)(v30 + 12) + *(_QWORD *)v30;
      if (v31 > v8 || v8 >= v32)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F25B8);
      }
      v11 = *(_QWORD *)(v29 + 144);
      if (!v11)
        goto LABEL_8;
      v34 = v8 - v31;
      v35 = *(_DWORD *)(v11 - 8);
      v36 = 9 * ((~(v34 << 15) + v34) ^ ((~(v34 << 15) + v34) >> 10));
      v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
      v26 = v35 & (v37 ^ HIWORD(v37));
      v38 = *(_DWORD *)(v11 + 8 * v26);
      if (v38 == v34)
        goto LABEL_106;
      v39 = 1;
      while (v38)
      {
        v26 = ((_DWORD)v26 + v39) & v35;
        v38 = *(_DWORD *)(v11 + 8 * v26);
        ++v39;
        if (v38 == v34)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'E':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 4);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 6);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 2);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v17 = *(_QWORD *)(result + 56);
      v18 = *(_QWORD *)(v17 + 80);
      v19 = *(_QWORD *)v18;
      v20 = *(unsigned int *)(v18 + 12) + *(_QWORD *)v18;
      if (v19 > v8 || v8 >= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2570);
      }
      v11 = *(_QWORD *)(v17 + 144);
      if (!v11)
        goto LABEL_8;
      v22 = v8 - v19;
      v23 = *(_DWORD *)(v11 - 8);
      v24 = 9 * ((~(v22 << 15) + v22) ^ ((~(v22 << 15) + v22) >> 10));
      v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
      v26 = v23 & (v25 ^ HIWORD(v25));
      v27 = *(_DWORD *)(v11 + 8 * v26);
      if (v27 == v22)
        goto LABEL_106;
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v23;
        v27 = *(_DWORD *)(v11 + 8 * v26);
        ++v28;
        if (v27 == v22)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'F':
    case 'G':
      if (v9 == 128)
      {
        result = *(__int16 *)(v8 + 4);
      }
      else if (v9 == 130)
      {
        result = *(unsigned int *)(v8 + 6);
      }
      else
      {
        result = *(char *)(v8 + 2);
      }
      goto LABEL_152;
    case 'H':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 4);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 6);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 2);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v171 = *(_QWORD *)(result + 56);
      v172 = *(_QWORD *)(v171 + 80);
      v173 = *(_QWORD *)v172;
      v174 = *(unsigned int *)(v172 + 12) + *(_QWORD *)v172;
      if (v173 > v8 || v8 >= v174)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F27D8);
      }
      v11 = *(_QWORD *)(v171 + 144);
      if (!v11)
        goto LABEL_8;
      v176 = v8 - v173;
      v177 = *(_DWORD *)(v11 - 8);
      v178 = 9 * ((~(v176 << 15) + v176) ^ ((~(v176 << 15) + v176) >> 10));
      v179 = (v178 ^ (v178 >> 6)) + ~((v178 ^ (v178 >> 6)) << 11);
      v26 = v177 & (v179 ^ HIWORD(v179));
      v180 = *(_DWORD *)(v11 + 8 * v26);
      if (v180 == v176)
        goto LABEL_106;
      v181 = 1;
      while (v180)
      {
        v26 = ((_DWORD)v26 + v181) & v177;
        v180 = *(_DWORD *)(v11 + 8 * v26);
        ++v181;
        if (v180 == v176)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'I':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 4);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 6);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 2);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v149 = *(_QWORD *)(result + 56);
      v150 = *(_QWORD *)(v149 + 80);
      v151 = *(_QWORD *)v150;
      v152 = *(unsigned int *)(v150 + 12) + *(_QWORD *)v150;
      if (v151 > v8 || v8 >= v152)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2790);
      }
      v11 = *(_QWORD *)(v149 + 144);
      if (!v11)
        goto LABEL_8;
      v154 = v8 - v151;
      v155 = *(_DWORD *)(v11 - 8);
      v156 = 9 * ((~(v154 << 15) + v154) ^ ((~(v154 << 15) + v154) >> 10));
      v157 = (v156 ^ (v156 >> 6)) + ~((v156 ^ (v156 >> 6)) << 11);
      v26 = v155 & (v157 ^ HIWORD(v157));
      v158 = *(_DWORD *)(v11 + 8 * v26);
      if (v158 == v154)
        goto LABEL_106;
      v159 = 1;
      while (v158)
      {
        v26 = ((_DWORD)v26 + v159) & v155;
        v158 = *(_DWORD *)(v11 + 8 * v26);
        ++v159;
        if (v158 == v154)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'J':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v160 = *(_QWORD *)(result + 56);
      v161 = *(_QWORD *)(v160 + 80);
      v162 = *(_QWORD *)v161;
      v163 = *(unsigned int *)(v161 + 12) + *(_QWORD *)v161;
      if (v162 > v8 || v8 >= v163)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F27B0);
      }
      v11 = *(_QWORD *)(v160 + 144);
      if (!v11)
        goto LABEL_8;
      v165 = v8 - v162;
      v166 = *(_DWORD *)(v11 - 8);
      v167 = 9 * ((~(v165 << 15) + v165) ^ ((~(v165 << 15) + v165) >> 10));
      v168 = (v167 ^ (v167 >> 6)) + ~((v167 ^ (v167 >> 6)) << 11);
      v26 = v166 & (v168 ^ HIWORD(v168));
      v169 = *(_DWORD *)(v11 + 8 * v26);
      if (v169 == v165)
        goto LABEL_106;
      v170 = 1;
      while (v169)
      {
        v26 = ((_DWORD)v26 + v170) & v166;
        v169 = *(_DWORD *)(v11 + 8 * v26);
        ++v170;
        if (v169 == v165)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'K':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v127 = *(_QWORD *)(result + 56);
      v128 = *(_QWORD *)(v127 + 80);
      v129 = *(_QWORD *)v128;
      v130 = *(unsigned int *)(v128 + 12) + *(_QWORD *)v128;
      if (v129 > v8 || v8 >= v130)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2750);
      }
      v11 = *(_QWORD *)(v127 + 144);
      if (!v11)
        goto LABEL_8;
      v132 = v8 - v129;
      v133 = *(_DWORD *)(v11 - 8);
      v134 = 9 * ((~(v132 << 15) + v132) ^ ((~(v132 << 15) + v132) >> 10));
      v135 = (v134 ^ (v134 >> 6)) + ~((v134 ^ (v134 >> 6)) << 11);
      v26 = v133 & (v135 ^ HIWORD(v135));
      v136 = *(_DWORD *)(v11 + 8 * v26);
      if (v136 == v132)
        goto LABEL_106;
      v137 = 1;
      while (v136)
      {
        v26 = ((_DWORD)v26 + v137) & v133;
        v136 = *(_DWORD *)(v11 + 8 * v26);
        ++v137;
        if (v136 == v132)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'L':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v62 = *(_QWORD *)(result + 56);
      v63 = *(_QWORD *)(v62 + 80);
      v64 = *(_QWORD *)v63;
      v65 = *(unsigned int *)(v63 + 12) + *(_QWORD *)v63;
      if (v64 > v8 || v8 >= v65)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2628);
      }
      v11 = *(_QWORD *)(v62 + 144);
      if (!v11)
        goto LABEL_8;
      v67 = v8 - v64;
      v68 = *(_DWORD *)(v11 - 8);
      v69 = 9 * ((~(v67 << 15) + v67) ^ ((~(v67 << 15) + v67) >> 10));
      v70 = (v69 ^ (v69 >> 6)) + ~((v69 ^ (v69 >> 6)) << 11);
      v26 = v68 & (v70 ^ HIWORD(v70));
      v71 = *(_DWORD *)(v11 + 8 * v26);
      if (v71 == v67)
        goto LABEL_106;
      v72 = 1;
      while (v71)
      {
        v26 = ((_DWORD)v26 + v72) & v68;
        v71 = *(_DWORD *)(v11 + 8 * v26);
        ++v72;
        if (v71 == v67)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'M':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v94 = *(_QWORD *)(result + 56);
      v95 = *(_QWORD *)(v94 + 80);
      v96 = *(_QWORD *)v95;
      v97 = *(unsigned int *)(v95 + 12) + *(_QWORD *)v95;
      if (v96 > v8 || v8 >= v97)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F26A8);
      }
      v11 = *(_QWORD *)(v94 + 144);
      if (!v11)
        goto LABEL_8;
      v99 = v8 - v96;
      v100 = *(_DWORD *)(v11 - 8);
      v101 = 9 * ((~(v99 << 15) + v99) ^ ((~(v99 << 15) + v99) >> 10));
      v102 = (v101 ^ (v101 >> 6)) + ~((v101 ^ (v101 >> 6)) << 11);
      v26 = v100 & (v102 ^ HIWORD(v102));
      v103 = *(_DWORD *)(v11 + 8 * v26);
      if (v103 == v99)
        goto LABEL_106;
      v104 = 1;
      while (v103)
      {
        v26 = ((_DWORD)v26 + v104) & v100;
        v103 = *(_DWORD *)(v11 + 8 * v26);
        ++v104;
        if (v103 == v99)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'N':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v73 = *(_QWORD *)(result + 56);
      v74 = *(_QWORD *)(v73 + 80);
      v75 = *(_QWORD *)v74;
      v76 = *(unsigned int *)(v74 + 12) + *(_QWORD *)v74;
      if (v75 > v8 || v8 >= v76)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2648);
      }
      v11 = *(_QWORD *)(v73 + 144);
      if (!v11)
        goto LABEL_8;
      v78 = v8 - v75;
      v79 = *(_DWORD *)(v11 - 8);
      v80 = 9 * ((~(v78 << 15) + v78) ^ ((~(v78 << 15) + v78) >> 10));
      v81 = (v80 ^ (v80 >> 6)) + ~((v80 ^ (v80 >> 6)) << 11);
      v26 = v79 & (v81 ^ HIWORD(v81));
      v82 = *(_DWORD *)(v11 + 8 * v26);
      if (v82 == v78)
        goto LABEL_106;
      v83 = 1;
      while (v82)
      {
        v26 = ((_DWORD)v26 + v83) & v79;
        v82 = *(_DWORD *)(v11 + 8 * v26);
        ++v83;
        if (v82 == v78)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'O':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v51 = *(_QWORD *)(result + 56);
      v52 = *(_QWORD *)(v51 + 80);
      v53 = *(_QWORD *)v52;
      v54 = *(unsigned int *)(v52 + 12) + *(_QWORD *)v52;
      if (v53 > v8 || v8 >= v54)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2608);
      }
      v11 = *(_QWORD *)(v51 + 144);
      if (!v11)
        goto LABEL_8;
      v56 = v8 - v53;
      v57 = *(_DWORD *)(v11 - 8);
      v58 = 9 * ((~(v56 << 15) + v56) ^ ((~(v56 << 15) + v56) >> 10));
      v59 = (v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11);
      v26 = v57 & (v59 ^ HIWORD(v59));
      v60 = *(_DWORD *)(v11 + 8 * v26);
      if (v60 == v56)
        goto LABEL_106;
      v61 = 1;
      while (v60)
      {
        v26 = ((_DWORD)v26 + v61) & v57;
        v60 = *(_DWORD *)(v11 + 8 * v26);
        ++v61;
        if (v60 == v56)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'X':
      if (v9 == 128)
      {
        result = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        result = *(unsigned int *)(v8 + 10);
      }
      else
      {
        result = *(char *)(v8 + 3);
      }
LABEL_152:
      if (!(_DWORD)result)
      {
        result = JSC::CodeBlock::outOfLineJumpOffset(v5, v8);
        LODWORD(v6) = *(_DWORD *)(a2 + 8);
      }
      v12 = result + v6;
      goto LABEL_9;
    case 'S':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v40 = *(_QWORD *)(result + 56);
      v41 = *(_QWORD *)(v40 + 80);
      v42 = *(_QWORD *)v41;
      v43 = *(unsigned int *)(v41 + 12) + *(_QWORD *)v41;
      if (v42 > v8 || v8 >= v43)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F25E0);
      }
      v11 = *(_QWORD *)(v40 + 144);
      if (!v11)
        goto LABEL_8;
      v45 = v8 - v42;
      v46 = *(_DWORD *)(v11 - 8);
      v47 = 9 * ((~(v45 << 15) + v45) ^ ((~(v45 << 15) + v45) >> 10));
      v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
      v26 = v46 & (v48 ^ HIWORD(v48));
      v49 = *(_DWORD *)(v11 + 8 * v26);
      if (v49 == v45)
        goto LABEL_106;
      v50 = 1;
      while (v49)
      {
        v26 = ((_DWORD)v26 + v50) & v46;
        v49 = *(_DWORD *)(v11 + 8 * v26);
        ++v50;
        if (v49 == v45)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'U':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v105 = *(_QWORD *)(result + 56);
      v106 = *(_QWORD *)(v105 + 80);
      v107 = *(_QWORD *)v106;
      v108 = *(unsigned int *)(v106 + 12) + *(_QWORD *)v106;
      if (v107 > v8 || v8 >= v108)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F26C8);
      }
      v11 = *(_QWORD *)(v105 + 144);
      if (!v11)
        goto LABEL_8;
      v110 = v8 - v107;
      v111 = *(_DWORD *)(v11 - 8);
      v112 = 9 * ((~(v110 << 15) + v110) ^ ((~(v110 << 15) + v110) >> 10));
      v113 = (v112 ^ (v112 >> 6)) + ~((v112 ^ (v112 >> 6)) << 11);
      v26 = v111 & (v113 ^ HIWORD(v113));
      v114 = *(_DWORD *)(v11 + 8 * v26);
      if (v114 == v110)
        goto LABEL_106;
      v115 = 1;
      while (v114)
      {
        v26 = ((_DWORD)v26 + v115) & v111;
        v114 = *(_DWORD *)(v11 + 8 * v26);
        ++v115;
        if (v114 == v110)
          goto LABEL_106;
      }
      goto LABEL_340;
    case 'V':
      if (v9 == 128)
      {
        LODWORD(v11) = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        LODWORD(v11) = *(_DWORD *)(v8 + 10);
      }
      else
      {
        LODWORD(v11) = *(char *)(v8 + 3);
      }
      if ((_DWORD)v11)
        goto LABEL_8;
      v138 = *(_QWORD *)(result + 56);
      v139 = *(_QWORD *)(v138 + 80);
      v140 = *(_QWORD *)v139;
      v141 = *(unsigned int *)(v139 + 12) + *(_QWORD *)v139;
      if (v140 > v8 || v8 >= v141)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2770);
      }
      v11 = *(_QWORD *)(v138 + 144);
      if (!v11)
        goto LABEL_8;
      v143 = v8 - v140;
      v144 = *(_DWORD *)(v11 - 8);
      v145 = 9 * ((~(v143 << 15) + v143) ^ ((~(v143 << 15) + v143) >> 10));
      v146 = (v145 ^ (v145 >> 6)) + ~((v145 ^ (v145 >> 6)) << 11);
      v26 = v144 & (v146 ^ HIWORD(v146));
      v147 = *(_DWORD *)(v11 + 8 * v26);
      if (v147 == v143)
        goto LABEL_106;
      v148 = 1;
      while (v147)
      {
        v26 = ((_DWORD)v26 + v148) & v144;
        v147 = *(_DWORD *)(v11 + 8 * v26);
        ++v148;
        if (v147 == v143)
        {
LABEL_106:
          LODWORD(v11) = *(_DWORD *)(v11 + 8 * v26 + 4);
          goto LABEL_8;
        }
      }
LABEL_340:
      LODWORD(v11) = 0;
LABEL_8:
      v12 = v11 + v6;
      goto LABEL_9;
    case 'W':
      v202 = JSC::jumpTargetForInstruction<JSC::OpJbelow,JSC::CodeBlock *&>(result, v7, v6);
      goto LABEL_265;
    case 'Z':
      if (v9 == 130)
      {
        v190 = *(_DWORD *)(v8 + 2);
        v191 = *(_DWORD *)(v8 + 6);
      }
      else if (v9 == 128)
      {
        v190 = *(unsigned __int16 *)(v8 + 2);
        v191 = *(__int16 *)(v8 + 4);
      }
      else
      {
        v190 = *(unsigned __int8 *)(v8 + 1);
        v191 = *(char *)(v8 + 2);
      }
      v192 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(result + 56) + 152) + 8);
      if (*v192 <= v190)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2730);
      }
      v193 = &v192[4 * v190];
      v196 = (int *)*((_QWORD *)v193 + 1);
      v195 = (unsigned int **)(v193 + 2);
      v194 = v196;
      if (v196)
      {
        v197 = *v194;
        if (v197)
        {
          v198 = v197 - 1;
          v199 = 4 * (v197 - 1) + 4;
          do
          {
            if (**v195 <= v198)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F2530);
            }
            v200 = *(_DWORD *)(a2 + 8) + *(unsigned int *)((char *)*v195 + v199);
            v221 = v200;
            v201 = a3[3];
            if ((_DWORD)v201 == a3[2])
            {
              result = WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v201 + 1, (unint64_t)&v221);
              *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *(_DWORD *)result;
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)a3 + 4 * v201) = v200;
            }
            ++a3[3];
            v199 -= 4;
            --v198;
          }
          while (v198 != -1);
          LODWORD(v6) = *(_DWORD *)(a2 + 8);
        }
      }
      if (!v191)
      {
        result = JSC::CodeBlock::outOfLineJumpOffset(v5, **(_QWORD **)a2 + v6);
        v191 = result;
        LODWORD(v6) = *(_DWORD *)(a2 + 8);
      }
      v12 = v191 + v6;
      goto LABEL_9;
    case '[':
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>((unsigned __int8 *)v8, (uint64_t)&v221);
      v210 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 152) + 8);
      if (*v210 <= v221)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F28A0);
      }
      v211 = &v210[4 * v221];
      v214 = (int *)*((_QWORD *)v211 + 1);
      v213 = (unsigned int **)(v211 + 2);
      v212 = v214;
      if (v214)
      {
        v215 = *v212;
        if (v215)
        {
          v216 = v215 - 1;
          v217 = 4 * (v215 - 1) + 4;
          do
          {
            if (**v213 <= v216)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F2688);
            }
            v218 = *(_DWORD *)(a2 + 8) + *(unsigned int *)((char *)*v213 + v217);
            v223 = v218;
            v219 = a3[3];
            if ((_DWORD)v219 == a3[2])
              *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *(_DWORD *)WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v219 + 1, (unint64_t)&v223);
            else
              *(_DWORD *)(*(_QWORD *)a3 + 4 * v219) = v218;
            ++a3[3];
            v217 -= 4;
            --v216;
          }
          while (v216 != -1);
        }
      }
      v203 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v222);
      if (v203)
        goto LABEL_266;
      v202 = JSC::CodeBlock::outOfLineJumpOffset(v5, **(_QWORD **)a2 + *(unsigned int *)(a2 + 8));
LABEL_265:
      v203 = v202;
LABEL_266:
      result = (uint64_t)JSC::getJumpTargetsForInstruction<1ul,JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, *(_DWORD *)(a2 + 8), v203);
      goto LABEL_12;
    case '\\':
      if (v9 == 130)
      {
        v183 = *(_DWORD *)(v8 + 2);
        result = *(unsigned int *)(v8 + 6);
      }
      else if (v9 == 128)
      {
        v183 = *(unsigned __int16 *)(v8 + 2);
        result = *(__int16 *)(v8 + 4);
      }
      else
      {
        v183 = *(unsigned __int8 *)(v8 + 1);
        result = *(char *)(v8 + 2);
      }
      v184 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 152) + 16);
      if (*v184 <= v183)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2708);
      }
      v185 = &v184[6 * v183];
      if (!v185[5])
        goto LABEL_280;
      v186 = *((_QWORD *)v185 + 1);
      v187 = v185[4];
      if ((_DWORD)v187)
      {
        v188 = 16 * v187;
        v189 = v186;
        while (!*(_QWORD *)v189)
        {
          v189 += 16;
          v188 -= 16;
          if (!v188)
            goto LABEL_280;
        }
      }
      else
      {
        v189 = v186;
      }
      v204 = v186 + 16 * v187;
      if (v189 == v204)
        goto LABEL_280;
      v205 = a3[3];
      break;
    default:
      goto LABEL_12;
  }
LABEL_274:
  v206 = *(_DWORD *)(a2 + 8) + *(_DWORD *)(v189 + 8);
  v221 = v206;
  if (v205 == a3[2])
  {
    v208 = result;
    v209 = (_DWORD *)WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v205 + 1, (unint64_t)&v221);
    result = v208;
    *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *v209;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v205) = v206;
  }
  v205 = a3[3] + 1;
  a3[3] = v205;
  while (1)
  {
    v189 += 16;
    if (v189 == v204)
      break;
    if (*(_QWORD *)v189)
    {
      if (v189 != v204)
        goto LABEL_274;
      break;
    }
  }
LABEL_280:
  v207 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)result)
  {
    result = JSC::CodeBlock::outOfLineJumpOffset(v5, **(_QWORD **)a2 + v207);
    LODWORD(v207) = *(_DWORD *)(a2 + 8);
  }
  v12 = result + v207;
LABEL_9:
  v221 = v12;
  v13 = a3[3];
  if ((_DWORD)v13 == a3[2])
  {
    result = WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a3, v13 + 1, (unint64_t)&v221);
    *(_DWORD *)(*(_QWORD *)a3 + 4 * a3[3]) = *(_DWORD *)result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v13) = v12;
  }
  ++a3[3];
LABEL_12:
  v14 = *(unsigned int *)(a2 + 8);
  v15 = (unsigned __int8 *)(**(_QWORD **)a2 + v14);
  v16 = *v15;
  if ((v16 | 2) == 0x82)
    v16 = v15[1];
  if (v16 == 89)
  {
    v221 = *(_DWORD *)(a2 + 8);
    v220 = a3[3];
    if ((_DWORD)v220 == a3[2])
    {
      return (uint64_t)WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)a3, (unint64_t)&v221);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v220) = v14;
      ++a3[3];
    }
  }
  return result;
}

{
  JSC::UnlinkedCodeBlockGenerator *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int **v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int **v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  JSC::UnlinkedCodeBlockGenerator *v36;
  int v37;
  unsigned __int8 v38[32];

  v5 = (JSC::UnlinkedCodeBlockGenerator *)result;
  v36 = (JSC::UnlinkedCodeBlockGenerator *)result;
  v6 = *(unsigned int *)(a2 + 8);
  v7 = **(_QWORD **)a2;
  v8 = v7 + v6;
  v9 = *(unsigned __int8 *)(v7 + v6);
  v10 = v9;
  if ((v9 | 2) == 0x82)
    v10 = *(unsigned __int8 *)(v8 + 1);
  switch(v10)
  {
    case '.':
      v19 = JSC::jumpTargetForInstruction<JSC::OpJneqPtr,JSC::UnlinkedCodeBlockGenerator *&>(&v36, a2);
      goto LABEL_25;
    case 'C':
      if (v9 == 128)
      {
        result = *(__int16 *)(v8 + 2);
      }
      else if (v9 == 130)
      {
        result = *(unsigned int *)(v8 + 2);
      }
      else
      {
        result = *(char *)(v8 + 1);
      }
      goto LABEL_7;
    case 'D':
    case 'E':
    case 'H':
      if (v9 == 128)
      {
        result = *(__int16 *)(v8 + 4);
      }
      else if (v9 == 130)
      {
        result = *(unsigned int *)(v8 + 6);
      }
      else
      {
        result = *(char *)(v8 + 2);
      }
      goto LABEL_7;
    case 'F':
    case 'G':
    case 'I':
      v19 = JSC::jumpTargetForInstruction<JSC::OpJeqNull,JSC::UnlinkedCodeBlockGenerator *&>(&v36, a2);
      goto LABEL_25;
    case 'J':
      v15 = JSC::jumpTargetForInstruction<JSC::OpJeqPtr,JSC::UnlinkedCodeBlockGenerator *&>((JSC::UnlinkedCodeBlockGenerator *)result, v7, v6);
      goto LABEL_23;
    case 'K':
    case 'M':
    case 'O':
    case 'P':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
      v19 = JSC::jumpTargetForInstruction<JSC::OpJless,JSC::UnlinkedCodeBlockGenerator *&>(&v36, a2);
LABEL_25:
      v16 = v19;
      v18 = *(_DWORD *)(a2 + 8);
      v17 = a3;
      goto LABEL_26;
    case 'L':
    case 'N':
      if (v9 == 128)
      {
        result = *(__int16 *)(v8 + 6);
      }
      else if (v9 == 130)
      {
        result = *(unsigned int *)(v8 + 10);
      }
      else
      {
        result = *(char *)(v8 + 3);
      }
LABEL_7:
      if (!(_DWORD)result)
        result = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v5, v6);
      v37 = result + v6;
      v11 = a3[3];
      if ((_DWORD)v11 == a3[2])
      {
        result = (uint64_t)WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)a3, (unint64_t)&v37);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = result + v6;
        ++a3[3];
      }
      goto LABEL_11;
    case 'Q':
    case 'R':
      v15 = JSC::jumpTargetForInstruction<JSC::OpJgreater,JSC::UnlinkedCodeBlockGenerator *&>(result, v7, v6);
      goto LABEL_23;
    case 'W':
    case 'X':
      v15 = JSC::jumpTargetForInstruction<JSC::OpJbelow,JSC::UnlinkedCodeBlockGenerator *&>(result, v7, v6);
LABEL_23:
      v16 = v15;
      v17 = a3;
      v18 = v6;
      goto LABEL_26;
    case 'Z':
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchImm>((uint64_t)&v37, (unsigned __int8 *)v8);
      if (*((unsigned int *)v5 + 53) <= (unint64_t)v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2E54);
      }
      v26 = (unsigned int **)(*((_QWORD *)v5 + 25) + 16 * v37);
      if (*v26)
      {
        v27 = **v26;
        if (v27)
        {
          v28 = v27 - 1;
          v29 = 4 * (v27 - 1) + 4;
          do
          {
            if (**v26 <= v28)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F2E04);
            }
            JSC::getJumpTargetsForInstruction<1ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, *(_DWORD *)(a2 + 8), *(unsigned int *)((char *)*v26 + v29));
            v29 -= 4;
            --v28;
          }
          while (v28 != -1);
        }
      }
      goto LABEL_56;
    case '[':
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchChar>((unsigned __int8 *)v8, (uint64_t)&v37);
      v5 = v36;
      if (*((unsigned int *)v36 + 53) <= (unint64_t)v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2E5CLL);
      }
      v30 = (unsigned int **)(*((_QWORD *)v36 + 25) + 16 * v37);
      if (*v30)
      {
        v31 = **v30;
        if (v31)
        {
          v32 = v31 - 1;
          v33 = 4 * (v31 - 1) + 4;
          do
          {
            if (**v30 <= v32)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F2E24);
            }
            JSC::getJumpTargetsForInstruction<1ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, *(_DWORD *)(a2 + 8), *(unsigned int *)((char *)*v30 + v33));
            v33 -= 4;
            --v32;
          }
          while (v32 != -1);
          v5 = v36;
        }
      }
      goto LABEL_56;
    case '\\':
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchImm>((uint64_t)&v37, (unsigned __int8 *)v8);
      if (*((unsigned int *)v5 + 57) <= (unint64_t)v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F2E4CLL);
      }
      v20 = *((_QWORD *)v5 + 27) + 24 * v37;
      if (!*(_DWORD *)(v20 + 12))
        goto LABEL_56;
      v21 = *(_QWORD *)v20;
      v22 = *(unsigned int *)(v20 + 8);
      if ((_DWORD)v22)
      {
        v23 = 16 * v22;
        v24 = v21;
        while (!*(_QWORD *)v24)
        {
          v24 += 16;
          v23 -= 16;
          if (!v23)
            goto LABEL_56;
        }
      }
      else
      {
        v24 = v21;
      }
      v35 = v21 + 16 * v22;
      break;
    default:
      goto LABEL_11;
  }
LABEL_62:
  if (v24 != v35)
  {
    JSC::getJumpTargetsForInstruction<1ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(a3, *(_DWORD *)(a2 + 8), *(_DWORD *)(v24 + 8));
    while (1)
    {
      v24 += 16;
      if (v24 == v35)
        break;
      if (*(_QWORD *)v24)
        goto LABEL_62;
    }
  }
LABEL_56:
  v16 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v38);
  v34 = *(_DWORD *)(a2 + 8);
  if (!v16)
    v16 = JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v5, *(_DWORD *)(a2 + 8));
  v17 = a3;
  v18 = v34;
LABEL_26:
  result = (uint64_t)JSC::getJumpTargetsForInstruction<1ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(v17, v18, v16);
LABEL_11:
  v12 = *(unsigned int *)(a2 + 8);
  v13 = (unsigned __int8 *)(**(_QWORD **)a2 + v12);
  v14 = *v13;
  if ((v14 | 2) == 0x82)
    v14 = v13[1];
  if (v14 == 89)
  {
    v37 = *(_DWORD *)(a2 + 8);
    v25 = a3[3];
    if ((_DWORD)v25 == a3[2])
    {
      return (uint64_t)WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)a3, (unint64_t)&v37);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v25) = v12;
      ++a3[3];
    }
  }
  return result;
}

uint64_t JSC::PropertyCondition::dumpInContext(JSC::PropertyCondition *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  uint64_t v10;
  const char *v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  char *v19;
  size_t v20;
  WTF::PrintStream *v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  const char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  char *v35;
  size_t v36;
  WTF::PrintStream *v37;
  WTF::PrintStream *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  char *v45;
  size_t v46;
  WTF::PrintStream *v47;
  JSC::Structure *v48;
  JSC::JSValue *v49;
  uint64_t v50;
  WTF::PrintStream *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  char *v58;
  size_t v59;
  const char *v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  int v64;

  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    v6 = HIWORD(v4);
    switch(BYTE6(v4))
    {
      case 0:
      case 1:
        v23 = *((_DWORD *)this + 2);
        v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v25 = (WTF::PrintStream *)v24;
        if (BYTE6(v4))
        {
          if (BYTE6(v4) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F358CLL);
          }
          v26 = "Replacement";
        }
        else
        {
          v26 = "Presence";
        }
        v50 = v4 & 0xFFFFFFFFFFFFLL;
        v51 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        WTF::PrintStream::printf(v51, "%s", v26);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v25 + 40))(v25);
        WTF::PrintStream::printf(v25, "%s", " of ");
        if (v50)
        {
          v58 = *(char **)(v50 + 8);
          v59 = *(unsigned int *)(v50 + 4);
          if ((*(_BYTE *)(v50 + 16) & 4) != 0)
            WTF::StringImpl::utf8ForCharacters(v58, v59, (uint64_t)&v63, v57);
          else
            WTF::StringImpl::utf8ForCharacters((uint64_t)v58, v59, 0, v52, v53, v54, v55, v56, (uint64_t)&v63);
          WTF::printExpectedCStringHelper(v25, "StringImpl*", &v63);
          if (v64 != -1)
            ((void (*)(unint64_t *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v64])(&v61, &v63);
        }
        else
        {
          WTF::PrintStream::printf(v25, "%s", "(null StringImpl*)");
        }
        WTF::PrintStream::printf(v25, "%s", " at ");
        WTF::PrintStream::printf(v25, "%d", v23);
        WTF::PrintStream::printf(v25, "%s", " with attributes ");
        WTF::PrintStream::printf(v25, "%u");
        goto LABEL_47;
      case 2:
      case 3:
      case 4:
        v7 = *((_QWORD *)this + 1);
        v61 = v7;
        v8 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        if ((BYTE6(v4) - 2) >= 3u)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F354CLL);
        }
        v9 = (WTF::PrintStream *)v8;
        v10 = v4 & 0xFFFFFFFFFFFFLL;
        v11 = off_1E35832D0[(char)(v6 - 2)];
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
        WTF::PrintStream::printf(v12, "%s", v11);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
        WTF::PrintStream::printf(v9, "%s", " of ");
        if (v10)
        {
          v19 = *(char **)(v10 + 8);
          v20 = *(unsigned int *)(v10 + 4);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
            WTF::StringImpl::utf8ForCharacters(v19, v20, (uint64_t)&v63, v18);
          else
            WTF::StringImpl::utf8ForCharacters((uint64_t)v19, v20, 0, v13, v14, v15, v16, v17, (uint64_t)&v63);
          WTF::printExpectedCStringHelper(v9, "StringImpl*", &v63);
          if (v64 != -1)
            ((void (*)(char *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v64])(&v62, &v63);
        }
        else
        {
          WTF::PrintStream::printf(v9, "%s", "(null StringImpl*)");
        }
        v60 = " with prototype ";
        goto LABEL_42;
      case 5:
        v27 = v4 & 0xFFFFFFFFFFFFLL;
        v7 = *((_QWORD *)this + 1);
        v61 = v7;
        v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
        WTF::PrintStream::printf(v28, "%s", "Equivalence");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
        WTF::PrintStream::printf(v9, "%s", " of ");
        if (v27)
        {
          v35 = *(char **)(v27 + 8);
          v36 = *(unsigned int *)(v27 + 4);
          if ((*(_BYTE *)(v27 + 16) & 4) != 0)
            WTF::StringImpl::utf8ForCharacters(v35, v36, (uint64_t)&v63, v34);
          else
            WTF::StringImpl::utf8ForCharacters((uint64_t)v35, v36, 0, v29, v30, v31, v32, v33, (uint64_t)&v63);
          WTF::printExpectedCStringHelper(v9, "StringImpl*", &v63);
          if (v64 != -1)
            ((void (*)(char *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v64])(&v62, &v63);
        }
        else
        {
          WTF::PrintStream::printf(v9, "%s", "(null StringImpl*)");
        }
        v60 = " with ";
LABEL_42:
        WTF::PrintStream::printf(v9, "%s", v60);
        v48 = 0;
        if (v7 && (v7 & 0xFFFE000000000002) == 0)
          v48 = (JSC::Structure *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE));
        v49 = (JSC::JSValue *)&v61;
        goto LABEL_46;
      case 6:
        v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v37 + 32))(v37);
        WTF::PrintStream::printf(v38, "%s", "HasStaticProperty");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v37 + 40))(v37);
        WTF::PrintStream::printf(v37, "%s", " of ");
        if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
        {
          v45 = *(char **)((v4 & 0xFFFFFFFFFFFFLL) + 8);
          v46 = *(unsigned int *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
          if ((*(_BYTE *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) & 4) != 0)
            WTF::StringImpl::utf8ForCharacters(v45, v46, (uint64_t)&v63, v44);
          else
            WTF::StringImpl::utf8ForCharacters((uint64_t)v45, v46, 0, v39, v40, v41, v42, v43, (uint64_t)&v63);
          WTF::printExpectedCStringHelper(v37, "StringImpl*", &v63);
          if (v64 != -1)
            ((void (*)(unint64_t *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v64])(&v61, &v63);
        }
        else
        {
          WTF::PrintStream::printf(v37, "%s");
        }
        goto LABEL_47;
      case 7:
        v63 = *((_QWORD *)this + 1);
        v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
        WTF::PrintStream::printf(v47, "%s", "HasPrototype");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
        WTF::PrintStream::printf(v9, "%s", " with prototype ");
        v48 = 0;
        if (v63 && (v63 & 0xFFFE000000000002) == 0)
          v48 = (JSC::Structure *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE));
        v49 = (JSC::JSValue *)&v63;
LABEL_46:
        JSC::JSValue::dumpInContextAssumingStructure(v49, v9, a3, v48);
LABEL_47:
        result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1981F356CLL);
    }
  }
  else
  {
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
    WTF::PrintStream::printf(v21, "%s", "<invalid>");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return result;
}

void JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(unint64_t *a1, void *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  int v12;
  __int16 v13;
  int v15;
  JSC::VM **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  JSC::VM **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  JSC::VM **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  JSC::JSCellLock *v58;
  void **v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  unsigned __int8 *v80;
  int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  unsigned __int8 *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  int v110;
  unsigned int v111;
  int v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  int Concurrently;
  uint64_t v129;
  WTF *v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  WTF *v135;
  WTF *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  WTF *v140;
  uint64_t i;
  uint64_t v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  unsigned __int8 *v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  int v166;
  unsigned int v167;
  int v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  int v174;
  unint64_t v175;
  int v176;
  unsigned __int8 *v177;
  int v178;
  unsigned __int8 *v179;
  int v181;
  uint64_t *v182;
  unsigned __int8 *v183;
  int v184;
  int v185;
  uint64_t *v186;
  int v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  int v200;
  unint64_t *v201;
  unint64_t v202;
  int v205;
  int v206;
  JSC::VM **v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  int v227;
  uint64_t v228;
  int v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  int v235;
  unint64_t v236;
  int v237;
  uint64_t v238;
  WTF *v239;
  WTF *v241;
  uint64_t v243;
  WTF *v244;
  uint64_t v245;
  _BYTE v246[64];

  v9 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFLL) == 0)
    return;
  if (BYTE6(v9) >= 7u)
  {
    if (BYTE6(v9) != 7)
    {
LABEL_410:
      __break(0xC471u);
      JUMPOUT(0x1981F4828);
    }
    return;
  }
  v12 = *(_DWORD *)(a3 + 16) & 3;
  if (v12 == 2)
    return;
  v13 = *(_WORD *)(a3 + 12);
  if ((v13 & 8) != 0)
    return;
  v15 = (int)a2;
  if ((v13 & 0x10) != 0 && (v13 & 0x20) == 0)
    return;
  switch(BYTE6(v9))
  {
    case 0:
    case 1:
      v16 = (JSC::VM **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a3 & 8) != 0)
        v16 = (JSC::VM **)(a3 - 16);
      v17 = v9 & 0xFFFFFFFFFFFFLL;
      if (!(_DWORD)a2)
      {
        v18 = v9 >> 4;
        if ((_DWORD)v18 && (v18 & ~*(_DWORD *)(a3 + 32)) == 0)
        {
          v19 = *(_QWORD *)(a3 + 88);
          if (v19
            || (v91 = *(_QWORD *)(a3 + 64)) != 0
            && (*(_BYTE *)(v91 + 5) == 1 || *(_DWORD *)(v91 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable((JSC::Structure *)a3, *v16, 1, a4, a5, a6, a7, a8), v19))
          {
            if (*(_DWORD *)(v19 + 24))
            {
              v20 = *(_QWORD *)(v19 + 16);
              v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
              v22 = *(unsigned int *)(v19 + 8);
              v23 = *(_DWORD *)(v17 + 16);
              if ((v20 & 1) != 0)
              {
                if ((v23 & 0x20) != 0)
                  v23 = *(_DWORD *)(v17 + 32);
                v24 = *(_DWORD *)(v19 + 12);
                v25 = (v23 >> 8) & *(_QWORD *)&v24;
                v26 = *(unsigned __int8 *)(v21 + v25);
                if (*(_BYTE *)(v21 + v25))
                {
                  v27 = v21 + v22;
                  v28 = 1;
                  v8 = -1;
                  while (1)
                  {
                    v29 = *(_QWORD *)(v27 + 8 * (v26 - 1));
                    if (v17 == (v29 & 0xFFFFFFFFFFFFLL))
                      break;
                    v30 = 0;
                    v25 = ((_DWORD)v25 + v28) & v24;
                    v26 = *(unsigned __int8 *)(v21 + v25);
                    ++v28;
                    if (!*(_BYTE *)(v21 + v25))
                      goto LABEL_232;
                  }
                  v93 = (v29 >> 16) & 0xFF00000000 | HIBYTE(v29);
LABEL_125:
                  if ((_DWORD)v93 == -1)
                    v30 = 0;
                  else
                    v30 = HIDWORD(v93);
                  if ((_DWORD)v93 == -1)
                    v8 = -1;
                  else
                    v8 = v93;
                  goto LABEL_232;
                }
              }
              else
              {
                if ((v23 & 0x20) != 0)
                  v23 = *(_DWORD *)(v17 + 32);
                v94 = *(_DWORD *)(v19 + 12);
                v95 = v94 & (v23 >> 8);
                v96 = *(_DWORD *)(v21 + 4 * v95);
                if (v96)
                {
                  v97 = v21 + 4 * v22;
                  v98 = 1;
                  v8 = -1;
                  while (1)
                  {
                    v99 = (v96 - 1);
                    if (*(_QWORD *)(v97 + 16 * v99) == v17)
                      break;
                    v30 = 0;
                    v95 = (v95 + v98) & v94;
                    v96 = *(_DWORD *)(v21 + 4 * v95);
                    ++v98;
                    if (!v96)
                      goto LABEL_232;
                  }
                  v93 = *(unsigned int *)(v97 + 16 * v99 + 8) | ((unint64_t)*(unsigned __int8 *)(v97 + 16 * v99 + 12) << 32);
                  goto LABEL_125;
                }
              }
            }
          }
        }
        v30 = 0;
        v8 = -1;
        goto LABEL_232;
      }
      if ((_DWORD)a2 != 1)
      {
        v30 = 0;
        goto LABEL_413;
      }
      v243 = a3;
      v244 = (WTF *)v246;
      v245 = 8;
      v73 = a3;
      while (1)
      {
        v74 = (unsigned __int8 *)(v73 + 15);
        if (__ldaxr((unsigned __int8 *)(v73 + 15)))
          break;
        if (__stxr(1u, v74))
          goto LABEL_80;
LABEL_81:
        v76 = v243;
        v77 = *(_QWORD *)(v243 + 88);
        v78 = HIDWORD(v245);
        if (v77)
        {
          if (HIDWORD(v245))
          {
            v140 = v244;
            for (i = 8 * HIDWORD(v245); i; i -= 8)
            {
              v132 = *(_QWORD *)v140;
              v142 = *(unsigned int *)(*(_QWORD *)v140 + 72);
              if ((_DWORD)v142)
              {
                v143 = (*(_DWORD *)(v132 + 16) >> 13) & 0x1F;
                if (v143 == 2)
                {
                  if (v17 == 16 * v142)
                  {
                    v156 = (unsigned __int8 *)(v243 + 15);
                    v205 = __ldxr((unsigned __int8 *)(v243 + 15));
                    if (v205 != 1)
                    {
                      v30 = 0;
                      v8 = -1;
                      goto LABEL_418;
                    }
                    v30 = 0;
                    v8 = -1;
                    if (__stlxr(0, v156))
                      goto LABEL_419;
                    goto LABEL_420;
                  }
                }
                else if (v143 != 17 && v17 == 16 * v142)
                {
LABEL_288:
                  v8 = *(unsigned __int16 *)(v132 + 22);
                  if (v8 == 65534)
                  {
                    v8 = -1;
                  }
                  else if (v8 == 0xFFFF)
                  {
                    v8 = *(_DWORD *)(*(_QWORD *)(v132 + 64) + 88);
                  }
                  v30 = *(unsigned __int8 *)(v132 + 20);
                  if (!v77)
                    goto LABEL_420;
LABEL_241:
                  v156 = (unsigned __int8 *)(v76 + 15);
                  v157 = __ldxr((unsigned __int8 *)(v76 + 15));
                  if (v157 == 1)
                  {
                    if (!__stlxr(0, v156))
                      goto LABEL_420;
                  }
                  else
                  {
LABEL_418:
                    __clrex();
                  }
LABEL_419:
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v156, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_420:
                  v239 = v244;
                  if (v246 != (_BYTE *)v244 && v244 != 0)
                  {
                    v244 = 0;
                    LODWORD(v245) = 0;
                    WTF::fastFree((unint64_t)v239, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                  }
LABEL_232:
                  if (v8 != *((_DWORD *)a1 + 2))
                    return;
LABEL_413:
                  if (v30 == *((_DWORD *)a1 + 3)
                    && (unint64_t)*((unsigned __int8 *)a1 + 6) << 48 == 0x1000000000000)
                  {
                    JSC::Structure::propertyReplacementWatchpointSet((JSC::Structure *)a3, v8, a3, (uint64_t)a4, a5, a6, a7, a8);
                  }
                  return;
                }
              }
              v140 = (WTF *)((char *)v140 + 8);
            }
          }
          if (*(_DWORD *)(v77 + 24))
          {
            v100 = *(_QWORD *)(v77 + 16);
            v101 = v100 & 0xFFFFFFFFFFFFFFFELL;
            v102 = *(unsigned int *)(v77 + 8);
            v103 = *(_DWORD *)(v17 + 16);
            if ((v100 & 1) != 0)
            {
              if ((v103 & 0x20) != 0)
                v103 = *(_DWORD *)(v17 + 32);
              v104 = *(_DWORD *)(v77 + 12);
              v105 = (v103 >> 8) & *(_QWORD *)&v104;
              v106 = *(unsigned __int8 *)(v101 + v105);
              if (*(_BYTE *)(v101 + v105))
              {
                v107 = v101 + v102;
                v108 = 1;
                v8 = -1;
                while (1)
                {
                  v109 = *(_QWORD *)(v107 + 8 * (v106 - 1));
                  if ((v109 & 0xFFFFFFFFFFFFLL) == v17)
                    break;
                  v30 = 0;
                  v105 = ((_DWORD)v105 + v108) & v104;
                  v106 = *(unsigned __int8 *)(v101 + v105);
                  ++v108;
                  if (!*(_BYTE *)(v101 + v105))
                    goto LABEL_241;
                }
                v155 = (v109 >> 16) & 0xFF00000000 | HIBYTE(v109);
LABEL_235:
                if ((_DWORD)v155 == -1)
                  v30 = 0;
                else
                  v30 = HIDWORD(v155);
                if ((_DWORD)v155 == -1)
                  v8 = -1;
                else
                  v8 = v155;
                goto LABEL_241;
              }
            }
            else
            {
              if ((v103 & 0x20) != 0)
                v103 = *(_DWORD *)(v17 + 32);
              v159 = *(_DWORD *)(v77 + 12);
              v160 = v159 & (v103 >> 8);
              v161 = *(_DWORD *)(v101 + 4 * v160);
              if (v161)
              {
                v162 = v101 + 4 * v102;
                v163 = 1;
                v8 = -1;
                while (1)
                {
                  v164 = (v161 - 1);
                  if (*(_QWORD *)(v162 + 16 * v164) == v17)
                    break;
                  v30 = 0;
                  v160 = (v160 + v163) & v159;
                  v161 = *(_DWORD *)(v101 + 4 * v160);
                  ++v163;
                  if (!v161)
                    goto LABEL_241;
                }
                v155 = *(unsigned int *)(v162 + 16 * v164 + 8) | ((unint64_t)*(unsigned __int8 *)(v162 + 16 * v164 + 12) << 32);
                goto LABEL_235;
              }
            }
          }
          v30 = 0;
          v8 = -1;
          goto LABEL_241;
        }
        if (HIDWORD(v245) == (_DWORD)v245)
        {
          v182 = (uint64_t *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v244, HIDWORD(v245) + 1, (unint64_t)&v243);
          v78 = HIDWORD(v245);
          v79 = (uint64_t *)((char *)v244 + 8 * HIDWORD(v245));
          v76 = *v182;
        }
        else
        {
          v79 = (uint64_t *)((char *)v244 + 8 * HIDWORD(v245));
        }
        *v79 = v76;
        HIDWORD(v245) = v78 + 1;
        v80 = (unsigned __int8 *)(v243 + 15);
        v81 = __ldxr((unsigned __int8 *)(v243 + 15));
        if (v81 != 1)
        {
          __clrex();
LABEL_90:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v80, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
          goto LABEL_91;
        }
        if (__stlxr(0, v80))
          goto LABEL_90;
LABEL_91:
        v73 = *(_QWORD *)(v243 + 64);
        if (!v73)
          goto LABEL_254;
        if (*(_BYTE *)(v73 + 5) != 1)
        {
          v158 = *(_DWORD *)(v73 + 80);
          if (!v158)
          {
LABEL_254:
            v243 = 0;
LABEL_94:
            if (!HIDWORD(v245))
            {
              v30 = 0;
              v8 = -1;
              goto LABEL_420;
            }
            v130 = v244;
            v131 = (WTF *)((char *)v244 + 8 * HIDWORD(v245));
            while (1)
            {
LABEL_189:
              v132 = *(_QWORD *)v130;
              v133 = *(unsigned int *)(*(_QWORD *)v130 + 72);
              if (!(_DWORD)v133)
                goto LABEL_193;
              v134 = (*(_DWORD *)(v132 + 16) >> 13) & 0x1F;
              if (v134 != 2)
                break;
              v30 = 0;
              v130 = (WTF *)((char *)v130 + 8);
              v8 = -1;
              if (v17 == 16 * v133 || v130 == v131)
                goto LABEL_420;
            }
            if (v134 != 17 && v17 == 16 * v133)
            {
              v76 = 0;
              goto LABEL_288;
            }
LABEL_193:
            v30 = 0;
            v130 = (WTF *)((char *)v130 + 8);
            v8 = -1;
            if (v130 == v131)
              goto LABEL_420;
            goto LABEL_189;
          }
          v73 = 16 * (v158 & 0xFFFFFFFE);
        }
        v243 = v73;
        if (!v73)
          goto LABEL_94;
      }
      __clrex();
LABEL_80:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v74);
      goto LABEL_81;
    case 2:
      if (v12 || !*(_QWORD *)(a3 + 48))
        return;
      v31 = (JSC::VM **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a3 & 8) != 0)
        v31 = (JSC::VM **)(a3 - 16);
      v32 = v9 & 0xFFFFFFFFFFFFLL;
      if (!(_DWORD)a2)
      {
        v33 = v9 >> 4;
        if ((_DWORD)v33 && (v33 & ~*(_DWORD *)(a3 + 32)) == 0)
        {
          v34 = *(_QWORD *)(a3 + 88);
          if (v34
            || (v92 = *(_QWORD *)(a3 + 64)) != 0
            && (*(_BYTE *)(v92 + 5) == 1 || *(_DWORD *)(v92 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable((JSC::Structure *)a3, *v31, 1, a4, a5, a6, a7, a8), v34))
          {
            if (*(_DWORD *)(v34 + 24))
            {
              v35 = *(_QWORD *)(v34 + 16);
              v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
              v37 = *(unsigned int *)(v34 + 8);
              v38 = *(_DWORD *)(v32 + 16);
              if ((v35 & 1) != 0)
              {
                if ((v38 & 0x20) != 0)
                  v38 = *(_DWORD *)(v32 + 32);
                v39 = *(_DWORD *)(v34 + 12);
                v40 = (v38 >> 8) & *(_QWORD *)&v39;
                v41 = *(unsigned __int8 *)(v36 + v40);
                if (*(_BYTE *)(v36 + v40))
                {
                  v42 = v36 + v37;
                  v43 = 1;
                  do
                  {
                    if (v32 == (*(_QWORD *)(v42 + 8 * (v41 - 1)) & 0xFFFFFFFFFFFFLL))
                      break;
                    v40 = ((_DWORD)v40 + v43) & v39;
                    v41 = *(unsigned __int8 *)(v36 + v40);
                    ++v43;
                  }
                  while (*(_BYTE *)(v36 + v40));
                }
              }
              else
              {
                if ((v38 & 0x20) != 0)
                  v38 = *(_DWORD *)(v32 + 32);
                v110 = *(_DWORD *)(v34 + 12);
                v111 = v110 & (v38 >> 8);
                v112 = *(_DWORD *)(v36 + 4 * v111);
                if (v112)
                {
                  v113 = v36 + 4 * v37;
                  v114 = 1;
                  do
                  {
                    if (*(_QWORD *)(v113 + 16 * (v112 - 1)) == v32)
                      break;
                    v111 = (v111 + v114) & v110;
                    v112 = *(_DWORD *)(v36 + 4 * v111);
                    ++v114;
                  }
                  while (v112);
                }
              }
            }
          }
        }
        return;
      }
      if ((_DWORD)a2 != 1)
        return;
      v243 = a3;
      v244 = (WTF *)v246;
      v245 = 8;
      v82 = a3;
      while (1)
      {
        v83 = (unsigned __int8 *)(v82 + 15);
        if (__ldaxr((unsigned __int8 *)(v82 + 15)))
          break;
        if (__stxr(1u, v83))
          goto LABEL_100;
LABEL_101:
        v85 = v243;
        v86 = *(_QWORD *)(v243 + 88);
        v87 = HIDWORD(v245);
        if (v86)
        {
          if (!HIDWORD(v245))
          {
LABEL_156:
            if (*(_DWORD *)(v86 + 24))
            {
              v115 = *(_QWORD *)(v86 + 16);
              v116 = v115 & 0xFFFFFFFFFFFFFFFELL;
              v117 = *(unsigned int *)(v86 + 8);
              v118 = *(_DWORD *)(v32 + 16);
              if ((v115 & 1) != 0)
              {
                if ((v118 & 0x20) != 0)
                  v118 = *(_DWORD *)(v32 + 32);
                v119 = *(_DWORD *)(v86 + 12);
                v120 = (v118 >> 8) & *(_QWORD *)&v119;
                v121 = *(unsigned __int8 *)(v116 + v120);
                if (*(_BYTE *)(v116 + v120))
                {
                  v122 = v116 + v117;
                  v123 = 1;
                  do
                  {
                    v124 = *(_QWORD *)(v122 + 8 * (v121 - 1));
                    if ((v124 & 0xFFFFFFFFFFFFLL) == v32)
                      break;
                    v120 = ((_DWORD)v120 + v123) & v119;
                    v121 = *(unsigned __int8 *)(v116 + v120);
                    ++v123;
                  }
                  while (*(_BYTE *)(v116 + v120));
                }
              }
              else
              {
                if ((v118 & 0x20) != 0)
                  v118 = *(_DWORD *)(v32 + 32);
                v172 = *(_DWORD *)(v86 + 12);
                v173 = v172 & (v118 >> 8);
                v174 = *(_DWORD *)(v116 + 4 * v173);
                if (v174)
                {
                  v175 = v116 + 4 * v117;
                  v176 = 1;
                  do
                  {
                    if (*(_QWORD *)(v175 + 16 * (v174 - 1)) == v32)
                      break;
                    v173 = (v173 + v176) & v172;
                    v174 = *(_DWORD *)(v116 + 4 * v173);
                    ++v176;
                  }
                  while (v174);
                }
              }
            }
LABEL_275:
            v177 = (unsigned __int8 *)(v85 + 15);
            v178 = __ldxr((unsigned __int8 *)(v85 + 15));
            if (v178 == 1)
            {
              if (!__stlxr(0, v177))
                goto LABEL_427;
              goto LABEL_426;
            }
            goto LABEL_425;
          }
          v151 = v244;
          v152 = 8 * HIDWORD(v245);
          while (1)
          {
            v153 = *(unsigned int *)(*(_QWORD *)v151 + 72);
            if ((_DWORD)v153)
            {
              v154 = (*(_DWORD *)(*(_QWORD *)v151 + 16) >> 13) & 0x1F;
              if (v154 == 2)
              {
                if (v32 == 16 * v153)
                {
                  v177 = (unsigned __int8 *)(v243 + 15);
                  v206 = __ldxr((unsigned __int8 *)(v243 + 15));
                  if (v206 == 1)
                  {
                    if (!__stlxr(0, v177))
                      goto LABEL_427;
LABEL_426:
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v177, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
                    goto LABEL_427;
                  }
LABEL_425:
                  __clrex();
                  goto LABEL_426;
                }
              }
              else if (v154 != 17 && v32 == 16 * v153)
              {
LABEL_299:
                if (v86)
                  goto LABEL_275;
LABEL_427:
                v241 = v244;
                if (v246 != (_BYTE *)v244 && v244 != 0)
                {
                  v244 = 0;
                  LODWORD(v245) = 0;
                  WTF::fastFree((unint64_t)v241, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                }
                return;
              }
            }
            v151 = (WTF *)((char *)v151 + 8);
            v152 -= 8;
            if (!v152)
              goto LABEL_156;
          }
        }
        if (HIDWORD(v245) == (_DWORD)v245)
        {
          v186 = (uint64_t *)WTF::Vector<JSC::Structure *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v244, HIDWORD(v245) + 1, (unint64_t)&v243);
          v87 = HIDWORD(v245);
          v88 = (uint64_t *)((char *)v244 + 8 * HIDWORD(v245));
          v85 = *v186;
        }
        else
        {
          v88 = (uint64_t *)((char *)v244 + 8 * HIDWORD(v245));
        }
        *v88 = v85;
        HIDWORD(v245) = v87 + 1;
        v89 = (unsigned __int8 *)(v243 + 15);
        v90 = __ldxr((unsigned __int8 *)(v243 + 15));
        if (v90 != 1)
        {
          __clrex();
LABEL_110:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v89, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
          goto LABEL_111;
        }
        if (__stlxr(0, v89))
          goto LABEL_110;
LABEL_111:
        v82 = *(_QWORD *)(v243 + 64);
        if (!v82)
          goto LABEL_278;
        if (*(_BYTE *)(v82 + 5) != 1)
        {
          v165 = *(_DWORD *)(v82 + 80);
          if (!v165)
          {
LABEL_278:
            v243 = 0;
LABEL_114:
            if (!HIDWORD(v245))
              goto LABEL_427;
            v135 = v244;
            v136 = (WTF *)((char *)v244 + 8 * HIDWORD(v245));
            while (1)
            {
LABEL_196:
              v137 = *(unsigned int *)(*(_QWORD *)v135 + 72);
              if (!(_DWORD)v137)
                goto LABEL_200;
              v138 = (*(_DWORD *)(*(_QWORD *)v135 + 16) >> 13) & 0x1F;
              if (v138 != 2)
                break;
              v135 = (WTF *)((char *)v135 + 8);
              if (v32 == 16 * v137 || v135 == v136)
                goto LABEL_427;
            }
            if (v138 != 17 && v32 == 16 * v137)
            {
              v85 = 0;
              goto LABEL_299;
            }
LABEL_200:
            v135 = (WTF *)((char *)v135 + 8);
            if (v135 == v136)
              goto LABEL_427;
            goto LABEL_196;
          }
          v82 = 16 * (v165 & 0xFFFFFFFE);
        }
        v243 = v82;
        if (!v82)
          goto LABEL_114;
      }
      __clrex();
LABEL_100:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v83);
      goto LABEL_101;
    case 3:
      if (v12)
        return;
      if ((*(_WORD *)(a3 + 12) & 0x400) == 0)
        goto LABEL_41;
      v187 = *(unsigned __int8 *)(a3 + 9);
      v188 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a3 & 8) != 0)
        v188 = (uint64_t *)(a3 - 16);
      v189 = *v188;
      v190 = v9 & 0xFFFFFFFFFFFFLL;
      if (v187 == 26)
      {
        v191 = *(_QWORD **)(v189 + 41952);
        if (v191[221] == v190 || v191[246] == v190)
          return;
        v192 = v191 + 270;
      }
      else
      {
        if ((v187 - 36) > 1)
          return;
        v192 = (_QWORD *)(*(_QWORD *)(v189 + 41952) + 1768);
      }
      if (*v192 == v190)
        return;
LABEL_41:
      LODWORD(v244) = 0;
      if ((a3 & 8) != 0)
        v44 = (JSC::VM **)(a3 - 16);
      else
        v44 = (JSC::VM **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      v45 = v9 & 0xFFFFFFFFFFFFLL;
      if ((_DWORD)a2)
      {
        if ((_DWORD)a2 == 1
          && JSC::Structure::getConcurrently(a3, (_DWORD *)(v9 & 0xFFFFFFFFFFFFLL), &v244, (uint64_t)a4, a5, a6, a7, a8) != -1)
        {
          return;
        }
        goto LABEL_167;
      }
      v46 = v9 >> 4;
      if (!(_DWORD)v46 || (v46 & ~*(_DWORD *)(a3 + 32)) != 0)
        goto LABEL_167;
      v47 = *(_QWORD *)(a3 + 88);
      if (!v47)
      {
        v129 = *(_QWORD *)(a3 + 64);
        if (!v129 || *(_BYTE *)(v129 + 5) != 1 && *(_DWORD *)(v129 + 80) < 2u)
          goto LABEL_167;
        JSC::Structure::materializePropertyTable((JSC::Structure *)a3, *v44, 1, a4, a5, a6, a7, a8);
        if (!v47)
          goto LABEL_167;
      }
      if (!*(_DWORD *)(v47 + 24))
        goto LABEL_167;
      v48 = *(_QWORD *)(v47 + 16);
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      v50 = *(unsigned int *)(v47 + 8);
      v51 = *(_DWORD *)(v45 + 16);
      if ((v48 & 1) != 0)
      {
        if ((v51 & 0x20) != 0)
          v51 = *(_DWORD *)(v45 + 32);
        v52 = *(_DWORD *)(v47 + 12);
        v53 = (v51 >> 8) & *(_QWORD *)&v52;
        v54 = *(unsigned __int8 *)(v49 + v53);
        if (*(_BYTE *)(v49 + v53))
        {
          v55 = v49 + v50;
          v56 = 1;
          while (1)
          {
            v57 = *(_QWORD *)(v55 + 8 * (v54 - 1));
            if (v45 == (v57 & 0xFFFFFFFFFFFFLL))
              break;
            v53 = ((_DWORD)v53 + v56) & v52;
            v54 = *(unsigned __int8 *)(v49 + v53);
            ++v56;
            if (!*(_BYTE *)(v49 + v53))
              goto LABEL_167;
          }
          v139 = (v57 >> 16) & 0xFF00000000 | HIBYTE(v57);
LABEL_203:
          if ((_DWORD)v139 != -1)
            return;
        }
      }
      else
      {
        if ((v51 & 0x20) != 0)
          v51 = *(_DWORD *)(v45 + 32);
        v144 = *(_DWORD *)(v47 + 12);
        v145 = v144 & (v51 >> 8);
        v146 = *(_DWORD *)(v49 + 4 * v145);
        if (v146)
        {
          v147 = v49 + 4 * v50;
          v148 = 1;
          while (1)
          {
            v149 = (v146 - 1);
            if (*(_QWORD *)(v147 + 16 * v149) == v45)
              break;
            v145 = (v145 + v148) & v144;
            v146 = *(_DWORD *)(v49 + 4 * v145);
            ++v148;
            if (!v146)
              goto LABEL_167;
          }
          LODWORD(v139) = *(_DWORD *)(v147 + 16 * v149 + 8);
          goto LABEL_203;
        }
      }
LABEL_167:
      if ((*(_BYTE *)(a3 + 10) & 0x20) == 0)
        return;
      if ((*(_BYTE *)(a3 + 18) & 0x40) != 0)
        return;
      v193 = *(unsigned int *)(a3 + 76);
      if (!(_DWORD)v193)
        return;
      v194 = *a1 & 0xFFFFFFFFFFFFLL;
      if (!v194)
        return;
      v195 = 16 * v193;
      while (1)
      {
        v196 = *(_QWORD *)(v195 + 24);
        if (!v196)
          goto LABEL_331;
        v197 = *(_DWORD *)(v194 + 16);
        if ((v197 & 0x20) != 0)
          goto LABEL_331;
        v198 = *(_DWORD *)(v196 + 4) & (v197 >> 8);
        v199 = *(_QWORD *)(v196 + 32);
        v200 = *(unsigned __int16 *)(v199 + 4 * v198);
        if (v200 == 0xFFFF)
          goto LABEL_331;
        while (1)
        {
          v201 = (unint64_t *)(*(_QWORD *)(v196 + 24) + 40 * (__int16)v200);
          v202 = v201[1];
          if (!v202)
            goto LABEL_338;
          if (WTF::equalInternal<unsigned char>(v194, *v201, v202 - 1))
            break;
          v199 = *(_QWORD *)(v196 + 32);
LABEL_338:
          v198 = *(__int16 *)(v199 + 4 * v198 + 2);
          if (v198 == -1)
            goto LABEL_331;
          LOWORD(v200) = *(_WORD *)(v199 + 4 * v198);
        }
        if (*(_QWORD *)(v196 + 24))
          return;
LABEL_331:
        v195 = *(_QWORD *)(v195 + 16);
        if (!v195)
          return;
      }
    case 4:
      return;
    case 5:
      if ((_DWORD)a2 && a4)
      {
        v125 = (unsigned __int8 *)a4 + 4;
        while (1)
        {
          v126 = *v125;
          if ((v126 & 0x40) != 0)
            break;
          v127 = __ldaxr(v125);
          if (v127 == v126)
          {
            if (!__stxr(v126 | 0x40, v125))
              goto LABEL_177;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v125);
LABEL_177:
        v58 = a4;
        goto LABEL_60;
      }
      if (!a4)
        return;
      v58 = 0;
LABEL_60:
      if (a3 != 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
        goto LABEL_305;
      v59 = (void **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a3 & 8) != 0)
        v59 = (void **)(a3 - 16);
      v60 = *a1 & 0xFFFFFFFFFFFFLL;
      if (v15)
      {
        if (v15 != 1)
          goto LABEL_182;
        Concurrently = JSC::Structure::getConcurrently(a3, (_DWORD *)(*a1 & 0xFFFFFFFFFFFFLL), &v244, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_181;
      }
      v61 = *a1 >> 4;
      if (!(_DWORD)v61 || (v61 & ~*(_DWORD *)(a3 + 32)) != 0)
        goto LABEL_305;
      v62 = *(_QWORD *)(a3 + 88);
      if (!v62)
      {
        v150 = *(_QWORD *)(a3 + 64);
        if (!v150)
          goto LABEL_305;
        a2 = *v59;
        if (*(_BYTE *)(v150 + 5) != 1 && *(_DWORD *)(v150 + 80) < 2u)
          goto LABEL_305;
        JSC::Structure::materializePropertyTable((JSC::Structure *)a3, (JSC::VM *)a2, 1, a4, a5, a6, a7, a8);
        if (!v62)
          goto LABEL_305;
      }
      if (!*(_DWORD *)(v62 + 24))
        goto LABEL_305;
      v63 = *(_QWORD *)(v62 + 16);
      v64 = v63 & 0xFFFFFFFFFFFFFFFELL;
      v65 = *(unsigned int *)(v62 + 8);
      v66 = *(_DWORD *)(v60 + 16);
      if ((v63 & 1) == 0)
      {
        if ((v66 & 0x20) != 0)
          v66 = *(_DWORD *)(v60 + 32);
        v166 = *(_DWORD *)(v62 + 12);
        v167 = v166 & (v66 >> 8);
        v168 = *(_DWORD *)(v64 + 4 * v167);
        if (!v168)
          goto LABEL_305;
        v169 = v64 + 4 * v65;
        v170 = 1;
        while (1)
        {
          v171 = (v168 - 1);
          if (*(_QWORD *)(v169 + 16 * v171) == v60)
            break;
          v167 = (v167 + v170) & v166;
          v168 = *(_DWORD *)(v64 + 4 * v167);
          ++v170;
          if (!v168)
            goto LABEL_305;
        }
        Concurrently = *(_DWORD *)(v169 + 16 * v171 + 8);
LABEL_181:
        if (Concurrently == -1)
          goto LABEL_305;
        goto LABEL_182;
      }
      if ((v66 & 0x20) != 0)
        v66 = *(_DWORD *)(v60 + 32);
      v67 = *(_DWORD *)(v62 + 12);
      v68 = (v66 >> 8) & *(_QWORD *)&v67;
      v69 = *(unsigned __int8 *)(v64 + v68);
      if (!*(_BYTE *)(v64 + v68))
        goto LABEL_305;
      v70 = v64 + v65;
      v71 = 1;
      while (1)
      {
        v72 = *(_QWORD *)(v70 + 8 * (v69 - 1));
        if (v60 == (v72 & 0xFFFFFFFFFFFFLL))
          break;
        v68 = ((_DWORD)v68 + v71) & v67;
        v69 = *(unsigned __int8 *)(v64 + v68);
        ++v71;
        if (!*(_BYTE *)(v64 + v68))
          goto LABEL_305;
      }
LABEL_182:
      if (v15 != 1)
        goto LABEL_305;
      v179 = (unsigned __int8 *)(a3 + 15);
      if (__ldaxr((unsigned __int8 *)(a3 + 15)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v179))
      {
        goto LABEL_293;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a3 + 15);
LABEL_293:
      v181 = __ldxr(v179);
      if (v181 == 1)
      {
        if (!__stlxr(0, v179))
          goto LABEL_305;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v179, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_305:
      if (v58)
      {
        v183 = (unsigned __int8 *)v58 + 4;
        do
        {
          while (1)
          {
            v184 = *v183;
            if ((v184 & 0xC0) != 0x40)
            {
              JSC::JSCellLock::unlockSlow(v58, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              return;
            }
            v185 = __ldxr(v183);
            if (v185 == v184)
              break;
            __clrex();
          }
        }
        while (__stxr(v184 & 0xBF, v183));
      }
      return;
    case 6:
      v207 = (JSC::VM **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a3 & 8) != 0)
        v207 = (JSC::VM **)(a3 - 16);
      v208 = v9 & 0xFFFFFFFFFFFFLL;
      if ((_DWORD)a2)
      {
        if ((_DWORD)a2 != 1)
          goto LABEL_379;
        v221 = JSC::Structure::getConcurrently(a3, (_DWORD *)(v9 & 0xFFFFFFFFFFFFLL), &v244, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        v209 = v9 >> 4;
        if (!(_DWORD)v209 || (v209 & ~*(_DWORD *)(a3 + 32)) != 0)
          goto LABEL_379;
        v210 = *(_QWORD *)(a3 + 88);
        if (!v210)
        {
          v232 = *(_QWORD *)(a3 + 64);
          if (!v232 || *(_BYTE *)(v232 + 5) != 1 && *(_DWORD *)(v232 + 80) < 2u)
            goto LABEL_379;
          JSC::Structure::materializePropertyTable((JSC::Structure *)a3, *v207, 1, a4, a5, a6, a7, a8);
          if (!v210)
            goto LABEL_379;
        }
        if (!*(_DWORD *)(v210 + 24))
          goto LABEL_379;
        v211 = *(_QWORD *)(v210 + 16);
        v212 = v211 & 0xFFFFFFFFFFFFFFFELL;
        v213 = *(unsigned int *)(v210 + 8);
        v214 = *(_DWORD *)(v208 + 16);
        if ((v211 & 1) != 0)
        {
          if ((v214 & 0x20) != 0)
            v214 = *(_DWORD *)(v208 + 32);
          v215 = *(_DWORD *)(v210 + 12);
          v216 = (v214 >> 8) & *(_QWORD *)&v215;
          v217 = *(unsigned __int8 *)(v212 + v216);
          if (*(_BYTE *)(v212 + v216))
          {
            v218 = v212 + v213;
            v219 = 1;
            do
            {
              if (v208 == (*(_QWORD *)(v218 + 8 * (v217 - 1)) & 0xFFFFFFFFFFFFLL))
                return;
              v216 = ((_DWORD)v216 + v219) & v215;
              v217 = *(unsigned __int8 *)(v212 + v216);
              ++v219;
            }
            while (*(_BYTE *)(v212 + v216));
          }
          goto LABEL_379;
        }
        if ((v214 & 0x20) != 0)
          v214 = *(_DWORD *)(v208 + 32);
        v233 = *(_DWORD *)(v210 + 12);
        v234 = v233 & (v214 >> 8);
        v235 = *(_DWORD *)(v212 + 4 * v234);
        if (!v235)
          goto LABEL_379;
        v236 = v212 + 4 * v213;
        v237 = 1;
        while (1)
        {
          v238 = (v235 - 1);
          if (*(_QWORD *)(v236 + 16 * v238) == v208)
            break;
          v234 = (v234 + v237) & v233;
          v235 = *(_DWORD *)(v212 + 4 * v234);
          ++v237;
          if (!v235)
            goto LABEL_379;
        }
        v221 = *(_DWORD *)(v236 + 16 * v238 + 8);
      }
      if (v221 != -1)
        return;
LABEL_379:
      if ((*(_BYTE *)(a3 + 18) & 0x40) != 0)
        return;
      v222 = *(unsigned int *)(a3 + 76);
      if (!(_DWORD)v222)
        return;
      v223 = *a1 & 0xFFFFFFFFFFFFLL;
      if (!v223)
        return;
      v224 = 16 * v222;
      while (2)
      {
        v225 = *(_QWORD *)(v224 + 24);
        if (!v225)
          goto LABEL_384;
        v226 = *(_DWORD *)(v223 + 16);
        if ((v226 & 0x20) != 0)
          goto LABEL_384;
        v227 = *(_DWORD *)(v225 + 4) & (v226 >> 8);
        v228 = *(_QWORD *)(v225 + 32);
        v229 = *(unsigned __int16 *)(v228 + 4 * v227);
        if (v229 == 0xFFFF)
          goto LABEL_384;
        while (2)
        {
          v230 = (unint64_t *)(*(_QWORD *)(v225 + 24) + 40 * (__int16)v229);
          v231 = v230[1];
          if (!v231)
            goto LABEL_391;
          if (WTF::equalInternal<unsigned char>(v223, *v230, v231 - 1))
          {
            if (*(_QWORD *)(v225 + 24))
              return;
          }
          else
          {
            v228 = *(_QWORD *)(v225 + 32);
LABEL_391:
            v227 = *(__int16 *)(v228 + 4 * v227 + 2);
            if (v227 != -1)
            {
              LOWORD(v229) = *(_WORD *)(v228 + 4 * v227);
              continue;
            }
          }
          break;
        }
LABEL_384:
        v224 = *(_QWORD *)(v224 + 16);
        if (!v224)
          return;
        continue;
      }
    default:
      goto LABEL_410;
  }
}

uint64_t JSC::Structure::propertyReplacementWatchpointSet(JSC::Structure *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;

  v10 = (unsigned __int8 *)this + 15;
  if (__ldaxr((unsigned __int8 *)this + 15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 15);
LABEL_4:
  v12 = *((_QWORD *)this + 8);
  if (!v12 || *(_BYTE *)(v12 + 5) == 1 || (v16 = *(_QWORD *)(v12 + 56)) == 0)
  {
LABEL_6:
    v13 = 0;
    goto LABEL_7;
  }
  v17 = *(_DWORD *)(v16 - 8);
  v18 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
  v20 = v17 & (v19 ^ HIWORD(v19));
  v21 = *(_DWORD *)(v16 + 16 * v20);
  if (v21 != a2)
  {
    v22 = 1;
    while (v21 != 0x7FFFFFFF)
    {
      v20 = ((_DWORD)v20 + v22) & v17;
      v21 = *(_DWORD *)(v16 + 16 * v20);
      ++v22;
      if (v21 == a2)
        goto LABEL_15;
    }
    goto LABEL_6;
  }
LABEL_15:
  v13 = *(_QWORD *)(v16 + 16 * v20 + 8);
LABEL_7:
  v14 = __ldxr(v10);
  if (v14 == 1)
  {
    if (!__stlxr(0, v10))
      return v13;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v13;
}

void JSC::PropertyCondition::isStillValid(unint64_t *a1, void *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(a1, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::PropertyCondition::isWatchable(unint64_t *a1, uint64_t a2, const JSC::PropertyTable *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const JSC::PropertyTable *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  JSC::VM **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  JSC::Structure *v37;
  JSC::VM **v38;
  unsigned __int8 *v39;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  JSC::VM **v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  JSC::Structure *Concurrently;
  unsigned __int8 *v72;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  JSC::VM **v89;
  int v90;
  int v91;

  JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(a1, (void *)(a4 != 1), a2, a3, a5, a6, a7, a8);
  if (v17)
  {
    v18 = *a1;
    v19 = BYTE6(*a1);
    if (v19 <= 6)
    {
      if (((1 << v19) & 0x63) != 0)
      {
        if ((*(_WORD *)(a2 + 12) & 0x10) != 0)
          return;
      }
      else if (v19 == 2 && (*(_WORD *)(a2 + 12) & 0x90) != 0)
      {
        return;
      }
    }
    v20 = *(_QWORD *)(a2 + 96);
    v21 = (v20 & 1) != 0 ? (v20 >> 1) & 3 : *(unsigned __int8 *)(v20 + 4);
    if (v21 != 2)
    {
      if (BYTE6(v18) != 5)
      {
        if (BYTE6(v18) != 1)
          return;
        v56 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a2 & 8) != 0)
          v56 = (JSC::VM **)(a2 - 16);
        v57 = v18 & 0xFFFFFFFFFFFFLL;
        if (a4 == 1)
        {
          v58 = v18 >> 4;
          if (!(_DWORD)v58 || (v58 & ~*(_DWORD *)(a2 + 32)) != 0)
            goto LABEL_119;
          v59 = *(_QWORD *)(a2 + 88);
          if (!v59)
          {
            v70 = *(_QWORD *)(a2 + 64);
            if (!v70 || *(_BYTE *)(v70 + 5) != 1 && *(_DWORD *)(v70 + 80) < 2u)
              goto LABEL_119;
            JSC::Structure::materializePropertyTable((JSC::Structure *)a2, *v56, 1, v12, v13, v14, v15, v16);
            if (!v59)
              goto LABEL_119;
          }
          if (!*(_DWORD *)(v59 + 24))
            goto LABEL_119;
          v60 = *(_QWORD *)(v59 + 16);
          v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
          v62 = *(unsigned int *)(v59 + 8);
          v63 = *(_DWORD *)(v57 + 16);
          if ((v60 & 1) != 0)
          {
            if ((v63 & 0x20) != 0)
              v63 = *(_DWORD *)(v57 + 32);
            v64 = *(_DWORD *)(v59 + 12);
            v65 = (v63 >> 8) & *(_QWORD *)&v64;
            v66 = *(unsigned __int8 *)(v61 + v65);
            if (*(_BYTE *)(v61 + v65))
            {
              v67 = v61 + v62;
              v68 = 1;
              while (1)
              {
                v69 = *(_QWORD *)(v67 + 8 * (v66 - 1));
                if (v57 == (v69 & 0xFFFFFFFFFFFFLL))
                  break;
                v65 = ((_DWORD)v65 + v68) & v64;
                v66 = *(unsigned __int8 *)(v61 + v65);
                ++v68;
                if (!*(_BYTE *)(v61 + v65))
                  goto LABEL_119;
              }
              Concurrently = (JSC::Structure *)HIBYTE(v69);
              goto LABEL_93;
            }
            goto LABEL_119;
          }
          if ((v63 & 0x20) != 0)
            v63 = *(_DWORD *)(v57 + 32);
          v82 = *(_DWORD *)(v59 + 12);
          v83 = v82 & (v63 >> 8);
          v84 = *(_DWORD *)(v61 + 4 * v83);
          if (!v84)
            goto LABEL_119;
          v85 = v61 + 4 * v62;
          v86 = 1;
          while (1)
          {
            v87 = (v84 - 1);
            if (*(_QWORD *)(v85 + 16 * v87) == v57)
              break;
            v83 = (v83 + v86) & v82;
            v84 = *(_DWORD *)(v61 + 4 * v83);
            ++v86;
            if (!v84)
              goto LABEL_119;
          }
          Concurrently = (JSC::Structure *)*(unsigned int *)(v85 + 16 * v87 + 8);
        }
        else
        {
          Concurrently = (JSC::Structure *)JSC::Structure::getConcurrently(a2, (_DWORD *)(v18 & 0xFFFFFFFFFFFFLL), &v90, (uint64_t)v12, v13, v14, v15, v16);
        }
        if ((_DWORD)Concurrently != -1)
        {
LABEL_93:
          if (!a4)
          {
            v72 = (unsigned __int8 *)(a2 + 15);
            if (__ldaxr((unsigned __int8 *)(a2 + 15)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v72))
            {
              goto LABEL_97;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 15);
LABEL_97:
            v74 = *(_QWORD *)(a2 + 64);
            if (v74)
            {
              if (*(_BYTE *)(v74 + 5) != 1)
              {
                v76 = *(_QWORD *)(v74 + 56);
                if (v76)
                {
                  v77 = *(_DWORD *)(v76 - 8);
                  v78 = 9
                      * (((_DWORD)Concurrently + ~((_DWORD)Concurrently << 15)) ^ (((_DWORD)Concurrently
                                                                                                + ~((_DWORD)Concurrently << 15)) >> 10));
                  v79 = (v78 ^ (v78 >> 6)) + ~((v78 ^ (v78 >> 6)) << 11);
                  v80 = v77 & (v79 ^ HIWORD(v79));
                  v81 = *(_DWORD *)(v76 + 16 * v80);
                  if (v81 != (_DWORD)Concurrently)
                  {
                    v88 = 1;
                    do
                    {
                      if (v81 == 0x7FFFFFFF)
                        break;
                      v80 = (v80 + v88) & v77;
                      v81 = *(_DWORD *)(v76 + 16 * v80);
                      ++v88;
                    }
                    while (v81 != (_DWORD)Concurrently);
                  }
                }
              }
            }
            v75 = __ldxr(v72);
            if (v75 == 1)
            {
              if (!__stlxr(0, v72))
                return;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v72, 0, v11, (uint64_t)v12, v13, v14, v15, v16);
            return;
          }
          if (a4 == 1)
          {
            v89 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
            if ((a2 & 8) != 0)
              v89 = (JSC::VM **)(a2 - 16);
            JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)a2, *v89, Concurrently, "Firing replacement to ensure validity", v13, v14, v15, v16);
          }
          return;
        }
LABEL_119:
        __break(0xC471u);
        JUMPOUT(0x1981F50BCLL);
      }
      v22 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v22 = (JSC::VM **)(a2 - 16);
      v23 = v18 & 0xFFFFFFFFFFFFLL;
      if (a4 == 1)
      {
        v24 = v18 >> 4;
        if (!(_DWORD)v24 || (v24 & ~*(_DWORD *)(a2 + 32)) != 0)
          goto LABEL_67;
        v25 = *(_QWORD *)(a2 + 88);
        if (!v25)
        {
          v36 = *(_QWORD *)(a2 + 64);
          if (!v36 || *(_BYTE *)(v36 + 5) != 1 && *(_DWORD *)(v36 + 80) < 2u)
            goto LABEL_67;
          JSC::Structure::materializePropertyTable((JSC::Structure *)a2, *v22, 1, v12, v13, v14, v15, v16);
          if (!v25)
            goto LABEL_67;
        }
        if (!*(_DWORD *)(v25 + 24))
          goto LABEL_67;
        v26 = *(_QWORD *)(v25 + 16);
        v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(unsigned int *)(v25 + 8);
        v29 = *(_DWORD *)(v23 + 16);
        if ((v26 & 1) != 0)
        {
          if ((v29 & 0x20) != 0)
            v29 = *(_DWORD *)(v23 + 32);
          v30 = *(_DWORD *)(v25 + 12);
          v31 = (v29 >> 8) & *(_QWORD *)&v30;
          v32 = *(unsigned __int8 *)(v27 + v31);
          if (*(_BYTE *)(v27 + v31))
          {
            v33 = v27 + v28;
            v34 = 1;
            while (1)
            {
              v35 = *(_QWORD *)(v33 + 8 * (v32 - 1));
              if (v23 == (v35 & 0xFFFFFFFFFFFFLL))
                break;
              v31 = ((_DWORD)v31 + v34) & v30;
              v32 = *(unsigned __int8 *)(v27 + v31);
              ++v34;
              if (!*(_BYTE *)(v27 + v31))
                goto LABEL_67;
            }
            v37 = (JSC::Structure *)HIBYTE(v35);
LABEL_36:
            if (a4 == 1)
            {
              v38 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
              if ((a2 & 8) != 0)
                v38 = (JSC::VM **)(a2 - 16);
              JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)a2, *v38, v37, (uint64_t)v12, v13, v14, v15, v16);
              return;
            }
            if (a4)
              return;
            v39 = (unsigned __int8 *)(a2 + 15);
            if (__ldaxr((unsigned __int8 *)(a2 + 15)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v39))
            {
              goto LABEL_45;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 15);
LABEL_45:
            v41 = *(_QWORD *)(a2 + 64);
            if (v41)
            {
              if (*(_BYTE *)(v41 + 5) != 1)
              {
                v49 = *(_QWORD *)(v41 + 56);
                if (v49)
                {
                  v50 = *(_DWORD *)(v49 - 8);
                  v51 = 9
                      * (((_DWORD)v37 + ~((_DWORD)v37 << 15)) ^ (((_DWORD)v37 + ~((_DWORD)v37 << 15)) >> 10));
                  v52 = (v51 ^ (v51 >> 6)) + ~((v51 ^ (v51 >> 6)) << 11);
                  v53 = v50 & (v52 ^ HIWORD(v52));
                  v54 = *(_DWORD *)(v49 + 16 * v53);
                  if (v54 != (_DWORD)v37)
                  {
                    v55 = 1;
                    do
                    {
                      if (v54 == 0x7FFFFFFF)
                        break;
                      v53 = (v53 + v55) & v50;
                      v54 = *(_DWORD *)(v49 + 16 * v53);
                      ++v55;
                    }
                    while (v54 != (_DWORD)v37);
                  }
                }
              }
            }
            v42 = __ldxr(v39);
            if (v42 == 1)
            {
              if (!__stlxr(0, v39))
                return;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, v11, (uint64_t)v12, v13, v14, v15, v16);
            return;
          }
LABEL_67:
          __break(0xC471u);
          JUMPOUT(0x1981F4E38);
        }
        if ((v29 & 0x20) != 0)
          v29 = *(_DWORD *)(v23 + 32);
        v43 = *(_DWORD *)(v25 + 12);
        v44 = v43 & (v29 >> 8);
        v45 = *(_DWORD *)(v27 + 4 * v44);
        if (!v45)
          goto LABEL_67;
        v46 = v27 + 4 * v28;
        v47 = 1;
        while (1)
        {
          v48 = (v45 - 1);
          if (*(_QWORD *)(v46 + 16 * v48) == v23)
            break;
          v44 = (v44 + v47) & v43;
          v45 = *(_DWORD *)(v27 + 4 * v44);
          ++v47;
          if (!v45)
            goto LABEL_67;
        }
        v37 = (JSC::Structure *)*(unsigned int *)(v46 + 16 * v48 + 8);
      }
      else
      {
        v37 = (JSC::Structure *)JSC::Structure::getConcurrently(a2, (_DWORD *)(v18 & 0xFFFFFFFFFFFFLL), &v91, (uint64_t)v12, v13, v14, v15, v16);
      }
      if ((_DWORD)v37 != -1)
        goto LABEL_36;
      goto LABEL_67;
    }
  }
}

void JSC::PropertyCondition::isWatchable(unint64_t *a1, uint64_t a2, const JSC::PropertyTable *a3, int a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  JSC::VM **v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  JSC::VM **v38;
  unsigned __int8 *v39;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  JSC::VM **v56;
  unint64_t Concurrently;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  JSC::VM **v88;
  int v89;
  int v90;

  v8 = (int)a5;
  JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(a1, a5, a2, a3, (uint64_t)a5, a6, a7, a8);
  if (v18)
  {
    v19 = *a1;
    v20 = BYTE6(*a1);
    if (v20 <= 6)
    {
      if (((1 << v20) & 0x63) != 0)
      {
        if ((*(_WORD *)(a2 + 12) & 0x10) != 0)
          return;
      }
      else if (v20 == 2 && (*(_WORD *)(a2 + 12) & 0x90) != 0)
      {
        return;
      }
    }
    v21 = *(_QWORD *)(a2 + 96);
    v22 = (v21 & 1) != 0 ? (v21 >> 1) & 3 : *(unsigned __int8 *)(v21 + 4);
    if (v22 != 2)
    {
      if (BYTE6(v19) != 5)
      {
        if (BYTE6(v19) != 1)
          return;
        v56 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a2 & 8) != 0)
          v56 = (JSC::VM **)(a2 - 16);
        Concurrently = v19 & 0xFFFFFFFFFFFFLL;
        if (v8)
        {
          if (v8 != 1)
            goto LABEL_95;
          Concurrently = JSC::Structure::getConcurrently(a2, (_DWORD *)(v19 & 0xFFFFFFFFFFFFLL), &v89, (uint64_t)v13, v14, v15, v16, v17);
        }
        else
        {
          v58 = v19 >> 4;
          if (!(_DWORD)v58 || (v58 & ~*(_DWORD *)(a2 + 32)) != 0)
            goto LABEL_121;
          v59 = *(_QWORD *)(a2 + 88);
          if (!v59)
          {
            v70 = *(_QWORD *)(a2 + 64);
            if (!v70 || *(_BYTE *)(v70 + 5) != 1 && *(_DWORD *)(v70 + 80) < 2u)
              goto LABEL_121;
            JSC::Structure::materializePropertyTable((JSC::Structure *)a2, *v56, 1, v13, v14, v15, v16, v17);
            if (!v59)
              goto LABEL_121;
          }
          if (!*(_DWORD *)(v59 + 24))
            goto LABEL_121;
          v60 = *(_QWORD *)(v59 + 16);
          v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
          v62 = *(unsigned int *)(v59 + 8);
          v63 = *(_DWORD *)(Concurrently + 16);
          if ((v60 & 1) != 0)
          {
            if ((v63 & 0x20) != 0)
              v63 = *(_DWORD *)(Concurrently + 32);
            v64 = *(_DWORD *)(v59 + 12);
            v65 = (v63 >> 8) & *(_QWORD *)&v64;
            v66 = *(unsigned __int8 *)(v61 + v65);
            if (*(_BYTE *)(v61 + v65))
            {
              v67 = v61 + v62;
              v68 = 1;
              while (1)
              {
                v69 = *(_QWORD *)(v67 + 8 * (v66 - 1));
                if (Concurrently == (v69 & 0xFFFFFFFFFFFFLL))
                  break;
                v65 = ((_DWORD)v65 + v68) & v64;
                v66 = *(unsigned __int8 *)(v61 + v65);
                ++v68;
                if (!*(_BYTE *)(v61 + v65))
                  goto LABEL_121;
              }
              Concurrently = HIBYTE(v69);
              goto LABEL_95;
            }
LABEL_121:
            __break(0xC471u);
            JUMPOUT(0x1981F570CLL);
          }
          if ((v63 & 0x20) != 0)
            v63 = *(_DWORD *)(Concurrently + 32);
          v81 = *(_DWORD *)(v59 + 12);
          v82 = v81 & (v63 >> 8);
          v83 = *(_DWORD *)(v61 + 4 * v82);
          if (!v83)
            goto LABEL_121;
          v84 = v61 + 4 * v62;
          v85 = 1;
          while (1)
          {
            v86 = (v83 - 1);
            if (*(_QWORD *)(v84 + 16 * v86) == Concurrently)
              break;
            v82 = (v82 + v85) & v81;
            v83 = *(_DWORD *)(v61 + 4 * v82);
            ++v85;
            if (!v83)
              goto LABEL_121;
          }
          Concurrently = *(unsigned int *)(v84 + 16 * v86 + 8);
        }
        if ((_DWORD)Concurrently == -1)
          goto LABEL_121;
LABEL_95:
        if (!a4)
        {
          v71 = (unsigned __int8 *)(a2 + 15);
          if (__ldaxr((unsigned __int8 *)(a2 + 15)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v71))
          {
            goto LABEL_99;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 15);
LABEL_99:
          v73 = *(_QWORD *)(a2 + 64);
          if (v73)
          {
            if (*(_BYTE *)(v73 + 5) != 1)
            {
              v75 = *(_QWORD *)(v73 + 56);
              if (v75)
              {
                v76 = *(_DWORD *)(v75 - 8);
                v77 = 9
                    * ((Concurrently + ~((_DWORD)Concurrently << 15)) ^ ((Concurrently
                                                                                      + ~((_DWORD)Concurrently << 15)) >> 10));
                v78 = (v77 ^ (v77 >> 6)) + ~((v77 ^ (v77 >> 6)) << 11);
                v79 = v76 & (v78 ^ HIWORD(v78));
                v80 = *(_DWORD *)(v75 + 16 * v79);
                if (v80 != (_DWORD)Concurrently)
                {
                  v87 = 1;
                  do
                  {
                    if (v80 == 0x7FFFFFFF)
                      break;
                    v79 = (v79 + v87) & v76;
                    v80 = *(_DWORD *)(v75 + 16 * v79);
                    ++v87;
                  }
                  while (v80 != (_DWORD)Concurrently);
                }
              }
            }
          }
          v74 = __ldxr(v71);
          if (v74 == 1)
          {
            if (!__stlxr(0, v71))
              return;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v71, 0, v12, (uint64_t)v13, v14, v15, v16, v17);
          return;
        }
        if (a4 == 1)
        {
          v88 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a2 & 8) != 0)
            v88 = (JSC::VM **)(a2 - 16);
          JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)a2, *v88, (JSC::Structure *)Concurrently, "Firing replacement to ensure validity", v14, v15, v16, v17);
        }
        return;
      }
      v23 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v23 = (JSC::VM **)(a2 - 16);
      v24 = v19 & 0xFFFFFFFFFFFFLL;
      if (v8)
      {
        if (v8 != 1)
          goto LABEL_37;
        v24 = JSC::Structure::getConcurrently(a2, (_DWORD *)(v19 & 0xFFFFFFFFFFFFLL), &v90, (uint64_t)v13, v14, v15, v16, v17);
      }
      else
      {
        v25 = v19 >> 4;
        if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(a2 + 32)) != 0)
          goto LABEL_68;
        v26 = *(_QWORD *)(a2 + 88);
        if (!v26)
        {
          v37 = *(_QWORD *)(a2 + 64);
          if (!v37 || *(_BYTE *)(v37 + 5) != 1 && *(_DWORD *)(v37 + 80) < 2u)
            goto LABEL_68;
          JSC::Structure::materializePropertyTable((JSC::Structure *)a2, *v23, 1, v13, v14, v15, v16, v17);
          if (!v26)
            goto LABEL_68;
        }
        if (!*(_DWORD *)(v26 + 24))
          goto LABEL_68;
        v27 = *(_QWORD *)(v26 + 16);
        v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(unsigned int *)(v26 + 8);
        v30 = *(_DWORD *)(v24 + 16);
        if ((v27 & 1) != 0)
        {
          if ((v30 & 0x20) != 0)
            v30 = *(_DWORD *)(v24 + 32);
          v31 = *(_DWORD *)(v26 + 12);
          v32 = (v30 >> 8) & *(_QWORD *)&v31;
          v33 = *(unsigned __int8 *)(v28 + v32);
          if (*(_BYTE *)(v28 + v32))
          {
            v34 = v28 + v29;
            v35 = 1;
            while (1)
            {
              v36 = *(_QWORD *)(v34 + 8 * (v33 - 1));
              if (v24 == (v36 & 0xFFFFFFFFFFFFLL))
                break;
              v32 = ((_DWORD)v32 + v35) & v31;
              v33 = *(unsigned __int8 *)(v28 + v32);
              ++v35;
              if (!*(_BYTE *)(v28 + v32))
                goto LABEL_68;
            }
            v24 = HIBYTE(v36);
LABEL_37:
            if (a4 == 1)
            {
              v38 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
              if ((a2 & 8) != 0)
                v38 = (JSC::VM **)(a2 - 16);
              JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)a2, *v38, (JSC::Structure *)v24, (uint64_t)v13, v14, v15, v16, v17);
              return;
            }
            if (a4)
              return;
            v39 = (unsigned __int8 *)(a2 + 15);
            if (__ldaxr((unsigned __int8 *)(a2 + 15)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v39))
            {
              goto LABEL_46;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 15);
LABEL_46:
            v41 = *(_QWORD *)(a2 + 64);
            if (v41)
            {
              if (*(_BYTE *)(v41 + 5) != 1)
              {
                v49 = *(_QWORD *)(v41 + 56);
                if (v49)
                {
                  v50 = *(_DWORD *)(v49 - 8);
                  v51 = 9 * ((v24 + ~((_DWORD)v24 << 15)) ^ ((v24 + ~((_DWORD)v24 << 15)) >> 10));
                  v52 = (v51 ^ (v51 >> 6)) + ~((v51 ^ (v51 >> 6)) << 11);
                  v53 = v50 & (v52 ^ HIWORD(v52));
                  v54 = *(_DWORD *)(v49 + 16 * v53);
                  if (v54 != (_DWORD)v24)
                  {
                    v55 = 1;
                    do
                    {
                      if (v54 == 0x7FFFFFFF)
                        break;
                      v53 = (v53 + v55) & v50;
                      v54 = *(_DWORD *)(v49 + 16 * v53);
                      ++v55;
                    }
                    while (v54 != (_DWORD)v24);
                  }
                }
              }
            }
            v42 = __ldxr(v39);
            if (v42 == 1)
            {
              if (!__stlxr(0, v39))
                return;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, v12, (uint64_t)v13, v14, v15, v16, v17);
            return;
          }
LABEL_68:
          __break(0xC471u);
          JUMPOUT(0x1981F5484);
        }
        if ((v30 & 0x20) != 0)
          v30 = *(_DWORD *)(v24 + 32);
        v43 = *(_DWORD *)(v26 + 12);
        v44 = v43 & (v30 >> 8);
        v45 = *(_DWORD *)(v28 + 4 * v44);
        if (!v45)
          goto LABEL_68;
        v46 = v28 + 4 * v29;
        v47 = 1;
        while (1)
        {
          v48 = (v45 - 1);
          if (*(_QWORD *)(v46 + 16 * v48) == v24)
            break;
          v44 = (v44 + v47) & v43;
          v45 = *(_DWORD *)(v28 + 4 * v44);
          ++v47;
          if (!v45)
            goto LABEL_68;
        }
        v24 = *(unsigned int *)(v46 + 16 * v48 + 8);
      }
      if ((_DWORD)v24 != -1)
        goto LABEL_37;
      goto LABEL_68;
    }
  }
}

uint64_t JSC::PropertyCondition::validateReferences(uint64_t this, const void ***a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  int v8;
  const void *v10;
  const void **v11;
  int v12;
  int v13;
  const void *v14;
  int v15;
  const void *v16;
  const void *v17;

  v3 = (uint64_t *)this;
  v4 = *(_QWORD *)this;
  v5 = BYTE6(*(_QWORD *)this);
  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    v6 = v5 >= 7;
    v7 = v5 == 7;
  }
  else
  {
    v6 = 1;
    v7 = 0;
  }
  v8 = (1 << v5) & 0x9C;
  if ((v7 || !v6) && v8 != 0)
  {
    v10 = *(const void **)(this + 8);
    v17 = v10;
    if (v10)
    {
      v11 = *a2;
      if (!*a2)
      {
LABEL_18:
        v16 = v10;
        WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v16, "\n");
        WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", a2, "\n");
        this = 60;
        __break(0xC471u);
        return this;
      }
      v12 = *((_DWORD *)v11 - 2);
      this = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v17);
      v10 = v17;
      v13 = this & v12;
      v14 = v11[this & v12];
      if (v14 != v17)
      {
        v15 = 1;
        while (v14)
        {
          v13 = (v13 + v15) & v12;
          v14 = v11[v13];
          ++v15;
          if (v14 == v17)
            goto LABEL_14;
        }
        goto LABEL_18;
      }
    }
LABEL_14:
    v4 = *v3;
  }
  if ((v4 & 0xFF000000000000) == 0x5000000000000)
    return JSC::TrackedReferences::check((uint64_t)a2, v3[1]);
  return this;
}

uint64_t JSC::PropertyCondition::attemptToMakeEquivalenceWithoutBarrier(JSC::PropertyCondition *this, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  int v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v10 = (unsigned __int8 *)a2 + 4;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 0x40) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 0x40, v10))
        goto LABEL_6;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 4);
LABEL_6:
  v13 = *(_DWORD *)a2 & 0xFFFFFFFE;
  v14 = *((_DWORD *)this + 2);
  v15 = (unsigned __int8 *)((32 * (v13 >> 1)) | 0xF);
  if (__ldaxr(v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((32 * (v13 >> 1)) | 0xF);
LABEL_9:
  if (v14 == -1)
    goto LABEL_41;
  v17 = *(unsigned __int16 *)(16 * v13 + 0x18);
  if (v17 == 65534)
  {
    v17 = -1;
  }
  else if (v17 == 0xFFFF)
  {
    v17 = *(_DWORD *)(*(_QWORD *)(16 * v13 + 0x40) + 84);
  }
  if (v17 < v14 || v14 <= 63 && v14 >= *(unsigned __int8 *)(16 * v13 + 0xE))
  {
LABEL_41:
    v19 = 0;
  }
  else
  {
    if (v14 <= 63)
    {
      v18 = (char *)a2 + 16;
    }
    else
    {
      v18 = (char *)(*((_QWORD *)a2 + 1) - 8);
      v14 = 63 - v14;
    }
    v19 = *(_QWORD *)&v18[8 * v14];
  }
  v20 = __ldxr(v15);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, v15))
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)((32 * (v13 >> 1)) | 0xF), 0, a3, a4, a5, a6, a7, a8);
  while (1)
  {
    v21 = *v10;
    if ((v21 & 0xC0) != 0x40)
      break;
    v22 = __ldxr(v10);
    if (v22 == v21)
    {
      if (!__stxr(v21 & 0xBF, v10))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_29:
  if (!v19)
    return 0;
  v23 = *((_DWORD *)this + 3);
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v19 + 5);
    if (v24 == 5)
    {
      if ((v23 & 0x10) != 0)
        return *(_QWORD *)this & 0xFFFFFFFFFFFFLL | 0x5000000000000;
      return 0;
    }
    if (v24 == 6)
    {
      if ((v23 & 0x60) != 0)
        return *(_QWORD *)this & 0xFFFFFFFFFFFFLL | 0x5000000000000;
      return 0;
    }
  }
  if ((v23 & 0x70) == 0)
    return *(_QWORD *)this & 0xFFFFFFFFFFFFLL | 0x5000000000000;
  return 0;
}

void JSC::ProxyableAccessCase::create(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unsigned int *a10, uint64_t *a11)
{
  char v11;
  int v14;
  char v16;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t casual;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v11 = a8;
  v14 = a5;
  v16 = a3;
  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v19)
  {
    v20 = (_BYTE *)(v19 + 8672);
    *(_BYTE *)(v19 + 8672) = 1;
    v21 = *(unsigned int *)(v19 + 8688);
    if ((_DWORD)v21)
    {
      *(_DWORD *)(v19 + 8688) = v21 - *(_DWORD *)(v19 + 8692);
      casual = *(_QWORD *)(v19 + 8680) - v21;
LABEL_4:
      *v20 = 0;
      goto LABEL_5;
    }
    v30 = *(_QWORD *)(v19 + 8712);
    v31 = *(_QWORD *)(v19 + 8696);
    if (v30)
    {
LABEL_20:
      v32 = __clz(v30);
      *(_QWORD *)(v19 + 8712) = v30 & ~(0x8000000000000000 >> v32);
      casual = v31 + 16 * v32;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v19 + 8677) == 6)
    {
      v33 = *(_DWORD *)(v19 + 8708);
      v34 = *(unsigned int *)(v19 + 8704);
      if (v34 < v33)
      {
        *(_QWORD *)&v20[8 * v34 + 56] = 0;
        v35 = (unint64_t *)(v19 + 8 * v34 + 8736);
        v36 = v33 - 1 - v34;
        while (v36)
        {
          v31 += 1024;
          v38 = *v35++;
          v37 = v38;
          LODWORD(v34) = v34 + 1;
          --v36;
          if (v38)
          {
            v30 = __rbit64(v37);
            *(_DWORD *)(v19 + 8704) = v34;
            *(_QWORD *)(v19 + 8696) = v31;
            goto LABEL_20;
          }
        }
        *(_DWORD *)(v19 + 8704) = v33;
      }
    }
    *v20 = 0;
  }
  casual = bmalloc_allocate_casual(48, 1);
LABEL_5:
  *(_DWORD *)casual = 1;
  *(_BYTE *)(casual + 4) = v16;
  *(_BYTE *)(casual + 5) = 0;
  *(_DWORD *)(casual + 8) = v14;
  *(_QWORD *)(casual + 16) = 0;
  v23 = *a11;
  *a11 = 0;
  *(_QWORD *)(casual + 24) = v23;
  *(_QWORD *)(casual + 32) = a4;
  if (a6)
  {
    *(_DWORD *)(casual + 12) = a6 >> 4;
    if (a2 && *(_DWORD *)(a1 + 760) >= a2[7])
      JSC::Heap::writeBarrierSlowPath(a1 + 192, (unint64_t)a2);
  }
  else
  {
    *(_DWORD *)(casual + 12) = 0;
  }
  v24 = *a7;
  if (*a7)
  {
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = *(unsigned int **)(casual + 16);
  *(_QWORD *)(casual + 16) = v24;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, (uint64_t)a7, a8);
    }
    v24 = *(unsigned int **)(casual + 16);
  }
  if (v24 && !v24[1])
  {
    __break(0xC471u);
    JUMPOUT(0x1981F5C4CLL);
  }
  if (a10)
  {
    do
      v29 = __ldaxr(a10);
    while (__stlxr(v29 + 1, a10));
  }
  *(_QWORD *)(casual + 40) = a10;
  *(_BYTE *)(casual + 5) = v11;
  *a9 = casual;
}

uint64_t WTF::printInternal(uint64_t result, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  WTF::PrintStream *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  char *v15;
  size_t v16;
  WTF::PrintStream *v17;
  float v18;
  int v19;
  int v20;
  char v21;

  v3 = result;
  v4 = a2;
  if ((_BYTE)a2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    WTF::StringImpl::utf8ForCharacters((char *)&str_50_1, 0, (uint64_t)&v19, v8);
    WTF::printExpectedCStringHelper(v7, "StringView", &v19);
    if (v20 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    WTF::StringImpl::utf8ForCharacters("IsDirect", 8uLL, (uint64_t)&v19, v10);
    WTF::printExpectedCStringHelper(v9, "StringView", &v19);
    if (v20 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  if ((a2 & 0xFF00) == 0)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v4)
    {
      v15 = "|";
      v16 = 1;
    }
    else
    {
      v15 = (char *)&str_50_1;
      v16 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v15, v16, (uint64_t)&v19, v14);
    WTF::printExpectedCStringHelper(v13, "StringView", &v19);
    if (v20 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    WTF::StringImpl::utf8ForCharacters("Strict", 6uLL, (uint64_t)&v19, v18);
    WTF::printExpectedCStringHelper(v17, "StringView", &v19);
    if (v20 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  return result;
}

uint64_t JSC::PutByStatus::markIfCheap<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 20);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = v4 + (v2 << 6);
    do
    {
      v6 = *(_QWORD *)(v4 + 8);
      if ((v6 & 1) != 0)
        v7 = *(unsigned int *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v7 = v6 > 3;
      if (v7)
      {
        v8 = 0;
        v9 = 8 * v7;
        do
        {
          v10 = *(_QWORD *)(v4 + 8);
          v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v10 & 1) != 0)
            v11 = *(_QWORD *)(v11 + v8 + 8);
          if ((!*(_QWORD *)(v11 + 40) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
            && ((*(_QWORD *)(v11 + 48) | 2) == 2
             || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
          {
            result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 24))(a2, v11);
          }
          else
          {
            result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v11);
          }
          v8 += 8;
        }
        while (v9 != v8);
      }
      v12 = *(_QWORD *)(v4 + 16);
      if (v12)
      {
        if ((!*(_QWORD *)(v12 + 40) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
          && ((*(_QWORD *)(v12 + 48) | 2) == 2
           || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v12);
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v12);
        }
      }
      v4 += 64;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  JSC::ObjectPropertyConditionSet *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  JSC::PutByVariant *v44;
  const JSC::PutByVariant *v45;
  uint64_t result;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t i;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  JSC::ObjectPropertyConditionSet *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  BOOL v73;
  int v74;
  uint64_t v76;
  unsigned int v77;
  int v78;
  unint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  int v84;
  WTF *v85;
  WTF *v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  _DWORD *v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  JSC::ObjectPropertyConditionSet *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  int v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  unsigned int *v152;
  WTF *v153;
  WTF *v154;

  if (!*(_DWORD *)(a1 + 12))
  {
    v36 = 0;
    goto LABEL_54;
  }
  v10 = 0;
  v11 = (unint64_t *)(a2 + 8);
  while (1)
  {
    v12 = *(_QWORD *)a1;
    v13 = (uint64_t *)(*(_QWORD *)a1 + (v10 << 6));
    v15 = v13 + 7;
    v14 = v13[7];
    v16 = *(_QWORD *)(a2 + 56);
    if ((v14 != 0) == (v16 != 0))
    {
      if (!v14)
        goto LABEL_11;
      if ((v14 & 1) != 0)
        v17 = v14 & 0xFFFFFFFFFFFFFFFELL;
      else
        v17 = *(_QWORD *)(v14 + 8);
      if (v16)
      {
        if ((v16 & 1) != 0)
          v16 &= ~1uLL;
        else
          v16 = *(_QWORD *)(v16 + 8);
      }
      if (v17 == v16)
      {
LABEL_11:
        if (*(_DWORD *)(v12 + (v10 << 6) + 4) == *(_DWORD *)(a2 + 4))
          break;
      }
    }
LABEL_36:
    ++v10;
    v36 = *(unsigned int *)(a1 + 12);
    if (v10 >= v36)
    {
      if (*(_DWORD *)(a1 + 12))
      {
        v58 = 0;
        v59 = 56;
        do
        {
          v60 = *(_QWORD *)(*(_QWORD *)a1 + v59);
          v61 = *(_QWORD *)(a2 + 56);
          if ((v60 != 0) != (v61 != 0))
            return 0;
          if (!v60)
            goto LABEL_90;
          if ((v60 & 1) != 0)
            v62 = v60 & 0xFFFFFFFFFFFFFFFELL;
          else
            v62 = *(_QWORD *)(v60 + 8);
          if (v61)
          {
            if ((v61 & 1) != 0)
              v61 &= ~1uLL;
            else
              v61 = *(_QWORD *)(v61 + 8);
          }
          if (v62 == v61)
          {
LABEL_90:
            if (WTF::TinyPtrSet<JSC::Structure *>::overlaps((uint64_t *)(*(_QWORD *)a1 + v59 - 48), (uint64_t *)(a2 + 8)))
              return 0;
            v36 = *(unsigned int *)(a1 + 12);
          }
          ++v58;
          v59 += 64;
        }
        while (v58 < v36);
      }
LABEL_54:
      if (v36 == *(_DWORD *)(a1 + 8))
      {
        v45 = (const JSC::PutByVariant *)WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v36 + 1, a2, a4, a5, a6, a7, a8);
        v44 = (JSC::PutByVariant *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6));
      }
      else
      {
        v44 = (JSC::PutByVariant *)(*(_QWORD *)a1 + (v36 << 6));
        v45 = (const JSC::PutByVariant *)a2;
      }
      JSC::PutByVariant::PutByVariant(v44, v45, a3, a4, a5, a6, a7, a8);
      ++*(_DWORD *)(a1 + 12);
      return 1;
    }
  }
  switch(*(_DWORD *)v13)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1981F6BC8);
    case 1:
      if (*(_DWORD *)a2 != 1)
      {
        if (*(_DWORD *)a2 == 2)
        {
          JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)&v150, (const JSC::PutByVariant *)a2, a3, a4, a5, a6, a7, a8);
          v84 = JSC::PutByVariant::attemptToMergeTransitionWithReplace((JSC::PutByVariant *)&v150, (const JSC::PutByVariant *)v13);
          LOBYTE(v33) = v84;
          if (v84)
            JSC::PutByVariant::operator=((uint64_t)v13, &v150, a3, a4, a5, a6, a7, a8);
          v85 = v154;
          v154 = 0;
          if (v85)
            WTF::fastFree((unint64_t)v85, (void *)v25, a3, a4, a5, a6, a7, a8);
          v86 = v153;
          v153 = 0;
          if (v86)
          {
            v87 = *(_QWORD *)v86;
            if ((WTF *)((char *)v86 + 16) != *(WTF **)v86 && v87)
            {
              *(_QWORD *)v86 = 0;
              *((_DWORD *)v86 + 2) = 0;
              WTF::fastFree(v87, (void *)v25, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree((unint64_t)v86, (void *)v25, a3, a4, a5, a6, a7, a8);
          }
          v88 = v152;
          v152 = 0;
          if (v88)
          {
            do
            {
              v39 = __ldaxr(v88);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v88));
            if (!v40)
            {
              atomic_store(1u, v88);
              WTF::fastFree((unint64_t)v88, (void *)v25, a3, a4, a5, a6, a7, a8);
            }
          }
          if ((v151 & 1) != 0)
          {
            v135 = v151 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_226:
            WTF::fastFree(v135, (void *)v25, a3, a4, a5, a6, a7, a8);
          }
          if ((v33 & 1) != 0)
            goto LABEL_65;
        }
        goto LABEL_36;
      }
      v47 = (uint64_t *)(v12 + (v10 << 6) + 8);
      v48 = *v11;
      if ((*v11 & 1) != 0)
        goto LABEL_237;
      v49 = v48 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v48 & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_65;
      v50 = *v47;
      if ((*v47 & 1) != 0)
        goto LABEL_238;
      if ((v50 & 0xFFFFFFFFFFFFFFFCLL) == v49)
        goto LABEL_65;
      if ((v50 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        goto LABEL_236;
      goto LABEL_63;
    case 2:
      if (*(_DWORD *)a2 != 2)
      {
        if (*(_DWORD *)a2 == 1
          && (JSC::PutByVariant::attemptToMergeTransitionWithReplace((JSC::PutByVariant *)(*(_QWORD *)a1 + (v10 << 6)), (const JSC::PutByVariant *)a2) & 1) != 0)
        {
          goto LABEL_65;
        }
        goto LABEL_36;
      }
      v18 = *(_QWORD *)(v12 + (v10 << 6) + 8);
      if ((v18 & 1) != 0)
        v19 = *(unsigned int *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v19 = v18 > 3;
      v20 = *v11;
      if ((*v11 & 1) != 0)
        v21 = *(unsigned int *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v21 = v20 > 3;
      if (v19 != v21)
        goto LABEL_36;
      if ((v18 & 1) != 0)
      {
        if ((v20 & 1) != 0)
        {
          v95 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
          v98 = *v95;
          v96 = v95 + 2;
          v97 = v98;
          if (v98)
          {
            v99 = v20 & 0xFFFFFFFFFFFFFFFCLL;
            v100 = *(unsigned int *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
            if ((_DWORD)v100)
            {
              v101 = 0;
              v102 = *(_QWORD *)(v99 + 8);
              v103 = v99 + 16;
              while (1)
              {
                v104 = *(_QWORD *)&v96[2 * v101];
                if (v102 != v104)
                {
                  v105 = 0;
                  do
                  {
                    if (v100 - 1 == v105)
                      goto LABEL_36;
                    v106 = *(_QWORD *)(v103 + 8 * v105++);
                  }
                  while (v106 != v104);
                  if (v105 >= v100)
                    break;
                }
                if (++v101 == v97)
                  goto LABEL_23;
              }
            }
            goto LABEL_36;
          }
        }
        else
        {
          if ((v20 & 0xFFFFFFFFFFFFFFFCLL) == 0)
            goto LABEL_36;
          v149 = v18 & 0xFFFFFFFFFFFFFFFCLL;
          if (*(_DWORD *)v149 > 1u || *(_QWORD *)(v149 + 8) != (v20 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_36;
        }
      }
      else
      {
        v22 = v18 & 0xFFFFFFFFFFFFFFFCLL;
        if (v22)
        {
          v23 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v20 & 1) != 0)
          {
            v80 = *v23;
            if (!(_DWORD)v80)
              goto LABEL_36;
            if (*((_QWORD *)v23 + 1) != v22)
            {
              v81 = 0;
              v82 = v23 + 4;
              do
              {
                if (v80 - 1 == v81)
                  goto LABEL_36;
                v83 = *(_QWORD *)&v82[2 * v81++];
              }
              while (v83 != v22);
              if (v81 >= v80)
                goto LABEL_36;
            }
          }
          else if (v23 != (unsigned int *)v22)
          {
            goto LABEL_36;
          }
        }
      }
LABEL_23:
      v24 = v12 + (v10 << 6);
      if (*(_QWORD *)(v24 + 16) != *(_QWORD *)(a2 + 16))
        goto LABEL_36;
      v25 = a2 + 24;
      v28 = *(_QWORD *)(v24 + 24);
      v27 = (JSC::ObjectPropertyConditionSet *)(v24 + 24);
      v26 = v28;
      if ((v28 == 0) != (*(_QWORD *)(a2 + 24) == 0))
        goto LABEL_36;
      if (v26)
      {
        JSC::ObjectPropertyConditionSet::mergedWith(v27, v25, a3, a4, a5, a6, a7, a8, &v150);
        v29 = v150;
        if (v150)
        {
          if (!v150[1])
          {
            v33 = 0;
            goto LABEL_33;
          }
          do
            v37 = __ldaxr(v29);
          while (__stlxr(v37 + 1, v29));
        }
      }
      else
      {
        v29 = 0;
      }
      v30 = *(unsigned int **)v27;
      *(_QWORD *)v27 = v29;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((unint64_t)v30, (void *)v25, a3, a4, a5, a6, a7, a8);
        }
      }
      if (!v29)
        goto LABEL_65;
      v33 = 1;
      do
      {
LABEL_33:
        v34 = __ldaxr(v29);
        v35 = --v34 == 0;
      }
      while (__stlxr(v34, v29));
LABEL_34:
      if (v35)
      {
        atomic_store(1u, v29);
        v135 = (unint64_t)v29;
        goto LABEL_226;
      }
      goto LABEL_35;
    case 3:
      if (*(_DWORD *)a2 != 3)
        goto LABEL_36;
      v107 = v12 + (v10 << 6);
      v109 = *(_QWORD *)(v107 + 32);
      v108 = (uint64_t *)(v107 + 32);
      v110 = *(_QWORD *)(a2 + 32);
      if (v109)
      {
        if (!v110)
          goto LABEL_36;
      }
      else if (v110)
      {
        goto LABEL_36;
      }
      v111 = v12 + (v10 << 6);
      v114 = *(_QWORD *)(v111 + 24);
      v113 = (JSC::ObjectPropertyConditionSet *)(v111 + 24);
      v112 = v114;
      if ((v114 == 0) != (*(_QWORD *)(a2 + 24) == 0))
        goto LABEL_36;
      if (v112)
      {
        JSC::ObjectPropertyConditionSet::mergedWith(v113, a2 + 24, a3, a4, a5, a6, a7, a8, &v150);
        v29 = v150;
        if (!v150)
          goto LABEL_36;
        v115 = v150[1];
        if (!(_DWORD)v115)
        {
          v33 = 0;
          do
          {
LABEL_223:
            v134 = __ldaxr(v29);
            v35 = --v134 == 0;
          }
          while (__stlxr(v134, v29));
          goto LABEL_34;
        }
        v116 = 0;
        while (1)
        {
          v117 = BYTE2(v150[v116 / 4 + 5]);
          v73 = v117 > 6;
          v118 = (1 << v117) & 0x63;
          if (!v73 && v118 != 0)
            break;
          v116 += 24;
          if (24 * v115 == v116)
            goto LABEL_194;
        }
        if (24 * v115 - 24 != v116)
        {
          v122 = 24 * v115 - 24;
          while (1)
          {
            v123 = BYTE2(v150[v116 / 4 + 11]);
            v73 = v123 > 6;
            v124 = (1 << v123) & 0x63;
            if (!v73 && v124 != 0)
              break;
            v116 += 24;
            if (v122 == v116)
              goto LABEL_204;
          }
LABEL_194:
          v33 = 0;
          goto LABEL_222;
        }
        do
LABEL_204:
          v126 = __ldaxr(v29);
        while (__stlxr(v126 + 1, v29));
        v127 = *(unsigned int **)v113;
        *(_QWORD *)v113 = v29;
        if (v127)
        {
          do
          {
            v128 = __ldaxr(v127);
            v129 = v128 - 1;
          }
          while (__stlxr(v129, v127));
          if (!v129)
          {
            atomic_store(1u, v127);
            WTF::fastFree((unint64_t)v127, (void *)v25, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      else
      {
        v29 = 0;
        *(_QWORD *)v113 = 0;
      }
      if (*v108)
        JSC::CallLinkStatus::merge(*v108, *(_QWORD *)(a2 + 32), a3, a4, a5, a6, a7, a8);
      v130 = (uint64_t *)(v12 + (v10 << 6) + 8);
      v131 = *v11;
      if ((*v11 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine((uint64_t *)(v12 + (v10 << 6) + 8), (_QWORD *)(a2 + 8));
      }
      else
      {
        v25 = v131 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v131 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v132 = *v130;
          if ((*v130 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)(v12 + (v10 << 6) + 8), v25);
          }
          else if ((v132 & 0xFFFFFFFFFFFFFFFCLL) != v25)
          {
            if ((v132 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v141 = v25;
              v142 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v142 = 0x400000002;
              v143 = *v130;
              *(_QWORD *)(v142 + 8) = *v130 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v142 + 16) = v141;
              v133 = v143 & 2 | v142 | 1;
            }
            else
            {
              v133 = *v130 & 2 | v25;
            }
            *v130 = v133;
          }
        }
      }
      v33 = 1;
LABEL_222:
      if (v29)
        goto LABEL_223;
      goto LABEL_35;
    case 4:
      if (*(_DWORD *)a2 != 4)
        goto LABEL_36;
      v63 = v12 + (v10 << 6);
      if (*(_QWORD *)(v63 + 40) != *(_QWORD *)(a2 + 40))
        goto LABEL_36;
      v64 = *(uint64_t **)(v63 + 48);
      v65 = *(uint64_t **)(a2 + 48);
      if (v64)
      {
        if (!v65)
          goto LABEL_36;
        v145 = *v64;
        v144 = v64[1];
        v147 = *v65;
        v146 = v65[1];
        if (v145 != v147 || v144 != v146)
          goto LABEL_36;
      }
      else if (v65)
      {
        goto LABEL_36;
      }
      v25 = a2 + 24;
      v66 = v12 + (v10 << 6);
      v69 = *(_QWORD *)(v66 + 24);
      v68 = (JSC::ObjectPropertyConditionSet *)(v66 + 24);
      v67 = v69;
      if ((v69 == 0) != (*(_QWORD *)(a2 + 24) == 0))
        goto LABEL_36;
      if (v67)
      {
        JSC::ObjectPropertyConditionSet::mergedWith(v68, v25, a3, a4, a5, a6, a7, a8, &v150);
        v29 = v150;
        if (!v150)
          goto LABEL_36;
        v70 = v150[1];
        if (!(_DWORD)v70)
        {
          v33 = 0;
          do
          {
LABEL_40:
            v38 = __ldaxr(v29);
            v35 = --v38 == 0;
          }
          while (__stlxr(v38, v29));
          goto LABEL_34;
        }
        v71 = 0;
        while (1)
        {
          v72 = BYTE2(v150[v71 / 4 + 5]);
          v73 = v72 > 6;
          v74 = (1 << v72) & 0x63;
          if (!v73 && v74 != 0)
            break;
          v71 += 24;
          if (24 * v70 == v71)
            goto LABEL_110;
        }
        if (24 * v70 - 24 != v71)
        {
          v76 = 24 * v70 - 24;
          while (1)
          {
            v77 = BYTE2(v150[v71 / 4 + 11]);
            v73 = v77 > 6;
            v78 = (1 << v77) & 0x63;
            if (!v73 && v78 != 0)
              break;
            v71 += 24;
            if (v76 == v71)
              goto LABEL_44;
          }
LABEL_110:
          v33 = 0;
          goto LABEL_111;
        }
        do
LABEL_44:
          v41 = __ldaxr(v29);
        while (__stlxr(v41 + 1, v29));
        v89 = *(unsigned int **)v68;
        *(_QWORD *)v68 = v29;
        if (v89)
        {
          do
          {
            v42 = __ldaxr(v89);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v89));
          if (!v43)
          {
            atomic_store(1u, v89);
            WTF::fastFree((unint64_t)v89, (void *)v25, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      else
      {
        v29 = 0;
        *(_QWORD *)v68 = 0;
      }
      v90 = (uint64_t *)(v12 + (v10 << 6) + 8);
      v91 = *v11;
      if ((*v11 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine((uint64_t *)(v12 + (v10 << 6) + 8), (_QWORD *)(a2 + 8));
      }
      else
      {
        v92 = v91 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v91 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v93 = *v90;
          if ((*v90 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)(v12 + (v10 << 6) + 8), v92);
          }
          else if ((v93 & 0xFFFFFFFFFFFFFFFCLL) != v92)
          {
            if ((v93 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v120 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v120 = 0x400000002;
              v121 = *v90;
              *(_QWORD *)(v120 + 8) = *v90 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v120 + 16) = v92;
              v94 = v121 & 2 | v120 | 1;
            }
            else
            {
              v94 = *v90 & 2 | v92;
            }
            *v90 = v94;
          }
        }
      }
      v33 = 1;
LABEL_111:
      if (v29)
        goto LABEL_40;
LABEL_35:
      if (v33)
        goto LABEL_65;
      goto LABEL_36;
    case 5:
      if (*(_DWORD *)a2 != 5)
        goto LABEL_36;
      v136 = *(_QWORD *)(v12 + (v10 << 6) + 32);
      v137 = *(_QWORD *)(a2 + 32);
      if (!v136)
      {
        if (!v137)
          goto LABEL_231;
        goto LABEL_36;
      }
      if (!v137)
        goto LABEL_36;
      JSC::CallLinkStatus::merge(v136, v137, a3, a4, a5, a6, a7, a8);
LABEL_231:
      v47 = (uint64_t *)(v12 + (v10 << 6) + 8);
      v138 = *v11;
      if ((*v11 & 1) != 0)
      {
LABEL_237:
        WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(v47, v11);
        goto LABEL_65;
      }
      v49 = v138 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v138 & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_65;
      v50 = *v47;
      if ((*v47 & 1) != 0)
      {
LABEL_238:
        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v47, v49);
        goto LABEL_65;
      }
      if ((v50 & 0xFFFFFFFFFFFFFFFCLL) == v49)
        goto LABEL_65;
      if ((v50 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      {
LABEL_63:
        v51 = v50 & 2 | v49;
        goto LABEL_64;
      }
LABEL_236:
      v139 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v139 = 0x400000002;
      v140 = *v47;
      *(_QWORD *)(v139 + 8) = *v47 & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(v139 + 16) = v49;
      v51 = v140 & 2 | v139 | 1;
LABEL_64:
      *v47 = v51;
LABEL_65:
      v52 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v52)
      {
        v53 = 0;
        for (i = 56; ; i += 64)
        {
          if (v10 != v53)
          {
            v55 = *(_QWORD *)(*(_QWORD *)a1 + i);
            v56 = *v15;
            if ((v55 != 0) != (*v15 != 0))
              return 0;
            if (!v55)
              goto LABEL_78;
            if ((v55 & 1) != 0)
              v57 = v55 & 0xFFFFFFFFFFFFFFFELL;
            else
              v57 = *(_QWORD *)(v55 + 8);
            if (v56)
            {
              if ((v56 & 1) != 0)
                v56 &= ~1uLL;
              else
                v56 = *(_QWORD *)(v56 + 8);
            }
            if (v57 == v56)
            {
LABEL_78:
              if (WTF::TinyPtrSet<JSC::Structure *>::overlaps((uint64_t *)(*(_QWORD *)a1 + i - 48), (uint64_t *)(v12 + (v10 << 6) + 8)))
              {
                return 0;
              }
              v52 = *(unsigned int *)(a1 + 12);
            }
          }
          ++v53;
          result = 1;
          if (v53 >= v52)
            return result;
        }
      }
      return 1;
    default:
      __break(0xC471u);
      JUMPOUT(0x1981F6BA8);
  }
}

uint64_t *JSC::PutByVariant::replace@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;

  *(_OWORD *)(a4 + 8) = 0u;
  result = (uint64_t *)(a4 + 8);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)(a4 + 56) = a1;
  *(_QWORD *)a4 = 0xFFFFFFFF00000001;
  if ((_QWORD *)(a4 + 8) != a2)
  {
    if ((*a2 & 1) != 0)
      result = (uint64_t *)WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(result, a2);
    else
      *result = *a2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *(_DWORD *)(a4 + 4) = a3;
  return result;
}

void JSC::PutByVariant::~PutByVariant(JSC::PutByVariant *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)v10;
    if (v10 + 16 != *(_QWORD *)v10 && v11 != 0)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::PutByVariant::transition(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v8 = a6;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)a1 = 0xFFFFFFFF00000002;
  if (v12 != a3)
  {
    if ((*a3 & 1) != 0)
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v12, a3);
    else
      *v12 = *a3 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *(_QWORD *)(a1 + 16) = a4;
  v13 = *a5;
  if (*a5)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((unint64_t)v15, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 4) = v8;
}

uint64_t JSC::PutByStatus::PutByStatus(uint64_t result, int a2, uint64_t a3)
{
  BOOL v3;
  int v4;

  *(_QWORD *)(result + 8) = result + 24;
  *(_QWORD *)(result + 16) = 1;
  if (a2 == 4)
  {
    v3 = (*(_WORD *)(a3 + 129) & 2) == 0;
    v4 = 4;
  }
  else
  {
    if (a2 != 5)
    {
      result = 140;
      __break(0xC471u);
      return result;
    }
    v3 = (*(_WORD *)(a3 + 129) & 2) == 0;
    v4 = 6;
  }
  if (!v3)
    ++v4;
  *(_DWORD *)result = v4;
  return result;
}

void JSC::PutByStatus::computeFor(uint64_t a1, uint64_t a2, JSC::PutByVariant *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  char v9;
  JSC::PutByVariant *v11;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  JSC::CodeOrigin *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  unsigned int v34;
  BOOL v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned __int8 v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  JSC::VM *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  _DWORD **v54;
  unint64_t v55;
  int v56;
  _DWORD *v57;
  _QWORD *v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  WTF *v63;
  int v64;
  int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  WTF *v72;
  unint64_t v73;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  int Concurrently;
  WTF *v82;
  WTF *v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  int v91;
  unsigned int v92;
  _BYTE v93[64];
  unsigned int *v94;
  uint64_t v95;
  WTF *v96[6];
  _BYTE v97[8];
  unsigned __int8 *v98;
  char v99;
  char v100;
  uint64_t v101;

  v8 = a6;
  v9 = a5;
  v11 = a3;
  v101 = *MEMORY[0x1E0C80C00];
  v14 = (unsigned __int8 *)(a2 + 16);
  v100 = 0;
  v98 = (unsigned __int8 *)(a2 + 16);
  v99 = 1;
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
    goto LABEL_4;
  }
  if (__stxr(1u, v14))
    goto LABEL_3;
LABEL_4:
  v100 = 1;
  if (v9)
  {
    v36 = 0;
    *(_DWORD *)a1 = 4;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 1;
    goto LABEL_28;
  }
  v16 = 0;
  v17 = 2;
  if ((_DWORD)a4 != -1 && (_DWORD)a4 != 0x3FFFFFFF)
  {
    if (a4 >> 28)
    {
      v16 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = 0;
      *(_DWORD *)(v16 + 8) = a4;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v16 = a4 << 36;
    }
  }
  v89 = v16 | v17;
  v18 = *(_QWORD *)v11;
  if (!*(_QWORD *)v11)
  {
LABEL_71:
    v27 = 0;
    goto LABEL_12;
  }
  v19 = *(_DWORD *)(v18 - 8);
  v20 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)&v89, 0, (uint64_t)a3, a4, a5, a6, a7, a8) & v19;
  v21 = (JSC::CodeOrigin *)(v18 + (v20 << 6));
  if ((JSC::CodeOrigin::isApproximatelyEqualTo(v21, (const JSC::CodeOrigin *)&v89, 0, v22, v23, v24, v25, v26) & 1) == 0)
  {
    v39 = 1;
    do
    {
      v40 = *(_QWORD *)v21;
      if (*(_QWORD *)v21 == 2)
        goto LABEL_71;
      if ((v40 & 2) != 0)
      {
        v58 = (_QWORD *)(v40 & 0xFFFFFFFF8);
        if ((v40 & 1) == 0)
          goto LABEL_70;
      }
      else
      {
        if ((v40 & 1) == 0)
          goto LABEL_37;
        v58 = (_QWORD *)(v40 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v40 & 0xFFFFFFFF8) + 8) != -1)
          goto LABEL_37;
      }
      v58 = (_QWORD *)*v58;
LABEL_70:
      if (!v58)
        goto LABEL_71;
LABEL_37:
      v20 = ((_DWORD)v20 + v39) & v19;
      v21 = (JSC::CodeOrigin *)(v18 + (v20 << 6));
      ++v39;
    }
    while (!JSC::CodeOrigin::isApproximatelyEqualTo(v21, (const JSC::CodeOrigin *)&v89, 0, a4, a5, a6, a7, a8));
  }
  v27 = *(_QWORD *)(v18 + (v20 << 6) + 8);
LABEL_12:
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v28 = 0;
  v29 = 2;
  if ((_DWORD)a4 != -1 && (_DWORD)a4 != 0x3FFFFFFF)
  {
    if (a4 >> 28)
    {
      v28 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v28 = 0;
      *(_DWORD *)(v28 + 8) = a4;
      v29 = 1;
    }
    else
    {
      v29 = 0;
      v28 = a4 << 36;
    }
  }
  v30 = v28 | v29;
  v88 = v28 | v29;
  JSC::PutByStatus::computeForStubInfo((uint64_t)&v89, (uint64_t)v97, a2, v27, v8, &v88);
  if ((v30 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v28 & 0xFFFFFFFF8, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v89)
  {
    v41 = *(_QWORD *)(a2 + 56);
    v42 = (unsigned __int8 *)(**(_QWORD **)(v41 + 80) + (a4 >> 2));
    v43 = *v42;
    v44 = v43;
    if ((v43 | 2) == 0x82)
      v44 = v42[1];
    if (v44 != 7)
    {
      if ((v44 - 35) >= 2 && v44 != 41 && v44 != 33)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F727CLL);
      }
      goto LABEL_53;
    }
    if (v43 == 128)
    {
      v45 = *((unsigned __int16 *)v42 + 2);
      v46 = v42[8];
      v47 = *((unsigned __int16 *)v42 + 5);
    }
    else if (v43 == 130)
    {
      v45 = *(_DWORD *)(v42 + 6);
      v46 = v42[14];
      v47 = *(_DWORD *)(v42 + 18);
    }
    else
    {
      v45 = v42[2];
      v46 = v42[4];
      v47 = v42[5];
    }
    v48 = *(_QWORD *)(a2 + 136);
    v49 = *(unsigned __int16 *)(v48 + 14);
    if (!*(_WORD *)(v48 + 14))
      v49 = *(_DWORD *)(v48 + 124);
    v50 = *(JSC::VM **)(a2 + 72);
    v51 = *(unsigned int **)(v41 + 104);
    if (v51)
    {
      v52 = *v51;
      if (*v51 > v45)
      {
        v53 = &v51[2 * v45];
        goto LABEL_52;
      }
    }
    else
    {
      v52 = 0;
    }
    v57 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 120) + 72))(*(_QWORD *)(a2 + 120)) + 48);
    if (*v57 <= v45 - v52)
    {
      __break(0xC471u);
      JUMPOUT(0x1981F75F4);
    }
    v53 = &v57[2 * (v45 - v52)];
LABEL_52:
    v54 = (_DWORD **)(v53 + 2);
    v55 = (v48 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = *(_DWORD *)(v55 + 24 * v47);
    if (!v56)
    {
LABEL_53:
      *(_DWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_QWORD *)(a1 + 16) = 1;
      goto LABEL_54;
    }
    v59 = v47;
    v60 = *v54;
    v61 = 16 * (v56 & 0xFFFFFFFE);
    v62 = *(_DWORD *)(v55 + 24 * v59 + 8);
    if (!v62)
    {
      Concurrently = JSC::Structure::getConcurrently(16 * (v56 & 0xFFFFFFFE), v60, &v94, a4, a5, a6, a7, a8);
      if (Concurrently == -1)
        goto LABEL_53;
      memset(v96, 0, sizeof(v96));
      v95 = v61;
      LODWORD(v94) = 1;
      HIDWORD(v94) = Concurrently;
      *(_DWORD *)a1 = 1;
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_QWORD *)(a1 + 16) = 1;
      JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)(a1 + 24), (const JSC::PutByVariant *)&v94, (uint64_t)a3, a4, a5, a6, a7, a8);
      ++*(_DWORD *)(a1 + 20);
      v82 = v96[4];
      v96[4] = 0;
      if (v82)
        WTF::fastFree((unint64_t)v82, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
      v83 = v96[2];
      v96[2] = 0;
      if (v83)
      {
        v84 = *(_QWORD *)v83;
        if ((WTF *)((char *)v83 + 16) != *(WTF **)v83 && v84)
        {
          *(_QWORD *)v83 = 0;
          *((_DWORD *)v83 + 2) = 0;
          WTF::fastFree(v84, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree((unint64_t)v83, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      v85 = (unsigned int *)v96[1];
      v96[1] = 0;
      if (v85)
      {
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          atomic_store(1u, v85);
          WTF::fastFree((unint64_t)v85, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      if ((v95 & 1) == 0)
        goto LABEL_54;
      v80 = v95 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_116;
    }
    v63 = (WTF *)(16 * (v62 & 0xFFFFFFFE));
    v64 = JSC::Structure::getConcurrently((uint64_t)v63, v60, &v94, a4, a5, a6, a7, a8);
    if (v64 == -1)
      goto LABEL_53;
    v65 = v64;
    if ((v46 & 1) != 0)
    {
      v66 = 0;
    }
    else
    {
      JSC::generateConditionsForPropertySetterMissConcurrently(v50, *(_QWORD **)(a2 + 8), v61, v60, a5, a6, a7, a8, (uint64_t *)&v94);
      v66 = v94;
      if (v94 && !v94[1])
      {
        *(_DWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = a1 + 24;
        *(_QWORD *)(a1 + 16) = 1;
        do
        {
LABEL_98:
          v78 = __ldaxr(v66);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v66));
        if (v79)
        {
LABEL_54:
          v33 = v90;
          if (v92)
          {
            WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v90, (_QWORD *)v90 + 8 * (unint64_t)v92, (uint64_t)a3, a4, a5, a6, a7, a8);
            v33 = v90;
          }
          goto LABEL_22;
        }
        atomic_store(1u, v66);
        v80 = (unint64_t)v66;
LABEL_116:
        WTF::fastFree(v80, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_54;
      }
    }
    memset(&v96[1], 0, 40);
    v94 = (unsigned int *)0xFFFFFFFF00000002;
    v95 = v61;
    v96[0] = v63;
    if (v66)
    {
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 + 1, v66));
      v68 = (unsigned int *)v96[1];
      v96[1] = (WTF *)v66;
      if (v68)
      {
        do
        {
          v69 = __ldaxr(v68);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v68));
        if (!v70)
        {
          atomic_store(1u, v68);
          WTF::fastFree((unint64_t)v68, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
    }
    HIDWORD(v94) = v65;
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 1;
    JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)(a1 + 24), (const JSC::PutByVariant *)&v94, (uint64_t)a3, a4, a5, a6, a7, a8);
    ++*(_DWORD *)(a1 + 20);
    v71 = v96[4];
    v96[4] = 0;
    if (v71)
      WTF::fastFree((unint64_t)v71, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
    v72 = v96[2];
    v96[2] = 0;
    if (v72)
    {
      v73 = *(_QWORD *)v72;
      if ((WTF *)((char *)v72 + 16) != *(WTF **)v72 && v73 != 0)
      {
        *(_QWORD *)v72 = 0;
        *((_DWORD *)v72 + 2) = 0;
        WTF::fastFree(v73, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree((unint64_t)v72, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v75 = (unsigned int *)v96[1];
    v96[1] = 0;
    if (v75)
    {
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        atomic_store(1u, v75);
        WTF::fastFree((unint64_t)v75, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    if ((v95 & 1) != 0)
      WTF::fastFree(v95 & 0xFFFFFFFFFFFFFFFCLL, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v66)
      goto LABEL_54;
    goto LABEL_98;
  }
  *(_DWORD *)a1 = v89;
  a3 = (JSC::PutByVariant *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 1;
  v32 = v90;
  v33 = (WTF *)v93;
  if (v90 == (WTF *)v93)
  {
    WTF::VectorTypeOperations<JSC::PutByVariant>::move(v90, (WTF *)((char *)v90 + 64 * (unint64_t)v92), a3, a4, a5, a6, a7, a8);
    v33 = v90;
  }
  else
  {
    v90 = (WTF *)v93;
    *(_QWORD *)(a1 + 8) = v32;
    *(_DWORD *)(a1 + 16) = v91;
  }
  v34 = v92;
  v92 = 0;
  *(_DWORD *)(a1 + 20) = v34;
LABEL_22:
  if (v93 != (_BYTE *)v33 && v33 != 0)
  {
    v90 = 0;
    v91 = 0;
    WTF::fastFree((unint64_t)v33, v31, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v36 = v100 == 0;
LABEL_28:
  if (!v36 && v99)
  {
    v37 = v98;
    v38 = __ldxr(v98);
    if (v38 == 1)
    {
      if (!__stlxr(0, v98))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v37, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

void JSC::PutByStatus::computeForStubInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5, uint64_t *a6)
{
  unsigned int v11;
  void *v12;
  JSC::PutByVariant *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  JSC::PutByVariant *v22;
  int v23;
  int v24;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  JSC::PutByVariant *v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  BOOL v97;
  char v98;
  unint64_t *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  WTF *v109;
  int v110;
  WTF *v111;
  int v113;
  uint64_t v114;
  _DWORD *v115;
  int v116;
  WTF *v117;
  int Concurrently;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  WTF *v133;
  unint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  BOOL v139;
  int v140;
  unsigned int *v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  _DWORD *AlternateBase;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  uint64_t v159;
  int v161;
  uint64_t v162;
  unsigned int *v163;
  unint64_t v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int *v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  __int16 v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  _DWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unsigned int *v189;
  unint64_t v190;
  unint64_t v191;
  int v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int *v198;
  unsigned int *v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  unint64_t v203;
  uint64_t v205;
  int v206;
  unsigned int *v207;
  JSC::PutByVariant *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  int v224;
  unint64_t v225;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  int v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int *v241;
  char v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v246;
  uint64_t v247;
  BOOL v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  unsigned int *v256;
  uint64_t v257;
  unsigned int *v258;
  uint64_t v259;
  unsigned int *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unsigned __int16 v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int *v270;
  _BYTE v271[56];
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD v275[2];
  WTF *v276;
  WTF *v277[2];
  WTF *v278[2];
  WTF *v279;
  uint64_t v280;

  v11 = JSC::StructureStubInfo::summary(*(_QWORD *)(a3 + 72), a4);
  v19 = v11;
  if (v11 - 1 >= 3)
  {
    if (v11 <= 5u && ((1 << v11) & 0x31) != 0)
    {
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_QWORD *)(a1 + 16) = 1;
      v113 = v11;
      switch(v11)
      {
        case 0u:
          goto LABEL_136;
        case 1u:
        case 3u:
          __break(0xC471u);
          JUMPOUT(0x1981F8AC0);
        case 2u:
          v113 = 3;
          goto LABEL_136;
        case 4u:
          goto LABEL_232;
        case 5u:
          goto LABEL_329;
        default:
          __break(0xC471u);
          JUMPOUT(0x1981F8D3CLL);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1981F8E2CLL);
  }
  v20 = *(unsigned __int8 *)(a4 + 123);
  if (v20 != 4)
  {
    if (v20 == 2)
    {
      v114 = *(_QWORD *)(a4 + 16);
      if (!v114
        || ((v114 & 1) == 0 ? (v115 = *(_DWORD **)(v114 + 8)) : (v115 = (_DWORD *)(v114 & 0xFFFFFFFFFFFFFFFELL)), !v115))
      {
        __break(0xC471u);
        JUMPOUT(0x1981F8404);
      }
      v116 = *(_DWORD *)(a4 + 12);
      if (v116)
        v117 = (WTF *)(16 * (v116 & 0xFFFFFFFE));
      else
        v117 = 0;
      Concurrently = JSC::Structure::getConcurrently((uint64_t)v117, v115, v275, v14, v15, v16, v17, v18);
      if (Concurrently != -1)
      {
        *(_OWORD *)v277 = 0u;
        *(_OWORD *)v278 = 0u;
        v279 = 0;
        v280 = v114;
        v276 = v117;
        v275[0] = 1;
        v275[1] = Concurrently;
        *(_DWORD *)a1 = 1;
        *(_QWORD *)(a1 + 8) = a1 + 24;
        *(_QWORD *)(a1 + 16) = 1;
        JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)(a1 + 24), (const JSC::PutByVariant *)v275, v119, v120, v121, v122, v123, v124);
        ++*(_DWORD *)(a1 + 20);
        v132 = v279;
        v279 = 0;
        if (v132)
          WTF::fastFree((unint64_t)v132, v125, v126, v127, v128, v129, v130, v131);
        v133 = v278[0];
        v278[0] = 0;
        if (v133)
        {
          v134 = *(_QWORD *)v133;
          if ((WTF *)((char *)v133 + 16) != *(WTF **)v133 && v134)
          {
            *(_QWORD *)v133 = 0;
            *((_DWORD *)v133 + 2) = 0;
            WTF::fastFree(v134, v125, v126, v127, v128, v129, v130, v131);
          }
          WTF::fastFree((unint64_t)v133, v125, v126, v127, v128, v129, v130, v131);
        }
        v135 = (unsigned int *)v277[1];
        v277[1] = 0;
        if (v135)
        {
          do
          {
            v136 = __ldaxr(v135);
            v137 = v136 - 1;
          }
          while (__stlxr(v137, v135));
          if (!v137)
          {
            atomic_store(1u, v135);
            WTF::fastFree((unint64_t)v135, v125, v126, v127, v128, v129, v130, v131);
          }
        }
        if ((v276 & 1) != 0)
          WTF::fastFree((unint64_t)v276 & 0xFFFFFFFFFFFFFFFCLL, v125, v126, v127, v128, v129, v130, v131);
        return;
      }
      v242 = v19 - 1;
      if (v19 - 1 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F9040);
      }
    }
    else
    {
      if (!*(_BYTE *)(a4 + 123))
      {
        if (v11 - 1 >= 2)
        {
          if (v11 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F8E6CLL);
          }
          *(_QWORD *)(a1 + 8) = a1 + 24;
          *(_QWORD *)(a1 + 16) = 1;
LABEL_329:
          v170 = (*(_WORD *)(a4 + 129) & 2) == 0;
          v113 = 6;
        }
        else
        {
          *(_QWORD *)(a1 + 8) = a1 + 24;
          *(_QWORD *)(a1 + 16) = 1;
LABEL_232:
          v170 = (*(_WORD *)(a4 + 129) & 2) == 0;
          v113 = 4;
        }
        if (!v170)
          ++v113;
LABEL_136:
        *(_DWORD *)a1 = v113;
        return;
      }
      v242 = v11 - 1;
      if (v11 - 1 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F8C6CLL);
      }
    }
    JSC::PutByStatus::PutByStatus(a1, (0x50404u >> (8 * v242)), a4);
    return;
  }
  v267 = v11;
  v268 = a4;
  v21 = *(_DWORD **)(a4 + 64);
  v22 = (JSC::PutByVariant *)&v277[1];
  v276 = (WTF *)&v277[1];
  v277[0] = (WTF *)1;
  v275[0] = 1;
  v23 = v21[3];
  v265 = a5;
  v266 = a3;
  if (v23 == 1)
  {
    v24 = *(unsigned __int8 *)(**(_QWORD **)v21 + 4);
    if (v24 == 62 || v24 == 3)
    {
      v171 = *(_QWORD *)a4;
      if ((*(_QWORD *)a4 & 1) != 0)
      {
        v246 = *(_QWORD *)(v171 & 0xFFFFFFFF8);
        if ((v171 & 2) != 0
          || ((v247 = *(unsigned int *)((v171 & 0xFFFFFFFF8) + 8), (_DWORD)v247 != 0x3FFFFFFF)
            ? (v248 = (_DWORD)v247 == -1)
            : (v248 = 1),
              v248))
        {
          v249 = 2;
        }
        else if (v247 >> 28)
        {
          v261 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v261 = v246;
          *(_DWORD *)(v261 + 8) = v247;
          v249 = 1;
          v246 = v261;
        }
        else
        {
          v249 = *(_QWORD *)(v171 & 0xFFFFFFFF8);
          v246 = v247 << 36;
        }
        v171 = v246 | v249;
      }
      v274 = v171;
      v172 = *a6;
      if ((*a6 & 1) != 0)
      {
        v250 = *(_QWORD *)(v172 & 0xFFFFFFFF8);
        if ((v172 & 2) != 0
          || ((v251 = *(unsigned int *)((v172 & 0xFFFFFFFF8) + 8), (_DWORD)v251 != 0x3FFFFFFF)
            ? (v252 = (_DWORD)v251 == -1)
            : (v252 = 1),
              v252))
        {
          v253 = 2;
        }
        else if (v251 >> 28)
        {
          v262 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v262 = v250;
          *(_DWORD *)(v262 + 8) = v251;
          v253 = 1;
          v250 = v262;
        }
        else
        {
          v253 = *(_QWORD *)(v172 & 0xFFFFFFFF8);
          v250 = v251 << 36;
        }
        v172 = v250 | v253;
      }
      v273 = v172;
      if (JSC::isSameStyledCodeOrigin(&v274, &v273, (uint64_t)v13, v14, v15, v16, v17, v18))
      {
        v173 = *(_WORD *)(a4 + 129);
        if ((v273 & 1) != 0 && (v273 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v273 & 0xFFFFFFFF8, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        if ((v274 & 1) != 0 && (v274 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v274 & 0xFFFFFFFF8, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        if ((v173 & 2) == 0)
        {
          v174 = 3;
LABEL_244:
          *(_DWORD *)a1 = v174;
          *(_QWORD *)(a1 + 8) = a1 + 24;
          *(_QWORD *)(a1 + 16) = 1;
          goto LABEL_170;
        }
      }
      else
      {
        if ((v273 & 1) != 0 && (v273 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v273 & 0xFFFFFFFF8, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        if ((v274 & 1) != 0 && (v274 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v274 & 0xFFFFFFFF8, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
      }
    }
    v23 = v21[3];
  }
  if (!v23)
  {
LABEL_125:
    WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v276, HIDWORD(v277[0]), v13, v14, v15, v16, v17, v18);
    *(_DWORD *)a1 = v275[0];
    v13 = (JSC::PutByVariant *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 1;
    v109 = v276;
    if (v276 == v22)
    {
      WTF::VectorTypeOperations<JSC::PutByVariant>::move(v22, (JSC::PutByVariant *)((char *)v22 + 64 * (unint64_t)HIDWORD(v277[0])), v13, v14, v15, v16, v17, v18);
    }
    else
    {
      v276 = v22;
      *(_QWORD *)(a1 + 8) = v109;
      *(_DWORD *)(a1 + 16) = v277[0];
    }
    v110 = HIDWORD(v277[0]);
    HIDWORD(v277[0]) = 0;
    *(_DWORD *)(a1 + 20) = v110;
    goto LABEL_128;
  }
  v26 = 0;
  while (1)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v21 + 8 * v26);
    if (*(_BYTE *)(v27 + 5))
    {
      if (v267 < 3)
        goto LABEL_166;
      v208 = v22;
      if (v267 != 3)
      {
        if (v267 == 4)
          goto LABEL_166;
        if (v267 != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F84F8);
        }
      }
      goto LABEL_317;
    }
    if (*(_QWORD *)(v27 + 24))
    {
      if (v267 < 3)
        goto LABEL_166;
      v208 = v22;
      if (v267 != 3)
      {
        if (v267 == 4)
          goto LABEL_166;
        if (v267 != 5)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F8EDCLL);
        }
      }
LABEL_317:
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_QWORD *)(a1 + 16) = 1;
      if ((*(_WORD *)(v268 + 129) & 2) != 0)
        v140 = 7;
      else
        v140 = 6;
      v22 = v208;
LABEL_169:
      *(_DWORD *)a1 = v140;
      goto LABEL_170;
    }
    v28 = *(unsigned __int8 *)(v27 + 4);
    if (v28 != 2)
      break;
    v29 = *(_DWORD *)(v27 + 12);
    if (v29)
      v30 = 16 * (v29 & 0xFFFFFFFE);
    else
      v30 = 0;
    v31 = *(_QWORD *)(v27 + 32);
    if (v31)
    {
      v32 = v21;
      if ((v31 & 1) != 0)
        v33 = (_DWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
      else
        v33 = *(_DWORD **)(v31 + 8);
    }
    else
    {
      v32 = v21;
      v33 = 0;
    }
    v34 = v22;
    v35 = JSC::Structure::getConcurrently(v30, v33, v271, v14, v15, v16, v17, v18);
    if (v35 == -1)
    {
      if (v267 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F9080);
      }
      goto LABEL_455;
    }
    v43 = v35;
    v44 = *(unsigned int **)(v27 + 16);
    if (v44)
    {
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
      v46 = v44[1];
      if ((_DWORD)v46)
      {
        v47 = 24 * v46;
        v48 = v44 + 4;
        while ((*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFLL) != 0)
        {
          v49 = 16 * (**((_DWORD **)v48 - 1) & 0xFFFFFFFE);
          JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)v48, (void *)1, v49, 0, v39, v40, v41, v42);
          if (!v50)
            break;
          v51 = *((unsigned __int8 *)v48 + 6);
          if (v51 <= 6)
          {
            if (((1 << v51) & 0x63) != 0)
            {
              if ((*(_WORD *)(v49 + 12) & 0x10) != 0)
                break;
            }
            else if (v51 == 2 && (*(_WORD *)(v49 + 12) & 0x90) != 0)
            {
              break;
            }
          }
          v48 += 6;
          v47 -= 24;
          if (!v47)
            goto LABEL_45;
        }
      }
      if (v267 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F8F34);
      }
      JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
      v70 = 1;
      v22 = v34;
      v21 = v32;
    }
    else
    {
LABEL_45:
      v60 = *(unsigned __int8 *)(v27 + 4);
      if (v60 <= 0x20 && ((1 << v60) & 0x100000014) != 0)
      {
        v61 = *(_DWORD *)(v27 + 12);
        v62 = 16 * (v61 & 0xFFFFFFFE);
        v63 = *(_QWORD *)(v62 + 0x40);
        v22 = v34;
        if (v63 && *(_BYTE *)(v63 + 5) != 1)
        {
          v108 = *(_DWORD *)(v63 + 80);
          if (v108)
            v63 = 16 * (v108 & 0xFFFFFFFE);
          else
            v63 = 0;
        }
      }
      else
      {
        v61 = *(_DWORD *)(v27 + 12);
        v62 = 16 * (v61 & 0xFFFFFFFE);
        if (v61)
          v63 = 16 * (v61 & 0xFFFFFFFE);
        else
          v63 = 0;
        v22 = v34;
      }
      v64 = *(_QWORD *)(v27 + 32);
      v269 = v63;
      if (v61)
        v65 = v62;
      else
        v65 = 0;
      memset(&v271[8], 0, 48);
      v272 = v64;
      *(_QWORD *)v271 = 0xFFFFFFFF00000002;
      if ((v63 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v271[8], &v269);
      else
        *(_QWORD *)&v271[8] = v63 & 0xFFFFFFFFFFFFFFFDLL;
      *(_QWORD *)&v271[16] = v65;
      if (v44)
      {
        do
          v66 = __ldaxr(v44);
        while (__stlxr(v66 + 1, v44));
      }
      v67 = *(unsigned int **)&v271[24];
      *(_QWORD *)&v271[24] = v44;
      if (v67)
      {
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          atomic_store(1u, v67);
          WTF::fastFree((unint64_t)v67, v36, v37, v38, v39, v40, v41, v42);
        }
      }
      *(_DWORD *)&v271[4] = v43;
      if ((v269 & 1) != 0)
        WTF::fastFree(v269 & 0xFFFFFFFFFFFFFFFCLL, v36, v37, v38, v39, v40, v41, v42);
      if ((JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v276, (unint64_t)v271, v37, v38, v39, v40, v41, v42) & 1) != 0)
      {
        v70 = 11;
      }
      else
      {
        if (v267 >= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F8FF4);
        }
        JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
        v70 = 1;
        v22 = v34;
      }
      v71 = *(_QWORD *)&v271[48];
      *(_QWORD *)&v271[48] = 0;
      v21 = v32;
      if (v71)
        WTF::fastFree(v71, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
      v72 = *(_QWORD *)&v271[32];
      *(_QWORD *)&v271[32] = 0;
      if (v72)
      {
        v73 = *(_QWORD *)v72;
        if (v72 + 16 != *(_QWORD *)v72 && v73 != 0)
        {
          *(_QWORD *)v72 = 0;
          *(_DWORD *)(v72 + 8) = 0;
          WTF::fastFree(v73, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        }
        WTF::fastFree(v72, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
      }
      v75 = *(unsigned int **)&v271[24];
      *(_QWORD *)&v271[24] = 0;
      if (v75)
      {
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          atomic_store(1u, v75);
          WTF::fastFree((unint64_t)v75, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        }
      }
      if ((v271[8] & 1) != 0)
        WTF::fastFree(*(_QWORD *)&v271[8] & 0xFFFFFFFFFFFFFFFCLL, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
    }
    if (v44)
    {
      do
      {
        v78 = __ldaxr(v44);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v44));
      if (!v79)
      {
        atomic_store(1u, v44);
        WTF::fastFree((unint64_t)v44, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
      }
    }
    if (v70 != 11)
      goto LABEL_170;
LABEL_86:
    if (++v26 >= v21[3])
      goto LABEL_125;
  }
  switch(*(_BYTE *)(v27 + 4))
  {
    case 7:
      v80 = *(_DWORD *)(v27 + 12);
      if (v80)
        v81 = 16 * (v80 & 0xFFFFFFFE);
      else
        v81 = 0;
      v82 = *(_QWORD *)(v27 + 32);
      if (v82)
      {
        if ((v82 & 1) != 0)
          v83 = (_DWORD *)(v82 & 0xFFFFFFFFFFFFFFFELL);
        else
          v83 = *(_DWORD **)(v82 + 8);
      }
      else
      {
        v83 = 0;
      }
      v84 = JSC::Structure::getConcurrently(v81, v83, v271, v14, v15, v16, v17, v18);
      if (v84 != -1)
      {
        v91 = *(_QWORD *)(v27 + 32);
        memset(&v271[16], 0, 40);
        v272 = v91;
        *(_QWORD *)&v271[8] = v81;
        *(_DWORD *)v271 = 1;
        *(_DWORD *)&v271[4] = v84;
        v92 = JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v276, (unint64_t)v271, v85, v86, v87, v88, v89, v90);
        if ((v92 & 1) == 0)
        {
          if (v267 >= 6)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F8F94);
          }
          JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
        }
        v93 = *(_QWORD *)&v271[48];
        *(_QWORD *)&v271[48] = 0;
        if (v93)
          WTF::fastFree(v93, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        v94 = *(_QWORD *)&v271[32];
        *(_QWORD *)&v271[32] = 0;
        if (v94)
        {
          v138 = *(_QWORD *)v94;
          if (v94 + 16 != *(_QWORD *)v94 && v138)
          {
            *(_QWORD *)v94 = 0;
            *(_DWORD *)(v94 + 8) = 0;
            WTF::fastFree(v138, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          }
          WTF::fastFree(v94, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        }
        v95 = *(unsigned int **)&v271[24];
        *(_QWORD *)&v271[24] = 0;
        if (v95)
        {
          do
          {
            v96 = __ldaxr(v95);
            v97 = --v96 == 0;
          }
          while (__stlxr(v96, v95));
LABEL_102:
          if (v97)
          {
            atomic_store(1u, v95);
            WTF::fastFree((unint64_t)v95, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          }
        }
        goto LABEL_104;
      }
      if (v267 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F9060);
      }
LABEL_455:
      JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
LABEL_170:
      if (HIDWORD(v277[0]))
        WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v276, (_QWORD *)v276 + 8 * (unint64_t)HIDWORD(v277[0]), (uint64_t)v13, v14, v15, v16, v17, v18);
LABEL_128:
      v111 = v276;
      if (v22 != v276)
      {
        if (v276)
        {
          v276 = 0;
          LODWORD(v277[0]) = 0;
          WTF::fastFree((unint64_t)v111, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        }
      }
      return;
    case 8:
    case 9:
    case 0xA:
    case 0xC:
    case 0xD:
      goto LABEL_165;
    case 0xB:
      v175 = *(_DWORD *)(v27 + 12);
      if (v175)
        v176 = 16 * (v175 & 0xFFFFFFFE);
      else
        v176 = 0;
      v177 = *(_QWORD *)(v27 + 32);
      if (v177)
      {
        if ((v177 & 1) != 0)
          v178 = (_DWORD *)(v177 & 0xFFFFFFFFFFFFFFFELL);
        else
          v178 = *(_DWORD **)(v177 + 8);
      }
      else
      {
        v178 = 0;
      }
      JSC::ComplexGetStatus::computeFor(v176, (unsigned int **)(v27 + 16), v178, v14, v15, v16, v17, v18, &v269);
      if ((_DWORD)v269 == 2)
      {
        v186 = WTF::fastMalloc((WTF *)0x20);
        v187 = (_QWORD *)(v186 + 16);
        *(_QWORD *)v186 = v186 + 16;
        *(_QWORD *)(v186 + 8) = 1;
        *(_DWORD *)(v186 + 24) = 0;
        v188 = *(_QWORD *)(v268 + 72);
        if (!v188)
          goto LABEL_310;
        v181 = v264;
        if ((*(_WORD *)(v268 + 129) & 0x200) != 0)
        {
          while (*(_QWORD *)(v188 + 72) != v27)
          {
            v188 = *(_QWORD *)(v188 + 88);
            if (!v188)
              goto LABEL_310;
          }
          if (*(_DWORD *)(v188 + 4))
          {
            v180 = v188 + 96;
            goto LABEL_302;
          }
          v240 = *(_QWORD *)(v188 + 64);
          if (v240)
          {
            if ((*(_BYTE *)(v240 + 24) & 0xFE) == 4)
            {
              v241 = *(unsigned int **)(v240 + 104);
              if (v241)
              {
                if (*v241)
                {
LABEL_394:
                  v180 = *((_QWORD *)v241 + 1);
                  v181 = v264;
                  if (!v180)
                    goto LABEL_310;
LABEL_302:
                  v264 = v181 & 0xFFFFFFFFFFFF0000 | v265;
                  JSC::CallLinkStatus::computeFor(v180, v264, 0, v183, v184, v185, (unint64_t)v271);
                  v200 = *(_QWORD *)v186;
                  if (*(_QWORD **)v186 != v187)
                  {
                    if (v200)
                    {
                      *(_QWORD *)v186 = 0;
                      *(_DWORD *)(v186 + 8) = 0;
                      WTF::fastFree(v200, v179, v180, v181, v182, v183, v184, v185);
                    }
                    *(_QWORD *)v186 = v187;
                  }
                  v201 = *(_QWORD *)v271;
                  if (*(_BYTE **)v271 == &v271[16])
                  {
                    if (*(_DWORD *)&v271[12])
                    {
                      v209 = 8 * *(unsigned int *)&v271[12];
                      v210 = (uint64_t *)&v271[16];
                      do
                      {
                        v211 = *v210++;
                        *v187++ = v211;
                        v209 -= 8;
                      }
                      while (v209);
                    }
                  }
                  else
                  {
                    *(_QWORD *)v271 = &v271[16];
                    *(_QWORD *)v186 = v201;
                  }
                  *(_DWORD *)(v186 + 8) = *(_DWORD *)&v271[8];
                  v202 = *(_DWORD *)&v271[12];
                  *(_DWORD *)&v271[12] = 0;
                  *(_DWORD *)(v186 + 12) = v202;
                  *(_DWORD *)(v186 + 24) = *(_DWORD *)&v271[24];
                  v203 = *(_QWORD *)v271;
                  if (&v271[16] != *(_BYTE **)v271 && *(_QWORD *)v271 != 0)
                  {
                    *(_QWORD *)v271 = 0;
                    *(_DWORD *)&v271[8] = 0;
                    WTF::fastFree(v203, v179, v180, v181, v182, v183, v184, v185);
                  }
                }
              }
            }
          }
        }
        else
        {
          if (v26 < *(unsigned int *)(v188 + 4))
          {
            v180 = v188 + 80 * v26 + 96;
            v181 = v264;
            goto LABEL_302;
          }
          v257 = *(_QWORD *)(v188 + 64);
          if (v257)
          {
            if ((*(_BYTE *)(v257 + 24) & 0xFE) == 4)
            {
              v258 = *(unsigned int **)(v257 + 104);
              if (v258)
              {
                if (v26 < *v258)
                {
                  v241 = &v258[2 * v26];
                  goto LABEL_394;
                }
              }
            }
          }
        }
LABEL_310:
        v205 = *(_QWORD *)(v27 + 32);
        v206 = HIDWORD(v269);
        memset(&v271[16], 0, 40);
        v272 = v205;
        *(_QWORD *)v271 = 0xFFFFFFFF00000003;
        *(_QWORD *)&v271[8] = v176;
        v207 = v270;
        if (v270)
        {
          do
            v103 = __ldaxr(v207);
          while (__stlxr(v103 + 1, v207));
          v189 = *(unsigned int **)&v271[24];
          *(_QWORD *)&v271[24] = v207;
          if (v189)
          {
            do
            {
              v104 = __ldaxr(v189);
              v105 = v104 - 1;
            }
            while (__stlxr(v105, v189));
            if (!v105)
            {
              atomic_store(1u, v189);
              WTF::fastFree((unint64_t)v189, v179, v180, v181, v182, v183, v184, v185);
            }
          }
        }
        else
        {
          *(_QWORD *)&v271[24] = 0;
        }
        *(_DWORD *)&v271[4] = v206;
        v190 = *(_QWORD *)&v271[32];
        *(_QWORD *)&v271[32] = v186;
        if (v190)
        {
          v191 = *(_QWORD *)v190;
          if (v190 + 16 != *(_QWORD *)v190 && v191 != 0)
          {
            *(_QWORD *)v190 = 0;
            *(_DWORD *)(v190 + 8) = 0;
            WTF::fastFree(v191, v179, v180, v181, v182, v183, v184, v185);
          }
          WTF::fastFree(v190, v179, v180, v181, v182, v183, v184, v185);
        }
        v193 = JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v276, (unint64_t)v271, v180, v181, v182, v183, v184, v185);
        if ((v193 & 1) != 0)
        {
          v165 = 12;
        }
        else
        {
          if (v267 >= 6)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F8FD4);
          }
          JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
          v165 = 1;
        }
        v194 = *(_QWORD *)&v271[48];
        *(_QWORD *)&v271[48] = 0;
        if (v194)
          WTF::fastFree(v194, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        v195 = *(_QWORD *)&v271[32];
        *(_QWORD *)&v271[32] = 0;
        if (v195)
        {
          v196 = *(_QWORD *)v195;
          if (v195 + 16 != *(_QWORD *)v195 && v196 != 0)
          {
            *(_QWORD *)v195 = 0;
            *(_DWORD *)(v195 + 8) = 0;
            WTF::fastFree(v196, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          }
          WTF::fastFree(v195, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        }
        v198 = *(unsigned int **)&v271[24];
        *(_QWORD *)&v271[24] = 0;
        if (v198)
        {
          do
          {
            v106 = __ldaxr(v198);
            v107 = v106 - 1;
          }
          while (__stlxr(v107, v198));
          if (!v107)
          {
            atomic_store(1u, v198);
            WTF::fastFree((unint64_t)v198, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          }
        }
        if ((v271[8] & 1) != 0)
          WTF::fastFree(*(_QWORD *)&v271[8] & 0xFFFFFFFFFFFFFFFCLL, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        if (v193)
        {
LABEL_297:
          v165 = 11;
          goto LABEL_298;
        }
        goto LABEL_298;
      }
      if ((_DWORD)v269)
      {
        if ((_DWORD)v269 != 1)
          goto LABEL_297;
        if (v267 >= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1981F8F74);
        }
        JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
        v165 = 1;
      }
      else
      {
        v165 = 10;
      }
LABEL_298:
      v199 = v270;
      v270 = 0;
      if (v199)
      {
        do
        {
          v101 = __ldaxr(v199);
          v102 = v101 - 1;
        }
        while (__stlxr(v102, v199));
        if (!v102)
        {
          atomic_store(1u, v199);
LABEL_404:
          WTF::fastFree((unint64_t)v199, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        }
      }
LABEL_177:
      if (v165 != 11 && v165 != 10)
        goto LABEL_170;
      goto LABEL_86;
    case 0xE:
      v174 = 6;
      goto LABEL_244;
    case 0xF:
      v141 = *(unsigned int **)(v27 + 16);
      if (!v141)
        goto LABEL_182;
      do
        v52 = __ldaxr(v141);
      while (__stlxr(v52 + 1, v141));
      v142 = v141[1];
      if (!(_DWORD)v142)
      {
        v165 = 10;
        goto LABEL_37;
      }
      v100 = 24 * v142;
      v99 = (unint64_t *)(v141 + 4);
      do
      {
        if ((*v99 & 0xFFFFFFFFFFFFFFLL) == 0
          || (JSC::PropertyCondition::isStillValid(v99, (void *)1, 16 * (*(_DWORD *)*(v99 - 1) & 0xFFFFFFFE), (const JSC::PropertyTable *)*(v99 - 1), v15, v16, v17, v18), (v98 & 1) == 0))
        {
          v165 = 10;
          goto LABEL_226;
        }
        v99 += 3;
        v100 -= 24;
      }
      while (v100);
      v143 = *(unsigned __int8 *)(v27 + 4);
      if (v143 > 0x20 || ((1 << v143) & 0x100000014) == 0)
      {
LABEL_182:
        v144 = *(_DWORD *)(v27 + 12);
        goto LABEL_183;
      }
      v145 = *(_QWORD *)(16 * (*(_DWORD *)(v27 + 12) & 0xFFFFFFFE) + 0x40);
      if (v145 && *(_BYTE *)(v145 + 5) != 1)
      {
        v144 = *(_DWORD *)(v145 + 80);
LABEL_183:
        if (v144)
          v145 = 16 * (v144 & 0xFFFFFFFE);
        else
          v145 = 0;
      }
      AlternateBase = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v27);
      if (AlternateBase)
        v145 = 16 * (*AlternateBase & 0xFFFFFFFE);
      if (*(_QWORD *)(v145 + 40) == *(_QWORD *)(v266 + 8))
      {
        v154 = *(_QWORD *)(v27 + 56);
        if (*(_BYTE *)(v27 + 80))
        {
          *(_OWORD *)v271 = *(_OWORD *)(v27 + 64);
          v155 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
          *v155 = *(_OWORD *)v271;
        }
        else
        {
          v155 = 0;
        }
        v275[0] = 2;
        v156 = *(_QWORD *)(v27 + 32);
        v157 = *(unsigned __int8 *)(v27 + 4);
        v158 = v157 > 0x20;
        v159 = (1 << v157) & 0x100000014;
        if (v158 || v159 == 0)
        {
          v161 = *(_DWORD *)(v27 + 12);
LABEL_197:
          if (v161)
            v162 = 16 * (v161 & 0xFFFFFFFE);
          else
            v162 = 0;
        }
        else
        {
          v162 = *(_QWORD *)(16 * (*(_DWORD *)(v27 + 12) & 0xFFFFFFFE) + 0x40);
          if (v162 && *(_BYTE *)(v162 + 5) != 1)
          {
            v161 = *(_DWORD *)(v162 + 80);
            goto LABEL_197;
          }
        }
        v269 = v162;
        memset(&v271[8], 0, 48);
        v272 = v156;
        *(_QWORD *)v271 = 0xFFFFFFFF00000004;
        if ((v162 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v271[8], &v269);
        else
          *(_QWORD *)&v271[8] = v162 & 0xFFFFFFFFFFFFFFFDLL;
        if (v141)
        {
          do
            v55 = __ldaxr(v141);
          while (__stlxr(v55 + 1, v141));
        }
        v163 = *(unsigned int **)&v271[24];
        *(_QWORD *)&v271[24] = v141;
        if (v163)
        {
          do
          {
            v56 = __ldaxr(v163);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v163));
          if (!v57)
          {
            atomic_store(1u, v163);
            WTF::fastFree((unint64_t)v163, v147, v148, v149, v150, v151, v152, v153);
          }
        }
        *(_DWORD *)&v271[4] = -1;
        v164 = *(_QWORD *)&v271[48];
        *(_QWORD *)&v271[40] = v154;
        *(_QWORD *)&v271[48] = v155;
        if (v164)
          WTF::fastFree(v164, v147, v148, v149, v150, v151, v152, v153);
        if ((v269 & 1) != 0)
          WTF::fastFree(v269 & 0xFFFFFFFFFFFFFFFCLL, v147, v148, v149, v150, v151, v152, v153);
        if ((JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v276, (unint64_t)v271, v148, v149, v150, v151, v152, v153) & 1) != 0)
        {
          v165 = 11;
        }
        else
        {
          if (v267 >= 6)
          {
            __break(0xC471u);
            JUMPOUT(0x1981F8FB4);
          }
          JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
          v165 = 1;
        }
        v166 = *(_QWORD *)&v271[48];
        *(_QWORD *)&v271[48] = 0;
        if (v166)
          WTF::fastFree(v166, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        v167 = *(_QWORD *)&v271[32];
        *(_QWORD *)&v271[32] = 0;
        if (v167)
        {
          v168 = *(_QWORD *)v167;
          if (v167 + 16 != *(_QWORD *)v167 && v168)
          {
            *(_QWORD *)v167 = 0;
            *(_DWORD *)(v167 + 8) = 0;
            WTF::fastFree(v168, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          }
          WTF::fastFree(v167, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        }
        v169 = *(unsigned int **)&v271[24];
        *(_QWORD *)&v271[24] = 0;
        if (v169)
        {
          do
          {
            v58 = __ldaxr(v169);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v169));
          if (!v59)
          {
            atomic_store(1u, v169);
            WTF::fastFree((unint64_t)v169, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          }
        }
        if ((v271[8] & 1) != 0)
          WTF::fastFree(*(_QWORD *)&v271[8] & 0xFFFFFFFFFFFFFFFCLL, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
        goto LABEL_226;
      }
      if (v267 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F8F54);
      }
      JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
      v165 = 1;
LABEL_226:
      if (!v141)
        goto LABEL_177;
      do
      {
LABEL_37:
        v53 = __ldaxr(v141);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v141));
      if (v54)
        goto LABEL_177;
      atomic_store(1u, v141);
      v199 = v141;
      goto LABEL_404;
    default:
      if (v28 != 27)
      {
LABEL_165:
        if (v267 >= 3)
        {
          if (v267 != 3)
          {
            if (v267 == 4)
              goto LABEL_166;
            if (v267 != 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F8DC8);
            }
          }
          *(_QWORD *)(a1 + 8) = a1 + 24;
          *(_QWORD *)(a1 + 16) = 1;
          v139 = (*(_WORD *)(v268 + 129) & 2) == 0;
          v140 = 6;
LABEL_167:
          if (!v139)
            ++v140;
          goto LABEL_169;
        }
LABEL_166:
        *(_QWORD *)(a1 + 8) = a1 + 24;
        *(_QWORD *)(a1 + 16) = 1;
        v139 = (*(_WORD *)(v268 + 129) & 2) == 0;
        v140 = 4;
        goto LABEL_167;
      }
      v219 = WTF::fastMalloc((WTF *)0x20);
      v220 = (_QWORD *)(v219 + 16);
      *(_QWORD *)v219 = v219 + 16;
      *(_QWORD *)(v219 + 8) = 1;
      *(_DWORD *)(v219 + 24) = 0;
      v221 = *(_QWORD *)(v268 + 72);
      if (!v221)
        goto LABEL_357;
      v214 = v263;
      if ((*(_WORD *)(v268 + 129) & 0x200) != 0)
      {
        while (*(_QWORD *)(v221 + 72) != v27)
        {
          v221 = *(_QWORD *)(v221 + 88);
          if (!v221)
            goto LABEL_357;
        }
        if (*(_DWORD *)(v221 + 4))
        {
          v213 = v221 + 96;
LABEL_349:
          v263 = v214 & 0xFFFFFFFFFFFF0000 | v265;
          JSC::CallLinkStatus::computeFor(v213, v263, 0, v216, v217, v218, (unint64_t)v271);
          v222 = *(_QWORD *)v219;
          if (*(_QWORD **)v219 != v220)
          {
            if (v222)
            {
              *(_QWORD *)v219 = 0;
              *(_DWORD *)(v219 + 8) = 0;
              WTF::fastFree(v222, v212, v213, v214, v215, v216, v217, v218);
            }
            *(_QWORD *)v219 = v220;
          }
          v223 = *(_QWORD *)v271;
          if (*(_BYTE **)v271 == &v271[16])
          {
            if (*(_DWORD *)&v271[12])
            {
              v237 = 8 * *(unsigned int *)&v271[12];
              v238 = (uint64_t *)&v271[16];
              do
              {
                v239 = *v238++;
                *v220++ = v239;
                v237 -= 8;
              }
              while (v237);
            }
          }
          else
          {
            *(_QWORD *)v271 = &v271[16];
            *(_QWORD *)v219 = v223;
          }
          *(_DWORD *)(v219 + 8) = *(_DWORD *)&v271[8];
          v224 = *(_DWORD *)&v271[12];
          *(_DWORD *)&v271[12] = 0;
          *(_DWORD *)(v219 + 12) = v224;
          *(_DWORD *)(v219 + 24) = *(_DWORD *)&v271[24];
          v225 = *(_QWORD *)v271;
          if (&v271[16] != *(_BYTE **)v271 && *(_QWORD *)v271 != 0)
          {
            *(_QWORD *)v271 = 0;
            *(_DWORD *)&v271[8] = 0;
            WTF::fastFree(v225, v212, v213, v214, v215, v216, v217, v218);
          }
LABEL_357:
          v227 = *(_QWORD *)(v27 + 32);
          v228 = *(unsigned __int8 *)(v27 + 4);
          v158 = v228 > 0x20;
          v229 = (1 << v228) & 0x100000014;
          if (v158 || v229 == 0)
          {
            v231 = *(_DWORD *)(v27 + 12);
            if (v231)
              v232 = 16 * (v231 & 0xFFFFFFFE);
            else
              v232 = 0;
          }
          else
          {
            v232 = *(_QWORD *)(16 * (*(_DWORD *)(v27 + 12) & 0xFFFFFFFE) + 0x40);
            if (v232 && *(_BYTE *)(v232 + 5) != 1)
            {
              v254 = *(_DWORD *)(v232 + 80);
              if (v254)
                v232 = 16 * (v254 & 0xFFFFFFFE);
              else
                v232 = 0;
            }
          }
          v269 = v232;
          memset(&v271[8], 0, 48);
          v272 = v227;
          *(_QWORD *)v271 = -4294967291;
          if ((v232 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v271[8], &v269);
            v243 = *(_QWORD *)&v271[32];
            *(_QWORD *)&v271[32] = v219;
            if (v243)
            {
              v244 = *(_QWORD *)v243;
              if (v243 + 16 != *(_QWORD *)v243 && v244 != 0)
              {
                *(_QWORD *)v243 = 0;
                *(_DWORD *)(v243 + 8) = 0;
                WTF::fastFree(v244, v212, v213, v214, v215, v216, v217, v218);
              }
              WTF::fastFree(v243, v212, v213, v214, v215, v216, v217, v218);
            }
          }
          else
          {
            *(_QWORD *)&v271[8] = v232 & 0xFFFFFFFFFFFFFFFDLL;
            *(_QWORD *)&v271[32] = v219;
          }
          if ((v269 & 1) != 0)
            WTF::fastFree(v269 & 0xFFFFFFFFFFFFFFFCLL, v212, v213, v214, v215, v216, v217, v218);
          v92 = JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v276, (unint64_t)v271, v213, v214, v215, v216, v217, v218);
          if ((v92 & 1) == 0)
          {
            if (v267 >= 6)
            {
              __break(0xC471u);
              JUMPOUT(0x1981F9014);
            }
            JSC::PutByStatus::PutByStatus(a1, (0x50405040404uLL >> (8 * v267)), v268);
          }
          v233 = *(_QWORD *)&v271[48];
          *(_QWORD *)&v271[48] = 0;
          if (v233)
            WTF::fastFree(v233, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          v234 = *(_QWORD *)&v271[32];
          *(_QWORD *)&v271[32] = 0;
          if (v234)
          {
            v235 = *(_QWORD *)v234;
            if (v234 + 16 != *(_QWORD *)v234 && v235)
            {
              *(_QWORD *)v234 = 0;
              *(_DWORD *)(v234 + 8) = 0;
              WTF::fastFree(v235, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
            }
            WTF::fastFree(v234, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          }
          v95 = *(unsigned int **)&v271[24];
          *(_QWORD *)&v271[24] = 0;
          if (v95)
          {
            do
            {
              v236 = __ldaxr(v95);
              v97 = --v236 == 0;
            }
            while (__stlxr(v236, v95));
            goto LABEL_102;
          }
LABEL_104:
          if ((v271[8] & 1) != 0)
            WTF::fastFree(*(_QWORD *)&v271[8] & 0xFFFFFFFFFFFFFFFCLL, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          if ((v92 & 1) == 0)
            goto LABEL_170;
          goto LABEL_86;
        }
        v255 = *(_QWORD *)(v221 + 64);
        if (!v255)
          goto LABEL_357;
        if ((*(_BYTE *)(v255 + 24) & 0xFE) != 4)
          goto LABEL_357;
        v256 = *(unsigned int **)(v255 + 104);
        if (!v256 || !*v256)
          goto LABEL_357;
      }
      else
      {
        if (v26 < *(unsigned int *)(v221 + 4))
        {
          v213 = v221 + 80 * v26 + 96;
          v214 = v263;
          goto LABEL_349;
        }
        v259 = *(_QWORD *)(v221 + 64);
        if (!v259)
          goto LABEL_357;
        if ((*(_BYTE *)(v259 + 24) & 0xFE) != 4)
          goto LABEL_357;
        v260 = *(unsigned int **)(v259 + 104);
        if (!v260 || v26 >= *v260)
          goto LABEL_357;
        v256 = &v260[2 * v26];
      }
      v213 = *((_QWORD *)v256 + 1);
      v214 = v263;
      if (!v213)
        goto LABEL_357;
      goto LABEL_349;
  }
}

void JSC::PutByStatus::computeFor(uint64_t a1@<X0>, JSC::PutByVariant *a2@<X1>, uint64_t a3@<X2>, uint64_t ***a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 hasBadCacheExitSite;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t **v33;
  unsigned __int8 *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  int v49;
  const JSC::PutByVariant *v50;
  JSC::PutByVariant *v51;
  const JSC::PutByVariant *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  JSC::PutByVariant *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  WTF *v88;
  int v89;
  unsigned int v90;
  _BYTE v91[64];
  int v92;
  WTF *v93;
  unint64_t v94;
  _BYTE v95[64];
  uint64_t ***v96[7];
  uint64_t v97;
  _QWORD v98[5];
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  unsigned __int16 v102;
  unsigned int v103;
  uint64_t v104;
  char v105[8];
  unsigned __int8 *v106;
  char v107;
  char v108;
  uint64_t v109;

  v12 = a1;
  v109 = *MEMORY[0x1E0C80C00];
  v104 = a1;
  v14 = (unint64_t)*a4;
  if ((*a4 & 2) != 0)
  {
    LODWORD(v14) = -1;
  }
  else if ((v14 & 1) != 0)
  {
    LODWORD(v14) = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v14 >>= 36;
  }
  v103 = v14;
  v15 = v14;
  v16 = JSC::CallLinkStatus::computeExitSiteData(a1, v14, a3, (uint64_t)a4, a5, a6, a7, a8);
  v102 = v16;
  hasBadCacheExitSite = JSC::hasBadCacheExitSite(v12, v15, v17, v18, v19, v20, v21, v22);
  v101 = hasBadCacheExitSite;
  v30 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v30)
  {
LABEL_59:
    JSC::PutByStatus::computeFor(a9, v12, a2, v15, hasBadCacheExitSite, v16, v28, v29);
    return;
  }
  v31 = *(uint64_t **)a3;
  v84 = *(_QWORD *)a3 + 8 * v30;
  while (1)
  {
    v32 = *v31;
    v100 = *v31;
    v33 = *a4;
    if ((*a4 & 1) != 0)
    {
      v70 = *(_QWORD *)((unint64_t)v33 & 0xFFFFFFFF8);
      if ((v33 & 2) != 0
        || ((v71 = *(unsigned int *)(((unint64_t)v33 & 0xFFFFFFFF8) + 8), (_DWORD)v71 != 0x3FFFFFFF)
          ? (v72 = (_DWORD)v71 == -1)
          : (v72 = 1),
            v72))
      {
        v73 = 2;
      }
      else if (v71 >> 28)
      {
        v82 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v82 = v70;
        *(_DWORD *)(v82 + 8) = v71;
        v73 = 1;
        v70 = v82;
      }
      else
      {
        v73 = *(_QWORD *)((unint64_t)v33 & 0xFFFFFFFF8);
        v70 = v71 << 36;
      }
      v74 = v70 | v73;
      v97 = v74;
      JSC::ICStatusContext::get(v32, &v97, v24, v25, v26, v27, v28, v29, (uint64_t)v98);
      if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v74 & 0xFFFFFFFF8, v75, v76, v25, v26, v27, v28, v29);
    }
    else
    {
      v97 = (uint64_t)*a4;
      JSC::ICStatusContext::get(v32, &v97, v24, v25, v26, v27, v28, v29, (uint64_t)v98);
    }
    v96[0] = (uint64_t ***)&v100;
    v96[1] = a4;
    v96[2] = (uint64_t ***)&v104;
    v96[3] = (uint64_t ***)a2;
    v96[4] = (uint64_t ***)&v103;
    v96[5] = (uint64_t ***)&v101;
    v96[6] = (uint64_t ***)&v102;
    if (v98[0])
      break;
LABEL_56:
    v24 = v99;
    if (v99)
    {
      JSC::PutByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(a9, v96, v99, v25, v26, v27, v28, v29);
      return;
    }
    if (++v31 == (uint64_t *)v84)
    {
      v12 = v104;
      v15 = v103;
      hasBadCacheExitSite = v101;
      v16 = v102;
      goto LABEL_59;
    }
  }
  v92 = 0;
  v93 = (WTF *)v95;
  v94 = 1;
  v34 = (unsigned __int8 *)(*(_QWORD *)(v100 + 8) + 16);
  v108 = 0;
  v106 = v34;
  v107 = 1;
  if (__ldaxr(v34))
  {
    __clrex();
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v34);
    goto LABEL_12;
  }
  if (__stxr(1u, v34))
    goto LABEL_11;
LABEL_12:
  v108 = 1;
  v36 = *(_QWORD *)(v100 + 8);
  v37 = v98[0];
  v38 = v102;
  v39 = (unint64_t)*a4;
  if ((*a4 & 1) != 0)
  {
    v77 = a2;
    v78 = a9;
    v79 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    v40 = v85;
    if ((v39 & 2) != 0
      || (v80 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v80 == 0x3FFFFFFF)
      || (_DWORD)v80 == -1)
    {
      v81 = 2;
    }
    else if (v80 >> 28)
    {
      v83 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v83 = v79;
      *(_DWORD *)(v83 + 8) = v80;
      v81 = 1;
      v79 = v83;
      v40 = v85;
    }
    else
    {
      v81 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v39 = v79 | v81;
    a9 = v78;
    a2 = v77;
  }
  else
  {
    v40 = v85;
  }
  v86 = v39;
  v85 = v40 & 0xFFFFFFFFFFFF0000 | v38;
  JSC::PutByStatus::computeForStubInfo((uint64_t)&v87, (uint64_t)v105, v36, v37, v38, (uint64_t *)&v86);
  v92 = v87;
  if (HIDWORD(v94))
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v93, (_QWORD *)v93 + 8 * (unint64_t)HIDWORD(v94), v42, v25, v26, v27, v28, v29);
  v43 = v93;
  if (v93 != (WTF *)v95)
  {
    if (v93)
    {
      v93 = 0;
      LODWORD(v94) = 0;
      WTF::fastFree((unint64_t)v43, v41, v42, v25, v26, v27, v28, v29);
    }
    v93 = (WTF *)v95;
  }
  v44 = v88;
  if (v88 == (WTF *)v91)
  {
    if (v90)
    {
      v50 = (const JSC::PutByVariant *)&v91[64 * (unint64_t)v90];
      v51 = (JSC::PutByVariant *)v95;
      v52 = (const JSC::PutByVariant *)v91;
      do
      {
        JSC::PutByVariant::PutByVariant(v51, v52, v42, v25, v26, v27, v28, v29);
        v53 = *((_QWORD *)v52 + 6);
        *((_QWORD *)v52 + 6) = 0;
        if (v53)
          WTF::fastFree(v53, v41, v42, v25, v26, v27, v28, v29);
        v54 = *((_QWORD *)v52 + 4);
        *((_QWORD *)v52 + 4) = 0;
        if (v54)
        {
          v55 = *(_QWORD *)v54;
          if (v54 + 16 != *(_QWORD *)v54 && v55 != 0)
          {
            *(_QWORD *)v54 = 0;
            *(_DWORD *)(v54 + 8) = 0;
            WTF::fastFree(v55, v41, v42, v25, v26, v27, v28, v29);
          }
          WTF::fastFree(v54, v41, v42, v25, v26, v27, v28, v29);
        }
        v57 = (unsigned int *)*((_QWORD *)v52 + 3);
        *((_QWORD *)v52 + 3) = 0;
        if (v57)
        {
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            atomic_store(1u, v57);
            WTF::fastFree((unint64_t)v57, v41, v42, v25, v26, v27, v28, v29);
          }
        }
        v60 = *((_QWORD *)v52 + 1);
        if ((v60 & 1) != 0)
          WTF::fastFree(v60 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v25, v26, v27, v28, v29);
        v51 = (JSC::PutByVariant *)((char *)v51 + 64);
        v52 = (const JSC::PutByVariant *)((char *)v52 + 64);
      }
      while (v52 != v50);
      v45 = v88;
    }
    else
    {
      v45 = (WTF *)v91;
    }
    v46 = v89;
  }
  else
  {
    v88 = (WTF *)v91;
    v93 = v44;
    v46 = v89;
    v45 = (WTF *)v91;
    v89 = 1;
  }
  v47 = v90;
  v90 = 0;
  v94 = __PAIR64__(v47, v46);
  if (v91 != (_BYTE *)v45 && v45)
  {
    v88 = 0;
    v89 = 0;
    WTF::fastFree((unint64_t)v45, v41, v42, v25, v26, v27, v28, v29);
  }
  if ((v86 & 1) != 0 && (v86 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v86 & 0xFFFFFFFF8, v41, v42, v25, v26, v27, v28, v29);
  if (v108 && v107)
  {
    v48 = v106;
    v49 = __ldxr(v106);
    if (v49 == 1)
    {
      if (!__stlxr(0, v106))
        goto LABEL_52;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v48, 0, v42, v25, v26, v27, v28, v29);
  }
LABEL_52:
  if (!v92)
  {
    v61 = v93;
    if (HIDWORD(v94))
    {
      WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v93, (_QWORD *)v93 + 8 * (unint64_t)HIDWORD(v94), v42, v25, v26, v27, v28, v29);
      v61 = v93;
    }
    if (v95 != (_BYTE *)v61)
    {
      if (v61)
      {
        v93 = 0;
        LODWORD(v94) = 0;
        WTF::fastFree((unint64_t)v61, v41, v42, v25, v26, v27, v28, v29);
      }
    }
    goto LABEL_56;
  }
  JSC::PutByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(a9, v96, (uint64_t)&v92, v25, v26, v27, v28, v29);
  if (HIDWORD(v94))
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v93, (_QWORD *)v93 + 8 * (unint64_t)HIDWORD(v94), v63, v64, v65, v66, v67, v68);
  v69 = v93;
  if (v95 != (_BYTE *)v93 && v93)
  {
    v93 = 0;
    LODWORD(v94) = 0;
    WTF::fastFree((unint64_t)v69, v62, v63, v64, v65, v66, v67, v68);
  }
}

void JSC::PutByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(uint64_t a1, uint64_t ****a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  JSC::PutByVariant *v18;
  const JSC::PutByVariant *v19;
  uint64_t v20;
  JSC::PutByVariant *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v11 = **a2;
  v12 = (uint64_t)*a2[1];
  v13 = (uint64_t *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 1) == 0)
    goto LABEL_2;
  v37 = *v13;
  if ((v12 & 2) != 0
    || ((v38 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v38 != 0x3FFFFFFF) ? (v39 = v38 == -1) : (v39 = 1), v39))
  {
    v40 = 2;
  }
  else if (v38 >> 28)
  {
    v42 = *v13;
    v43 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v43 = v42;
    *(_DWORD *)(v43 + 8) = v38;
    v40 = 1;
    v37 = v43;
  }
  else
  {
    v40 = *v13;
    v37 = 0;
  }
  v41 = v37 | v40;
  v13 = (uint64_t *)(v41 & 0xFFFFFFFF8);
  if ((v41 & 1) != 0)
  {
    v14 = 0;
    v15 = (uint64_t *)*v13;
    if (*v13)
    {
LABEL_53:
      v16 = v15 != *v11;
      if ((v14 & 1) != 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else
  {
LABEL_2:
    v14 = 1;
    v15 = v13;
    if (v13)
      goto LABEL_53;
  }
  v16 = 0;
  if ((v14 & 1) != 0)
    goto LABEL_4;
LABEL_54:
  if (v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
LABEL_4:
  if (!v16)
  {
    JSC::PutByStatus::computeFor(a1, (uint64_t)*a2[2], (JSC::PutByVariant *)a2[3], *(unsigned int *)a2[4], *(unsigned __int8 *)a2[5], *(unsigned __int16 *)a2[6], a7, a8);
    v27 = *(_DWORD *)a3;
    if (!*(_DWORD *)a3)
      return;
    v28 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 - 1) < 2)
    {
      if (v27 == v28)
      {
        v29 = *(unsigned int *)(a3 + 20);
        if (!(_DWORD)v29)
        {
LABEL_18:
          WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 8, *(unsigned int *)(a1 + 20), v21, v22, v23, v24, v25, v26);
          return;
        }
        v30 = *(_QWORD *)(a3 + 8);
        v31 = v29 << 6;
        while ((JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>(a1 + 8, v30, (uint64_t)v21, v22, v23, v24, v25, v26) & 1) != 0)
        {
          v30 += 64;
          v31 -= 64;
          if (!v31)
            goto LABEL_18;
        }
      }
      goto LABEL_26;
    }
    if ((v28 - 4) < 4)
    {
LABEL_26:
      JSC::PutByStatus::merge(JSC::PutByStatus const&)::$_0::operator()(a1, (_QWORD *)a3, (uint64_t)v21, v22, v23, v24, v25, v26);
      return;
    }
    if (v28 == 3)
    {
      if (v27 == 3)
        return;
      if (v27 != 1)
        goto LABEL_26;
    }
    else if (v28)
    {
      goto LABEL_62;
    }
    *(_DWORD *)a1 = v27;
    WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 8, a3 + 8, v21, v22, v23, v24, v25, v26);
    return;
  }
  if ((*(_BYTE *)a2[5] & 2) != 0)
  {
    v32 = *(_DWORD *)a3;
    if ((*(_DWORD *)a3 & 0xFFFFFFFD) == 5)
    {
      v36 = v32 - 5;
      if (v36 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1981F99B8);
      }
      v33 = dword_199153BD0[v36];
      goto LABEL_23;
    }
    if (v32 > 7)
    {
      __break(0xC471u);
      JUMPOUT(0x1981F9978);
    }
    if (((1 << v32) & 0x31) == 0)
    {
      if (v32 != 1)
      {
        v33 = 6;
        goto LABEL_23;
      }
      v34 = (unint64_t)*(unsigned int *)(a3 + 20) << 6;
      while (v34)
      {
        v35 = *(_DWORD *)(*(_QWORD *)(a3 + 8) - 64 + v34) - 3;
        v33 = 6;
        v34 -= 64;
        if (v35 < 3)
          goto LABEL_23;
      }
    }
    v33 = 4;
LABEL_23:
    *(_DWORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 1;
    return;
  }
  *(_DWORD *)a1 = *(_DWORD *)a3;
  v17 = *(unsigned int *)(a3 + 20);
  v18 = (JSC::PutByVariant *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v17;
  if (v17 >= 2)
  {
    if (!(v17 >> 26))
    {
      v18 = (JSC::PutByVariant *)WTF::fastMalloc((WTF *)(v17 << 6));
      *(_DWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 8) = v18;
      v17 = *(unsigned int *)(a3 + 20);
      if (!(_DWORD)v17)
        return;
      goto LABEL_8;
    }
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x1981F9958);
  }
  if (!(_DWORD)v17)
    return;
LABEL_8:
  v19 = *(const JSC::PutByVariant **)(a3 + 8);
  v20 = v17 << 6;
  do
  {
    v18 = (JSC::PutByVariant *)((char *)JSC::PutByVariant::PutByVariant(v18, v19, a3, a4, a5, a6, a7, a8) + 64);
    v19 = (const JSC::PutByVariant *)((char *)v19 + 64);
    v20 -= 64;
  }
  while (v20);
}

void JSC::PutByStatus::computeFor(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  uint64_t v10;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  __int16 v23;
  int Concurrently;
  int v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  WTF *v49;
  WTF *v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  WTF *v68;
  WTF *v69;
  unint64_t v70;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int *v89;
  WTF *v90;
  int v91;
  WTF *v92;
  int v93;
  void *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  uint64_t v112;
  unsigned int v113;
  JSC::VM *v114;
  JSC::PutByVariant *v115;
  int v116;
  int v117;
  unint64_t v118;
  WTF *v119;
  WTF *v120;
  __int128 v121;
  WTF *v122[2];
  WTF *v123[2];
  uint64_t v124;
  uint64_t v125;
  int v126;
  WTF *v127;
  uint64_t v128;
  _BYTE v129[72];

  v9 = a4;
  v10 = a3;
  if (a3)
  {
    if ((a3 & 1) != 0)
      v14 = a3 & 0xFFFFFFFFFFFFFFFELL;
    else
      v14 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_BYTE **)(v14 + 8);
  v16 = *(unsigned int *)(v14 + 4);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if ((_DWORD)v16)
    {
      v17 = *v15 - 48;
      if (v17 <= 9 && (v16 < 2 || *v15 != 48))
      {
        v111 = v15 + 1;
        v112 = v16 - 1;
        while (v112)
        {
          if (v17 <= 0x19999999)
          {
            v113 = *v111 - 48;
            if (v113 <= 9)
            {
              v83 = __CFADD__(v113, 10 * v17);
              v17 = v113 + 10 * v17;
              ++v111;
              --v112;
              if (!v83)
                continue;
            }
          }
          goto LABEL_7;
        }
LABEL_186:
        if (v17 != -1)
        {
          *(_DWORD *)a9 = 4;
          goto LABEL_188;
        }
      }
    }
  }
  else if ((_DWORD)v16)
  {
    v17 = *(unsigned __int16 *)v15 - 48;
    if (v17 <= 9 && (*(_WORD *)v15 != 48 || v16 <= 1))
    {
      v80 = (unsigned __int16 *)(v15 + 2);
      v81 = v16 - 1;
      while (v81)
      {
        if (v17 <= 0x19999999)
        {
          v82 = *v80 - 48;
          if (v82 <= 9)
          {
            v83 = __CFADD__(v82, 10 * v17);
            v17 = v82 + 10 * v17;
            ++v80;
            --v81;
            if (!v83)
              continue;
          }
        }
        goto LABEL_7;
      }
      goto LABEL_186;
    }
  }
LABEL_7:
  v18 = *a2;
  if ((*a2 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    *(_DWORD *)a9 = 0;
LABEL_188:
    *(_QWORD *)(a9 + 8) = a9 + 24;
    *(_QWORD *)(a9 + 16) = 1;
    return;
  }
  v19 = 0;
  v117 = a5;
  v114 = (JSC::VM *)a1[7];
  v127 = (WTF *)v129;
  v128 = 1;
  v126 = 1;
  v115 = (JSC::PutByVariant *)(a9 + 24);
  v116 = a4;
  while (1)
  {
    v20 = v19;
    if ((v18 & 1) != 0)
    {
      v89 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v89 <= v19)
        goto LABEL_146;
      v21 = *(_QWORD *)&v89[2 * v19 + 2];
    }
    else
    {
      if (v18 < 4 || v19)
      {
LABEL_146:
        WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v127, HIDWORD(v128), (JSC::PutByVariant *)a3, a4, a5, a6, a7, a8);
        *(_DWORD *)a9 = v126;
        a3 = a9 + 24;
        *(_QWORD *)(a9 + 8) = v115;
        *(_QWORD *)(a9 + 16) = 1;
        v90 = v127;
        if (v127 == (WTF *)v129)
        {
          WTF::VectorTypeOperations<JSC::PutByVariant>::move((JSC::PutByVariant *)v129, (JSC::PutByVariant *)&v129[64 * (unint64_t)HIDWORD(v128)], v115, a4, a5, a6, a7, a8);
        }
        else
        {
          v127 = (WTF *)v129;
          *(_QWORD *)(a9 + 8) = v90;
          v93 = v128;
          LODWORD(v128) = 1;
          *(_DWORD *)(a9 + 16) = v93;
        }
        v91 = HIDWORD(v128);
        HIDWORD(v128) = 0;
        *(_DWORD *)(a9 + 20) = v91;
        goto LABEL_149;
      }
      v21 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    }
    v22 = *(_BYTE *)(v21 + 9) == 51 || (*(_BYTE *)(v21 + 10) & 8) == 0;
    if (!v22)
      break;
    v23 = *(_WORD *)(v21 + 12);
    if ((v23 & 8) != 0 || (*(_DWORD *)(v21 + 16) & 3) == 2 || (v23 & 0x10) != 0 && (v23 & 0x20) == 0)
      break;
    v125 = 0;
    Concurrently = JSC::Structure::getConcurrently(v21, (_DWORD *)v14, (_DWORD *)&v125 + 1, a4, a5, a6, a7, a8);
    LODWORD(v125) = Concurrently;
    if (Concurrently == -1)
    {
      if (v117 == 1)
        break;
      v31 = *(_DWORD *)(v21 + 16);
      if ((v31 & 3) != 0)
        break;
      v32 = 4;
      if ((v31 & 0x80000) != 0 || *(unsigned __int8 *)(v21 + 9) < 0x17u)
        goto LABEL_172;
      v119 = 0;
      if ((v9 & 1) == 0)
      {
        JSC::generateConditionsForPropertySetterMissConcurrently(v114, a1, v21, (_QWORD *)v14, a5, a6, a7, a8, (uint64_t *)&v120);
        v119 = v120;
        if (v120)
        {
          if (!*((_DWORD *)v120 + 1))
            goto LABEL_154;
        }
      }
      v33 = (unsigned __int8 *)(v21 + 15);
      if (__ldaxr((unsigned __int8 *)(v21 + 15)))
      {
        __clrex();
        goto LABEL_44;
      }
      if (__stxr(1u, v33))
LABEL_44:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 15);
      LODWORD(v125) = -1;
      if ((*(_BYTE *)(v21 + 19) & 8) == 0)
      {
        v35 = *(_QWORD *)(v21 + 80);
        if ((v35 & 1) != 0)
        {
          v44 = v35 & 0xFFFFFFFFFFFFFFFELL;
          if ((v35 & 0xFFFFFFFFFFFFFFFELL) == 0)
            goto LABEL_56;
          v84 = (*(_DWORD *)(v44 + 16) >> 13) & 0x1F;
          if ((_DWORD)v84 == 16)
          {
            v85 = *(_QWORD *)(v44 + 48);
            v86 = v85 | 0x1000000000000000;
            v22 = v85 == 2;
            v87 = 0x1000000000000000;
            if (!v22)
              v87 = v86;
          }
          else
          {
            v87 = (v84 << 56) | (16 * *(unsigned int *)(v44 + 72));
          }
          if ((v87 | ((unint64_t)*(unsigned __int8 *)(v44 + 20) << 48)) == (v14 | 0x100000000000000))
          {
LABEL_52:
            v45 = *(unsigned __int16 *)(v44 + 22);
            if (v45 == 65534)
            {
              v45 = -1;
            }
            else if (v45 == 0xFFFF)
            {
              v45 = *(_DWORD *)(*(_QWORD *)(v44 + 64) + 88);
            }
            LODWORD(v125) = v45;
            goto LABEL_56;
          }
        }
        else
        {
          v36 = *(_QWORD *)(v35 + 8);
          if (v36)
          {
            v37 = ((v14 | 0x100000000000000) + ~(v14 << 32)) ^ (((v14 | 0x100000000000000) + ~(v14 << 32)) >> 22);
            v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
            v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
            v40 = *(_DWORD *)(v36 - 8);
            v41 = v40 & ((v39 >> 31) ^ v39);
            v42 = *(_QWORD *)(v36 + 16 * v41);
            if (v42 == (v14 | 0x100000000000000))
            {
LABEL_49:
              v43 = *(_QWORD *)(v36 + 16 * v41 + 8);
              if (v43 && (*(_BYTE *)(v43 + 8) & 3) == 0)
              {
                v44 = *(_QWORD *)v43;
                if (*(_QWORD *)v43)
                  goto LABEL_52;
LABEL_56:
                v46 = __ldxr(v33);
                if (v46 == 1)
                {
                  if (!__stlxr(0, v33))
                    goto LABEL_87;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v21 + 15), 0, a3, a4, a5, a6, a7, a8);
LABEL_87:
                if (v44)
                {
                  v118 = v21;
                  JSC::PutByVariant::transition((uint64_t)&v120, (void *)v10, (uint64_t *)&v118, v44, (unsigned int **)&v119, v125, a7, a8);
                  v67 = JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v127, (unint64_t)&v120, v61, v62, v63, v64, v65, v66);
                  v68 = v123[1];
                  v123[1] = 0;
                  if (v68)
                    WTF::fastFree((unint64_t)v68, a2, a3, a4, a5, a6, a7, a8);
                  v69 = v122[1];
                  v122[1] = 0;
                  if (v69)
                  {
                    v70 = *(_QWORD *)v69;
                    if ((WTF *)((char *)v69 + 16) != *(WTF **)v69 && v70 != 0)
                    {
                      *(_QWORD *)v69 = 0;
                      *((_DWORD *)v69 + 2) = 0;
                      WTF::fastFree(v70, a2, a3, a4, a5, a6, a7, a8);
                    }
                    WTF::fastFree((unint64_t)v69, a2, a3, a4, a5, a6, a7, a8);
                  }
                  v72 = (unsigned int *)v122[0];
                  v122[0] = 0;
                  if (v72)
                  {
                    do
                    {
                      v73 = __ldaxr(v72);
                      v74 = v73 - 1;
                    }
                    while (__stlxr(v74, v72));
                    if (!v74)
                    {
                      atomic_store(1u, v72);
                      WTF::fastFree((unint64_t)v72, a2, a3, a4, a5, a6, a7, a8);
                    }
                  }
                  if ((v121 & 1) != 0)
                    WTF::fastFree(v121 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  if ((v118 & 1) != 0)
                    WTF::fastFree(v118 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
                  if ((v67 & 1) != 0)
                  {
                    v48 = 0;
                    goto LABEL_107;
                  }
                }
LABEL_154:
                *(_DWORD *)a9 = 4;
                *(_QWORD *)(a9 + 8) = v115;
                v48 = 1;
                *(_QWORD *)(a9 + 16) = 1;
LABEL_107:
                v75 = (unsigned int *)v119;
                v119 = 0;
                if (v75)
                {
                  do
                  {
                    v76 = __ldaxr(v75);
                    v77 = v76 - 1;
                  }
                  while (__stlxr(v77, v75));
                  if (!v77)
                  {
                    atomic_store(1u, v75);
                    WTF::fastFree((unint64_t)v75, a2, a3, a4, a5, a6, a7, a8);
                  }
                }
                v9 = v116;
                goto LABEL_112;
              }
            }
            else
            {
              v78 = 1;
              while (v42)
              {
                v41 = ((_DWORD)v41 + v78) & v40;
                v42 = *(_QWORD *)(v36 + 16 * v41);
                ++v78;
                if (v42 == (v14 | 0x100000000000000))
                  goto LABEL_49;
              }
            }
          }
        }
      }
      v44 = 0;
      goto LABEL_56;
    }
    if (v117 == 2)
      break;
    if ((v125 & 0x6000000000) != 0)
    {
      v32 = 6;
      goto LABEL_172;
    }
    if ((v125 & 0x1200000000) != 0)
      break;
    v25 = Concurrently;
    if (!v9 || !HIDWORD(v125))
    {
      v26 = (unsigned __int8 *)(v21 + 15);
      if (__ldaxr((unsigned __int8 *)(v21 + 15)))
      {
        __clrex();
        goto LABEL_28;
      }
      if (__stxr(1u, v26))
LABEL_28:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 15);
      v28 = *(_QWORD *)(v21 + 64);
      if (v28)
      {
        if (*(_BYTE *)(v28 + 5) != 1)
        {
          v55 = *(_QWORD *)(v28 + 56);
          if (v55)
          {
            v56 = *(_DWORD *)(v55 - 8);
            v57 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
            v58 = (v57 ^ (v57 >> 6)) + ~((v57 ^ (v57 >> 6)) << 11);
            v59 = v56 & (v58 ^ HIWORD(v58));
            v60 = *(_DWORD *)(v55 + 16 * v59);
            if (v60 == v25)
            {
LABEL_82:
              v29 = *(_QWORD *)(v55 + 16 * v59 + 8);
LABEL_32:
              v30 = __ldxr(v26);
              if (v30 == 1)
              {
                if (!__stlxr(0, v26))
                  goto LABEL_61;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v21 + 15), 0, a3, a4, a5, a6, a7, a8);
LABEL_61:
              if (!v29 || *(_BYTE *)(v29 + 4) != 2)
                break;
              v119 = (WTF *)v21;
              v47 = v125;
              v121 = 0u;
              *(_OWORD *)v122 = 0u;
              *(_OWORD *)v123 = 0u;
              v124 = v10;
              v120 = (WTF *)0xFFFFFFFF00000001;
              if ((v21 & 1) != 0)
              {
                WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v121, &v119);
                HIDWORD(v120) = v47;
                if ((v119 & 1) != 0)
                  WTF::fastFree((unint64_t)v119 & 0xFFFFFFFFFFFFFFFCLL, v94, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)&v121 = v21 & 0xFFFFFFFFFFFFFFFDLL;
                HIDWORD(v120) = v125;
              }
              v48 = 4;
              if ((JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v127, (unint64_t)&v120, a3, a4, a5, a6, a7, a8) & 1) == 0)
              {
                *(_DWORD *)a9 = 4;
                *(_QWORD *)(a9 + 8) = v115;
                v48 = 1;
                *(_QWORD *)(a9 + 16) = 1;
              }
              v49 = v123[1];
              v123[1] = 0;
              if (v49)
                WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
              v50 = v122[1];
              v122[1] = 0;
              if (v50)
              {
                v51 = *(_QWORD *)v50;
                if ((WTF *)((char *)v50 + 16) != *(WTF **)v50 && v51)
                {
                  *(_QWORD *)v50 = 0;
                  *((_DWORD *)v50 + 2) = 0;
                  WTF::fastFree(v51, a2, a3, a4, a5, a6, a7, a8);
                }
                WTF::fastFree((unint64_t)v50, a2, a3, a4, a5, a6, a7, a8);
              }
              v52 = (unsigned int *)v122[0];
              v122[0] = 0;
              v9 = v116;
              if (v52)
              {
                do
                {
                  v53 = __ldaxr(v52);
                  v54 = v53 - 1;
                }
                while (__stlxr(v54, v52));
                if (!v54)
                {
                  atomic_store(1u, v52);
                  WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
                }
              }
              if ((v121 & 1) != 0)
                WTF::fastFree(v121 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
LABEL_112:
              if ((v48 | 4) != 4)
                goto LABEL_173;
              goto LABEL_113;
            }
            v88 = 1;
            while (v60 != 0x7FFFFFFF)
            {
              v59 = ((_DWORD)v59 + v88) & v56;
              v60 = *(_DWORD *)(v55 + 16 * v59);
              ++v88;
              if (v60 == v25)
                goto LABEL_82;
            }
          }
        }
      }
      v29 = 0;
      goto LABEL_32;
    }
    v95 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 && (v10 & 1) == 0)
      v95 = *(_QWORD *)(v10 + 8);
    v96 = JSC::Structure::attributeChangeTransitionToExistingStructureConcurrently(v21, v95, 0, (int *)&v125, a5, a6, a7, a8);
    if (!v96)
      break;
    v118 = 0;
    v119 = (WTF *)v21;
    JSC::PutByVariant::transition((uint64_t)&v120, (void *)v10, (uint64_t *)&v119, v96, (unsigned int **)&v118, v125, a7, a8);
    v103 = JSC::appendICStatusVariant<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::PutByVariant>((uint64_t)&v127, (unint64_t)&v120, v97, v98, v99, v100, v101, v102);
    JSC::PutByVariant::~PutByVariant((JSC::PutByVariant *)&v120, v104, v105, v106, v107, v108, v109, v110);
    if ((v119 & 1) != 0)
      WTF::fastFree((unint64_t)v119 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    if (!v103)
      break;
    v9 = v116;
LABEL_113:
    v19 = v20 + 1;
    v18 = *a2;
  }
  v32 = 4;
LABEL_172:
  *(_DWORD *)a9 = v32;
  *(_QWORD *)(a9 + 8) = v115;
  *(_QWORD *)(a9 + 16) = 1;
LABEL_173:
  if (HIDWORD(v128))
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v127, (_QWORD *)v127 + 8 * (unint64_t)HIDWORD(v128), a3, a4, a5, a6, a7, a8);
LABEL_149:
  v92 = v127;
  if (v129 != (_BYTE *)v127)
  {
    if (v127)
    {
      v127 = 0;
      LODWORD(v128) = 0;
      WTF::fastFree((unint64_t)v92, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::PutByStatus::makesCalls(JSC::PutByStatus *this)
{
  int v1;
  _BOOL8 v2;
  uint64_t result;
  unint64_t v4;
  unsigned int v5;

  v1 = *(_DWORD *)this;
  if (*(_DWORD *)this > 7u)
  {
    result = 500;
    __break(0xC471u);
  }
  else
  {
    if (((1 << v1) & 0x31) != 0)
      return 0;
    if (v1 != 1)
      return 1;
    v4 = ((unint64_t)*((unsigned int *)this + 5) << 6) - 64;
    do
    {
      v2 = v4 != -64;
      if (v4 == -64)
        break;
      v5 = *(_DWORD *)(*((_QWORD *)this + 1) + v4) - 3;
      v4 -= 64;
    }
    while (v5 >= 3);
    return v2;
  }
  return result;
}

void JSC::PutByStatus::visitAggregate(JSC::PutByStatus *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  JSC::SlotVisitor *v23;
  JSC::SlotVisitor *v24;

  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v9 = v8 << 6;
    v10 = (unint64_t *)(*((_QWORD *)this + 1) + 56);
    do
    {
      v12 = *v10;
      v10 += 8;
      v11 = v12;
      v13 = v12 & 1;
      if (v12)
        v14 = v13 == 0;
      else
        v14 = 0;
      if (!v14)
        goto LABEL_7;
      if ((v11 & 8) != 0)
      {
        if ((*(_BYTE *)(v11 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
      else
      {
        v15 = v11 & 0xFFFFFFFFFFFFC000;
        v16 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != v16)
        {
          v18 = v11 & 0xFFFFFFFFFFFFC000;
          v24 = a2;
          v17 = v11;
          v20 = v9;
          v22 = v10;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000), v16, a3, a4, a5, a6, a7, a8);
          v10 = v22;
          a2 = v24;
          v15 = v18;
          v9 = v20;
          v11 = v17;
        }
        if (((*(_QWORD *)(v15 + 8 * ((v11 >> 10) & 0xF) + 40) >> (v11 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
      v21 = v10;
      v19 = v9;
      v23 = a2;
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v11, 0, a4, a5, a6, a7, a8);
      v10 = v21;
      a2 = v23;
      v9 = v19;
LABEL_7:
      v9 -= 64;
    }
    while (v9);
  }
}

uint64_t JSC::PutByVariant::finalize(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;

  v4 = a1[1];
  if ((v4 & 1) != 0)
    v5 = *(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v5 = v4 > 3;
  if (v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v8 = a1[1];
      v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v8 & 1) != 0)
        v9 = *(_QWORD *)(v9 + v6 + 8);
      if ((v9 & 8) != 0)
      {
        if ((*(_BYTE *)(v9 - 79) & 1) == 0)
          return 0;
      }
      else if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
             || ((*(_QWORD *)((v9 & 0xFFFFFFFFFFFFC000) + 8 * ((v9 >> 10) & 0xF) + 0x28) >> (v9 >> 4)) & 1) == 0)
      {
        return 0;
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  v10 = a1[2];
  if (!v10)
    goto LABEL_15;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0)
      goto LABEL_15;
    return 0;
  }
  if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
    || ((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1) == 0)
  {
    return 0;
  }
LABEL_15:
  result = JSC::ObjectPropertyConditionSet::areStillLive(a1 + 3, a2);
  if ((_DWORD)result)
  {
    v12 = a1[4];
    if (v12)
    {
      v13 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v13)
      {
        v14 = *(unint64_t **)v12;
        v15 = 8 * v13;
        result = 1;
        while (1)
        {
          v16 = *v14;
          if (*v14)
          {
            if ((v16 & 8) != 0)
            {
              if ((*(_BYTE *)(v16 - 79) & 1) == 0)
                return 0;
            }
            else if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
                   || ((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
            {
              return 0;
            }
          }
          ++v14;
          v15 -= 8;
          if (!v15)
            return result;
        }
      }
    }
    return 1;
  }
  return result;
}

void JSC::PutByStatus::merge(JSC::PutByStatus const&)::$_0::operator()(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  JSC::PutByVariant *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  _BYTE v25[64];

  v9 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0xFFFFFFFD) == 5 || (v10 = *(_DWORD *)a2, (*(_DWORD *)a2 & 0xFFFFFFFD) == 5))
  {
    if (v9 > 7)
    {
      __break(0xC471u);
      JUMPOUT(0x1981FA910);
    }
    if (((1 << v9) & 0x31) == 0)
    {
      if (v9 != 1)
        goto LABEL_39;
      v17 = ((unint64_t)*(unsigned int *)(a1 + 20) << 6) - 64;
      while (v17 != -64)
      {
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + v17) - 3;
        v12 = 7;
        v17 -= 64;
        if (v18 < 3)
          goto LABEL_8;
      }
    }
    v11 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 > 7u)
    {
      __break(0xC471u);
      JUMPOUT(0x1981FA930);
    }
    if (((1 << v11) & 0x31) != 0)
    {
LABEL_7:
      v12 = 5;
LABEL_8:
      *(_DWORD *)a1 = v12;
      goto LABEL_15;
    }
    if (v11 == 1)
    {
      v19 = ((unint64_t)*((unsigned int *)a2 + 5) << 6) - 64;
      while (v19 != -64)
      {
        v20 = *(_DWORD *)(a2[1] + v19) - 3;
        v12 = 7;
        v19 -= 64;
        if (v20 < 3)
          goto LABEL_8;
      }
      goto LABEL_7;
    }
LABEL_39:
    v12 = 7;
    goto LABEL_8;
  }
  if (v9 > 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1981FA950);
  }
  if (((1 << v9) & 0x31) == 0)
  {
    if (v9 != 1)
      goto LABEL_40;
    v21 = ((unint64_t)*(unsigned int *)(a1 + 20) << 6) - 64;
    while (v21 != -64)
    {
      v22 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + v21) - 3;
      v13 = 6;
      v21 -= 64;
      if (v22 < 3)
        goto LABEL_14;
    }
  }
  if (v10 > 7)
  {
    __break(0xC471u);
    JUMPOUT(0x1981FA970);
  }
  if (((1 << v10) & 0x31) == 0)
  {
    if (v10 == 1)
    {
      v23 = ((unint64_t)*((unsigned int *)a2 + 5) << 6) - 64;
      while (v23 != -64)
      {
        v24 = *(_DWORD *)(a2[1] + v23) - 3;
        v13 = 6;
        v23 -= 64;
        if (v24 < 3)
          goto LABEL_14;
      }
      goto LABEL_13;
    }
LABEL_40:
    v13 = 6;
    goto LABEL_14;
  }
LABEL_13:
  v13 = 4;
LABEL_14:
  *(_DWORD *)a1 = v13;
LABEL_15:
  v14 = *(unsigned int *)(a1 + 20);
  v15 = *(_QWORD **)(a1 + 8);
  if ((_DWORD)v14)
  {
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(v15, &v15[8 * v14], a3, a4, a5, a6, a7, a8);
    v15 = *(_QWORD **)(a1 + 8);
  }
  v16 = (JSC::PutByVariant *)(a1 + 24);
  if (v15 != (_QWORD *)(a1 + 24))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree((unint64_t)v15, a2, (uint64_t)v16, a4, a5, a6, a7, a8);
    }
    v16 = (JSC::PutByVariant *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = a1 + 24;
  }
  WTF::VectorTypeOperations<JSC::PutByVariant>::move((JSC::PutByVariant *)v25, (JSC::PutByVariant *)v25, v16, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
}

uint64_t JSC::PutByVariant::fixTransitionToReplaceIfNecessary(uint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  if (*(_DWORD *)this == 2)
  {
    v8 = *(_QWORD *)(this + 8);
    if ((v8 & 1) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      v10 = *v9;
      if (v10 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1981FAA64);
      }
      for (i = 2 * v10; i * 4; i -= 2)
      {
        v12 = *(_QWORD *)&v9[i];
        if (v12 != *(_QWORD *)(this + 16))
          return this;
      }
    }
    else if (v8 >= 4 && *(_QWORD *)(this + 16) != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
      return this;
    }
    v13 = *(unsigned int **)(this + 24);
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    *(_DWORD *)this = 1;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        v16 = this;
        WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
        this = v16;
      }
    }
    if (*(_QWORD *)(this + 32))
    {
      __break(0xC471u);
      JUMPOUT(0x1981FAA44);
    }
  }
  return this;
}

uint64_t JSC::PutByStatus::dump(JSC::PutByStatus *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  const char *v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  JSC::PutByVariant **v10[5];
  char v11;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "(");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v5 = "Simple";
  switch(*(_DWORD *)this)
  {
    case 0:
      v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v6, "%s", "NoInformation");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 1:
      goto LABEL_9;
    case 2:
      v5 = "CustomAccessor";
      goto LABEL_9;
    case 3:
      v5 = "Megamorphic";
      goto LABEL_9;
    case 4:
      v5 = "LikelyTakesSlowPath";
      goto LABEL_9;
    case 5:
      v5 = "ObservedTakesSlowPath";
      goto LABEL_9;
    case 6:
      v5 = "MakesCalls";
      goto LABEL_9;
    case 7:
      v5 = "ObservedSlowPathAndMakesCalls";
LABEL_9:
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v8, "%s", v5);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    default:
      break;
  }
  v10[0] = (JSC::PutByVariant **)((char *)this + 8);
  v10[1] = (JSC::PutByVariant **)", ";
  v10[2] = (JSC::PutByVariant **)3;
  v10[3] = (JSC::PutByVariant **)&str_50_1;
  v10[4] = (JSC::PutByVariant **)1;
  v11 = 0;
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v9, "%s", ", ");
  WTF::ListDump<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v10, (uint64_t)v9);
  WTF::PrintStream::printf(v9, "%s", ")");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::PutByVariant::operator=(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;

  v10 = (uint64_t *)(a2 + 1);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v11 = (uint64_t *)(a1 + 8);
  if ((unsigned int **)a1 != a2)
  {
    if ((*v11 & 1) != 0)
      WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v12 = *v10;
    if ((*v10 & 1) != 0)
    {
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v11, v10);
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFDLL;
      v14 = v12 | 2;
      if ((*(_BYTE *)v11 & 2) == 0)
        v14 = v13;
      *v11 = v14;
    }
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  v15 = a2[3];
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v15;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
  v20 = a2[4];
  if (!v20)
  {
    v21 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (!v21)
      goto LABEL_22;
    goto LABEL_16;
  }
  result = WTF::fastMalloc((WTF *)0x20);
  v27 = v20[3];
  v28 = (_QWORD *)(result + 16);
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = v27;
  if (v27 < 2)
  {
LABEL_28:
    v29 = v20[3];
    if ((_DWORD)v29)
    {
      v30 = *(uint64_t **)v20;
      v31 = 8 * v29;
      do
      {
        v32 = *v30++;
        *v28++ = v32;
        v31 -= 8;
      }
      while (v31);
    }
    *(_DWORD *)(result + 24) = v20[6];
    v21 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = result;
    if (!v21)
    {
LABEL_22:
      *(_QWORD *)(a1 + 40) = a2[5];
      v24 = a2[6];
      if (v24)
      {
        v33 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
        *v33 = *(_OWORD *)v24;
        v25 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v33;
        if (!v25)
          goto LABEL_25;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (!v25)
        {
LABEL_25:
          *(_QWORD *)(a1 + 56) = a2[7];
          return a1;
        }
      }
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_25;
    }
LABEL_16:
    v22 = *(_QWORD *)v21;
    if (v21 + 16 != *(_QWORD *)v21 && v22 != 0)
    {
      *(_QWORD *)v21 = 0;
      *(_DWORD *)(v21 + 8) = 0;
      WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_22;
  }
  v34 = result;
  if (!(v27 >> 29))
  {
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v27));
    result = v34;
    *(_DWORD *)(v34 + 8) = v27;
    *(_QWORD *)v34 = v28;
    goto LABEL_28;
  }
  __break(0xC471u);
  return result;
}

JSC::PutByVariant *JSC::PutByVariant::PutByVariant(JSC::PutByVariant *this, const JSC::PutByVariant *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::PutByVariant *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::PutByVariant *result;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _OWORD *v36;
  JSC::PutByVariant *v37;

  v8 = a2;
  v10 = *((_QWORD *)a2 + 7);
  *(_QWORD *)this = 0xFFFFFFFF00000000;
  *(_OWORD *)((char *)this + 8) = 0u;
  v11 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = v10;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (this != a2)
  {
    a2 = (const JSC::PutByVariant *)((char *)a2 + 8);
    v12 = *((_QWORD *)v8 + 1);
    if ((v12 & 1) != 0)
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v11, a2);
    else
      *v11 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  *((_QWORD *)this + 2) = *((_QWORD *)v8 + 2);
  v13 = (unsigned int *)*((_QWORD *)v8 + 3);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v13;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *((_DWORD *)this + 1) = *((_DWORD *)v8 + 1);
  v18 = *((_QWORD *)v8 + 4);
  if (!v18)
  {
    v19 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (!v19)
      goto LABEL_22;
    goto LABEL_12;
  }
  result = (JSC::PutByVariant *)WTF::fastMalloc((WTF *)0x20);
  v29 = *(unsigned int *)(v18 + 12);
  v30 = (_QWORD *)((char *)result + 16);
  *(_QWORD *)result = (char *)result + 16;
  *((_DWORD *)result + 2) = 1;
  *((_DWORD *)result + 3) = v29;
  if (v29 < 2)
  {
LABEL_32:
    v31 = *(unsigned int *)(v18 + 12);
    if ((_DWORD)v31)
    {
      v32 = *(uint64_t **)v18;
      v33 = 8 * v31;
      do
      {
        v34 = *v32++;
        *v30++ = v34;
        v33 -= 8;
      }
      while (v33);
    }
    *((_DWORD *)result + 6) = *(_DWORD *)(v18 + 24);
    v19 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = result;
    if (!v19)
    {
LABEL_22:
      *((_QWORD *)this + 5) = *((_QWORD *)v8 + 5);
      v24 = (_OWORD *)*((_QWORD *)v8 + 6);
      if (v24)
      {
        v36 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
        *v36 = *v24;
        v25 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v36;
        if (!v25)
          goto LABEL_29;
      }
      else
      {
        v25 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = 0;
        if (!v25)
          goto LABEL_29;
      }
      v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v26)
      {
        if (!(v25 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v25 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v25)) & 1) != 0)
        {
          goto LABEL_27;
        }
        if (v25 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v25 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v25 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v25) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
          {
LABEL_27:
            v27 = *(unsigned int *)(v26 + 8000);
            if (v27 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v26, v25, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v26 + 8 * v27) = v25 | 0x5000000000000;
              *(_DWORD *)(v26 + 8000) = v27 + 1;
            }
            goto LABEL_29;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v26, v25, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v25, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_29:
      *((_QWORD *)this + 7) = *((_QWORD *)v8 + 7);
      return this;
    }
LABEL_12:
    v20 = *(_QWORD *)v19;
    if (v19 + 16 != *(_QWORD *)v19 && v20 != 0)
    {
      *(_QWORD *)v19 = 0;
      *(_DWORD *)(v19 + 8) = 0;
      WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
    }
    v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v22)
    {
      pas_try_deallocate_slow_no_cache(v19, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_22;
    }
    if (!(v19 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v19 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v19)) & 1) != 0)
    {
      goto LABEL_20;
    }
    if (v19 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v19 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v19) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_20:
        v23 = *(unsigned int *)(v22 + 8000);
        if (v23 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v22, v19, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v22 + 8 * v23) = v19 | 0x5000000000000;
          *(_DWORD *)(v22 + 8000) = v23 + 1;
        }
        goto LABEL_22;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v22, v19, 1, a4, a5, a6, a7, a8);
    goto LABEL_22;
  }
  v37 = result;
  if (!(v29 >> 29))
  {
    v35 = v29;
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v29));
    result = v37;
    *((_DWORD *)v37 + 2) = v35;
    *(_QWORD *)v37 = v30;
    goto LABEL_32;
  }
  __break(0xC471u);
  return result;
}

unint64_t JSC::PutByVariant::oldStructureForTransition(JSC::PutByVariant *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;

  if (*(_DWORD *)this != 2)
    goto LABEL_13;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    v5 = *(unsigned int *)(v1 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1981FB2A0);
    }
    for (i = 8 * v5; i; i -= 8)
    {
      v2 = *(_QWORD *)(v4 + i);
      if (v2 != *((_QWORD *)this + 2))
        return v2;
    }
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1981FB280);
  }
  if (v1 < 4)
    goto LABEL_13;
  v2 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  if (*((_QWORD *)this + 2) == v2)
    goto LABEL_13;
  return v2;
}

BOOL JSC::PutByVariant::reallocatesStorage(JSC::PutByVariant *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)this != 2)
    return (*(_DWORD *)this - 3) < 3;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0)
  {
    v13 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    v14 = *(unsigned int *)(v1 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14 < 3)
    {
      v15 = 8 * v14;
      while (v15)
      {
        v2 = *(_QWORD *)(v13 + v15);
        v3 = *((_QWORD *)this + 2);
        v15 -= 8;
        if (v2 != v3)
          goto LABEL_5;
      }
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1981FB408);
  }
  if (v1 < 4)
    goto LABEL_28;
  v2 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  v3 = *((_QWORD *)this + 2);
  if (v3 == v2)
    goto LABEL_28;
LABEL_5:
  v4 = *(unsigned __int16 *)(v2 + 24);
  if (v4 == 65534)
    goto LABEL_9;
  if (v4 == 0xFFFF)
    v4 = *(_DWORD *)(*(_QWORD *)(v2 + 64) + 84);
  if (v4 < 64)
  {
LABEL_9:
    v5 = 0;
  }
  else if ((v4 - 63) >= 5)
  {
    v9 = (v4 - 64) | ((v4 - 64) >> 1) | (((v4 - 64) | ((v4 - 64) >> 1)) >> 2);
    v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    v5 = (v10 | HIWORD(v10)) + 1;
  }
  else
  {
    v5 = 4;
  }
  v6 = *(unsigned __int16 *)(v3 + 24);
  if (v6 == 65534)
    goto LABEL_14;
  if (v6 == 0xFFFF)
    v6 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 84);
  if (v6 < 64)
  {
LABEL_14:
    v7 = 0;
  }
  else if ((v6 - 63) >= 5)
  {
    v11 = (v6 - 64) | ((v6 - 64) >> 1) | (((v6 - 64) | ((v6 - 64) >> 1)) >> 2);
    v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    v7 = (v12 | HIWORD(v12)) + 1;
  }
  else
  {
    v7 = 4;
  }
  return v5 != v7;
}

uint64_t JSC::PutByVariant::attemptToMergeTransitionWithReplace(JSC::PutByVariant *this, const JSC::PutByVariant *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  if (JSC::PutByVariant::reallocatesStorage(this))
    return 0;
  v4 = *((_QWORD *)a2 + 1);
  v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v4 & 1) != 0)
  {
    if (*(_DWORD *)v5 == 1)
      v5 = *(_QWORD *)(v5 + 8);
    else
      v5 = 0;
  }
  if (v5 != *((_QWORD *)this + 2))
    return 0;
  v7 = (uint64_t *)((char *)this + 8);
  v20 = v5;
  if ((v5 & 1) != 0)
  {
    WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(v7, &v20);
    if ((v20 & 1) != 0)
      WTF::fastFree(v20 & 0xFFFFFFFFFFFFFFFCLL, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v5 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v9 = *v7;
      if ((*v7 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v7, v8);
      }
      else if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != v8)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v11 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v11 = 0x400000002;
          v12 = *v7;
          *(_QWORD *)(v11 + 8) = *v7 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v11 + 16) = v8;
          v10 = v12 & 2 | v11 | 1;
        }
        else
        {
          v10 = *v7 & 2 | v8;
        }
        *v7 = v10;
      }
    }
  }
  return 1;
}

uint64_t JSC::PutByVariant::dumpInContext(JSC::PutByVariant *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  JSC::StructureSet *v9;
  int v10;
  WTF::PrintStream *v11;
  JSC::StructureSet *v12;
  JSC::Structure *v13;
  JSC::ObjectPropertyConditionSet *v14;
  int v15;
  WTF::PrintStream *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF::PrintStream *v25;
  WTF::PrintStream *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  WTF::PrintStream *v29;
  WTF::PrintStream *v30;
  WTF::PrintStream *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  WTF::PrintStream *v34;
  WTF::PrintStream *v36;
  WTF *v37;

  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v6, "%s", "<");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "id='");
  JSC::CacheableIdentifier::dump((JSC::PutByVariant *)((char *)this + 56), v7);
  WTF::PrintStream::printf(v7, "%s", "', ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  switch(*(_DWORD *)this)
  {
    case 0:
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v8, "%s");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 1:
      v9 = (JSC::PutByVariant *)((char *)this + 8);
      v10 = *((_DWORD *)this + 1);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v11, "%s", "Replace: ");
      JSC::StructureSet::dumpInContext(v9, v11, a3);
      WTF::PrintStream::printf(v11, "%s", ", offset = ");
      WTF::PrintStream::printf(v11, "%d", v10);
      WTF::PrintStream::printf(v11, "%s", ", ");
      WTF::PrintStream::printf(v11, "%s");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 2:
      v12 = (JSC::PutByVariant *)((char *)this + 8);
      v13 = (JSC::Structure *)*((_QWORD *)this + 2);
      v14 = (JSC::PutByVariant *)((char *)this + 24);
      v15 = *((_DWORD *)this + 1);
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v16, "%s", "Transition: ");
      JSC::StructureSet::dumpInContext(v12, v16, a3);
      WTF::PrintStream::printf(v16, "%s", " to ");
      if (v13)
      {
        if (a3)
        {
          WTF::StringHashDumpContext<JSC::Structure>::getID(v13, (uint64_t *)a3, (int8x16_t **)&v37);
          JSC::Structure::dumpBrief(v13, v16, (const WTF::CString *)&v37);
          v24 = v37;
          v37 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
              WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
            else
              --*(_DWORD *)v24;
          }
        }
        else
        {
          JSC::Structure::dump((unint64_t)v13, v16);
        }
      }
      else
      {
        v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
        WTF::PrintStream::printf(v36, "%s", "(null)");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
      }
      WTF::PrintStream::printf(v16, "%s", ", [");
      JSC::ObjectPropertyConditionSet::dumpInContext(v14, v16, a3);
      WTF::PrintStream::printf(v16, "%s", "], offset = ");
      WTF::PrintStream::printf(v16, "%d", v15);
      WTF::PrintStream::printf(v16, "%s", ", ");
      WTF::PrintStream::printf(v16, "%s", ">");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 3:
      v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v25, "%s", "Setter: ");
      JSC::StructureSet::dumpInContext((JSC::PutByVariant *)((char *)this + 8), v25, a3);
      WTF::PrintStream::printf(v25, "%s", ", [");
      JSC::ObjectPropertyConditionSet::dumpInContext((JSC::PutByVariant *)((char *)this + 24), v25, a3);
      WTF::PrintStream::printf(v25, "%s", "]");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v26, "%s", ", offset = ");
      WTF::PrintStream::printf(v26, "%d", *((_DWORD *)this + 1));
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v27 = *((_QWORD *)this + 4);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v28, "%s", ", call = ");
      JSC::CallLinkStatus::dump(v27, v28);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v29, "%s");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    case 4:
      v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v30, "%s", "CustomAccessorSetter: ");
      JSC::StructureSet::dumpInContext((JSC::PutByVariant *)((char *)this + 8), v30, a3);
      WTF::PrintStream::printf(v30, "%s", ", [");
      JSC::ObjectPropertyConditionSet::dumpInContext((JSC::PutByVariant *)((char *)this + 24), v30, a3);
      WTF::PrintStream::printf(v30, "%s", "]");
      goto LABEL_12;
    case 5:
      v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v31, "%s", "Proxy: ");
      JSC::StructureSet::dumpInContext((JSC::PutByVariant *)((char *)this + 8), v31, a3);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v32 = *((_QWORD *)this + 4);
      v33 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v33, "%s", ", call = ");
      JSC::CallLinkStatus::dump(v32, v33);
LABEL_12:
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v34, "%s");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    default:
      __break(0xC471u);
      JUMPOUT(0x1981FBB94);
  }
}

uint64_t WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  JSC::PutByVariant *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  JSC::PutByVariant *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a3;
  v9 = result;
  v10 = *(JSC::PutByVariant **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v10 + 64 * (unint64_t)*(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - (_QWORD)v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= a2)
    v14 = a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 2)
  {
    v16 = (JSC::PutByVariant *)(result + 16);
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    goto LABEL_12;
  }
  if (!(v14 >> 26))
  {
    v16 = (JSC::PutByVariant *)WTF::fastMalloc((WTF *)(v14 << 6));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    WTF::VectorTypeOperations<JSC::PutByVariant>::move(v10, (JSC::PutByVariant *)((char *)v10 + 64 * v15), v16, a4, a5, a6, a7, a8);
    if ((JSC::PutByVariant *)(v9 + 16) != v10 && v10)
    {
      if (*(JSC::PutByVariant **)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, v17, v18, v19, v20, v21, v22, v23);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  JSC::PutByVariant *v13;
  uint64_t v14;
  JSC::PutByVariant *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(JSC::PutByVariant **)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 2)
    {
      v15 = (JSC::PutByVariant *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v11 >> 26)
      {
        __break(0xC471u);
        return;
      }
      v15 = (JSC::PutByVariant *)WTF::fastMalloc((WTF *)(v11 << 6));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    WTF::VectorTypeOperations<JSC::PutByVariant>::move(v13, (JSC::PutByVariant *)((char *)v13 + 64 * v14), v15, a4, a5, a6, a7, a8);
    if ((JSC::PutByVariant *)(a1 + 16) != v13 && v13)
    {
      if (*(JSC::PutByVariant **)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v13, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::PutByVariant *v10;
  uint64_t v11;
  JSC::PutByVariant *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(JSC::PutByVariant **)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 2)
    {
      v12 = (JSC::PutByVariant *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >> 26)
      {
        __break(0xC471u);
        JUMPOUT(0x1981FBE4CLL);
      }
      v12 = (JSC::PutByVariant *)WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    WTF::VectorTypeOperations<JSC::PutByVariant>::move(v10, (JSC::PutByVariant *)((char *)v10 + 64 * v11), v12, a4, a5, a6, a7, a8);
    if ((JSC::PutByVariant *)(a1 + 16) != v10 && v10 != 0)
    {
      if (*(JSC::PutByVariant **)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, v13, v14, v15, v16, v17, v18, v19);
    }
  }
}

void WTF::VectorTypeOperations<JSC::PutByVariant>::move(JSC::PutByVariant *a1, JSC::PutByVariant *a2, JSC::PutByVariant *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::PutByVariant *v8;
  JSC::PutByVariant *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v8 = this;
    v10 = a1;
    do
    {
      JSC::PutByVariant::PutByVariant(v8, v10, (uint64_t)this, a4, a5, a6, a7, a8);
      v12 = *((_QWORD *)v10 + 6);
      *((_QWORD *)v10 + 6) = 0;
      if (v12)
        WTF::fastFree(v12, v11, (uint64_t)this, a4, a5, a6, a7, a8);
      v13 = *((_QWORD *)v10 + 4);
      *((_QWORD *)v10 + 4) = 0;
      if (v13)
      {
        v14 = *(_QWORD *)v13;
        if (v13 + 16 != *(_QWORD *)v13 && v14 != 0)
        {
          *(_QWORD *)v13 = 0;
          *(_DWORD *)(v13 + 8) = 0;
          WTF::fastFree(v14, v11, (uint64_t)this, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v13, v11, (uint64_t)this, a4, a5, a6, a7, a8);
      }
      v16 = (unsigned int *)*((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((unint64_t)v16, v11, (uint64_t)this, a4, a5, a6, a7, a8);
        }
      }
      v19 = *((_QWORD *)v10 + 1);
      if ((v19 & 1) != 0)
        WTF::fastFree(v19 & 0xFFFFFFFFFFFFFFFCLL, v11, (uint64_t)this, a4, a5, a6, a7, a8);
      v8 = (JSC::PutByVariant *)((char *)v8 + 64);
      v10 = (JSC::PutByVariant *)((char *)v10 + 64);
    }
    while (v10 != a2);
  }
}

uint64_t WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2, JSC::PutByVariant *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::PutByVariant *v23;
  const JSC::PutByVariant *v24;
  unint64_t v25;

  if (a2 != a1)
  {
    v10 = *(unsigned int *)(a1 + 12);
    v11 = *(unsigned int *)(a2 + 12);
    if (v10 > v11)
    {
      WTF::VectorDestructor<true,JSC::PutByVariant>::destruct((_QWORD *)(*(_QWORD *)a1 + (v11 << 6)), (_QWORD *)(*(_QWORD *)a1 + (v10 << 6)), (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 12) = v11;
      LODWORD(v10) = v11;
    }
    else if (v11 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0, a3, a4, a5, a6, a7, a8);
      WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12), v12, v13, v14, v15, v16, v17);
      LODWORD(v10) = *(_DWORD *)(a1 + 12);
    }
    v18 = *(unsigned int ***)a2;
    v19 = *(_QWORD *)a1;
    if ((_DWORD)v10)
    {
      v20 = (unint64_t)v10 << 6;
      do
      {
        v21 = JSC::PutByVariant::operator=(v19, v18, (uint64_t)a3, a4, a5, a6, a7, a8);
        v18 += 8;
        v19 = v21 + 64;
        v20 -= 64;
      }
      while (v20);
      v18 = *(unsigned int ***)a2;
      LODWORD(v10) = *(_DWORD *)(a1 + 12);
      v19 = *(_QWORD *)a1;
    }
    v22 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 != (_DWORD)v22)
    {
      v23 = (JSC::PutByVariant *)(v19 + ((unint64_t)v10 << 6));
      v24 = (const JSC::PutByVariant *)&v18[8 * (unint64_t)v10];
      v25 = (v22 << 6) - ((unint64_t)v10 << 6);
      do
      {
        v23 = (JSC::PutByVariant *)((char *)JSC::PutByVariant::PutByVariant(v23, v24, (uint64_t)a3, a4, a5, a6, a7, a8)
                                  + 64);
        v24 = (const JSC::PutByVariant *)((char *)v24 + 64);
        v25 -= 64;
      }
      while (v25);
      LODWORD(v10) = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v10;
  }
  return a1;
}

void WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, JSC::PutByVariant *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::PutByVariant *v11;
  JSC::PutByVariant *v12;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v10 = *(unsigned int *)(a1 + 12);
    if (v10 > a2)
    {
      WTF::VectorDestructor<true,JSC::PutByVariant>::destruct((_QWORD *)(*(_QWORD *)a1 + (a2 << 6)), (_QWORD *)(*(_QWORD *)a1 + (v10 << 6)), (uint64_t)a3, a4, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v10) = a2;
    }
    v11 = *(JSC::PutByVariant **)a1;
    v12 = *(JSC::PutByVariant **)a1;
    if (a2)
    {
      if (a2 == 1)
      {
        a3 = (JSC::PutByVariant *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
      }
      else
      {
        if (a2 >> 26)
        {
          __break(0xC471u);
          return;
        }
        a3 = (JSC::PutByVariant *)WTF::fastMalloc((WTF *)(a2 << 6));
        *(_DWORD *)(a1 + 8) = a2;
        *(_QWORD *)a1 = a3;
      }
      v12 = v11;
      if (a3 != v11)
      {
        WTF::VectorTypeOperations<JSC::PutByVariant>::move(v11, (JSC::PutByVariant *)((char *)v11 + 64 * (unint64_t)v10), a3, a4, a5, a6, a7, a8);
        v12 = *(JSC::PutByVariant **)a1;
      }
    }
    if ((JSC::PutByVariant *)(a1 + 16) != v11 && v11 != 0)
    {
      if (v12 == v11)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v11, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v12 = *(JSC::PutByVariant **)a1;
    }
    if (!v12)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
  }
}

uint64_t WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t casual;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (unint64_t)a2);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  if (!(v14 >> 30))
  {
    v15 = *(unsigned int *)(result + 12);
    v16 = 4 * v14;
    v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v17)
    {
      v18 = (unint64_t)(v16 + 15) >> 4;
      if (v14 <= 0x68)
      {
        v19 = 23 * v18 + 7;
      }
      else
      {
        if (v14 > 0x9C4)
          goto LABEL_15;
        v19 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v18 + 626);
        if (*(_DWORD *)(v17 + 8052) <= v19)
          goto LABEL_15;
      }
      v21 = v17 + 8 * v19;
      v22 = v21 + 8064;
      *(_BYTE *)(v21 + 8064) = 1;
      v23 = *(unsigned int *)(v21 + 8080);
      if ((_DWORD)v23)
      {
        *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
        casual = *(_QWORD *)(v22 + 8) - v23;
      }
      else
      {
        v24 = *(_QWORD *)(v22 + 40);
        v25 = *(_QWORD *)(v22 + 24);
        if (!v24)
        {
          if (*(_BYTE *)(v22 + 5) == 6)
          {
            v31 = *(unsigned int *)(v22 + 32);
            v32 = *(_DWORD *)(v22 + 36);
            if (v31 < v32)
            {
              *(_QWORD *)(v22 + 8 * v31 + 56) = 0;
              v33 = (unint64_t *)(8 * v19 + 8 * v31 + v17 + 8128);
              v34 = v32 - 1 - v31;
              while (v34)
              {
                v25 += 1024;
                v36 = *v33++;
                v35 = v36;
                LODWORD(v31) = v31 + 1;
                --v34;
                if (v36)
                {
                  v24 = __rbit64(v35);
                  *(_DWORD *)(v22 + 32) = v31;
                  *(_QWORD *)(v22 + 24) = v25;
                  goto LABEL_24;
                }
              }
              *(_DWORD *)(v22 + 32) = v32;
            }
          }
          *(_BYTE *)v22 = 0;
          goto LABEL_15;
        }
LABEL_24:
        v26 = __clz(v24);
        *(_QWORD *)(v22 + 40) = v24 & ~(0x8000000000000000 >> v26);
        casual = v25 + 16 * v26;
      }
      *(_BYTE *)v22 = 0;
      goto LABEL_20;
    }
LABEL_15:
    casual = bmalloc_allocate_casual(v16, 1);
LABEL_20:
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = casual;
    if ((_DWORD)v15)
    {
      v27 = 4 * v15;
      v28 = (_DWORD *)casual;
      v29 = (int *)v10;
      do
      {
        v30 = *v29++;
        *v28++ = v30;
        v27 -= 4;
      }
      while (v27);
    }
    if (v10)
    {
      if (casual == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  int v20;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 30))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 4 * v8;
      v18 = (_DWORD *)v9;
      v19 = (int *)v7;
      do
      {
        v20 = *v19++;
        *v18++ = v20;
        v17 -= 4;
      }
      while (v17);
    }
    if (v7)
    {
      if (v9 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v11;
  const void *v12;
  const void *v13;
  void *v14;

  v8 = *(unsigned int *)(a1 + 8);
  if (v8 > a2)
  {
    v9 = a2;
    v11 = *(unsigned int *)(a1 + 12);
    if (v11 > a2)
    {
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v11) = a2;
    }
    v12 = *(const void **)a1;
    v13 = *(const void **)a1;
    if (a2)
    {
      if (v8 >= a2)
        v8 = a2;
      if (v8 >= 0x21)
      {
        *(_DWORD *)(a1 + 8) = a2;
        *(_QWORD *)a1 = WTF::fastRealloc((unint64_t)v12, 4 * a2, a3, a4, a5, a6, a7, a8);
        return;
      }
      if (a2 >= 0x21)
      {
        if (a2 >> 30)
        {
          __break(0xC471u);
          return;
        }
        v14 = (void *)WTF::fastMalloc((WTF *)(4 * a2));
        *(_DWORD *)(a1 + 8) = v9;
        *(_QWORD *)a1 = v14;
      }
      else
      {
        v14 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
      }
      v13 = v12;
      if (v14 != v12)
      {
        memcpy(v14, v12, 4 * v11);
        v13 = *(const void **)a1;
      }
    }
    if ((const void *)(a1 + 16) != v12 && v12 != 0)
    {
      if (v13 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v12, (void *)a2, a3, a4, a5, a6, a7, a8);
      v13 = *(const void **)a1;
    }
    if (!v13)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
  }
}

uint64_t WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x21)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 32;
LABEL_11:
    memcpy(v11, v5, 4 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  if (!(v9 >> 30))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x21)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 32;
LABEL_10:
    memcpy(v9, v7, 4 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  if (!(v5 >> 30))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

_DWORD *JSC::getJumpTargetsForInstruction<32ul,JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(_DWORD *result, int a2, int a3)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v5 = a3 + a2;
  v4 = result[3];
  if ((_DWORD)v4 == result[2])
  {
    result = (_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    *(_DWORD *)(*(_QWORD *)v3 + 4 * v3[3]) = *result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v4) = a3 + a2;
  }
  ++v3[3];
  return result;
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJbelow,JSC::CodeBlock *&>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;

  v3 = (unsigned __int8 *)(a2 + a3);
  v4 = *v3;
  if (v4 == 128)
  {
    v5 = *((__int16 *)v3 + 3);
  }
  else if (v4 == 130)
  {
    v5 = *(unsigned int *)(v3 + 10);
  }
  else
  {
    v5 = (char)v3[3];
  }
  if ((_DWORD)v5)
    return v5;
  else
    return JSC::CodeBlock::outOfLineJumpOffset(a1, (unint64_t)v3);
}

uint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpSwitchImm>(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;

  v2 = *a2;
  if (v2 == 130)
  {
    *(_DWORD *)result = *(_DWORD *)(a2 + 2);
    v7 = *(_DWORD *)(a2 + 6);
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = v7;
    v4 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v2 == 128)
    {
      *(_DWORD *)result = *((unsigned __int16 *)a2 + 1);
      v8 = *((__int16 *)a2 + 2);
      *(_BYTE *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = v8;
      v4 = *((__int16 *)a2 + 3);
      v5 = v4 + 1073741760;
      v6 = v4 <= 63;
    }
    else
    {
      *(_DWORD *)result = a2[1];
      v3 = (char)a2[2];
      *(_BYTE *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = v3;
      v4 = (char)a2[3];
      v5 = v4 + 1073741808;
      v6 = v4 <= 15;
    }
    if (!v6)
      v4 = v5;
  }
  *(_DWORD *)(result + 32) = v4;
  return result;
}

_DWORD *WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

_DWORD *JSC::getJumpTargetsForInstruction<32ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(_DWORD *result, int a2, int a3)
{
  uint64_t v3;
  int v4;

  v4 = a3 + a2;
  v3 = result[3];
  if ((_DWORD)v3 == result[2])
    return WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)result, (unint64_t)&v4);
  *(_DWORD *)(*(_QWORD *)result + 4 * v3) = a3 + a2;
  ++result[3];
  return result;
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJeqPtr,JSC::UnlinkedCodeBlockGenerator *&>(JSC::UnlinkedCodeBlockGenerator *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;

  v3 = (unsigned __int8 *)(a2 + a3);
  v4 = *v3;
  if (v4 == 128)
  {
    v5 = *((__int16 *)v3 + 3);
  }
  else if (v4 == 130)
  {
    v5 = *(unsigned int *)(v3 + 10);
  }
  else
  {
    v5 = (char)v3[3];
  }
  if ((_DWORD)v5)
    return v5;
  else
    return JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(a1, a3);
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJgreater,JSC::UnlinkedCodeBlockGenerator *&>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;

  v3 = (unsigned __int8 *)(a2 + a3);
  v4 = *v3;
  if (v4 == 128)
  {
    v5 = *((__int16 *)v3 + 3);
  }
  else if (v4 == 130)
  {
    v5 = *(unsigned int *)(v3 + 10);
  }
  else
  {
    v5 = (char)v3[3];
  }
  if (!(_DWORD)v5)
  {
    v5 = *(_QWORD *)(a1 + 176);
    if (v5)
    {
      v7 = *(_DWORD *)(v5 - 8);
      v8 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
      v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
      v10 = v7 & (v9 ^ HIWORD(v9));
      v11 = *(_DWORD *)(v5 + 8 * v10);
      if (v11 == a3)
      {
        return *(unsigned int *)(v5 + 8 * v10 + 4);
      }
      else
      {
        v12 = 1;
        while (v11)
        {
          v10 = ((_DWORD)v10 + v12) & v7;
          v11 = *(_DWORD *)(v5 + 8 * v10);
          ++v12;
          if (v11 == a3)
            return *(unsigned int *)(v5 + 8 * v10 + 4);
        }
        return 0;
      }
    }
  }
  return v5;
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJbelow,JSC::UnlinkedCodeBlockGenerator *&>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;

  v3 = (unsigned __int8 *)(a2 + a3);
  v4 = *v3;
  if (v4 == 128)
  {
    v5 = *((__int16 *)v3 + 3);
    if ((_DWORD)v5)
      return v5;
  }
  else if (v4 == 130)
  {
    v5 = *(unsigned int *)(v3 + 10);
    if ((_DWORD)v5)
      return v5;
  }
  else
  {
    v5 = (char)v3[3];
    if ((_DWORD)v5)
      return v5;
  }
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
    v10 = v7 & (v9 ^ HIWORD(v9));
    v11 = *(_DWORD *)(v5 + 8 * v10);
    if (v11 == a3)
    {
      return *(unsigned int *)(v5 + 8 * v10 + 4);
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v7;
        v11 = *(_DWORD *)(v5 + 8 * v10);
        ++v12;
        if (v11 == a3)
          return *(unsigned int *)(v5 + 8 * v10 + 4);
      }
      return 0;
    }
  }
  return v5;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

_DWORD *JSC::getJumpTargetsForInstruction<0ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(_DWORD *result, int a2, int a3)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v5 = a3 + a2;
  v4 = result[3];
  if ((_DWORD)v4 == result[2])
  {
    result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    *(_DWORD *)(*(_QWORD *)v3 + 4 * v3[3]) = *result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v4) = a3 + a2;
  }
  ++v3[3];
  return result;
}

_DWORD *JSC::getJumpTargetsForInstruction<1ul,JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(_DWORD *result, int a2, int a3)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v5 = a3 + a2;
  v4 = result[3];
  if ((_DWORD)v4 == result[2])
  {
    result = (_DWORD *)WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    *(_DWORD *)(*(_QWORD *)v3 + 4 * v3[3]) = *result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v4) = a3 + a2;
  }
  ++v3[3];
  return result;
}

_DWORD *WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 2)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_12;
  }
  if (!(v9 >> 30))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 4 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 2)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v5 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 4 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

_DWORD *JSC::getJumpTargetsForInstruction<1ul,JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const> const&,WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(int)#1}::operator()(_DWORD *result, int a2, int a3)
{
  uint64_t v3;
  int v4;

  v4 = a3 + a2;
  v3 = result[3];
  if ((_DWORD)v3 == result[2])
    return WTF::Vector<unsigned int,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)result, (unint64_t)&v4);
  *(_DWORD *)(*(_QWORD *)result + 4 * v3) = a3 + a2;
  ++result[3];
  return result;
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [18],BOOL>(WTF::CommaPrinter,char [18],BOOL const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  const char *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  const char *v21;
  WTF::PrintStream *v22;
  uint64_t v24;
  int v25;
  char v26;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = (const char *)a2[1];
  v8 = (_BYTE *)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v24, v13);
    }
    else
    {
      WTF::CString::CString(&v24, &str_25, 0);
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v24, v19);
    }
    else
    {
      WTF::CString::CString(&v24, &str_25, 0);
      v25 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v24);
    if (v25 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v25])(&v26, &v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  WTF::PrintStream::printf(v5, "%s", v6);
  if (*v8)
    v21 = "true";
  else
    v21 = "false";
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  WTF::PrintStream::printf(v22, "%s", v21);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [17],WTF::RawPointer>(WTF::CommaPrinter,char [17],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  const char *v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  float v19;
  unsigned int v20;
  uint64_t v22;
  int v23;
  char v24;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (WTF::PrintStream *)v4;
  v7 = *a2;
  v6 = (const char *)a2[1];
  v8 = (const void **)a2[2];
  if (*(_BYTE *)(*a2 + 32))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v10 = *(char **)v7;
    v11 = *(_QWORD *)(v7 + 8);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v10)
    {
      v14 = v11 - 1;
      if (!v11)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v22, v13);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    v16 = *(char **)(v7 + 16);
    v17 = *(_QWORD *)(v7 + 24);
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (v16)
    {
      v20 = v17 - 1;
      if (!v17)
        v20 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v20, (uint64_t)&v22, v19);
    }
    else
    {
      WTF::CString::CString(&v22, &str_25, 0);
      v23 = 0;
    }
    WTF::printExpectedCStringHelper(v18, "StringView", &v22);
    if (v23 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    *(_BYTE *)(v7 + 32) = 1;
  }
  WTF::PrintStream::printf(v5, "%s", v6);
  WTF::PrintStream::printf(v5, "%p", *v8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::filterICStatusVariants<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::StructureSet const&)::{lambda(WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  JSC::PutByVariant *v11;
  uint64_t v13;
  JSC::PutByVariant *v14;
  JSC::PutByVariant *v15;
  uint64_t *v16;
  _QWORD *v17;
  void *v18;
  JSC::PutByVariant *v19;
  JSC::PutByVariant *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v9 = *a1;
  v10 = *((unsigned int *)a1 + 3);
  v11 = (JSC::PutByVariant *)(*a1 + (v10 << 6));
  if (v10 <= a3)
  {
    v13 = 0;
    v14 = (JSC::PutByVariant *)(*a1 + (v10 << 6));
  }
  else
  {
    v13 = 0;
    v14 = (JSC::PutByVariant *)(*a1 + (v10 << 6));
    v15 = v14;
    v16 = (uint64_t *)(v9 + (a3 << 6));
    do
    {
      v17 = v16 + 1;
      WTF::TinyPtrSet<JSC::Structure *>::filter(v16 + 1, *a2, a3, a4, a5, a6, a7, a8);
      if ((v16[1] & 0xFFFFFFFFFFFFFFFDLL) == 0)
      {
        v21 = (JSC::PutByVariant *)v16;
        if (v15 != (JSC::PutByVariant *)(*a1 + ((unint64_t)*((unsigned int *)a1 + 3) << 6)))
        {
          if (v14 == (JSC::PutByVariant *)v16)
          {
            v21 = v15;
          }
          else
          {
            WTF::VectorMover<false,JSC::PutByVariant>::moveOverlapping(v14, (JSC::PutByVariant *)v16, v15, a4, a5, a6, a7, a8);
            v21 = (JSC::PutByVariant *)((char *)v15 + (char *)v16 - (char *)v14);
          }
        }
        v22 = v16[6];
        v16[6] = 0;
        if (v22)
          WTF::fastFree(v22, v18, a3, a4, a5, a6, a7, a8);
        v23 = v16[4];
        v16[4] = 0;
        if (v23)
        {
          v24 = *(_QWORD *)v23;
          if (v23 + 16 != *(_QWORD *)v23 && v24 != 0)
          {
            *(_QWORD *)v23 = 0;
            *(_DWORD *)(v23 + 8) = 0;
            WTF::fastFree(v24, v18, a3, a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v23, v18, a3, a4, a5, a6, a7, a8);
        }
        v26 = (unsigned int *)v16[3];
        v16[3] = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            WTF::fastFree((unint64_t)v26, v18, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*v17 & 1) != 0)
          WTF::fastFree(*v17 & 0xFFFFFFFFFFFFFFFCLL, v18, a3, a4, a5, a6, a7, a8);
        v14 = (JSC::PutByVariant *)(v16 + 8);
        v13 = (v13 + 1);
        v15 = v21;
      }
      v16 += 8;
    }
    while (v16 < (uint64_t *)v11);
    v9 = *a1;
    v10 = *((unsigned int *)a1 + 3);
    v11 = v15;
  }
  v19 = (JSC::PutByVariant *)(v9 + (v10 << 6));
  if (v14 != v19)
  {
    WTF::VectorMover<false,JSC::PutByVariant>::moveOverlapping(v14, v19, v11, a4, a5, a6, a7, a8);
    LODWORD(v10) = *((_DWORD *)a1 + 3);
  }
  *((_DWORD *)a1 + 3) = v10 - v13;
  return v13;
}

void WTF::VectorMover<false,JSC::PutByVariant>::moveOverlapping(JSC::PutByVariant *a1, JSC::PutByVariant *a2, JSC::PutByVariant *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::PutByVariant *v8;
  JSC::PutByVariant *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a2;
  if (a1 <= a3)
  {
    if (a2 != a1)
    {
      v10 = (JSC::PutByVariant *)((char *)a3 + ((a2 - a1) & 0xFFFFFFFFFFFFFFC0) - 64);
      do
      {
        v8 = (const JSC::PutByVariant *)((char *)v8 - 64);
        JSC::PutByVariant::PutByVariant(v10, v8, (uint64_t)a3, a4, a5, a6, a7, a8);
        JSC::PutByVariant::~PutByVariant(v8, v11, v12, v13, v14, v15, v16, v17);
        v10 = (JSC::PutByVariant *)((char *)v10 - 64);
      }
      while (v8 != a1);
    }
  }
  else
  {
    WTF::VectorTypeOperations<JSC::PutByVariant>::move(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

JSC::PutByVariant ***WTF::ListDump<WTF::Vector<JSC::PutByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(JSC::PutByVariant ***result, uint64_t a2)
{
  JSC::PutByVariant ***v3;
  JSC::PutByVariant *v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  JSC::PutByVariant **v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  JSC::PutByVariant **v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = (char *)v3[1];
        v11 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = (_DWORD)v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v20, v13);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = (char *)v3[3];
        v16 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = (_DWORD)v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v20, v18);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      JSC::PutByVariant::dumpInContext(v4, v5, 0);
      result = (JSC::PutByVariant ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = (JSC::PutByVariant *)((char *)v4 + 64);
    }
    while (v4 != (JSC::PutByVariant *)((char *)**v3 + 64 * (unint64_t)*((unsigned int *)*v3 + 3)));
  }
  return result;
}

uint64_t JSC::RecordedStatuses::markIfCheap<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = result;
  v4 = *(unsigned int *)(result + 28);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(result + 16);
    v6 = v5 + 16 * v4;
    do
    {
      v7 = *(_QWORD *)(v5 + 8);
      v8 = *(unsigned int *)(v7 + 12);
      if ((_DWORD)v8)
      {
        v9 = *(unint64_t **)v7;
        v10 = (unint64_t *)(*(_QWORD *)v7 + (v8 << 6));
        do
        {
          v11 = *v9;
          if ((*v9 & 1) != 0)
            v12 = *(unsigned int *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
          else
            v12 = v11 > 3;
          if (v12)
          {
            v13 = 0;
            v14 = 8 * v12;
            do
            {
              v15 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
              if ((*v9 & 1) != 0)
                v15 = *(_QWORD *)(v15 + v13 + 8);
              if ((!*(_QWORD *)(v15 + 40) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
                && ((*(_QWORD *)(v15 + 48) | 2) == 2
                 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
              {
                result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 24))(a2, v15);
              }
              else
              {
                result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v15);
              }
              v13 += 8;
            }
            while (v14 != v13);
          }
          v9 += 8;
        }
        while (v9 != v10);
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  v16 = *(unsigned int *)(v3 + 44);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 32) + 8);
    do
    {
      v19 = *v18;
      v18 += 2;
      result = JSC::PutByStatus::markIfCheap<JSC::AbstractSlotVisitor>(v19, a2);
      v17 -= 16;
    }
    while (v17);
  }
  v20 = *(unsigned int *)(v3 + 60);
  if ((_DWORD)v20)
  {
    v24 = 16 * v20;
    v25 = (_QWORD **)(*(_QWORD *)(v3 + 48) + 8);
    do
    {
      v26 = *v25;
      v25 += 2;
      result = (uint64_t)JSC::InByStatus::markIfCheap<JSC::AbstractSlotVisitor>(v26, a2);
      v24 -= 16;
    }
    while (v24);
  }
  v21 = *(unsigned int *)(v3 + 76);
  if ((_DWORD)v21)
  {
    v27 = 16 * v21;
    v28 = (uint64_t *)(*(_QWORD *)(v3 + 64) + 8);
    do
    {
      v29 = *v28;
      v28 += 2;
      result = JSC::DeleteByStatus::markIfCheap<JSC::AbstractSlotVisitor>(v29, a2);
      v27 -= 16;
    }
    while (v27);
  }
  v22 = *(unsigned int *)(v3 + 92);
  if ((_DWORD)v22)
  {
    v30 = 16 * v22;
    v31 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8);
    do
    {
      v32 = *v31;
      v31 += 2;
      result = JSC::CheckPrivateBrandStatus::markIfCheap<JSC::AbstractSlotVisitor>(v32, a2);
      v30 -= 16;
    }
    while (v30);
  }
  v23 = *(unsigned int *)(v3 + 108);
  if ((_DWORD)v23)
  {
    v33 = *(_QWORD *)(v3 + 96);
    v34 = 16 * v23;
    v35 = (uint64_t *)(v33 + 8);
    do
    {
      v36 = *v35;
      v35 += 2;
      result = JSC::SetPrivateBrandStatus::markIfCheap<JSC::AbstractSlotVisitor>(v36, a2);
      v34 -= 16;
    }
    while (v34);
  }
  return result;
}

uint64_t JSC::SetPrivateBrandStatus::markIfCheap<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(_DWORD *)(result + 12);
  if (v2)
  {
    v4 = *(uint64_t **)result;
    v5 = *(_QWORD *)result + 24 * v2;
    do
    {
      if (*v4)
        JSC::Structure::markIfCheap<JSC::AbstractSlotVisitor>(*v4, a2);
      result = v4[1];
      if (result)
        result = JSC::Structure::markIfCheap<JSC::AbstractSlotVisitor>(result, a2);
      v4 += 3;
    }
    while (v4 != (uint64_t *)v5);
  }
  return result;
}

unint64_t JSC::RecordedStatuses::markIfCheap<JSC::SlotVisitor>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD **v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;

  v9 = result;
  v10 = *(unsigned int *)(result + 28);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(result + 16);
    v12 = v11 + 16 * v10;
    do
    {
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(unsigned int *)(v13 + 12);
      if ((_DWORD)v14)
      {
        v15 = *(unint64_t **)v13;
        v16 = (unint64_t *)(*(_QWORD *)v13 + (v14 << 6));
        do
        {
          v17 = *v15;
          if ((*v15 & 1) != 0)
            v18 = *(unsigned int *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
          else
            v18 = v17 > 3;
          if (v18)
          {
            v19 = 0;
            v20 = 8 * v18;
            do
            {
              v21 = *v15 & 0xFFFFFFFFFFFFFFFCLL;
              if ((*v15 & 1) != 0)
                v21 = *(_QWORD *)(v21 + v19 + 8);
              result = JSC::Structure::markIfCheap<JSC::SlotVisitor>(v21, a2, a3, a4, a5, a6, a7, a8);
              v19 += 8;
            }
            while (v20 != v19);
          }
          v15 += 8;
        }
        while (v15 != v16);
      }
      v11 += 16;
    }
    while (v11 != v12);
  }
  v22 = *(unsigned int *)(v9 + 44);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)(v9 + 32);
    v24 = v23 + 16 * v22;
    do
    {
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(unsigned int *)(v25 + 20);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(v25 + 8);
        v28 = v27 + (v26 << 6);
        do
        {
          v29 = *(_QWORD *)(v27 + 8);
          if ((v29 & 1) != 0)
            v30 = *(unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          else
            v30 = v29 > 3;
          if (v30)
          {
            v31 = 0;
            v32 = 8 * v30;
            do
            {
              v33 = *(_QWORD *)(v27 + 8);
              v34 = v33 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v33 & 1) != 0)
                v34 = *(_QWORD *)(v34 + v31 + 8);
              JSC::Structure::markIfCheap<JSC::SlotVisitor>(v34, a2, a3, a4, a5, a6, a7, a8);
              v31 += 8;
            }
            while (v32 != v31);
          }
          result = *(_QWORD *)(v27 + 16);
          if (result)
            result = JSC::Structure::markIfCheap<JSC::SlotVisitor>(result, a2, a3, a4, a5, a6, a7, a8);
          v27 += 64;
        }
        while (v27 != v28);
      }
      v23 += 16;
    }
    while (v23 != v24);
  }
  v35 = *(unsigned int *)(v9 + 60);
  if ((_DWORD)v35)
  {
    v39 = *(_QWORD *)(v9 + 48);
    v40 = v39 + 16 * v35;
    do
    {
      v41 = *(_QWORD *)(v39 + 8);
      v42 = *(unsigned int *)(v41 + 20);
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD **)(v41 + 8);
        v44 = 32 * v42;
        do
        {
          result = (unint64_t)JSC::StructureSet::markIfCheap<JSC::SlotVisitor>(v43, a2, a3, a4, a5, a6, a7, a8);
          v43 += 4;
          v44 -= 32;
        }
        while (v44);
      }
      v39 += 16;
    }
    while (v39 != v40);
  }
  v36 = *(unsigned int *)(v9 + 76);
  if ((_DWORD)v36)
  {
    v45 = 16 * v36;
    v46 = (unint64_t *)(*(_QWORD *)(v9 + 64) + 8);
    do
    {
      v47 = *v46;
      v46 += 2;
      result = JSC::DeleteByStatus::markIfCheap<JSC::SlotVisitor>(v47, a2, a3, a4, a5, a6, a7, a8);
      v45 -= 16;
    }
    while (v45);
  }
  v37 = *(unsigned int *)(v9 + 92);
  if ((_DWORD)v37)
  {
    v48 = 16 * v37;
    v49 = (_QWORD **)(*(_QWORD *)(v9 + 80) + 8);
    do
    {
      v50 = *v49;
      v49 += 2;
      result = (unint64_t)JSC::CheckPrivateBrandStatus::markIfCheap<JSC::SlotVisitor>(v50, a2, a3, a4, a5, a6, a7, a8);
      v48 -= 16;
    }
    while (v48);
  }
  v38 = *(unsigned int *)(v9 + 108);
  if ((_DWORD)v38)
  {
    v51 = *(_QWORD *)(v9 + 96);
    v52 = 16 * v38;
    v53 = (unint64_t *)(v51 + 8);
    do
    {
      v54 = *v53;
      v53 += 2;
      result = JSC::SetPrivateBrandStatus::markIfCheap<JSC::SlotVisitor>(v54, a2, a3, a4, a5, a6, a7, a8);
      v52 -= 16;
    }
    while (v52);
  }
  return result;
}

unint64_t JSC::SetPrivateBrandStatus::markIfCheap<JSC::SlotVisitor>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t *v10;
  uint64_t v11;

  v8 = *(_DWORD *)(result + 12);
  if (v8)
  {
    v10 = *(unint64_t **)result;
    v11 = *(_QWORD *)result + 24 * v8;
    do
    {
      if (*v10)
        JSC::Structure::markIfCheap<JSC::SlotVisitor>(*v10, a2, a3, a4, a5, a6, a7, a8);
      result = v10[1];
      if (result)
        result = JSC::Structure::markIfCheap<JSC::SlotVisitor>(result, a2, a3, a4, a5, a6, a7, a8);
      v10 += 3;
    }
    while (v10 != (unint64_t *)v11);
  }
  return result;
}

_QWORD *JSC::RecordedStatuses::addCallLinkStatus(JSC::RecordedStatuses *this, const JSC::CodeOrigin *a2, uint64_t **a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;

  v13 = (_DWORD *)WTF::fastMalloc((WTF *)0x20);
  v14 = *((unsigned int *)a3 + 3);
  result = v13 + 4;
  *(_QWORD *)v13 = v13 + 4;
  v13[2] = 1;
  v13[3] = v14;
  if (v14 >= 2)
  {
    if (v14 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
    v13[2] = v14;
    *(_QWORD *)v13 = result;
  }
  v16 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v16)
  {
    v21 = *a3;
    v22 = 8 * v16;
    do
    {
      v23 = *v21++;
      *result++ = v23;
      v22 -= 8;
    }
    while (v22);
  }
  v13[6] = *((_DWORD *)a3 + 6);
  v17 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v31 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v32 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v35 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v35 = v31;
      *(_DWORD *)(v35 + 8) = v32;
      v34 = 1;
      v31 = v35;
    }
    else
    {
      v34 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v31 = v32 << 36;
    }
    v17 = v31 | v34;
  }
  v36 = v17;
  v37 = (WTF *)v13;
  v18 = *((unsigned int *)this + 3);
  if ((_DWORD)v18 == *((_DWORD *)this + 2))
  {
    v24 = (uint64_t *)WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v18 + 1, (unint64_t)&v36);
    v25 = *((unsigned int *)this + 3);
    v26 = (_QWORD *)(*(_QWORD *)this + 16 * v25);
    v27 = *v24;
    *v24 = 0;
    *v26 = v27;
    v28 = v24[1];
    v24[1] = 0;
    v26[1] = v28;
    v29 = v37;
    *((_DWORD *)this + 3) = v25 + 1;
    v37 = 0;
    if (v29)
    {
      v30 = *(_QWORD *)v29;
      if ((WTF *)((char *)v29 + 16) != *(WTF **)v29 && v30)
      {
        *(_QWORD *)v29 = 0;
        *((_DWORD *)v29 + 2) = 0;
        WTF::fastFree(v30, v6, v7, v8, v9, v10, v11, v12);
      }
      WTF::fastFree((unint64_t)v29, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  else
  {
    v19 = *(_QWORD *)this;
    v36 = 0;
    v20 = (uint64_t *)(v19 + 16 * v18);
    *v20 = v17;
    v20[1] = (uint64_t)v13;
    *((_DWORD *)this + 3) = v18 + 1;
    v37 = 0;
  }
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v6, v7, v8, v9, v10, v11, v12);
  return v13;
}

uint64_t *std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>::~pair(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v9 = a1[1];
  a1[1] = 0;
  if (v9)
  {
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *a1;
  if ((*a1 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

JSC::GetByVariant *JSC::RecordedStatuses::addGetByStatus(JSC::RecordedStatuses *this, const JSC::CodeOrigin *a2, const JSC::GetByStatus *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::GetByVariant *result;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const JSC::GetByVariant *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  JSC::GetByVariant *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;

  v13 = WTF::fastMalloc((WTF *)0x60);
  v14 = *((unsigned int *)a3 + 3);
  result = (JSC::GetByVariant *)(v13 + 16);
  *(_QWORD *)v13 = v13 + 16;
  *(_DWORD *)(v13 + 8) = 1;
  *(_DWORD *)(v13 + 12) = v14;
  if (v14 >= 2)
  {
    if (v14 >> 26)
    {
      __break(0xC471u);
      return result;
    }
    result = (JSC::GetByVariant *)WTF::fastMalloc((WTF *)(v14 << 6));
    *(_DWORD *)(v13 + 8) = v14;
    *(_QWORD *)v13 = result;
  }
  v16 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v16)
  {
    v23 = *(const JSC::GetByVariant **)a3;
    v24 = v16 << 6;
    do
    {
      result = (JSC::GetByVariant *)((char *)JSC::GetByVariant::GetByVariant(result, v23, v7, v8, v9, v10, v11, v12) + 64);
      v23 = (const JSC::GetByVariant *)((char *)v23 + 64);
      v24 -= 64;
    }
    while (v24);
  }
  v17 = (unsigned int *)*((_QWORD *)a3 + 10);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(v13 + 80) = v17;
  *(_WORD *)(v13 + 88) = *((_WORD *)a3 + 44);
  v19 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v40 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v41 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
        ? (v42 = (_DWORD)v41 == -1)
        : (v42 = 1),
          v42))
    {
      v43 = 2;
    }
    else if (v41 >> 28)
    {
      v44 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = v40;
      *(_DWORD *)(v44 + 8) = v41;
      v43 = 1;
      v40 = v44;
    }
    else
    {
      v43 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v40 = v41 << 36;
    }
    v19 = v40 | v43;
  }
  v45 = v19;
  v46 = (WTF *)v13;
  v20 = *((unsigned int *)this + 7);
  if ((_DWORD)v20 == *((_DWORD *)this + 6))
  {
    v25 = (uint64_t *)WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 16, v20 + 1, (unint64_t)&v45);
    v26 = *((unsigned int *)this + 7);
    v27 = (_QWORD *)(*((_QWORD *)this + 2) + 16 * v26);
    v28 = *v25;
    *v25 = 0;
    *v27 = v28;
    v29 = v25[1];
    v25[1] = 0;
    v27[1] = v29;
    v30 = v46;
    *((_DWORD *)this + 7) = v26 + 1;
    v46 = 0;
    if (v30)
    {
      v31 = (unsigned int *)*((_QWORD *)v30 + 10);
      *((_QWORD *)v30 + 10) = 0;
      if (v31)
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::fastFree((unint64_t)v31, v6, v7, v8, v9, v10, v11, v12);
        }
      }
      v34 = *((unsigned int *)v30 + 3);
      if ((_DWORD)v34)
      {
        v37 = *(JSC::GetByVariant **)v30;
        v38 = v34 << 6;
        do
        {
          JSC::GetByVariant::~GetByVariant(v37, v6, v7, v8, v9, v10, v11, v12);
          v37 = (JSC::GetByVariant *)(v39 + 64);
          v38 -= 64;
        }
        while (v38);
      }
      v35 = *(_QWORD *)v30;
      if ((WTF *)((char *)v30 + 16) != *(WTF **)v30 && v35 != 0)
      {
        *(_QWORD *)v30 = 0;
        *((_DWORD *)v30 + 2) = 0;
        WTF::fastFree(v35, v6, v7, v8, v9, v10, v11, v12);
      }
      WTF::fastFree((unint64_t)v30, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  else
  {
    v21 = *((_QWORD *)this + 2);
    v45 = 0;
    v22 = (uint64_t *)(v21 + 16 * v20);
    *v22 = v19;
    v22[1] = v13;
    *((_DWORD *)this + 7) = v20 + 1;
    v46 = 0;
  }
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v6, v7, v8, v9, v10, v11, v12);
  return (JSC::GetByVariant *)v13;
}

JSC::PutByVariant *JSC::RecordedStatuses::addPutByStatus(JSC::RecordedStatuses *this, const JSC::CodeOrigin *a2, const JSC::PutByStatus *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::PutByVariant *result;
  uint64_t v15;
  uint64_t v16;
  const JSC::PutByVariant *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;

  v13 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)v13 = *(_DWORD *)a3;
  result = (JSC::PutByVariant *)(v13 + 24);
  v15 = *((unsigned int *)a3 + 5);
  *(_QWORD *)(v13 + 8) = v13 + 24;
  *(_DWORD *)(v13 + 16) = 1;
  *(_DWORD *)(v13 + 20) = v15;
  if (v15 >= 2)
  {
    if (v15 >> 26)
    {
      __break(0xC471u);
      return result;
    }
    result = (JSC::PutByVariant *)WTF::fastMalloc((WTF *)(v15 << 6));
    *(_DWORD *)(v13 + 16) = v15;
    *(_QWORD *)(v13 + 8) = result;
  }
  v16 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v16)
  {
    v17 = (const JSC::PutByVariant *)*((_QWORD *)a3 + 1);
    v18 = v16 << 6;
    do
    {
      result = (JSC::PutByVariant *)((char *)JSC::PutByVariant::PutByVariant(result, v17, v7, v8, v9, v10, v11, v12) + 64);
      v17 = (const JSC::PutByVariant *)((char *)v17 + 64);
      v18 -= 64;
    }
    while (v18);
  }
  v19 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v32 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v33 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v36 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = v32;
      *(_DWORD *)(v36 + 8) = v33;
      v35 = 1;
      v32 = v36;
    }
    else
    {
      v35 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v32 = v33 << 36;
    }
    v19 = v32 | v35;
  }
  v37 = v19;
  v38 = (WTF *)v13;
  v20 = *((unsigned int *)this + 11);
  if ((_DWORD)v20 == *((_DWORD *)this + 10))
  {
    v23 = (uint64_t *)WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v20 + 1, (unint64_t)&v37);
    v24 = *((unsigned int *)this + 11);
    v25 = (_QWORD *)(*((_QWORD *)this + 4) + 16 * v24);
    v26 = *v23;
    *v23 = 0;
    *v25 = v26;
    v27 = v23[1];
    v23[1] = 0;
    v25[1] = v27;
    v28 = v38;
    *((_DWORD *)this + 11) = v24 + 1;
    v38 = 0;
    if (v28)
    {
      v29 = *((unsigned int *)v28 + 5);
      if ((_DWORD)v29)
        WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*((_QWORD **)v28 + 1), (_QWORD *)(*((_QWORD *)v28 + 1) + (v29 << 6)), v7, v8, v9, v10, v11, v12);
      v30 = *((_QWORD *)v28 + 1);
      if ((WTF *)((char *)v28 + 24) != (WTF *)v30 && v30 != 0)
      {
        *((_QWORD *)v28 + 1) = 0;
        *((_DWORD *)v28 + 4) = 0;
        WTF::fastFree(v30, v6, v7, v8, v9, v10, v11, v12);
      }
      WTF::fastFree((unint64_t)v28, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  else
  {
    v21 = *((_QWORD *)this + 4);
    v37 = 0;
    v22 = (uint64_t *)(v21 + 16 * v20);
    *v22 = v19;
    v22[1] = v13;
    *((_DWORD *)this + 11) = v20 + 1;
    v38 = 0;
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v6, v7, v8, v9, v10, v11, v12);
  return (JSC::PutByVariant *)v13;
}

uint64_t *std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>::~pair(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v9 = a1[1];
  a1[1] = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v10)
      WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*(_QWORD **)(v9 + 8), (_QWORD *)(*(_QWORD *)(v9 + 8) + (v10 << 6)), a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v9 + 24 != v11 && v11 != 0)
    {
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *a1;
  if ((*a1 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t JSC::RecordedStatuses::addInByStatus(JSC::RecordedStatuses *this, const JSC::CodeOrigin *a2, const JSC::InByStatus *a3)
{
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;

  result = WTF::fastMalloc((WTF *)0x38);
  v14 = result;
  *(_DWORD *)result = *(_DWORD *)a3;
  v15 = *((unsigned int *)a3 + 5);
  v16 = result + 24;
  *(_QWORD *)(result + 8) = result + 24;
  *(_DWORD *)(result + 16) = 1;
  *(_DWORD *)(result + 20) = v15;
  if (v15 >= 2)
  {
    if (v15 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    v16 = WTF::fastMalloc((WTF *)(32 * v15));
    *(_DWORD *)(v14 + 16) = v15;
    *(_QWORD *)(v14 + 8) = v16;
  }
  v17 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v17)
  {
    v31 = *((_QWORD *)a3 + 1);
    v32 = v31 + 32 * v17;
    do
    {
      *(_QWORD *)v16 = 0;
      if ((*(_QWORD *)v31 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v16, (_QWORD *)v31);
      else
        *(_QWORD *)v16 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFFDLL;
      v33 = *(unsigned int **)(v31 + 8);
      if (v33)
      {
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 + 1, v33));
      }
      *(_QWORD *)(v16 + 8) = v33;
      *(_OWORD *)(v16 + 16) = *(_OWORD *)(v31 + 16);
      v16 += 32;
      v31 += 32;
    }
    while (v31 != v32);
  }
  v18 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v40 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
    if ((v18 & 2) != 0
      || ((v41 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
        ? (v42 = (_DWORD)v41 == -1)
        : (v42 = 1),
          v42))
    {
      v43 = 2;
    }
    else if (v41 >> 28)
    {
      v44 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = v40;
      *(_DWORD *)(v44 + 8) = v41;
      v43 = 1;
      v40 = v44;
    }
    else
    {
      v43 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      v40 = v41 << 36;
    }
    v18 = v40 | v43;
  }
  v45 = v18;
  v46 = (WTF *)v14;
  v19 = *((unsigned int *)this + 15);
  if ((_DWORD)v19 == *((_DWORD *)this + 14))
  {
    v20 = (uint64_t *)WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 48, v19 + 1, (unint64_t)&v45);
    v21 = *((unsigned int *)this + 15);
    v22 = (_QWORD *)(*((_QWORD *)this + 6) + 16 * v21);
    v23 = *v20;
    *v20 = 0;
    *v22 = v23;
    v24 = v20[1];
    v20[1] = 0;
    v22[1] = v24;
    v25 = v46;
    *((_DWORD *)this + 15) = v21 + 1;
    v46 = 0;
    if (v25)
    {
      v26 = *((unsigned int *)v25 + 5);
      if ((_DWORD)v26)
      {
        v35 = (_QWORD *)*((_QWORD *)v25 + 1);
        v36 = &v35[4 * v26];
        do
        {
          v37 = (unsigned int *)v35[1];
          v35[1] = 0;
          if (v37)
          {
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              atomic_store(1u, v37);
              WTF::fastFree((unint64_t)v37, v7, v8, v9, v10, v11, v12, v13);
            }
          }
          if ((*v35 & 1) != 0)
            WTF::fastFree(*v35 & 0xFFFFFFFFFFFFFFFCLL, v7, v8, v9, v10, v11, v12, v13);
          v35 += 4;
        }
        while (v35 != v36);
      }
      v27 = *((_QWORD *)v25 + 1);
      if ((WTF *)((char *)v25 + 24) != (WTF *)v27 && v27 != 0)
      {
        *((_QWORD *)v25 + 1) = 0;
        *((_DWORD *)v25 + 4) = 0;
        WTF::fastFree(v27, v7, v8, v9, v10, v11, v12, v13);
      }
      WTF::fastFree((unint64_t)v25, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  else
  {
    v29 = *((_QWORD *)this + 6);
    v45 = 0;
    v30 = (uint64_t *)(v29 + 16 * v19);
    *v30 = v18;
    v30[1] = v14;
    *((_DWORD *)this + 15) = v19 + 1;
    v46 = 0;
  }
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
  return v14;
}

uint64_t JSC::RecordedStatuses::addDeleteByStatus(JSC::RecordedStatuses *this, const JSC::CodeOrigin *a2, const JSC::DeleteByStatus *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::make_unique[abi:sn180100]<JSC::DeleteByStatus,JSC::DeleteByStatus const&>(&v28, (uint64_t *)a3);
  v5 = v28;
  std::make_pair[abi:sn180100]<JSC::CodeOrigin const&,std::unique_ptr<JSC::DeleteByStatus>>(&v26, *(_QWORD *)a2, &v28);
  v13 = *((unsigned int *)this + 19);
  if ((_DWORD)v13 == *((_DWORD *)this + 18))
  {
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>>((uint64_t)this + 64, (unint64_t)&v26);
  }
  else
  {
    v22 = v13 + 1;
    v23 = (uint64_t *)(*((_QWORD *)this + 8) + 16 * v13);
    v24 = v26;
    v25 = v27;
    v26 = 0;
    v27 = 0;
    *v23 = v24;
    v23[1] = v25;
    *((_DWORD *)this + 19) = v22;
  }
  std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>::~pair(&v26, v6, v7, v8, v9, v10, v11, v12);
  std::unique_ptr<JSC::DeleteByStatus>::~unique_ptr[abi:sn180100]((unint64_t *)&v28, v14, v15, v16, v17, v18, v19, v20);
  return v5;
}

uint64_t *std::make_pair[abi:sn180100]<JSC::CodeOrigin const&,std::unique_ptr<JSC::DeleteByStatus>>(uint64_t *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;

  if ((a2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || ((v5 = *(unsigned int *)((a2 & 0xFFFFFFFF8) + 8), (_DWORD)v5 != 0x3FFFFFFF)
        ? (v6 = (_DWORD)v5 == -1)
        : (v6 = 1),
          v6))
    {
      v7 = 2;
    }
    else if (v5 >> 28)
    {
      v10 = a3;
      v11 = result;
      v8 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v9 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
      v4 = WTF::fastMalloc((WTF *)0x10);
      a3 = v10;
      result = v11;
      *(_QWORD *)v4 = v8;
      *(_DWORD *)(v4 + 8) = v9;
      v7 = 1;
    }
    else
    {
      v7 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v4 = v5 << 36;
    }
    a2 = v4 | v7;
  }
  v3 = *a3;
  *a3 = 0;
  *result = a2;
  result[1] = v3;
  return result;
}

unint64_t *std::unique_ptr<JSC::DeleteByStatus>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::RecordedStatuses::addCheckPrivateBrandStatus(JSC::RecordedStatuses *this, const JSC::CodeOrigin *a2, const JSC::CheckPrivateBrandStatus *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::make_unique[abi:sn180100]<JSC::CheckPrivateBrandStatus,JSC::CheckPrivateBrandStatus const&>(&v28, (uint64_t)a3);
  v5 = v28;
  std::make_pair[abi:sn180100]<JSC::CodeOrigin const&,std::unique_ptr<JSC::DeleteByStatus>>(&v26, *(_QWORD *)a2, &v28);
  v13 = *((unsigned int *)this + 23);
  if ((_DWORD)v13 == *((_DWORD *)this + 22))
  {
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>>((uint64_t)this + 80, (unint64_t)&v26);
  }
  else
  {
    v22 = v13 + 1;
    v23 = (uint64_t *)(*((_QWORD *)this + 10) + 16 * v13);
    v24 = v26;
    v25 = v27;
    v26 = 0;
    v27 = 0;
    *v23 = v24;
    v23[1] = v25;
    *((_DWORD *)this + 23) = v22;
  }
  std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>::~pair(&v26, v6, v7, v8, v9, v10, v11, v12);
  std::unique_ptr<JSC::CheckPrivateBrandStatus>::~unique_ptr[abi:sn180100]((unint64_t *)&v28, v14, v15, v16, v17, v18, v19, v20);
  return v5;
}

uint64_t *std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>::~pair(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v15;

  v9 = a1[1];
  a1[1] = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    v11 = *(_QWORD **)v9;
    if ((_DWORD)v10)
    {
      v15 = 16 * v10;
      do
      {
        if ((*v11 & 1) != 0)
          WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v11 += 2;
        v15 -= 16;
      }
      while (v15);
      v11 = *(_QWORD **)v9;
    }
    if ((_QWORD *)(v9 + 16) != v11 && v11 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *a1;
  if ((*a1 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

unint64_t *std::unique_ptr<JSC::CheckPrivateBrandStatus>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v14;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    v11 = *(_QWORD **)v9;
    if ((_DWORD)v10)
    {
      v14 = 16 * v10;
      do
      {
        if ((*v11 & 1) != 0)
          WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v11 += 2;
        v14 -= 16;
      }
      while (v14);
      v11 = *(_QWORD **)v9;
    }
    if ((_QWORD *)(v9 + 16) != v11 && v11 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::RecordedStatuses::addSetPrivateBrandStatus(JSC::RecordedStatuses *this, const JSC::CodeOrigin *a2, const JSC::SetPrivateBrandStatus *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;

  v13 = WTF::fastMalloc((WTF *)0x30);
  v14 = *((unsigned int *)a3 + 3);
  result = v13 + 16;
  *(_QWORD *)v13 = v13 + 16;
  *(_DWORD *)(v13 + 8) = 1;
  *(_DWORD *)(v13 + 12) = v14;
  if (v14 >= 2)
  {
    if (v14 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v16 = 24 * v14;
    result = WTF::fastMalloc((WTF *)(24 * v14));
    *(_DWORD *)(v13 + 8) = (v16 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v13 = result;
  }
  v17 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v17)
  {
    v18 = *(__int128 **)a3;
    v19 = 24 * v17;
    do
    {
      v20 = *v18;
      *(_QWORD *)(result + 16) = *((_QWORD *)v18 + 2);
      *(_OWORD *)result = v20;
      result += 24;
      v18 = (__int128 *)((char *)v18 + 24);
      v19 -= 24;
    }
    while (v19);
  }
  *(_BYTE *)(v13 + 40) = *((_BYTE *)a3 + 40);
  v21 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v32 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v33 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v33 != 0x3FFFFFFF)
        ? (v34 = (_DWORD)v33 == -1)
        : (v34 = 1),
          v34))
    {
      v35 = 2;
    }
    else if (v33 >> 28)
    {
      v36 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = v32;
      *(_DWORD *)(v36 + 8) = v33;
      v35 = 1;
      v32 = v36;
    }
    else
    {
      v35 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v32 = v33 << 36;
    }
    v21 = v32 | v35;
  }
  v37 = v21;
  v38 = (WTF *)v13;
  v22 = *((unsigned int *)this + 27);
  if ((_DWORD)v22 == *((_DWORD *)this + 26))
  {
    v23 = (uint64_t *)WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::SetPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 96, v22 + 1, (unint64_t)&v37);
    v24 = *((unsigned int *)this + 27);
    v25 = (_QWORD *)(*((_QWORD *)this + 12) + 16 * v24);
    v26 = *v23;
    *v23 = 0;
    *v25 = v26;
    v27 = v23[1];
    v23[1] = 0;
    v25[1] = v27;
    v28 = v38;
    *((_DWORD *)this + 27) = v24 + 1;
    v38 = 0;
    if (v28)
    {
      v29 = *(_QWORD *)v28;
      if ((WTF *)((char *)v28 + 16) != *(WTF **)v28 && v29)
      {
        *(_QWORD *)v28 = 0;
        *((_DWORD *)v28 + 2) = 0;
        WTF::fastFree(v29, v6, v7, v8, v9, v10, v11, v12);
      }
      WTF::fastFree((unint64_t)v28, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  else
  {
    v30 = *((_QWORD *)this + 12);
    v37 = 0;
    v31 = (uint64_t *)(v30 + 16 * v22);
    *v31 = v21;
    v31[1] = v13;
    *((_DWORD *)this + 27) = v22 + 1;
    v38 = 0;
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v6, v7, v8, v9, v10, v11, v12);
  return v13;
}

uint64_t JSC::RecordedStatuses::visitAggregate(uint64_t this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  v3 = this;
  v4 = *(unsigned int *)(this + 28);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(this + 16);
    v6 = v5 + 16 * v4;
    do
    {
      v7 = *(uint64_t **)(v5 + 8);
      if (*((_BYTE *)v7 + 88) == 4 && *(_QWORD *)(v7[10] + 32) && (*(_QWORD *)(v7[10] + 32) & 1) == 0)
        this = (*(uint64_t (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v8 = *((unsigned int *)v7 + 3);
      if ((_DWORD)v8)
      {
        v9 = *v7;
        v10 = v8 << 6;
        v11 = (uint64_t *)(v9 + 56);
        do
        {
          v12 = *v11;
          v11 += 8;
          v13 = v12 & 1;
          if (v12)
            v14 = v13 == 0;
          else
            v14 = 0;
          if (v14)
            this = (*(uint64_t (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
          v10 -= 64;
        }
        while (v10);
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  v15 = *(unsigned int *)(v3 + 44);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(v3 + 32);
    v17 = v16 + 16 * v15;
    do
    {
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(unsigned int *)(v18 + 20);
      if ((_DWORD)v19)
      {
        v20 = v19 << 6;
        v21 = (uint64_t *)(*(_QWORD *)(v18 + 8) + 56);
        do
        {
          v22 = *v21;
          v21 += 8;
          v23 = v22 & 1;
          if (v22)
            v24 = v23 == 0;
          else
            v24 = 0;
          if (v24)
            this = (*(uint64_t (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
          v20 -= 64;
        }
        while (v20);
      }
      v16 += 16;
    }
    while (v16 != v17);
  }
  v25 = *(unsigned int *)(v3 + 60);
  if ((_DWORD)v25)
  {
    v30 = 16 * v25;
    v31 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 8);
    do
    {
      v32 = *v31;
      v31 += 2;
      this = JSC::InByStatus::visitAggregate(v32, (uint64_t)a2);
      v30 -= 16;
    }
    while (v30);
  }
  v26 = *(unsigned int *)(v3 + 76);
  if ((_DWORD)v26)
  {
    v33 = 16 * v26;
    v34 = (uint64_t *)(*(_QWORD *)(v3 + 64) + 8);
    do
    {
      v35 = *v34;
      v34 += 2;
      this = JSC::DeleteByStatus::visitAggregate(v35, (uint64_t)a2);
      v33 -= 16;
    }
    while (v33);
  }
  v27 = *(unsigned int *)(v3 + 92);
  if ((_DWORD)v27)
  {
    v36 = 16 * v27;
    v37 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8);
    do
    {
      v38 = *v37;
      v37 += 2;
      this = JSC::CheckPrivateBrandStatus::visitAggregate(v38, (uint64_t)a2);
      v36 -= 16;
    }
    while (v36);
  }
  v28 = *(unsigned int *)(v3 + 108);
  if ((_DWORD)v28)
  {
    v39 = *(_QWORD *)(v3 + 96);
    v40 = 16 * v28;
    v41 = (uint64_t *)(v39 + 8);
    do
    {
      v42 = *v41;
      v41 += 2;
      this = JSC::SetPrivateBrandStatus::visitAggregate(v42, (uint64_t)a2);
      v40 -= 16;
    }
    while (v40);
  }
  return this;
}

void JSC::RecordedStatuses::visitAggregate(JSC::RecordedStatuses *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  JSC::PutByStatus **v24;
  JSC::PutByStatus *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::InByStatus **v31;
  JSC::InByStatus *v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  JSC::DeleteByStatus **v37;
  JSC::DeleteByStatus *v38;
  uint64_t v39;
  JSC::CheckPrivateBrandStatus **v40;
  JSC::CheckPrivateBrandStatus *v41;
  uint64_t v42;
  uint64_t v43;
  JSC::SetPrivateBrandStatus **v44;
  JSC::SetPrivateBrandStatus *v45;
  unint64_t v46;

  v10 = *((unsigned int *)this + 7);
  if ((_DWORD)v10)
  {
    v11 = *((_QWORD *)this + 2);
    v12 = v11 + 16 * v10;
    do
    {
      v13 = *(_QWORD *)(v11 + 8);
      if (*(_BYTE *)(v13 + 88) == 4)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v13 + 80) + 32);
        if (v33 && (*(_QWORD *)(*(_QWORD *)(v13 + 80) + 32) & 1) == 0)
        {
          if ((v33 & 8) != 0)
          {
            if ((*(_BYTE *)(v33 - 79) & 1) == 0 || *((_QWORD *)a2 + 21))
              goto LABEL_40;
          }
          else
          {
            v35 = v33 & 0xFFFFFFFFFFFFC000;
            if (*(_DWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 33))
            {
              v46 = *(_QWORD *)(*(_QWORD *)(v13 + 80) + 32);
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v33 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
              v33 = v46;
            }
            if (((*(_QWORD *)(v35 + 8 * ((v33 >> 10) & 0xF) + 40) >> (v33 >> 4)) & 1) == 0 || *((_QWORD *)a2 + 21))
LABEL_40:
              JSC::SlotVisitor::appendSlow((uint64_t)a2, v33, 0, a4, a5, a6, a7, a8);
          }
        }
      }
      v14 = *(unsigned int *)(v13 + 12);
      if ((_DWORD)v14)
      {
        v15 = v14 << 6;
        v16 = (unint64_t *)(*(_QWORD *)v13 + 56);
        do
        {
          v18 = *v16;
          v16 += 8;
          v17 = v18;
          v19 = v18 & 1;
          if (v18)
            v20 = v19 == 0;
          else
            v20 = 0;
          if (!v20)
            goto LABEL_10;
          if ((v17 & 8) != 0)
          {
            if ((*(_BYTE *)(v17 - 79) & 1) == 0)
              goto LABEL_18;
          }
          else
          {
            v21 = *((_DWORD *)a2 + 33);
            if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000), v21, a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) == 0)
            {
LABEL_18:
              JSC::SlotVisitor::appendSlow((uint64_t)a2, v17, 0, a4, a5, a6, a7, a8);
              goto LABEL_10;
            }
          }
          if (*((_QWORD *)a2 + 21))
            goto LABEL_18;
LABEL_10:
          v15 -= 64;
        }
        while (v15);
      }
      v11 += 16;
    }
    while (v11 != v12);
  }
  v22 = *((unsigned int *)this + 11);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    v24 = (JSC::PutByStatus **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v25 = *v24;
      v24 += 2;
      JSC::PutByStatus::visitAggregate(v25, a2, a3, a4, a5, a6, a7, a8);
      v23 -= 16;
    }
    while (v23);
  }
  v26 = *((unsigned int *)this + 15);
  if ((_DWORD)v26)
  {
    v30 = 16 * v26;
    v31 = (JSC::InByStatus **)(*((_QWORD *)this + 6) + 8);
    do
    {
      v32 = *v31;
      v31 += 2;
      JSC::InByStatus::visitAggregate(v32, a2, a3, a4, a5, a6, a7, a8);
      v30 -= 16;
    }
    while (v30);
  }
  v27 = *((unsigned int *)this + 19);
  if ((_DWORD)v27)
  {
    v36 = 16 * v27;
    v37 = (JSC::DeleteByStatus **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v38 = *v37;
      v37 += 2;
      JSC::DeleteByStatus::visitAggregate(v38, a2, a3, a4, a5, a6, a7, a8);
      v36 -= 16;
    }
    while (v36);
  }
  v28 = *((unsigned int *)this + 23);
  if ((_DWORD)v28)
  {
    v39 = 16 * v28;
    v40 = (JSC::CheckPrivateBrandStatus **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v41 = *v40;
      v40 += 2;
      JSC::CheckPrivateBrandStatus::visitAggregate(v41, a2, a3, a4, a5, a6, a7, a8);
      v39 -= 16;
    }
    while (v39);
  }
  v29 = *((unsigned int *)this + 27);
  if ((_DWORD)v29)
  {
    v42 = *((_QWORD *)this + 12);
    v43 = 16 * v29;
    v44 = (JSC::SetPrivateBrandStatus **)(v42 + 8);
    do
    {
      v45 = *v44;
      v44 += 2;
      JSC::SetPrivateBrandStatus::visitAggregate(v45, a2, a3, a4, a5, a6, a7, a8);
      v43 -= 16;
    }
    while (v43);
  }
}

void JSC::RecordedStatuses::finalizeWithoutDeleting(JSC::RecordedStatuses *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  JSC::GetByVariant **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::InByStatus **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136[2];
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  char v143;

  v10 = *((unsigned int *)this + 3);
  if (!(_DWORD)v10)
    goto LABEL_16;
  v11 = *(_QWORD *)this;
  v12 = *(_QWORD *)this + 16 * v10;
  do
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(unsigned int *)(v13 + 12);
    if (!(_DWORD)v14)
      goto LABEL_10;
    v15 = *(unint64_t **)v13;
    v16 = 8 * v14;
    while (1)
    {
      v17 = *v15;
      if (!*v15)
        goto LABEL_9;
      if ((v17 & 8) == 0)
        break;
      if ((*(_BYTE *)(v17 - 79) & 1) == 0)
        goto LABEL_13;
LABEL_9:
      ++v15;
      v16 -= 8;
      if (!v16)
        goto LABEL_10;
    }
    if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108)
      && ((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) != 0)
    {
      goto LABEL_9;
    }
LABEL_13:
    v136[0] = (WTF *)&v137;
    v136[1] = (WTF *)1;
    DWORD2(v137) = 0;
    JSC::CallLinkStatus::operator=(*(_QWORD *)(v11 + 8), v136, a3, a4, a5, a6, a7, a8);
    v19 = v136[0];
    if (&v137 != (__int128 *)v136[0] && v136[0])
    {
      v136[0] = 0;
      LODWORD(v136[1]) = 0;
      WTF::fastFree((unint64_t)v19, v18, a3, a4, a5, a6, a7, a8);
    }
LABEL_10:
    v11 += 16;
  }
  while (v11 != v12);
LABEL_16:
  v20 = *((unsigned int *)this + 7);
  if ((_DWORD)v20)
  {
    v21 = 16 * v20;
    v22 = (JSC::GetByVariant **)(*((_QWORD *)this + 2) + 8);
    do
    {
      if ((JSC::GetByStatus::finalize((uint64_t)*v22, (uint64_t)a2) & 1) == 0)
      {
        v136[0] = (WTF *)&v137;
        v136[1] = (WTF *)1;
        v141 = 0;
        v142 = 0;
        v143 &= 0xFCu;
        JSC::GetByStatus::operator=(*v22, v136, v23, v24, v25, v26, v27, v28);
        JSC::GetByStatus::~GetByStatus((JSC::GetByStatus *)v136, v68, v69, v70, v71, v72, v73, v74);
      }
      v22 += 2;
      v21 -= 16;
    }
    while (v21);
  }
  v29 = *((unsigned int *)this + 11);
  if ((_DWORD)v29)
  {
    v30 = *((_QWORD *)this + 4);
    v31 = v30 + 16 * v29;
    do
    {
      v32 = *(_QWORD *)(v30 + 8);
      v33 = *(unsigned int *)(v32 + 20);
      if ((_DWORD)v33)
      {
        v34 = *(_QWORD **)(v32 + 8);
        v35 = v33 << 6;
        while ((JSC::PutByVariant::finalize(v34, (uint64_t)a2) & 1) != 0)
        {
          v34 += 8;
          v35 -= 64;
          if (!v35)
            goto LABEL_27;
        }
        LODWORD(v136[0]) = 0;
        v136[1] = (WTF *)((char *)&v137 + 8);
        *(_QWORD *)&v137 = 1;
        JSC::PutByStatus::operator=(*(_QWORD *)(v30 + 8), v136, v36, v37, v38, v39, v40, v41);
        JSC::PutByStatus::~PutByStatus((JSC::PutByStatus *)v136, v61, v62, v63, v64, v65, v66, v67);
      }
LABEL_27:
      v30 += 16;
    }
    while (v30 != v31);
  }
  v42 = *((unsigned int *)this + 15);
  if ((_DWORD)v42)
  {
    v46 = 16 * v42;
    v47 = (JSC::InByStatus **)(*((_QWORD *)this + 6) + 8);
    do
    {
      if ((JSC::InByStatus::finalize(*v47, a2) & 1) == 0)
      {
        v136[0] = 0;
        v137 = 0u;
        v139 = 0;
        v138 = 0u;
        v136[1] = (WTF *)((char *)&v137 + 8);
        LODWORD(v137) = 1;
        JSC::InByStatus::operator=(*v47, v136, v48, v49, v50, v51, v52, v53);
        JSC::InByStatus::~InByStatus((JSC::InByStatus *)v136, v54, v55, v56, v57, v58, v59, v60);
      }
      v47 += 2;
      v46 -= 16;
    }
    while (v46);
  }
  v43 = *((unsigned int *)this + 19);
  if ((_DWORD)v43)
  {
    v75 = *((_QWORD *)this + 8);
    v76 = v75 + 16 * v43;
    do
    {
      v77 = *(_QWORD *)(v75 + 8);
      v78 = *(unsigned int *)(v77 + 12);
      if ((_DWORD)v78)
      {
        v79 = *(_QWORD *)v77;
        v80 = 40 * v78;
        while ((JSC::DeleteByVariant::finalize(v79, (uint64_t)a2) & 1) != 0)
        {
          v79 += 40;
          v80 -= 40;
          if (!v80)
            goto LABEL_44;
        }
        v136[0] = (WTF *)&v137;
        v136[1] = (WTF *)1;
        v140 = 0;
        JSC::DeleteByStatus::operator=(*(_QWORD *)(v75 + 8), v136, v81, v82, v83, v84, v85, v86);
        v127 = v136[0];
        if (&v137 != (__int128 *)v136[0] && v136[0] != 0)
        {
          v136[0] = 0;
          LODWORD(v136[1]) = 0;
          WTF::fastFree((unint64_t)v127, v120, v121, v122, v123, v124, v125, v126);
        }
      }
LABEL_44:
      v75 += 16;
    }
    while (v75 != v76);
  }
  v44 = *((unsigned int *)this + 23);
  if ((_DWORD)v44)
  {
    v87 = *((_QWORD *)this + 10);
    v88 = v87 + 16 * v44;
    do
    {
      v89 = *(_QWORD *)(v87 + 8);
      v90 = *(unsigned int *)(v89 + 12);
      if ((_DWORD)v90)
      {
        v91 = *(unint64_t **)v89;
        v92 = 16 * v90;
        while ((JSC::StructureSet::isStillAlive(v91, (uint64_t)a2) & 1) != 0)
        {
          v91 += 2;
          v92 -= 16;
          if (!v92)
            goto LABEL_48;
        }
        v136[0] = (WTF *)&v137;
        v136[1] = (WTF *)1;
        LOBYTE(v138) = 0;
        JSC::CheckPrivateBrandStatus::operator=(*(_QWORD *)(v87 + 8), v136, v93, v94, v95, v96, v97, v98);
        JSC::CheckPrivateBrandStatus::~CheckPrivateBrandStatus(v136, v129, v130, v131, v132, v133, v134, v135);
      }
LABEL_48:
      v87 += 16;
    }
    while (v87 != v88);
  }
  v45 = *((unsigned int *)this + 27);
  if ((_DWORD)v45)
  {
    v99 = *((_QWORD *)this + 12);
    v100 = v99 + 16 * v45;
    do
    {
      v101 = *(_QWORD *)(v99 + 8);
      v102 = *(unsigned int *)(v101 + 12);
      if ((_DWORD)v102)
      {
        v103 = *(unint64_t **)v101;
        v104 = 24 * v102;
        while ((JSC::SetPrivateBrandVariant::finalize(v103, (uint64_t)a2) & 1) != 0)
        {
          v103 += 3;
          v104 -= 24;
          if (!v104)
            goto LABEL_59;
        }
        v136[0] = (WTF *)&v137;
        v136[1] = (WTF *)1;
        BYTE8(v138) = 0;
        JSC::SetPrivateBrandStatus::operator=(*(_QWORD *)(v99 + 8), v136, v105, v106, v107, v108, v109, v110);
        v118 = v136[0];
        if (&v137 != (__int128 *)v136[0] && v136[0] != 0)
        {
          v136[0] = 0;
          LODWORD(v136[1]) = 0;
          WTF::fastFree((unint64_t)v118, v111, v112, v113, v114, v115, v116, v117);
        }
      }
LABEL_59:
      v99 += 16;
    }
    while (v99 != v100);
  }
}

void JSC::RecordedStatuses::finalize(JSC::RecordedStatuses *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t StatusReg;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::RecordedStatuses *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  unint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v87;
  JSC::GetByVariant *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t i;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  JSC::RecordedStatuses *v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  uint64_t v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  unsigned int *v271;
  unsigned int v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t *v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  int v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  int64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v328;
  unint64_t v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  unint64_t v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  int v387;
  uint64_t v388;
  char *v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  _QWORD *v395;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  int v409;
  unint64_t v410;
  char *v411;
  char *v412;
  uint64_t v413;
  unsigned int v414;
  unint64_t *v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  char *v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  _QWORD *v475;
  _QWORD *v476;
  unsigned int *v477;
  unsigned int v478;
  unsigned int v479;
  _QWORD *v480;
  char *v481;
  unint64_t v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char *v492;
  unint64_t v493;
  _QWORD *v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  _QWORD *v499;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  char *v505;
  unint64_t v506;
  char *v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t *v522;
  uint64_t j;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  unint64_t *v529;
  unint64_t v530;
  _QWORD *v531;
  unint64_t *v532;
  unint64_t v533;
  _QWORD *v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unsigned int *v539;
  unsigned int v540;
  unsigned int v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v546;
  JSC::GetByVariant *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  _QWORD *v551;
  _QWORD *v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  _QWORD *v558;
  uint64_t v559;
  uint64_t *v560;
  int64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  uint64_t *v571;
  uint64_t *v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t v576;
  uint64_t v578;
  _QWORD *v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t *v582;
  char *v583;
  uint64_t *v584;
  uint64_t *v585;
  uint64_t *v586;
  uint64_t *v587;
  uint64_t *v588;
  uint64_t v589;
  _QWORD *v590;
  int v591;
  unint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t *v595;
  _QWORD *v596;
  int v597;
  int v598;
  char *v599;
  char *v600;
  _QWORD *v601;
  uint64_t v602;
  unint64_t v603;
  _QWORD *v604;
  int v605;
  unint64_t v606;
  uint64_t *v607;
  int v608;
  int v609;
  char *v610;
  int v611;

  v9 = *(uint64_t **)this;
  v10 = *((unsigned int *)this + 3);
  v11 = *(_QWORD *)this + 16 * v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v14 = (uint64_t *)v11;
    v15 = (uint64_t *)v11;
    while (1)
    {
      v16 = v9[1];
      v17 = *(unsigned int *)(v16 + 12);
      if ((_DWORD)v17)
      {
        v18 = *(unint64_t **)v16;
        v19 = 8 * v17;
        while (1)
        {
          v20 = *v18;
          if (*v18)
          {
            if ((v20 & 8) != 0)
            {
              if ((*(_BYTE *)(v20 - 79) & 1) == 0)
                goto LABEL_13;
            }
            else if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                   || ((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
            {
              goto LABEL_13;
            }
          }
          ++v18;
          v19 -= 8;
          if (!v19)
            goto LABEL_10;
        }
      }
      if (*(_BYTE *)(v16 + 24))
        goto LABEL_10;
LABEL_13:
      v21 = v9;
      if (v15 != (uint64_t *)(*(_QWORD *)this + 16 * *((unsigned int *)this + 3)))
      {
        if (v14 == v9)
        {
          v21 = v15;
        }
        else
        {
          if (v14 > v15)
          {
            v22 = v15;
            v23 = v14;
            while (1)
            {
              v24 = *v23;
              v25 = v23[1];
              *v23 = 0;
              v23[1] = 0;
              *v22 = v24;
              v22[1] = v25;
              v26 = v23[1];
              v23[1] = 0;
              if (v26)
              {
                v27 = *(_QWORD *)v26;
                if (v26 + 16 != *(_QWORD *)v26 && v27 != 0)
                {
                  *(_QWORD *)v26 = 0;
                  *(_DWORD *)(v26 + 8) = 0;
                  WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
                }
                v29 = *(_QWORD *)(StatusReg + 752);
                if (v29)
                {
                  if (!(v26 >> 43)
                    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v26 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v26)) & 1) != 0)
                  {
LABEL_26:
                    v30 = *(unsigned int *)(v29 + 8000);
                    if (v30 >= 0x3E7)
                    {
                      pas_thread_local_cache_append_deallocation_slow(v29, v26, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                    }
                    else
                    {
                      *(_QWORD *)(v29 + 8 * v30) = v26 | 0x5000000000000;
                      *(_DWORD *)(v29 + 8000) = v30 + 1;
                    }
                    goto LABEL_28;
                  }
                  if (v26 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v26 >> 24)
                  {
                    a4 = 0;
                  }
                  else
                  {
                    a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                    + ((((v26 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                    + 24) >> (2 * ((BYTE3(v26) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)a4 == 1)
                      goto LABEL_26;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v29, v26, 1, a4, a5, a6, a7, a8);
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v26, (uint64_t)&bmalloc_heap_config, 1);
                }
              }
LABEL_28:
              v31 = *v23;
              if ((*v23 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v31 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
              v23 += 2;
              v22 += 2;
              if (v23 == v9)
              {
                v32 = ((char *)v9 - (char *)v14) >> 4;
                goto LABEL_31;
              }
            }
          }
          v559 = 0;
          v32 = ((char *)v9 - (char *)v14) >> 4;
          do
          {
            v560 = &v9[v559];
            v561 = (int64_t)v15 + (char *)v9 - (char *)v14 + v559 * 8;
            v562 = v9[v559 - 2];
            v563 = v9[v559 - 1];
            *(v560 - 2) = 0;
            *(v560 - 1) = 0;
            *(_QWORD *)(v561 - 16) = v562;
            *(_QWORD *)(v561 - 8) = v563;
            v564 = v9[v559 - 1];
            *(v560 - 1) = 0;
            if (v564)
            {
              v565 = *(_QWORD *)v564;
              if (v564 + 16 != *(_QWORD *)v564 && v565 != 0)
              {
                *(_QWORD *)v564 = 0;
                *(_DWORD *)(v564 + 8) = 0;
                v603 = v564;
                WTF::fastFree(v565, a2, a3, a4, a5, a6, a7, a8);
                v564 = v603;
              }
              WTF::fastFree(v564, a2, a3, a4, a5, a6, a7, a8);
            }
            v567 = *(v560 - 2);
            if ((v567 & 1) != 0 && (v567 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v567 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
            v559 -= 2;
          }
          while (&v9[v559] != v14);
LABEL_31:
          v21 = &v15[2 * v32];
        }
      }
      v33 = v9[1];
      v9[1] = 0;
      if (v33)
      {
        v34 = *(_QWORD *)v33;
        if (v33 + 16 != *(_QWORD *)v33 && v34 != 0)
        {
          *(_QWORD *)v33 = 0;
          *(_DWORD *)(v33 + 8) = 0;
          WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
        }
        v36 = *(_QWORD *)(StatusReg + 752);
        if (v36)
        {
          if (!(v33 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v33 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v33)) & 1) != 0)
          {
LABEL_41:
            v37 = *(unsigned int *)(v36 + 8000);
            if (v37 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v36, v33, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v36 + 8 * v37) = v33 | 0x5000000000000;
              *(_DWORD *)(v36 + 8000) = v37 + 1;
            }
            goto LABEL_43;
          }
          if (v33 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v33 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v33 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v33) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_41;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v36, v33, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v33, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_43:
      v38 = *v9;
      if ((*v9 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v38 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v14 = v9 + 2;
      ++v12;
      v15 = v21;
LABEL_10:
      v9 += 2;
      if ((unint64_t)v9 >= v11)
      {
        v39 = this;
        v9 = *(uint64_t **)this;
        LODWORD(v10) = *((_DWORD *)this + 3);
        v11 = (unint64_t)v15;
        goto LABEL_48;
      }
    }
  }
  v39 = this;
  v12 = 0;
  v14 = (uint64_t *)(*(_QWORD *)this + 16 * v10);
LABEL_48:
  v40 = &v9[2 * v10];
  if (v14 != v40)
  {
    WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>>::moveOverlapping(v14, v40, v11, a4, a5, a6, a7, a8);
    LODWORD(v10) = *((_DWORD *)v39 + 3);
  }
  v41 = (v10 - v12);
  *((_DWORD *)v39 + 3) = v41;
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)v39, v41, a3, a4, a5, a6, a7, a8);
  v48 = (uint64_t *)*((_QWORD *)v39 + 2);
  v49 = *((unsigned int *)v39 + 7);
  v50 = (unint64_t)&v48[2 * v49];
  if ((_DWORD)v49)
  {
    v51 = 0;
    v44 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v52 = &v48[2 * v49];
    v53 = v52;
    v581 = v44;
    v587 = v52;
    while (1)
    {
      v54 = v48[1];
      v55 = *(unsigned __int8 *)(v54 + 88);
      if (!*(_BYTE *)(v54 + 88))
        break;
      v56 = *(unsigned int *)(v54 + 12);
      if ((_DWORD)v56)
      {
        v57 = *(unint64_t **)v54;
        v58 = (unint64_t *)(*(_QWORD *)v54 + (v56 << 6));
        do
        {
          v59 = *v57;
          if ((*v57 & 1) != 0)
            v60 = *(unsigned int *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
          else
            v60 = v59 > 3;
          if (v60)
          {
            v61 = 0;
            v62 = 8 * v60;
            do
            {
              v63 = *v57 & 0xFFFFFFFFFFFFFFFCLL;
              if ((*v57 & 1) != 0)
                v63 = *(_QWORD *)(v63 + v61 + 8);
              if ((v63 & 8) != 0)
              {
                if ((*(_BYTE *)(v63 - 79) & 1) == 0)
                  goto LABEL_129;
              }
              else if (*(_DWORD *)(v63 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                     || ((*(_QWORD *)((v63 & 0xFFFFFFFFFFFFC000) + 8 * ((v63 >> 10) & 0xF) + 0x28) >> (v63 >> 4)) & 1) == 0)
              {
                goto LABEL_129;
              }
              v61 += 8;
            }
            while (v62 != v61);
          }
          v64 = v57[1];
          if (v64)
            v65 = (unint64_t *)(v64 + 8);
          else
            v65 = 0;
          if (v64)
            v66 = v64 + 8 + 24 * *(unsigned int *)(v64 + 4);
          else
            v66 = 0;
          if (v65 != (unint64_t *)v66)
          {
            LOBYTE(v67) = 1;
            do
            {
              v69 = *v65;
              if ((*v65 & 8) != 0)
              {
                LODWORD(v69) = *(_BYTE *)(v69 - 79) & 1;
              }
              else if (*(_DWORD *)(v69 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
              {
                v69 = (*(_QWORD *)((v69 & 0xFFFFFFFFFFFFC000) + 8 * ((v69 >> 10) & 0xF) + 0x28) >> (v69 >> 4)) & 1;
              }
              else
              {
                LODWORD(v69) = 0;
              }
              if ((_BYTE)v67)
                v67 = v69;
              else
                v67 = 0;
              v70 = v65[1];
              if ((v70 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v70) <= 7u && ((1 << BYTE6(v65[1])) & 0x9C) != 0)
              {
                v73 = v65[2];
                if (v73)
                {
                  if ((v73 & 8) != 0)
                  {
                    LODWORD(v73) = *(_BYTE *)(v73 - 79) & 1;
                  }
                  else if (*(_DWORD *)(v73 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
                  {
                    v73 = (*(_QWORD *)((v73 & 0xFFFFFFFFFFFFC000) + 8 * ((v73 >> 10) & 0xF) + 0x28) >> (v73 >> 4)) & 1;
                  }
                  else
                  {
                    LODWORD(v73) = 0;
                  }
                  v67 &= v73;
                  v70 = v65[1];
                }
              }
              if ((v70 & 0xFF000000000000) == 0x5000000000000)
              {
                v68 = v65[2];
                if (v68)
                {
                  if ((v68 & 0xFFFE000000000002) == 0)
                  {
                    if ((v68 & 8) != 0)
                    {
                      LODWORD(v68) = *(_BYTE *)(v68 - 79) & 1;
                    }
                    else if (*(_DWORD *)(v68 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
                    {
                      v68 = (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFC000) + 8 * ((v68 >> 10) & 0xF) + 0x28) >> (v68 >> 4)) & 1;
                    }
                    else
                    {
                      LODWORD(v68) = 0;
                    }
                    v67 &= v68;
                  }
                }
              }
              v65 += 3;
            }
            while (v65 != (unint64_t *)v66);
            if (!v67)
              goto LABEL_129;
          }
          v74 = v57[3];
          if (v74)
          {
            v137 = *(unsigned int *)(v74 + 12);
            if ((_DWORD)v137)
            {
              v138 = *(unint64_t **)v74;
              for (i = 8 * v137; i; i -= 8)
              {
                v140 = *v138;
                if (*v138)
                {
                  if ((v140 & 8) != 0)
                  {
                    if ((*(_BYTE *)(v140 - 79) & 1) == 0)
                      goto LABEL_129;
                  }
                  else if (*(_DWORD *)(v140 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                         || ((*(_QWORD *)((v140 & 0xFFFFFFFFFFFFC000) + 8 * ((v140 >> 10) & 0xF) + 0x28) >> (v140 >> 4)) & 1) == 0)
                  {
                    goto LABEL_129;
                  }
                }
                ++v138;
              }
            }
          }
          v75 = v57[4];
          if (v75)
          {
            if ((v75 & 8) != 0)
            {
              if ((*(_BYTE *)(v75 - 79) & 1) == 0)
                goto LABEL_129;
            }
            else if (*(_DWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                   || ((*(_QWORD *)((v75 & 0xFFFFFFFFFFFFC000) + 8 * ((v75 >> 10) & 0xF) + 0x28) >> (v75 >> 4)) & 1) == 0)
            {
              goto LABEL_129;
            }
          }
          v57 += 8;
        }
        while (v57 != v58);
        v55 = *(unsigned __int8 *)(v54 + 88);
      }
      if (v55 != 4)
        goto LABEL_108;
      v526 = *(_QWORD *)(v54 + 80);
      v527 = *(_QWORD *)(v526 + 8);
      if (v527)
      {
        if ((v527 & 8) != 0)
        {
          if ((*(_BYTE *)(v527 - 79) & 1) == 0)
            break;
        }
        else
        {
          if (*(_DWORD *)(v527 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
            || ((*(_QWORD *)((v527 & 0xFFFFFFFFFFFFC000) + 8 * ((v527 >> 10) & 0xF) + 0x28) >> (v527 >> 4)) & 1) == 0)
          {
            break;
          }
          v526 = *(_QWORD *)(v54 + 80);
        }
      }
      v528 = *(_QWORD *)(v526 + 16);
      if (v528)
      {
        if ((v528 & 8) != 0)
        {
          if ((*(_BYTE *)(v528 - 79) & 1) == 0)
            break;
        }
        else if (*(_DWORD *)(v528 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
               || ((*(_QWORD *)((v528 & 0xFFFFFFFFFFFFC000) + 8 * ((v528 >> 10) & 0xF) + 0x28) >> (v528 >> 4)) & 1) == 0)
        {
          break;
        }
      }
LABEL_108:
      v48 += 2;
      if ((unint64_t)v48 >= v50)
      {
        v48 = (uint64_t *)*((_QWORD *)this + 2);
        v141 = *((unsigned int *)this + 7);
        v50 = (unint64_t)v53;
        goto LABEL_226;
      }
    }
LABEL_129:
    v605 = v51;
    v91 = v48;
    if (v53 != (uint64_t *)(*((_QWORD *)this + 2) + 16 * *((unsigned int *)this + 7)))
    {
      if (v52 != v48)
      {
        v595 = v53;
        v584 = v52;
        if (v52 <= v53)
        {
          v117 = ((char *)v48 - (char *)v52) >> 4;
          v79 = (char *)v53 + (char *)v48 - (char *)v52;
          v78 = v48;
          do
          {
            v76 = *(v78 - 2);
            v77 = *(v78 - 1);
            v78 -= 2;
            *v78 = 0;
            v78[1] = 0;
            *((_QWORD *)v79 - 2) = v76;
            *((_QWORD *)v79 - 1) = v77;
            v79 -= 16;
            v80 = v78[1];
            v78[1] = 0;
            if (v80)
            {
              v81 = *(unsigned int **)(v80 + 80);
              *(_QWORD *)(v80 + 80) = 0;
              if (v81)
              {
                do
                {
                  v82 = __ldaxr(v81);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, v81));
                if (!v83)
                {
                  atomic_store(1u, v81);
                  WTF::fastFree((unint64_t)v81, (void *)v42, v50, v43, v44, v45, v46, v47);
                }
              }
              v84 = *(unsigned int *)(v80 + 12);
              if ((_DWORD)v84)
              {
                v88 = *(JSC::GetByVariant **)v80;
                v89 = v84 << 6;
                do
                {
                  JSC::GetByVariant::~GetByVariant(v88, (void *)v42, v50, v43, v44, v45, v46, v47);
                  v88 = (JSC::GetByVariant *)(v90 + 64);
                  v89 -= 64;
                }
                while (v89);
              }
              v85 = *(_QWORD *)v80;
              if (v80 + 16 != *(_QWORD *)v80 && v85 != 0)
              {
                *(_QWORD *)v80 = 0;
                *(_DWORD *)(v80 + 8) = 0;
                WTF::fastFree(v85, (void *)v42, v50, v43, v44, v45, v46, v47);
              }
              WTF::fastFree(v80, (void *)v42, v50, v43, v44, v45, v46, v47);
              v44 = v581;
              v52 = v584;
            }
            v87 = *v78;
            if ((*v78 & 1) != 0 && (v87 & 0xFFFFFFFF8) != 0)
            {
              WTF::fastFree(v87 & 0xFFFFFFFF8, (void *)v42, v50, v43, v44, v45, v46, v47);
              v44 = v581;
            }
          }
          while (v78 != v52);
          v53 = v595;
          goto LABEL_178;
        }
        v92 = v52;
        v93 = v53;
        while (1)
        {
          v94 = *v92;
          v95 = v92[1];
          *v92 = 0;
          v92[1] = 0;
          *v93 = v94;
          v93[1] = v95;
          v96 = v92[1];
          v92[1] = 0;
          if (!v96)
            goto LABEL_149;
          v97 = *(unsigned int **)(v96 + 80);
          *(_QWORD *)(v96 + 80) = 0;
          if (v97)
          {
            do
            {
              v98 = __ldaxr(v97);
              v99 = v98 - 1;
            }
            while (__stlxr(v99, v97));
            if (!v99)
            {
              atomic_store(1u, v97);
              WTF::fastFree((unint64_t)v97, (void *)v42, v50, v43, v44, v45, v46, v47);
              v44 = v581;
            }
          }
          v100 = *(unsigned int *)(v96 + 12);
          if ((_DWORD)v100)
            break;
LABEL_139:
          v101 = *(_QWORD *)v96;
          if (v96 + 16 != *(_QWORD *)v96 && v101 != 0)
          {
            *(_QWORD *)v96 = 0;
            *(_DWORD *)(v96 + 8) = 0;
            WTF::fastFree(v101, (void *)v42, v50, v43, v44, v45, v46, v47);
            v44 = v581;
          }
          v103 = *(_QWORD *)(v44 + 752);
          v53 = v595;
          if (!v103)
          {
            pas_try_deallocate_slow_no_cache(v96, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_925;
          }
          if (v96 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v96 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v96)) & 1) == 0)
          {
            if (v96 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v96 >> 24)
            {
              v43 = 0;
LABEL_924:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v103, v96, 1, v43, v44, v45, v46, v47);
              goto LABEL_925;
            }
            v43 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v96 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v96) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v43 != 1)
              goto LABEL_924;
          }
          v104 = *(unsigned int *)(v103 + 8000);
          if (v104 < 0x3E7)
          {
            *(_QWORD *)(v103 + 8 * v104) = v96 | 0x5000000000000;
            *(_DWORD *)(v103 + 8000) = v104 + 1;
            goto LABEL_149;
          }
          pas_thread_local_cache_append_deallocation_slow(v103, v96, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
LABEL_925:
          v44 = v581;
LABEL_149:
          v105 = *v92;
          if ((*v92 & 1) != 0 && (v105 & 0xFFFFFFFF8) != 0)
          {
            WTF::fastFree(v105 & 0xFFFFFFFF8, (void *)v42, v50, v43, v44, v45, v46, v47);
            v44 = v581;
          }
          v93 += 2;
          v92 += 2;
          if (v92 == v48)
          {
            v117 = ((char *)v48 - (char *)v584) >> 4;
LABEL_178:
            v91 = &v53[2 * v117];
            goto LABEL_179;
          }
        }
        v106 = *(_QWORD **)v96;
        v590 = (_QWORD *)(*(_QWORD *)v96 + (v100 << 6));
        while (1)
        {
          v42 = v106[6];
          v106[6] = 0;
          if (!v42)
            goto LABEL_159;
          v107 = *(_QWORD *)(v44 + 752);
          if (!v107)
          {
            pas_try_deallocate_slow_no_cache(v42, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_1041;
          }
          if (v42 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v42 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v42)) & 1) == 0)
          {
            if (v42 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v42 >> 24)
            {
              v43 = 0;
LABEL_1040:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v107, v42, 1, v43, v44, v45, v46, v47);
              goto LABEL_1041;
            }
            v43 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v42 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v42) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v43 != 1)
              goto LABEL_1040;
          }
          v108 = *(unsigned int *)(v107 + 8000);
          if (v108 < 0x3E7)
          {
            *(_QWORD *)(v107 + 8 * v108) = v42 | 0x5000000000000;
            *(_DWORD *)(v107 + 8000) = v108 + 1;
            goto LABEL_159;
          }
          pas_thread_local_cache_append_deallocation_slow(v107, v42, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
LABEL_1041:
          v44 = v581;
LABEL_159:
          v109 = v106[3];
          v106[3] = 0;
          if (!v109)
            goto LABEL_170;
          v110 = *(_QWORD *)v109;
          if (v109 + 16 != *(_QWORD *)v109 && v110 != 0)
          {
            *(_QWORD *)v109 = 0;
            *(_DWORD *)(v109 + 8) = 0;
            WTF::fastFree(v110, (void *)v42, v50, v43, v44, v45, v46, v47);
            v44 = v581;
          }
          v112 = *(_QWORD *)(v44 + 752);
          if (!v112)
          {
            pas_try_deallocate_slow_no_cache(v109, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_1046;
          }
          if (v109 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v109 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v109)) & 1) == 0)
          {
            if (v109 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v109 >> 24)
            {
              v43 = 0;
LABEL_1045:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v112, v109, 1, v43, v44, v45, v46, v47);
              goto LABEL_1046;
            }
            v43 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v109 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v109) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v43 != 1)
              goto LABEL_1045;
          }
          v113 = *(unsigned int *)(v112 + 8000);
          if (v113 < 0x3E7)
          {
            *(_QWORD *)(v112 + 8 * v113) = v109 | 0x5000000000000;
            *(_DWORD *)(v112 + 8000) = v113 + 1;
            goto LABEL_170;
          }
          pas_thread_local_cache_append_deallocation_slow(v112, v109, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
LABEL_1046:
          v44 = v581;
LABEL_170:
          v114 = (unsigned int *)v106[1];
          v106[1] = 0;
          if (v114)
          {
            do
            {
              v115 = __ldaxr(v114);
              v116 = v115 - 1;
            }
            while (__stlxr(v116, v114));
            if (!v116)
            {
              atomic_store(1u, v114);
              WTF::fastFree((unint64_t)v114, (void *)v42, v50, v43, v44, v45, v46, v47);
              v44 = v581;
            }
          }
          if ((*v106 & 1) != 0)
          {
            WTF::fastFree(*v106 & 0xFFFFFFFFFFFFFFFCLL, (void *)v42, v50, v43, v44, v45, v46, v47);
            v44 = v581;
          }
          v106 += 8;
          if (v106 == v590)
            goto LABEL_139;
        }
      }
      v91 = v53;
    }
LABEL_179:
    v118 = v48[1];
    v48[1] = 0;
    if (!v118)
      goto LABEL_195;
    v119 = *(unsigned int **)(v118 + 80);
    *(_QWORD *)(v118 + 80) = 0;
    if (v119)
    {
      do
      {
        v120 = __ldaxr(v119);
        v121 = v120 - 1;
      }
      while (__stlxr(v121, v119));
      if (!v121)
      {
        atomic_store(1u, v119);
        WTF::fastFree((unint64_t)v119, (void *)v42, v50, v43, v44, v45, v46, v47);
        v44 = v581;
      }
    }
    v122 = *(unsigned int *)(v118 + 12);
    if ((_DWORD)v122)
    {
      v128 = *(_QWORD **)v118;
      v129 = (_QWORD *)(*(_QWORD *)v118 + (v122 << 6));
      do
      {
        v130 = v128[6];
        v128[6] = 0;
        if (v130)
        {
          WTF::fastFree(v130, (void *)v42, v50, v43, v44, v45, v46, v47);
          v44 = v581;
        }
        v131 = v128[3];
        v128[3] = 0;
        if (v131)
        {
          v132 = *(_QWORD *)v131;
          if (v131 + 16 != *(_QWORD *)v131 && v132 != 0)
          {
            *(_QWORD *)v131 = 0;
            *(_DWORD *)(v131 + 8) = 0;
            WTF::fastFree(v132, (void *)v42, v50, v43, v44, v45, v46, v47);
          }
          WTF::fastFree(v131, (void *)v42, v50, v43, v44, v45, v46, v47);
          v44 = v581;
        }
        v134 = (unsigned int *)v128[1];
        v128[1] = 0;
        if (v134)
        {
          do
          {
            v135 = __ldaxr(v134);
            v136 = v135 - 1;
          }
          while (__stlxr(v136, v134));
          if (!v136)
          {
            atomic_store(1u, v134);
            WTF::fastFree((unint64_t)v134, (void *)v42, v50, v43, v44, v45, v46, v47);
            v44 = v581;
          }
        }
        if ((*v128 & 1) != 0)
        {
          WTF::fastFree(*v128 & 0xFFFFFFFFFFFFFFFCLL, (void *)v42, v50, v43, v44, v45, v46, v47);
          v44 = v581;
        }
        v128 += 8;
      }
      while (v128 != v129);
    }
    v123 = *(_QWORD *)v118;
    if (v118 + 16 != *(_QWORD *)v118 && v123 != 0)
    {
      *(_QWORD *)v118 = 0;
      *(_DWORD *)(v118 + 8) = 0;
      WTF::fastFree(v123, (void *)v42, v50, v43, v44, v45, v46, v47);
      v44 = v581;
    }
    v125 = *(_QWORD *)(v44 + 752);
    if (!v125)
    {
      pas_try_deallocate_slow_no_cache(v118, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_1024;
    }
    if (!(v118 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v118 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v118)) & 1) != 0)
    {
      goto LABEL_193;
    }
    if (v118 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v118 >> 24)
    {
      v43 = 0;
    }
    else
    {
      v43 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v118 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v118) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v43 == 1)
      {
LABEL_193:
        v126 = *(unsigned int *)(v125 + 8000);
        if (v126 < 0x3E7)
        {
          *(_QWORD *)(v125 + 8 * v126) = v118 | 0x5000000000000;
          *(_DWORD *)(v125 + 8000) = v126 + 1;
          goto LABEL_195;
        }
        pas_thread_local_cache_append_deallocation_slow(v125, v118, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
LABEL_1024:
        v44 = v581;
LABEL_195:
        v127 = *v48;
        if ((*v48 & 1) != 0 && (v127 & 0xFFFFFFFF8) != 0)
        {
          WTF::fastFree(v127 & 0xFFFFFFFF8, (void *)v42, v50, v43, v44, v45, v46, v47);
          v44 = v581;
        }
        v52 = v48 + 2;
        v51 = (v605 + 1);
        v53 = v91;
        v50 = (unint64_t)v587;
        goto LABEL_108;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v125, v118, 1, v43, v44, v45, v46, v47);
    goto LABEL_1024;
  }
  v141 = 0;
  v51 = 0;
  v52 = (uint64_t *)v50;
LABEL_226:
  v142 = &v48[2 * v141];
  v143 = this;
  if (v52 != v142)
  {
    if ((unint64_t)v52 <= v50)
    {
      v535 = v50 + (char *)v142 - (char *)v52;
      do
      {
        v536 = *(v142 - 2);
        v537 = *(v142 - 1);
        v142 -= 2;
        *v142 = 0;
        v142[1] = 0;
        *(_QWORD *)(v535 - 16) = v536;
        *(_QWORD *)(v535 - 8) = v537;
        v535 -= 16;
        v538 = v142[1];
        v142[1] = 0;
        if (v538)
        {
          v539 = *(unsigned int **)(v538 + 80);
          *(_QWORD *)(v538 + 80) = 0;
          if (v539)
          {
            do
            {
              v540 = __ldaxr(v539);
              v541 = v540 - 1;
            }
            while (__stlxr(v541, v539));
            if (!v541)
            {
              atomic_store(1u, v539);
              WTF::fastFree((unint64_t)v539, (void *)v42, v50, v43, v44, v45, v46, v47);
            }
          }
          v542 = v51;
          v543 = *(unsigned int *)(v538 + 12);
          if ((_DWORD)v543)
          {
            v547 = *(JSC::GetByVariant **)v538;
            v548 = v543 << 6;
            do
            {
              JSC::GetByVariant::~GetByVariant(v547, (void *)v42, v50, v43, v44, v45, v46, v47);
              v547 = (JSC::GetByVariant *)(v549 + 64);
              v548 -= 64;
            }
            while (v548);
          }
          v544 = *(_QWORD *)v538;
          if (v538 + 16 != *(_QWORD *)v538 && v544 != 0)
          {
            *(_QWORD *)v538 = 0;
            *(_DWORD *)(v538 + 8) = 0;
            WTF::fastFree(v544, (void *)v42, v50, v43, v44, v45, v46, v47);
          }
          WTF::fastFree(v538, (void *)v42, v50, v43, v44, v45, v46, v47);
          v51 = v542;
        }
        v546 = *v142;
        if ((*v142 & 1) != 0 && (v546 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v546 & 0xFFFFFFFF8, (void *)v42, v50, v43, v44, v45, v46, v47);
      }
      while (v142 != v52);
    }
    else
    {
      WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::move(v52, v142, v50, v43, v44, v45, v46, v47);
    }
  }
  v145 = *((_DWORD *)this + 6);
  v144 = *((_DWORD *)this + 7);
  v146 = (v144 - v51);
  *((_DWORD *)this + 7) = v146;
  if (v145 > v146)
  {
    v517 = (uint64_t *)*((_QWORD *)this + 2);
    if (v144 != (_DWORD)v51)
    {
      if (v146 >> 28)
        goto LABEL_1177;
      v518 = WTF::fastMalloc((WTF *)(16 * v146));
      *((_DWORD *)this + 6) = v146;
      *((_QWORD *)this + 2) = v518;
      if ((uint64_t *)v518 != v517)
        WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::move(v517, &v517[2 * v146], v518, v43, v44, v45, v46, v47);
    }
    if (v517)
    {
      if (*((uint64_t **)this + 2) == v517)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
      }
      WTF::fastFree((unint64_t)v517, (void *)v42, v50, v43, v44, v45, v46, v47);
    }
  }
  v147 = (uint64_t *)*((_QWORD *)this + 4);
  v148 = *((unsigned int *)this + 11);
  v149 = (unint64_t)&v147[2 * v148];
  v150 = 0;
  if ((_DWORD)v148)
  {
    v606 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v151 = &v147[2 * v148];
    v152 = v151;
    v582 = v151;
    while (1)
    {
      v153 = v147[1];
      if (!*(_DWORD *)v153)
        goto LABEL_303;
      v154 = *(unsigned int *)(v153 + 20);
      if ((_DWORD)v154)
        break;
LABEL_356:
      v147 += 2;
      if ((unint64_t)v147 >= v149)
      {
        v143 = this;
        v147 = (uint64_t *)*((_QWORD *)this + 4);
        LODWORD(v148) = *((_DWORD *)this + 11);
        v149 = (unint64_t)v152;
        goto LABEL_363;
      }
    }
    v155 = *(_QWORD **)(v153 + 8);
    v156 = &v155[8 * v154];
    while (1)
    {
      v157 = v155[1];
      if ((v157 & 1) != 0)
        v158 = *(unsigned int *)(v157 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v158 = v157 > 3;
      if (v158)
      {
        v159 = 0;
        v160 = 8 * v158;
        do
        {
          v161 = v155[1];
          v162 = v161 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v161 & 1) != 0)
            v162 = *(_QWORD *)(v162 + v159 + 8);
          if ((v162 & 8) != 0)
          {
            if ((*(_BYTE *)(v162 - 79) & 1) == 0)
              goto LABEL_303;
          }
          else if (*(_DWORD *)(v162 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                 || ((*(_QWORD *)((v162 & 0xFFFFFFFFFFFFC000) + 8 * ((v162 >> 10) & 0xF) + 0x28) >> (v162 >> 4)) & 1) == 0)
          {
            goto LABEL_303;
          }
          v159 += 8;
        }
        while (v160 != v159);
      }
      v163 = v155[2];
      if (v163)
      {
        if ((v163 & 8) != 0)
        {
          if ((*(_BYTE *)(v163 - 79) & 1) == 0)
            break;
        }
        else if (*(_DWORD *)(v163 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
               || ((*(_QWORD *)((v163 & 0xFFFFFFFFFFFFC000) + 8 * ((v163 >> 10) & 0xF) + 0x28) >> (v163 >> 4)) & 1) == 0)
        {
          break;
        }
      }
      v164 = v155[3];
      v165 = v164 ? (unint64_t *)(v164 + 8) : 0;
      v166 = v164 ? v164 + 8 + 24 * *(unsigned int *)(v164 + 4) : 0;
      if (v165 != (unint64_t *)v166)
      {
        LOBYTE(v167) = 1;
        do
        {
          v169 = *v165;
          if ((*v165 & 8) != 0)
          {
            LODWORD(v169) = *(_BYTE *)(v169 - 79) & 1;
          }
          else if (*(_DWORD *)(v169 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
          {
            v169 = (*(_QWORD *)((v169 & 0xFFFFFFFFFFFFC000) + 8 * ((v169 >> 10) & 0xF) + 0x28) >> (v169 >> 4)) & 1;
          }
          else
          {
            LODWORD(v169) = 0;
          }
          if ((_BYTE)v167)
            v167 = v169;
          else
            v167 = 0;
          v170 = v165[1];
          if ((v170 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v170) <= 7u && ((1 << BYTE6(v165[1])) & 0x9C) != 0)
          {
            v173 = v165[2];
            if (v173)
            {
              if ((v173 & 8) != 0)
              {
                LODWORD(v173) = *(_BYTE *)(v173 - 79) & 1;
              }
              else if (*(_DWORD *)(v173 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
              {
                v173 = (*(_QWORD *)((v173 & 0xFFFFFFFFFFFFC000) + 8 * ((v173 >> 10) & 0xF) + 0x28) >> (v173 >> 4)) & 1;
              }
              else
              {
                LODWORD(v173) = 0;
              }
              v167 &= v173;
              v170 = v165[1];
            }
          }
          if ((v170 & 0xFF000000000000) == 0x5000000000000)
          {
            v168 = v165[2];
            if (v168)
            {
              if ((v168 & 0xFFFE000000000002) == 0)
              {
                if ((v168 & 8) != 0)
                {
                  LODWORD(v168) = *(_BYTE *)(v168 - 79) & 1;
                }
                else if (*(_DWORD *)(v168 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
                {
                  v168 = (*(_QWORD *)((v168 & 0xFFFFFFFFFFFFC000) + 8 * ((v168 >> 10) & 0xF) + 0x28) >> (v168 >> 4)) & 1;
                }
                else
                {
                  LODWORD(v168) = 0;
                }
                v167 &= v168;
              }
            }
          }
          v165 += 3;
        }
        while (v165 != (unint64_t *)v166);
        if (!v167)
          break;
      }
      v174 = v155[4];
      if (v174)
      {
        v521 = *(unsigned int *)(v174 + 12);
        if ((_DWORD)v521)
        {
          v522 = *(unint64_t **)v174;
          for (j = 8 * v521; j; j -= 8)
          {
            v524 = *v522;
            if (*v522)
            {
              if ((v524 & 8) != 0)
              {
                if ((*(_BYTE *)(v524 - 79) & 1) == 0)
                  goto LABEL_303;
              }
              else if (*(_DWORD *)(v524 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                     || ((*(_QWORD *)((v524 & 0xFFFFFFFFFFFFC000) + 8 * ((v524 >> 10) & 0xF) + 0x28) >> (v524 >> 4)) & 1) == 0)
              {
                goto LABEL_303;
              }
            }
            ++v522;
          }
        }
      }
      v155 += 8;
      if (v155 == v156)
        goto LABEL_356;
    }
LABEL_303:
    v186 = v147;
    if (v152 != (uint64_t *)(*((_QWORD *)this + 4) + 16 * *((unsigned int *)this + 11)))
    {
      if (v151 == v147)
      {
        v186 = v152;
      }
      else
      {
        v591 = v150;
        v588 = v152;
        if (v151 > v152)
        {
          v187 = v152;
          v585 = v151;
          v188 = v151;
          while (1)
          {
            v189 = *v188;
            v190 = v188[1];
            *v188 = 0;
            v188[1] = 0;
            *v187 = v189;
            v187[1] = v190;
            v191 = v188[1];
            v188[1] = 0;
            if (v191)
            {
              v192 = *(unsigned int *)(v191 + 20);
              if ((_DWORD)v192)
              {
                v198 = *(_QWORD **)(v191 + 8);
                v596 = &v198[8 * v192];
                do
                {
                  v199 = v198[6];
                  v198[6] = 0;
                  if (v199)
                    WTF::fastFree(v199, v152, v50, v43, v44, v45, v46, v47);
                  v200 = v198[4];
                  v198[4] = 0;
                  if (v200)
                  {
                    v201 = *(_QWORD *)v200;
                    if (v200 + 16 != *(_QWORD *)v200 && v201 != 0)
                    {
                      *(_QWORD *)v200 = 0;
                      *(_DWORD *)(v200 + 8) = 0;
                      WTF::fastFree(v201, v152, v50, v43, v44, v45, v46, v47);
                    }
                    WTF::fastFree(v200, v152, v50, v43, v44, v45, v46, v47);
                  }
                  v203 = (unsigned int *)v198[3];
                  v198[3] = 0;
                  if (v203)
                  {
                    do
                    {
                      v204 = __ldaxr(v203);
                      v205 = v204 - 1;
                    }
                    while (__stlxr(v205, v203));
                    if (!v205)
                    {
                      atomic_store(1u, v203);
                      WTF::fastFree((unint64_t)v203, v152, v50, v43, v44, v45, v46, v47);
                    }
                  }
                  v206 = v198[1];
                  if ((v206 & 1) != 0)
                    WTF::fastFree(v206 & 0xFFFFFFFFFFFFFFFCLL, v152, v50, v43, v44, v45, v46, v47);
                  v198 += 8;
                }
                while (v198 != v596);
              }
              v193 = *(_QWORD *)(v191 + 8);
              if (v191 + 24 != v193 && v193 != 0)
              {
                *(_QWORD *)(v191 + 8) = 0;
                *(_DWORD *)(v191 + 16) = 0;
                WTF::fastFree(v193, v152, v50, v43, v44, v45, v46, v47);
              }
              v195 = *(_QWORD *)(v606 + 752);
              if (v195)
              {
                if (!(v191 >> 43)
                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v191 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v191)) & 1) != 0)
                {
LABEL_317:
                  v196 = *(unsigned int *)(v195 + 8000);
                  if (v196 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v195, v191, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
                  }
                  else
                  {
                    *(_QWORD *)(v195 + 8 * v196) = v191 | 0x5000000000000;
                    *(_DWORD *)(v195 + 8000) = v196 + 1;
                  }
                  goto LABEL_319;
                }
                if (v191 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v191 >> 24)
                {
                  v43 = 0;
                }
                else
                {
                  v43 = (*(_DWORD *)((char *)off_1ECF425F8
                                   + ((((v191 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                   + 24) >> (2 * ((BYTE3(v191) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v43 == 1)
                    goto LABEL_317;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v195, v191, 1, v43, v44, v45, v46, v47);
              }
              else
              {
                pas_try_deallocate_slow_no_cache(v191, (uint64_t)&bmalloc_heap_config, 1);
              }
            }
LABEL_319:
            v197 = *v188;
            if ((*v188 & 1) != 0 && (v197 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v197 & 0xFFFFFFFF8, v152, v50, v43, v44, v45, v46, v47);
            v187 += 2;
            v188 += 2;
            if (v188 == v147)
            {
              v207 = ((char *)v147 - (char *)v585) >> 4;
              goto LABEL_340;
            }
          }
        }
        v185 = 0;
        v207 = ((char *)v147 - (char *)v151) >> 4;
        v600 = (char *)v152 + (char *)v147 - (char *)v151;
        do
        {
          v175 = v151;
          v176 = &v147[v185];
          v177 = &v600[v185 * 8];
          v178 = v147[v185 - 2];
          v179 = v147[v185 - 1];
          *(v176 - 2) = 0;
          *(v176 - 1) = 0;
          *((_QWORD *)v177 - 2) = v178;
          *((_QWORD *)v177 - 1) = v179;
          v180 = v147[v185 - 1];
          *(v176 - 1) = 0;
          if (v180)
          {
            v181 = *(unsigned int *)(v180 + 20);
            if ((_DWORD)v181)
              WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*(_QWORD **)(v180 + 8), (_QWORD *)(*(_QWORD *)(v180 + 8) + (v181 << 6)), v50, v43, v44, v45, v46, v47);
            v182 = *(_QWORD *)(v180 + 8);
            if (v180 + 24 != v182 && v182 != 0)
            {
              *(_QWORD *)(v180 + 8) = 0;
              *(_DWORD *)(v180 + 16) = 0;
              WTF::fastFree(v182, v152, v50, v43, v44, v45, v46, v47);
            }
            WTF::fastFree(v180, v152, v50, v43, v44, v45, v46, v47);
          }
          v184 = *(v176 - 2);
          if ((v184 & 1) != 0 && (v184 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v184 & 0xFFFFFFFF8, v152, v50, v43, v44, v45, v46, v47);
          v185 -= 2;
          v151 = v175;
        }
        while (&v147[v185] != v175);
LABEL_340:
        v186 = &v588[2 * v207];
        v150 = v591;
        v149 = (unint64_t)v582;
      }
    }
    v208 = v147[1];
    v147[1] = 0;
    if (v208)
    {
      v209 = *(unsigned int *)(v208 + 20);
      if ((_DWORD)v209)
        WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*(_QWORD **)(v208 + 8), (_QWORD *)(*(_QWORD *)(v208 + 8) + (v209 << 6)), v50, v43, v44, v45, v46, v47);
      v210 = *(_QWORD *)(v208 + 8);
      if (v208 + 24 != v210 && v210 != 0)
      {
        *(_QWORD *)(v208 + 8) = 0;
        *(_DWORD *)(v208 + 16) = 0;
        WTF::fastFree(v210, v152, v50, v43, v44, v45, v46, v47);
      }
      v212 = *(_QWORD *)(v606 + 752);
      if (v212)
      {
        if (!(v208 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v208 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v208)) & 1) != 0)
        {
          goto LABEL_352;
        }
        if (v208 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v208 >> 24)
        {
          v43 = 0;
        }
        else
        {
          v43 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v208 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                   + 24) >> (2 * ((BYTE3(v208) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v43 == 1)
          {
LABEL_352:
            v213 = *(unsigned int *)(v212 + 8000);
            if (v213 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v212, v208, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
            }
            else
            {
              *(_QWORD *)(v212 + 8 * v213) = v208 | 0x5000000000000;
              *(_DWORD *)(v212 + 8000) = v213 + 1;
            }
            goto LABEL_354;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v212, v208, 1, v43, v44, v45, v46, v47);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v208, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
LABEL_354:
    v214 = *v147;
    if ((*v147 & 1) != 0 && (v214 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v214 & 0xFFFFFFFF8, v152, v50, v43, v44, v45, v46, v47);
    v151 = v147 + 2;
    ++v150;
    v152 = v186;
    goto LABEL_356;
  }
  v151 = &v147[2 * v148];
LABEL_363:
  v215 = &v147[2 * v148];
  if (v151 != v215)
  {
    WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::moveOverlapping(v151, v215, v149, v43, v44, v45, v46, v47);
    LODWORD(v148) = *((_DWORD *)v143 + 11);
  }
  v216 = (v148 - v150);
  *((_DWORD *)v143 + 11) = v216;
  if (*((_DWORD *)v143 + 10) > v216)
  {
    v519 = (uint64_t *)*((_QWORD *)v143 + 4);
    if ((_DWORD)v148 != v150)
    {
      if (v216 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198202FD4);
      }
      v520 = WTF::fastMalloc((WTF *)(16 * v216));
      *((_DWORD *)v143 + 10) = v216;
      *((_QWORD *)v143 + 4) = v520;
      if ((uint64_t *)v520 != v519)
        WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::move(v519, &v519[2 * v216], v520, v43, v44, v45, v46, v47);
    }
    if (v519)
    {
      if (*((uint64_t **)v143 + 4) == v519)
      {
        *((_QWORD *)v143 + 4) = 0;
        *((_DWORD *)v143 + 10) = 0;
      }
      WTF::fastFree((unint64_t)v519, v215, v50, v43, v44, v45, v46, v47);
    }
  }
  v218 = (uint64_t)v143 + 48;
  v217 = (uint64_t *)*((_QWORD *)v143 + 6);
  v219 = *((unsigned int *)v143 + 15);
  v220 = (unint64_t)&v217[2 * v219];
  if ((_DWORD)v219)
  {
    v583 = (char *)v143 + 48;
    v221 = 0;
    v215 = (uint64_t *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v222 = &v217[2 * v219];
    v223 = (unint64_t)v222;
    v607 = v222;
    v586 = v215;
    while (1)
    {
      v224 = v217[1];
      if (*(_DWORD *)v224)
      {
        v225 = *(unsigned int *)(v224 + 20);
        if (!(_DWORD)v225)
          goto LABEL_467;
        v226 = *(unint64_t **)(v224 + 8);
        v227 = &v226[4 * v225];
        while (1)
        {
          v228 = *v226;
          if ((*v226 & 1) != 0)
            v229 = *(unsigned int *)(v228 & 0xFFFFFFFFFFFFFFFCLL);
          else
            v229 = v228 > 3;
          if (v229)
          {
            v230 = 0;
            v231 = 8 * v229;
            do
            {
              v232 = *v226 & 0xFFFFFFFFFFFFFFFCLL;
              if ((*v226 & 1) != 0)
                v232 = *(_QWORD *)(v232 + v230 + 8);
              if ((v232 & 8) != 0)
              {
                if ((*(_BYTE *)(v232 - 79) & 1) == 0)
                  goto LABEL_422;
              }
              else if (*(_DWORD *)(v232 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                     || ((*(_QWORD *)((v232 & 0xFFFFFFFFFFFFC000) + 8 * ((v232 >> 10) & 0xF) + 0x28) >> (v232 >> 4)) & 1) == 0)
              {
                goto LABEL_422;
              }
              v230 += 8;
            }
            while (v231 != v230);
          }
          v233 = v226[1];
          v234 = v233 ? (unint64_t *)(v233 + 8) : 0;
          v235 = v233 ? v233 + 8 + 24 * *(unsigned int *)(v233 + 4) : 0;
          if (v234 != (unint64_t *)v235)
          {
            v236 = 1;
            do
            {
              v238 = *v234;
              if ((*v234 & 8) != 0)
              {
                LOBYTE(v238) = *(_BYTE *)(v238 - 79) & 1;
              }
              else if (*(_DWORD *)(v238 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
              {
                v238 = (*(_QWORD *)((v238 & 0xFFFFFFFFFFFFC000) + 8 * ((v238 >> 10) & 0xF) + 0x28) >> (v238 >> 4)) & 1;
              }
              else
              {
                LOBYTE(v238) = 0;
              }
              if (v236)
                v236 = v238;
              else
                v236 = 0;
              v239 = v234[1];
              if ((v239 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v239) <= 7u && ((1 << BYTE6(v234[1])) & 0x9C) != 0)
              {
                v242 = v234[2];
                if (v242)
                {
                  if ((v242 & 8) != 0)
                  {
                    LOBYTE(v242) = *(_BYTE *)(v242 - 79) & 1;
                  }
                  else if (*(_DWORD *)(v242 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
                  {
                    v242 = (*(_QWORD *)((v242 & 0xFFFFFFFFFFFFC000) + 8 * ((v242 >> 10) & 0xF) + 0x28) >> (v242 >> 4)) & 1;
                  }
                  else
                  {
                    LOBYTE(v242) = 0;
                  }
                  v236 &= v242;
                  v239 = v234[1];
                }
              }
              if ((v239 & 0xFF000000000000) == 0x5000000000000)
              {
                v237 = v234[2];
                if (v237)
                {
                  if ((v237 & 0xFFFE000000000002) == 0)
                  {
                    if ((v237 & 8) != 0)
                    {
                      LOBYTE(v237) = *(_BYTE *)(v237 - 79) & 1;
                    }
                    else if (*(_DWORD *)(v237 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
                    {
                      v237 = (*(_QWORD *)((v237 & 0xFFFFFFFFFFFFC000) + 8 * ((v237 >> 10) & 0xF) + 0x28) >> (v237 >> 4)) & 1;
                    }
                    else
                    {
                      LOBYTE(v237) = 0;
                    }
                    v236 &= v237;
                  }
                }
              }
              v234 += 3;
            }
            while (v234 != (unint64_t *)v235);
            if ((v236 & 1) == 0)
              break;
          }
          v226 += 4;
          if (v226 == v227)
            goto LABEL_467;
        }
      }
LABEL_422:
      v243 = (unint64_t)v217;
      if (v223 == *((_QWORD *)v143 + 6) + 16 * *((unsigned int *)v143 + 15))
        goto LABEL_453;
      if (v222 == v217)
      {
        v243 = v223;
        goto LABEL_453;
      }
      if ((unint64_t)v222 > v223)
      {
        v244 = v223;
        WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>>::move(v222, v217, v223, v43, v44, v45, v46, v47);
        v215 = v586;
        v245 = ((char *)v217 - (char *)v222) >> 4;
        goto LABEL_452;
      }
      v597 = v221;
      v592 = v223;
      v246 = v223 + (char *)v217 - (char *)v222;
      v247 = v217;
      do
      {
        v248 = *(v247 - 2);
        v249 = *(v247 - 1);
        v247 -= 2;
        *v247 = 0;
        v247[1] = 0;
        *(_QWORD *)(v246 - 16) = v248;
        *(_QWORD *)(v246 - 8) = v249;
        v246 -= 16;
        v250 = v247[1];
        v247[1] = 0;
        if (v250)
        {
          v251 = *(unsigned int *)(v250 + 20);
          if ((_DWORD)v251)
          {
            v257 = *(_QWORD **)(v250 + 8);
            v258 = &v257[4 * v251];
            do
            {
              v259 = (unsigned int *)v257[1];
              v257[1] = 0;
              if (v259)
              {
                do
                {
                  v260 = __ldaxr(v259);
                  v261 = v260 - 1;
                }
                while (__stlxr(v261, v259));
                if (!v261)
                {
                  atomic_store(1u, v259);
                  v580 = v258;
                  WTF::fastFree((unint64_t)v259, v215, v220, v43, v44, v45, v46, v47);
                  v258 = v580;
                  v215 = v586;
                }
              }
              if ((*v257 & 1) != 0)
              {
                v579 = v258;
                WTF::fastFree(*v257 & 0xFFFFFFFFFFFFFFFCLL, v215, v220, v43, v44, v45, v46, v47);
                v258 = v579;
                v215 = v586;
              }
              v257 += 4;
            }
            while (v257 != v258);
          }
          v252 = *(_QWORD *)(v250 + 8);
          if (v250 + 24 != v252 && v252 != 0)
          {
            *(_QWORD *)(v250 + 8) = 0;
            *(_DWORD *)(v250 + 16) = 0;
            WTF::fastFree(v252, v215, v220, v43, v44, v45, v46, v47);
            v215 = v586;
          }
          v254 = v215[94];
          if (!v254)
          {
            pas_try_deallocate_slow_no_cache(v250, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_870;
          }
          if (v250 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v250 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v250)) & 1) == 0)
          {
            if (v250 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v250 >> 24)
            {
              v43 = 0;
LABEL_869:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v254, v250, 1, v43, v44, v45, v46, v47);
LABEL_870:
              v215 = v586;
              goto LABEL_440;
            }
            v43 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v250 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v250) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v43 != 1)
              goto LABEL_869;
          }
          v255 = *(unsigned int *)(v254 + 8000);
          if (v255 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v254, v250, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
            goto LABEL_870;
          }
          *(_QWORD *)(v254 + 8 * v255) = v250 | 0x5000000000000;
          *(_DWORD *)(v254 + 8000) = v255 + 1;
        }
LABEL_440:
        v256 = *v247;
        if ((*v247 & 1) != 0 && (v256 & 0xFFFFFFFF8) != 0)
        {
          WTF::fastFree(v256 & 0xFFFFFFFF8, v215, v220, v43, v44, v45, v46, v47);
          v215 = v586;
        }
      }
      while (v247 != v222);
      v143 = this;
      v221 = v597;
      v245 = ((char *)v217 - (char *)v222) >> 4;
      v244 = v592;
LABEL_452:
      v243 = v244 + 16 * v245;
LABEL_453:
      v262 = v217[1];
      v217[1] = 0;
      if (v262)
      {
        v263 = *(unsigned int *)(v262 + 20);
        if ((_DWORD)v263)
        {
          v269 = *(_QWORD **)(v262 + 8);
          v270 = &v269[4 * v263];
          do
          {
            v271 = (unsigned int *)v269[1];
            v269[1] = 0;
            if (v271)
            {
              do
              {
                v272 = __ldaxr(v271);
                v273 = v272 - 1;
              }
              while (__stlxr(v273, v271));
              if (!v273)
              {
                atomic_store(1u, v271);
                v604 = v270;
                WTF::fastFree((unint64_t)v271, v215, v220, v43, v44, v45, v46, v47);
                v270 = v604;
                v215 = v586;
              }
            }
            if ((*v269 & 1) != 0)
            {
              v601 = v270;
              WTF::fastFree(*v269 & 0xFFFFFFFFFFFFFFFCLL, v215, v220, v43, v44, v45, v46, v47);
              v270 = v601;
              v215 = v586;
            }
            v269 += 4;
          }
          while (v269 != v270);
        }
        v264 = *(_QWORD *)(v262 + 8);
        if (v262 + 24 != v264 && v264 != 0)
        {
          *(_QWORD *)(v262 + 8) = 0;
          *(_DWORD *)(v262 + 16) = 0;
          WTF::fastFree(v264, v215, v220, v43, v44, v45, v46, v47);
          v215 = v586;
        }
        v266 = v215[94];
        if (v266)
        {
          if (v262 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v262 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v262)) & 1) == 0)
          {
            if (v262 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v262 >> 24)
            {
              v43 = 0;
            }
            else
            {
              v43 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v262 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v262) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v43 == 1)
                goto LABEL_463;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v266, v262, 1, v43, v44, v45, v46, v47);
          }
          else
          {
LABEL_463:
            v267 = *(unsigned int *)(v266 + 8000);
            if (v267 < 0x3E7)
            {
              *(_QWORD *)(v266 + 8 * v267) = v262 | 0x5000000000000;
              *(_DWORD *)(v266 + 8000) = v267 + 1;
              goto LABEL_465;
            }
            pas_thread_local_cache_append_deallocation_slow(v266, v262, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v262, (uint64_t)&bmalloc_heap_config, 1);
        }
        v215 = v586;
      }
LABEL_465:
      v268 = *v217;
      if ((*v217 & 1) != 0 && (v268 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v268 & 0xFFFFFFFF8, v215, v220, v43, v44, v45, v46, v47);
        v215 = v586;
      }
      v222 = v217 + 2;
      ++v221;
      v223 = v243;
      v220 = (unint64_t)v607;
LABEL_467:
      v217 += 2;
      if ((unint64_t)v217 >= v220)
      {
        v598 = v221;
        v217 = (uint64_t *)*((_QWORD *)v143 + 6);
        v274 = *((unsigned int *)v143 + 15);
        v220 = v223;
        v218 = (uint64_t)v583;
        goto LABEL_480;
      }
    }
  }
  v274 = 0;
  v598 = 0;
  v222 = (uint64_t *)v220;
LABEL_480:
  v275 = &v217[2 * v274];
  if (v222 != v275)
  {
    if ((unint64_t)v222 > v220)
    {
      WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>>::move(v222, &v217[2 * v274], v220, v43, v44, v45, v46, v47);
      goto LABEL_483;
    }
    v463 = v220 + (char *)v275 - (char *)v222;
    v464 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v465 = &unk_1ECF42000;
    do
    {
      v466 = *(v275 - 2);
      v467 = *(v275 - 1);
      v275 -= 2;
      *v275 = 0;
      v275[1] = 0;
      *(_QWORD *)(v463 - 16) = v466;
      *(_QWORD *)(v463 - 8) = v467;
      v463 -= 16;
      v468 = v275[1];
      v275[1] = 0;
      if (!v468)
        goto LABEL_759;
      v469 = *(unsigned int *)(v468 + 20);
      if ((_DWORD)v469)
      {
        v475 = *(_QWORD **)(v468 + 8);
        v476 = &v475[4 * v469];
        do
        {
          v477 = (unsigned int *)v475[1];
          v475[1] = 0;
          if (v477)
          {
            do
            {
              v478 = __ldaxr(v477);
              v479 = v478 - 1;
            }
            while (__stlxr(v479, v477));
            if (!v479)
            {
              atomic_store(1u, v477);
              WTF::fastFree((unint64_t)v477, v215, v220, v43, v44, v45, v46, v47);
              v465 = (_QWORD *)&unk_1ECF42000;
            }
          }
          if ((*v475 & 1) != 0)
          {
            WTF::fastFree(*v475 & 0xFFFFFFFFFFFFFFFCLL, v215, v220, v43, v44, v45, v46, v47);
            v465 = (_QWORD *)&unk_1ECF42000;
          }
          v475 += 4;
        }
        while (v475 != v476);
      }
      v470 = *(_QWORD *)(v468 + 8);
      if (v468 + 24 != v470 && v470 != 0)
      {
        *(_QWORD *)(v468 + 8) = 0;
        *(_DWORD *)(v468 + 16) = 0;
        v480 = v465;
        WTF::fastFree(v470, v215, v220, v43, v44, v45, v46, v47);
        v465 = v480;
      }
      v472 = *(_QWORD *)(v464 + 752);
      v143 = this;
      if (!v472)
      {
        v553 = v468;
        v531 = v465;
        pas_try_deallocate_slow_no_cache(v553, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_954;
      }
      if (v468 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v468 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v468)) & 1) == 0)
      {
        v529 = (unint64_t *)v465[191];
        if (v468 >> 24 < *v529 || v529[1] <= v468 >> 24)
        {
          v43 = 0;
LABEL_953:
          v530 = v468;
          v531 = v465;
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v472, v530, 1, v43, v44, v45, v46, v47);
          goto LABEL_954;
        }
        v43 = (*(_DWORD *)((char *)v529 + ((((v468 >> 24) - *v529) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v468) - *(_BYTE *)v529) & 0xF))) & 3;
        if ((_DWORD)v43 != 1)
          goto LABEL_953;
      }
      v473 = *(unsigned int *)(v472 + 8000);
      if (v473 < 0x3E7)
      {
        *(_QWORD *)(v472 + 8 * v473) = v468 | 0x5000000000000;
        *(_DWORD *)(v472 + 8000) = v473 + 1;
        goto LABEL_759;
      }
      v555 = v468;
      v531 = v465;
      pas_thread_local_cache_append_deallocation_slow(v472, v555, (os_unfair_lock_s *)5, v43, v44, v45, v46, v47);
LABEL_954:
      v465 = v531;
LABEL_759:
      v474 = *v275;
      if ((*v275 & 1) != 0 && (v474 & 0xFFFFFFFF8) != 0)
      {
        v551 = v465;
        WTF::fastFree(v474 & 0xFFFFFFFF8, v215, v220, v43, v44, v45, v46, v47);
        v465 = v551;
      }
    }
    while (v275 != v222);
  }
LABEL_483:
  v276 = (*((_DWORD *)v143 + 15) - v598);
  *((_DWORD *)v143 + 15) = v276;
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v218, v276, v220, v43, v44, v45, v46, v47);
  v284 = (char *)*((_QWORD *)v143 + 8);
  v593 = (uint64_t)v143 + 64;
  v285 = *((unsigned int *)v143 + 19);
  v286 = &v284[16 * v285];
  v287 = 0;
  if ((_DWORD)v285)
  {
    v288 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v289 = &v284[16 * v285];
    v290 = v289;
    while (1)
    {
      v291 = *((_QWORD *)v284 + 1);
      if (!*(_BYTE *)(v291 + 56))
        goto LABEL_491;
      v292 = *(unsigned int *)(v291 + 12);
      if ((_DWORD)v292)
        break;
LABEL_535:
      v284 += 16;
      if (v284 >= v286)
      {
        v143 = this;
        v284 = (char *)*((_QWORD *)this + 8);
        LODWORD(v285) = *((_DWORD *)this + 19);
        v286 = v290;
        goto LABEL_537;
      }
    }
    v293 = *(_QWORD *)v291;
    v294 = 40 * v292;
    while ((JSC::DeleteByVariant::finalize(v293, (uint64_t)a2) & 1) != 0)
    {
      v293 += 40;
      v294 -= 40;
      if (!v294)
        goto LABEL_535;
    }
LABEL_491:
    v295 = v284;
    if (v290 == (char *)(*((_QWORD *)this + 8) + 16 * *((unsigned int *)this + 19)))
    {
LABEL_522:
      v316 = *((_QWORD *)v284 + 1);
      *((_QWORD *)v284 + 1) = 0;
      if (v316)
      {
        v317 = *(_QWORD *)v316;
        if (v316 + 16 != *(_QWORD *)v316 && v317 != 0)
        {
          *(_QWORD *)v316 = 0;
          *(_DWORD *)(v316 + 8) = 0;
          WTF::fastFree(v317, v277, v278, v279, v280, v281, v282, v283);
        }
        v319 = *(_QWORD *)(v288 + 752);
        if (v319)
        {
          if (!(v316 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v316 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v316)) & 1) != 0)
          {
            goto LABEL_531;
          }
          if (v316 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v316 >> 24)
          {
            v279 = 0;
          }
          else
          {
            v279 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v316 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v316) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v279 == 1)
            {
LABEL_531:
              v320 = *(unsigned int *)(v319 + 8000);
              if (v320 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v319, v316, (os_unfair_lock_s *)5, v279, v280, v281, v282, v283);
              }
              else
              {
                *(_QWORD *)(v319 + 8 * v320) = v316 | 0x5000000000000;
                *(_DWORD *)(v319 + 8000) = v320 + 1;
              }
              goto LABEL_533;
            }
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v319, v316, 1, v279, v280, v281, v282, v283);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v316, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_533:
      v321 = *(_QWORD *)v284;
      if ((*(_QWORD *)v284 & 1) != 0 && (v321 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v321 & 0xFFFFFFFF8, v277, v278, v279, v280, v281, v282, v283);
      v289 = v284 + 16;
      ++v287;
      v290 = v295;
      goto LABEL_535;
    }
    if (v289 == v284)
    {
      v295 = v290;
      goto LABEL_522;
    }
    if (v289 > v290)
    {
      v296 = v290;
      v297 = v289;
      do
      {
        v298 = *(_QWORD *)v297;
        v299 = *((_QWORD *)v297 + 1);
        *(_QWORD *)v297 = 0;
        *((_QWORD *)v297 + 1) = 0;
        *(_QWORD *)v296 = v298;
        *((_QWORD *)v296 + 1) = v299;
        v300 = *((_QWORD *)v297 + 1);
        *((_QWORD *)v297 + 1) = 0;
        if (v300)
        {
          v301 = *(_QWORD *)v300;
          if (v300 + 16 != *(_QWORD *)v300 && v301 != 0)
          {
            *(_QWORD *)v300 = 0;
            *(_DWORD *)(v300 + 8) = 0;
            WTF::fastFree(v301, v277, v278, v279, v280, v281, v282, v283);
          }
          WTF::fastFree(v300, v277, v278, v279, v280, v281, v282, v283);
        }
        v303 = *(_QWORD *)v297;
        if ((*(_QWORD *)v297 & 1) != 0 && (v303 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v303 & 0xFFFFFFFF8, v277, v278, v279, v280, v281, v282, v283);
        v297 += 16;
        v296 += 16;
      }
      while (v297 != v284);
      v304 = (v284 - v289) >> 4;
LABEL_521:
      v295 = &v290[16 * v304];
      goto LABEL_522;
    }
    v608 = v287;
    v305 = 0;
    while (1)
    {
      v306 = &v284[v305];
      v307 = (int64_t)&v290[v284 - v289 + v305];
      v308 = *(_QWORD *)&v284[v305 - 16];
      v309 = *(_QWORD *)&v284[v305 - 8];
      *((_QWORD *)v306 - 2) = 0;
      *((_QWORD *)v306 - 1) = 0;
      *(_QWORD *)(v307 - 16) = v308;
      *(_QWORD *)(v307 - 8) = v309;
      v310 = *(_QWORD *)&v284[v305 - 8];
      *((_QWORD *)v306 - 1) = 0;
      if (v310)
      {
        v311 = *(_QWORD *)v310;
        if (v310 + 16 != *(_QWORD *)v310 && v311 != 0)
        {
          *(_QWORD *)v310 = 0;
          *(_DWORD *)(v310 + 8) = 0;
          WTF::fastFree(v311, v277, v278, v279, v280, v281, v282, v283);
        }
        v313 = *(_QWORD *)(v288 + 752);
        if (v313)
        {
          if (!(v310 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v310 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v310)) & 1) != 0)
          {
LABEL_516:
            v314 = *(unsigned int *)(v313 + 8000);
            if (v314 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v313, v310, (os_unfair_lock_s *)5, v279, v280, v281, v282, v283);
            }
            else
            {
              *(_QWORD *)(v313 + 8 * v314) = v310 | 0x5000000000000;
              *(_DWORD *)(v313 + 8000) = v314 + 1;
            }
            goto LABEL_518;
          }
          if (v310 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v310 >> 24)
          {
            v279 = 0;
          }
          else
          {
            v279 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v310 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v310) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v279 == 1)
              goto LABEL_516;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v313, v310, 1, v279, v280, v281, v282, v283);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v310, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_518:
      v315 = *((_QWORD *)v306 - 2);
      if ((v315 & 1) != 0 && (v315 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v315 & 0xFFFFFFFF8, v277, v278, v279, v280, v281, v282, v283);
      v305 -= 16;
      if (&v284[v305] == v289)
      {
        v287 = v608;
        v304 = (v284 - v289) >> 4;
        goto LABEL_521;
      }
    }
  }
  v289 = &v284[16 * v285];
LABEL_537:
  v322 = &v284[16 * v285];
  if (v289 != v322)
  {
    if (v289 > v286)
    {
      do
      {
        v323 = *(_QWORD *)v289;
        v324 = *((_QWORD *)v289 + 1);
        *(_QWORD *)v289 = 0;
        *((_QWORD *)v289 + 1) = 0;
        *(_QWORD *)v286 = v323;
        *((_QWORD *)v286 + 1) = v324;
        v325 = *((_QWORD *)v289 + 1);
        *((_QWORD *)v289 + 1) = 0;
        if (v325)
        {
          v326 = *(_QWORD *)v325;
          if (v325 + 16 != *(_QWORD *)v325 && v326 != 0)
          {
            *(_QWORD *)v325 = 0;
            *(_DWORD *)(v325 + 8) = 0;
            WTF::fastFree(v326, v277, v278, v279, v280, v281, v282, v283);
          }
          WTF::fastFree(v325, v277, v278, v279, v280, v281, v282, v283);
        }
        v328 = *(_QWORD *)v289;
        if ((*(_QWORD *)v289 & 1) != 0 && (v328 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v328 & 0xFFFFFFFF8, v277, v278, v279, v280, v281, v282, v283);
        v289 += 16;
        v286 += 16;
      }
      while (v289 != v322);
LABEL_548:
      v143 = this;
      LODWORD(v285) = *((_DWORD *)this + 19);
      goto LABEL_549;
    }
    v481 = &v286[((v322 - v289) & 0xFFFFFFFFFFFFFFF0) - 8];
    v482 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v483 = &v284[16 * v285];
    while (1)
    {
      v484 = *((_QWORD *)v483 - 2);
      v485 = *((_QWORD *)v483 - 1);
      v483 -= 16;
      *(_QWORD *)v483 = 0;
      *((_QWORD *)v483 + 1) = 0;
      *((_QWORD *)v481 - 1) = v484;
      *(_QWORD *)v481 = v485;
      v486 = *((_QWORD *)v483 + 1);
      *((_QWORD *)v483 + 1) = 0;
      if (v486)
      {
        v487 = *(_QWORD *)v486;
        if (v486 + 16 != *(_QWORD *)v486 && v487 != 0)
        {
          *(_QWORD *)v486 = 0;
          *(_DWORD *)(v486 + 8) = 0;
          WTF::fastFree(v487, v277, v278, v279, v280, v281, v282, v283);
        }
        v489 = *(_QWORD *)(v482 + 752);
        if (v489)
        {
          if (!(v486 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v486 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v486)) & 1) != 0)
          {
LABEL_781:
            v490 = *(unsigned int *)(v489 + 8000);
            if (v490 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v489, v486, (os_unfair_lock_s *)5, v279, v280, v281, v282, v283);
            }
            else
            {
              *(_QWORD *)(v489 + 8 * v490) = v486 | 0x5000000000000;
              *(_DWORD *)(v489 + 8000) = v490 + 1;
            }
            goto LABEL_783;
          }
          if (v486 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v486 >> 24)
          {
            v279 = 0;
          }
          else
          {
            v279 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v486 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v486) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v279 == 1)
              goto LABEL_781;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v489, v486, 1, v279, v280, v281, v282, v283);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v486, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_783:
      v491 = *((_QWORD *)v322 - 2);
      if ((v491 & 1) != 0 && (v491 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v491 & 0xFFFFFFFF8, v277, v278, v279, v280, v281, v282, v283);
      v481 -= 16;
      v322 = v483;
      if (v483 == v289)
        goto LABEL_548;
    }
  }
LABEL_549:
  v329 = (v285 - v287);
  *((_DWORD *)v143 + 19) = v329;
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v593, v329, v278, v279, v280, v281, v282, v283);
  v337 = (char *)*((_QWORD *)v143 + 10);
  v589 = (uint64_t)v143 + 80;
  v338 = *((unsigned int *)v143 + 23);
  v339 = &v337[16 * v338];
  v340 = 0;
  if ((_DWORD)v338)
  {
    v341 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v342 = &v337[16 * v338];
    v343 = v342;
    v594 = v341;
    while (1)
    {
      v344 = *((_QWORD *)v337 + 1);
      if (*(_BYTE *)(v344 + 32))
      {
        v345 = *(unsigned int *)(v344 + 12);
        if ((_DWORD)v345)
        {
          v346 = *(unint64_t **)v344;
          v347 = &v346[2 * v345];
          do
          {
            v348 = *v346;
            if ((*v346 & 1) != 0)
              v349 = *(unsigned int *)(v348 & 0xFFFFFFFFFFFFFFFCLL);
            else
              v349 = v348 > 3;
            if (v349)
            {
              v350 = 0;
              v351 = 8 * v349;
              do
              {
                v352 = *v346 & 0xFFFFFFFFFFFFFFFCLL;
                if ((*v346 & 1) != 0)
                  v352 = *(_QWORD *)(v352 + v350 + 8);
                if ((v352 & 8) != 0)
                {
                  if ((*(_BYTE *)(v352 - 79) & 1) == 0)
                    goto LABEL_567;
                }
                else if (*(_DWORD *)(v352 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                       || ((*(_QWORD *)((v352 & 0xFFFFFFFFFFFFC000) + 8 * ((v352 >> 10) & 0xF) + 0x28) >> (v352 >> 4)) & 1) == 0)
                {
                  goto LABEL_567;
                }
                v350 += 8;
              }
              while (v351 != v350);
            }
            v346 += 2;
          }
          while (v346 != v347);
        }
        goto LABEL_619;
      }
LABEL_567:
      v353 = v337;
      if (v343 != (char *)(*((_QWORD *)v143 + 10) + 16 * *((unsigned int *)v143 + 23)))
        break;
LABEL_605:
      v379 = *((_QWORD *)v337 + 1);
      *((_QWORD *)v337 + 1) = 0;
      if (v379)
      {
        v380 = *(unsigned int *)(v379 + 12);
        v381 = *(_QWORD **)v379;
        if ((_DWORD)v380)
        {
          v386 = v341;
          v387 = v340;
          v388 = 16 * v380;
          do
          {
            if ((*v381 & 1) != 0)
              WTF::fastFree(*v381 & 0xFFFFFFFFFFFFFFFCLL, v330, v331, v332, v333, v334, v335, v336);
            v381 += 2;
            v388 -= 16;
          }
          while (v388);
          v381 = *(_QWORD **)v379;
          LODWORD(v340) = v387;
          v341 = v386;
        }
        if ((_QWORD *)(v379 + 16) != v381 && v381 != 0)
        {
          *(_QWORD *)v379 = 0;
          *(_DWORD *)(v379 + 8) = 0;
          WTF::fastFree((unint64_t)v381, v330, v331, v332, v333, v334, v335, v336);
        }
        v383 = *(_QWORD *)(v341 + 752);
        if (v383)
        {
          if (!(v379 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v379 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v379)) & 1) != 0)
          {
LABEL_615:
            v384 = *(unsigned int *)(v383 + 8000);
            if (v384 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v383, v379, (os_unfair_lock_s *)5, v332, v333, v334, v335, v336);
            }
            else
            {
              *(_QWORD *)(v383 + 8 * v384) = v379 | 0x5000000000000;
              *(_DWORD *)(v383 + 8000) = v384 + 1;
            }
            goto LABEL_617;
          }
          if (v379 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v379 >> 24)
          {
            v332 = 0;
          }
          else
          {
            v332 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v379 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v379) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v332 == 1)
              goto LABEL_615;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v383, v379, 1, v332, v333, v334, v335, v336);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v379, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_617:
      v385 = *(_QWORD *)v337;
      if ((*(_QWORD *)v337 & 1) != 0 && (v385 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v385 & 0xFFFFFFFF8, v330, v331, v332, v333, v334, v335, v336);
      v342 = v337 + 16;
      v340 = (v340 + 1);
      v343 = v353;
LABEL_619:
      v337 += 16;
      if (v337 >= v339)
      {
        v337 = (char *)*((_QWORD *)v143 + 10);
        LODWORD(v338) = *((_DWORD *)v143 + 23);
        v339 = v343;
        goto LABEL_631;
      }
    }
    if (v342 == v337)
    {
      v353 = v343;
      goto LABEL_605;
    }
    if (v342 > v343)
    {
      v609 = v340;
      v354 = v343;
      v355 = v342;
      do
      {
        v356 = v343;
        v357 = *(_QWORD *)v355;
        v358 = *((_QWORD *)v355 + 1);
        *(_QWORD *)v355 = 0;
        *((_QWORD *)v355 + 1) = 0;
        *(_QWORD *)v354 = v357;
        *((_QWORD *)v354 + 1) = v358;
        v359 = *((_QWORD *)v355 + 1);
        *((_QWORD *)v355 + 1) = 0;
        if (v359)
        {
          v360 = *(unsigned int *)(v359 + 12);
          v361 = *(_QWORD **)v359;
          if ((_DWORD)v360)
          {
            v550 = 16 * v360;
            do
            {
              if ((*v361 & 1) != 0)
              {
                v602 = v550;
                WTF::fastFree(*v361 & 0xFFFFFFFFFFFFFFFCLL, v330, v331, v332, v333, v334, v335, v336);
                v550 = v602;
              }
              v361 += 2;
              v550 -= 16;
            }
            while (v550);
            v361 = *(_QWORD **)v359;
          }
          if ((_QWORD *)(v359 + 16) != v361 && v361 != 0)
          {
            *(_QWORD *)v359 = 0;
            *(_DWORD *)(v359 + 8) = 0;
            WTF::fastFree((unint64_t)v361, v330, v331, v332, v333, v334, v335, v336);
          }
          WTF::fastFree(v359, v330, v331, v332, v333, v334, v335, v336);
        }
        v363 = *(_QWORD *)v355;
        if ((*(_QWORD *)v355 & 1) != 0 && (v363 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v363 & 0xFFFFFFFF8, v330, v331, v332, v333, v334, v335, v336);
        v354 += 16;
        v355 += 16;
        v343 = v356;
      }
      while (v355 != v337);
      v364 = (v337 - v342) >> 4;
      LODWORD(v340) = v609;
LABEL_604:
      v353 = &v343[16 * v364];
      v143 = this;
      goto LABEL_605;
    }
    v610 = v343;
    v365 = &v343[v337 - v342];
    v366 = v337;
    while (1)
    {
      v367 = *((_QWORD *)v366 - 2);
      v368 = *((_QWORD *)v366 - 1);
      v366 -= 16;
      *(_QWORD *)v366 = 0;
      *((_QWORD *)v366 + 1) = 0;
      *((_QWORD *)v365 - 2) = v367;
      *((_QWORD *)v365 - 1) = v368;
      v365 -= 16;
      v369 = *((_QWORD *)v366 + 1);
      *((_QWORD *)v366 + 1) = 0;
      if (v369)
      {
        v370 = *(unsigned int *)(v369 + 12);
        v371 = *(_QWORD **)v369;
        if ((_DWORD)v370)
        {
          v376 = v339;
          v377 = v340;
          v378 = 16 * v370;
          do
          {
            if ((*v371 & 1) != 0)
              WTF::fastFree(*v371 & 0xFFFFFFFFFFFFFFFCLL, v330, v331, v332, v333, v334, v335, v336);
            v371 += 2;
            v378 -= 16;
          }
          while (v378);
          v371 = *(_QWORD **)v369;
          v340 = v377;
          v339 = v376;
          v341 = v594;
        }
        if ((_QWORD *)(v369 + 16) != v371 && v371 != 0)
        {
          *(_QWORD *)v369 = 0;
          *(_DWORD *)(v369 + 8) = 0;
          WTF::fastFree((unint64_t)v371, v330, v331, v332, v333, v334, v335, v336);
        }
        v373 = *(_QWORD *)(v341 + 752);
        if (v373)
        {
          if (!(v369 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v369 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v369)) & 1) != 0)
          {
LABEL_594:
            v374 = *(unsigned int *)(v373 + 8000);
            if (v374 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v373, v369, (os_unfair_lock_s *)5, v332, v333, v334, v335, v336);
            }
            else
            {
              *(_QWORD *)(v373 + 8 * v374) = v369 | 0x5000000000000;
              *(_DWORD *)(v373 + 8000) = v374 + 1;
            }
            goto LABEL_596;
          }
          if (v369 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v369 >> 24)
          {
            v332 = 0;
          }
          else
          {
            v332 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v369 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v369) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v332 == 1)
              goto LABEL_594;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v373, v369, 1, v332, v333, v334, v335, v336);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v369, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_596:
      v375 = *(_QWORD *)v366;
      if ((*(_QWORD *)v366 & 1) != 0 && (v375 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v375 & 0xFFFFFFFF8, v330, v331, v332, v333, v334, v335, v336);
      if (v366 == v342)
      {
        v364 = (v337 - v342) >> 4;
        v343 = v610;
        goto LABEL_604;
      }
    }
  }
  v342 = &v337[16 * v338];
LABEL_631:
  v389 = &v337[16 * v338];
  if (v342 == v389)
    goto LABEL_644;
  v390 = v340;
  if (v342 <= v339)
  {
    v492 = &v339[v389 - v342];
    v493 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v494 = &unk_1ECF42000;
    while (1)
    {
      v495 = *((_QWORD *)v389 - 2);
      v496 = *((_QWORD *)v389 - 1);
      v389 -= 16;
      *(_QWORD *)v389 = 0;
      *((_QWORD *)v389 + 1) = 0;
      *((_QWORD *)v492 - 2) = v495;
      *((_QWORD *)v492 - 1) = v496;
      v492 -= 16;
      v497 = *((_QWORD *)v389 + 1);
      *((_QWORD *)v389 + 1) = 0;
      if (!v497)
        goto LABEL_799;
      v498 = *(unsigned int *)(v497 + 12);
      v499 = *(_QWORD **)v497;
      if ((_DWORD)v498)
      {
        v504 = 16 * v498;
        do
        {
          if ((*v499 & 1) != 0)
          {
            WTF::fastFree(*v499 & 0xFFFFFFFFFFFFFFFCLL, v330, v331, v332, v333, v334, v335, v336);
            v494 = (_QWORD *)&unk_1ECF42000;
          }
          v499 += 2;
          v504 -= 16;
        }
        while (v504);
        v499 = *(_QWORD **)v497;
      }
      if ((_QWORD *)(v497 + 16) != v499 && v499 != 0)
      {
        *(_QWORD *)v497 = 0;
        *(_DWORD *)(v497 + 8) = 0;
        v557 = (unint64_t)v499;
        v558 = v494;
        WTF::fastFree(v557, v330, v331, v332, v333, v334, v335, v336);
        v494 = v558;
      }
      v501 = *(_QWORD *)(v493 + 752);
      if (!v501)
      {
        v554 = v497;
        v534 = v494;
        pas_try_deallocate_slow_no_cache(v554, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_963;
      }
      if (v497 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v497 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v497)) & 1) == 0)
      {
        v532 = (unint64_t *)v494[191];
        if (v497 >> 24 < *v532 || v532[1] <= v497 >> 24)
        {
          v332 = 0;
LABEL_962:
          v533 = v497;
          v534 = v494;
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v501, v533, 1, v332, v333, v334, v335, v336);
          goto LABEL_963;
        }
        v332 = (*(_DWORD *)((char *)v532 + ((((v497 >> 24) - *v532) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v497) - *(_BYTE *)v532) & 0xF))) & 3;
        if ((_DWORD)v332 != 1)
          goto LABEL_962;
      }
      v502 = *(unsigned int *)(v501 + 8000);
      if (v502 < 0x3E7)
      {
        *(_QWORD *)(v501 + 8 * v502) = v497 | 0x5000000000000;
        *(_DWORD *)(v501 + 8000) = v502 + 1;
        goto LABEL_799;
      }
      v556 = v497;
      v534 = v494;
      pas_thread_local_cache_append_deallocation_slow(v501, v556, (os_unfair_lock_s *)5, v332, v333, v334, v335, v336);
LABEL_963:
      v494 = v534;
LABEL_799:
      v503 = *(_QWORD *)v389;
      if ((*(_QWORD *)v389 & 1) != 0 && (v503 & 0xFFFFFFFF8) != 0)
      {
        v552 = v494;
        WTF::fastFree(v503 & 0xFFFFFFFF8, v330, v331, v332, v333, v334, v335, v336);
        v494 = v552;
      }
      if (v389 == v342)
        goto LABEL_643;
    }
  }
  do
  {
    v391 = *(_QWORD *)v342;
    v392 = *((_QWORD *)v342 + 1);
    *(_QWORD *)v342 = 0;
    *((_QWORD *)v342 + 1) = 0;
    *(_QWORD *)v339 = v391;
    *((_QWORD *)v339 + 1) = v392;
    v393 = *((_QWORD *)v342 + 1);
    *((_QWORD *)v342 + 1) = 0;
    if (v393)
    {
      v394 = *(unsigned int *)(v393 + 12);
      v395 = *(_QWORD **)v393;
      if ((_DWORD)v394)
      {
        v525 = 16 * v394;
        do
        {
          if ((*v395 & 1) != 0)
            WTF::fastFree(*v395 & 0xFFFFFFFFFFFFFFFCLL, v330, v331, v332, v333, v334, v335, v336);
          v395 += 2;
          v525 -= 16;
        }
        while (v525);
        v395 = *(_QWORD **)v393;
      }
      if ((_QWORD *)(v393 + 16) != v395 && v395 != 0)
      {
        *(_QWORD *)v393 = 0;
        *(_DWORD *)(v393 + 8) = 0;
        WTF::fastFree((unint64_t)v395, v330, v331, v332, v333, v334, v335, v336);
      }
      WTF::fastFree(v393, v330, v331, v332, v333, v334, v335, v336);
    }
    v397 = *(_QWORD *)v342;
    if ((*(_QWORD *)v342 & 1) != 0 && (v397 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v397 & 0xFFFFFFFF8, v330, v331, v332, v333, v334, v335, v336);
    v339 += 16;
    v342 += 16;
  }
  while (v342 != v389);
LABEL_643:
  v143 = this;
  LODWORD(v338) = *((_DWORD *)this + 23);
  LODWORD(v340) = v390;
LABEL_644:
  v398 = (v338 - v340);
  *((_DWORD *)v143 + 23) = v398;
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v589, v398, v331, v332, v333, v334, v335, v336);
  v406 = (char *)*((_QWORD *)v143 + 12);
  v407 = *((unsigned int *)v143 + 27);
  v408 = &v406[16 * v407];
  if ((_DWORD)v407)
  {
    v409 = 0;
    v410 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v411 = &v406[16 * v407];
    v412 = v411;
    while (1)
    {
      v413 = *((_QWORD *)v406 + 1);
      if (*(_BYTE *)(v413 + 40))
      {
        v414 = *(_DWORD *)(v413 + 12);
        if (!v414)
          goto LABEL_720;
        v415 = *(unint64_t **)v413;
        v416 = &v415[3 * v414];
        while (1)
        {
          v417 = *v415;
          if ((*v415 & 8) != 0)
          {
            if ((*(_BYTE *)(v417 - 79) & 1) == 0)
              break;
          }
          else if (*(_DWORD *)(v417 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                 || ((*(_QWORD *)((v417 & 0xFFFFFFFFFFFFC000) + 8 * ((v417 >> 10) & 0xF) + 0x28) >> (v417 >> 4)) & 1) == 0)
          {
            break;
          }
          v418 = v415[1];
          if (v418)
          {
            if ((v418 & 8) != 0)
            {
              if ((*(_BYTE *)(v418 - 79) & 1) == 0)
                break;
            }
            else if (*(_DWORD *)(v418 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
                   || ((*(_QWORD *)((v418 & 0xFFFFFFFFFFFFC000) + 8 * ((v418 >> 10) & 0xF) + 0x28) >> (v418 >> 4)) & 1) == 0)
            {
              break;
            }
          }
          v415 += 3;
          if (v415 == v416)
            goto LABEL_720;
        }
      }
      v419 = v406;
      if (v412 == (char *)(*((_QWORD *)v143 + 12) + 16 * *((unsigned int *)v143 + 27)))
        goto LABEL_703;
      if (v411 == v406)
      {
        v419 = v412;
        goto LABEL_703;
      }
      v611 = v409;
      v599 = v412;
      if (v411 > v412)
      {
        v420 = v412;
        v421 = v411;
        while (2)
        {
          v422 = *(_QWORD *)v421;
          v423 = *((_QWORD *)v421 + 1);
          *(_QWORD *)v421 = 0;
          *((_QWORD *)v421 + 1) = 0;
          *(_QWORD *)v420 = v422;
          *((_QWORD *)v420 + 1) = v423;
          v424 = *((_QWORD *)v421 + 1);
          *((_QWORD *)v421 + 1) = 0;
          if (!v424)
            goto LABEL_679;
          v399 = *(_QWORD *)v424;
          if (v424 + 16 != *(_QWORD *)v424 && v399 != 0)
          {
            *(_QWORD *)v424 = 0;
            *(_DWORD *)(v424 + 8) = 0;
            v426 = *(_QWORD *)(v410 + 752);
            if (v426)
            {
              if (v399 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v399 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v399)) & 1) == 0)
              {
                if (v399 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v399 >> 24)
                {
                  v401 = 0;
                }
                else
                {
                  v401 = (*(_DWORD *)((char *)off_1ECF425F8
                                    + ((((v399 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                    + 24) >> (2 * ((BYTE3(v399) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                  if ((_DWORD)v401 == 1)
                    goto LABEL_672;
                }
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v426, v399, 1, v401, v402, v403, v404, v405);
              }
              else
              {
LABEL_672:
                v427 = *(unsigned int *)(v426 + 8000);
                if (v427 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v426, v399, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
                }
                else
                {
                  *(_QWORD *)(v426 + 8 * v427) = v399 | 0x5000000000000;
                  *(_DWORD *)(v426 + 8000) = v427 + 1;
                }
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v399, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          v428 = *(_QWORD *)(v410 + 752);
          if (v428)
          {
            if (!(v424 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v424 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v424)) & 1) != 0)
            {
LABEL_677:
              v429 = *(unsigned int *)(v428 + 8000);
              if (v429 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v428, v424, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
              }
              else
              {
                *(_QWORD *)(v428 + 8 * v429) = v424 | 0x5000000000000;
                *(_DWORD *)(v428 + 8000) = v429 + 1;
              }
              goto LABEL_679;
            }
            if (v424 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v424 >> 24)
            {
              v401 = 0;
            }
            else
            {
              v401 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v424 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v424) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v401 == 1)
                goto LABEL_677;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v428, v424, 1, v401, v402, v403, v404, v405);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v424, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_679:
          v430 = *(_QWORD *)v421;
          if ((*(_QWORD *)v421 & 1) != 0 && (v430 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v430 & 0xFFFFFFFF8, (void *)v399, v400, v401, v402, v403, v404, v405);
          v421 += 16;
          v420 += 16;
          if (v421 == v406)
          {
            v431 = (v406 - v411) >> 4;
            goto LABEL_702;
          }
          continue;
        }
      }
      v432 = 0;
      v433 = &v412[v406 - v411];
      do
      {
        v434 = &v406[v432];
        v435 = &v433[v432];
        v436 = *(_QWORD *)&v406[v432 - 16];
        v437 = *(_QWORD *)&v406[v432 - 8];
        *((_QWORD *)v434 - 2) = 0;
        *((_QWORD *)v434 - 1) = 0;
        *((_QWORD *)v435 - 2) = v436;
        *((_QWORD *)v435 - 1) = v437;
        v438 = *(_QWORD *)&v406[v432 - 8];
        *((_QWORD *)v434 - 1) = 0;
        if (!v438)
          goto LABEL_699;
        v399 = *(_QWORD *)v438;
        if (v438 + 16 != *(_QWORD *)v438 && v399 != 0)
        {
          *(_QWORD *)v438 = 0;
          *(_DWORD *)(v438 + 8) = 0;
          v440 = *(_QWORD *)(v410 + 752);
          if (v440)
          {
            if (!(v399 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v399 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v399)) & 1) != 0)
            {
LABEL_692:
              v441 = *(unsigned int *)(v440 + 8000);
              if (v441 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v440, v399, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
              }
              else
              {
                *(_QWORD *)(v440 + 8 * v441) = v399 | 0x5000000000000;
                *(_DWORD *)(v440 + 8000) = v441 + 1;
              }
              goto LABEL_694;
            }
            if (v399 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v399 >> 24)
            {
              v401 = 0;
            }
            else
            {
              v401 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v399 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v399) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v401 == 1)
                goto LABEL_692;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v440, v399, 1, v401, v402, v403, v404, v405);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v399, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
LABEL_694:
        v442 = *(_QWORD *)(v410 + 752);
        if (!v442)
        {
          pas_try_deallocate_slow_no_cache(v438, (uint64_t)&bmalloc_heap_config, 1);
          goto LABEL_699;
        }
        if (v438 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v438 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v438)) & 1) == 0)
        {
          if (v438 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v438 >> 24)
          {
            v401 = 0;
LABEL_852:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v442, v438, 1, v401, v402, v403, v404, v405);
            goto LABEL_699;
          }
          v401 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((v438 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v438) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v401 != 1)
            goto LABEL_852;
        }
        v443 = *(unsigned int *)(v442 + 8000);
        if (v443 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v442, v438, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
        }
        else
        {
          *(_QWORD *)(v442 + 8 * v443) = v438 | 0x5000000000000;
          *(_DWORD *)(v442 + 8000) = v443 + 1;
        }
LABEL_699:
        v444 = *((_QWORD *)v434 - 2);
        if ((v444 & 1) != 0 && (v444 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v444 & 0xFFFFFFFF8, (void *)v399, v400, v401, v402, v403, v404, v405);
        v432 -= 16;
      }
      while (&v406[v432] != v411);
      v143 = this;
      v431 = (v406 - v411) >> 4;
LABEL_702:
      v419 = &v599[16 * v431];
      v409 = v611;
LABEL_703:
      v445 = *((_QWORD *)v406 + 1);
      *((_QWORD *)v406 + 1) = 0;
      if (v445)
      {
        v399 = *(_QWORD *)v445;
        if (v445 + 16 != *(_QWORD *)v445 && v399 != 0)
        {
          *(_QWORD *)v445 = 0;
          *(_DWORD *)(v445 + 8) = 0;
          v447 = *(_QWORD *)(v410 + 752);
          if (v447)
          {
            if (v399 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v399 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v399)) & 1) == 0)
            {
              if (v399 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v399 >> 24)
              {
                v401 = 0;
              }
              else
              {
                v401 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v399 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v399) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v401 == 1)
                  goto LABEL_711;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v447, v399, 1, v401, v402, v403, v404, v405);
            }
            else
            {
LABEL_711:
              v448 = *(unsigned int *)(v447 + 8000);
              if (v448 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v447, v399, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
              }
              else
              {
                *(_QWORD *)(v447 + 8 * v448) = v399 | 0x5000000000000;
                *(_DWORD *)(v447 + 8000) = v448 + 1;
              }
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v399, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        v449 = *(_QWORD *)(v410 + 752);
        if (v449)
        {
          if (v445 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v445 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v445)) & 1) == 0)
          {
            if (v445 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v445 >> 24)
            {
              v401 = 0;
            }
            else
            {
              v401 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v445 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v445) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v401 == 1)
                goto LABEL_716;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v449, v445, 1, v401, v402, v403, v404, v405);
          }
          else
          {
LABEL_716:
            v450 = *(unsigned int *)(v449 + 8000);
            if (v450 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v449, v445, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
            }
            else
            {
              *(_QWORD *)(v449 + 8 * v450) = v445 | 0x5000000000000;
              *(_DWORD *)(v449 + 8000) = v450 + 1;
            }
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v445, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
      v451 = *(_QWORD *)v406;
      if ((*(_QWORD *)v406 & 1) != 0 && (v451 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v451 & 0xFFFFFFFF8, (void *)v399, v400, v401, v402, v403, v404, v405);
      v411 = v406 + 16;
      ++v409;
      v412 = v419;
LABEL_720:
      v406 += 16;
      if (v406 >= v408)
      {
        v452 = v409;
        v406 = (char *)*((_QWORD *)v143 + 12);
        LODWORD(v407) = *((_DWORD *)v143 + 27);
        v408 = v412;
        goto LABEL_722;
      }
    }
  }
  v452 = 0;
  v411 = &v406[16 * v407];
LABEL_722:
  v453 = &v406[16 * v407];
  if (v411 == v453)
    goto LABEL_822;
  if (v411 > v408)
  {
    v454 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v455 = *(_QWORD *)v411;
      v456 = *((_QWORD *)v411 + 1);
      *(_QWORD *)v411 = 0;
      *((_QWORD *)v411 + 1) = 0;
      *(_QWORD *)v408 = v455;
      *((_QWORD *)v408 + 1) = v456;
      v457 = *((_QWORD *)v411 + 1);
      *((_QWORD *)v411 + 1) = 0;
      if (v457)
      {
        v458 = *(_QWORD *)v457;
        if (v457 + 16 != *(_QWORD *)v457 && v458 != 0)
        {
          *(_QWORD *)v457 = 0;
          *(_DWORD *)(v457 + 8) = 0;
          WTF::fastFree(v458, (void *)v399, v400, v401, v402, v403, v404, v405);
        }
        v460 = *(_QWORD *)(v454 + 752);
        if (v460)
        {
          if (!(v457 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v457 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v457)) & 1) != 0)
          {
LABEL_734:
            v461 = *(unsigned int *)(v460 + 8000);
            if (v461 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v460, v457, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
            }
            else
            {
              *(_QWORD *)(v460 + 8 * v461) = v457 | 0x5000000000000;
              *(_DWORD *)(v460 + 8000) = v461 + 1;
            }
            goto LABEL_736;
          }
          if (v457 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v457 >> 24)
          {
            v401 = 0;
          }
          else
          {
            v401 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v457 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v457) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v401 == 1)
              goto LABEL_734;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v460, v457, 1, v401, v402, v403, v404, v405);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v457, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_736:
      v462 = *(_QWORD *)v411;
      if ((*(_QWORD *)v411 & 1) != 0 && (v462 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v462 & 0xFFFFFFFF8, (void *)v399, v400, v401, v402, v403, v404, v405);
      v411 += 16;
      v408 += 16;
      if (v411 == v453)
        goto LABEL_821;
    }
  }
  v505 = &v408[((v453 - v411) & 0xFFFFFFFFFFFFFFF0) - 8];
  v506 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v507 = &v406[16 * v407];
  do
  {
    v508 = *((_QWORD *)v507 - 2);
    v509 = *((_QWORD *)v507 - 1);
    v507 -= 16;
    *(_QWORD *)v507 = 0;
    *((_QWORD *)v507 + 1) = 0;
    *((_QWORD *)v505 - 1) = v508;
    *(_QWORD *)v505 = v509;
    v510 = *((_QWORD *)v507 + 1);
    *((_QWORD *)v507 + 1) = 0;
    if (v510)
    {
      v511 = *(_QWORD *)v510;
      if (v510 + 16 != *(_QWORD *)v510 && v511 != 0)
      {
        *(_QWORD *)v510 = 0;
        *(_DWORD *)(v510 + 8) = 0;
        WTF::fastFree(v511, (void *)v399, v400, v401, v402, v403, v404, v405);
      }
      v513 = *(_QWORD *)(v506 + 752);
      if (!v513)
      {
        pas_try_deallocate_slow_no_cache(v510, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_819;
      }
      if (v510 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v510 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v510)) & 1) == 0)
      {
        if (v510 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v510 >> 24)
        {
          v401 = 0;
LABEL_967:
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v513, v510, 1, v401, v402, v403, v404, v405);
          goto LABEL_819;
        }
        v401 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v510 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v510) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v401 != 1)
          goto LABEL_967;
      }
      v514 = *(unsigned int *)(v513 + 8000);
      if (v514 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v513, v510, (os_unfair_lock_s *)5, v401, v402, v403, v404, v405);
      }
      else
      {
        *(_QWORD *)(v513 + 8 * v514) = v510 | 0x5000000000000;
        *(_DWORD *)(v513 + 8000) = v514 + 1;
      }
    }
LABEL_819:
    v515 = *((_QWORD *)v453 - 2);
    if ((v515 & 1) != 0 && (v515 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v515 & 0xFFFFFFFF8, (void *)v399, v400, v401, v402, v403, v404, v405);
    v505 -= 16;
    v453 = v507;
  }
  while (v507 != v411);
LABEL_821:
  LODWORD(v407) = *((_DWORD *)v143 + 27);
LABEL_822:
  v516 = (v407 - v452);
  *((_DWORD *)v143 + 27) = v516;
  if (*((_DWORD *)v143 + 26) > v516)
  {
    v568 = *((_QWORD *)v143 + 12);
    if ((_DWORD)v407 == v452)
    {
LABEL_1119:
      if (v568)
      {
        if (*((_QWORD *)v143 + 12) == v568)
        {
          *((_QWORD *)this + 12) = 0;
          *((_DWORD *)this + 26) = 0;
        }
        WTF::fastFree(v568, (void *)v399, v400, v401, v402, v403, v404, v405);
      }
      return;
    }
    if (!(v516 >> 28))
    {
      v569 = WTF::fastMalloc((WTF *)(16 * v516));
      v143 = this;
      *((_DWORD *)this + 26) = v516;
      *((_QWORD *)this + 12) = v569;
      if (v569 != v568)
      {
        v570 = (_QWORD *)v569;
        v571 = (uint64_t *)(v568 + 16 * v516);
        v572 = (uint64_t *)v568;
        v143 = this;
        do
        {
          v573 = *v572;
          v574 = v572[1];
          *v572 = 0;
          v572[1] = 0;
          *v570 = v573;
          v570[1] = v574;
          v575 = v572[1];
          v572[1] = 0;
          if (v575)
          {
            v576 = *(_QWORD *)v575;
            if (v575 + 16 != *(_QWORD *)v575 && v576 != 0)
            {
              *(_QWORD *)v575 = 0;
              *(_DWORD *)(v575 + 8) = 0;
              WTF::fastFree(v576, (void *)v399, v400, v401, v402, v403, v404, v405);
            }
            WTF::fastFree(v575, (void *)v399, v400, v401, v402, v403, v404, v405);
          }
          v578 = *v572;
          if ((*v572 & 1) != 0 && (v578 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v578 & 0xFFFFFFFF8, (void *)v399, v400, v401, v402, v403, v404, v405);
          v572 += 2;
          v570 += 2;
        }
        while (v572 != v571);
      }
      goto LABEL_1119;
    }
LABEL_1177:
    __break(0xC471u);
    JUMPOUT(0x198202FCCLL);
  }
}

void JSC::RecordedStatuses::shrinkToFit(JSC::RecordedStatuses *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;

  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this, *((unsigned int *)this + 3), a3, a4, a5, a6, a7, a8);
  v16 = *((unsigned int *)this + 7);
  if (*((_DWORD *)this + 6) > v16)
  {
    v38 = (uint64_t *)*((_QWORD *)this + 2);
    if ((_DWORD)v16)
    {
      if (v16 >> 28)
        goto LABEL_43;
      v39 = WTF::fastMalloc((WTF *)(16 * v16));
      *((_DWORD *)this + 6) = v16;
      *((_QWORD *)this + 2) = v39;
      if ((uint64_t *)v39 != v38)
        WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::move(v38, &v38[2 * v16], v39, v11, v12, v13, v14, v15);
    }
    if (v38)
    {
      if (*((uint64_t **)this + 2) == v38)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
      }
      WTF::fastFree((unint64_t)v38, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  v17 = *((unsigned int *)this + 11);
  if (*((_DWORD *)this + 10) > v17)
  {
    v40 = (uint64_t *)*((_QWORD *)this + 4);
    if ((_DWORD)v17)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x198203218);
      }
      v41 = WTF::fastMalloc((WTF *)(16 * v17));
      *((_DWORD *)this + 10) = v17;
      *((_QWORD *)this + 4) = v41;
      if ((uint64_t *)v41 != v40)
        WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::move(v40, &v40[2 * v17], v41, v11, v12, v13, v14, v15);
    }
    if (v40)
    {
      if (*((uint64_t **)this + 4) == v40)
      {
        *((_QWORD *)this + 4) = 0;
        *((_DWORD *)this + 10) = 0;
      }
      WTF::fastFree((unint64_t)v40, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 48, *((unsigned int *)this + 15), v10, v11, v12, v13, v14, v15);
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 64, *((unsigned int *)this + 19), v18, v19, v20, v21, v22, v23);
  WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 80, *((unsigned int *)this + 23), v24, v25, v26, v27, v28, v29);
  v37 = *((unsigned int *)this + 27);
  if (*((_DWORD *)this + 26) > v37)
  {
    v42 = *((_QWORD *)this + 12);
    if (!(_DWORD)v37)
    {
LABEL_22:
      if (v42)
      {
        if (*((_QWORD *)this + 12) == v42)
        {
          *((_QWORD *)this + 12) = 0;
          *((_DWORD *)this + 26) = 0;
        }
        WTF::fastFree(v42, v30, v31, v32, v33, v34, v35, v36);
      }
      return;
    }
    v55 = (_QWORD *)*((_QWORD *)this + 12);
    if (!(v37 >> 28))
    {
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v37));
      *((_DWORD *)this + 26) = v37;
      *((_QWORD *)this + 12) = v43;
      v42 = (unint64_t)v55;
      if (v43 != v55)
      {
        v44 = &v55[2 * v37];
        v45 = v55;
        do
        {
          v46 = *v45;
          v47 = v45[1];
          *v45 = 0;
          v45[1] = 0;
          *v43 = v46;
          v43[1] = v47;
          v48 = v43;
          v49 = v45[1];
          v50 = v45;
          v45[1] = 0;
          if (v49)
          {
            v51 = *(_QWORD *)v49;
            if (v49 + 16 != *(_QWORD *)v49 && v51 != 0)
            {
              *(_QWORD *)v49 = 0;
              *(_DWORD *)(v49 + 8) = 0;
              WTF::fastFree(v51, v30, v31, v32, v33, v34, v35, v36);
            }
            WTF::fastFree(v49, v30, v31, v32, v33, v34, v35, v36);
          }
          v53 = v50;
          v54 = *v50;
          if ((*v50 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
          {
            WTF::fastFree(v54 & 0xFFFFFFFF8, v30, v31, v32, v33, v34, v35, v36);
            v53 = v50;
          }
          v45 = v53 + 2;
          v43 = v48 + 2;
          v42 = (unint64_t)v55;
        }
        while (v45 != v44);
      }
      goto LABEL_22;
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x198203210);
  }
}

void JSC::reduceWhitespace(JSC *this@<X0>, const WTF::CString *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  WTF::PrintStream *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  _BYTE *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = off_1E3572250;
  v28 = v30;
  v29 = xmmword_199122F80;
  v30[0] = 0;
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v11 = *(_QWORD *)this + 16;
  else
    v11 = 0;
  if (v10)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(v10 + 8);
      if (v15 <= v13)
        break;
      v16 = *(unsigned __int8 *)(v11 + v13);
      if ((v16 - 9) < 5 || v16 == 32)
      {
        if (v15 > v14)
        {
          v17 = v14;
          while (1)
          {
            v18 = *(unsigned __int8 *)(v11 + v17);
            if ((v18 - 9) >= 5 && v18 != 32)
              break;
            v17 = (v14 + 1);
            v14 = v17;
            if (v15 <= v17)
              goto LABEL_15;
          }
        }
        v17 = v14;
LABEL_15:
        v19 = (WTF::PrintStream *)((uint64_t (*)(void (***)(WTF::StringPrintStream *__hidden), const WTF::CString *))v27[4])(&v27, a2);
        WTF::PrintStream::printf(v19, "%c", 32);
        v27[5]((WTF::StringPrintStream *)&v27);
        v14 = v17;
      }
      else
      {
        v20 = (char)v16;
        v21 = (WTF::PrintStream *)((uint64_t (*)(void (***)(WTF::StringPrintStream *__hidden), const WTF::CString *))v27[4])(&v27, a2);
        WTF::PrintStream::printf(v21, "%c", v20);
        v27[5]((WTF::StringPrintStream *)&v27);
        v14 = (v14 + 1);
      }
      v10 = *(_QWORD *)this;
      v13 = v14;
    }
    while (*(_QWORD *)this);
    v23 = v28;
    v22 = v29;
    *a9 = 0;
    if (!v23)
    {
      v26 = 0;
LABEL_25:
      WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
      return;
    }
  }
  else
  {
    v22 = 0;
    v23 = v30;
  }
  if (v22 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19820342CLL);
  }
  v24 = WTF::fastMalloc((WTF *)(v22 + 17));
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 8) = v22;
  *a9 = v24;
  v25 = v24 + 16;
  memcpy((void *)(v24 + 16), v23, v22);
  *(_BYTE *)(v25 + v22) = 0;
  v26 = (unint64_t)v28;
  if (v28 != v30)
    goto LABEL_25;
}

void JSC::linkMonomorphicCall(JSC::VM *a1, JSC::JSCell *a2, JSC::CallLinkInfoBase *a3, JSC::CodeBlock *this, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  JSC::JSCell *v9;
  char *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  int v23;
  BOOL v25;
  const void *v26;
  JSC::JSCell *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  JSC::JSCell *v41;
  JSC::CodeBlock *v42;
  JSC::JSCell *v43;
  uint64_t v44;
  const void *v45;

  v45 = a6;
  if (*((_BYTE *)a2 + 5) == 18)
    v9 = a2;
  else
    v9 = 0;
  if ((a5 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1982035BCLL);
  }
  *((_QWORD *)a3 + 5) = a5;
  v14 = (char *)a1 + 192;
  if (a5 && *((_DWORD *)a1 + 190) >= *((unsigned __int8 *)a2 + 7))
  {
    v39 = a5;
    v40 = v14;
    v26 = a6;
    v27 = v9;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14, (unint64_t)a2);
    v9 = v27;
    a6 = v26;
    a5 = v39;
    v14 = v40;
  }
  *((_QWORD *)a3 + 3) = this;
  *((_QWORD *)a3 + 4) = a6;
  *(_WORD *)((char *)a3 + 17) = *(_WORD *)((_BYTE *)a3 + 17) & 0xF1FF | 0x200;
  *((_QWORD *)a3 + 6) = a5;
  if (a5 && *((_DWORD *)a1 + 190) >= *((unsigned __int8 *)a2 + 7))
  {
    v28 = v9;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14, (unint64_t)a2);
    v9 = v28;
  }
  if (v9 && (v15 = *((_QWORD *)v9 + 15)) != 0)
  {
    v16 = *(_BYTE *)(v15 + 12) & 0xFE;
    if (BYTE1(dword_1ECF4C28A))
      v17 = v16 == 4;
    else
      v17 = 0;
    if (!v17 && HIBYTE(word_1ECF4C286) == 0)
      goto LABEL_21;
  }
  else if (!HIBYTE(word_1ECF4C286))
  {
    goto LABEL_21;
  }
  v19 = *((_QWORD *)a3 + 9);
  if ((v19 & 1) != 0)
  {
    v29 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v30 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v41 = v9;
      v37 = WTF::fastMalloc((WTF *)0x10);
      v9 = v41;
      *(_QWORD *)v37 = v29;
      *(_DWORD *)(v37 + 8) = v30;
      v32 = 1;
      v29 = v37;
    }
    else
    {
      v32 = v29;
      v29 = v30 << 36;
    }
    v19 = v29 | v32;
    v43 = v9;
    if (((v29 | v32) & 1) != 0)
    {
      v33 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      if ((v19 & 2) != 0
        || ((v34 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
          ? (v35 = (_DWORD)v34 == -1)
          : (v35 = 1),
            v35))
      {
        v36 = 2;
      }
      else if (v34 >> 28)
      {
        v38 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        v33 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v33 = v38;
        *(_DWORD *)(v33 + 8) = v34;
        v36 = 1;
      }
      else
      {
        v36 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
        v33 = v34 << 36;
      }
      v20 = 0;
      v21 = v33 | v36;
      goto LABEL_19;
    }
  }
  else
  {
    v43 = v9;
  }
  v20 = 1;
  v21 = v19;
LABEL_19:
  v44 = v21;
  v42 = this;
  WTF::dataLog<char [17],JSC::FullCodeOrigin,char [5],WTF::PointerDump<JSC::CodeBlock>,char [17],WTF::CodePtr<(WTF::PtrTag)357,(WTF::FunctionAttributes)0>,char [2]>("Linking call in ", (JSC::FullCodeOrigin *)&v43, " to ", (uint64_t *)&v42, ", entrypoint at ", &v45, "\n");
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v22, (uint64_t)a3, (uint64_t)this, a5, (uint64_t)a6, a7, a8);
  if ((v20 & 1) == 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, v22, (uint64_t)a3, (uint64_t)this, a5, (uint64_t)a6, a7, a8);
LABEL_21:
  if (this)
    JSC::CodeBlock::linkIncomingCall((uint64_t)this, a2, a3);
  v23 = *(_WORD *)((char *)a3 + 17) >> 4;
  v25 = v23 != 8 && (v23 - 5) < 0xFFFFFFFE;
  if ((*(_WORD *)((_BYTE *)a3 + 17) & 0x100) != 0 && !v25)
    JSC::CallLinkInfo::setVirtualCall(a3, a1, (uint64_t)a3, (uint64_t)this, a5, (uint64_t)a6, a7, a8, a9);
}

uint64_t WTF::dataLog<char [17],JSC::FullCodeOrigin,char [5],WTF::PointerDump<JSC::CodeBlock>,char [17],WTF::CodePtr<(WTF::PtrTag)357,(WTF::FunctionAttributes)0>,char [2]>(const char *a1, JSC::FullCodeOrigin *a2, const char *a3, uint64_t *a4, const char *a5, const void **a6, const char *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  const void *v18;
  char v20;
  char **v21;
  char *v22;

  v14 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v14 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v15 = WTF::s_file;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v16, "%s", a1);
  JSC::FullCodeOrigin::dump(a2, v16);
  WTF::PrintStream::printf(v16, "%s", a3);
  if (*a4)
  {
    JSC::CodeBlock::dumpAssumingJITType(*a4);
  }
  else
  {
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
    WTF::PrintStream::printf(v17, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
  }
  WTF::PrintStream::printf(v16, "%s", a5);
  if (*a6)
    v18 = *a6;
  else
    v18 = 0;
  WTF::CodePtrBase::dumpWithName(*a6, v18, "CodePtr", 8, (uint64_t)v16);
  WTF::PrintStream::printf(v16, "%s", a7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
}

JSC::Compilation *JSC::WebAssemblyFunction::jsCallEntrypoint(JSC::WebAssemblyFunction *this)
{
  JSC::Wasm::Callee *v2;

  v2 = (JSC::Wasm::Callee *)*((_QWORD *)this + 13);
  if (v2)
    return (JSC::Compilation *)JSC::Wasm::Callee::entrypoint(v2);
  else
    return JSC::WebAssemblyFunction::jsCallEntrypointSlow((uint64_t)this);
}

void JSC::linkPolymorphicCall(JSC::VM *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v14;
  char v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WTF **v19;
  uint8x8_t v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;
  int v31;
  int v32;
  WTF *v33;
  unsigned int v34;
  WTF **v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  __int128 *v47;
  uint8x8_t v48;
  WTF *v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  char **v57;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  char **v63;
  BOOL v64;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  char **v69;
  BOOL v70;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  _BOOL4 v75;
  char **v76;
  BOOL v77;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  char **v83;
  BOOL v84;
  JSC::WebAssemblyFunction *v86;
  unsigned int v87;
  BOOL v88;
  int v89;
  BOOL v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v94;
  char **v95;
  BOOL v96;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  _OWORD *v104;
  __int128 v105;
  uint64_t CTIInternalFunctionTrampolineFor;
  uint64_t v107;
  _BOOL4 v108;
  int v109;
  JSC::CallFrame *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint8x8_t v134;
  JSC::JITStubRoutine *v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  WTF *v141;
  unint64_t v143;
  uint64_t v145;
  WTF *v146;
  uint64_t v147;
  unint64_t v148;
  WTF *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint8x8_t v158;
  JSC::JITStubRoutine *v159;
  int v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  WTF *v193;
  JSC::VM *v194;
  char v195;
  unsigned __int8 *v197;
  int v198;
  WTF *v199;
  int v200;
  _QWORD v202[2];
  WTF *v203[2];
  __int128 v204;
  WTF *v205;
  uint64_t v206;
  _BYTE v207[512];
  WTF *v208;
  unint64_t v209;
  _QWORD v210[2];

  v10 = (uint64_t)a1;
  ++*((_DWORD *)a1 + 229);
  if (!a5)
  {
    JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)a4, a1, a3, a4, 0, a6, a7, a8, a9);
    goto LABEL_239;
  }
  v198 = a2[5];
  if (v198 == 18)
    v11 = a2;
  else
    v11 = 0;
  v197 = v11;
  v12 = *(unsigned __int8 *)(a4 + 17) >> 4;
  if (v12 > 9)
  {
    __break(0xC471u);
    JUMPOUT(0x198204564);
  }
  v14 = 1 << v12;
  if ((v14 & 0x19E) != 0)
  {
    v15 = 0;
  }
  else
  {
    if ((v14 & 0x260) == 0)
    {
      __break(0xC471u);
      goto LABEL_301;
    }
    v15 = 1;
  }
  v16 = (WTF *)v210;
  v208 = (WTF *)v210;
  v209 = 1;
  v17 = *(_QWORD *)(a4 + 56);
  v195 = v15;
  if (!v17)
  {
    v18 = *(_QWORD *)(a4 + 40);
    if ((v18 & 1) == 0)
    {
      LOBYTE(v17) = 0;
      if (v18)
      {
        v210[0] = *(_QWORD *)(a4 + 40);
        v209 = 0x100000001;
      }
      goto LABEL_12;
    }
    __break(0xC471u);
LABEL_301:
    JUMPOUT(0x198204494);
  }
  v19 = (WTF **)v207;
  v205 = (WTF *)v207;
  v206 = 1;
  v32 = *(_DWORD *)(v17 + 48);
  v33 = (WTF *)(v32 - 1);
  if (v32 != 1)
  {
    v34 = 0;
    v16 = 0;
    v35 = (WTF **)(v17 + 72);
    do
    {
      if ((unint64_t)v16 >= *(unsigned int *)(v17 + 48))
      {
        __break(1u);
        goto LABEL_282;
      }
      v36 = *v35;
      v203[0] = *v35;
      if (v34 == (_DWORD)v206)
      {
        a1 = (JSC::VM *)WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v205, (void *)(v34 + 1), (unint64_t)v203, a4, a5, a6, a7, a8);
        v34 = HIDWORD(v206);
        *((_QWORD *)v205 + HIDWORD(v206)) = *(_QWORD *)a1;
      }
      else
      {
        *((_QWORD *)v205 + v34) = v36;
      }
      HIDWORD(v206) = ++v34;
      v16 = (WTF *)((char *)v16 + 1);
      v35 += 4;
    }
    while (v33 != v16);
    v148 = (unint64_t)v208;
    v16 = (WTF *)v210;
    if (v208 != (WTF *)v210)
    {
      if (v208)
      {
        v208 = 0;
        LODWORD(v209) = 0;
        WTF::fastFree(v148, a2, a3, a4, a5, a6, a7, a8);
      }
      v208 = (WTF *)v210;
    }
  }
  v149 = v205;
  if (v205 == (WTF *)v207)
  {
    v150 = HIDWORD(v206);
    if (HIDWORD(v206))
    {
      v152 = 8 * HIDWORD(v206);
      v153 = v210;
      do
      {
        v154 = (uint64_t)*v19++;
        *v153++ = v154;
        v152 -= 8;
      }
      while (v152);
    }
    v151 = v206;
  }
  else
  {
    v205 = (WTF *)v207;
    v208 = v149;
    v151 = v206;
    v150 = HIDWORD(v206);
    LODWORD(v206) = 1;
  }
  v209 = __PAIR64__(v150, v151);
  LODWORD(v17) = (*(unsigned __int8 *)(v17 + 64) >> 1) & 1;
LABEL_12:
  v19 = &v205;
  JSC::variantListWithVariant((uint64_t)&v208, a5, a4, a5, a6, a7, a8, (uint64_t)&v205);
  a1 = v208;
  if (v208 != (WTF *)v210)
  {
    if (v208)
    {
LABEL_282:
      v208 = 0;
      LODWORD(v209) = 0;
      WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
    }
    v208 = v16;
  }
  v21 = v205;
  if (v205 == (WTF *)(v19 + 2))
  {
    v22 = HIDWORD(v206);
    if (HIDWORD(v206))
    {
      v145 = 8 * HIDWORD(v206);
      v146 = v16;
      do
      {
        v147 = *(_QWORD *)v21;
        v21 = (WTF *)((char *)v21 + 8);
        *(_QWORD *)v146 = v147;
        v146 = (WTF *)((char *)v146 + 8);
        v145 -= 8;
      }
      while (v145);
    }
    v23 = v206;
  }
  else
  {
    v205 = (WTF *)(v19 + 2);
    v208 = v21;
    v23 = v206;
    v22 = HIDWORD(v206);
    LODWORD(v206) = 1;
  }
  v209 = __PAIR64__(v22, v23);
  if ((v17 & 1) != 0)
    goto LABEL_57;
  if (v22)
  {
    v24 = (uint64_t *)v208;
    v25 = v208;
    while (1)
    {
      v26 = *(unsigned int *)(16 * (**(_DWORD **)v25 & 0xFFFFFFFE) + 0x4C);
      v27 = *(_DWORD *)(16 * (**(_DWORD **)v25 & 0xFFFFFFFE) + 0x4C) != 0;
      v28 = (char **)(16 * v26);
      if ((_DWORD)v26)
        v29 = v28 == &JSC::ExecutableBase::s_info;
      else
        v29 = 1;
      if (!v29)
      {
        do
        {
          v28 = (char **)v28[2];
          v27 = v28 != 0;
        }
        while (v28 != &JSC::ExecutableBase::s_info && v28 != 0);
      }
      if (v27)
        break;
      v25 = (WTF *)((char *)v25 + 8);
      if (v25 == (WTF *)((char *)v208 + 8 * v22))
        goto LABEL_30;
    }
    v203[0] = (WTF *)&v204;
    v203[1] = (WTF *)1;
    v37 = 8 * v22;
    do
    {
      v38 = *v24;
      if (*(_BYTE *)(*v24 + 5) == 26)
      {
        v38 = *(_QWORD *)(v38 + 24);
        if ((v38 & 1) != 0)
          v38 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 48);
      }
      JSC::variantListWithVariant((uint64_t)v203, v38, a4, a5, a6, a7, a8, (uint64_t)&v205);
      v39 = v203[0];
      if ((__int128 *)v203[0] != &v204)
      {
        if (v203[0])
        {
          v203[0] = 0;
          LODWORD(v203[1]) = 0;
          WTF::fastFree((unint64_t)v39, a2, a3, a4, a5, a6, a7, a8);
        }
        v203[0] = (WTF *)&v204;
      }
      v40 = v205;
      if (v205 == (WTF *)v207)
      {
        v41 = HIDWORD(v206);
        if (HIDWORD(v206))
          memcpy(&v204, v207, 8 * HIDWORD(v206));
        v42 = v206;
        v40 = (WTF *)&v204;
      }
      else
      {
        v203[0] = v205;
        v42 = v206;
        v41 = HIDWORD(v206);
      }
      v203[1] = (WTF *)__PAIR64__(v41, v42);
      ++v24;
      v37 -= 8;
    }
    while (v37);
    v43 = (unint64_t)v208;
    if (v208 != v16)
    {
      if (v208)
      {
        v208 = 0;
        LODWORD(v209) = 0;
        WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
        v40 = v203[0];
      }
      v208 = v16;
    }
    if (v40 == (WTF *)&v204)
    {
      v44 = HIDWORD(v203[1]);
      if (HIDWORD(v203[1]))
        memcpy(v16, &v204, 8 * HIDWORD(v203[1]));
      v45 = v203[1];
    }
    else
    {
      v208 = v40;
      v45 = v203[1];
      v44 = HIDWORD(v203[1]);
    }
    v209 = __PAIR64__(v44, v45);
    v22 = v44;
LABEL_57:
    *(_WORD *)(a4 + 17) |= 2u;
    v31 = 1;
    goto LABEL_58;
  }
LABEL_30:
  v31 = 0;
LABEL_58:
  if (v198 == 73)
  {
    v47 = (__int128 *)((char *)&xmmword_1ECF4C43C + 8);
  }
  else
  {
    v46 = *((_QWORD *)v197 + 15);
    if (v46 && *(_BYTE *)(v46 + 12) == 5)
      v47 = (__int128 *)((char *)&xmmword_1ECF4C43C + 4);
    else
      v47 = &xmmword_1ECF4C43C;
  }
  if (v22 > *(_DWORD *)v47)
  {
    JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)a4, (JSC::VM *)v10, a3, a4, a5, a6, a7, a8, v20);
  }
  else
  {
    v193 = v16;
    v194 = (JSC::VM *)v10;
    v205 = (WTF *)v207;
    v48 = (uint8x8_t)16;
    v206 = 16;
    v200 = v31;
    if (v22)
    {
      v49 = v208;
      v199 = (WTF *)((char *)v208 + 8 * v22);
      do
      {
        v50 = *(_QWORD *)v49;
        v51 = *(unsigned __int8 *)(*(_QWORD *)v49 + 5);
        if (*(_QWORD *)v49)
          v52 = v51 == 26;
        else
          v52 = 0;
        v53 = !v52;
        if (v52)
        {
          v54 = *(_QWORD *)(v50 + 24);
          if ((v54 & 1) != 0)
            v54 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFFELL) + 48);
        }
        else
        {
          v55 = *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C);
          v56 = *(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C) != 0;
          v57 = (char **)(16 * v55);
          if ((_DWORD)v55)
            v58 = v57 == &JSC::ExecutableBase::s_info;
          else
            v58 = 1;
          if (!v58)
          {
            do
            {
              v57 = (char **)v57[2];
              v56 = v57 != 0;
            }
            while (v57 != &JSC::ExecutableBase::s_info && v57 != 0);
          }
          v54 = *(_QWORD *)v49;
          if (!v56)
          {
LABEL_260:
            v72 = 0;
            goto LABEL_118;
          }
        }
        if (!v54)
          goto LABEL_260;
        if ((v53 & 1) != 0)
        {
          v61 = *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C);
          v62 = *(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C) != 0;
          v63 = (char **)(16 * v61);
          if ((_DWORD)v61)
            v64 = v63 == &JSC::ExecutableBase::s_info;
          else
            v64 = 1;
          if (!v64)
          {
            do
            {
              v63 = (char **)v63[2];
              v62 = v63 != 0;
            }
            while (v63 != &JSC::ExecutableBase::s_info && v63 != 0);
          }
          v60 = v62 ? *(_QWORD *)v49 : 0;
        }
        else
        {
          v60 = *(_QWORD *)(v50 + 24);
          if ((v60 & 1) != 0)
            v60 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFFFELL) + 48);
        }
        if (*(_BYTE *)(v60 + 5) == 8)
          goto LABEL_260;
        if ((v53 & 1) != 0)
        {
          v67 = *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C);
          v68 = *(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C) != 0;
          v69 = (char **)(16 * v67);
          if ((_DWORD)v67)
            v70 = v69 == &JSC::ExecutableBase::s_info;
          else
            v70 = 1;
          if (!v70)
          {
            do
            {
              v69 = (char **)v69[2];
              v68 = v69 != 0;
            }
            while (v69 != &JSC::ExecutableBase::s_info && v69 != 0);
          }
          if (v68)
            v66 = *(_QWORD *)v49;
          else
            v66 = 0;
        }
        else
        {
          v66 = *(_QWORD *)(v50 + 24);
          if ((v66 & 1) != 0)
            v66 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFFFFELL) + 48);
        }
        v72 = *(_QWORD *)(v66 + 96);
        if (!v72)
        {
          v10 = (uint64_t)v194;
          JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)a4, v194, a3, a4, a5, a6, a7, a8, v48);
          goto LABEL_229;
        }
LABEL_118:
        if (!v31)
        {
          v73 = *(WTF **)v49;
          if (v53)
          {
            if ((v51 - 27) >= 2)
              v73 = 0;
            else
              v73 = *(WTF **)v49;
          }
LABEL_135:
          v203[0] = 0;
          LODWORD(v203[1]) = 0;
          WORD2(v203[1]) = 256;
          v204 = 0uLL;
          v79 = *(unsigned __int8 *)(v50 + 5);
          if (v50 && v79 == 26)
          {
            v80 = *(_QWORD *)(v50 + 24);
            if ((v80 & 1) != 0)
              v80 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFFFELL) + 48);
            goto LABEL_149;
          }
          v81 = *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C);
          v82 = *(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C) != 0;
          v83 = (char **)(16 * v81);
          if ((_DWORD)v81)
            v84 = v83 == &JSC::ExecutableBase::s_info;
          else
            v84 = 1;
          if (!v84)
          {
            do
            {
              v83 = (char **)v83[2];
              v82 = v83 != 0;
            }
            while (v83 != &JSC::ExecutableBase::s_info && v83 != 0);
          }
          v80 = v50;
          if (v82)
          {
LABEL_149:
            if (v80)
            {
              if (v79 == 26)
                v86 = (JSC::WebAssemblyFunction *)v50;
              else
                v86 = 0;
              if (v86
                && ((v87 = *(unsigned __int8 *)(a4 + 17) >> 4, v88 = v87 > 8, v89 = (1 << v87) & 0x118, !v88)
                  ? (v90 = v89 == 0)
                  : (v90 = 1),
                    v90
                 && &JSC::WebAssemblyFunction::s_info == (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v86 & 0xFFFFFFFE)
                                                                                   + 0x4C))
                 && (CTIInternalFunctionTrampolineFor = (uint64_t)JSC::WebAssemblyFunction::jsCallEntrypoint(v86)) != 0))
              {
LABEL_285:
                v101 = CTIInternalFunctionTrampolineFor;
              }
              else
              {
                if (v72)
                {
                  if (*(int *)(a3 + 32) < (unint64_t)*(unsigned int *)(v72 + 28))
                  {
                    v91 = 1;
                  }
                  else if (*(unsigned __int8 *)(a4 + 17) <= 0x6Fu)
                  {
                    v91 = 0x1000100010000uLL >> ((*(_BYTE *)(a4 + 17) >> 1) & 0x78);
                  }
                  else
                  {
                    v91 = 0;
                  }
                }
                else
                {
                  v91 = 0;
                }
                if (v50 && *(_BYTE *)(v50 + 5) == 26)
                {
                  v92 = *(_QWORD *)(v50 + 24);
                  if ((v92 & 1) != 0)
                    v92 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFFFELL) + 48);
                }
                else
                {
                  v93 = *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C);
                  v94 = *(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C) != 0;
                  v95 = (char **)(16 * v93);
                  if ((_DWORD)v93)
                    v96 = v95 == &JSC::ExecutableBase::s_info;
                  else
                    v96 = 1;
                  if (!v96)
                  {
                    do
                    {
                      v95 = (char **)v95[2];
                      v94 = v95 != 0;
                    }
                    while (v95 != &JSC::ExecutableBase::s_info && v95 != 0);
                  }
                  if (v94)
                    v92 = v50;
                  else
                    v92 = 0;
                }
                v98 = *(unsigned int **)(v92 + 8);
                v99 = v98 + 2;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 + 1, v99));
                v101 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v98 + 40))(v98, v91);
                do
                {
                  v102 = __ldaxr(v99);
                  v103 = v102 - 1;
                }
                while (__stlxr(v103, v99));
                if (!v103)
                {
                  atomic_store(1u, v98 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 32))(v98);
                }
                BYTE5(v203[1]) = v91;
                v31 = v200;
              }
              BYTE4(v203[1]) = BYTE4(v206);
              *(_QWORD *)&v204 = v101;
              *((_QWORD *)&v204 + 1) = v72;
              v203[0] = v73;
              if (HIDWORD(v206) == (_DWORD)v206)
              {
                v48 = (uint8x8_t)WTF::Vector<JSC::B3::Air::Arg,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>((uint64_t)&v205, (unint64_t)v203, a3, a4, a5, a6, a7, a8).n128_u64[0];
              }
              else
              {
                v104 = (_OWORD *)((char *)v205 + 32 * HIDWORD(v206));
                v48 = (uint8x8_t)v203[0];
                v105 = v204;
                *v104 = *(_OWORD *)v203;
                v104[1] = v105;
                ++HIDWORD(v206);
              }
              goto LABEL_188;
            }
          }
          CTIInternalFunctionTrampolineFor = JSC::VM::getCTIInternalFunctionTrampolineFor((uint64_t)v194, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_285;
        }
        if ((v53 & 1) != 0)
        {
          v74 = *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C);
          v75 = *(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C) != 0;
          v76 = (char **)(16 * v74);
          if ((_DWORD)v74)
            v77 = v76 == &JSC::ExecutableBase::s_info;
          else
            v77 = 1;
          if (!v77)
          {
            do
            {
              v76 = (char **)v76[2];
              v75 = v76 != 0;
            }
            while (v76 != &JSC::ExecutableBase::s_info && v76 != 0);
          }
          v73 = *(WTF **)v49;
          if (!v75)
            goto LABEL_188;
        }
        else
        {
          v73 = *(WTF **)(v50 + 24);
          if ((v73 & 1) != 0)
            v73 = *(WTF **)(((unint64_t)v73 & 0xFFFFFFFFFFFFFFFELL) + 48);
        }
        if (v73)
          goto LABEL_135;
LABEL_188:
        v49 = (WTF *)((char *)v49 + 8);
      }
      while (v49 != v199);
    }
    if (v198 == 73)
    {
      v108 = 1;
      v10 = (uint64_t)v194;
    }
    else
    {
      v107 = *((_QWORD *)v197 + 15);
      if (v107)
        LODWORD(v107) = *(unsigned __int8 *)(v107 + 12);
      v108 = v107 == 5;
      v10 = (uint64_t)v194;
    }
    if (HIDWORD(v206))
      v109 = v108;
    else
      v109 = 1;
    if ((v195 & 1) != 0)
      v110 = 0;
    else
      v110 = *(JSC::CallFrame **)a3;
    v203[0] = 0;
    v203[1] = 0;
    if (!BYTE1(dword_1ECF4C240))
      goto LABEL_287;
    v111 = 14;
    if (v31)
      v111 = 15;
    v112 = 16;
    if (v31)
      v112 = 17;
    if (v109)
      v111 = v112;
    v113 = *(_QWORD *)(v10 + 90440) + 16 * v111;
    v114 = *(WTF **)(v113 + 8);
    v115 = *(unsigned int **)(v113 + 16);
    if (v115)
    {
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 + 1, v115));
      do
        v117 = __ldaxr(v115);
      while (__stlxr(v117 + 1, v115));
      v118 = (unsigned int *)v203[1];
      v203[0] = v114;
      v203[1] = (WTF *)v115;
      if (v118)
      {
        do
        {
          v119 = __ldaxr(v118);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, v118));
        if (!v120)
        {
          atomic_store(1u, v118);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v118, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
        }
      }
      do
      {
        v121 = __ldaxr(v115);
        v122 = v121 - 1;
      }
      while (__stlxr(v122, v115));
      if (!v122)
      {
        atomic_store(1u, v115);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v115, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
      }
      v114 = v203[0];
    }
    else
    {
      v203[0] = *(WTF **)(v113 + 8);
      v203[1] = 0;
    }
    if (!v114)
    {
LABEL_287:
      if (v31)
        v185 = qword_1ECF53270;
      else
        v185 = qword_1ECF53268;
      v202[0] = v185;
      v202[1] = 0;
      JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>::operator=(v203, v202, a3, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v202, v186, v187, v188, v189, v190, v191, v192);
      v10 = (uint64_t)v194;
      LOBYTE(v31) = v200;
    }
    v123 = HIDWORD(v206);
    v124 = (HIDWORD(v206) + 1);
    v125 = 3 * HIDWORD(v206);
    v126 = (_QWORD *)(WTF::fastMalloc((WTF *)(24 * HIDWORD(v206) + 32 * v124 + 72)) + 8 * v125);
    JSC::PolymorphicCallStubRoutine::PolymorphicCallStubRoutine((uint64_t)v126, v123, v124, v203, v10, (JSC::JSCell *)a2, v110, a4, (uint64_t)&v205, v109, v31);
    v135 = *(JSC::JITStubRoutine **)(a4 + 56);
    if (v135)
    {
      v155 = *((unsigned int *)v135 + 11);
      v16 = v193;
      if ((_DWORD)v155)
      {
        v156 = -24 * v155;
        do
        {
          *((_BYTE *)v135 + v156 + 19) = 1;
          v156 += 24;
        }
        while (v156);
      }
      *(_QWORD *)(a4 + 56) = 0;
      v157 = *((_DWORD *)v135 + 4) - 1;
      *((_DWORD *)v135 + 4) = v157;
      if (v157)
      {
        *(_QWORD *)(a4 + 56) = v126;
      }
      else
      {
        JSC::JITStubRoutine::observeZeroRefCount(v135, v127, v128, v129, v130, v131, v132, v133, v134);
        v159 = *(JSC::JITStubRoutine **)(a4 + 56);
        *(_QWORD *)(a4 + 56) = v126;
        if (v159)
        {
          v160 = *((_DWORD *)v159 + 4) - 1;
          *((_DWORD *)v159 + 4) = v160;
          if (!v160)
          {
            JSC::JITStubRoutine::observeZeroRefCount(v159, v127, v128, v129, v130, v131, v132, v133, v158);
            v126 = *(_QWORD **)(a4 + 56);
          }
        }
      }
    }
    else
    {
      *(_QWORD *)(a4 + 56) = v126;
      v16 = v193;
    }
    *(_QWORD *)(a4 + 40) = 1;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = *v126;
    v136 = *(_QWORD **)(a4 + 8);
    if (v136)
    {
      v137 = *(_QWORD *)a4;
      *v136 = *(_QWORD *)a4;
      *(_QWORD *)(v137 + 8) = v136;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    *(_WORD *)(a4 + 17) = *(_WORD *)(a4 + 17) & 0xF1FF | 0x400;
    v138 = (unsigned int *)v203[1];
    v203[1] = 0;
    if (v138)
    {
      do
      {
        v139 = __ldaxr(v138);
        v140 = v139 - 1;
      }
      while (__stlxr(v140, v138));
      if (!v140)
      {
        atomic_store(1u, v138);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v138, (uint64_t)v127, v128, v129, v130, v131, v132, v133);
        WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
      }
    }
LABEL_229:
    v141 = v205;
    if (v207 != (_BYTE *)v205 && v205 != 0)
    {
      v205 = 0;
      LODWORD(v206) = 0;
      WTF::fastFree((unint64_t)v141, v127, v128, v129, v130, v131, v132, v133);
    }
  }
  v143 = (unint64_t)v208;
  if (v16 != v208 && v208 != 0)
  {
    v208 = 0;
    LODWORD(v209) = 0;
    WTF::fastFree(v143, v127, v128, v129, v130, v131, v132, v133);
  }
LABEL_239:
  --*(_DWORD *)(v10 + 916);
}

void JSC::ftlThunkAwareRepatchCall(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::FTL::Thunks *v10;
  JSC::ARM64Assembler *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  JSC::ExecutableMemoryHandle *v33;
  int *v34;
  unint64_t v35;

  v9 = *(_QWORD *)(a1 + 120);
  if (v9 && *(_BYTE *)(v9 + 12) == 5)
  {
    v10 = *(JSC::FTL::Thunks **)(*(_QWORD *)(a1 + 72) + 90456);
    v11 = (JSC::ARM64Assembler *)(a2 - 16);
    JSC::FTL::Thunks::keyForSlowPathCallThunk((uint64_t)v10, (*(_DWORD *)(a2 - 12) << 11) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(a2 - 16) >> 5) | ((unint64_t)(unsigned __int16)(*(_DWORD *)(a2 - 8) >> 5) << 32), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&v34);
    if ((~(_WORD)v35 & 0x300) != 0)
      v12 = 0;
    else
      v12 = v34;
    v13 = v35 & 0xFFFFFFFFFFFFFCFFLL | 0x200;
    if (a3)
      v12 = (unint64_t)a3;
    else
      v13 = v35 | 0x300;
    v34 = (int *)v12;
    v35 = v13;
    JSC::FTL::Thunks::getSlowPathCallThunk(v10, (const JSC::FTL::SlowPathCallKey *)&v34, (uint64_t *)&v32);
    JSC::ARM64Assembler::linkPointer(v11, (unint64_t)v32, (void *)1);
    v21 = (unsigned int *)v33;
    v33 = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
    }
  }
  else
  {
    JSC::ARM64Assembler::linkPointer((JSC::ARM64Assembler *)(a2 - 16), (unint64_t)a3, (void *)1);
  }
}

void JSC::FTL::Thunks::keyForSlowPathCallThunk(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)a1))
    goto LABEL_4;
LABEL_5:
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_18;
  v14 = *(_DWORD *)(v13 - 8);
  v15 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = *(_QWORD *)(v13 + 32 * v18);
  if (v19 != a2)
  {
    v20 = 1;
    while (v19 != 1)
    {
      v18 = ((_DWORD)v18 + v20) & v14;
      v19 = *(_QWORD *)(v13 + 32 * v18);
      ++v20;
      if (v19 == a2)
        goto LABEL_12;
    }
    v18 = *(unsigned int *)(v13 - 4);
  }
LABEL_12:
  if (v18 == *(_DWORD *)(v13 - 4))
  {
LABEL_18:
    __break(0xC471u);
    return;
  }
  v21 = v13 + 32 * v18;
  *(_OWORD *)a9 = *(_OWORD *)(v21 + 8);
  *(_QWORD *)(a9 + 16) = *(_QWORD *)(v21 + 24);
  LODWORD(v21) = __ldxr((unsigned __int8 *)a1);
  if ((_DWORD)v21 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, (unsigned __int8 *)a1))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::FTL::Thunks::getSlowPathCallThunk(JSC::FTL::Thunks *this@<X0>, const JSC::FTL::SlowPathCallKey *a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE v25[24];

  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_3;
LABEL_4:
  if (!*((_QWORD *)this + 1))
    goto LABEL_16;
  v8 = WTF::HashTable<JSC::FTL::SlowPathCallKey,WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::SlowPathCallKey>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>>,JSC::FTL::SlowPathCallKey>((uint64_t *)this + 1, (uint64_t *)a2);
  v15 = *((_QWORD *)this + 1);
  if (!v8)
  {
    if (!v15)
      goto LABEL_16;
    v16 = *(_DWORD *)(v15 - 4);
    v8 = (_QWORD *)(v15 + 40 * v16);
    goto LABEL_8;
  }
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 4);
LABEL_8:
    if (v8 != (_QWORD *)(v15 + 40 * v16))
      goto LABEL_9;
LABEL_16:
    JSC::FTL::slowPathCallThunkGenerator(a2, a3);
    WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::add<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>&>((uint64_t *)this + 1, (uint64_t *)a2, a3, v19, v20, v21, v22, (uint64_t)v25);
    v24 = *a3;
    WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTableTraits>::add<JSC::FTL::SlowPathCallKey const&>((uint64_t *)this + 2, &v24, (__int128 *)a2, (uint64_t)v25);
    goto LABEL_17;
  }
LABEL_9:
  *a3 = v8[3];
  v17 = (unsigned int *)v8[4];
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  a3[1] = (uint64_t)v17;
LABEL_17:
  v23 = __ldxr((unsigned __int8 *)this);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this, 0, v9, v10, v11, v12, v13, v14);
}

void JSC::repatchGetBy(uint64_t *a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  BOOL v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  WTF *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  WTF *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned __int8 *v74;
  int v75;
  JSC::VM *v76;
  int v77;
  BOOL v78;
  unsigned __int8 *v79;
  int v80;
  uint8x8_t v81;
  JSC::InlineCacheHandler *v82;
  JSC::InlineCacheHandler *v83;
  JSC::InlineCacheHandler *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  int v89;
  WTF *v91;
  JSC::InlineCacheHandler *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  WTF *v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  WTF *v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  BOOL v152;
  unint64_t v153;
  WTF *v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int *v159;
  _BOOL4 v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  WTF *v168;
  unsigned int v169;
  unsigned int v170;
  WTF *v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t casual;
  int *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  JSC::ICEvent *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  WTF::AtomStringImpl *v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  uint64_t v221;
  JSC::ICEvent *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::AtomStringImpl *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF *v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  uint64_t v240;
  uint64_t v241;
  JSC::ICEvent *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  WTF *v251;
  unint64_t v252;
  unint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned __int8 *v308;
  uint64_t v309;
  JSC::VM *v311;
  __int128 v312;
  char v313;
  _BYTE v314[7];
  unint64_t v315;
  _BYTE v316[7];
  WTF *v317;
  WTF *v318;
  uint64_t v319;
  JSC::InlineCacheHandler *v320;
  WTF *v321;
  uint8x8_t v322;
  uint64_t v323;
  __int128 v324;
  WTF *v325;
  double v326;
  char v327[8];
  unsigned __int8 *v328;
  char v329;
  char v330;
  JSC::VM *v331;
  uint64_t v332;

  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = (uint64_t)a3;
  v13 = (unint64_t)a2;
  v332 = *MEMORY[0x1E0C80C00];
  v322 = 0;
  v323 = a4;
  v311 = (JSC::VM *)a1[7];
  LODWORD(v319) = 0;
  v320 = 0;
  v321 = 0;
  v14 = a2 + 16;
  v330 = 0;
  v328 = a2 + 16;
  v329 = 1;
  if (__ldaxr(a2 + 16))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
    goto LABEL_4;
  }
  if (__stxr(1u, v14))
    goto LABEL_3;
LABEL_4:
  v308 = v14;
  v16 = 0;
  v330 = 1;
  v331 = v311;
  ++*((_DWORD *)v311 + 229);
  if (byte_1ECF4C25D)
  {
    v17 = 0;
    goto LABEL_140;
  }
  v17 = 0;
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_140;
  v18 = v323;
  if (v323)
  {
    if ((v323 & 1) != 0)
      v19 = v323 & 0xFFFFFFFFFFFFFFFELL;
    else
      v19 = *(_QWORD *)(v323 + 8);
  }
  else
  {
    v19 = 0;
  }
  if (v19 != *(_QWORD *)(*((_QWORD *)v311 + 5244) + 1768))
    goto LABEL_10;
  v39 = v19 | 1;
  v40 = *(unsigned __int8 *)(v12 + 5);
  if (v40 != 36)
  {
    if (v40 == 2)
    {
      if (!*(_BYTE *)(v10 + 123)
        && JSC::InlineAccess::isCacheableStringLength(v10)
        && JSC::InlineAccess::generateStringLength(v10))
      {
        v196 = (int *)JSC::appropriateGetByOptimizeFunction(v9);
        if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
          *(_QWORD *)(v10 + 48) = v196;
        else
          JSC::ftlThunkAwareRepatchCall(v13, *(_QWORD *)(v10 + 48), v196, v197, v198, v199, v200, v201);
        JSC::StructureStubInfo::initStringLength(v10);
        v16 = 0;
        v17 = 1;
        goto LABEL_140;
      }
      v41 = WTF::fastMalloc((WTF *)0x28);
      v20 = (unsigned int *)v41;
      *(_DWORD *)v41 = 1;
      v42 = 21;
      goto LABEL_59;
    }
    if (v40 == 33 && v12)
    {
      v172 = *(_QWORD *)(v12 + 40);
      if (!v172
        || qword_1ECF4C038
        && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
        && !((v172 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        v41 = WTF::fastMalloc((WTF *)0x28);
        v20 = (unsigned int *)v41;
        *(_DWORD *)v41 = 1;
        v42 = 22;
        goto LABEL_59;
      }
    }
    else
    {
      v20 = 0;
      if (v40 != 34 || !v12)
        goto LABEL_11;
      if (!*(_BYTE *)(v12 + 24))
      {
        *(_QWORD *)&v312 = 0;
        v318 = 0;
        JSC::AccessCase::create((uint64_t)v311, v13, 23, v19 | 1, -1, 0, (unsigned int **)&v312, (uint64_t *)&v318, (uint64_t *)&v324);
        v20 = (unsigned int *)v324;
        if (v318)
          WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v318, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_11:
        if (v18)
        {
          v21 = (v18 & 1) != 0 ? v18 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v18 + 8);
          if ((*(_BYTE *)(v21 + 16) & 0x20) != 0)
            goto LABEL_65;
        }
        if (&JSC::JSModuleNamespaceObject::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                + 0x4C))
          && *(_BYTE *)(v11 + 49)
          && *(_BYTE *)(v11 + 51) == 2)
        {
          JSC::ModuleNamespaceAccessCase::create(v311, v13, v18, v12, *(_QWORD *)(v11 + 72), *(_DWORD *)(v11 + 80), (uint64_t *)&v324);
          v188 = (unsigned int *)v324;
          *(_QWORD *)&v324 = 0;
          if (v20)
          {
            do
            {
              v189 = __ldaxr(v20);
              v190 = v189 - 1;
            }
            while (__stlxr(v190, v20));
            if (!v190)
            {
              atomic_store(1u, v20);
              JSC::AccessCase::operator delete((unint64_t)v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v191 = (unsigned int *)v324;
            *(_QWORD *)&v324 = 0;
            if (v191)
            {
              do
              {
                v192 = __ldaxr(v191);
                v193 = v192 - 1;
              }
              while (__stlxr(v193, v191));
              if (!v193)
              {
                atomic_store(1u, v191);
                JSC::AccessCase::operator delete((unint64_t)v191, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
            }
          }
          v18 = v323;
          v20 = v188;
        }
        if (v18)
        {
LABEL_65:
          v22 = (v18 & 1) != 0 ? v18 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v18 + 8);
          if ((*(_BYTE *)(v22 + 16) & 0x20) != 0 && (*(_BYTE *)(v22 + 36) & 4) != 0)
            goto LABEL_21;
        }
        if (*(_BYTE *)(v12 + 5) != 61)
          goto LABEL_21;
        if (v9)
        {
          if (v9 == 1 || v9 == 5)
          {
            v33 = WTF::fastMalloc((WTF *)0x28);
            v17 = 1;
            *(_DWORD *)v33 = 1;
            *(_WORD *)(v33 + 4) = 33;
            *(_DWORD *)(v33 + 8) = -1;
            *(_QWORD *)(v33 + 12) = 0;
            *(_QWORD *)(v33 + 28) = 0;
            *(_QWORD *)(v33 + 20) = 0;
            *(_DWORD *)(v33 + 36) = 0;
            if (!v20)
              goto LABEL_156;
            do
              v38 = __ldaxr(v20);
            while (__stlxr(v38 - 1, v20));
            goto LABEL_52;
          }
          if (v9 != 3)
          {
LABEL_21:
            if (!v20)
            {
              v23 = *(unsigned __int8 *)(v11 + 49);
              v24 = *(unsigned __int8 *)(v11 + 48);
              if (!*(_BYTE *)(v11 + 49) || v24 == 1)
              {
                v25 = v9 & 0xFFFFFFFE;
                v318 = 0;
                v26 = *(unsigned __int8 *)(v12 + 5);
                if (v26 != 32)
                {
LABEL_25:
                  v27 = *(_DWORD *)v12 & 0xFFFFFFFE;
                  v28 = *(_WORD *)(16 * v27 + 0xC);
                  if ((v28 & 8) != 0)
                    goto LABEL_321;
                  v29 = *(_DWORD *)(16 * v27 + 0x10);
                  if ((v29 & 3) == 2)
                  {
                    if ((v29 & 0x800000) == 0)
                    {
                      JSC::Structure::flattenDictionaryStructure(16 * v27, v311, (JSC::JSObject *)v12, a4, a5, a6, a7, a8);
                      v33 = 0;
                      v34 = 1;
                      v17 = 1;
                      goto LABEL_130;
                    }
                    goto LABEL_321;
                  }
                  if ((v28 & 0x10) != 0 && (v28 & 0x20) == 0)
                  {
LABEL_321:
                    v33 = 0;
                    v17 = 0;
                    v34 = 1;
                    goto LABEL_130;
                  }
                  if (*(_BYTE *)(v10 + 123))
                    goto LABEL_78;
                  if (!v23)
                  {
                    v317 = 0;
                    goto LABEL_47;
                  }
                  if (v23 == 1 && v24 == 1 && v12 == *(_QWORD *)(v11 + 32) && !*(_QWORD *)(v11 + 40))
                  {
                    if ((v28 & 0x18) == 0x10)
                    {
                      if (v26 != 32 && (v28 & 0x20) == 0)
                        goto LABEL_36;
                    }
                    else if (v26 != 32)
                    {
LABEL_36:
                      if ((JSC::InlineAccess::generateSelfPropertyAccess(v10, 16 * v27, *(_DWORD *)(v11 + 20)) & 1) != 0)
                      {
                        if (byte_1ECF4C6B7)
                        {
                          v202 = 16 * *(unsigned int *)(16 * v27 + 0x4C);
                          if (v18)
                          {
                            if ((v18 & 1) != 0)
                              v203 = (WTF::StringImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
                            else
                              v203 = *(WTF::StringImpl **)(v18 + 8);
                          }
                          else
                          {
                            v203 = 0;
                          }
                          JSC::Identifier::fromUid(v203, (uint64_t)v311, a3, a4, v30, a6, a7, a8, &v312);
                          v206 = (JSC::ICEvent *)JSC::ICEvent::ICEvent((uint64_t)&v324, (uint64_t **)v311, (const WTF::StringImpl *)3, v202, (WTF::StringImpl *)v312, v12 == *(_QWORD *)(v11 + 32), v204, v205);
                          JSC::ICEvent::log(v206, v207, v208, v209, v210, v211, v212, v213);
                          v216 = v325;
                          v325 = 0;
                          if (v216)
                          {
                            if (*(_DWORD *)v216 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v216, v214, v215, a4, v30, a6, a7, a8);
                              WTF::fastFree(v253, v254, v255, v256, v257, v258, v259, v260);
                            }
                            else
                            {
                              *(_DWORD *)v216 -= 2;
                            }
                          }
                          v217 = (WTF::StringImpl *)v312;
                          *(_QWORD *)&v312 = 0;
                          if (v217)
                          {
                            if (*(_DWORD *)v217 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v217, v214, v215, a4, v30, a6, a7, a8);
                              WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
                            }
                            else
                            {
                              *(_DWORD *)v217 -= 2;
                            }
                          }
                        }
                        JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)(16 * v27), v311, (JSC::Structure *)*(unsigned int *)(v11 + 20), a4, v30, a6, a7, a8);
                        if (v9 >= 8)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198205FF0);
                        }
                        a3 = (const WTF::StringImpl *)*(&off_1E3583418 + (int)v9);
                        if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
                          *(_QWORD *)(v10 + 48) = a3;
                        else
                          JSC::ftlThunkAwareRepatchCall(v13, *(_QWORD *)(v10 + 48), (int *)a3, a4, a5, a6, a7, a8);
                        v31 = *(_DWORD *)(v11 + 20);
                        *(_BYTE *)(v10 + 123) = 1;
                        v32 = *(_QWORD *)(v13 + 72);
                        *(_DWORD *)(v10 + 12) = v27;
                        if (*(_DWORD *)(v32 + 760) >= *(unsigned __int8 *)(v13 + 7))
                          JSC::Heap::writeBarrierSlowPath(v32 + 192, v13);
                        v33 = 0;
                        *(_DWORD *)(v10 + 8) = v31;
                        v34 = 1;
                        v17 = 1;
                        goto LABEL_130;
                      }
                      v23 = *(unsigned __int8 *)(v11 + 49);
                      v25 = v9 & 0xFFFFFFFE;
LABEL_78:
                      v317 = 0;
                      if (v23)
                        goto LABEL_79;
LABEL_47:
                      a5 = 0xFFFFFFFFLL;
                      goto LABEL_48;
                    }
                  }
                  v317 = 0;
LABEL_79:
                  a5 = *(unsigned int *)(v11 + 20);
                  if (v23 != 3)
                    goto LABEL_80;
                  a2 = *(unsigned __int8 **)(v11 + 32);
                  if ((unsigned __int8 *)v12 != a2)
                    goto LABEL_80;
                  v306 = v25;
                  v127 = *(unsigned int *)(v11 + 20);
                  if (v18)
                  {
                    if ((v18 & 1) != 0)
                      v128 = v18 & 0xFFFFFFFFFFFFFFFELL;
                    else
                      v128 = *(_QWORD *)(v18 + 8);
                  }
                  else
                  {
                    v128 = 0;
                  }
                  if ((JSC::prepareChainForCaching(a1, (JSC::JSObject *)a2, v128, (uint64_t)a2, a5, a6, a7, a8) & 0xFFFFFF) < 0x10000)goto LABEL_325;
                  a5 = v127;
                  v25 = v306;
                  if (*(_BYTE *)(v11 + 49))
                  {
LABEL_80:
                    if (v12 == *(_QWORD *)(v11 + 32))
                      goto LABEL_87;
                    v35 = 0;
LABEL_82:
                    v43 = *(_WORD *)(16 * v27 + 0xC);
                    if ((v43 & 8) != 0)
                      goto LABEL_325;
                    v44 = *(_DWORD *)(16 * v27 + 0x10);
                    if ((v44 & 3) != 0)
                    {
                      if ((v44 & 0x800000) != 0)
                        goto LABEL_325;
                      JSC::Structure::flattenDictionaryStructure(16 * v27, v311, (JSC::JSObject *)v12, a4, a5, a6, a7, a8);
                    }
                    else
                    {
                      if ((*(_DWORD *)&v35 & ((v43 & 0x80) >> 7) & 1) != 0)
                        goto LABEL_325;
                      if (v9 <= 7 && ((1 << v9) & 0xD0) != 0)
                        goto LABEL_87;
                      v106 = a5;
                      v305 = v25;
                      if (v18)
                        v107 = (v18 & 1) != 0 ? v18 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v18 + 8);
                      else
                        v107 = 0;
                      v108 = JSC::prepareChainForCaching(a1, (JSC::JSObject *)v12, v107, v11, a5, a6, a7, a8);
                      if ((v108 & 0xFFFFFF) < 0x10000)
                        goto LABEL_325;
                      if ((v108 & 0xFF00) == 0)
                      {
                        if (!(_BYTE)v108)
                        {
                          v109 = v317;
                          v317 = 0;
                          if (v109)
                          {
                            do
                            {
                              v110 = __ldaxr((unsigned int *)v109);
                              v111 = v110 - 1;
                            }
                            while (__stlxr(v111, (unsigned int *)v109));
                            if (!v111)
                            {
                              atomic_store(1u, (unsigned int *)v109);
                              v179 = *((_QWORD *)v109 + 1);
                              *((_QWORD *)v109 + 1) = 0;
                              if (v179)
                                WTF::fastFree(v179, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                              WTF::fastFree((unint64_t)v109, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            }
                          }
                          if (*(_BYTE *)(v11 + 49))
                          {
                            if (*(_BYTE *)(v11 + 49) != 3 || *(_BYTE *)(v11 + 48) != 1)
                            {
                              if (v323)
                              {
                                if ((v323 & 1) != 0)
                                  v113 = v323 & 0xFFFFFFFFFFFFFFFELL;
                                else
                                  v113 = *(_QWORD *)(v323 + 8);
                              }
                              else
                              {
                                v113 = 0;
                              }
                              JSC::generateConditionsForPrototypePropertyHit(v311, (unsigned __int8 *)v13, a1, (const JSC::PropertyTable *)(16 * v27), *(_QWORD *)(v11 + 32), v113, a7, a8, (uint64_t *)&v324);
                              v114 = (unsigned int *)v324;
                              *(_QWORD *)&v324 = 0;
                              v115 = (unsigned int *)v318;
                              v318 = (WTF *)v114;
                              if (v115)
                              {
                                a5 = v106;
                                do
                                {
                                  v116 = __ldaxr(v115);
                                  v117 = v116 - 1;
                                }
                                while (__stlxr(v117, v115));
                                if (!v117)
                                {
                                  atomic_store(1u, v115);
                                  WTF::fastFree((unint64_t)v115, a2, (uint64_t)a3, a4, v106, a6, a7, a8);
                                  a5 = v106;
                                }
                                v118 = (unsigned int *)v324;
                                *(_QWORD *)&v324 = 0;
                                if (v118)
                                {
                                  do
                                  {
                                    v119 = __ldaxr(v118);
                                    v120 = v119 - 1;
                                  }
                                  while (__stlxr(v120, v118));
                                  if (!v120)
                                  {
                                    atomic_store(1u, v118);
                                    WTF::fastFree((unint64_t)v118, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                    a5 = v106;
                                  }
                                }
                                v114 = (unsigned int *)v318;
                              }
                              else
                              {
                                a5 = v106;
                              }
                              v25 = v305;
                              if (v114)
                              {
                                v121 = v114[1];
                                if (!(_DWORD)v121)
                                  goto LABEL_256;
                                LODWORD(v122) = 0;
                                v123 = 0;
                                v124 = (uint64_t *)(v114 + 6);
                                v125 = 24 * v121;
                                do
                                {
                                  v126 = *((unsigned __int8 *)v124 - 2);
                                  if (v126 < 2 || v126 - 5 <= 1)
                                  {
                                    v122 = *v124;
                                    ++v123;
                                  }
                                  v124 += 3;
                                  v125 -= 24;
                                }
                                while (v125);
                                if (v123 == 1)
                                {
                                  if ((_DWORD)a5 != (_DWORD)v122)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x198205B68);
                                  }
LABEL_256:
                                  if (v318 && !*((_DWORD *)v318 + 1))
                                    goto LABEL_325;
LABEL_87:
                                  v45 = *(unsigned __int8 *)(v11 + 49);
                                  v309 = v10;
                                  if (*(_BYTE *)(v11 + 49))
                                  {
                                    v46 = (unsigned __int8 *)v13;
                                    v47 = *(unsigned __int8 *)(v11 + 48);
                                    v48 = v45 == 2 && v47 == 1;
                                    v49 = v48;
                                    v50 = 0;
                                    if (v48)
                                    {
                                      v52 = 0;
                                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 5) == 26)
                                        v51 = *(_QWORD *)(*(_QWORD *)v11 + 8);
                                      else
                                        v51 = 0;
                                    }
                                    else
                                    {
                                      v51 = 0;
                                      if (v45 == 3 && v47 == 1)
                                      {
                                        v52 = 0;
                                        if (*(_BYTE *)(v11 + 51) == 1)
                                        {
                                          v51 = 0;
                                          v50 = *(_BYTE *)(v11 + 72);
                                          *(_QWORD *)&v324 = *(_QWORD *)(v11 + 73);
                                          *(_QWORD *)((char *)&v324 + 7) = *(_QWORD *)(v11 + 80);
                                          v52 = 1;
                                        }
                                      }
                                      else
                                      {
                                        v52 = 0;
                                      }
                                    }
                                    if (v9 != 2)
                                    {
                                      if (v26 != 32 && v51)
                                      {
                                        v304 = a5;
                                        v307 = v25;
                                        if ((JSC::InlineCacheCompiler::canEmitIntrinsicGetter(v309, v51, 16 * v27) & 1) != 0)
                                        {
                                          v13 = (unint64_t)v46;
                                          JSC::IntrinsicGetterAccessCase::create((uint64_t)v311, (unint64_t)v46, v323, *(_DWORD *)(v11 + 20), 16 * v27, (unsigned int **)&v318, v51, (uint64_t *)&v317, (uint64_t *)&v312);
                                          goto LABEL_309;
                                        }
                                        v45 = *(unsigned __int8 *)(v11 + 49);
                                        a5 = v304;
                                        v25 = v307;
                                      }
LABEL_103:
                                      if (v25 != 6)
                                      {
                                        if (!v45)
                                        {
                                          v54 = 8;
LABEL_108:
                                          v55 = v323;
                                          v56 = *(unsigned int **)(v11 + 40);
                                          v57 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                          if (v57)
                                          {
                                            v58 = (_BYTE *)(v57 + 8672);
                                            *(_BYTE *)(v57 + 8672) = 1;
                                            v59 = *(unsigned int *)(v57 + 8688);
                                            if ((_DWORD)v59)
                                            {
                                              *(_DWORD *)(v57 + 8688) = v59 - *(_DWORD *)(v57 + 8692);
                                              v33 = *(_QWORD *)(v57 + 8680) - v59;
LABEL_111:
                                              *v58 = 0;
LABEL_112:
                                              *(_DWORD *)v33 = 1;
                                              *(_BYTE *)(v33 + 4) = v54;
                                              *(_BYTE *)(v33 + 5) = 0;
                                              *(_DWORD *)(v33 + 8) = a5;
                                              v60 = v317;
                                              v317 = 0;
                                              *(_QWORD *)(v33 + 16) = 0;
                                              *(_QWORD *)(v33 + 24) = v60;
                                              *(_QWORD *)(v33 + 32) = v55;
                                              if ((_DWORD)v27)
                                              {
                                                *(_DWORD *)(v33 + 12) = v27;
                                                v13 = (unint64_t)v46;
                                                if (v46 && *((_DWORD *)v311 + 190) >= v46[7])
                                                  JSC::Heap::writeBarrierSlowPath((uint64_t)v311 + 192, (unint64_t)v46);
                                              }
                                              else
                                              {
                                                *(_DWORD *)(v33 + 12) = 0;
                                                v13 = (unint64_t)v46;
                                              }
                                              v61 = (unsigned int *)v318;
                                              v10 = v309;
                                              if (v318)
                                              {
                                                do
                                                  v62 = __ldaxr(v61);
                                                while (__stlxr(v62 + 1, v61));
                                              }
                                              v63 = *(unsigned int **)(v33 + 16);
                                              *(_QWORD *)(v33 + 16) = v61;
                                              if (v63)
                                              {
                                                do
                                                {
                                                  v64 = __ldaxr(v63);
                                                  v65 = v64 - 1;
                                                }
                                                while (__stlxr(v65, v63));
                                                if (!v65)
                                                {
                                                  atomic_store(1u, v63);
                                                  WTF::fastFree((unint64_t)v63, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                                }
                                                v61 = *(unsigned int **)(v33 + 16);
                                              }
                                              if (v61 && !v61[1])
                                              {
                                                __break(0xC471u);
                                                JUMPOUT(0x198205940);
                                              }
                                              if (v56)
                                              {
                                                do
                                                  v66 = __ldaxr(v56);
                                                while (__stlxr(v66 + 1, v56));
                                              }
                                              v34 = 0;
                                              *(_QWORD *)(v33 + 40) = v56;
                                              *(_BYTE *)(v33 + 5) = v26 == 32;
                                              goto LABEL_126;
                                            }
                                            v93 = *(_QWORD *)(v57 + 8712);
                                            v94 = *(_QWORD *)(v57 + 8696);
                                            if (v93)
                                            {
LABEL_195:
                                              v95 = __clz(v93);
                                              *(_QWORD *)(v57 + 8712) = v93 & ~(0x8000000000000000 >> v95);
                                              v33 = v94 + 16 * v95;
                                              goto LABEL_111;
                                            }
                                            if (*(_BYTE *)(v57 + 8677) == 6)
                                            {
                                              v173 = *(_DWORD *)(v57 + 8708);
                                              v174 = *(unsigned int *)(v57 + 8704);
                                              if (v174 < v173)
                                              {
                                                *(_QWORD *)&v58[8 * v174 + 56] = 0;
                                                v175 = (unint64_t *)(v57 + 8 * v174 + 8736);
                                                v176 = v173 - 1 - v174;
                                                while (v176)
                                                {
                                                  v94 += 1024;
                                                  v178 = *v175++;
                                                  v177 = v178;
                                                  LODWORD(v174) = v174 + 1;
                                                  --v176;
                                                  if (v178)
                                                  {
                                                    v93 = __rbit64(v177);
                                                    *(_DWORD *)(v57 + 8704) = v174;
                                                    *(_QWORD *)(v57 + 8696) = v94;
                                                    goto LABEL_195;
                                                  }
                                                }
                                                *(_DWORD *)(v57 + 8704) = v173;
                                              }
                                            }
                                            *v58 = 0;
                                          }
                                          v194 = a5;
                                          casual = bmalloc_allocate_casual(48, 1);
                                          a5 = v194;
                                          v33 = casual;
                                          goto LABEL_112;
                                        }
                                        v53 = *(unsigned __int8 *)(v11 + 48);
                                        if (v45 == 1 && v53 == 1)
                                        {
                                          v54 = 0;
                                          goto LABEL_108;
                                        }
                                        if (v45 == 2 && v53 == 1)
                                        {
                                          v104 = 0;
                                          v105 = 10;
                                        }
                                        else
                                        {
                                          v104 = (*(_DWORD *)(v11 + 16) & 0x20u) >> 5;
                                          if ((*(_DWORD *)(v11 + 16) & 0x20) != 0)
                                            v105 = 13;
                                          else
                                            v105 = 12;
                                        }
                                        if ((v9 == 3 || v9 == 5) && (v52 & v104 & 1) != 0)
                                        {
                                          v33 = 0;
                                          v17 = 0;
                                          v34 = 1;
                                          v13 = (unint64_t)v46;
LABEL_484:
                                          v10 = v309;
                                          goto LABEL_127;
                                        }
                                        if (v45 == 3 && v53 == 1)
                                        {
                                          v301 = *(_QWORD *)v11;
                                          v302 = *(_QWORD *)(v11 + 32);
                                          if (v12 == v302)
                                            v302 = 0;
                                        }
                                        else
                                        {
                                          v301 = 0;
                                          v302 = 0;
                                        }
                                        v303 = *(unsigned int **)(v11 + 40);
                                        LOBYTE(v312) = v50;
                                        *(_QWORD *)((char *)&v312 + 1) = v324;
                                        *((_QWORD *)&v312 + 1) = *(_QWORD *)((char *)&v324 + 7);
                                        v313 = v52;
                                        *(_DWORD *)v314 = *(_DWORD *)v316;
                                        *(_DWORD *)&v314[3] = *(_DWORD *)&v316[3];
                                        v13 = (unint64_t)v46;
                                        JSC::GetterSetterAccessCase::create((uint64_t)v311, (unint64_t)v46, v105, v323, a5, 16 * v27, (unsigned int **)&v318, v26 == 32, (uint64_t *)&v315, v303, v301, v302, &v312, (uint64_t *)&v317);
                                        v34 = 0;
                                        v33 = v315;
LABEL_483:
                                        v17 = 1;
                                        goto LABEL_484;
                                      }
                                      if (!v45)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x198206010);
                                      }
                                      v13 = (unint64_t)v46;
                                      if (*(_BYTE *)(v11 + 48) != 1)
                                      {
                                        v33 = 0;
                                        v17 = 0;
                                        v34 = 1;
                                        goto LABEL_484;
                                      }
                                      JSC::ProxyableAccessCase::create((uint64_t)v311, v46, 0, v323, a5, 16 * v27, (unsigned int **)&v318, 0, (uint64_t *)&v312, *(unsigned int **)(v11 + 40), (uint64_t *)&v317);
LABEL_309:
                                      v34 = 0;
                                      v33 = v312;
                                      goto LABEL_483;
                                    }
                                    v160 = v45 == 1 && v47 == 1;
                                    v48 = !v160;
                                    v161 = v160 | v49;
                                    if (v48)
                                      v162 = 9;
                                    else
                                      v162 = 0;
                                    if ((v161 & 1) == 0)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x198205DC8);
                                    }
                                    v13 = (unint64_t)v46;
                                    v10 = v309;
                                  }
                                  else
                                  {
                                    if (v9 != 2)
                                    {
                                      v46 = (unsigned __int8 *)v13;
                                      v45 = 0;
                                      v50 = 0;
                                      v52 = 0;
                                      goto LABEL_103;
                                    }
                                    v162 = 8;
                                  }
                                  JSC::ProxyableAccessCase::create((uint64_t)v311, (unsigned __int8 *)v13, v162, v323, a5, 16 * v27, (unsigned int **)&v318, v26 == 32, (uint64_t *)&v312, *(unsigned int **)(v11 + 40), (uint64_t *)&v317);
                                  v34 = 0;
                                  v33 = v312;
LABEL_126:
                                  v17 = 1;
LABEL_127:
                                  v67 = v317;
                                  v317 = 0;
                                  if (v67)
                                  {
                                    do
                                    {
                                      v68 = __ldaxr((unsigned int *)v67);
                                      v69 = v68 - 1;
                                    }
                                    while (__stlxr(v69, (unsigned int *)v67));
                                    if (!v69)
                                    {
                                      atomic_store(1u, (unsigned int *)v67);
                                      v164 = *((_QWORD *)v67 + 1);
                                      *((_QWORD *)v67 + 1) = 0;
                                      if (v164)
                                        WTF::fastFree(v164, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                      WTF::fastFree((unint64_t)v67, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                    }
                                  }
LABEL_130:
                                  v70 = (unsigned int *)v318;
                                  v318 = 0;
                                  if (v70)
                                  {
                                    do
                                    {
                                      v71 = __ldaxr(v70);
                                      v72 = v71 - 1;
                                    }
                                    while (__stlxr(v72, v70));
                                    if (!v72)
                                    {
                                      atomic_store(1u, v70);
                                      WTF::fastFree((unint64_t)v70, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                    }
                                  }
                                  if (v34)
                                  {
                                    if (v33)
                                    {
                                      do
                                        v73 = __ldaxr((unsigned int *)v33);
                                      while (__stlxr(v73 - 1, (unsigned int *)v33));
                                      if (v73 == 1)
                                      {
                                        atomic_store(1u, (unsigned int *)v33);
                                        JSC::AccessCase::operator delete(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                      }
                                    }
                                    v16 = 0;
                                    goto LABEL_140;
                                  }
                                  goto LABEL_156;
                                }
                              }
                              __break(0xC471u);
                              JUMPOUT(0x1982055DCLL);
                            }
                            if (v323)
                            {
                              if ((v323 & 1) != 0)
                                v153 = v323 & 0xFFFFFFFFFFFFFFFELL;
                              else
                                v153 = *(_QWORD *)(v323 + 8);
                            }
                            else
                            {
                              v153 = 0;
                            }
                            JSC::generateConditionsForPrototypePropertyHitCustom(v311, (unsigned __int8 *)v13, a1, (const JSC::PropertyTable *)(16 * v27), *(_QWORD *)(v11 + 32), v153, *(unsigned int *)(v11 + 16), a8, (uint64_t *)&v324);
                            v154 = (WTF *)v324;
                            *(_QWORD *)&v324 = 0;
                            v155 = (unsigned int *)v318;
                            v318 = v154;
                            a5 = v106;
                            if (!v155)
                              goto LABEL_286;
                            do
                            {
                              v156 = __ldaxr(v155);
                              v157 = v156 - 1;
                            }
                            while (__stlxr(v157, v155));
                            if (!v157)
                            {
                              atomic_store(1u, v155);
                              WTF::fastFree((unint64_t)v155, a2, (uint64_t)a3, a4, v106, a6, a7, a8);
                              a5 = v106;
                            }
                            v150 = (unsigned int *)v324;
                            *(_QWORD *)&v324 = 0;
                            if (!v150)
                            {
LABEL_286:
                              v25 = v305;
                              goto LABEL_256;
                            }
                            do
                            {
                              v158 = __ldaxr(v150);
                              v152 = --v158 == 0;
                            }
                            while (__stlxr(v158, v150));
                          }
                          else
                          {
                            if (v323)
                            {
                              if ((v323 & 1) != 0)
                                v145 = v323 & 0xFFFFFFFFFFFFFFFELL;
                              else
                                v145 = *(_QWORD *)(v323 + 8);
                            }
                            else
                            {
                              v145 = 0;
                            }
                            JSC::generateConditionsForPropertyMiss((uint64_t)v311, (unsigned __int8 *)v13, a1, 16 * v27, v145, a6, a7, a8, (uint64_t *)&v324);
                            v146 = (WTF *)v324;
                            *(_QWORD *)&v324 = 0;
                            v147 = (unsigned int *)v318;
                            v318 = v146;
                            a5 = v106;
                            if (!v147)
                              goto LABEL_286;
                            do
                            {
                              v148 = __ldaxr(v147);
                              v149 = v148 - 1;
                            }
                            while (__stlxr(v149, v147));
                            if (!v149)
                            {
                              atomic_store(1u, v147);
                              WTF::fastFree((unint64_t)v147, a2, (uint64_t)a3, a4, v106, a6, a7, a8);
                              a5 = v106;
                            }
                            v150 = (unsigned int *)v324;
                            *(_QWORD *)&v324 = 0;
                            if (!v150)
                              goto LABEL_286;
                            do
                            {
                              v151 = __ldaxr(v150);
                              v152 = --v151 == 0;
                            }
                            while (__stlxr(v151, v150));
                          }
                          if (v152)
                          {
                            atomic_store(1u, v150);
                            WTF::fastFree((unint64_t)v150, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            a5 = v106;
                          }
                          goto LABEL_286;
                        }
                        if (*(_BYTE *)(v11 + 49))
                          v165 = *(_QWORD *)(v11 + 32);
                        else
                          v165 = 0;
                        JSC::PolyProtoAccessChain::tryCreate(a1, (_DWORD *)v12, v18, v165, a5, a6, a7, a8, (uint64_t *)&v324);
                        v167 = (WTF *)v324;
                        *(_QWORD *)&v324 = 0;
                        v168 = v317;
                        v317 = v167;
                        if (v168)
                        {
                          do
                          {
                            v169 = __ldaxr((unsigned int *)v168);
                            v170 = v169 - 1;
                          }
                          while (__stlxr(v170, (unsigned int *)v168));
                          if (!v170)
                          {
                            atomic_store(1u, (unsigned int *)v168);
                            v252 = *((_QWORD *)v168 + 1);
                            *((_QWORD *)v168 + 1) = 0;
                            if (v252)
                              WTF::fastFree(v252, a2, (uint64_t)a3, a4, v166, a6, a7, a8);
                            WTF::fastFree((unint64_t)v168, a2, (uint64_t)a3, a4, v166, a6, a7, a8);
                          }
                          v171 = (WTF *)v324;
                          *(_QWORD *)&v324 = 0;
                          if (v171)
                            WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v171, a2, (uint64_t)a3, a4, v166, a6, a7, a8);
                          v167 = v317;
                        }
                        a5 = v106;
                        v25 = v305;
                        if (v167)
                          goto LABEL_87;
LABEL_325:
                        v33 = 0;
                        v17 = 0;
                        v34 = 1;
                        goto LABEL_127;
                      }
                    }
                    v33 = 0;
                    v34 = 1;
                    goto LABEL_126;
                  }
LABEL_48:
                  v35 = 1;
                  goto LABEL_82;
                }
                if (v25 != 6)
                {
                  v12 = *(_QWORD *)(v12 + 16);
                  goto LABEL_25;
                }
              }
              v16 = 0;
              v17 = 0;
              goto LABEL_140;
            }
            v17 = 1;
            v33 = (unint64_t)v20;
LABEL_156:
            if (byte_1ECF4C6B7)
            {
              if ((v12 & 0xFFFE000000000002) != 0)
                v218 = 0;
              else
                v218 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
              if (v323)
              {
                if ((v323 & 1) != 0)
                  v219 = (WTF::StringImpl *)(v323 & 0xFFFFFFFFFFFFFFFELL);
                else
                  v219 = *(WTF::StringImpl **)(v323 + 8);
              }
              else
              {
                v219 = 0;
              }
              JSC::Identifier::fromUid(v219, (uint64_t)v311, a3, a4, a5, a6, a7, a8, &v318);
              v222 = (JSC::ICEvent *)JSC::ICEvent::ICEvent((uint64_t)&v324, (uint64_t **)v311, (const WTF::StringImpl *)1, v218, v318, v12 == *(_QWORD *)(v11 + 32), v220, v221);
              JSC::ICEvent::log(v222, v223, v224, v225, v226, v227, v228, v229);
              v236 = v325;
              v325 = 0;
              if (v236)
              {
                if (*(_DWORD *)v236 == 2)
                {
                  WTF::StringImpl::~StringImpl(v236, v230, v231, v232, v233, v234, v235, a8);
                  WTF::fastFree(v269, v270, v271, v272, v273, v274, v275, v276);
                }
                else
                {
                  *(_DWORD *)v236 -= 2;
                }
              }
              v237 = v318;
              v318 = 0;
              if (v237)
              {
                if (*(_DWORD *)v237 == 2)
                {
                  WTF::StringImpl::~StringImpl(v237, v230, v231, v232, v233, v234, v235, a8);
                  WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
                }
                else
                {
                  *(_DWORD *)v237 -= 2;
                }
              }
            }
            v318 = (WTF *)v33;
            JSC::StructureStubInfo::addAccessCase(v10, v327, a1, v13, 0, v323, (void **)&v318, a8, (uint64_t)&v324);
            LODWORD(v319) = v324;
            v82 = (JSC::InlineCacheHandler *)*((_QWORD *)&v324 + 1);
            *((_QWORD *)&v324 + 1) = 0;
            v83 = v320;
            v320 = v82;
            if (v83)
            {
              if (*(_DWORD *)v83 == 1)
              {
                JSC::InlineCacheHandler::~InlineCacheHandler(v83, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v81);
                WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
              }
              else
              {
                --*(_DWORD *)v83;
              }
            }
            if (v321)
              WTF::fastFree((unint64_t)v321, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v84 = (JSC::InlineCacheHandler *)*((_QWORD *)&v324 + 1);
            v321 = v325;
            *(double *)&a9 = v326;
            v325 = 0;
            v326 = 0.0;
            v322 = a9;
            *((_QWORD *)&v324 + 1) = 0;
            if (v84)
            {
              if (*(_DWORD *)v84 == 1)
              {
                JSC::InlineCacheHandler::~InlineCacheHandler(v84, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
                WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
              }
              else
              {
                --*(_DWORD *)v84;
              }
            }
            v85 = (unsigned int *)v318;
            v318 = 0;
            if (v85)
            {
              do
              {
                v86 = __ldaxr(v85);
                v87 = v86 - 1;
              }
              while (__stlxr(v87, v85));
              if (!v87)
              {
                atomic_store(1u, v85);
                JSC::AccessCase::operator delete((unint64_t)v85, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
            }
            if ((v319 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
            {
              if ((v12 & 0xFFFE000000000002) != 0)
                v238 = 0;
              else
                v238 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
              if (v323)
              {
                if ((v323 & 1) != 0)
                  v239 = (WTF::StringImpl *)(v323 & 0xFFFFFFFFFFFFFFFELL);
                else
                  v239 = *(WTF::StringImpl **)(v323 + 8);
              }
              else
              {
                v239 = 0;
              }
              JSC::Identifier::fromUid(v239, (uint64_t)v311, a3, a4, a5, a6, a7, a8, &v317);
              v242 = (JSC::ICEvent *)JSC::ICEvent::ICEvent((uint64_t)&v324, (uint64_t **)v311, (const WTF::StringImpl *)2, v238, v317, v12 == *(_QWORD *)(v11 + 32), v240, v241);
              JSC::ICEvent::log(v242, v243, v244, v245, v246, v247, v248, v249);
              v250 = v325;
              v325 = 0;
              if (v250)
              {
                if (*(_DWORD *)v250 == 2)
                {
                  WTF::StringImpl::~StringImpl(v250, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v285, v286, v287, v288, v289, v290, v291, v292);
                }
                else
                {
                  *(_DWORD *)v250 -= 2;
                }
              }
              v251 = v317;
              v317 = 0;
              if (v251)
              {
                if (*(_DWORD *)v251 == 2)
                {
                  WTF::StringImpl::~StringImpl(v251, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v293, v294, v295, v296, v297, v298, v299, v300);
                }
                else
                {
                  *(_DWORD *)v251 -= 2;
                }
              }
            }
            v16 = 1;
            goto LABEL_140;
          }
        }
        JSC::CacheableIdentifier::ensureIsCell((JSC::CacheableIdentifier *)&v323, v311, a3, a4, a5, a6, a7, a8);
        v36 = v323;
        v33 = WTF::fastMalloc((WTF *)0x28);
        v17 = 1;
        *(_DWORD *)v33 = 1;
        *(_WORD *)(v33 + 4) = 26;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = v36;
        *(_QWORD *)(v33 + 8) = 0xFFFFFFFFLL;
        *(_QWORD *)(v33 + 16) = 0;
        if (!v20)
          goto LABEL_156;
        do
          v38 = __ldaxr(v20);
        while (__stlxr(v38 - 1, v20));
LABEL_52:
        v17 = 1;
        if (v38 == 1)
        {
          atomic_store(1u, v20);
          JSC::AccessCase::operator delete((unint64_t)v20, v37, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_156;
      }
    }
LABEL_10:
    v20 = 0;
    goto LABEL_11;
  }
  if (*(_BYTE *)(v10 + 123)
    || *(_QWORD *)(v11 + 32) != v12
    || !JSC::InlineAccess::isCacheableArrayLength(v10, v12)
    || !JSC::InlineAccess::generateArrayLength(v10, v12))
  {
    v41 = WTF::fastMalloc((WTF *)0x28);
    v20 = (unsigned int *)v41;
    *(_DWORD *)v41 = 1;
    v42 = 20;
LABEL_59:
    *(_WORD *)(v41 + 4) = v42;
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = v39;
    a9 = (uint8x8_t)0xFFFFFFFFLL;
    *(_QWORD *)(v41 + 8) = 0xFFFFFFFFLL;
    *(_QWORD *)(v41 + 16) = 0;
    goto LABEL_11;
  }
  if (v9 >= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x198206168);
  }
  a3 = (const WTF::StringImpl *)*(&off_1E3583418 + (int)v9);
  if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
    *(_QWORD *)(v10 + 48) = a3;
  else
    JSC::ftlThunkAwareRepatchCall(v13, *(_QWORD *)(v10 + 48), (int *)a3, a4, a5, a6, a7, a8);
  v16 = 0;
  *(_BYTE *)(v10 + 123) = 5;
  v17 = 1;
LABEL_140:
  if (!v330)
    goto LABEL_146;
  v329 = 0;
  v74 = v328;
  v75 = __ldxr(v328);
  if (v75 != 1)
  {
    __clrex();
    goto LABEL_145;
  }
  if (__stlxr(0, v328))
LABEL_145:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v74, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_146:
  v76 = v331;
  v77 = *((_DWORD *)v331 + 229) - 1;
  *((_DWORD *)v331 + 229) = v77;
  if (*((unsigned __int8 *)v76 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v78 = v77 == 0;
  else
    v78 = 0;
  if (v78)
  {
    *((_BYTE *)v76 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v76 + 192, 0);
  }
  if (v330 && v329)
  {
    v79 = v328;
    v80 = __ldxr(v328);
    if (v80 == 1)
    {
      if (!__stlxr(0, v328))
        goto LABEL_177;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v79, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_177:
  if (!v16)
    goto LABEL_186;
  v89 = v319;
  if ((_DWORD)v319 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints(&v319, v311, *(double *)&a9, (uint64_t)a3, a4, a5, a6, a7, a8);
    v330 = 0;
    v328 = v308;
    v329 = 1;
    if (__ldaxr(v308))
    {
      __clrex();
    }
    else if (!__stxr(1u, v308))
    {
      goto LABEL_388;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v308);
LABEL_388:
    v330 = 1;
    v331 = v311;
    ++*((_DWORD *)v311 + 229);
    JSC::StructureStubInfo::reset(v10);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v327, v181, v182, v183, v184, v185, v186, v187);
    v89 = v319;
  }
  if (v89 == 5)
    v17 = 3;
  else
    v17 = v89 != 1 && v89 != 4;
LABEL_186:
  v91 = v321;
  if (v321)
  {
    v321 = 0;
    v322.i32[0] = 0;
    WTF::fastFree((unint64_t)v91, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v92 = v320;
  v320 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v92, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      --*(_DWORD *)v92;
    }
  }
  if (v17 == 3)
  {
    if (v9)
    {
      switch(v9)
      {
        case 1u:
          if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
          {
            *(_QWORD *)(v10 + 48) = operationGetByValMegamorphic;
            return;
          }
          v163 = *(_QWORD *)(v10 + 48);
          v159 = (int *)operationGetByValMegamorphic;
          break;
        case 5u:
          if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
          {
            *(_QWORD *)(v10 + 48) = operationGetByValWithThisMegamorphic;
            return;
          }
          v163 = *(_QWORD *)(v10 + 48);
          v159 = (int *)operationGetByValWithThisMegamorphic;
          break;
        case 3u:
          if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
          {
            *(_QWORD *)(v10 + 48) = operationGetByIdWithThisMegamorphic;
            return;
          }
          v163 = *(_QWORD *)(v10 + 48);
          v159 = (int *)operationGetByIdWithThisMegamorphic;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198205E88);
      }
    }
    else
    {
      if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
      {
        *(_QWORD *)(v10 + 48) = operationGetByIdMegamorphic;
        return;
      }
      v163 = *(_QWORD *)(v10 + 48);
      v159 = (int *)operationGetByIdMegamorphic;
    }
LABEL_327:
    JSC::ftlThunkAwareRepatchCall(v13, v163, v159, a4, a5, a6, a7, a8);
    return;
  }
  if (!v17)
  {
    if (v9 >= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x19820610CLL);
    }
    v159 = (int *)*(&off_1E35832E8 + (int)v9);
    if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
    {
      *(_QWORD *)(v10 + 48) = v159;
      return;
    }
    v163 = *(_QWORD *)(v10 + 48);
    goto LABEL_327;
  }
}

void JSC::repatchGetBySlowPathCall(JSC::CodeBlock *a1, uint64_t a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;

  if (a3 >= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1982062F4);
  }
  v11 = (int *)*(&off_1E3583418 + a3);
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = v11;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v11, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, (uint64_t)v11, a4, a5, a6, a7, a8);
  v17 = (int *)*(&off_1E35832E8 + a3);
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = v17;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v17, v12, v13, v14, v15, v16);
}

void JSC::resetGetBy(JSC::CodeBlock *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;

  if (a3 >= 8)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = (int *)*(&off_1E3583418 + (int)a3);
    if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
      *(_QWORD *)(a2 + 48) = v10;
    else
      JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v10, a4, a5, a6, a7, a8);
    JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, (uint64_t)v10, a4, a5, a6, a7, a8);
  }
}

void JSC::repatchArrayGetByVal(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint8x8_t v28;
  JSC::InlineCacheHandler *v29;
  JSC::InlineCacheHandler *v30;
  JSC::InlineCacheHandler *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  int v46;
  WTF *v47;
  JSC::InlineCacheHandler *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  int v74;
  int v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  JSC::JSGlobalObject *v79;
  unsigned int *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  void *v118;
  WTF *v119;
  JSC::InlineCacheHandler *v120;
  WTF::StringImpl *v121;
  double v122;
  WTF *v123;
  WTF *v124;
  uint64_t v125;
  JSC::InlineCacheHandler *v126;
  WTF *v127;
  double v128;
  char v129[8];
  unsigned __int8 *v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;

  v9 = a6;
  v134 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_85;
  if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
    return;
  v14 = a1[7];
  LODWORD(v125) = 0;
  v127 = 0;
  v128 = 0.0;
  v126 = 0;
  v15 = a2 + 16;
  v132 = 0;
  v130 = a2 + 16;
  v131 = 1;
  if (__ldaxr(a2 + 16))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
    goto LABEL_6;
  }
  if (__stxr(1u, v15))
    goto LABEL_5;
LABEL_6:
  v132 = 1;
  v133 = v14;
  ++*(_DWORD *)(v14 + 916);
  v17 = *(unsigned __int8 *)(a3 + 5);
  if (v17 > 0x20)
  {
    switch(v17)
    {
      case '!':
        v18 = 40;
        break;
      case '=':
        v18 = 33;
        break;
      case '"':
        v18 = 39;
        break;
      default:
        goto LABEL_12;
    }
LABEL_15:
    v123 = 0;
    v124 = 0;
    JSC::AccessCase::create(v14, (unint64_t)a2, v18, 0, -1, 0, (unsigned int **)&v124, (uint64_t *)&v123, (uint64_t *)&v119);
    v27 = v119;
    if (v123)
      WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v123, v20, v21, v22, v23, v24, v25, v26);
LABEL_17:
    v118 = v27;
    JSC::StructureStubInfo::addAccessCase(a5, v129, a1, (uint64_t)a2, 0, 0, &v118, v26, (uint64_t)&v119);
    LODWORD(v125) = (_DWORD)v119;
    v29 = v120;
    v120 = 0;
    v30 = v126;
    v126 = v29;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v30, a2, a3, a4, a5, a6, a7, a8, v28);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
    if (v127)
      WTF::fastFree((unint64_t)v127, a2, a3, a4, a5, a6, a7, a8);
    v31 = v120;
    v127 = v121;
    a9 = v122;
    v121 = 0;
    v122 = 0.0;
    v128 = a9;
    v120 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v31, a2, a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
    v32 = (unsigned int *)v118;
    v118 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        JSC::AccessCase::operator delete((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if ((v125 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
    {
      JSC::ICEvent::ICEvent((uint64_t)&v119, (uint64_t **)v14, (const WTF::StringImpl *)2, 16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C), 0, a6, a7, a8);
      JSC::ICEvent::log((JSC::ICEvent *)&v119, v100, v101, v102, v103, v104, v105, v106);
      v107 = v121;
      v121 = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
    }
    v36 = 1;
    goto LABEL_35;
  }
  if (v17 == 2)
  {
    v18 = 59;
    goto LABEL_15;
  }
LABEL_12:
  if (v17 - 39 <= 0xA)
  {
    v36 = 0;
    switch(*(_BYTE *)(a3 + 5))
    {
      case '\'':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 50;
        v75 = 41;
        goto LABEL_82;
      case '(':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 51;
        v75 = 42;
        goto LABEL_82;
      case ')':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 52;
        v75 = 43;
        goto LABEL_82;
      case '*':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 53;
        v75 = 44;
        goto LABEL_82;
      case '+':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 54;
        v75 = 45;
        goto LABEL_82;
      case ',':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 55;
        v75 = 46;
        goto LABEL_82;
      case '-':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 56;
        v75 = 47;
        goto LABEL_82;
      case '.':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 57;
        v75 = 48;
        goto LABEL_82;
      case '/':
        v73 = (*(_BYTE *)(a3 + 40) & 6) == 0;
        v74 = 58;
        v75 = 49;
LABEL_82:
        if (v73)
          v18 = v75;
        else
          v18 = v74;
        goto LABEL_15;
      case '0':
      case '1':
        goto LABEL_35;
      default:
        __break(0xC471u);
        JUMPOUT(0x198206A58);
    }
  }
  v19 = *(_BYTE *)(a3 + 4) & 0xE;
  if (v19 == 8)
  {
    v18 = 37;
    goto LABEL_15;
  }
  v36 = 0;
  if ((*(_BYTE *)(a3 + 4) & 0xEu) > 5)
  {
    if (v19 == 6)
    {
      v18 = 36;
    }
    else
    {
      if (v19 != 10)
        goto LABEL_35;
      v18 = 38;
    }
    goto LABEL_15;
  }
  if (v19 == 4)
    goto LABEL_72;
  if ((*(_BYTE *)(a3 + 4) & 0xE) != 0)
    goto LABEL_35;
  if (v17 < 0x17
    || (*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8) & 0x20) != 0
    || (v77 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28)) != 0
    && *(_BYTE *)(*(_QWORD *)(v77 + 2048) + 4) == 2
    || (*(_WORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xC) & 0x100) != 0)
  {
    v36 = 0;
    goto LABEL_35;
  }
  v78 = JSC::prepareChainForCaching(a1, (JSC::JSObject *)a3, 0, 0, a5, a6, a7, a8);
  v36 = 0;
  if ((v78 & 0xFFFFFF) >= 0x10000 && !(_BYTE)v78)
  {
    v79 = (JSC::JSGlobalObject *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE));
    JSC::generateConditionsForIndexedMiss((JSC *)v14, (JSC::VM *)a2, (JSC::JSCell *)a1, v79, (JSC::Structure *)a5, a6, a7, a8, (uint64_t *)&v119);
    v80 = (unsigned int *)v119;
    if (!v119 || *((_DWORD *)v119 + 1))
    {
      v123 = 0;
      JSC::AccessCase::create(v14, (unint64_t)a2, 60, 0, -1, (unint64_t)v79, (unsigned int **)&v119, (uint64_t *)&v123, (uint64_t *)&v124);
      v27 = v124;
      if (v123)
        WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v123, v81, v82, v83, v84, v85, v86, v26);
      v87 = (unsigned int *)v119;
      v119 = 0;
      if (v87)
      {
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          atomic_store(1u, v87);
          WTF::fastFree((unint64_t)v87, v81, v82, v83, v84, v85, v86, v26);
        }
      }
      if (v27)
        goto LABEL_17;
LABEL_72:
      v18 = 35;
      goto LABEL_15;
    }
    v119 = 0;
    do
    {
      v116 = __ldaxr(v80);
      v117 = v116 - 1;
    }
    while (__stlxr(v117, v80));
    if (!v117)
    {
      atomic_store(1u, v80);
      WTF::fastFree((unint64_t)v80, a2, a3, a4, a5, a6, a7, a8);
    }
    v36 = 0;
  }
LABEL_35:
  if (!v132)
    goto LABEL_41;
  v131 = 0;
  v37 = v130;
  v38 = __ldxr(v130);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v130))
LABEL_40:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v37, 0, a3, a4, a5, a6, a7, a8);
LABEL_41:
  v39 = v133;
  v40 = *(_DWORD *)(v133 + 916) - 1;
  *(_DWORD *)(v133 + 916) = v40;
  if (*(unsigned __int8 *)(v39 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v41 = v40 == 0;
  else
    v41 = 0;
  if (v41)
  {
    *(_BYTE *)(v39 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v39 + 192, 0);
  }
  if (v132 && v131)
  {
    v42 = v130;
    v43 = __ldxr(v130);
    if (v43 == 1)
    {
      if (!__stlxr(0, v130))
        goto LABEL_50;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v42, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_50:
  if (!v36)
  {
    v46 = 0;
    goto LABEL_60;
  }
  v44 = v125;
  if ((_DWORD)v125 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints(&v125, (JSC::VM *)v14, a9, a3, a4, a5, a6, a7, a8);
    v132 = 0;
    v130 = a2 + 16;
    v131 = 1;
    if (__ldaxr(v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_124;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
LABEL_124:
    v132 = 1;
    v133 = v14;
    ++*(_DWORD *)(v14 + 916);
    JSC::StructureStubInfo::reset(a5, (uint64_t)v129, (int *)a2);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v129, v92, v93, v94, v95, v96, v97, v98);
    v44 = v125;
  }
  if (v44 == 5)
    v46 = 3;
  else
    v46 = v44 != 1 && v44 != 4;
LABEL_60:
  v47 = v127;
  if (v127)
  {
    v127 = 0;
    LODWORD(v128) = 0;
    WTF::fastFree((unint64_t)v47, a2, a3, a4, a5, a6, a7, a8);
  }
  v48 = v126;
  v126 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v48, a2, a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      --*(_DWORD *)v48;
    }
  }
  if (v46)
  {
    if (v46 == 3)
    {
      switch(v9)
      {
        case 0u:
          if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
          {
            v99 = operationGetByIdMegamorphic;
            goto LABEL_142;
          }
          v90 = *(_QWORD *)(a5 + 48);
          v76 = (int *)operationGetByIdMegamorphic;
          goto LABEL_116;
        case 1u:
          if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
          {
            v99 = operationGetByValMegamorphic;
            goto LABEL_142;
          }
          v90 = *(_QWORD *)(a5 + 48);
          v76 = (int *)operationGetByValMegamorphic;
          goto LABEL_116;
        case 3u:
          if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
          {
            v99 = operationGetByIdWithThisMegamorphic;
            goto LABEL_142;
          }
          v90 = *(_QWORD *)(a5 + 48);
          v76 = (int *)operationGetByIdWithThisMegamorphic;
          goto LABEL_116;
        case 5u:
          if ((*(_WORD *)(a5 + 129) & 0x200) == 0)
          {
            v90 = *(_QWORD *)(a5 + 48);
            v76 = (int *)operationGetByValWithThisMegamorphic;
            goto LABEL_116;
          }
          v99 = operationGetByValWithThisMegamorphic;
LABEL_142:
          *(_QWORD *)(a5 + 48) = v99;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198206BE0);
      }
    }
    return;
  }
LABEL_85:
  if (v9 >= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x198206B78);
  }
  v76 = (int *)*(&off_1E35832E8 + (int)v9);
  if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
  {
    *(_QWORD *)(a5 + 48) = v76;
  }
  else
  {
    v90 = *(_QWORD *)(a5 + 48);
LABEL_116:
    JSC::ftlThunkAwareRepatchCall((uint64_t)a2, v90, v76, a4, a5, a6, a7, a8);
  }
}

void JSC::repatchPutBySlowPathCall(JSC::CodeBlock *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;

  if (a3 > 0xB)
    v11 = 0;
  else
    v11 = (int *)off_1E3583328[a3];
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = v11;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v11, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, (uint64_t)v11, a4, a5, a6, a7, a8);
  if (a3 >= 0xC)
  {
    __break(0xC471u);
  }
  else
  {
    v17 = (int *)off_1E3583388[a3];
    if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
      *(_QWORD *)(a2 + 48) = v17;
    else
      JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v17, v12, v13, v14, v15, v16);
  }
}

void JSC::resetPutBy(JSC::CodeBlock *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;

  if (a3 > 0xB)
    v10 = 0;
  else
    v10 = (int *)off_1E3583328[a3];
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = v10;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v10, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, (uint64_t)v10, a4, a5, a6, a7, a8);
}

void JSC::repatchPutBy(uint64_t *a1, unint64_t a2, const WTF::StringImpl *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const WTF::StringImpl *v13;
  unint64_t v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  JSC::VM *v19;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  unint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint8x8_t v75;
  JSC::InlineCacheHandler *v76;
  JSC::InlineCacheHandler *v77;
  JSC::InlineCacheHandler *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned __int8 *v83;
  int v84;
  JSC::VM *v85;
  int v86;
  BOOL v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  WTF *v92;
  JSC::InlineCacheHandler *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  _BOOL4 v127;
  _BOOL4 v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  char v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  int *v152;
  unint64_t v153;
  uint64_t v154;
  WTF *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  unint64_t *v164;
  uint64_t v165;
  unsigned int v166;
  WTF *v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  JSC::Structure *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WTF *v213;
  WTF *v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WTF::AtomStringImpl *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  JSC::VM *v267;
  WTF *v269;
  WTF *v270;
  WTF *v271;
  JSC::InlineCacheHandler *v272;
  WTF::StringImpl *v273;
  double v274;
  uint64_t v275;
  JSC::InlineCacheHandler *v276;
  WTF *v277;
  double v278;
  uint64_t v279;
  unint64_t v280;
  unsigned __int8 *v281;
  char v282;
  char v283;
  JSC::VM *v284;
  uint64_t v285;

  v9 = a8;
  v10 = a7;
  v11 = a6;
  v12 = (unint64_t)a4;
  v13 = a3;
  v285 = *MEMORY[0x1E0C80C00];
  v278 = 0.0;
  v279 = a5;
  v267 = (JSC::VM *)a1[7];
  LODWORD(v275) = 0;
  v276 = 0;
  v277 = 0;
  if ((a5 & 1) != 0)
    v15 = a5 & 0xFFFFFFFFFFFFFFFELL;
  else
    v15 = *(_QWORD *)(a5 + 8);
  v16 = *(_DWORD *)(v15 + 16);
  if ((v16 & 0x20) != 0)
  {
    v17 = *(_DWORD *)v15 + 2;
LABEL_7:
    *(_DWORD *)v15 = v17;
    goto LABEL_8;
  }
  if ((v16 & 0x10) != 0)
  {
    *(_DWORD *)v15 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*((uint64_t **)v267 + 5239), v15, a3, (uint64_t)a4, a5, a6, a7, a8, &v280);
    v15 = v280;
  }
  v17 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  if (v17)
    goto LABEL_7;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
LABEL_8:
  v18 = (unsigned __int8 *)(a2 + 16);
  v19 = (JSC::VM *)a1[7];
  v283 = 0;
  v281 = (unsigned __int8 *)(a2 + 16);
  v282 = 1;
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
    goto LABEL_11;
  }
  if (__stxr(1u, v18))
    goto LABEL_10;
LABEL_11:
  LODWORD(v21) = 0;
  v283 = 1;
  v284 = v19;
  ++*((_DWORD *)v19 + 229);
  v266 = v9;
  if (byte_1ECF4C25D)
    goto LABEL_319;
  v22 = 0;
  if (((unint64_t)v13 & 0xFFFE000000000002) != 0)
    goto LABEL_127;
  v23 = *((unsigned __int8 *)v13 + 5);
  v24 = *(unsigned __int8 *)(v11 + 23);
  if (v23 == 61)
  {
    v27 = 0;
    goto LABEL_22;
  }
  if (v24 != 1)
    goto LABEL_378;
  v25 = *(unsigned __int8 *)(v11 + 21);
  if ((v25 - 1) >= 2)
  {
    v126 = (v25 & 0xFE) != 4 || *(_QWORD *)(v11 + 24) == 0;
    v127 = !v126;
    if (v25 != 3 && !v127)
      goto LABEL_378;
  }
  if ((*(_BYTE *)(v12 + 8) & 0x10) != 0)
    goto LABEL_378;
  if ((*(_DWORD *)(v12 + 16) & 3) == 2)
    goto LABEL_378;
  v26 = *(_WORD *)(v12 + 12);
  if ((v26 & 8) != 0 || (v26 & 0x10) != 0 && (v26 & 0x20) == 0)
    goto LABEL_378;
  if (v23 == 32)
  {
    v13 = (const WTF::StringImpl *)*((_QWORD *)v13 + 2);
    if ((v25 & 0xFFFFFFFD) == 1)
    {
      if ((v9 & 0xFFFFFFFC) == 8)
        goto LABEL_378;
LABEL_289:
      v24 = 1;
      v27 = 1;
      goto LABEL_22;
    }
    LODWORD(v21) = 0;
    if ((v9 & 0xFFFFFFFC) != 8 && (v25 & 0xFE) == 4)
    {
      v22 = 0;
      if (!*(_QWORD *)(v11 + 24))
        goto LABEL_127;
      goto LABEL_289;
    }
LABEL_319:
    v22 = 0;
    goto LABEL_127;
  }
  v27 = 0;
  v24 = 1;
LABEL_22:
  a4 = *(const JSC::PropertyTable **)v11;
  if (v13 != *(const WTF::StringImpl **)v11 || v24 != 1)
  {
    if (v24 != 1)
      goto LABEL_294;
    v28 = *(unsigned __int8 *)(v11 + 21);
LABEL_183:
    v129 = (v28 & 0xFE) == 4 && *(_QWORD *)(v11 + 24) != 0;
    if (v28 == 3 || v129)
    {
      if (v129)
      {
        v270 = 0;
        v271 = 0;
        if (v279)
        {
          if ((v279 & 1) != 0)
            v130 = v279 & 0xFFFFFFFFFFFFFFFELL;
          else
            v130 = *(_QWORD *)(v279 + 8);
        }
        else
        {
          v130 = 0;
        }
        v131 = JSC::prepareChainForCaching(a1, v13, v130, (uint64_t)a4, a5, a6, a7, a8);
        if ((v131 & 0xFFFFFF) >= 0x10000)
        {
          v132 = *(_QWORD *)v11;
          if (v13 == *(const WTF::StringImpl **)v11)
          {
LABEL_209:
            v41 = v10;
            v140 = *(_QWORD *)v11;
            if (v13 == *(const WTF::StringImpl **)v11)
              v140 = 0;
            if (*(_BYTE *)(v11 + 21) == 5 && *(_BYTE *)(v11 + 23) == 1)
              v142 = 15;
            else
              v142 = 14;
            JSC::GetterSetterAccessCase::create((uint64_t)v267, a2, v142, v12, v279, -1, (unsigned int **)&v271, (uint64_t *)&v270, (uint64_t *)&v269, v27, *(_QWORD *)(v11 + 24), v140);
            v71 = (unint64_t)v269;
            v148 = v270;
            v270 = 0;
            if (v148)
              WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v148, v143, v144, v145, v146, v147, a7, a8);
            v149 = (unsigned int *)v271;
            v271 = 0;
            if (v149)
            {
              do
              {
                v150 = __ldaxr(v149);
                v151 = v150 - 1;
              }
              while (__stlxr(v151, v149));
              if (!v151)
              {
                atomic_store(1u, v149);
                WTF::fastFree((unint64_t)v149, v143, v144, v145, v146, v147, a7, a8);
              }
            }
            goto LABEL_223;
          }
          if ((_BYTE)v131)
          {
            JSC::PolyProtoAccessChain::tryCreate(a1, v13, v279, *(_QWORD *)v11, v132, a6, a7, a8, (uint64_t *)&v269);
            WTF::RefPtr<JSC::PolyProtoAccessChain,WTF::RawPtrTraits<JSC::PolyProtoAccessChain>,WTF::DefaultRefDerefTraits<JSC::PolyProtoAccessChain>>::operator=((unint64_t *)&v270, (unint64_t *)&v269, v207, v208, v209, v210, v211, v212);
            v213 = v269;
            v269 = 0;
            if (v213)
              WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v213, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (v270)
              goto LABEL_209;
          }
          else
          {
            v270 = 0;
            JSC::generateConditionsForPrototypePropertyHitCustom(v267, (unsigned __int8 *)a2, a1, (const JSC::PropertyTable *)v12, v132, v15, 0, a8, (uint64_t *)&v269);
            v133 = v269;
            v269 = 0;
            v134 = (unsigned int *)v271;
            v271 = v133;
            if (v134)
            {
              do
              {
                v135 = __ldaxr(v134);
                v136 = v135 - 1;
              }
              while (__stlxr(v136, v134));
              if (!v136)
              {
                atomic_store(1u, v134);
                WTF::fastFree((unint64_t)v134, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              }
              v137 = (unsigned int *)v269;
              v269 = 0;
              if (v137)
              {
                do
                {
                  v138 = __ldaxr(v137);
                  v139 = v138 - 1;
                }
                while (__stlxr(v139, v137));
                if (!v139)
                {
                  atomic_store(1u, v137);
                  WTF::fastFree((unint64_t)v137, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                }
              }
              v133 = v271;
            }
            if (!v133 || *((_DWORD *)v133 + 1))
              goto LABEL_209;
            v214 = v270;
            v270 = 0;
            if (v214)
              WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v214, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          }
        }
        v215 = (unsigned int *)v271;
        v271 = 0;
        if (v215)
        {
          do
          {
            v216 = __ldaxr(v215);
            v217 = v216 - 1;
          }
          while (__stlxr(v217, v215));
          if (!v217)
          {
            atomic_store(1u, v215);
            WTF::fastFree((unint64_t)v215, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          }
        }
        goto LABEL_378;
      }
      v269 = 0;
      v270 = 0;
      a5 = v279;
      if (v13 == a4)
      {
        v41 = v10;
        LODWORD(a6) = *(_DWORD *)(v11 + 16);
LABEL_270:
        JSC::GetterSetterAccessCase::create((uint64_t)v267, a2, 11, v12, a5, a6, (unsigned int **)&v270, (uint64_t *)&v269, (uint64_t *)&v271, v27, 0, 0);
        v22 = 0;
        v71 = (unint64_t)v271;
        v265 = 1;
        goto LABEL_271;
      }
      v264 = v279;
      if (v279)
      {
        if ((v279 & 1) != 0)
          v153 = v279 & 0xFFFFFFFFFFFFFFFELL;
        else
          v153 = *(_QWORD *)(v279 + 8);
      }
      else
      {
        v153 = 0;
      }
      v154 = JSC::prepareChainForCaching(a1, v13, v153, (uint64_t)a4, v279, a6, a7, a8);
      if ((v154 & 0xFFFFFF) < 0x10000)
        goto LABEL_337;
      if ((v154 & 0xFF00) != 0)
      {
        v41 = v10;
      }
      else
      {
        if (!(_BYTE)v154)
        {
          v269 = 0;
          JSC::generateConditionsForPrototypePropertyHit(v267, (unsigned __int8 *)a2, a1, (const JSC::PropertyTable *)v12, *(_QWORD *)v11, v15, a7, a8, (uint64_t *)&v271);
          v155 = v271;
          v270 = v271;
          v271 = 0;
          if (!v155)
            goto LABEL_291;
          v156 = *((unsigned int *)v155 + 1);
          if ((_DWORD)v156)
          {
            v157 = 0;
            v158 = 0;
            v159 = (uint64_t *)((char *)v155 + 24);
            v160 = 24 * v156;
            do
            {
              v161 = *((unsigned __int8 *)v159 - 2);
              if (v161 < 2 || v161 - 5 <= 1)
              {
                v157 = *v159;
                ++v158;
              }
              v159 += 3;
              v160 -= 24;
            }
            while (v160);
            if (v158 == 1)
            {
              v41 = v10;
              if ((v157 & 0x1000000000) != 0)
              {
                v162 = *((unsigned int *)v155 + 1);
                if (!(_DWORD)v162)
                  goto LABEL_257;
                LODWORD(a6) = 0;
                v163 = 0;
                v164 = (unint64_t *)((char *)v155 + 24);
                v165 = 24 * v162;
                do
                {
                  v166 = *((unsigned __int8 *)v164 - 2);
                  if (v166 < 2 || v166 - 5 <= 1)
                  {
                    a6 = *v164;
                    ++v163;
                  }
                  v164 += 3;
                  v165 -= 24;
                }
                while (v165);
                if (v163 != 1)
                {
LABEL_257:
                  __break(0xC471u);
                  JUMPOUT(0x19820792CLL);
                }
                a5 = v279;
                goto LABEL_270;
              }
              goto LABEL_338;
            }
LABEL_291:
            __break(0xC471u);
            JUMPOUT(0x198207AA4);
          }
LABEL_337:
          v41 = v10;
LABEL_338:
          v71 = 0;
          v265 = 0;
          v22 = 0;
          goto LABEL_271;
        }
        v41 = v10;
        JSC::PolyProtoAccessChain::tryCreate(a1, v13, v279, *(_QWORD *)v11, a5, a6, a7, a8, (uint64_t *)&v271);
        WTF::RefPtr<JSC::PolyProtoAccessChain,WTF::RawPtrTraits<JSC::PolyProtoAccessChain>,WTF::DefaultRefDerefTraits<JSC::PolyProtoAccessChain>>::operator=((unint64_t *)&v269, (unint64_t *)&v271, v189, v190, v191, v192, v193, v194);
        v195 = v271;
        v271 = 0;
        if (v195)
          WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v195, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (!v269)
        {
          v22 = 0;
          v265 = 0;
          v71 = 0;
          goto LABEL_273;
        }
        v196 = (JSC::Structure *)JSC::PolyProtoAccessChain::slotBaseStructure(*((unsigned int **)v269 + 1), 16 * (*(_DWORD *)v13 & 0xFFFFFFFE));
        if ((v15 >> 4))
        {
          if (((v15 >> 4) & ~*((_DWORD *)v196 + 8)) == 0)
          {
            JSC::Structure::ensurePropertyTableIfNotEmpty(v196, v267, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v197)
            {
              v271 = (WTF *)v15;
              a6 = JSC::PropertyTable::get(v197, (uint64_t *)&v271);
              v265 = 0;
              v71 = 0;
              v22 = 1;
              if ((_DWORD)a6 != -1)
              {
                a5 = v264;
                if ((a6 & 0x1000000000) != 0)
                  goto LABEL_270;
              }
LABEL_271:
              v167 = v269;
              v269 = 0;
              if (v167)
                WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v167, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_273:
              v168 = (unsigned int *)v270;
              v270 = 0;
              if (v168)
              {
                do
                {
                  v169 = __ldaxr(v168);
                  v170 = v169 - 1;
                }
                while (__stlxr(v170, v168));
                if (!v170)
                {
                  atomic_store(1u, v168);
                  WTF::fastFree((unint64_t)v168, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                }
              }
              if ((v265 & 1) != 0)
                goto LABEL_108;
LABEL_278:
              if (v71)
              {
                do
                  v171 = __ldaxr((unsigned int *)v71);
                while (__stlxr(v171 - 1, (unsigned int *)v71));
                if (v171 == 1)
                {
                  atomic_store(1u, (unsigned int *)v71);
                  JSC::AccessCase::operator delete(v71, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                }
              }
              LODWORD(v21) = 0;
              goto LABEL_283;
            }
          }
        }
      }
      v71 = 0;
      v265 = 0;
      v22 = 1;
      goto LABEL_271;
    }
LABEL_294:
    LOBYTE(v172) = v279;
    if (v279)
    {
      if ((v279 & 1) != 0)
      {
        v173 = v279 & 0xFFFFFFFFFFFFFFFELL;
        if ((*(_BYTE *)((v279 & 0xFFFFFFFFFFFFFFFELL) + 16) & 0x20) == 0)
        {
          v41 = v10;
LABEL_298:
          LOBYTE(v172) = 0;
          goto LABEL_299;
        }
        v41 = v10;
      }
      else
      {
        v41 = v10;
        v173 = *(_QWORD *)(v279 + 8);
        if ((*(_BYTE *)(v173 + 16) & 0x20) == 0)
          goto LABEL_298;
      }
      v172 = (*(unsigned __int8 *)(v173 + 36) >> 2) & 1;
    }
    else
    {
      v41 = v10;
    }
LABEL_299:
    v22 = 0;
    v71 = 0;
    if (v23 != 61 || (v172 & 1) != 0)
      goto LABEL_108;
    if (v266 <= 0xB)
    {
      if (((1 << v266) & 0xC) != 0)
      {
        v71 = WTF::fastMalloc((WTF *)0x28);
        v22 = 0;
        *(_DWORD *)v71 = 1;
        *(_WORD *)(v71 + 4) = 61;
        *(_DWORD *)(v71 + 8) = -1;
        *(_QWORD *)(v71 + 12) = 0;
        *(_QWORD *)(v71 + 28) = 0;
        *(_QWORD *)(v71 + 20) = 0;
        *(_DWORD *)(v71 + 36) = 0;
      }
      else
      {
        if (((1 << v266) & 3) == 0)
          goto LABEL_317;
        JSC::CacheableIdentifier::ensureIsCell((JSC::CacheableIdentifier *)&v279, v267, a3, (uint64_t)a4, a5, a6, a7, a8);
        v175 = v279;
        v71 = WTF::fastMalloc((WTF *)0x28);
        v22 = 0;
        *(_DWORD *)v71 = 1;
        *(_WORD *)(v71 + 4) = 27;
        *(_QWORD *)(v71 + 24) = 0;
        *(_QWORD *)(v71 + 32) = v175;
        *(_QWORD *)(v71 + 8) = 0xFFFFFFFFLL;
        *(_QWORD *)(v71 + 16) = 0;
      }
LABEL_108:
      if (byte_1ECF4C6B7)
      {
        JSC::ICEvent::ICEvent((uint64_t)&v271, (uint64_t **)v267, (const WTF::StringImpl *)0x1F, 16 * *(unsigned int *)(v12 + 76), (WTF::StringImpl *)v15, v13 == *(const WTF::StringImpl **)v11, a7, a8);
        JSC::ICEvent::log((JSC::ICEvent *)&v271, v218, v219, v220, v221, v222, v223, v224);
        v231 = v273;
        v273 = 0;
        if (v231)
        {
          if (*(_DWORD *)v231 == 2)
          {
            WTF::StringImpl::~StringImpl(v231, v225, v226, v227, v228, v229, v230, a8);
            WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
          }
          else
          {
            *(_DWORD *)v231 -= 2;
          }
        }
      }
      v74 = (*(_BYTE *)(v11 + 20) & 1) == 0;
      v270 = (WTF *)v71;
      v10 = v41;
      JSC::StructureStubInfo::addAccessCase(v41, &v280, a1, a2, v74, v279, (void **)&v270, a8, (uint64_t)&v271);
      LODWORD(v275) = (_DWORD)v271;
      v76 = v272;
      v272 = 0;
      v77 = v276;
      v276 = v76;
      v9 = v266;
      if (v77)
      {
        if (*(_DWORD *)v77 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v77, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v75);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          --*(_DWORD *)v77;
        }
      }
      if (v277)
        WTF::fastFree((unint64_t)v277, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v78 = v272;
      v277 = v273;
      a9 = v274;
      v273 = 0;
      v274 = 0.0;
      v278 = a9;
      v272 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v78, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
          WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
        }
        else
        {
          --*(_DWORD *)v78;
        }
      }
      v79 = (unsigned int *)v270;
      v270 = 0;
      if (v79)
      {
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
        {
          atomic_store(1u, v79);
          JSC::AccessCase::operator delete((unint64_t)v79, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
      v82 = (v275 - 6) < 0xFFFFFFFD || byte_1ECF4C6B7 == 0;
      if (v82)
      {
        LODWORD(v21) = 1;
        goto LABEL_127;
      }
      JSC::ICEvent::ICEvent((uint64_t)&v271, (uint64_t **)v267, (const WTF::StringImpl *)0x20, 16 * *(unsigned int *)(v12 + 76), (WTF::StringImpl *)v15, v13 == *(const WTF::StringImpl **)v11, a7, a8);
      JSC::ICEvent::log((JSC::ICEvent *)&v271, v232, v233, v234, v235, v236, v237, v238);
      v239 = v273;
      v273 = 0;
      if (v239)
      {
        if (*(_DWORD *)v239 == 2)
        {
          WTF::StringImpl::~StringImpl(v239, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
        }
        else
        {
          *(_DWORD *)v239 -= 2;
        }
      }
      LODWORD(v21) = 1;
      goto LABEL_284;
    }
    v71 = 0;
LABEL_223:
    v22 = 0;
    goto LABEL_108;
  }
  v28 = *(unsigned __int8 *)(v11 + 21);
  if ((v28 - 1) > 1)
    goto LABEL_183;
  if (v28 != 1)
  {
    if (*(unsigned __int8 *)(v12 + 9) >= 0x17u)
    {
      v29 = *(_DWORD *)(v12 + 16);
      if ((v29 & 0x80000) == 0)
      {
        if ((v29 & 3) != 0)
        {
          LODWORD(v21) = 0;
          v22 = 1;
          goto LABEL_127;
        }
        v30 = (unsigned __int8 *)(v12 + 15);
        if (__ldaxr((unsigned __int8 *)(v12 + 15)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v30))
        {
LABEL_32:
          if ((*(_BYTE *)(v12 + 19) & 8) == 0)
          {
            v32 = *(_QWORD *)(v12 + 80);
            if ((v32 & 1) != 0)
            {
              v21 = v32 & 0xFFFFFFFFFFFFFFFELL;
              if ((v32 & 0xFFFFFFFFFFFFFFFELL) == 0)
              {
                v41 = v10;
                goto LABEL_72;
              }
              v43 = (*(_DWORD *)(v21 + 16) >> 13) & 0x1F;
              if ((_DWORD)v43 == 16)
              {
                v44 = *(_QWORD *)(v21 + 48);
                v45 = v44 | 0x1000000000000000;
                v82 = v44 == 2;
                v46 = 0x1000000000000000;
                if (!v82)
                  v46 = v45;
              }
              else
              {
                v46 = (v43 << 56) | (16 * *(unsigned int *)(v21 + 72));
              }
              v41 = v10;
              if ((v46 | ((unint64_t)*(unsigned __int8 *)(v21 + 20) << 48)) == (v15 | 0x100000000000000))
              {
LABEL_39:
                v42 = *(unsigned __int16 *)(v21 + 22);
                if (v42 != 65534)
                {
                  if (v42 == 0xFFFF)
                    v42 = *(_DWORD *)(*(_QWORD *)(v21 + 64) + 88);
LABEL_73:
                  v59 = __ldxr(v30);
                  if (v59 == 1)
                  {
                    if (!__stlxr(0, v30))
                      goto LABEL_78;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v12 + 15), 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_78:
                  if (!v21)
                  {
LABEL_318:
                    v22 = 0;
LABEL_283:
                    v10 = v41;
LABEL_284:
                    v9 = v266;
                    goto LABEL_127;
                  }
                  if ((*(_DWORD *)(v21 + 16) & 3) != 2)
                  {
                    v60 = *(_WORD *)(v21 + 12);
                    if ((v60 & 8) == 0
                      && ((v60 & 0x10) == 0 || (v60 & 0x20) != 0)
                      && v21 == 16 * (*(_DWORD *)v13 & 0xFFFFFFFE))
                    {
                      v270 = 0;
                      v271 = 0;
                      if (v266 < 4)
                      {
                        if (v279)
                        {
                          if ((v279 & 1) != 0)
                            v61 = v279 & 0xFFFFFFFFFFFFFFFELL;
                          else
                            v61 = *(_QWORD *)(v279 + 8);
                        }
                        else
                        {
                          v61 = 0;
                        }
                        v62 = JSC::prepareChainForCaching(a1, v13, v61, 0, a5, a6, a7, a8);
                        if ((v62 & 0xFFFFFF) >= 0x10000)
                        {
                          if (!(_BYTE)v62)
                          {
                            v271 = 0;
                            JSC::generateConditionsForPropertySetterMiss((uint64_t)v267, (unsigned __int8 *)a2, a1, v21, v15, a6, a7, a8, (uint64_t *)&v269);
                            v63 = v269;
                            v64 = (unsigned int *)v270;
                            v269 = 0;
                            v270 = v63;
                            if (!v64)
                            {
LABEL_97:
                              if (v63 && !*((_DWORD *)v63 + 1))
                              {
                                v70 = 0;
                                v71 = 0;
                                v270 = 0;
                                do
                                {
LABEL_102:
                                  v72 = __ldaxr((unsigned int *)v63);
                                  v73 = v72 - 1;
                                }
                                while (__stlxr(v73, (unsigned int *)v63));
                                if (!v73)
                                {
                                  atomic_store(1u, (unsigned int *)v63);
                                  WTF::fastFree((unint64_t)v63, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                                }
LABEL_105:
                                if (v271)
                                  WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v271, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                                v22 = 0;
                                if ((v70 & 1) != 0)
                                  goto LABEL_108;
                                goto LABEL_278;
                              }
LABEL_101:
                              JSC::AccessCase::createTransition((uint64_t)v267, a2, v279, v42, v12, v21, (unsigned int **)&v270, (uint64_t *)&v271, (uint64_t *)&v269);
                              v71 = (unint64_t)v269;
                              v63 = v270;
                              v70 = 1;
                              v270 = 0;
                              if (!v63)
                                goto LABEL_105;
                              goto LABEL_102;
                            }
                            do
                            {
                              v65 = __ldaxr(v64);
                              v66 = v65 - 1;
                            }
                            while (__stlxr(v66, v64));
                            if (!v66)
                            {
                              atomic_store(1u, v64);
                              WTF::fastFree((unint64_t)v64, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                            }
                            v67 = (unsigned int *)v269;
                            v269 = 0;
                            if (!v67)
                              goto LABEL_96;
                            do
                            {
                              v68 = __ldaxr(v67);
                              v69 = v68 - 1;
                            }
                            while (__stlxr(v69, v67));
                            if (v69)
                            {
LABEL_96:
                              v63 = v270;
                              goto LABEL_97;
                            }
LABEL_331:
                            atomic_store(1u, v67);
                            WTF::fastFree((unint64_t)v67, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                            goto LABEL_96;
                          }
                          JSC::PolyProtoAccessChain::tryCreate(a1, v13, v279, 0, a5, a6, a7, a8, (uint64_t *)&v269);
                          v271 = v269;
                          if (v269)
                            goto LABEL_101;
                        }
                        v70 = 0;
                        v71 = 0;
                        goto LABEL_105;
                      }
                      if (v266 - 8 >= 2)
                        goto LABEL_101;
                      JSC::generateConditionsForPropertyMiss((uint64_t)v267, (unsigned __int8 *)a2, a1, v21, v15, a6, a7, a8, (uint64_t *)&v269);
                      v63 = v269;
                      v176 = (unsigned int *)v270;
                      v269 = 0;
                      v270 = v63;
                      if (!v176)
                        goto LABEL_97;
                      do
                      {
                        v177 = __ldaxr(v176);
                        v178 = v177 - 1;
                      }
                      while (__stlxr(v178, v176));
                      if (!v178)
                      {
                        atomic_store(1u, v176);
                        WTF::fastFree((unint64_t)v176, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                      }
                      v67 = (unsigned int *)v269;
                      v269 = 0;
                      if (!v67)
                        goto LABEL_96;
                      do
                      {
                        v179 = __ldaxr(v67);
                        v180 = v179 - 1;
                      }
                      while (__stlxr(v180, v67));
                      if (v180)
                        goto LABEL_96;
                      goto LABEL_331;
                    }
                  }
LABEL_317:
                  LODWORD(v21) = 0;
                  goto LABEL_318;
                }
LABEL_72:
                v42 = -1;
                goto LABEL_73;
              }
LABEL_168:
              v21 = 0;
              goto LABEL_72;
            }
            v33 = *(_QWORD *)(v32 + 8);
            if (v33)
            {
              v34 = *(_DWORD *)(v33 - 8);
              v35 = ((v15 | 0x100000000000000) + ~(v15 << 32)) ^ (((v15 | 0x100000000000000) + ~(v15 << 32)) >> 22);
              v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
              v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
              v38 = v34 & ((v37 >> 31) ^ v37);
              v39 = *(_QWORD *)(v33 + 16 * v38);
              if (v39 == (v15 | 0x100000000000000))
              {
LABEL_36:
                v40 = *(_QWORD *)(v33 + 16 * v38 + 8);
                if (v40 && (*(_BYTE *)(v40 + 8) & 3) == 0)
                {
                  v41 = v10;
                  v21 = *(_QWORD *)v40;
                  if (!*(_QWORD *)v40)
                    goto LABEL_72;
                  goto LABEL_39;
                }
              }
              else
              {
                v50 = 1;
                while (v39)
                {
                  v38 = ((_DWORD)v38 + v50) & v34;
                  v39 = *(_QWORD *)(v33 + 16 * v38);
                  ++v50;
                  if (v39 == (v15 | 0x100000000000000))
                    goto LABEL_36;
                }
              }
            }
          }
          v41 = v10;
          goto LABEL_168;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 15);
        goto LABEL_32;
      }
    }
LABEL_378:
    LODWORD(v21) = 0;
    v22 = 0;
    goto LABEL_127;
  }
  if (v12 != 16 * (*(_DWORD *)v13 & 0xFFFFFFFE))
  {
    __break(0xC471u);
    JUMPOUT(0x198207D1CLL);
  }
  JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)v12, v267, (JSC::Structure *)*(unsigned int *)(v11 + 16), "Did cache property replacement", a5, a6, a7, a8);
  if (*(_BYTE *)(v10 + 123)
    || !JSC::InlineAccess::canGenerateSelfPropertyReplace(v10, *(_DWORD *)(v11 + 16)))
  {
    goto LABEL_323;
  }
  if ((*(_DWORD *)(v12 + 16) & 3) != 2 && (v47 = *(_WORD *)(v12 + 12), (v47 & 0x18) == 0x10))
  {
    if (((v27 | ((v47 & 0x20) >> 5)) & 1) != 0)
      goto LABEL_323;
  }
  else if ((v27 & 1) != 0)
  {
LABEL_323:
    v41 = v10;
    JSC::AccessCase::createReplace((uint64_t)v267, a2, v279, *(_DWORD *)(v11 + 16), v12, v27, (uint64_t *)&v271);
    v22 = 0;
    v71 = (unint64_t)v271;
    goto LABEL_108;
  }
  if (!JSC::InlineAccess::generateSelfPropertyReplace(v10, v12, (uint64_t *)*(unsigned int *)(v11 + 16)))
    goto LABEL_323;
  if (byte_1ECF4C6B7)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v271, (uint64_t **)v267, (const WTF::StringImpl *)0x21, 16 * *(unsigned int *)(v12 + 76), (WTF::StringImpl *)v15, v13 == *(const WTF::StringImpl **)v11, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v271, v198, v199, v200, v201, v202, v203, v204);
    v206 = v273;
    v273 = 0;
    if (v206)
    {
      if (*(_DWORD *)v206 == 2)
      {
        WTF::StringImpl::~StringImpl(v206, (WTF::AtomStringImpl *)a2, v205, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
      }
      else
      {
        *(_DWORD *)v206 -= 2;
      }
    }
  }
  if (v9 >= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x198208174);
  }
  a3 = (const WTF::StringImpl *)off_1E3583328[v9];
  if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
    *(_QWORD *)(v10 + 48) = a3;
  else
    JSC::ftlThunkAwareRepatchCall(a2, *(_QWORD *)(v10 + 48), (int *)a3, (uint64_t)a4, a5, a6, a7, a8);
  v48 = *(_DWORD *)(v11 + 16);
  *(_BYTE *)(v10 + 123) = 2;
  v49 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(v10 + 12) = v12 >> 4;
  if (*(_DWORD *)(v49 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v49 + 192, a2);
  LODWORD(v21) = 0;
  *(_DWORD *)(v10 + 8) = v48;
  v22 = 1;
LABEL_127:
  if (!v283)
    goto LABEL_133;
  v282 = 0;
  v83 = v281;
  v84 = __ldxr(v281);
  if (v84 != 1)
  {
    __clrex();
    goto LABEL_132;
  }
  if (__stlxr(0, v281))
LABEL_132:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v83, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_133:
  v85 = v284;
  v86 = *((_DWORD *)v284 + 229) - 1;
  *((_DWORD *)v284 + 229) = v86;
  if (*((unsigned __int8 *)v85 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v87 = v86 == 0;
  else
    v87 = 0;
  if (v87)
  {
    *((_BYTE *)v85 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v85 + 192, 0);
  }
  if (v283 && v282)
  {
    v88 = v281;
    v89 = __ldxr(v281);
    if (v89 == 1)
    {
      if (!__stlxr(0, v281))
        goto LABEL_145;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v88, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
LABEL_145:
  if (!(_DWORD)v21)
    goto LABEL_154;
  v90 = v275;
  if ((_DWORD)v275 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints(&v275, v267, a9, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v283 = 0;
    v281 = (unsigned __int8 *)(a2 + 16);
    v282 = 1;
    if (__ldaxr(v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_345;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
LABEL_345:
    v283 = 1;
    v284 = v267;
    ++*((_DWORD *)v267 + 229);
    JSC::StructureStubInfo::reset(v10);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)&v280, v182, v183, v184, v185, v186, v187, v188);
    v90 = v275;
    v9 = v266;
  }
  if (v90 == 5)
    v22 = 3;
  else
    v22 = v90 != 1 && v90 != 4;
LABEL_154:
  if (*(_DWORD *)v15 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v15 -= 2;
  }
  v92 = v277;
  if (v277)
  {
    v277 = 0;
    LODWORD(v278) = 0;
    WTF::fastFree((unint64_t)v92, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v93 = v276;
  v276 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v93, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      --*(_DWORD *)v93;
    }
  }
  if (!v22)
  {
    if (v9 >= 0xC)
    {
      __break(0xC471u);
      JUMPOUT(0x1982081A8);
    }
    v152 = (int *)off_1E3583388[v9];
    if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
    {
      *(_QWORD *)(v10 + 48) = v152;
      return;
    }
    v174 = *(_QWORD *)(v10 + 48);
    goto LABEL_308;
  }
  if (v22 == 3)
  {
    switch(v9)
    {
      case 0u:
        if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
        {
          *(_QWORD *)(v10 + 48) = operationPutByIdStrictMegamorphic;
          return;
        }
        v174 = *(_QWORD *)(v10 + 48);
        v152 = (int *)operationPutByIdStrictMegamorphic;
        break;
      case 1u:
        if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
        {
          *(_QWORD *)(v10 + 48) = operationPutByIdSloppyMegamorphic;
          return;
        }
        v174 = *(_QWORD *)(v10 + 48);
        v152 = (int *)operationPutByIdSloppyMegamorphic;
        break;
      case 2u:
        if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
        {
          *(_QWORD *)(v10 + 48) = operationPutByValStrictMegamorphic;
          return;
        }
        v174 = *(_QWORD *)(v10 + 48);
        v152 = (int *)operationPutByValStrictMegamorphic;
        break;
      case 3u:
        if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
        {
          *(_QWORD *)(v10 + 48) = operationPutByValSloppyMegamorphic;
          return;
        }
        v174 = *(_QWORD *)(v10 + 48);
        v152 = (int *)operationPutByValSloppyMegamorphic;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198207FD8);
    }
LABEL_308:
    JSC::ftlThunkAwareRepatchCall(a2, v174, v152, (uint64_t)a4, a5, a6, a7, a8);
  }
}

void JSC::repatchArrayPutByVal(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  uint64_t v14;
  unsigned __int8 *v15;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint8x8_t v30;
  JSC::InlineCacheHandler *v31;
  JSC::InlineCacheHandler *v32;
  JSC::InlineCacheHandler *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  int v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  WTF *v49;
  JSC::InlineCacheHandler *v50;
  BOOL v51;
  char v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  void *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  JSC::InlineCacheHandler *v106;
  WTF::StringImpl *v107;
  double v108;
  WTF *v109;
  unsigned int *v110;
  uint64_t v111;
  JSC::InlineCacheHandler *v112;
  WTF *v113;
  double v114;
  char v115[8];
  unsigned __int8 *v116;
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;

  v9 = a6;
  v120 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_78;
  if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
    return;
  v14 = a1[7];
  LODWORD(v111) = 0;
  v113 = 0;
  v114 = 0.0;
  v112 = 0;
  v15 = a2 + 16;
  v118 = 0;
  v116 = a2 + 16;
  v117 = 1;
  if (__ldaxr(a2 + 16))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
    goto LABEL_6;
  }
  if (__stxr(1u, v15))
    goto LABEL_5;
LABEL_6:
  v118 = 1;
  v119 = v14;
  ++*(_DWORD *)(v14 + 916);
  v17 = *(unsigned __int8 *)(a3 + 5);
  if (v17 == 61)
  {
    if ((v9 & 0xFFFFFFFE) != 2)
    {
      v39 = 0;
      v38 = 1;
      goto LABEL_31;
    }
    LOBYTE(v20) = 61;
  }
  else
  {
    v18 = v17 - 39;
    if (v18 <= 0xA)
    {
      v39 = 0;
      v38 = 0;
      switch(v18)
      {
        case 0u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 76;
          v52 = 67;
          goto LABEL_71;
        case 1u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 77;
          v52 = 68;
          goto LABEL_71;
        case 2u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 78;
          v52 = 69;
          goto LABEL_71;
        case 3u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 79;
          v52 = 70;
          goto LABEL_71;
        case 4u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 80;
          v52 = 71;
          goto LABEL_71;
        case 5u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 81;
          v52 = 72;
          goto LABEL_71;
        case 6u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 82;
          v52 = 73;
          goto LABEL_71;
        case 7u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 83;
          v52 = 74;
          goto LABEL_71;
        case 8u:
          v51 = (*(_BYTE *)(a3 + 40) & 6) == 0;
          LOBYTE(v20) = 84;
          v52 = 75;
LABEL_71:
          if (v51)
            LOBYTE(v20) = v52;
          goto LABEL_10;
        case 9u:
        case 0xAu:
          goto LABEL_31;
        default:
          __break(0xC471u);
          JUMPOUT(0x1982086D4);
      }
    }
    v19 = (*(_BYTE *)(a3 + 4) & 0xE) - 4;
    if (v19 > 6)
    {
      v39 = 0;
      v38 = 0;
      goto LABEL_31;
    }
    v20 = 0x423F413F403F3FuLL >> (8 * v19);
  }
LABEL_10:
  v109 = 0;
  v110 = 0;
  JSC::AccessCase::create(v14, (unint64_t)a2, v20, 0, -1, 0, &v110, (uint64_t *)&v109, (uint64_t *)&v105);
  v28 = v105;
  if (v109)
    WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v109, v21, v22, v23, v24, v25, v26, v27);
  if (v9 >= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x198208838);
  }
  v29 = qword_1991543F0[v9];
  v104 = v28;
  JSC::StructureStubInfo::addAccessCase(a5, v115, a1, (uint64_t)a2, v29, 0, &v104, v27, (uint64_t)&v105);
  LODWORD(v111) = (_DWORD)v105;
  v31 = v106;
  v106 = 0;
  v32 = v112;
  v112 = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v32, a2, a3, a4, a5, a6, a7, a8, v30);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  if (v113)
    WTF::fastFree((unint64_t)v113, a2, a3, a4, a5, a6, a7, a8);
  v33 = v106;
  v113 = v107;
  a9 = v108;
  v107 = 0;
  v108 = 0.0;
  v114 = a9;
  v106 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v33, a2, a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  v34 = (unsigned int *)v104;
  v104 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      JSC::AccessCase::operator delete((unint64_t)v34, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if ((v111 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v105, (uint64_t **)v14, (const WTF::StringImpl *)0x20, 16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C), 0, a6, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v105, v88, v89, v90, v91, v92, v93, v94);
    v95 = v107;
    v107 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
  }
  v38 = 0;
  v39 = 1;
LABEL_31:
  if (!v118)
    goto LABEL_37;
  v117 = 0;
  v40 = v116;
  v41 = __ldxr(v116);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, v116))
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v40, 0, a3, a4, a5, a6, a7, a8);
LABEL_37:
  v42 = v119;
  v43 = *(_DWORD *)(v119 + 916) - 1;
  *(_DWORD *)(v119 + 916) = v43;
  if (*(unsigned __int8 *)(v42 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v44 = v43 == 0;
  else
    v44 = 0;
  if (v44)
  {
    *(_BYTE *)(v42 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v42 + 192, 0);
  }
  if (v118 && v117)
  {
    v45 = v116;
    v46 = __ldxr(v116);
    if (v46 == 1)
    {
      if (!__stlxr(0, v116))
        goto LABEL_52;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v45, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_52:
  if (!v39)
    goto LABEL_61;
  v47 = v111;
  if ((_DWORD)v111 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints(&v111, (JSC::VM *)v14, a9, a3, a4, a5, a6, a7, a8);
    v118 = 0;
    v116 = a2 + 16;
    v117 = 1;
    if (__ldaxr(v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_99;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
LABEL_99:
    v118 = 1;
    v119 = v14;
    ++*(_DWORD *)(v14 + 916);
    JSC::StructureStubInfo::reset(a5);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v115, v81, v82, v83, v84, v85, v86, v87);
    v47 = v111;
  }
  if (v47 == 5)
    v38 = 3;
  else
    v38 = v47 != 1 && v47 != 4;
LABEL_61:
  v49 = v113;
  if (v113)
  {
    v113 = 0;
    LODWORD(v114) = 0;
    WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
  }
  v50 = v112;
  v112 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v50, a2, a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      --*(_DWORD *)v50;
    }
  }
  if (v38)
  {
    if (v38 == 3)
    {
      switch(v9)
      {
        case 0u:
          if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
          {
            v79 = operationPutByIdStrictMegamorphic;
            goto LABEL_113;
          }
          v78 = *(_QWORD *)(a5 + 48);
          v77 = (int *)operationPutByIdStrictMegamorphic;
          goto LABEL_88;
        case 1u:
          if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
          {
            v79 = operationPutByIdSloppyMegamorphic;
            goto LABEL_113;
          }
          v78 = *(_QWORD *)(a5 + 48);
          v77 = (int *)operationPutByIdSloppyMegamorphic;
          goto LABEL_88;
        case 2u:
          if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
          {
            v79 = operationPutByValStrictMegamorphic;
            goto LABEL_113;
          }
          v78 = *(_QWORD *)(a5 + 48);
          v77 = (int *)operationPutByValStrictMegamorphic;
          goto LABEL_88;
        case 3u:
          if ((*(_WORD *)(a5 + 129) & 0x200) == 0)
          {
            v78 = *(_QWORD *)(a5 + 48);
            v77 = (int *)operationPutByValSloppyMegamorphic;
            goto LABEL_88;
          }
          v79 = operationPutByValSloppyMegamorphic;
LABEL_113:
          *(_QWORD *)(a5 + 48) = v79;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1982088B8);
      }
    }
    return;
  }
LABEL_78:
  if (v9 >= 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x198208898);
  }
  v77 = (int *)off_1E3583388[v9];
  if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
  {
    *(_QWORD *)(a5 + 48) = v77;
  }
  else
  {
    v78 = *(_QWORD *)(a5 + 48);
LABEL_88:
    JSC::ftlThunkAwareRepatchCall((uint64_t)a2, v78, v77, a4, a5, a6, a7, a8);
  }
}

void JSC::repatchDeleteBy(uint64_t *a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, unsigned __int8 a10)
{
  uint64_t v10;
  JSC::VM *v15;
  unsigned __int8 *v16;
  int v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  unsigned int **v32;
  int v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  uint8x8_t v37;
  JSC::InlineCacheHandler *v38;
  JSC::InlineCacheHandler *v39;
  JSC::InlineCacheHandler *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  JSC::VM *v69;
  int v70;
  BOOL v71;
  unsigned __int8 *v72;
  int v73;
  int v74;
  WTF *v76;
  JSC::InlineCacheHandler *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  int *v90;
  uint64_t **v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::AtomStringImpl *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  uint64_t v175;
  JSC::JSCell *v176;
  _WORD *v177;
  JSC::InlineCacheHandler *v178;
  WTF::StringImpl *v179;
  double v180;
  WTF::StringImpl *v181;
  void *v182;
  WTF::StringImpl *v183;
  JSC::InlineCacheHandler *v184;
  WTF *v185;
  double v186;
  char v187[8];
  unsigned __int8 *v188;
  WTF::StringImpl *v189;
  char v190;
  JSC::VM *v191;
  uint64_t v192;

  v172 = a8;
  v10 = a6;
  v192 = *MEMORY[0x1E0C80C00];
  v15 = (JSC::VM *)a1[7];
  LODWORD(v183) = 0;
  v185 = 0;
  v186 = 0.0;
  v184 = 0;
  v16 = a2 + 16;
  v190 = 0;
  v188 = a2 + 16;
  LOBYTE(v189) = 1;
  if (__ldaxr(a2 + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
LABEL_4:
  v175 = v10;
  v176 = (JSC::JSCell *)a2;
  v18 = 0;
  v190 = 1;
  v191 = v15;
  ++*((_DWORD *)v15 + 229);
  if (byte_1ECF4C25D)
    goto LABEL_84;
  LODWORD(v19) = 0;
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_85;
  if (*(unsigned __int8 *)(a4 + 5) < 0x17u)
    goto LABEL_75;
  v20 = *(_DWORD *)(a5 + 16);
  if ((v20 & 3) == 2)
    goto LABEL_75;
  v21 = *(_WORD *)(a5 + 12);
  if ((v21 & 8) != 0 || (v21 & 0x10) != 0 && (v21 & 0x20) == 0)
    goto LABEL_75;
  v18 = 0;
  v22 = *(unsigned __int8 *)(a5 + 9);
  if (v22 == 32)
    goto LABEL_84;
  LODWORD(v19) = 0;
  if (v22 == 61)
    goto LABEL_85;
  v18 = 0;
  if (*((_BYTE *)a3 + 4) != 1)
    goto LABEL_84;
  v23 = *((unsigned __int8 *)a3 + 5);
  LODWORD(v19) = 0;
  if (!*((_BYTE *)a3 + 5))
    goto LABEL_85;
  v24 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x10);
  if ((v24 & 3) != 0)
  {
    if ((v24 & 0x800000) != 0)
      goto LABEL_75;
    JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a4 & 0xFFFFFFFE), v15, (JSC::JSObject *)a4, a4, a5, a6, a7, a8);
    goto LABEL_73;
  }
  if ((v20 & 3) != 0)
    goto LABEL_73;
  if (v23 != 1)
  {
    if (v23 != 3)
    {
      v31 = (_WORD *)WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)v31 = 1;
      v31[2] = 6;
      *((_QWORD *)v31 + 2) = 0;
      v32 = (unsigned int **)(v31 + 8);
      *((_QWORD *)v31 + 3) = 0;
      *((_QWORD *)v31 + 4) = v10;
      *((_DWORD *)v31 + 2) = -1;
      *((_DWORD *)v31 + 3) = a5 >> 4;
      if (v176)
      {
        if (*((_DWORD *)v15 + 190) < *((unsigned __int8 *)v176 + 7))
          goto LABEL_157;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v15 + 192, (unint64_t)v176);
        v168 = *v32;
        *v32 = 0;
        if (!v168)
          goto LABEL_157;
        do
        {
          v169 = __ldaxr(v168);
          v170 = v169 - 1;
        }
        while (__stlxr(v170, v168));
        if (!v170)
        {
          atomic_store(1u, v168);
          WTF::fastFree((unint64_t)v168, v162, v163, v164, v165, v166, v167, v30);
        }
        if (*v32)
        {
          v171 = (*v32)[1];
          v19 = (uint64_t)v176;
          if (!v171)
          {
            __break(0xC471u);
            JUMPOUT(0x198209208);
          }
        }
        else
        {
LABEL_157:
          v19 = (uint64_t)v176;
        }
      }
      else
      {
        v19 = 0;
      }
      goto LABEL_48;
    }
    v18 = 0;
    if (a10)
    {
      LODWORD(v19) = 0;
      if ((v20 & 0x80000) != 0)
        goto LABEL_85;
      v181 = 0;
      v182 = 0;
      JSC::AccessCase::create((uint64_t)v15, (unint64_t)v176, 5, v10, -1, a5, (unsigned int **)&v182, (uint64_t *)&v181, (uint64_t *)&v177);
      v31 = v177;
      if (v181)
        WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v181, v61, v62, v63, v64, v65, v66, v30);
      v19 = (uint64_t)v176;
      goto LABEL_48;
    }
    goto LABEL_84;
  }
  if (v10)
  {
    if ((v10 & 1) != 0)
      v10 &= ~1uLL;
    else
      v10 = *(_QWORD *)(v10 + 8);
  }
  LODWORD(v177) = 0;
  if (JSC::Structure::getConcurrently(a5, (_DWORD *)v10, &v177, a4, a5, a6, a7, a8) == -1)
  {
LABEL_73:
    v18 = 0;
    LODWORD(v19) = 1;
    goto LABEL_85;
  }
  v25 = (unsigned __int8 *)(a5 + 15);
  if (__ldaxr((unsigned __int8 *)(a5 + 15)))
  {
    __clrex();
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a5 + 15);
    goto LABEL_24;
  }
  if (__stxr(1u, v25))
    goto LABEL_23;
LABEL_24:
  if ((*(_BYTE *)(a5 + 19) & 8) != 0)
  {
    v28 = 0;
LABEL_35:
    v29 = -1;
    goto LABEL_36;
  }
  v27 = JSC::StructureTransitionTable::get((uint64_t *)(a5 + 80), v10, v177, 2);
  v28 = v27;
  if (!v27)
    goto LABEL_35;
  v29 = *(unsigned __int16 *)(v27 + 22);
  if (v29 == 65534)
    goto LABEL_35;
  if (v29 == 0xFFFF)
    v29 = *(_DWORD *)(*(_QWORD *)(v27 + 64) + 88);
LABEL_36:
  v33 = __ldxr(v25);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v25))
LABEL_40:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a5 + 15), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v28)
    goto LABEL_73;
  v34 = *(_DWORD *)(v28 + 16) & 3;
  if (v34 == 2)
    goto LABEL_75;
  v35 = *(_WORD *)(v28 + 12);
  if ((v35 & 8) != 0)
    goto LABEL_75;
  if ((v35 & 0x10) != 0)
  {
    v18 = 0;
    if (!v34)
    {
      LODWORD(v19) = 0;
      if ((v35 & 0x20) == 0)
        goto LABEL_85;
      goto LABEL_46;
    }
LABEL_84:
    LODWORD(v19) = 0;
    goto LABEL_85;
  }
  if (v34)
  {
LABEL_75:
    v18 = 0;
    LODWORD(v19) = 0;
    goto LABEL_85;
  }
LABEL_46:
  if ((*(_BYTE *)(a5 + 18) & 8) != 0)
    goto LABEL_75;
  v19 = (uint64_t)v176;
  v36 = v28;
  v10 = v175;
  JSC::AccessCase::createDelete((uint64_t)v15, (unint64_t)v176, v175, v29, a5, v36, (uint64_t *)&v177);
  v31 = v177;
LABEL_48:
  v182 = v31;
  JSC::StructureStubInfo::addAccessCase(a7, v187, a1, v19, a10, v10, &v182, v30, (uint64_t)&v177);
  LODWORD(v183) = (_DWORD)v177;
  v38 = v178;
  v178 = 0;
  v39 = v184;
  v184 = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v39, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v37);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      --*(_DWORD *)v39;
    }
  }
  if (v185)
    WTF::fastFree((unint64_t)v185, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v40 = v178;
  v185 = v179;
  a9 = v180;
  v179 = 0;
  v180 = 0.0;
  v186 = a9;
  v178 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v40, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      --*(_DWORD *)v40;
    }
  }
  v41 = (unsigned int *)v182;
  v182 = 0;
  if (v41)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      JSC::AccessCase::operator delete((unint64_t)v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  if (((_DWORD)v183 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
  {
    v108 = 16 * *(unsigned int *)(a5 + 76);
    if (v175)
    {
      if ((v175 & 1) != 0)
        v109 = (WTF::StringImpl *)(v175 & 0xFFFFFFFFFFFFFFFELL);
      else
        v109 = *(WTF::StringImpl **)(v175 + 8);
    }
    else
    {
      v109 = 0;
    }
    JSC::Identifier::fromUid(v109, (uint64_t)v15, a3, a4, a5, a6, a7, a8, &v181);
    JSC::ICEvent::ICEvent((uint64_t)&v177, (uint64_t **)v15, (const WTF::StringImpl *)0x23, v108, v181, v110, v111, v112);
    JSC::ICEvent::log((JSC::ICEvent *)&v177, v113, v114, v115, v116, v117, v118, v119);
    v120 = v179;
    v179 = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
      {
        WTF::StringImpl::~StringImpl(v120, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
      }
      else
      {
        *(_DWORD *)v120 -= 2;
      }
    }
    v121 = v181;
    v181 = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 == 2)
      {
        WTF::StringImpl::~StringImpl(v121, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
      }
      else
      {
        *(_DWORD *)v121 -= 2;
      }
    }
  }
  v18 = 1;
LABEL_85:
  if (!v190)
    goto LABEL_91;
  LOBYTE(v189) = 0;
  v67 = v188;
  v68 = __ldxr(v188);
  if (v68 != 1)
  {
    __clrex();
    goto LABEL_90;
  }
  if (__stlxr(0, v188))
LABEL_90:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v67, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_91:
  v69 = v191;
  v70 = *((_DWORD *)v191 + 229) - 1;
  *((_DWORD *)v191 + 229) = v70;
  if (*((unsigned __int8 *)v69 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v71 = v70 == 0;
  else
    v71 = 0;
  if (v71)
  {
    *((_BYTE *)v69 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v69 + 192, 0);
  }
  if (v190 && (_BYTE)v189)
  {
    v72 = v188;
    v73 = __ldxr(v188);
    if (v73 == 1)
    {
      if (!__stlxr(0, v188))
        goto LABEL_103;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v72, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_103:
  if (!v18)
    goto LABEL_111;
  v74 = (int)v183;
  if ((_DWORD)v183 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints((uint64_t *)&v183, v15, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
    v190 = 0;
    v188 = v16;
    LOBYTE(v189) = 1;
    if (__ldaxr(v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
      goto LABEL_163;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
LABEL_163:
    v190 = 1;
    v191 = v15;
    ++*((_DWORD *)v15 + 229);
    JSC::StructureStubInfo::reset(a7);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v187, v139, v140, v141, v142, v143, v144, v145);
    v74 = (int)v183;
  }
  LODWORD(v19) = v74 != 1 && v74 != 4;
LABEL_111:
  v76 = v185;
  if (v185)
  {
    v185 = 0;
    LODWORD(v186) = 0;
    WTF::fastFree((unint64_t)v76, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v77 = v184;
  v184 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v77, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      --*(_DWORD *)v77;
    }
  }
  if (!(_DWORD)v19)
  {
    if (byte_1ECF4C6B7)
    {
      v91 = (uint64_t **)a1[7];
      if ((a4 & 0xFFFE000000000002) != 0)
        v92 = 0;
      else
        v92 = 16 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
      if (v175)
      {
        if ((v175 & 1) != 0)
          v93 = (WTF::StringImpl *)(v175 & 0xFFFFFFFFFFFFFFFELL);
        else
          v93 = *(WTF::StringImpl **)(v175 + 8);
      }
      else
      {
        v93 = 0;
      }
      JSC::Identifier::fromUid(v93, a1[7], a3, a4, a5, a6, a7, a8, &v183);
      JSC::ICEvent::ICEvent((uint64_t)v187, v91, (const WTF::StringImpl *)0x24, v92, v183, v94, v95, v96);
      JSC::ICEvent::log((JSC::ICEvent *)v187, v97, v98, v99, v100, v101, v102, v103);
      v106 = v189;
      v189 = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
        {
          WTF::StringImpl::~StringImpl(v106, v104, v105, a4, a5, a6, a7, a8);
          WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
        }
        else
        {
          *(_DWORD *)v106 -= 2;
        }
      }
      v107 = v183;
      v183 = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, v104, v105, a4, a5, a6, a7, a8);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
    }
    switch(v172)
    {
      case 0:
        v86 = a7;
        v87 = (uint64_t)v176;
        if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
        {
          v88 = operationDeleteByIdStrictGaveUp;
          goto LABEL_123;
        }
        v89 = *(_QWORD *)(a7 + 48);
        v90 = (int *)operationDeleteByIdStrictGaveUp;
        goto LABEL_129;
      case 1:
        v86 = a7;
        if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
        {
          v88 = operationDeleteByIdSloppyGaveUp;
          goto LABEL_123;
        }
        v89 = *(_QWORD *)(a7 + 48);
        v90 = (int *)operationDeleteByIdSloppyGaveUp;
        v87 = (uint64_t)v176;
        goto LABEL_129;
      case 2:
        v86 = a7;
        v87 = (uint64_t)v176;
        if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
        {
          v88 = operationDeleteByValStrictGaveUp;
          goto LABEL_123;
        }
        v89 = *(_QWORD *)(a7 + 48);
        v90 = (int *)operationDeleteByValStrictGaveUp;
        goto LABEL_129;
      case 3:
        v86 = a7;
        v87 = (uint64_t)v176;
        if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
        {
          v88 = operationDeleteByValSloppyGaveUp;
LABEL_123:
          *(_QWORD *)(v86 + 48) = v88;
        }
        else
        {
          v89 = *(_QWORD *)(a7 + 48);
          v90 = (int *)operationDeleteByValSloppyGaveUp;
LABEL_129:
          JSC::ftlThunkAwareRepatchCall(v87, v89, v90, a4, a5, a6, a7, a8);
        }
        break;
      default:
        return;
    }
  }
}

void JSC::Identifier::fromUid(WTF::StringImpl *this@<X1>, uint64_t a2@<X0>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  WTF::StringImpl *v9;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  char v16;
  int *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  int *v29;
  unsigned int *v30;
  char v31;

  v9 = this;
  v11 = *((_DWORD *)this + 4);
  if ((v11 & 0x20) != 0)
  {
    v12 = *(_DWORD *)this + 2;
    goto LABEL_5;
  }
  if ((v11 & 0x10) != 0)
  {
    v12 = *(_DWORD *)this + 2;
    *(_DWORD *)this = v12;
    goto LABEL_4;
  }
  if (!*((_DWORD *)this + 1))
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v29 = &WTF::StringImpl::s_emptyAtomString;
    goto LABEL_27;
  }
  v13 = *(uint64_t **)(a2 + 41912);
  v14 = *(_DWORD *)this;
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
  }
  else
  {
    v16 = 1;
    if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
      goto LABEL_11;
  }
  v16 = 0;
LABEL_11:
  if ((v14 & 1) != 0)
  {
    if ((v16 & 1) == 0)
    {
      v28 = v13;
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
      v13 = v28;
    }
    WTF::addStatic(&v29, v13, v9, a4, a5, a6, a7, a8);
  }
  else
  {
    if ((v16 & 1) == 0)
    {
      v27 = v13;
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
      v13 = v27;
    }
    LODWORD(v29) = (unint64_t)v9 >> 4;
    WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::add(v13, (unsigned int *)&v29, a3, a4, a5, a6, a7, a8, (uint64_t)&v30);
    if (v31)
      *((_DWORD *)v9 + 4) |= 0x10u;
    v17 = (int *)(16 * *v30);
    *v17 += 2;
    v29 = v17;
  }
  v26 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v26 == 1)
  {
    if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_27:
  v9 = (WTF::StringImpl *)v29;
  v12 = *v29;
LABEL_4:
  *(_DWORD *)v9 = v12 + 2;
  if (!v12)
  {
    WTF::StringImpl::~StringImpl(v9, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    goto LABEL_6;
  }
LABEL_5:
  *(_DWORD *)v9 = v12;
LABEL_6:
  *a9 = v9;
}

uint64_t JSC::ICEvent::ICEvent(uint64_t a1, uint64_t **a2, const WTF::StringImpl *a3, uint64_t a4, WTF::StringImpl *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  int v10;
  int v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v8 = this;
  *(_DWORD *)a1 = (_DWORD)a3;
  *(_QWORD *)(a1 + 8) = a4;
  v10 = *((_DWORD *)this + 4);
  if ((v10 & 0x20) != 0)
  {
    v11 = *(_DWORD *)this + 2;
  }
  else
  {
    if ((v10 & 0x10) != 0)
    {
      v11 = *(_DWORD *)this + 2;
      *(_DWORD *)this = v11;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(a2[5239], (unint64_t)this, a3, a4, (uint64_t)this, a6, a7, a8, &v21);
      v8 = v21;
      v11 = *(_DWORD *)v21;
    }
    *(_DWORD *)v8 = v11 + 2;
    if (!v11)
    {
      WTF::StringImpl::~StringImpl(v8, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, (uint64_t)this, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      goto LABEL_7;
    }
  }
  *(_DWORD *)v8 = v11;
LABEL_7:
  *(_QWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

{
  int v8;
  WTF::StringImpl *v9;
  int v11;
  int v12;
  int v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v8 = a6;
  v9 = this;
  *(_DWORD *)a1 = (_DWORD)a3;
  *(_QWORD *)(a1 + 8) = a4;
  v11 = *((_DWORD *)this + 4);
  if ((v11 & 0x20) != 0)
  {
    v12 = *(_DWORD *)this + 2;
LABEL_6:
    *(_DWORD *)v9 = v12;
    goto LABEL_7;
  }
  if ((v11 & 0x10) != 0)
  {
    v12 = *(_DWORD *)this + 2;
    *(_DWORD *)this = v12;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(a2[5239], (unint64_t)this, a3, a4, (uint64_t)this, a6, a7, a8, &v23);
    v9 = v23;
    v12 = *(_DWORD *)v23;
  }
  *(_DWORD *)v9 = v12 + 2;
  if (v12)
    goto LABEL_6;
  WTF::StringImpl::~StringImpl(v9, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, (uint64_t)this, a6, a7, a8);
  WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
LABEL_7:
  *(_QWORD *)(a1 + 16) = v9;
  if (v8)
    v13 = 1;
  else
    v13 = 2;
  *(_DWORD *)(a1 + 24) = v13;
  return a1;
}

void JSC::repatchInBySlowPathCall(JSC::CodeBlock *a1, uint64_t a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;

  if (a3 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198209560);
  }
  v11 = (int *)*(&off_1E35833E8 + a3);
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = v11;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v11, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, (uint64_t)v11, a4, a5, a6, a7, a8);
  v17 = (int *)*(&off_1E3583400 + a3);
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = v17;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v17, v12, v13, v14, v15, v16);
}

void JSC::resetInBy(JSC::CodeBlock *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;

  if (a3 >= 3)
  {
    __break(0xC471u);
  }
  else
  {
    v10 = (int *)*(&off_1E35833E8 + (int)a3);
    if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
      *(_QWORD *)(a2 + 48) = v10;
    else
      JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), v10, a4, a5, a6, a7, a8);
    JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, (uint64_t)v10, a4, a5, a6, a7, a8);
  }
}

void JSC::repatchInBy(uint64_t *a1, unint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  const WTF::StringImpl *v11;
  uint64_t *v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint8x8_t v39;
  JSC::InlineCacheHandler *v40;
  JSC::InlineCacheHandler *v41;
  JSC::InlineCacheHandler *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WTF *v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  unsigned __int8 *v56;
  int v57;
  __int16 v58;
  int v59;
  WTF *v60;
  JSC::InlineCacheHandler *v61;
  int v62;
  unint64_t v64;
  uint64_t v65;
  WTF *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  const WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  int v116;
  uint64_t v117;
  void *v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF *v158;
  uint64_t **v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  JSC::ICEvent *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::AtomStringImpl *v173;
  uint64_t v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::AtomStringImpl *v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int8 *v244;
  unsigned int v246;
  const WTF::StringImpl *v247;
  int v248;
  WTF *v250;
  JSC::InlineCacheHandler *v251;
  WTF::StringImpl *v252;
  double v253;
  WTF *v254;
  void *v255;
  WTF *v256;
  WTF *v257;
  WTF::StringImpl *v258;
  JSC::InlineCacheHandler *v259;
  WTF *v260;
  double v261;
  uint64_t v262;
  int *v263;
  unsigned __int8 *v264;
  WTF::StringImpl *v265;
  char v266;
  uint64_t v267;
  uint64_t v268;

  v9 = a8;
  v248 = a5;
  v11 = a3;
  v13 = a1;
  v268 = *MEMORY[0x1E0C80C00];
  v262 = a4;
  v14 = a1[7];
  LODWORD(v258) = 0;
  v260 = 0;
  v261 = 0.0;
  v259 = 0;
  if ((a4 & 1) != 0)
    v15 = (int *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  else
    v15 = *(int **)(a4 + 8);
  v16 = v15[4];
  if ((v16 & 0x20) != 0)
  {
    v17 = *v15 + 2;
LABEL_7:
    *v15 = v17;
    goto LABEL_8;
  }
  if ((v16 & 0x10) != 0)
  {
    *v15 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v14 + 41912), (unint64_t)v15, a3, a4, a5, a6, a7, a8, &v263);
    v15 = v263;
  }
  v17 = *v15;
  *v15 += 2;
  if (v17)
    goto LABEL_7;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
LABEL_8:
  v266 = 0;
  v264 = (unsigned __int8 *)(a2 + 16);
  LOBYTE(v265) = 1;
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
    goto LABEL_11;
  }
  if (__stxr(1u, (unsigned __int8 *)(a2 + 16)))
    goto LABEL_10;
LABEL_11:
  v244 = (unsigned __int8 *)(a2 + 16);
  v19 = 1;
  v266 = 1;
  v267 = v14;
  ++*(_DWORD *)(v14 + 916);
  v246 = v9;
  if (byte_1ECF4C25D)
  {
    v34 = 0;
    goto LABEL_75;
  }
  v20 = *(_DWORD *)v11 & 0xFFFFFFFE;
  v21 = (unsigned int *)(16 * v20);
  v256 = 0;
  v257 = 0;
  v247 = v11;
  if (v9 <= 1)
  {
    if (!v262
      || ((v262 & 1) == 0 ? (v22 = *(_QWORD *)(v262 + 8)) : (v22 = v262 & 0xFFFFFFFFFFFFFFFELL),
          (*(_BYTE *)(v22 + 16) & 0x20) == 0 || (*(_BYTE *)(v22 + 36) & 4) == 0))
    {
      if (*((_BYTE *)v11 + 5) == 61)
      {
        if (v9 == 1)
        {
          v254 = 0;
          v255 = 0;
          v188 = v14;
          v189 = a2;
          v190 = 111;
          v187 = 0;
        }
        else
        {
          JSC::CacheableIdentifier::ensureIsCell((JSC::CacheableIdentifier *)&v262, (JSC::VM *)v14, a3, a4, a5, a6, a7, a8);
          v187 = v262;
          v254 = 0;
          v255 = 0;
          v188 = v14;
          v189 = a2;
          v190 = 25;
        }
        JSC::AccessCase::create(v188, v189, v190, v187, -1, 0, (unsigned int **)&v255, (uint64_t *)&v254, (uint64_t *)&v250);
        v35 = v250;
        if (v254)
          WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v254, v191, v192, v193, v194, v195, a7, a8);
        goto LABEL_41;
      }
    }
  }
  v23 = *(_DWORD *)(16 * v20 + 0x10) & 3;
  if (!v248)
  {
    if (v23 == 2)
      goto LABEL_183;
    v24 = *(_WORD *)(16 * v20 + 0xC);
    if ((v24 & 8) != 0)
      goto LABEL_183;
    if ((v24 & 0x10) != 0)
    {
      if ((v24 & 0xA0) != 0x20)
        goto LABEL_183;
    }
    else if ((v24 & 0x80) != 0)
    {
      goto LABEL_183;
    }
    if (v262)
    {
      if ((v262 & 1) != 0)
        v25 = v262 & 0xFFFFFFFFFFFFFFFELL;
      else
        v25 = *(_QWORD *)(v262 + 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = JSC::prepareChainForCaching(v13, v11, v25, 0, a5, a6, a7, a8);
    if ((v26 & 0xFFFFFF) >= 0x10000)
    {
      if ((_BYTE)v26)
      {
        if (*(_BYTE *)(a6 + 49))
          v121 = *(_QWORD *)(a6 + 32);
        else
          v121 = 0;
        JSC::PolyProtoAccessChain::tryCreate(v13, v11, v262, v121, a5, a6, a7, a8, (uint64_t *)&v250);
        WTF::RefPtr<JSC::PolyProtoAccessChain,WTF::RawPtrTraits<JSC::PolyProtoAccessChain>,WTF::DefaultRefDerefTraits<JSC::PolyProtoAccessChain>>::operator=((unint64_t *)&v257, (unint64_t *)&v250, v122, v123, v124, v125, v126, v127);
        v128 = v250;
        v250 = 0;
        if (v128)
          WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v128, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        LODWORD(v11) = 0;
        if (!v257)
        {
          v19 = 1;
          v34 = 0;
          v11 = v247;
          goto LABEL_68;
        }
        goto LABEL_40;
      }
      v257 = 0;
      JSC::generateConditionsForPropertyMiss(v14, (unsigned __int8 *)a2, v13, (uint64_t)v21, (uint64_t)v15, a6, a7, a8, (uint64_t *)&v250);
      v27 = v250;
      v250 = 0;
      v28 = (unsigned int *)v256;
      v256 = v27;
      if (v28)
      {
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, v28);
          WTF::fastFree((unint64_t)v28, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v31 = (unsigned int *)v250;
        v250 = 0;
        if (v31)
        {
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, v31);
            WTF::fastFree((unint64_t)v31, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
        }
        v27 = v256;
      }
      if (v27)
      {
        v34 = 0;
        if (*((_DWORD *)v27 + 1))
        {
          LODWORD(v11) = 0;
LABEL_40:
          v35 = 0;
          goto LABEL_41;
        }
LABEL_184:
        v19 = 1;
        goto LABEL_68;
      }
      v35 = 0;
      LODWORD(v11) = 0;
LABEL_41:
      if (byte_1ECF4C6B7)
      {
        JSC::ICEvent::ICEvent((uint64_t)&v250, (uint64_t **)v14, (const WTF::StringImpl *)4, 16 * *(unsigned int *)(16 * v20 + 0x4C), (WTF::StringImpl *)v15, *(_QWORD *)(a6 + 32) == (_QWORD)v247, a7, a8);
        JSC::ICEvent::log((JSC::ICEvent *)&v250, v129, v130, v131, v132, v133, v134, v135);
        v142 = v252;
        v252 = 0;
        if (v142)
        {
          if (*(_DWORD *)v142 == 2)
          {
            WTF::StringImpl::~StringImpl(v142, v136, v137, v138, v139, v140, v141, a8);
            WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
          }
          else
          {
            *(_DWORD *)v142 -= 2;
          }
        }
      }
      v36 = v262;
      if (!v35)
      {
        if (v248)
          v37 = *(_DWORD *)(a6 + 20);
        else
          v37 = -1;
        if (v248)
          v38 = 17;
        else
          v38 = 18;
        JSC::AccessCase::create(v14, a2, v38, v262, v37, (unint64_t)v21, (unsigned int **)&v256, (uint64_t *)&v257, (uint64_t *)&v250);
        v35 = v250;
      }
      v255 = v35;
      JSC::StructureStubInfo::addAccessCase(a7, &v263, v13, a2, 0, v36, &v255, a8, (uint64_t)&v250);
      LODWORD(v258) = (_DWORD)v250;
      v40 = v251;
      v251 = 0;
      v41 = v259;
      v259 = v40;
      v34 = (int)v11;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v41, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8, v39);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          --*(_DWORD *)v41;
        }
      }
      if (v260)
        WTF::fastFree((unint64_t)v260, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v42 = v251;
      v260 = v252;
      a9 = v253;
      v252 = 0;
      v253 = 0.0;
      v261 = a9;
      v251 = 0;
      v11 = v247;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v42, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          --*(_DWORD *)v42;
        }
      }
      v43 = (unsigned int *)v255;
      v255 = 0;
      if (v43)
      {
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          JSC::AccessCase::operator delete((unint64_t)v43, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      if (((_DWORD)v258 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
      {
        JSC::ICEvent::ICEvent((uint64_t)&v250, (uint64_t **)v14, (const WTF::StringImpl *)5, 16 * v21[19], (WTF::StringImpl *)v15, *(_QWORD *)(a6 + 32) == (_QWORD)v247, a7, a8);
        JSC::ICEvent::log((JSC::ICEvent *)&v250, v143, v144, v145, v146, v147, v148, v149);
        v150 = v252;
        v252 = 0;
        if (v150)
        {
          if (*(_DWORD *)v150 == 2)
          {
            WTF::StringImpl::~StringImpl(v150, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
          }
          else
          {
            *(_DWORD *)v150 -= 2;
          }
        }
      }
      v19 = 0;
      goto LABEL_68;
    }
LABEL_183:
    v34 = 0;
    goto LABEL_184;
  }
  if (v23 == 2)
    goto LABEL_183;
  v58 = *(_WORD *)(16 * v20 + 0xC);
  if ((v58 & 8) != 0 || (v58 & 0x10) != 0 && (v58 & 0x20) == 0)
    goto LABEL_183;
  v59 = *(unsigned __int8 *)(a6 + 48);
  if (*(_BYTE *)(a6 + 49))
  {
    if (v59 != 1)
      goto LABEL_183;
  }
  if (*(_BYTE *)(a6 + 49) != 1
    || *(_BYTE *)(a7 + 123)
    || v59 != 1
    || *(const WTF::StringImpl **)(a6 + 32) != v11
    || *(_QWORD *)(a6 + 40)
    || (v58 & 0x18) == 0x10 && (v58 & 0x20) != 0
    || !JSC::InlineAccess::generateSelfInAccess(a7, 16 * v20))
  {
    if (*(const WTF::StringImpl **)(a6 + 32) != v11)
    {
      if (v262)
      {
        if ((v262 & 1) != 0)
          v64 = v262 & 0xFFFFFFFFFFFFFFFELL;
        else
          v64 = *(_QWORD *)(v262 + 8);
      }
      else
      {
        v64 = 0;
      }
      v65 = JSC::prepareChainForCaching(v13, v11, v64, a6, a5, a6, a7, a8);
      if ((v65 & 0xFFFFFF) < 0x10000)
        goto LABEL_183;
      if ((v65 & 0xFF00) != 0)
      {
        v19 = 1;
        v34 = 1;
        goto LABEL_68;
      }
      if ((_BYTE)v65)
      {
        if (*(_BYTE *)(a6 + 49))
          v151 = *(_QWORD *)(a6 + 32);
        else
          v151 = 0;
        JSC::PolyProtoAccessChain::tryCreate(v13, v11, v262, v151, a5, a6, a7, a8, (uint64_t *)&v250);
        WTF::RefPtr<JSC::PolyProtoAccessChain,WTF::RawPtrTraits<JSC::PolyProtoAccessChain>,WTF::DefaultRefDerefTraits<JSC::PolyProtoAccessChain>>::operator=((unint64_t *)&v257, (unint64_t *)&v250, v152, v153, v154, v155, v156, v157);
        v158 = v250;
        v250 = 0;
        if (v158)
          WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v158, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        LODWORD(v11) = 1;
        if (!v257)
        {
          v34 = 0;
          v19 = 1;
          v11 = v247;
          goto LABEL_68;
        }
        goto LABEL_40;
      }
      v257 = 0;
      JSC::generateConditionsForPrototypePropertyHit((JSC::VM *)v14, (unsigned __int8 *)a2, v13, (const JSC::PropertyTable *)v21, *(_QWORD *)(a6 + 32), (unint64_t)v15, a7, a8, (uint64_t *)&v250);
      v66 = v250;
      v250 = 0;
      v67 = (unsigned int *)v256;
      v256 = v66;
      if (v67)
      {
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          atomic_store(1u, v67);
          WTF::fastFree((unint64_t)v67, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v70 = (unsigned int *)v250;
        v250 = 0;
        if (v70)
        {
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            atomic_store(1u, v70);
            WTF::fastFree((unint64_t)v70, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
        }
        v66 = v256;
      }
      if (v66)
      {
        v73 = v11;
        LODWORD(v11) = 1;
        if (!*((_DWORD *)v66 + 1))
        {
          v34 = 0;
          v19 = 1;
          v11 = v73;
          goto LABEL_68;
        }
        goto LABEL_40;
      }
    }
    v35 = 0;
    LODWORD(v11) = 1;
    goto LABEL_41;
  }
  if (byte_1ECF4C6B7)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v250, (uint64_t **)v14, (const WTF::StringImpl *)0x22, 16 * *(unsigned int *)(16 * v20 + 0x4C), (WTF::StringImpl *)v15, *(_QWORD *)(a6 + 32) == (_QWORD)v11, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v250, v177, v178, v179, v180, v181, v182, v183);
    v186 = v252;
    v252 = 0;
    if (v186)
    {
      if (*(_DWORD *)v186 == 2)
      {
        WTF::StringImpl::~StringImpl(v186, v184, v185, v114, a5, a6, a7, a8);
        WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
      }
      else
      {
        *(_DWORD *)v186 -= 2;
      }
    }
  }
  JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)(16 * v20), (JSC::VM *)v14, (JSC::Structure *)*(unsigned int *)(a6 + 20), v114, a5, a6, a7, a8);
  v115 = v13;
  if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
    *(_QWORD *)(a7 + 48) = &operationInByIdOptimize;
  else
    JSC::ftlThunkAwareRepatchCall(a2, *(_QWORD *)(a7 + 48), (int *)&operationInByIdOptimize, a4, a5, a6, a7, a8);
  v116 = *(_DWORD *)(a6 + 20);
  *(_BYTE *)(a7 + 123) = 3;
  v117 = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a7 + 12) = v20;
  if (*(_DWORD *)(v117 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v117 + 192, a2);
  *(_DWORD *)(a7 + 8) = v116;
  v19 = 1;
  v34 = 1;
  v13 = v115;
LABEL_68:
  v47 = (unsigned int *)v256;
  v256 = 0;
  if (v47)
  {
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      WTF::fastFree((unint64_t)v47, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  v50 = v257;
  v257 = 0;
  if (v50)
    WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v50, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v266)
  {
LABEL_75:
    LOBYTE(v265) = 0;
    v51 = v264;
    v52 = __ldxr(v264);
    if (v52 == 1)
    {
      if (!__stlxr(0, v264))
        goto LABEL_80;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v51, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_80:
  v53 = v267;
  v54 = *(_DWORD *)(v267 + 916) - 1;
  *(_DWORD *)(v267 + 916) = v54;
  if (*(unsigned __int8 *)(v53 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v55 = v54 == 0;
  else
    v55 = 0;
  if (v55)
  {
    *(_BYTE *)(v53 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v53 + 192, 0);
  }
  if (v266 && (_BYTE)v265)
  {
    v56 = v264;
    v57 = __ldxr(v264);
    if (v57 == 1)
    {
      if (!__stlxr(0, v264))
        goto LABEL_105;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v56, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_105:
  if (v19)
    goto LABEL_106;
  v62 = (int)v258;
  if ((_DWORD)v258 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints((uint64_t *)&v258, (JSC::VM *)v14, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
    v266 = 0;
    v264 = (unsigned __int8 *)(a2 + 16);
    LOBYTE(v265) = 1;
    if (__ldaxr(v244))
    {
      __clrex();
    }
    else if (!__stxr(1u, v244))
    {
      goto LABEL_234;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v244);
LABEL_234:
    v266 = 1;
    v267 = v14;
    ++*(_DWORD *)(v14 + 916);
    JSC::StructureStubInfo::reset(a7, (uint64_t)&v263, (int *)a2);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)&v263, v197, v198, v199, v200, v201, v202, v203);
    v62 = (int)v258;
  }
  if (v62 == 5)
    v34 = 3;
  else
    v34 = v62 != 1 && v62 != 4;
LABEL_106:
  if (*v15 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  else
  {
    *v15 -= 2;
  }
  v60 = v260;
  if (v260)
  {
    v260 = 0;
    LODWORD(v261) = 0;
    WTF::fastFree((unint64_t)v60, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v61 = v259;
  v259 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v61, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      --*(_DWORD *)v61;
    }
  }
  if (v34 == 3)
  {
    if (v246 == 1)
    {
      if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
      {
        v118 = operationInByValMegamorphic;
LABEL_161:
        *(_QWORD *)(a7 + 48) = v118;
        return;
      }
      v120 = *(_QWORD *)(a7 + 48);
      v119 = (int *)operationInByValMegamorphic;
    }
    else
    {
      if (v246)
        goto LABEL_243;
      if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
      {
        v118 = operationInByIdMegamorphic;
        goto LABEL_161;
      }
      v120 = *(_QWORD *)(a7 + 48);
      v119 = (int *)operationInByIdMegamorphic;
    }
LABEL_179:
    JSC::ftlThunkAwareRepatchCall(a2, v120, v119, a4, a5, a6, a7, a8);
    return;
  }
  if (!v34)
  {
    if (byte_1ECF4C6B7)
    {
      v159 = (uint64_t **)v13[7];
      v160 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
      if ((a4 & 1) != 0)
        v161 = (WTF::StringImpl *)(a4 & 0xFFFFFFFFFFFFFFFELL);
      else
        v161 = *(WTF::StringImpl **)(a4 + 8);
      JSC::Identifier::fromUid(v161, (uint64_t)v159, a3, a4, a5, a6, a7, a8, &v258);
      v165 = (JSC::ICEvent *)JSC::ICEvent::ICEvent((uint64_t)&v263, v159, (const WTF::StringImpl *)6, v160, v258, v162, v163, v164);
      JSC::ICEvent::log(v165, v166, v167, v168, v169, v170, v171, v172);
      v175 = v265;
      v265 = 0;
      if (v175)
      {
        if (*(_DWORD *)v175 == 2)
        {
          WTF::StringImpl::~StringImpl(v175, v173, v174, a4, a5, a6, a7, a8);
          WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
        }
        else
        {
          *(_DWORD *)v175 -= 2;
        }
      }
      v176 = v258;
      v258 = 0;
      if (v176)
      {
        if (*(_DWORD *)v176 == 2)
        {
          WTF::StringImpl::~StringImpl(v176, v173, v174, a4, a5, a6, a7, a8);
          WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
        }
        else
        {
          *(_DWORD *)v176 -= 2;
        }
      }
    }
    if (v246 < 3)
    {
      v119 = (int *)*(&off_1E3583400 + (int)v246);
      if ((*(_WORD *)(a7 + 129) & 0x200) != 0)
      {
        *(_QWORD *)(a7 + 48) = v119;
        return;
      }
      v120 = *(_QWORD *)(a7 + 48);
      goto LABEL_179;
    }
LABEL_243:
    __break(0xC471u);
    JUMPOUT(0x19820A010);
  }
}

void JSC::repatchHasPrivateBrand(uint64_t *a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v21;
  int v22;
  int v23;
  JSC::InlineCacheHandler *v24;
  WTF::StringImpl *v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  int v32;
  WTF *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  WTF *v64;
  int v65;
  WTF::StringImpl *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  unsigned __int8 *v75;
  int v76;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t **v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  unsigned __int8 *v134;
  int v135;
  uint64_t v136;
  int v137;
  BOOL v138;
  unsigned __int8 *v139;
  int v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  unsigned int *v145;
  JSC::InlineCacheHandler *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  WTF *v149;
  int *v150;
  unsigned __int8 *v151;
  char v152;
  char v153;
  uint64_t v154;
  uint64_t v155;

  v10 = a5;
  v155 = *MEMORY[0x1E0C80C00];
  v15 = a1[7];
  if ((a4 & 1) != 0)
    v16 = (int *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  else
    v16 = *(int **)(a4 + 8);
  v17 = v16[4];
  if ((v17 & 0x20) != 0)
  {
    v18 = *v16 + 2;
LABEL_8:
    *v16 = v18;
    goto LABEL_9;
  }
  if ((v17 & 0x10) != 0)
  {
    *v16 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v15 + 41912), (unint64_t)v16, a3, a4, a5, a6, a7, a8, &v150);
    v16 = v150;
  }
  v18 = *v16;
  *v16 += 2;
  if (v18)
    goto LABEL_8;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
LABEL_9:
  v19 = a2 + 16;
  v153 = 0;
  v151 = a2 + 16;
  v152 = 1;
  if (__ldaxr(a2 + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
LABEL_13:
  v153 = 1;
  v154 = v15;
  ++*(_DWORD *)(v15 + 916);
  v142 = (uint64_t)a2;
  if (byte_1ECF4C25D)
    goto LABEL_14;
  v28 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
  v29 = *(_WORD *)(v28 + 0xC);
  if ((v29 & 8) != 0)
    goto LABEL_14;
  v30 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x10);
  if ((v30 & 3) == 2)
  {
    v21 = a6;
    if ((v30 & 0x800000) == 0)
    {
      JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a3 & 0xFFFFFFFE), (JSC::VM *)v15, a3, a4, a5, a6, a7, a8);
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v22 = 1;
      goto LABEL_55;
    }
LABEL_15:
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_55;
  }
  if ((v29 & 0x10) != 0 && (v29 & 0x20) == 0)
  {
LABEL_14:
    v21 = a6;
    goto LABEL_15;
  }
  if (byte_1ECF4C6B7)
  {
    v31 = 16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    LODWORD(v145) = 4;
    v146 = (JSC::InlineCacheHandler *)v31;
    v32 = v16[4];
    if ((v32 & 0x20) != 0)
    {
      *v16 += 2;
      v33 = (WTF *)v16;
    }
    else
    {
      if ((v32 & 0x10) != 0)
      {
        *v16 += 2;
        v33 = (WTF *)v16;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v15 + 41912), (unint64_t)v16, a3, a4, a5, a6, a7, a8, &v149);
        v33 = v149;
      }
      v42 = *(_DWORD *)v33;
      *(_DWORD *)v33 += 2;
      if (v42)
      {
        *(_DWORD *)v33 = v42;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v33, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      }
    }
    v147 = v33;
    LODWORD(v148) = 1;
    JSC::ICEvent::log((JSC::ICEvent *)&v145, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v50 = v147;
    v147 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
        WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  v145 = 0;
  v149 = 0;
  if (v10)
    v51 = 17;
  else
    v51 = 18;
  JSC::AccessCase::create(v15, (unint64_t)a2, v51, a4, -1, v28, &v145, (uint64_t *)&v149, (uint64_t *)&v144);
  if (v149)
    WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v149, v52, v53, v54, v55, v56, v57, v58);
  v143 = v144;
  v144 = 0;
  v21 = a6;
  JSC::StructureStubInfo::addAccessCase(a6, &v150, a1, v142, 0, a4, &v143, v58, (uint64_t)&v145);
  v26 = (int)v145;
  v24 = v146;
  v25 = v147;
  v27 = HIDWORD(v148);
  v147 = 0;
  v148 = 0;
  v146 = 0;
  v59 = (unsigned int *)v143;
  v143 = 0;
  if (v59)
  {
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v59);
      JSC::AccessCase::operator delete((unint64_t)v59, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  if ((v26 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7)
  {
    v62 = 16 * *(unsigned int *)(v28 + 76);
    LODWORD(v145) = 5;
    v146 = (JSC::InlineCacheHandler *)v62;
    v63 = v16[4];
    if ((v63 & 0x20) != 0)
    {
      *v16 += 2;
      v64 = (WTF *)v16;
    }
    else
    {
      if ((v63 & 0x10) != 0)
      {
        *v16 += 2;
        v64 = (WTF *)v16;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v15 + 41912), (unint64_t)v16, a3, a4, a5, a6, a7, a8, &v149);
        v64 = v149;
      }
      v65 = *(_DWORD *)v64;
      *(_DWORD *)v64 += 2;
      if (v65)
      {
        *(_DWORD *)v64 = v65;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
      }
    }
    v147 = v64;
    LODWORD(v148) = 1;
    JSC::ICEvent::log((JSC::ICEvent *)&v145, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v66 = v147;
    v147 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
      {
        WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
      }
      else
      {
        *(_DWORD *)v66 -= 2;
      }
    }
  }
  v67 = (unsigned int *)v144;
  v144 = 0;
  if (v67)
  {
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      JSC::AccessCase::operator delete((unint64_t)v67, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  v23 = 1;
  v22 = 2;
  if (v153)
  {
LABEL_55:
    v152 = 0;
    v70 = v151;
    v71 = __ldxr(v151);
    if (v71 == 1)
    {
      if (!__stlxr(0, v151))
        goto LABEL_60;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v70, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_60:
  v72 = v154;
  v73 = *(_DWORD *)(v154 + 916) - 1;
  *(_DWORD *)(v154 + 916) = v73;
  if (*(unsigned __int8 *)(v72 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v74 = v73 == 0;
  else
    v74 = 0;
  if (v74)
  {
    *(_BYTE *)(v72 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v72 + 192, 0);
  }
  if (v153 && v152)
  {
    v75 = v151;
    v76 = __ldxr(v151);
    if (v76 == 1)
    {
      if (!__stlxr(0, v151))
        goto LABEL_72;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v75, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_72:
  if (!v23)
    goto LABEL_80;
  if (v26 != 6)
    goto LABEL_74;
  if (v27)
  {
    v141 = (WTF::StringImpl *)((char *)v25 + 24 * v27);
    v127 = v25;
    do
    {
      v128 = **(_QWORD **)v127;
      if ((v128 & 1) != 0)
      {
        **(_QWORD **)v127 = 5;
      }
      else
      {
        if (*(_BYTE *)(v128 + 4) == 1)
        {
          __dmb(0xAu);
          v130 = (uint64_t **)(v128 + 8);
          v129 = *(uint64_t **)(v128 + 8);
          *(_BYTE *)(v128 + 4) = 2;
          v131 = *(_DWORD *)(v15 + 916);
          *(_DWORD *)(v15 + 916) = v131 + 1;
          if (v129 != (uint64_t *)(v128 + 8))
          {
            do
            {
              v133 = *v129;
              v132 = (uint64_t *)v129[1];
              *v132 = *v129;
              *(_QWORD *)(v133 + 8) = v132;
              *v129 = 0;
              v129[1] = 0;
              JSC::Watchpoint::fire((unint64_t)v129, (JSC::VM *)v15, (char *)v127 + 8, a4, a5, a6, a7, a8, a9);
              v129 = *v130;
            }
            while (*v130 != (uint64_t *)v130);
            v131 = *(_DWORD *)(v15 + 916) - 1;
          }
          *(_DWORD *)(v15 + 916) = v131;
          __dmb(0xAu);
        }
        *(_BYTE *)(v128 + 4) = 2;
      }
      v127 = (WTF::StringImpl *)((char *)v127 + 24);
    }
    while (v127 != v141);
  }
  v153 = 0;
  v151 = v19;
  v152 = 1;
  if (__ldaxr(v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_120;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v19);
LABEL_120:
  v153 = 1;
  v154 = v15;
  ++*(_DWORD *)(v15 + 916);
  JSC::StructureStubInfo::reset(v21);
  if (v153)
  {
    v152 = 0;
    v134 = v151;
    v135 = __ldxr(v151);
    if (v135 == 1)
    {
      if (!__stlxr(0, v151))
        goto LABEL_126;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v134, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_126:
  v136 = v154;
  v137 = *(_DWORD *)(v154 + 916) - 1;
  *(_DWORD *)(v154 + 916) = v137;
  if (*(unsigned __int8 *)(v136 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v138 = v137 == 0;
  else
    v138 = 0;
  if (v138)
  {
    *(_BYTE *)(v136 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v136 + 192, 0);
  }
  if (!v153 || !v152)
    goto LABEL_74;
  v139 = v151;
  v140 = __ldxr(v151);
  if (v140 == 1)
  {
    if (!__stlxr(0, v151))
      goto LABEL_74;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v139, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_74:
  v22 = v26 != 1 && v26 != 4;
LABEL_80:
  if (*v16 != 2)
  {
    *v16 -= 2;
    if (!v25)
      goto LABEL_82;
LABEL_91:
    WTF::fastFree((unint64_t)v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v24)
      goto LABEL_85;
    goto LABEL_83;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
  if (v25)
    goto LABEL_91;
LABEL_82:
  if (!v24)
    goto LABEL_85;
LABEL_83:
  if (*(_DWORD *)v24 == 1)
  {
    JSC::InlineCacheHandler::~InlineCacheHandler(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
    WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
  }
  else
  {
    --*(_DWORD *)v24;
  }
LABEL_85:
  if (!v22)
  {
    if ((*(_WORD *)(v21 + 129) & 0x200) != 0)
      *(_QWORD *)(v21 + 48) = operationHasPrivateBrandGaveUp;
    else
      JSC::ftlThunkAwareRepatchCall(v142, *(_QWORD *)(v21 + 48), (int *)operationHasPrivateBrandGaveUp, a4, a5, a6, a7, a8);
  }
}

void JSC::repatchCheckPrivateBrand(uint64_t *a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int **v28;
  uint8x8_t v29;
  JSC::InlineCacheHandler *v30;
  JSC::InlineCacheHandler *v31;
  JSC::InlineCacheHandler *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  WTF *v48;
  JSC::InlineCacheHandler *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  int v148;
  JSC::InlineCacheHandler *v149;
  WTF::StringImpl *v150;
  double v151;
  uint64_t v152;
  JSC::InlineCacheHandler *v153;
  WTF *v154;
  double v155;
  int *v156;
  unsigned __int8 *v157;
  char v158;
  char v159;
  uint64_t v160;
  uint64_t v161;

  v9 = a5;
  v12 = (uint64_t)a2;
  v161 = *MEMORY[0x1E0C80C00];
  v14 = a1[7];
  LODWORD(v152) = 0;
  v154 = 0;
  v155 = 0.0;
  v153 = 0;
  if ((a4 & 1) != 0)
    v15 = (int *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  else
    v15 = *(int **)(a4 + 8);
  v16 = v15[4];
  if ((v16 & 0x20) != 0)
  {
    v17 = *v15 + 2;
LABEL_7:
    *v15 = v17;
    goto LABEL_8;
  }
  if ((v16 & 0x10) != 0)
  {
    *v15 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v14 + 41912), (unint64_t)v15, a3, a4, a5, a6, a7, a8, &v156);
    v15 = v156;
  }
  v17 = *v15;
  *v15 += 2;
  if (v17)
    goto LABEL_7;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
LABEL_8:
  v18 = (unsigned __int8 *)(v12 + 16);
  v159 = 0;
  v157 = (unsigned __int8 *)(v12 + 16);
  v158 = 1;
  if (__ldaxr((unsigned __int8 *)(v12 + 16)))
  {
    __clrex();
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 16);
    goto LABEL_11;
  }
  if (__stxr(1u, v18))
    goto LABEL_10;
LABEL_11:
  v159 = 1;
  v160 = v14;
  ++*(_DWORD *)(v14 + 916);
  if (byte_1ECF4C25D)
  {
    v38 = 0;
    v37 = 0;
    goto LABEL_35;
  }
  v20 = v12;
  v21 = *(_DWORD *)a3 & 0xFFFFFFFE;
  v22 = *(_WORD *)(16 * v21 + 0xC);
  if ((v22 & 8) != 0)
  {
LABEL_84:
    v38 = 0;
    v37 = 0;
LABEL_85:
    v12 = v20;
    goto LABEL_35;
  }
  v23 = *(_DWORD *)(16 * v21 + 0x10);
  if ((v23 & 3) == 2)
  {
    if ((v23 & 0x800000) == 0)
    {
      JSC::Structure::flattenDictionaryStructure(16 * v21, (JSC::VM *)v14, a3, a4, a5, a6, a7, a8);
      v38 = 0;
      v37 = 1;
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if ((v22 & 0x10) != 0 && (v22 & 0x20) == 0)
    goto LABEL_84;
  v146 = 16 * v21;
  v24 = v14;
  v25 = v9;
  if (byte_1ECF4C6B7)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v148, (uint64_t **)v24, (const WTF::StringImpl *)0x29, 16 * *(unsigned int *)(16 * v21 + 0x4C), (WTF::StringImpl *)v15, 1, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v148, v90, v91, v92, v93, v94, v95, v96);
    v104 = v150;
    v150 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
      {
        WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
        WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
      }
      else
      {
        *(_DWORD *)v104 -= 2;
      }
    }
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v27 = 1;
  v27[2] = 0;
  v28 = (unsigned int **)(v27 + 2);
  *((_WORD *)v27 + 2) = 31;
  v27[3] = 0;
  v27[4] = a4;
  *((_DWORD *)v27 + 2) = -1;
  *((_DWORD *)v27 + 3) = v21;
  v12 = v20;
  if (v20)
  {
    if (*(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v20 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v24 + 192, v20);
      v119 = *v28;
      *v28 = 0;
      if (v119)
      {
        do
        {
          v120 = __ldaxr(v119);
          v121 = v120 - 1;
        }
        while (__stlxr(v121, v119));
        if (!v121)
        {
          atomic_store(1u, v119);
          WTF::fastFree((unint64_t)v119, v113, v114, v115, v116, v117, v118, v26);
        }
        v12 = v20;
        if (*v28 && !(*v28)[1])
        {
          __break(0xC471u);
          JUMPOUT(0x19820AFC8);
        }
      }
    }
  }
  v147 = v27;
  v9 = v25;
  JSC::StructureStubInfo::addAccessCase(v25, &v156, a1, v12, 0, a4, &v147, v26, (uint64_t)&v148);
  LODWORD(v152) = v148;
  v30 = v149;
  v149 = 0;
  v31 = v153;
  v153 = v30;
  v14 = v24;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v31, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v29);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      --*(_DWORD *)v31;
    }
  }
  if (v154)
    WTF::fastFree((unint64_t)v154, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v32 = v149;
  v154 = v150;
  a9 = v151;
  v150 = 0;
  v151 = 0.0;
  v155 = a9;
  v149 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  v33 = (unsigned int *)v147;
  v147 = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      JSC::AccessCase::operator delete((unint64_t)v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  if ((v152 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v148, (uint64_t **)v24, (const WTF::StringImpl *)0x2B, 16 * *(unsigned int *)(v146 + 76), (WTF::StringImpl *)v15, 1, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v148, v105, v106, v107, v108, v109, v110, v111);
    v112 = v150;
    v150 = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
      {
        WTF::StringImpl::~StringImpl(v112, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
      }
      else
      {
        *(_DWORD *)v112 -= 2;
      }
    }
  }
  v37 = 2;
  v38 = 1;
LABEL_35:
  if (!v159)
    goto LABEL_41;
  v158 = 0;
  v39 = v157;
  v40 = __ldxr(v157);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v157))
LABEL_40:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v39, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_41:
  v41 = v160;
  v42 = *(_DWORD *)(v160 + 916) - 1;
  *(_DWORD *)(v160 + 916) = v42;
  if (*(unsigned __int8 *)(v41 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v43 = v42 == 0;
  else
    v43 = 0;
  if (v43)
  {
    *(_BYTE *)(v41 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v41 + 192, 0);
  }
  if (v159 && v158)
  {
    v44 = v157;
    v45 = __ldxr(v157);
    if (v45 == 1)
    {
      if (!__stlxr(0, v157))
        goto LABEL_56;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v44, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_56:
  if (!v38)
    goto LABEL_64;
  v46 = v152;
  if ((_DWORD)v152 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints(&v152, (JSC::VM *)v14, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
    v159 = 0;
    v157 = v18;
    v158 = 1;
    if (__ldaxr(v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_106;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v18);
LABEL_106:
    v159 = 1;
    v160 = v14;
    ++*(_DWORD *)(v14 + 916);
    JSC::StructureStubInfo::reset(v9);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)&v156, v139, v140, v141, v142, v143, v144, v145);
    v46 = v152;
  }
  v37 = v46 != 1 && v46 != 4;
LABEL_64:
  if (*v15 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
  }
  else
  {
    *v15 -= 2;
  }
  v48 = v154;
  if (v154)
  {
    v154 = 0;
    LODWORD(v155) = 0;
    WTF::fastFree((unint64_t)v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v49 = v153;
  v153 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v49, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      --*(_DWORD *)v49;
    }
  }
  if (!v37)
  {
    if ((*(_WORD *)(v9 + 129) & 0x200) != 0)
      *(_QWORD *)(v9 + 48) = operationCheckPrivateBrandGaveUp;
    else
      JSC::ftlThunkAwareRepatchCall(v12, *(_QWORD *)(v9 + 48), (int *)operationCheckPrivateBrandGaveUp, a4, a5, a6, a7, a8);
  }
}

void JSC::repatchSetPrivateBrand(uint64_t *a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  __int16 v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint8x8_t v30;
  JSC::InlineCacheHandler *v31;
  JSC::InlineCacheHandler *v32;
  JSC::InlineCacheHandler *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  WTF *v51;
  JSC::InlineCacheHandler *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  void *v141;
  void *v142;
  int v143;
  JSC::InlineCacheHandler *v144;
  WTF::StringImpl *v145;
  double v146;
  uint64_t v147;
  JSC::InlineCacheHandler *v148;
  WTF *v149;
  double v150;
  int *v151;
  unsigned __int8 *v152;
  char v153;
  char v154;
  uint64_t v155;
  uint64_t v156;

  v9 = a6;
  v11 = a4;
  v13 = (uint64_t)a2;
  v156 = *MEMORY[0x1E0C80C00];
  v15 = a1[7];
  LODWORD(v147) = 0;
  v149 = 0;
  v150 = 0.0;
  v148 = 0;
  if ((a5 & 1) != 0)
    v16 = (int *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v16 = *(int **)(a5 + 8);
  v17 = v16[4];
  if ((v17 & 0x20) != 0)
  {
    v18 = *v16 + 2;
LABEL_7:
    *v16 = v18;
    goto LABEL_8;
  }
  if ((v17 & 0x10) != 0)
  {
    *v16 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v15 + 41912), (unint64_t)v16, a3, a4, a5, a6, a7, a8, &v151);
    v16 = v151;
  }
  v18 = *v16;
  *v16 += 2;
  if (v18)
    goto LABEL_7;
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
LABEL_8:
  v154 = 0;
  v152 = (unsigned __int8 *)(v13 + 16);
  v153 = 1;
  if (__ldaxr((unsigned __int8 *)(v13 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)(v13 + 16)))
  {
    goto LABEL_11;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13 + 16);
LABEL_11:
  v140 = (unsigned __int8 *)(v13 + 16);
  v154 = 1;
  v155 = v15;
  ++*(_DWORD *)(v15 + 916);
  if (byte_1ECF4C25D)
    goto LABEL_112;
  if ((*(_BYTE *)(v11 + 16) & 3) != 0)
  {
LABEL_123:
    v41 = 0;
    LODWORD(v11) = 1;
    goto LABEL_51;
  }
  v20 = *(_WORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xC);
  if ((v20 & 8) != 0)
  {
LABEL_112:
    v41 = 0;
    LODWORD(v11) = 0;
    goto LABEL_51;
  }
  v21 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x10);
  if ((v21 & 3) == 2)
  {
    if ((v21 & 0x800000) == 0)
    {
      JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a3 & 0xFFFFFFFE), (JSC::VM *)v15, a3, a4, a5, a6, a7, a8);
      goto LABEL_123;
    }
    goto LABEL_112;
  }
  if ((v20 & 0x10) != 0 && (v20 & 0x20) == 0)
    goto LABEL_112;
  v22 = v13;
  v23 = v9;
  if ((a5 & 1) != 0)
    v24 = a5 & 0xFFFFFFFFFFFFFFFELL;
  else
    v24 = *(_QWORD *)(a5 + 8);
  v25 = (unsigned __int8 *)(v11 + 15);
  if (__ldaxr((unsigned __int8 *)(v11 + 15)))
  {
    __clrex();
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11 + 15);
    goto LABEL_21;
  }
  if (__stxr(1u, v25))
    goto LABEL_20;
LABEL_21:
  v27 = JSC::Structure::setBrandTransitionFromExistingStructureImpl(v11, v24);
  v28 = __ldxr(v25);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v25))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v11 + 15), 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v27)
  {
    v41 = 0;
    LODWORD(v11) = 1;
    v9 = v23;
LABEL_104:
    v13 = v22;
    goto LABEL_51;
  }
  v9 = v23;
  if ((*(_BYTE *)(v27 + 16) & 3) != 0)
  {
    v41 = 0;
    LODWORD(v11) = 0;
    goto LABEL_104;
  }
  v13 = v22;
  if (byte_1ECF4C6B7)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v143, (uint64_t **)v15, (const WTF::StringImpl *)0x2A, 16 * *(unsigned int *)(v11 + 76), (WTF::StringImpl *)v16, 1, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v143, v93, v94, v95, v96, v97, v98, v99);
    v107 = v145;
    v145 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
      {
        WTF::StringImpl::~StringImpl(v107, v100, v101, v102, v103, v104, v105, v106);
        WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
      }
      else
      {
        *(_DWORD *)v107 -= 2;
      }
    }
  }
  JSC::AccessCase::createSetPrivateBrand(v15, v22, a5, v11, v27, (uint64_t *)&v142);
  v141 = v142;
  v142 = 0;
  JSC::StructureStubInfo::addAccessCase(v9, &v151, a1, v22, 0, a5, &v141, v29, (uint64_t)&v143);
  LODWORD(v147) = v143;
  v31 = v144;
  v144 = 0;
  v32 = v148;
  v148 = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v30);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  if (v149)
    WTF::fastFree((unint64_t)v149, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v33 = v144;
  v149 = v145;
  a9 = v146;
  v145 = 0;
  v146 = 0.0;
  v150 = a9;
  v144 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  v34 = (unsigned int *)v141;
  v141 = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      JSC::AccessCase::operator delete((unint64_t)v34, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  if ((v147 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v143, (uint64_t **)v15, (const WTF::StringImpl *)0x2C, 16 * *(unsigned int *)(v11 + 76), (WTF::StringImpl *)v16, 1, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v143, v108, v109, v110, v111, v112, v113, v114);
    v115 = v145;
    v145 = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
      {
        WTF::StringImpl::~StringImpl(v115, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
      }
      else
      {
        *(_DWORD *)v115 -= 2;
      }
    }
  }
  v38 = (unsigned int *)v142;
  v142 = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      JSC::AccessCase::operator delete((unint64_t)v38, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  v41 = 1;
LABEL_51:
  if (!v154)
    goto LABEL_57;
  v153 = 0;
  v42 = v152;
  v43 = __ldxr(v152);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_56;
  }
  if (__stlxr(0, v152))
LABEL_56:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v42, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_57:
  v44 = v155;
  v45 = *(_DWORD *)(v155 + 916) - 1;
  *(_DWORD *)(v155 + 916) = v45;
  if (*(unsigned __int8 *)(v44 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v46 = v45 == 0;
  else
    v46 = 0;
  if (v46)
  {
    *(_BYTE *)(v44 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v44 + 192, 0);
  }
  if (v154 && v153)
  {
    v47 = v152;
    v48 = __ldxr(v152);
    if (v48 == 1)
    {
      if (!__stlxr(0, v152))
        goto LABEL_74;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v47, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_74:
  if (!v41)
    goto LABEL_82;
  v49 = v147;
  if ((_DWORD)v147 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints(&v147, (JSC::VM *)v15, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
    v154 = 0;
    v152 = v140;
    v153 = 1;
    if (__ldaxr(v140))
    {
      __clrex();
    }
    else if (!__stxr(1u, v140))
    {
      goto LABEL_118;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v140);
LABEL_118:
    v154 = 1;
    v155 = v15;
    ++*(_DWORD *)(v15 + 916);
    JSC::StructureStubInfo::reset(v9);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)&v151, v133, v134, v135, v136, v137, v138, v139);
    v49 = v147;
  }
  LODWORD(v11) = v49 != 1 && v49 != 4;
LABEL_82:
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *v16 -= 2;
  }
  v51 = v149;
  if (v149)
  {
    v149 = 0;
    LODWORD(v150) = 0;
    WTF::fastFree((unint64_t)v51, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v52 = v148;
  v148 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v52, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      --*(_DWORD *)v52;
    }
  }
  if (!(_DWORD)v11)
  {
    if ((*(_WORD *)(v9 + 129) & 0x200) != 0)
      *(_QWORD *)(v9 + 48) = operationSetPrivateBrandGaveUp;
    else
      JSC::ftlThunkAwareRepatchCall(v13, *(_QWORD *)(v9 + 48), (int *)operationSetPrivateBrandGaveUp, a4, a5, a6, a7, a8);
  }
}

void JSC::repatchArrayInByVal(JSC::JSCell *a1, unsigned __int8 *a2, JSC::JSObject *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  JSC *v14;
  unsigned __int8 *v15;
  unsigned int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint8x8_t v28;
  JSC::InlineCacheHandler *v29;
  JSC::InlineCacheHandler *v30;
  JSC::InlineCacheHandler *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  JSC *v38;
  int v39;
  BOOL v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v45;
  WTF *v46;
  JSC::InlineCacheHandler *v47;
  void *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  JSC::JSGlobalObject *v77;
  unsigned int *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  int v89;
  int v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  void *v101;
  WTF *v102;
  JSC::InlineCacheHandler *v103;
  WTF *v104;
  double v105;
  WTF *v106;
  WTF *v107;
  uint64_t v108;
  JSC::InlineCacheHandler *v109;
  WTF *v110;
  double v111;
  char v112[8];
  unsigned __int8 *v113;
  char v114;
  char v115;
  JSC *v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  if (a4 > 0xFFFDFFFFFFFFFFFFLL)
  {
    v9 = a6;
    v14 = (JSC *)*((_QWORD *)a1 + 7);
    LODWORD(v108) = 0;
    v110 = 0;
    v111 = 0.0;
    v109 = 0;
    v15 = a2 + 16;
    v115 = 0;
    v113 = a2 + 16;
    v114 = 1;
    if (__ldaxr(a2 + 16))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
LABEL_6:
      v115 = 1;
      v116 = v14;
      ++*((_DWORD *)v14 + 229);
      v17 = *((unsigned __int8 *)a3 + 5);
      if (v17 > 0x3C)
      {
        if (v17 == 61)
        {
          v18 = 111;
          goto LABEL_15;
        }
LABEL_12:
        if (v17 - 39 <= 0xA)
        {
          v35 = 0;
          switch(*((_BYTE *)a3 + 5))
          {
            case '\'':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 100;
              v90 = 91;
              goto LABEL_125;
            case '(':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 101;
              v90 = 92;
              goto LABEL_125;
            case ')':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 102;
              v90 = 93;
              goto LABEL_125;
            case '*':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 103;
              v90 = 94;
              goto LABEL_125;
            case '+':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 104;
              v90 = 95;
              goto LABEL_125;
            case ',':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 105;
              v90 = 96;
              goto LABEL_125;
            case '-':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 106;
              v90 = 97;
              goto LABEL_125;
            case '.':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 107;
              v90 = 98;
              goto LABEL_125;
            case '/':
              v88 = (*((_BYTE *)a3 + 40) & 6) == 0;
              v89 = 108;
              v90 = 99;
LABEL_125:
              if (v88)
                v18 = v90;
              else
                v18 = v89;
              goto LABEL_15;
            case '0':
            case '1':
              goto LABEL_30;
            default:
              __break(0xC471u);
              JUMPOUT(0x19820BE74);
          }
        }
        v19 = *((_BYTE *)a3 + 4) & 0xE;
        if (v19 == 8)
        {
          v18 = 87;
          goto LABEL_15;
        }
        v35 = 0;
        if ((*((_BYTE *)a3 + 4) & 0xEu) > 5)
        {
          if (v19 == 6)
          {
            v18 = 86;
          }
          else
          {
            if (v19 != 10)
              goto LABEL_30;
            v18 = 88;
          }
          goto LABEL_15;
        }
        if (v19 == 4)
          goto LABEL_73;
        if ((*((_BYTE *)a3 + 4) & 0xE) != 0)
          goto LABEL_30;
        if (v17 >= 0x17 && (*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8) & 0x20) == 0)
        {
          v73 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28);
          if ((!v73 || *(_BYTE *)(*(_QWORD *)(v73 + 2048) + 4) != 2)
            && (*(_WORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xC) & 0x100) == 0)
          {
            v76 = JSC::prepareChainForCaching(a1, a3, 0, 0, a5, a6, a7, a8);
            v35 = 0;
            if ((v76 & 0xFFFFFF) < 0x10000 || (_BYTE)v76)
              goto LABEL_30;
            v77 = (JSC::JSGlobalObject *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE));
            JSC::generateConditionsForIndexedMiss(v14, (JSC::VM *)a2, a1, v77, (JSC::Structure *)a5, a6, a7, a8, (uint64_t *)&v102);
            v78 = (unsigned int *)v102;
            if (!v102 || *((_DWORD *)v102 + 1))
            {
              v106 = 0;
              JSC::AccessCase::create((uint64_t)v14, (unint64_t)a2, 110, 0, -1, (unint64_t)v77, (unsigned int **)&v102, (uint64_t *)&v106, (uint64_t *)&v107);
              v27 = v107;
              if (v106)
                WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v106, v79, v80, v81, v82, v83, v84, v26);
              v85 = (unsigned int *)v102;
              v102 = 0;
              if (v85)
              {
                do
                {
                  v86 = __ldaxr(v85);
                  v87 = v86 - 1;
                }
                while (__stlxr(v87, v85));
                if (!v87)
                {
                  atomic_store(1u, v85);
                  WTF::fastFree((unint64_t)v85, v79, v80, v81, v82, v83, v84, v26);
                }
              }
              if (v27)
                goto LABEL_17;
LABEL_73:
              v18 = 85;
              goto LABEL_15;
            }
            v102 = 0;
            do
            {
              v99 = __ldaxr(v78);
              v100 = v99 - 1;
            }
            while (__stlxr(v100, v78));
            if (!v100)
            {
              atomic_store(1u, v78);
              WTF::fastFree((unint64_t)v78, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
          }
        }
        v35 = 0;
        goto LABEL_30;
      }
      switch(v17)
      {
        case 0x21u:
          v18 = 90;
          break;
        case 0x22u:
          v18 = 89;
          break;
        case 2u:
          v18 = 109;
          break;
        default:
          goto LABEL_12;
      }
LABEL_15:
      v106 = 0;
      v107 = 0;
      JSC::AccessCase::create((uint64_t)v14, (unint64_t)a2, v18, 0, -1, 0, (unsigned int **)&v107, (uint64_t *)&v106, (uint64_t *)&v102);
      v27 = v102;
      if (v106)
        WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v106, v20, v21, v22, v23, v24, v25, v26);
LABEL_17:
      v101 = v27;
      JSC::StructureStubInfo::addAccessCase(a5, v112, (uint64_t *)a1, (uint64_t)a2, 0, 0, &v101, v26, (uint64_t)&v102);
      LODWORD(v108) = (_DWORD)v102;
      v29 = v103;
      v103 = 0;
      v30 = v109;
      v109 = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v30, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v28);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          --*(_DWORD *)v30;
        }
      }
      if (v110)
        WTF::fastFree((unint64_t)v110, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v31 = v103;
      v110 = v104;
      a9 = v105;
      v104 = 0;
      v105 = 0.0;
      v111 = a9;
      v103 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v31, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          --*(_DWORD *)v31;
        }
      }
      v32 = (unsigned int *)v101;
      v101 = 0;
      if (v32)
      {
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          JSC::AccessCase::operator delete((unint64_t)v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      v35 = 1;
LABEL_30:
      if (!v115)
        goto LABEL_36;
      v114 = 0;
      v36 = v113;
      v37 = __ldxr(v113);
      if (v37 == 1)
      {
        if (!__stlxr(0, v113))
        {
LABEL_36:
          v38 = v116;
          v39 = *((_DWORD *)v116 + 229) - 1;
          *((_DWORD *)v116 + 229) = v39;
          if (*((unsigned __int8 *)v38 + 1198) | HIBYTE(dword_1ECF4C5CE))
            v40 = v39 == 0;
          else
            v40 = 0;
          if (v40)
          {
            *((_BYTE *)v38 + 1198) = 0;
            JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v38 + 192, 0);
          }
          if (v115 && v114)
          {
            v41 = v113;
            v42 = __ldxr(v113);
            if (v42 == 1)
            {
              if (!__stlxr(0, v113))
                goto LABEL_45;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
LABEL_45:
          if (!v35)
          {
            v45 = 0;
            goto LABEL_55;
          }
          v43 = v108;
          if ((_DWORD)v108 != 6)
          {
LABEL_47:
            if (v43 == 5)
              v45 = 3;
            else
              v45 = v43 != 1 && v43 != 4;
LABEL_55:
            v46 = v110;
            if (v110)
            {
              v110 = 0;
              LODWORD(v111) = 0;
              WTF::fastFree((unint64_t)v46, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v47 = v109;
            v109 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 1)
              {
                JSC::InlineCacheHandler::~InlineCacheHandler(v47, a2, (uint64_t)a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
                WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
              }
              else
              {
                --*(_DWORD *)v47;
              }
            }
            if (v45)
            {
              if (v45 != 3)
                return;
              if (v9 == 1)
              {
                if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
                {
                  v48 = operationInByValMegamorphic;
                  goto LABEL_112;
                }
                v75 = *(_QWORD *)(a5 + 48);
                v74 = (int *)operationInByValMegamorphic;
              }
              else
              {
                if (v9)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19820BE54);
                }
                if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
                {
                  v48 = operationInByIdMegamorphic;
LABEL_112:
                  *(_QWORD *)(a5 + 48) = v48;
                  return;
                }
                v75 = *(_QWORD *)(a5 + 48);
                v74 = (int *)operationInByIdMegamorphic;
              }
            }
            else
            {
              if (v9 >= 3)
              {
                __break(0xC471u);
                JUMPOUT(0x19820BE24);
              }
              v74 = (int *)*(&off_1E3583400 + (int)v9);
              if ((*(_WORD *)(a5 + 129) & 0x200) != 0)
              {
                *(_QWORD *)(a5 + 48) = v74;
                return;
              }
              v75 = *(_QWORD *)(a5 + 48);
            }
            JSC::ftlThunkAwareRepatchCall((uint64_t)a2, v75, v74, a4, a5, a6, a7, a8);
            return;
          }
          JSC::AccessGenerationResult::fireWatchpoints(&v108, v14, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
          v115 = 0;
          v113 = v15;
          v114 = 1;
          if (__ldaxr(v15))
          {
            __clrex();
          }
          else if (!__stxr(1u, v15))
          {
            goto LABEL_116;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v15);
LABEL_116:
          v115 = 1;
          v116 = v14;
          ++*((_DWORD *)v14 + 229);
          JSC::StructureStubInfo::reset(a5, (uint64_t)v112, (int *)a2);
          JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v112, v92, v93, v94, v95, v96, v97, v98);
          v43 = v108;
          goto LABEL_47;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v36, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_36;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
    goto LABEL_6;
  }
}

void JSC::repatchInstanceOf(JSC::JSCell *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC *v9;
  unsigned __int8 *v15;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint8x8_t v35;
  JSC::InlineCacheHandler *v36;
  JSC::InlineCacheHandler *v37;
  JSC::InlineCacheHandler *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v43;
  int v44;
  JSC *v45;
  int v46;
  BOOL v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  _BOOL4 v52;
  _BOOL4 v53;
  WTF *v54;
  JSC::InlineCacheHandler *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v128;
  JSC::InlineCacheHandler *v129;
  WTF::StringImpl *v130;
  double v131;
  WTF *v132;
  uint64_t v133;
  JSC::InlineCacheHandler *v134;
  WTF *v135;
  double v136;
  char v137[8];
  unsigned __int8 *v138;
  char v139;
  char v140;
  JSC *v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v9 = (JSC *)*((_QWORD *)a1 + 7);
  LODWORD(v133) = 0;
  v135 = 0;
  v136 = 0.0;
  v134 = 0;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19820C2F4);
  }
  if (byte_1ECF4C25D)
  {
    v53 = 0;
    v34 = a5;
    goto LABEL_74;
  }
  v15 = a2 + 16;
  v140 = 0;
  v138 = a2 + 16;
  v139 = 1;
  if (__ldaxr(a2 + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v15))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
LABEL_6:
  v140 = 1;
  v141 = v9;
  ++*((_DWORD *)v9 + 229);
  v17 = (unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE));
  if ((a4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a4 + 5) < 0x17u)
    goto LABEL_86;
  if (*(unsigned __int8 *)(a3 + 5) <= 0x16u)
  {
    v132 = 0;
    JSC::InstanceOfAccessCase::create((uint64_t)v9, (unint64_t)a2, 29, (unint64_t)v17, (unsigned int **)&v132, a4, (uint64_t *)&v128);
    v30 = (uint64_t)v128;
    v128 = 0;
    v28 = (unsigned int *)v132;
    v132 = 0;
    if (!v28)
      goto LABEL_25;
    do
    {
      v88 = __ldaxr(v28);
      v33 = --v88 == 0;
    }
    while (__stlxr(v88, v28));
    goto LABEL_23;
  }
  if ((*(_WORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xC) & 8) != 0)
  {
LABEL_86:
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v30 = 1;
    *(_WORD *)(v30 + 4) = 30;
    *(_DWORD *)(v30 + 8) = -1;
    *(_QWORD *)(v30 + 12) = 0;
    *(_QWORD *)(v30 + 28) = 0;
    *(_QWORD *)(v30 + 20) = 0;
    *(_DWORD *)(v30 + 36) = 0;
    goto LABEL_26;
  }
  if ((_DWORD)a6)
    v18 = a4;
  else
    v18 = 0;
  JSC::prepareChainForCaching(a1, (JSC::JSObject *)a3, 0, v18, a5, a6, a7, a8);
  JSC::generateConditionsForInstanceOf(v9, (JSC::VM *)a2, a1, (JSC::JSGlobalObject *)v17, (JSC::Structure *)a4, a6, v19, v20, &v132);
  v28 = (unsigned int *)v132;
  if (v132 && !*((_DWORD *)v132 + 1))
  {
    v30 = 0;
    v132 = 0;
    do
    {
LABEL_22:
      v32 = __ldaxr(v28);
      v33 = --v32 == 0;
    }
    while (__stlxr(v32, v28));
LABEL_23:
    if (v33)
    {
      atomic_store(1u, v28);
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    }
    goto LABEL_25;
  }
  v29 = WTF::fastMalloc((WTF *)0x30);
  v30 = v29;
  v128 = 0;
  if ((_DWORD)a6)
    v31 = 28;
  else
    v31 = 29;
  JSC::AccessCase::AccessCase(v29, v9, (unint64_t)a2, v31, 0, 0xFFFFFFFFLL, (unint64_t)v17, (unsigned int **)&v132, (uint64_t *)&v128);
  if (v128)
    WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v128, v21, v22, v23, v24, v25, v26, v27);
  *(_QWORD *)(v30 + 40) = a4;
  if (a2 && *((_DWORD *)v9 + 190) >= a2[7])
    JSC::Heap::writeBarrierSlowPath((uint64_t)v9 + 192, (unint64_t)a2);
  v28 = (unsigned int *)v132;
  v132 = 0;
  if (v28)
    goto LABEL_22;
LABEL_25:
  if (!v30)
    goto LABEL_86;
LABEL_26:
  if (byte_1ECF4C6B7)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v128, (uint64_t **)v9, (const WTF::StringImpl *)7, 16 * v17[19], 0, v25, v26, v27);
    JSC::ICEvent::log((JSC::ICEvent *)&v128, v89, v90, v91, v92, v93, v94, v95);
    v102 = v130;
    v130 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
      {
        WTF::StringImpl::~StringImpl(v102, v96, v97, v98, v99, v100, v101, v27);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
      }
      else
      {
        *(_DWORD *)v102 -= 2;
      }
    }
  }
  v132 = (WTF *)v30;
  v34 = a5;
  JSC::StructureStubInfo::addAccessCase(a5, v137, (uint64_t *)a1, (uint64_t)a2, 0, 0, (void **)&v132, v27, (uint64_t)&v128);
  LODWORD(v133) = (_DWORD)v128;
  v36 = v129;
  v129 = 0;
  v37 = v134;
  v134 = v36;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v37, a2, a3, a4, a5, a6, a7, a8, v35);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  if (v135)
    WTF::fastFree((unint64_t)v135, a2, a3, a4, a5, a6, a7, a8);
  v38 = v129;
  v135 = v130;
  a9 = v131;
  v130 = 0;
  v131 = 0.0;
  v136 = a9;
  v129 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v38, a2, a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      --*(_DWORD *)v38;
    }
  }
  v39 = (unsigned int *)v132;
  v132 = 0;
  if (v39)
  {
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      JSC::AccessCase::operator delete((unint64_t)v39, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if ((v133 - 6) >= 0xFFFFFFFD && byte_1ECF4C6B7 != 0)
  {
    JSC::ICEvent::ICEvent((uint64_t)&v128, (uint64_t **)v9, (const WTF::StringImpl *)8, 16 * v17[19], 0, a6, a7, a8);
    JSC::ICEvent::log((JSC::ICEvent *)&v128, v103, v104, v105, v106, v107, v108, v109);
    v110 = v130;
    v130 = 0;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
      {
        WTF::StringImpl::~StringImpl(v110, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
      }
      else
      {
        *(_DWORD *)v110 -= 2;
      }
    }
    v34 = a5;
  }
  if (v140)
  {
    v139 = 0;
    v43 = v138;
    v44 = __ldxr(v138);
    if (v44 == 1)
    {
      if (!__stlxr(0, v138))
        goto LABEL_50;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v43, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_50:
  v45 = v141;
  v46 = *((_DWORD *)v141 + 229) - 1;
  *((_DWORD *)v141 + 229) = v46;
  if (*((unsigned __int8 *)v45 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v47 = v46 == 0;
  else
    v47 = 0;
  if (v47)
  {
    *((_BYTE *)v45 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v45 + 192, 0);
  }
  if (v140 && v139)
  {
    v48 = v138;
    v49 = __ldxr(v138);
    if (v49 == 1)
    {
      if (!__stlxr(0, v138))
        goto LABEL_64;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v48, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_64:
  v50 = v133;
  if ((_DWORD)v133 == 6)
  {
    JSC::AccessGenerationResult::fireWatchpoints(&v133, v9, a9, a3, a4, a5, a6, a7, a8);
    v140 = 0;
    v138 = a2 + 16;
    v139 = 1;
    if (__ldaxr(v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
      goto LABEL_95;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 16));
LABEL_95:
    v140 = 1;
    v141 = v9;
    ++*((_DWORD *)v9 + 229);
    v34 = a5;
    JSC::StructureStubInfo::reset(a5);
    JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v137, v81, v82, v83, v84, v85, v86, v87);
    v50 = v133;
  }
  v52 = v50 != 1 && v50 != 4;
  v53 = v50 != 5 && v52;
LABEL_74:
  v54 = v135;
  if (v135)
  {
    v135 = 0;
    LODWORD(v136) = 0;
    WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
  }
  v55 = v134;
  v134 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v55, a2, a3, a4, a5, a6, a7, a8, *(uint8x8_t *)&a9);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      --*(_DWORD *)v55;
    }
  }
  if (!v53)
  {
    if ((*(_WORD *)(v34 + 129) & 0x200) != 0)
      *(_QWORD *)(v34 + 48) = operationInstanceOfGaveUp;
    else
      JSC::ftlThunkAwareRepatchCall((uint64_t)a2, *(_QWORD *)(v34 + 48), (int *)operationInstanceOfGaveUp, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::appropriateGetByOptimizeFunction(unsigned int a1)
{
  uint64_t result;

  if (a1 < 8)
    return (uint64_t)*(&off_1E3583418 + (int)a1);
  result = 395;
  __break(0xC471u);
  return result;
}

void JSC::resetDelBy(JSC::CodeBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;

  if ((_DWORD)a3 != 2)
  {
    if ((_DWORD)a3 == 3)
    {
      if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
      {
        v10 = operationDeleteByValSloppyOptimize;
        goto LABEL_4;
      }
      v11 = *(_QWORD *)(a2 + 48);
      v12 = (int *)operationDeleteByValSloppyOptimize;
    }
    else if ((_DWORD)a3 == 1)
    {
      if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
      {
        v10 = operationDeleteByIdSloppyOptimize;
        goto LABEL_4;
      }
      v11 = *(_QWORD *)(a2 + 48);
      v12 = (int *)operationDeleteByIdSloppyOptimize;
    }
    else
    {
      if ((_DWORD)a3)
        goto LABEL_5;
      if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
      {
        v10 = operationDeleteByIdStrictOptimize;
        goto LABEL_4;
      }
      v11 = *(_QWORD *)(a2 + 48);
      v12 = (int *)operationDeleteByIdStrictOptimize;
    }
LABEL_10:
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, v11, v12, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  if ((*(_WORD *)(a2 + 129) & 0x200) == 0)
  {
    v11 = *(_QWORD *)(a2 + 48);
    v12 = (int *)operationDeleteByValStrictOptimize;
    goto LABEL_10;
  }
  v10 = operationDeleteByValStrictOptimize;
LABEL_4:
  *(_QWORD *)(a2 + 48) = v10;
LABEL_5:
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, a3, a4, a5, a6, a7, a8);
}

void JSC::resetHasPrivateBrand(JSC::CodeBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = operationHasPrivateBrandOptimize;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), (int *)operationHasPrivateBrandOptimize, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, a3, a4, a5, a6, a7, a8);
}

void JSC::resetInstanceOf(JSC::CodeBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = operationInstanceOfOptimize;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), (int *)operationInstanceOfOptimize, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, a3, a4, a5, a6, a7, a8);
}

void JSC::resetCheckPrivateBrand(JSC::CodeBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = operationCheckPrivateBrandOptimize;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), (int *)operationCheckPrivateBrandOptimize, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, a3, a4, a5, a6, a7, a8);
}

void JSC::resetSetPrivateBrand(JSC::CodeBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
    *(_QWORD *)(a2 + 48) = operationSetPrivateBrandOptimize;
  else
    JSC::ftlThunkAwareRepatchCall((uint64_t)a1, *(_QWORD *)(a2 + 48), (int *)operationSetPrivateBrandOptimize, a4, a5, a6, a7, a8);
  JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a2, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::appendICStatusVariant<WTF::Vector<JSC::SetPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::SetPrivateBrandVariant>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)a1;
    v11 = a2[2];
    v12 = *a2;
    v13 = 0;
    if (v11)
    {
      v14 = (_QWORD *)(v10 + 16);
      v15 = (_QWORD *)(v10 + 16);
      while (1)
      {
        v17 = *v15;
        v15 += 3;
        v16 = v17;
        if (v17)
        {
          if ((v16 & 1) != 0)
            v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
          else
            v18 = *(_QWORD *)(v16 + 8);
          v19 = v11 & 0xFFFFFFFFFFFFFFFELL;
          if ((v11 & 1) == 0)
            v19 = *(_QWORD *)(v11 + 8);
          if (v18 == v19 && *(v14 - 2) == v12)
            break;
        }
        ++v13;
        v14 = v15;
        if (v9 == v13)
          goto LABEL_19;
      }
LABEL_37:
      if (v9 <= 1)
        v9 = 1;
      else
        v9 = v9;
      for (i = (uint64_t *)(v10 + 16); ; i += 3)
      {
        if (v13)
        {
          v35 = *i;
          if ((v11 != 0) != (*i != 0))
            break;
          if (!v35)
            goto LABEL_49;
          if ((v35 & 1) != 0)
            v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
          else
            v36 = *(_QWORD *)(v35 + 8);
          v37 = v16 & 0xFFFFFFFFFFFFFFFELL;
          if (!((v16 == 0) | v16 & 1))
            v37 = *(_QWORD *)(v16 + 8);
          if (v36 == v37)
          {
LABEL_49:
            if (*(i - 2) == v12)
              break;
          }
        }
        --v13;
        if (!--v9)
          return 1;
      }
    }
    else
    {
      v21 = (_QWORD *)(v10 + 16);
      do
      {
        if (!*v21 && *(v21 - 2) == v12)
        {
          v16 = 0;
          goto LABEL_37;
        }
        ++v13;
        v21 += 3;
      }
      while (v9 != v13);
LABEL_19:
      v22 = (_QWORD *)(v10 + 16);
      v23 = v9;
      v24 = (_QWORD *)(v10 + 16);
      while (1)
      {
        v26 = *v24;
        v24 += 3;
        v25 = v26;
        if ((v11 != 0) != (v26 != 0))
          break;
        if (!v25)
          goto LABEL_27;
        if ((v25 & 1) != 0)
          v27 = v25 & 0xFFFFFFFFFFFFFFFELL;
        else
          v27 = *(_QWORD *)(v25 + 8);
        v28 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (!((v11 == 0) | v11 & 1))
          v28 = *(_QWORD *)(v11 + 8);
        if (v27 == v28)
        {
LABEL_27:
          if (*(v22 - 2) == v12)
            break;
        }
        v22 = v24;
        if (!--v23)
        {
          v20 = v9;
          goto LABEL_31;
        }
      }
    }
    return 0;
  }
  else
  {
    v20 = 0;
LABEL_31:
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 8))
    {
      v29 = WTF::Vector<JSC::SetPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v20 + 1), (unint64_t)a2, a4, a5, a6, a7, a8);
      v30 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
      v31 = *(_OWORD *)v29;
      v32 = *(_QWORD *)(v29 + 16);
    }
    else
    {
      v30 = *(_QWORD *)a1 + 24 * v20;
      v31 = *(_OWORD *)a2;
      v32 = a2[2];
    }
    *(_QWORD *)(v30 + 16) = v32;
    *(_OWORD *)v30 = v31;
    ++*(_DWORD *)(a1 + 12);
    return 1;
  }
}

void JSC::SetPrivateBrandStatus::computeForBaseline(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  JSC::CodeOrigin *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  WTF *v48;
  __int128 v49;
  char v50;
  WTF *v51;
  WTF *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unsigned int v59;
  _BYTE v60[32];
  WTF *v61;
  unint64_t v62;
  _BYTE v63[24];
  char v64;

  v8 = a5;
  v13 = (unsigned __int8 *)(a2 + 16);
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v13))
    goto LABEL_4;
LABEL_5:
  v15 = 0;
  v61 = (WTF *)v63;
  v62 = 1;
  v64 = 0;
  v16 = 2;
  if ((_DWORD)a4 != -1 && (_DWORD)a4 != 0x3FFFFFFF)
  {
    if (a4 >> 28)
    {
      v15 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = a4;
      v16 = 1;
    }
    else
    {
      v16 = 0;
      v15 = a4 << 36;
    }
  }
  v56 = v15 | v16;
  v17 = *a3;
  if (*a3)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)&v56, 0, (uint64_t)a3, a4, a5, a6, a7, a8) & v18;
    v20 = (JSC::CodeOrigin *)(v17 + (v19 << 6));
    if ((JSC::CodeOrigin::isApproximatelyEqualTo(v20, (const JSC::CodeOrigin *)&v56, 0, v21, v22, v23, v24, v25) & 1) != 0)
    {
LABEL_11:
      v31 = *(_QWORD *)(v17 + (v19 << 6) + 8);
      goto LABEL_24;
    }
    v32 = 1;
    while (1)
    {
      v33 = *(_QWORD *)v20;
      if (*(_QWORD *)v20 == 2)
        break;
      if ((v33 & 2) != 0)
      {
        v34 = (_QWORD *)(v33 & 0xFFFFFFFF8);
        if ((v33 & 1) == 0)
        {
          if (!v34)
            break;
          goto LABEL_16;
        }
      }
      else
      {
        if ((v33 & 1) == 0)
          goto LABEL_16;
        v34 = (_QWORD *)(v33 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v33 & 0xFFFFFFFF8) + 8) != -1)
          goto LABEL_16;
      }
      if (!*v34)
        break;
LABEL_16:
      v19 = ((_DWORD)v19 + v32) & v18;
      v20 = (JSC::CodeOrigin *)(v17 + (v19 << 6));
      ++v32;
      if (JSC::CodeOrigin::isApproximatelyEqualTo(v20, (const JSC::CodeOrigin *)&v56, 0, v26, v27, v28, v29, v30))goto LABEL_11;
    }
  }
  v31 = 0;
LABEL_24:
  JSC::SetPrivateBrandStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v57, *(_QWORD *)(a2 + 72), v31);
  v42 = v61;
  if (v61 != (WTF *)v63)
  {
    if (v61)
    {
      v61 = 0;
      LODWORD(v62) = 0;
      WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
    }
    v61 = (WTF *)v63;
  }
  v43 = v57;
  if (v57 == (WTF *)v60)
  {
    v44 = v59;
    if (v59)
    {
      v46 = 24 * v59;
      v47 = v63;
      v48 = v57;
      do
      {
        v49 = *(_OWORD *)v48;
        *((_QWORD *)v47 + 2) = *((_QWORD *)v48 + 2);
        *(_OWORD *)v47 = v49;
        v47 += 24;
        v48 = (WTF *)((char *)v48 + 24);
        v46 -= 24;
      }
      while (v46);
    }
    v45 = v58;
  }
  else
  {
    v57 = (WTF *)v60;
    v61 = v43;
    v45 = v58;
    v44 = v59;
    v43 = (WTF *)v60;
    v58 = 1;
  }
  v59 = 0;
  v62 = __PAIR64__(v44, v45);
  v64 = v60[24];
  if (v60 != (_BYTE *)v43 && v43)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree((unint64_t)v43, v35, v36, v37, v38, v39, v40, v41);
  }
  if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v56 & 0xFFFFFFFF8, v35, v36, v37, v38, v39, v40, v41);
  if (v8)
  {
    if (v64 == 3)
      v50 = 3;
    else
      v50 = 2;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_BYTE *)(a1 + 40) = v50;
    v51 = v61;
    if (v63 != (_BYTE *)v61)
    {
      if (v61)
      {
        v61 = 0;
        LODWORD(v62) = 0;
        WTF::fastFree((unint64_t)v51, v35, v36, v37, v38, v39, v40, v41);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 1;
    v52 = v61;
    if (v61 == (WTF *)v63)
    {
      v54 = HIDWORD(v62);
      if (HIDWORD(v62))
        memcpy((void *)(a1 + 16), v63, 24 * ((24 * (unint64_t)HIDWORD(v62) - 24) / 0x18) + 24);
    }
    else
    {
      v61 = (WTF *)v63;
      *(_QWORD *)a1 = v52;
      v53 = v62;
      v54 = HIDWORD(v62);
      LODWORD(v62) = 1;
      *(_DWORD *)(a1 + 8) = v53;
    }
    HIDWORD(v62) = 0;
    *(_DWORD *)(a1 + 12) = v54;
    *(_BYTE *)(a1 + 40) = v64;
  }
  v55 = __ldxr(v13);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_54;
  }
  if (__stlxr(0, v13))
LABEL_54:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v36, v37, v38, v39, v40, v41);
}

void JSC::SetPrivateBrandStatus::computeForStubInfoWithoutExitSiteFeedback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  int v33;
  uint64_t v34;
  WTF *v35;
  __int128 v36;
  int v37;
  WTF *v38;
  uint64_t v39[3];
  WTF *v40;
  uint64_t v41;
  _BYTE v42[24];
  char v43;

  v5 = JSC::StructureStubInfo::summary(a2, a3);
  v13 = v5;
  if (v5 - 1 >= 3)
  {
    if (v5 > 5u || ((1 << v5) & 0x31) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19820D210);
    }
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    switch(v5)
    {
      case 0u:
        break;
      case 1u:
      case 2u:
      case 3u:
      case 5u:
        __break(0xC471u);
        JUMPOUT(0x19820D230);
      case 4u:
        if ((*(_WORD *)(a3 + 129) & 2) != 0)
          LOBYTE(v13) = 3;
        else
          LOBYTE(v13) = 2;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19820D250);
    }
    *(_BYTE *)(a1 + 40) = v13;
    return;
  }
  v40 = (WTF *)v42;
  v41 = 1;
  v43 = 1;
  if (*(_BYTE *)(a3 + 123) == 4)
  {
    v14 = *(_QWORD *)(a3 + 64);
    if (!*(_DWORD *)(v14 + 12))
    {
      LODWORD(v28) = 0;
LABEL_40:
      v29 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 1;
LABEL_41:
      if ((_DWORD)v28)
        memcpy(v29, v42, 24 * ((24 * (unint64_t)v28 - 24) / 0x18) + 24);
      goto LABEL_69;
    }
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 8 * v15);
      v17 = *(unsigned __int8 *)(v16 + 4);
      v18 = v17 > 0x20;
      v19 = (1 << v17) & 0x100000014;
      if (v18 || v19 == 0)
        break;
      v22 = *(_QWORD *)(16 * (*(_DWORD *)(v16 + 12) & 0xFFFFFFFE) + 0x40);
      if (v22 && *(_BYTE *)(v22 + 5) != 1)
      {
        v21 = *(_DWORD *)(v22 + 80);
LABEL_20:
        if (v21)
          v22 = 16 * (v21 & 0xFFFFFFFE);
        else
          v22 = 0;
      }
      v23 = *(_QWORD *)(v16 + 32);
      if (v23)
      {
        if ((v23 & 1) != 0)
          v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
        else
          v24 = *(_QWORD *)(v23 + 8);
      }
      else
      {
        v24 = 0;
      }
      v25 = JSC::Structure::setBrandTransitionFromExistingStructureConcurrently(v22, v24);
      if (!v25)
      {
        if (v13 >= 3)
        {
          if (v13 == 3)
            goto LABEL_45;
          if (v13 != 4)
          {
            if (v13 != 5)
            {
              __break(0xC471u);
              JUMPOUT(0x19820D1C0);
            }
LABEL_45:
            *(_QWORD *)a1 = a1 + 16;
            *(_QWORD *)(a1 + 8) = 1;
            __break(0xC471u);
            JUMPOUT(0x19820CF8CLL);
          }
        }
        goto LABEL_36;
      }
      v26 = *(_QWORD *)(v16 + 32);
      v39[0] = v22;
      v39[1] = v25;
      v39[2] = v26;
      if ((JSC::appendICStatusVariant<WTF::Vector<JSC::SetPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::SetPrivateBrandVariant>((uint64_t)&v40, v39, v7, v8, v9, v10, v11, v12) & 1) == 0)
      {
        if (v13 >= 3)
        {
          if (v13 != 3)
          {
            if (v13 == 4)
              goto LABEL_36;
            if (v13 != 5)
            {
              __break(0xC471u);
              JUMPOUT(0x19820D1F0);
            }
          }
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 1;
          __break(0xC471u);
          JUMPOUT(0x19820CFCCLL);
        }
        goto LABEL_36;
      }
      if (++v15 >= (unint64_t)*(unsigned int *)(v14 + 12))
      {
        v28 = HIDWORD(v41);
        v30 = v40;
        if (v41 <= HIDWORD(v41))
        {
          v31 = v40;
        }
        else
        {
          v31 = v40;
          if (HIDWORD(v41))
          {
            if (HIDWORD(v41) == 1)
            {
              v40 = (WTF *)v42;
              LODWORD(v41) = 1;
              v32 = (WTF *)v42;
            }
            else
            {
              if (HIDWORD(v41) >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x19820D258);
              }
              v33 = 24 * HIDWORD(v41);
              v32 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v41)));
              LODWORD(v41) = (v33 & 0xFFFFFFF8) / 0x18;
              v40 = v32;
            }
            v31 = v30;
            if (v32 != v30)
            {
              v34 = 24 * v28;
              v35 = v30;
              do
              {
                v36 = *(_OWORD *)v35;
                *((_QWORD *)v32 + 2) = *((_QWORD *)v35 + 2);
                *(_OWORD *)v32 = v36;
                v32 = (WTF *)((char *)v32 + 24);
                v35 = (WTF *)((char *)v35 + 24);
                v34 -= 24;
              }
              while (v34);
              v31 = v40;
            }
          }
          if (v42 != (_BYTE *)v30 && v30)
          {
            if (v31 == v30)
            {
              v40 = 0;
              LODWORD(v41) = 0;
            }
            WTF::fastFree((unint64_t)v30, v6, v7, v8, v9, v10, v11, v12);
            v31 = v40;
          }
          if (!v31)
          {
            v40 = (WTF *)v42;
            LODWORD(v41) = 1;
            LODWORD(v28) = HIDWORD(v41);
            goto LABEL_40;
          }
          LODWORD(v28) = HIDWORD(v41);
        }
        v29 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_QWORD *)(a1 + 8) = 1;
        if (v31 == (WTF *)v42)
          goto LABEL_41;
        v40 = (WTF *)v42;
        *(_QWORD *)a1 = v31;
        v37 = v41;
        LODWORD(v41) = 1;
        *(_DWORD *)(a1 + 8) = v37;
LABEL_69:
        HIDWORD(v41) = 0;
        *(_DWORD *)(a1 + 12) = v28;
        v27 = v43;
LABEL_70:
        *(_BYTE *)(a1 + 40) = v27;
        goto LABEL_71;
      }
    }
    v21 = *(_DWORD *)(v16 + 12);
    goto LABEL_20;
  }
  if (*(_BYTE *)(a3 + 123))
  {
    if (v5 - 1 >= 2)
    {
      if (v5 == 3)
      {
        *(_QWORD *)a1 = a1 + 16;
        *(_QWORD *)(a1 + 8) = 1;
        __break(0xC471u);
        JUMPOUT(0x19820D170);
      }
      __break(0xC471u);
      JUMPOUT(0x19820D190);
    }
LABEL_36:
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    if ((*(_WORD *)(a3 + 129) & 2) != 0)
      v27 = 3;
    else
      v27 = 2;
    goto LABEL_70;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 40) = 0;
LABEL_71:
  v38 = v40;
  if (v42 != (_BYTE *)v40)
  {
    if (v40)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      WTF::fastFree((unint64_t)v38, v6, v7, v8, v9, v10, v11, v12);
    }
  }
}

uint64_t JSC::SetPrivateBrandStatus::operator=(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v11 = a1 + 16;
  v10 = *(_QWORD *)a1;
  if (v10 != v11)
  {
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v11;
  }
  v12 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 2)
  {
    v14 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v14)
    {
      v15 = 24 * v14;
      do
      {
        v16 = *(_OWORD *)v12;
        *(_QWORD *)(v11 + 16) = v12[2];
        *(_OWORD *)v11 = v16;
        v11 += 24;
        v12 += 3;
        v15 -= 24;
      }
      while (v15);
    }
    v13 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = a2 + 2;
    *(_QWORD *)a1 = v12;
    v13 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 1;
  }
  *(_DWORD *)(a1 + 8) = v13;
  v17 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v17;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

void JSC::SetPrivateBrandStatus::computeFor(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ***v20;
  uint64_t v21;
  uint64_t **v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t v26;
  WTF *v27;
  WTF *v28;
  int v29;
  unsigned int v30;
  int v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF *v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  WTF *v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  WTF *v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  WTF *v80;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 hasBadCacheExitSite;
  WTF *v92;
  int v93;
  unsigned int v94;
  _BYTE v95[32];
  WTF *v96;
  unint64_t v97;
  _BYTE v98[24];
  void *v99;
  unint64_t v100;
  uint64_t v101[8];

  v11 = *a4;
  if ((*a4 & 2) != 0)
  {
    LODWORD(v12) = -1;
  }
  else if ((v11 & 1) != 0)
  {
    LODWORD(v12) = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v12 = v11 >> 36;
  }
  v87 = v12;
  hasBadCacheExitSite = JSC::hasBadCacheExitSite(a1, v12, a3, (uint64_t)a4, a5, a6, a7, a8);
  v19 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v19)
  {
LABEL_46:
    JSC::SetPrivateBrandStatus::computeForBaseline(a9, a1, a2, v87, hasBadCacheExitSite, v16, v17, v18);
    return;
  }
  v20 = *(uint64_t ****)a3;
  v21 = 8 * v19;
  while (1)
  {
    v22 = *v20;
    v23 = *a4;
    if ((*a4 & 1) != 0)
    {
      v33 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 2) != 0
        || ((v34 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v34 != 0x3FFFFFFF)
          ? (v35 = (_DWORD)v34 == -1)
          : (v35 = 1),
            v35))
      {
        v36 = 2;
      }
      else if (v34 >> 28)
      {
        v39 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v39 = v33;
        *(_DWORD *)(v39 + 8) = v34;
        v36 = 1;
        v33 = v39;
      }
      else
      {
        v36 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
        v33 = v34 << 36;
      }
      v37 = v33 | v36;
      v100 = v33 | v36;
      JSC::ICStatusContext::get((uint64_t)v22, (uint64_t *)&v100, v13, v14, v15, v16, v17, v18, (uint64_t)v101);
      if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v37 & 0xFFFFFFFF8, v38, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      v100 = *a4;
      JSC::ICStatusContext::get((uint64_t)v22, (uint64_t *)&v100, v13, v14, v15, v16, v17, v18, (uint64_t)v101);
    }
    if (!v101[0])
      goto LABEL_31;
    v96 = (WTF *)v98;
    v97 = 1;
    LOBYTE(v99) = 0;
    v24 = (unsigned __int8 *)(v22[1] + 2);
    if (__ldaxr(v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, v24))
    {
      goto LABEL_13;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v24);
LABEL_13:
    JSC::SetPrivateBrandStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v92, v22[1][9], v101[0]);
    v27 = v96;
    if (v96 != (WTF *)v98)
    {
      if (v96)
      {
        v96 = 0;
        LODWORD(v97) = 0;
        WTF::fastFree((unint64_t)v27, (void *)v26, v13, v14, v15, v16, v17, v18);
      }
      v96 = (WTF *)v98;
    }
    v28 = v92;
    if (v92 == (WTF *)v95)
    {
      v30 = v94;
      if (v94)
        memcpy(v98, v95, 24 * ((24 * (unint64_t)v94 - 24) / 0x18) + 24);
      v29 = v93;
    }
    else
    {
      v92 = (WTF *)v95;
      v96 = v28;
      v29 = v93;
      v30 = v94;
      v93 = 1;
    }
    v97 = __PAIR64__(v30, v29);
    LOBYTE(v99) = v95[24];
    v31 = __ldxr(v24);
    if (v31 != 1)
    {
      __clrex();
LABEL_26:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v13, v14, v15, v16, v17, v18);
      goto LABEL_27;
    }
    if (__stlxr(0, v24))
      goto LABEL_26;
LABEL_27:
    if ((_BYTE)v99)
      break;
    v32 = v96;
    if (v98 != (_BYTE *)v96)
    {
      if (v96)
      {
        v96 = 0;
        LODWORD(v97) = 0;
        WTF::fastFree((unint64_t)v32, (void *)v26, v13, v14, v15, v16, v17, v18);
      }
    }
LABEL_31:
    ++v20;
    v21 -= 8;
    if (!v21)
      goto LABEL_46;
  }
  v40 = (uint64_t *)(*a4 & 0xFFFFFFFF8);
  if ((*a4 & 1) == 0)
    goto LABEL_49;
  v82 = *v40;
  if ((*a4 & 2) != 0 || (v83 = *(_DWORD *)((*a4 & 0xFFFFFFFF8) + 8), v83 == 0x3FFFFFFF) || v83 == -1)
  {
    v84 = 2;
  }
  else if (v83 >> 28)
  {
    v86 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v86 = v82;
    *(_DWORD *)(v86 + 8) = v83;
    v84 = 1;
    v82 = v86;
  }
  else
  {
    v84 = *v40;
    v82 = 0;
  }
  v85 = v82 | v84;
  v40 = (uint64_t *)(v85 & 0xFFFFFFFF8);
  if ((v85 & 1) != 0)
  {
    v41 = 0;
    v42 = (uint64_t *)*v40;
  }
  else
  {
LABEL_49:
    v41 = 1;
    v42 = v40;
  }
  if (v42)
  {
    v43 = v42 != *v22;
    if ((v41 & 1) == 0)
      goto LABEL_75;
  }
  else
  {
    v43 = 0;
    if ((v41 & 1) != 0)
      goto LABEL_52;
LABEL_75:
    if (v40)
      WTF::fastFree((unint64_t)v40, (void *)v26, v13, v14, v15, v16, v17, v18);
  }
LABEL_52:
  if (v43)
  {
    if ((hasBadCacheExitSite & 2) != 0)
    {
      v35 = v99 == 3;
      *(_QWORD *)a9 = a9 + 16;
      if (v35)
        v50 = 3;
      else
        v50 = 2;
      *(_QWORD *)(a9 + 8) = 1;
    }
    else
    {
      v44 = HIDWORD(v97);
      v45 = a9 + 16;
      *(_QWORD *)a9 = a9 + 16;
      *(_DWORD *)(a9 + 8) = 1;
      *(_DWORD *)(a9 + 12) = v44;
      if (v44 >= 2)
      {
        if (v44 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x19820DAB8);
        }
        v46 = 24 * v44;
        v45 = WTF::fastMalloc((WTF *)(24 * v44));
        *(_DWORD *)(a9 + 8) = (v46 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a9 = v45;
        v44 = HIDWORD(v97);
      }
      if ((_DWORD)v44)
      {
        v47 = v96;
        v48 = 24 * v44;
        do
        {
          v49 = *(_OWORD *)v47;
          *(_QWORD *)(v45 + 16) = *((_QWORD *)v47 + 2);
          *(_OWORD *)v45 = v49;
          v45 += 24;
          v47 = (WTF *)((char *)v47 + 24);
          v48 -= 24;
        }
        while (v48);
      }
      v50 = (char)v99;
    }
    *(_BYTE *)(a9 + 40) = v50;
    goto LABEL_135;
  }
  JSC::SetPrivateBrandStatus::computeForBaseline(a9, a1, a2, v87, hasBadCacheExitSite, v16, v17, v18);
  v26 = v99;
  if (!(_BYTE)v99)
    goto LABEL_135;
  v51 = *(unsigned __int8 *)(a9 + 40);
  if ((v51 - 2) < 2)
    goto LABEL_96;
  if (v51 != 1)
  {
    if (*(_BYTE *)(a9 + 40))
      goto LABEL_153;
    if (&v96 != (WTF **)a9)
    {
      v52 = *(_DWORD *)(a9 + 12);
      v53 = HIDWORD(v97);
      if (v52 > HIDWORD(v97))
      {
        *(_DWORD *)(a9 + 12) = HIDWORD(v97);
        goto LABEL_125;
      }
      v60 = *(_DWORD *)(a9 + 8);
      if (HIDWORD(v97) > v60)
      {
        if (v60)
        {
          if (v52)
            *(_DWORD *)(a9 + 12) = 0;
          v61 = *(_QWORD *)a9;
          if (a9 + 16 != *(_QWORD *)a9 && v61)
          {
            *(_QWORD *)a9 = 0;
            *(_DWORD *)(a9 + 8) = 0;
            WTF::fastFree(v61, (void *)v26, v13, v14, v15, v16, v17, v18);
            v61 = *(_QWORD *)a9;
          }
          if (v61)
          {
            v60 = *(_DWORD *)(a9 + 8);
          }
          else
          {
            *(_QWORD *)a9 = a9 + 16;
            v60 = 1;
            *(_DWORD *)(a9 + 8) = 1;
          }
        }
        if (v60 < HIDWORD(v97))
        {
          v65 = *(_QWORD *)a9;
          v66 = *(unsigned int *)(a9 + 12);
          if (HIDWORD(v97) >= 2)
          {
            if (HIDWORD(v97) < 0xAAAAAAB)
            {
              v67 = 24 * HIDWORD(v97);
              v68 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v97)));
              *(_DWORD *)(a9 + 8) = (v67 & 0xFFFFFFF8) / 0x18;
              *(_QWORD *)a9 = v68;
              goto LABEL_116;
            }
LABEL_153:
            __break(0xC471u);
            JUMPOUT(0x19820DAB0);
          }
          v68 = a9 + 16;
          *(_QWORD *)a9 = a9 + 16;
          *(_DWORD *)(a9 + 8) = 1;
LABEL_116:
          if ((_DWORD)v66)
          {
            v69 = 24 * v66;
            v70 = v65;
            do
            {
              v71 = *(_OWORD *)v70;
              *(_QWORD *)(v68 + 16) = *(_QWORD *)(v70 + 16);
              *(_OWORD *)v68 = v71;
              v68 += 24;
              v70 += 24;
              v69 -= 24;
            }
            while (v69);
          }
          if (a9 + 16 != v65 && v65)
          {
            if (*(_QWORD *)a9 == v65)
            {
              *(_QWORD *)a9 = 0;
              *(_DWORD *)(a9 + 8) = 0;
            }
            WTF::fastFree(v65, (void *)v26, v13, v14, v15, v16, v17, v18);
          }
        }
      }
      v53 = *(_DWORD *)(a9 + 12);
LABEL_125:
      v72 = v96;
      v73 = *(_QWORD *)a9;
      if (v53)
      {
        v74 = 24 * v53;
        do
        {
          v75 = *(_OWORD *)v72;
          *(_QWORD *)(v73 + 16) = *((_QWORD *)v72 + 2);
          *(_OWORD *)v73 = v75;
          v73 += 24;
          v72 = (WTF *)((char *)v72 + 24);
          v74 -= 24;
        }
        while (v74);
        v72 = v96;
        v53 = *(_DWORD *)(a9 + 12);
        v73 = *(_QWORD *)a9;
      }
      if (v53 != HIDWORD(v97))
      {
        v76 = v73 + 24 * v53;
        v77 = (char *)v72 + 24 * v53;
        v78 = 24 * HIDWORD(v97) - 24 * v53;
        do
        {
          v79 = *(_OWORD *)v77;
          *(_QWORD *)(v76 + 16) = *((_QWORD *)v77 + 2);
          *(_OWORD *)v76 = v79;
          v76 += 24;
          v77 += 24;
          v78 -= 24;
        }
        while (v78);
        v53 = HIDWORD(v97);
      }
      *(_DWORD *)(a9 + 12) = v53;
      v26 = v99;
    }
    *(_BYTE *)(a9 + 40) = v26;
    goto LABEL_135;
  }
  if (v99 != 1)
  {
LABEL_96:
    JSC::SetPrivateBrandStatus::merge(JSC::SetPrivateBrandStatus const&)::$_0::operator()(a9, (void *)v26, v13, v14, v15, v16, v17, v18);
    goto LABEL_135;
  }
  if (HIDWORD(v97))
  {
    v54 = (uint64_t *)v96;
    v55 = 24 * HIDWORD(v97);
    while ((JSC::appendICStatusVariant<WTF::Vector<JSC::SetPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::SetPrivateBrandVariant>(a9, v54, v13, v14, v15, v16, v17, v18) & 1) != 0)
    {
      v54 += 3;
      v55 -= 24;
      if (!v55)
        goto LABEL_82;
    }
    v26 = v99;
    goto LABEL_96;
  }
LABEL_82:
  v56 = *(unsigned int *)(a9 + 12);
  if (*(_DWORD *)(a9 + 8) > v56)
  {
    v57 = *(WTF **)a9;
    v58 = *(WTF **)a9;
    if ((_DWORD)v56)
    {
      if ((_DWORD)v56 == 1)
      {
        v59 = a9 + 16;
        *(_QWORD *)a9 = a9 + 16;
        *(_DWORD *)(a9 + 8) = 1;
      }
      else
      {
        if (v56 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x19820DAC0);
        }
        v59 = WTF::fastMalloc((WTF *)(24 * v56));
        *(_DWORD *)(a9 + 8) = 24 * (int)v56 / 0x18u;
        *(_QWORD *)a9 = v59;
      }
      v58 = v57;
      if ((WTF *)v59 != v57)
      {
        v62 = 24 * v56;
        v63 = v57;
        do
        {
          v64 = *(_OWORD *)v63;
          *(_QWORD *)(v59 + 16) = *((_QWORD *)v63 + 2);
          *(_OWORD *)v59 = v64;
          v59 += 24;
          v63 = (WTF *)((char *)v63 + 24);
          v62 -= 24;
        }
        while (v62);
        v58 = *(WTF **)a9;
      }
    }
    if ((WTF *)(a9 + 16) != v57 && v57)
    {
      if (v58 == v57)
      {
        *(_QWORD *)a9 = 0;
        *(_DWORD *)(a9 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v57, (void *)v26, v13, v14, v15, v16, v17, v18);
      v58 = *(WTF **)a9;
    }
    if (!v58)
    {
      *(_QWORD *)a9 = a9 + 16;
      *(_DWORD *)(a9 + 8) = 1;
    }
  }
LABEL_135:
  v80 = v96;
  if (v98 != (_BYTE *)v96 && v96 != 0)
  {
    v96 = 0;
    LODWORD(v97) = 0;
    WTF::fastFree((unint64_t)v80, (void *)v26, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::SetPrivateBrandStatus::merge(JSC::SetPrivateBrandStatus const&)::$_0::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v11;
  unint64_t v12;
  char v13;

  v9 = a1 + 16;
  if (*(_BYTE *)(a1 + 40) == 3 || a2 == 3)
    v11 = 3;
  else
    v11 = 2;
  v13 = v11;
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != v9)
  {
    if (v12)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v9;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 40) = v13;
}

uint64_t JSC::SetPrivateBrandStatus::filter(uint64_t result, _QWORD *a2)
{
  unsigned int **v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int **v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int **v9;
  unint64_t v10;
  unsigned int **v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;

  if (*(_BYTE *)(result + 40) == 1)
  {
    v2 = *(unsigned int ***)result;
    v3 = *(_DWORD *)(result + 12);
    v4 = *(_QWORD *)result + 24 * v3;
    if (v3)
    {
      v3 = 0;
      v5 = (unsigned int **)v4;
      v6 = v4;
      while (1)
      {
        v7 = *v2;
        v8 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*a2 & 1) != 0)
        {
          v17 = *v8;
          if (!(_DWORD)v17)
            goto LABEL_6;
          if (*((unsigned int **)v8 + 1) != v7)
          {
            v18 = 0;
            v19 = v8 + 4;
            while (v17 - 1 != v18)
            {
              v20 = *(unsigned int **)&v19[2 * v18++];
              if (v20 == v7)
              {
                if (v18 >= v17)
                  break;
                goto LABEL_17;
              }
            }
LABEL_6:
            v9 = v2;
            if (v6 != *(_QWORD *)result + 24 * *(unsigned int *)(result + 12))
            {
              if (v5 == v2)
              {
                v9 = (unsigned int **)v6;
              }
              else
              {
                if ((unint64_t)v5 <= v6)
                {
                  v14 = 0;
                  v13 = ((char *)v2 - (char *)v5) / 24;
                  do
                  {
                    v15 = v6 + 24 * v13 - 24 + v14 * 8;
                    v16 = *(_OWORD *)&v2[v14 - 3];
                    *(_QWORD *)(v15 + 16) = v2[v14 - 1];
                    *(_OWORD *)v15 = v16;
                    v14 -= 3;
                  }
                  while (&v2[v14] != v5);
                }
                else
                {
                  v10 = v6;
                  v11 = v5;
                  do
                  {
                    v12 = *(_OWORD *)v11;
                    *(_QWORD *)(v10 + 16) = v11[2];
                    *(_OWORD *)v10 = v12;
                    v10 += 24;
                    v11 += 3;
                  }
                  while (v11 != v2);
                  v13 = 0xAAAAAAAAAAAAAAABLL * (v2 - v5);
                }
                v9 = (unsigned int **)(v6 + 24 * v13);
              }
            }
            v5 = v2 + 3;
            ++v3;
            v6 = (unint64_t)v9;
          }
        }
        else if (v7 != v8)
        {
          goto LABEL_6;
        }
LABEL_17:
        v2 += 3;
        if ((unint64_t)v2 >= v4)
        {
          v2 = *(unsigned int ***)result;
          v21 = *(_DWORD *)(result + 12);
          v4 = v6;
          goto LABEL_27;
        }
      }
    }
    v21 = 0;
    v5 = *(unsigned int ***)result;
LABEL_27:
    v22 = (char *)&v2[3 * v21];
    if (v5 != (unsigned int **)v22)
    {
      if ((unint64_t)v5 <= v4)
      {
        v24 = v4 + 24 * ((v22 - (char *)v5) / 24) - 24;
        do
        {
          v25 = *(_OWORD *)(v22 - 24);
          *(_QWORD *)(v24 + 16) = *((_QWORD *)v22 - 1);
          *(_OWORD *)v24 = v25;
          v24 -= 24;
          v22 -= 24;
        }
        while (v22 != (char *)v5);
      }
      else
      {
        do
        {
          v23 = *(_OWORD *)v5;
          *(_QWORD *)(v4 + 16) = v5[2];
          *(_OWORD *)v4 = v23;
          v4 += 24;
          v5 += 3;
        }
        while (v5 != (unsigned int **)v22);
      }
    }
    v26 = *(_DWORD *)(result + 12) - v3;
    *(_DWORD *)(result + 12) = v26;
    if (!v26)
      *(_BYTE *)(result + 40) = 0;
  }
  return result;
}

uint64_t JSC::SetPrivateBrandStatus::singleIdentifier(JSC::SetPrivateBrandStatus *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = *((unsigned int *)this + 3);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD *)this;
  result = *(_QWORD *)(*(_QWORD *)this + 16);
  if (result && v1 >= 2)
  {
    if ((result & 1) != 0)
    {
      v4 = (uint64_t *)(v2 + 40);
      v5 = v1 - 1;
      while (1)
      {
        v7 = *v4;
        v4 += 3;
        v6 = v7;
        if (!v7)
          break;
        v8 = (v6 & 1) != 0 ? v6 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v6 + 8);
        if (v8 != (result & 0xFFFFFFFFFFFFFFFELL))
          break;
        if (!--v5)
          return result;
      }
    }
    else
    {
      v9 = v1 - 1;
      v10 = (uint64_t *)(v2 + 40);
      while (1)
      {
        v12 = *v10;
        v10 += 3;
        v11 = v12;
        if (!v12)
          break;
        v13 = (v11 & 1) != 0 ? v11 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v11 + 8);
        if (v13 != *(_QWORD *)(result + 8))
          break;
        if (!--v9)
          return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t JSC::SetPrivateBrandStatus::visitAggregate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = 24 * v2;
    v5 = (uint64_t *)(*(_QWORD *)result + 16);
    do
    {
      v6 = *v5;
      v5 += 3;
      v7 = v6 & 1;
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 0;
      if (v8)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

void JSC::SetPrivateBrandStatus::visitAggregate(JSC::SetPrivateBrandStatus *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v16;

  v8 = *((unsigned int *)this + 3);
  if ((_DWORD)v8)
  {
    v10 = 24 * v8;
    v11 = (unint64_t *)(*(_QWORD *)this + 16);
    do
    {
      v13 = *v11;
      v11 += 3;
      v12 = v13;
      v14 = v13 & 1;
      if (v13)
        v15 = v14 == 0;
      else
        v15 = 0;
      if (!v15)
        goto LABEL_7;
      if ((v12 & 8) != 0)
      {
        if ((*(_BYTE *)(v12 - 79) & 1) == 0)
          goto LABEL_14;
      }
      else
      {
        v16 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v16)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v16, a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
        {
LABEL_14:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
          goto LABEL_7;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_14;
LABEL_7:
      v10 -= 24;
    }
    while (v10);
  }
}

uint64_t JSC::SetPrivateBrandVariant::finalize(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if ((*a1 & 8) != 0)
  {
    if ((*(_BYTE *)(v2 - 79) & 1) == 0)
      return 0;
  }
  else if (*(_DWORD *)(v2 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
         || ((*(_QWORD *)((v2 & 0xFFFFFFFFFFFFC000) + 8 * ((v2 >> 10) & 0xF) + 0x28) >> (v2 >> 4)) & 1) == 0)
  {
    return 0;
  }
  v3 = a1[1];
  if (!v3)
    return 1;
  if ((v3 & 8) != 0)
    return (*(_BYTE *)(v3 - 79) & 1) != 0;
  return *(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
      && ((*(_QWORD *)((v3 & 0xFFFFFFFFFFFFC000) + 8 * ((v3 >> 10) & 0xF) + 0x28) >> (v3 >> 4)) & 1) != 0;
}

void WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  uint8x8_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  JSC::JITStubRoutine *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::TupleHash<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>::hash<0ul>(a2);
  v11 = a2[5];
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = v9 & ((0xD7862706ELL * (unint64_t)(277951225 * v10 + 95187966 * (v13 ^ HIWORD(v13)))) >> 4);
  v15 = (unsigned __int8 *)(v8 + 16 * v14);
  if (!WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::isEmptyBucket((uint64_t)v15, v16))
  {
    v42 = a4;
    v35 = 0;
    v46 = a2[1];
    v47 = *a2;
    v44 = a2[3];
    v45 = a2[2];
    v36 = 1;
    v43 = a2[4];
    do
    {
      v37 = *v15;
      if (v37 == v47 && v15[1] == v46 && v15[2] == v45)
      {
        v38 = v15[3] == v44 && v15[4] == v43;
        if (v38 && v15[5] == v11)
        {
          if (v8)
            v41 = *(unsigned int *)(v8 - 4);
          else
            v41 = 0;
          a4 = v42;
          v34 = 0;
          v33 = v8 + 16 * v41;
          goto LABEL_12;
        }
      }
      if (v37 == 126)
        v35 = v15;
      v14 = (v14 + v36) & v9;
      v15 = (unsigned __int8 *)(v8 + 16 * v14);
      ++v36;
    }
    while (!WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::isEmptyBucket((uint64_t)v15, v24));
    a4 = v42;
    if (v35)
    {
      *((_WORD *)v35 + 2) = -256;
      *(_DWORD *)v35 = 127;
      *((_QWORD *)v35 + 1) = 0;
      --*(_DWORD *)(*a1 - 16);
      LOBYTE(v11) = a2[5];
      v15 = v35;
    }
  }
  *(_WORD *)v15 = *(_WORD *)a2;
  v15[2] = a2[2];
  v15[3] = a2[3];
  v15[4] = a2[4];
  v15[5] = v11;
  v25 = *a3;
  *a3 = 0;
  v26 = (JSC::JITStubRoutine *)*((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v25;
  if (v26)
  {
    v40 = *((_DWORD *)v26 + 4) - 1;
    *((_DWORD *)v26 + 4) = v40;
    if (!v40)
      JSC::JITStubRoutine::observeZeroRefCount(v26, v17, v18, v19, v20, v21, v22, v23, v24);
  }
  v27 = *a1;
  if (*a1)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_11;
    goto LABEL_33;
  }
  if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v39 = 8;
LABEL_36:
      v15 = (unsigned __int8 *)WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::rehash(a1, v39, (int *)v15);
      v29 = *a1;
      if (*a1)
        v32 = *(unsigned int *)(v29 - 4);
      else
        v32 = 0;
      goto LABEL_11;
    }
LABEL_33:
    v39 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    goto LABEL_36;
  }
LABEL_11:
  v33 = v29 + 16 * v32;
  v34 = 1;
LABEL_12:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v34;
}

void WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::add<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int i;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::TupleHash<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>::hash<0ul>(a2);
  v14 = 0;
  v15 = *((_QWORD *)a2 + 1);
  v16 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (0xD7862706ELL * (unint64_t)(277951225 * v10 + 95187966 * ((v18 >> 31) ^ v18))) >> 4;
  v20 = *a2;
  v21 = a2[1];
  for (i = 1; ; ++i)
  {
    v19 = v19 & v9;
    v23 = (unsigned __int8 *)(v8 + 32 * v19);
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[2];
    v27 = v23[3];
    v28 = v23[4];
    v29 = v24 == 127 && v25 == 0;
    v30 = v29 && (_DWORD)v26 == 0;
    v31 = v30 && (_DWORD)v27 == 0;
    v32 = v31 && (_DWORD)v28 == 0;
    if (v32 && !*((_QWORD *)v23 + 1))
      break;
    v36 = v24 == v20 && v25 == v21 && (_DWORD)v26 == a2[2] && (_DWORD)v27 == a2[3] && (_DWORD)v28 == a2[4];
    if (v36 && *((_QWORD *)v23 + 1) == v15)
    {
      v37 = 0;
      v38 = v8 + 32 * *(unsigned int *)(v8 - 4);
      goto LABEL_61;
    }
    if (v24 == 126)
      v14 = (unsigned __int8 *)(v8 + 32 * v19);
    LODWORD(v19) = i + v19;
  }
  if (v14)
  {
    *(_QWORD *)v14 = 127;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    --*(_DWORD *)(*a1 - 16);
    LOBYTE(v20) = *a2;
    LOBYTE(v21) = a2[1];
    v15 = *((_QWORD *)a2 + 1);
    v23 = v14;
  }
  *v23 = v20;
  v23[1] = v21;
  v23[2] = a2[2];
  v23[3] = a2[3];
  v23[4] = a2[4];
  *((_QWORD *)v23 + 1) = v15;
  *((_QWORD *)v23 + 2) = *a3;
  v39 = a3[1];
  a3[1] = 0;
  v40 = (unsigned int *)*((_QWORD *)v23 + 3);
  *((_QWORD *)v23 + 3) = v39;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, v26, v27, v28, 0, v11, v12, v13);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  v43 = *a1;
  if (*a1)
    v44 = *(_DWORD *)(v43 - 12) + 1;
  else
    v44 = 1;
  *(_DWORD *)(v43 - 12) = v44;
  v45 = *a1;
  if (*a1)
    v46 = *(_DWORD *)(v45 - 12);
  else
    v46 = 0;
  v47 = (*(_DWORD *)(v45 - 16) + v46);
  v48 = *(unsigned int *)(v45 - 4);
  if (v48 > 0x400)
  {
    if (v48 <= 2 * v47)
      goto LABEL_55;
  }
  else if (3 * v48 <= 4 * v47)
  {
    if (!(_DWORD)v48)
    {
      v49 = 8;
LABEL_57:
      v23 = (unsigned __int8 *)WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>>::rehash(a1, v49, v23);
      v45 = *a1;
      if (*a1)
        v48 = *(unsigned int *)(v45 - 4);
      else
        v48 = 0;
      goto LABEL_60;
    }
LABEL_55:
    v49 = (_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48));
    goto LABEL_57;
  }
LABEL_60:
  v38 = v45 + 32 * v48;
  v37 = 1;
LABEL_61:
  *(_QWORD *)a4 = v23;
  *(_QWORD *)(a4 + 8) = v38;
  *(_BYTE *)(a4 + 16) = v37;
}

void JSC::dumpSpeculation(JSC *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  float v5;
  unint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  const char *v11;
  WTF::PrintStream *v12;
  float v13;
  WTF::PrintStream *v14;
  float v15;
  int v16;
  WTF::PrintStream *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  char *v21;
  size_t v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  char *v27;
  size_t v28;
  WTF::PrintStream *v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  char *v33;
  size_t v34;
  WTF::PrintStream *v35;
  uint64_t v36;
  WTF::PrintStream *v37;
  float v38;
  char *v39;
  size_t v40;
  WTF::PrintStream *v41;
  uint64_t v42;
  WTF::PrintStream *v43;
  float v44;
  char *v45;
  size_t v46;
  WTF::PrintStream *v47;
  uint64_t v48;
  WTF::PrintStream *v49;
  float v50;
  char *v51;
  size_t v52;
  WTF::PrintStream *v53;
  uint64_t v54;
  WTF::PrintStream *v55;
  float v56;
  char *v57;
  size_t v58;
  WTF::PrintStream *v59;
  uint64_t v60;
  WTF::PrintStream *v61;
  float v62;
  char *v63;
  size_t v64;
  WTF::PrintStream *v65;
  uint64_t v66;
  WTF::PrintStream *v67;
  float v68;
  char *v69;
  size_t v70;
  WTF::PrintStream *v71;
  uint64_t v72;
  WTF::PrintStream *v73;
  float v74;
  char *v75;
  size_t v76;
  WTF::PrintStream *v77;
  uint64_t v78;
  WTF::PrintStream *v79;
  float v80;
  char *v81;
  size_t v82;
  WTF::PrintStream *v83;
  uint64_t v84;
  WTF::PrintStream *v85;
  float v86;
  char *v87;
  size_t v88;
  WTF::PrintStream *v89;
  uint64_t v90;
  WTF::PrintStream *v91;
  float v92;
  char *v93;
  size_t v94;
  WTF::PrintStream *v95;
  uint64_t v96;
  WTF::PrintStream *v97;
  float v98;
  char *v99;
  size_t v100;
  WTF::PrintStream *v101;
  uint64_t v102;
  WTF::PrintStream *v103;
  float v104;
  char *v105;
  size_t v106;
  WTF::PrintStream *v107;
  uint64_t v108;
  WTF::PrintStream *v109;
  float v110;
  char *v111;
  size_t v112;
  WTF::PrintStream *v113;
  uint64_t v114;
  WTF::PrintStream *v115;
  float v116;
  char *v117;
  size_t v118;
  WTF::PrintStream *v119;
  uint64_t v120;
  WTF::PrintStream *v121;
  float v122;
  char *v123;
  size_t v124;
  WTF::PrintStream *v125;
  uint64_t v126;
  WTF::PrintStream *v127;
  float v128;
  char *v129;
  size_t v130;
  WTF::PrintStream *v131;
  uint64_t v132;
  WTF::PrintStream *v133;
  float v134;
  char *v135;
  size_t v136;
  WTF::PrintStream *v137;
  uint64_t v138;
  WTF::PrintStream *v139;
  float v140;
  char *v141;
  size_t v142;
  WTF::PrintStream *v143;
  uint64_t v144;
  WTF::PrintStream *v145;
  float v146;
  char *v147;
  size_t v148;
  WTF::PrintStream *v149;
  uint64_t v150;
  WTF::PrintStream *v151;
  float v152;
  char *v153;
  size_t v154;
  WTF::PrintStream *v155;
  uint64_t v156;
  WTF::PrintStream *v157;
  float v158;
  char *v159;
  size_t v160;
  WTF::PrintStream *v161;
  uint64_t v162;
  WTF::PrintStream *v163;
  float v164;
  char *v165;
  size_t v166;
  WTF::PrintStream *v167;
  uint64_t v168;
  WTF::PrintStream *v169;
  float v170;
  char *v171;
  size_t v172;
  WTF::PrintStream *v173;
  uint64_t v174;
  WTF::PrintStream *v175;
  float v176;
  char *v177;
  size_t v178;
  WTF::PrintStream *v179;
  uint64_t v180;
  WTF::PrintStream *v181;
  float v182;
  char *v183;
  size_t v184;
  WTF::PrintStream *v185;
  uint64_t v186;
  WTF::PrintStream *v187;
  float v188;
  char *v189;
  size_t v190;
  uint64_t v191;
  WTF::PrintStream *v192;
  float v193;
  char *v194;
  size_t v195;
  WTF::PrintStream *v196;
  uint64_t v197;
  WTF::PrintStream *v198;
  float v199;
  char *v200;
  size_t v201;
  const char *v202;
  WTF::PrintStream *v203;
  uint64_t v204;
  WTF::PrintStream *v205;
  float v206;
  char *v207;
  size_t v208;
  WTF::PrintStream *v209;
  uint64_t v210;
  WTF::PrintStream *v211;
  float v212;
  char *v213;
  size_t v214;
  WTF::PrintStream *v215;
  uint64_t v216;
  WTF::PrintStream *v217;
  float v218;
  char *v219;
  size_t v220;
  WTF::PrintStream *v221;
  uint64_t v222;
  WTF::PrintStream *v223;
  float v224;
  char *v225;
  size_t v226;
  WTF::PrintStream *v227;
  uint64_t v228;
  WTF::PrintStream *v229;
  float v230;
  char *v231;
  size_t v232;
  WTF::PrintStream *v233;
  uint64_t v234;
  WTF::PrintStream *v235;
  float v236;
  char *v237;
  size_t v238;
  WTF::PrintStream *v239;
  uint64_t v240;
  WTF::PrintStream *v241;
  float v242;
  char *v243;
  size_t v244;
  WTF::PrintStream *v245;
  uint64_t v246;
  WTF::PrintStream *v247;
  float v248;
  char *v249;
  size_t v250;
  const char *v251;
  uint64_t v252;
  WTF::PrintStream *v253;
  float v254;
  char *v255;
  size_t v256;
  WTF::PrintStream *v257;
  uint64_t v258;
  WTF::PrintStream *v259;
  float v260;
  char *v261;
  size_t v262;
  WTF::PrintStream *v263;
  uint64_t v264;
  WTF::PrintStream *v265;
  float v266;
  char *v267;
  size_t v268;
  WTF::PrintStream *v269;
  uint64_t v270;
  WTF::PrintStream *v271;
  float v272;
  char *v273;
  size_t v274;
  WTF::PrintStream *v275;
  uint64_t v276;
  WTF::PrintStream *v277;
  float v278;
  char *v279;
  size_t v280;
  WTF::PrintStream *v281;
  uint64_t v282;
  WTF::PrintStream *v283;
  float v284;
  char *v285;
  size_t v286;
  uint64_t v287;
  WTF::PrintStream *v288;
  float v289;
  char *v290;
  size_t v291;
  uint64_t v292;
  WTF::PrintStream *v293;
  float v294;
  char *v295;
  size_t v296;
  const char *v297;
  uint64_t v298;
  WTF::PrintStream *v299;
  float v300;
  uint64_t v301;
  WTF::PrintStream *v302;
  float v303;
  uint64_t v304;
  WTF::PrintStream *v305;
  float v306;
  uint64_t v307;
  WTF::PrintStream *v308;
  float v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF *v317;
  size_t v318;
  unint64_t v319;
  WTF::PrintStream *v320;
  uint64_t v321;
  WTF::PrintStream *v322;
  float v323;
  const char *v324;
  int v325;
  int v326;
  char v327;
  void (**v328)(WTF::StringPrintStream *__hidden);
  WTF *v329;
  __int128 v330;
  _BYTE v331[128];
  uint64_t v332;

  v332 = *MEMORY[0x1E0C80C00];
  v328 = off_1E3572250;
  v329 = (WTF *)v331;
  v330 = xmmword_199122F80;
  v331[0] = 0;
  if (!a2)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)this + 32))(this);
    v8 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v10);
    WTF::printExpectedCStringHelper(v9, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    v11 = "None";
    goto LABEL_372;
  }
  if ((~(unint64_t)a2 & 0x2800FFFFFFF7) == 0)
  {
    v4 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v5);
    WTF::printExpectedCStringHelper(v4, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    v328[5]((WTF::StringPrintStream *)&v328);
    v328[5]((WTF::StringPrintStream *)&v328);
    WTF::PrintStream::printf((WTF::PrintStream *)&v328, "%s", "Cell");
    LODWORD(v6) = 1;
    goto LABEL_240;
  }
  if ((~(unint64_t)a2 & 0x20000FFFFFF7) != 0)
  {
    if ((a2 & 0x80000000) != 0)
    {
      v14 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v15);
      WTF::printExpectedCStringHelper(v14, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      v328[5]((WTF::StringPrintStream *)&v328);
      v328[5]((WTF::StringPrintStream *)&v328);
      WTF::PrintStream::printf((WTF::PrintStream *)&v328, "%s", "OtherCell");
      v328[5]((WTF::StringPrintStream *)&v328);
      v16 = 1;
      if ((a2 & 0x8000000) != 0)
      {
LABEL_17:
        v6 = ((unint64_t)a2 >> 31) & 1;
        v17 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
        v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 32))(v17);
        v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
        if ((a2 & 0x80000000) != 0)
        {
          v21 = "|";
          v22 = 1;
        }
        else
        {
          v21 = "";
          v22 = 0;
        }
        WTF::StringImpl::utf8ForCharacters(v21, v22, (uint64_t)&v325, v20);
        WTF::printExpectedCStringHelper(v19, "StringView", &v325);
        if (v326 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 40))(v17);
        WTF::PrintStream::printf(v17, "%s", "OtherObj");
        v328[5]((WTF::StringPrintStream *)&v328);
        v16 = 1;
        if ((a2 & 1) == 0)
        {
LABEL_27:
          LODWORD(v6) = 0;
          if ((a2 & 2) != 0)
            goto LABEL_28;
          goto LABEL_34;
        }
LABEL_21:
        v23 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
        v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 32))(v23);
        v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        if (v16)
        {
          v27 = "|";
          v28 = 1;
        }
        else
        {
          v27 = "";
          v28 = 0;
        }
        WTF::StringImpl::utf8ForCharacters(v27, v28, (uint64_t)&v325, v26);
        WTF::printExpectedCStringHelper(v25, "StringView", &v325);
        if (v326 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
        WTF::PrintStream::printf(v23, "%s", "Final");
        v328[5]((WTF::StringPrintStream *)&v328);
        v16 = 1;
        if ((a2 & 2) != 0)
        {
LABEL_28:
          v29 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
          v30 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v29 + 32))(v29);
          v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
          if (v16)
          {
            v33 = "|";
            v34 = 1;
          }
          else
          {
            v33 = "";
            v34 = 0;
          }
          WTF::StringImpl::utf8ForCharacters(v33, v34, (uint64_t)&v325, v32);
          WTF::printExpectedCStringHelper(v31, "StringView", &v325);
          if (v326 != -1)
            ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v29 + 40))(v29);
          WTF::PrintStream::printf(v29, "%s", "Array");
          v328[5]((WTF::StringPrintStream *)&v328);
          v16 = 1;
          if ((a2 & 0x10) == 0)
          {
LABEL_41:
            LODWORD(v6) = 0;
            if ((a2 & 0x20) != 0)
              goto LABEL_42;
            goto LABEL_48;
          }
LABEL_35:
          v35 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
          v36 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v35 + 32))(v35);
          v37 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
          if (v16)
          {
            v39 = "|";
            v40 = 1;
          }
          else
          {
            v39 = "";
            v40 = 0;
          }
          WTF::StringImpl::utf8ForCharacters(v39, v40, (uint64_t)&v325, v38);
          WTF::printExpectedCStringHelper(v37, "StringView", &v325);
          if (v326 != -1)
            ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v35 + 40))(v35);
          WTF::PrintStream::printf(v35, "%s", "Int8Array");
          v328[5]((WTF::StringPrintStream *)&v328);
          v16 = 1;
          if ((a2 & 0x20) != 0)
          {
LABEL_42:
            v41 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
            v42 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v41 + 32))(v41);
            v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
            if (v16)
            {
              v45 = "|";
              v46 = 1;
            }
            else
            {
              v45 = "";
              v46 = 0;
            }
            WTF::StringImpl::utf8ForCharacters(v45, v46, (uint64_t)&v325, v44);
            WTF::printExpectedCStringHelper(v43, "StringView", &v325);
            if (v326 != -1)
              ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v41 + 40))(v41);
            WTF::PrintStream::printf(v41, "%s", "Int16Array");
            v328[5]((WTF::StringPrintStream *)&v328);
            v16 = 1;
            if ((a2 & 0x40) == 0)
            {
LABEL_55:
              LODWORD(v6) = 0;
              if ((a2 & 0x80) != 0)
                goto LABEL_56;
              goto LABEL_62;
            }
LABEL_49:
            v47 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
            v48 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v47 + 32))(v47);
            v49 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
            if (v16)
            {
              v51 = "|";
              v52 = 1;
            }
            else
            {
              v51 = "";
              v52 = 0;
            }
            WTF::StringImpl::utf8ForCharacters(v51, v52, (uint64_t)&v325, v50);
            WTF::printExpectedCStringHelper(v49, "StringView", &v325);
            if (v326 != -1)
              ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v47 + 40))(v47);
            WTF::PrintStream::printf(v47, "%s", "Int32Array");
            v328[5]((WTF::StringPrintStream *)&v328);
            v16 = 1;
            if ((a2 & 0x80) != 0)
            {
LABEL_56:
              v53 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
              v54 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 32))(v53);
              v55 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
              if (v16)
              {
                v57 = "|";
                v58 = 1;
              }
              else
              {
                v57 = "";
                v58 = 0;
              }
              WTF::StringImpl::utf8ForCharacters(v57, v58, (uint64_t)&v325, v56);
              WTF::printExpectedCStringHelper(v55, "StringView", &v325);
              if (v326 != -1)
                ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
              (*(void (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v53 + 40))(v53);
              WTF::PrintStream::printf(v53, "%s", "Uint8Array");
              v328[5]((WTF::StringPrintStream *)&v328);
              v16 = 1;
              if (((unsigned __int16)a2 & 0x100) == 0)
              {
LABEL_69:
                LODWORD(v6) = 0;
                if (((unsigned __int16)a2 & 0x200) != 0)
                  goto LABEL_70;
                goto LABEL_76;
              }
LABEL_63:
              v59 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
              v60 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v59 + 32))(v59);
              v61 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
              if (v16)
              {
                v63 = "|";
                v64 = 1;
              }
              else
              {
                v63 = "";
                v64 = 0;
              }
              WTF::StringImpl::utf8ForCharacters(v63, v64, (uint64_t)&v325, v62);
              WTF::printExpectedCStringHelper(v61, "StringView", &v325);
              if (v326 != -1)
                ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
              (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v59 + 40))(v59);
              WTF::PrintStream::printf(v59, "%s", "Uint8ClampedArray");
              v328[5]((WTF::StringPrintStream *)&v328);
              v16 = 1;
              if (((unsigned __int16)a2 & 0x200) != 0)
              {
LABEL_70:
                v65 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                v66 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v65 + 32))(v65);
                v67 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 32))(v66);
                if (v16)
                {
                  v69 = "|";
                  v70 = 1;
                }
                else
                {
                  v69 = "";
                  v70 = 0;
                }
                WTF::StringImpl::utf8ForCharacters(v69, v70, (uint64_t)&v325, v68);
                WTF::printExpectedCStringHelper(v67, "StringView", &v325);
                if (v326 != -1)
                  ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                (*(void (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v65 + 40))(v65);
                WTF::PrintStream::printf(v65, "%s", "Uint16Array");
                v328[5]((WTF::StringPrintStream *)&v328);
                v16 = 1;
                if (((unsigned __int16)a2 & 0x400) == 0)
                {
LABEL_83:
                  LODWORD(v6) = 0;
                  if (((unsigned __int16)a2 & 0x800) != 0)
                    goto LABEL_84;
                  goto LABEL_90;
                }
LABEL_77:
                v71 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                v72 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v71 + 32))(v71);
                v73 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 32))(v72);
                if (v16)
                {
                  v75 = "|";
                  v76 = 1;
                }
                else
                {
                  v75 = "";
                  v76 = 0;
                }
                WTF::StringImpl::utf8ForCharacters(v75, v76, (uint64_t)&v325, v74);
                WTF::printExpectedCStringHelper(v73, "StringView", &v325);
                if (v326 != -1)
                  ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72);
                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v71 + 40))(v71);
                WTF::PrintStream::printf(v71, "%s", "Uint32Array");
                v328[5]((WTF::StringPrintStream *)&v328);
                v16 = 1;
                if (((unsigned __int16)a2 & 0x800) != 0)
                {
LABEL_84:
                  v77 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                  v78 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v77 + 32))(v77);
                  v79 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78);
                  if (v16)
                  {
                    v81 = "|";
                    v82 = 1;
                  }
                  else
                  {
                    v81 = "";
                    v82 = 0;
                  }
                  WTF::StringImpl::utf8ForCharacters(v81, v82, (uint64_t)&v325, v80);
                  WTF::printExpectedCStringHelper(v79, "StringView", &v325);
                  if (v326 != -1)
                    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                  (*(void (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
                  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v77 + 40))(v77);
                  WTF::PrintStream::printf(v77, "%s", "Float32array");
                  v328[5]((WTF::StringPrintStream *)&v328);
                  v16 = 1;
                  if (((unsigned __int16)a2 & 0x1000) == 0)
                  {
LABEL_97:
                    LODWORD(v6) = 0;
                    if (((unsigned __int16)a2 & 0x2000) != 0)
                      goto LABEL_98;
                    goto LABEL_104;
                  }
LABEL_91:
                  v83 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                  v84 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v83 + 32))(v83);
                  v85 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 32))(v84);
                  if (v16)
                  {
                    v87 = "|";
                    v88 = 1;
                  }
                  else
                  {
                    v87 = "";
                    v88 = 0;
                  }
                  WTF::StringImpl::utf8ForCharacters(v87, v88, (uint64_t)&v325, v86);
                  WTF::printExpectedCStringHelper(v85, "StringView", &v325);
                  if (v326 != -1)
                    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                  (*(void (**)(uint64_t))(*(_QWORD *)v84 + 40))(v84);
                  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v83 + 40))(v83);
                  WTF::PrintStream::printf(v83, "%s", "Float64Array");
                  v328[5]((WTF::StringPrintStream *)&v328);
                  v16 = 1;
                  if (((unsigned __int16)a2 & 0x2000) != 0)
                  {
LABEL_98:
                    v89 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                    v90 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v89 + 32))(v89);
                    v91 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 32))(v90);
                    if (v16)
                    {
                      v93 = "|";
                      v94 = 1;
                    }
                    else
                    {
                      v93 = "";
                      v94 = 0;
                    }
                    WTF::StringImpl::utf8ForCharacters(v93, v94, (uint64_t)&v325, v92);
                    WTF::printExpectedCStringHelper(v91, "StringView", &v325);
                    if (v326 != -1)
                      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
                    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v89 + 40))(v89);
                    WTF::PrintStream::printf(v89, "%s", "BigInt64Array");
                    v328[5]((WTF::StringPrintStream *)&v328);
                    v16 = 1;
                    if (((unsigned __int16)a2 & 0x4000) == 0)
                    {
LABEL_111:
                      LODWORD(v6) = 0;
                      if ((a2 & 4) != 0)
                        goto LABEL_112;
                      goto LABEL_118;
                    }
LABEL_105:
                    v95 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                    v96 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v95 + 32))(v95);
                    v97 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 32))(v96);
                    if (v16)
                    {
                      v99 = "|";
                      v100 = 1;
                    }
                    else
                    {
                      v99 = "";
                      v100 = 0;
                    }
                    WTF::StringImpl::utf8ForCharacters(v99, v100, (uint64_t)&v325, v98);
                    WTF::printExpectedCStringHelper(v97, "StringView", &v325);
                    if (v326 != -1)
                      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 40))(v96);
                    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v95 + 40))(v95);
                    WTF::PrintStream::printf(v95, "%s", "BigUint64Array");
                    v328[5]((WTF::StringPrintStream *)&v328);
                    v16 = 1;
                    if ((a2 & 4) != 0)
                    {
LABEL_112:
                      v101 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                      v102 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v101 + 32))(v101);
                      v103 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 32))(v102);
                      if (v16)
                      {
                        v105 = "|";
                        v106 = 1;
                      }
                      else
                      {
                        v105 = "";
                        v106 = 0;
                      }
                      WTF::StringImpl::utf8ForCharacters(v105, v106, (uint64_t)&v325, v104);
                      WTF::printExpectedCStringHelper(v103, "StringView", &v325);
                      if (v326 != -1)
                        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                      (*(void (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
                      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v101 + 40))(v101);
                      WTF::PrintStream::printf(v101, "%s", "Function");
                      v328[5]((WTF::StringPrintStream *)&v328);
                      v16 = 1;
                      if (((unsigned __int16)a2 & 0x8000) == 0)
                      {
LABEL_125:
                        LODWORD(v6) = 0;
                        if ((a2 & 0x10000) != 0)
                          goto LABEL_126;
                        goto LABEL_132;
                      }
LABEL_119:
                      v107 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                      v108 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v107 + 32))(v107);
                      v109 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 32))(v108);
                      if (v16)
                      {
                        v111 = "|";
                        v112 = 1;
                      }
                      else
                      {
                        v111 = "";
                        v112 = 0;
                      }
                      WTF::StringImpl::utf8ForCharacters(v111, v112, (uint64_t)&v325, v110);
                      WTF::printExpectedCStringHelper(v109, "StringView", &v325);
                      if (v326 != -1)
                        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                      (*(void (**)(uint64_t))(*(_QWORD *)v108 + 40))(v108);
                      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v107 + 40))(v107);
                      WTF::PrintStream::printf(v107, "%s", "DirectArguments");
                      v328[5]((WTF::StringPrintStream *)&v328);
                      v16 = 1;
                      if ((a2 & 0x10000) != 0)
                      {
LABEL_126:
                        v113 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                        v114 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v113 + 32))(v113);
                        v115 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 32))(v114);
                        if (v16)
                        {
                          v117 = "|";
                          v118 = 1;
                        }
                        else
                        {
                          v117 = "";
                          v118 = 0;
                        }
                        WTF::StringImpl::utf8ForCharacters(v117, v118, (uint64_t)&v325, v116);
                        WTF::printExpectedCStringHelper(v115, "StringView", &v325);
                        if (v326 != -1)
                          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                        (*(void (**)(uint64_t))(*(_QWORD *)v114 + 40))(v114);
                        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v113 + 40))(v113);
                        WTF::PrintStream::printf(v113, "%s", "ScopedArguments");
                        v328[5]((WTF::StringPrintStream *)&v328);
                        v16 = 1;
                        if ((a2 & 0x20000) == 0)
                        {
LABEL_139:
                          LODWORD(v6) = 0;
                          if ((a2 & 0x40000) != 0)
                            goto LABEL_140;
                          goto LABEL_146;
                        }
LABEL_133:
                        v119 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                        v120 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v119 + 32))(v119);
                        v121 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 32))(v120);
                        if (v16)
                        {
                          v123 = "|";
                          v124 = 1;
                        }
                        else
                        {
                          v123 = "";
                          v124 = 0;
                        }
                        WTF::StringImpl::utf8ForCharacters(v123, v124, (uint64_t)&v325, v122);
                        WTF::printExpectedCStringHelper(v121, "StringView", &v325);
                        if (v326 != -1)
                          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 40))(v120);
                        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v119 + 40))(v119);
                        WTF::PrintStream::printf(v119, "%s", "StringObject");
                        v328[5]((WTF::StringPrintStream *)&v328);
                        v16 = 1;
                        if ((a2 & 0x40000) != 0)
                        {
LABEL_140:
                          v125 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                          v126 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v125 + 32))(v125);
                          v127 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
                          if (v16)
                          {
                            v129 = "|";
                            v130 = 1;
                          }
                          else
                          {
                            v129 = "";
                            v130 = 0;
                          }
                          WTF::StringImpl::utf8ForCharacters(v129, v130, (uint64_t)&v325, v128);
                          WTF::printExpectedCStringHelper(v127, "StringView", &v325);
                          if (v326 != -1)
                            ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                          (*(void (**)(uint64_t))(*(_QWORD *)v126 + 40))(v126);
                          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v125 + 40))(v125);
                          WTF::PrintStream::printf(v125, "%s", "RegExpObject");
                          v328[5]((WTF::StringPrintStream *)&v328);
                          v16 = 1;
                          if ((a2 & 0x80000) == 0)
                          {
LABEL_153:
                            LODWORD(v6) = 0;
                            if ((a2 & 0x100000) != 0)
                              goto LABEL_154;
                            goto LABEL_160;
                          }
LABEL_147:
                          v131 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                          v132 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v131 + 32))(v131);
                          v133 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 32))(v132);
                          if (v16)
                          {
                            v135 = "|";
                            v136 = 1;
                          }
                          else
                          {
                            v135 = "";
                            v136 = 0;
                          }
                          WTF::StringImpl::utf8ForCharacters(v135, v136, (uint64_t)&v325, v134);
                          WTF::printExpectedCStringHelper(v133, "StringView", &v325);
                          if (v326 != -1)
                            ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                          (*(void (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132);
                          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v131 + 40))(v131);
                          WTF::PrintStream::printf(v131, "%s", "DateObject");
                          v328[5]((WTF::StringPrintStream *)&v328);
                          v16 = 1;
                          if ((a2 & 0x100000) != 0)
                          {
LABEL_154:
                            v137 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                            v138 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v137 + 32))(v137);
                            v139 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 32))(v138);
                            if (v16)
                            {
                              v141 = "|";
                              v142 = 1;
                            }
                            else
                            {
                              v141 = "";
                              v142 = 0;
                            }
                            WTF::StringImpl::utf8ForCharacters(v141, v142, (uint64_t)&v325, v140);
                            WTF::printExpectedCStringHelper(v139, "StringView", &v325);
                            if (v326 != -1)
                              ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                            (*(void (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
                            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v137 + 40))(v137);
                            WTF::PrintStream::printf(v137, "%s", "PromiseObject");
                            v328[5]((WTF::StringPrintStream *)&v328);
                            v16 = 1;
                            if ((a2 & 0x200000) == 0)
                            {
LABEL_167:
                              LODWORD(v6) = 0;
                              if ((a2 & 0x400000) != 0)
                                goto LABEL_168;
                              goto LABEL_174;
                            }
LABEL_161:
                            v143 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                            v144 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v143 + 32))(v143);
                            v145 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 32))(v144);
                            if (v16)
                            {
                              v147 = "|";
                              v148 = 1;
                            }
                            else
                            {
                              v147 = "";
                              v148 = 0;
                            }
                            WTF::StringImpl::utf8ForCharacters(v147, v148, (uint64_t)&v325, v146);
                            WTF::printExpectedCStringHelper(v145, "StringView", &v325);
                            if (v326 != -1)
                              ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                            (*(void (**)(uint64_t))(*(_QWORD *)v144 + 40))(v144);
                            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v143 + 40))(v143);
                            WTF::PrintStream::printf(v143, "%s", "MapObject");
                            v328[5]((WTF::StringPrintStream *)&v328);
                            v16 = 1;
                            if ((a2 & 0x400000) != 0)
                            {
LABEL_168:
                              v149 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                              v150 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v149 + 32))(v149);
                              v151 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 32))(v150);
                              if (v16)
                              {
                                v153 = "|";
                                v154 = 1;
                              }
                              else
                              {
                                v153 = "";
                                v154 = 0;
                              }
                              WTF::StringImpl::utf8ForCharacters(v153, v154, (uint64_t)&v325, v152);
                              WTF::printExpectedCStringHelper(v151, "StringView", &v325);
                              if (v326 != -1)
                                ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                              (*(void (**)(uint64_t))(*(_QWORD *)v150 + 40))(v150);
                              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v149 + 40))(v149);
                              WTF::PrintStream::printf(v149, "%s", "SetObject");
                              v328[5]((WTF::StringPrintStream *)&v328);
                              v16 = 1;
                              if ((a2 & 0x800000) == 0)
                              {
LABEL_181:
                                LODWORD(v6) = 0;
                                if ((a2 & 0x1000000) != 0)
                                  goto LABEL_182;
                                goto LABEL_188;
                              }
LABEL_175:
                              v155 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                              v156 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v155 + 32))(v155);
                              v157 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v156 + 32))(v156);
                              if (v16)
                              {
                                v159 = "|";
                                v160 = 1;
                              }
                              else
                              {
                                v159 = "";
                                v160 = 0;
                              }
                              WTF::StringImpl::utf8ForCharacters(v159, v160, (uint64_t)&v325, v158);
                              WTF::printExpectedCStringHelper(v157, "StringView", &v325);
                              if (v326 != -1)
                                ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                              (*(void (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
                              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v155 + 40))(v155);
                              WTF::PrintStream::printf(v155, "%s", "WeakMapObject");
                              v328[5]((WTF::StringPrintStream *)&v328);
                              v16 = 1;
                              if ((a2 & 0x1000000) != 0)
                              {
LABEL_182:
                                v161 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                                v162 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v161 + 32))(v161);
                                v163 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 32))(v162);
                                if (v16)
                                {
                                  v165 = "|";
                                  v166 = 1;
                                }
                                else
                                {
                                  v165 = "";
                                  v166 = 0;
                                }
                                WTF::StringImpl::utf8ForCharacters(v165, v166, (uint64_t)&v325, v164);
                                WTF::printExpectedCStringHelper(v163, "StringView", &v325);
                                if (v326 != -1)
                                  ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                                (*(void (**)(uint64_t))(*(_QWORD *)v162 + 40))(v162);
                                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v161 + 40))(v161);
                                WTF::PrintStream::printf(v161, "%s", "WeakSetObject");
                                v328[5]((WTF::StringPrintStream *)&v328);
                                v16 = 1;
                                if ((a2 & 0x2000000) == 0)
                                {
LABEL_195:
                                  LODWORD(v6) = 0;
                                  if ((a2 & 0x4000000) != 0)
                                    goto LABEL_196;
                                  goto LABEL_202;
                                }
LABEL_189:
                                v167 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                                v168 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v167 + 32))(v167);
                                v169 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 32))(v168);
                                if (v16)
                                {
                                  v171 = "|";
                                  v172 = 1;
                                }
                                else
                                {
                                  v171 = "";
                                  v172 = 0;
                                }
                                WTF::StringImpl::utf8ForCharacters(v171, v172, (uint64_t)&v325, v170);
                                WTF::printExpectedCStringHelper(v169, "StringView", &v325);
                                if (v326 != -1)
                                  ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                                (*(void (**)(uint64_t))(*(_QWORD *)v168 + 40))(v168);
                                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v167 + 40))(v167);
                                WTF::PrintStream::printf(v167, "%s", "ProxyObject");
                                v328[5]((WTF::StringPrintStream *)&v328);
                                v16 = 1;
                                if ((a2 & 0x4000000) != 0)
                                {
LABEL_196:
                                  v173 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                                  v174 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v173 + 32))(v173);
                                  v175 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 32))(v174);
                                  if (v16)
                                  {
                                    v177 = "|";
                                    v178 = 1;
                                  }
                                  else
                                  {
                                    v177 = "";
                                    v178 = 0;
                                  }
                                  WTF::StringImpl::utf8ForCharacters(v177, v178, (uint64_t)&v325, v176);
                                  WTF::printExpectedCStringHelper(v175, "StringView", &v325);
                                  if (v326 != -1)
                                    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                                  (*(void (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
                                  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v173 + 40))(v173);
                                  WTF::PrintStream::printf(v173, "%s", "DerivedArray");
                                  v328[5]((WTF::StringPrintStream *)&v328);
                                  v16 = 1;
                                  if (((unint64_t)a2 & 0x200000000000) == 0)
                                    goto LABEL_209;
                                  goto LABEL_203;
                                }
LABEL_202:
                                LODWORD(v6) = 0;
                                if (((unint64_t)a2 & 0x200000000000) == 0)
                                {
LABEL_209:
                                  LODWORD(v6) = 0;
                                  goto LABEL_215;
                                }
LABEL_203:
                                v179 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
                                v180 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v179 + 32))(v179);
                                v181 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 32))(v180);
                                if (v16)
                                {
                                  v183 = "|";
                                  v184 = 1;
                                }
                                else
                                {
                                  v183 = "";
                                  v184 = 0;
                                }
                                WTF::StringImpl::utf8ForCharacters(v183, v184, (uint64_t)&v325, v182);
                                WTF::printExpectedCStringHelper(v181, "StringView", &v325);
                                if (v326 != -1)
                                  ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
                                (*(void (**)(uint64_t))(*(_QWORD *)v180 + 40))(v180);
                                (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v179 + 40))(v179);
                                WTF::PrintStream::printf(v179, "%s", "DataView");
                                goto LABEL_214;
                              }
LABEL_188:
                              LODWORD(v6) = 0;
                              if ((a2 & 0x2000000) == 0)
                                goto LABEL_195;
                              goto LABEL_189;
                            }
LABEL_174:
                            LODWORD(v6) = 0;
                            if ((a2 & 0x800000) == 0)
                              goto LABEL_181;
                            goto LABEL_175;
                          }
LABEL_160:
                          LODWORD(v6) = 0;
                          if ((a2 & 0x200000) == 0)
                            goto LABEL_167;
                          goto LABEL_161;
                        }
LABEL_146:
                        LODWORD(v6) = 0;
                        if ((a2 & 0x80000) == 0)
                          goto LABEL_153;
                        goto LABEL_147;
                      }
LABEL_132:
                      LODWORD(v6) = 0;
                      if ((a2 & 0x20000) == 0)
                        goto LABEL_139;
                      goto LABEL_133;
                    }
LABEL_118:
                    LODWORD(v6) = 0;
                    if (((unsigned __int16)a2 & 0x8000) == 0)
                      goto LABEL_125;
                    goto LABEL_119;
                  }
LABEL_104:
                  LODWORD(v6) = 0;
                  if (((unsigned __int16)a2 & 0x4000) == 0)
                    goto LABEL_111;
                  goto LABEL_105;
                }
LABEL_90:
                LODWORD(v6) = 0;
                if (((unsigned __int16)a2 & 0x1000) == 0)
                  goto LABEL_97;
                goto LABEL_91;
              }
LABEL_76:
              LODWORD(v6) = 0;
              if (((unsigned __int16)a2 & 0x400) == 0)
                goto LABEL_83;
              goto LABEL_77;
            }
LABEL_62:
            LODWORD(v6) = 0;
            if (((unsigned __int16)a2 & 0x100) == 0)
              goto LABEL_69;
            goto LABEL_63;
          }
LABEL_48:
          LODWORD(v6) = 0;
          if ((a2 & 0x40) == 0)
            goto LABEL_55;
          goto LABEL_49;
        }
LABEL_34:
        LODWORD(v6) = 0;
        if ((a2 & 0x10) == 0)
          goto LABEL_41;
        goto LABEL_35;
      }
    }
    else
    {
      v16 = 0;
      if ((a2 & 0x8000000) != 0)
        goto LABEL_17;
    }
    LODWORD(v6) = 0;
    if ((a2 & 1) == 0)
      goto LABEL_27;
    goto LABEL_21;
  }
  v12 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
  WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v13);
  WTF::printExpectedCStringHelper(v12, "StringView", &v325);
  if (v326 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
  v328[5]((WTF::StringPrintStream *)&v328);
  v328[5]((WTF::StringPrintStream *)&v328);
  WTF::PrintStream::printf((WTF::PrintStream *)&v328, "%s", "Object");
  LODWORD(v6) = 1;
LABEL_214:
  v328[5]((WTF::StringPrintStream *)&v328);
  v16 = 1;
LABEL_215:
  if ((~(_DWORD)a2 & 0x30000000) == 0)
  {
    v185 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    v186 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v185 + 32))(v185);
    v187 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 32))(v186);
    if (v16)
    {
      v189 = "|";
      v190 = 1;
    }
    else
    {
      v189 = "";
      v190 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v189, v190, (uint64_t)&v325, v188);
    WTF::printExpectedCStringHelper(v187, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 40))(v186);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v185 + 40))(v185);
    v202 = "String";
    goto LABEL_232;
  }
  if ((a2 & 0x10000000) != 0)
  {
    v196 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    v197 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v196 + 32))(v196);
    v198 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v197 + 32))(v197);
    if (v16)
    {
      v200 = "|";
      v201 = 1;
    }
    else
    {
      v200 = "";
      v201 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v200, v201, (uint64_t)&v325, v199);
    WTF::printExpectedCStringHelper(v198, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 40))(v197);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v196 + 40))(v196);
    WTF::PrintStream::printf(v196, "%s", "StringIdent");
    v328[5]((WTF::StringPrintStream *)&v328);
    v16 = 1;
    if ((a2 & 0x20000000) != 0)
      goto LABEL_220;
  }
  else
  {
    LODWORD(v6) = 0;
    if ((a2 & 0x20000000) != 0)
    {
LABEL_220:
      v185 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      v191 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v185 + 32))(v185);
      v192 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 32))(v191);
      if (v16)
      {
        v194 = "|";
        v195 = 1;
      }
      else
      {
        v194 = "";
        v195 = 0;
      }
      WTF::StringImpl::utf8ForCharacters(v194, v195, (uint64_t)&v325, v193);
      WTF::printExpectedCStringHelper(v192, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      (*(void (**)(uint64_t))(*(_QWORD *)v191 + 40))(v191);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v185 + 40))(v185);
      v202 = "StringVar";
LABEL_232:
      WTF::PrintStream::printf(v185, "%s", v202);
      v328[5]((WTF::StringPrintStream *)&v328);
      v16 = 1;
      if ((a2 & 0x40000000) == 0)
        goto LABEL_233;
LABEL_253:
      v215 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      v216 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v215 + 32))(v215);
      v217 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v216 + 32))(v216);
      if (v16)
      {
        v219 = "|";
        v220 = 1;
      }
      else
      {
        v219 = "";
        v220 = 0;
      }
      WTF::StringImpl::utf8ForCharacters(v219, v220, (uint64_t)&v325, v218);
      WTF::printExpectedCStringHelper(v217, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      (*(void (**)(uint64_t))(*(_QWORD *)v216 + 40))(v216);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v215 + 40))(v215);
      WTF::PrintStream::printf(v215, "%s", "Symbol");
      v328[5]((WTF::StringPrintStream *)&v328);
      v16 = 1;
      if (((unint64_t)a2 & 0x80000000000) != 0)
        goto LABEL_234;
      goto LABEL_259;
    }
  }
  LODWORD(v6) = 0;
  if ((a2 & 0x40000000) != 0)
    goto LABEL_253;
LABEL_233:
  LODWORD(v6) = 0;
  if (((unint64_t)a2 & 0x80000000000) != 0)
  {
LABEL_234:
    v203 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    v204 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v203 + 32))(v203);
    v205 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v204 + 32))(v204);
    if (v16)
    {
      v207 = "|";
      v208 = 1;
    }
    else
    {
      v207 = "";
      v208 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v207, v208, (uint64_t)&v325, v206);
    WTF::printExpectedCStringHelper(v205, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v204 + 40))(v204);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v203 + 40))(v203);
    WTF::PrintStream::printf(v203, "%s", "HeapBigInt");
LABEL_240:
    v328[5]((WTF::StringPrintStream *)&v328);
    v16 = 1;
    if (((unint64_t)a2 & 0x100000000) == 0)
      goto LABEL_241;
LABEL_263:
    v227 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    v228 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v227 + 32))(v227);
    v229 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v228 + 32))(v228);
    if (v16)
    {
      v231 = "|";
      v232 = 1;
    }
    else
    {
      v231 = "";
      v232 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v231, v232, (uint64_t)&v325, v230);
    WTF::printExpectedCStringHelper(v229, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v228 + 40))(v228);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v227 + 40))(v227);
    WTF::PrintStream::printf(v227, "%s", "BoolInt32");
    v328[5]((WTF::StringPrintStream *)&v328);
    v16 = 1;
    if (((unint64_t)a2 & 0x200000000) != 0)
      goto LABEL_242;
LABEL_269:
    LODWORD(v6) = 0;
    goto LABEL_270;
  }
LABEL_259:
  if (a2 == (WTF::PrintStream *)0x300000000)
  {
    v221 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    v222 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v221 + 32))(v221);
    v223 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v222 + 32))(v222);
    if (v16)
    {
      v225 = "|";
      v226 = 1;
    }
    else
    {
      v225 = "";
      v226 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v225, v226, (uint64_t)&v325, v224);
    WTF::printExpectedCStringHelper(v223, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 40))(v222);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v221 + 40))(v221);
    WTF::PrintStream::printf(v221, "%s", "Int32");
    v328[5]((WTF::StringPrintStream *)&v328);
    goto LABEL_376;
  }
  LODWORD(v6) = 0;
  if (((unint64_t)a2 & 0x100000000) != 0)
    goto LABEL_263;
LABEL_241:
  LODWORD(v6) = 0;
  if (((unint64_t)a2 & 0x200000000) == 0)
    goto LABEL_269;
LABEL_242:
  v209 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
  v210 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v209 + 32))(v209);
  v211 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v210 + 32))(v210);
  if (v16)
  {
    v213 = "|";
    v214 = 1;
  }
  else
  {
    v213 = "";
    v214 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v213, v214, (uint64_t)&v325, v212);
  WTF::printExpectedCStringHelper(v211, "StringView", &v325);
  if (v326 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
  (*(void (**)(uint64_t))(*(_QWORD *)v210 + 40))(v210);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v209 + 40))(v209);
  WTF::PrintStream::printf(v209, "%s", "NonBoolInt32");
  v328[5]((WTF::StringPrintStream *)&v328);
  v16 = 1;
LABEL_270:
  if ((~(unint64_t)a2 & 0x7000000000) == 0)
  {
    v233 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    v234 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v233 + 32))(v233);
    v235 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v234 + 32))(v234);
    if (v16)
    {
      v237 = "|";
      v238 = 1;
    }
    else
    {
      v237 = "";
      v238 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v237, v238, (uint64_t)&v325, v236);
    WTF::printExpectedCStringHelper(v235, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 40))(v234);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v233 + 40))(v233);
    v251 = "BytecodeDouble";
    goto LABEL_313;
  }
  if (((unint64_t)a2 & 0x1000000000) != 0)
  {
    v245 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
    v246 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v245 + 32))(v245);
    v247 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 32))(v246);
    if (v16)
    {
      v249 = "|";
      v250 = 1;
    }
    else
    {
      v249 = "";
      v250 = 0;
    }
    WTF::StringImpl::utf8ForCharacters(v249, v250, (uint64_t)&v325, v248);
    WTF::printExpectedCStringHelper(v247, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 40))(v246);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v245 + 40))(v245);
    WTF::PrintStream::printf(v245, "%s", "AnyIntAsDouble");
    v328[5]((WTF::StringPrintStream *)&v328);
    v16 = 1;
    if (((unint64_t)a2 & 0x2000000000) != 0)
    {
LABEL_275:
      v239 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      v240 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v239 + 32))(v239);
      v241 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v240 + 32))(v240);
      if (v16)
      {
        v243 = "|";
        v244 = 1;
      }
      else
      {
        v243 = "";
        v244 = 0;
      }
      WTF::StringImpl::utf8ForCharacters(v243, v244, (uint64_t)&v325, v242);
      WTF::printExpectedCStringHelper(v241, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      (*(void (**)(uint64_t))(*(_QWORD *)v240 + 40))(v240);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v239 + 40))(v239);
      WTF::PrintStream::printf(v239, "%s", "NonIntAsDouble");
      v328[5]((WTF::StringPrintStream *)&v328);
      v16 = 1;
      if (((unint64_t)a2 & 0x4000000000) != 0)
        goto LABEL_287;
LABEL_294:
      LODWORD(v6) = 0;
      if (((unint64_t)a2 & 0x8000000000) != 0)
        goto LABEL_314;
LABEL_295:
      if (((unint64_t)a2 & 0x10000000000) != 0)
        goto LABEL_320;
LABEL_296:
      LODWORD(v6) = 0;
      if (((unint64_t)a2 & 0x20000000000) == 0)
        goto LABEL_326;
LABEL_297:
      v257 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      v258 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v257 + 32))(v257);
      v259 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v258 + 32))(v258);
      if (v16)
      {
        v261 = "|";
        v262 = 1;
      }
      else
      {
        v261 = "";
        v262 = 0;
      }
      WTF::StringImpl::utf8ForCharacters(v261, v262, (uint64_t)&v325, v260);
      WTF::printExpectedCStringHelper(v259, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      (*(void (**)(uint64_t))(*(_QWORD *)v258 + 40))(v258);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v257 + 40))(v257);
      WTF::PrintStream::printf(v257, "%s", "Other");
      v328[5]((WTF::StringPrintStream *)&v328);
      v16 = 1;
      if (((unint64_t)a2 & 0x40000000000) == 0)
        goto LABEL_327;
      goto LABEL_303;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    if (((unint64_t)a2 & 0x2000000000) != 0)
      goto LABEL_275;
  }
  LODWORD(v6) = 0;
  if (((unint64_t)a2 & 0x4000000000) == 0)
    goto LABEL_294;
LABEL_287:
  v233 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
  v252 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v233 + 32))(v233);
  v253 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v252 + 32))(v252);
  if (v16)
  {
    v255 = "|";
    v256 = 1;
  }
  else
  {
    v255 = "";
    v256 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v255, v256, (uint64_t)&v325, v254);
  WTF::printExpectedCStringHelper(v253, "StringView", &v325);
  if (v326 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
  (*(void (**)(uint64_t))(*(_QWORD *)v252 + 40))(v252);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v233 + 40))(v233);
  v251 = "DoublePureNaN";
LABEL_313:
  WTF::PrintStream::printf(v233, "%s", v251);
  v328[5]((WTF::StringPrintStream *)&v328);
  v16 = 1;
  if (((unint64_t)a2 & 0x8000000000) == 0)
    goto LABEL_295;
LABEL_314:
  v269 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
  v270 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v269 + 32))(v269);
  v271 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v270 + 32))(v270);
  if (v16)
  {
    v273 = "|";
    v274 = 1;
  }
  else
  {
    v273 = "";
    v274 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v273, v274, (uint64_t)&v325, v272);
  WTF::printExpectedCStringHelper(v271, "StringView", &v325);
  if (v326 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
  (*(void (**)(uint64_t))(*(_QWORD *)v270 + 40))(v270);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v269 + 40))(v269);
  WTF::PrintStream::printf(v269, "%s", "DoubleImpureNaN");
  v328[5]((WTF::StringPrintStream *)&v328);
  v16 = 1;
  if (((unint64_t)a2 & 0x10000000000) == 0)
    goto LABEL_296;
LABEL_320:
  v275 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
  v276 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v275 + 32))(v275);
  v277 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 32))(v276);
  if (v16)
  {
    v279 = "|";
    v280 = 1;
  }
  else
  {
    v279 = "";
    v280 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v279, v280, (uint64_t)&v325, v278);
  WTF::printExpectedCStringHelper(v277, "StringView", &v325);
  if (v326 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
  (*(void (**)(uint64_t))(*(_QWORD *)v276 + 40))(v276);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v275 + 40))(v275);
  WTF::PrintStream::printf(v275, "%s", "Bool");
  v328[5]((WTF::StringPrintStream *)&v328);
  v16 = 1;
  if (((unint64_t)a2 & 0x20000000000) != 0)
    goto LABEL_297;
LABEL_326:
  LODWORD(v6) = 0;
  if (((unint64_t)a2 & 0x40000000000) == 0)
  {
LABEL_327:
    LODWORD(v6) = 0;
    goto LABEL_328;
  }
LABEL_303:
  v263 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
  v264 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v263 + 32))(v263);
  v265 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v264 + 32))(v264);
  if (v16)
  {
    v267 = "|";
    v268 = 1;
  }
  else
  {
    v267 = "";
    v268 = 0;
  }
  WTF::StringImpl::utf8ForCharacters(v267, v268, (uint64_t)&v325, v266);
  WTF::printExpectedCStringHelper(v265, "StringView", &v325);
  if (v326 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
  (*(void (**)(uint64_t))(*(_QWORD *)v264 + 40))(v264);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v263 + 40))(v263);
  WTF::PrintStream::printf(v263, "%s", "Empty");
  v328[5]((WTF::StringPrintStream *)&v328);
  v16 = 1;
LABEL_328:
  if (((unint64_t)a2 & 0xC00000000) != 0)
  {
    if (((unint64_t)a2 & 0xC00000000) == 0xC00000000)
    {
      v281 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      v282 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v281 + 32))(v281);
      v283 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v282 + 32))(v282);
      if (v16)
      {
        v285 = "|";
        v286 = 1;
      }
      else
      {
        v285 = "";
        v286 = 0;
      }
      WTF::StringImpl::utf8ForCharacters(v285, v286, (uint64_t)&v325, v284);
      WTF::printExpectedCStringHelper(v283, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      (*(void (**)(uint64_t))(*(_QWORD *)v282 + 40))(v282);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v281 + 40))(v281);
      v297 = "Int52Any";
LABEL_355:
      WTF::PrintStream::printf(v281, "%s", v297);
      v328[5]((WTF::StringPrintStream *)&v328);
      goto LABEL_356;
    }
    if (((unint64_t)a2 & 0x400000000) != 0)
    {
      v281 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      v292 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v281 + 32))(v281);
      v293 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v292 + 32))(v292);
      if (v16)
      {
        v295 = "|";
        v296 = 1;
      }
      else
      {
        v295 = "";
        v296 = 0;
      }
      WTF::StringImpl::utf8ForCharacters(v295, v296, (uint64_t)&v325, v294);
      WTF::printExpectedCStringHelper(v293, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      (*(void (**)(uint64_t))(*(_QWORD *)v292 + 40))(v292);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v281 + 40))(v281);
      v297 = "Int32AsInt52";
      goto LABEL_355;
    }
    if (((unint64_t)a2 & 0x800000000) != 0)
    {
      v281 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v328[4])(&v328);
      v287 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v281 + 32))(v281);
      v288 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v287 + 32))(v287);
      if (v16)
      {
        v290 = "|";
        v291 = 1;
      }
      else
      {
        v290 = "";
        v291 = 0;
      }
      WTF::StringImpl::utf8ForCharacters(v290, v291, (uint64_t)&v325, v289);
      WTF::printExpectedCStringHelper(v288, "StringView", &v325);
      if (v326 != -1)
        ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
      (*(void (**)(uint64_t))(*(_QWORD *)v287 + 40))(v287);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v281 + 40))(v281);
      v297 = "NonInt32AsInt52";
      goto LABEL_355;
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
LABEL_356:
  if (a2 == (WTF::PrintStream *)0x3B73FFFFFFF7)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)this + 32))(this);
    v304 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    v305 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v304 + 32))(v304);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v306);
    WTF::printExpectedCStringHelper(v305, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v304 + 40))(v304);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    v11 = "HeapTop";
    goto LABEL_372;
  }
  if (a2 == (WTF::PrintStream *)0x3FFFFFFFFFF7)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)this + 32))(this);
    v301 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    v302 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v301 + 32))(v301);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v303);
    WTF::printExpectedCStringHelper(v302, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 40))(v301);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    v11 = "FullTop";
    goto LABEL_372;
  }
  if (a2 == (WTF::PrintStream *)0x3F73FFFFFFF7)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)this + 32))(this);
    v298 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    v299 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v298 + 32))(v298);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v300);
    WTF::printExpectedCStringHelper(v299, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v298 + 40))(v298);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    v11 = "BytecodeTop";
LABEL_372:
    WTF::PrintStream::printf(v7, "%s", v11);
    (*(void (**)(JSC *))(*(_QWORD *)this + 40))(this);
    goto LABEL_373;
  }
  if ((_DWORD)v6)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)this + 32))(this);
    v307 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    v308 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v307 + 32))(v307);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v309);
    WTF::printExpectedCStringHelper(v308, "StringView", &v325);
    if (v326 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 40))(v307);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    v11 = "Top";
    goto LABEL_372;
  }
LABEL_376:
  v317 = v329;
  if (v329)
  {
    v318 = v330;
    if ((unint64_t)v330 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198211A68);
    }
    v319 = WTF::fastMalloc((WTF *)(v330 + 17));
    *(_DWORD *)v319 = 1;
    *(_QWORD *)(v319 + 8) = v318;
    memcpy((void *)(v319 + 16), v317, v318);
    *(_BYTE *)(v319 + 16 + v318) = 0;
  }
  else
  {
    v319 = 0;
  }
  v320 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)this + 32))(this);
  v321 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v320 + 32))(v320);
  v322 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v321 + 32))(v321);
  WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v325, v323);
  WTF::printExpectedCStringHelper(v322, "StringView", &v325);
  if (v326 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v326])(&v327, &v325);
  (*(void (**)(uint64_t))(*(_QWORD *)v321 + 40))(v321);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v320 + 40))(v320);
  v324 = (const char *)(v319 + 16);
  if (!v319)
    v324 = 0;
  WTF::PrintStream::printf(v320, "%s", v324);
  (*(void (**)(JSC *))(*(_QWORD *)this + 40))(this);
  if (v319)
  {
    if (*(_DWORD *)v319 == 1)
      WTF::fastFree(v319, v310, v311, v312, v313, v314, v315, v316);
    else
      --*(_DWORD *)v319;
  }
LABEL_373:
  if (v329 != (WTF *)v331)
    WTF::fastFree((unint64_t)v329, v310, v311, v312, v313, v314, v315, v316);
}

uint64_t JSC::dumpSpeculationAbbreviated(JSC *this, WTF::PrintStream *a2)
{
  const char *v3;
  WTF::PrintStream *v4;

  if (a2 == (WTF::PrintStream *)1)
  {
    v3 = "<Final>";
  }
  else if (a2 == (WTF::PrintStream *)2)
  {
    v3 = "<Array>";
  }
  else if (a2 == (WTF::PrintStream *)0x10000000)
  {
    v3 = "<StringIdent>";
  }
  else if (!a2 || ((unint64_t)a2 & 0xFFFFFFFFCFFFFFFFLL) != 0)
  {
    if ((uint64_t)a2 <= 2047)
    {
      if ((uint64_t)a2 <= 63)
      {
        if (a2 == (WTF::PrintStream *)4)
        {
          v3 = "<Function>";
          goto LABEL_10;
        }
        if (a2 == (WTF::PrintStream *)16)
        {
          v3 = "<Int8array>";
          goto LABEL_10;
        }
        if (a2 == (WTF::PrintStream *)32)
        {
          v3 = "<Int16array>";
          goto LABEL_10;
        }
      }
      else if ((uint64_t)a2 > 511)
      {
        if (a2 == (WTF::PrintStream *)512)
        {
          v3 = "<Uint16array>";
          goto LABEL_10;
        }
        if (a2 == (WTF::PrintStream *)1024)
        {
          v3 = "<Uint32array>";
          goto LABEL_10;
        }
      }
      else
      {
        if (a2 == (WTF::PrintStream *)64)
        {
          v3 = "<Int32array>";
          goto LABEL_10;
        }
        if (a2 == (WTF::PrintStream *)128)
        {
          v3 = "<Uint8array>";
          goto LABEL_10;
        }
      }
    }
    else if ((uint64_t)a2 >= 0x8000)
    {
      if ((uint64_t)a2 >= 0x20000)
      {
        if (a2 == (WTF::PrintStream *)0x20000)
        {
          v3 = "<StringObject>";
          goto LABEL_10;
        }
        if (a2 == (WTF::PrintStream *)0x40000)
        {
          v3 = "<RegExpObject>";
          goto LABEL_10;
        }
      }
      else
      {
        if (a2 == (WTF::PrintStream *)0x8000)
        {
          v3 = "<DirectArguments>";
          goto LABEL_10;
        }
        if (a2 == (WTF::PrintStream *)0x10000)
        {
          v3 = "<ScopedArguments>";
          goto LABEL_10;
        }
      }
    }
    else if ((uint64_t)a2 >= 0x2000)
    {
      if (a2 == (WTF::PrintStream *)0x2000)
      {
        v3 = "<BigInt64array>";
        goto LABEL_10;
      }
      if (a2 == (WTF::PrintStream *)0x4000)
      {
        v3 = "<BigUint64array>";
        goto LABEL_10;
      }
    }
    else
    {
      if (a2 == (WTF::PrintStream *)2048)
      {
        v3 = "<Float32array>";
        goto LABEL_10;
      }
      if (a2 == (WTF::PrintStream *)4096)
      {
        v3 = "<Float64array>";
        goto LABEL_10;
      }
    }
    if (!a2 || ((unint64_t)a2 & 0xFFFFFFFFCFFDFFFFLL) != 0)
    {
      if (((unint64_t)a2 & 0x20000FFFFFF7) == 0 || ((unint64_t)a2 & 0xFFFFDFFFF0000008) != 0)
      {
        if (((unint64_t)a2 & 0x2800FFFFFFF7) == 0 || ((unint64_t)a2 & 0xFFFFD7FF00000008) != 0)
        {
          if (a2 == (WTF::PrintStream *)0x100000000)
          {
            v3 = "<BoolInt32>";
          }
          else if (!a2 || ((unint64_t)a2 & 0xFFFFFFFCFFFFFFFFLL) != 0)
          {
            if (a2 == (WTF::PrintStream *)0x1000000000)
            {
              v3 = "<AnyIntAsDouble>";
            }
            else if (a2 == (WTF::PrintStream *)0x800000000)
            {
              v3 = "<NonInt32AsInt52>";
            }
            else if (a2 == (WTF::PrintStream *)0x400000000)
            {
              v3 = "<Int32AsInt52>";
            }
            else if (!a2 || ((unint64_t)a2 & 0xFFFFFFF3FFFFFFFFLL) != 0)
            {
              if (!a2 || ((unint64_t)a2 & 0xFFFFFF0FFFFFFFFFLL) != 0)
              {
                if (((unint64_t)a2 & 0xFF00000000) == 0 || ((unint64_t)a2 & 0xFFFFFF00FFFFFFFFLL) != 0)
                {
                  if (a2 == (WTF::PrintStream *)0x10000000000)
                  {
                    v3 = "<Boolean>";
                  }
                  else if (a2 == (WTF::PrintStream *)0x20000000000)
                  {
                    v3 = "<Other>";
                  }
                  else if (((unint64_t)a2 & 0xFFFFFCFFFFFFFFFFLL) != 0 || a2 == 0)
                  {
                    v3 = "";
                  }
                  else
                  {
                    v3 = "<Misc>";
                  }
                }
                else
                {
                  v3 = "<Number>";
                }
              }
              else
              {
                v3 = "<Double>";
              }
            }
            else
            {
              v3 = "<Int52Any>";
            }
          }
          else
          {
            v3 = "<Int32>";
          }
        }
        else
        {
          v3 = "<Cell>";
        }
      }
      else
      {
        v3 = "<Object>";
      }
    }
    else
    {
      v3 = "<StringOrStringObject>";
    }
  }
  else
  {
    v3 = "<String>";
  }
LABEL_10:
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(JSC *))(*(_QWORD *)this + 32))(this);
  WTF::PrintStream::printf(v4, "%s", v3);
  return (*(uint64_t (**)(JSC *))(*(_QWORD *)this + 40))(this);
}

uint64_t JSC::speculationFromClassInfoInheritance(uint64_t a1)
{
  _BOOL4 v1;
  BOOL v2;
  uint64_t v3;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  BOOL v24;
  uint64_t v25;
  BOOL v27;
  uint64_t v28;
  BOOL v30;
  uint64_t v31;
  BOOL v33;
  uint64_t v34;
  BOOL v36;
  uint64_t v37;
  BOOL v39;
  uint64_t v40;
  BOOL v42;
  uint64_t v43;
  BOOL v45;
  uint64_t v46;
  BOOL v48;
  uint64_t v49;
  BOOL v51;
  uint64_t v52;

  if ((char **)a1 == &JSC::JSString::s_info)
    return 805306368;
  if ((char **)a1 == &JSC::Symbol::s_info)
    return 0x40000000;
  if ((char **)a1 == &JSC::JSBigInt::s_info)
    return 0x80000000000;
  if ((char **)a1 == &JSC::JSFinalObject::s_info)
    return 1;
  if ((char **)a1 == &JSC::DirectArguments::s_info)
    return 0x8000;
  if ((char **)a1 == &JSC::ScopedArguments::s_info)
    return 0x10000;
  if ((char **)a1 == &JSC::RegExpObject::s_info)
    return 0x40000;
  if ((char **)a1 == &JSC::DateInstance::s_info)
    return 0x80000;
  if ((char **)a1 == &JSC::JSMap::s_info)
    return 0x200000;
  if ((char **)a1 == &JSC::JSMapIterator::s_info)
    return 0x8000000;
  if ((char **)a1 == &JSC::JSSet::s_info)
    return 0x400000;
  if ((char **)a1 == &JSC::JSSetIterator::s_info)
    return 0x8000000;
  if ((char **)a1 == &JSC::JSWeakMap::s_info)
    return 0x800000;
  if ((char **)a1 == &JSC::JSWeakSet::s_info)
    return 0x1000000;
  if ((char **)a1 == &JSC::ProxyObject::s_info)
    return 0x2000000;
  v1 = a1 != 0;
  v2 = a1 != 0;
  if ((char **)a1 != &JSC::JSDataView::s_info)
  {
    v2 = a1 != 0;
    if (a1)
    {
      v3 = a1;
      do
      {
        v3 = *(_QWORD *)(v3 + 16);
        v2 = v3 != 0;
      }
      while ((char **)v3 != &JSC::JSDataView::s_info && v3 != 0);
    }
  }
  if (v2)
    return 0x200000000000;
  v5 = (char **)a1 == &JSC::StringObject::s_info || a1 == 0;
  v6 = a1 != 0;
  if (!v5)
  {
    v7 = a1;
    do
    {
      v7 = *(_QWORD *)(v7 + 16);
      v6 = v7 != 0;
    }
    while ((char **)v7 != &JSC::StringObject::s_info && v7 != 0);
  }
  if (v6)
    return 134348800;
  v9 = (char **)a1 == &JSC::JSArray::s_info || a1 == 0;
  v10 = a1 != 0;
  if (!v9)
  {
    v11 = a1;
    do
    {
      v11 = *(_QWORD *)(v11 + 16);
      v10 = v11 != 0;
    }
    while ((char **)v11 != &JSC::JSArray::s_info && v11 != 0);
  }
  if (v10)
    return 67108866;
  v13 = (char **)a1 == &JSC::JSFunction::s_info || a1 == 0;
  v14 = a1 != 0;
  if (!v13)
  {
    v15 = a1;
    do
    {
      v15 = *(_QWORD *)(v15 + 16);
      v14 = v15 != 0;
    }
    while ((char **)v15 != &JSC::JSFunction::s_info && v15 != 0);
  }
  if (v14)
    return 4;
  v17 = (char **)a1 == &JSC::JSPromise::s_info || a1 == 0;
  v18 = a1 != 0;
  if (!v17)
  {
    v19 = a1;
    do
    {
      v19 = *(_QWORD *)(v19 + 16);
      v18 = v19 != 0;
    }
    while ((char **)v19 != &JSC::JSPromise::s_info && v19 != 0);
  }
  if (v18)
    return 0x100000;
  v21 = a1 != 0;
  if (a1)
  {
    v21 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::s_info)
    {
      v22 = a1;
      do
      {
        v22 = *(_QWORD *)(v22 + 16);
        v21 = v22 != 0;
      }
      while ((char **)v22 != &JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::s_info && v22 != 0);
    }
  }
  if (v21)
    return 16;
  v24 = a1 != 0;
  if (a1)
  {
    v24 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::s_info)
    {
      v25 = a1;
      do
      {
        v25 = *(_QWORD *)(v25 + 16);
        v24 = v25 != 0;
      }
      while ((char **)v25 != &JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::s_info && v25 != 0);
    }
  }
  if (v24)
    return 128;
  v27 = a1 != 0;
  if (a1)
  {
    v27 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::s_info)
    {
      v28 = a1;
      do
      {
        v28 = *(_QWORD *)(v28 + 16);
        v27 = v28 != 0;
      }
      while ((char **)v28 != &JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::s_info && v28 != 0);
    }
  }
  if (v27)
    return 256;
  v30 = a1 != 0;
  if (a1)
  {
    v30 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::s_info)
    {
      v31 = a1;
      do
      {
        v31 = *(_QWORD *)(v31 + 16);
        v30 = v31 != 0;
      }
      while ((char **)v31 != &JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::s_info && v31 != 0);
    }
  }
  if (v30)
    return 32;
  v33 = a1 != 0;
  if (a1)
  {
    v33 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::s_info)
    {
      v34 = a1;
      do
      {
        v34 = *(_QWORD *)(v34 + 16);
        v33 = v34 != 0;
      }
      while ((char **)v34 != &JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::s_info && v34 != 0);
    }
  }
  if (v33)
    return 512;
  v36 = a1 != 0;
  if (a1)
  {
    v36 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::s_info)
    {
      v37 = a1;
      do
      {
        v37 = *(_QWORD *)(v37 + 16);
        v36 = v37 != 0;
      }
      while ((char **)v37 != &JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::s_info && v37 != 0);
    }
  }
  if (v36)
    return 64;
  v39 = a1 != 0;
  if (a1)
  {
    v39 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::s_info)
    {
      v40 = a1;
      do
      {
        v40 = *(_QWORD *)(v40 + 16);
        v39 = v40 != 0;
      }
      while ((char **)v40 != &JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::s_info && v40 != 0);
    }
  }
  if (v39)
    return 1024;
  v42 = a1 != 0;
  if (a1)
  {
    v42 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::s_info)
    {
      v43 = a1;
      do
      {
        v43 = *(_QWORD *)(v43 + 16);
        v42 = v43 != 0;
      }
      while ((char **)v43 != &JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::s_info && v43 != 0);
    }
  }
  if (v42)
    return 2048;
  v45 = a1 != 0;
  if (a1)
  {
    v45 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::s_info)
    {
      v46 = a1;
      do
      {
        v46 = *(_QWORD *)(v46 + 16);
        v45 = v46 != 0;
      }
      while ((char **)v46 != &JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::s_info && v46 != 0);
    }
  }
  if (v45)
    return 4096;
  v48 = a1 != 0;
  if (a1)
  {
    v48 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::s_info)
    {
      v49 = a1;
      do
      {
        v49 = *(_QWORD *)(v49 + 16);
        v48 = v49 != 0;
      }
      while ((char **)v49 != &JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::s_info && v49 != 0);
    }
  }
  if (v48)
    return 0x2000;
  v51 = a1 != 0;
  if (a1)
  {
    v51 = 1;
    if ((char **)a1 != &JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::s_info)
    {
      v52 = a1;
      do
      {
        v52 = *(_QWORD *)(v52 + 16);
        v51 = v52 != 0;
      }
      while ((char **)v52 != &JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::s_info && v52 != 0);
    }
  }
  if (v51)
    return 0x4000;
  while ((char **)a1 != &JSC::JSObject::s_info && a1 != 0)
  {
    a1 = *(_QWORD *)(a1 + 16);
    v1 = a1 != 0;
  }
  if (v1)
    return 0x8000000;
  else
    return 0x80000000;
}

uint64_t JSC::speculationFromValue(unint64_t a1)
{
  BOOL v2;
  unint64_t v3;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!a1)
    return 0x40000000000;
  if (a1 >= 0xFFFE000000000000)
  {
    v8 = (a1 & 0xFFFFFFFE) == 0;
    v9 = 0x200000000;
    v10 = 0x100000000;
    goto LABEL_16;
  }
  if (a1 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v12 = (uint64_t)COERCE_DOUBLE(a1 - 0x2000000000000);
    if ((double)v12 != COERCE_DOUBLE(a1 - 0x2000000000000))
      return 0x2000000000;
    if (v12)
    {
      if ((unint64_t)(v12 + 0x8000000000000) >> 52)
        return 0x2000000000;
    }
    else if ((uint64_t)a1 < 0x2000000000000)
    {
      return 0x2000000000;
    }
    return 0x1000000000;
  }
  if ((a1 & 0xFFFE000000000002) != 0)
  {
    v8 = (a1 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v9 = 0x20000000000;
    v10 = 0x10000000000;
LABEL_16:
    if (v8)
      return v10;
    else
      return v9;
  }
  v2 = qword_1ECF4C080 <= a1;
  v3 = a1 >> 36;
  v5 = (a1 & 0xFFFFFFFFFLL) != 0 && v3 == 0;
  if (qword_1ECF4C080 <= a1 && v5 || (result = 0, v2) && !v3 && (a1 & 0xFFFFFFFFFLL) != 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 5);
    if (v6 == 2)
    {
      v11 = *(_QWORD *)(a1 + 8);
      result = 805306368;
      if (v11 && (v11 & 1) == 0)
      {
        if (v11 < qword_1ECF4C080)
        {
          return 0;
        }
        else
        {
          result = 0;
          if (!(v11 >> 36) && (v11 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v11 + 16) & 0x10) != 0)
              return 0x10000000;
            else
              return 805306368;
          }
        }
      }
    }
    else
    {
      return JSC::speculatedTypeMapping[v6];
    }
  }
  return result;
}

uint64_t JSC::int52AwareSpeculationFromValue(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if ((unint64_t)a1 > 0xFFFDFFFFFFFFFFFFLL)
  {
    v2 = (int)a1;
LABEL_8:
    v4 = v2 == (int)v2;
    v5 = 0x800000000;
    v6 = 0x400000000;
    goto LABEL_9;
  }
  if ((unint64_t)a1 >> 49)
  {
    v2 = (uint64_t)COERCE_DOUBLE(a1 - 0x2000000000000);
    if ((double)v2 != COERCE_DOUBLE(a1 - 0x2000000000000))
    {
LABEL_4:
      if ((double)v2 != COERCE_DOUBLE(a1 - 0x2000000000000))
        return 0x2000000000;
      if (v2)
      {
        if ((unint64_t)(v2 + 0x8000000000000) >> 52)
          return 0x2000000000;
      }
      else if (a1 < 0x2000000000000)
      {
        return 0x2000000000;
      }
      return 0x1000000000;
    }
    if (v2)
    {
      if ((unint64_t)(v2 + 0x8000000000000) >> 52)
        goto LABEL_4;
    }
    else
    {
      if (a1 < 0x2000000000000)
        goto LABEL_4;
      v2 = 0;
    }
    goto LABEL_8;
  }
  if (!a1)
    return 0x40000000000;
  if ((a1 & 0xFFFE000000000002) != 0)
  {
    v4 = (a1 & 0xFFFFFFFFFFFFFFFELL) == 6;
    v5 = 0x20000000000;
    v6 = 0x10000000000;
LABEL_9:
    if (v4)
      return v6;
    else
      return v5;
  }
  if (qword_1ECF4C080 > (unint64_t)a1)
    return 0;
  result = 0;
  if (!((unint64_t)a1 >> 36) && (a1 & 0xFFFFFFFFFLL) != 0)
  {
    v7 = *(unsigned __int8 *)(a1 + 5);
    if (v7 != 2)
      return JSC::speculatedTypeMapping[v7];
    v8 = *(_QWORD *)(a1 + 8);
    result = 805306368;
    if (v8)
    {
      if ((v8 & 1) == 0)
      {
        if (v8 >= qword_1ECF4C080)
        {
          result = 0;
          if (!(v8 >> 36) && (v8 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v8 + 16) & 0x10) != 0)
              return 0x10000000;
            else
              return 805306368;
          }
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t JSC::speculationFromJSType(JSC *this, JSType a2)
{
  uint64_t result;

  if ((int)this <= 36)
  {
    if ((int)this <= 35)
    {
      switch((_DWORD)this)
      {
        case 2:
          return 805306368;
        case 4:
          return 0x40000000;
        case 3:
          return 0x80000000000;
        default:
          return 0;
      }
    }
    else
    {
      return 2;
    }
  }
  else
  {
    switch((int)this)
    {
      case ';':
        return 0x40000;
      case '<':
        return 0x80000;
      case '=':
        return 0x2000000;
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
        return 0;
      case 'D':
        return 0x100000;
      case 'E':
        return 0x200000;
      case 'F':
        return 0x400000;
      case 'G':
        return 0x800000;
      case 'H':
        return 0x1000000;
      default:
        if ((_DWORD)this == 37)
          return 0x4000000;
        if ((_DWORD)this != 50)
          return 0;
        result = 0x200000000000;
        break;
    }
  }
  return result;
}

unint64_t JSC::leastUpperBoundOfStrictlyEquivalentSpeculations(unint64_t this)
{
  unint64_t v1;

  v1 = this | 0x3F00000000;
  if ((this & 0x3F00000000) == 0)
    v1 = this;
  if ((v1 & 0x30000000) != 0)
    return v1 | 0x30000000;
  else
    return v1;
}

BOOL JSC::valuesCouldBeEqual(unint64_t this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  _BOOL4 v6;

  v2 = this | 0x3F00000000;
  if ((this & 0x3F00000000) == 0)
    v2 = this;
  if ((v2 & 0x30000000) != 0)
    v2 |= 0x30000000uLL;
  if ((v2 & 0x93F00000000) != 0)
    v2 |= 0x93F00000000uLL;
  v3 = a2 | 0x3F00000000;
  if ((a2 & 0x3F00000000) == 0)
    v3 = a2;
  if ((v3 & 0x30000000) != 0)
    v3 |= 0x30000000uLL;
  if ((v3 & 0x93F00000000) != 0)
    v4 = v3 | 0x93F00000000;
  else
    v4 = v3;
  if (((v2 | v4) & 0x30000000) != 0)
    return 1;
  if ((v2 & 0x20000FFFFFF7) == 0 || (v2 & 0xFFFFDFFFF0000008) != 0)
  {
    if (!(v2 & 0x20000FFFFFF7 | v4 & 0x20000FFFFFF7))
      return (v4 & v2) != 0;
    return 1;
  }
  result = 1;
  if ((v4 & 0x20000FFFFFF7) != 0)
  {
    v6 = (v4 & v2) != 0;
    return (v4 & 0xFFFFDFFFF0000008) != 0 || v6;
  }
  return result;
}

unint64_t JSC::typeOfDoubleSum(unint64_t this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = a2 | this;
  v3 = (2 * (a2 | this)) & 0x4000000000;
  if (((a2 | this) & 0x8000000000) != 0)
    v3 = 0x4000000000;
  v4 = v3 | v2;
  if ((v2 & 0x3000000000) != 0)
    return v4 | 0x3000000000;
  else
    return v4;
}

unint64_t JSC::typeOfDoubleIncOrDec(unint64_t this)
{
  if ((this & 0x3000000000) != 0)
    return (this >> 1) & 0x4000000000 | this | 0x3000000000;
  else
    return (this >> 1) & 0x4000000000 | this;
}

unint64_t JSC::typeOfDoubleQuotient(unint64_t this, uint64_t a2)
{
  unint64_t v2;

  v2 = a2 | this;
  if (((a2 | this) & 0x8000000000) != 0)
    v2 = a2 | this | 0xC000000000;
  if ((v2 & 0x3000000000) != 0)
    return v2 | 0x7000000000;
  else
    return v2;
}

unint64_t JSC::typeOfDoubleNegation(unint64_t this)
{
  unint64_t v1;

  v1 = this | 0xC000000000;
  if ((this & 0xC000000000) == 0)
    v1 = this;
  if ((v1 & 0x3000000000) != 0)
    return v1 | 0x3000000000;
  else
    return v1;
}

unint64_t JSC::typeOfDoubleRounding(unint64_t this)
{
  unint64_t v1;

  v1 = this | 0xC000000000;
  if ((this & 0xC000000000) == 0)
    v1 = this;
  return (v1 >> 1) & 0x1000000000 | v1;
}

unint64_t JSC::typeOfDoublePow(unint64_t this, uint64_t a2)
{
  unint64_t v2;

  v2 = this | 0x4000000000;
  if ((a2 & 0xC000000000) == 0)
    v2 = this;
  if ((v2 & 0xC000000000) != 0)
    v2 |= 0xF000000000uLL;
  if ((v2 & 0x8000000000) != 0)
    v2 |= 0xC000000000uLL;
  if ((v2 & 0x3000000000) != 0)
    return v2 | 0x7000000000;
  else
    return v2;
}

uint64_t JSC::speculationFromString(JSC *this, const char *a2)
{
  uint64_t result;

  if (!strncmp((const char *)this, "SpecNone", 8uLL))
    return 0;
  if (!strncmp((const char *)this, "SpecFinalObject", 0xFuLL))
    return 1;
  if (!strncmp((const char *)this, "SpecArray", 9uLL))
    return 2;
  if (!strncmp((const char *)this, "SpecFunction", 0xCuLL))
    return 4;
  if (!strncmp((const char *)this, "SpecInt8Array", 0xDuLL))
    return 16;
  if (!strncmp((const char *)this, "SpecInt16Array", 0xEuLL))
    return 32;
  if (!strncmp((const char *)this, "SpecInt32Array", 0xEuLL))
    return 64;
  if (!strncmp((const char *)this, "SpecUint8Array", 0xEuLL))
    return 128;
  if (!strncmp((const char *)this, "SpecUint8ClampedArray", 0x15uLL))
    return 256;
  if (!strncmp((const char *)this, "SpecUint16Array", 0xFuLL))
    return 512;
  if (!strncmp((const char *)this, "SpecUint32Array", 0xFuLL))
    return 1024;
  if (!strncmp((const char *)this, "SpecFloat32Array", 0x10uLL))
    return 2048;
  if (!strncmp((const char *)this, "SpecFloat64Array", 0x10uLL))
    return 4096;
  if (!strncmp((const char *)this, "SpecBigInt64Array", 0x11uLL))
    return 0x2000;
  if (!strncmp((const char *)this, "SpecBigUint64Array", 0x12uLL))
    return 0x4000;
  if (!strncmp((const char *)this, "SpecTypedArrayView", 0x12uLL))
    return 32752;
  if (!strncmp((const char *)this, "SpecDirectArguments", 0x13uLL))
    return 0x8000;
  if (!strncmp((const char *)this, "SpecScopedArguments", 0x13uLL))
    return 0x10000;
  if (!strncmp((const char *)this, "SpecStringObject", 0x10uLL))
    return 0x20000;
  if (!strncmp((const char *)this, "SpecRegExpObject", 0x10uLL))
    return 0x40000;
  if (!strncmp((const char *)this, "SpecDateObject", 0xEuLL))
    return 0x80000;
  if (!strncmp((const char *)this, "SpecPromiseObject", 0x11uLL))
    return 0x100000;
  if (!strncmp((const char *)this, "SpecMapObject", 0xDuLL))
    return 0x200000;
  if (!strncmp((const char *)this, "SpecSetObject", 0xDuLL))
    return 0x400000;
  if (!strncmp((const char *)this, "SpecWeakMapObject", 0x11uLL))
    return 0x800000;
  if (!strncmp((const char *)this, "SpecWeakSetObject", 0x11uLL))
    return 0x1000000;
  if (!strncmp((const char *)this, "SpecProxyObject", 0xFuLL))
    return 0x2000000;
  if (!strncmp((const char *)this, "SpecDerivedArray", 0x10uLL))
    return 0x4000000;
  if (!strncmp((const char *)this, "SpecDataViewObject", 0x12uLL))
    return 0x200000000000;
  if (!strncmp((const char *)this, "SpecObjectOther", 0xFuLL))
    return 0x8000000;
  if (!strncmp((const char *)this, "SpecObject", 0xAuLL))
    return 0x20000FFFFFF7;
  if (!strncmp((const char *)this, "SpecStringIdent", 0xFuLL))
    return 0x10000000;
  if (!strncmp((const char *)this, "SpecStringVar", 0xDuLL))
    return 0x20000000;
  if (!strncmp((const char *)this, "SpecString", 0xAuLL))
    return 805306368;
  if (!strncmp((const char *)this, "SpecSymbol", 0xAuLL))
    return 0x40000000;
  if (!strncmp((const char *)this, "SpecBigInt", 0xAuLL))
    return 0x80000000000;
  if (!strncmp((const char *)this, "SpecCellOther", 0xDuLL))
    return 0x80000000;
  if (!strncmp((const char *)this, "SpecCell", 8uLL))
    return 0x2800FFFFFFF7;
  if (!strncmp((const char *)this, "SpecBoolInt32", 0xDuLL))
    return 0x100000000;
  if (!strncmp((const char *)this, "SpecNonBoolInt32", 0x10uLL))
    return 0x200000000;
  if (!strncmp((const char *)this, "SpecInt32Only", 0xDuLL))
    return 0x300000000;
  if (!strncmp((const char *)this, "SpecInt32AsInt52", 0x10uLL))
    return 0x400000000;
  if (!strncmp((const char *)this, "SpecNonInt32AsInt52", 0x13uLL))
    return 0x800000000;
  if (!strncmp((const char *)this, "SpecInt52Any", 0xCuLL))
    return 0xC00000000;
  if (!strncmp((const char *)this, "SpecIntAnyFormat", 0x10uLL))
    return 0x1F00000000;
  if (!strncmp((const char *)this, "SpecAnyIntAsDouble", 0x12uLL))
    return 0x1000000000;
  if (!strncmp((const char *)this, "SpecNonIntAsDouble", 0x12uLL))
    return 0x2000000000;
  if (!strncmp((const char *)this, "SpecDoubleReal", 0xEuLL))
    return 0x3000000000;
  if (!strncmp((const char *)this, "SpecDoublePureNaN", 0x11uLL))
    return 0x4000000000;
  if (!strncmp((const char *)this, "SpecDoubleImpureNaN", 0x13uLL))
    return 0x8000000000;
  if (!strncmp((const char *)this, "SpecDoubleNaN", 0xDuLL))
    return 0xC000000000;
  if (!strncmp((const char *)this, "SpecBytecodeDouble", 0x12uLL))
    return 0x7000000000;
  if (!strncmp((const char *)this, "SpecFullDouble", 0xEuLL))
    return 0xF000000000;
  if (!strncmp((const char *)this, "SpecBytecodeRealNumber", 0x16uLL))
    return 0x3300000000;
  if (!strncmp((const char *)this, "SpecFullRealNumber", 0x12uLL))
    return 0x3F00000000;
  if (!strncmp((const char *)this, "SpecBytecodeNumber", 0x12uLL))
    return 0x7300000000;
  if (!strncmp((const char *)this, "SpecFullNumber", 0xEuLL))
    return 0xFF00000000;
  if (!strncmp((const char *)this, "SpecBoolean", 0xBuLL))
    return 0x10000000000;
  if (!strncmp((const char *)this, "SpecOther", 9uLL))
    return 0x20000000000;
  if (!strncmp((const char *)this, "SpecMisc", 8uLL))
    return 0x30000000000;
  if (!strncmp((const char *)this, "SpecHeapTop", 0xBuLL))
    return 0x3B73FFFFFFF7;
  if (!strncmp((const char *)this, "SpecPrimitive", 0xDuLL))
    return 0xB7370000000;
  if (!strncmp((const char *)this, "SpecEmpty", 9uLL))
    return 0x40000000000;
  if (!strncmp((const char *)this, "SpecBytecodeTop", 0xFuLL))
    return 0x3F73FFFFFFF7;
  if (!strncmp((const char *)this, "SpecFullTop", 0xBuLL))
    return 0x3FFFFFFFFFF7;
  if (!strncmp((const char *)this, "SpecCellCheck", 0xDuLL))
    return 0x2C00FFFFFFF7;
  result = 1015;
  __break(0xC471u);
  return result;
}

_QWORD *JSC::StructureSet::markIfCheap<JSC::AbstractSlotVisitor>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = *result;
  if ((*result & 1) != 0)
    v5 = *(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v5 = v4 > 3;
  if (v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v8 = *v3 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*v3 & 1) != 0)
        v8 = *(_QWORD *)(v8 + v6 + 8);
      if ((!*(_QWORD *)(v8 + 40) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
        && ((*(_QWORD *)(v8 + 48) | 2) == 2
         || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
      {
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 24))(a2, v8);
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v8);
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

_QWORD *JSC::StructureSet::markIfCheap<JSC::SlotVisitor>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v9 = result;
  v10 = *result;
  if ((*result & 1) != 0)
    v11 = *(unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v11 = v10 > 3;
  if (v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    do
    {
      v14 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*v9 & 1) != 0)
        v14 = *(_QWORD *)(v14 + v12 + 8);
      result = (_QWORD *)JSC::Structure::markIfCheap<JSC::SlotVisitor>(v14, a2, a3, a4, a5, a6, a7, a8);
      v12 += 8;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t JSC::StructureSet::isStillAlive(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  if ((*a1 & 1) != 0)
    v3 = *(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v3 = v2 > 3;
  if (!v3)
    return 1;
  v4 = 0;
  v5 = 8 * v3;
  while (1)
  {
    v6 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*a1 & 1) != 0)
      v6 = *(_QWORD *)(v6 + v4 + 8);
    if ((v6 & 8) == 0)
      break;
    if ((*(_BYTE *)(v6 - 79) & 1) == 0)
      return 0;
LABEL_10:
    v4 += 8;
    if (v5 == v4)
      return 1;
  }
  if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
    && ((*(_QWORD *)((v6 & 0xFFFFFFFFFFFFC000) + 8 * ((v6 >> 10) & 0xF) + 0x28) >> (v6 >> 4)) & 1) != 0)
  {
    goto LABEL_10;
  }
  return 0;
}

uint64_t JSC::StructureSet::dumpInContext(JSC::StructureSet *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  uint64_t v9;
  JSC::Structure *v10;
  WTF::PrintStream *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  unint64_t v24;
  JSC::Structure *v25;
  WTF::PrintStream *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF::PrintStream *v39;
  float v40;
  WTF *v42;
  int v43;
  char v44;

  v6 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  WTF::StringImpl::utf8ForCharacters("[", 1uLL, (uint64_t)&v42, v8);
  WTF::printExpectedCStringHelper(v7, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v9 = *(_QWORD *)this;
  v10 = (JSC::Structure *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL);
  if ((v9 & 1) != 0)
  {
    if (*(_DWORD *)v10)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = (JSC::Structure *)*((_QWORD *)v10 + v24 + 1);
        v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v27 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v26 + 32))(v26);
        v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
        if (v23)
        {
          WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v42, v29);
          WTF::printExpectedCStringHelper(v28, "StringView", &v42);
          if (v43 != -1)
            ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
        }
        else
        {
          WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v42, v29);
          WTF::printExpectedCStringHelper(v28, "StringView", &v42);
          if (v43 != -1)
            ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
          v23 = 1;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v26 + 40))(v26);
        if (a3)
        {
          WTF::StringHashDumpContext<JSC::Structure>::getID(v25, (uint64_t *)a3, (int8x16_t **)&v42);
          JSC::Structure::dumpBrief(v25, v26, (const WTF::CString *)&v42);
          v37 = v42;
          v42 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
              WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
            else
              --*(_DWORD *)v37;
          }
        }
        else
        {
          JSC::Structure::dump((unint64_t)v25, v26);
        }
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        ++v24;
      }
      while (v24 < *(unsigned int *)v10);
    }
  }
  else if (v10)
  {
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v42, v14);
    WTF::printExpectedCStringHelper(v13, "StringView", &v42);
    if (v43 != -1)
      ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
    if (a3)
    {
      WTF::StringHashDumpContext<JSC::Structure>::getID(v10, (uint64_t *)a3, (int8x16_t **)&v42);
      JSC::Structure::dumpBrief(v10, v11, (const WTF::CString *)&v42);
      v22 = v42;
      v42 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
        else
          --*(_DWORD *)v22;
      }
    }
    else
    {
      JSC::Structure::dump((unint64_t)v10, v11);
    }
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v38 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v39 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
  WTF::StringImpl::utf8ForCharacters("]", 1uLL, (uint64_t)&v42, v40);
  WTF::printExpectedCStringHelper(v39, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::GetByStatus::~GetByStatus(JSC::GetByStatus *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  JSC::GetByVariant *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((unsigned int *)this + 3);
  if ((_DWORD)v12)
  {
    v13 = *(JSC::GetByVariant **)this;
    v14 = v12 << 6;
    do
    {
      JSC::GetByVariant::~GetByVariant(v13, a2, a3, a4, a5, a6, a7, a8);
      v13 = (JSC::GetByVariant *)(v15 + 64);
      v14 -= 64;
    }
    while (v14);
  }
  v16 = *(_QWORD *)this;
  if ((JSC::GetByStatus *)((char *)this + 16) != *(JSC::GetByStatus **)this && v16 != 0)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::PutByStatus::~PutByStatus(JSC::PutByStatus *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::PutByStatus *v10;

  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*((_QWORD **)this + 1), (_QWORD *)(*((_QWORD *)this + 1) + (v9 << 6)), a3, a4, a5, a6, a7, a8);
  v10 = (JSC::PutByStatus *)*((_QWORD *)this + 1);
  if ((JSC::PutByStatus *)((char *)this + 24) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void std::unique_ptr<JSC::InByStatus>::reset[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v8 = *a1;
  *a1 = (unint64_t)a2;
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 20);
    if ((_DWORD)v9)
    {
      v12 = *(_QWORD **)(v8 + 8);
      v13 = &v12[4 * v9];
      do
      {
        v14 = (unsigned int *)v12[1];
        v12[1] = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        if ((*v12 & 1) != 0)
          WTF::fastFree(*v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v12 += 4;
      }
      while (v12 != v13);
    }
    v10 = *(_QWORD *)(v8 + 8);
    if (v8 + 24 != v10 && v10 != 0)
    {
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t std::make_unique[abi:sn180100]<JSC::DeleteByStatus,JSC::DeleteByStatus const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v4 = WTF::fastMalloc((WTF *)0x40);
  v5 = *((unsigned int *)a2 + 3);
  result = v4 + 16;
  *(_QWORD *)v4 = v4 + 16;
  *(_DWORD *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = v5;
  if (v5 >= 2)
  {
    if (v5 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v12 = 40 * v5;
    result = WTF::fastMalloc((WTF *)(40 * v5));
    *(_DWORD *)(v4 + 8) = (v12 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v4 = result;
  }
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *a2;
    v10 = 40 * v7;
    do
    {
      v11 = result + v8;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v9 + v8 + 32);
      *(_BYTE *)v11 = *(_BYTE *)(v9 + v8);
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(v9 + v8 + 8);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v9 + v8 + 24);
      v8 += 40;
    }
    while (v10 != v8);
  }
  *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
  *a1 = v4;
  return result;
}

uint64_t std::make_unique[abi:sn180100]<JSC::CheckPrivateBrandStatus,JSC::CheckPrivateBrandStatus const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x28);
  result = WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4, a2);
  *(_BYTE *)(result + 32) = *(_BYTE *)(a2 + 32);
  *a1 = result;
  return result;
}

void WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::add<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int i;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unsigned int v39;
  char v40;
  uint64_t v41;
  int k;
  unsigned int v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  int j;
  BOOL v48;
  int v50;
  __int128 v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::FTL::SlowPathCallKey,WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::SlowPathCallKey>>::rehash(a1, 8u, 0), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = a2[1];
  v16 = v15 & 0x300;
  if (v16 == 512)
  {
    v17 = 0;
    v18 = *a2;
    v19 = a2[2];
  }
  else
  {
    v19 = a2[2];
    v18 = 0;
    if (v16 == 768)
      v17 = *(_DWORD *)a2;
    else
      v17 = 0;
  }
  v20 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = (v19 + ~(v19 << 32)) ^ ((unint64_t)(v19 + ~(v19 << 32)) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = ((v15 >> 8) & 3) + (v15 >> 10) + v17 + ((v22 >> 31) ^ v22) + ((v25 >> 31) ^ v25);
  v27 = a2[1];
  v28 = *a2;
  if (v16 == 512)
    v29 = *a2;
  else
    v29 = 0;
  if (v16 != 512 || !v28)
  {
    if (v16 != 768)
    {
      v30 = 0;
      for (i = 1; ; ++i)
      {
        v32 = v26 & v14;
        v33 = (_QWORD *)(v12 + 40 * (v26 & v14));
        v34 = v33[1];
        v35 = v34 & 0x300;
        if (v35 == 256)
        {
          v30 = v12 + 40 * v32;
        }
        else
        {
          if ((v34 & 0x300) == 0)
            goto LABEL_81;
          a4 = v34 ^ v15;
          if ((v34 ^ v15) <= 0x3FF)
          {
            a5 = v33[2];
            a4 &= 0x300u;
            v36 = !a4 && v33[1] == v27;
            if (v36 && a5 == v19)
            {
              if (v35 == 512)
              {
                if (*v33 == v29)
                  goto LABEL_34;
              }
              else if (v35 != 768 || *(_DWORD *)v33 == 0)
              {
                goto LABEL_34;
              }
            }
          }
        }
        v26 = i + v32;
      }
    }
    v30 = 0;
    for (j = 1; ; ++j)
    {
      v35 = v26 & v14;
      v33 = (_QWORD *)(v12 + 40 * v35);
      a4 = v33[1];
      v34 = a4 & 0x300;
      if (v34 == 256)
      {
        v30 = v12 + 40 * v35;
      }
      else
      {
        if ((a4 & 0x300) == 0)
          goto LABEL_81;
        a5 = a4 ^ v15;
        if ((a4 ^ v15) <= 0x3FF)
        {
          a6 = v33[2];
          a5 &= 0x300u;
          v48 = !a5 && v33[1] == v27;
          if (v48 && a6 == v19)
          {
            if (v34 == 512)
            {
              if (*v33 != v29)
                goto LABEL_77;
              v50 = 0;
            }
            else if (v34 == 768)
            {
              v50 = *(_DWORD *)v33;
            }
            else
            {
              v50 = 0;
            }
            if (v50 == (_DWORD)v28)
              goto LABEL_34;
          }
        }
      }
LABEL_77:
      v26 = j + v35;
    }
  }
  v30 = 0;
  for (k = 1; ; ++k)
  {
    v43 = v26 & v14;
    v33 = (_QWORD *)(v12 + 40 * (v26 & v14));
    v34 = v33[1];
    v35 = v34 & 0x300;
    if (v35 == 256)
    {
      v30 = v12 + 40 * v43;
      goto LABEL_58;
    }
    if ((v34 & 0x300) == 0)
    {
LABEL_81:
      if (v30)
      {
        *(_QWORD *)(v30 + 32) = 0;
        *(_OWORD *)v30 = 0u;
        *(_OWORD *)(v30 + 16) = 0u;
        --*(_DWORD *)(*a1 - 16);
        v33 = (_QWORD *)v30;
      }
      v51 = *(_OWORD *)a2;
      v33[2] = a2[2];
      *(_OWORD *)v33 = v51;
      v33[3] = *a3;
      v52 = (unsigned int *)a3[1];
      if (v52)
      {
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 + 1, v52));
      }
      v54 = (unsigned int *)v33[4];
      v33[4] = v52;
      if (v54)
      {
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v54);
          v64 = v33;
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v54, v35, (uint64_t)v33, v34, a4, a5, a6, a7);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
          v33 = v64;
        }
      }
      v57 = *a1;
      if (*a1)
        v58 = *(_DWORD *)(v57 - 12) + 1;
      else
        v58 = 1;
      *(_DWORD *)(v57 - 12) = v58;
      v59 = *a1;
      if (*a1)
        v60 = *(_DWORD *)(v59 - 12);
      else
        v60 = 0;
      v61 = (*(_DWORD *)(v59 - 16) + v60);
      v62 = *(unsigned int *)(v59 - 4);
      if (v62 > 0x400)
      {
        if (v62 <= 2 * v61)
          goto LABEL_98;
      }
      else if (3 * v62 <= 4 * v61)
      {
        if (!(_DWORD)v62)
        {
          v63 = 8;
LABEL_100:
          v33 = (_QWORD *)WTF::HashTable<JSC::FTL::SlowPathCallKey,WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::SlowPathCallKey>>::rehash(a1, v63, (uint64_t)v33);
          v59 = *a1;
          if (*a1)
            LODWORD(v62) = *(_DWORD *)(v59 - 4);
          else
            LODWORD(v62) = 0;
          goto LABEL_103;
        }
LABEL_98:
        v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
        goto LABEL_100;
      }
LABEL_103:
      v41 = v59 + 40 * v62;
      v40 = 1;
      goto LABEL_38;
    }
    a4 = v34 ^ v15;
    if ((v34 ^ v15) <= 0x3FF)
    {
      a5 = v33[2];
      a4 &= 0x300u;
      v44 = v35 == 512 && a4 == 0;
      v45 = v44 && v33[1] == v27;
      v46 = v45 && a5 == v19;
      if (v46 && *v33 == v29)
        break;
    }
LABEL_58:
    v26 = k + v43;
  }
LABEL_34:
  if ((v13 & 1) != 0)
    v39 = 0;
  else
    v39 = *(_DWORD *)(v12 - 4);
  v40 = 0;
  v41 = v12 + 40 * v39;
LABEL_38:
  *(_QWORD *)a8 = v33;
  *(_QWORD *)(a8 + 8) = v41;
  *(_BYTE *)(a8 + 16) = v40;
}

uint64_t *WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTableTraits>::add<JSC::FTL::SlowPathCallKey const&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ ((_DWORD)v14 + ~((_DWORD)v14 << 27)));
  v16 = v8 + 32 * v15;
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16 != 1)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 32 * v23;
        goto LABEL_32;
      }
      if (v17 == 2)
        v18 = (_QWORD *)v16;
      v15 = ((_DWORD)v15 + v19) & v10;
      v16 = v8 + 32 * v15;
      v17 = *(_QWORD *)v16;
      ++v19;
    }
    while (*(_QWORD *)v16 != 1);
    if (v18)
    {
      *v18 = 1;
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = (uint64_t)v18;
    }
  }
  *(_QWORD *)v16 = v11;
  v20 = *a3;
  *(_QWORD *)(v16 + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v16 + 8) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_23;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
LABEL_28:
      result = (uint64_t *)WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>>::rehash(v6, v28, v16);
      v16 = (uint64_t)result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_28;
  }
LABEL_31:
  v30 = v24 + 32 * v27;
  v29 = 1;
LABEL_32:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

_QWORD *WTF::HashTable<JSC::FTL::SlowPathCallKey,WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::SlowPathCallKey>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>>,JSC::FTL::SlowPathCallKey>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int i;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int k;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  int j;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v36;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = a2[1];
  v5 = v4 & 0x300;
  if (v5 == 512)
  {
    v6 = 0;
    v7 = *a2;
    v8 = a2[2];
  }
  else
  {
    v8 = a2[2];
    v7 = 0;
    if (v5 == 768)
      v6 = *(_DWORD *)a2;
    else
      v6 = 0;
  }
  v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v3 & (((v4 >> 8) & 3) + (v4 >> 10) + v6 + ((v11 >> 31) ^ v11) + ((v14 >> 31) ^ v14));
  v16 = a2[1];
  v17 = *a2;
  if (v5 == 512)
    v18 = *a2;
  else
    v18 = 0;
  if (v5 != 512 || !v17)
  {
    if (v5 != 768)
    {
      for (i = 1; ; ++i)
      {
        result = (_QWORD *)(v2 + 40 * v15);
        v21 = result[1];
        v22 = v21 & 0x300;
        if (v22 != 256)
        {
          if ((v21 & 0x300) == 0)
            return 0;
          if ((v21 ^ v4) <= 0x3FF)
          {
            v23 = (((unsigned __int16)v21 ^ (unsigned __int16)v4) & 0x300) == 0 && result[1] == v16;
            if (v23 && result[2] == v8)
            {
              if (v22 == 512)
              {
                if (*result == v18)
                  return result;
              }
              else if (v22 != 768 || *(_DWORD *)result == 0)
              {
                return result;
              }
            }
          }
        }
        v15 = (v15 + i) & v3;
      }
    }
    for (j = 1; ; ++j)
    {
      result = (_QWORD *)(v2 + 40 * v15);
      v32 = result[1];
      v33 = v32 & 0x300;
      if (v33 != 256)
      {
        if ((v32 & 0x300) == 0)
          return 0;
        if ((v32 ^ v4) <= 0x3FF)
        {
          v34 = (((unsigned __int16)v32 ^ (unsigned __int16)v4) & 0x300) == 0 && result[1] == v16;
          if (v34 && result[2] == v8)
          {
            if (v33 == 512)
            {
              if (*result != v18)
                goto LABEL_64;
              v36 = 0;
            }
            else if (v33 == 768)
            {
              v36 = *(_DWORD *)result;
            }
            else
            {
              v36 = 0;
            }
            if (v36 == (_DWORD)v17)
              return result;
          }
        }
      }
LABEL_64:
      v15 = (v15 + j) & v3;
    }
  }
  for (k = 1; ; ++k)
  {
    result = (_QWORD *)(v2 + 40 * v15);
    v27 = result[1];
    if ((v27 & 0x300) != 0x100)
    {
      if ((v27 & 0x300) == 0)
        return 0;
      if ((v27 ^ v4) <= 0x3FF)
      {
        v28 = (v27 & 0x300) == 0x200 && (((unsigned __int16)v27 ^ (unsigned __int16)v4) & 0x300) == 0;
        v29 = v28 && result[1] == v16;
        v30 = v29 && result[2] == v8;
        if (v30 && *result == v18)
          break;
      }
    }
    v15 = (v15 + k) & v3;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::FTL::SlowPathCallKey,WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::SlowPathCallKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 40 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = v6 + 40 * v19;
      v22 = *(_QWORD *)(v21 + 8) & 0x300;
      if (v22 != 256)
      {
        if (v22)
        {
          v35 = WTF::HashTable<JSC::FTL::SlowPathCallKey,WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::SlowPathCallKey>>::lookupForReinsert(a1, (uint64_t *)(v6 + 40 * v19));
          v36 = *(unsigned int **)(v35 + 32);
          *(_QWORD *)(v35 + 32) = 0;
          if (v36)
          {
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v36, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
            }
          }
          v39 = *(_OWORD *)v21;
          *(_QWORD *)(v35 + 16) = *(_QWORD *)(v21 + 16);
          *(_OWORD *)v35 = v39;
          v40 = v6 + 40 * v19;
          *(_QWORD *)(v35 + 24) = *(_QWORD *)(v40 + 24);
          v41 = *(_QWORD *)(v40 + 32);
          *(_QWORD *)(v40 + 32) = 0;
          *(_QWORD *)(v35 + 32) = v41;
          v42 = *(unsigned int **)(v40 + 32);
          *(_QWORD *)(v40 + 32) = 0;
          if (v42)
          {
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v42);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v42, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
            }
          }
          if (v21 == a3)
            v20 = v35;
        }
        else
        {
          v23 = v6 + 40 * v19;
          v24 = *(unsigned int **)(v23 + 32);
          *(_QWORD *)(v23 + 32) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v24, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
            }
          }
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::HashTable<JSC::FTL::SlowPathCallKey,WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashMap<JSC::FTL::SlowPathCallKey,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::FTL::SlowPathCallKey>>::lookupForReinsert(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = a2[1];
  if ((v4 & 0x300) == 0x200)
  {
    v5 = 0;
    v6 = *a2;
    v7 = a2[2];
  }
  else
  {
    v7 = a2[2];
    v6 = 0;
    if ((v4 & 0x300) == 0x300)
      v5 = *(_DWORD *)a2;
    else
      v5 = 0;
  }
  v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v3 & (((v4 >> 8) & 3) + (v4 >> 10) + v5 + ((v10 >> 31) ^ v10) + ((v13 >> 31) ^ v13));
  v15 = 1;
  do
  {
    result = v2 + 40 * v14;
    v14 = (v14 + v15++) & v3;
  }
  while ((*(_BYTE *)(result + 9) & 3) != 0);
  return result;
}

_OWORD *WTF::HashTable<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey>>,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashMap<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>,JSC::FTL::SlowPathCallKey,WTF::DefaultHash<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>,WTF::HashTraits<JSC::FTL::SlowPathCallKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CodePtr<(WTF::PtrTag)26129,(WTF::FunctionAttributes)0>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = (_QWORD *)(v10 + 24);
    do
    {
      *(v18 - 1) = 1;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      v18 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = v6 + 32 * v19;
      if ((unint64_t)(*(_QWORD *)v21 - 1) >= 2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = (~(*(_QWORD *)v21 << 32) + *(_QWORD *)v21) ^ ((~(*(_QWORD *)v21 << 32) + *(_QWORD *)v21) >> 22);
        v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((unint64_t)(v24 + ~(v24 << 13)) >> 8));
        v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        v27 = v23 & ((v26 >> 31) ^ v26);
        v28 = 1;
        do
        {
          v29 = v27;
          v30 = *(_QWORD *)(v22 + 32 * v27);
          v27 = (v27 + v28++) & v23;
        }
        while (v30 != 1);
        v31 = (_OWORD *)(v22 + 32 * v29);
        v32 = *(_OWORD *)(v21 + 16);
        *v31 = *(_OWORD *)v21;
        v31[1] = v32;
        if (v21 == a3)
          v20 = v31;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
  return v20;
}

void JSC::CacheableIdentifier::ensureIsCell(JSC::CacheableIdentifier *this, JSC::VM *a2, WTF::SymbolImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSCell *v31;
  WTF::StringImpl *v32;

  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) == 0)
    return;
  v11 = (JSC::VM *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16) & 0x20) != 0)
  {
    v31 = (JSCell *)JSC::Symbol::create(a2, v11, a3, a4, a5, a6, a7, a8);
    JSC::CacheableIdentifier::setCellBits((uint64_t)this, v31);
    return;
  }
  if (v11)
    *(_DWORD *)v11 += 2;
  v32 = (WTF::StringImpl *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  v12 = JSC::jsString((uint64_t)a2, (JSC::VM *)&v32, (uint64_t)a3, a4, a5, a6, a7, a8);
  v20 = *(unsigned __int8 *)(v12 + 5);
  if (v20 != 2)
  {
    if (v20 == 4)
      goto LABEL_9;
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x1982148A4);
  }
  v21 = *(_QWORD *)(v12 + 8);
  if (!v21 || (v21 & 1) != 0 || (*(_BYTE *)(v21 + 16) & 0x10) == 0)
    goto LABEL_15;
LABEL_9:
  *(_QWORD *)this = v12;
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
}

unint64_t *WTF::RefPtr<JSC::PolyProtoAccessChain,WTF::RawPtrTraits<JSC::PolyProtoAccessChain>,WTF::DefaultRefDerefTraits<JSC::PolyProtoAccessChain>>::operator=(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v14)
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::CacheableIdentifier::setCellBits(uint64_t this, JSCell *a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;

  v2 = *((unsigned __int8 *)a2 + 5);
  if (v2 == 2)
  {
    v3 = *((_QWORD *)a2 + 1);
    if (v3)
      v4 = (*((_QWORD *)a2 + 1) & 1) == 0;
    else
      v4 = 0;
    if (v4 && (*(_BYTE *)(v3 + 16) & 0x10) != 0)
      goto LABEL_8;
  }
  else if (v2 == 4)
  {
LABEL_8:
    *(_QWORD *)this = a2;
    return this;
  }
  this = 138;
  __break(0xC471u);
  return this;
}

uint64_t *JSC::AccessGenerationResult::fireWatchpoints(uint64_t *this, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;

  v9 = *((unsigned int *)this + 7);
  if ((_DWORD)v9)
  {
    v11 = 24 * v9;
    v12 = (_QWORD *)(this[2] + 8);
    do
    {
      v13 = (uint64_t *)*(v12 - 1);
      v14 = *v13;
      if ((*v13 & 1) != 0)
      {
        *v13 = 5;
      }
      else
      {
        if (*(_BYTE *)(v14 + 4) == 1)
          this = JSC::WatchpointSet::fireAllSlow(v14, a2, v12, a5, a6, a7, a8, a9, a3);
        *(_BYTE *)(v14 + 4) = 2;
      }
      v12 += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return this;
}

uint64_t JSC::PolyProtoAccessChain::slotBaseStructure(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return a2;
  v2 = *a1;
  if (!(_DWORD)v2)
    return a2;
  if (v2 >= (int)v2 - 1)
    return 16 * (a1[v2] & 0xFFFFFFFE);
  result = 146;
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = (_QWORD *)v6;
        v15 = (uint64_t *)(v4 + 16 * v5);
        v16 = (uint64_t *)v4;
        do
        {
          v17 = *v16;
          v18 = v16[1];
          *v16 = 0;
          v16[1] = 0;
          *v14 = v17;
          v14[1] = v18;
          v19 = v16[1];
          v16[1] = 0;
          if (v19)
          {
            v20 = *(_QWORD *)v19;
            if (v19 + 16 != *(_QWORD *)v19 && v20 != 0)
            {
              *(_QWORD *)v19 = 0;
              *(_DWORD *)(v19 + 8) = 0;
              WTF::fastFree(v20, v7, v8, v9, v10, v11, v12, v13);
            }
            WTF::fastFree(v19, v7, v8, v9, v10, v11, v12, v13);
          }
          v22 = *v16;
          if ((*v16 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v22 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
          v16 += 2;
          v14 += 2;
        }
        while (v16 != v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(uint64_t **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)&v5[2 * *(unsigned int *)(result + 12)] > a3)
  {
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = &v5[2 * *(unsigned int *)(result + 12)];
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::move(v5, v10, v11, v12, v13, v14, v15, v16);
    if (v5)
    {
      if (*(uint64_t **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198214E50);
    }
    v7 = *(uint64_t **)a1;
    v8 = (uint64_t *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = v9;
    WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::move(v7, v8, v9, v10, v11, v12, v13, v14);
    if (v7)
    {
      if (*(uint64_t **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::GetByStatus>>>::move(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  JSC::GetByVariant *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v8 = (_QWORD *)a3;
    v10 = a1;
    do
    {
      v11 = *v10;
      v12 = v10[1];
      *v10 = 0;
      v10[1] = 0;
      *v8 = v11;
      v8[1] = v12;
      v13 = v10[1];
      v10[1] = 0;
      if (v13)
      {
        v14 = *(unsigned int **)(v13 + 80);
        *(_QWORD *)(v13 + 80) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v17 = *(unsigned int *)(v13 + 12);
        if ((_DWORD)v17)
        {
          v21 = *(JSC::GetByVariant **)v13;
          v22 = v17 << 6;
          do
          {
            JSC::GetByVariant::~GetByVariant(v21, a2, a3, a4, a5, a6, a7, a8);
            v21 = (JSC::GetByVariant *)(v23 + 64);
            v22 -= 64;
          }
          while (v22);
        }
        v18 = *(_QWORD *)v13;
        if (v13 + 16 != *(_QWORD *)v13 && v18 != 0)
        {
          *(_QWORD *)v13 = 0;
          *(_DWORD *)(v13 + 8) = 0;
          WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v20 = *v10;
      if ((*v10 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v20 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v8 += 2;
      v10 += 2;
    }
    while (v10 != a2);
  }
}

uint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  v4 = result;
  v5 = *(uint64_t **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)&v5[2 * *(unsigned int *)(result + 12)] > a3)
  {
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = &v5[2 * *(unsigned int *)(result + 12)];
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::move(v5, v10, v11, v12, v13, v14, v15, v16);
    if (v5)
    {
      if (*(uint64_t **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1982150E8);
    }
    v7 = *(uint64_t **)a1;
    v8 = (uint64_t *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = v9;
    WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::move(v7, v8, v9, v10, v11, v12, v13, v14);
    if (v7)
    {
      if (*(uint64_t **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::move(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (a1 != a2)
  {
    v8 = (_QWORD *)a3;
    v10 = a1;
    do
    {
      v11 = *v10;
      v12 = v10[1];
      *v10 = 0;
      v10[1] = 0;
      *v8 = v11;
      v8[1] = v12;
      v13 = v10[1];
      v10[1] = 0;
      if (v13)
      {
        v14 = *(unsigned int *)(v13 + 20);
        if ((_DWORD)v14)
          WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*(_QWORD **)(v13 + 8), (_QWORD *)(*(_QWORD *)(v13 + 8) + (v14 << 6)), a3, a4, a5, a6, a7, a8);
        v15 = *(_QWORD *)(v13 + 8);
        if (v13 + 24 != v15 && v15 != 0)
        {
          *(_QWORD *)(v13 + 8) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = *v10;
      if ((*v10 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v10 += 2;
      v8 += 2;
    }
    while (v10 != a2);
  }
}

unint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198215328);
    }
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    if ((_DWORD)v5)
    {
      v14 = (_QWORD *)v6;
      v15 = v4 + 16 * v5;
      v16 = (uint64_t *)v4;
      do
      {
        v17 = *v16;
        v19 = v16 + 1;
        v18 = v16[1];
        v16[1] = 0;
        *v16 = 0;
        *v14 = v17;
        v14[1] = v18;
        std::unique_ptr<JSC::InByStatus>::reset[abi:sn180100]((unint64_t *)v16 + 1, 0, v8, v9, v10, v11, v12, v13);
        v20 = *v16;
        if ((*v16 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v20 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
        v16 += 2;
        v14 += 2;
      }
      while (v19 + 1 != (_QWORD *)v15);
    }
    if (v4)
    {
      if (*(_QWORD *)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

void WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>>::move(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v8 = (_QWORD *)a3;
    v10 = a1;
    do
    {
      v11 = *v10;
      v13 = v10 + 1;
      v12 = v10[1];
      v10[1] = 0;
      *v10 = 0;
      *v8 = v11;
      v8[1] = v12;
      std::unique_ptr<JSC::InByStatus>::reset[abi:sn180100]((unint64_t *)v10 + 1, 0, a3, a4, a5, a6, a7, a8);
      v15 = *v10;
      if ((*v10 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v15 & 0xFFFFFFFF8, v14, a3, a4, a5, a6, a7, a8);
      v10 += 2;
      v8 += 2;
    }
    while (v13 + 1 != a2);
  }
}

uint64_t *WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  v8 = result[1];
  *result = 0;
  result[1] = 0;
  *v6 = v7;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = (_QWORD *)v6;
        v15 = (uint64_t *)v4;
        do
        {
          v16 = *v15;
          v17 = v15[1];
          *v15 = 0;
          v15[1] = 0;
          *v14 = v16;
          v14[1] = v17;
          v14 += 2;
          v15 = std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>::~pair(v15, v7, v8, v9, v10, v11, v12, v13)+ 2;
        }
        while (v15 != (uint64_t *)(v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t *WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  v8 = result[1];
  *result = 0;
  result[1] = 0;
  *v6 = v7;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = (_QWORD *)v6;
        v15 = (uint64_t *)v4;
        do
        {
          v16 = *v15;
          v17 = v15[1];
          *v15 = 0;
          v15[1] = 0;
          *v14 = v16;
          v14[1] = v17;
          v14 += 2;
          v15 = std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>::~pair(v15, v7, v8, v9, v10, v11, v12, v13)+ 2;
        }
        while (v15 != (uint64_t *)(v4 + 16 * v5));
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

unint64_t WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::SetPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::SetPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::SetPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::SetPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = (_QWORD *)v6;
        v15 = (uint64_t *)(v4 + 16 * v5);
        v16 = (uint64_t *)v4;
        do
        {
          v17 = *v16;
          v18 = v16[1];
          *v16 = 0;
          v16[1] = 0;
          *v14 = v17;
          v14[1] = v18;
          v19 = v16[1];
          v16[1] = 0;
          if (v19)
          {
            v20 = *(_QWORD *)v19;
            if (v19 + 16 != *(_QWORD *)v19 && v20 != 0)
            {
              *(_QWORD *)v19 = 0;
              *(_DWORD *)(v19 + 8) = 0;
              WTF::fastFree(v20, v7, v8, v9, v10, v11, v12, v13);
            }
            WTF::fastFree(v19, v7, v8, v9, v10, v11, v12, v13);
          }
          v22 = *v16;
          if ((*v16 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v22 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
          v16 += 2;
          v14 += 2;
        }
        while (v16 != v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t JSC::CallLinkStatus::operator=(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = (_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)a1;
  if ((_QWORD *)v10 != v11)
  {
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v11;
  }
  v12 = *(uint64_t **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v13 = a2[3];
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        v15 = *v12++;
        *v11++ = v15;
        v14 -= 8;
      }
      while (v14);
    }
    v16 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v12;
    v16 = a2[2];
    a2[2] = 1;
  }
  *(_DWORD *)(a1 + 8) = v16;
  v17 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v17;
  *(_DWORD *)(a1 + 24) = a2[6];
  return a1;
}

JSC::GetByVariant *JSC::GetByStatus::operator=(JSC::GetByVariant *this, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  JSC::GetByVariant *v12;
  const JSC::GetByVariant *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  JSC::GetByVariant *v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *((unsigned int *)this + 3);
  if ((_DWORD)v10)
  {
    v30 = *(JSC::GetByVariant **)this;
    v31 = v10 << 6;
    do
    {
      JSC::GetByVariant::~GetByVariant(v30, a2, a3, a4, a5, a6, a7, a8);
      v30 = (JSC::GetByVariant *)(v32 + 64);
      v31 -= 64;
    }
    while (v31);
  }
  v12 = (JSC::GetByVariant *)((char *)this + 16);
  v11 = *(_QWORD *)this;
  if (*(JSC::GetByVariant **)this != (JSC::GetByVariant *)((char *)this + 16))
  {
    if (v11)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)this = v12;
  }
  v13 = (const JSC::GetByVariant *)*a2;
  if ((_QWORD *)*a2 == a2 + 2)
  {
    v14 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v14)
    {
      v15 = v14 << 6;
      do
      {
        JSC::GetByVariant::GetByVariant(v12, v13, a3, a4, a5, a6, a7, a8);
        JSC::GetByVariant::~GetByVariant(v13, v16, v17, v18, v19, v20, v21, v22);
        v12 = (JSC::GetByVariant *)((char *)v12 + 64);
        v13 = (const JSC::GetByVariant *)((char *)v13 + 64);
        v15 -= 64;
      }
      while (v15);
    }
    v23 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = a2 + 2;
    *(_QWORD *)this = v13;
    v23 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 1;
  }
  *((_DWORD *)this + 2) = v23;
  v24 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *((_DWORD *)this + 3) = v24;
  v25 = a2[10];
  a2[10] = 0;
  v26 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v25;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *((_WORD *)this + 44) = *((_WORD *)a2 + 44);
  return this;
}

uint64_t JSC::PutByStatus::operator=(uint64_t a1, JSC::PutByVariant **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  JSC::PutByVariant *v12;
  JSC::PutByVariant *v13;
  int v14;
  int v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10)
    WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(*(_QWORD **)(a1 + 8), (_QWORD *)(*(_QWORD *)(a1 + 8) + (v10 << 6)), a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (JSC::PutByVariant *)(a1 + 24);
  if (v11 != a1 + 24)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v11, a2, (uint64_t)v12, a4, a5, a6, a7, a8);
      v12 = (JSC::PutByVariant *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
  v13 = a2[1];
  if (v13 == (JSC::PutByVariant *)(a2 + 3))
  {
    WTF::VectorTypeOperations<JSC::PutByVariant>::move(v13, (JSC::PutByVariant *)((char *)v13 + 64 * (unint64_t)*((unsigned int *)a2 + 5)), v12, a4, a5, a6, a7, a8);
    v14 = *((_DWORD *)a2 + 4);
  }
  else
  {
    a2[1] = (JSC::PutByVariant *)(a2 + 3);
    *(_QWORD *)(a1 + 8) = v13;
    v14 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 1;
  }
  *(_DWORD *)(a1 + 16) = v14;
  v15 = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v15;
  return a1;
}

uint64_t JSC::DeleteByStatus::operator=(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v9 = result + 16;
  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result != result + 16)
  {
    if (v8)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      v19 = result;
      v17 = result + 16;
      v18 = a2;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
      v9 = v17;
      a2 = v18;
      result = v19;
    }
    *(_QWORD *)result = v9;
  }
  v10 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 2)
  {
    v11 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 40 * v11;
      do
      {
        v14 = result + v12;
        *(_QWORD *)(v14 + 48) = 0;
        *(_QWORD *)(v14 + 48) = v10[v12 / 8 + 4];
        *(_BYTE *)(v14 + 16) = v10[v12 / 8];
        *(_OWORD *)(v14 + 24) = *(_OWORD *)&v10[v12 / 8 + 1];
        *(_DWORD *)(v14 + 40) = v10[v12 / 8 + 3];
        v12 += 40;
      }
      while (v13 != v12);
    }
    v15 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = a2 + 2;
    *(_QWORD *)result = v10;
    v15 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 1;
  }
  *(_DWORD *)(result + 8) = v15;
  v16 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 12) = v16;
  *(_BYTE *)(result + 56) = *((_BYTE *)a2 + 56);
  return result;
}

uint64_t JSC::CheckPrivateBrandStatus::operator=(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;

  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD **)a1;
  if ((_DWORD)v10)
  {
    v19 = 16 * v10;
    do
    {
      if ((*v11 & 1) != 0)
        WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v11 += 2;
      v19 -= 16;
    }
    while (v19);
    v11 = *(_QWORD **)a1;
  }
  v12 = (uint64_t *)(a1 + 16);
  if (v11 != (_QWORD *)(a1 + 16))
  {
    if (v11)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v12;
  }
  v13 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 2)
  {
    v14 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v14)
    {
      v18 = 16 * v14;
      do
      {
        *v12 = 0;
        if ((*v13 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v12, v13);
        else
          *v12 = *v13 & 0xFFFFFFFFFFFFFFFDLL;
        v12[1] = v13[1];
        if ((*v13 & 1) != 0)
          WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v12 += 2;
        v13 += 2;
        v18 -= 16;
      }
      while (v18);
    }
    v15 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = a2 + 2;
    *(_QWORD *)a1 = v13;
    v15 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 1;
  }
  *(_DWORD *)(a1 + 8) = v15;
  v16 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v16;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  return a1;
}

void WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>>::moveOverlapping(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v8 = (_QWORD *)a3;
  v10 = a1;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v17 = (uint64_t *)((((char *)a2 - (char *)a1) & 0xFFFFFFFFFFFFFFF0) + a3 - 8);
      v18 = a2 - 2;
      do
      {
        v19 = *v18;
        v20 = v18[1];
        *v18 = 0;
        v18[1] = 0;
        *(v17 - 1) = v19;
        *v17 = v20;
        v21 = std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>::~pair(v18, a2, a3, a4, a5, a6, a7, a8);
        v17 -= 2;
        v15 = v21 == v10;
        v18 = v21 - 2;
      }
      while (!v15);
    }
  }
  else
  {
    while (v10 != a2)
    {
      v11 = *v10;
      v12 = v10[1];
      *v10 = 0;
      v10[1] = 0;
      *v8 = v11;
      v8[1] = v12;
      v13 = v10[1];
      v10[1] = 0;
      if (v13)
      {
        v14 = *(_QWORD *)v13;
        v15 = v13 + 16 == *(_QWORD *)v13 || v14 == 0;
        if (!v15)
        {
          *(_QWORD *)v13 = 0;
          *(_DWORD *)(v13 + 8) = 0;
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v16 = *v10;
      if ((*v10 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v10 += 2;
      v8 += 2;
    }
  }
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_QWORD *)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v11 = *(unsigned int *)(a1 + 12);
      v12 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v12;
      if (v12 != v10 && (_DWORD)v11)
      {
        v13 = (_QWORD *)v12;
        v14 = (uint64_t *)(v10 + 16 * v11);
        v15 = (uint64_t *)v10;
        do
        {
          v16 = *v15;
          v17 = v15[1];
          *v15 = 0;
          v15[1] = 0;
          *v13 = v16;
          v13[1] = v17;
          v18 = v15[1];
          v15[1] = 0;
          if (v18)
          {
            v19 = *(_QWORD *)v18;
            if (v18 + 16 != *(_QWORD *)v18 && v19 != 0)
            {
              *(_QWORD *)v18 = 0;
              *(_DWORD *)(v18 + 8) = 0;
              WTF::fastFree(v19, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            WTF::fastFree(v18, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          v21 = *v15;
          if ((*v15 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v21 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
          v15 += 2;
          v13 += 2;
        }
        while (v15 != v14);
      }
    }
    if (v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = 16 * v10 - 16 * (_QWORD)a2;
    v12 = (unint64_t *)(*(_QWORD *)a1 + 16 * (_QWORD)a2 + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        v14 = *(_QWORD *)v13;
        if (v13 + 16 != *(_QWORD *)v13 && v14 != 0)
        {
          *(_QWORD *)v13 = 0;
          *(_DWORD *)(v13 + 8) = 0;
          WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v16 = *(v12 - 1);
      if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::moveOverlapping(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  BOOL v14;

  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v9 = (uint64_t *)((((char *)a2 - (char *)a1) & 0xFFFFFFFFFFFFFFF0) + a3 - 8);
      v10 = a2 - 2;
      do
      {
        v11 = *v10;
        v12 = v10[1];
        *v10 = 0;
        v10[1] = 0;
        *(v9 - 1) = v11;
        *v9 = v12;
        v13 = std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>::~pair(v10, a2, a3, a4, a5, a6, a7, a8);
        v9 -= 2;
        v14 = v13 == a1;
        v10 = v13 - 2;
      }
      while (!v14);
    }
  }
  else
  {
    WTF::VectorMover<false,std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::PutByStatus>>>::move(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_QWORD *)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v11 = *(unsigned int *)(a1 + 12);
      v12 = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v12;
      if (v12 != v10 && (_DWORD)v11)
      {
        v13 = (_QWORD *)v12;
        v14 = v10 + 16 * v11;
        v15 = (uint64_t *)v10;
        do
        {
          v16 = *v15;
          v18 = v15 + 1;
          v17 = v15[1];
          v15[1] = 0;
          *v15 = 0;
          *v13 = v16;
          v13[1] = v17;
          std::unique_ptr<JSC::InByStatus>::reset[abi:sn180100]((unint64_t *)v15 + 1, 0, a3, a4, a5, a6, a7, a8);
          v19 = *v15;
          if ((*v15 & 1) != 0 && (v19 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v19 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
          v15 += 2;
          v13 += 2;
        }
        while (v18 + 1 != (_QWORD *)v14);
      }
    }
    if (v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::InByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  void *v13;
  uint64_t v14;

  v8 = a2;
  v10 = *(unsigned int *)(a1 + 12);
  if (v10 != a2)
  {
    v11 = 16 * v10 - 16 * a2;
    v12 = (unint64_t *)(*(_QWORD *)a1 + 16 * a2 + 8);
    do
    {
      std::unique_ptr<JSC::InByStatus>::reset[abi:sn180100](v12, 0, a3, a4, a5, a6, a7, a8);
      v14 = *(v12 - 1);
      if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v14 & 0xFFFFFFFF8, v13, a3, a4, a5, a6, a7, a8);
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::DeleteByStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
    {
      v18 = a2;
      WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
      a2 = v18;
    }
    v9 = *(_QWORD *)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v10 = *(unsigned int *)(a1 + 12);
      v11 = a2;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v12;
      if (v12 != (_QWORD *)v9 && (_DWORD)v10)
      {
        v13 = (uint64_t *)(v9 + 16 * v10);
        v14 = (uint64_t *)v9;
        do
        {
          v15 = *v14;
          v16 = v14[1];
          *v14 = 0;
          v14[1] = 0;
          *v12 = v15;
          v12[1] = v16;
          v17 = v12;
          std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CallLinkStatus>>::~pair(v14, (void *)a2, a3, a4, a5, a6, a7, a8);
          v14 += 2;
          v12 = v17 + 2;
        }
        while (v14 != v13);
      }
    }
    if (v9)
    {
      if (*(_QWORD *)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v19 = a1;
    if (*(unsigned int *)(a1 + 12) > a2)
    {
      v18 = (WTF *)a2;
      WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
      a2 = (unint64_t)v18;
      a1 = v19;
    }
    v8 = *(WTF **)a1;
    v17 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v9 = *(unsigned int *)(a1 + 12);
      v10 = a2;
      v11 = (WTF *)WTF::fastMalloc((WTF *)(16 * a2));
      v8 = v17;
      a1 = v19;
      *(_DWORD *)(v19 + 8) = v10;
      *(_QWORD *)v19 = v11;
      if (v11 != v17 && (_DWORD)v9)
      {
        v12 = (uint64_t *)((char *)v17 + 16 * v9);
        v13 = (uint64_t *)v17;
        do
        {
          v14 = *v13;
          v15 = v13[1];
          *v13 = 0;
          v13[1] = 0;
          *(_QWORD *)v11 = v14;
          *((_QWORD *)v11 + 1) = v15;
          v16 = v11;
          std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>::~pair(v13, (void *)a2, a3, a4, a5, a6, a7, a8);
          v8 = v17;
          a1 = v19;
          v13 += 2;
          v11 = (WTF *)((char *)v16 + 16);
        }
        while (v13 != v12);
      }
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(_QWORD *)v19 = 0;
        *(_DWORD *)(v19 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v17, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::Vector<std::pair<JSC::CodeOrigin,std::unique_ptr<JSC::CheckPrivateBrandStatus>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = *(_QWORD *)a1 + 16 * v10;
    v12 = (uint64_t *)(*(_QWORD *)a1 + 16 * (_QWORD)a2);
    do
    {
      v13 = v12[1];
      v12[1] = 0;
      if (v13)
      {
        v14 = *(unsigned int *)(v13 + 12);
        v15 = *(_QWORD **)v13;
        if ((_DWORD)v14)
        {
          v18 = 16 * v14;
          do
          {
            if ((*v15 & 1) != 0)
              WTF::fastFree(*v15 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            v15 += 2;
            v18 -= 16;
          }
          while (v18);
          v15 = *(_QWORD **)v13;
        }
        if ((_QWORD *)(v13 + 16) != v15 && v15 != 0)
        {
          *(_QWORD *)v13 = 0;
          *(_DWORD *)(v13 + 8) = 0;
          WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = *v12;
      if ((*v12 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v17 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v12 += 2;
    }
    while (v12 != (uint64_t *)v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

unint64_t WTF::Vector<JSC::SetPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 24 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
      {
        v26 = *(_QWORD *)a1;
        return v26 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
      if (v14 < 2)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_32;
      }
      if (v14 < 0xAAAAAAB)
      {
        v15 = 24 * v14;
        v16 = WTF::fastMalloc((WTF *)(24 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v16;
LABEL_32:
        v27 = 0;
        do
        {
          v28 = v16 + v27;
          v29 = *(_OWORD *)(v10 + v27);
          *(_QWORD *)(v28 + 16) = *(_QWORD *)(v10 + v27 + 16);
          *(_OWORD *)v28 = v29;
          v27 += 24;
        }
        while (24 * v11 != v27);
        v26 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v26 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v26 = *(_QWORD *)a1;
        }
        return v26 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x19821677CLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(unsigned int *)(a1 + 12);
    if (v19 < 2)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    else
    {
      if (v19 >= 0xAAAAAAB)
        goto LABEL_41;
      v21 = 24 * v19;
      v22 = WTF::fastMalloc((WTF *)(24 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    v23 = 24 * v20;
    v24 = v10;
    do
    {
      v25 = *(_OWORD *)v24;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v24 + 16);
      *(_OWORD *)v22 = v25;
      v22 += 24;
      v24 += 24;
      v23 -= 24;
    }
    while (v23);
LABEL_25:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

unsigned __int8 *WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>>,std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int i;
  unsigned __int8 *result;
  int v12;
  int v13;
  int v16;
  BOOL v20;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = WTF::TupleHash<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>::hash<0ul>(a2);
    v6 = a2[5];
    v7 = 9 * ((~(v6 << 15) + v6) ^ ((~(v6 << 15) + v6) >> 10));
    v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
    v9 = v4 & ((0xD7862706ELL * (unint64_t)(277951225 * v5 + 95187966 * (v8 ^ HIWORD(v8)))) >> 4);
    for (i = 1; ; ++i)
    {
      result = (unsigned __int8 *)(v2 + 16 * v9);
      v12 = *result;
      v13 = result[1];
      if (v12 != *a2 || v13 != a2[1])
      {
        v16 = result[2];
        goto LABEL_15;
      }
      v16 = a2[2];
      if (result[2] != v16)
        break;
      if (result[3] != a2[3] || result[4] != a2[4])
        goto LABEL_33;
      v13 = a2[1];
      if (result[5] == v6)
        return result;
LABEL_15:
      v20 = v12 == 127 && v13 == 0 && v16 == 0 && result[3] == 0 && result[4] == 0;
      if (v20 && result[5] == 255)
        return 0;
      v9 = (v9 + i) & v4;
    }
    v16 = result[2];
LABEL_33:
    v13 = a2[1];
    goto LABEL_15;
  }
  return 0;
}

BOOL WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::isEmptyBucket(uint64_t a1, uint8x8_t a2)
{
  a2.i32[0] = *(_DWORD *)a1;
  return vmovn_s16((int16x8_t)vmovl_u8(a2)).u32[0] == 127
      && *(_BYTE *)(a1 + 4) == 0
      && *(unsigned __int8 *)(a1 + 5) == 255;
}

unint64_t WTF::TupleHash<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>::hash<0ul>(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v1 = ~(*a1 << 15) + *a1;
  v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  v3 = ~(a1[1] << 15) + a1[1];
  v4 = (9 * (v3 ^ (v3 >> 10))) ^ ((9 * (v3 ^ (v3 >> 10))) >> 6);
  v5 = ~(a1[2] << 15) + a1[2];
  v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  v7 = ~(a1[3] << 15) + a1[3];
  v8 = (9 * (v7 ^ (v7 >> 10))) ^ ((9 * (v7 ^ (v7 >> 10))) >> 6);
  v9 = ~(a1[4] << 15) + a1[4];
  v10 = (9 * (v9 ^ (v9 >> 10))) ^ ((9 * (v9 ^ (v9 >> 10))) >> 6);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225
                                                              * ((v4 + ~(v4 << 11)) ^ ((v4 + ~(v4 << 11)) >> 16))
                                                              + 95187966
                                                              * ((0xD7862706ELL
                                                                              * (unint64_t)(277951225
                                                                                                 * ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))
                                                                                                 + 95187966
                                                                                                 * ((0xD7862706ELL * (unint64_t)(277951225 * ((v8 + ~(v8 << 11)) ^ ((v8 + ~(v8 << 11)) >> 16)) + 95187966 * ((v10 + ~(v10 << 11)) ^ ((v10 + ~(v10 << 11)) >> 16)))) >> 4))) >> 4))) >> 4))) >> 4;
}

uint64_t WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _BOOL4 isEmptyBucket;
  uint64_t v32;
  JSC::JITStubRoutine *v33;
  _QWORD *v34;
  JSC::JITStubRoutine *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JITStubRoutine *v39;
  uint64_t v40;
  JSC::JITStubRoutine *v41;
  int v42;
  uint64_t result;
  int v44;
  int v45;
  uint64_t v47;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = (_QWORD *)(v8 + 24);
    v18 = a2;
    do
    {
      *((_WORD *)v17 - 2) = -256;
      *((_DWORD *)v17 - 2) = 127;
      *v17 = 0;
      v17 += 2;
      --v18;
    }
    while (v18);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v19 = 0;
    v20 = 0;
    v47 = v6;
    do
    {
      v21 = (int *)(v5 + 16 * v19);
      if (*(_BYTE *)v21 != 126)
      {
        if (WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::isEmptyBucket(v5 + 16 * v19, v16))
        {
          v40 = v5 + 16 * v19;
          v41 = *(JSC::JITStubRoutine **)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          if (v41)
          {
            v42 = *((_DWORD *)v41 + 4) - 1;
            *((_DWORD *)v41 + 4) = v42;
            if (!v42)
              JSC::JITStubRoutine::observeZeroRefCount(v41, v9, v10, v11, v12, v13, v14, v15, v16);
          }
        }
        else
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = WTF::TupleHash<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>::hash<0ul>((unsigned __int8 *)(v5 + 16 * v19));
          v25 = ~(*((unsigned __int8 *)v21 + 5) << 15) + *((unsigned __int8 *)v21 + 5);
          v26 = (9 * (v25 ^ (v25 >> 10))) ^ ((9 * (v25 ^ (v25 >> 10))) >> 6);
          v27 = v23 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * v24
                                         + 95187966 * ((v26 + ~(v26 << 11)) ^ ((v26 + ~(v26 << 11)) >> 16)))) >> 4);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = v22 + 16 * v27;
            isEmptyBucket = WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>,WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>,WTF::HashTraits<WTF::Ref<JSC::PolymorphicAccessJITStubRoutine,WTF::RawPtrTraits<JSC::PolymorphicAccessJITStubRoutine>,WTF::DefaultRefDerefTraits<JSC::PolymorphicAccessJITStubRoutine>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::AccessCase::AccessType>>>::isEmptyBucket(v30, v16);
            v27 = (v29 + v28++) & v23;
          }
          while (!isEmptyBucket);
          v32 = v22 + 16 * v29;
          v35 = *(JSC::JITStubRoutine **)(v32 + 8);
          v34 = (_QWORD *)(v32 + 8);
          v33 = v35;
          *v34 = 0;
          if (v35)
          {
            v44 = *((_DWORD *)v33 + 4) - 1;
            *((_DWORD *)v33 + 4) = v44;
            if (!v44)
              JSC::JITStubRoutine::observeZeroRefCount(v33, v9, v10, v11, v12, v13, v14, v15, v16);
          }
          v36 = *v21;
          *(_WORD *)(v30 + 4) = *((_WORD *)v21 + 2);
          *(_DWORD *)v30 = v36;
          v37 = v5 + 16 * v19;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          *v34 = v38;
          v39 = *(JSC::JITStubRoutine **)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          if (v39)
          {
            v45 = *((_DWORD *)v39 + 4) - 1;
            *((_DWORD *)v39 + 4) = v45;
            if (!v45)
              JSC::JITStubRoutine::observeZeroRefCount(v39, v9, v10, v11, v12, v13, v14, v15, v16);
          }
          if (v21 == a3)
            v20 = v30;
        }
      }
      ++v19;
    }
    while (v19 != v47);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v20;
}

unsigned __int8 *WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>>>,std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  unsigned __int8 *result;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  BOOL v21;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::TupleHash<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>::hash<0ul>(a2);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v4 & ((0xD7862706ELL
             * (unint64_t)(277951225 * v5 + 95187966 * ((v9 >> 31) ^ v9))) >> 4);
  for (i = 1; ; ++i)
  {
    result = (unsigned __int8 *)(v2 + 32 * v10);
    v13 = *result;
    v14 = result[1];
    v15 = result[2];
    if (v13 == *a2 && v14 == a2[1])
    {
      v14 = a2[1];
      if (v15 == a2[2])
      {
        v17 = result[3] == a2[3] && result[4] == a2[4];
        v15 = a2[2];
        v14 = a2[1];
        if (v17)
        {
          v15 = a2[2];
          v14 = a2[1];
          if (*((_QWORD *)result + 1) == v6)
            break;
        }
      }
    }
    v21 = v13 == 127 && v14 == 0 && v15 == 0 && result[3] == 0 && result[4] == 0;
    if (v21 && !*((_QWORD *)result + 1))
      return 0;
    v10 = (v10 + i) & v4;
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashMap<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>,WTF::DefaultHash<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)49594>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<std::tuple<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>,JSC::DOMJIT::GetterSetter const*>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  uint8x8_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int i;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = a2;
  v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v17 = (_QWORD *)(v9 + 24);
    do
    {
      *(v17 - 1) = 127;
      *v17 = 0;
      v17[1] = 0;
      v17[2] = 0;
      v17 += 4;
      --v8;
    }
    while (v8);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6;
    do
    {
      v21 = (unsigned __int8 *)(v5 + 32 * v18);
      v22 = *v21;
      if (v22 != 126)
      {
        v26 = v22 == 127 && v21[1] == 0 && v21[2] == 0 && v21[3] == 0 && v21[4] == 0;
        if (v26 && !*((_QWORD *)v21 + 1))
        {
          v47 = v5 + 32 * v18;
          v48 = *(unsigned int **)(v47 + 24);
          *(_QWORD *)(v47 + 24) = 0;
          if (v48)
          {
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              atomic_store(1u, v48);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
            }
          }
        }
        else
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = WTF::TupleHash<JSC::AccessType,BOOL,BOOL,BOOL,BOOL>::hash<0ul>((unsigned __int8 *)(v5 + 32 * v18));
          v31 = ~(*((_QWORD *)v21 + 1) << 32) + *((_QWORD *)v21 + 1);
          v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
          v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
          v34 = v28 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * v29
                                         + 95187966
                                         * (((v33 + ~(v33 << 27)) >> 31) ^ ((_DWORD)v33
                                                                                        + ~((_DWORD)v33 << 27))))) >> 4);
          for (i = 1; ; ++i)
          {
            v36 = v27 + 32 * v34;
            v30.i32[0] = *(_DWORD *)v36;
            v30 = (uint8x8_t)vmovn_s16((int16x8_t)vmovl_u8(v30));
            v37 = v30.i32[0] == 127 && *(_BYTE *)(v36 + 4) == 0;
            if (v37 && !*(_QWORD *)(v36 + 8))
              break;
            v34 = (v34 + i) & v28;
          }
          v38 = v27 + 32 * v34;
          v39 = *(unsigned int **)(v38 + 24);
          *(_QWORD *)(v38 + 24) = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v39, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
          }
          *(_OWORD *)v36 = *(_OWORD *)v21;
          v42 = v5 + 32 * v18;
          *(_QWORD *)(v38 + 16) = *(_QWORD *)(v42 + 16);
          v43 = *(_QWORD *)(v42 + 24);
          *(_QWORD *)(v42 + 24) = 0;
          *(_QWORD *)(v38 + 24) = v43;
          v44 = *(unsigned int **)(v42 + 24);
          *(_QWORD *)(v42 + 24) = 0;
          if (v44)
          {
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              atomic_store(1u, v44);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v44, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
            }
          }
          if (v21 == a3)
            v19 = v36;
        }
      }
      ++v18;
    }
    while (v18 != v20);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

void JSC::StructureStubInfoClearingWatchpoint::fireInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;

  v9 = *(unsigned int *)(a1 + 17);
  v10 = v9 | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
  if ((v9 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0 || (*(_BYTE *)(v10 - 80) & 1) != 0)
      goto LABEL_4;
  }
  else
  {
    v11 = *(_QWORD *)(v10 & 0xFFFFFFC000);
    if (!*(_BYTE *)(v11 + 10))
    {
      if ((JSC::MarkedBlock::Handle::isLive(v11, v10, a3, a4, a5, a6, a7, a8) & 1) == 0)
        return;
LABEL_4:
      v12 = (unsigned __int8 *)((*(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32))
                              + 16);
      if (__ldaxr(v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, v12))
      {
LABEL_7:
        JSC::StructureStubInfo::reset(*(_QWORD *)(a1 + 24));
        v20 = __ldxr(v12);
        if (v20 == 1)
        {
          if (!__stlxr(0, v12))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v14, v15, v16, v17, v18, v19);
        return;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
      goto LABEL_7;
    }
    v21 = *(_QWORD *)(v11 + 24);
    v24 = *(_QWORD **)(v21 + 104);
    v23 = (_QWORD *)(v21 + 104);
    v22 = v24;
    if (v24 == v23)
      goto LABEL_4;
    v25 = 0;
    do
    {
      v26 = (_QWORD *)*v22;
      v25 |= JSC::FreeList::contains(v22 + 3, v10);
      v22 = v26;
    }
    while (v26 != v23);
    if (!(_BYTE)v25)
      goto LABEL_4;
  }
}

void JSC::StructureStubInfo::reset(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned __int8 *v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int **v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v27;
  int *v28;
  JSC::CodeBlock *v29;
  uint64_t v30;
  uint64_t v31;
  JSC::CodeBlock *v32;
  uint64_t v33;
  unsigned int v34;
  JSC::CodeBlock *v35;
  uint64_t v36;
  unsigned int v37;
  JSC::CodeBlock *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int *v43;

  v5 = (unsigned __int8 *)(a1 + 128);
  if (__ldaxr((unsigned __int8 *)(a1 + 128)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 128);
    goto LABEL_4;
  }
  if (__stxr(1u, v5))
    goto LABEL_3;
LABEL_4:
  v7 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v7 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_87:
    __break(0xC471u);
    JUMPOUT(0x198217638);
  }
  v43 = &v42;
  ((void (*)(int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo23clearBufferedStructuresEvEUlNS_9monostateEE_JZNS9_23clearBufferedStructuresEvEUlRNS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_ZNS9_23clearBufferedStructuresEvEUlRNSC_INS_5tupleIJSD_NS8_19CacheableIdentifierEEEELm0ESE_Lm16ESF_EEE_EEEEEJRNS0_6__implIJSA_SG_SM_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v43, a1 + 80);
  v15 = __ldxr(v5);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v5))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v5, 0, v9, v10, v11, v12, v13, v14);
  *(_DWORD *)(a1 + 12) = 0;
  if (*(_BYTE *)(a1 + 123))
  {
    if (BYTE1(qword_1ECF4C332))
    {
      v42 = *(char *)(a1 + 122);
      v43 = a3;
      WTF::dataLog<char [32],int,char [6],WTF::RawPointer,char [2],char [2]>(&v42, (const void **)&v43);
    }
    switch(*(_BYTE *)(a1 + 122))
    {
      case 0:
        if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
        {
          v16 = operationGetByIdOptimize;
          goto LABEL_16;
        }
        v27 = *(_QWORD *)(a1 + 48);
        v28 = (int *)operationGetByIdOptimize;
        goto LABEL_45;
      case 1:
        v38 = (JSC::CodeBlock *)a3;
        v39 = a1;
        v40 = 3;
        goto LABEL_85;
      case 2:
        v38 = (JSC::CodeBlock *)a3;
        v39 = a1;
        v40 = 4;
        goto LABEL_85;
      case 3:
        v38 = (JSC::CodeBlock *)a3;
        v39 = a1;
        v40 = 2;
        goto LABEL_85;
      case 4:
        if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
        {
          v16 = operationGetByValOptimize;
          goto LABEL_16;
        }
        v27 = *(_QWORD *)(a1 + 48);
        v28 = (int *)operationGetByValOptimize;
        goto LABEL_45;
      case 5:
        v38 = (JSC::CodeBlock *)a3;
        v39 = a1;
        v40 = 5;
        goto LABEL_85;
      case 6:
        if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
        {
          v16 = operationPutByIdStrictOptimize;
          goto LABEL_16;
        }
        v27 = *(_QWORD *)(a1 + 48);
        v28 = (int *)operationPutByIdStrictOptimize;
        goto LABEL_45;
      case 7:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 1;
        goto LABEL_59;
      case 8:
        if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
        {
          v16 = operationPutByIdDirectStrictOptimize;
          goto LABEL_16;
        }
        v27 = *(_QWORD *)(a1 + 48);
        v28 = (int *)operationPutByIdDirectStrictOptimize;
        goto LABEL_45;
      case 9:
        if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
        {
          v16 = operationPutByIdDirectSloppyOptimize;
          goto LABEL_16;
        }
        v27 = *(_QWORD *)(a1 + 48);
        v28 = (int *)operationPutByIdDirectSloppyOptimize;
        goto LABEL_45;
      case 0xA:
        if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
        {
          v16 = operationPutByValStrictOptimize;
          goto LABEL_16;
        }
        v27 = *(_QWORD *)(a1 + 48);
        v28 = (int *)operationPutByValStrictOptimize;
        goto LABEL_45;
      case 0xB:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 3;
        goto LABEL_59;
      case 0xC:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 6;
        goto LABEL_59;
      case 0xD:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 7;
        goto LABEL_59;
      case 0xE:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 9;
        goto LABEL_59;
      case 0xF:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 8;
        goto LABEL_59;
      case 0x10:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 11;
        goto LABEL_59;
      case 0x11:
        v32 = (JSC::CodeBlock *)a3;
        v33 = a1;
        v34 = 10;
LABEL_59:
        JSC::resetPutBy(v32, v33, v34, v10, v11, v12, v13, v14);
        goto LABEL_18;
      case 0x12:
        v35 = (JSC::CodeBlock *)a3;
        v36 = a1;
        v37 = 0;
        goto LABEL_63;
      case 0x13:
        v35 = (JSC::CodeBlock *)a3;
        v36 = a1;
        v37 = 1;
        goto LABEL_63;
      case 0x14:
        v35 = (JSC::CodeBlock *)a3;
        v36 = a1;
        v37 = 2;
LABEL_63:
        JSC::resetInBy(v35, v36, v37, v10, v11, v12, v13, v14);
        goto LABEL_18;
      case 0x15:
        JSC::resetHasPrivateBrand((JSC::CodeBlock *)a3, a1, v9, v10, v11, v12, v13, v14);
        goto LABEL_18;
      case 0x16:
        JSC::resetInstanceOf((JSC::CodeBlock *)a3, a1, v9, v10, v11, v12, v13, v14);
        goto LABEL_18;
      case 0x17:
        v29 = (JSC::CodeBlock *)a3;
        v30 = a1;
        v31 = 0;
        goto LABEL_57;
      case 0x18:
        v29 = (JSC::CodeBlock *)a3;
        v30 = a1;
        v31 = 1;
        goto LABEL_57;
      case 0x19:
        if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
        {
          v16 = operationDeleteByValStrictOptimize;
LABEL_16:
          *(_QWORD *)(a1 + 48) = v16;
        }
        else
        {
          v27 = *(_QWORD *)(a1 + 48);
          v28 = (int *)operationDeleteByValStrictOptimize;
LABEL_45:
          JSC::ftlThunkAwareRepatchCall((uint64_t)a3, v27, v28, v10, v11, v12, v13, v14);
        }
        JSC::StructureStubInfo::resetStubAsJumpInAccess((JSC::StructureStubInfo *)a1, (JSC::CodeBlock *)a3, v9, v10, v11, v12, v13, v14);
LABEL_18:
        v17 = *(unsigned __int8 *)(a1 + 123);
        if (v17 > 6)
          goto LABEL_87;
        if (v17 == 4)
        {
          v18 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = 0;
          if (v18)
          {
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(unsigned int ***)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *v20 = 0;
                if (v22)
                {
                  do
                  {
                    v23 = __ldaxr(v22);
                    v24 = v23 - 1;
                  }
                  while (__stlxr(v24, v22));
                  if (!v24)
                  {
                    atomic_store(1u, v22);
                    v41 = v21;
                    JSC::AccessCase::operator delete((unint64_t)v22, v8, v9, v10, v11, v12, v13, v14);
                    v21 = v41;
                  }
                }
                ++v20;
              }
              while (v20 != (unsigned int **)v21);
            }
            v25 = *(_QWORD *)v18;
            if (v18 + 16 != *(_QWORD *)v18 && v25 != 0)
            {
              *(_QWORD *)v18 = 0;
              *(_DWORD *)(v18 + 8) = 0;
              WTF::fastFree(v25, v8, v9, v10, v11, v12, v13, v14);
            }
            WTF::fastFree(v18, v8, v9, v10, v11, v12, v13, v14);
          }
        }
        *(_BYTE *)(a1 + 123) = 0;
        break;
      case 0x1A:
        v29 = (JSC::CodeBlock *)a3;
        v30 = a1;
        v31 = 3;
LABEL_57:
        JSC::resetDelBy(v29, v30, v31, v10, v11, v12, v13, v14);
        goto LABEL_18;
      case 0x1B:
        v38 = (JSC::CodeBlock *)a3;
        v39 = a1;
        v40 = 6;
        goto LABEL_85;
      case 0x1C:
        v38 = (JSC::CodeBlock *)a3;
        v39 = a1;
        v40 = 7;
LABEL_85:
        JSC::resetGetBy(v38, v39, v40, v10, v11, v12, v13, v14);
        goto LABEL_18;
      case 0x1D:
        JSC::resetCheckPrivateBrand((JSC::CodeBlock *)a3, a1, v9, v10, v11, v12, v13, v14);
        goto LABEL_18;
      case 0x1E:
        JSC::resetSetPrivateBrand((JSC::CodeBlock *)a3, a1, v9, v10, v11, v12, v13, v14);
        goto LABEL_18;
      default:
        goto LABEL_18;
    }
  }
}

void JSC::StructureTransitionStructureStubClearingWatchpoint::fireInternal(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t **v19;
  uint64_t *i;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[2];

  if ((*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFLL) != 0
    && (JSC::ObjectPropertyCondition::isWatchable(a1 + 32, 1, a3, a4, a5, a6, a7, a8), (v10 & 1) != 0))
  {
    if (!*(_BYTE *)(a1 + 46))
      JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)(16 * (**(_DWORD **)(a1 + 32) & 0xFFFFFFFE)), a2, (JSC::Structure *)*(unsigned int *)(a1 + 48), a4, a5, a6, a7, a8);
    v11 = 16 * (**(_DWORD **)(a1 + 32) & 0xFFFFFFFE);
    v12 = *(_QWORD *)(v11 + 0x60);
    if ((v12 & 1) != 0)
    {
      v21 = (v12 >> 1) & 3;
      v12 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v12 = 1;
      *(_BYTE *)(v12 + 4) = v21;
      *(_BYTE *)(v12 + 5) = 0;
      *(_QWORD *)(v12 + 8) = v12 + 8;
      *(_QWORD *)(v12 + 16) = v12 + 8;
      __dmb(0xAu);
      *(_QWORD *)(v11 + 96) = v12;
    }
    v14 = *(_QWORD *)(v12 + 8);
    v13 = (_QWORD *)(v12 + 8);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v13;
    *v13 = a1;
    *(_QWORD *)(v14 + 8) = a1;
    *((_WORD *)v13 - 2) = 257;
  }
  else
  {
    v24[0] = &off_1E3583C90;
    v24[1] = "IC has been invalidated";
    v15 = *(_QWORD *)(a1 + 24);
    do
      v16 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v16 + 1, (unsigned int *)v15));
    if (*(_BYTE *)(v15 + 4) == 1)
      JSC::WatchpointSet::fireAllSlow(v15, a2, v24);
    do
    {
      v17 = __ldaxr((unsigned int *)v15);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v15));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v15);
      v19 = (uint64_t **)(v15 + 8);
      for (i = *(uint64_t **)(v15 + 8); i != (uint64_t *)v19; i = *v19)
      {
        v23 = *i;
        v22 = (uint64_t *)i[1];
        *v22 = *i;
        *(_QWORD *)(v23 + 8) = v22;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::AdaptiveValueStructureStubClearingWatchpoint::handleFire(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t **v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *i;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[2];

  v24[0] = &off_1E3583C90;
  v24[1] = "IC has been invalidated";
  v10 = *(_QWORD *)(a1 + 80);
  do
    v11 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v11 + 1, (unsigned int *)v10));
  if (*(_BYTE *)(v10 + 4) == 1)
  {
    __dmb(0xAu);
    v15 = (uint64_t **)(v10 + 8);
    v14 = *(uint64_t **)(v10 + 8);
    *(_BYTE *)(v10 + 4) = 2;
    v16 = *((_DWORD *)a2 + 229);
    *((_DWORD *)a2 + 229) = v16 + 1;
    if (v14 != (uint64_t *)(v10 + 8))
    {
      v23 = v10;
      do
      {
        v18 = *v14;
        v17 = (uint64_t *)v14[1];
        *v17 = *v14;
        *(_QWORD *)(v18 + 8) = v17;
        *v14 = 0;
        v14[1] = 0;
        JSC::Watchpoint::fire((unint64_t)v14, a2, v24, a4, a5, a6, a7, a8, a9);
        v14 = *v15;
      }
      while (*v15 != (uint64_t *)v15);
      v16 = *((_DWORD *)a2 + 229) - 1;
      v10 = v23;
    }
    *((_DWORD *)a2 + 229) = v16;
    __dmb(0xAu);
  }
  do
  {
    v12 = __ldaxr((unsigned int *)v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)v10));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)v10);
    v19 = (uint64_t **)(v10 + 8);
    for (i = *(uint64_t **)(v10 + 8); i != (uint64_t *)v19; i = *v19)
    {
      v22 = *i;
      v21 = (uint64_t *)i[1];
      *v21 = *i;
      *(_QWORD *)(v22 + 8) = v21;
      *i = 0;
      i[1] = 0;
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::StructureStubInfo::propagateTransitions<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  int *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v10 = *(_DWORD *)(a1 + 12) & 0xFFFFFFFE;
  if ((_DWORD)v10)
    JSC::Structure::markIfCheap<JSC::SlotVisitor>(16 * v10, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 123) == 4)
  {
    v11 = *(_QWORD *)(a1 + 64);
    if (*(_DWORD *)(v11 + 12))
    {
      for (i = 0; i < *(unsigned int *)(v11 + 12); ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)v11 + 8 * i);
        v14 = *(_DWORD *)(v13 + 12);
        if (v14)
          JSC::Structure::markIfCheap<JSC::SlotVisitor>(16 * (v14 & 0xFFFFFFFE), a2, a3, a4, a5, a6, a7, a8);
        v15 = *(_QWORD *)(v13 + 24);
        if (v15)
        {
          v24 = 0;
          v25 = *(unsigned int **)(v15 + 8);
          if (v25)
            v26 = (int *)(v25 + 1);
          else
            v26 = 0;
          if (v25)
            v24 = (uint64_t)&v25[*v25 + 1];
          while (v26 != (int *)v24)
          {
            v27 = *v26++;
            JSC::Structure::markIfCheap<JSC::SlotVisitor>(16 * (v27 & 0xFFFFFFFE), a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v16 = *(unsigned __int8 *)(v13 + 4);
        if (v16 != 2 && v16 != 4)
          continue;
        v18 = *(_DWORD *)(v13 + 12) & 0xFFFFFFFE;
        v19 = 16 * v18;
        v20 = *(_QWORD *)(16 * v18 + 0x40);
        if (v20 && *(_BYTE *)(v20 + 5) != 1)
        {
          v23 = *(_DWORD *)(v20 + 80);
          if (v23)
            v20 = 16 * (v23 & 0xFFFFFFFE);
          else
            v20 = 0;
        }
        if ((v20 & 8) != 0)
        {
          if ((*(_BYTE *)(v20 - 79) & 1) != 0)
            goto LABEL_22;
        }
        else if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a2 + 80) + 240)
               && ((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
        {
          v18 = *(_DWORD *)(v13 + 12) & 0xFFFFFFFE;
          v19 = 16 * v18;
LABEL_22:
          if ((_DWORD)v18)
          {
            v21 = v19 & 0xFFFFFC000;
            v22 = *(_DWORD *)(a2 + 132);
            if (*(_DWORD *)(v19 & 0xFFFFFC000 | 0x20) != v22)
            {
              v30 = v11;
              v28 = v19 & 0xFFFFFC000;
              v29 = v19;
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFC000), v22, a3, a4, a5, a6, a7, a8);
              v21 = v28;
              v11 = v30;
              v19 = v29;
            }
            if (((*(_QWORD *)(v21 + 8 * ((v18 >> 6) & 0xF) + 40) >> (v18 & 0x3E)) & 1) == 0 || *(_QWORD *)(a2 + 168))
              JSC::SlotVisitor::appendSlow(a2, v19, 0, a4, a5, a6, a7, a8);
          }
        }
      }
    }
  }
}

void JSC::StructureStubInfo::~StructureStubInfo(JSC::StructureStubInfo *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;
  JSC::InlineCacheHandler *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v10 = *((unsigned int *)this + 24);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF6VectorIN3JSC11StructureIDELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENS8_INS_5tupleIJSA_NS9_19CacheableIdentifierEEEELm0ESB_Lm16ESC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v10])(&v30, (char *)this + 80);
  *((_DWORD *)this + 24) = -1;
  v11 = (JSC::InlineCacheHandler *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v11, a2, a3, a4, a5, a6, a7, a8, a9);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v13)
    {
      v14 = *(unsigned int ***)v12;
      v15 = *(_QWORD *)v12 + 8 * v13;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v16);
            JSC::AccessCase::operator delete((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        ++v14;
      }
      while (v14 != (unsigned int **)v15);
    }
    v19 = *(_QWORD *)v12;
    if (v12 + 16 != *(_QWORD *)v12 && v19 != 0)
    {
      *(_QWORD *)v12 = 0;
      *(_DWORD *)(v12 + 8) = 0;
      WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::StructureStubInfo::initStringLength(uint64_t result)
{
  *(_BYTE *)(result + 123) = 6;
  return result;
}

void JSC::StructureStubInfo::deref(JSC::StructureStubInfo *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int **v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = *((unsigned __int8 *)this + 123);
  if (v8 > 6)
  {
    __break(0xC471u);
    JUMPOUT(0x198217E40);
  }
  if (v8 == 4)
  {
    v9 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 12);
      if ((_DWORD)v10)
      {
        v11 = *(unsigned int ***)v9;
        v12 = *(_QWORD *)v9 + 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v22 = v9;
              v20 = v11;
              v21 = v12;
              JSC::AccessCase::operator delete((unint64_t)v13, (void *)v9, a3, a4, a5, a6, a7, a8);
              v11 = v20;
              v12 = v21;
              v9 = v22;
            }
          }
          ++v11;
        }
        while (v11 != (unsigned int **)v12);
      }
      v16 = *(_QWORD *)v9;
      if (v9 + 16 != *(_QWORD *)v9 && v16 != 0)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        v23 = v9;
        WTF::fastFree(v16, (void *)v9, a3, a4, a5, a6, a7, a8);
        v9 = v23;
      }
      v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v18)
      {
        pas_try_deallocate_slow_no_cache(v9, (uint64_t)&bmalloc_heap_config, 1);
        return;
      }
      if (!(v9 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v9 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v9)) & 1) != 0)
      {
        goto LABEL_20;
      }
      if (v9 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v9 >> 24)
      {
        a4 = 0;
      }
      else
      {
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v9 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v9) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 == 1)
        {
LABEL_20:
          v19 = *(unsigned int *)(v18 + 8000);
          if (v19 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v18, v9, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v18 + 8 * v19) = v9 | 0x5000000000000;
            *(_DWORD *)(v18 + 8000) = v19 + 1;
          }
          return;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v18, v9, 1, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::StructureStubInfo::aboutToDie(JSC::StructureStubInfo *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  if (*((_BYTE *)this + 123) == 4)
  {
    for (i = *((_QWORD *)this + 9); i; i = *(_QWORD *)(i + 88))
    {
      v9 = *(_QWORD *)(i + 64);
      if (v9)
      {
        if (*(_BYTE *)(v9 + 24) == 5)
        {
          v10 = *(_QWORD *)(v9 + 120);
          *(_QWORD *)(v9 + 112) = 0;
          *(_QWORD *)(v9 + 120) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr((unsigned int *)v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, (unsigned int *)v10));
            if (!v12)
            {
              v20 = i;
              atomic_store(1u, (unsigned int *)v10);
              v13 = *(_QWORD *)(v10 + 24);
              if (v13)
              {
                *(_QWORD *)(v10 + 24) = 0;
                *(_DWORD *)(v10 + 32) = 0;
                WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
              }
              v14 = *(unsigned int *)(v10 + 20);
              v15 = *(_QWORD **)(v10 + 8);
              if ((_DWORD)v14)
              {
                v16 = 8 * v14;
                do
                {
                  if ((*v15 & 1) != 0)
                  {
                    v17 = *v15 & 0xFFFFFFFF8;
                    if (v17)
                    {
                      v18 = v16;
                      v19 = v15;
                      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
                      v16 = v18;
                      v15 = v19;
                    }
                  }
                  ++v15;
                  v16 -= 8;
                }
                while (v16);
                v15 = *(_QWORD **)(v10 + 8);
              }
              if (v15)
              {
                *(_QWORD *)(v10 + 8) = 0;
                *(_DWORD *)(v10 + 16) = 0;
                WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
              }
              WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
              i = v20;
            }
          }
        }
      }
    }
  }
}

void JSC::StructureStubInfo::addAccessCase(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, void **a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int *v10;
  unint64_t casual;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8x8_t v26;
  int v27;
  uint64_t *v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int **v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  __int16 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  JSC::InlineCacheHandler *v69;
  JSC::InlineCacheHandler *v70;
  uint64_t v71;
  uint64_t *v72;
  JSC *v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int **v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v98;
  uint64_t v100;
  int v101;
  JSC::InlineCacheHandler *v102;
  unsigned __int8 *v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  JSC::InlineCacheHandler *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint8x8_t v122;
  void (*v123)(char *, WTF ***, uint64_t);
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint8x8_t v157;
  int v158;
  JSC::InlineCacheHandler *v159;
  uint64_t v160;
  JSC::InlineCacheHandler *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  JSC::AccessCase *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF *v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  JSC::AccessCase *v225;
  unsigned int **v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t *v254;
  unint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  unint64_t v260;
  uint64_t *v261;
  unsigned int v262;
  uint64_t v263;
  unint64_t *v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  JSC::AccessCase *v280;
  unsigned int **v281;
  uint64_t *v282;
  unsigned int v283;
  uint64_t v284;
  JSC::AccessCase *v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  JSC::ExecutableAllocator *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t StatusReg;
  unint64_t v318;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  WTF *v324;
  JSC::InlineCacheHandler *v325;
  uint64_t v326;
  uint64_t v327;
  WTF **v328;
  uint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _BYTE *v334;
  uint64_t v335;
  _BYTE v336[24];
  _BYTE *v337;
  uint64_t v338;
  _BYTE v339[24];
  _BYTE *v340;
  uint64_t v341;
  _BYTE v342[24];
  uint64_t v343;
  __int16 v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  int v349;
  char v350;
  _BYTE *v351;
  uint64_t v352;
  _BYTE v353[16];
  _BYTE *v354;
  uint64_t v355;
  _BYTE v356[1536];
  _BYTE *v357;
  uint64_t v358;
  _BYTE v359[128];
  JSC::AccessCase *v360;
  const JSC::AccessCase *v361[2];

  v10 = (unsigned int *)*a7;
  if (!*a7)
  {
    *(_DWORD *)a9 = 1;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 8) = 0;
    return;
  }
  casual = a5;
  v12 = a4;
  v13 = a2;
  v15 = *(_QWORD *)(a4 + 72);
  v323 = *a7;
  *a7 = 0;
  v16 = g_config;
  if (*(_BYTE *)(a1 + 123) != 4)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v40 = *(_QWORD *)(StatusReg + 752);
    if (v40)
    {
      v41 = (_BYTE *)(v40 + 9776);
      *(_BYTE *)(v40 + 9776) = 1;
      v42 = *(unsigned int *)(v40 + 9792);
      if ((_DWORD)v42)
      {
        *(_DWORD *)(v40 + 9792) = v42 - *(_DWORD *)(v40 + 9796);
        casual = *(_QWORD *)(v40 + 9784) - v42;
LABEL_20:
        *v41 = 0;
LABEL_21:
        *(_QWORD *)casual = casual + 16;
        *(_QWORD *)(casual + 8) = 16;
        switch(*(_BYTE *)(a1 + 123))
        {
          case 1:
            v163 = *(unsigned __int8 *)(a1 + 122);
            if (v163 >= 4 && (v163 > 0x1C || ((1 << v163) & 0x118683C0) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x198218B1CLL);
            }
            v164 = *(unsigned int *)(a1 + 8);
            v165 = *(_DWORD *)(a1 + 12);
            if (v165)
              v166 = 16 * (v165 & 0xFFFFFFFE);
            else
              v166 = 0;
            v324 = 0;
            v361[0] = 0;
            JSC::ProxyableAccessCase::create(v15, (unsigned __int8 *)v12, 0, a6, v164, v166, (unsigned int **)&v324, 0, (uint64_t *)&v328, 0, (uint64_t *)v361);
            v167 = (JSC::AccessCase *)v328;
            v328 = 0;
            v360 = v167;
            WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>::~Ref((unint64_t *)&v328, v168, v169, v170, v171, v172, v173, v174);
            v181 = v361[0];
            v361[0] = 0;
            if (v181)
              WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v181, v175, v176, v177, v178, v179, v180, a8);
            v182 = (unsigned int *)v324;
            v324 = 0;
            if (v182)
            {
              do
              {
                v183 = __ldaxr(v182);
                v184 = v183 - 1;
              }
              while (__stlxr(v184, v182));
              if (!v184)
              {
                atomic_store(1u, v182);
                WTF::fastFree((unint64_t)v182, v175, v176, v177, v178, v179, v180, a8);
              }
            }
            goto LABEL_23;
          case 2:
            v212 = *(unsigned __int8 *)(a1 + 122);
            if (v212 >= 4 && (v212 > 0x1C || ((1 << v212) & 0x118683C0) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x198218C64);
            }
            v213 = v12;
            v214 = v15;
            v215 = *(_DWORD *)(a1 + 8);
            v216 = *(_DWORD *)(a1 + 12) & 0xFFFFFFFE;
            v217 = WTF::fastMalloc((WTF *)0x28);
            v225 = (JSC::AccessCase *)v217;
            *(_DWORD *)v217 = 1;
            *(_WORD *)(v217 + 4) = 7;
            *(_DWORD *)(v217 + 8) = v215;
            *(_QWORD *)(v217 + 16) = 0;
            v226 = (unsigned int **)(v217 + 16);
            *(_QWORD *)(v217 + 24) = 0;
            *(_QWORD *)(v217 + 32) = a6;
            if (v216)
            {
              *(_DWORD *)(v217 + 12) = v216;
              v15 = v214;
              if (v213 && *(_DWORD *)(v214 + 760) >= *(unsigned __int8 *)(v213 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(v214 + 192, v213);
                v305 = *v226;
                *v226 = 0;
                if (v305)
                {
                  do
                  {
                    v306 = __ldaxr(v305);
                    v307 = v306 - 1;
                  }
                  while (__stlxr(v307, v305));
                  if (!v307)
                  {
                    atomic_store(1u, v305);
                    WTF::fastFree((unint64_t)v305, v218, v219, v220, v221, v222, v223, v224);
                  }
                  v15 = v214;
                  if (*v226 && !(*v226)[1])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982191D8);
                  }
                }
                goto LABEL_214;
              }
            }
            else
            {
              *(_DWORD *)(v217 + 12) = 0;
              v15 = v214;
            }
            *v226 = 0;
LABEL_214:
            *((_BYTE *)v225 + 5) = 0;
            v328 = 0;
            v360 = v225;
            WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>::~Ref((unint64_t *)&v328, v218, v219, v220, v221, v222, v223, v224);
            goto LABEL_215;
          case 3:
            v213 = v12;
            v268 = v15;
            v269 = *(unsigned __int8 *)(a1 + 122);
            if (v269 >= 4 && (v269 > 0x1C || ((1 << v269) & 0x118683C0) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x198219078);
            }
            v270 = *(_DWORD *)(a1 + 8);
            v271 = *(_DWORD *)(a1 + 12) & 0xFFFFFFFE;
            v272 = WTF::fastMalloc((WTF *)0x28);
            v280 = (JSC::AccessCase *)v272;
            *(_DWORD *)v272 = 1;
            *(_WORD *)(v272 + 4) = 17;
            *(_DWORD *)(v272 + 8) = v270;
            *(_QWORD *)(v272 + 16) = 0;
            v281 = (unsigned int **)(v272 + 16);
            *(_QWORD *)(v272 + 24) = 0;
            *(_QWORD *)(v272 + 32) = a6;
            if (v271)
            {
              *(_DWORD *)(v272 + 12) = v271;
              if (v213 && *(_DWORD *)(v268 + 760) >= *(unsigned __int8 *)(v213 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(v268 + 192, v213);
                v308 = *v281;
                *v281 = 0;
                if (v308)
                {
                  do
                  {
                    v309 = __ldaxr(v308);
                    v310 = v309 - 1;
                  }
                  while (__stlxr(v310, v308));
                  if (!v310)
                  {
                    atomic_store(1u, v308);
                    WTF::fastFree((unint64_t)v308, v273, v274, v275, v276, v277, v278, v279);
                  }
                  if (*v281 && !(*v281)[1])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982192D8);
                  }
                }
LABEL_252:
                v328 = 0;
                v360 = v280;
                WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>::~Ref((unint64_t *)&v328, v273, v274, v275, v276, v277, v278, v279);
                v15 = v268;
LABEL_215:
                v12 = v213;
                v16 = g_config;
                v13 = a2;
                do
LABEL_23:
                  v43 = __ldaxr((unsigned int *)v323);
                while (__stlxr(v43 + 1, (unsigned int *)v323));
                v361[0] = (const JSC::AccessCase *)v323;
                JSC::PolymorphicAccess::addCases(casual, v13, v15, v12, a1, &v360, v361, a8, (uint64_t)&v328);
                v44 = (int)v328;
                v28 = v329;
                v29 = v330;
                v31 = v331;
                v30 = HIDWORD(v331);
                v330 = 0;
                v331 = 0;
                v329 = 0;
                v45 = (unsigned int *)v361[0];
                v361[0] = 0;
                if (v45)
                {
                  do
                  {
                    v46 = __ldaxr(v45);
                    v47 = v46 - 1;
                  }
                  while (__stlxr(v47, v45));
                  if (!v47)
                  {
                    atomic_store(1u, v45);
                    v315 = v15;
                    v260 = v29;
                    v261 = v28;
                    JSC::AccessCase::operator delete((unint64_t)v45, v19, v20, v21, v22, v23, v24, v25);
                    v28 = v261;
                    v29 = v260;
                    v15 = v315;
                  }
                }
                v48 = (unsigned int *)v360;
                v360 = 0;
                if (v48)
                {
                  do
                  {
                    v49 = __ldaxr(v48);
                    v50 = v49 - 1;
                  }
                  while (__stlxr(v50, v48));
                  if (!v50)
                  {
                    atomic_store(1u, v48);
                    v313 = v15;
                    v255 = v29;
                    v256 = v28;
                    JSC::AccessCase::operator delete((unint64_t)v48, v19, v20, v21, v22, v23, v24, v25);
                    v28 = v256;
                    v29 = v255;
                    v15 = v313;
                  }
                }
                if (v44 == 2)
                {
                  *(_BYTE *)(a1 + 123) = 4;
                  v85 = *(_QWORD *)(a1 + 64);
                  *(_QWORD *)(a1 + 64) = casual;
                  if (v85)
                  {
                    v86 = v12;
                    v87 = v15;
                    v88 = *(unsigned int *)(v85 + 12);
                    if ((_DWORD)v88)
                    {
                      v89 = *(unsigned int ***)v85;
                      v90 = *(_QWORD *)v85 + 8 * v88;
                      do
                      {
                        v91 = *v89;
                        *v89 = 0;
                        if (v91)
                        {
                          do
                          {
                            v92 = __ldaxr(v91);
                            v93 = v92 - 1;
                          }
                          while (__stlxr(v93, v91));
                          if (!v93)
                          {
                            atomic_store(1u, v91);
                            v318 = v29;
                            v282 = v28;
                            JSC::AccessCase::operator delete((unint64_t)v91, v19, v20, v21, v22, v23, v24, v25);
                            v28 = v282;
                            v29 = v318;
                          }
                        }
                        ++v89;
                      }
                      while (v89 != (unsigned int **)v90);
                    }
                    v94 = v29;
                    v95 = v28;
                    v96 = *(_QWORD *)v85;
                    if (v85 + 16 != *(_QWORD *)v85 && v96 != 0)
                    {
                      *(_QWORD *)v85 = 0;
                      *(_DWORD *)(v85 + 8) = 0;
                      WTF::fastFree(v96, v19, v20, v21, v22, v23, v24, v25);
                    }
                    WTF::fastFree(v85, v19, v20, v21, v22, v23, v24, v25);
                    v98 = v87;
                    v12 = v86;
                    v16 = g_config;
                    casual = a5;
                    v28 = v95;
                    v29 = v94;
                    v15 = v98;
                  }
                  else
                  {
                    casual = a5;
                  }
                  goto LABEL_108;
                }
                v321 = v12;
                v12 = v15;
                if (v44 == 6)
                {
LABEL_34:
                  *(_DWORD *)a9 = v44;
                  *(_QWORD *)(a9 + 8) = v28;
                  *(_QWORD *)(a9 + 16) = v29;
                  *(_DWORD *)(a9 + 24) = v31;
                  *(_DWORD *)(a9 + 28) = v30;
                  v51 = *(unsigned int *)(casual + 12);
                  if ((_DWORD)v51)
                  {
                    v52 = *(unsigned int ***)casual;
                    v53 = *(_QWORD *)casual + 8 * v51;
                    do
                    {
                      v54 = *v52;
                      *v52 = 0;
                      if (v54)
                      {
                        do
                        {
                          v55 = __ldaxr(v54);
                          v56 = v55 - 1;
                        }
                        while (__stlxr(v56, v54));
                        if (!v56)
                        {
                          atomic_store(1u, v54);
                          JSC::AccessCase::operator delete((unint64_t)v54, v19, v20, v21, v22, v23, v24, v25);
                        }
                      }
                      ++v52;
                    }
                    while (v52 != (unsigned int **)v53);
                  }
                  v57 = *(_QWORD *)casual;
                  v58 = casual + 16 == *(_QWORD *)casual || v57 == 0;
                  v15 = v12;
                  if (!v58)
                  {
                    *(_QWORD *)casual = 0;
                    *(_DWORD *)(casual + 8) = 0;
                    WTF::fastFree(v57, v19, v20, v21, v22, v23, v24, v25);
                  }
                  v59 = *(_QWORD *)(StatusReg + 752);
                  v12 = v321;
                  if (!v59)
                  {
                    pas_try_deallocate_slow_no_cache(casual, (uint64_t)&bmalloc_heap_config, 1);
                    v16 = g_config;
                    goto LABEL_51;
                  }
                  v16 = g_config;
                  if (casual >> 43
                    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((casual >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(casual)) & 1) == 0)
                  {
                    if (casual >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= casual >> 24)
                      goto LABEL_280;
                    v21 = (*(_DWORD *)((char *)off_1ECF425F8
                                     + ((((casual >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                     + 24) >> (2 * ((BYTE3(casual) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)v21 != 1)
                    {
LABEL_227:
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v59, casual, 1, v21, v22, v23, v24, v25);
                      goto LABEL_51;
                    }
                  }
                  v60 = *(unsigned int *)(v59 + 8000);
                  if (v60 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v59, casual, (os_unfair_lock_s *)5, v21, v22, v23, v24, v25);
                  }
                  else
                  {
                    *(_QWORD *)(v59 + 8 * v60) = casual | 0x5000000000000;
                    *(_DWORD *)(v59 + 8000) = v60 + 1;
                  }
                  goto LABEL_51;
                }
                v16 = v28;
                v15 = a1 + 128;
                if (__ldaxr((unsigned __int8 *)(a1 + 128)))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v15))
                {
LABEL_115:
                  v100 = *(unsigned int *)(a1 + 96);
                  if ((_DWORD)v100 == -1)
                    goto LABEL_279;
                  v328 = &v324;
                  ((void (*)(WTF ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo23clearBufferedStructuresEvEUlNS_9monostateEE_JZNS9_23clearBufferedStructuresEvEUlRNS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_ZNS9_23clearBufferedStructuresEvEUlRNSC_INS_5tupleIJSD_NS8_19CacheableIdentifierEEEELm0ESE_Lm16ESF_EEE_EEEEEJRNS0_6__implIJSA_SG_SM_EEEEEEDcOT_DpOT0____fmatrix[v100])(&v328, a1 + 80);
                  v101 = __ldxr((unsigned __int8 *)v15);
                  if (v101 == 1)
                  {
                    v28 = v16;
                    if (!__stlxr(0, (unsigned __int8 *)v15))
                      goto LABEL_34;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 128), 0, v20, v21, v22, v23, v24, v25);
                  v28 = v16;
                  goto LABEL_34;
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 128);
                goto LABEL_115;
              }
            }
            else
            {
              *(_DWORD *)(v272 + 12) = 0;
            }
            *v281 = 0;
            goto LABEL_252;
          case 5:
            v243 = *(unsigned __int8 *)(a1 + 122);
            if (v243 >= 4 && (v243 > 0x1C || ((1 << v243) & 0x118683C0) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x198218ED0);
            }
            v244 = *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 1768) | 1;
            v245 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)v245 = 1;
            *(_WORD *)(v245 + 4) = 20;
            *(_QWORD *)(v245 + 24) = 0;
            *(_QWORD *)(v245 + 32) = v244;
            *(_QWORD *)(v245 + 8) = 0xFFFFFFFFLL;
            *(_QWORD *)(v245 + 16) = 0;
            v328 = 0;
            v360 = (JSC::AccessCase *)v245;
            WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>::~Ref((unint64_t *)&v328, v246, v247, v248, v249, v250, v251, v252);
            goto LABEL_23;
          case 6:
            v283 = *(unsigned __int8 *)(a1 + 122);
            if (v283 >= 4 && (v283 > 0x1C || ((1 << v283) & 0x118683C0) == 0))
            {
              __break(0xC471u);
              JUMPOUT(0x198219228);
            }
            v284 = *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 1768) | 1;
            v324 = 0;
            v361[0] = 0;
            JSC::AccessCase::create(v15, v12, 21, v284, -1, 0, (unsigned int **)&v324, (uint64_t *)v361, (uint64_t *)&v328);
            v285 = (JSC::AccessCase *)v328;
            v328 = 0;
            v360 = v285;
            WTF::Ref<JSC::AccessCase,WTF::RawPtrTraits<JSC::AccessCase>,WTF::DefaultRefDerefTraits<JSC::AccessCase>>::~Ref((unint64_t *)&v328, v286, v287, v288, v289, v290, v291, v292);
            if (v361[0])
              WTF::ThreadSafeRefCounted<JSC::PolyProtoAccessChain,(WTF::DestructionThread)0>::deref(v361[0], v293, v294, v295, v296, v297, v298, a8);
            goto LABEL_23;
          default:
            v360 = 0;
            goto LABEL_23;
        }
      }
      v78 = *(_QWORD *)(v40 + 9816);
      v79 = *(_QWORD *)(v40 + 9800);
      if (v78)
      {
LABEL_86:
        v80 = __clz(v78);
        *(_QWORD *)(v40 + 9816) = v78 & ~(0x8000000000000000 >> v80);
        casual = v79 + 16 * v80;
        goto LABEL_20;
      }
      if (*(_BYTE *)(v40 + 9781) == 6)
      {
        v262 = *(_DWORD *)(v40 + 9812);
        v263 = *(unsigned int *)(v40 + 9808);
        if (v263 < v262)
        {
          *(_QWORD *)&v41[8 * v263 + 56] = 0;
          v264 = (unint64_t *)(v40 + 8 * v263 + 9840);
          v265 = v262 - 1 - v263;
          while (v265)
          {
            v79 += 1024;
            v267 = *v264++;
            v266 = v267;
            LODWORD(v263) = v263 + 1;
            --v265;
            if (v267)
            {
              v78 = __rbit64(v266);
              *(_DWORD *)(v40 + 9808) = v263;
              *(_QWORD *)(v40 + 9800) = v79;
              goto LABEL_86;
            }
          }
          *(_DWORD *)(v40 + 9808) = v262;
        }
      }
      *v41 = 0;
    }
    casual = bmalloc_allocate_casual(144, 1);
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(a1 + 64);
  v324 = 0;
  do
    v18 = __ldaxr(v10);
  while (__stlxr(v18 + 1, v10));
  v361[0] = (const JSC::AccessCase *)v10;
  JSC::PolymorphicAccess::addCases(v17, a2, v15, a4, a1, &v324, v361, a8, (uint64_t)&v328);
  v27 = (int)v328;
  v28 = v329;
  v29 = v330;
  v31 = v331;
  v30 = HIDWORD(v331);
  v330 = 0;
  v331 = 0;
  v329 = 0;
  v32 = (unsigned int *)v361[0];
  v361[0] = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      v314 = v15;
      v258 = v29;
      v259 = v28;
      JSC::AccessCase::operator delete((unint64_t)v32, v19, v20, v21, v22, v23, v24, v25);
      v28 = v259;
      v29 = v258;
      v15 = v314;
    }
  }
  v35 = (unsigned int *)v324;
  v324 = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      v312 = v15;
      v253 = v29;
      v254 = v28;
      JSC::AccessCase::operator delete((unint64_t)v35, v19, v20, v21, v22, v23, v24, v25);
      v28 = v254;
      v29 = v253;
      v15 = v312;
    }
  }
  if (v27 != 2)
  {
    if (v27 == 6)
    {
      v38 = 6;
LABEL_16:
      *(_DWORD *)a9 = v38;
      *(_QWORD *)(a9 + 8) = v28;
      *(_QWORD *)(a9 + 16) = v29;
      *(_DWORD *)(a9 + 24) = v31;
      *(_DWORD *)(a9 + 28) = v30;
      goto LABEL_51;
    }
    casual = v29;
    v81 = v28;
    v322 = v12;
    v12 = v15;
    v15 = a1 + 128;
    if (__ldaxr((unsigned __int8 *)(a1 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
LABEL_90:
      v83 = *(unsigned int *)(a1 + 96);
      if ((_DWORD)v83 != -1)
      {
        v328 = &v324;
        ((void (*)(WTF ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo23clearBufferedStructuresEvEUlNS_9monostateEE_JZNS9_23clearBufferedStructuresEvEUlRNS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_ZNS9_23clearBufferedStructuresEvEUlRNSC_INS_5tupleIJSD_NS8_19CacheableIdentifierEEEELm0ESE_Lm16ESF_EEE_EEEEEJRNS0_6__implIJSA_SG_SM_EEEEEEDcOT_DpOT0____fmatrix[v83])(&v328, a1 + 80);
        v84 = __ldxr((unsigned __int8 *)v15);
        if (v84 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v15))
            goto LABEL_135;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 128), 0, v20, v21, v22, v23, v24, v25);
LABEL_135:
        *(_DWORD *)a9 = v27;
        *(_QWORD *)(a9 + 8) = v81;
        *(_QWORD *)(a9 + 16) = casual;
        *(_DWORD *)(a9 + 24) = v31;
        *(_DWORD *)(a9 + 28) = v30;
        v15 = v12;
        v12 = v322;
        goto LABEL_51;
      }
      goto LABEL_279;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 128);
    goto LABEL_90;
  }
LABEL_108:
  if ((*(_WORD *)(a1 + 129) & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
  {
    if (*(_BYTE *)(a1 + 127))
    {
      v38 = 2;
      goto LABEL_16;
    }
    v102 = (JSC::InlineCacheHandler *)v28;
    v103 = (unsigned __int8 *)(a1 + 128);
    if (__ldaxr((unsigned __int8 *)(a1 + 128)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v103))
    {
LABEL_122:
      v105 = *(unsigned int *)(a1 + 96);
      if ((_DWORD)v105 != -1)
      {
        v328 = &v324;
        ((void (*)(WTF ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo23clearBufferedStructuresEvEUlNS_9monostateEE_JZNS9_23clearBufferedStructuresEvEUlRNS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_ZNS9_23clearBufferedStructuresEvEUlRNSC_INS_5tupleIJSD_NS8_19CacheableIdentifierEEEELm0ESE_Lm16ESF_EEE_EEEEEJRNS0_6__implIJSA_SG_SM_EEEEEEDcOT_DpOT0____fmatrix[v105])(&v328, a1 + 80);
        v112 = __ldxr(v103);
        if (v112 == 1)
        {
          if (!__stlxr(0, v103))
            goto LABEL_154;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 128), 0, v106, v107, v108, v109, v110, v111);
LABEL_154:
        v149 = *(_QWORD *)(v12 + 120);
        if (v149)
          LOBYTE(v149) = *(_BYTE *)(v149 + 12);
        v311 = v15;
        v328 = (WTF **)v15;
        v329 = a3;
        v330 = a1;
        LOBYTE(v331) = casual;
        BYTE1(v331) = v149;
        v332 = 0;
        v333 = 0;
        v334 = v336;
        v335 = 2;
        v337 = v339;
        v338 = 2;
        v340 = v342;
        v341 = 2;
        v343 = 0xFFFFFFFFLL;
        v344 = -1;
        v345 = 0;
        v346 = 0;
        v347 = -1;
        v348 = 0;
        v349 = -1;
        v350 &= 0xF8u;
        v351 = v353;
        v352 = 4;
        v354 = v356;
        v355 = 64;
        v357 = v359;
        v358 = 16;
        JSC::InlineCacheCompiler::compile((uint64_t)&v328, a2, *(_QWORD *)(a1 + 64), (JSC::CodeBlock *)v12, v108, v109, v110, v111, (uint64_t)&v324);
        v158 = (int)v324;
        v159 = v325;
        v325 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 1)
          {
            JSC::InlineCacheHandler::~InlineCacheHandler(v102, v150, v151, v152, v153, v154, v155, v156, v157);
            WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
          }
          else
          {
            --*(_DWORD *)v102;
          }
        }
        if (v29)
          WTF::fastFree(v29, v150, v151, v152, v153, v154, v155, v156);
        v160 = v327;
        v161 = v325;
        v162 = v326;
        v325 = 0;
        v326 = 0;
        v327 = 0;
        if (v161)
        {
          if (*(_DWORD *)v161 == 1)
          {
            JSC::InlineCacheHandler::~InlineCacheHandler(v161, v150, v151, v152, v153, v154, v155, v156, v157);
            WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
          }
          else
          {
            --*(_DWORD *)v161;
          }
        }
        if (v158 == 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198219038);
        }
        if ((v158 - 3) <= 2)
        {
          if ((*(_WORD *)(a1 + 129) & 0x200) == 0)
            *(_DWORD *)(a1 + 12) = 0;
          *(_BYTE *)(a1 + 127) = BYTE8(xmmword_1ECF4C260);
        }
        *(_DWORD *)a9 = v158;
        *(_QWORD *)(a9 + 8) = v159;
        *(_QWORD *)(a9 + 16) = v162;
        *(_QWORD *)(a9 + 24) = v160;
        JSC::InlineCacheCompiler::~InlineCacheCompiler((JSC::InlineCacheCompiler *)&v328, v150, v151, v152, v153, v154, v155, v156, v157);
        v15 = v311;
        goto LABEL_51;
      }
LABEL_279:
      v59 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_280:
      v21 = 0;
      goto LABEL_227;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 128);
    goto LABEL_122;
  }
  v113 = *(_QWORD *)(v12 + 120);
  v114 = (JSC::InlineCacheHandler *)v28;
  if (v113)
    LOBYTE(v113) = *(_BYTE *)(v113 + 12);
  v328 = (WTF **)v15;
  v329 = a3;
  v330 = a1;
  LOBYTE(v331) = casual;
  BYTE1(v331) = v113;
  v332 = 0;
  v333 = 0;
  v334 = v336;
  v335 = 2;
  v337 = v339;
  v338 = 2;
  v340 = v342;
  v341 = 2;
  v343 = 0xFFFFFFFFLL;
  v344 = -1;
  v345 = 0;
  v346 = 0;
  v347 = -1;
  v348 = 0;
  v349 = -1;
  v350 &= 0xF8u;
  v351 = v353;
  v352 = 4;
  v354 = v356;
  v355 = 64;
  v357 = v359;
  v358 = 16;
  JSC::InlineCacheCompiler::compileHandler((uint64_t *)&v328, a2, *(_QWORD *)(a1 + 64), v12, (const JSC::AccessCase **)&v323, v23, v24, v25, a9);
  JSC::InlineCacheCompiler::~InlineCacheCompiler((JSC::InlineCacheCompiler *)&v328, v115, v116, v117, v118, v119, v120, v121, v122);
  if (v29)
    WTF::fastFree(v29, v19, v20, v21, v22, v23, v24, v25);
  if (v114)
  {
    if (*(_DWORD *)v114 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v114, v19, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
    }
    else
    {
      --*(_DWORD *)v114;
    }
  }
LABEL_51:
  v61 = (unsigned int *)v323;
  v323 = 0;
  if (v61)
  {
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v61);
      JSC::AccessCase::operator delete((unint64_t)v61, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  v64 = *(_DWORD *)a9;
  if ((*(_DWORD *)a9 - 3) > 2)
    goto LABEL_185;
  v65 = *(_WORD *)(a1 + 129);
  v66 = *((unsigned __int8 *)v16 + 1926);
  v67 = *(_QWORD *)(a9 + 8);
  ++*(_DWORD *)v67;
  if ((v65 & 0x200) != 0 && v66)
  {
    if (v64 == 5)
    {
      v70 = *(JSC::InlineCacheHandler **)(a1 + 72);
      if ((*(_WORD *)(a1 + 129) & 0x200) == 0 || !*((_BYTE *)v16 + 1926))
      {
        *(_QWORD *)(a1 + 72) = v67;
        if (v70)
        {
          if (*(_DWORD *)v70 == 1)
          {
            JSC::InlineCacheHandler::~InlineCacheHandler(v70, v19, v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
          }
          else
          {
            --*(_DWORD *)v70;
          }
        }
        goto LABEL_185;
      }
      if (!v70)
      {
        *(_QWORD *)(a1 + 72) = v67;
        goto LABEL_65;
      }
      v257 = *((_QWORD *)v70 + 8);
      if (!v257 || (v328 = (WTF **)v12, (*(_BYTE *)(v257 + 40) & 0x20) == 0))
      {
        *(_QWORD *)(a1 + 72) = v67;
LABEL_63:
        if (*(_DWORD *)v70 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v70, v19, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
          v67 = *(_QWORD *)(a1 + 72);
        }
        else
        {
          --*(_DWORD *)v70;
        }
LABEL_65:
        v71 = *(_QWORD *)(v67 + 64);
        if (v71)
        {
          v324 = (WTF *)v12;
          if ((*(_BYTE *)(v71 + 40) & 0x20) != 0)
          {
            LODWORD(v361[0]) = 0;
            WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v71 + 80), (uint64_t *)&v324, v361, v21, v22, v23, v24, v25, (uint64_t)&v328);
            ++*((_DWORD *)v328 + 2);
          }
        }
        goto LABEL_185;
      }
      WTF::HashCountedSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::remove((uint64_t *)(v257 + 80), &v328, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      v68 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      v69 = *(JSC::InlineCacheHandler **)(v67 + 88);
      *(_QWORD *)(v67 + 88) = v68;
      if (v69)
      {
        if (*(_DWORD *)v69 == 1)
        {
          JSC::InlineCacheHandler::~InlineCacheHandler(v69, v19, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
        }
        else
        {
          --*(_DWORD *)v69;
        }
      }
    }
    v70 = *(JSC::InlineCacheHandler **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v67;
    if (!v70)
      goto LABEL_65;
    goto LABEL_63;
  }
  v72 = *(uint64_t **)(a1 + 72);
  if ((*(_WORD *)(a1 + 129) & 0x200) == 0 || !*((_BYTE *)v16 + 1926))
  {
    *(_QWORD *)(a1 + 72) = v67;
    if (v72)
    {
      if (*(_DWORD *)v72 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler((JSC::InlineCacheHandler *)v72, v19, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
      }
      else
      {
        --*(_DWORD *)v72;
      }
    }
    goto LABEL_73;
  }
  if (v72)
  {
    v209 = v72[8];
    if (v209 && (v328 = (WTF **)v12, (*(_BYTE *)(v209 + 40) & 0x20) != 0))
    {
      WTF::HashCountedSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::remove((uint64_t *)(v209 + 80), &v328, v20, v21, v22, v23, v24, v25);
      v72 = *(uint64_t **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v67;
      v210 = v67;
      if (!v72)
        goto LABEL_206;
    }
    else
    {
      *(_QWORD *)(a1 + 72) = v67;
    }
    if (*(_DWORD *)v72 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler((JSC::InlineCacheHandler *)v72, v19, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
      v210 = *(_QWORD *)(a1 + 72);
      goto LABEL_206;
    }
    --*(_DWORD *)v72;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v67;
  }
  v210 = v67;
LABEL_206:
  v211 = *(_QWORD *)(v210 + 64);
  if (v211)
  {
    v324 = (WTF *)v12;
    if ((*(_BYTE *)(v211 + 40) & 0x20) != 0)
    {
      LODWORD(v361[0]) = 0;
      v72 = WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v211 + 80), (uint64_t *)&v324, v361, v21, v22, v23, v24, v25, (uint64_t)&v328);
      ++*((_DWORD *)v328 + 2);
    }
  }
LABEL_73:
  if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
    goto LABEL_185;
  v73 = *(JSC **)(a1 + 24);
  v74 = *(_QWORD *)(v67 + 8);
  v75 = v74 - (_QWORD)v73;
  if ((unint64_t)(((uint64_t)(v74 - (_QWORD)v73) >> 2) + 0x2000000) >> 26)
  {
    v299 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton((JSC::ExecutableAllocator *)v72);
    v75 = JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v299, (unint64_t)v73, v74, v300, v301, v302, v303, v304)- (_QWORD)v73;
    if ((unint64_t)((v75 >> 2) + 0x2000000) >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x198219168);
    }
  }
  v76 = (v75 >> 2) & 0x3FFFFFF | 0x14000000;
  LODWORD(v328) = v76;
  if (v73 != (JSC *)(((unint64_t)v73 + 3) & 0xFFFFFFFFFFFFFFFCLL))
  {
    __break(0xC471u);
    JUMPOUT(0x198218DC0);
  }
  if (v16[63] > (unint64_t)v73 || (v77 = v16[64], v77 <= (unint64_t)v73))
  {
LABEL_183:
    *(_DWORD *)v73 = v76;
    goto LABEL_184;
  }
  if ((unint64_t)&v328 - v16[5] < v16[6])
  {
    __break(0xC471u);
    JUMPOUT(0x198218EF0);
  }
  if (!v16[62] || v77 < (unint64_t)v73 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198218F10);
  }
  if (v16[233])
    JSC::dumpJITMemory(v73, &v328, (char *)4);
  if (!*((_BYTE *)v16 + 484))
  {
    v123 = (void (*)(char *, WTF ***, uint64_t))v16[69];
    if (v123)
    {
      if (v16[62])
        v124 = v16[63];
      else
        v124 = 0;
      v123((char *)v73 - v124, &v328, 4);
      if ((unint64_t)&v328 - v16[5] < v16[6])
      {
        __break(0xC471u);
        JUMPOUT(0x1982187BCLL);
      }
      goto LABEL_184;
    }
    v76 = (int)v328;
    goto LABEL_183;
  }
  be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
  *(_DWORD *)v73 = (_DWORD)v328;
  be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
LABEL_184:
  sys_icache_invalidate(v73, 4uLL);
LABEL_185:
  if (*(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(v12 + 7))
    JSC::Heap::writeBarrierSlowPath(v15 + 192, v12);
}

void JSC::StructureStubInfo::rewireStubAsJumpInAccess(JSC::StructureStubInfo *this, JSC::CodeBlock *a2, JSC::InlineCacheHandler *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  __int16 v11;
  JSC::InlineCacheHandler *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  JSC::InlineCacheHandler *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  JSC::CodeBlock *v34;
  int v35;

  ++*(_DWORD *)a3;
  v11 = *(_WORD *)((char *)this + 129);
  v12 = (JSC::InlineCacheHandler *)*((_QWORD *)this + 9);
  if ((v11 & 0x200) == 0 || !BYTE6(qword_1ECF4C780))
  {
    *((_QWORD *)this + 9) = a3;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    goto LABEL_6;
  }
  if (v12)
  {
    v22 = *((_QWORD *)v12 + 8);
    if (v22 && (v33[0] = a2, (*(_BYTE *)(v22 + 40) & 0x20) != 0))
    {
      WTF::HashCountedSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::remove((uint64_t *)(v22 + 80), v33, (uint64_t)a3, a4, a5, a6, a7, a8);
      v12 = (JSC::InlineCacheHandler *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = a3;
      v23 = a3;
      if (!v12)
        goto LABEL_16;
    }
    else
    {
      *((_QWORD *)this + 9) = a3;
    }
    if (*(_DWORD *)v12 == 1)
    {
      JSC::InlineCacheHandler::~InlineCacheHandler(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      v23 = (JSC::InlineCacheHandler *)*((_QWORD *)this + 9);
      goto LABEL_16;
    }
    --*(_DWORD *)v12;
  }
  else
  {
    *((_QWORD *)this + 9) = a3;
  }
  v23 = a3;
LABEL_16:
  v24 = *((_QWORD *)v23 + 8);
  if (v24)
  {
    v34 = a2;
    if ((*(_BYTE *)(v24 + 40) & 0x20) != 0)
    {
      v35 = 0;
      WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v24 + 80), (uint64_t *)&v34, &v35, a4, a5, a6, a7, a8, (uint64_t)v33);
      ++*(_DWORD *)(v33[0] + 8);
    }
  }
LABEL_6:
  if ((*(_WORD *)((_BYTE *)this + 129) & 0x200) == 0)
    JSC::ARM64Assembler::replaceWithJump(*((JSC::ARM64Assembler **)this + 3), *((_BYTE **)a3 + 1), a3);
}

void JSC::StructureStubInfo::visitAggregate(JSC::StructureStubInfo *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  BOOL v19;
  JSC::AbstractSlotVisitor *v20;
  JSC::AbstractSlotVisitor **v21;

  v4 = *((_QWORD *)this + 2);
  if (!v4)
  {
    v5 = (unsigned __int8 *)this + 128;
    if (__ldaxr((unsigned __int8 *)this + 128))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
      goto LABEL_8;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 128);
LABEL_8:
    v20 = a2;
    v7 = *((unsigned int *)this + 24);
    if ((_DWORD)v7 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_27;
    }
    v21 = &v20;
    ((void (*)(JSC::AbstractSlotVisitor ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo18visitAggregateImplINS8_19AbstractSlotVisitorEEEvRT_EUlNS_9monostateEE_JZNSA_ISB_EEvSD_EUlRNS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_ZNSA_ISB_EEvSD_EUlRNSG_INS_5tupleIJSH_NS8_19CacheableIdentifierEEEELm0ESI_Lm16ESJ_EEE_EEEEEJRNS0_6__implIJSE_SK_SQ_EEEEEEDcOSC_DpOT0____fmatrix[v7])(&v21, (char *)this + 80);
    v14 = __ldxr(v5);
    if (v14 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 128, 0, v8, v9, v10, v11, v12, v13);
    goto LABEL_14;
  }
  if ((v4 & 1) == 0)
    (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
LABEL_14:
  v15 = *((unsigned __int8 *)this + 123);
  if (v15 > 6)
  {
LABEL_27:
    __break(0xC471u);
    return;
  }
  if (v15 == 4)
  {
    v16 = *((_QWORD *)this + 8);
    v17 = *(unsigned int *)(v16 + 12);
    if ((_DWORD)v17)
    {
      for (i = 0; i < v17; ++i)
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8 * i) + 32))
          v19 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8 * i) + 32) & 1) == 0;
        else
          v19 = 0;
        if (v19)
        {
          (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
          v17 = *(unsigned int *)(v16 + 12);
        }
      }
    }
  }
}

void JSC::StructureStubInfo::visitAggregate(JSC::StructureStubInfo *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t i;
  unint64_t v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  JSC::SlotVisitor *v31;
  JSC::SlotVisitor **v32;

  v10 = *((_QWORD *)this + 2);
  if (!v10)
  {
    v16 = (unsigned __int8 *)this + 128;
    if (__ldaxr((unsigned __int8 *)this + 128))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
      goto LABEL_17;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 128);
LABEL_17:
    v31 = a2;
    v18 = *((unsigned int *)this + 24);
    if ((_DWORD)v18 != -1)
    {
      v32 = &v31;
      ((void (*)(JSC::SlotVisitor ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo18visitAggregateImplINS8_11SlotVisitorEEEvRT_EUlNS_9monostateEE_JZNSA_ISB_EEvSD_EUlRNS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_ZNSA_ISB_EEvSD_EUlRNSG_INS_5tupleIJSH_NS8_19CacheableIdentifierEEEELm0ESI_Lm16ESJ_EEE_EEEEEJRNS0_6__implIJSE_SK_SQ_EEEEEEDcOSC_DpOT0____fmatrix[v18])(&v32, (char *)this + 80);
      v19 = __ldxr(v16);
      if (v19 == 1)
      {
        if (!__stlxr(0, v16))
          goto LABEL_3;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 128, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_3;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_44;
  }
  if ((v10 & 1) != 0)
    goto LABEL_3;
  if ((v10 & 8) != 0)
  {
    v22 = 0;
    v27 = *((_QWORD *)this + 2);
    if ((*(_BYTE *)(v10 - 79) & 1) != 0)
    {
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_3;
LABEL_28:
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v10, v22, a4, a5, a6, a7, a8);
      goto LABEL_3;
    }
LABEL_44:
    v10 = v27;
    goto LABEL_28;
  }
  v20 = v10 & 0xFFFFFFFFFFFFC000;
  v21 = *((_DWORD *)a2 + 33);
  v22 = 0;
  if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
  {
    v29 = *((_QWORD *)this + 2);
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000), v21, a3, a4, a5, a6, a7, a8);
    v22 = 0;
    v10 = v29;
  }
  if (((*(_QWORD *)(v20 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) == 0 || *((_QWORD *)a2 + 21))
    goto LABEL_28;
LABEL_3:
  v11 = *((unsigned __int8 *)this + 123);
  if (v11 > 6)
  {
    __break(0xC471u);
    JUMPOUT(0x198219828);
  }
  if (v11 == 4)
  {
    v12 = *((_QWORD *)this + 8);
    if (*(_DWORD *)(v12 + 12))
    {
      for (i = 0; i < *(unsigned int *)(v12 + 12); ++i)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8 * i) + 32);
        if (v14)
          v15 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8 * i) + 32) & 1) == 0;
        else
          v15 = 0;
        if (!v15)
          continue;
        if ((v14 & 8) != 0)
        {
          if ((*(_BYTE *)(v14 - 79) & 1) == 0)
            goto LABEL_36;
        }
        else
        {
          v23 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
          {
            v30 = v12;
            v28 = i;
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v23, a3, a4, a5, a6, a7, a8);
            i = v28;
            v12 = v30;
          }
          if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) == 0)
          {
LABEL_36:
            v24 = v14;
            v25 = v12;
            v26 = i;
            JSC::SlotVisitor::appendSlow((uint64_t)a2, v24, 0, a4, a5, a6, a7, a8);
            i = v26;
            v12 = v25;
            continue;
          }
        }
        if (*((_QWORD *)a2 + 21))
          goto LABEL_36;
      }
    }
  }
}

void JSC::StructureStubInfo::visitWeakReferences(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t StatusReg;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8x8_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  int v30;
  unint64_t v31;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  JSC::CallLinkInfo **v55;
  uint64_t v56;
  unsigned int *v57;
  JSC::CallLinkInfo **v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  _QWORD *v67;

  v11 = *(JSC::VM **)(a3 + 72);
  v12 = a1 + 128;
  if (__ldaxr((unsigned __int8 *)(a1 + 128)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 128);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_3;
LABEL_4:
  v66[0] = v11;
  v66[1] = v11;
  v14 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v14 == -1)
  {
    v63 = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_201;
  }
  v67 = v66;
  ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo19visitWeakReferencesERKNS8_22ConcurrentJSLockerBaseEPNS8_9CodeBlockEE3__0JZNS9_19visitWeakReferencesESC_SE_E3__1ZNS9_19visitWeakReferencesESC_SE_E3__2EEEEEJRNS0_6__implIJNS_9monostateENS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSM_INS_5tupleIJSN_NS8_19CacheableIdentifierEEEELm0ESO_Lm16ESP_EEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v67, a1 + 80);
  v23 = __ldxr((unsigned __int8 *)v12);
  if (v23 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v12, 0, v16, v17, v18, v19, v20, v21);
LABEL_10:
  v24 = *(_DWORD *)(a1 + 12) & 0xFFFFFFFE;
  if ((_DWORD)v24)
  {
    if (*(_DWORD *)(((unint64_t)(v24 >> 10) << 14) | 0x20) == *((_DWORD *)v11 + 108))
      v4 = (*(_QWORD *)(((16 * v24) & 0xFFFFFC000) + 8 * ((v24 >> 6) & 0xF) + 0x28) >> (*(_BYTE *)(a1 + 12) & 0x3E)) & 1;
    else
      LOBYTE(v4) = 0;
  }
  else
  {
    LOBYTE(v4) = 1;
  }
  if (*(_BYTE *)(a1 + 123) != 4)
    goto LABEL_13;
  v25 = *(_QWORD *)(a1 + 64);
  if (v25)
  {
    if (*(_DWORD *)(v25 + 12))
    {
      v26 = 0;
      while (1)
      {
        v27 = *(_QWORD *)(*(_QWORD *)v25 + 8 * v26);
        v28 = *(_QWORD *)(v27 + 16);
        if (v28)
          v29 = (unint64_t *)(v28 + 8);
        else
          v29 = 0;
        if (v28)
          v28 += 8 + 24 * *(unsigned int *)(v28 + 4);
        v30 = 1;
        while (v29 != (unint64_t *)v28)
        {
          v31 = *v29;
          if ((*v29 & 8) != 0)
          {
            LODWORD(v31) = *(_BYTE *)(v31 - 79) & 1;
          }
          else
          {
            v18 = *((unsigned int *)v11 + 108);
            v17 = *(unsigned int *)(v31 & 0xFFFFFFFFFFFFC000 | 0x20);
            v19 = v17;
            if ((_DWORD)v17 == (_DWORD)v18)
            {
              v17 = 0;
              v18 = v31 >> 4;
              v31 = (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFC000) + 8 * ((v31 >> 10) & 0xF) + 0x28) >> (v31 >> 4)) & 1;
            }
            else
            {
              LODWORD(v31) = 0;
            }
          }
          if ((_BYTE)v30)
            v30 = v31;
          else
            v30 = 0;
          v16 = v29[1];
          if ((v16 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v16) <= 7u && ((1 << BYTE6(v29[1])) & 0x9C) != 0)
          {
            v34 = v29[2];
            if (v34)
            {
              if ((v34 & 8) != 0)
              {
                LODWORD(v34) = *(_BYTE *)(v34 - 79) & 1;
              }
              else
              {
                v18 = *((unsigned int *)v11 + 108);
                v17 = *(unsigned int *)(v34 & 0xFFFFFFFFFFFFC000 | 0x20);
                v19 = v17;
                if ((_DWORD)v17 == (_DWORD)v18)
                {
                  v17 = 0;
                  v18 = v34 >> 4;
                  v34 = (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFC000) + 8 * ((v34 >> 10) & 0xF) + 0x28) >> (v34 >> 4)) & 1;
                }
                else
                {
                  LODWORD(v34) = 0;
                }
              }
              v30 &= v34;
              v16 = v29[1];
            }
          }
          v15 = v16 & 0xFF000000000000;
          if ((v16 & 0xFF000000000000) == 0x5000000000000)
          {
            v15 = v29[2];
            if (v15)
            {
              v16 = v15 & 0xFFFE000000000002;
              if ((v15 & 0xFFFE000000000002) == 0)
              {
                if ((v15 & 8) != 0)
                {
                  v15 = *(_BYTE *)(v15 - 79) & 1;
                }
                else
                {
                  v16 = v15 & 0xFFFFFFFFFFFFC000;
                  v18 = *((unsigned int *)v11 + 108);
                  v17 = *(unsigned int *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20);
                  v19 = v17;
                  if ((_DWORD)v17 == (_DWORD)v18)
                  {
                    v17 = 0;
                    v18 = v15 >> 4;
                    v15 = (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFC000) + 8 * ((v15 >> 10) & 0xF) + 0x28) >> (v15 >> 4)) & 1;
                  }
                  else
                  {
                    v15 = 0;
                  }
                }
                v30 &= v15;
              }
            }
          }
          v29 += 3;
        }
        v35 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v35)
        {
          v15 = *((unsigned int *)v11 + 108);
          v16 = *(unsigned int *)(((unint64_t)(v35 >> 10) << 14) | 0x20);
          if ((_DWORD)v16 == (_DWORD)v15)
          {
            v15 = v35 & 0xFFFFFFFE;
            v36 = (*(_QWORD *)(((16 * v35) & 0xFFFFFC000) + 8 * ((v15 >> 6) & 0xF) + 0x28) >> (v35 & 0x3E)) & 1;
          }
          else
          {
            LODWORD(v36) = 0;
          }
          if (v30)
            v30 = v36;
          else
            v30 = 0;
        }
        v37 = *(_QWORD *)(v27 + 24);
        if (v37)
        {
          v38 = 0;
          v16 = *(_QWORD *)(v37 + 8);
          v15 = v16 + 4;
          if (v16)
            v39 = (unsigned int *)(v16 + 4);
          else
            v39 = 0;
          if (v16)
            v38 = (unsigned int *)(v15 + 4 * *(unsigned int *)v16);
          for (; v39 != v38; ++v39)
          {
            v40 = *v39;
            v17 = *((unsigned int *)v11 + 108);
            v16 = *(unsigned int *)(((unint64_t)(v40 >> 10) << 14) | 0x20);
            v18 = v16;
            if ((_DWORD)v16 == (_DWORD)v17)
            {
              v17 = v40 & 0xFFFFFFFE;
              v16 = v40 & 0x3E;
              v15 = (*(_QWORD *)(((16 * v40) & 0xFFFFFC000) + 8 * ((v17 >> 6) & 0xF) + 0x28) >> (v40 & 0x3E)) & 1;
            }
            else
            {
              v15 = 0;
            }
            if ((_BYTE)v30)
              v30 = v15;
            else
              v30 = 0;
          }
        }
        v41 = *(unsigned __int8 *)(v27 + 4);
        if (v41 > 0x17)
        {
          if (v41 - 28 >= 2)
          {
            if (v41 != 24)
              goto LABEL_92;
            v46 = *(_QWORD *)(v27 + 40);
            if (v46)
            {
              if ((v46 & 8) != 0)
              {
                LODWORD(v46) = *(_BYTE *)(v46 - 79) & 1;
              }
              else
              {
                v16 = *((unsigned int *)v11 + 108);
                v15 = *(unsigned int *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20);
                v17 = v15;
                if ((_DWORD)v15 == (_DWORD)v16)
                {
                  v15 = 0;
                  v16 = v46 >> 4;
                  v46 = (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFC000) + 8 * ((v46 >> 10) & 0xF) + 0x28) >> (v46 >> 4)) & 1;
                }
                else
                {
                  LODWORD(v46) = 0;
                }
              }
              if (v30)
                v30 = v46;
              else
                v30 = 0;
            }
            v43 = *(_QWORD *)(v27 + 48);
            if (!v43)
              goto LABEL_92;
            if ((v43 & 8) == 0)
            {
              v44 = v43 & 0xFFFFFFFFFFFFC000;
              v15 = *((unsigned int *)v11 + 108);
              v16 = *(unsigned int *)(v43 & 0xFFFFFFFFFFFFC000 | 0x20);
              if ((_DWORD)v16 != (_DWORD)v15)
                goto LABEL_193;
LABEL_88:
              v15 = v43 >> 4;
              v43 = (*(_QWORD *)(v44 + 8 * ((v43 >> 10) & 0xF) + 40) >> (v43 >> 4)) & 1;
              goto LABEL_89;
            }
LABEL_176:
            LODWORD(v43) = *(_BYTE *)(v43 - 79) & 1;
            goto LABEL_89;
          }
          v43 = *(_QWORD *)(v27 + 40);
          if (v43)
          {
            if ((v43 & 8) == 0)
            {
              v44 = v43 & 0xFFFFFFFFFFFFC000;
              v15 = *((unsigned int *)v11 + 108);
              v16 = *(unsigned int *)(v43 & 0xFFFFFFFFFFFFC000 | 0x20);
              if ((_DWORD)v16 == (_DWORD)v15)
                goto LABEL_88;
              goto LABEL_193;
            }
            goto LABEL_176;
          }
        }
        else
        {
          if (v41 != 12 && v41 != 14)
          {
            if (v41 != 16)
              goto LABEL_92;
            v43 = *(_QWORD *)(v27 + 40);
            if (!v43)
              goto LABEL_92;
            if ((v43 & 8) == 0)
            {
              v44 = v43 & 0xFFFFFFFFFFFFC000;
              v15 = *((unsigned int *)v11 + 108);
              v16 = *(unsigned int *)(v43 & 0xFFFFFFFFFFFFC000 | 0x20);
              if ((_DWORD)v16 == (_DWORD)v15)
                goto LABEL_88;
LABEL_193:
              LODWORD(v43) = 0;
LABEL_89:
              if (v30)
                v30 = v43;
              else
                v30 = 0;
              goto LABEL_92;
            }
            goto LABEL_176;
          }
          v43 = *(_QWORD *)(v27 + 48);
          if (v43)
          {
            if ((v43 & 8) == 0)
            {
              v44 = v43 & 0xFFFFFFFFFFFFC000;
              v15 = *((unsigned int *)v11 + 108);
              v16 = *(unsigned int *)(v43 & 0xFFFFFFFFFFFFC000 | 0x20);
              if ((_DWORD)v16 == (_DWORD)v15)
                goto LABEL_88;
              goto LABEL_193;
            }
            goto LABEL_176;
          }
        }
LABEL_92:
        v45 = v30 != 0;
        if (v30)
        {
          if (++v26 < (unint64_t)*(unsigned int *)(v25 + 12))
            continue;
        }
        goto LABEL_117;
      }
    }
    v45 = 1;
LABEL_117:
    LOBYTE(v4) = v4 & v45;
  }
  v3 = *(unsigned int **)(a1 + 72);
  if (!v3)
    goto LABEL_13;
  ++*v3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = &bmalloc_megapage_table;
  v7 = 0x5000000000000;
  do
  {
    v12 = (unint64_t)v3;
    v47 = v3[1];
    if ((_DWORD)v47)
    {
      v3 += 24;
      v8 = 80 * v47;
      do
      {
        JSC::CallLinkInfo::visitWeak((JSC::CallLinkInfo *)v3, v11, (void *)v16, v22, v17, v18, v19, v20, v21);
        v3 += 20;
        v8 -= 80;
      }
      while (v8);
    }
    v48 = *(_QWORD *)(v12 + 64);
    if (!v48)
      goto LABEL_159;
    v49 = *(unsigned __int8 *)(v48 + 24);
    if (v49 == 5)
    {
      v54 = *(unsigned int **)(v48 + 104);
      if (v54)
        v55 = (JSC::CallLinkInfo **)(v54 + 2);
      else
        v55 = 0;
      if (v54)
        v56 = (uint64_t)&v54[2 * *v54 + 2];
      else
        v56 = 0;
      while (v55 != (JSC::CallLinkInfo **)v56)
      {
        if (*v55)
          JSC::CallLinkInfo::visitWeak(*v55, v11, (void *)v16, v22, v17, v18, v19, v20, v21);
        ++v55;
      }
LABEL_153:
      v60 = 0;
      v61 = *(unsigned int **)(*(_QWORD *)(v12 + 64) + 64);
      if (v61)
        v62 = v61 + 1;
      else
        v62 = 0;
      if (v61)
        v60 = (uint64_t)&v61[*v61 + 1];
      if (v62 == (unsigned int *)v60)
      {
LABEL_159:
        LOBYTE(v8) = 1;
      }
      else
      {
        while (1)
        {
          v65 = *v62;
          if (*(_DWORD *)(((unint64_t)(v65 >> 10) << 14) | 0x20) != *((_DWORD *)v11 + 108)
            || ((*(_QWORD *)(((16 * v65) & 0xFFFFFC000)
                           + 8 * (((unint64_t)(v65 & 0xFFFFFFFE) >> 6) & 0xF)
                           + 0x28) >> (v65 & 0x3E)) & 1) == 0)
          {
            break;
          }
          ++v62;
          LOBYTE(v8) = 1;
          if (v62 == (unsigned int *)v60)
            goto LABEL_160;
        }
        LOBYTE(v8) = 0;
      }
LABEL_160:
      v3 = *(unsigned int **)(v12 + 88);
      if (v3)
        ++*v3;
      if (*(_DWORD *)v12 != 1)
      {
        --*(_DWORD *)v12;
        goto LABEL_164;
      }
      JSC::InlineCacheHandler::~InlineCacheHandler((JSC::InlineCacheHandler *)v12, (void *)v15, v16, v17, v18, v19, v20, v21, v22);
      v63 = *(_QWORD *)(StatusReg + 752);
      if (!v63)
        goto LABEL_196;
      if (!(v12 >> 43) && ((*(unsigned int *)((char *)v6 + ((v12 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v12)) & 1) != 0)
      {
LABEL_169:
        v64 = *(unsigned int *)(v63 + 8000);
        if (v64 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v63, v12, (os_unfair_lock_s *)5, v17, v18, v19, v20, v21);
        }
        else
        {
          *(_QWORD *)(v63 + 8 * v64) = v12 | v7;
          *(_DWORD *)(v63 + 8000) = v64 + 1;
        }
        goto LABEL_164;
      }
      if (v12 >> 24 >= *off_1ECF425F8 && off_1ECF425F8[1] > v12 >> 24)
      {
        v17 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v12 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v12) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v17 == 1)
          goto LABEL_169;
LABEL_191:
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v63, v12, 1, v17, v18, v19, v20, v21);
        goto LABEL_164;
      }
LABEL_201:
      v17 = 0;
      goto LABEL_191;
    }
    if (v49 == 4)
    {
      v57 = *(unsigned int **)(v48 + 104);
      if (v57)
        v58 = (JSC::CallLinkInfo **)(v57 + 2);
      else
        v58 = 0;
      if (v57)
        v59 = (uint64_t)&v57[2 * *v57 + 2];
      else
        v59 = 0;
      while (v58 != (JSC::CallLinkInfo **)v59)
      {
        if (*v58)
          JSC::CallLinkInfo::visitWeak(*v58, v11, (void *)v16, v22, v17, v18, v19, v20, v21);
        ++v58;
      }
      goto LABEL_153;
    }
    if (v49 != 2)
      goto LABEL_153;
    v50 = (*(_DWORD *)(v48 + 48) - 1);
    if (*(_DWORD *)(v48 + 48) == 1)
      goto LABEL_153;
    v51 = 0;
    v52 = v48 + 86;
    while (v51 < *(unsigned int *)(v48 + 48))
    {
      v53 = *(_QWORD *)(v52 - 14);
      if (v53)
      {
        if ((v53 & 8) == 0)
        {
          if (*(_DWORD *)(v53 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)v11 + 108)
            && ((*(_QWORD *)((v53 & 0xFFFFFFFFFFFFC000) + 8 * ((v53 >> 10) & 0xF) + 0x28) >> (v53 >> 4)) & 1) != 0)
          {
            goto LABEL_132;
          }
LABEL_178:
          *(_QWORD *)(v52 - 14) = 0;
          *(_DWORD *)(v52 - 6) = 0;
          *(_WORD *)(v52 - 2) = 256;
          *(_QWORD *)v52 = 0;
          *(_QWORD *)(v52 + 8) = 0;
          *(_WORD *)(v52 + 16) = 0;
          goto LABEL_132;
        }
        if ((*(_BYTE *)(v53 - 79) & 1) == 0)
          goto LABEL_178;
      }
LABEL_132:
      ++v51;
      v52 += 32;
      if (v50 == v51)
        goto LABEL_153;
    }
    __break(1u);
LABEL_196:
    pas_try_deallocate_slow_no_cache(v12, (uint64_t)&bmalloc_heap_config, 1);
LABEL_164:
    LOBYTE(v4) = v4 & v8;
  }
  while (v3);
LABEL_13:
  if ((v4 & 1) == 0)
  {
    JSC::StructureStubInfo::reset(a1, v15, (int *)a3);
    *(_WORD *)(a1 + 129) |= 1u;
  }
}

uint64_t JSC::StructureStubInfo::summary(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  if (!a2)
    return 0;
  if (*(_BYTE *)(a2 + 123) == 4)
  {
    v7 = *(unsigned int **)(a2 + 64);
    v8 = v7[3];
    if ((_DWORD)v8)
    {
      v9 = 0;
      while (2)
      {
        v10 = *(_QWORD *)(*(_QWORD *)v7 + 8 * v9);
        v11 = *(unsigned __int8 *)(v10 + 4);
        v2 = 3;
        v3 = 5;
        switch(*(_BYTE *)(v10 + 4))
        {
          case 2:
            v12 = *(_DWORD *)(v10 + 12);
            v13 = 16 * (v12 & 0xFFFFFFFE);
            if (v12)
              v14 = 16 * (v12 & 0xFFFFFFFE);
            else
              v14 = 0;
            v15 = *(unsigned __int16 *)(v14 + 24);
            if (v15 == 65534)
              goto LABEL_17;
            if (v15 == 0xFFFF)
              v15 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 84);
            if (v15 < 64)
            {
LABEL_17:
              v16 = 0;
            }
            else if ((v15 - 63) >= 5)
            {
              v25 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
              v26 = v25 | (v25 >> 4) | ((v25 | (v25 >> 4)) >> 8);
              v16 = (v26 | HIWORD(v26)) + 1;
            }
            else
            {
              v16 = 4;
            }
            v17 = *(_QWORD *)(v13 + 64);
            if (v17)
            {
              v18 = v17;
              if (*(_BYTE *)(v17 + 5) != 1)
              {
                v24 = *(_DWORD *)(v17 + 80);
                v18 = 16 * (v24 & 0xFFFFFFFE);
                if (!v24)
                  v18 = 0;
              }
            }
            else
            {
              v18 = 0;
            }
            v19 = *(unsigned __int16 *)(v18 + 24);
            if (v19 == 65534)
              goto LABEL_24;
            if (v19 == 0xFFFF)
              v19 = *(_DWORD *)(*(_QWORD *)(v18 + 64) + 84);
            if (v19 < 64)
            {
LABEL_24:
              v20 = 0;
            }
            else if ((v19 - 63) >= 5)
            {
              v27 = (v19 - 64) | ((v19 - 64) >> 1) | (((v19 - 64) | ((v19 - 64) >> 1)) >> 2);
              v28 = v27 | (v27 >> 4) | ((v27 | (v27 >> 4)) >> 8);
              v20 = (v28 | HIWORD(v28)) + 1;
            }
            else
            {
              v20 = 4;
            }
            if (v16 == v20)
              goto LABEL_32;
            if (v17 && *(_BYTE *)(v17 + 5) != 1)
            {
              v38 = *(_DWORD *)(v17 + 80);
              if (v38)
                v17 = 16 * (v38 & 0xFFFFFFFE);
              else
                v17 = 0;
            }
            if ((*(_BYTE *)(v17 + 8) & 0xE) == 0 && *(unsigned __int8 *)(v17 + 9) - 39 >= 0xB)
              goto LABEL_32;
            goto LABEL_58;
          case 3:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x21:
            goto LABEL_34;
          case 4:
          case 5:
          case 6:
          case 8:
          case 9:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
            goto LABEL_32;
          case 7:
            if (!*(_BYTE *)(v10 + 5))
              goto LABEL_32;
            v2 = 3;
            goto LABEL_34;
          case 0x10:
            v29 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 24);
            if ((v29 & 1) != 0)
              v29 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFFELL) + 48);
            if (*(_BYTE *)(v29 + 5) == 8)
            {
              v39 = *(_QWORD *)(v29 + 8);
              v40 = (unsigned int *)(v39 + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 + 1, v40));
              v30 = *(_BYTE *)(v39 + 14);
              do
              {
                v42 = __ldaxr(v40);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v40));
              if (!v43)
              {
                atomic_store(1u, (unsigned int *)(v39 + 8));
                v45 = v9;
                v46 = a2;
                v44 = v7;
                v48 = v10;
                v47 = v30;
                (*(void (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
                v30 = v47;
                v10 = v48;
                v7 = v44;
                v9 = v45;
                a2 = v46;
              }
            }
            else
            {
              v30 = *(_BYTE *)(v29 + 64);
            }
            if ((v30 + 105) >= 3u)
            {
              v8 = v7[3];
              goto LABEL_32;
            }
            v31 = *(unsigned __int8 *)(v10 + 4);
            v32 = v31 > 0x20;
            v33 = (1 << v31) & 0x100000014;
            if (v32 || v33 == 0)
            {
              v35 = *(_DWORD *)(v10 + 12);
            }
            else
            {
              v36 = *(_QWORD *)(16 * (*(_DWORD *)(v10 + 12) & 0xFFFFFFFE) + 0x40);
              if (*(_BYTE *)(v36 + 5) == 1)
                goto LABEL_75;
              v35 = *(_DWORD *)(v36 + 80);
            }
            if (v35)
              v36 = 16 * (v35 & 0xFFFFFFFE);
            else
              v36 = 0;
LABEL_75:
            v37 = *(unsigned __int8 *)(16 * *(unsigned int *)(v36 + 76) + 0xF4);
            v8 = v7[3];
            if (v37)
            {
LABEL_58:
              v2 = 3;
              v3 = 5;
              goto LABEL_34;
            }
LABEL_32:
            if (++v9 < v8)
              continue;
            v2 = 1;
            v3 = 4;
LABEL_34:
            if (v8 == 1)
            {
              v22 = *(unsigned __int8 *)(**(_QWORD **)v7 + 4);
              result = 2;
              v23 = v22 > 0x3E || ((1 << v22) & 0x400000040008000ALL) == 0;
              if (!v23 || v22 == 112)
                return result;
            }
            goto LABEL_4;
          default:
            v21 = (v11 - 61) > 0x32 || ((1 << (v11 - 61)) & 0x4000000000003) == 0;
            if (!v21)
              goto LABEL_34;
            goto LABEL_32;
        }
      }
    }
  }
  v2 = 1;
  v3 = 4;
LABEL_4:
  v4 = *(unsigned __int16 *)(a2 + 129);
  v21 = (v4 & 0x12) == 0;
  v5 = v2 & (v4 << 29 >> 31);
  if (v21)
    return v5;
  else
    return v3;
}

void JSC::StructureStubInfo::replaceHandler(uint64_t a1, JSC::CodeBlock *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t *v11;
  JSC::InlineCacheHandler *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  JSC::InlineCacheHandler *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if ((*(_WORD *)(a1 + 129) & 0x200) != 0 && BYTE6(qword_1ECF4C780))
  {
    v22 = *(_QWORD *)(a1 + 72);
    if (v22)
      JSC::InlineCacheHandler::removeOwner(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v23 = *a3;
    *a3 = 0;
    v24 = *(JSC::InlineCacheHandler **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v23;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
        v23 = *(uint64_t **)(a1 + 72);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    JSC::InlineCacheHandler::addOwner(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = *a3;
    *a3 = 0;
    v12 = *(JSC::InlineCacheHandler **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
}

uint64_t (*JSC::slowOperationFromUnlinkedStructureStubInfo(unsigned __int8 a1))(JSC::JSString *this)
{
  if (a1 > 0x1Eu)
    return 0;
  else
    return off_1E3583638[(char)a1];
}

uint64_t (*JSC::StructureStubInfo::initializeFromDFGUnlinkedStructureStubInfo(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))(JSC::JSString *this)
{
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8x8_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t (*result)(JSC::JSString *);
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  JSC::InlineCacheHandler *v41;

  *(_BYTE *)(a1 + 122) = *(_BYTE *)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a3 + 48);
  v11 = (uint64_t *)(a3 + 32);
  v12 = *(_QWORD *)a1;
  if (a3 + 32 != a1)
  {
    if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v12 = *v11;
    if ((*v11 & 1) != 0)
    {
      v35 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      if ((v12 & 2) != 0
        || ((v36 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
          ? (v37 = (_DWORD)v36 == -1)
          : (v37 = 1),
            v37))
      {
        v38 = 2;
      }
      else if (v36 >> 28)
      {
        v39 = v35;
        v40 = v36;
        v35 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v35 = v39;
        *(_DWORD *)(v35 + 8) = v40;
        v38 = 1;
      }
      else
      {
        v38 = v35;
        v35 = v36 << 36;
      }
      v12 = v35 | v38;
    }
    *(_QWORD *)a1 = v12;
  }
  v13 = (_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 1) != 0)
    v13 = (_QWORD *)*v13;
  v14 = a2;
  if (v13)
    v14 = (_QWORD *)v13[1];
  *(_QWORD *)(a1 + 56) = v14[1];
  v15 = *(_QWORD *)(a3 + 24);
  v16 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 4) = 0;
  *(_QWORD *)(v16 + 12) = 0;
  *(_QWORD *)(v16 + 20) = 0;
  *(_DWORD *)(v16 + 28) = -1;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  v41 = (JSC::InlineCacheHandler *)v16;
  *(_QWORD *)(v16 + 8) = v15;
  *(_QWORD *)(v16 + 16) = v15;
  JSC::StructureStubInfo::replaceHandler(a1, (JSC::CodeBlock *)a2, (uint64_t **)&v41, v17, v18, v19, v20, v21, 0);
  if (v41)
    WTF::RefCounted<JSC::InlineCacheHandler>::deref(v41, v22, v23, v24, v25, v26, v27, v28, v29);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 24);
  v30 = *(_WORD *)(a1 + 129) & 0xFFBF | ((*(_BYTE *)(a3 + 1) & 1) << 6);
  *(_WORD *)(a1 + 129) = v30;
  v31 = v30 & 0xFFFFFF7F | (((*(unsigned __int8 *)(a3 + 1) >> 2) & 1) << 7);
  *(_WORD *)(a1 + 129) = v31;
  v32 = v31 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a3 + 1) >> 1) & 1));
  *(_WORD *)(a1 + 129) = v32;
  v33 = v32 & 0xFFFFFFF7 | (8 * ((*(unsigned __int8 *)(a3 + 1) >> 3) & 1));
  *(_WORD *)(a1 + 129) = v33;
  *(_WORD *)(a1 + 129) = v33 & 0xFCFF | (((*(_BYTE *)(a3 + 1) & 0x10) != 0) << 8) | 0x200;
  if ((*(_BYTE *)(a3 + 1) & 0x10) != 0)
    *(_BYTE *)(a1 + 127) = 1;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a3 + 52);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a3 + 56);
  result = JSC::slowOperationFromUnlinkedStructureStubInfo(*(_BYTE *)a3);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void JSC::StructureStubInfo::resetStubAsJumpInAccess(JSC::StructureStubInfo *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  JSC::InlineCacheHandler *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8x8_t v43;
  JSC::CodeBlock *v44;

  if ((*(_WORD *)((_BYTE *)this + 129) & 0x200) != 0 && (*((_DWORD *)this + 3) = 0, BYTE6(qword_1ECF4C780)))
  {
    for (i = *((_QWORD *)this + 9); i; i = *(_QWORD *)(i + 88))
    {
      v11 = *(_QWORD *)(i + 64);
      if (v11)
      {
        v44 = a2;
        if ((*(_BYTE *)(v11 + 40) & 0x20) != 0)
          WTF::HashCountedSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::remove((uint64_t *)(v11 + 80), &v44, a3, a4, a5, a6, a7, a8);
      }
    }
    JSC::InlineCacheCompiler::generateSlowPathHandler(*((_QWORD *)a2 + 9), *((char *)this + 122), (uint64_t *)&v44);
    v20 = (JSC::InlineCacheHandler *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v44;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        JSC::InlineCacheHandler::~InlineCacheHandler(v20, v12, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
  }
  else
  {
    v29 = *((_QWORD *)this + 5);
    v30 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 4) = 0;
    *(_QWORD *)(v30 + 12) = 0;
    *(_QWORD *)(v30 + 20) = 0;
    *(_DWORD *)(v30 + 28) = -1;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 40) = 0;
    *(_DWORD *)(v30 + 48) = 0;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_QWORD *)(v30 + 8) = v29;
    *(_QWORD *)(v30 + 16) = v29;
    JSC::StructureStubInfo::rewireStubAsJumpInAccess(this, a2, (JSC::InlineCacheHandler *)v30, v31, v32, v33, v34, v35, 0);
    WTF::RefCounted<JSC::InlineCacheHandler>::deref((JSC::InlineCacheHandler *)v30, v36, v37, v38, v39, v40, v41, v42, v43);
  }
}

void JSC::initializeSuperSampler(JSC *this)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (byte_1ECF4C6C2)
  {
    v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v1 = off_1E35835E8;
    v10 = v1;
    WTF::Thread::create((uint64_t)"JSC Super Sampler", 18, (uint64_t *)&v10, 1, 0, &v11);
    WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::~Ref((unint64_t *)&v11, v2, v3, v4, v5, v6, v7, v8);
    v9 = (uint64_t)v10;
    v10 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t *WTF::Ref<WTF::Thread,WTF::RawPtrTraits<WTF::Thread>,WTF::DefaultRefDerefTraits<WTF::Thread>>::~Ref(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count **v26;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(unsigned int **)(v9 + 96);
      *(_QWORD *)(v9 + 96) = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v13 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v9 + 64), a2, a3, a4, a5, a6, a7, a8);
      v24 = *(_QWORD *)(v9 + 32);
      if (v24)
      {
        v25 = *(unsigned int *)(v24 - 4);
        if ((_DWORD)v25)
        {
          v26 = (std::__shared_weak_count **)(v24 + 16);
          do
          {
            if (*(v26 - 2) != (std::__shared_weak_count *)-1 && *v26)
              std::__shared_weak_count::__release_weak(*v26);
            v26 += 3;
            --v25;
          }
          while (v25);
        }
        WTF::fastFree(v24 - 16, v17, v18, v19, v20, v21, v22, v23);
      }
      WTF::fastFree(v9, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  return a1;
}

void JSC::resetSuperSamplerState(JSC *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (__ldaxr((unsigned __int8 *)&JSC::lock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::lock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
LABEL_5:
  _MergedGlobals_31 = 0;
  unk_1ECF58660 = 0;
  v9 = __ldxr((unsigned __int8 *)&JSC::lock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)&JSC::lock))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::printSuperSamplerState(JSC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double v9;

  if (byte_1ECF4C6C2)
  {
    if (__ldaxr((unsigned __int8 *)&JSC::lock))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&JSC::lock))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
LABEL_6:
    v9 = *(double *)&_MergedGlobals_31 * 100.0 / (*(double *)&_MergedGlobals_31 + unk_1ECF58660);
    WTF::dataLog<char [41],double,char [3]>(&v9);
    v8 = __ldxr((unsigned __int8 *)&JSC::lock);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&JSC::lock))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, v2, v3, v4, v5, v6, v7);
  }
}

uint64_t WTF::dataLog<char [41],double,char [3]>(double *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Percent time behind super sampler flag: ");
  WTF::PrintStream::printf(v4, "%lf", *a1);
  WTF::PrintStream::printf(v4, "%s", "%\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::enableSuperSampler(JSC *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (__ldaxr((unsigned __int8 *)&JSC::lock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::lock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
LABEL_5:
  atomic_store(1u, (unsigned __int8 *)&JSC::g_superSamplerEnabled);
  v9 = __ldxr((unsigned __int8 *)&JSC::lock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)&JSC::lock))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::disableSuperSampler(JSC *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (__ldaxr((unsigned __int8 *)&JSC::lock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::lock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
LABEL_5:
  atomic_store(0, (unsigned __int8 *)&JSC::g_superSamplerEnabled);
  v9 = __ldxr((unsigned __int8 *)&JSC::lock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)&JSC::lock))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, a3, a4, a5, a6, a7, a8);
}

_QWORD *JSC::TrackedReferences::TrackedReferences(_QWORD *this)
{
  *this = 0;
  return this;
}

void JSC::TrackedReferences::~TrackedReferences(JSC::TrackedReferences *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_QWORD *)this)
    WTF::fastFree(*(_QWORD *)this - 16, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t *JSC::TrackedReferences::add(uint64_t *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSCell *v9;

  v9 = a2;
  if (a2)
    return WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(this, (uint64_t *)&v9, a4, a5, a6, a7, a8, (uint64_t)&v8);
  return this;
}

uint64_t *WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v31;
        goto LABEL_18;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v9;
  if (*v9)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
    goto LABEL_32;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v32 = 8;
      goto LABEL_26;
    }
LABEL_32:
    v32 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
LABEL_26:
    result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v9, v32, (uint64_t)v19, a3, a4, a5, a6, a7);
    v19 = result;
    v25 = *v9;
    if (*v9)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
  }
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_18:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v29;
  *(_BYTE *)(a8 + 16) = v30;
  return result;
}

uint64_t *JSC::TrackedReferences::add(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[3];

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v11[1] = v8;
    v11[2] = v9;
    v11[0] = a2;
    if (a2)
      return WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>::add(result, v11, a4, a5, a6, a7, a8, (uint64_t)&v10);
  }
  return result;
}

uint64_t WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>(const char *a1, const void ***a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  const void **v9;
  uint64_t v10;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  int v15;
  const void *v16;
  WTF::PrintStream *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  float v20;
  const void **v21;
  uint64_t v23;
  const char *v24;
  char v25;
  char **v26;
  char *v27;
  int v28;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v27 = &v25;
    v26 = &v27;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v26, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  v9 = *a2;
  v23 = v7;
  v24 = a3;
  if (*a2)
  {
    v10 = *((unsigned int *)v9 - 1);
    v11 = &v9[v10];
    if (*((_DWORD *)v9 - 3))
    {
      v12 = *a2;
      if ((_DWORD)v10)
      {
        v13 = 8 * v10;
        v12 = *a2;
        while ((unint64_t)*v12 + 1 <= 1)
        {
          ++v12;
          v13 -= 8;
          if (!v13)
          {
            v12 = v11;
            break;
          }
        }
      }
      if (v9)
        goto LABEL_11;
      goto LABEL_29;
    }
    v12 = &v9[v10];
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = &v9[v10];
  if (v9)
  {
LABEL_11:
    v14 = &v9[*((unsigned int *)v9 - 1)];
    goto LABEL_12;
  }
LABEL_29:
  v14 = 0;
LABEL_12:
  if (v14 != v12)
  {
    v15 = 0;
    do
    {
      v16 = *v12;
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
      v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 32))(v17);
      v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
      if (v15)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v27, v20);
        WTF::printExpectedCStringHelper(v19, "StringView", &v27);
        if (v28 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v26, &v27);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v27, v20);
        WTF::printExpectedCStringHelper(v19, "StringView", &v27);
        if (v28 != -1)
          ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v28])(&v26, &v27);
        v15 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 40))(v17);
      WTF::PrintStream::printf(v17, "%p", v16);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
      v21 = v12 + 1;
      v12 = v11;
      if (v21 != v11)
      {
        v12 = v21;
        while ((unint64_t)*v12 + 1 <= 1)
        {
          if (++v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    while (v12 != v14);
  }
  WTF::PrintStream::printf(v8, "%s", v24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
}

uint64_t JSC::TrackedReferences::check(uint64_t result, uint64_t a2)
{
  const void ***v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v9 = a2;
    if (a2)
    {
      v2 = (const void ***)result;
      v3 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
      {
LABEL_10:
        v8 = a2;
        WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v8, "\n");
        WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", v2, "\n");
        result = 60;
        __break(0xC471u);
        return result;
      }
      v4 = *(_DWORD *)(v3 - 8);
      result = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v9);
      a2 = v9;
      v5 = result & v4;
      v6 = *(_QWORD *)(v3 + 8 * (result & v4));
      if (v6 != v9)
      {
        v7 = 1;
        while (v6)
        {
          v5 = (v5 + v7) & v4;
          v6 = *(_QWORD *)(v3 + 8 * v5);
          ++v7;
          if (v6 == v9)
            return result;
        }
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t JSC::UnlinkedCodeBlock::estimatedSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 80);
  v2 = 288;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4) & 8) == 0)
    v2 = 96;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4) & 3) == 2)
    v2 = 0;
  if (v1)
    v2 += *(unsigned int *)(v1 + 12);
  if ((a1 & 8) != 0)
    v3 = *(_QWORD *)(a1 - 88);
  else
    v3 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v3 + v2;
}

void JSC::UnlinkedCodeBlock::visitChildren(JSC::UnlinkedCodeBlock *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unsigned int v31;
  uint64_t i;
  unint64_t v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_11:
  if (*((_BYTE *)a2 + 184))
  {
    v15 = *((unsigned __int16 *)this + 14) | (*((unsigned __int8 *)this + 30) << 16);
    v16 = (v15 >> 14) & 7;
    if (v16 >= 6)
      v16 = 6;
    v17 = ((v16 << 14) + 0x4000) | v15 & 0xFFFE3FFF;
    *((_WORD *)this + 14) = v17;
    *((_BYTE *)this + 30) = BYTE2(v17);
  }
  v18 = 0;
  v19 = (unsigned int *)*((_QWORD *)this + 16);
  if (v19)
    v20 = (unint64_t *)(v19 + 2);
  else
    v20 = 0;
  if (v19)
    v18 = (uint64_t)&v19[2 * *v19 + 2];
  while (v20 != (unint64_t *)v18)
  {
    v21 = *v20;
    if (!*v20)
      goto LABEL_27;
    if ((v21 & 8) != 0)
    {
      if ((*(_BYTE *)(v21 - 79) & 1) != 0)
        goto LABEL_26;
    }
    else
    {
      v22 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != v22)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000), v22, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFC000) + 8 * ((v21 >> 10) & 0xF) + 0x28) >> (v21 >> 4)) & 1) != 0)
      {
LABEL_26:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_27;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v21, 0, a4, a5, a6, a7, a8);
LABEL_27:
    ++v20;
  }
  v23 = 0;
  v24 = (unsigned int *)*((_QWORD *)this + 17);
  if (v24)
    v25 = (unint64_t *)(v24 + 2);
  else
    v25 = 0;
  if (v24)
    v23 = (uint64_t)&v24[2 * *v24 + 2];
  for (; v25 != (unint64_t *)v23; ++v25)
  {
    v26 = *v25;
    if (*v25)
    {
      if ((v26 & 8) != 0)
      {
        if ((*(_BYTE *)(v26 - 79) & 1) == 0)
          goto LABEL_108;
      }
      else
      {
        v27 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != v27)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000), v27, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFC000) + 8 * ((v26 >> 10) & 0xF) + 0x28) >> (v26 >> 4)) & 1) == 0)
        {
LABEL_108:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v26, 0, a4, a5, a6, a7, a8);
          continue;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_108;
    }
  }
  v28 = (_DWORD *)*((_QWORD *)this + 14);
  if (v28)
  {
    v31 = *v28;
    v30 = (unint64_t *)(v28 + 2);
    v29 = v31;
    if (v31)
    {
      for (i = 8 * v29; i; i -= 8)
      {
        v33 = *v30;
        if ((*v30 & 0xFFFE000000000002) != 0 || v33 == 0)
          goto LABEL_53;
        if ((v33 & 8) != 0)
        {
          if ((*(_BYTE *)(v33 - 79) & 1) == 0)
            goto LABEL_105;
        }
        else
        {
          v35 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 0x20) != v35)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v33 & 0xFFFFFFFFFFFFC000), v35, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v33 & 0xFFFFFFFFFFFFC000) + 8 * ((v33 >> 10) & 0xF) + 0x28) >> (v33 >> 4)) & 1) == 0)
          {
LABEL_105:
            JSC::SlotVisitor::appendSlow((uint64_t)a2, v33, 0, a4, a5, a6, a7, a8);
            goto LABEL_53;
          }
        }
        if (*((_QWORD *)a2 + 21))
          goto LABEL_105;
LABEL_53:
        ++v30;
      }
    }
  }
  v36 = *((_QWORD *)this + 10);
  v37 = 288;
  if ((*(_BYTE *)(*((_QWORD *)this + 9) + 4) & 8) == 0)
    v37 = 96;
  if ((*(_BYTE *)(*((_QWORD *)this + 9) + 4) & 3) == 2)
    v37 = 0;
  if (v36)
    v37 += *(unsigned int *)(v36 + 12);
  v38 = *((_QWORD *)this + 19);
  if (v38)
  {
    if (*(_QWORD *)v38)
      v51 = (16 * **(_DWORD **)v38) + 64;
    else
      v51 = 64;
    v52 = *(_QWORD *)(v38 + 8);
    if (v52)
      v52 = (16 * *(_DWORD *)v52);
    v53 = (char *)(v52 + v51);
    v54 = *(_QWORD *)(v38 + 16);
    if (v54)
      v54 = (24 * *(_DWORD *)v54);
    v55 = &v53[v54];
    v56 = *(_QWORD *)(v38 + 24);
    if (v56)
      v56 = 12 * *(unsigned int *)(v56 - 4);
    v57 = &v55[v56];
    v58 = *(_QWORD *)(v38 + 32);
    if (v58)
      v58 = (4 * *(_DWORD *)v58);
    v59 = &v57[v58];
    v60 = *(_QWORD *)(v38 + 40);
    if (v60)
      v60 = (8 * *(_DWORD *)v60);
    v61 = &v59[v60];
    v62 = *(_DWORD **)(v38 + 48);
    if (v62)
    {
      v65 = *v62;
      v63 = (uint64_t *)(v62 + 2);
      v64 = v65;
      v61 += 8 * v65;
      if (v65)
      {
        v66 = 8 * v64;
        do
        {
          v67 = *v63;
          if (*v63)
            v67 = *(unsigned int *)(v67 - 4);
          v61 += 8 * v67;
          ++v63;
          v66 -= 8;
        }
        while (v66);
      }
    }
    v37 += (uint64_t)v61;
  }
  v39 = *((_QWORD *)this + 8);
  if (v39)
    v39 = (4 * *(_DWORD *)v39);
  v40 = *((_QWORD *)this + 13);
  if (v40)
    v40 = (8 * *(_DWORD *)v40);
  v41 = *((_QWORD *)this + 14);
  if (v41)
    v41 = (8 * *(_DWORD *)v41);
  v42 = (unsigned int *)*((_QWORD *)this + 15);
  if (v42)
    v42 = (unsigned int *)*v42;
  v43 = *((_QWORD *)this + 16);
  if (v43)
    v43 = (8 * *(_DWORD *)v43);
  v44 = *((_QWORD *)this + 17);
  if (v44)
    v44 = (8 * *(_DWORD *)v44);
  if (*((_BYTE *)a2 + 184))
  {
    v45 = (unint64_t)&v42[2 * *(unsigned int *)(*((_QWORD *)this + 20) + 8)
                               + 6
                               + *(unsigned int *)(*((_QWORD *)this + 20) + 16)
                               + (unint64_t)*(unsigned int *)(*((_QWORD *)this + 20) + 12)]
        + v39
        + v40
        + v41
        + v43
        + v44
        + v37;
    *((_QWORD *)a2 + 18) += v45;
    v46 = *((_QWORD *)a2 + 20);
    v47 = __CFADD__(v46, v45);
    v48 = v46 + v45;
    if (v47)
      *((_BYTE *)a2 + 152) = 1;
    else
      *((_QWORD *)a2 + 20) = v48;
  }
  while (1)
  {
    v49 = *v12;
    if ((v49 & 0xC0) != 0x40)
      break;
    v50 = __ldxr(v12);
    if (v50 == v49)
    {
      if (!__stxr(v49 & 0xBF, v12))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::UnlinkedCodeBlock::visitChildren(JSC::UnlinkedCodeBlock *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  _QWORD v50[2];
  uint64_t v51;
  char v52;
  _QWORD v53[2];
  _QWORD *v54;
  char v55;

  v50[0] = a2;
  v50[1] = this;
  v52 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v51 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19821BCE4);
  }
  v53[0] = a2;
  v53[1] = this;
  v55 = 0;
  v54 = v50;
  *((_QWORD *)a2 + 11) = v53;
  v6 = (unsigned __int8 *)this + 4;
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *(_QWORD *)(v53[0] + 88) = v54;
  while (1)
  {
    v7 = *v6;
    if ((v7 & 0x40) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 0x40, v6))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  if ((*(unsigned int (**)(JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2))
  {
    v9 = *((unsigned __int16 *)this + 14) | (*((unsigned __int8 *)this + 30) << 16);
    v10 = (v9 >> 14) & 7;
    if (v10 >= 6)
      v10 = 6;
    v11 = ((v10 << 14) + 0x4000) | v9 & 0xFFFE3FFF;
    *((_WORD *)this + 14) = v11;
    *((_BYTE *)this + 30) = BYTE2(v11);
  }
  v12 = 0;
  v13 = (unsigned int *)*((_QWORD *)this + 16);
  if (v13)
    v14 = (uint64_t *)(v13 + 2);
  else
    v14 = 0;
  if (v13)
    v12 = (uint64_t)&v13[2 * *v13 + 2];
  while (v14 != (uint64_t *)v12)
  {
    v15 = *v14++;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v15);
  }
  v16 = 0;
  v17 = (unsigned int *)*((_QWORD *)this + 17);
  if (v17)
    v18 = (uint64_t *)(v17 + 2);
  else
    v18 = 0;
  if (v17)
    v16 = (uint64_t)&v17[2 * *v17 + 2];
  while (v18 != (uint64_t *)v16)
  {
    v19 = *v18++;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v19);
  }
  v20 = (_DWORD *)*((_QWORD *)this + 14);
  if (v20)
  {
    v23 = *v20;
    v22 = v20 + 2;
    v21 = v23;
    if (v23)
    {
      v24 = 8 * v21;
      do
      {
        if ((*v22 & 0xFFFE000000000002) == 0)
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        ++v22;
        v24 -= 8;
      }
      while (v24);
    }
  }
  v25 = *((_QWORD *)this + 10);
  v26 = 288;
  if ((*(_BYTE *)(*((_QWORD *)this + 9) + 4) & 8) == 0)
    v26 = 96;
  if ((*(_BYTE *)(*((_QWORD *)this + 9) + 4) & 3) == 2)
    v27 = 0;
  else
    v27 = v26;
  if (v25)
    v27 += *(unsigned int *)(v25 + 12);
  v28 = *((_QWORD *)this + 19);
  if (v28)
    v27 += (uint64_t)JSC::UnlinkedCodeBlock::RareData::sizeInBytes(v28);
  v29 = *((_QWORD *)this + 8);
  if (v29)
    v29 = (4 * *(_DWORD *)v29);
  v30 = (unsigned int *)*((_QWORD *)this + 20);
  v31 = *((_QWORD *)this + 13);
  if (v31)
    v31 = (8 * *(_DWORD *)v31);
  v32 = v30[3];
  v33 = v30[4];
  v34 = *((_QWORD *)this + 14);
  if (v34)
    v34 = (8 * *(_DWORD *)v34);
  v35 = v30[2];
  v36 = (unsigned int *)*((_QWORD *)this + 15);
  if (v36)
    v36 = (unsigned int *)*v36;
  v37 = v33 + v32;
  v38 = *((_QWORD *)this + 16);
  if (v38)
    v38 = (8 * *(_DWORD *)v38);
  v39 = 8 * v35;
  v40 = 4 * v37;
  v41 = *((_QWORD *)this + 17);
  if (v41)
    v41 = (8 * *(_DWORD *)v41);
  (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 96))(a2, (unint64_t)v36 + v34 + v38 + v41 + v27 + v39 + v40 + v29 + v31 + 24);
  while (1)
  {
    v48 = *v6;
    if ((v48 & 0xC0) != 0x40)
      break;
    v49 = __ldxr(v6);
    if (v49 == v48)
    {
      if (!__stxr(v48 & 0xBF, v6))
        goto LABEL_63;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v42, v43, v44, v45, v46, v47);
LABEL_63:
  *(_QWORD *)(v50[0] + 88) = v51;
}

uint64_t JSC::UnlinkedCodeBlock::UnlinkedCodeBlock(uint64_t a1, uint64_t a2, unint64_t a3, char a4, unsigned __int8 *a5, char a6)
{
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  double v31;
  float v32;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v8;
  v9 = (unsigned __int8 *)(a1 + 4);
  v11 = a1 + 28;
  v10 = *(unsigned __int16 *)(a1 + 28);
  *(_QWORD *)(a1 + 8) = 0xC0000000C0000000;
  *(_DWORD *)(a1 + 16) &= 0x80000000;
  v12 = v10 | ((unint64_t)*(unsigned __int8 *)(a1 + 30) << 16);
  *(_QWORD *)(a1 + 20) &= 0xFFFFFFFF80000000;
  v13 = (unint64_t)(*a5 & 1) << 31;
  *(_QWORD *)(a1 + 20) = v13;
  v14 = v12 & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*a5 >> 2) & 1;
  *(_QWORD *)(a1 + 20) = v13;
  *(_WORD *)(a1 + 28) = v14;
  v15 = v14 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*a5 & 0x20) != 0));
  *(_QWORD *)(a1 + 20) = v13;
  *(_WORD *)(a1 + 28) = v15;
  v16 = v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((*a5 & 0x40) != 0));
  *(_QWORD *)(a1 + 20) = v13;
  *(_WORD *)(a1 + 28) = v16;
  v17 = v16 & 0xFFFFFFFFFFFFFFF7 | (8 * (((unint64_t)a5[2] >> 3) & 1));
  *(_QWORD *)(a1 + 20) = v13;
  *(_WORD *)(a1 + 28) = v17;
  LODWORD(v17) = v17 & 0xFFFFFFCF | a5[2] & 0x10;
  *(_QWORD *)(a1 + 20) = v13;
  *(_WORD *)(a1 + 28) = v17;
  LODWORD(v17) = v17 & 0xFFFFFF1F | (((*a5 >> 3) & 3) << 6);
  *(_QWORD *)(a1 + 20) = v13;
  *(_WORD *)(a1 + 28) = v17;
  LODWORD(v17) = v17 & 0xFFFFFCFF;
  v18 = v17 | ((a5[2] & 3) << 8);
  *(_QWORD *)(a1 + 20) = v13;
  *(_BYTE *)(a1 + 30) = BYTE2(v17);
  *(_WORD *)(a1 + 28) = v18;
  v18 &= 0xFC03DFu;
  v19 = HIWORD(v18);
  v20 = v18 & 0xFFFFC3FF | (((a5[2] >> 5) & 3) << 10) & 0xFFFFCFFF | ((a4 & 3) << 12);
  *(_QWORD *)(a1 + 20) = v13;
  *(_BYTE *)(a1 + 30) = v19;
  *(_WORD *)(a1 + 28) = v20;
  *(_BYTE *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = a5[1];
  *(_BYTE *)(a1 + 43) = a6;
  *(_QWORD *)(a1 + 44) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  v21 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v21 = 1;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v21 + 4) & 0xC0 | 0x20;
  *(_DWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = WTF::fastZeroedMalloc(0xC0uLL, v22, v23, v24, v25, v26, v27, v28);
  *(_QWORD *)(v11 + 44) = v21;
  *(_OWORD *)(v11 + 172) = 0u;
  *(_OWORD *)(v11 + 156) = 0u;
  *(_DWORD *)(v11 + 148) = 0;
  *(_OWORD *)(v11 + 132) = 0u;
  *(_OWORD *)(v11 + 116) = 0u;
  *(_OWORD *)(v11 + 100) = 0u;
  *(_OWORD *)(v11 + 84) = 0u;
  *(_OWORD *)(v11 + 68) = 0u;
  *(_OWORD *)(v11 + 52) = 0u;
  if ((a5[2] & 4) != 0)
  {
    v52 = a1;
    while (1)
    {
      v34 = *v9;
      if ((v34 & 0x40) != 0)
        break;
      v35 = __ldaxr(v9);
      if (v35 == v34)
      {
        if (!__stxr(v34 | 0x40, v9))
          goto LABEL_28;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_28:
    JSC::UnlinkedCodeBlock::createRareDataIfNecessary(a1);
    *(_BYTE *)(*(_QWORD *)(a1 + 152) + 56) |= 1u;
    WTF::Locker<JSC::JSCellLock,void>::~Locker(&v52, v38, v39, v40, v41, v42, v43, v44);
  }
  if ((*a5 & 2) != 0)
  {
    v52 = a1;
    while (1)
    {
      v36 = *v9;
      if ((v36 & 0x40) != 0)
        break;
      v37 = __ldaxr(v9);
      if (v37 == v36)
      {
        if (!__stxr(v36 | 0x40, v9))
          goto LABEL_30;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_30:
    JSC::UnlinkedCodeBlock::createRareDataIfNecessary(a1);
    *(_BYTE *)(*(_QWORD *)(a1 + 152) + 56) |= 2u;
    WTF::Locker<JSC::JSCellLock,void>::~Locker(&v52, v45, v46, v47, v48, v49, v50, v51);
  }
  v29 = xmmword_1ECF4C4E4;
  v30 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + 4) >> 4) & 3;
  if (!v30)
  {
    v29 = 4 * xmmword_1ECF4C4E4;
LABEL_12:
    *(_DWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = v29;
    goto LABEL_6;
  }
  if (v30 == 1)
  {
    v29 = (int)xmmword_1ECF4C4E4 / 2;
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = v29;
  if (v29 == 0x7FFFFFFF)
  {
    *(_DWORD *)(a1 + 176) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 168) = 0x80000000;
    return a1;
  }
LABEL_6:
  if (v29 <= 0)
  {
    *(_QWORD *)(a1 + 168) = 0;
  }
  else
  {
    v31 = (double)v29;
    if ((double)v29 > (double)SHIDWORD(xmmword_1ECF4C514))
      v31 = (double)SHIDWORD(xmmword_1ECF4C514);
    *(_DWORD *)(a1 + 168) = (int)-v31;
    v32 = v31;
    *(float *)(a1 + 172) = v32;
  }
  return a1;
}

void JSC::UnlinkedCodeBlock::createRareDataIfNecessary(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  JSC::UnlinkedCodeBlock::RareData *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 152))
  {
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
    *v9 = 0u;
    v9[1] = 0u;
    v9[2] = 0u;
    v9[3] = 0u;
    v10 = *(JSC::UnlinkedCodeBlock::RareData **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v9;
    if (v10)
    {
      JSC::UnlinkedCodeBlock::RareData::~RareData(v10, v2, v3, v4, v5, v6, v7, v8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

_QWORD *WTF::Locker<JSC::JSCellLock,void>::~Locker(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v9;
  int v10;
  _QWORD *v11;

  if (*result)
  {
    v8 = (unsigned __int8 *)(*result + 4);
    while (1)
    {
      v9 = *v8;
      if ((v9 & 0xC0) != 0x40)
        break;
      v10 = __ldxr(v8);
      if (v10 == v9)
      {
        if (!__stxr(v9 & 0xBF, v8))
          return result;
      }
      else
      {
        __clrex();
      }
    }
    v11 = result;
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, a3, a4, a5, a6, a7, a8);
    return v11;
  }
  return result;
}

void JSC::UnlinkedCodeBlock::initializeLoopHintExecutionCounter(unint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  _BOOL4 v20;
  int v21;
  int v22;

  v8 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
  if ((this & 8) != 0)
    v8 = (uint64_t *)(this - 16);
  v9 = *(uint64_t **)(this + 80);
  v10 = *((_DWORD *)v9 + 3);
  if (v10)
  {
    v11 = 0;
    v12 = *v8;
    v13 = *v9;
    do
    {
      v14 = (unsigned __int8 *)(v13 + v11);
      v15 = *v14;
      v16 = v15;
      if ((v15 | 2) == 0x82)
        v16 = v14[1];
      v17 = v11;
      if (v16 == 89)
      {
        JSC::VM::addLoopHintExecutionCounter(v12, (uint64_t)v14, a3, a4, a5, a6, a7, a8);
        v13 = *v9;
        v15 = *(unsigned __int8 *)(*v9 + v17);
      }
      v18 = v15;
      if ((v15 | 2) == 0x82)
        v18 = *(unsigned __int8 *)(v13 + v17 + 1);
      v19 = v15 == 128;
      if (v15 == 130)
        v19 = 2;
      v20 = v15 == 128 || v15 == 130;
      v21 = JSC::opcodeLengths[v18] << v19;
      if (v20)
        v22 = 2;
      else
        v22 = 1;
      v11 = v22 + v17 + v21;
    }
    while (v11 != v10);
  }
}

uint64_t JSC::UnlinkedCodeBlock::instructions(JSC::UnlinkedCodeBlock *this)
{
  return *((_QWORD *)this + 10);
}

char *JSC::UnlinkedCodeBlock::RareData::sizeInBytes(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)a1)
    v1 = (16 * **(_DWORD **)a1) + 64;
  else
    v1 = 64;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v2 = (16 * *(_DWORD *)v2);
  v3 = (char *)(v2 + v1);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v4 = (24 * *(_DWORD *)v4);
  v5 = &v3[v4];
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    v6 = 12 * *(unsigned int *)(v6 - 4);
  v7 = &v5[v6];
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v8 = (4 * *(_DWORD *)v8);
  v9 = &v7[v8];
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    v10 = (8 * *(_DWORD *)v10);
  v11 = &v9[v10];
  v12 = *(_DWORD **)(a1 + 48);
  if (v12)
  {
    v16 = *v12;
    v14 = (uint64_t *)(v12 + 2);
    v15 = v16;
    v11 += 8 * v16;
    if (v16)
    {
      v17 = 8 * v15;
      do
      {
        v18 = *v14;
        if (*v14)
          v18 = *(unsigned int *)(v18 - 4);
        v11 += 8 * v18;
        ++v14;
        v17 -= 8;
      }
      while (v17);
    }
  }
  return v11;
}

uint64_t JSC::UnlinkedCodeBlock::typeProfilerExpressionInfoForBytecodeOffset(JSC::UnlinkedCodeBlock *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t result;

  v4 = *((_QWORD *)this + 19);
  if (!v4)
    goto LABEL_11;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    goto LABEL_11;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v6 & (v8 ^ HIWORD(v8));
  v10 = (int *)(v5 + 12 * v9);
  v11 = *v10;
  if (*v10 != a2)
  {
    v12 = 1;
    while (v11)
    {
      v9 = (v9 + v12) & v6;
      v10 = (int *)(v5 + 12 * v9);
      v11 = *v10;
      ++v12;
      if (*v10 == a2)
        goto LABEL_9;
    }
    v10 = (int *)(v5 + 12 * *(unsigned int *)(v5 - 4));
  }
LABEL_9:
  if (v10 != (int *)(v5 + 12 * *(unsigned int *)(v5 - 4)))
  {
    *a3 = v10[1];
    v13 = v10[2];
    result = 1;
  }
  else
  {
LABEL_11:
    result = 0;
    v13 = -1;
    *a3 = -1;
  }
  *a4 = v13;
  return result;
}

void JSC::UnlinkedCodeBlock::~UnlinkedCodeBlock(unint64_t this, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::UnlinkedCodeBlock::RareData *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  char v104;
  _BOOL4 v105;
  int v106;
  int v107;

  if (HIBYTE(qword_1ECF4C75C))
  {
    v94 = *(uint64_t **)(this + 80);
    if (v94)
    {
      v95 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v95 = (uint64_t *)(this - 16);
      v96 = *((_DWORD *)v94 + 3);
      if (v96)
      {
        v97 = 0;
        v98 = *v95;
        v99 = *v94;
        do
        {
          a2 = (unsigned __int8 *)(v99 + v97);
          v100 = *a2;
          v101 = v100;
          if ((v100 | 2) == 0x82)
            v101 = a2[1];
          v102 = v97;
          if (v101 == 89)
          {
            JSC::VM::removeLoopHintExecutionCounter(v98, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v99 = *v94;
            v100 = *(unsigned __int8 *)(*v94 + v102);
          }
          v103 = v100;
          if ((v100 | 2) == 0x82)
            v103 = *(unsigned __int8 *)(v99 + v102 + 1);
          v104 = v100 == 128;
          if (v100 == 130)
            v104 = 2;
          v105 = v100 == 128 || v100 == 130;
          v106 = JSC::opcodeLengths[v103] << v104;
          if (v105)
            v107 = 2;
          else
            v107 = 1;
          v97 = v107 + v102 + v106;
        }
        while (v97 != v96);
      }
    }
  }
  v9 = *(_QWORD *)(this + 208);
  *(_QWORD *)(this + 208) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(this + 200);
  *(_QWORD *)(this + 200) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(this + 192);
  *(_QWORD *)(this + 192) = 0;
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(this + 184);
  *(_QWORD *)(this + 184) = 0;
  if (v12)
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(*(_QWORD *)(this + 160), a2, a3, a4, a5, a6, a7, a8);
  v20 = *(JSC::UnlinkedCodeBlock::RareData **)(this + 152);
  *(_QWORD *)(this + 152) = 0;
  if (v20)
  {
    JSC::UnlinkedCodeBlock::RareData::~RareData(v20, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  v29 = *(_QWORD *)(this + 144);
  if (v29)
    WTF::fastFree(v29 - 16, v13, v14, v15, v16, v17, v18, v19);
  v30 = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 136) = 0;
  if (v30)
    WTF::fastFree(v30, v13, v14, v15, v16, v17, v18, v19);
  v31 = *(_QWORD *)(this + 128);
  *(_QWORD *)(this + 128) = 0;
  if (v31)
    WTF::fastFree(v31, v13, v14, v15, v16, v17, v18, v19);
  v32 = *(_QWORD *)(this + 120);
  *(_QWORD *)(this + 120) = 0;
  if (v32)
    WTF::fastFree(v32, v13, v14, v15, v16, v17, v18, v19);
  v33 = *(_QWORD *)(this + 112);
  *(_QWORD *)(this + 112) = 0;
  if (v33)
    WTF::fastFree(v33, v13, v14, v15, v16, v17, v18, v19);
  v34 = *(unsigned int **)(this + 104);
  *(_QWORD *)(this + 104) = 0;
  if (v34)
  {
    v36 = (WTF::StringImpl **)(v34 + 2);
    v35 = *v34;
    if ((_DWORD)v35)
    {
      v37 = 8 * v35;
      do
      {
        v38 = *v36;
        *v36 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v13, v14, v15, v16, v17, v18, v19);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
    WTF::fastFree((unint64_t)v34, v13, v14, v15, v16, v17, v18, v19);
  }
  v47 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = 0;
  if (v47)
  {
    v48 = *(_QWORD *)v47;
    if (*(_QWORD *)v47)
    {
      *(_QWORD *)v47 = 0;
      *(_DWORD *)(v47 + 8) = 0;
      WTF::fastFree(v48, v13, v14, v15, v16, v17, v18, v19);
    }
    WTF::fastFree(v47, v13, v14, v15, v16, v17, v18, v19);
  }
  v49 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = 0;
  if (v49)
  {
    v50 = WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector(v49, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  v58 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = 0;
  if (v58)
  {
    v59 = *(_QWORD *)v58;
    if (*(_QWORD *)v58)
    {
      *(_QWORD *)v58 = 0;
      *(_DWORD *)(v58 + 8) = 0;
      WTF::fastFree(v59, v13, v14, v15, v16, v17, v18, v19);
    }
    WTF::fastFree(v58, v13, v14, v15, v16, v17, v18, v19);
  }
  v60 = *(unsigned int **)(this + 72);
  *(_QWORD *)(this + 72) = 0;
  if (v60)
  {
    do
    {
      v84 = __ldaxr(v60);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v60));
    if (!v85)
    {
      atomic_store(1u, v60);
      JSC::UnlinkedMetadataTable::~UnlinkedMetadataTable((JSC::UnlinkedMetadataTable *)v60, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
  }
  v61 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = 0;
  if (v61)
    WTF::fastFree(v61, v13, v14, v15, v16, v17, v18, v19);
  v62 = (WTF::StringImpl *)(*(unsigned int *)(this + 57) | ((unint64_t)*(unsigned __int8 *)(this + 61) << 32));
  *(_DWORD *)(this + 57) = 0;
  *(_BYTE *)(this + 61) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = (WTF::StringImpl *)(*(unsigned int *)(this + 52) | ((unint64_t)*(unsigned __int8 *)(this + 56) << 32));
  *(_DWORD *)(this + 52) = 0;
  *(_BYTE *)(this + 56) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = *(unsigned int **)(this + 32);
  *(_QWORD *)(this + 32) = 0;
  if (v64)
  {
    v65 = v64 + 2;
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v64 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 32))(v64);
    }
  }
}

uint64_t JSC::UnlinkedCodeBlock::livenessAnalysisSlow(JSC::UnlinkedCodeBlock *this, JSC::UnlinkedCodeBlock **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  JSC::BytecodeLivenessAnalysis *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  if (a2[7] != this)
  {
    __break(0xC471u);
    JUMPOUT(0x19821C87CLL);
  }
  v10 = (unsigned __int8 *)this + 31;
  if (__ldaxr((unsigned __int8 *)this + 31))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 31);
    goto LABEL_5;
  }
  if (__stxr(1u, v10))
    goto LABEL_4;
LABEL_5:
  if (!*((_QWORD *)this + 11))
  {
    v12 = (JSC::BytecodeLivenessAnalysis *)WTF::fastMalloc((WTF *)0x10);
    JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::CodeBlock>((uint64_t)a2, *((_QWORD *)a2[7] + 10), v12);
    JSC::BytecodeLivenessPropagation::runLivenessFixpoint<JSC::CodeBlock,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>((uint64_t)a2, *((_QWORD **)a2[7] + 10), (uint64_t)v12);
    if (BYTE2(dword_1ECF4C270))
      JSC::BytecodeLivenessAnalysis::dumpResults(v12, (JSC::CodeBlock *)a2);
    v14 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v12;
    if (v14)
    {
      v15 = WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector(v14, v13, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  v23 = __ldxr(v10);
  if (v23 == 1)
  {
    if (!__stlxr(0, v10))
      return *((_QWORD *)this + 11);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return *((_QWORD *)this + 11);
}

_DWORD *JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  _DWORD *result;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;

  BYTE5(v59) = 2;
  v60 = 2;
  v61 = 2;
  v62 = 2;
  v63 = 2;
  v64 = 2;
  v9 = (uint64_t *)(a1 + 160);
  LODWORD(v10) = *(_DWORD *)(a1 + 172);
  if (((_DWORD)v10 - *(_DWORD *)(a1 + 136)) >> 4 > 0x270)
    goto LABEL_65;
  v11 = *(_DWORD *)(a1 + 124);
  v13 = *(_DWORD *)(a1 + 112);
  v12 = *(_DWORD *)(a1 + 116);
LABEL_3:
  v14 = a2 - v13;
  v15 = a6 - v12;
  if ((_DWORD)a6 == v12)
  {
    v16 = *(_DWORD *)(a1 + 120);
  }
  else
  {
    v16 = 0;
    *(_DWORD *)(a1 + 120) = 0;
  }
  v17 = a3 - v11;
  if (v14 >= 0x1E)
  {
    LODWORD(v59) = a2 - v13;
    WORD2(v59) = 512;
    v18 = 1;
    v14 = 0;
  }
  else
  {
    v18 = 0;
  }
  if ((v17 - 64) <= 0xFFFFFF7F)
  {
    LODWORD(v10) = 0;
    v36 = &v59 + v18++;
    *(_DWORD *)v36 = v17;
    *((_WORD *)v36 + 2) = 513;
  }
  else
  {
    LODWORD(v10) = v17;
  }
  if (a4 >= 0x40)
  {
    v40 = &v59 + v18++;
    *(_DWORD *)v40 = a4;
    *((_WORD *)v40 + 2) = 514;
    a4 = 0;
  }
  if (a5 >= 0x40)
  {
    v37 = &v59 + v18++;
    *(_DWORD *)v37 = a5;
    *((_WORD *)v37 + 2) = 515;
    a5 = 0;
  }
  v19 = HIDWORD(a6) - v16;
  if ((v15 - 4) <= 0xFFFFFFF7)
  {
    v38 = &v59 + v18++;
    *(_DWORD *)v38 = v15;
    *((_WORD *)v38 + 2) = 516;
    v15 = 0;
  }
  if (v19 == v17)
  {
    v19 = 0x7FFFFFFF;
  }
  else if ((v19 - 15) <= 0xFFFFFFE0)
  {
    v24 = &v59 + v18;
    *(_DWORD *)v24 = v19;
    *((_WORD *)v24 + 2) = 517;
    ++v18;
    *(_DWORD *)(a1 + 112) = a2;
    *(_QWORD *)(a1 + 116) = a6;
    *(_DWORD *)(a1 + 124) = a3;
    v19 = 0;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 116) = a6;
  *(_DWORD *)(a1 + 124) = a3;
  if (v18)
  {
LABEL_27:
    v25 = 0;
    v26 = (char *)&v59 + 8 * v18 - 3;
    v27 = v18 - 1;
    v28 = v18;
    while (1)
    {
      v29 = *(_DWORD *)(v26 - 1);
      if (v29 > 5u)
      {
LABEL_63:
        *v26 = 2;
        goto LABEL_32;
      }
      v30 = *(_DWORD *)(v26 - 5);
      if (((1 << v29) & 0x32) != 0)
      {
        if (v30 + 512 >= 0x400)
          goto LABEL_35;
      }
      else if (v30 > 0x3FF)
      {
LABEL_35:
        if (v29 == 1)
          goto LABEL_36;
        if (v29 > 5u)
          goto LABEL_63;
        if (((1 << v29) & 0xD) != 0)
        {
          if (v30 >> 23)
            goto LABEL_63;
        }
        else
        {
          if (((1 << v29) & 0x30) == 0)
            goto LABEL_63;
LABEL_36:
          if (v30 + 0x400000 >= 0x800000)
            goto LABEL_63;
        }
        *v26 = 0;
        goto LABEL_32;
      }
      *v26 = 1;
      ++v25;
      v28 = v27;
LABEL_32:
      v26 -= 8;
      if (--v27 == -1)
      {
        v57 = (int)v10;
        if ((v25 & 1) == 0)
          goto LABEL_41;
        if (v28 < 6)
        {
          *((_BYTE *)&v59 + 8 * v28 + 5) = 0;
LABEL_41:
          result = std::__introsort<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,false>(&v59, (unsigned __int8 *)&v59 + 8 * v18, 126 - 2 * __clz(v18), 1);
          v31 = 0;
          v32 = (uint64_t *)((char *)&v59 + 4);
          while (v31 < 6)
          {
            v10 = v9;
            v33 = v31;
            v9 = &v59 + v31;
            if (!*((_BYTE *)v9 + 5))
            {
              v34 = *(_DWORD *)v9 & 0x7FFFFF | (*((unsigned __int8 *)&v59 + 8 * v31 + 4) << 23) | 0xF0000000;
              goto LABEL_45;
            }
            if (*((_BYTE *)v9 + 5) == 1)
            {
              if (v31 >= 5)
                break;
              ++v31;
              v34 = (*((unsigned __int8 *)&v59 + 8 * v33 + 4) << 23) | ((*(_DWORD *)v9 & 0x3FF) << 13) | (*((unsigned __int8 *)&v59 + 8 * v31 + 4) << 10) | *(_DWORD *)(&v59 + v31) & 0x3FF | 0xF4000000;
LABEL_45:
              LODWORD(v58) = v34;
              v35 = *(unsigned int *)(a1 + 172);
              v9 = v10;
              if ((_DWORD)v35 == *(_DWORD *)(a1 + 168))
              {
                v39 = (uint64_t)v10;
                v10 = v32;
                v32 = v10;
                *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * *(unsigned int *)(a1 + 172)) = *result;
              }
              else
              {
                *(_DWORD *)(*v10 + 4 * v35) = v34;
              }
              ++*(_DWORD *)(a1 + 172);
            }
            else
            {
              v56 = (char *)v32;
              v47 = v18 - v31;
              v48 = ((_DWORD)v47 << 18) | 0xF7800000;
              if (v18 != v31)
              {
                v49 = (char *)&v32[v31];
                v50 = 15;
                do
                {
                  v51 = *v49;
                  v49 += 8;
                  v48 |= v51 << v50;
                  v50 -= 3;
                  --v47;
                }
                while (v47);
              }
              LODWORD(v58) = v48;
              v52 = *(unsigned int *)(a1 + 172);
              if ((_DWORD)v52 == *(_DWORD *)(a1 + 168))
              {
                result = (_DWORD *)WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v10, (unint64_t)&v58);
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v52) = v48;
                ++*(_DWORD *)(a1 + 172);
              }
              if (v18 > v31)
              {
                do
                {
                  v54 = *(_DWORD *)v9++;
                  v53 = v54;
                  LODWORD(v58) = v54;
                  v55 = *(unsigned int *)(a1 + 172);
                  if ((_DWORD)v55 == *(_DWORD *)(a1 + 168))
                  {
                    result = (_DWORD *)WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v10, (unint64_t)&v58);
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v55) = v53;
                    ++*(_DWORD *)(a1 + 172);
                  }
                  ++v31;
                }
                while (v18 != v31);
                v31 = v18;
              }
              v9 = v10;
              v32 = (uint64_t *)v56;
            }
            if (++v31 >= v18)
            {
              LODWORD(v10) = v57;
              goto LABEL_19;
            }
            continue;
          }
        }
        __break(1u);
LABEL_65:
        v41 = (uint64_t)v9;
        v42 = a3;
        v43 = a6;
        v44 = a2;
        v58 = __PAIR64__(v10, a2);
        v45 = *(unsigned int *)(a1 + 156);
        if ((_DWORD)v45 == *(_DWORD *)(a1 + 152))
        {
          WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::Chapter>(a1 + 144, (unint64_t)&v58);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v45) = v58;
          ++*(_DWORD *)(a1 + 156);
        }
        *(_DWORD *)(a1 + 136) = (_DWORD)v10;
        if (v44 >= 0x7FFFFF)
          v13 = 0x7FFFFF;
        else
          v13 = v44;
        LODWORD(v58) = v13 | 0xF8000000;
        v46 = *(unsigned int *)(a1 + 172);
        if ((_DWORD)v46 == *(_DWORD *)(a1 + 168))
        {
          WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>(v41, (unint64_t)&v58);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v46) = v13 | 0xF8000000;
          ++*(_DWORD *)(a1 + 172);
        }
        v12 = 0;
        v11 = 0;
        *(_QWORD *)(a1 + 124) = 0;
        *(_QWORD *)(a1 + 116) = 0;
        *(_DWORD *)(a1 + 132) = 0;
        *(_DWORD *)(a1 + 112) = v13;
        a6 = v43;
        a3 = v42;
        a2 = v44;
        v9 = (uint64_t *)v41;
        goto LABEL_3;
      }
    }
  }
  result = std::__introsort<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,false>(&v59, (unsigned __int8 *)&v59, 0, 1);
LABEL_19:
  v21 = v19 + 16;
  if (v19 == 0x7FFFFFFF)
    v21 = 31;
  v22 = (32 * v15 + 128) | (a5 << 8) | (a4 << 14) | v21 | (((_DWORD)v10 << 20) + 0x4000000) | (v14 << 27);
  LODWORD(v58) = v22;
  v23 = *(unsigned int *)(a1 + 172);
  if ((_DWORD)v23 == *(_DWORD *)(a1 + 168))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * *(unsigned int *)(a1 + 172)) = *result;
  }
  else
  {
    *(_DWORD *)(*v9 + 4 * v23) = v22;
  }
  ++*(_DWORD *)(a1 + 172);
  return result;
}

void JSC::UnlinkedCodeBlockGenerator::finalize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x4_t v29;
  unsigned int v30;
  _DWORD *v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  _DWORD *v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  _DWORD *v167;
  _DWORD *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  _DWORD *v175;
  unint64_t v176;
  _DWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unsigned int *v183;
  uint64_t v184;
  unint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD *v192;
  unint64_t v193;
  unint64_t v194;
  _DWORD *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF::StringImpl **v202;
  WTF::StringImpl *v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _DWORD *v212;
  _DWORD *v213;
  _DWORD *v214;
  unint64_t v215;
  uint64_t v216;
  WTF::StringImpl **v217;
  WTF::StringImpl *v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  _DWORD *v233;
  _DWORD *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _DWORD *v240;
  unint64_t v241;
  _DWORD *v242;
  uint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int *v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  _DWORD *v259;
  _DWORD *v260;
  uint64_t v261;
  WTF::StringImpl ***v262;
  _DWORD *v263;
  uint64_t v264;
  WTF::StringImpl ***v265;
  WTF::StringImpl **v266;
  uint64_t v267;
  uint64_t v268;
  WTF::StringImpl **v269;
  WTF::StringImpl *v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int *v279;
  uint64_t v280;
  WTF::StringImpl ***v281;
  WTF::StringImpl ***v282;
  WTF::StringImpl **v283;
  uint64_t v284;
  WTF::StringImpl **v285;
  WTF::StringImpl *v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  _QWORD *v297;
  _QWORD *v298;
  size_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  uint64_t v303;
  int v304;
  size_t v305;
  _OWORD *v306;
  JSC::UnlinkedCodeBlock::RareData *v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;

  v10 = *(uint64_t **)(a1 + 8);
  if (v10)
    v11 = *v10;
  else
    v11 = 0;
  v12 = (unsigned __int8 *)(v11 + 4);
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11 + 4);
LABEL_8:
  v15 = **(_QWORD **)(a1 + 8);
  v16 = *a2;
  *a2 = 0;
  v17 = *(_QWORD *)(v15 + 80);
  *(_QWORD *)(v15 + 80) = v16;
  if (v17)
  {
    v18 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
    {
      *(_QWORD *)v17 = 0;
      *(_DWORD *)(v17 + 8) = 0;
      WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *(uint64_t **)(a1 + 8);
  if (v19)
    v20 = *v19;
  else
    v20 = 0;
  v21 = *(_QWORD *)(v20 + 72);
  if ((*(_BYTE *)(v21 + 4) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19821DC30);
  }
  v22 = *(unsigned int *)(a1 + 288);
  v23 = *(unsigned int *)(a1 + 292);
  v24 = *(_DWORD *)(v20 + 24) & 0x7FFFFFFF;
  if ((*(_BYTE *)(v21 + 4) & 1) != 0)
    v24 += *(_DWORD *)(v21 + 8);
  if (v24)
  {
    v303 = *(unsigned int *)(a1 + 292);
    v25 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v24 + 8));
    *v25 = v24;
    v23 = v303;
    bzero(v25 + 2, 8 * v24);
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)(v20 + 184);
  *(_QWORD *)(v20 + 184) = v25;
  if (v26)
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
  v27 = *(_QWORD *)(v20 + 72);
  if ((*(_BYTE *)(v27 + 4) & 1) != 0)
  {
    v28 = *(_QWORD *)(v27 + 16);
    v29.i32[0] = *(_DWORD *)(v28 + 172);
    v29.i32[1] = *(_DWORD *)(v28 + 156);
    v29.i32[2] = HIDWORD(*(_QWORD *)(v28 + 160));
    v29.i32[3] = *(_QWORD *)(v28 + 160);
    v30 = vaddvq_s32(vaddq_s32(vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)(v28 + 140), *(int8x16_t *)(v28 + 140), 4uLL), *(int32x4_t *)(v28 + 140)), v29))+ *(_DWORD *)(v28 + 76)+ *(_DWORD *)(v28 + 128)+ *(_DWORD *)(v28 + 88)+ *(_DWORD *)(v28 + 92)+ *(_DWORD *)(v28 + 96)+ *(_DWORD *)(v28 + 36)+ *(_DWORD *)(v28 + 16)+ *(_DWORD *)(v28 + 8);
    if (v30)
    {
      v31 = (_DWORD *)WTF::fastMalloc((WTF *)((8 * v30) | 4));
      *v31 = v30;
      bzero(v31 + 1, 8 * v30);
    }
    else
    {
      v31 = 0;
    }
    v32 = *(_QWORD *)(v20 + 192);
    *(_QWORD *)(v20 + 192) = v31;
    if (v32)
      WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((_DWORD)v22)
  {
    v33 = (_DWORD *)WTF::fastMalloc((WTF *)(2 * v22 + 4));
    *v33 = v22;
    bzero(v33 + 1, 2 * v22);
  }
  else
  {
    v33 = 0;
  }
  v34 = *(_QWORD *)(v20 + 200);
  *(_QWORD *)(v20 + 200) = v33;
  if (v34)
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v23)
  {
    v304 = v23;
    v305 = 2 * v23;
    v35 = (_DWORD *)WTF::fastMalloc((WTF *)(v305 + 4));
    *v35 = v304;
    bzero(v35 + 1, v305);
  }
  else
  {
    v35 = 0;
  }
  v36 = *(_QWORD *)(v20 + 208);
  *(_QWORD *)(v20 + 208) = v35;
  if (v36)
    WTF::fastFree(v36, a2, a3, a4, a5, a6, a7, a8);
  JSC::UnlinkedMetadataTable::finalize(*(JSC::UnlinkedMetadataTable **)(**(_QWORD **)(a1 + 8) + 72), a2, a3, a4, a5, a6, a7, a8);
  v44 = *(uint64_t **)(a1 + 8);
  if (v44)
    v45 = *v44;
  else
    v45 = 0;
  v46 = *(_QWORD *)(a1 + 16);
  v47 = *(unsigned int *)(a1 + 28);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if ((_DWORD)v47)
  {
    v48 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v47 + 4));
    v49 = v48;
    v50 = 0;
    *v48 = v47;
    do
    {
      v48[v50 + 1] = *(_DWORD *)(v46 + v50 * 4);
      ++v50;
    }
    while (v47 != v50);
    if (v46)
    {
      WTF::fastFree(v46, v37, v38, v39, v40, v41, v42, v43);
      v46 = 0;
    }
  }
  else
  {
    v49 = 0;
  }
  v51 = *(_QWORD *)(v45 + 64);
  *(_QWORD *)(v45 + 64) = v49;
  if (v51)
    WTF::fastFree(v51, v37, v38, v39, v40, v41, v42, v43);
  if (v46)
    WTF::fastFree(v46, v37, v38, v39, v40, v41, v42, v43);
  v52 = *(uint64_t **)(a1 + 8);
  if (v52)
    v53 = *v52;
  else
    v53 = 0;
  v54 = *(_QWORD *)(a1 + 32);
  v55 = *(unsigned int *)(a1 + 44);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if ((_DWORD)v55)
  {
    v56 = 8 * v55;
    v57 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v55 + 8));
    v58 = v57;
    v59 = 0;
    *v57 = v55;
    do
    {
      v60 = *(_QWORD *)(v54 + v59);
      *(_QWORD *)(v54 + v59) = 0;
      *(_QWORD *)&v57[v59 / 4 + 2] = v60;
      v59 += 8;
    }
    while (v56 != v59);
    v61 = 0;
    do
    {
      v62 = *(WTF::StringImpl **)(v54 + v61);
      *(_QWORD *)(v54 + v61) = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::~StringImpl(v62, (WTF::AtomStringImpl *)v37, v38, v39, v40, v41, v42, v43);
          WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        }
        else
        {
          *(_DWORD *)v62 -= 2;
        }
      }
      v61 += 8;
    }
    while (v56 != v61);
    if (v54)
    {
      WTF::fastFree(v54, v37, v38, v39, v40, v41, v42, v43);
      v54 = 0;
    }
  }
  else
  {
    v58 = 0;
  }
  v71 = *(unsigned int **)(v53 + 104);
  *(_QWORD *)(v53 + 104) = v58;
  if (v71)
  {
    v73 = (WTF::StringImpl **)(v71 + 2);
    v72 = *v71;
    if ((_DWORD)v72)
    {
      v74 = 8 * v72;
      do
      {
        v75 = *v73;
        *v73 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
          {
            WTF::StringImpl::~StringImpl(v75, (WTF::AtomStringImpl *)v37, v38, v39, v40, v41, v42, v43);
            WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          else
          {
            *(_DWORD *)v75 -= 2;
          }
        }
        ++v73;
        v74 -= 8;
      }
      while (v74);
    }
    WTF::fastFree((unint64_t)v71, v37, v38, v39, v40, v41, v42, v43);
  }
  if (v54)
    WTF::fastFree(v54, v37, v38, v39, v40, v41, v42, v43);
  v84 = *(uint64_t **)(a1 + 8);
  if (v84)
    v85 = *v84;
  else
    v85 = 0;
  v86 = *(_QWORD *)(a1 + 48);
  v87 = *(unsigned int *)(a1 + 60);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if ((_DWORD)v87)
  {
    v88 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v87 + 8));
    v89 = v88;
    v90 = 0;
    *v88 = v87;
    do
    {
      *(_QWORD *)&v88[v90 + 2] = *(_QWORD *)(v86 + v90 * 4);
      v90 += 2;
    }
    while (2 * v87 != v90);
    if (v86)
    {
      WTF::fastFree(v86, v37, v38, v39, v40, v41, v42, v43);
      v86 = 0;
    }
  }
  else
  {
    v89 = 0;
  }
  v91 = *(_QWORD *)(v85 + 112);
  *(_QWORD *)(v85 + 112) = v89;
  if (v91)
    WTF::fastFree(v91, v37, v38, v39, v40, v41, v42, v43);
  if (v86)
    WTF::fastFree(v86, v37, v38, v39, v40, v41, v42, v43);
  v92 = *(uint64_t **)(a1 + 8);
  if (v92)
    v93 = *v92;
  else
    v93 = 0;
  v94 = *(_QWORD *)(a1 + 64);
  v95 = *(unsigned int *)(a1 + 76);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if ((_DWORD)v95)
  {
    v96 = (_DWORD *)WTF::fastMalloc((WTF *)(v95 + 4));
    v97 = v96;
    v98 = 0;
    *v96 = v95;
    do
    {
      *((_BYTE *)v96 + v98 + 4) = *(_BYTE *)(v94 + v98);
      ++v98;
    }
    while (v95 != v98);
    if (v94)
    {
      WTF::fastFree(v94, v37, v38, v39, v40, v41, v42, v43);
      v94 = 0;
    }
  }
  else
  {
    v97 = 0;
  }
  v99 = *(_QWORD *)(v93 + 120);
  *(_QWORD *)(v93 + 120) = v97;
  if (v99)
    WTF::fastFree(v99, v37, v38, v39, v40, v41, v42, v43);
  if (v94)
    WTF::fastFree(v94, v37, v38, v39, v40, v41, v42, v43);
  v100 = *(uint64_t **)(a1 + 8);
  if (v100)
    v101 = *v100;
  else
    v101 = 0;
  v102 = *(_QWORD *)(a1 + 80);
  v103 = *(unsigned int *)(a1 + 92);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if ((_DWORD)v103)
  {
    v104 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v103 + 8));
    v105 = v104;
    v106 = 0;
    *v104 = v103;
    do
    {
      *(_QWORD *)&v104[v106 + 2] = *(_QWORD *)(v102 + v106 * 4);
      v106 += 2;
    }
    while (2 * v103 != v106);
    if (v102)
    {
      WTF::fastFree(v102, v37, v38, v39, v40, v41, v42, v43);
      v102 = 0;
    }
  }
  else
  {
    v105 = 0;
  }
  v107 = *(_QWORD *)(v101 + 128);
  *(_QWORD *)(v101 + 128) = v105;
  if (v107)
    WTF::fastFree(v107, v37, v38, v39, v40, v41, v42, v43);
  if (v102)
    WTF::fastFree(v102, v37, v38, v39, v40, v41, v42, v43);
  v108 = *(uint64_t **)(a1 + 8);
  if (v108)
    v109 = *v108;
  else
    v109 = 0;
  v110 = *(_QWORD *)(a1 + 96);
  v111 = *(unsigned int *)(a1 + 108);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if ((_DWORD)v111)
  {
    v112 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v111 + 8));
    v113 = v112;
    v114 = 0;
    *v112 = v111;
    do
    {
      *(_QWORD *)&v112[v114 + 2] = *(_QWORD *)(v110 + v114 * 4);
      v114 += 2;
    }
    while (2 * v111 != v114);
    if (v110)
    {
      WTF::fastFree(v110, v37, v38, v39, v40, v41, v42, v43);
      v110 = 0;
    }
  }
  else
  {
    v113 = 0;
  }
  v115 = *(_QWORD *)(v109 + 136);
  *(_QWORD *)(v109 + 136) = v113;
  if (v115)
    WTF::fastFree(v115, v37, v38, v39, v40, v41, v42, v43);
  if (v110)
    WTF::fastFree(v110, v37, v38, v39, v40, v41, v42, v43);
  v116 = WTF::fastMalloc((WTF *)(8 * *(unsigned int *)(a1 + 156) + 4 * *(unsigned int *)(a1 + 172) + 24));
  v124 = *(_DWORD *)(a1 + 140);
  v125 = *(_DWORD *)(a1 + 156);
  v126 = *(_DWORD *)(a1 + 172) - v124;
  *(_QWORD *)v116 = 0;
  *(_DWORD *)(v116 + 8) = v125;
  *(_DWORD *)(v116 + 12) = v126;
  *(_DWORD *)(v116 + 16) = v124;
  v127 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v127)
  {
    v128 = *(uint64_t **)(a1 + 144);
    v129 = 8 * v127;
    v130 = (_QWORD *)(v116 + 24);
    do
    {
      v131 = *v128++;
      *v130++ = v131;
      v129 -= 8;
    }
    while (v129);
    v125 = *(_DWORD *)(v116 + 8);
  }
  v132 = *(unsigned int *)(a1 + 172);
  if ((_DWORD)v132)
  {
    v133 = *(int **)(a1 + 160);
    v134 = 4 * v132;
    v135 = (_DWORD *)(v116 + 24 + 8 * v125);
    do
    {
      v136 = *v133++;
      *v135++ = v136;
      v134 -= 4;
    }
    while (v134);
  }
  v137 = **(_QWORD **)(a1 + 8);
  v138 = *(_QWORD *)(v137 + 160);
  *(_QWORD *)(v137 + 160) = v116;
  WTF::fastFree(v138, v117, v118, v119, v120, v121, v122, v123);
  WTF::fastFree(0, v139, v140, v141, v142, v143, v144, v145);
  v153 = **(_QWORD **)(a1 + 8);
  v154 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  v155 = *(_QWORD *)(v153 + 144);
  *(_QWORD *)(v153 + 144) = v154;
  if (v155)
    WTF::fastFree(v155 - 16, v146, v147, v148, v149, v150, v151, v152);
  v156 = **(_QWORD **)(a1 + 8);
  if (!*(_QWORD *)(v156 + 152)
    && (*(_DWORD *)(a1 + 196)
     || *(_DWORD *)(a1 + 212)
     || *(_DWORD *)(a1 + 228)
     || (v157 = *(_QWORD *)(a1 + 232)) != 0 && *(_DWORD *)(v157 - 12)
     || *(_DWORD *)(a1 + 252)
     || *(_DWORD *)(a1 + 268)
     || *(_DWORD *)(a1 + 284)))
  {
    v306 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
    *v306 = 0u;
    v306[1] = 0u;
    v306[2] = 0u;
    v306[3] = 0u;
    v307 = *(JSC::UnlinkedCodeBlock::RareData **)(v156 + 152);
    *(_QWORD *)(v156 + 152) = v306;
    if (v307)
    {
      JSC::UnlinkedCodeBlock::RareData::~RareData(v307, (WTF::AtomStringImpl *)v146, v147, v148, v149, v150, v151, v152);
      WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
    }
  }
  v158 = *(_QWORD *)(a1 + 8);
  if (v158)
  {
    v159 = *(unint64_t **)(*(_QWORD *)v158 + 152);
    if (v159)
    {
      v165 = *(_QWORD *)(a1 + 184);
      v166 = *(unsigned int *)(a1 + 196);
      *(_QWORD *)(a1 + 184) = 0;
      *(_QWORD *)(a1 + 192) = 0;
      if ((_DWORD)v166)
      {
        v167 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v166) | 4));
        v168 = v167;
        v169 = 0;
        *v167 = v166;
        do
        {
          *(_OWORD *)&v167[v169 + 1] = *(_OWORD *)(v165 + v169 * 4);
          v169 += 4;
        }
        while (4 * v166 != v169);
        if (v165)
        {
          WTF::fastFree(v165, v146, v147, v148, v149, v150, v151, v152);
          v165 = 0;
        }
      }
      else
      {
        v168 = 0;
      }
      v170 = *v159;
      *v159 = (unint64_t)v168;
      if (v170)
        WTF::fastFree(v170, v146, v147, v148, v149, v150, v151, v152);
      if (v165)
        WTF::fastFree(v165, v146, v147, v148, v149, v150, v151, v152);
      v171 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 152);
      v172 = *(_QWORD *)(a1 + 200);
      v173 = *(unsigned int *)(a1 + 212);
      *(_QWORD *)(a1 + 200) = 0;
      *(_QWORD *)(a1 + 208) = 0;
      if ((_DWORD)v173)
      {
        v174 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v173) | 8));
        v175 = v174;
        v176 = 0;
        *v174 = v173;
        do
        {
          v177 = &v174[v176 / 4];
          v178 = (_QWORD *)(v172 + v176);
          v179 = *(_QWORD *)(v172 + v176);
          *v178 = 0;
          *((_QWORD *)v177 + 1) = v179;
          v177[4] = *(_DWORD *)(v172 + v176 + 8);
          v176 += 16;
        }
        while (v178 + 2 != (_QWORD *)(v172 + 16 * v173));
        v180 = 0;
        v181 = 16 * v173;
        do
        {
          v182 = *(_QWORD *)(v172 + v180);
          *(_QWORD *)(v172 + v180) = 0;
          if (v182)
            WTF::fastFree(v182, v146, v147, v148, v149, v150, v151, v152);
          v180 += 16;
        }
        while (v181 != v180);
        if (v172)
        {
          WTF::fastFree(v172, v146, v147, v148, v149, v150, v151, v152);
          v172 = 0;
        }
      }
      else
      {
        v175 = 0;
      }
      v183 = *(unsigned int **)(v171 + 8);
      *(_QWORD *)(v171 + 8) = v175;
      if (v183)
      {
        v185 = (unint64_t *)(v183 + 2);
        v184 = *v183;
        if ((_DWORD)v184)
        {
          v186 = 16 * v184;
          do
          {
            v187 = *v185;
            *v185 = 0;
            if (v187)
              WTF::fastFree(v187, v146, v147, v148, v149, v150, v151, v152);
            v185 += 2;
            v186 -= 16;
          }
          while (v186);
        }
        WTF::fastFree((unint64_t)v183, v146, v147, v148, v149, v150, v151, v152);
      }
      if (v172)
        WTF::fastFree(v172, v146, v147, v148, v149, v150, v151, v152);
      v188 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 152);
      v189 = *(_QWORD *)(a1 + 216);
      v190 = *(unsigned int *)(a1 + 228);
      *(_QWORD *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 224) = 0;
      v318 = v11;
      if ((_DWORD)v190)
      {
        v191 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v190 + 8));
        v192 = v191;
        v193 = 0;
        v194 = v189 + 24 * v190;
        *v191 = v190;
        do
        {
          v195 = &v191[v193 / 4];
          v196 = v189 + v193;
          *((_QWORD *)v195 + 1) = 0;
          *((_QWORD *)v195 + 2) = 0;
          *(_QWORD *)((char *)v195 + 21) = 0;
          v197 = *(_QWORD *)(v189 + v193);
          *(_QWORD *)v196 = 0;
          *((_QWORD *)v195 + 1) = v197;
          LODWORD(v197) = *(_DWORD *)(v189 + v193 + 8);
          *(_DWORD *)(v196 + 8) = 0;
          v195[4] = v197;
          LODWORD(v197) = *(_DWORD *)(v189 + v193 + 12);
          *(_DWORD *)(v196 + 12) = 0;
          v195[5] = v197;
          LODWORD(v197) = *(_DWORD *)(v189 + v193 + 16);
          *(_DWORD *)(v196 + 16) = 0;
          v195[6] = v197;
          LOBYTE(v197) = *(_BYTE *)(v189 + v193 + 20);
          *(_BYTE *)(v196 + 20) = 0;
          *((_BYTE *)v195 + 28) = v197;
          v193 += 24;
        }
        while (v196 + 24 != v194);
        v198 = v189;
        do
        {
          v199 = *(_QWORD *)v198;
          if (*(_QWORD *)v198)
          {
            v200 = v188;
            v201 = *(unsigned int *)(v198 + 8);
            if ((_DWORD)v201)
            {
              v202 = *(WTF::StringImpl ***)v198;
              do
              {
                v203 = *v202;
                *v202 = 0;
                if (v203)
                {
                  if (*(_DWORD *)v203 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v203, (WTF::AtomStringImpl *)v146, v147, v148, v149, v150, v151, v152);
                    WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
                  }
                  else
                  {
                    *(_DWORD *)v203 -= 2;
                  }
                }
                v202 += 2;
                --v201;
              }
              while (v201);
            }
            WTF::fastFree(v199, v146, v147, v148, v149, v150, v151, v152);
            v188 = v200;
          }
          v198 += 24;
        }
        while (v198 != v194);
        if (v189)
        {
          WTF::fastFree(v189, v146, v147, v148, v149, v150, v151, v152);
          v189 = 0;
        }
      }
      else
      {
        v192 = 0;
      }
      v212 = *(_DWORD **)(v188 + 16);
      *(_QWORD *)(v188 + 16) = v192;
      if (v212)
      {
        v213 = v212 + 2;
        if (*v212)
        {
          v214 = &v213[6 * *v212];
          do
          {
            v215 = *(_QWORD *)v213;
            if (*(_QWORD *)v213)
            {
              v216 = v213[2];
              if ((_DWORD)v216)
              {
                v217 = *(WTF::StringImpl ***)v213;
                do
                {
                  v218 = *v217;
                  *v217 = 0;
                  if (v218)
                  {
                    if (*(_DWORD *)v218 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v218, (WTF::AtomStringImpl *)v146, v147, v148, v149, v150, v151, v152);
                      WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
                    }
                    else
                    {
                      *(_DWORD *)v218 -= 2;
                    }
                  }
                  v217 += 2;
                  --v216;
                }
                while (v216);
              }
              WTF::fastFree(v215, v146, v147, v148, v149, v150, v151, v152);
            }
            v213 += 6;
          }
          while (v213 != v214);
        }
        WTF::fastFree((unint64_t)v212, v146, v147, v148, v149, v150, v151, v152);
      }
      if (v189)
        WTF::fastFree(v189, v146, v147, v148, v149, v150, v151, v152);
      v227 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 152);
      v228 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = 0;
      v229 = *(_QWORD *)(v227 + 24);
      *(_QWORD *)(v227 + 24) = v228;
      if (v229)
        WTF::fastFree(v229 - 16, v146, v147, v148, v149, v150, v151, v152);
      v230 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 152);
      v231 = *(_QWORD *)(a1 + 240);
      v232 = *(unsigned int *)(a1 + 252);
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 248) = 0;
      if ((_DWORD)v232)
      {
        v233 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v232 + 4));
        v234 = v233;
        v235 = 0;
        *v233 = v232;
        do
        {
          v233[v235 + 1] = *(_DWORD *)(v231 + v235 * 4);
          ++v235;
        }
        while (v232 != v235);
        if (v231)
        {
          WTF::fastFree(v231, v146, v147, v148, v149, v150, v151, v152);
          v231 = 0;
        }
      }
      else
      {
        v234 = 0;
      }
      v236 = *(_QWORD *)(v230 + 32);
      *(_QWORD *)(v230 + 32) = v234;
      if (v236)
        WTF::fastFree(v236, v146, v147, v148, v149, v150, v151, v152);
      if (v231)
        WTF::fastFree(v231, v146, v147, v148, v149, v150, v151, v152);
      v317 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 152);
      v237 = *(_QWORD *)(a1 + 256);
      v238 = *(unsigned int *)(a1 + 268);
      *(_QWORD *)(a1 + 256) = 0;
      *(_QWORD *)(a1 + 264) = 0;
      if ((_DWORD)v238)
      {
        v239 = 8 * v238;
        v240 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v238 + 8));
        v241 = 0;
        *v240 = v238;
        do
        {
          v242 = &v240[v241 / 4];
          v243 = (uint64_t *)(v237 + v241);
          *(_QWORD *)&v240[v241 / 4 + 2] = 0x8000000000000000;
          v244 = *(_QWORD *)(v237 + v241);
          if ((v244 & 0x8000000000000000) == 0 && v244 >= 2)
          {
            v295 = *(_QWORD *)(2 * v244) + 63;
            v296 = v295 & 0xFFFFFFFFFFFFFFC0;
            v316 = WTF::fastMalloc((WTF *)(((v295 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
            *(_QWORD *)v316 = v296;
            v297 = (_QWORD *)(2 * *v243);
            v298 = *v243 >= 0 ? v297 + 1 : (_QWORD *)(v237 + v241);
            v299 = *v243 < 0 ? 8 : (unint64_t)(*v297 + 7) >> 3;
            memcpy((void *)(v316 + 8), v298, v299);
            v244 = v316 >> 1;
            v300 = *((_QWORD *)v242 + 1);
            if (v300 >= 2)
              WTF::fastFree(2 * v300, v146, v147, v148, v149, v150, v151, v152);
          }
          *((_QWORD *)v242 + 1) = v244;
          v241 += 8;
        }
        while (v239 != v241);
        v245 = 0;
        v11 = v318;
        do
        {
          v246 = *(_QWORD *)(v237 + v245);
          if ((v246 & 0x8000000000000000) == 0)
            WTF::fastFree(2 * v246, v146, v147, v148, v149, v150, v151, v152);
          v245 += 8;
        }
        while (v239 != v245);
        if (v237)
        {
          WTF::fastFree(v237, v146, v147, v148, v149, v150, v151, v152);
          v237 = 0;
        }
      }
      else
      {
        v240 = 0;
        v11 = v318;
      }
      v247 = *(unsigned int **)(v317 + 40);
      *(_QWORD *)(v317 + 40) = v240;
      if (v247)
      {
        v248 = WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::BitVector>,WTF::BitVector>::~TrailingArray(v247, v146, v147, v148, v149, v150, v151, v152);
        WTF::fastFree((unint64_t)v248, v249, v250, v251, v252, v253, v254, v255);
      }
      if (v237)
        WTF::fastFree(v237, v146, v147, v148, v149, v150, v151, v152);
      v256 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 152);
      v257 = *(_QWORD *)(a1 + 272);
      v258 = *(unsigned int *)(a1 + 284);
      *(_QWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 280) = 0;
      if ((_DWORD)v258)
      {
        v259 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v258 + 8));
        v260 = v259;
        v261 = 0;
        v262 = (WTF::StringImpl ***)(v257 + 8 * v258);
        *v259 = v258;
        do
        {
          v263 = &v259[v261];
          *((_QWORD *)v263 + 1) = 0;
          v264 = *(_QWORD *)(v257 + v261 * 4);
          *(_QWORD *)(v257 + v261 * 4) = 0;
          *((_QWORD *)v263 + 1) = v264;
          v261 += 2;
        }
        while (2 * v258 != v261);
        v265 = (WTF::StringImpl ***)v257;
        do
        {
          v266 = *v265;
          if (*v265)
          {
            v267 = v256;
            v268 = *((unsigned int *)v266 - 1);
            if ((_DWORD)v268)
            {
              v269 = *v265;
              do
              {
                v270 = *v269;
                if (*v269 != (WTF::StringImpl *)-1)
                {
                  *v269 = 0;
                  if (v270)
                  {
                    if (*(_DWORD *)v270 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v270, (WTF::AtomStringImpl *)v146, v147, v148, v149, v150, v151, v152);
                      WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
                    }
                    else
                    {
                      *(_DWORD *)v270 -= 2;
                    }
                  }
                }
                ++v269;
                --v268;
              }
              while (v268);
            }
            WTF::fastFree((unint64_t)(v266 - 2), v146, v147, v148, v149, v150, v151, v152);
            v11 = v318;
            v256 = v267;
          }
          ++v265;
        }
        while (v265 != v262);
        if (v257)
        {
          WTF::fastFree(v257, v146, v147, v148, v149, v150, v151, v152);
          v257 = 0;
        }
      }
      else
      {
        v260 = 0;
      }
      v279 = *(unsigned int **)(v256 + 48);
      *(_QWORD *)(v256 + 48) = v260;
      if (v279)
      {
        v281 = (WTF::StringImpl ***)(v279 + 2);
        v280 = *v279;
        if ((_DWORD)v280)
        {
          v282 = &v281[v280];
          do
          {
            v283 = *v281;
            if (*v281)
            {
              v284 = *((unsigned int *)v283 - 1);
              if ((_DWORD)v284)
              {
                v285 = *v281;
                do
                {
                  v286 = *v285;
                  if (*v285 != (WTF::StringImpl *)-1)
                  {
                    *v285 = 0;
                    if (v286)
                    {
                      if (*(_DWORD *)v286 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v286, (WTF::AtomStringImpl *)v146, v147, v148, v149, v150, v151, v152);
                        WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
                      }
                      else
                      {
                        *(_DWORD *)v286 -= 2;
                      }
                    }
                  }
                  ++v285;
                  --v284;
                }
                while (v284);
              }
              WTF::fastFree((unint64_t)(v283 - 2), v146, v147, v148, v149, v150, v151, v152);
              v11 = v318;
            }
            ++v281;
          }
          while (v281 != v282);
        }
        WTF::fastFree((unint64_t)v279, v146, v147, v148, v149, v150, v151, v152);
      }
      if (v257)
        WTF::fastFree(v257, v146, v147, v148, v149, v150, v151, v152);
    }
  }
  if (HIBYTE(qword_1ECF4C75C))
  {
    v301 = *(unint64_t **)(a1 + 8);
    if (v301)
      v302 = *v301;
    else
      v302 = 0;
    JSC::UnlinkedCodeBlock::initializeLoopHintExecutionCounter(v302, (uint64_t)v146, v147, v148, v149, v150, v151, v152);
  }
  if (v11)
  {
    while (1)
    {
      v163 = *v12;
      if ((v163 & 0xC0) != 0x40)
        break;
      v164 = __ldxr(v12);
      if (v164 == v163)
      {
        if (!__stxr(v163 & 0xBF, v12))
          goto LABEL_136;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, v147, v148, v149, v150, v151, v152);
  }
LABEL_136:
  v160 = **(_QWORD **)(a1 + 8);
  if (v160 && *(_DWORD *)(*(_QWORD *)a1 + 760) >= *(unsigned __int8 *)(v160 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(*(_QWORD *)a1 + 192, v160);
    v160 = **(_QWORD **)(a1 + 8);
  }
  v161 = *(unsigned int *)(*(_QWORD *)(v160 + 80) + 12);
  v162 = 288;
  if ((*(_BYTE *)(*(_QWORD *)(v160 + 72) + 4) & 8) == 0)
    v162 = 96;
  if ((*(_BYTE *)(*(_QWORD *)(v160 + 72) + 4) & 3) == 2)
    v162 = 0;
  if ((unint64_t)(v162 + v161) >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(*(_QWORD *)a1 + 192, 0, v160, v162 + v161, v149, v150, v151, v152);
}

void JSC::UnlinkedCodeBlockGenerator::applyModification(uint64_t a1, JSC::BytecodeRewriter *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  WTF *v21;
  unint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF *v36;
  unsigned int v38;
  unsigned int v39;
  int v40;
  _BOOL4 v41;
  unsigned int *v42;
  int v43;
  int v44;
  _BOOL4 v45;
  int v46;
  unsigned int *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  _DWORD *v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  WTF *v84;
  uint64_t v85;
  int v86;
  _QWORD v87[3];
  int v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int *v93;
  char v94;
  int v95;

  JSC::BytecodeRewriter::adjustJumpTargets(this, this, a3, a4, a5, a6, a7, a8);
  v17 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    v19 = (unsigned int *)(*(_QWORD *)(a1 + 184) + 4);
    do
    {
      v19[1] = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, 0xFE00000000, v19[1]);
      *(v19 - 1) = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, 0xFE00000000, *(v19 - 1));
      *v19 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, 0xFE00000000, *v19);
      v19 += 4;
      v18 -= 16;
    }
    while (v18);
  }
  v20 = *(unsigned int *)(a1 + 252);
  if ((_DWORD)v20)
  {
    v74 = 0;
    v75 = *(_QWORD *)(a1 + 240);
    do
    {
      if (v74 >= v20)
      {
        __break(0xC471u);
LABEL_87:
        JUMPOUT(0x19821E370);
      }
      *(_DWORD *)(v75 + 4 * v74) = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, 0xFE00000000, *(unsigned int *)(v75 + 4 * v74));
      ++v74;
      v20 = *(unsigned int *)(a1 + 252);
    }
    while (v74 < v20);
  }
  v21 = *(WTF **)(a1 + 232);
  if (v21 && *((_DWORD *)v21 - 3))
  {
    v84 = 0;
    v76 = WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::begin(v21);
    v77 = (_DWORD *)((char *)v21 + 12 * *((unsigned int *)v21 - 1));
    if (v77 == v76)
    {
      *(_QWORD *)(a1 + 232) = 0;
      v84 = v21;
LABEL_79:
      WTF::fastFree((unint64_t)v21 - 16, v10, v11, v12, v13, v14, v15, v16);
      goto LABEL_6;
    }
    v78 = v10;
    v79 = v76;
    do
    {
      v80 = v79 + 3;
      v81 = v79;
      v86 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, 0xFE00000000, *v79);
      WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>(v87, (uint64_t *)&v84, &v86, v81 + 1);
      if (v80 == v78)
      {
LABEL_74:
        v79 = v78;
      }
      else
      {
        v79 = v80;
        while ((*v79 + 1) <= 1)
        {
          v79 += 3;
          if (v79 == v78)
            goto LABEL_74;
        }
      }
    }
    while (v79 != v77);
    v21 = *(WTF **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v84;
    v84 = v21;
    if (v21)
      goto LABEL_79;
  }
LABEL_6:
  v84 = 0;
  v85 = 0;
  v22 = *((unsigned int *)this + 11);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
    do
    {
      v29 = *(_DWORD *)(*((_QWORD *)this + 4) + v23);
      if (v29 != v28)
      {
        v30 = v26;
        if (v26 == v25)
        {
          v32 = v26 + 1;
          v33 = v30 + (v30 >> 2);
          if (v33 >= 0x10)
            v34 = v33 + 1;
          else
            v34 = 16;
          if (v34 <= v32)
            v35 = v30 + 1;
          else
            v35 = v34;
          if (v35 >> 30)
          {
            __break(0xC471u);
            goto LABEL_87;
          }
          v36 = (WTF *)WTF::fastMalloc((WTF *)(4 * v35));
          LODWORD(v85) = v35;
          v84 = v36;
          memcpy(v36, v24, 4 * v30);
          if (v24)
          {
            if (v36 == v24)
            {
              LODWORD(v35) = 0;
              v84 = 0;
              LODWORD(v85) = 0;
            }
            WTF::fastFree((unint64_t)v24, v10, v11, v12, v13, v14, v15, v16);
            v25 = HIDWORD(v85);
            v36 = v84;
          }
          v31 = (int *)((char *)v36 + 4 * v25);
          v24 = v36;
          v25 = v35;
        }
        else
        {
          v31 = (int *)((char *)v24 + 4 * v26);
        }
        *v31 = v29;
        v26 = ++HIDWORD(v85);
        v22 = *((unsigned int *)this + 11);
        v28 = v29;
      }
      ++v27;
      v23 += 48;
    }
    while (v27 < v22);
    if (v26)
    {
      LODWORD(v87[0]) = -1;
      if (v26 == (_DWORD)v85)
      {
        v73 = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, v26 + 1, (unint64_t)v87);
        *((_DWORD *)v84 + HIDWORD(v85)) = *v73;
      }
      else
      {
        *((_DWORD *)v24 + v26) = -1;
      }
      memset(v87, 0, sizeof(v87));
      v88 = 0;
      v82 = *(unsigned int *)(a1 + 172);
      v89 = *(unsigned int **)(a1 + 160);
      v90 = &v89[v82];
      v91 = v90;
      v92 = v89;
      v93 = v89;
      v94 = 0;
      v95 = 0;
      if (__CFADD__(HIDWORD(v85)++, 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19821E398);
      }
      v38 = *(_DWORD *)v84;
      if (JSC::ExpressionInfo::Decoder::decode((uint64_t)v87, 0) != 1)
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (1)
        {
          v42 = v92;
          v43 = *v92 >> 27 == 31 && (*v92 & 0x4000000) == 0;
          v44 = HIDWORD(v87[0]);
          v45 = HIDWORD(v87[0]) >= v38;
          if (HIDWORD(v87[0]) >= v38)
            break;
          if (((v41 | v43) & 1) != 0)
            goto LABEL_38;
LABEL_50:
          v52 = JSC::ExpressionInfo::Decoder::decode((uint64_t)v87, 0);
          v41 = v45;
          if (v52 == 1)
            goto LABEL_51;
        }
        if (HIDWORD(v85) <= ++v39)
        {
          __break(0xC471u);
          JUMPOUT(0x19821E378);
        }
        v38 = *((_DWORD *)v84 + v39);
LABEL_38:
        if (v43)
          v46 = 0;
        else
          v46 = v40;
        v40 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, 0xFE00000000, HIDWORD(v87[0])) - v44;
        if (((v40 == v46) & ~v43) != 0)
        {
          v40 = v46;
        }
        else
        {
          JSC::ExpressionInfo::Encoder::adjustInstPC(a1 + 112, v42, v40 - v46);
          v47 = *(unsigned int **)(a1 + 160);
          v48 = *(unsigned int *)(a1 + 172);
          if (v90 != &v47[v48])
          {
            v49 = v92 - v89;
            if (v49 >= v48)
            {
              __break(0xC471u);
              JUMPOUT(0x19821E380);
            }
            v92 = &v47[v49];
            v50 = v93 - v89;
            if (v50 >= v48)
            {
              __break(0xC471u);
              JUMPOUT(0x19821E388);
            }
            v93 = &v47[v50];
            v51 = v90 - v89;
            if (v51 >= v48)
            {
              __break(0xC471u);
              JUMPOUT(0x19821E390);
            }
            v89 = v47;
            v90 = &v47[v51];
            v91 = &v47[v48];
          }
        }
        goto LABEL_50;
      }
LABEL_51:
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a1 + 172) - v82;
      v53 = *(unsigned int *)(a1 + 156);
      if ((_DWORD)v53)
      {
        v54 = *(_DWORD **)(a1 + 144);
        v55 = 8 * v53;
        do
        {
          *v54 = JSC::BytecodeRewriter::adjustJumpTarget((uint64_t)this, 0xFE00000000, *v54);
          v54 += 2;
          v55 -= 8;
        }
        while (v55);
      }
    }
  }
  JSC::BytecodeRewriter::applyModification((unsigned int *)this, v10, v11, v12, v13, v14, v15, v16);
  v63 = (unint64_t *)(a1 + 16);
  if (*(_DWORD *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 28))
      *(_DWORD *)(a1 + 28) = 0;
    v64 = *v63;
    if (*v63)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v64, v56, v57, v58, v59, v60, v61, v62);
    }
  }
  JSC::computePreciseJumpTargetsInternal<(JSC::ComputePreciseJumpTargetsMode)1,JSC::UnlinkedCodeBlockGenerator,0ul>(a1, a3, (_DWORD *)(a1 + 16));
  v72 = v84;
  if (v84)
  {
    v84 = 0;
    LODWORD(v85) = 0;
    WTF::fastFree((unint64_t)v72, v65, v66, v67, v68, v69, v70, v71);
  }
}

_DWORD *WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::begin(_DWORD *result)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[3 * v2];
  if (!*(result - 3))
    return &result[3 * v2];
  if ((_DWORD)v2)
  {
    v4 = 12 * v2;
    while ((*result + 1) <= 1)
    {
      result += 3;
      v4 -= 12;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(JSC::UnlinkedCodeBlockGenerator *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;

  v10 = a3;
  v11 = a2;
  if (a3)
    return (uint64_t)WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)this + 22, &v11, &v10, a4, a5, a6, a7, a8, (uint64_t)&v9);
  result = 152;
  __break(0xC471u);
  return result;
}

uint64_t JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(JSC::UnlinkedCodeBlockGenerator *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v9;

  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    v6 = v3 & (v5 ^ HIWORD(v5));
    v7 = *(_DWORD *)(v2 + 8 * v6);
    if (v7 == a2)
      return *(unsigned int *)(v2 + 8 * v6 + 4);
    v9 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v9) & v3;
      v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v9;
      if (v7 == a2)
        return *(unsigned int *)(v2 + 8 * v6 + 4);
    }
  }
  return 0;
}

void JSC::AdaptiveValueStructureStubClearingWatchpoint::~AdaptiveValueStructureStubClearingWatchpoint(JSC::AdaptiveValueStructureStubClearingWatchpoint *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *i;
  uint64_t *v18;
  uint64_t v19;

  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v16 = (uint64_t **)(v9 + 8);
      for (i = *(uint64_t **)(v9 + 8); i != (uint64_t *)v16; i = *v16)
      {
        v19 = *i;
        v18 = (uint64_t *)i[1];
        *v18 = *i;
        *(_QWORD *)(v19 + 8) = v18;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)this = off_1E3580B60;
  v12 = (_QWORD *)*((_QWORD *)this + 8);
  if (v12)
  {
    v13 = *((_QWORD *)this + 7);
    *v12 = v13;
    *(_QWORD *)(v13 + 8) = v12;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  v14 = (_QWORD *)*((_QWORD *)this + 5);
  if (v14)
  {
    v15 = *((_QWORD *)this + 4);
    *v14 = v15;
    *(_QWORD *)(v15 + 8) = v14;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
}

{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *i;
  uint64_t *v18;
  uint64_t v19;

  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v16 = (uint64_t **)(v9 + 8);
      for (i = *(uint64_t **)(v9 + 8); i != (uint64_t *)v16; i = *v16)
      {
        v19 = *i;
        v18 = (uint64_t *)i[1];
        *v18 = *i;
        *(_QWORD *)(v19 + 8) = v18;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_QWORD *)this = off_1E3580B60;
  v12 = (_QWORD *)*((_QWORD *)this + 8);
  if (v12)
  {
    v13 = *((_QWORD *)this + 7);
    *v12 = v13;
    *(_QWORD *)(v13 + 8) = v12;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  v14 = (_QWORD *)*((_QWORD *)this + 5);
  if (v14)
  {
    v15 = *((_QWORD *)this + 4);
    *v14 = v15;
    *(_QWORD *)(v15 + 8) = v14;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF6VectorIN3JSC11StructureIDELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENSA_INS_5tupleIJSC_NSB_19CacheableIdentifierEEEELm0ESD_Lm16ESE_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SF_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF6VectorIN3JSC11StructureIDELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENSA_INS_5tupleIJSC_NSB_19CacheableIdentifierEEEELm0ESD_Lm16ESE_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SF_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::InlineCacheCompiler::~InlineCacheCompiler(JSC::InlineCacheCompiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;
  JSC::InlineCacheCompiler *v11;
  JSC::InlineCacheCompiler *v13;
  JSC::InlineCacheCompiler *v15;
  JSC::InlineCacheCompiler *v17;
  JSC::InlineCacheCompiler *v18;
  JSC::InlineCacheCompiler *v19;
  JSC::CallLinkInfo **v20;
  uint64_t v21;
  JSC::CallLinkInfo *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = *((unsigned int *)this + 457);
  if ((_DWORD)v10)
  {
    v20 = (JSC::CallLinkInfo **)*((_QWORD *)this + 227);
    v21 = 8 * v10;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        JSC::CallLinkInfo::~CallLinkInfo(v22, a2, a3, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  v11 = (JSC::InlineCacheCompiler *)*((_QWORD *)this + 227);
  if ((JSC::InlineCacheCompiler *)((char *)this + 1832) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 227) = 0;
    *((_DWORD *)this + 456) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (JSC::InlineCacheCompiler *)*((_QWORD *)this + 33);
  if ((JSC::InlineCacheCompiler *)((char *)this + 280) != v13 && v13 != 0)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = (JSC::InlineCacheCompiler *)*((_QWORD *)this + 29);
  if ((JSC::InlineCacheCompiler *)((char *)this + 248) != v15 && v15 != 0)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = (JSC::InlineCacheCompiler *)*((_QWORD *)this + 16);
  if ((JSC::InlineCacheCompiler *)((char *)this + 144) != v17 && v17)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = (JSC::InlineCacheCompiler *)*((_QWORD *)this + 11);
  if ((JSC::InlineCacheCompiler *)((char *)this + 104) != v18 && v18)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = (JSC::InlineCacheCompiler *)*((_QWORD *)this + 6);
  if ((JSC::InlineCacheCompiler *)((char *)this + 64) != v19)
  {
    if (v19)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::StructureStubInfo::clearBufferedStructures(void)::{lambda(std::monostate)#1},JSC::StructureStubInfo::clearBufferedStructures(void)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},JSC::StructureStubInfo::clearBufferedStructures(void)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::StructureStubInfo::clearBufferedStructures(void)::{lambda(std::monostate)#1},JSC::StructureStubInfo::clearBufferedStructures(void)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},JSC::StructureStubInfo::clearBufferedStructures(void)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = 0;
}

void JSC::UnlinkedCodeBlock::RareData::~RareData(JSC::UnlinkedCodeBlock::RareData *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  WTF::StringImpl ***v11;
  unsigned int *v12;
  unsigned int *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    v11 = (WTF::StringImpl ***)(v9 + 2);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v44 = &v11[v10];
      do
      {
        v45 = *v11;
        if (*v11)
        {
          v46 = *((unsigned int *)v45 - 1);
          if ((_DWORD)v46)
          {
            v47 = *v11;
            do
            {
              v48 = *v47;
              if (*v47 != (WTF::StringImpl *)-1)
              {
                *v47 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v48, a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
                  }
                  else
                  {
                    *(_DWORD *)v48 -= 2;
                  }
                }
              }
              ++v47;
              --v46;
            }
            while (v46);
          }
          WTF::fastFree((unint64_t)(v45 - 2), a2, a3, a4, a5, a6, a7, a8);
        }
        ++v11;
      }
      while (v11 != v44);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    v13 = WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::BitVector>,WTF::BitVector>::~TrailingArray(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v21 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v21)
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  v22 = *((_QWORD *)this + 3);
  if (v22)
    WTF::fastFree(v22 - 16, a2, a3, a4, a5, a6, a7, a8);
  v23 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v23)
  {
    v24 = v23 + 2;
    if (*v23)
    {
      v25 = &v24[6 * *v23];
      do
      {
        v26 = *(_QWORD *)v24;
        if (*(_QWORD *)v24)
        {
          v27 = v24[2];
          if ((_DWORD)v27)
          {
            v28 = *(WTF::StringImpl ***)v24;
            do
            {
              v29 = *v28;
              *v28 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                {
                  WTF::StringImpl::~StringImpl(v29, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
                }
                else
                {
                  *(_DWORD *)v29 -= 2;
                }
              }
              v28 += 2;
              --v27;
            }
            while (v27);
          }
          WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
        }
        v24 += 6;
      }
      while (v24 != v25);
    }
    WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v38)
  {
    v40 = (unint64_t *)(v38 + 2);
    v39 = *v38;
    if ((_DWORD)v39)
    {
      v41 = 16 * v39;
      do
      {
        v42 = *v40;
        *v40 = 0;
        if (v42)
          WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
        v40 += 2;
        v41 -= 16;
      }
      while (v41);
    }
    WTF::fastFree((unint64_t)v38, a2, a3, a4, a5, a6, a7, a8);
  }
  v43 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v43)
    WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::BitVector>,WTF::BitVector>::~TrailingArray(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v10 = a1 + 2;
  v9 = *a1;
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    do
    {
      if ((*v10 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * *v10, a2, a3, a4, a5, a6, a7, a8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  return a1;
}

void WTF::RefCounted<JSC::InlineCacheHandler>::deref(JSC::InlineCacheHandler *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)a1 == 1)
  {
    JSC::InlineCacheHandler::~InlineCacheHandler(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    --*(_DWORD *)a1;
  }
}

uint64_t WTF::dataLog<char [32],int,char [6],WTF::RawPointer,char [2],char [2]>(_DWORD *a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Clearing structure cache (kind ");
  WTF::PrintStream::printf(v6, "%d", *a1);
  WTF::PrintStream::printf(v6, "%s", ") in ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", ".");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

_QWORD **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void JSC::StructureStubInfo::visitAggregateImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(std::monostate)#1},void JSC::StructureStubInfo::visitAggregateImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void JSC::StructureStubInfo::visitAggregateImpl<JSC::AbstractSlotVisitor>(JSC::AbstractSlotVisitor &)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(_QWORD **result, unsigned int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = a2[3];
  if ((_DWORD)v2)
  {
    v3 = *result;
    v4 = 16 * v2;
    v5 = (uint64_t *)(*(_QWORD *)a2 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      v7 = v6 & 1;
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 0;
      if (v8)
        result = (_QWORD **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
      v4 -= 16;
    }
    while (v4);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void JSC::StructureStubInfo::visitAggregateImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(std::monostate)#1},void JSC::StructureStubInfo::visitAggregateImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1},void JSC::StructureStubInfo::visitAggregateImpl<JSC::SlotVisitor>(JSC::SlotVisitor &)::{lambda(WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<std::tuple<JSC::StructureID,JSC::CacheableIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v9 = *a1;
    v10 = 16 * v8;
    v11 = (unint64_t *)(*(_QWORD *)a2 + 8);
    do
    {
      v13 = *v11;
      v11 += 2;
      v12 = v13;
      v14 = v13 & 1;
      if (v13)
        v15 = v14 == 0;
      else
        v15 = 0;
      if (!v15)
        goto LABEL_7;
      v16 = *v9;
      if ((v12 & 8) != 0)
      {
        if ((*(_BYTE *)(v12 - 79) & 1) != 0 && !*(_QWORD *)(v16 + 168))
          goto LABEL_7;
      }
      else
      {
        v17 = v12 & 0xFFFFFFFFFFFFC000;
        v18 = *(_DWORD *)(v16 + 132);
        if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        {
          v20 = v12;
          v21 = *v9;
          v19 = v12 & 0xFFFFFFFFFFFFC000;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v18, a3, a4, a5, a6, a7, a8);
          v17 = v19;
          v12 = v20;
          v16 = v21;
        }
        if (((*(_QWORD *)(v17 + 8 * ((v12 >> 10) & 0xF) + 40) >> (v12 >> 4)) & 1) != 0 && !*(_QWORD *)(v16 + 168))
          goto LABEL_7;
      }
      JSC::SlotVisitor::appendSlow(v16, v12, 0, a4, a5, a6, a7, a8);
LABEL_7:
      v10 -= 16;
    }
    while (v10);
  }
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::StructureStubInfo::visitWeakReferences(JSC::ConcurrentJSLockerBase const&,JSC::CodeBlock *)::$_0,JSC::StructureStubInfo::visitWeakReferences(JSC::ConcurrentJSLockerBase const&,JSC::CodeBlock *)::$_1,JSC::StructureStubInfo::visitWeakReferences(JSC::ConcurrentJSLockerBase const&,JSC::CodeBlock *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::monostate<std::tuple<WTF::Vector,JSC::CacheableIdentifier>,0ul,JSC::StructureID,16ul,WTF::CrashOnOverflow>> &>(uint64_t **result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  int v21;

  v2 = *a2;
  v3 = *((unsigned int *)a2 + 3);
  v4 = &(*a2)[v3];
  if ((_DWORD)v3)
  {
    LODWORD(v3) = 0;
    v5 = **result;
    v6 = v4;
    v7 = v4;
    while (1)
    {
      v8 = *v2;
      if (*(_DWORD *)(((unint64_t)(v8 >> 10) << 14) | 0x20) != *(_DWORD *)(v5 + 432))
        goto LABEL_8;
      v9 = 16 * v8;
      v10 = v9 & 0xFFFFFC000;
      v11 = ((v9 & 0xFFFFFFFE0) - (v9 & 0xFFFFFC000uLL)) >> 4;
      if ((v11 & 0xFFFFFFFE) >= 0x400)
      {
        __break(1u);
        goto LABEL_27;
      }
      if (((*(_QWORD *)(v10 + (((unint64_t)(v11 & 0xFFFFFFFE) >> 3) & 0x1FFFFFF8) + 40) >> (v11 & 0x3E)) & 1) == 0)
      {
LABEL_8:
        v12 = v2;
        if (v6 != &(*a2)[*((unsigned int *)a2 + 3)])
        {
          if (v7 == v2)
          {
            v12 = v6;
          }
          else
          {
            if (v7 <= v6)
            {
              v17 = 0;
              v16 = v2 - v7;
              do
              {
                *(unsigned int *)((char *)v6 + (((char *)v2 - (char *)v7) & 0xFFFFFFFFFFFFFFFCLL) + v17 * 4 - 4) = v2[v17 - 1];
                --v17;
              }
              while (&v2[v17] != v7);
            }
            else
            {
              v13 = v6;
              v14 = v7;
              do
              {
                v15 = *v14++;
                *v13++ = v15;
              }
              while (v14 != v2);
              v16 = v2 - v7;
            }
            v12 = &v6[v16];
          }
        }
        v7 = v2 + 1;
        LODWORD(v3) = v3 + 1;
        v6 = v12;
      }
      if (++v2 >= v4)
      {
        v2 = *a2;
        v18 = *((unsigned int *)a2 + 3);
        v4 = v7;
        goto LABEL_21;
      }
    }
  }
  v18 = 0;
  v6 = &(*a2)[v3];
LABEL_21:
  v2 += v18;
  if (v4 != v2)
  {
    if (v4 <= v6)
    {
LABEL_27:
      v20 = (unsigned int *)((char *)v6 + (((char *)v2 - (char *)v4) & 0xFFFFFFFFFFFFFFFCLL) - 4);
      do
      {
        v21 = *--v2;
        *v20-- = v21;
      }
      while (v2 != v4);
    }
    else
    {
      do
      {
        v19 = *v4++;
        *v6++ = v19;
      }
      while (v4 != v2);
    }
  }
  *((_DWORD *)a2 + 3) -= v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::StructureStubInfo::visitWeakReferences(JSC::ConcurrentJSLockerBase const&,JSC::CodeBlock *)::$_0,JSC::StructureStubInfo::visitWeakReferences(JSC::ConcurrentJSLockerBase const&,JSC::CodeBlock *)::$_1,JSC::StructureStubInfo::visitWeakReferences(JSC::ConcurrentJSLockerBase const&,JSC::CodeBlock *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WTF::Vector<JSC::StructureID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,std::monostate<std::tuple<WTF::Vector,JSC::CacheableIdentifier>,0ul,JSC::StructureID,16ul,WTF::CrashOnOverflow>> &>(uint64_t result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  __int128 v17;
  char *v18;

  v2 = *a2;
  v3 = *((unsigned int *)a2 + 3);
  v4 = (char *)&(*a2)[4 * v3];
  if ((_DWORD)v3)
  {
    LODWORD(v3) = 0;
    v5 = *(_QWORD *)(*(_QWORD *)result + 8);
    v6 = v4;
    v7 = v4;
    do
    {
      v8 = *v2;
      if (*(_DWORD *)(((unint64_t)(v8 >> 10) << 14) | 0x20) != *(_DWORD *)(v5 + 432)
        || ((*(_QWORD *)(((16 * v8) & 0xFFFFFC000)
                       + 8 * (((unint64_t)(v8 & 0xFFFFFFFE) >> 6) & 0xF)
                       + 0x28) >> (v8 & 0x3E)) & 1) == 0)
      {
        v9 = (char *)v2;
        if (v7 != (char *)&(*a2)[4 * *((unsigned int *)a2 + 3)])
        {
          if (v6 == (char *)v2)
          {
            v9 = v7;
          }
          else
          {
            if (v6 <= v7)
            {
              v14 = 0;
              v13 = ((char *)v2 - v6) >> 4;
              do
              {
                *(_OWORD *)&v7[(((char *)v2 - v6) & 0xFFFFFFFFFFFFFFF0) - 16 + v14 * 4] = *(_OWORD *)&v2[v14 - 4];
                v14 -= 4;
              }
              while (&v2[v14] != (unsigned int *)v6);
            }
            else
            {
              v10 = v7;
              v11 = (unsigned int *)v6;
              do
              {
                v12 = *(_OWORD *)v11;
                v11 += 4;
                *(_OWORD *)v10 = v12;
                v10 += 16;
              }
              while (v11 != v2);
              v13 = ((char *)v2 - v6) >> 4;
            }
            v9 = &v7[16 * v13];
          }
        }
        v6 = (char *)(v2 + 4);
        LODWORD(v3) = v3 + 1;
        v7 = v9;
      }
      v2 += 4;
    }
    while (v2 < (unsigned int *)v4);
    v2 = *a2;
    v15 = *((unsigned int *)a2 + 3);
    v4 = v7;
  }
  else
  {
    v15 = 0;
    v6 = (char *)&(*a2)[4 * v3];
  }
  v16 = &v2[4 * v15];
  if (v6 != (char *)v16)
  {
    if (v6 <= v4)
    {
      v18 = &v4[(((char *)v16 - v6) & 0xFFFFFFFFFFFFFFF0) - 16];
      do
      {
        *(_OWORD *)v18 = *((_OWORD *)v16 - 1);
        v18 -= 16;
        v16 -= 4;
      }
      while (v16 != (unsigned int *)v6);
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)v6;
        v6 += 16;
        *(_OWORD *)v4 = v17;
        v4 += 16;
      }
      while (v6 != (char *)v16);
    }
  }
  *((_DWORD *)a2 + 3) -= v3;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::initializeSuperSampler(void)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int8 v9;
  unsigned int v11;
  int v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v22;
  BOOL v23;
  int v25;
  unsigned int v26;
  uint64_t result;
  __int16 v28;
  double v29;
  int v30;
  char *v31;
  __int16 *v32;
  _QWORD v33[3];
  double v34[3];

  v8 = 0;
  while (1)
  {
    v9 = atomic_load((unsigned __int8 *)&JSC::g_superSamplerEnabled);
    if ((v9 & 1) == 0)
      goto LABEL_12;
    if (__ldaxr((unsigned __int8 *)&JSC::lock))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&JSC::lock))
    {
      goto LABEL_7;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
LABEL_7:
    v11 = atomic_load((unsigned int *)&g_superSamplerCount);
    *(double *)&_MergedGlobals_31[v11 == 0] = *(double *)&_MergedGlobals_31[v11 == 0] + 1.0;
    v12 = __ldxr((unsigned __int8 *)&JSC::lock);
    if (v12 != 1)
    {
      __clrex();
LABEL_11:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_12;
    }
    if (__stlxr(0, (unsigned __int8 *)&JSC::lock))
      goto LABEL_11;
LABEL_12:
    v28 = 0;
    if (__ldaxr((unsigned __int8 *)&v28 + 1))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&v28 + 1))
    {
      goto LABEL_16;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v28 + 1);
LABEL_16:
    v14 = mach_absolute_time();
    v16 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v16 != -1)
    {
      *(_QWORD *)&v34[0] = &v29;
      v33[0] = v34;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v15) = dword_1ECF4400C;
    v29 = (double)(v14 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v15 * 1000000000.0) + 0.003;
    v30 = 1;
    v17 = mach_absolute_time();
    v19 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v19 != -1)
    {
      *(_QWORD *)&v34[0] = &v32;
      v33[0] = v34;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    if (v30 != 1)
      break;
    LODWORD(v18) = dword_1ECF4400C;
    if (v29 >= (double)(v17 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v18 * 1000000000.0))
    {
      v31 = (char *)&v28 + 1;
      v32 = &v28;
      *(_QWORD *)&v34[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      *(_QWORD *)&v34[1] = v34;
      *(_QWORD *)&v34[2] = &v32;
      v33[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v33[1] = v33;
      v33[2] = &v31;
      WTF::ParkingLot::parkConditionallyImpl((uint64_t)&v28, (uint64_t)v34, (uint64_t)v33, (WTF::TimeWithDynamicClockType *)&v29);
      goto LABEL_28;
    }
    v20 = __ldxr((unsigned __int8 *)&v28 + 1);
    if (v20 != 1)
    {
      __clrex();
LABEL_27:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v28 + 1, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_28;
    }
    if (__stlxr(0, (unsigned __int8 *)&v28 + 1))
      goto LABEL_27;
LABEL_28:
    if (__ldaxr((unsigned __int8 *)&v28 + 1))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&v28 + 1))
    {
      goto LABEL_32;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v28 + 1);
LABEL_32:
    v22 = __ldxr((unsigned __int8 *)&v28 + 1);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&v28 + 1))
        goto LABEL_37;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v28 + 1, 0, a3, a4, a5, a6, a7, a8);
LABEL_37:
    v23 = v8 >= 0xBB5;
    v8 += 3;
    if (v23)
    {
      if (!byte_1ECF4C6C2)
        goto LABEL_49;
      if (__ldaxr((unsigned __int8 *)&JSC::lock))
      {
        __clrex();
LABEL_43:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
        goto LABEL_44;
      }
      if (__stxr(1u, (unsigned __int8 *)&JSC::lock))
        goto LABEL_43;
LABEL_44:
      v34[0] = *(double *)_MergedGlobals_31 * 100.0 / (*(double *)_MergedGlobals_31 + unk_1ECF58660);
      WTF::dataLog<char [41],double,char [3]>(v34);
      v25 = __ldxr((unsigned __int8 *)&JSC::lock);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)&JSC::lock))
          goto LABEL_49;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, a3, a4, a5, a6, a7, a8);
LABEL_49:
      v8 = 0;
      v26 = atomic_load((unsigned int *)&g_superSamplerCount);
      if ((v26 & 0x80000000) != 0)
      {
        WTF::dataLog<char [16]>("WARNING: Super sampler undercount detected!\n");
        v8 = 0;
      }
    }
  }
  result = 109;
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (uint64_t *)(v8 + 12 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v8 + 12 * v26;
        *(_BYTE *)(a4 + 16) = 0;
        *(uint64_t *)((char *)v15 + 4) = *a3;
        return result;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (uint64_t *)(v8 + 12 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15);
    if (v17)
    {
      *(_DWORD *)v17 = 0;
      *(uint64_t *)((char *)v17 + 4) = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  *(uint64_t *)((char *)v15 + 4) = *a3;
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_19;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_25:
      result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v6, v25, v15);
      v15 = result;
      v21 = *v6;
      if (*v6)
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      else
        LODWORD(v24) = 0;
      goto LABEL_27;
    }
LABEL_19:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_25;
  }
LABEL_27:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v21 + 12 * v24;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(12 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 12 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (_DWORD *)(v6 + 12 * v19);
      if ((*v21 + 1) >= 2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 8);
        else
          v23 = 0;
        v24 = 0;
        v25 = 9 * ((*v21 + ~(*v21 << 15)) ^ ((*v21 + ~(*v21 << 15)) >> 10));
        v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
        v27 = v26 ^ HIWORD(v26);
        do
        {
          v28 = v27 & v23;
          v29 = (_DWORD *)(v22 + 12 * v28);
          v27 = ++v24 + v28;
        }
        while (*v29);
        v30 = *(_QWORD *)v21;
        v29[2] = v21[2];
        *(_QWORD *)v29 = v30;
        if (v21 == a3)
          v20 = v29;
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

_DWORD *WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::inlineSet<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange&>(_DWORD *result, uint64_t *a2, int *a3, _QWORD *a4)
{
  _DWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_DWORD *)(v8 + 12 * v14);
  v16 = *v15;
  if (*v15)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v26 = 0;
        else
          v26 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)v7 = v15;
        *((_QWORD *)v7 + 1) = v8 + 12 * v26;
        *((_BYTE *)v7 + 16) = 0;
        *(_QWORD *)(v15 + 1) = *a4;
        return result;
      }
      if (v16 == -1)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (_DWORD *)(v8 + 12 * v14);
      v16 = *v15;
      ++v18;
    }
    while (*v15);
    if (v17)
    {
      *v17 = 0;
      *(_QWORD *)(v17 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *v15 = v11;
  *(_QWORD *)(v15 + 1) = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_19;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_25:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::UnlinkedCodeBlock::RareData::TypeProfilerExpressionRange>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a2, v25, v15);
      v15 = result;
      v21 = *a2;
      if (*a2)
        LODWORD(v24) = *(_DWORD *)(v21 - 4);
      else
        LODWORD(v24) = 0;
      goto LABEL_27;
    }
LABEL_19:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_25;
  }
LABEL_27:
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v21 + 12 * v24;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

uint64_t *WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v15;
  v20 = (uint64_t *)(v13 + 8 * v19);
  v21 = *(_DWORD *)v20;
  if (*(_DWORD *)v20)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      if (v21 == v16)
      {
        if ((v14 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v13 - 4);
        *(_QWORD *)a9 = v20;
        *(_QWORD *)(a9 + 8) = v13 + 8 * v31;
        *(_BYTE *)(a9 + 16) = 0;
        *((_DWORD *)v20 + 1) = *a3;
        return result;
      }
      if (v21 == -1)
        v28 = v20;
      v19 = (v19 + v29) & v15;
      v20 = (uint64_t *)(v13 + 8 * v19);
      v21 = *(_DWORD *)v20;
      ++v29;
    }
    while (*(_DWORD *)v20);
    if (v28)
    {
      *v28 = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v20 = v28;
    }
  }
  *(_DWORD *)v20 = v16;
  *((_DWORD *)v20 + 1) = *a3;
  v22 = *v11;
  if (*v11)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v11;
  if (*v11)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_11;
    goto LABEL_22;
  }
  if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v30 = 8;
LABEL_25:
      result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v11, v30, (uint64_t)v20, a4, a5, a6, a7, a8);
      v20 = result;
      v24 = *v11;
      if (*v11)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_11;
    }
LABEL_22:
    v30 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
    goto LABEL_25;
  }
LABEL_11:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v24 + 8 * v27;
  *(_BYTE *)(a9 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,int>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_DWORD *)(v11 + 8 * v22);
      if ((*v24 + 1) >= 2)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = 0;
        v28 = 9 * ((*v24 + ~(*v24 << 15)) ^ ((*v24 + ~(*v24 << 15)) >> 10));
        v29 = ((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) >> 16);
        do
        {
          v30 = v29 & v26;
          v29 = ++v27 + v30;
        }
        while (*(_DWORD *)(v25 + 8 * v30));
        v31 = (_QWORD *)(v25 + 8 * v30);
        *v31 = *(_QWORD *)v24;
        if (v24 == (_DWORD *)a3)
          v23 = v31;
      }
      ++v22;
    }
    while (v22 != v12);
    goto LABEL_13;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_13:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

void JSC::UnlinkedEvalCodeBlock::destroy(JSC::UnlinkedEvalCodeBlock *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v9)
  {
    v11 = (WTF::StringImpl **)(v9 + 2);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = (unsigned int *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v22)
  {
    v24 = (WTF::StringImpl **)(v22 + 2);
    v23 = *v22;
    if ((_DWORD)v23)
    {
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::UnlinkedCodeBlock::~UnlinkedCodeBlock((unint64_t)this, (unsigned __int8 *)a2, a3, a4, a5, a6, a7, a8);
}

void JSC::UnlinkedFunctionExecutable::destroy(JSC::UnlinkedFunctionExecutable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::UnlinkedFunctionExecutable::RareData *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Decoder *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if ((*((_QWORD *)this + 4) & 0x8000000000000000) != 0)
  {
    v36 = (JSC::Decoder *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
      {
        JSC::Decoder::~Decoder(v36);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      else
      {
        --*(_DWORD *)v36;
      }
    }
  }
  v9 = (JSC::UnlinkedFunctionExecutable::RareData *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
  {
    JSC::UnlinkedFunctionExecutable::RareData::~RareData(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
}

void JSC::UnlinkedFunctionExecutable::visitChildren(JSC::UnlinkedFunctionExecutable *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    a3 = 0;
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  if ((_BYTE)word_1ECF4C758)
    v12 = 1;
  else
    v12 = BYTE1(dword_1ECF4C240) == 0;
  v13 = !v12 && BYTE1(dword_1ECF4C723) == 0;
  if (!v13 && (*((_QWORD *)this + 1) & 0x80000000) == 0)
  {
    JSC::UnlinkedFunctionExecutable::visitChildrenImpl<JSC::SlotVisitor>(JSC::JSCell *,JSC::SlotVisitor &)::{lambda(JSC::WriteBarrier<JSC::UnlinkedFunctionCodeBlock,WTF::RawPtrTraits<JSC::UnlinkedFunctionCodeBlock>> &)#1}::operator()((uint64_t)a2, *((_QWORD *)this + 7), (uint64_t)a3, a4, a5, a6, a7, a8);
    JSC::UnlinkedFunctionExecutable::visitChildrenImpl<JSC::SlotVisitor>(JSC::JSCell *,JSC::SlotVisitor &)::{lambda(JSC::WriteBarrier<JSC::UnlinkedFunctionCodeBlock,WTF::RawPtrTraits<JSC::UnlinkedFunctionCodeBlock>> &)#1}::operator()((uint64_t)a2, *((_QWORD *)this + 8), v18, v19, v20, v21, v22, v23);
    return;
  }
  if ((*((_QWORD *)this + 4) & 0x8000000000000000) == 0)
  {
    v14 = *((_QWORD *)this + 7);
    if (!v14)
      goto LABEL_21;
    if ((v14 & 8) != 0)
    {
      if ((*(_BYTE *)(v14 - 79) & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      v15 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v15, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) != 0)
      {
LABEL_20:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_21;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v14, 0, a4, a5, a6, a7, a8);
LABEL_21:
    v16 = *((_QWORD *)this + 8);
    if (!v16)
      return;
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_34;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_34;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_34:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::UnlinkedFunctionExecutable::visitChildren(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  _QWORD *v12;
  char v13;

  v8[0] = a2;
  v8[1] = a1;
  v10 = 0;
  v4 = a2[11];
  v9 = v4;
  if (!v4 || !*(_BYTE *)(v4 + 24))
  {
    v11[0] = a2;
    v11[1] = a1;
    v13 = 0;
    v12 = v8;
    a2[11] = v11;
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, 16 * (*(_DWORD *)a1 & 0xFFFFFFFE));
    *(_QWORD *)(v11[0] + 88) = v12;
    if (!(_BYTE)word_1ECF4C758 && BYTE1(dword_1ECF4C240) && !BYTE1(dword_1ECF4C723)
      || (*(_QWORD *)(a1 + 8) & 0x80000000) != 0)
    {
      if ((*(_QWORD *)(a1 + 32) & 0x8000000000000000) != 0)
      {
LABEL_9:
        *(_QWORD *)(v8[0] + 88) = v9;
        return result;
      }
      (*(void (**)(_QWORD *, _QWORD))(*a2 + 24))(a2, *(_QWORD *)(a1 + 56));
      v6 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 56);
      if (v7
        && ((*(_BYTE *)(*(_QWORD *)(v7 + 72) + 4) & 0x30) == 0x10
         || (~(*(unsigned __int16 *)(v7 + 28) | (*(unsigned __int8 *)(v7 + 30) << 16)) & 0x1C000) != 0))
      {
        result = (*(uint64_t (**)(_QWORD *))(*a2 + 24))(a2);
      }
      v6 = *(_QWORD *)(a1 + 64);
      if (!v6
        || (*(_BYTE *)(*(_QWORD *)(v6 + 72) + 4) & 0x30) != 0x10
        && (~(*(unsigned __int16 *)(v6 + 28) | (*(unsigned __int8 *)(v6 + 30) << 16)) & 0x1C000) == 0)
      {
        goto LABEL_9;
      }
    }
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v6);
    goto LABEL_9;
  }
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t JSC::UnlinkedFunctionExecutable::UnlinkedFunctionExecutable(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t *a10, uint64_t a11, uint64_t *a12, char a13, char a14, unsigned int a15, char a16)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF::AtomStringImpl *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v48;
  JSC::TDZEnvironmentLink *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  JSC::UnlinkedFunctionExecutable::RareData *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  WTF::StringImpl **v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v18 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v18;
  v20 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_WORD *)(a1 + 48);
  v23 = *(unsigned int *)(a1 + 20);
  v24 = (*(_DWORD *)(a5 + 16) + ~*(_DWORD *)(a4 + 16)) & 0x7FFFFFFF | ((unint64_t)*(unsigned int *)(a1 + 12) << 32);
  *(_QWORD *)(a1 + 8) = v24;
  v25 = (unint64_t)((*(_DWORD *)(a5 + 136) - *(_DWORD *)(a5 + 16)) & 0x7FFFFFFF) << 32;
  v26 = v24 & 0x7FFFFFFF | v25;
  *(_QWORD *)(a1 + 8) = v26;
  v27 = *(_DWORD *)(a5 + 64);
  v28 = (_DWORD)a6 == 1;
  v29 = v27 & 0x7FFFFFFF | (unint64_t)(v28 << 31) | (v23 << 32);
  *(_QWORD *)(a1 + 8) = v26;
  *(_QWORD *)(a1 + 16) = v29;
  v30 = 0x8000000000000000;
  if (!a16)
    v30 = 0;
  v31 = v30 & 0x8000000000000000 | ((unint64_t)(*(_DWORD *)(a5 + 56) & 0x7FFFFFFF) << 32) | v29;
  *(_QWORD *)(a1 + 8) = v26;
  *(_QWORD *)(a1 + 16) = v31;
  v32 = *(_DWORD *)(a5 + 60);
  if (!v25)
    v32 -= *(_DWORD *)(a5 + 56);
  v33 = v26 & 0x7FFFFFFF7FFFFFFFLL;
  v34 = v21 & 0xFFFFFFFF00000000 | v32 & 0x7FFFFFFF | ((unint64_t)(a7 & 1) << 31);
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 24) = v34;
  *(_WORD *)(a1 + 48) = v22;
  v35 = v34 | ((unint64_t)((*(_DWORD *)(a5 + 88) - *(_DWORD *)(a4 + 8)) & 0x7FFFFFFF) << 32) | ((unint64_t)a9 << 63);
  *(_WORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v35;
  v36 = v20 & 0xFFFFFFFF80000000 | (*(_DWORD *)(a5 + 92) - *(_DWORD *)(a5 + 88)) & 0x7FFFFFFF;
  *(_WORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 32) = v36;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v35;
  v37 = v36 & 0xFFFFFFFF7FFFFFFFLL | ((unint64_t)((*(_WORD *)(a5 + 33) & 0x10) != 0) << 31);
  *(_QWORD *)(a1 + 32) = v37;
  *(_QWORD *)(a1 + 40) = v19;
  *(_WORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v35;
  v38 = v37 | ((unint64_t)(*(_DWORD *)(a5 + 72) & 0x7FFFFFFF) << 32);
  *(_WORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 32) = v38;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v35;
  v39 = (WTF::AtomStringImpl *)*(unsigned int *)(a5 + 88);
  v40 = v19 & 0xFFFFFFFF00000000;
  v41 = 0x80000000;
  if (!a14)
    v41 = 0;
  v42 = (v40 | v41) & 0xFFFFFFFF80000000 | (~(_DWORD)v39 + *(_DWORD *)(a5 + 128) + *(_DWORD *)(a5 + 92)) & 0x7FFFFFFF;
  *(_WORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 24) = v35;
  *(_QWORD *)(a1 + 32) = v38;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 40) = v42;
  v43 = v42 | ((unint64_t)(*(_DWORD *)(a5 + 132) & 0x7FFFFFFF) << 32) | ((unint64_t)a15 << 63);
  *(_WORD *)(a1 + 48) = v22 & 0xC000;
  *(_QWORD *)(a1 + 8) = v33;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v35;
  *(_QWORD *)(a1 + 32) = v38;
  *(_QWORD *)(a1 + 40) = v43;
  LOWORD(v42) = (*(unsigned __int8 *)(a5 + 33) << 9) & 0xC000;
  *(_QWORD *)(a1 + 32) = v38;
  *(_QWORD *)(a1 + 40) = v43;
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v35;
  *(_QWORD *)(a1 + 8) = v33;
  *(_WORD *)(a1 + 48) = v42;
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a5 + 35);
  LODWORD(v42) = *(_WORD *)(a1 + 51) & 0xFFFC | *(_WORD *)(a5 + 33) & 3;
  *(_WORD *)(a1 + 51) = *(_WORD *)(a1 + 51) & 0xFFFC | *(_WORD *)(a5 + 33) & 3;
  LODWORD(v42) = v42 & 0xFFFFFFF3 | (4 * ((*(unsigned __int16 *)(a5 + 33) >> 2) & 3));
  *(_WORD *)(a1 + 51) = v42;
  *(_WORD *)(a1 + 51) = (16 * (*(_WORD *)(a5 + 36) & 3)) | ((a13 & 3) << 6) | ((a8 & 1) << 8) | v42 & 0xFE0F;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v44 = *(_DWORD **)(a5 + 40);
  if (v44)
    *v44 += 2;
  *(_QWORD *)(a1 + 72) = v44;
  v45 = *(_DWORD **)(a5 + 40);
  if (v45 && v45[1] || (v45 = *(_DWORD **)(a5 + 48)) != 0)
    *v45 += 2;
  *(_QWORD *)(a1 + 80) = v45;
  *(_QWORD *)(a1 + 88) = 0;
  if (*(_QWORD *)(a5 + 104))
  {
    v58 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v58 = 0;
    *(_QWORD *)(v58 + 8) = 0;
    *(_QWORD *)(v58 + 16) = -1;
    *(_OWORD *)(v58 + 24) = 0u;
    *(_OWORD *)(v58 + 40) = 0u;
    *(_OWORD *)(v58 + 56) = 0u;
    v59 = *(JSC::UnlinkedFunctionExecutable::RareData **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v58;
    if (v59)
    {
      JSC::UnlinkedFunctionExecutable::RareData::~RareData(v59, v39, v25, a4, v28, a6, a7, a8);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      v58 = *(_QWORD *)(a1 + 88);
    }
    v68 = *(_QWORD *)(a5 + 104);
    if (v68)
      ++*(_DWORD *)(v68 + 8);
    v69 = *(_DWORD **)v58;
    *(_QWORD *)v58 = v68;
    if (v69)
    {
      if (v69[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
      else
        --v69[2];
    }
    *(_QWORD *)(v58 + 8) = *(_QWORD *)(a5 + 112);
    *(_QWORD *)(v58 + 16) = *(_QWORD *)(a5 + 120);
  }
  v46 = *a10;
  if (*a10)
  {
    v48 = *(_QWORD *)(a1 + 88);
    if (!v48)
    {
      v48 = JSC::UnlinkedFunctionExecutable::ensureRareDataSlow((JSC::UnlinkedFunctionExecutable *)a1);
      v46 = *a10;
    }
    *a10 = 0;
    v49 = *(JSC::TDZEnvironmentLink **)(v48 + 40);
    *(_QWORD *)(v48 + 40) = v46;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1)
      {
        JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v49);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        --*(_DWORD *)v49;
      }
    }
  }
  if (*(_BYTE *)(a11 + 16))
  {
    v84 = *(_QWORD *)a11;
    v85 = *(unsigned int *)(a11 + 12);
    *(_QWORD *)a11 = 0;
    *(_QWORD *)(a11 + 8) = 0;
    if ((_DWORD)v85)
    {
      v86 = 8 * v85;
      v87 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v85 + 8));
      v88 = v87;
      v89 = 0;
      *v87 = v85;
      do
      {
        v90 = *(_QWORD *)(v84 + v89);
        *(_QWORD *)(v84 + v89) = 0;
        *(_QWORD *)&v87[v89 / 4 + 2] = v90;
        v89 += 8;
      }
      while (v86 != v89);
      v91 = 0;
      do
      {
        v92 = *(WTF::StringImpl **)(v84 + v91);
        *(_QWORD *)(v84 + v91) = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
          {
            WTF::StringImpl::~StringImpl(v92, v39, v25, a4, v28, a6, a7, a8);
            WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
          }
          else
          {
            *(_DWORD *)v92 -= 2;
          }
        }
        v91 += 8;
      }
      while (v86 != v91);
    }
    else
    {
      v88 = 0;
    }
    if (v84)
      WTF::fastFree(v84, v39, v25, a4, v28, a6, a7, a8);
    v101 = *(_QWORD *)(a1 + 88);
    if (!v101)
      v101 = JSC::UnlinkedFunctionExecutable::ensureRareDataSlow((JSC::UnlinkedFunctionExecutable *)a1);
    v102 = *(unsigned int **)(v101 + 48);
    *(_QWORD *)(v101 + 48) = v88;
    if (v102)
    {
      v104 = (WTF::StringImpl **)(v102 + 2);
      v103 = *v102;
      if ((_DWORD)v103)
      {
        v105 = 8 * v103;
        do
        {
          v106 = *v104;
          *v104 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
            {
              WTF::StringImpl::~StringImpl(v106, v39, v25, a4, v28, a6, a7, a8);
              WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
            }
            else
            {
              *(_DWORD *)v106 -= 2;
            }
          }
          ++v104;
          v105 -= 8;
        }
        while (v105);
      }
      WTF::fastFree((unint64_t)v102, v39, v25, a4, v28, a6, a7, a8);
    }
  }
  if (*((_BYTE *)a12 + 8))
  {
    v70 = *(_QWORD *)(a1 + 88);
    if (!v70)
      v70 = JSC::UnlinkedFunctionExecutable::ensureRareDataSlow((JSC::UnlinkedFunctionExecutable *)a1);
    v71 = *a12;
    *a12 = 0;
    v72 = *(WTF::StringImpl ***)(v70 + 64);
    *(_QWORD *)(v70 + 64) = v71;
    if (v72)
    {
      v73 = *((unsigned int *)v72 - 1);
      if ((_DWORD)v73)
      {
        v74 = v72;
        do
        {
          v75 = *v74;
          if (*v74 != (WTF::StringImpl *)-1)
          {
            if (v75)
            {
              *v74 = 0;
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, v39, v25, a4, v28, a6, a7, a8);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
              }
              else
              {
                *(_DWORD *)v75 -= 2;
              }
            }
            else
            {
              *v74 = 0;
            }
          }
          v74 += 2;
          --v73;
        }
        while (v73);
      }
      WTF::fastFree((unint64_t)(v72 - 2), v39, v25, a4, v28, a6, a7, a8);
    }
  }
  return a1;
}

SourceProvider *JSC::UnlinkedFunctionExecutable::linkedSourceCode@<X0>(JSC::UnlinkedFunctionExecutable *this@<X0>, const SourceCode *a2@<X1>, int32x2_t *a3@<X8>)
{
  int var0;
  int v6;
  int var1;
  SourceProvider *result;
  uint64_t v9;
  int v10;
  int v11;
  int32x2_t v12;
  int32x2_t v13;
  __int32 v14;
  SourceProvider *v15;
  int v16;
  int v17;
  int v18;

  if ((*((_QWORD *)this + 2) & 0x8000000000000000) != 0)
  {
    JSC::BuiltinExecutables::defaultConstructorSourceCode((unint64_t)*((unsigned __int16 *)this + 24) >> 14, (uint64_t)&v15);
    var0 = v17;
    v6 = v18;
    var1 = v16;
    result = v15;
  }
  else
  {
    result = a2->var0.var0;
    if (a2->var0.var0)
      ++*((_DWORD *)result + 2);
    var1 = a2->var1;
    var0 = a2->var3.var0;
    v6 = a2->var4.var0;
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 0x7FFFFFFF) != 0)
    v10 = 1;
  else
    v10 = v6 + 1;
  v11 = (*((_DWORD *)this + 7) & 0x7FFFFFFF) + var1;
  v12.i32[0] = v9 & 0x7FFFFFFF;
  v12.i32[1] = *((_DWORD *)this + 5) & 0x7FFFFFFF;
  v13 = vadd_s32(v12, (int32x2_t)__PAIR64__(v10, var0 + 1));
  if (result)
    ++*((_DWORD *)result + 2);
  v14 = (*((_DWORD *)this + 8) & 0x7FFFFFFF) + v11;
  *a3 = (int32x2_t)result;
  a3[1].i32[0] = v11;
  a3[1].i32[1] = v14;
  a3[2] = vadd_s32(vmax_s32(v13, (int32x2_t)0x100000001), (int32x2_t)-1);
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (SourceProvider *)(*(uint64_t (**)(SourceProvider *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t JSC::UnlinkedFunctionExecutable::link(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, float a11)
{
  char v11;
  char v12;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  int32x2_t v27;
  int32x2_t v28;
  int v29;
  int v30;
  double v31;
  _BOOL4 v32;
  uint64_t SlowCase;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  _DWORD *v43;
  __int128 v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  int v51;
  int32x2_t v52;

  v11 = a7;
  v12 = a6;
  if ((*(_QWORD *)(a1 + 16) & 0x8000000000000000) != 0)
  {
    v17 = (unint64_t)*(unsigned __int16 *)(a1 + 48) >> 14;
    if ((_DWORD)v17 == 1)
    {
      {
        JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_0::operator() const(void)::impl += 2;
        JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::baseConstructorCode = (uint64_t)&JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_0::operator() const(void)::impl;
      }
      v18 = WTF::fastMalloc((WTF *)0x80);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      *(_DWORD *)(v18 + 8) = 1;
      *(_BYTE *)(v18 + 12) = 0;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      *(_OWORD *)(v18 + 80) = 0u;
      *(_OWORD *)(v18 + 96) = 0u;
      *(_QWORD *)(v18 + 109) = 0;
      *(_QWORD *)v18 = off_1E357C4B0;
      v22 = (int *)JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::baseConstructorCode;
    }
    else
    {
      if ((_DWORD)v17 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198220A20);
      }
      {
        JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_1::operator() const(void)::impl += 2;
        JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::derivedConstructorCode = (uint64_t)&JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::$_1::operator() const(void)::impl;
      }
      v18 = WTF::fastMalloc((WTF *)0x80);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      *(_DWORD *)(v18 + 8) = 1;
      *(_BYTE *)(v18 + 12) = 0;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      *(_OWORD *)(v18 + 80) = 0u;
      *(_OWORD *)(v18 + 96) = 0u;
      *(_QWORD *)(v18 + 109) = 0;
      *(_QWORD *)v18 = off_1E357C4B0;
      v22 = (int *)JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)::derivedConstructorCode;
    }
    if (!v22)
      v22 = &WTF::StringImpl::s_emptyAtomString;
    *v22 += 2;
    *(_QWORD *)(v18 + 120) = v22;
  }
  else
  {
    v18 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
      ++*(_DWORD *)(v18 + 8);
    v20 = *(_DWORD *)(a4 + 8);
    v19 = *(_DWORD *)(a4 + 16);
    v21 = *(_DWORD *)(a4 + 20);
  }
  v23 = (uint64_t *)(a2 + 41184);
  v24 = *(_QWORD *)(a1 + 8);
  if ((v24 & 0x7FFFFFFF) != 0)
    v25 = 1;
  else
    v25 = v21 + 1;
  v26 = (HIDWORD(*(_QWORD *)(a1 + 24)) & 0x7FFFFFFF) + v20;
  v27.i32[0] = v24 & 0x7FFFFFFF;
  v27.i32[1] = HIDWORD(*(_QWORD *)(a1 + 16)) & 0x7FFFFFFF;
  v28 = vadd_s32(v27, (int32x2_t)__PAIR64__(v25, v19 + 1));
  if (v18)
  {
    v29 = *(_DWORD *)(v18 + 8);
    *(_DWORD *)(v18 + 8) = v29 + 1;
    v30 = (*(_DWORD *)(a1 + 32) & 0x7FFFFFFF) + v26;
    v49 = (_DWORD *)v18;
    v50 = v26;
    v51 = v30;
    v31 = NAN;
    v52 = vadd_s32(vmax_s32(v28, (int32x2_t)0x100000001), (int32x2_t)-1);
    if (v29)
      *(_DWORD *)(v18 + 8) = v29;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    v42 = (*(_QWORD *)(a1 + 32) & 0x7FFFFFFF) + v26;
    v49 = 0;
    v50 = v26;
    v51 = v42;
    v31 = NAN;
    v52 = vadd_s32(vmax_s32(v28, (int32x2_t)0x100000001), (int32x2_t)-1);
  }
  v43 = 0;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = -1;
  if (*(uint64_t *)((char *)&qword_1ECF4C6A7 + 1))
    v32 = JSC::FunctionOverrides::initializeOverrideFor((unsigned int *)&v49, (uint64_t)&v43, NAN, v31, a11);
  else
    v32 = 0;
  SlowCase = *v23;
  if ((unint64_t)*v23 < *(_QWORD *)(a2 + 41192))
    goto LABEL_18;
  SlowCase = *(_QWORD *)(a2 + 41200);
  if ((SlowCase & 1) == 0)
  {
    v38 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a2 + 41208);
    *(_QWORD *)(a2 + 41192) = SlowCase + HIDWORD(v38);
    *(_QWORD *)(a2 + 41200) = SlowCase + (int)v38;
LABEL_18:
    *v23 = SlowCase + 128;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM((JSC *)a2, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a2 + 41160, a2 + 192, 128, 0, 0);
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  JSC::FunctionExecutable::FunctionExecutable(SlowCase, a2, a3, (uint64_t *)&v49, a1, v12, v11);
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  if ((a5 & 0xFF00000000) != 0)
  {
    v37 = *(_QWORD *)(SlowCase + 72);
    if ((_DWORD)a5 == -1)
    {
      if (!v37)
        goto LABEL_22;
    }
    else if (!v37)
    {
      v37 = JSC::FunctionExecutable::ensureRareDataSlow((JSC::FunctionExecutable *)SlowCase);
    }
    *(_DWORD *)(v37 + 16) = a5;
  }
LABEL_22:
  if (v32)
  {
    v39 = *(_QWORD *)(SlowCase + 72);
    if (!v39)
      v39 = JSC::FunctionExecutable::ensureRareDataSlow((JSC::FunctionExecutable *)SlowCase);
    v40 = v43;
    if (v43)
      ++v43[2];
    v41 = *(_DWORD **)(SlowCase + 40);
    *(_QWORD *)(SlowCase + 40) = v40;
    if (v41)
    {
      if (v41[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
      else
        --v41[2];
    }
    *(_OWORD *)(SlowCase + 48) = v44;
    *(_DWORD *)(v39 + 8) = v45;
    *(_DWORD *)(v39 + 12) = v46;
    *(_DWORD *)(v39 + 20) = v47;
    *(_QWORD *)(v39 + 48) = v48;
  }
  v34 = v43;
  v43 = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = v49;
  v49 = 0;
  if (v35)
  {
    if (v35[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
    else
      --v35[2];
  }
  return SlowCase;
}

JSC::UnlinkedFunctionExecutable *JSC::UnlinkedFunctionExecutable::fromGlobalCode(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::UnlinkedFunctionExecutable *UnlinkedGlobalFunctionExecutable;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SourceProvider *var0;
  SourceCode v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  __int16 v40;

  LODWORD(v31) = 0x100000;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = -1;
  v36 = -1;
  v37 = -1;
  v38 = 0;
  v39 = -1;
  v40 = 0;
  UnlinkedGlobalFunctionExecutable = JSC::CodeCache::getUnlinkedGlobalFunctionExecutable(*(_QWORD *)(a2[7] + 93136), a2[7]);
  v17 = a2[252];
  if (v17)
    (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, a2, *a3, v39, &v38);
  if ((_BYTE)v40)
  {
    v28 = *a3;
    if (*a3)
      ++*(_DWORD *)(v28 + 8);
    v30.var0.var0 = (SourceProvider *)v28;
    *(_OWORD *)&v30.var1 = *(_OWORD *)(a3 + 1);
    *a4 = JSC::ParserError::toErrorObject(&v31, (JSC::JSGlobalObject *)a2, &v30, a5, v12, v13, v14, v15);
    var0 = v30.var0.var0;
    v30.var0.var0 = 0;
    if (var0)
    {
      if (*((_DWORD *)var0 + 2) != 1)
      {
        UnlinkedGlobalFunctionExecutable = 0;
        --*((_DWORD *)var0 + 2);
        goto LABEL_4;
      }
      (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
    }
    UnlinkedGlobalFunctionExecutable = 0;
  }
LABEL_4:
  v18 = v38;
  v38 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return UnlinkedGlobalFunctionExecutable;
}

unint64_t JSC::ParserError::toErrorObject(WTF::StringImpl **this, JSC::JSGlobalObject *a2, SourceCode *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *SyntaxError;
  JSC::VM *v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  unint64_t StackOverflowError;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSObject *v22;
  JSC *v24;
  const SourceCode *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;

  SyntaxError = 0;
  switch(*((_BYTE *)this + 84))
  {
    case 0:
      return (unint64_t)SyntaxError;
    case 1:
      v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if (!*((_QWORD *)v11 + 11636))
      {
        __break(0xC471u);
        JUMPOUT(0x198220EC4);
      }
      v12 = *((_QWORD *)v11 + 11637);
      *((_QWORD *)v11 + 11637) = dword_1ECF4C250;
      JSC::VM::updateStackLimits(v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      StackOverflowError = JSC::createStackOverflowError((unint64_t)a2, v13);
      if (!*((_QWORD *)v11 + 11636))
      {
        __break(0xC471u);
        JUMPOUT(0x198220EE4);
      }
      SyntaxError = (JSC::VM *)StackOverflowError;
      *((_QWORD *)v11 + 11637) = v12;
      JSC::VM::updateStackLimits(v11, v15, v16, v17, v18, v19, v20, v21);
      return (unint64_t)SyntaxError;
    case 2:
      return JSC::createSyntaxError(a2, this + 9, 0);
    case 3:
      return JSC::createOutOfMemoryError((unint64_t)a2, a2);
    case 4:
      v22 = (JSC::JSObject *)a4;
      v24 = (JSC *)*((_QWORD *)a2 + 7);
      SyntaxError = (JSC::VM *)JSC::createSyntaxError(a2, this + 9, 0);
      if ((_DWORD)v22 == -1)
        v22 = (JSC::JSObject *)*((unsigned int *)this + 20);
      JSC::addErrorInfo(v24, SyntaxError, v22, (uint64_t *)a3, v25, v26, v27, v28, v29);
      return (unint64_t)SyntaxError;
    default:
      __break(0xC471u);
      JUMPOUT(0x198220EECLL);
  }
}

unint64_t JSC::UnlinkedFunctionExecutable::unlinkedCodeBlockFor(uint64_t a1, uint64_t a2)
{
  JSC::UnlinkedFunctionExecutable *v2;
  JSC::VM *v3;
  SourceCode *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  JSC::VM *v13;
  unint64_t v14;
  unint64_t SlowCase;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int **v20;
  char v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  WTF::AtomStringImpl *v26;
  int v27;
  char v28;
  int *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  JSC::SourceProvider **v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::MonotonicTime *v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned int v84;
  _DWORD *v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  __int16 v101;
  unint64_t v102;
  char v103;
  _QWORD *v104;
  WTF::MonotonicTime *v105;
  uint64_t v106;
  _DWORD *v107;
  BOOL v108;
  unsigned int **v109;
  _QWORD *v110;
  _QWORD *v111;
  double v112;
  JSC::BytecodeGenerator *v113;
  JSC::BytecodeGenerator *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::MonotonicTime *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::AtomStringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  __int128 v145;
  SourceCode *v146;
  uint64_t v147;
  __int128 v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  _OWORD *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t *v201;
  uint64_t v202;
  char v203;
  char v204;
  const char *v205;
  uint64_t v206;
  WTF::AtomStringImpl *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  JSC::SourceProvider **v216;
  int v217;
  unint64_t v218;
  unint64_t v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int v300;
  int v301;
  _QWORD *v302;
  double v303;
  unsigned int v304;
  double v305;
  const char *v306;
  unint64_t v307;
  double v308;
  const char *v309;
  WTF::AtomStringImpl *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  WTF::AtomStringImpl *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  JSC::SourceProvider *v326;
  WTF::StringImpl *v327;
  WTF::AtomStringImpl *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  JSC::SourceProvider *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  JSC::SourceProvider *v339;
  WTF::StringImpl *v340;
  WTF::AtomStringImpl *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  WTF::StringImpl *v348;
  JSC::SourceProvider *v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351;
  SourceCode *v352;
  char v353;
  WTF::StringImpl *v354;
  __int128 *v355;
  char v356;
  __int128 v357;
  __int128 v358;
  WTF::StringImpl *v359;
  unint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v410;
  unsigned __int8 v411;
  int v412;
  unint64_t v413;
  char v414;
  char v415;
  unsigned int **v416;
  _QWORD *v417;
  unint64_t v418;
  uint64_t v419;
  SourceCode *v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  JSC::VM *v424;
  _OWORD v425[4];
  uint64_t v426;
  WTF::StringImpl *v427;
  int v428;
  __int16 v429;
  uint64_t v430;
  _BYTE v431[56];
  uint64_t v432;
  char v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  uint64_t v438;
  unsigned __int8 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  uint64_t v444;
  WTF::StringImpl *v445;
  int v446;
  __int16 v447;
  WTF::StringImpl *v448;
  WTF::StringImpl *v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452[2];
  uint64_t v453[3];
  uint64_t v454[3];
  __int16 v455;
  int v456;
  int v457;
  __int128 v458;
  unsigned int v459[2];

  v2 = (JSC::UnlinkedFunctionExecutable *)MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v3;
  v14 = (unint64_t)v2;
  if ((*((_QWORD *)v2 + 4) & 0x8000000000000000) != 0)
  {
    v352 = v4;
    JSC::UnlinkedFunctionExecutable::decodeCachedCodeBlocks(v2, v3);
    v4 = v352;
  }
  if (v12)
  {
    if (v12 == 1)
    {
      SlowCase = *(_QWORD *)(v14 + 64);
      if (SlowCase)
        return SlowCase;
    }
  }
  else
  {
    SlowCase = *(_QWORD *)(v14 + 56);
    if (SlowCase)
      return SlowCase;
  }
  v415 = v6;
  v419 = v8;
  v423 = v12;
  v424 = v13;
  v413 = *(_QWORD *)(v14 + 16);
  v414 = v10;
  v17 = *(unsigned __int16 *)(v14 + 51);
  v18 = (v17 >> 2) & 1;
  v421 = (v413 >> 31) & 1;
  v422 = *(_QWORD *)(v14 + 24) >> 63;
  v19 = *(_QWORD *)(v14 + 88);
  if (v19)
    v20 = (unsigned int **)(v19 + 56);
  else
    v20 = 0;
  v416 = v20;
  v21 = v17 & 3;
  v22 = *(unsigned __int8 *)(v14 + 50);
  v23 = (*(_QWORD *)(v14 + 32) >> 31) & 1;
  v24 = (unint64_t)*(unsigned __int16 *)(v14 + 48) >> 14;
  v25 = 0.0;
  v420 = v4;
  if (unk_1ECF4C33E)
  {
    v303 = WTF::MonotonicTime::now(v2);
    v4 = v420;
    v25 = v303;
  }
  v418 = v14;
  v26 = (WTF::AtomStringImpl *)(v14 + 72);
  v27 = (v17 >> 4) & 3;
  v28 = v17 >> 6;
  v29 = (int *)v4;
  (*(void (**)(void))(*(_QWORD *)v4->var0.var0 + 24))();
  if ((v30 & 0xFF00000000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::Parser((uint64_t)v425, v424, v29, v21, v421, v18, v422, v22, v27, v23, v24, v28, 0, 0, 0, 0);
    v31 = v439;
    *(_BYTE *)(v432 + 148) = 1;
    *(_QWORD *)v459 = 0;
    v458 = v436;
    v410 = *(_DWORD *)(v430 + 20);
    v411 = v31;
    JSC::Parser<JSC::Lexer<unsigned char>>::parseInner((uint64_t)v425, v26, 0, 0, v416, 0, v32, v33, (uint64_t)&v450);
    v41 = 0;
    v42 = v432;
    v43 = *(_DWORD *)v432;
    v44 = *(unsigned __int8 *)(v432 + 150);
    v416 = (unsigned int **)(v14 + 72);
    if (*(_BYTE *)(v432 + 150))
    {
      v41 = *(WTF::StringImpl **)(v432 + 152);
      if (v41)
        *(_DWORD *)v41 += 2;
    }
    v449 = v41;
    *(_QWORD *)(v42 + 184) = 0;
    v45 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v42 + 16) = 0;
    v46 = *(_QWORD *)(v42 + 24);
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = 0;
    v47 = *(_QWORD *)(v42 + 40);
    *(_BYTE *)(v42 + 148) = 0;
    *(_QWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    if (v47)
      WTF::fastFree(v47, v34, v35, v36, v37, v38, v39, v40);
    if (v46)
      WTF::fastFree(v46, v34, v35, v36, v37, v38, v39, v40);
    if (v45)
      WTF::fastFree(v45, v34, v35, v36, v37, v38, v39, v40);
    if (!v44 && !v457)
      goto LABEL_23;
    if (v449)
    {
      v310 = (WTF::AtomStringImpl *)&v449;
      goto LABEL_185;
    }
    if (v457 == 1)
    {
      v310 = (WTF::AtomStringImpl *)&v450;
LABEL_185:
      WTF::String::operator=((unint64_t *)v459, v310, v35, v36, v37, v38, v39, v40);
      if (!v457)
      {
LABEL_23:
        v48 = *(_DWORD *)(v432 + 88);
        v49 = *(_DWORD *)(v432 + 112) - v48;
        LODWORD(v440) = *(_DWORD *)v432;
        DWORD1(v440) = v49;
        v50 = *(_DWORD *)(v432 + 80) - v48;
        *((_QWORD *)&v440 + 1) = v50;
        if (!HIDWORD(v425[0]))
        {
          __break(0xC471u);
          JUMPOUT(0x1982222C8);
        }
        v51 = v50 - v49;
        v52 = (uint64_t *)v430;
        v53 = *(_QWORD *)&v425[0] + 720 * (HIDWORD(v425[0]) - 1);
        v54 = *(_BYTE *)(v53 + 9);
        v55 = *(_BYTE *)(v53 + 32);
        v56 = WTF::fastMalloc((WTF *)0x108);
        v57 = v450;
        v58 = JSC::ScopeNode::ScopeNode(v56, (uint64_t)v431, (int *)&v458, (uint64_t)&v440, v52, v451, v453, v452, v454, v455, v54, v55, v456);
        *(_QWORD *)v58 = off_1E358BCA0;
        *(_QWORD *)(v58 + 40) = &unk_1E358BD40;
        *(_QWORD *)(v58 + 104) = &unk_1E358BD60;
        *(_QWORD *)(v58 + 232) = 0;
        *(_QWORD *)(v58 + 248) = v57;
        *(_DWORD *)(v58 + 256) = v410;
        *(_DWORD *)(v58 + 260) = v51;
        v66 = v432;
        v67 = *(_DWORD *)(v432 + 88);
        v68 = (JSC::SourceProvider **)v430;
        v69 = *(_DWORD *)(v430 + 16) + 1;
        v70 = *(_DWORD *)(v432 + 80) - v67;
        v71 = *(_DWORD *)(v432 + 112) - v67;
        *(_DWORD *)(v58 + 28) = *(_DWORD *)v432;
        *(_DWORD *)(v58 + 8) = v69;
        *(_DWORD *)(v58 + 12) = v70;
        *(_DWORD *)(v58 + 16) = v71;
        *(_DWORD *)(v58 + 20) = v70;
        v14 = v418;
        if (((1 << v411) & 0x1F8FFF) == 0)
        {
          v339 = *v68;
          v340 = *(WTF::StringImpl **)(v66 + 160);
          if (v340)
            *(_DWORD *)v340 += 2;
          v448 = v340;
          JSC::SourceProvider::setSourceURLDirective(v339, (const WTF::String *)&v448, v60, v61, v62, v63, v64, v65);
          v348 = v448;
          v448 = 0;
          if (v348)
          {
            if (*(_DWORD *)v348 == 2)
            {
              WTF::StringImpl::~StringImpl(v348, v341, v342, v343, v344, v345, v346, v347);
              WTF::fastFree(v392, v393, v394, v395, v396, v397, v398, v399);
            }
            else
            {
              *(_DWORD *)v348 -= 2;
            }
          }
          v349 = *(JSC::SourceProvider **)v430;
          v350 = *(WTF::StringImpl **)(v432 + 168);
          if (v350)
            *(_DWORD *)v350 += 2;
          v448 = v350;
          JSC::SourceProvider::setSourceMappingURLDirective(v349, (const WTF::String *)&v448, v342, v343, v344, v345, v346, v347);
          v351 = v448;
          v448 = 0;
          if (v351)
          {
            if (*(_DWORD *)v351 == 2)
            {
              WTF::StringImpl::~StringImpl(v351, v59, v60, v61, v62, v63, v64, v65);
              WTF::fastFree(v400, v401, v402, v403, v404, v405, v406, v407);
            }
            else
            {
              *(_DWORD *)v351 -= 2;
            }
          }
          v14 = v418;
        }
        v72 = (uint64_t)v424;
LABEL_26:
        v73 = v449;
        v449 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
          {
            WTF::StringImpl::~StringImpl(v73, v59, v60, v61, v62, v63, v64, v65);
            WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
          }
          else
          {
            *(_DWORD *)v73 -= 2;
          }
        }
        if (v457 != -1)
          ((void (*)(__int128 *, const char **))off_1E3583758[v457])(&v440, &v450);
        v74 = *(WTF::StringImpl **)v459;
        *(_QWORD *)v459 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
          {
            WTF::StringImpl::~StringImpl(v74, v59, v60, v61, v62, v63, v64, v65);
            WTF::fastFree(v263, v264, v265, v266, v267, v268, v269, v270);
          }
          else
          {
            *(_DWORD *)v74 -= 2;
          }
        }
        if ((_DWORD)v421 && !v56 && *(_BYTE *)(v419 + 84) != 1)
        {
          LODWORD(v440) = *(_DWORD *)(v419 + 80);
          v450 = (const char *)*v416;
          WTF::dataLog<char [37],WTF::String,char [10],int,char [15],WTF::UniquedStringImpl *,char [2],char [2]>("Unexpected error compiling builtin: ", (WTF::PrintStream *)(v419 + 72), " on line ", &v440, " for function ", (uint64_t *)&v450, ".", "\n");
        }
        v75 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<unsigned char>>::~Parser((uint64_t)v425, v59, v60, v61, v62, v63, v64, v65);
        goto LABEL_37;
      }
      if (v433)
      {
        v442 = v436;
        v443 = v437;
        v440 = v434;
        v441 = v435;
        v444 = v438;
        v445 = 0;
        v446 = -1;
        v447 = 1;
LABEL_188:
        JSC::ParserError::operator=(v419, (uint64_t)&v440, v311, v312, v313, v314, v315, v316);
        v317 = v445;
        v445 = 0;
        if (v317)
        {
          if (*(_DWORD *)v317 == 2)
          {
            WTF::StringImpl::~StringImpl(v317, v59, v60, v61, v62, v63, v64, v65);
            WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
          }
          else
          {
            *(_DWORD *)v317 -= 2;
          }
        }
        v56 = 0;
        v72 = (uint64_t)v424;
        goto LABEL_26;
      }
      v355 = &v434;
      if ((_DWORD)v434 != 20)
      {
        if ((v434 & 0x200000) != 0)
        {
          if ((_DWORD)v434 == 3145741 || (_DWORD)v434 == 3145732)
            v356 = 3;
          else
            v356 = 2;
        }
        else
        {
          v356 = 1;
        }
        goto LABEL_244;
      }
LABEL_269:
      v356 = 3;
LABEL_244:
      v357 = v355[3];
      v442 = v355[2];
      v443 = v357;
      v444 = *((_QWORD *)v355 + 8);
      v358 = v355[1];
      v440 = *v355;
      v441 = v358;
      v359 = *(WTF::StringImpl **)v459;
      if (*(_QWORD *)v459)
        **(_DWORD **)v459 += 2;
      v445 = v359;
      v446 = v43;
      LOBYTE(v447) = 4;
      HIBYTE(v447) = v356;
      goto LABEL_188;
    }
LABEL_268:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_269;
  }
  JSC::Parser<JSC::Lexer<char16_t>>::Parser((uint64_t)v425, v424, v29, v21, v421, v18, v422, v22, v27, v23, v24, v28, 0, 0, 0, 0);
  LODWORD(v421) = v439;
  *(_BYTE *)(v432 + 148) = 1;
  *(_QWORD *)v459 = 0;
  v458 = v436;
  v412 = *(_DWORD *)(v430 + 20);
  JSC::Parser<JSC::Lexer<char16_t>>::parseInner((uint64_t)v425, v26, 0, 0, v416, 0, v181, v182, (uint64_t)&v450);
  v190 = 0;
  v191 = v432;
  v43 = *(_DWORD *)v432;
  v192 = *(unsigned __int8 *)(v432 + 150);
  if (*(_BYTE *)(v432 + 150))
  {
    v190 = *(WTF::StringImpl **)(v432 + 152);
    if (v190)
      *(_DWORD *)v190 += 2;
  }
  v449 = v190;
  *(_QWORD *)(v191 + 184) = 0;
  v193 = *(_QWORD *)(v191 + 8);
  *(_QWORD *)(v191 + 8) = 0;
  *(_QWORD *)(v191 + 16) = 0;
  v194 = *(_QWORD *)(v191 + 24);
  *(_QWORD *)(v191 + 24) = 0;
  *(_QWORD *)(v191 + 32) = 0;
  v195 = *(_QWORD *)(v191 + 40);
  *(_BYTE *)(v191 + 148) = 0;
  *(_QWORD *)(v191 + 40) = 0;
  *(_QWORD *)(v191 + 48) = 0;
  if (v195)
    WTF::fastFree(v195, v183, v184, v185, v186, v187, v188, v189);
  if (v194)
    WTF::fastFree(v194, v183, v184, v185, v186, v187, v188, v189);
  if (v193)
    WTF::fastFree(v193, v183, v184, v185, v186, v187, v188, v189);
  if (!v192 && !v457)
    goto LABEL_125;
  if (v449)
  {
    v318 = (WTF::AtomStringImpl *)&v449;
  }
  else
  {
    if (v457 != 1)
      goto LABEL_268;
    v318 = (WTF::AtomStringImpl *)&v450;
  }
  WTF::String::operator=((unint64_t *)v459, v318, v184, v185, v186, v187, v188, v189);
  if (v457)
  {
    if (v433)
    {
      v442 = v436;
      v443 = v437;
      v440 = v434;
      v441 = v435;
      v444 = v438;
      v445 = 0;
      v446 = -1;
      v447 = 1;
    }
    else
    {
      if ((_DWORD)v434 == 20)
      {
        v353 = 3;
      }
      else if ((v434 & 0x200000) != 0)
      {
        if ((_DWORD)v434 == 3145741 || (_DWORD)v434 == 3145732)
          v353 = 3;
        else
          v353 = 2;
      }
      else
      {
        v353 = 1;
      }
      v442 = v436;
      v443 = v437;
      v444 = v438;
      v440 = v434;
      v441 = v435;
      v354 = *(WTF::StringImpl **)v459;
      if (*(_QWORD *)v459)
        **(_DWORD **)v459 += 2;
      v445 = v354;
      v446 = v43;
      LOBYTE(v447) = 4;
      HIBYTE(v447) = v353;
    }
    JSC::ParserError::operator=(v419, (uint64_t)&v440, v319, v320, v321, v322, v323, v324);
    v325 = v445;
    v445 = 0;
    if (v325)
    {
      if (*(_DWORD *)v325 == 2)
      {
        WTF::StringImpl::~StringImpl(v325, v207, v208, v209, v210, v211, v212, v213);
        WTF::fastFree(v360, v361, v362, v363, v364, v365, v366, v367);
      }
      else
      {
        *(_DWORD *)v325 -= 2;
      }
    }
    v56 = 0;
    v72 = (uint64_t)v424;
  }
  else
  {
LABEL_125:
    v197 = *(_QWORD *)(v432 + 80);
    v196 = *(_QWORD *)(v432 + 88);
    v198 = (unint64_t)(*(_QWORD *)(v432 + 112) - v196) >> 1;
    LODWORD(v440) = *(_DWORD *)v432;
    DWORD1(v440) = v198;
    v199 = (unint64_t)(v197 - v196) >> 1;
    *((_QWORD *)&v440 + 1) = v199;
    if (!HIDWORD(v425[0]))
    {
      __break(0xC471u);
      JUMPOUT(0x1982222D0);
    }
    v200 = v199 - v198;
    v201 = (uint64_t *)v430;
    v202 = *(_QWORD *)&v425[0] + 720 * (HIDWORD(v425[0]) - 1);
    v203 = *(_BYTE *)(v202 + 9);
    v204 = *(_BYTE *)(v202 + 32);
    v56 = WTF::fastMalloc((WTF *)0x108);
    v205 = v450;
    v206 = JSC::ScopeNode::ScopeNode(v56, (uint64_t)v431, (int *)&v458, (uint64_t)&v440, v201, v451, v453, v452, v454, v455, v203, v204, v456);
    *(_QWORD *)v206 = off_1E358BCA0;
    *(_QWORD *)(v206 + 40) = &unk_1E358BD40;
    *(_QWORD *)(v206 + 104) = &unk_1E358BD60;
    *(_QWORD *)(v206 + 232) = 0;
    *(_QWORD *)(v206 + 248) = v205;
    *(_DWORD *)(v206 + 256) = v412;
    *(_DWORD *)(v206 + 260) = v200;
    v214 = v432;
    v215 = *(_QWORD *)(v432 + 88);
    v216 = (JSC::SourceProvider **)v430;
    v217 = *(_DWORD *)(v430 + 16) + 1;
    v218 = (unint64_t)(*(_QWORD *)(v432 + 80) - v215) >> 1;
    v219 = (unint64_t)(*(_QWORD *)(v432 + 112) - v215) >> 1;
    *(_DWORD *)(v206 + 28) = *(_DWORD *)v432;
    *(_DWORD *)(v206 + 8) = v217;
    *(_DWORD *)(v206 + 12) = v218;
    *(_DWORD *)(v206 + 16) = v219;
    *(_DWORD *)(v206 + 20) = v218;
    v14 = v418;
    if (((1 << v421) & 0x1F8FFF) == 0)
    {
      v326 = *v216;
      v327 = *(WTF::StringImpl **)(v214 + 160);
      if (v327)
        *(_DWORD *)v327 += 2;
      v448 = v327;
      JSC::SourceProvider::setSourceURLDirective(v326, (const WTF::String *)&v448, v208, v209, v210, v211, v212, v213);
      v335 = v448;
      v448 = 0;
      if (v335)
      {
        if (*(_DWORD *)v335 == 2)
        {
          WTF::StringImpl::~StringImpl(v335, v328, v329, v330, v331, v332, v333, v334);
          WTF::fastFree(v376, v377, v378, v379, v380, v381, v382, v383);
        }
        else
        {
          *(_DWORD *)v335 -= 2;
        }
      }
      v336 = *(JSC::SourceProvider **)v430;
      v337 = *(WTF::StringImpl **)(v432 + 168);
      if (v337)
        *(_DWORD *)v337 += 2;
      v448 = v337;
      JSC::SourceProvider::setSourceMappingURLDirective(v336, (const WTF::String *)&v448, v329, v330, v331, v332, v333, v334);
      v338 = v448;
      v448 = 0;
      if (v338)
      {
        if (*(_DWORD *)v338 == 2)
        {
          WTF::StringImpl::~StringImpl(v338, v207, v208, v209, v210, v211, v212, v213);
          WTF::fastFree(v384, v385, v386, v387, v388, v389, v390, v391);
        }
        else
        {
          *(_DWORD *)v338 -= 2;
        }
      }
      v14 = v418;
    }
    v72 = (uint64_t)v424;
  }
  v220 = v449;
  v449 = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
    {
      WTF::StringImpl::~StringImpl(v220, v207, v208, v209, v210, v211, v212, v213);
      WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
    }
    else
    {
      *(_DWORD *)v220 -= 2;
    }
  }
  if (v457 != -1)
    ((void (*)(__int128 *, const char **))off_1E3583768[v457])(&v440, &v450);
  v221 = *(WTF::StringImpl **)v459;
  *(_QWORD *)v459 = 0;
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
    {
      WTF::StringImpl::~StringImpl(v221, v207, v208, v209, v210, v211, v212, v213);
      WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
    }
    else
    {
      *(_DWORD *)v221 -= 2;
    }
  }
  v75 = (WTF::MonotonicTime *)JSC::Parser<JSC::Lexer<char16_t>>::~Parser((uint64_t)v425, v207, v208, v209, v210, v211, v212, v213);
LABEL_37:
  if (byte_1ECF4C340)
  {
    do
      v304 = __ldaxr(&JSC::globalParseCount);
    while (__stlxr(v304 + 1, &JSC::globalParseCount));
  }
  v83 = (_QWORD *)(v72 + 37504);
  if (unk_1ECF4C33E)
  {
    v305 = WTF::MonotonicTime::now(v75);
    JSC::ParseHash::ParseHash((JSC::ParseHash *)v425, v420);
    v306 = "Parsed #";
    if (!v56)
      v306 = "Failed to parse #";
    v450 = v306;
    v459[0] = DWORD1(v425[0]);
    LODWORD(v458) = v425[0];
    *(double *)&v440 = (v305 - v25) * 1000.0;
    WTF::dataLog<char const*,JSC::CodeBlockHash,char [3],JSC::CodeBlockHash,char [5],double,char [5],char [2]>(&v450, (unsigned int *)&v458, "/#", v459, " in ", (double *)&v440, " ms.", "\n");
  }
  if (!v56)
  {
    SlowCase = 0;
    v144 = v423;
    v147 = v419;
    goto LABEL_103;
  }
  v84 = *(unsigned __int16 *)(v14 + 51);
  v85 = *(_DWORD **)(v14 + 72);
  if (v85)
    *v85 += 2;
  v86 = (v84 >> 4) & 3;
  v87 = *(WTF::StringImpl **)(v56 + 232);
  *(_QWORD *)(v56 + 232) = v85;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *(_QWORD *)(v56 + 192);
  *(_DWORD *)(v56 + 240) = v86;
  v89 = *(_WORD *)(v56 + 164);
  if (*(_BYTE *)(v56 + 200))
  {
    if (v88)
      v301 = *(_DWORD *)(v88 - 12);
    else
      v301 = 0;
    v302 = *(_QWORD **)(v56 + 208);
    if (v302)
    {
      v302 = (_QWORD *)*v302;
      if (v302)
        LODWORD(v302) = *((_DWORD *)v302 - 3);
      v72 = (uint64_t)v424;
      v14 = v418;
    }
    v95 = v301 + (_DWORD)v302 != 0;
    goto LABEL_63;
  }
  if (v88)
  {
    v90 = *(unsigned int *)(v88 - 4);
    v91 = v88 + 16 * v90;
    if (*(_DWORD *)(v88 - 12))
    {
      v92 = v88;
      if ((_DWORD)v90)
      {
        v93 = 16 * v90;
        v92 = v88;
        while ((unint64_t)(*(_QWORD *)v92 + 1) <= 1)
        {
          v92 += 16;
          v93 -= 16;
          if (!v93)
          {
            v92 = v91;
            goto LABEL_53;
          }
        }
      }
      goto LABEL_53;
    }
    v92 = v88 + 16 * v90;
  }
  else
  {
    v92 = 0;
    v90 = 0;
  }
  v91 = v88 + 16 * v90;
LABEL_53:
  if (v88)
    v94 = v88 + 16 * *(unsigned int *)(v88 - 4);
  else
    v94 = 0;
  if (v94 == v92)
  {
    v95 = 0;
  }
  else
  {
    do
    {
      v95 = *(_WORD *)(v92 + 8) & 1;
      if (v95)
        break;
      v96 = v92 + 16;
      v92 = v91;
      if (v96 != v91)
      {
        v92 = v96;
        while ((unint64_t)(*(_QWORD *)v92 + 1) <= 1)
        {
          v92 += 16;
          if (v92 == v91)
          {
            v92 = v91;
            break;
          }
        }
      }
    }
    while (v92 != v94);
  }
LABEL_63:
  v98 = *(_QWORD *)(v14 + 32);
  v97 = *(_QWORD *)(v14 + 40);
  v99 = *(_QWORD *)(v14 + 8);
  v100 = *(unsigned __int16 *)(v14 + 48);
  v101 = *(_WORD *)(v14 + 51);
  *(_WORD *)(v14 + 51) = v101 & 0xFFF3 | (4 * (*(_BYTE *)(v56 + 166) & 3));
  v102 = 0x8000000000000000;
  if (!v95)
    v102 = 0;
  *(_QWORD *)(v14 + 8) = v102 & 0x8000000000000000 | v99 & 0x7FFFFFFFFFFFFFFFLL;
  *(_WORD *)(v14 + 48) = v100 & 0xC000 | v89 & 0x3FFF;
  if (((v98 >> 31) & 1) != 0)
    v103 = 16 * (*(_BYTE *)(v14 + 50) == 19);
  else
    v103 = 16;
  LOBYTE(v425[0]) = (v97 >> 62) & 2 | (v423 == 1) | (4 * ((v413 & 0x80000000) != 0)) | ((_BYTE)v422 << 6) | (v100 >> 11) & 0x18 | (32 * ((v98 & 0x80000000) != 0));
  BYTE1(v425[0]) = v415;
  BYTE2(v425[0]) = (v97 >> 29) & 4 | (v101 >> 6) | v103 | 0x20;
  v104 = (_QWORD *)v83[425];
  if (!v104)
    v104 = (_QWORD *)JSC::GCClient::Heap::unlinkedFunctionCodeBlockSpaceSlow((JSC::Heap **)(v72 + 37552));
  SlowCase = v104[3];
  if (SlowCase < v104[4])
    goto LABEL_70;
  SlowCase = v104[5];
  if ((SlowCase & 1) == 0)
  {
    v307 = *(_QWORD *)(SlowCase + 8) ^ v104[6];
    v104[4] = SlowCase + HIDWORD(v307);
    v104[5] = SlowCase + (int)v307;
LABEL_70:
    v104[3] = SlowCase + 224;
    goto LABEL_71;
  }
  JSC::sanitizeStackForVM((JSC *)v72, v76, v77, v78, v79, v80, v81, v82);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v104, v72 + 192, 224, 0, 0);
LABEL_71:
  *(_DWORD *)SlowCase = 0;
  v105 = (WTF::MonotonicTime *)JSC::UnlinkedCodeBlock::UnlinkedCodeBlock(SlowCase, v72, v83[529], 2, (unsigned __int8 *)v425, v414);
  if (*(_BYTE *)(v72 + 755))
    __dmb(0xAu);
  v106 = *(_QWORD *)(v14 + 88);
  v417 = v83;
  if (v106)
  {
    v107 = *(_DWORD **)(v106 + 40);
    if (v107)
      ++*v107;
  }
  else
  {
    v107 = 0;
  }
  *(_QWORD *)&v458 = v107;
  v108 = v106 == 0;
  if (v106)
    v109 = (unsigned int **)(v106 + 48);
  else
    v109 = 0;
  v110 = (_QWORD *)(v106 + 64);
  if (v108)
    v111 = 0;
  else
    v111 = v110;
  v112 = 0.0;
  if (unk_1ECF4C33F)
    v112 = WTF::MonotonicTime::now(v105);
  ++*(_DWORD *)(v72 + 916);
  v113 = (JSC::BytecodeGenerator *)WTF::fastMalloc((WTF *)0x2F0);
  v114 = (JSC::BytecodeGenerator *)JSC::BytecodeGenerator::BytecodeGenerator((unint64_t)v113, v72, v56, (_BYTE *)SlowCase, v414, (_DWORD **)&v458, v109, v111);
  v459[0] = 0;
  JSC::BytecodeGenerator::generate(v114, v459, v115, v116, v117, v118, v119, v120, (uint64_t)v425);
  if (unk_1ECF4C33F)
  {
    v308 = WTF::MonotonicTime::now(v121);
    v309 = "Failed to compile #";
    if (!(_BYTE)v429)
      v309 = "Compiled #";
    v450 = v309;
    JSC::CodeBlockHash::CodeBlockHash(&v449, v420, *(_DWORD *)(SlowCase + 20) >> 31);
    *(double *)&v440 = (v308 - v112) * 1000.0;
    WTF::dataLog<char const*,JSC::CodeBlockHash,char [16],unsigned int,char [18],double,char [5],char [2]>(&v450, &v449, " into bytecode ", v459, " instructions in ", (double *)&v440, " ms.", "\n");
  }
  JSC::BytecodeGenerator::~BytecodeGenerator(v113, v122, v123, v124, v125, v126, v127, v128);
  WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
  v143 = *(_DWORD *)(v72 + 916) - 1;
  *(_DWORD *)(v72 + 916) = v143;
  v144 = v423;
  v83 = v417;
  if (*(unsigned __int8 *)(v72 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v143)
  {
    *(_BYTE *)(v72 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v72 + 192, 0);
  }
  v145 = v425[3];
  v147 = v419;
  v146 = v420;
  *(_OWORD *)(v419 + 32) = v425[2];
  *(_OWORD *)(v419 + 48) = v145;
  v148 = v425[1];
  *(_OWORD *)v419 = v425[0];
  *(_OWORD *)(v419 + 16) = v148;
  v149 = v427;
  v427 = 0;
  v150 = *(WTF::StringImpl **)(v419 + 72);
  *(_QWORD *)(v419 + 64) = v426;
  *(_QWORD *)(v419 + 72) = v149;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
    {
      WTF::StringImpl::~StringImpl(v150, v137, (uint64_t)v420, v138, v139, v140, v141, v142);
      WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
      v146 = v420;
      v246 = v427;
      *(_DWORD *)(v419 + 80) = v428;
      *(_WORD *)(v419 + 84) = v429;
      v427 = 0;
      if (v246)
      {
        if (*(_DWORD *)v246 == 2)
        {
          WTF::StringImpl::~StringImpl(v246, v137, (uint64_t)v420, v138, v139, v140, v141, v142);
          WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
          v146 = v420;
        }
        else
        {
          *(_DWORD *)v246 -= 2;
        }
      }
      goto LABEL_89;
    }
    *(_DWORD *)v150 -= 2;
  }
  *(_DWORD *)(v419 + 80) = v428;
  *(_WORD *)(v419 + 84) = v429;
LABEL_89:
  if (*(_BYTE *)(v419 + 84))
    SlowCase = 0;
  else
    (*(void (**)(SourceProvider *, unint64_t, SourceCode *, _QWORD, unint64_t))(*(_QWORD *)v146->var0.var0 + 48))(v146->var0.var0, v14, v146, v423, SlowCase);
  if ((_QWORD)v458)
  {
    if (*(_DWORD *)v458 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink((JSC::TDZEnvironmentLink *)v458);
      WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
    }
    else
    {
      --*(_DWORD *)v458;
    }
  }
  v151 = *(WTF::StringImpl **)(v56 + 232);
  *(_QWORD *)(v56 + 232) = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, v137, (uint64_t)v146, v138, v139, v140, v141, v142);
      WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  *(_QWORD *)v56 = off_1E3596CB0;
  *(_QWORD *)(v56 + 40) = &unk_1E3596D50;
  *(_QWORD *)(v56 + 104) = &unk_1E3596D70;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(v56 + 192), v137, (uint64_t)v146, v138, v139, v140, v141, v142);
  v159 = *(_DWORD **)(v56 + 168);
  *(_QWORD *)(v56 + 168) = 0;
  if (v159)
  {
    if (v159[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v159 + 8))(v159);
    else
      --v159[2];
  }
  *(_QWORD *)(v56 + 104) = &off_1E357CA78;
  v160 = *(_QWORD *)(v56 + 136);
  if (v160)
  {
    *(_QWORD *)(v56 + 136) = 0;
    *(_DWORD *)(v56 + 144) = 0;
    WTF::fastFree(v160, v152, v153, v154, v155, v156, v157, v158);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)(v56 + 112), (WTF::AtomStringImpl *)v152, v153, v154, v155, v156, v157, v158);
  *(_QWORD *)(v56 + 40) = off_1E357CA98;
  JSC::ParserArena::~ParserArena((JSC::ParserArena *)(v56 + 48), v161, v162, v163, v164, v165, v166, v167);
  WTF::fastFree(v56, v168, v169, v170, v171, v172, v173, v174);
LABEL_103:
  if (*(_BYTE *)(v147 + 84))
    return 0;
  if (v144)
  {
    if (v144 != 1)
      goto LABEL_106;
    *(_QWORD *)(v14 + 64) = SlowCase;
    if (!SlowCase)
      goto LABEL_106;
  }
  else
  {
    *(_QWORD *)(v14 + 56) = SlowCase;
    if (!SlowCase)
      goto LABEL_106;
  }
  if (*(_DWORD *)(v72 + 760) >= *(unsigned __int8 *)(v14 + 7))
    JSC::Heap::writeBarrierSlowPath(v72 + 192, v14);
LABEL_106:
  if ((v14 & 8) != 0)
  {
    v295 = *(unsigned __int8 *)(v14 - 76);
    v296 = (v295 >> 3) & 0x1C;
    v297 = 1 << v295;
    v298 = (unsigned int *)(v72 + 37464 + v296);
    while (1)
    {
      v299 = *v298;
      if ((*v298 & v297) != 0)
        break;
      v300 = __ldxr(v298);
      if (v300 == v299)
      {
        if (!__stxr(v299 | v297, v298))
          return SlowCase;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v175 = *(_DWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFC000) + 12);
    v176 = *(_OWORD **)(*(_QWORD *)(*v83 + (v175 & 0xFFFFFFF8) + 8) + 8 * (v175 & 7));
    if (!v176)
      v176 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v72 + 37448), v175, v77, v78, v79, v80, v81, v82);
    v177 = 1 << (v14 >> 4);
    v178 = (unint64_t *)v176 + ((v14 >> 10) & 0xF);
    while (1)
    {
      v179 = *v178;
      if ((*v178 & v177) != 0)
        break;
      v180 = __ldxr(v178);
      if (v180 == v179)
      {
        if (!__stxr(v179 | v177, v178))
          return SlowCase;
      }
      else
      {
        __clrex();
      }
    }
  }
  return SlowCase;
}

void JSC::UnlinkedFunctionExecutable::decodeCachedCodeBlocks(JSC::UnlinkedFunctionExecutable *this, JSC::VM *a2)
{
  JSC::Decoder *v4;
  int v5;
  unint64_t *v6;
  int v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (JSC::Decoder *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  v6 = (unint64_t *)((char *)this + 64);
  v5 = *((_DWORD *)this + 16);
  v7 = *((_DWORD *)this + 17);
  ++*((_DWORD *)a2 + 229);
  if (v5)
    JSC::decodeFunctionCodeBlock((uint64_t)v4, v5, (unint64_t *)this + 7, (unint64_t)this);
  if (v7)
    JSC::decodeFunctionCodeBlock((uint64_t)v4, v7, v6, (unint64_t)this);
  else
    *v6 = 0;
  __dmb(0xAu);
  *((_QWORD *)this + 4) &= ~0x8000000000000000;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  v8 = *((_DWORD *)a2 + 229) - 1;
  *((_DWORD *)a2 + 229) = v8;
  if (*((unsigned __int8 *)a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v9 = v8 == 0;
  else
    v9 = 0;
  if (v9)
  {
    *((_BYTE *)a2 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)a2 + 192, 0);
    if (!v4)
      return;
  }
  else if (!v4)
  {
    return;
  }
  if (*(_DWORD *)v4 == 1)
  {
    JSC::Decoder::~Decoder(v4);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    --*(_DWORD *)v4;
  }
}

uint64_t JSC::UnlinkedFunctionExecutable::ensureRareDataSlow(JSC::UnlinkedFunctionExecutable *this)
{
  uint64_t result;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::UnlinkedFunctionExecutable::RareData *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = -1;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  v10 = (JSC::UnlinkedFunctionExecutable::RareData *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = result;
  if (v10)
  {
    JSC::UnlinkedFunctionExecutable::RareData::~RareData(v10, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    return *((_QWORD *)this + 11);
  }
  return result;
}

_BYTE **JSC::UnlinkedFunctionExecutable::finalizeUnconditionally(JSC::VM &,JSC::CollectionScope)::$_0::operator()(_BYTE **result, unint64_t *a2)
{
  unint64_t v2;
  _BYTE **v3;

  v2 = *a2;
  if (*a2)
  {
    if ((v2 & 8) != 0)
    {
      if ((*(_BYTE *)(v2 - 79) & 1) != 0)
      {
LABEL_5:
        v3 = result + 2;
LABEL_8:
        **v3 = 1;
        return result;
      }
    }
    else if (*(_DWORD *)(v2 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)*result + 108)
           && ((*(_QWORD *)((v2 & 0xFFFFFFFFFFFFC000) + 8 * ((v2 >> 10) & 0xF) + 0x28) >> (v2 >> 4)) & 1) != 0)
    {
      goto LABEL_5;
    }
    *a2 = 0;
    v3 = result + 1;
    goto LABEL_8;
  }
  return result;
}

BOOL JSC::IsoCellSet::remove(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if ((a2 & 8) != 0)
  {
    v8 = *(unsigned __int8 *)(a2 - 76);
    v9 = a1 + ((v8 >> 3) & 0x1C);
    v10 = 1 << v8;
    v11 = (unsigned int *)(v9 + 16);
    while (1)
    {
      v12 = *v11;
      result = (*v11 & v10) != 0;
      if ((*v11 & v10) == 0)
        break;
      v13 = __ldxr(v11);
      if (v13 == v12)
      {
        if (!__stxr(v12 & ~v10, v11))
          return result;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56)
                               + (*(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                               + 8)
                   + 8 * (*(_DWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFC000) + 12) & 7));
    if (v2)
    {
      v3 = 1 << (a2 >> 4);
      v4 = (unint64_t *)(v2 + 8 * ((a2 >> 10) & 0xF));
      while (1)
      {
        v5 = *v4;
        result = (*v4 & v3) != 0;
        if ((*v4 & v3) == 0)
          break;
        v7 = __ldxr(v4);
        if (v7 == v5)
        {
          if (!__stxr(v5 & ~v3, v4))
            return result;
        }
        else
        {
          __clrex();
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void JSC::UnlinkedMetadataTable::finalize(JSC::UnlinkedMetadataTable *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  char *v15;
  int16x8_t *v16;
  int16x8_t *v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  char *v21;
  _DWORD *v22;

  v9 = *((_BYTE *)this + 4);
  *((_BYTE *)this + 4) = v9 | 2;
  v10 = *((_QWORD *)this + 2);
  if ((v9 & 1) != 0)
  {
    v11 = 0;
    v12 = 96;
    do
    {
      v13 = *(_DWORD *)(v10 + v11 * 4);
      *(_DWORD *)(v10 + v11 * 4) = v12;
      if (v13)
        v12 = ((v12 + JSC::metadataAlignments[v11] - 1) & -JSC::metadataAlignments[v11]) + JSC::metadataSizes[v11] * v13;
      ++v11;
    }
    while (v11 != 47);
    *(_DWORD *)(v10 + 188) = v12;
    *((_BYTE *)this + 4) = *((_BYTE *)this + 4) & 0xF7 | (8 * ((v12 & 0xFFFF0000) != 0));
    v14 = (16 * *((_DWORD *)this + 2));
    if (v12 >= 0x10000)
    {
      v15 = (char *)WTF::fastMalloc((WTF *)(v14 + v12 + 208));
      bzero(v15, v14 + 112);
      v21 = &v15[v14];
      bzero(&v15[v14 + 304], v12 - 96);
      v22 = (_DWORD *)*((_QWORD *)this + 2);
      *((_DWORD *)v21 + 28) = *v22 + 192;
      *((_DWORD *)v21 + 29) = v22[1] + 192;
      *((_DWORD *)v21 + 30) = v22[2] + 192;
      *((_DWORD *)v21 + 31) = v22[3] + 192;
      *((_DWORD *)v21 + 32) = v22[4] + 192;
      *((_DWORD *)v21 + 33) = v22[5] + 192;
      *((_DWORD *)v21 + 34) = v22[6] + 192;
      *((_DWORD *)v21 + 35) = v22[7] + 192;
      *((_DWORD *)v21 + 36) = v22[8] + 192;
      *((_DWORD *)v21 + 37) = v22[9] + 192;
      *((_DWORD *)v21 + 38) = v22[10] + 192;
      *((_DWORD *)v21 + 39) = v22[11] + 192;
      *((_DWORD *)v21 + 40) = v22[12] + 192;
      *((_DWORD *)v21 + 41) = v22[13] + 192;
      *((_DWORD *)v21 + 42) = v22[14] + 192;
      *((_DWORD *)v21 + 43) = v22[15] + 192;
      *((_DWORD *)v21 + 44) = v22[16] + 192;
      *((_DWORD *)v21 + 45) = v22[17] + 192;
      *((_DWORD *)v21 + 46) = v22[18] + 192;
      *((_DWORD *)v21 + 47) = v22[19] + 192;
      *((_DWORD *)v21 + 48) = v22[20] + 192;
      *((_DWORD *)v21 + 49) = v22[21] + 192;
      *((_DWORD *)v21 + 50) = v22[22] + 192;
      *((_DWORD *)v21 + 51) = v22[23] + 192;
      *((_DWORD *)v21 + 52) = v22[24] + 192;
      *((_DWORD *)v21 + 53) = v22[25] + 192;
      *((_DWORD *)v21 + 54) = v22[26] + 192;
      *((_DWORD *)v21 + 55) = v22[27] + 192;
      *((_DWORD *)v21 + 56) = v22[28] + 192;
      *((_DWORD *)v21 + 57) = v22[29] + 192;
      *((_DWORD *)v21 + 58) = v22[30] + 192;
      *((_DWORD *)v21 + 59) = v22[31] + 192;
      *((_DWORD *)v21 + 60) = v22[32] + 192;
      *((_DWORD *)v21 + 61) = v22[33] + 192;
      *((_DWORD *)v21 + 62) = v22[34] + 192;
      *((_DWORD *)v21 + 63) = v22[35] + 192;
      *((_DWORD *)v21 + 64) = v22[36] + 192;
      *((_DWORD *)v21 + 65) = v22[37] + 192;
      *((_DWORD *)v21 + 66) = v22[38] + 192;
      *((_DWORD *)v21 + 67) = v22[39] + 192;
      *((_DWORD *)v21 + 68) = v22[40] + 192;
      *((_DWORD *)v21 + 69) = v22[41] + 192;
      *((_DWORD *)v21 + 70) = v22[42] + 192;
      *((_DWORD *)v21 + 71) = v22[43] + 192;
      *((_DWORD *)v21 + 72) = v22[44] + 192;
      *((_DWORD *)v21 + 73) = v22[45] + 192;
      *((_DWORD *)v21 + 74) = v22[46] + 192;
      *((_DWORD *)v21 + 75) = v22[47] + 192;
    }
    else
    {
      v15 = (char *)WTF::fastMalloc((WTF *)(v14 + 16 + v12));
      bzero(v15, v14 + 16);
      v16 = (int16x8_t *)&v15[v14];
      bzero(&v15[v14 + 112], v12 - 96);
      v17 = (int16x8_t *)*((_QWORD *)this + 2);
      v18 = vuzp1q_s16(v17[2], v17[3]);
      v16[1] = vuzp1q_s16(*v17, v17[1]);
      v16[2] = v18;
      v19 = vuzp1q_s16(v17[6], v17[7]);
      v16[3] = vuzp1q_s16(v17[4], v17[5]);
      v16[4] = v19;
      v20 = vuzp1q_s16(v17[10], v17[11]);
      v16[5] = vuzp1q_s16(v17[8], v17[9]);
      v16[6] = v20;
    }
    v10 = *((_QWORD *)this + 2);
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 2) = v15;
}

void JSC::UnlinkedMetadataTable::~UnlinkedMetadataTable(JSC::UnlinkedMetadataTable *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*((_BYTE *)this + 4) & 1) != 0)
    WTF::fastFree(*((_QWORD *)this + 2), a2, a3, a4, a5, a6, a7, a8);
}

void JSC::UnlinkedProgramCodeBlock::destroy(JSC::UnlinkedProgramCodeBlock *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  JSC::VariableEnvironment::~VariableEnvironment((JSC::UnlinkedProgramCodeBlock *)((char *)this + 240), a2, a3, a4, a5, a6, a7, a8);
  JSC::VariableEnvironment::~VariableEnvironment((JSC::UnlinkedProgramCodeBlock *)((char *)this + 216), v9, v10, v11, v12, v13, v14, v15);
  JSC::UnlinkedCodeBlock::~UnlinkedCodeBlock((unint64_t)this, v16, v17, v18, v19, v20, v21, v22);
}

unint64_t JSC::ValueRecovery::recover(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (*(_BYTE *)a1 == 17)
    return *(_QWORD *)(a1 + 1);
  switch(*(_BYTE *)a1)
  {
    case 8:
      v3 = *(_QWORD *)(a1 + 1);
      if ((int)v3 < 0x40000000)
        goto LABEL_5;
      v5 = *(_QWORD *)(a2 + 16);
      v6 = (v3 - 0x40000000);
      if (v6 >= *(unsigned int *)(v5 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x198222C60);
      }
      goto LABEL_8;
    case 9:
      v7 = *(_QWORD *)(a1 + 1);
      if ((int)v7 >= 0x40000000)
      {
        v10 = *(_QWORD *)(a2 + 16);
        v11 = (v7 - 0x40000000);
        if (v11 >= *(unsigned int *)(v10 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x198222C84);
        }
        v8 = (unsigned int *)(*(_QWORD *)(v10 + 160) + 8 * v11);
      }
      else
      {
        v8 = (unsigned int *)(a2 + 8 * (int)v7);
      }
      v9 = *v8;
      return v9 | 0xFFFE000000000000;
    case 0xA:
      v19 = *(_QWORD *)(a1 + 1);
      if ((int)v19 >= 0x40000000)
      {
        v26 = *(_QWORD *)(a2 + 16);
        v27 = (v19 - 0x40000000);
        if (v27 >= *(unsigned int *)(v26 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x198222C9CLL);
        }
        v20 = (uint64_t *)(*(_QWORD *)(v26 + 160) + 8 * v27);
      }
      else
      {
        v20 = (uint64_t *)(a2 + 8 * (int)v19);
      }
      v21 = *v20;
      if (v21 >> 12 == (int)(v21 >> 12))
        return ((unint64_t)v21 >> 12) | 0xFFFE000000000000;
      v14 = (double)(v21 >> 12);
      goto LABEL_49;
    case 0xB:
      v16 = *(_QWORD *)(a1 + 1);
      if ((int)v16 >= 0x40000000)
      {
        v24 = *(_QWORD *)(a2 + 16);
        v25 = (v16 - 0x40000000);
        if (v25 >= *(unsigned int *)(v24 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x198222C94);
        }
        v17 = (uint64_t *)(*(_QWORD *)(v24 + 160) + 8 * v25);
      }
      else
      {
        v17 = (uint64_t *)(a2 + 8 * (int)v16);
      }
      v18 = *v17;
      if (v18 == (int)v18)
      {
        result = v18 | 0xFFFE000000000000;
      }
      else
      {
        v14 = (double)v18;
LABEL_49:
        result = *(_QWORD *)&v14 + 0x2000000000000;
      }
      break;
    case 0xC:
      v12 = *(_QWORD *)(a1 + 1);
      if ((int)v12 >= 0x40000000)
      {
        v22 = *(_QWORD *)(a2 + 16);
        v23 = (v12 - 0x40000000);
        if (v23 >= *(unsigned int *)(v22 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x198222C8CLL);
        }
        v13 = (double *)(*(_QWORD *)(v22 + 160) + 8 * v23);
      }
      else
      {
        v13 = (double *)(a2 + 8 * (int)v12);
      }
      v14 = *v13;
      if ((*(_QWORD *)v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF7FFFFFFFFFFFFLL
        || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
      {
        goto LABEL_49;
      }
      v9 = (int)v14;
      if (v14 != (double)(int)v9 || !(_DWORD)v9 && (*(_QWORD *)&v14 & 0x8000000000000000) != 0)
        goto LABEL_49;
      return v9 | 0xFFFE000000000000;
    case 0xD:
      v3 = *(_QWORD *)(a1 + 1);
      if ((int)v3 < 0x40000000)
        goto LABEL_5;
      v5 = *(_QWORD *)(a2 + 16);
      v6 = (v3 - 0x40000000);
      if (v6 >= *(unsigned int *)(v5 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x198222AACLL);
      }
      goto LABEL_8;
    case 0xE:
      v3 = *(_QWORD *)(a1 + 1);
      if ((int)v3 < 0x40000000)
      {
LABEL_5:
        v4 = a2 + 8 * (int)v3;
      }
      else
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = (v3 - 0x40000000);
        if (v6 >= *(unsigned int *)(v5 + 172))
        {
          __break(0xC471u);
          JUMPOUT(0x198222B98);
        }
LABEL_8:
        v4 = *(_QWORD *)(v5 + 160) + 8 * v6;
      }
      return *(_QWORD *)v4;
    default:
      __break(0xC471u);
      JUMPOUT(0x198222BECLL);
  }
  return result;
}

uint64_t JSC::ValueRecovery::dumpInContext(JSC::ValueRecovery *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;
  const char *v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  WTF::PrintStream *v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  WTF::PrintStream *v24;
  WTF::PrintStream *v25;
  float v26;
  unsigned int v27;
  WTF::PrintStream *v28;
  WTF::PrintStream *v29;
  WTF::PrintStream *v30;
  const char *v31;
  uint64_t result;
  uint64_t v33;
  WTF::PrintStream *v34;
  WTF::PrintStream *v35;
  const char *v36;
  WTF::PrintStream *v37;
  WTF::PrintStream *v39;
  JSC::Structure *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;

  switch(*(_BYTE *)this)
  {
    case 0:
      v4 = *(_QWORD *)((char *)this + 1);
      v5 = (*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v6 = v5;
      v7 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
      goto LABEL_18;
    case 1:
      v8 = *(_QWORD *)((char *)this + 1);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v10 = v9;
      v11 = "int32(";
      goto LABEL_8;
    case 2:
      v8 = *(_QWORD *)((char *)this + 1);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v10 = v9;
      v11 = "int52(";
      goto LABEL_8;
    case 3:
      v8 = *(_QWORD *)((char *)this + 1);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v10 = v9;
      v11 = "strictInt52(";
      goto LABEL_8;
    case 4:
      v8 = *(_QWORD *)((char *)this + 1);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v10 = v9;
      v11 = "BOOL(";
      goto LABEL_8;
    case 5:
      v8 = *(_QWORD *)((char *)this + 1);
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v10 = v9;
      v11 = "cell(";
LABEL_8:
      WTF::PrintStream::printf(v9, "%s", v11);
      v12 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
      goto LABEL_9;
    case 6:
      v4 = *(_QWORD *)((char *)this + 1);
      v5 = (*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v6 = v5;
      v7 = &JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister;
LABEL_18:
      v21 = &v7[2 * (char)v4];
      v22 = *v21;
      v23 = v21[1];
      v24 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      WTF::PrintStream::printf(v24, "%s", "%");
      v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 32))(v24);
      if (v22)
      {
        v27 = (_DWORD)v23 - 1;
        if (!v23)
          v27 = 0;
        WTF::StringImpl::utf8ForCharacters(v22, v27, (uint64_t)&v42, v26);
      }
      else
      {
        v41 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v41 = 1;
        *(_QWORD *)(v41 + 8) = 0;
        *(_BYTE *)(v41 + 16) = 0;
        v42 = v41;
        v43 = 0;
      }
      WTF::printExpectedCStringHelper(v25, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v24 + 40))(v24);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      goto LABEL_31;
    case 7:
      v8 = *(_QWORD *)((char *)this + 1);
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      WTF::PrintStream::printf(v10, "%s", "double(");
      v12 = &JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister;
LABEL_9:
      v13 = &v12[2 * (char)v8];
      v14 = *v13;
      v15 = v13[1];
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::PrintStream::printf(v16, "%s", "%");
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 32))(v16);
      if (v14)
      {
        v19 = (_DWORD)v15 - 1;
        if (!v15)
          v19 = 0;
        WTF::StringImpl::utf8ForCharacters(v14, v19, (uint64_t)&v42, v18);
      }
      else
      {
        v20 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = 0;
        *(_BYTE *)(v20 + 16) = 0;
        v42 = v20;
        v43 = 0;
      }
      WTF::printExpectedCStringHelper(v17, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v16 + 40))(v16);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      WTF::PrintStream::printf(v10, "%s");
      goto LABEL_31;
    case 8:
      LODWORD(v42) = *(_QWORD *)((char *)this + 1);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      WTF::PrintStream::printf(v28, "%s", "*");
      JSC::VirtualRegister::dump((unsigned int *)&v42, v28);
      goto LABEL_31;
    case 9:
      LODWORD(v42) = *(_QWORD *)((char *)this + 1);
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v30 = v29;
      v31 = "*int32(";
      goto LABEL_30;
    case 0xA:
      LODWORD(v42) = *(_QWORD *)((char *)this + 1);
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v30 = v29;
      v31 = "*int52(";
      goto LABEL_30;
    case 0xB:
      LODWORD(v42) = *(_QWORD *)((char *)this + 1);
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v30 = v29;
      v31 = "*strictInt52(";
      goto LABEL_30;
    case 0xC:
      LODWORD(v42) = *(_QWORD *)((char *)this + 1);
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v30 = v29;
      v31 = "*double(";
      goto LABEL_30;
    case 0xD:
      LODWORD(v42) = *(_QWORD *)((char *)this + 1);
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v30 = v29;
      v31 = "*cell(";
      goto LABEL_30;
    case 0xE:
      LODWORD(v42) = *(_QWORD *)((char *)this + 1);
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v30 = v29;
      v31 = "*BOOL(";
LABEL_30:
      WTF::PrintStream::printf(v29, "%s", v31);
      JSC::VirtualRegister::dump((unsigned int *)&v42, v30);
      WTF::PrintStream::printf(v30, "%s");
      goto LABEL_31;
    case 0xF:
      v33 = *(_QWORD *)((char *)this + 1);
      v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v35 = v34;
      v36 = "DirectArguments(";
      goto LABEL_34;
    case 0x10:
      v33 = *(_QWORD *)((char *)this + 1);
      v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *))(*(_QWORD *)a2 + 32))(a2, a2, a3);
      v35 = v34;
      v36 = "ClonedArguments(";
LABEL_34:
      WTF::PrintStream::printf(v34, "%s", v36);
      v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v35 + 32))(v35);
      WTF::PrintStream::printf(v37, "%u", v33);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v35 + 40))(v35);
      WTF::PrintStream::printf(v35, "%s", ")");
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    case 0x11:
      v42 = *(_QWORD *)((char *)this + 1);
      v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v39, "%s", "[");
      v40 = 0;
      if (v42 && (v42 & 0xFFFE000000000002) == 0)
        v40 = (JSC::Structure *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE));
      JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v42, v39, a3, v40);
      WTF::PrintStream::printf(v39, "%s");
LABEL_31:
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    case 0x12:
      result = WTF::PrintStream::printf(a2, "!", a3);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198223344);
  }
  return result;
}

uint64_t JSC::VariableWriteFireDetail::dump(JSC::VariableWriteFireDetail *this, WTF::PrintStream *a2)
{
  unint64_t v3;
  uint64_t *v4;
  WTF::PrintStream *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  const char *v18;
  JSC::Structure *v19;
  unint64_t v21;
  int v22;
  int v23;
  char v24;

  v3 = *((_QWORD *)this + 1);
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  v21 = v3;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "Write to ");
  v6 = *v4;
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
  v14 = v7;
  if (!v6)
  {
    v18 = "<null property name>";
LABEL_7:
    WTF::PrintStream::printf(v7, "%s", v18);
    goto LABEL_11;
  }
  v15 = *v4;
  if (!*v4)
  {
    v18 = "(null StringImpl*)";
    goto LABEL_7;
  }
  v16 = *(char **)(v15 + 8);
  v17 = *(unsigned int *)(v15 + 4);
  if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    WTF::StringImpl::utf8ForCharacters(v16, v17, (uint64_t)&v22, v13);
  else
    WTF::StringImpl::utf8ForCharacters((uint64_t)v16, v17, 0, v8, v9, v10, v11, v12, (uint64_t)&v22);
  WTF::printExpectedCStringHelper(v14, "StringImpl*", &v22);
  if (v23 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
LABEL_11:
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printf(v5, "%s", " in ");
  v19 = 0;
  if (v3 && (v3 & 0xFFFE000000000002) == 0)
    v19 = (JSC::Structure *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v21, v5, 0, v19);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t *JSC::VariableWriteFireDetail::touch(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD v9[3];

  v9[0] = &off_1E3583740;
  v9[1] = a3;
  v9[2] = a4;
  if (*(_BYTE *)(a2 + 4))
  {
    if (*(_BYTE *)(a2 + 4) == 1)
      return JSC::WatchpointSet::fireAllSlow(a2, (JSC::VM *)result, v9, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    __dmb(0xAu);
    *(_BYTE *)(a2 + 4) = 1;
    __dmb(0xAu);
  }
  return result;
}

void JSC::VariableWriteFireDetail::~VariableWriteFireDetail(JSC::VariableWriteFireDetail *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::UnlinkedFunctionExecutable::RareData::~RareData(JSC::UnlinkedFunctionExecutable::RareData *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::TDZEnvironmentLink *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v9 = *((_QWORD *)this + 8);
  if (v9)
  {
    v64 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v64)
    {
      v65 = (WTF::StringImpl **)*((_QWORD *)this + 8);
      do
      {
        v66 = *v65;
        if (*v65 != (WTF::StringImpl *)-1)
        {
          *v65 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
            {
              WTF::StringImpl::~StringImpl(v66, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
            }
            else
            {
              *(_DWORD *)v66 -= 2;
            }
          }
        }
        v65 += 2;
        --v64;
      }
      while (v64);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    v12 = (WTF::StringImpl **)(v10 + 2);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v13 = 40 * v11;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
        v12 += 5;
        v13 -= 40;
      }
      while (v13);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v23)
  {
    v25 = (WTF::StringImpl **)(v23 + 2);
    v24 = *v23;
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      do
      {
        v27 = *v25;
        *v25 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
    WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = (JSC::TDZEnvironmentLink *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v36);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      --*(_DWORD *)v36;
    }
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v39 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v39)
  {
    if (v39[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
    else
      --v39[2];
  }
}

void JSC::SourceProvider::setSourceURLDirective(JSC::SourceProvider *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v9 += 2;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

void JSC::SourceProvider::setSourceMappingURLDirective(JSC::SourceProvider *this, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v9 += 2;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t WTF::dataLog<char [37],WTF::String,char [10],int,char [15],WTF::UniquedStringImpl *,char [2],char [2]>(const char *a1, WTF::PrintStream *a2, const char *a3, _DWORD *a4, const char *a5, uint64_t *a6, const char *a7, const char *a8)
{
  unint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  char v37;
  char **v38;
  char *v39;
  int v40;

  v16 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v16 != -1)
  {
    v39 = &v37;
    v38 = &v39;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v17 = WTF::s_file;
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v18, "%s", a1);
  WTF::printInternal(v18, a2, v19, v20, v21, v22, v23, v24, v25, v26);
  WTF::PrintStream::printf(v18, "%s", a3);
  WTF::PrintStream::printf(v18, "%d", *a4);
  WTF::PrintStream::printf(v18, "%s", a5);
  v33 = *a6;
  if (*a6)
  {
    v34 = *(char **)(v33 + 8);
    v35 = *(unsigned int *)(v33 + 4);
    if ((*(_BYTE *)(v33 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v34, v35, (uint64_t)&v39, v32);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v34, v35, 0, v27, v28, v29, v30, v31, (uint64_t)&v39);
    WTF::printExpectedCStringHelper(v18, "StringImpl*", &v39);
    if (v40 != -1)
      ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v40])(&v38, &v39);
  }
  else
  {
    WTF::PrintStream::printf(v18, "%s", "(null StringImpl*)");
  }
  WTF::PrintStream::printf(v18, "%s", a7);
  WTF::PrintStream::printf(v18, "%s", a8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
}

uint64_t WTF::dataLog<char const*,JSC::CodeBlockHash,char [16],unsigned int,char [18],double,char [5],char [2]>(const char **a1, _DWORD *a2, const char *a3, _DWORD *a4, const char *a5, double *a6, const char *a7, const char *a8)
{
  unint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  int v19;
  WTF::PrintStream *v20;
  char v22;
  char **v23;
  char *v24;

  v16 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v16 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v17 = WTF::s_file;
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v18, "%s", *a1);
  v19 = (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a2 / 0x3A2F8u - 62 * ((unsigned __int16)((16913 * (*a2 / 0x3A2F8u)) >> 16) >> 4))] << 16) | (WTF::integerToSixCharacterHashString::table[(*a2 / 0xF04u - 62 * ((69273667 * (unint64_t)(*a2 / 0xF04u)) >> 32))] << 24) | (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a2 / 0xE17810u - 62 * ((1058 * (*a2 / 0xE17810u)) >> 16))] << 8) | WTF::integerToSixCharacterHashString::table[*a2 / 0x369B13E0uLL];
  WORD2(v24) = (((unint64_t)WTF::integerToSixCharacterHashString::table[*a2 % 0x3Eu] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[*a2 / 0x3Eu - 62 * (((138547333 * (unint64_t)(*a2 / 0x3Eu)) >> 32) >> 1)] << 32)) >> 32;
  LODWORD(v24) = v19;
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 32))(v18);
  WTF::PrintStream::printf(v20, "%.*s", 6, (const char *)&v24);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 40))(v18);
  WTF::PrintStream::printf(v18, "%s", a3);
  WTF::PrintStream::printf(v18, "%u", *a4);
  WTF::PrintStream::printf(v18, "%s", a5);
  WTF::PrintStream::printf(v18, "%lf", *a6);
  WTF::PrintStream::printf(v18, "%s", a7);
  WTF::PrintStream::printf(v18, "%s", a8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
}

void JSC::UnlinkedFunctionExecutable::visitChildrenImpl<JSC::SlotVisitor>(JSC::JSCell *,JSC::SlotVisitor &)::{lambda(JSC::WriteBarrier<JSC::UnlinkedFunctionCodeBlock,WTF::RawPtrTraits<JSC::UnlinkedFunctionCodeBlock>> &)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MarkedBlock *v10;
  int v11;
  int v12;

  if (!a2)
    return;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 4) & 0x30) == 0x10)
  {
    if ((a2 & 8) == 0)
    {
      v10 = (JSC::MarkedBlock *)(a2 & 0xFFFFFFFFFFFFC000);
      v11 = *(_DWORD *)(a1 + 132);
      v12 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20);
      goto LABEL_8;
    }
LABEL_13:
    if ((*(_BYTE *)(a2 - 79) & 1) != 0 && !*(_QWORD *)(a1 + 168))
      return;
LABEL_15:
    JSC::SlotVisitor::appendSlow(a1, a2, 0, a4, a5, a6, a7, a8);
    return;
  }
  if ((~(*(unsigned __int16 *)(a2 + 28) | (*(unsigned __int8 *)(a2 + 30) << 16)) & 0x1C000) == 0)
    return;
  if ((a2 & 8) != 0)
    goto LABEL_13;
  v10 = (JSC::MarkedBlock *)(a2 & 0xFFFFFFFFFFFFC000);
  v11 = *(_DWORD *)(a1 + 132);
  v12 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20);
LABEL_8:
  if (v12 != v11)
    JSC::MarkedBlock::aboutToMarkSlow(v10, v11, a3, a4, a5, a6, a7, a8);
  if (((*((_QWORD *)v10 + ((a2 >> 10) & 0xF) + 5) >> (a2 >> 4)) & 1) == 0 || *(_QWORD *)(a1 + 168))
    goto LABEL_15;
}

unsigned int *JSC::VirtualRegister::dump(unsigned int *this, WTF::PrintStream *a2)
{
  unsigned int v3;
  WTF::PrintStream *v4;
  unsigned int v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;

  v3 = *this;
  if (*this == 0x3FFFFFFF)
  {
LABEL_2:
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v4, "%s");
    return (unsigned int *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  if (v3 <= 0x3FFFFFFF)
  {
    switch(v3)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        goto LABEL_2;
      default:
        v5 = v3 - 5;
        v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v7 = v6;
        if (v5)
        {
          WTF::PrintStream::printf(v6, "%s");
          WTF::PrintStream::printf(v7, "%d");
        }
        else
        {
          WTF::PrintStream::printf(v6, "%s");
        }
        break;
    }
    return (unsigned int *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return this;
}

_DWORD *JSC::VirtualRegister::VirtualRegister(_DWORD *result, uint64_t a2)
{
  *result = *(_DWORD *)(*(_QWORD *)a2 + 4);
  return result;
}

uint64_t JSC::StringFireDetail::dump(const char **this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", this[1]);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::Watchpoint::operator delete(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  switch(*(_BYTE *)(this + 16))
  {
    case 0:
      v14 = *(_QWORD **)(this + 8);
      if (v14)
      {
        v15 = *(_QWORD *)this;
        *v14 = *(_QWORD *)this;
        *(_QWORD *)(v15 + 8) = v14;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 1:
      v16 = *(_QWORD **)(this + 8);
      if (v16)
      {
        v17 = *(_QWORD *)this;
        *v16 = *(_QWORD *)this;
        *(_QWORD *)(v17 + 8) = v16;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 2:
      v18 = *(_QWORD **)(this + 8);
      if (v18)
      {
        v19 = *(_QWORD *)this;
        *v18 = *(_QWORD *)this;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 3:
      v20 = *(_QWORD **)(this + 8);
      if (v20)
      {
        v21 = *(_QWORD *)this;
        *v20 = *(_QWORD *)this;
        *(_QWORD *)(v21 + 8) = v20;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 4:
      v8 = *(_QWORD **)(this + 8);
      if (v8)
      {
        v9 = *(_QWORD *)this;
        *v8 = *(_QWORD *)this;
        *(_QWORD *)(v9 + 8) = v8;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 5:
      v22 = *(_QWORD **)(this + 8);
      if (v22)
      {
        v23 = *(_QWORD *)this;
        *v22 = *(_QWORD *)this;
        *(_QWORD *)(v23 + 8) = v22;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 6:
      v24 = *(_QWORD **)(this + 8);
      if (v24)
      {
        v25 = *(_QWORD *)this;
        *v24 = *(_QWORD *)this;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 7:
      v10 = *(_QWORD **)(this + 8);
      if (v10)
      {
        v11 = *(_QWORD *)this;
        *v10 = *(_QWORD *)this;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 8:
      v12 = *(_QWORD **)(this + 8);
      if (v12)
      {
        v13 = *(_QWORD *)this;
        *v12 = *(_QWORD *)this;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 9:
      JSC::Watchpoint::operator delete(JSC::Watchpoint*,std::destroying_delete_t)::$_0::operator()<JSC::StructureTransitionStructureStubClearingWatchpoint>((WTF *)this, a2, a3, a4, a5, a6, a7, a8);
      return;
    case 0xA:
      v26 = *(_QWORD **)(this + 8);
      if (v26)
      {
        v27 = *(_QWORD *)this;
        *v26 = *(_QWORD *)this;
        *(_QWORD *)(v27 + 8) = v26;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
      goto LABEL_4;
    case 0xB:
      v28 = *(_QWORD **)(this + 8);
      if (v28)
      {
        v29 = *(_QWORD *)this;
        *v28 = *(_QWORD *)this;
        *(_QWORD *)(v29 + 8) = v28;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
      }
LABEL_4:
      WTF::fastFree(this, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      return;
  }
}

void JSC::Watchpoint::fire(unint64_t a1, JSC::VM *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const JSC::PropertyTable *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  _QWORD *v79;
  unsigned int v80;

  if (*(_QWORD *)(a1 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1982245E4);
  }
  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v12 = a1 - 32;
      v13 = *(_QWORD **)(a1 + 32);
      if (v13)
      {
        v14 = *(_QWORD *)(a1 + 24);
        *v13 = v14;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
      }
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v12 + 16))(a1 - 32))
      {
        JSC::ObjectPropertyCondition::isWatchable(a1 - 24, 1, v15, v16, v17, v18, v19, v20);
        if (v27)
          JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)(a1 - 32), a2, v21, v22, v23, v24, v25, v26);
        else
          (*(void (**)(unint64_t, JSC::VM *, const void *))(*(_QWORD *)v12 + 24))(a1 - 32, a2, a3);
      }
      return;
    case 1:
      JSC::AdaptiveInferredPropertyValueWatchpointBase::fire((JSC::AdaptiveInferredPropertyValueWatchpointBase *)(a1 - 56), a2, (uint64_t)a3);
      return;
    case 2:
      JSC::CodeBlockJettisoningWatchpoint::fireInternal(a1, a9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 3:
      JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::fireInternal(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 4:
      v28 = *(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_DWORD *)(v28 + 40) = 0;
      v29 = (uint64_t *)(v28 & 0xFFFFFFC000 | 8);
      if ((v28 & 8) != 0)
        v29 = (uint64_t *)(v28 - 16);
      v30 = *v29;
      v31 = (uint64_t *)(v28 + 32);
      goto LABEL_14;
    case 5:
      JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint::fireInternal(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 6:
      v32 = *(unsigned int *)(a1 + 17);
      v33 = v32 | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
      if ((v32 & 8) != 0)
      {
        if ((*(_BYTE *)(v33 - 79) & 1) == 0 && (*(_BYTE *)(v33 - 80) & 1) == 0)
          return;
      }
      else
      {
        v34 = *(_QWORD *)(v33 & 0xFFFFFFC000);
        if (*(_BYTE *)(v34 + 10))
        {
          v62 = *(_QWORD *)(v34 + 24);
          v65 = *(_QWORD **)(v62 + 104);
          v64 = (_QWORD *)(v62 + 104);
          v63 = v65;
          if (v65 != v64)
          {
            v66 = 0;
            do
            {
              v67 = (_QWORD *)*v63;
              v66 |= JSC::FreeList::contains(v63 + 3, v33);
              v63 = v67;
            }
            while (v67 != v64);
            if ((_BYTE)v66)
              return;
          }
        }
        else if ((JSC::MarkedBlock::Handle::isLive(v34, v33, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) == 0)
        {
          return;
        }
      }
      v35 = *(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
      v36 = *(unsigned int **)(v35 + 0x10);
      *(_QWORD *)(v35 + 8) = 0;
      *(_QWORD *)(v35 + 16) = 0;
      if (v36)
      {
        v37 = (uint64_t *)(v36 + 2);
        v38 = *v36;
        if ((_DWORD)v38)
        {
          v39 = 24 * v38;
          do
          {
            v40 = (uint64_t *)v37[1];
            if (v40)
            {
              v41 = *v37;
              *v40 = *v37;
              *(_QWORD *)(v41 + 8) = v40;
              *v37 = 0;
              v37[1] = 0;
            }
            v37 += 3;
            v39 -= 24;
          }
          while (v39);
        }
        WTF::fastFree((unint64_t)v36, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      return;
    case 7:
      v42 = *(unsigned int *)(a1 + 17);
      v43 = v42 | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
      if ((v42 & 8) != 0)
      {
        if ((*(_BYTE *)(v43 - 79) & 1) == 0 && (*(_BYTE *)(v43 - 80) & 1) == 0)
          return;
      }
      else
      {
        v44 = *(_QWORD *)(v43 & 0xFFFFFFC000);
        if (*(_BYTE *)(v44 + 10))
        {
          v68 = *(_QWORD *)(v44 + 24);
          v71 = *(_QWORD **)(v68 + 104);
          v70 = (_QWORD *)(v68 + 104);
          v69 = v71;
          if (v71 != v70)
          {
            v72 = 0;
            do
            {
              v73 = (_QWORD *)*v69;
              v72 |= JSC::FreeList::contains(v69 + 3, v43);
              v69 = v73;
            }
            while (v73 != v70);
            if ((_BYTE)v72)
              return;
          }
        }
        else if ((JSC::MarkedBlock::Handle::isLive(v44, v43, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) == 0)
        {
          return;
        }
      }
      JSC::ObjectPropertyCondition::isWatchable(a1 + 24, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v51)
      {
        JSC::ObjectPropertyCondition::isWatchable(a1 + 24, 0, v45, v46, v47, v48, v49, v50);
        if ((v52 & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198224630);
        }
        v53 = 16 * (**(_DWORD **)(a1 + 24) & 0xFFFFFFFE);
        v54 = *(_QWORD *)(v53 + 0x60);
        if ((v54 & 1) != 0)
        {
          v80 = (v54 >> 1) & 3;
          v54 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v54 = 1;
          *(_BYTE *)(v54 + 4) = v80;
          *(_BYTE *)(v54 + 5) = 0;
          *(_QWORD *)(v54 + 8) = v54 + 8;
          *(_QWORD *)(v54 + 16) = v54 + 8;
          __dmb(0xAu);
          *(_QWORD *)(v53 + 96) = v54;
        }
        v56 = *(_QWORD *)(v54 + 8);
        v55 = (unint64_t *)(v54 + 8);
        *(_QWORD *)a1 = v56;
        *(_QWORD *)(a1 + 8) = v55;
        *v55 = a1;
        *(_QWORD *)(v56 + 8) = a1;
        *((_WORD *)v55 - 2) = 257;
      }
      else
      {
        v31 = *(uint64_t **)(a1 + 48);
        v30 = (uint64_t)a2;
LABEL_14:
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>(v31, v30);
      }
      return;
    case 8:
      v57 = *(unsigned int *)(a1 + 17);
      v58 = v57 | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
      if ((v57 & 8) != 0)
      {
        if ((*(_BYTE *)(v58 - 79) & 1) == 0 && (*(_BYTE *)(v58 - 80) & 1) == 0)
          return;
      }
      else
      {
        v59 = *(_QWORD *)(v58 & 0xFFFFFFC000);
        if (*(_BYTE *)(v59 + 10))
        {
          v74 = *(_QWORD *)(v59 + 24);
          v77 = *(_QWORD **)(v74 + 104);
          v76 = (_QWORD *)(v74 + 104);
          v75 = v77;
          if (v77 != v76)
          {
            v78 = 0;
            do
            {
              v79 = (_QWORD *)*v75;
              v78 |= JSC::FreeList::contains(v75 + 3, v58);
              v75 = v79;
            }
            while (v79 != v76);
            if ((_BYTE)v78)
              return;
          }
        }
        else if ((JSC::MarkedBlock::Handle::isLive(v59, v58, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) == 0)
        {
          return;
        }
      }
      v60 = *(uint64_t **)(a1 + 24);
      v61 = *v60;
      if ((*v60 & 1) != 0)
      {
        if ((v61 & 6) != 0)
        {
          *v60 = 5;
          __dmb(0xAu);
        }
      }
      else if (*(_BYTE *)(v61 + 4) == 1)
      {
        __dmb(0xAu);
        *(_BYTE *)(v61 + 4) = 2;
        JSC::WatchpointSet::fireAllWatchpoints(v61, (uint64_t)a2);
        __dmb(0xAu);
      }
      return;
    case 9:
      JSC::StructureTransitionStructureStubClearingWatchpoint::fireInternal(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 0xA:
      JSC::StructureStubInfoClearingWatchpoint::fireInternal(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    case 0xB:
      JSC::DFG::AdaptiveStructureWatchpoint::fireInternal(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      return;
    default:
      return;
  }
}

uint64_t JSC::WatchpointSet::WatchpointSet(uint64_t result, char a2)
{
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = a2;
  *(_BYTE *)(result + 5) = 0;
  *(_QWORD *)(result + 8) = result + 8;
  *(_QWORD *)(result + 16) = result + 8;
  return result;
}

{
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = a2;
  *(_BYTE *)(result + 5) = 0;
  *(_QWORD *)(result + 8) = result + 8;
  *(_QWORD *)(result + 16) = result + 8;
  return result;
}

void JSC::WatchpointSet::~WatchpointSet(JSC::WatchpointSet *this)
{
  uint64_t **v1;
  uint64_t *i;
  uint64_t *v3;
  uint64_t v4;

  v1 = (uint64_t **)((char *)this + 8);
  for (i = (uint64_t *)*((_QWORD *)this + 1); i != (uint64_t *)v1; i = *v1)
  {
    v4 = *i;
    v3 = (uint64_t *)i[1];
    *v3 = *i;
    *(_QWORD *)(v4 + 8) = v3;
    *i = 0;
    i[1] = 0;
  }
}

{
  uint64_t **v1;
  uint64_t *i;
  uint64_t *v3;
  uint64_t v4;

  v1 = (uint64_t **)((char *)this + 8);
  for (i = (uint64_t *)*((_QWORD *)this + 1); i != (uint64_t *)v1; i = *v1)
  {
    v4 = *i;
    v3 = (uint64_t *)i[1];
    *v3 = *i;
    *(_QWORD *)(v4 + 8) = v3;
    *i = 0;
    i[1] = 0;
  }
}

uint64_t *JSC::WatchpointSet::fireAllSlow(uint64_t a1, JSC::VM *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *result;
  uint64_t *v11;
  int v12;
  uint64_t *v14;
  uint64_t v15;

  __dmb(0xAu);
  v11 = (uint64_t *)(a1 + 8);
  result = *(uint64_t **)(a1 + 8);
  *((_BYTE *)v11 - 4) = 2;
  v12 = *((_DWORD *)a2 + 229);
  *((_DWORD *)a2 + 229) = v12 + 1;
  if (result != v11)
  {
    do
    {
      v15 = *result;
      v14 = (uint64_t *)result[1];
      *v14 = *result;
      *(_QWORD *)(v15 + 8) = v14;
      *result = 0;
      result[1] = 0;
      JSC::Watchpoint::fire((unint64_t)result, a2, a3, a4, a5, a6, a7, a8, a9);
      result = (uint64_t *)*v11;
    }
    while ((uint64_t *)*v11 != v11);
    v12 = *((_DWORD *)a2 + 229) - 1;
  }
  *((_DWORD *)a2 + 229) = v12;
  __dmb(0xAu);
  return result;
}

uint64_t JSC::WatchpointSet::fireAllWatchpoints(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 4) == 2)
  {
    v3 = *(_DWORD *)(a2 + 916);
    *(_DWORD *)(a2 + 916) = v3 + 1;
    v5 = (uint64_t *)(a1 + 8);
    result = *(_QWORD *)(a1 + 8);
    if ((uint64_t *)result != v5)
    {
      do
      {
        v7 = *(_QWORD *)result;
        v6 = *(_QWORD **)(result + 8);
        *v6 = *(_QWORD *)result;
        *(_QWORD *)(v7 + 8) = v6;
        *(_QWORD *)result = 0;
        *(_QWORD *)(result + 8) = 0;
        JSC::Watchpoint::fire(result, a2);
        result = *v5;
      }
      while ((uint64_t *)*v5 != v5);
      v3 = *(_DWORD *)(a2 + 916) - 1;
    }
    *(_DWORD *)(a2 + 916) = v3;
  }
  else
  {
    result = 149;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::WatchpointSet::fireAllSlow(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  __dmb(0xAu);
  v3 = *(_QWORD *)(result + 8);
  if (v3 != result + 8)
  {
    **(_QWORD **)(a3 + 16) = v3;
    *(_QWORD *)(*(_QWORD *)(result + 8) + 8) = *(_QWORD *)(a3 + 16);
    v4 = *(_QWORD **)(result + 16);
    *(_QWORD *)(a3 + 16) = v4;
    *v4 = a3 + 8;
    *(_QWORD *)(result + 8) = result + 8;
    *(_QWORD *)(result + 16) = result + 8;
  }
  *(_WORD *)(a3 + 4) = *(_WORD *)(result + 4);
  *(_WORD *)(result + 4) = 2;
  __dmb(0xAu);
  return result;
}

uint64_t JSC::DeferredWatchpointFire::takeWatchpointsToFire(uint64_t this, JSC::WatchpointSet *a2)
{
  JSC::WatchpointSet *v2;
  _QWORD *v3;

  v2 = (JSC::WatchpointSet *)*((_QWORD *)a2 + 1);
  if (v2 != (JSC::WatchpointSet *)((char *)a2 + 8))
  {
    **(_QWORD **)(this + 16) = v2;
    *(_QWORD *)(*((_QWORD *)a2 + 1) + 8) = *(_QWORD *)(this + 16);
    v3 = (_QWORD *)*((_QWORD *)a2 + 2);
    *(_QWORD *)(this + 16) = v3;
    *v3 = this + 8;
    *((_QWORD *)a2 + 1) = (char *)a2 + 8;
    *((_QWORD *)a2 + 2) = (char *)a2 + 8;
  }
  *(_WORD *)(this + 4) = *((_WORD *)a2 + 2);
  *((_BYTE *)a2 + 5) = 0;
  return this;
}

uint64_t *JSC::WatchpointSet::fireAllSlow(JSC::WatchpointSet *this, JSC::VM *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *result;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = &off_1E3583C90;
  v15[1] = a3;
  __dmb(0xAu);
  v11 = (uint64_t *)((char *)this + 8);
  result = (uint64_t *)*((_QWORD *)this + 1);
  *((_BYTE *)v11 - 4) = 2;
  v12 = *((_DWORD *)a2 + 229);
  *((_DWORD *)a2 + 229) = v12 + 1;
  if (result != v11)
  {
    do
    {
      v14 = *result;
      v13 = (uint64_t *)result[1];
      *v13 = *result;
      *(_QWORD *)(v14 + 8) = v13;
      *result = 0;
      result[1] = 0;
      JSC::Watchpoint::fire((unint64_t)result, a2, v15, a4, a5, a6, a7, a8, a9);
      result = (uint64_t *)*v11;
    }
    while ((uint64_t *)*v11 != v11);
    v12 = *((_DWORD *)a2 + 229) - 1;
  }
  *((_DWORD *)a2 + 229) = v12;
  __dmb(0xAu);
  return result;
}

uint64_t JSC::InlineWatchpointSet::fireAll(JSC::InlineWatchpointSet *this, JSC::VM *a2, const char *a3)
{
  return JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)this, (uint64_t)a2);
}

uint64_t JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if ((result & 1) != 0)
  {
    if ((result & 6) != 0)
    {
      *a1 = 5;
      __dmb(0xAu);
    }
  }
  else if (*(_BYTE *)(result + 4) == 1)
  {
    __dmb(0xAu);
    *(_BYTE *)(result + 4) = 2;
    result = JSC::WatchpointSet::fireAllWatchpoints(result, a2);
    __dmb(0xAu);
  }
  return result;
}

uint64_t JSC::InlineWatchpointSet::inflateSlow(JSC::InlineWatchpointSet *this)
{
  int v2;
  uint64_t result;

  v2 = (*(unsigned __int8 *)this >> 1) & 3;
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = v2;
  *(_BYTE *)(result + 5) = 0;
  *(_QWORD *)(result + 8) = result + 8;
  *(_QWORD *)(result + 16) = result + 8;
  __dmb(0xAu);
  *(_QWORD *)this = result;
  return result;
}

void JSC::InlineWatchpointSet::freeFat(JSC::InlineWatchpointSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t *i;
  uint64_t *v13;
  uint64_t v14;

  v8 = *(_QWORD *)this;
  do
  {
    v9 = __ldaxr((unsigned int *)v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v8));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)v8);
    v11 = (uint64_t **)(v8 + 8);
    for (i = *(uint64_t **)(v8 + 8); i != (uint64_t *)v11; i = *v11)
    {
      v14 = *i;
      v13 = (uint64_t *)i[1];
      *v13 = *i;
      *(_QWORD *)(v14 + 8) = v13;
      *i = 0;
      i[1] = 0;
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::StringFireDetail::~StringFireDetail(JSC::StringFireDetail *this)
{
  JUMPOUT(0x19AEBAEF0);
}

void JSC::Watchpoint::operator delete(JSC::Watchpoint*,std::destroying_delete_t)::$_0::operator()<JSC::StructureTransitionStructureStubClearingWatchpoint>(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  uint64_t *v15;
  uint64_t v16;

  if (this)
  {
    v8 = this;
    this = (WTF *)*((_QWORD *)this + 3);
    *((_QWORD *)v8 + 3) = 0;
    if (!this)
      goto LABEL_5;
    do
    {
      v9 = __ldaxr((unsigned int *)this);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)this));
    if (v10)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  atomic_store(1u, (unsigned int *)this);
  v13 = (uint64_t **)((char *)this + 8);
  for (i = (uint64_t *)*((_QWORD *)this + 1); i != (uint64_t *)v13; i = *v13)
  {
    v16 = *i;
    v15 = (uint64_t *)i[1];
    *v15 = *i;
    *(_QWORD *)(v16 + 8) = v15;
    *i = 0;
    i[1] = 0;
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v11 = (_QWORD *)*((_QWORD *)v8 + 1);
  if (v11)
  {
    v12 = *(_QWORD *)v8;
    *v11 = *(_QWORD *)v8;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
  }
  WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  __int128 v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  _BYTE v28[24];
  int v29;
  int v30;

  *(_DWORD *)(result + 4) = a3;
  v8 = *(unsigned int *)(result + 28);
  if ((_DWORD)v8)
  {
    v10 = result;
    v11 = *(unsigned int **)(result + 16);
    v12 = 4 * v8;
    do
    {
      v13 = *v11;
      v26 = a2;
      v27 = v13;
      v14 = *(_DWORD *)(v10 + 4) - v13;
      v25 = v14;
      v15 = (unsigned __int8 *)(*(_QWORD *)a2 + v13);
      v16 = *v15;
      v17 = v16;
      if ((v16 | 2) == 0x82)
        v17 = v15[1];
      switch(v17)
      {
        case '.':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'X':
          if (v16 == 128)
          {
            if (v14 != (__int16)v14)
            {
              result = JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), v13, v14, a4, a5, a6, a7, a8);
              LOWORD(v14) = 0;
            }
            *((_WORD *)v15 + 3) = v14;
          }
          else if (v16 == 130)
          {
            *(_DWORD *)(v15 + 10) = v14;
          }
          else
          {
            if (v14 != (char)v14)
            {
              result = JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), v13, v14, a4, a5, a6, a7, a8);
              LOBYTE(v14) = 0;
            }
            v15[3] = v14;
          }
          break;
        case 'C':
          if (v16 == 128)
          {
            if (v14 != (__int16)v14)
            {
              v18 = *(_QWORD *)(a2 + 24);
              v29 = v14;
              v30 = v13;
              result = (uint64_t)WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v18 + 176), &v30, &v29, a4, a5, a6, a7, a8, (uint64_t)v28);
              LOWORD(v14) = 0;
            }
            *((_WORD *)v15 + 1) = v14;
          }
          else if (v16 == 130)
          {
            *(_DWORD *)(v15 + 2) = v14;
          }
          else
          {
            if (v14 != (char)v14)
            {
              v19 = *(_QWORD *)(a2 + 24);
              v29 = v14;
              v30 = v13;
              result = (uint64_t)WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v19 + 176), &v30, &v29, a4, a5, a6, a7, a8, (uint64_t)v28);
              LOBYTE(v14) = 0;
            }
            v15[1] = v14;
          }
          break;
        case 'D':
          if (v16 == 128)
          {
            if (v14 == (__int16)v14)
              goto LABEL_20;
            v20 = *(_QWORD *)(a2 + 24);
            v29 = v14;
            v30 = v13;
            result = (uint64_t)WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v20 + 176), &v30, &v29, a4, a5, a6, a7, a8, (uint64_t)v28);
            goto LABEL_44;
          }
          if (v16 == 130)
            goto LABEL_9;
          if (v14 != (char)v14)
          {
            v21 = *(_QWORD *)(a2 + 24);
            v29 = v14;
            v30 = v13;
            result = (uint64_t)WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v21 + 176), &v30, &v29, a4, a5, a6, a7, a8, (uint64_t)v28);
            goto LABEL_46;
          }
          goto LABEL_22;
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
          if (v16 == 128)
          {
            if (v14 != (__int16)v14)
            {
              result = JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), v13, v14, a4, a5, a6, a7, a8);
LABEL_44:
              LOWORD(v14) = 0;
            }
LABEL_20:
            *((_WORD *)v15 + 2) = v14;
          }
          else if (v16 == 130)
          {
LABEL_9:
            *(_DWORD *)(v15 + 6) = v14;
          }
          else
          {
            if (v14 != (char)v14)
            {
              result = JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(*(JSC::UnlinkedCodeBlockGenerator **)(a2 + 24), v13, v14, a4, a5, a6, a7, a8);
LABEL_46:
              LOBYTE(v14) = 0;
            }
LABEL_22:
            v15[2] = v14;
          }
          break;
        case 'W':
          LOBYTE(v23) = 0;
          DWORD1(v23) = 0;
          *((_QWORD *)&v23 + 1) = 0;
          v24 = v14;
          v22[0] = a2;
          v22[1] = (uint64_t)&v26;
          v22[2] = (uint64_t)&v25;
          result = (uint64_t)JSC::OpJbelow::setTargetLabel<JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits> &,unsigned int)::$_21>(v15, &v23, v22, a4, a5, a6, a7, a8);
          break;
        default:
          break;
      }
      ++v11;
      v12 -= 4;
    }
    while (v12);
  }
  return result;
}

_DWORD *JSC::OpJbelow::setTargetLabel<JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits> &,unsigned int)::$_21>(_DWORD *result, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE v34[24];
  __int128 v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39[6];
  uint64_t v40;

  v8 = result;
  v40 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int8 *)result;
  if (v9 == 128)
  {
    *(_OWORD *)v34 = *a2;
    *(_QWORD *)&v34[16] = *((_QWORD *)a2 + 2);
    v11 = *a3;
    v12 = a3[1];
    v13 = (int *)a3[2];
    if (v34[0])
    {
      if (v34[0] == 1)
      {
        v14 = *(_DWORD *)(*(_QWORD *)&v34[8] + 16);
        *(_DWORD *)&v34[4] = v14;
        goto LABEL_21;
      }
      if (v34[0] != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1982251DCLL);
      }
      v14 = *(_DWORD *)&v34[16] - *(_DWORD *)(*(_QWORD *)&v34[8] + 16);
    }
    else
    {
      v14 = *(_DWORD *)&v34[16];
    }
    *(_DWORD *)&v34[4] = v14;
    if (v14 == (__int16)v14)
    {
      if (v34[0] == 1)
      {
LABEL_21:
        v22 = *(_QWORD *)&v34[16];
        v23 = *(unsigned int *)(*(_QWORD *)&v34[16] + 28);
        if ((_DWORD)v23 == *(_DWORD *)(*(_QWORD *)&v34[16] + 24))
        {
          v30 = *(_QWORD *)&v34[16];
          result = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)&v34[16] + 16, v23 + 1, (unint64_t)&v34[4]);
          LOWORD(v14) = 0;
          *(_DWORD *)(*(_QWORD *)(v30 + 16) + 4 * (*(_DWORD *)(v30 + 28))++) = *result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v34[16] + 16) + 4 * v23) = v14;
          LOWORD(v14) = 0;
          ++*(_DWORD *)(v22 + 28);
        }
      }
    }
    else
    {
      v26 = *(_QWORD *)(v11 + 24);
      v27 = *(_DWORD *)(v12 + 8);
      v37 = *v13;
      v38 = v27;
      if (!v37)
        goto LABEL_46;
      result = WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v26 + 176), &v38, &v37, a4, a5, a6, a7, a8, (uint64_t)v39);
      *(_OWORD *)((char *)v39 + 3) = 0uLL;
      *(_OWORD *)&v34[1] = *(_OWORD *)v39;
      *(_DWORD *)&v34[16] = 0;
      LOWORD(v14) = *(_QWORD *)v39 >> 24;
    }
    *((_WORD *)v8 + 3) = v14;
    return result;
  }
  if (v9 != 130)
  {
    *(_OWORD *)v33 = *a2;
    *(_QWORD *)&v33[16] = *((_QWORD *)a2 + 2);
    v15 = *a3;
    v16 = a3[1];
    v17 = (int *)a3[2];
    switch(v33[0])
    {
      case 0:
        v18 = *(_DWORD *)&v33[16];
        goto LABEL_12;
      case 1:
        v18 = *(_DWORD *)(*(_QWORD *)&v33[8] + 16);
        *(_DWORD *)&v33[4] = v18;
        goto LABEL_25;
      case 2:
        v18 = *(_DWORD *)&v33[16] - *(_DWORD *)(*(_QWORD *)&v33[8] + 16);
LABEL_12:
        *(_DWORD *)&v33[4] = v18;
        if (v18 != (char)v18)
        {
          v28 = *(_QWORD *)(v15 + 24);
          v29 = *(_DWORD *)(v16 + 8);
          v37 = *v17;
          v38 = v29;
          if (!v37)
          {
            __break(0xC471u);
            JUMPOUT(0x198225198);
          }
          result = WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<unsigned int const&,int &>((uint64_t *)(v28 + 176), &v38, &v37, a4, a5, a6, a7, a8, (uint64_t)v39);
          *(_QWORD *)((char *)&v39[2] + 3) = 0;
          *(_QWORD *)((char *)v39 + 3) = 0;
          *(_OWORD *)&v33[1] = v39[0];
          *(_DWORD *)&v33[16] = 0;
          LOBYTE(v18) = 0;
          goto LABEL_32;
        }
        if (v33[0] != 1)
        {
LABEL_32:
          *((_BYTE *)v8 + 3) = v18;
          return result;
        }
LABEL_25:
        v24 = *(_QWORD *)&v33[16];
        v25 = *(unsigned int *)(*(_QWORD *)&v33[16] + 28);
        if ((_DWORD)v25 == *(_DWORD *)(*(_QWORD *)&v33[16] + 24))
        {
          v31 = *(_QWORD *)&v33[16];
          result = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)&v33[16] + 16, v25 + 1, (unint64_t)&v33[4]);
          LOBYTE(v18) = 0;
          *(_DWORD *)(*(_QWORD *)(v31 + 16) + 4 * (*(_DWORD *)(v31 + 28))++) = *result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v33[16] + 16) + 4 * v25) = v18;
          LOBYTE(v18) = 0;
          ++*(_DWORD *)(v24 + 28);
        }
        goto LABEL_32;
    }
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198225178);
  }
  v35 = *a2;
  v36 = *((_QWORD *)a2 + 2);
  if ((_BYTE)v35)
  {
    if (v35 == 1)
    {
      v19 = v36;
      v20 = *(_DWORD *)(*((_QWORD *)&v35 + 1) + 16);
      DWORD1(v35) = v20;
      v21 = *(unsigned int *)(v36 + 28);
      if ((_DWORD)v21 == *(_DWORD *)(v36 + 24))
      {
        v32 = v36;
        result = (_DWORD *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36 + 16, v21 + 1, (unint64_t)&v35 + 4);
        v10 = 0;
        *(_DWORD *)(*(_QWORD *)(v32 + 16) + 4 * (*(_DWORD *)(v32 + 28))++) = *result;
      }
      else
      {
        v10 = 0;
        *(_DWORD *)(*(_QWORD *)(v36 + 16) + 4 * v21) = v20;
        ++*(_DWORD *)(v19 + 28);
      }
    }
    else
    {
      if (v35 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1982251BCLL);
      }
      v10 = v36 - *(_DWORD *)(*((_QWORD *)&v35 + 1) + 16);
    }
  }
  else
  {
    v10 = v36;
  }
  *(_DWORD *)((char *)v8 + 10) = v10;
  return result;
}

uint64_t JSC::FinallyContext::FinallyContext(uint64_t a1, JSC::BytecodeGenerator *a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;

  *(_QWORD *)a1 = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
  if (v5)
    ++*v5;
  v6 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    --*v6;
  v7 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)a2);
  if (v7)
    ++*v7;
  v13 = *(_DWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  if (v13)
    --*v13;
  JSC::BytecodeGenerator::emitLoad((uint64_t)a2, *(int **)(a1 + 40), 0xFFFE000000000000, v8, v9, v10, v11, v12);
  v14 = *(int **)(a1 + 48);
  v15 = (int *)JSC::BytecodeGenerator::addConstantEmptyValue(a2);
  v21 = v15;
  if (v15)
    ++*v15;
  if ((int *)((char *)a2 + 208) != v14 && v14 && v15 != v14)
    JSC::BytecodeGenerator::emitMove((uint64_t)a2, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
  if (v21)
    --*v21;
  return a1;
}

uint64_t JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(unsigned int *)(a1 + 100);
  if (v2)
  {
    v4 = *(_QWORD *)(a1 + 88);
    do
    {
      v5 = v2 - 1;
      v6 = (v2 - 1) >> 5;
      if (v6 >= v3)
      {
        __break(0xC471u);
        JUMPOUT(0x1982254C8);
      }
      if (*(_DWORD *)(*(_QWORD *)(v4 + 8 * v6) + 12 * (v5 & 0x1F)))
        break;
      *(_QWORD *)(a1 + 80) = v5;
      --v2;
    }
    while (v5);
  }
  v7 = v2 + 1;
  *(_QWORD *)(a1 + 80) = v2 + 1;
  v8 = v2 >> 5;
  if (v2 >> 5 >= v3)
  {
    v16 = (_QWORD *)(a1 + 88);
    v17 = WTF::fastMalloc((WTF *)0x180);
    v20 = v17;
    v18 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v18 == *(_DWORD *)(a1 + 96))
    {
      v19 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v18 + 1, (unint64_t)&v20);
      v18 = *(unsigned int *)(a1 + 100);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v18) = *v19;
    }
    else
    {
      *(_QWORD *)(*v16 + 8 * v18) = v17;
    }
    v3 = (v18 + 1);
    *(_DWORD *)(a1 + 100) = v3;
    v7 = *(_QWORD *)(a1 + 80);
    v9 = v7 - 1;
    v8 = (v7 - 1) >> 5;
  }
  else
  {
    v9 = v2;
  }
  if (v8 >= v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1982254D0);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v8) + 12 * (v9 & 0x1F);
  *(_DWORD *)v10 = 0;
  *(_DWORD *)(v10 + 4) = ~(_DWORD)v2;
  *(_BYTE *)(v10 + 8) = 0;
  v11 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v12 = *(_QWORD *)(v11 + 20);
  if ((v12 & 0x7FFFFFFF) > v7)
    v7 = v12 & 0x7FFFFFFF;
  v13 = v7 + 1;
  *(_QWORD *)(v11 + 20) = v12 & 0xFFFFFFFF80000000 | v13 & 0x7FFFFFFE;
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL)
    || (v14 = *(_QWORD *)(a1 + 80) - 1, v14 >> 5 >= *(unsigned int *)(a1 + 100)))
  {
    __break(0xC471u);
    JUMPOUT(0x1982254C0);
  }
  result = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v14 >> 5)) + 12 * (v14 & 0x1F);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

int *JSC::BytecodeGenerator::moveEmptyValue(JSC::BytecodeGenerator *a1, int *a2)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;

  result = (int *)JSC::BytecodeGenerator::addConstantEmptyValue(a1);
  v10 = result;
  if (result)
    ++*result;
  if ((int *)((char *)a1 + 208) != a2 && a2 && result != a2)
    result = JSC::BytecodeGenerator::emitMove((uint64_t)a1, a2, (uint64_t)result, v5, v6, v7, v8, v9);
  if (v10)
    --*v10;
  return result;
}

void JSC::BytecodeGenerator::generate(JSC::BytecodeGenerator *this@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  int **v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  unsigned int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  _QWORD *v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  _DWORD *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  int *v153;
  WTF::AtomStringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF::AtomStringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  int *v186;
  int v187;
  int *v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v192;
  unsigned __int8 *v193;
  int v194;
  int v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  WTF *v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t **v219;
  uint64_t **v220;
  uint64_t **v221;
  uint64_t v222;
  signed int v223;
  uint64_t v224;
  signed int v225;
  uint64_t *v226;
  uint64_t v227;
  int v228;
  char v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  __int128 *v233;
  uint64_t v234;
  __int128 v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int *v262;
  int *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  WTF::StringImpl *v274;
  int *v275;
  uint64_t v276;
  int *v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  _DWORD *v303;
  uint64_t *v304;
  WTF *v305;
  uint64_t v306;
  int v307;
  WTF::StringImpl *v308[2];
  uint64_t v309;
  _QWORD v310[9];
  WTF::StringImpl *v311;
  char v312;
  int v313;
  uint64_t v314;
  _QWORD v315[3];

  if (*((_BYTE *)this + 32))
    goto LABEL_208;
  v12 = **(_QWORD **)(*((_QWORD *)this + 3) + 8);
  v14 = (*(_WORD *)(v12 + 28) >> 6) - 1 < 3 && *(int *)(v12 + 20) >= 0;
  *(_DWORD *)(v12 + 8) = *((_DWORD *)this + 56);
  if ((*((_BYTE *)this + 104) & 1) != 0 && !*((_BYTE *)this + 707) || byte_1ECF4C27A)
    JSC::OpLogShadowChickenPrologue::emit<JSC::BytecodeGenerator>((uint64_t)this, *(_DWORD *)(*((_QWORD *)this + 31) + 4), a3, a4, a5, a6, a7, a8);
  if (v14)
  {
    JSC::BytecodeGenerator::emitUnreachable(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (*((_BYTE *)this + 536))
    {
      JSC::BytecodeGenerator::variable((uint64_t)v308, (uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 87) + 41952) + 880, 0, a5, a6, a7, a8);
      if (!LOBYTE(v308[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x1982263CCLL);
      }
      v175 = *((_QWORD *)this + 32);
      v176 = JSC::BytecodeGenerator::emitResolveScope((uint64_t)this, 0, (unsigned __int8 *)v308, v170, v171, v172, v173, v174);
      JSC::BytecodeGenerator::emitPutToScope((uint64_t)this, v176, (uint64_t)v308, v175, 0, 2, v177, v178);
      v182 = v308[0];
      v308[0] = 0;
      if (v182)
      {
        if (*(_DWORD *)v182 == 2)
        {
          WTF::StringImpl::~StringImpl(v182, v179, v180, v181, a5, a6, a7, a8);
          WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
        }
        else
        {
          *(_DWORD *)v182 -= 2;
        }
      }
    }
    v15 = *((_BYTE *)this + 416) == 1 && *((_BYTE *)this + 712) != 0;
    v16 = *((unsigned int *)this + 133);
    if ((_DWORD)v16)
    {
      v33 = 0;
      v34 = *((_QWORD *)this + 65);
      v35 = v34 + 16 * v16;
      do
      {
        v36 = *(_QWORD *)v34;
        if (*(_BYTE *)(v34 + 8))
        {
          if (*(_BYTE *)(v34 + 8) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198226398);
          }
          v61 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
          v67 = v61;
          if (v61)
            ++*v61;
          JSC::BytecodeGenerator::emitNewFunction((uint64_t)this, (uint64_t)v61, v36, v62, v63, v64, v65, v66);
          if (!v33)
          {
            if (v15)
            {
              v153 = JSC::BytecodeGenerator::emitResolveScopeForHoistingFuncDeclInEval((uint64_t)this, (WTF::AtomStringImpl *)(v36 + 40));
            }
            else
            {
              v152 = *(WTF::StringImpl **)(v36 + 40);
              if (v152)
                *(_DWORD *)v152 += 2;
              v311 = v152;
              v312 = 0;
              v313 = -1;
              v314 = 0;
              v315[0] = 0;
              *(_QWORD *)((char *)v315 + 5) = 0;
              v153 = (int *)JSC::BytecodeGenerator::emitResolveScope((uint64_t)this, 0, (unsigned __int8 *)&v311, v68, v69, v70, v71, v72);
            }
            v161 = v153;
            if (v153)
              ++*v153;
            if (!v15)
            {
              v162 = v311;
              v311 = 0;
              if (v162)
              {
                if (*(_DWORD *)v162 == 2)
                {
                  WTF::StringImpl::~StringImpl(v162, v154, v155, v156, v157, v158, v159, v160);
                  WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
                }
                else
                {
                  *(_DWORD *)v162 -= 2;
                }
              }
            }
            v163 = *((_QWORD *)this + 10);
            if (v163)
            {
              v164 = *((unsigned int *)this + 25);
              v165 = *((_QWORD *)this + 11);
              v166 = v163 - 1;
              while (v166 >> 5 < v164)
              {
                if (!*(_DWORD *)(*(_QWORD *)(v165 + 8 * (v166 >> 5)) + 12 * (v166 & 0x1F)))
                {
                  *((_QWORD *)this + 10) = v166--;
                  if (v166 != -1)
                    continue;
                }
                goto LABEL_126;
              }
              __break(0xC471u);
LABEL_261:
              JUMPOUT(0x1982261A8);
            }
LABEL_126:
            v167 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister((uint64_t)this);
            v33 = v167;
            if (v167)
            {
              ++*v167;
              if (v167 != v161 && (int *)((char *)this + 208) != v167)
                JSC::BytecodeGenerator::emitMove((uint64_t)this, v167, (uint64_t)v161, v168, v169, v70, v71, v72);
            }
            if (v161)
              --*v161;
          }
          if (v15)
          {
            JSC::BytecodeGenerator::emitPutToScopeDynamic((uint64_t)this, v33[1], (WTF::AtomStringImpl *)(v36 + 40), (uint64_t)v67, 0, v70, v71, v72);
          }
          else
          {
            v73 = *(WTF::StringImpl **)(v36 + 40);
            if (v73)
              *(_DWORD *)v73 += 2;
            v308[0] = v73;
            LOBYTE(v308[1]) = 0;
            HIDWORD(v308[1]) = -1;
            v309 = 0;
            v310[0] = 0;
            *(_QWORD *)((char *)v310 + 5) = 0;
            JSC::BytecodeGenerator::emitPutToScope((uint64_t)this, (uint64_t)v33, (uint64_t)v308, (uint64_t)v67, 0, 2, v71, v72);
            v77 = v308[0];
            v308[0] = 0;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2)
              {
                WTF::StringImpl::~StringImpl(v77, v74, v75, v76, a5, a6, a7, a8);
                WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
              }
              else
              {
                *(_DWORD *)v77 -= 2;
              }
            }
          }
          if (v67)
            --*v67;
        }
        else
        {
          JSC::BytecodeGenerator::variable((uint64_t)v308, (uint64_t)this, v36 + 40, 0, a5, a6, a7, a8);
          if (v309)
          {
            JSC::BytecodeGenerator::emitNewFunction((uint64_t)this, v309, v36, v37, v38, v39, v40, v41);
          }
          else
          {
            v42 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
            v48 = v42;
            if (v42)
              ++*v42;
            JSC::BytecodeGenerator::emitNewFunction((uint64_t)this, (uint64_t)v42, v36, v43, v44, v45, v46, v47);
            if (!LOBYTE(v308[1]))
            {
              __break(0xC471u);
              JUMPOUT(0x198226344);
            }
            v54 = JSC::BytecodeGenerator::emitResolveScope((uint64_t)this, 0, (unsigned __int8 *)v308, v49, v50, v51, v52, v53);
            JSC::BytecodeGenerator::emitPutToScope((uint64_t)this, v54, (uint64_t)v308, (uint64_t)v48, 0, 2, v55, v56);
            if (v48)
              --*v48;
          }
          v60 = v308[0];
          v308[0] = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
            {
              WTF::StringImpl::~StringImpl(v60, v57, v58, v59, a5, a6, a7, a8);
              WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
            }
            else
            {
              *(_DWORD *)v60 -= 2;
            }
          }
        }
        v34 += 16;
      }
      while (v34 != v35);
      if (v33)
        --*v33;
    }
    (*(void (**)(_QWORD, JSC::BytecodeGenerator *, _QWORD))(**((_QWORD **)this + 24) + 16))(*((_QWORD *)this + 24), this, 0);
  }
  v24 = *((_DWORD *)this + 183);
  if (v24)
  {
    v90 = (uint64_t *)*((_QWORD *)this + 90);
    v304 = &v90[3 * v24];
    do
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v306, (uint64_t)this, v18, v19, v20, v21, v22, v23);
      v97 = *v90;
      v99 = *((_DWORD *)v90 + 2);
      v98 = *((unsigned int *)v90 + 3);
      v100 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 72);
      *(_BYTE *)(v100 + 4) |= 1u;
      v101 = *(_QWORD *)(v100 + 16);
      v102 = *(unsigned int *)(v101 + 60);
      *(_DWORD *)(v101 + 60) = v102 + 1;
      v103 = (v99 - 1073741808) < 0x80;
      if (v99 <= 0x3FFFFFFF)
        v103 = (v99 + 128) < 0x90;
      if (!v103)
        goto LABEL_211;
      v104 = (v98 - 1073741808) < 0x80;
      if ((int)v98 <= 0x3FFFFFFF)
        v104 = (v98 + 128) < 0x90;
      if (v104 && v102 <= 0xFF)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)this, (void *)0xF, v91, v92, v93, v94, v95, v96);
        LOBYTE(v308[0]) = 15;
        v110 = *((unsigned int *)this + 3);
        v111 = *((unsigned int *)this + 4);
        if (v110 > v111)
        {
          *((_DWORD *)this + 4) = v111 + 1;
          *(_BYTE *)(*(_QWORD *)this + v111) = 15;
          v114 = *((_DWORD *)this + 3);
          v115 = *((_DWORD *)this + 4);
        }
        else
        {
          if ((_DWORD)v110 == *((_DWORD *)this + 2))
          {
            v254 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v110 + 1), (unint64_t)v308);
            v110 = *((unsigned int *)this + 3);
            v112 = *(_QWORD *)this;
            v113 = *v254;
          }
          else
          {
            v112 = *(_QWORD *)this;
            v113 = 15;
          }
          *(_BYTE *)(v112 + v110) = v113;
          v114 = *((_DWORD *)this + 3) + 1;
          v115 = *((_DWORD *)this + 4) + 1;
          *((_DWORD *)this + 3) = v114;
          *((_DWORD *)this + 4) = v115;
        }
        v116 = v99 + 16;
        if (v99 <= 0x3FFFFFFF)
          v116 = v99;
        LOBYTE(v308[0]) = v116;
        if (v114 > v115)
        {
          *((_DWORD *)this + 4) = v115 + 1;
          *(_BYTE *)(*(_QWORD *)this + v115) = v116;
          v119 = *((_DWORD *)this + 3);
          v120 = *((_DWORD *)this + 4);
        }
        else
        {
          v117 = v114;
          if (v114 == *((_DWORD *)this + 2))
          {
            v255 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v114 + 1), (unint64_t)v308);
            v117 = *((unsigned int *)this + 3);
            v118 = *(_QWORD *)this;
            v116 = *v255;
          }
          else
          {
            v118 = *(_QWORD *)this;
          }
          *(_BYTE *)(v118 + v117) = v116;
          v119 = *((_DWORD *)this + 3) + 1;
          v120 = *((_DWORD *)this + 4) + 1;
          *((_DWORD *)this + 3) = v119;
          *((_DWORD *)this + 4) = v120;
        }
        v121 = v98 + 16;
        if ((int)v98 <= 0x3FFFFFFF)
          v121 = v98;
        LOBYTE(v308[0]) = v121;
        if (v119 > v120)
        {
          *((_DWORD *)this + 4) = v120 + 1;
          *(_BYTE *)(*(_QWORD *)this + v120) = v121;
          v124 = *((_DWORD *)this + 3);
          v125 = *((_DWORD *)this + 4);
        }
        else
        {
          v122 = v119;
          if (v119 == *((_DWORD *)this + 2))
          {
            v256 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v119 + 1), (unint64_t)v308);
            v122 = *((unsigned int *)this + 3);
            v123 = *(_QWORD *)this;
            v121 = *v256;
          }
          else
          {
            v123 = *(_QWORD *)this;
          }
          *(_BYTE *)(v123 + v122) = v121;
          v124 = *((_DWORD *)this + 3) + 1;
          v125 = *((_DWORD *)this + 4) + 1;
          *((_DWORD *)this + 3) = v124;
          *((_DWORD *)this + 4) = v125;
        }
        LOBYTE(v308[0]) = v102;
        if (v124 > v125)
        {
          *((_DWORD *)this + 4) = v125 + 1;
          *(_BYTE *)(*(_QWORD *)this + v125) = v102;
        }
        else
        {
          if (v124 == *((_DWORD *)this + 2))
            *(_BYTE *)(*(_QWORD *)this + *((unsigned int *)this + 3)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v124 + 1), (unint64_t)v308);
          else
            *(_BYTE *)(*(_QWORD *)this + v124) = v102;
          *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000001);
        }
      }
      else
      {
LABEL_211:
        if ((JSC::OpCatch::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)this, v99, v98, v102, v93, v94, v95, v96) & 1) == 0)JSC::OpCatch::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, v99, v98, v102, v106, v107, v108, v109);
      }
      v126 = v306;
      JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v306, (uint64_t)this, *((_DWORD *)this + 12), v105, v106, v107, v108, v109);
      v133 = *((_DWORD *)v90 + 4);
      if (v133 != 0x3FFFFFFF)
      {
        LODWORD(v308[0]) = 0;
        HIDWORD(v308[0]) = v133;
        LOBYTE(v308[1]) = 0;
        JSC::BytecodeGenerator::emitLoad((uint64_t)this, (int *)v308, ((*(_BYTE *)(v97 + 8) & 0xFD) == 1) | 0xFFFE000000000000, v128, v129, v130, v131, v132);
      }
      v134 = *((_QWORD *)this + 3);
      v135 = *((_DWORD *)this + 12);
      LODWORD(v308[0]) = v135;
      v136 = (_QWORD *)(v134 + 16);
      v137 = *(unsigned int *)(v134 + 28);
      if ((_DWORD)v137 == *(_DWORD *)(v134 + 24))
        *(_DWORD *)(*(_QWORD *)(v134 + 16) + 4 * *(unsigned int *)(v134 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)v308);
      else
        *(_DWORD *)(*v136 + 4 * v137) = v135;
      ++*(_DWORD *)(v134 + 28);
      v138 = *(_DWORD **)v97;
      *((_BYTE *)v138 + 8) = 1;
      v139 = v138[1];
      if ((_DWORD)v139 == -1)
        v140 = (uint64_t)v138;
      else
        v140 = v138[1];
      if ((_DWORD)v139 == -1)
        v141 = 1;
      else
        v141 = 2;
      if (v139 == 0xFFFFFFFFLL)
        v142 = 1;
      else
        v142 = 2;
      LOBYTE(v308[0]) = v142;
      HIDWORD(v308[0]) = 0;
      v308[1] = this;
      v309 = v140;
      if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>((uint64_t)this, (unsigned __int8 *)v308, v127, v128, v129, v130, v131, v132) & 1) == 0)
      {
        LOBYTE(v308[0]) = v141;
        HIDWORD(v308[0]) = 0;
        v308[1] = this;
        v309 = v140;
        if ((JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>((uint64_t)this, (unsigned __int8 *)v308, v18, v19, v20, v21, v22, v23) & 1) == 0)
        {
          LOBYTE(v308[0]) = v141;
          HIDWORD(v308[0]) = 0;
          v308[1] = this;
          v309 = v140;
          JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>((uint64_t)this, (uint64_t)v308);
        }
      }
      v143 = *(_DWORD **)v97;
      *(_QWORD *)v97 = v126;
      if (v143)
        --*v143;
      v90 += 3;
    }
    while (v90 != v304);
  }
  if (*((_BYTE *)this + 568))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel((uint64_t)this, *((_QWORD *)this + 69), v18, v19, v20, v21, v22, v23);
    v262 = JSC::BytecodeGenerator::moveLinkTimeConstant((uint64_t)this, 0, 0x5Du, v257, v258, v259, v260, v261);
    v263 = v262;
    if (v262)
      ++*v262;
    JSC::CallArguments::CallArguments((uint64_t)v308, (uint64_t)this, 0, 2);
    JSC::BytecodeGenerator::emitLoad((uint64_t)this, *(int **)v308[1], 10, v264, v265, v266, v267, v268);
    v274 = v308[1];
    v275 = (int *)*((_QWORD *)v308[1] + 1);
    if ((int *)((char *)this + 208) != v275)
    {
      if (v275)
      {
        v276 = *((_QWORD *)this + 40);
        if (v275 != (int *)v276)
        {
          JSC::BytecodeGenerator::emitMove((uint64_t)this, v275, v276, v269, v270, v271, v272, v273);
          v274 = v308[1];
        }
      }
    }
    v277 = (int *)*((_QWORD *)v274 + 2);
    if ((int *)((char *)this + 208) != v277)
    {
      if (v277)
      {
        v278 = *((_QWORD *)this + 70);
        if (v277 != (int *)v278)
          JSC::BytecodeGenerator::emitMove((uint64_t)this, v277, v278, v269, v270, v271, v272, v273);
      }
    }
    v279 = *((_QWORD *)this + 24);
    v280 = *(_DWORD *)(v279 + 16);
    v306 = *(_QWORD *)(v279 + 8);
    v307 = v280;
    v281 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary((uint64_t)this);
    JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>((uint64_t)this, v281, (uint64_t)v263, 0, (uint64_t)v308, &v306, &v306, &v306, 0);
    JSC::BytecodeGenerator::emitReturn((uint64_t)this, *((_QWORD *)this + 40), v282, v283, v284, v285, v286, v287);
    JSC::CallArguments::~CallArguments((JSC::CallArguments *)v308, v288, v289, v290, v291, v292, v293, v294);
    if (v263)
      --*v263;
  }
  v25 = (int *)*((_QWORD *)this + 86);
  if (v25)
  {
    v26 = (int **)((char *)this + 688);
    do
    {
      if (!*(v25 - 3))
        break;
      v27 = *(v25 - 1);
      v28 = v25;
      if ((_DWORD)v27)
      {
        v29 = 0;
        v28 = &v25[4 * v27];
        while (v25[v29] >= 2147483646)
        {
          v29 += 4;
          if (4 * v27 == v29)
            goto LABEL_27;
        }
        v28 = &v25[v29];
LABEL_27:
        if (!v25)
          break;
      }
      v86 = *v28;
      v87 = *(v25 - 2);
      v88 = 9 * ((v86 + ~(v86 << 15)) ^ ((v86 + ~(v86 << 15)) >> 10));
      v89 = (v88 ^ (v88 >> 6)) + ~((v88 ^ (v88 >> 6)) << 11);
      v30 = (v89 ^ HIWORD(v89)) & v87;
      v31 = v25[4 * v30];
      if (v31 == v86)
      {
LABEL_137:
        if (v30 != v27)
        {
          v183 = 0;
          v184 = &v25[4 * v30];
          v185 = *((_QWORD *)v184 + 1);
          *((_QWORD *)v184 + 1) = 0;
          if (!*v26 || (v183 = (uint64_t)&(*v26)[4 * *(*v26 - 1)], (int *)v183 != v184))
          {
            if ((int *)v183 != v184)
            {
              *v184 = 2147483646;
              *((_QWORD *)v184 + 1) = 0;
              ++*(*v26 - 4);
              v186 = *v26;
              v187 = *v26 ? *(v186 - 3) - 1 : -1;
              *(v186 - 3) = v187;
              v188 = *v26;
              if (*v26)
              {
                v189 = 6 * *(v188 - 3);
                v190 = *(v188 - 1);
                if (v189 < v190 && v190 >= 9)
                  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)this + 86, v190 >> 1, 0);
              }
            }
          }
          if (v185)
          {
            if (*(_DWORD *)v185 == 1)
            {
              v192 = *(_QWORD *)(v185 + 24);
              if (v192)
                LODWORD(v192) = *(_DWORD *)(v192 - 12);
              v193 = (unsigned __int8 *)(**(_QWORD **)(v185 + 8) + *(unsigned int *)(v185 + 16));
              v194 = *v193;
              v195 = v194;
              if ((v194 | 2) == 0x82)
                v195 = v193[1];
              if (v195 == 29)
              {
                if (v194 == 128)
                {
                  if (v192 >= 0x10000)
                    LOWORD(v192) = 255;
                  *((_WORD *)v193 + 2) = v192;
                }
                else if (v194 == 130)
                {
                  *(_DWORD *)(v193 + 6) = v192;
                }
                else
                {
                  if (v192 >= 0xFF)
                    LOBYTE(v192) = -1;
                  v193[2] = v192;
                }
              }
              else if (v195 == 28)
              {
                if (v194 == 128)
                {
                  if (v192 >= 0x10000)
                    LOWORD(v192) = 255;
                  *((_WORD *)v193 + 3) = v192;
                }
                else if (v194 == 130)
                {
                  *(_DWORD *)(v193 + 10) = v192;
                }
                else
                {
                  if (v192 >= 0xFF)
                    LOBYTE(v192) = -1;
                  v193[3] = v192;
                }
              }
            }
            WTF::RefCounted<JSC::StaticPropertyAnalysis>::deref((WTF *)v185, v17, v18, v19, v20, v21, v22, v23);
          }
        }
      }
      else
      {
        v32 = 1;
        while (v31 != 0x7FFFFFFF)
        {
          v30 = ((_DWORD)v30 + v32) & v87;
          v31 = v25[4 * v30];
          ++v32;
          if (v31 == v86)
            goto LABEL_137;
        }
      }
      v25 = *v26;
    }
    while (*v26);
  }
  v196 = *((_DWORD *)this + 147);
  if (v196)
  {
    v218 = *((_QWORD *)this + 72);
    v219 = (uint64_t **)(v218 + 24 * v196);
    v220 = (uint64_t **)(v218 + 16);
    do
    {
      v221 = v220 - 2;
      v222 = (uint64_t)*(v220 - 2);
      *(_BYTE *)(v222 + 8) = 1;
      v223 = *(_DWORD *)(v222 + 4);
      if (v223 == -1)
      {
        v295 = (uint64_t *)(v222 + 16);
        v296 = *(unsigned int *)(v222 + 28);
        if ((_DWORD)v296 == *(_DWORD *)(v222 + 24))
        {
          WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v295, v296 + 1);
          v296 = *(unsigned int *)(v222 + 28);
          v297 = *(_QWORD *)(v222 + 16);
        }
        else
        {
          v297 = *v295;
        }
        v223 = 0;
        *(_DWORD *)(v297 + 4 * v296) = 0;
        ++*(_DWORD *)(v222 + 28);
      }
      v224 = (uint64_t)*(v220 - 1);
      *(_BYTE *)(v224 + 8) = 1;
      v225 = *(_DWORD *)(v224 + 4);
      if (v225 == -1)
      {
        v298 = (uint64_t *)(v224 + 16);
        v299 = *(unsigned int *)(v224 + 28);
        if ((_DWORD)v299 == *(_DWORD *)(v224 + 24))
        {
          WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v298, v299 + 1);
          v299 = *(unsigned int *)(v224 + 28);
          v300 = *(_QWORD *)(v224 + 16);
        }
        else
        {
          v300 = *v298;
        }
        v225 = 0;
        *(_DWORD *)(v300 + 4 * v299) = 0;
        ++*(_DWORD *)(v224 + 28);
      }
      if (v225 > v223)
      {
        v226 = *v220;
        v227 = **v220;
        *(_BYTE *)(v227 + 8) = 1;
        v228 = *(_DWORD *)(v227 + 4);
        if (v228 == -1)
        {
          v301 = (_QWORD *)(v227 + 16);
          v302 = *(unsigned int *)(v227 + 28);
          if ((_DWORD)v302 == *(_DWORD *)(v227 + 24))
          {
            WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v301, v302 + 1);
            v303 = (_DWORD *)(*(_QWORD *)(v227 + 16) + 4 * *(unsigned int *)(v227 + 28));
            v226 = *v220;
          }
          else
          {
            v303 = (_DWORD *)(*v301 + 4 * v302);
          }
          v228 = 0;
          *v303 = 0;
          ++*(_DWORD *)(v227 + 28);
        }
        v229 = *((_BYTE *)v226 + 8);
        v308[0] = (WTF::StringImpl *)__PAIR64__(v225, v223);
        LODWORD(v308[1]) = v228;
        BYTE4(v308[1]) = BYTE4(v308[1]) & 0xFC | v229 & 3;
        v230 = *((_QWORD *)this + 3);
        v231 = (uint64_t *)(v230 + 184);
        v232 = *(unsigned int *)(v230 + 196);
        if ((_DWORD)v232 == *(_DWORD *)(v230 + 192))
        {
          v233 = (__int128 *)WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v231, v232 + 1, (unint64_t)v308);
          v232 = *(unsigned int *)(v230 + 196);
          v234 = *(_QWORD *)(v230 + 184);
          v235 = *v233;
        }
        else
        {
          v234 = *v231;
          v235 = *(_OWORD *)v308;
        }
        *(_OWORD *)(v234 + 16 * v232) = v235;
        ++*(_DWORD *)(v230 + 196);
      }
      v220 += 3;
    }
    while (v221 + 3 != v219);
  }
  if (*((_BYTE *)this + 500))
  {
    v236 = (uint64_t *)*((_QWORD *)this + 63);
    if (v236)
      v237 = *v236;
    else
      v237 = 0;
    JSC::performGeneratorification((uint64_t)this, *((uint64_t **)this + 3), (uint64_t *)this, v237, *((_DWORD *)this + 128));
  }
  v197 = *((_QWORD *)this + 3);
  if ((*(_QWORD *)(**(_QWORD **)(v197 + 8) + 20) & 0x40000000) != 0)
  {
    __break(0xC471u);
    goto LABEL_261;
  }
  *a2 = *((_DWORD *)this + 3);
  *((_BYTE *)this + 20) = 1;
  v198 = *((unsigned int *)this + 3);
  if (*((_DWORD *)this + 2) > v198)
  {
    v199 = *(_QWORD *)this;
    if ((_DWORD)v198)
    {
      *((_DWORD *)this + 2) = v198;
      *(_QWORD *)this = WTF::fastRealloc(v199, v198, v18, v19, v20, v21, v22, v23);
    }
    else if (v199)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v199, (void *)v198, v18, v19, v20, v21, v22, v23);
    }
  }
  v200 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v200 = 0;
  *(_QWORD *)(v200 + 8) = 0;
  v201 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  *(_QWORD *)v200 = v201;
  LODWORD(v201) = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = 0;
  *(_DWORD *)(v200 + 8) = v201;
  LODWORD(v201) = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = 0;
  *(_DWORD *)(v200 + 12) = v201;
  v305 = (WTF *)v200;
  JSC::UnlinkedCodeBlockGenerator::finalize(v197, (uint64_t *)&v305, v202, v203, v204, v205, v206, v207);
  v215 = v305;
  v305 = 0;
  if (v215)
  {
    v216 = *(_QWORD *)v215;
    if (*(_QWORD *)v215)
    {
      *(_QWORD *)v215 = 0;
      *((_DWORD *)v215 + 2) = 0;
      WTF::fastFree(v216, v208, v209, v210, v211, v212, v213, v214);
    }
    WTF::fastFree((unint64_t)v215, v208, v209, v210, v211, v212, v213, v214);
  }
  if ((*a2 & 0x80000000) != 0)
  {
LABEL_208:
    *(_DWORD *)a9 = 0x100000;
    *(_OWORD *)(a9 + 8) = 0u;
    *(_OWORD *)(a9 + 24) = 0u;
    *(_QWORD *)(a9 + 40) = 0;
    *(_QWORD *)(a9 + 48) = -1;
    *(_QWORD *)(a9 + 56) = -1;
    *(_QWORD *)(a9 + 64) = -1;
    *(_QWORD *)(a9 + 72) = 0;
    *(_DWORD *)(a9 + 80) = -1;
    goto LABEL_209;
  }
  v217 = *((unsigned __int8 *)this + 706);
  *(_DWORD *)a9 = 0x100000;
  *(_OWORD *)(a9 + 8) = 0u;
  *(_OWORD *)(a9 + 24) = 0u;
  *(_QWORD *)(a9 + 40) = 0;
  *(_QWORD *)(a9 + 48) = -1;
  *(_QWORD *)(a9 + 56) = -1;
  *(_QWORD *)(a9 + 64) = -1;
  *(_QWORD *)(a9 + 72) = 0;
  *(_DWORD *)(a9 + 80) = -1;
  if (v217)
  {
LABEL_209:
    *(_BYTE *)(a9 + 84) = 3;
    goto LABEL_182;
  }
  *(_BYTE *)(a9 + 84) = 0;
LABEL_182:
  *(_BYTE *)(a9 + 85) = 0;
}

uint64_t JSC::BytecodeGenerator::initializeVariable(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (a2[8])
  {
    v11 = JSC::BytecodeGenerator::emitResolveScope(a1, 0, a2, a4, a5, a6, a7, a8);
    return JSC::BytecodeGenerator::emitPutToScope(a1, v11, (uint64_t)a2, a3, 0, 2, v12, v13);
  }
  else
  {
    result = 2684;
    __break(0xC471u);
  }
  return result;
}

double JSC::BytecodeGenerator::variable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  double result;
  int v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  _DWORD *v59;
  unsigned int *v60;
  unsigned int v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t **v90;
  uint64_t *i;
  uint64_t *v92;
  uint64_t v93;
  WTF *v94;
  _QWORD *v95;
  uint64_t v96;

  v11 = JSC::Symbols::thisPrivateName[0];
  JSC::Symbols::thisPrivateName[0] += 2;
  if (*(int **)a3 != JSC::Symbols::thisPrivateName)
  {
    if (v11)
    {
      JSC::Symbols::thisPrivateName[0] = v11;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
LABEL_4:
    v12 = (_QWORD *)(a2 + 88);
    v13 = (_QWORD *)(a1 + 16);
    v14 = *(unsigned int *)(a2 + 124);
    while (1)
    {
      if (!v14)
        goto LABEL_47;
      if (--v14 >= (unint64_t)*(unsigned int *)(a2 + 124))
      {
        __break(0xC471u);
        JUMPOUT(0x198226A7CLL);
      }
      v15 = *(_QWORD *)(a2 + 112);
      if (*(_BYTE *)(v15 + 24 * v14 + 16))
      {
LABEL_47:
        v44 = *(_DWORD **)a3;
        if (*(_QWORD *)a3)
          *v44 += 2;
        *(_QWORD *)a1 = v44;
        *(_BYTE *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 12) = -1;
        *v13 = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 29) = 0;
        return result;
      }
      v16 = *(_QWORD *)(v15 + 24 * v14);
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        goto LABEL_42;
      v18 = *(_DWORD **)a3;
      v19 = *(_DWORD *)(*(_QWORD *)a3 + 16);
      if ((v19 & 0x20) != 0)
        v19 = v18[8];
      v20 = *(_DWORD *)(v17 - 8);
      v21 = v20 & (v19 >> 8);
      v22 = *(_DWORD **)(v17 + 16 * v21);
      if (v22 != v18)
      {
        v23 = 1;
        while (v22)
        {
          v21 = ((_DWORD)v21 + v23) & v20;
          v22 = *(_DWORD **)(v17 + 16 * v21);
          ++v23;
          if (v22 == v18)
            goto LABEL_15;
        }
LABEL_42:
        v96 = 1;
        v25 = 1;
        goto LABEL_17;
      }
LABEL_15:
      v24 = v17 + 16 * v21;
      v27 = *(_QWORD *)(v24 + 8);
      v26 = (_QWORD **)(v24 + 8);
      v25 = v27;
      v96 = 1;
      if ((v27 & 1) != 0)
      {
        v96 = v25;
        goto LABEL_17;
      }
      v95 = v12;
      v25 = WTF::fastMalloc((WTF *)0x10);
      v60 = (unsigned int *)(*v26)[1];
      *(_QWORD *)v25 = **v26;
      if (v60)
      {
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 + 1, v60));
        v12 = v95;
        v62 = (WTF *)v96;
        *(_QWORD *)(v25 + 8) = v60;
        v63 = 12;
        v64 = 2;
        if ((v62 & 1) != 0 || !v62)
          goto LABEL_63;
        v86 = v25;
        v87 = *((_QWORD *)v62 + 1);
        v94 = v62;
        *((_QWORD *)v62 + 1) = 0;
        if (v87)
        {
          do
          {
            v88 = __ldaxr((unsigned int *)v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, (unsigned int *)v87));
          if (!v89)
          {
            atomic_store(1u, (unsigned int *)v87);
            v90 = (uint64_t **)(v87 + 8);
            for (i = *(uint64_t **)(v87 + 8); i != (uint64_t *)v90; i = *v90)
            {
              v93 = *i;
              v92 = (uint64_t *)i[1];
              *v92 = *i;
              *(_QWORD *)(v93 + 8) = v92;
              *i = 0;
              i[1] = 0;
            }
            WTF::fastFree(v87, (void *)0xC, 2, a4, a5, a6, a7, a8);
          }
        }
        WTF::fastFree((unint64_t)v94, (void *)v63, v64, a4, a5, a6, a7, a8);
        v25 = v86;
      }
      else
      {
        *(_QWORD *)(v25 + 8) = 0;
      }
      v12 = v95;
LABEL_63:
      v96 = v25;
LABEL_17:
      if ((v25 & 1) != 0)
        v28 = (unint64_t *)&v96;
      else
        v28 = (unint64_t *)v25;
      v29 = *v28;
      if (*v28 >= 2)
      {
        v30 = (*(unsigned __int8 *)(v16 + 21) >> 2) & 7;
        if (v30 == 5)
        {
          if (*(_BYTE *)(a2 + 708))
          {
            v85 = *(_DWORD **)a3;
            if (*(_QWORD *)a3)
              *v85 += 2;
            *(_QWORD *)a1 = v85;
            *(_BYTE *)(a1 + 8) = 0;
            *(_DWORD *)(a1 + 12) = -1;
            *v13 = 0;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 29) = 0;
            goto LABEL_38;
          }
          v65 = *(_DWORD *)(v15 + 24 * v14 + 20);
          v66 = v29 & 0x30;
          v67 = v29 >> 6;
          if (v66 == 32)
          {
            v68 = (v29 >> 6);
            if ((v67 & 0x80000000) != 0)
            {
              v69 = v68 ^ 0xFFFFFFFFLL;
              v70 = v69 >> 5;
              if (v69 >> 5 >= *(unsigned int *)(a2 + 100))
              {
                __break(0xC471u);
                JUMPOUT(0x198226A94);
              }
              v71 = v12;
              goto LABEL_69;
            }
            if ((_DWORD)v67 == 3)
            {
              v72 = a2 + 232;
            }
            else
            {
              v69 = (int)v68 - 5;
              v70 = v69 >> 5;
              if (v69 >> 5 >= *(unsigned int *)(a2 + 356))
              {
                __break(0xC471u);
                JUMPOUT(0x198226A9CLL);
              }
              v71 = (_QWORD *)(a2 + 344);
LABEL_69:
              v72 = *(_QWORD *)(*v71 + 8 * v70) + 12 * (v69 & 0x1F);
            }
          }
          else
          {
            v72 = 0;
          }
          if ((v29 & 4) != 0)
            v73 = 6;
          else
            v73 = 2;
          v74 = *(_DWORD **)a3;
          if (*(_QWORD *)a3)
            *v74 += 2;
          v75 = 2;
          if (v66 != 32)
            v75 = 3;
          if (v66 <= 0x10)
            v76 = 1;
          else
            v76 = v75;
          *(_QWORD *)a1 = v74;
          *(_QWORD *)(a1 + 8) = v76 | (v67 << 32);
          *(_QWORD *)(a1 + 16) = v72;
          *(_DWORD *)(a1 + 28) = 0;
          *(_DWORD *)(a1 + 32) = v65;
          *(_BYTE *)(a1 + 36) = 0;
          *(_DWORD *)(a1 + 24) = v73;
          goto LABEL_38;
        }
        v31 = *(_DWORD *)(v15 + 24 * v14 + 20);
        v32 = v29 & 0x30;
        v33 = v29 >> 6;
        if (v32 == 32)
        {
          v34 = (v29 >> 6);
          if ((v33 & 0x80000000) != 0)
          {
            v35 = v34 ^ 0xFFFFFFFFLL;
            v36 = v35 >> 5;
            if (v35 >> 5 >= *(unsigned int *)(a2 + 100))
            {
              __break(0xC471u);
              JUMPOUT(0x198226A84);
            }
            v37 = v12;
            goto LABEL_26;
          }
          if ((_DWORD)v33 == 3)
          {
            v38 = a2 + 232;
          }
          else
          {
            v35 = (int)v34 - 5;
            v36 = v35 >> 5;
            if (v35 >> 5 >= *(unsigned int *)(a2 + 356))
            {
              __break(0xC471u);
              JUMPOUT(0x198226A8CLL);
            }
            v37 = (_QWORD *)(a2 + 344);
LABEL_26:
            v38 = *(_QWORD *)(*v37 + 8 * v36) + 12 * (v35 & 0x1F);
          }
        }
        else
        {
          v38 = 0;
        }
        v39 = v29 & 2;
        if ((v29 & 4) != 0)
          v39 = v29 & 2 | 4;
        v40 = *(_DWORD **)a3;
        if (*(_QWORD *)a3)
          *v40 += 2;
        v41 = v30 == 2;
        if (v32 == 32)
          v42 = 2;
        else
          v42 = 3;
        if (v32 <= 0x10)
          v43 = 1;
        else
          v43 = v42;
        *(_QWORD *)a1 = v40;
        *(_QWORD *)(a1 + 8) = v43 | (v33 << 32);
        *(_QWORD *)(a1 + 16) = v38;
        *(_DWORD *)(a1 + 24) = v39;
        *(_DWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 32) = v31;
        *(_BYTE *)(a1 + 36) = v41;
      }
LABEL_38:
      if ((v25 & 1) == 0)
      {
        v53 = v12;
        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v96, (void *)0xC, 2, a4, a5, a6, a7, a8);
        v12 = v53;
      }
      if (v29 >= 2)
        return result;
    }
  }
  v55 = a4;
  if (v11)
  {
    JSC::Symbols::thisPrivateName[0] = v11;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  if (v55)
    goto LABEL_4;
  LODWORD(v56) = *(_DWORD *)(a2 + 224);
  v57 = v56 != 0x3FFFFFFF;
  if ((_DWORD)v56 == 0x3FFFFFFF)
    v56 = 0xFFFFFFFFLL;
  else
    v56 = v56;
  v58 = (2 * v57) | (v56 << 32);
  v59 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v59 += 2;
  *(_QWORD *)a1 = v59;
  *(_QWORD *)(a1 + 8) = v58;
  *(_QWORD *)(a1 + 16) = a2 + 220;
  *(_QWORD *)&result = 0x100000002;
  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  return result;
}

_QWORD *JSC::BytecodeGenerator::emitNewFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _BOOL4 v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;

  v11 = *(_QWORD *)(a1 + 24);
  result = (_QWORD *)JSC::BytecodeGenerator::makeFunction(a1, a3, a3, a4, a5, a6, a7, a8);
  v19 = result;
  v20 = (_QWORD *)(v11 + 80);
  v86 = 0;
  v21 = *(unsigned int *)(v11 + 92);
  if ((_DWORD)v21 == *(_DWORD *)(v11 + 88))
  {
    result = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 80, v21 + 1, (unint64_t)&v86);
    *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * *(unsigned int *)(v11 + 92)) = *result;
  }
  else
  {
    *(_QWORD *)(*v20 + 8 * v21) = 0;
  }
  v22 = *(_DWORD *)(v11 + 92);
  v23 = __CFADD__(v22, 1);
  v24 = v22 + 1;
  *(_DWORD *)(v11 + 92) = v24;
  if (!v23)
  {
    *(_QWORD *)(*v20 + 8 * v24 - 8) = v19;
    v25 = *(unsigned __int8 *)(a3 + 35);
    if (((1 << v25) & 0x40004) != 0)
    {
      JSC::OpNewGeneratorFunc::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
      return (_QWORD *)a2;
    }
    if (v25 == 9)
    {
      JSC::OpNewAsyncFunc::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
      return (_QWORD *)a2;
    }
    v26 = *(_DWORD *)(a2 + 4);
    v27 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4);
    if (((1 << v25) & 0x30000) != 0)
    {
      JSC::OpNewAsyncGeneratorFunc::emit<JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
      return (_QWORD *)a2;
    }
    v28 = (v26 - 1073741808) < 0x80;
    if (v26 <= 0x3FFFFFFF)
      v28 = (v26 + 128) < 0x90;
    if (!v28)
      goto LABEL_36;
    v29 = (v27 - 1073741808) < 0x80;
    if (v27 <= 0x3FFFFFFF)
      v29 = (v27 + 128) < 0x90;
    if (v21 <= 0xFF && v29)
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5D, v13, v14, v15, v16, v17, v18);
      LOBYTE(v86) = 93;
      v30 = *(unsigned int *)(a1 + 12);
      v31 = *(unsigned int *)(a1 + 16);
      if (v30 > v31)
      {
        *(_DWORD *)(a1 + 16) = v31 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v31) = 93;
        v34 = *(_DWORD *)(a1 + 12);
        v35 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v30 == *(_DWORD *)(a1 + 8))
        {
          v79 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v86);
          v30 = *(unsigned int *)(a1 + 12);
          v32 = *(_QWORD *)a1;
          v33 = *v79;
        }
        else
        {
          v32 = *(_QWORD *)a1;
          v33 = 93;
        }
        *(_BYTE *)(v32 + v30) = v33;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
      }
      v36 = v26 + 16;
      if (v26 <= 0x3FFFFFFF)
        v36 = v26;
      LOBYTE(v86) = v36;
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = v36;
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v37 = v34;
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          v80 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v86);
          v37 = *(unsigned int *)(a1 + 12);
          v38 = *(_QWORD *)a1;
          v36 = *v80;
        }
        else
        {
          v38 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v38 + v37) = v36;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v41 = v27 + 16;
      if (v27 <= 0x3FFFFFFF)
        v41 = v27;
      LOBYTE(v86) = v41;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v41;
        v44 = *(_DWORD *)(a1 + 12);
        v45 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v42 = v39;
        if (v39 == *(_DWORD *)(a1 + 8))
        {
          v81 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v86);
          v42 = *(unsigned int *)(a1 + 12);
          v43 = *(_QWORD *)a1;
          v41 = *v81;
        }
        else
        {
          v43 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v43 + v42) = v41;
        v44 = *(_DWORD *)(a1 + 12) + 1;
        v45 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v44;
        *(_DWORD *)(a1 + 16) = v45;
      }
      LOBYTE(v86) = v21;
      if (v44 > v45)
      {
        *(_DWORD *)(a1 + 16) = v45 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v45) = v21;
        return (_QWORD *)a2;
      }
      v46 = v44;
      if (v44 != *(_DWORD *)(a1 + 8))
      {
        *(_BYTE *)(*(_QWORD *)a1 + v44) = v21;
LABEL_33:
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        return (_QWORD *)a2;
      }
    }
    else
    {
LABEL_36:
      if (v26 <= 0x3FFFFFFF)
        v47 = (v26 + 0x8000) >> 6 < 0x201;
      else
        v47 = (v26 - 1073741760) < 0x8000;
      if (!v47)
        goto LABEL_93;
      v48 = (v27 - 1073741760) < 0x8000;
      if (v27 <= 0x3FFFFFFF)
        v48 = (v27 + 0x8000) >> 6 < 0x201;
      if (WORD1(v21) || !v48)
      {
LABEL_93:
        JSC::OpNewFunc::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4), v21, v15, v16, v17, v18);
        return (_QWORD *)a2;
      }
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5D, v13, v14, v15, v16, v17, v18);
      LOBYTE(v86) = 0x80;
      v49 = *(unsigned int *)(a1 + 12);
      v50 = *(unsigned int *)(a1 + 16);
      if (v49 > v50)
      {
        *(_DWORD *)(a1 + 16) = v50 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v50) = 0x80;
        v53 = *(_DWORD *)(a1 + 12);
        v54 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v49 == *(_DWORD *)(a1 + 8))
        {
          v82 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v86);
          v49 = *(unsigned int *)(a1 + 12);
          v51 = *(_QWORD *)a1;
          v52 = *v82;
        }
        else
        {
          v51 = *(_QWORD *)a1;
          v52 = 0x80;
        }
        *(_BYTE *)(v51 + v49) = v52;
        v53 = *(_DWORD *)(a1 + 12) + 1;
        v54 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v53;
        *(_DWORD *)(a1 + 16) = v54;
      }
      v55 = 93;
      LOBYTE(v86) = 93;
      if (v53 > v54)
      {
        *(_DWORD *)(a1 + 16) = v54 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v54) = 93;
        v58 = *(_DWORD *)(a1 + 12);
        v59 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v56 = v53;
        if (v53 == *(_DWORD *)(a1 + 8))
        {
          v83 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v86);
          v56 = *(unsigned int *)(a1 + 12);
          v57 = *(_QWORD *)a1;
          v55 = *v83;
        }
        else
        {
          v57 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v57 + v56) = v55;
        v58 = *(_DWORD *)(a1 + 12) + 1;
        v59 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v58;
        *(_DWORD *)(a1 + 16) = v59;
      }
      if (v26 > 0x3FFFFFFF)
        v26 += 64;
      LOBYTE(v86) = v26;
      if (v58 > v59)
      {
        *(_DWORD *)(a1 + 16) = v59 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v59) = v26;
        v60 = *(_DWORD *)(a1 + 12);
        v61 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v58 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v58 + 1), (unint64_t)&v86);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v58) = v26;
        v60 = *(_DWORD *)(a1 + 12) + 1;
        v61 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v60;
        *(_DWORD *)(a1 + 16) = v61;
      }
      v62 = v26 >> 8;
      LOBYTE(v86) = BYTE1(v26);
      if (v60 > v61)
      {
        *(_DWORD *)(a1 + 16) = v61 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v61) = BYTE1(v26);
        v65 = *(_DWORD *)(a1 + 12);
        v66 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v63 = v60;
        if (v60 == *(_DWORD *)(a1 + 8))
        {
          v84 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v60 + 1), (unint64_t)&v86);
          v63 = *(unsigned int *)(a1 + 12);
          v64 = *(_QWORD *)a1;
          LOBYTE(v62) = *v84;
        }
        else
        {
          v64 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v64 + v63) = v62;
        v65 = *(_DWORD *)(a1 + 12) + 1;
        v66 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v65;
        *(_DWORD *)(a1 + 16) = v66;
      }
      if (v27 > 0x3FFFFFFF)
        v27 += 64;
      LOBYTE(v86) = v27;
      if (v65 > v66)
      {
        *(_DWORD *)(a1 + 16) = v66 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v66) = v27;
        v67 = *(_DWORD *)(a1 + 12);
        v68 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v65 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v65 + 1), (unint64_t)&v86);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v65) = v27;
        v67 = *(_DWORD *)(a1 + 12) + 1;
        v68 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v67;
        *(_DWORD *)(a1 + 16) = v68;
      }
      v69 = v27 >> 8;
      LOBYTE(v86) = BYTE1(v27);
      if (v67 > v68)
      {
        *(_DWORD *)(a1 + 16) = v68 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v68) = BYTE1(v27);
        v72 = *(_DWORD *)(a1 + 12);
        v73 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v70 = v67;
        if (v67 == *(_DWORD *)(a1 + 8))
        {
          v85 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v67 + 1), (unint64_t)&v86);
          v70 = *(unsigned int *)(a1 + 12);
          v71 = *(_QWORD *)a1;
          LOBYTE(v69) = *v85;
        }
        else
        {
          v71 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v71 + v70) = v69;
        v72 = *(_DWORD *)(a1 + 12) + 1;
        v73 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v72;
        *(_DWORD *)(a1 + 16) = v73;
      }
      LOBYTE(v86) = v21;
      if (v72 > v73)
      {
        *(_DWORD *)(a1 + 16) = v73 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v73) = v21;
        v74 = *(_DWORD *)(a1 + 12);
        v75 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v72 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v72 + 1), (unint64_t)&v86);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v72) = v21;
        v74 = *(_DWORD *)(a1 + 12) + 1;
        v75 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v74;
        *(_DWORD *)(a1 + 16) = v75;
      }
      v76 = v21 >> 8;
      LOBYTE(v86) = BYTE1(v21);
      if (v74 > v75)
      {
        *(_DWORD *)(a1 + 16) = v75 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v75) = BYTE1(v21);
        return (_QWORD *)a2;
      }
      v46 = v74;
      if (v74 != *(_DWORD *)(a1 + 8))
      {
        v77 = *(_QWORD *)a1;
LABEL_79:
        *(_BYTE *)(v77 + v46) = v76;
        goto LABEL_33;
      }
    }
    v78 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v46 + 1), (unint64_t)&v86);
    v46 = *(unsigned int *)(a1 + 12);
    v77 = *(_QWORD *)a1;
    LOBYTE(v76) = *v78;
    goto LABEL_79;
  }
  __break(0xC471u);
  return result;
}

_DWORD *JSC::BytecodeGenerator::emitResolveScopeForHoistingFuncDeclInEval(uint64_t a1, WTF::AtomStringImpl *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v4 = (_DWORD *)JSC::BytecodeGenerator::finalDestination(a1, 0, 0);
  v5 = v4;
  if (v4)
    ++*v4;
  v6 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  v13 = v6;
  if (v6)
    ++*v6;
  v14 = v6[1];
  if (!JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v14, v7, v8, v9, v10, v11, v12)
    && !JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v14, v15, v16, v17, v18, v19, v20))
  {
    JSC::OpGetScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v14, v15, v16, v17, v18, v19, v20);
  }
  JSC::BytecodeGenerator::kill(a1, v5, v15, v16, v17, v18, v19, v20);
  v21 = v5[1];
  v22 = v13[1];
  v29 = JSC::BytecodeGenerator::addConstant(a1, a2, v23, v24, v25, v26, v27, v28);
  v36 = v29;
  v37 = (v21 - 1073741808) < 0x80;
  if (v21 <= 0x3FFFFFFF)
    v37 = (v21 + 128) < 0x90;
  if (v37
    && ((int)v22 <= 0x3FFFFFFF
      ? (v38 = (v22 + 128) < 0x90)
      : (v38 = (v22 - 1073741808) < 0x80),
        v29 <= 0xFF && v38))
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x7C, v30, v31, v32, v33, v34, v35);
    v63 = 124;
    v39 = *(unsigned int *)(a1 + 12);
    v40 = *(unsigned int *)(a1 + 16);
    if (v39 > v40)
    {
      *(_DWORD *)(a1 + 16) = v40 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v40) = 124;
      v43 = *(_DWORD *)(a1 + 12);
      v44 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v39 == *(_DWORD *)(a1 + 8))
      {
        v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v63);
        v39 = *(unsigned int *)(a1 + 12);
        v41 = *(_QWORD *)a1;
        v42 = *v56;
      }
      else
      {
        v41 = *(_QWORD *)a1;
        v42 = 124;
      }
      *(_BYTE *)(v41 + v39) = v42;
      v43 = *(_DWORD *)(a1 + 12) + 1;
      v44 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v43;
      *(_DWORD *)(a1 + 16) = v44;
    }
    v45 = v21 + 16;
    if (v21 <= 0x3FFFFFFF)
      v45 = v21;
    v64 = v45;
    if (v43 > v44)
    {
      *(_DWORD *)(a1 + 16) = v44 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v44) = v45;
      v48 = *(_DWORD *)(a1 + 12);
      v49 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v46 = v43;
      if (v43 == *(_DWORD *)(a1 + 8))
      {
        v57 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v64);
        v46 = *(unsigned int *)(a1 + 12);
        v47 = *(_QWORD *)a1;
        v45 = *v57;
      }
      else
      {
        v47 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v47 + v46) = v45;
      v48 = *(_DWORD *)(a1 + 12) + 1;
      v49 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v48;
      *(_DWORD *)(a1 + 16) = v49;
    }
    v50 = v22 + 16;
    if ((int)v22 <= 0x3FFFFFFF)
      v50 = v22;
    v65 = v50;
    if (v48 > v49)
    {
      *(_DWORD *)(a1 + 16) = v49 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v49) = v50;
      v53 = *(_DWORD *)(a1 + 12);
      v54 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v51 = v48;
      if (v48 == *(_DWORD *)(a1 + 8))
      {
        v58 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v65);
        v51 = *(unsigned int *)(a1 + 12);
        v52 = *(_QWORD *)a1;
        v50 = *v58;
      }
      else
      {
        v52 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v52 + v51) = v50;
      v53 = *(_DWORD *)(a1 + 12) + 1;
      v54 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v53;
      *(_DWORD *)(a1 + 16) = v54;
    }
    v66 = v36;
    if (v53 > v54)
    {
      *(_DWORD *)(a1 + 16) = v54 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v54) = v36;
    }
    else
    {
      if (v53 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v66);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v53) = v36;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else if ((JSC::OpResolveScopeForHoistingFuncDeclInEval::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v21, v22, v29, v32, v33, v34, v35) & 1) == 0)
  {
    JSC::OpResolveScopeForHoistingFuncDeclInEval::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v21, v22, v36, v59, v60, v61, v62);
  }
  --*v13;
  --*v5;
  return v5;
}

uint64_t JSC::BytecodeGenerator::emitResolveScope(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  signed int v26;
  signed int v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  int v94;
  uint64_t v95;
  WTF *v96;
  _QWORD **v97;
  WTF *v98;
  WTF **v99;
  unint64_t v100;
  _BOOL4 v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t *v162;
  unsigned __int8 *v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  unsigned int v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD **v183;
  uint64_t v184;
  _DWORD *v185;
  unsigned int v186;
  _BYTE *v187;
  char *v188;
  char *v189;
  char *v190;
  _QWORD *v191;
  WTF *v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  char *v196;
  _BYTE *v197;
  _BYTE *v198;
  _BYTE *v199;
  _BYTE *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  char *v208;
  char *v209;
  uint64_t v210;
  WTF *v211;
  _QWORD *v212;
  unsigned int *v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t **v219;
  uint64_t *i;
  uint64_t *v221;
  uint64_t v222;
  WTF *v223;

  v10 = a3[8];
  if (!a3[8])
  {
    v11 = (uint64_t)a2;
    if (!a2 || (_BYTE *)(a1 + 208) == a2 || !a2[8])
    {
      v12 = *(_QWORD *)(a1 + 80);
      v13 = *(unsigned int *)(a1 + 100);
      if (v12)
      {
        v14 = *(_QWORD *)(a1 + 88);
        do
        {
          v15 = v12 - 1;
          v16 = (v12 - 1) >> 5;
          if (v16 >= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1982289FCLL);
          }
          if (*(_DWORD *)(*(_QWORD *)(v14 + 8 * v16) + 12 * (v15 & 0x1F)))
            break;
          *(_QWORD *)(a1 + 80) = v15;
          --v12;
        }
        while (v15);
      }
      v17 = v12 + 1;
      *(_QWORD *)(a1 + 80) = v12 + 1;
      v18 = v12 >> 5;
      if (v12 >> 5 >= v13)
      {
        v191 = (_QWORD *)(a1 + 88);
        v192 = (WTF *)WTF::fastMalloc((WTF *)0x180);
        v223 = v192;
        v193 = *(unsigned int *)(a1 + 100);
        if ((_DWORD)v193 == *(_DWORD *)(a1 + 96))
        {
          v194 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v193 + 1, (unint64_t)&v223);
          v193 = *(unsigned int *)(a1 + 100);
          *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v193) = *v194;
        }
        else
        {
          *(_QWORD *)(*v191 + 8 * v193) = v192;
        }
        v13 = (v193 + 1);
        *(_DWORD *)(a1 + 100) = v13;
        v17 = *(_QWORD *)(a1 + 80);
        v19 = v17 - 1;
        v18 = (v17 - 1) >> 5;
      }
      else
      {
        v19 = v12;
      }
      if (v18 >= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198228A0CLL);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v18) + 12 * (v19 & 0x1F);
      *(_DWORD *)v20 = 0;
      *(_DWORD *)(v20 + 4) = ~(_DWORD)v12;
      *(_BYTE *)(v20 + 8) = 0;
      v21 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
      v22 = *(_QWORD *)(v21 + 20);
      if ((v22 & 0x7FFFFFFF) > v17)
        v17 = v22 & 0x7FFFFFFF;
      v23 = v17 + 1;
      *(_QWORD *)(v21 + 20) = v22 & 0xFFFFFFFF80000000 | v23 & 0x7FFFFFFE;
      if ((v23 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL))
      {
        __break(0xC471u);
        JUMPOUT(0x1982286D8);
      }
      v24 = *(_QWORD *)(a1 + 80) - 1;
      if (v24 >> 5 >= *(unsigned int *)(a1 + 100))
      {
        __break(0xC471u);
        JUMPOUT(0x198228A14);
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v24 >> 5)) + 12 * (v24 & 0x1F);
      *(_BYTE *)(v11 + 8) = 1;
    }
    v25 = *(_QWORD *)(a1 + 688);
    if (v25)
    {
      v150 = *(_DWORD *)(v11 + 4);
      v151 = *(_DWORD *)(v25 - 8);
      v152 = 9 * ((v150 + ~(v150 << 15)) ^ ((v150 + ~(v150 << 15)) >> 10));
      v153 = (v152 ^ (v152 >> 6)) + ~((v152 ^ (v152 >> 6)) << 11);
      v154 = v151 & (v153 ^ HIWORD(v153));
      v155 = *(_DWORD *)(v25 + 16 * v154);
      if (v155 != v150)
      {
        v156 = 1;
        while (v155 != 0x7FFFFFFF)
        {
          v154 = ((_DWORD)v154 + v156) & v151;
          v155 = *(_DWORD *)(v25 + 16 * v154);
          ++v156;
          if (v155 == v150)
            goto LABEL_190;
        }
        v154 = *(unsigned int *)(v25 - 4);
      }
LABEL_190:
      if (v154 != *(_DWORD *)(v25 - 4))
      {
        v157 = v25 + 16 * v154;
        v158 = (unint64_t *)(v157 + 8);
        v159 = *(_QWORD *)(v157 + 8);
        v160 = *(_QWORD *)(v159 + 24);
        if (v160)
        {
          v161 = *(_DWORD *)(v160 - 12);
          if (v161)
          {
            v162 = (uint64_t *)(a1 + 688);
            if (*(_DWORD *)v159 == 1)
            {
              v163 = (unsigned __int8 *)(**(_QWORD **)(v159 + 8) + *(unsigned int *)(v159 + 16));
              v164 = *v163;
              v165 = v164;
              if ((v164 | 2) == 0x82)
                v165 = v163[1];
              if (v165 == 29)
              {
                if (v164 == 128)
                {
                  if (v161 >= 0x10000)
                    LOWORD(v161) = 255;
                  *((_WORD *)v163 + 2) = v161;
                }
                else if (v164 == 130)
                {
                  *(_DWORD *)(v163 + 6) = v161;
                }
                else
                {
                  if (v161 >= 0xFF)
                    LOBYTE(v161) = -1;
                  v163[2] = v161;
                }
              }
              else if (v165 == 28)
              {
                if (v164 == 128)
                {
                  if (v161 >= 0x10000)
                    LOWORD(v161) = 255;
                  *((_WORD *)v163 + 3) = v161;
                }
                else if (v164 == 130)
                {
                  *(_DWORD *)(v163 + 10) = v161;
                }
                else
                {
                  if (v161 >= 0xFF)
                    LOBYTE(v161) = -1;
                  v163[3] = v161;
                }
              }
            }
            v201 = *v162;
            if (!*v162 || (v201 += 16 * *(unsigned int *)(v201 - 4), v201 != v157))
            {
              if (v201 != v157)
              {
                *(_DWORD *)v157 = 2147483646;
                v202 = *v158;
                *v158 = 0;
                if (v202)
                {
                  if (*(_DWORD *)v202 == 1)
                  {
                    v210 = *(_QWORD *)(v202 + 24);
                    if (v210)
                      WTF::fastFree(v210 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v202, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    --*(_DWORD *)v202;
                  }
                }
                ++*(_DWORD *)(*v162 - 16);
                v203 = *v162;
                if (*v162)
                  v204 = *(_DWORD *)(v203 - 12) - 1;
                else
                  v204 = -1;
                *(_DWORD *)(v203 - 12) = v204;
                v205 = *v162;
                if (*v162)
                {
                  v206 = 6 * *(_DWORD *)(v205 - 12);
                  v207 = *(_DWORD *)(v205 - 4);
                  if (v206 < v207 && v207 >= 9)
                    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)(a1 + 688), v207 >> 1, 0);
                }
              }
            }
          }
        }
      }
    }
    v26 = *(_DWORD *)(v11 + 4);
    v27 = *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4);
    v28 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v28 += 2;
    v29 = (uint64_t *)(a1 + 640);
    v30 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
    v31 = *(_QWORD *)(a1 + 640);
    if (v31
      || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), 8u, 0), (v31 = *v29) != 0))
    {
      v32 = *(_DWORD *)(v31 - 8);
    }
    else
    {
      v32 = 0;
    }
    v33 = *((_DWORD *)v28 + 4);
    if ((v33 & 0x20) != 0)
      v33 = *((_DWORD *)v28 + 8);
    v34 = v32 & (v33 >> 8);
    v35 = v31 + 16 * v34;
    v36 = *(WTF::StringImpl **)v35;
    if (*(_QWORD *)v35)
    {
      v37 = 0;
      v38 = 1;
      while (v36 != v28)
      {
        if (v36 == (WTF::StringImpl *)-1)
          v37 = v35;
        v34 = (v34 + v38) & v32;
        v35 = v31 + 16 * v34;
        v36 = *(WTF::StringImpl **)v35;
        ++v38;
        if (!*(_QWORD *)v35)
        {
          if (v37)
          {
            *(_QWORD *)v37 = 0;
            *(_DWORD *)(v37 + 8) = 0x7FFFFFFF;
            --*(_DWORD *)(*v29 - 16);
            v35 = v37;
          }
          goto LABEL_33;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
LABEL_47:
      v50 = *(_DWORD *)(v35 + 8);
      v51 = *(unsigned int *)(a1 + 124);
      if ((_DWORD)v51)
      {
        v52 = *(_QWORD *)(a1 + 112);
        v53 = 24 * v51;
        while (!*(_BYTE *)(v52 + v53 - 8))
        {
          v54 = *(unsigned __int8 *)(a1 + 708);
          if (*(_BYTE *)(a1 + 708))
          {
            if ((*(_BYTE *)(*(_QWORD *)(v52 + v53 - 24) + 21) & 0x1C) == 0x14)
              break;
          }
          v53 -= 24;
          if (!v53)
            goto LABEL_54;
        }
        v55 = 12;
      }
      else
      {
        v54 = *(unsigned __int8 *)(a1 + 708);
LABEL_54:
        if (v54)
          v55 = 6;
        else
          v55 = 0;
      }
      v56 = *(_DWORD *)(a1 + 412);
      v57 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
      *(_BYTE *)(v57 + 4) |= 1u;
      v58 = *(_QWORD *)(v57 + 16);
      v59 = *(_DWORD *)(v58 + 100);
      *(_DWORD *)(v58 + 100) = v59 + 1;
      v60 = (v26 - 1073741808) < 0x80;
      if (v26 <= 0x3FFFFFFF)
        v60 = (v26 + 128) < 0x90;
      if (!v60)
        goto LABEL_116;
      v61 = (v27 - 1073741808) < 0x80;
      if (v27 <= 0x3FFFFFFF)
        v61 = (v27 + 128) < 0x90;
      if (v61 && (v56 | v50 | v59) <= 0xFF)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x19, (uint64_t)a3, a4, a5, a6, a7, a8);
        LOBYTE(v223) = 25;
        v62 = *(unsigned int *)(a1 + 12);
        v63 = *(unsigned int *)(a1 + 16);
        if (v62 > v63)
        {
          *(_DWORD *)(a1 + 16) = v63 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v63) = 25;
          v66 = *(_DWORD *)(a1 + 12);
          v67 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v62 == *(_DWORD *)(a1 + 8))
          {
            v188 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v62 + 1), (unint64_t)&v223);
            v62 = *(unsigned int *)(a1 + 12);
            v64 = *(_QWORD *)a1;
            v65 = *v188;
          }
          else
          {
            v64 = *(_QWORD *)a1;
            v65 = 25;
          }
          *(_BYTE *)(v64 + v62) = v65;
          v66 = *(_DWORD *)(a1 + 12) + 1;
          v67 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v66;
          *(_DWORD *)(a1 + 16) = v67;
        }
        v68 = v26 + 16;
        if (v26 <= 0x3FFFFFFF)
          v68 = v26;
        LOBYTE(v223) = v68;
        if (v66 > v67)
        {
          *(_DWORD *)(a1 + 16) = v67 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v67) = v68;
          v71 = *(_DWORD *)(a1 + 12);
          v72 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v69 = v66;
          if (v66 == *(_DWORD *)(a1 + 8))
          {
            v189 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v66 + 1), (unint64_t)&v223);
            v69 = *(unsigned int *)(a1 + 12);
            v70 = *(_QWORD *)a1;
            v68 = *v189;
          }
          else
          {
            v70 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v70 + v69) = v68;
          v71 = *(_DWORD *)(a1 + 12) + 1;
          v72 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v71;
          *(_DWORD *)(a1 + 16) = v72;
        }
        v73 = v27 + 16;
        if (v27 <= 0x3FFFFFFF)
          v73 = v27;
        LOBYTE(v223) = v73;
        if (v71 > v72)
        {
          *(_DWORD *)(a1 + 16) = v72 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v72) = v73;
          v76 = *(_DWORD *)(a1 + 12);
          v77 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v74 = v71;
          if (v71 == *(_DWORD *)(a1 + 8))
          {
            v190 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v71 + 1), (unint64_t)&v223);
            v74 = *(unsigned int *)(a1 + 12);
            v75 = *(_QWORD *)a1;
            v73 = *v190;
          }
          else
          {
            v75 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v75 + v74) = v73;
          v76 = *(_DWORD *)(a1 + 12) + 1;
          v77 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v76;
          *(_DWORD *)(a1 + 16) = v77;
        }
        LOBYTE(v223) = v50;
        if (v76 > v77)
        {
          *(_DWORD *)(a1 + 16) = v77 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v77) = v50;
          v78 = *(_DWORD *)(a1 + 12);
          v79 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v76 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v76 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v76) = v50;
          v78 = *(_DWORD *)(a1 + 12) + 1;
          v79 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v78;
          *(_DWORD *)(a1 + 16) = v79;
        }
        LOBYTE(v223) = v55;
        if (v78 > v79)
        {
          *(_DWORD *)(a1 + 16) = v79 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v79) = v55;
          v80 = *(_DWORD *)(a1 + 12);
          v81 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v78 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v78 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v78) = v55;
          v80 = *(_DWORD *)(a1 + 12) + 1;
          v81 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v80;
          *(_DWORD *)(a1 + 16) = v81;
        }
        LOBYTE(v223) = v56;
        if (v80 > v81)
        {
          *(_DWORD *)(a1 + 16) = v81 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v81) = v56;
          v82 = *(_DWORD *)(a1 + 12);
          v83 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v80 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v80 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v80) = v56;
          v82 = *(_DWORD *)(a1 + 12) + 1;
          v83 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v82;
          *(_DWORD *)(a1 + 16) = v83;
        }
        LOBYTE(v223) = v59;
        if (v82 > v83)
        {
          *(_DWORD *)(a1 + 16) = v83 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v83) = v59;
          return v11;
        }
        v84 = v82;
        if (v82 != *(_DWORD *)(a1 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a1 + v82) = v59;
LABEL_95:
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          return v11;
        }
      }
      else
      {
LABEL_116:
        if (v26 <= 0x3FFFFFFF)
          v101 = (v26 + 0x8000) >> 6 < 0x201;
        else
          v101 = (v26 - 1073741760) < 0x8000;
        if (!v101)
          goto LABEL_200;
        v102 = (v27 - 1073741760) < 0x8000;
        if (v27 <= 0x3FFFFFFF)
          v102 = (v27 + 0x8000) >> 6 < 0x201;
        if (!v102 || (v56 | v50 | v59) >> 16)
        {
LABEL_200:
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x19, (uint64_t)a3, a4, a5, a6, a7, a8);
          LOBYTE(v223) = -126;
          v166 = *(unsigned int *)(a1 + 12);
          v167 = *(unsigned int *)(a1 + 16);
          if (v166 > v167)
          {
            *(_DWORD *)(a1 + 16) = v167 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v167) = -126;
            v170 = *(_DWORD *)(a1 + 12);
            v171 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if ((_DWORD)v166 == *(_DWORD *)(a1 + 8))
            {
              v208 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v166 + 1), (unint64_t)&v223);
              v166 = *(unsigned int *)(a1 + 12);
              v168 = *(_QWORD *)a1;
              v169 = *v208;
            }
            else
            {
              v168 = *(_QWORD *)a1;
              v169 = -126;
            }
            *(_BYTE *)(v168 + v166) = v169;
            v170 = *(_DWORD *)(a1 + 12) + 1;
            v171 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v170;
            *(_DWORD *)(a1 + 16) = v171;
          }
          v172 = 25;
          LOBYTE(v223) = 25;
          if (v170 > v171)
          {
            *(_DWORD *)(a1 + 16) = v171 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v171) = 25;
          }
          else
          {
            v173 = v170;
            if (v170 == *(_DWORD *)(a1 + 8))
            {
              v209 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v170 + 1), (unint64_t)&v223);
              v173 = *(unsigned int *)(a1 + 12);
              v174 = *(_QWORD *)a1;
              v172 = *v209;
            }
            else
            {
              v174 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v174 + v173) = v172;
            *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          }
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v26);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v27);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v50);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v55);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v56);
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v59);
          return v11;
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x19, (uint64_t)a3, a4, a5, a6, a7, a8);
        LOBYTE(v223) = 0x80;
        v103 = *(unsigned int *)(a1 + 12);
        v104 = *(unsigned int *)(a1 + 16);
        if (v103 > v104)
        {
          *(_DWORD *)(a1 + 16) = v104 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v104) = 0x80;
          v107 = *(_DWORD *)(a1 + 12);
          v108 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v103 == *(_DWORD *)(a1 + 8))
          {
            v195 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v103 + 1), (unint64_t)&v223);
            v103 = *(unsigned int *)(a1 + 12);
            v105 = *(_QWORD *)a1;
            v106 = *v195;
          }
          else
          {
            v105 = *(_QWORD *)a1;
            v106 = 0x80;
          }
          *(_BYTE *)(v105 + v103) = v106;
          v107 = *(_DWORD *)(a1 + 12) + 1;
          v108 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v107;
          *(_DWORD *)(a1 + 16) = v108;
        }
        v109 = 25;
        LOBYTE(v223) = 25;
        if (v107 > v108)
        {
          *(_DWORD *)(a1 + 16) = v108 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v108) = 25;
          v112 = *(_DWORD *)(a1 + 12);
          v113 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v110 = v107;
          if (v107 == *(_DWORD *)(a1 + 8))
          {
            v196 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v107 + 1), (unint64_t)&v223);
            v110 = *(unsigned int *)(a1 + 12);
            v111 = *(_QWORD *)a1;
            v109 = *v196;
          }
          else
          {
            v111 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v111 + v110) = v109;
          v112 = *(_DWORD *)(a1 + 12) + 1;
          v113 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v112;
          *(_DWORD *)(a1 + 16) = v113;
        }
        if (v26 > 0x3FFFFFFF)
          v26 += 64;
        LOBYTE(v223) = v26;
        if (v112 > v113)
        {
          *(_DWORD *)(a1 + 16) = v113 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v113) = v26;
          v114 = *(_DWORD *)(a1 + 12);
          v115 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v112 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v112 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v112) = v26;
          v114 = *(_DWORD *)(a1 + 12) + 1;
          v115 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v114;
          *(_DWORD *)(a1 + 16) = v115;
        }
        v116 = v26 >> 8;
        LOBYTE(v223) = BYTE1(v26);
        if (v114 > v115)
        {
          *(_DWORD *)(a1 + 16) = v115 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v115) = BYTE1(v26);
          v119 = *(_DWORD *)(a1 + 12);
          v120 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v117 = v114;
          if (v114 == *(_DWORD *)(a1 + 8))
          {
            v197 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v114 + 1), (unint64_t)&v223);
            v117 = *(unsigned int *)(a1 + 12);
            v118 = *(_QWORD *)a1;
            LOBYTE(v116) = *v197;
          }
          else
          {
            v118 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v118 + v117) = v116;
          v119 = *(_DWORD *)(a1 + 12) + 1;
          v120 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v119;
          *(_DWORD *)(a1 + 16) = v120;
        }
        if (v27 > 0x3FFFFFFF)
          v27 += 64;
        LOBYTE(v223) = v27;
        if (v119 > v120)
        {
          *(_DWORD *)(a1 + 16) = v120 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v120) = v27;
          v121 = *(_DWORD *)(a1 + 12);
          v122 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v119 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v119 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v119) = v27;
          v121 = *(_DWORD *)(a1 + 12) + 1;
          v122 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v121;
          *(_DWORD *)(a1 + 16) = v122;
        }
        v123 = v27 >> 8;
        LOBYTE(v223) = BYTE1(v27);
        if (v121 > v122)
        {
          *(_DWORD *)(a1 + 16) = v122 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v122) = BYTE1(v27);
          v126 = *(_DWORD *)(a1 + 12);
          v127 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v124 = v121;
          if (v121 == *(_DWORD *)(a1 + 8))
          {
            v198 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v121 + 1), (unint64_t)&v223);
            v124 = *(unsigned int *)(a1 + 12);
            v125 = *(_QWORD *)a1;
            LOBYTE(v123) = *v198;
          }
          else
          {
            v125 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v125 + v124) = v123;
          v126 = *(_DWORD *)(a1 + 12) + 1;
          v127 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v126;
          *(_DWORD *)(a1 + 16) = v127;
        }
        LOBYTE(v223) = v50;
        if (v126 > v127)
        {
          *(_DWORD *)(a1 + 16) = v127 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v127) = v50;
          v128 = *(_DWORD *)(a1 + 12);
          v129 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v126 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v126 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v126) = v50;
          v128 = *(_DWORD *)(a1 + 12) + 1;
          v129 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v128;
          *(_DWORD *)(a1 + 16) = v129;
        }
        v130 = v50 >> 8;
        LOBYTE(v223) = BYTE1(v50);
        if (v128 > v129)
        {
          *(_DWORD *)(a1 + 16) = v129 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v129) = BYTE1(v50);
          v133 = *(_DWORD *)(a1 + 12);
          v134 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v131 = v128;
          if (v128 == *(_DWORD *)(a1 + 8))
          {
            v199 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v128 + 1), (unint64_t)&v223);
            v131 = *(unsigned int *)(a1 + 12);
            v132 = *(_QWORD *)a1;
            LOBYTE(v130) = *v199;
          }
          else
          {
            v132 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v132 + v131) = v130;
          v133 = *(_DWORD *)(a1 + 12) + 1;
          v134 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v133;
          *(_DWORD *)(a1 + 16) = v134;
        }
        LOBYTE(v223) = v55;
        if (v133 > v134)
        {
          *(_DWORD *)(a1 + 16) = v134 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v134) = v55;
          v135 = *(_DWORD *)(a1 + 12);
          v136 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v133 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v133 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v133) = v55;
          v135 = *(_DWORD *)(a1 + 12) + 1;
          v136 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v135;
          *(_DWORD *)(a1 + 16) = v136;
        }
        LOBYTE(v223) = 0;
        if (v135 > v136)
        {
          *(_DWORD *)(a1 + 16) = v136 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v136) = 0;
          v137 = *(_DWORD *)(a1 + 12);
          v138 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v135 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v135 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v135) = 0;
          v137 = *(_DWORD *)(a1 + 12) + 1;
          v138 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v137;
          *(_DWORD *)(a1 + 16) = v138;
        }
        LOBYTE(v223) = v56;
        if (v137 > v138)
        {
          *(_DWORD *)(a1 + 16) = v138 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v138) = v56;
          v139 = *(_DWORD *)(a1 + 12);
          v140 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v137 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v137 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v137) = v56;
          v139 = *(_DWORD *)(a1 + 12) + 1;
          v140 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v139;
          *(_DWORD *)(a1 + 16) = v140;
        }
        v141 = v56 >> 8;
        LOBYTE(v223) = BYTE1(v56);
        if (v139 > v140)
        {
          *(_DWORD *)(a1 + 16) = v140 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v140) = BYTE1(v56);
          v144 = *(_DWORD *)(a1 + 12);
          v145 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v142 = v139;
          if (v139 == *(_DWORD *)(a1 + 8))
          {
            v200 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v139 + 1), (unint64_t)&v223);
            v142 = *(unsigned int *)(a1 + 12);
            v143 = *(_QWORD *)a1;
            LOBYTE(v141) = *v200;
          }
          else
          {
            v143 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v143 + v142) = v141;
          v144 = *(_DWORD *)(a1 + 12) + 1;
          v145 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v144;
          *(_DWORD *)(a1 + 16) = v145;
        }
        LOBYTE(v223) = v59;
        if (v144 > v145)
        {
          *(_DWORD *)(a1 + 16) = v145 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v145) = v59;
          v146 = *(_DWORD *)(a1 + 12);
          v147 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v144 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v144 + 1), (unint64_t)&v223);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v144) = v59;
          v146 = *(_DWORD *)(a1 + 12) + 1;
          v147 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v146;
          *(_DWORD *)(a1 + 16) = v147;
        }
        v148 = v59 >> 8;
        LOBYTE(v223) = BYTE1(v59);
        if (v146 > v147)
        {
          *(_DWORD *)(a1 + 16) = v147 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v147) = BYTE1(v59);
          return v11;
        }
        v84 = v146;
        if (v146 != *(_DWORD *)(a1 + 8))
        {
          v149 = *(_QWORD *)a1;
LABEL_183:
          *(_BYTE *)(v149 + v84) = v148;
          goto LABEL_95;
        }
      }
      v187 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v223);
      v84 = *(unsigned int *)(a1 + 12);
      v149 = *(_QWORD *)a1;
      LOBYTE(v148) = *v187;
      goto LABEL_183;
    }
LABEL_33:
    *(_QWORD *)v35 = v28;
    *(_DWORD *)(v35 + 8) = v30;
    v39 = *v29;
    if (*v29)
      v40 = *(_DWORD *)(v39 - 12) + 1;
    else
      v40 = 1;
    *(_DWORD *)(v39 - 12) = v40;
    v41 = *v29;
    if (*v29)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43)
        goto LABEL_39;
    }
    else
    {
      if (3 * v44 > 4 * v43)
      {
LABEL_39:
        v45 = *(_QWORD *)(a1 + 24);
        v46 = (uint64_t *)(v45 + 32);
        v47 = *(unsigned int *)(v45 + 44);
        if ((_DWORD)v47 == *(_DWORD *)(v45 + 40))
        {
          v183 = (_DWORD **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)a3);
          v47 = *(unsigned int *)(v45 + 44);
          v184 = *(_QWORD *)(v45 + 32);
          v185 = *v183;
          if (*v183)
            *v185 += 2;
          *(_QWORD *)(v184 + 8 * v47) = v185;
        }
        else
        {
          v48 = *v46;
          v49 = *(WTF::StringImpl **)a3;
          if (*(_QWORD *)a3)
            *(_DWORD *)v49 += 2;
          *(_QWORD *)(v48 + 8 * v47) = v49;
        }
        *(_DWORD *)(v45 + 44) = v47 + 1;
        goto LABEL_47;
      }
      if (!(_DWORD)v44)
      {
        v186 = 8;
LABEL_217:
        v35 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), v186, (WTF::StringImpl **)v35);
        goto LABEL_39;
      }
    }
    v186 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
    goto LABEL_217;
  }
  if (v10 == 1)
  {
    v86 = *(unsigned int *)(a1 + 124);
    if (!(_DWORD)v86)
    {
LABEL_115:
      __break(0xC471u);
      JUMPOUT(0x198227BD4);
    }
    while (1)
    {
      if (--v86 >= (unint64_t)*(unsigned int *)(a1 + 124))
      {
        __break(0xC471u);
        JUMPOUT(0x198228A04);
      }
      v87 = *(_QWORD *)(a1 + 112);
      if (*(_BYTE *)(v87 + 24 * v86 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x198228678);
      }
      v88 = *(_QWORD *)(*(_QWORD *)(v87 + 24 * v86) + 8);
      if (v88)
      {
        v89 = *(WTF::StringImpl **)a3;
        v90 = *(_DWORD *)(*(_QWORD *)a3 + 16);
        if ((v90 & 0x20) != 0)
          v90 = *((_DWORD *)v89 + 8);
        v91 = *(_DWORD *)(v88 - 8);
        v92 = v91 & (v90 >> 8);
        v93 = *(WTF::StringImpl **)(v88 + 16 * v92);
        if (v93 == v89)
        {
LABEL_108:
          v95 = v88 + 16 * v92;
          v98 = *(WTF **)(v95 + 8);
          v97 = (_QWORD **)(v95 + 8);
          v96 = v98;
          v223 = (WTF *)1;
          if ((v98 & 1) == 0)
          {
            v211 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            v96 = v211;
            v212 = *v97;
            *(_QWORD *)v211 = **v97;
            v213 = (unsigned int *)v212[1];
            if (v213)
            {
              do
                v214 = __ldaxr(v213);
              while (__stlxr(v214 + 1, v213));
              v215 = (unint64_t)v223;
              *((_QWORD *)v211 + 1) = v213;
              if ((v215 & 1) == 0 && v215)
              {
                v216 = *(_QWORD *)(v215 + 8);
                *(_QWORD *)(v215 + 8) = 0;
                if (v216)
                {
                  do
                  {
                    v217 = __ldaxr((unsigned int *)v216);
                    v218 = v217 - 1;
                  }
                  while (__stlxr(v218, (unsigned int *)v216));
                  if (!v218)
                  {
                    atomic_store(1u, (unsigned int *)v216);
                    v219 = (uint64_t **)(v216 + 8);
                    for (i = *(uint64_t **)(v216 + 8); i != (uint64_t *)v219; i = *v219)
                    {
                      v222 = *i;
                      v221 = (uint64_t *)i[1];
                      *v221 = *i;
                      *(_QWORD *)(v222 + 8) = v221;
                      *i = 0;
                      i[1] = 0;
                    }
                    WTF::fastFree(v216, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  }
                }
                WTF::fastFree(v215, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
            }
            else
            {
              *((_QWORD *)v211 + 1) = 0;
            }
          }
          v223 = v96;
          if ((v96 & 1) != 0)
            v99 = &v223;
          else
            v99 = (WTF **)v96;
          v100 = (unint64_t)*v99;
          if ((v96 & 1) != 0)
          {
            if (v100 > 1)
              goto LABEL_279;
          }
          else
          {
            JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v223, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v100 >= 2)
            {
LABEL_279:
              v11 = *(_QWORD *)(v87 + 24 * v86 + 8);
              if (!v11)
              {
                __break(0xC471u);
                JUMPOUT(0x1982286B8);
              }
              return v11;
            }
          }
        }
        else
        {
          v94 = 1;
          while (v93)
          {
            v92 = ((_DWORD)v92 + v94) & v91;
            v93 = *(WTF::StringImpl **)(v88 + 16 * v92);
            ++v94;
            if (v93 == v89)
              goto LABEL_108;
          }
        }
      }
      if (!v86)
        goto LABEL_115;
    }
  }
  if (v10 == 2)
    return 0;
  if (v10 != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198228850);
  }
  return *(_QWORD *)(a1 + 256);
}

uint64_t JSC::BytecodeGenerator::newBlockScopeVariable(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(this + 80);
  if (!v1)
    return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister(this);
  v2 = *(unsigned int *)(this + 100);
  v3 = *(_QWORD *)(this + 88);
  v4 = v1 - 1;
  while (v4 >> 5 < v2)
  {
    if (!*(_DWORD *)(*(_QWORD *)(v3 + 8 * (v4 >> 5)) + 12 * (v4 & 0x1F)))
    {
      *(_QWORD *)(this + 80) = v4--;
      if (v4 != -1)
        continue;
    }
    return JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister(this);
  }
  __break(0xC471u);
  return this;
}

uint64_t JSC::BytecodeGenerator::emitPutToScopeDynamic(uint64_t a1, unsigned int a2, WTF::AtomStringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = ((_DWORD)a5 << 20) | ((*(_BYTE *)(a1 + 712) == 0) << 30) | 0x80Cu;
  v12 = JSC::BytecodeGenerator::addConstant(a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v13 = *(unsigned int *)(a4 + 4);
  v14 = *(unsigned int *)(a1 + 412);
  v15 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v15 + 4) |= 1u;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(unsigned int *)(v16 + 108);
  *(_DWORD *)(v16 + 108) = v17 + 1;
  if ((JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, v12, v13, v11, v14, 0, v17) & 1) == 0&& (JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v12, v13, v11, v14, 0, v17) & 1) == 0)
  {
    JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v12, v13, v11, v14, 0, v17);
  }
  return a4;
}

uint64_t JSC::BytecodeGenerator::emitPutToScope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int *v26;

  v10 = *(_QWORD *)(a3 + 8);
  if (v10 == 1)
  {
    v11 = HIDWORD(v10);
    v12 = ((_DWORD)a5 << 20) | ((_DWORD)a6 << 10) | ((*(_BYTE *)(a1 + 712) == 0) << 30) | 4;
    v13 = *(_DWORD *)(a3 + 32) - 0x40000000;
LABEL_3:
    v14 = *(_DWORD *)(a2 + 4);
    v15 = JSC::BytecodeGenerator::addConstant(a1, (WTF::AtomStringImpl *)a3, a3, a4, a5, a6, a7, a8);
    v16 = *(unsigned int *)(a4 + 4);
    if ((_DWORD)v11 == -1)
      v11 = 0;
    else
      v11 = v11;
    v17 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v17 + 4) |= 1u;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(unsigned int *)(v18 + 108);
    *(_DWORD *)(v18 + 108) = v19 + 1;
    if ((JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v14, v15, v16, v12, v13, v11, v19) & 1) == 0&& (JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v14, v15, v16, v12, v13, v11, v19) & 1) == 0)
    {
      JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v14, v15, v16, v12, v13, v11, v19);
    }
    return a4;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    v21 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(a1 + 112);
      v23 = 24 * v21;
      while (!*(_BYTE *)(v22 + v23 - 8))
      {
        v24 = *(unsigned __int8 *)(a1 + 708);
        if (*(_BYTE *)(a1 + 708))
        {
          if ((*(_BYTE *)(*(_QWORD *)(v22 + v23 - 24) + 21) & 0x1C) == 0x14)
            break;
        }
        v23 -= 24;
        if (!v23)
          goto LABEL_18;
      }
      v25 = 12;
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 708);
LABEL_18:
      if (v24)
        v25 = 6;
      else
        v25 = 0;
    }
    v12 = v25 | ((_DWORD)a5 << 20) | ((_DWORD)a6 << 10) | ((*(_BYTE *)(a1 + 712) == 0) << 30);
    v13 = *(_DWORD *)(a1 + 412);
    LODWORD(v11) = -1;
    goto LABEL_3;
  }
  if (v10 == 2)
  {
    v26 = *(int **)(a3 + 16);
    if ((int *)(a1 + 208) != v26 && v26 != 0 && v26 != (int *)a4)
      JSC::BytecodeGenerator::emitMove(a1, v26, a4, a4, a5, a6, a7, a8);
    return a4;
  }
  if (v10 == 3)
  {
    JSC::OpPutToArguments::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), HIDWORD(v10), *(_DWORD *)(a4 + 4), a5, a6, a7, a8);
    return a4;
  }
  result = 2671;
  __break(0xC471u);
  return result;
}

char *JSC::BytecodeGenerator::emitUnreachable(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)this, (void *)0x75, a3, a4, a5, a6, a7, a8);
  v14 = 117;
  v10 = *((unsigned int *)this + 3);
  v11 = *((unsigned int *)this + 4);
  if (v10 > v11)
  {
    *((_DWORD *)this + 4) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)this + v11) = 117;
  }
  else
  {
    if ((_DWORD)v10 == *((_DWORD *)this + 2))
    {
      result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v10 + 1), (unint64_t)&v14);
      v10 = *((unsigned int *)this + 3);
      v12 = *(_QWORD *)this;
      v13 = *result;
    }
    else
    {
      v12 = *(_QWORD *)this;
      v13 = 117;
    }
    *(_BYTE *)(v12 + v10) = v13;
    *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000001);
  }
  return result;
}

void JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v10 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    while (1)
    {
      v11 = v10 - 1;
      v12 = (v10 - 1) >> 5;
      if (v12 >= *(unsigned int *)(a2 + 76))
        break;
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v12);
      if (!*(_DWORD *)(v13 + ((unint64_t)(v11 & 0x1F) << 6)))
      {
        v14 = v13 + ((unint64_t)(v11 & 0x1F) << 6);
        v15 = *(_QWORD *)(v14 + 16);
        v16 = v14 + 32 == v15 || v15 == 0;
        --v10;
        if (!v16)
        {
          *(_QWORD *)(v14 + 16) = 0;
          *(_DWORD *)(v14 + 24) = 0;
          WTF::fastFree(v15, (void *)a2, a3, a4, a5, a6, a7, a8);
          v10 = *(_QWORD *)(a2 + 56) - 1;
        }
        *(_QWORD *)(a2 + 56) = v10;
        if (v10)
          continue;
      }
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x198229040);
  }
LABEL_10:
  *(_QWORD *)(a2 + 56) = v10 + 1;
  v17 = v10 >> 5;
  v18 = *(unsigned int *)(a2 + 76);
  if (v10 >> 5 >= v18)
  {
    v23 = WTF::fastMalloc((WTF *)0x800);
    v26 = v23;
    v24 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v24 == *(_DWORD *)(a2 + 72))
    {
      v25 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 64, v24 + 1, (unint64_t)&v26);
      v24 = *(unsigned int *)(a2 + 76);
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v24) = *v25;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v24) = v23;
    }
    v18 = (v24 + 1);
    *(_DWORD *)(a2 + 76) = v18;
    v10 = *(_QWORD *)(a2 + 56) - 1;
    v17 = v10 >> 5;
  }
  if (v17 >= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198229048);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v17) + ((v10 & 0x1F) << 6);
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_DWORD *)(v19 + 4) = -1;
  *(_BYTE *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = v19 + 32;
  *(_QWORD *)(v19 + 24) = 8;
  v20 = *(_QWORD *)(a2 + 56) - 1;
  if (v20 >> 5 >= *(unsigned int *)(a2 + 76))
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * (v20 >> 5));
  v22 = v20 & 0x1F;
  ++*(_DWORD *)(v21 + (v22 << 6));
  *a1 = v21 + (v22 << 6);
}

uint64_t JSC::BytecodeGenerator::emitJump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[4];
  int v21;
  uint64_t v22;
  uint64_t v23;

  *(_BYTE *)(a2 + 8) = 1;
  v9 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v9 == -1)
    v10 = a2;
  else
    v10 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v9 == -1)
    v11 = 1;
  else
    v11 = 2;
  if (v9 == 0xFFFFFFFFLL)
    v12 = 1;
  else
    v12 = 2;
  v20[0] = v12;
  v21 = 0;
  v22 = a1;
  v23 = v10;
  result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v20, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    v20[0] = v11;
    v21 = 0;
    v22 = a1;
    v23 = v10;
    result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v20, v14, v15, v16, v17, v18, v19);
    if ((result & 1) == 0)
    {
      v20[0] = v11;
      v21 = 0;
      v22 = a1;
      v23 = v10;
      return JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, (uint64_t)v20);
    }
  }
  return result;
}

_DWORD *JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  _DWORD *result;
  _DWORD *v11;
  uint64_t v12;
  int v13;

  v9 = *(_DWORD *)(a1 + 16);
  result = (_DWORD *)JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(a2, a1, v9, a4, a5, a6, a7, a8);
  v11 = *(_DWORD **)(a1 + 24);
  v12 = v11[7];
  if (!(_DWORD)v12 || v9 != *(_DWORD *)(*((_QWORD *)v11 + 2) + 4 * v12 - 4))
  {
    v13 = v9;
    result = v11 + 4;
    if ((_DWORD)v12 == v11[6])
    {
      result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v12 + 1, (unint64_t)&v13);
      *(_DWORD *)(*((_QWORD *)v11 + 2) + 4 * v11[7]) = *result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v12) = v9;
    }
    ++v11[7];
    *(_DWORD *)(a1 + 36) = 115;
  }
  return result;
}

int *JSC::BytecodeGenerator::moveLinkTimeConstant(uint64_t a1, int *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _OWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _OWORD *v38;
  int v39;
  _BYTE *v40;
  char v41;
  uint64_t v42;

  v11 = (uint64_t *)(a1 + 304);
  v12 = *(_QWORD *)(a1 + 304);
  if (v12
    || (WTF::HashTable<JSC::LinkTimeConstant,WTF::KeyValuePair<JSC::LinkTimeConstant,JSC::RegisterID *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LinkTimeConstant,JSC::RegisterID *>>,WTF::IntHash<JSC::LinkTimeConstant>,WTF::HashMap<JSC::LinkTimeConstant,JSC::RegisterID *,WTF::IntHash<JSC::LinkTimeConstant>,WTF::StrongEnumHashTraits<JSC::LinkTimeConstant>,WTF::HashTraits<JSC::RegisterID *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<JSC::LinkTimeConstant>>::rehash((uint64_t *)(a1 + 304), 8u, 0), (v12 = *v11) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = v13 & (v15 ^ HIWORD(v15));
  v17 = (_OWORD *)(v12 + 16 * v16);
  v18 = *(_DWORD *)v17;
  if (*(_DWORD *)v17 != 0x7FFFFFFF)
  {
    v38 = 0;
    v39 = 1;
    do
    {
      if (v18 == a3)
        goto LABEL_20;
      if (v18 == 2147483646)
        v38 = v17;
      v16 = (v16 + v39) & v13;
      v17 = (_OWORD *)(v12 + 16 * v16);
      v18 = *(_DWORD *)v17;
      ++v39;
    }
    while (*(_DWORD *)v17 != 0x7FFFFFFF);
    if (v38)
    {
      *(_DWORD *)v38 = 0x7FFFFFFF;
      *((_QWORD *)v38 + 1) = 0;
      --*(_DWORD *)(*v11 - 16);
      v17 = v38;
    }
  }
  *(_DWORD *)v17 = a3;
  v19 = JSC::BytecodeGenerator::addConstantIndex(a1);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = (_QWORD *)(v20 + 48);
  v42 = 0;
  v22 = *(unsigned int *)(v20 + 60);
  if ((_DWORD)v22 == *(_DWORD *)(v20 + 56))
    *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * *(unsigned int *)(v20 + 60)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v42);
  else
    *(_QWORD *)(*v21 + 8 * v22) = 0;
  v23 = *(_DWORD *)(v20 + 60);
  v24 = __CFADD__(v23, 1);
  v25 = v23 + 1;
  *(_DWORD *)(v20 + 60) = v25;
  if (v24)
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  *(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v25 - 8) = a3 | 0xFFFE000000000000;
  v26 = (_QWORD *)(v20 + 64);
  v41 = 3;
  v27 = *(unsigned int *)(v20 + 76);
  if ((_DWORD)v27 == *(_DWORD *)(v20 + 72))
  {
    v40 = (_BYTE *)WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, (WTF *)(v27 + 1), (unint64_t)&v41);
    v27 = *(unsigned int *)(v20 + 76);
    *(_BYTE *)(*(_QWORD *)(v20 + 64) + v27) = *v40;
  }
  else
  {
    *(_BYTE *)(*v26 + v27) = 3;
  }
  *(_DWORD *)(v20 + 76) = v27 + 1;
  v28 = (unint64_t)v19 >> 5;
  if (v28 >= *(unsigned int *)(a1 + 404))
  {
    __break(0xC471u);
LABEL_43:
    JUMPOUT(0x198229468);
  }
  *((_QWORD *)v17 + 1) = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v28) + 12 * (v19 & 0x1F);
  v29 = *(_QWORD *)(a1 + 304);
  if (v29)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *v11;
  if (*v11)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 <= 0x400)
  {
    if (3 * v34 > 4 * v33)
      goto LABEL_20;
    if (!(_DWORD)v34)
    {
      v35 = 8;
LABEL_19:
      v17 = WTF::HashTable<JSC::LinkTimeConstant,WTF::KeyValuePair<JSC::LinkTimeConstant,JSC::RegisterID *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::LinkTimeConstant,JSC::RegisterID *>>,WTF::IntHash<JSC::LinkTimeConstant>,WTF::HashMap<JSC::LinkTimeConstant,JSC::RegisterID *,WTF::IntHash<JSC::LinkTimeConstant>,WTF::StrongEnumHashTraits<JSC::LinkTimeConstant>,WTF::HashTraits<JSC::RegisterID *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<JSC::LinkTimeConstant>>::rehash(v11, v35, v17);
      goto LABEL_20;
    }
LABEL_35:
    v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
    goto LABEL_19;
  }
  if (v34 <= 2 * v33)
    goto LABEL_35;
LABEL_20:
  v36 = *((_QWORD *)v17 + 1);
  if (!a2)
    return (int *)*((_QWORD *)v17 + 1);
  if ((int *)(a1 + 208) == a2)
    return 0;
  if ((int *)v36 != a2)
    JSC::BytecodeGenerator::emitMove(a1, a2, v36, a4, a5, a6, a7, a8);
  return a2;
}

int *JSC::BytecodeGenerator::emitLoad(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  char v55;

  if (!a3)
  {
    v47 = JSC::BytecodeGenerator::addConstantEmptyValue((JSC::BytecodeGenerator *)a1);
    goto LABEL_40;
  }
  v11 = *(_DWORD *)(a1 + 632);
  v12 = (uint64_t *)(a1 + 648);
  v13 = *(_QWORD *)(a1 + 648);
  if (v13
    || (WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a1 + 648), 8u), (v13 = *v12) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((0xD7862706ELL * (unint64_t)(277951225 * ((v17 >> 31) ^ v17) - 3301266)) >> 4);
  v19 = (uint64_t *)(v13 + 24 * v18);
  v20 = *v19;
  v21 = *((unsigned __int8 *)v19 + 8);
  if (*v19)
    v22 = 0;
  else
    v22 = v21 == 0;
  if (v22)
    goto LABEL_23;
  v23 = 0;
  v24 = 1;
  do
  {
    if (v20 == a3 && !v21)
    {
      v11 = *((_DWORD *)v19 + 4);
      goto LABEL_38;
    }
    if (*((_BYTE *)v19 + 8))
      v25 = v23;
    else
      v25 = v19;
    if (v20 == 4)
      v23 = v25;
    v18 = (v18 + v24) & v14;
    v19 = (uint64_t *)(v13 + 24 * v18);
    v20 = *v19;
    v21 = *((unsigned __int8 *)v19 + 8);
    ++v24;
    if (*v19)
      v26 = 0;
    else
      v26 = v21 == 0;
  }
  while (!v26);
  if (v23)
  {
    *v23 = 0;
    v23[1] = 0;
    *((_DWORD *)v23 + 4) = 0;
    --*(_DWORD *)(*v12 - 16);
    v19 = v23;
  }
LABEL_23:
  *v19 = a3;
  *((_BYTE *)v19 + 8) = 0;
  *((_DWORD *)v19 + 4) = *(_DWORD *)(a1 + 632);
  v27 = *(_QWORD *)(a1 + 648);
  if (v27)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v12;
  if (*v12)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_29;
LABEL_55:
    v53 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
    goto LABEL_60;
  }
  if (3 * v32 > 4 * v31)
    goto LABEL_29;
  if ((_DWORD)v32)
    goto LABEL_55;
  v53 = 8;
LABEL_60:
  WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a1 + 648), v53);
LABEL_29:
  v33 = *(_DWORD *)(a1 + 632);
  v34 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v34 + 1;
  v35 = v34 >> 5;
  v36 = *(unsigned int *)(a1 + 404);
  if (v34 >> 5 >= v36)
  {
    v49 = WTF::fastMalloc((WTF *)0x180);
    v54 = v49;
    v50 = *(unsigned int *)(a1 + 404);
    if ((_DWORD)v50 == *(_DWORD *)(a1 + 400))
    {
      v51 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 392, v50 + 1, (unint64_t)&v54);
      v50 = *(unsigned int *)(a1 + 404);
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v50) = *v51;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v50) = v49;
    }
    v36 = (v50 + 1);
    *(_DWORD *)(a1 + 404) = v36;
    v34 = *(_QWORD *)(a1 + 384) - 1;
    v35 = v34 >> 5;
  }
  if (v35 >= v36)
  {
    __break(0xC471u);
    JUMPOUT(0x19822984CLL);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v35) + 12 * (v34 & 0x1F);
  *(_DWORD *)v37 = 0;
  *(_DWORD *)(v37 + 4) = v33 + 0x40000000;
  *(_BYTE *)(v37 + 8) = 0;
  ++*(_DWORD *)(a1 + 632);
  v38 = *(_QWORD *)(a1 + 24);
  v55 = 0;
  v39 = (_QWORD *)(v38 + 48);
  v54 = 0;
  v40 = *(unsigned int *)(v38 + 60);
  if ((_DWORD)v40 == *(_DWORD *)(v38 + 56))
    *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * *(unsigned int *)(v38 + 60)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v40 + 1, (unint64_t)&v54);
  else
    *(_QWORD *)(*v39 + 8 * v40) = 0;
  v41 = *(_DWORD *)(v38 + 60);
  v42 = __CFADD__(v41, 1);
  v43 = v41 + 1;
  *(_DWORD *)(v38 + 60) = v43;
  if (v42)
    goto LABEL_65;
  *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v43 - 8) = a3;
  v44 = (_QWORD *)(v38 + 64);
  v45 = *(unsigned int *)(v38 + 76);
  if ((_DWORD)v45 == *(_DWORD *)(v38 + 72))
  {
    v52 = (_BYTE *)WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, (WTF *)(v45 + 1), (unint64_t)&v55);
    v45 = *(unsigned int *)(v38 + 76);
    *(_BYTE *)(*(_QWORD *)(v38 + 64) + v45) = *v52;
  }
  else
  {
    *(_BYTE *)(*v44 + v45) = 0;
  }
  *(_DWORD *)(v38 + 76) = v45 + 1;
LABEL_38:
  v46 = (unint64_t)v11 >> 5;
  if (v46 >= *(unsigned int *)(a1 + 404))
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x198229844);
  }
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v46) + 12 * (v11 & 0x1F);
LABEL_40:
  if (!a2)
    return (int *)v47;
  if ((int *)(a1 + 208) == a2)
    return 0;
  if ((int *)v47 != a2)
    JSC::BytecodeGenerator::emitMove(a1, a2, v47, a4, a5, a6, a7, a8);
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitReturn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;

  v10 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_QWORD *)(v10 + 20) & 0x80000000) != 0)
  {
    v19 = *(_WORD *)(v10 + 28) >> 6;
    if (v19 != 3 && *(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 224))
    {
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v89, a1, a3, a4, a5, a6, a7, a8);
      v20 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
      v21 = *(_DWORD *)(v20 + 4);
      v22 = *(unsigned int *)(a2 + 4);
      if ((JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v21, v22, v23, v24, v25, v26, v27) & 1) == 0&& (JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v21, v22, v28, v29, v30, v31, v32) & 1) == 0)
      {
        JSC::OpIsObject::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v21, v22, v28, v29, v30, v31, v32);
      }
      v33 = v89;
      JSC::BytecodeGenerator::emitJumpIfTrue(a1, v20, (uint64_t)v89, v28, v29, v30, v31, v32);
      if (v19 == 2)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v88, a1, v35, v36, v37, v38, v39, v40);
        v64 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        JSC::BytecodeGenerator::emitIsUndefined(a1, v64, a2, v65, v66, v67, v68, v69);
        v70 = v88;
        JSC::BytecodeGenerator::emitJumpIfTrue(a1, v64, (uint64_t)v88, v71, v72, v73, v74, v75);
        JSC::BytecodeGenerator::emitThrowTypeError(a1, "Cannot return a non-object type in the constructor of a derived class.", 0x47uLL, v76, v77, v78, v79, v80);
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::emitLabel(a1, (uint64_t)v70, v81, v82, v83, v84, v85, v86);
        --*v70;
      }
      v41 = *(_DWORD *)(JSC::BytecodeGenerator::ensureThis((JSC::BytecodeGenerator *)a1, v34, v35, v36, v37, v38, v39, v40)+ 4);
      if (!JSC::OpRet::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v41, v42, v43, v44, v45, v46, v47)
        && !JSC::OpRet::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v41, v48, v49, v50, v51, v52, v53))
      {
        JSC::OpRet::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v41, v87, v49, v50, v51, v52, v53);
      }
      v54 = *(_DWORD *)(a1 + 16);
      JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v33, a1, v54, v49, v50, v51, v52, v53);
      v55 = *(_QWORD *)(a1 + 24);
      v56 = *(unsigned int *)(v55 + 28);
      if (!(_DWORD)v56 || v54 != *(_DWORD *)(*(_QWORD *)(v55 + 16) + 4 * v56 - 4))
      {
        LODWORD(v88) = v54;
        v57 = (_QWORD *)(v55 + 16);
        if ((_DWORD)v56 == *(_DWORD *)(v55 + 24))
          *(_DWORD *)(*(_QWORD *)(v55 + 16) + 4 * *(unsigned int *)(v55 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v56 + 1, (unint64_t)&v88);
        else
          *(_DWORD *)(*v57 + 4 * v56) = v54;
        ++*(_DWORD *)(v55 + 28);
        *(_DWORD *)(a1 + 36) = 115;
      }
      --*v33;
    }
  }
  v11 = *(_DWORD *)(a2 + 4);
  if (!JSC::OpRet::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v11, a3, a4, a5, a6, a7, a8)
    && !JSC::OpRet::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v11, v12, v13, v14, v15, v16, v17))
  {
    JSC::OpRet::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v11, v58, v59, v60, v61, v62, v63);
  }
  return a2;
}

void JSC::CallArguments::~CallArguments(JSC::CallArguments *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  JSC::CallArguments *v13;

  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
  {
    v10 = (_DWORD **)*((_QWORD *)this + 1);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        --*v12;
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = (JSC::CallArguments *)*((_QWORD *)this + 1);
  if ((JSC::CallArguments *)((char *)this + 24) != v13 && v13 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::BytecodeGenerator::BytecodeGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int16 v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;

  v10 = WTF::fastMalloc((WTF *)0x128);
  *(_QWORD *)v10 = a2;
  v18 = *(_QWORD *)(a2 + 712);
  if (!v18)
  {
    v69 = v10;
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), v11, v12, v13, v14, v15, v16, v17);
    v10 = v69;
    v18 = *(_QWORD *)(a2 + 712);
  }
  *(_QWORD *)(a2 + 712) = *(_QWORD *)v18;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = (_QWORD *)(v18 + 16);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v10 + 8) = v18 + 16;
  if ((a4 != 0) != (*(_QWORD *)(v18 + 16) != 0))
  {
    if (a4)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    else
    {
      v68 = *(_QWORD *)v18;
      v67 = *(_QWORD **)(v18 + 8);
      *v67 = *(_QWORD *)v18;
      *(_QWORD *)(v68 + 8) = v67;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v19 = *(_QWORD **)(v10 + 8);
    }
  }
  *v19 = a4;
  *(_QWORD *)(v10 + 288) = 0;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + 272) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(a1 + 13) = 0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 115;
  *(_QWORD *)(a1 + 40) = a1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  *(_BYTE *)(a1 + 104) = a5;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = a3;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x3FFFFFFF00000000;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 0x500000000;
  *(_BYTE *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 232) = 0x3FFFFFFF00000000;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 401) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_BYTE *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 620) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = a2;
  *(_DWORD *)(a1 + 707) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  v29 = 1;
  v30 = *(_WORD *)(a3 + 164);
  if ((v30 & 0x40) == 0)
    v29 = v30 & 1;
  *(_BYTE *)(a1 + 711) = *(_BYTE *)(a1 + 711) & 0xFC | v29;
  *(_BYTE *)(a1 + 712) = (*(_BYTE *)(a3 + 166) & 1) == 0;
  *(_BYTE *)(a1 + 713) = 0;
  *(_OWORD *)(a1 + 720) = 0uLL;
  *(_OWORD *)(a1 + 736) = xmmword_199154580;
  v31 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  *(_QWORD *)(v31 + 20) = *(_QWORD *)(v31 + 20) & 0x80000000FFFFFFFFLL | 0x100000000;
  JSC::BytecodeGenerator::emitEnter((JSC::BytecodeGenerator *)a1, v22, v23, v24, v25, v26, v27, v28);
  v32 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  *(_QWORD *)(a1 + 248) = v32;
  v39 = v32[1];
  ++*v32;
  *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 12) = v39;
  v40 = *(unsigned int *)(a3 + 148);
  if ((_DWORD)v40)
  {
    v41 = *(_QWORD **)(a3 + 136);
    v42 = *(_DWORD *)(a1 + 532);
    v43 = 8 * v40;
    do
    {
      *(_QWORD *)&v70 = *v41;
      *((_QWORD *)&v70 + 1) = 1;
      if (v42 == *(_DWORD *)(a1 + 528))
        *(_OWORD *)(*(_QWORD *)(a1 + 520) + 16 * *(unsigned int *)(a1 + 532)) = *(_OWORD *)WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 520, v42 + 1, (unint64_t)&v70);
      else
        *(_OWORD *)(*(_QWORD *)(a1 + 520) + 16 * v42) = v70;
      v42 = *(_DWORD *)(a1 + 532) + 1;
      *(_DWORD *)(a1 + 532) = v42;
      ++v41;
      v43 -= 8;
    }
    while (v43);
  }
  if (!HIBYTE(dword_1ECF4C270)
    || ((v63 = *(_QWORD **)(a3 + 192),
         v64 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::begin(v63),
         !v63)
      ? (v66 = 0)
      : (v66 = &v63[2 * *((unsigned int *)v63 - 1)]),
        v66 == v64))
  {
LABEL_16:
    JSC::VariableEnvironment::operator=(a4 + 216, a3 + 192, v33, v34, v35, v36, v37, v38);
    JSC::VariableEnvironment::operator=(a4 + 240, a3 + 112, v44, v45, v46, v47, v48, v49);
    if ((*(_BYTE *)(a1 + 711) & 1) != 0)
    {
      JSC::BytecodeGenerator::initializeArrowFunctionContextScopeIfNeeded(a1, 0, 0, v50, v51, v52, v53, v54);
      JSC::BytecodeGenerator::emitPutThisToArrowFunctionContextScope((JSC::BytecodeGenerator *)a1, v56, v57, v58, v59, v60, v61, v62);
    }
    return a1;
  }
  else
  {
    while ((v64[1] & 4) != 0)
    {
      while (1)
      {
        v64 += 2;
        if (v64 == v65)
          break;
        if ((unint64_t)(*v64 + 1) > 1)
          goto LABEL_27;
      }
      v64 = v65;
LABEL_27:
      if (v64 == v66)
        goto LABEL_16;
    }
    result = 385;
    __break(0xC471u);
  }
  return result;
}

{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  JSC::VM *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  uint64_t SlowCase;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  const WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _WORD *v60;
  _WORD *v61;
  uint64_t v62;
  _WORD *v63;
  __int16 v64;
  WTF::StringImpl *v65;
  int v66;
  int v67;
  int v68;
  _WORD *v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  WTF::AtomStringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _DWORD *v121;
  unsigned int v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  JSC::SymbolTable *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  int v162;
  _WORD *v163;
  _WORD *v164;
  __int16 v165;
  uint64_t v166;
  uint64_t Function;
  _QWORD *v168;
  uint64_t v169;
  int v170;
  BOOL v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  __int128 *v191;
  uint64_t v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  int *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t *v229;
  WTF::StringImpl *v230;
  __int128 v231;
  uint64_t v232;
  __int16 v233;

  v17 = WTF::fastMalloc((WTF *)0x128);
  *(_QWORD *)v17 = a2;
  v18 = *(_QWORD *)(a2 + 712);
  if (!v18)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), v10, v11, v12, v13, v14, v15, v16);
    v18 = *(_QWORD *)(a2 + 712);
  }
  v19 = (uint64_t *)(a2 + 40048);
  *(_QWORD *)(a2 + 712) = *(_QWORD *)v18;
  *(_QWORD *)(v18 + 16) = 0;
  v20 = (_QWORD *)(v18 + 16);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18 + 16;
  if ((a4 != 0) != (*(_QWORD *)(v18 + 16) != 0))
  {
    if (a4)
    {
      v21 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v22 = v21[3];
      v21 += 3;
      *(_QWORD *)v18 = v22;
      *(_QWORD *)(v18 + 8) = v21;
      *v21 = v18;
      *(_QWORD *)(v22 + 8) = v18;
    }
    else
    {
      v224 = *(_QWORD *)v18;
      v223 = *(_QWORD **)(v18 + 8);
      *v223 = *(_QWORD *)v18;
      *(_QWORD *)(v224 + 8) = v223;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v20 = *(_QWORD **)(v17 + 8);
    }
  }
  *v20 = a4;
  *(_QWORD *)(v17 + 288) = 0;
  *(_OWORD *)(v17 + 256) = 0u;
  *(_OWORD *)(v17 + 272) = 0u;
  *(_OWORD *)(v17 + 224) = 0u;
  *(_OWORD *)(v17 + 240) = 0u;
  *(_OWORD *)(v17 + 192) = 0u;
  *(_OWORD *)(v17 + 208) = 0u;
  *(_OWORD *)(v17 + 160) = 0u;
  *(_OWORD *)(v17 + 176) = 0u;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_QWORD *)(a1 + 13) = 0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 24) = v17;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 115;
  *(_QWORD *)(a1 + 40) = a1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  *(_QWORD *)(a1 + 208) = 0x3FFFFFFF00000000;
  *(_BYTE *)(a1 + 104) = a5;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = a3;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 0x500000000;
  *(_BYTE *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 232) = 0x3FFFFFFF00000000;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_BYTE *)(a1 + 416) = 3;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  v228 = (uint64_t *)(a1 + 520);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_BYTE *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 620) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = a2;
  *(_DWORD *)(a1 + 707) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  v30 = *(_WORD *)(a3 + 164);
  if ((v30 & 0x40) != 0)
    v31 = 1;
  else
    v31 = v30 & 1;
  *(_BYTE *)(a1 + 711) = *(_BYTE *)(a1 + 711) & 0xFC | v31;
  *(_WORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 720) = 0uLL;
  *(_OWORD *)(a1 + 736) = xmmword_199154580;
  SlowCase = *v19;
  v226 = (_QWORD *)(a1 + 112);
  if (*(_QWORD *)(a2 + 40048) < *(_QWORD *)(a2 + 40056))
    goto LABEL_9;
  SlowCase = *(_QWORD *)(a2 + 40064);
  if ((SlowCase & 1) == 0)
  {
    v222 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a2 + 40072);
    *(_QWORD *)(a2 + 40056) = SlowCase + HIDWORD(v222);
    *(_QWORD *)(a2 + 40064) = SlowCase + (int)v222;
LABEL_9:
    *v19 = SlowCase + 64;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM((JSC *)a2, v23, v24, v25, v26, v27, v28, v29);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a2 + 40024, a2 + 192, 64, 0, 0);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  JSC::SymbolTable::SymbolTable(SlowCase, a2);
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  *(_BYTE *)(SlowCase + 21) = *(_BYTE *)(a1 + 708) | *(_BYTE *)(SlowCase + 21) & 0xE2 | 8;
  if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707) || (*(_WORD *)(*(_QWORD *)(a1 + 192) + 164) & 1) != 0)
    JSC::VariableEnvironment::markAllVariablesAsCaptured((uint64_t *)(a3 + 192));
  if (*(_BYTE *)(a3 + 240))
  {
    *(_BYTE *)(a1 + 500) = 1;
    JSC::BytecodeGenerator::initializeNextParameter((JSC::BytecodeGenerator *)a1);
    JSC::BytecodeGenerator::initializeNextParameter((JSC::BytecodeGenerator *)a1);
    JSC::BytecodeGenerator::initializeNextParameter((JSC::BytecodeGenerator *)a1);
    JSC::BytecodeGenerator::initializeNextParameter((JSC::BytecodeGenerator *)a1);
    JSC::BytecodeGenerator::initializeNextParameter((JSC::BytecodeGenerator *)a1);
    JSC::BytecodeGenerator::initializeNextParameter((JSC::BytecodeGenerator *)a1);
    if (!*(_DWORD *)(a1 + 356))
    {
      __break(0xC471u);
      JUMPOUT(0x1982318A0);
    }
    *(_QWORD *)(a1 + 272) = **(_QWORD **)(a1 + 344) + 12;
  }
  JSC::BytecodeGenerator::emitEnter((JSC::BytecodeGenerator *)a1, v33, v34, v35, v36, v37, v38, v39);
  v40 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  *(_QWORD *)(a1 + 248) = v40;
  v41 = v40[1];
  ++*v40;
  *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 12) = v41;
  v42 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  v48 = v42;
  if ((int *)(a1 + 208) != v42)
  {
    if (v42)
    {
      v49 = *(_QWORD *)(a1 + 248);
      if (v42 != (int *)v49)
        JSC::BytecodeGenerator::emitMove(a1, v42, v49, v43, v44, v45, v46, v47);
    }
  }
  *(_DWORD *)(a1 + 236) = 3;
  v50 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  *(_QWORD *)(v50 + 20) = *(_QWORD *)(v50 + 20) & 0x80000000FFFFFFFFLL | 0x600000000;
  JSC::BytecodeGenerator::createVariable(a1, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 112), 1, SlowCase, 0);
  if ((*(_WORD *)(a3 + 164) & 0x1000) != 0)
  {
    JSC::Symbols::metaPrivateName[0] += 2;
    *(_QWORD *)&v231 = JSC::Symbols::metaPrivateName;
    JSC::BytecodeGenerator::createVariable(a1, (uint64_t *)&v231, 1, SlowCase, 0);
    if (JSC::Symbols::metaPrivateName[0] == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::metaPrivateName, v51, (uint64_t)v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
    }
    else
    {
      JSC::Symbols::metaPrivateName[0] -= 2;
    }
  }
  v58 = *(_QWORD *)(a3 + 192);
  v225 = v48;
  if (!v58)
  {
    v61 = 0;
    v59 = 0;
LABEL_181:
    v60 = (_WORD *)(v58 + 16 * v59);
    goto LABEL_27;
  }
  v59 = *(unsigned int *)(v58 - 4);
  v60 = (_WORD *)(v58 + 16 * v59);
  if (!*(_DWORD *)(v58 - 12))
  {
    v61 = (_WORD *)(v58 + 16 * v59);
    goto LABEL_181;
  }
  v61 = *(_WORD **)(a3 + 192);
  if ((_DWORD)v59)
  {
    v62 = 16 * v59;
    v61 = *(_WORD **)(a3 + 192);
    while ((unint64_t)(*(_QWORD *)v61 + 1) <= 1)
    {
      v61 += 8;
      v62 -= 16;
      if (!v62)
      {
        v61 = v60;
        break;
      }
    }
  }
LABEL_27:
  v227 = a4;
  if (v58)
    v63 = (_WORD *)(v58 + 16 * *(unsigned int *)(v58 - 4));
  else
    v63 = 0;
  if (v63 != v61)
  {
    while (1)
    {
      v64 = v61[4];
      if ((v64 & 4) != 0 && ((v64 & 0x20) == 0 || (v64 & 0x40) != 0))
        break;
LABEL_41:
      v69 = v61 + 8;
      v61 = v60;
      if (v69 != v60)
      {
        v61 = v69;
        while ((unint64_t)(*(_QWORD *)v61 + 1) <= 1)
        {
          v61 += 8;
          if (v61 == v60)
          {
            v61 = v60;
            break;
          }
        }
      }
      if (v61 == v63)
        goto LABEL_63;
    }
    v65 = *(WTF::StringImpl **)v61;
    v66 = *(_DWORD *)(*(_QWORD *)v61 + 16);
    if ((v66 & 0x20) != 0)
    {
      v67 = *(_DWORD *)v65 + 2;
    }
    else
    {
      if ((v66 & 0x10) != 0)
      {
        v67 = *(_DWORD *)v65 + 2;
        *(_DWORD *)v65 = v67;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a1 + 696) + 41912), *(_QWORD *)v61, v52, v53, v54, v55, v56, v57, &v231);
        v65 = (WTF::StringImpl *)v231;
        v67 = *(_DWORD *)v231;
      }
      *(_DWORD *)v65 = v67 + 2;
      if (!v67)
      {
        WTF::StringImpl::~StringImpl(v65, v51, (uint64_t)v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
        goto LABEL_37;
      }
    }
    *(_DWORD *)v65 = v67;
LABEL_37:
    *(_QWORD *)&v231 = v65;
    if ((v61[4] & 0x51) != 0 || *(_BYTE *)(a3 + 200))
      goto LABEL_38;
    v70 = *(_QWORD *)(a3 + 192);
    if (!v70)
      goto LABEL_55;
    v71 = *(_QWORD *)v61;
    v72 = *(_DWORD *)(*(_QWORD *)v61 + 16);
    if ((v72 & 0x20) != 0)
      v72 = *(_DWORD *)(v71 + 32);
    v73 = *(_DWORD *)(v70 - 8);
    v74 = v73 & (v72 >> 8);
    v75 = *(_QWORD *)(v70 + 16 * v74);
    if (v75 != v71)
    {
      v92 = 1;
      while (v75)
      {
        v74 = ((_DWORD)v74 + v92) & v73;
        v75 = *(_QWORD *)(v70 + 16 * v74);
        ++v92;
        if (v75 == v71)
          goto LABEL_53;
      }
      v74 = *(unsigned int *)(v70 - 4);
    }
LABEL_53:
    if (v74 != *(_DWORD *)(v70 - 4) && (*(_WORD *)(v70 + 16 * v74 + 8) & 1) != 0)
LABEL_38:
      v68 = 1;
    else
LABEL_55:
      v68 = 2;
    JSC::BytecodeGenerator::createVariable(a1, (uint64_t *)&v231, v68, SlowCase, 1);
    *(_QWORD *)&v231 = 0;
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v51, (uint64_t)v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
    goto LABEL_41;
  }
LABEL_63:
  v93 = *(_QWORD *)(a3 + 112);
  if (!v93)
  {
    v96 = 0;
    v94 = 0;
LABEL_183:
    v95 = v93 + 16 * v94;
    goto LABEL_70;
  }
  v94 = *(unsigned int *)(v93 - 4);
  v95 = v93 + 16 * v94;
  if (!*(_DWORD *)(v93 - 12))
  {
    v96 = v93 + 16 * v94;
    goto LABEL_183;
  }
  v96 = *(_QWORD *)(a3 + 112);
  if ((_DWORD)v94)
  {
    v97 = 16 * v94;
    v96 = *(_QWORD *)(a3 + 112);
    while ((unint64_t)(*(_QWORD *)v96 + 1) <= 1)
    {
      v96 += 16;
      v97 -= 16;
      if (!v97)
      {
        v96 = v95;
        break;
      }
    }
  }
LABEL_70:
  if (v93)
    v98 = v93 + 16 * *(unsigned int *)(v93 - 4);
  else
    v98 = 0;
  while (v96 != v98)
  {
    v99 = *(_WORD *)(v96 + 8);
    if ((v99 & 0x60) != 0x20)
    {
      v100 = *(WTF::StringImpl **)v96;
      if ((v99 & 0x51) != 0 || *(_BYTE *)(a3 + 200))
        goto LABEL_75;
      v112 = *(_QWORD *)(a3 + 192);
      if (!v112)
        goto LABEL_107;
      v113 = *((_DWORD *)v100 + 4);
      if ((v113 & 0x20) != 0)
        v113 = *((_DWORD *)v100 + 8);
      v114 = *(_DWORD *)(v112 - 8);
      v115 = v114 & (v113 >> 8);
      v116 = *(WTF::StringImpl **)(v112 + 16 * v115);
      if (v116 != v100)
      {
        v132 = 1;
        while (v116)
        {
          v115 = ((_DWORD)v115 + v132) & v114;
          v116 = *(WTF::StringImpl **)(v112 + 16 * v115);
          ++v132;
          if (v116 == v100)
            goto LABEL_105;
        }
        v115 = *(unsigned int *)(v112 - 4);
      }
LABEL_105:
      if (v115 != *(_DWORD *)(v112 - 4) && (*(_WORD *)(v112 + 16 * v115 + 8) & 1) != 0)
      {
LABEL_75:
        v101 = (*(_DWORD *)(SlowCase + 16) + 1);
        *(_DWORD *)(SlowCase + 16) = v101;
        v102 = (_DWORD)v101 != -1;
      }
      else
      {
LABEL_107:
        v117 = *(_QWORD *)(a1 + 80);
        if (v117)
        {
          v118 = *(unsigned int *)(a1 + 100);
          v119 = *(_QWORD *)(a1 + 88);
          v120 = v117 - 1;
          do
          {
            if (v120 >> 5 >= v118)
            {
              __break(0xC471u);
              JUMPOUT(0x198231888);
            }
            if (*(_DWORD *)(*(_QWORD *)(v119 + 8 * (v120 >> 5)) + 12 * (v120 & 0x1F)))
              break;
            *(_QWORD *)(a1 + 80) = v120--;
          }
          while (v120 != -1);
        }
        v121 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister(a1);
        v122 = v121[1];
        ++*v121;
        if (v122 == 0x3FFFFFFF)
          v101 = 0xFFFFFFFFLL;
        else
          v101 = v122;
        v102 = 2 * (v122 != 0x3FFFFFFF);
      }
      v103 = 11;
      if ((*(_WORD *)(v96 + 8) & 2) == 0)
        v103 = 9;
      v104 = v103 | (v101 << 6);
      v229 = (uint64_t *)v104;
      if (v102 != 1)
      {
        if (v102 == 2)
        {
          v131 = 32;
        }
        else
        {
          if (v102 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x198231818);
          }
          v131 = 48;
        }
        v104 |= v131;
        v229 = (uint64_t *)v104;
      }
      if (*(_QWORD *)(SlowCase + 48))
      {
        __break(0xC471u);
        JUMPOUT(0x198231730);
      }
      if ((v104 & 1) != 0)
        v104 = (unint64_t)&v229;
      v105 = *(_QWORD *)v104;
      if ((v105 & 0x30) <= 0x10)
      {
        v106 = v105 >> 6;
        v107 = *(_DWORD *)(SlowCase + 16);
        if (v107 == -1 || v107 < v106)
          *(_DWORD *)(SlowCase + 16) = v106;
      }
      if (v100)
        *(_DWORD *)v100 += 2;
      v230 = v100;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::add<JSC::SymbolTableEntry&>((uint64_t *)(SlowCase + 8), (WTF::AtomStringImpl *)&v230, &v229, v53, v54, v55, v56, v57, (uint64_t)&v231);
      v109 = v230;
      v230 = 0;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2)
        {
          WTF::StringImpl::~StringImpl(v109, v108, (uint64_t)v52, v53, v54, v55, v56, v57);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v109 -= 2;
        }
      }
      v110 = *(uint64_t **)(a3 + 128);
      if (v110)
      {
        v193 = *v110;
        if (v193)
        {
          v194 = *((_DWORD *)v100 + 4);
          if ((v194 & 0x20) != 0)
            v194 = *((_DWORD *)v100 + 8);
          v195 = *(_DWORD *)(v193 - 8);
          v196 = v195 & (v194 >> 8);
          v197 = *(WTF::StringImpl **)(v193 + 16 * v196);
          if (v197 != v100)
          {
            v213 = 1;
            while (v197)
            {
              v196 = ((_DWORD)v196 + v213) & v195;
              v197 = *(WTF::StringImpl **)(v193 + 16 * v196);
              ++v213;
              if (v197 == v100)
                goto LABEL_196;
            }
            v196 = *(unsigned int *)(v193 - 4);
          }
LABEL_196:
          if (v196 != *(_DWORD *)(v193 - 4))
          {
            v198 = *(WTF::StringImpl **)(v193 + 16 * v196);
            if (v198)
              *(_DWORD *)v198 += 2;
            v230 = v198;
            v233 = *(_WORD *)(v193 + 16 * v196 + 8);
            v199 = *(_QWORD *)(SlowCase + 24);
            if (!v199)
              v199 = JSC::SymbolTable::ensureRareDataSlow((JSC::SymbolTable *)SlowCase);
            WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>((uint64_t *)(v199 + 32), &v230, &v233, (uint64_t)&v231);
            v200 = v230;
            v230 = 0;
            if (v200)
            {
              if (*(_DWORD *)v200 == 2)
              {
                WTF::StringImpl::~StringImpl(v200, v108, (uint64_t)v52, v53, v54, v55, v56, v57);
                WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
              }
              else
              {
                *(_DWORD *)v200 -= 2;
              }
            }
          }
        }
      }
      if ((v229 & 1) == 0)
        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v229, v108, (uint64_t)v52, v53, v54, v55, v56, v57);
    }
    v111 = v96 + 16;
    v96 = v95;
    if (v111 != v95)
    {
      v96 = v111;
      while ((unint64_t)(*(_QWORD *)v96 + 1) <= 1)
      {
        v96 += 16;
        if (v96 == v95)
        {
          v96 = v95;
          break;
        }
      }
    }
  }
  v133 = (JSC::SymbolTable *)SlowCase;
  if ((*(_BYTE *)(a1 + 104) & 2) == 0)
  {
    v133 = (JSC::SymbolTable *)SlowCase;
    if (!*(_BYTE *)(a3 + 240))
      v133 = JSC::SymbolTable::cloneScopePart((JSC::SymbolTable *)SlowCase, *(JSC::VM **)(a1 + 696), (uint64_t)v52, v53, v54, v55, v56, v57);
  }
  v139 = JSC::BytecodeGenerator::addConstantValue(a1, (uint64_t)v133);
  if (*(_BYTE *)(a3 + 240))
  {
    JSC::Strong<JSC::SymbolTable,(JSC::ShouldStrongDestructorGrabLock)0>::set((unint64_t **)(a1 + 504), *(_QWORD *)(a1 + 696), SlowCase, v134, v135, v136, v137, v138);
    *(_DWORD *)(a1 + 512) = *(_DWORD *)(v139 + 4);
    if (!*(_DWORD *)(a1 + 356))
      goto LABEL_235;
    JSC::BytecodeGenerator::emitPutInternalField(a1, *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4), 1, **(_QWORD **)(a1 + 344) + 60, v201, v202, v203, v204);
  }
  JSC::BytecodeGenerator::pushTDZVariables(a1, *(WTF::AtomStringImpl **)(a3 + 112), *(uint64_t **)(a3 + 128), 0, 0, v136, v137, v138);
  *(_QWORD *)&v231 = SlowCase;
  *((_QWORD *)&v231 + 1) = v225;
  LOBYTE(v232) = 0;
  HIDWORD(v232) = *(_DWORD *)(v139 + 4);
  v140 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v140 == *(_DWORD *)(a1 + 120))
  {
    v141 = WTF::Vector<JSC::BytecodeGenerator::LexicalScopeStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v226, v140 + 1, (unint64_t)&v231);
    v142 = *(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 124);
    v143 = *(_OWORD *)v141;
    v144 = *(_QWORD *)(v141 + 16);
  }
  else
  {
    v142 = *v226 + 24 * v140;
    v143 = v231;
    v144 = v232;
  }
  *(_QWORD *)(v142 + 16) = v144;
  *(_OWORD *)v142 = v143;
  ++*(_DWORD *)(a1 + 124);
  JSC::BytecodeGenerator::emitPrefillStackTDZVariables((unsigned int *)a1, *(_QWORD *)(a3 + 112), SlowCase);
  v152 = *(unsigned int *)(a3 + 148);
  if ((_DWORD)v152)
  {
    v153 = *(uint64_t **)(a3 + 136);
    v154 = &v153[v152];
    while (1)
    {
      v155 = *v153;
      v156 = *(WTF::StringImpl **)(*v153 + 40);
      if (v156)
        *(_DWORD *)v156 += 2;
      v157 = *(_QWORD *)(a3 + 112);
      if (v157)
      {
        v158 = *((_DWORD *)v156 + 4);
        if ((v158 & 0x20) != 0)
          v158 = *((_DWORD *)v156 + 8);
        v159 = *(_DWORD *)(v157 - 8);
        v160 = v159 & (v158 >> 8);
        v161 = *(WTF::StringImpl **)(v157 + 16 * v160);
        if (v161 != v156)
        {
          v162 = 1;
          while (v161)
          {
            v160 = ((_DWORD)v160 + v162) & v159;
            v161 = *(WTF::StringImpl **)(v157 + 16 * v160);
            ++v162;
            if (v161 == v156)
              goto LABEL_143;
          }
          v160 = *(unsigned int *)(v157 - 4);
        }
LABEL_143:
        v163 = (_WORD *)(v157 + 16 * v160);
      }
      else
      {
        v163 = 0;
      }
      if (v156)
      {
        if (*(_DWORD *)v156 == 2)
        {
          WTF::StringImpl::~StringImpl(v156, v145, v146, v147, v148, v149, v150, v151);
          WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
        }
        else
        {
          *(_DWORD *)v156 -= 2;
        }
      }
      v164 = *(_WORD **)(a3 + 112);
      if (v164)
        v164 += 8 * *((unsigned int *)v164 - 1);
      if (v163 == v164)
        break;
      v165 = v163[4];
      if ((v165 & 0x20) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1982315C8);
      }
      if ((v165 & 0x51) != 0 || *(_BYTE *)(a3 + 200))
        goto LABEL_152;
      v173 = *(_QWORD *)(a3 + 192);
      if (!v173)
        goto LABEL_165;
      v174 = *(_QWORD *)v163;
      v175 = *(_DWORD *)(*(_QWORD *)v163 + 16);
      if ((v175 & 0x20) != 0)
        v175 = *(_DWORD *)(v174 + 32);
      v176 = *(_DWORD *)(v173 - 8);
      v177 = v176 & (v175 >> 8);
      v178 = *(_QWORD *)(v173 + 16 * v177);
      if (v178 != v174)
      {
        v190 = 1;
        while (v178)
        {
          v177 = ((_DWORD)v177 + v190) & v176;
          v178 = *(_QWORD *)(v173 + 16 * v177);
          ++v190;
          if (v178 == v174)
            goto LABEL_163;
        }
        v177 = *(unsigned int *)(v173 - 4);
      }
LABEL_163:
      if (v177 != *(_DWORD *)(v173 - 4) && (*(_WORD *)(v173 + 16 * v177 + 8) & 1) != 0)
      {
LABEL_152:
        v166 = *(_QWORD *)(a1 + 24);
        Function = JSC::BytecodeGenerator::makeFunction(a1, v155, v146, v147, v148, v149, v150, v151);
        v168 = (_QWORD *)(v166 + 80);
        *(_QWORD *)&v231 = 0;
        v169 = *(unsigned int *)(v166 + 92);
        if ((_DWORD)v169 == *(_DWORD *)(v166 + 88))
          *(_QWORD *)(*(_QWORD *)(v166 + 80) + 8 * *(unsigned int *)(v166 + 92)) = *(_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v166 + 80, v169 + 1, (unint64_t)&v231);
        else
          *(_QWORD *)(*v168 + 8 * v169) = 0;
        v170 = *(_DWORD *)(v166 + 92);
        v171 = __CFADD__(v170, 1);
        v172 = v170 + 1;
        *(_DWORD *)(v166 + 92) = v172;
        if (v171)
        {
          __break(0xC471u);
          JUMPOUT(0x198231874);
        }
        *(_QWORD *)(*v168 + 8 * v172 - 8) = Function;
      }
      else
      {
LABEL_165:
        v231 = (unint64_t)v155;
        v179 = *(unsigned int *)(a1 + 532);
        if ((_DWORD)v179 == *(_DWORD *)(a1 + 528))
        {
          v191 = (__int128 *)WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v228, v179 + 1, (unint64_t)&v231);
          v179 = *(unsigned int *)(a1 + 532);
          v180 = *(_QWORD *)(a1 + 520);
          v181 = *v191;
        }
        else
        {
          v180 = *v228;
          v181 = v231;
        }
        *(_OWORD *)(v180 + 16 * v179) = v181;
        ++*(_DWORD *)(a1 + 532);
      }
      if (++v153 == v154)
        goto LABEL_177;
    }
LABEL_235:
    __break(0xC471u);
    JUMPOUT(0x1982315A8);
  }
LABEL_177:
  *(_DWORD *)(v227 + 216) = *(_DWORD *)(v139 + 4);
  return a1;
}

char *JSC::BytecodeGenerator::emitEnter(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;

  result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)this, (void *)0x83, a3, a4, a5, a6, a7, a8);
  v17 = -125;
  v10 = *((unsigned int *)this + 3);
  v11 = *((unsigned int *)this + 4);
  if (v10 > v11)
  {
    *((_DWORD *)this + 4) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)this + v11) = -125;
  }
  else
  {
    if ((_DWORD)v10 == *((_DWORD *)this + 2))
    {
      result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v10 + 1), (unint64_t)&v17);
      v10 = *((unsigned int *)this + 3);
      v12 = *(_QWORD *)this;
      v13 = *result;
    }
    else
    {
      v12 = *(_QWORD *)this;
      v13 = -125;
    }
    *(_BYTE *)(v12 + v10) = v13;
    *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000001);
  }
  if (byte_1ECF4C279)
  {
    v14 = *((_QWORD *)this + 3);
    v15 = *((_DWORD *)this + 3);
    v18 = v15;
    result = (char *)(v14 + 16);
    v16 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v16 == *(_DWORD *)(v14 + 24))
    {
      result = (char *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v16 + 1, (unint64_t)&v18);
      *(_DWORD *)(*(_QWORD *)(v14 + 16) + 4 * *(unsigned int *)(v14 + 28)) = *(_DWORD *)result;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v16) = v15;
    }
    ++*(_DWORD *)(v14 + 28);
    *((_DWORD *)this + 9) = 115;
  }
  return result;
}

void JSC::BytecodeGenerator::initializeArrowFunctionContextScopeIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  WTF::AtomStringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143[3];
  WTF::StringImpl *v144;
  __int16 v145;
  uint64_t v146;
  unsigned __int8 *v147;
  uint64_t *v148;
  char v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a3 || (v9 = *(_QWORD *)(a1 + 264)) == 0)
  {
    v146 = 0;
    LOBYTE(v147) = 0;
    v148 = 0;
    v17 = *(_QWORD *)(a1 + 192);
    if ((*(_BYTE *)(v17 + 167) & 0x1D) != 0 || (*(_WORD *)(v17 + 164) & 1) != 0)
    {
      JSC::Symbols::thisPrivateName[0] += 4;
      v144 = (WTF::StringImpl *)JSC::Symbols::thisPrivateName;
      v145 = 0;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>((uint64_t)&v146, &v144, &v145, (uint64_t)v143);
      v36 = v144;
      v144 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
      if (JSC::Symbols::thisPrivateName[0] == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        JSC::Symbols::thisPrivateName[0] -= 2;
      }
      *((_WORD *)v143[0] + 4) |= 9u;
    }
    if (*(_BYTE *)(a1 + 416) == 2)
    {
      v18 = *(_QWORD *)(a1 + 192);
      if ((*(_BYTE *)(v18 + 167) & 0x20) != 0 || (*(_BYTE *)(v18 + 167) & 9) != 0 || (*(_WORD *)(v18 + 164) & 1) != 0)
      {
        JSC::Symbols::newTargetLocalPrivateName[0] += 4;
        v144 = (WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName;
        v145 = 0;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>((uint64_t)&v146, &v144, &v145, (uint64_t)v143);
        v19 = v144;
        v144 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        if (JSC::Symbols::newTargetLocalPrivateName[0] == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          JSC::Symbols::newTargetLocalPrivateName[0] -= 2;
        }
        *((_WORD *)v143[0] + 4) |= 9u;
      }
    }
    if ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 28) & 0x10) != 0)
    {
      v117 = *(_QWORD *)(a1 + 192);
      if ((*(_BYTE *)(v117 + 167) & 0x19) != 0 || (*(_WORD *)(v117 + 164) & 1) != 0)
      {
        JSC::Symbols::derivedConstructorPrivateName[0] += 4;
        v144 = (WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName;
        v145 = 0;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>((uint64_t)&v146, &v144, &v145, (uint64_t)v143);
        v118 = v144;
        v144 = 0;
        if (v118)
        {
          if (*(_DWORD *)v118 == 2)
          {
            WTF::StringImpl::~StringImpl(v118, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
          }
          else
          {
            *(_DWORD *)v118 -= 2;
          }
        }
        if (JSC::Symbols::derivedConstructorPrivateName[0] == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
        }
        else
        {
          JSC::Symbols::derivedConstructorPrivateName[0] -= 2;
        }
        *((_WORD *)v143[0] + 4) |= 9u;
      }
    }
    v20 = v146;
    if (v146)
      v20 = *(_DWORD *)(v146 - 12);
    LODWORD(v21) = (_DWORD)v148;
    if (v148)
    {
      v21 = *v148;
      if (*v148)
        LODWORD(v21) = *(_DWORD *)(v21 - 12);
    }
    if (v20 + (_DWORD)v21)
    {
      JSC::BytecodeGenerator::pushLexicalScopeInternal(a1, (JSC::VariableEnvironment *)&v146, 0, 1, 0, 0, 2, 1);
      v85 = *(_DWORD *)(a1 + 124);
      if (!v85)
      {
        __break(0xC471u);
LABEL_114:
        JUMPOUT(0x19822A620);
      }
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24 * v85 - 16);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v146, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (((1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42)) & 0x940) != 0)
  {
    __break(0xC471u);
    goto LABEL_114;
  }
  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19822A640);
  }
  *(_QWORD *)(a1 + 312) = v9;
  v11 = *(_QWORD *)(a1 + 192);
  if ((*(_BYTE *)(v11 + 167) & 0x1D) != 0 || (*(_WORD *)(v11 + 164) & 1) != 0)
  {
    v32 = (*(_DWORD *)(a2 + 16) + 1);
    *(_DWORD *)(a2 + 16) = v32;
    v33 = JSC::Symbols::thisPrivateName[0];
    JSC::Symbols::thisPrivateName[0] += 2;
    v144 = (WTF::StringImpl *)((v32 << 6) | 9);
    if ((_DWORD)v32 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19822A73CLL);
    }
    if (*(_QWORD *)(a2 + 48))
    {
      __break(0xC471u);
      JUMPOUT(0x19822A69CLL);
    }
    JSC::Symbols::thisPrivateName[0] = v33 + 4;
    v143[0] = (WTF::StringImpl *)JSC::Symbols::thisPrivateName;
    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>((uint64_t *)(a2 + 8), (WTF::AtomStringImpl *)v143, &v144, a4, a5, a6, a7, a8, (uint64_t)&v146);
    v35 = v143[0];
    v143[0] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v34, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    if ((v144 & 1) == 0)
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v144, v34, a3, a4, a5, a6, a7, a8);
    if (JSC::Symbols::thisPrivateName[0] == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, v34, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      JSC::Symbols::thisPrivateName[0] -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 416) == 2)
  {
    v12 = *(_QWORD *)(a1 + 192);
    if ((*(_BYTE *)(v12 + 167) & 0x20) != 0 || (*(_BYTE *)(v12 + 167) & 9) != 0 || (*(_WORD *)(v12 + 164) & 1) != 0)
    {
      v13 = (unsigned __int8 *)(a2 + 20);
      if (__ldaxr((unsigned __int8 *)(a2 + 20)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
LABEL_12:
        v15 = (*(_DWORD *)(a2 + 16) + 1);
        *(_DWORD *)(a2 + 16) = v15;
        v16 = __ldxr(v13);
        if (v16 == 1)
        {
          if (!__stlxr(0, v13))
            goto LABEL_33;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 20), 0, a3, a4, a5, a6, a7, a8);
LABEL_33:
        v22 = JSC::Symbols::newTargetLocalPrivateName[0];
        JSC::Symbols::newTargetLocalPrivateName[0] += 2;
        v144 = (WTF::StringImpl *)((v15 << 6) | 9);
        if ((_DWORD)v15 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x19822A71CLL);
        }
        if (*(_QWORD *)(a2 + 48))
        {
          __break(0xC471u);
          JUMPOUT(0x19822A660);
        }
        v23 = *(_DWORD *)(a2 + 16);
        if (v23 == -1 || v23 < v15)
          *(_DWORD *)(a2 + 16) = v15;
        JSC::Symbols::newTargetLocalPrivateName[0] = v22 + 4;
        v143[0] = (WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>((uint64_t *)(a2 + 8), (WTF::AtomStringImpl *)v143, &v144, a4, a5, a6, a7, a8, (uint64_t)&v146);
        v31 = v143[0];
        v143[0] = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
        if ((v144 & 1) == 0)
          JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v144, v24, v25, v26, v27, v28, v29, v30);
        if (JSC::Symbols::newTargetLocalPrivateName[0] == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName, v24, v25, v26, v27, v28, v29, v30);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          JSC::Symbols::newTargetLocalPrivateName[0] -= 2;
        }
        goto LABEL_44;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 20);
      goto LABEL_12;
    }
  }
LABEL_44:
  if ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 28) & 0x10) != 0)
  {
    v102 = *(_QWORD *)(a1 + 192);
    if ((*(_BYTE *)(v102 + 167) & 0x19) != 0 || (*(_WORD *)(v102 + 164) & 1) != 0)
    {
      v103 = (*(_DWORD *)(a2 + 16) + 1);
      *(_DWORD *)(a2 + 16) = v103;
      LOBYTE(v147) = 0;
      v149 = 0;
      JSC::Symbols::derivedConstructorPrivateName[0] += 2;
      JSC::SymbolTableEntry::SymbolTableEntry((uint64_t)v143, ((_DWORD)v103 != -1) | (unint64_t)(v103 << 32));
      JSC::SymbolTable::set<JSC::SymbolTableEntry>(a2, (uint64_t)&v146, (WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName, v143, v104, v105, v106, v107);
      if (((uint64_t)v143[0] & 1) == 0)
        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)v143, v108, v109, v110, v111, v112, v113, v114);
      if (JSC::Symbols::derivedConstructorPrivateName[0] == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName, (WTF::AtomStringImpl *)v108, v109, v110, v111, v112, v113, v114);
        WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
      }
      else
      {
        JSC::Symbols::derivedConstructorPrivateName[0] -= 2;
      }
      if (v149 && (_BYTE)v148)
      {
        v115 = v147;
        v116 = __ldxr(v147);
        if (v116 == 1)
        {
          if (!__stlxr(0, v147))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v115, 0, v109, v110, v111, v112, v113, v114);
      }
    }
  }
}

void JSC::BytecodeGenerator::emitPutThisToArrowFunctionContextScope(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __int16 v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *ArrowFunctionLexicalEnvironment;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  WTF::StringImpl *v57[5];

  v9 = *((_QWORD *)this + 24);
  if ((*(_BYTE *)(v9 + 167) & 0x1D) != 0
    || (v10 = *(_WORD *)(v9 + 164), (v10 & 1) != 0)
    || (v10 & 0x100) != 0 && *((_BYTE *)this + 416) == 1)
  {
    JSC::Symbols::thisPrivateName[0] += 2;
    v56 = JSC::Symbols::thisPrivateName;
    JSC::BytecodeGenerator::variable((uint64_t)v57, (uint64_t)this, (uint64_t)&v56, 1, a5, a6, a7, a8);
    if (JSC::Symbols::thisPrivateName[0] == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      JSC::Symbols::thisPrivateName[0] -= 2;
    }
    if (*((_BYTE *)this + 713) == 1)
    {
      JSC::Symbols::thisPrivateName[0] += 2;
      v56 = JSC::Symbols::thisPrivateName;
      ArrowFunctionLexicalEnvironment = (WTF::AtomStringImpl *)JSC::BytecodeGenerator::emitLoadArrowFunctionLexicalEnvironment((uint64_t)this, (uint64_t)&v56, v12, v13, v14, v15, v16, v17);
      if (JSC::Symbols::thisPrivateName[0] == 2)
      {
        v47 = ArrowFunctionLexicalEnvironment;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, ArrowFunctionLexicalEnvironment, v43, v44, v45, v46, v16, v17);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
        ArrowFunctionLexicalEnvironment = v47;
      }
      else
      {
        JSC::Symbols::thisPrivateName[0] -= 2;
      }
    }
    else
    {
      ArrowFunctionLexicalEnvironment = (WTF::AtomStringImpl *)*((_QWORD *)this + 39);
    }
    JSC::BytecodeGenerator::emitPutToScope((uint64_t)this, (uint64_t)ArrowFunctionLexicalEnvironment, (uint64_t)v57, (uint64_t)this + 220, 0, 2, v16, v17);
    v26 = v57[0];
    v57[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
}

unint64_t JSC::BytecodeGenerator::BytecodeGenerator(unint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, char a5, _DWORD **a6, unsigned int **a7, _QWORD *a8)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  unint64_t SlowCase;
  JSC::JSCell *v41;
  char v42;
  _DWORD *v43;
  JSC::TDZEnvironmentLink *v44;
  uint64_t v45;
  __int16 v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  int v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  WTF::AtomStringImpl *v82;
  const WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  BOOL v98;
  int v99;
  JSC::JSCell *v100;
  unint64_t v101;
  uint64_t *v102;
  _QWORD **v103;
  WTF *v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  WTF *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::AtomStringImpl *v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BOOL4 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  uint64_t v148;
  unint64_t *v149;
  int *v150;
  int v151;
  int v152;
  int v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  int v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  char v177;
  BOOL v178;
  int v179;
  BOOL v180;
  _DWORD *v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  WTF *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v214;
  uint64_t v215;
  WTF *v216;
  WTF::StringImpl *v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t *v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  __int128 *v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int16 v243;
  uint64_t v244;
  _DWORD *v245;
  __int16 v246;
  WTF::AtomStringImpl *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  WTF::AtomStringImpl *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  WTF::StringImpl *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  WTF::AtomStringImpl *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  WTF::StringImpl *v289;
  uint64_t v290;
  WTF::AtomStringImpl *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  WTF::StringImpl *v298;
  unint64_t v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _BOOL4 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  unsigned int v310;
  unsigned int v311;
  char v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  WTF::StringImpl **v336;
  uint64_t v337;
  WTF::StringImpl *v338;
  WTF::AtomStringImpl *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  WTF::AtomStringImpl *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int *v376;
  const WTF::StringImpl *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t v388;
  int *v389;
  int *v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  char v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v400;
  int *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int8x16_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  _DWORD *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char v433;
  uint64_t v434;
  int *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  _WORD *v446;
  uint64_t v447;
  _WORD *v448;
  _WORD *v449;
  uint64_t v450;
  _WORD *v451;
  char *v452;
  uint64_t v453;
  _WORD *v454;
  WTF::AtomStringImpl *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _QWORD *v463;
  char *v464;
  uint64_t v465;
  unint64_t v466;
  _QWORD *v467;
  _DWORD *v468;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  signed int v477;
  _BOOL4 v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char v482;
  int v483;
  uint64_t *v484;
  int v485;
  unint64_t v486;
  void *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _BOOL4 v494;
  uint64_t v495;
  unsigned int v496;
  unsigned int v497;
  char v498;
  uint64_t v499;
  uint64_t v500;
  unint64_t v501;
  void *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  void *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _QWORD **v518;
  uint64_t v519;
  uint64_t v520;
  unsigned int v521;
  int v522;
  unsigned int v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  int *v527;
  int *v528;
  WTF::StringImpl **v529;
  uint64_t v530;
  WTF::StringImpl *v531;
  unint64_t v532;
  void *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  WTF::StringImpl **v557;
  WTF::StringImpl *v558;
  unint64_t v559;
  void *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  _DWORD *v567;
  _DWORD *v568;
  WTF::StringImpl *v569;
  unsigned int v570;
  int v571;
  unsigned int v572;
  WTF::StringImpl *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  _DWORD *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  _DWORD *v588;
  WTF::AtomStringImpl *v589;
  _DWORD *v590;
  WTF::StringImpl *v591;
  char *v592;
  char *v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  JSC::JSCell **v601;
  uint64_t v602;
  _QWORD *v603;
  unint64_t v604;
  unint64_t *v605;
  unint64_t v606;
  uint64_t v607;
  int v608;
  int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  _BOOL4 v618;
  _BOOL4 v620;
  _BOOL4 v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  char v625;
  unsigned int v626;
  unsigned int v627;
  char v628;
  uint64_t v629;
  uint64_t v630;
  unsigned int v631;
  unsigned int v632;
  char v633;
  uint64_t v634;
  uint64_t v635;
  unsigned int v636;
  unsigned int v637;
  char v638;
  uint64_t v639;
  uint64_t v640;
  unsigned int v641;
  unsigned int v642;
  char v643;
  uint64_t v644;
  uint64_t v645;
  unsigned int v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  char v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  signed int v663;
  _BOOL4 v664;
  StringView v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  char v672;
  unsigned int v673;
  unsigned int v674;
  char v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unsigned int v685;
  uint64_t v686;
  char v687;
  char v688;
  uint64_t v689;
  _QWORD **v690;
  WTF *v691;
  uint64_t v692;
  unsigned int v693;
  int v694;
  unsigned int v695;
  WTF *v696;
  int v697;
  uint64_t *v698;
  WTF::AtomStringImpl *v699;
  WTF::StringImpl *v700;
  uint64_t v701;
  _DWORD *v702;
  WTF::StringImpl *v703;
  WTF::StringImpl *v704;
  WTF::StringImpl *v705;
  int v706;
  _QWORD *v707;
  unsigned int *v708;
  uint64_t v709;
  uint64_t v710;
  unsigned int *v711;
  char *v712;
  int v713;
  unint64_t v714;
  unint64_t v715;
  void *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  void *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  void *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  char *v739;
  char *v740;
  _DWORD *v741;
  unint64_t v742;
  void *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  int *v750;
  uint64_t v751;
  _QWORD *v752;
  uint64_t v753;
  _QWORD *v754;
  _DWORD *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  WTF::AtomStringImpl *v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  WTF::StringImpl *v774;
  char *v775;
  char *v776;
  char *v777;
  char *v778;
  char *v779;
  char *v780;
  char *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  WTF::StringImpl *v795;
  uint64_t v796;
  _DWORD **v797;
  _DWORD *v798;
  WTF::StringImpl *v799;
  unint64_t v800;
  void *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  _QWORD *v813;
  uint64_t v814;
  unint64_t v815;
  uint64_t v816;
  JSC::ScopedArgumentsTable *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  JSC::JSCell *v824;
  unint64_t v825;
  JSC::JSCell *v826;
  uint64_t v827;
  uint64_t v828;
  _QWORD **v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  WTF *v835;
  uint64_t v836;
  unsigned int v837;
  int v838;
  unsigned int v839;
  WTF *v840;
  int v841;
  uint64_t v842;
  unsigned int v843;
  WTF::AtomStringImpl *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  WTF::StringImpl *v851;
  void *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unsigned int v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  void *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  char v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  _QWORD *v877;
  uint64_t v878;
  unint64_t v879;
  void *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  unint64_t v887;
  void *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  unint64_t v895;
  void *v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  unint64_t v903;
  void *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  _QWORD *v911;
  uint64_t v912;
  uint64_t *v913;
  uint64_t v914;
  int *v915;
  _BYTE *v916;
  unint64_t v917;
  int *v918;
  unsigned int **v919;
  uint64_t v920;
  unint64_t *v921;
  int v922;
  int *v923;
  int v924;
  int v925;
  JSC::JSCell *v926;
  int v927;
  uint64_t v928;
  uint64_t (*v929)(uint64_t, uint64_t);
  uint64_t (**v930)(uint64_t, uint64_t);
  unsigned __int8 *v931;
  unint64_t v932;
  uint64_t *v933;
  unsigned __int8 v934;
  uint64_t v935;
  char *v936;
  uint64_t v937;
  WTF::StringImpl *v938;
  _DWORD *v939;
  WTF::StringImpl *v940;
  __int128 v941;
  uint64_t v942;
  WTF::StringImpl **v943;
  _QWORD *v944;
  uint64_t v945;
  WTF *v946;
  char v947;
  uint64_t v948;

  v919 = a7;
  v935 = a3;
  v21 = WTF::fastMalloc((WTF *)0x128);
  *(_QWORD *)v21 = a2;
  v22 = *(_QWORD *)(a2 + 712);
  if (!v22)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), v14, v15, v16, v17, v18, v19, v20);
    v22 = *(_QWORD *)(a2 + 712);
  }
  *(_QWORD *)(a2 + 712) = *(_QWORD *)v22;
  *(_QWORD *)(v22 + 16) = 0;
  v23 = (_QWORD *)(v22 + 16);
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v21 + 8) = v22 + 16;
  if ((a4 != 0) != (*(_QWORD *)(v22 + 16) != 0))
  {
    if (a4)
    {
      v24 = *(unint64_t **)((v22 & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = v24[3];
      v24 += 3;
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v24;
      *v24 = v22;
      *(_QWORD *)(v25 + 8) = v22;
    }
    else
    {
      v878 = *(_QWORD *)v22;
      v877 = *(_QWORD **)(v22 + 8);
      *v877 = *(_QWORD *)v22;
      *(_QWORD *)(v878 + 8) = v877;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      v23 = *(_QWORD **)(v21 + 8);
    }
  }
  *v23 = a4;
  *(_QWORD *)(v21 + 288) = 0;
  *(_OWORD *)(v21 + 256) = 0u;
  *(_OWORD *)(v21 + 272) = 0u;
  *(_OWORD *)(v21 + 224) = 0u;
  *(_OWORD *)(v21 + 240) = 0u;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_OWORD *)(v21 + 208) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_QWORD *)(a1 + 13) = 0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 24) = v21;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 115;
  *(_QWORD *)(a1 + 40) = a1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  v33 = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v34 = (uint64_t *)(a1 + 200);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 104) = a5;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  v35 = v935;
  *(_QWORD *)(a1 + 208) = 0x3FFFFFFF00000000;
  v915 = (int *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = v35;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 0x3FFFFFFF00000000;
  v918 = (int *)(a1 + 220);
  *(_BYTE *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 232) = 0x3FFFFFFF00000000;
  v917 = a1 + 232;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_BYTE *)(a1 + 416) = 2;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_BYTE *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 620) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = a2;
  *(_WORD *)(a1 + 704) = 1;
  *(_BYTE *)(a1 + 706) = 0;
  *(_BYTE *)(a1 + 707) = a4[28] & 1;
  v36 = *(_WORD *)(v35 + 164);
  if ((v36 & 1) != 0)
    v33 = (*(_BYTE *)(v35 + 166) & 1) == 0;
  *(_BYTE *)(a1 + 708) = v33;
  v37 = byte_1ECF4C278;
  v916 = a4;
  if (byte_1ECF4C278)
  {
    v784 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
    if (*(_QWORD *)(v784 + 20) & 0x80000000 | *(_WORD *)(v784 + 28) & 0xC0)
      v37 = 0;
    else
      v37 = *(_BYTE *)(v35 + 166) & 1;
    a4 = v916;
  }
  *(_BYTE *)(a1 + 709) = v37;
  *(_BYTE *)(a1 + 710) = 1;
  *(_BYTE *)(a1 + 711) = *(_BYTE *)(a1 + 711) & 0xFC | ((v36 & 0x41) != 0);
  v923 = (int *)(*(_BYTE *)(v35 + 166) & 1);
  v38 = (_DWORD)v923 == 0;
  *(_BYTE *)(a1 + 712) = v38;
  *(_BYTE *)(a1 + 713) = a4[29] & 3;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = xmmword_199154580;
  v39 = a2;
  if (a8)
  {
    v39 = a2;
    if (*a8)
    {
      v39 = a2;
      if (*(_DWORD *)(*a8 - 12))
      {
        v467 = (_QWORD *)WTF::Vector<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 160, 1uLL, (unint64_t)a8);
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable((uint64_t *)(*(_QWORD *)(a1 + 160) + 8 * *(unsigned int *)(a1 + 172)), v467);
        v39 = *(_QWORD *)(a1 + 696);
        ++*(_DWORD *)(a1 + 172);
      }
    }
  }
  SlowCase = *(_QWORD *)(v39 + 40048);
  if (SlowCase < *(_QWORD *)(v39 + 40056))
    goto LABEL_12;
  SlowCase = *(_QWORD *)(v39 + 40064);
  if ((SlowCase & 1) == 0)
  {
    v714 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v39 + 40072);
    *(_QWORD *)(v39 + 40056) = SlowCase + HIDWORD(v714);
    *(_QWORD *)(v39 + 40064) = SlowCase + (int)v714;
LABEL_12:
    *(_QWORD *)(v39 + 40048) = SlowCase + 64;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM((JSC *)v39, v26, v27, v28, v29, v30, v31, v32);
  a4 = v916;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v39 + 40024, v39 + 192, 64, 0, 0);
LABEL_13:
  *(_DWORD *)SlowCase = 0;
  v41 = (JSC::JSCell *)JSC::SymbolTable::SymbolTable(SlowCase, v39);
  if (*(_BYTE *)(v39 + 755))
    __dmb(0xAu);
  v42 = *((_BYTE *)v41 + 21) & 0xFE | *(_BYTE *)(a1 + 708);
  v926 = v41;
  *((_BYTE *)v41 + 21) = v42;
  v43 = *a6;
  if (*a6)
    ++*v43;
  v44 = *(JSC::TDZEnvironmentLink **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v43;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v44);
      WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
    }
    else
    {
      --*(_DWORD *)v44;
    }
  }
  *(_QWORD *)(a1 + 136) = v919;
  v45 = *(_QWORD *)(v35 + 248);
  v46 = *(_WORD *)(v35 + 164);
  v47 = ((v46 & 0x40) != 0 && *(_BYTE *)(v35 + 167) || (*(_WORD *)(*(_QWORD *)(a1 + 192) + 164) & 1) != 0)
     && ((1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42)) & 0x940) == 0;
  v925 = *(unsigned __int8 *)(v45 + 72);
  v48 = a4[42];
  v49 = *(_BYTE *)(a1 + 104);
  v928 = v45;
  v920 = v48;
  if ((v49 & 1) != 0 && !*(_BYTE *)(a1 + 707))
  {
    v57 = 1;
    v934 = 1;
    goto LABEL_45;
  }
  v50 = *(_QWORD *)(v35 + 192);
  if (!*(_BYTE *)(v35 + 200))
  {
    if (v50)
    {
      v51 = *(unsigned int *)(v50 - 4);
      v52 = v50 + 16 * v51;
      if (*(_DWORD *)(v50 - 12))
      {
        v53 = *(_QWORD *)(v35 + 192);
        if ((_DWORD)v51)
        {
          v54 = 16 * v51;
          v53 = *(_QWORD *)(v35 + 192);
          while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
          {
            v53 += 16;
            v54 -= 16;
            if (!v54)
            {
              v53 = v52;
              break;
            }
          }
        }
LABEL_32:
        if (v50)
          v50 += 16 * *(unsigned int *)(v50 - 4);
        if (v50 != v53)
        {
          while ((*(_WORD *)(v53 + 8) & 1) == 0)
          {
            v55 = v53 + 16;
            v53 = v52;
            if (v55 != v52)
            {
              v53 = v55;
              while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
              {
                v53 += 16;
                if (v53 == v52)
                {
                  v53 = v52;
                  break;
                }
              }
            }
            if (v53 == v50)
              goto LABEL_42;
          }
          goto LABEL_675;
        }
        goto LABEL_42;
      }
      v53 = v50 + 16 * v51;
    }
    else
    {
      v53 = 0;
      v51 = 0;
    }
    v52 = v50 + 16 * v51;
    goto LABEL_32;
  }
  if (v50)
    v706 = *(_DWORD *)(v50 - 12);
  else
    v706 = 0;
  v707 = *(_QWORD **)(v35 + 208);
  if (v707)
  {
    v707 = (_QWORD *)*v707;
    if (v707)
      LODWORD(v707) = *((_DWORD *)v707 - 3);
    v45 = v928;
    LOBYTE(v48) = v920;
  }
  if (v706 + (_DWORD)v707)
  {
LABEL_675:
    v56 = 1;
    goto LABEL_43;
  }
LABEL_42:
  v56 = (v46 & 5) != 0;
LABEL_43:
  v934 = v56 || v47;
  if ((v49 & 1) == 0 || *(_BYTE *)(a1 + 707))
    v57 = *(_WORD *)(*(_QWORD *)(a1 + 192) + 164) & 1;
  else
    v57 = 1;
LABEL_45:
  if ((v46 & 0x22) == 2 && ((1 << v48) & 0x940) == 0
    || (v58 = *(_QWORD *)(a1 + 192), (*(_WORD *)(v58 + 164) & 1) != 0)
    || (v46 & 0x40) != 0 && ((1 << v48) & 0x940) == 0 && (*(_BYTE *)(v58 + 167) & 3) != 0)
  {
    v59 = 2 * (v48 != 19);
  }
  else
  {
    v59 = 0;
  }
  v60 = *(_BYTE *)(a1 + 711) & 0xFD;
  *(_BYTE *)(a1 + 711) = v60 | v59;
  v927 = (1 << v48) & 0x8182;
  if (v927)
  {
    *(_BYTE *)(a1 + 500) = 1;
    *(_BYTE *)(a1 + 711) = v60;
  }
  else if (((1 << v48) & 0x70E04) != 0)
  {
    if (v59)
      v934 = 1;
    if (*(_DWORD *)(v45 + 20))
    {
      v934 = 1;
      goto LABEL_537;
    }
  }
  if (!v57)
    goto LABEL_52;
LABEL_537:
  if (*(_BYTE *)(v35 + 200))
    goto LABEL_52;
  *(_BYTE *)(v35 + 200) = 1;
  v595 = *(_QWORD *)(v35 + 192);
  if (v595)
  {
    v596 = *(unsigned int *)(v595 - 4);
    v597 = v595 + 16 * v596;
    if (*(_DWORD *)(v595 - 12))
    {
      v598 = *(_QWORD *)(v35 + 192);
      if ((_DWORD)v596)
      {
        v599 = 16 * v596;
        v598 = *(_QWORD *)(v35 + 192);
        while ((unint64_t)(*(_QWORD *)v598 + 1) <= 1)
        {
          v598 += 16;
          v599 -= 16;
          if (!v599)
          {
            v598 = v597;
            goto LABEL_545;
          }
        }
      }
      goto LABEL_545;
    }
    v598 = v595 + 16 * v596;
  }
  else
  {
    v598 = 0;
    v596 = 0;
  }
  v597 = v595 + 16 * v596;
LABEL_545:
  if (v595)
    v595 += 16 * *(unsigned int *)(v595 - 4);
  while (v598 != v595)
  {
    *(_WORD *)(v598 + 8) |= 1u;
    v600 = v598 + 16;
    v598 = v597;
    if (v600 != v597)
    {
      v598 = v600;
      while ((unint64_t)(*(_QWORD *)v598 + 1) <= 1)
      {
        v598 += 16;
        if (v598 == v597)
        {
          v598 = v597;
          break;
        }
      }
    }
  }
LABEL_52:
  v924 = 1 << v48;
  v929 = WTF::ScopedLambdaFunctor<BOOL ()(WTF::UniquedStringImpl *),JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &,JSC::FunctionNode *,JSC::UnlinkedFunctionCodeBlock *,WTF::OptionSet<JSC::CodeGenerationMode>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>> const&,WTF::FixedVector<JSC::Identifier> const*,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits> const*)::$_0>::implFunction;
  v930 = &v929;
  v931 = &v934;
  v932 = a1;
  v933 = &v935;
  *(_DWORD *)(a1 + 236) = 3;
  v61 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 24) & 0x7FFFFFFF;
  v62 = *(_QWORD *)(a1 + 336) + 1;
  v921 = (unint64_t *)(a1 + 336);
  WTF::SegmentedVector<JSC::RegisterID,32ul>::grow(a1 + 336, v62);
  if (v61 >> 5 >= *(unsigned int *)(a1 + 356))
  {
    __break(0xC471u);
    JUMPOUT(0x19822E25CLL);
  }
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * (v61 >> 5)) + 12 * (v61 & 0x1F);
  *(_DWORD *)(v70 + 4) = v61 + 5;
  v71 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  *(_QWORD *)(v71 + 20) = *(_QWORD *)(v71 + 20) & 0x80000000FFFFFFFFLL | (((HIDWORD(*(_QWORD *)(v71 + 20)) + 1) & 0x7FFFFFFF) << 32);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(v70 + 4);
  if (*(_DWORD *)(v45 + 20))
  {
    v72 = 0;
    v73 = 0;
    v74 = 0;
    do
    {
      v75 = (_QWORD *)(*(_QWORD *)(v928 + 8) + v72);
      v76 = *v75;
      v77 = v75[1];
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v75 + 56))(*v75))
      {
        if (*(_QWORD *)(a1 + 544))
        {
          __break(0xC471u);
          JUMPOUT(0x19822DF3CLL);
        }
        *(_QWORD *)(a1 + 544) = v76;
      }
      else if (!(v74 & 1 | (v77 != 0)))
      {
        v78 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 24) & 0x7FFFFFFF;
        WTF::SegmentedVector<JSC::RegisterID,32ul>::grow((uint64_t)v921, *(_QWORD *)(a1 + 336) + 1);
        if (v78 >> 5 >= *(unsigned int *)(a1 + 356))
        {
          __break(0xC471u);
          JUMPOUT(0x19822E244);
        }
        v74 = 0;
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * (v78 >> 5)) + 12 * (v78 & 0x1F) + 4) = v78 + 5;
        v79 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(v79 + 20) = *(_QWORD *)(v79 + 20) & 0x80000000FFFFFFFFLL | (((HIDWORD(*(_QWORD *)(v79 + 20)) + 1) & 0x7FFFFFFF) << 32);
        goto LABEL_59;
      }
      v74 = 1;
LABEL_59:
      ++v73;
      v72 += 16;
    }
    while (v73 < *(unsigned int *)(v928 + 20));
  }
  JSC::BytecodeGenerator::emitEnter((JSC::BytecodeGenerator *)a1, v63, v64, v65, v66, v67, v68, v69);
  v80 = v928;
  if (v927)
  {
    if (!*(_DWORD *)(a1 + 356))
    {
      __break(0xC471u);
      JUMPOUT(0x19822E30CLL);
    }
    *(_QWORD *)(a1 + 272) = **(_QWORD **)(a1 + 344) + 12;
  }
  v81 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  *(_QWORD *)(a1 + 248) = v81;
  v89 = v81[1];
  ++*v81;
  v90 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 8);
  *(_DWORD *)(*v90 + 12) = v89;
  v91 = *v90;
  LOWORD(v89) = *(_WORD *)(v91 + 28);
  v92 = *(_QWORD *)(v91 + 20);
  v93 = v89 >> 6;
  if ((v93 - 1) < 2)
  {
    if ((v92 & 0x80000000) == 0)
    {
      v464 = "Cannot call a class constructor without |new|";
      v465 = a1;
      v466 = 46;
LABEL_403:
      JSC::BytecodeGenerator::emitThrowTypeError(v465, (unsigned __int8 *)v464, v466, v84, v85, v86, v87, v88);
      return a1;
    }
  }
  else if (v93 == 3 && (v92 & 0x80000000) == 0)
  {
    v464 = "Cannot call a constructor without |new|";
    v465 = a1;
    v466 = 40;
    goto LABEL_403;
  }
  if (*(_DWORD *)(v935 + 240) == 1)
  {
    v82 = *(WTF::AtomStringImpl **)(v935 + 232);
    if (v82)
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 192) + 164) & 1) == 0)
        v38 = 0;
      v243 = ((uint64_t (*)(uint64_t (**)(uint64_t, uint64_t)))v929)(v930);
      v244 = v935;
      v946 = 0;
      v947 = 0;
      v948 = 0;
      v245 = *(_DWORD **)(v935 + 232);
      if (v245)
        *v245 += 2;
      v246 = v38 | v243;
      *(_QWORD *)&v941 = v245;
      LOWORD(v944) = 0;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>((uint64_t)&v946, (WTF::StringImpl **)&v941, &v944, (uint64_t)&v936);
      v254 = (WTF::StringImpl *)v941;
      *(_QWORD *)&v941 = 0;
      if (v254)
      {
        if (*(_DWORD *)v254 == 2)
        {
          WTF::StringImpl::~StringImpl(v254, v247, v248, v249, v250, v251, v252, v253);
          WTF::fastFree(v501, v502, v503, v504, v505, v506, v507, v508);
        }
        else
        {
          *(_DWORD *)v254 -= 2;
        }
      }
      *((_WORD *)v936 + 4) |= v246 | 2;
      JSC::BytecodeGenerator::pushLexicalScopeInternal(a1, (JSC::VariableEnvironment *)&v946, 0, 1, 0, 1, 3, 0);
      v255 = *(_DWORD *)(a1 + 124);
      if (!v255)
      {
        __break(0xC471u);
        JUMPOUT(0x19822E2B4);
      }
      v256 = *(unsigned __int8 *)(a1 + 712);
      JSC::SymbolTable::get((unint64_t *)&v944, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 24 * v255 - 24) + 8), *(_QWORD *)(v244 + 232));
      v257 = *(_DWORD *)(a1 + 124);
      if (!v257)
      {
        __break(0xC471u);
        JUMPOUT(0x19822E2BCLL);
      }
      JSC::BytecodeGenerator::variableForLocalEntry((uint64_t)&v941, a1, *(_DWORD **)(v244 + 232), &v944, *(_DWORD *)(*(_QWORD *)(a1 + 112) + 24 * v257 - 4), v256 == 0);
      if ((v944 & 1) == 0)
        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v944, v258, v259, v260, v261, v262, v263, v264);
      v265 = *(_DWORD *)(a1 + 124);
      if (!v265)
      {
        __break(0xC471u);
        JUMPOUT(0x19822E2C4);
      }
      JSC::BytecodeGenerator::emitPutToScope(a1, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24 * v265 - 16), (uint64_t)&v941, v917, 0, 2, v263, v264);
      v273 = (WTF::StringImpl *)v941;
      *(_QWORD *)&v941 = 0;
      if (v273)
      {
        if (*(_DWORD *)v273 == 2)
        {
          WTF::StringImpl::~StringImpl(v273, v266, v267, v268, v269, v270, v271, v272);
          WTF::fastFree(v509, v510, v511, v512, v513, v514, v515, v516);
        }
        else
        {
          *(_DWORD *)v273 -= 2;
        }
      }
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v946, v266, v267, v268, v269, v270, v271, v272);
    }
  }
  v94 = v934;
  if (v934)
  {
    *(_QWORD *)(a1 + 264) = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
    v94 = v934;
  }
  v95 = v925;
  if (v927 | v94 || (*(_BYTE *)(a1 + 104) & 2) != 0)
    v922 = *(_DWORD *)(JSC::BytecodeGenerator::addConstantValue(a1, (uint64_t)v926) + 4);
  else
    v922 = 0;
  if (v925)
    JSC::BytecodeGenerator::initializeVarLexicalEnvironment(a1, v922, (uint64_t)v926, v934);
  v96 = *(unsigned int *)(v935 + 148);
  if ((_DWORD)v96)
  {
    v214 = *(_QWORD *)(v935 + 136);
    v215 = 8 * v96;
    do
    {
      v216 = *(WTF **)(*(_QWORD *)v214 + 40);
      if (v216)
        *(_DWORD *)v216 += 2;
      v946 = v216;
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(a1 + 200), (WTF::AtomStringImpl *)&v946, (uint64_t)v83, v84, v85, v86, v87, v88, (uint64_t)&v941);
      v217 = v946;
      v946 = 0;
      if (v217)
      {
        if (*(_DWORD *)v217 == 2)
        {
          WTF::StringImpl::~StringImpl(v217, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
        }
        else
        {
          *(_DWORD *)v217 -= 2;
        }
      }
      v214 += 8;
      v215 -= 8;
    }
    while (v215);
  }
  v97 = *(unsigned __int8 *)(a1 + 711);
  if ((v97 & 2) == 0)
  {
    if ((_DWORD)v923)
      v98 = 1;
    else
      v98 = v95 == 0;
    v99 = v98;
    goto LABEL_80;
  }
  v468 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  v98 = (_DWORD)v923 == 0;
  *(_QWORD *)(a1 + 256) = v468;
  ++*v468;
  v97 = *(unsigned __int8 *)(a1 + 711);
  v99 = !v98 || v95 == 0;
  if ((v97 & 2) != 0 && (v99 & 1) == 0)
  {
    v470 = *(_QWORD *)(v935 + 192);
    if (*(_BYTE *)(v935 + 200))
    {
      if (v470)
        v812 = *(_DWORD *)(v470 - 12);
      else
        v812 = 0;
      v813 = *(_QWORD **)(v935 + 208);
      if (v813)
      {
        v813 = (_QWORD *)*v813;
        if (v813)
          LODWORD(v813) = *((_DWORD *)v813 - 3);
      }
      v95 = v925;
      v80 = v928;
      if (v812 + (_DWORD)v813)
        goto LABEL_772;
LABEL_432:
      LODWORD(v476) = *(_DWORD *)(v80 + 20);
LABEL_433:
      if (!(_DWORD)v476)
        goto LABEL_434;
      v689 = 0;
      while (1)
      {
        v690 = *(_QWORD ***)(*(_QWORD *)(v928 + 8) + 16 * v689);
        if (((unsigned int (*)(_QWORD **))(*v690)[5])(v690))
        {
          v691 = (WTF *)*v690[4];
          v692 = *v34;
          if (*v34)
          {
            v693 = *((_DWORD *)v691 + 4);
            if ((v693 & 0x20) != 0)
              v693 = *((_DWORD *)v691 + 8);
            v694 = *(_DWORD *)(v692 - 8);
            v695 = v694 & (v693 >> 8);
            v696 = *(WTF **)(v692 + 8 * v695);
            if (v696 == v691)
              goto LABEL_653;
            v697 = 1;
            while (v696)
            {
              v695 = (v695 + v697) & v694;
              v696 = *(WTF **)(v692 + 8 * v695);
              ++v697;
              if (v696 == v691)
                goto LABEL_653;
            }
          }
          if (v691)
          {
            v936 = (char *)((v689 << 6) | 0x39);
            if (*((_QWORD *)v926 + 6))
            {
              __break(0xC471u);
              JUMPOUT(0x19822DF88);
            }
            v698 = (uint64_t *)((char *)v926 + 8);
            *(_DWORD *)v691 += 2;
            v946 = v691;
            WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>(v698, (WTF::AtomStringImpl *)&v946, (WTF::StringImpl **)&v936, v84, v85, v86, v87, v88, (uint64_t)&v941);
            v700 = v946;
            v946 = 0;
            if (v700)
            {
              if (*(_DWORD *)v700 == 2)
              {
                WTF::StringImpl::~StringImpl(v700, v699, (uint64_t)v83, v84, v85, v86, v87, v88);
                WTF::fastFree(v742, v743, v744, v745, v746, v747, v748, v749);
              }
              else
              {
                *(_DWORD *)v700 -= 2;
              }
            }
            if ((v936 & 1) == 0)
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v936, v699, (uint64_t)v83, v84, v85, v86, v87, v88);
          }
        }
LABEL_653:
        if (++v689 >= (unint64_t)*(unsigned int *)(v928 + 20))
          goto LABEL_434;
      }
    }
    if (v470)
    {
      v471 = *(unsigned int *)(v470 - 4);
      v472 = v470 + 16 * v471;
      if (*(_DWORD *)(v470 - 12))
      {
        v473 = *(_QWORD *)(v935 + 192);
        if ((_DWORD)v471)
        {
          v474 = 16 * v471;
          v473 = *(_QWORD *)(v935 + 192);
          while ((unint64_t)(*(_QWORD *)v473 + 1) <= 1)
          {
            v473 += 16;
            v474 -= 16;
            if (!v474)
            {
              v473 = v472;
              break;
            }
          }
        }
LABEL_422:
        if (v470)
          v470 += 16 * *(unsigned int *)(v470 - 4);
        if (v470 != v473)
        {
          while ((*(_WORD *)(v473 + 8) & 1) == 0)
          {
            v475 = v473 + 16;
            v473 = v472;
            if (v475 != v472)
            {
              v473 = v475;
              while ((unint64_t)(*(_QWORD *)v473 + 1) <= 1)
              {
                v473 += 16;
                if (v473 == v472)
                {
                  v473 = v472;
                  break;
                }
              }
            }
            if (v473 == v470)
              goto LABEL_432;
          }
LABEL_772:
          v476 = *(unsigned int *)(v80 + 20);
          if ((_DWORD)v476)
          {
            v814 = 0;
            v815 = 0;
            v80 = v928;
            while (1)
            {
              if (v815 >= v476)
              {
                __break(0xC471u);
                JUMPOUT(0x19822E2ECLL);
              }
              if (v929((uint64_t)v930, **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v928 + 8) + v814) + 32)))
                break;
              ++v815;
              v476 = *(unsigned int *)(v928 + 20);
              v814 += 16;
              if (v815 >= v476)
                goto LABEL_433;
            }
            v816 = *(unsigned int *)(v928 + 20);
            v817 = (JSC::ScopedArgumentsTable *)*((_QWORD *)v926 + 4);
            if (v817)
            {
              JSC::ScopedArgumentsTable::trySetLength(v817, (JSC::VM *)a2, (JSC::VM *)v816, v84, v85, v86, v87, v88);
              if (v818)
              {
LABEL_780:
                v824 = v926;
                *((_QWORD *)v926 + 4) = v818;
                if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)v824 + 7))
                  JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v926);
                if (!*(_DWORD *)(v80 + 20))
                {
LABEL_815:
                  JSC::OpCreateScopedArguments::emit<JSC::BytecodeGenerator>(a1, *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4), *(unsigned int *)(*(_QWORD *)(a1 + 264) + 4), v819, v820, v821, v822, v823);
                  v100 = v926;
                  goto LABEL_118;
                }
                v825 = 0;
                v913 = (uint64_t *)((char *)v926 + 8);
                v914 = (v922 - 0x40000000);
                while (1)
                {
                  v826 = v926;
                  v827 = (*((_DWORD *)v926 + 4) + 1);
                  *((_DWORD *)v926 + 4) = v827;
                  v828 = JSC::ScopedArgumentsTable::trySet(*((_QWORD *)v826 + 4), (JSC::VM *)a2, v825, v827, v820, v821, v822, v823);
                  if (!v828)
                    break;
                  *((_QWORD *)v826 + 4) = v828;
                  if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)v826 + 7))
                    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v926);
                  if (v825 >= *(unsigned int *)(v80 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19822E324);
                  }
                  v829 = *(_QWORD ***)(*(_QWORD *)(v80 + 8) + 16 * v825);
                  if (!((unsigned int (*)(_QWORD **))(*v829)[5])(v829))
                    goto LABEL_811;
                  v835 = (WTF *)*v829[4];
                  v836 = *v34;
                  if (*v34)
                  {
                    v837 = *((_DWORD *)v835 + 4);
                    if ((v837 & 0x20) != 0)
                      v837 = *((_DWORD *)v835 + 8);
                    v838 = *(_DWORD *)(v836 - 8);
                    v839 = v838 & (v837 >> 8);
                    v840 = *(WTF **)(v836 + 8 * v839);
                    if (v840 == v835)
                      goto LABEL_811;
                    v841 = 1;
                    while (1)
                    {
                      v80 = v928;
                      if (!v840)
                        break;
                      v839 = (v839 + v841) & v838;
                      v840 = *(WTF **)(v836 + 8 * v839);
                      ++v841;
                      v842 = 0xFFFFFFFFLL;
                      if (v840 == v835)
                        goto LABEL_808;
                    }
                  }
                  if (v835)
                  {
                    v936 = (char *)((v827 << 6) | 9);
                    if ((_DWORD)v827 == -1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19822E294);
                    }
                    if (*((_QWORD *)v926 + 6))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19822E058);
                    }
                    v843 = *((_DWORD *)v926 + 4);
                    if (v843 == -1 || v843 < v827)
                      *((_DWORD *)v926 + 4) = v827;
                    *(_DWORD *)v835 += 2;
                    v946 = v835;
                    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry&>(v913, (WTF::AtomStringImpl *)&v946, (uint64_t *)&v936, v830, v831, v832, v833, v834, (uint64_t)&v941);
                    v851 = v946;
                    v946 = 0;
                    if (v851)
                    {
                      if (*(_DWORD *)v851 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v851, v844, v845, v846, v847, v848, v849, v850);
                        WTF::fastFree(v863, v864, v865, v866, v867, v868, v869, v870);
                      }
                      else
                      {
                        *(_DWORD *)v851 -= 2;
                      }
                    }
                    if (v825 >= *(unsigned int *)(v80 + 20))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19822E338);
                    }
                    v842 = JSC::BytecodeGenerator::addConstant(a1, *(WTF::AtomStringImpl **)(*(_QWORD *)(*(_QWORD *)(v80 + 8) + 16 * v825) + 32), v845, v846, v847, v848, v849, v850);
                    if ((v936 & 1) == 0)
                      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v936, v852, v853, v854, v855, v856, v857, v858);
                    goto LABEL_808;
                  }
LABEL_811:
                  v842 = 0xFFFFFFFFLL;
LABEL_808:
                  v859 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4);
                  v860 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
                  *(_BYTE *)(v860 + 4) |= 1u;
                  v861 = *(_QWORD *)(v860 + 16);
                  v862 = *(unsigned int *)(v861 + 108);
                  *(_DWORD *)(v861 + 108) = v862 + 1;
                  if ((JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v859, v842, (v825 + 6), 3076, v914, v827, v862) & 1) == 0&& (JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v859, v842, (v825 + 6), 3076, v914, v827, v862) & 1) == 0)
                  {
                    JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v859, v842, (v825 + 6), 3076, v914, v827, v862);
                  }
                  ++v825;
                  v80 = v928;
                  v95 = v925;
                  if (v825 >= *(unsigned int *)(v928 + 20))
                    goto LABEL_815;
                }
              }
            }
            else
            {
              JSC::ScopedArgumentsTable::tryCreate((JSC::ScopedArgumentsTable *)a2, (JSC::VM *)*(unsigned int *)(v928 + 20), v816, v84, v85, v86, v87, v88);
              if (v818)
                goto LABEL_780;
            }
            *(_BYTE *)(a1 + 32) = 1;
            return a1;
          }
LABEL_434:
          v477 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4);
          v478 = (v477 - 1073741808) < 0x80;
          if (v477 <= 0x3FFFFFFF)
            v478 = (v477 + 128) < 0x90;
          if (!v478)
          {
            v100 = v926;
            v80 = v928;
            if (!JSC::OpCreateDirectArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4), (uint64_t)v83, v84, v85, v86, v87, v88))JSC::OpCreateDirectArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v477, (uint64_t)v83, v84, v85, v86, v87, v88);
            goto LABEL_118;
          }
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x85, (uint64_t)v83, v84, v85, v86, v87, v88);
          LOBYTE(v941) = -123;
          v479 = *(unsigned int *)(a1 + 12);
          v480 = *(unsigned int *)(a1 + 16);
          v80 = v928;
          if (v479 > v480)
          {
            *(_DWORD *)(a1 + 16) = v480 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v480) = -123;
            v496 = *(_DWORD *)(a1 + 12);
            v497 = *(_DWORD *)(a1 + 16);
            v100 = v926;
            goto LABEL_459;
          }
          v100 = v926;
          if ((_DWORD)v479 != *(_DWORD *)(a1 + 8))
          {
            v481 = *(_QWORD *)a1;
            v482 = -123;
LABEL_458:
            *(_BYTE *)(v481 + v479) = v482;
            v496 = *(_DWORD *)(a1 + 12) + 1;
            v497 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v496;
            *(_DWORD *)(a1 + 16) = v497;
LABEL_459:
            v498 = v477 + 16;
            if (v477 <= 0x3FFFFFFF)
              v498 = v477;
            LOBYTE(v941) = v498;
            if (v496 > v497)
            {
              *(_DWORD *)(a1 + 16) = v497 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v497) = v498;
            }
            else
            {
              v499 = v496;
              if (v496 == *(_DWORD *)(a1 + 8))
              {
                v740 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v496 + 1), (unint64_t)&v941);
                v499 = *(unsigned int *)(a1 + 12);
                v500 = *(_QWORD *)a1;
                v498 = *v740;
              }
              else
              {
                v500 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v500 + v499) = v498;
              *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
            }
            goto LABEL_118;
          }
LABEL_699:
          v739 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v479 + 1), (unint64_t)&v941);
          v479 = *(unsigned int *)(a1 + 12);
          v481 = *(_QWORD *)a1;
          v482 = *v739;
          goto LABEL_458;
        }
        goto LABEL_432;
      }
      v473 = v470 + 16 * v471;
    }
    else
    {
      v473 = 0;
      v471 = 0;
    }
    v472 = v470 + 16 * v471;
    goto LABEL_422;
  }
LABEL_80:
  if (v95)
  {
    v100 = v926;
    if (!*(_DWORD *)(v80 + 20))
      goto LABEL_117;
    v101 = 0;
    v102 = (uint64_t *)((char *)v926 + 8);
    v914 = (v922 - 0x40000000);
    v913 = (uint64_t *)(((_QWORD)v923 << 30) | 0x804);
    while (1)
    {
      v103 = *(_QWORD ***)(*(_QWORD *)(v80 + 8) + 16 * v101);
      if (((unsigned int (*)(_QWORD **))(*v103)[5])(v103))
      {
        v104 = (WTF *)*v103[4];
        v105 = *v34;
        if (*v34)
        {
          v106 = *((_DWORD *)v104 + 4);
          if ((v106 & 0x20) != 0)
            v106 = *((_DWORD *)v104 + 8);
          v107 = *(_DWORD *)(v105 - 8);
          v108 = v107 & (v106 >> 8);
          v109 = *(WTF **)(v105 + 8 * v108);
          if (v109 == v104)
            goto LABEL_103;
          v110 = 1;
          while (v109)
          {
            v108 = (v108 + v110) & v107;
            v109 = *(WTF **)(v105 + 8 * v108);
            ++v110;
            if (v109 == v104)
              goto LABEL_103;
          }
        }
        if (v104)
        {
          if ((v929((uint64_t)v930, *v103[4]) & 1) != 0)
          {
            v126 = (*((_DWORD *)v926 + 4) + 1);
            *((_DWORD *)v926 + 4) = v126;
            if (v101 >= *(unsigned int *)(v928 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x19822E2ACLL);
            }
            v127 = *(WTF::AtomStringImpl **)(*(_QWORD *)(*(_QWORD *)(v928 + 8) + 16 * v101) + 32);
            v936 = (char *)((v126 << 6) | 9);
            if ((_DWORD)v126 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x19822E134);
            }
            if (*((_QWORD *)v926 + 6))
            {
              __break(0xC471u);
              JUMPOUT(0x19822D6FCLL);
            }
            *(_DWORD *)v104 += 2;
            v946 = v104;
            WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>(v102, (WTF::AtomStringImpl *)&v946, (WTF::StringImpl **)&v936, v111, v112, v113, v114, v115, (uint64_t)&v941);
            v135 = v946;
            v946 = 0;
            if (v135)
            {
              if (*(_DWORD *)v135 == 2)
              {
                WTF::StringImpl::~StringImpl(v135, v128, v129, v130, v131, v132, v133, v134);
                WTF::fastFree(v486, v487, v488, v489, v490, v491, v492, v493);
              }
              else
              {
                *(_DWORD *)v135 -= 2;
              }
            }
            if ((v936 & 1) == 0)
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v936, v128, v129, v130, v131, v132, v133, v134);
            v136 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4);
            v137 = JSC::BytecodeGenerator::addConstant(a1, v127, v129, v130, v131, v132, v133, v134);
            v138 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
            *(_BYTE *)(v138 + 4) |= 1u;
            v139 = *(_QWORD *)(v138 + 16);
            v140 = *(unsigned int *)(v139 + 108);
            *(_DWORD *)(v139 + 108) = v140 + 1;
            if ((JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v136, v137, (v101 + 6), (uint64_t)v913, v914, v126, v140) & 1) == 0&& (JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v136, v137, (v101 + 6), (uint64_t)v913, v914, v126, v140) & 1) == 0)
            {
              JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v136, v137, (v101 + 6), (uint64_t)v913, v914, v126, v140);
            }
          }
          else
          {
            v116 = v101 + 6;
            if ((_DWORD)v101 == 1073741817)
              v116 = -1;
            v936 = (char *)(((unint64_t)v116 << 6) | 9);
            if ((_DWORD)v101 == 1073741817)
            {
              __break(0xC471u);
              JUMPOUT(0x19822DF10);
            }
            v936 = (char *)(((unint64_t)v116 << 6) | 0x29);
            if (*((_QWORD *)v926 + 6))
            {
              __break(0xC471u);
              JUMPOUT(0x19822D4D8);
            }
            *(_DWORD *)v104 += 2;
            v946 = v104;
            WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>(v102, (WTF::AtomStringImpl *)&v946, (WTF::StringImpl **)&v936, v111, v112, v113, v114, v115, (uint64_t)&v941);
            v117 = v946;
            v946 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
              {
                WTF::StringImpl::~StringImpl(v117, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
                WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
              }
              else
              {
                *(_DWORD *)v117 -= 2;
              }
            }
            if ((v936 & 1) == 0)
              JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v936, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          }
        }
      }
LABEL_103:
      ++v101;
      v80 = v928;
      if (v101 >= *(unsigned int *)(v928 + 20))
      {
        v97 = *(unsigned __int8 *)(a1 + 711);
        v100 = v926;
        v95 = v925;
        goto LABEL_117;
      }
    }
  }
  v100 = v926;
LABEL_117:
  if ((v99 & (v97 >> 1)) == 1)
  {
    v477 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4);
    v494 = (v477 - 1073741808) < 0x80;
    if (v477 <= 0x3FFFFFFF)
      v494 = (v477 + 128) < 0x90;
    if (!v494)
    {
      if (!JSC::OpCreateClonedArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4), (uint64_t)v83, v84, v85, v86, v87, v88))JSC::OpCreateClonedArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v477, (uint64_t)v83, v84, v85, v86, v87, v88);
      goto LABEL_118;
    }
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x87, (uint64_t)v83, v84, v85, v86, v87, v88);
    LOBYTE(v941) = -121;
    v479 = *(unsigned int *)(a1 + 12);
    v495 = *(unsigned int *)(a1 + 16);
    if (v479 > v495)
    {
      *(_DWORD *)(a1 + 16) = v495 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v495) = -121;
      v496 = *(_DWORD *)(a1 + 12);
      v497 = *(_DWORD *)(a1 + 16);
      goto LABEL_459;
    }
    if ((_DWORD)v479 != *(_DWORD *)(a1 + 8))
    {
      v481 = *(_QWORD *)a1;
      v482 = -121;
      goto LABEL_458;
    }
    goto LABEL_699;
  }
LABEL_118:
  if ((*(_BYTE *)(a1 + 711) & 2) == 0)
  {
LABEL_119:
    v141 = 0;
    goto LABEL_120;
  }
  if (*(_DWORD *)(v80 + 20))
  {
    v517 = 0;
    while (1)
    {
      v518 = *(_QWORD ***)(*(_QWORD *)(v928 + 8) + 16 * v517);
      if (!((unsigned int (*)(_QWORD **))(*v518)[5])(v518))
        break;
      v519 = *v518[4];
      v520 = *v34;
      if (*v34)
      {
        v521 = *(_DWORD *)(v519 + 16);
        if ((v521 & 0x20) != 0)
          v521 = *(_DWORD *)(v519 + 32);
        v522 = *(_DWORD *)(v520 - 8);
        v523 = v522 & (v521 >> 8);
        v524 = *(_QWORD *)(v520 + 8 * v523);
        if (v524 == v519)
          break;
        v525 = 1;
        while (v524)
        {
          v526 = 0;
          v523 = (v523 + v525) & v522;
          v524 = *(_QWORD *)(v520 + 8 * v523);
          ++v525;
          if (v524 == v519)
            goto LABEL_478;
        }
      }
      v526 = *v518[4];
LABEL_478:
      if (v526 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 880))
        goto LABEL_119;
      if (++v517 >= (unint64_t)*(unsigned int *)(v928 + 20))
        goto LABEL_441;
    }
    v526 = 0;
    goto LABEL_478;
  }
LABEL_441:
  v483 = (1 << *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 42)) & 0x80840;
  v141 = (v95 | v483) == 0;
  if (v95 && !v483)
  {
    v484 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 880);
    if (v929((uint64_t)v930, *v484))
      v485 = 1;
    else
      v485 = 2;
    JSC::BytecodeGenerator::createVariable(a1, v484, v485, (uint64_t)v100, 0);
    *(_BYTE *)(a1 + 536) = 1;
  }
LABEL_120:
  v142 = v935;
  v143 = *(unsigned int *)(v935 + 148);
  if ((_DWORD)v143)
  {
    v226 = *(unint64_t **)(v935 + 136);
    v227 = 8 * v143;
    do
    {
      v228 = *v226;
      v229 = (uint64_t *)(*v226 + 40);
      if (v929((uint64_t)v930, *v229))
        v230 = 1;
      else
        v230 = 2;
      JSC::BytecodeGenerator::createVariable(a1, v229, v230, (uint64_t)v100, 0);
      v941 = v228;
      v231 = *(unsigned int *)(a1 + 532);
      if ((_DWORD)v231 == *(_DWORD *)(a1 + 528))
      {
        v234 = (__int128 *)WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 520, v231 + 1, (unint64_t)&v941);
        v231 = *(unsigned int *)(a1 + 532);
        v232 = *(_QWORD *)(a1 + 520);
        v233 = *v234;
      }
      else
      {
        v232 = *(_QWORD *)(a1 + 520);
        v233 = v941;
      }
      *(_OWORD *)(v232 + 16 * v231) = v233;
      ++*(_DWORD *)(a1 + 532);
      ++v226;
      v227 -= 8;
    }
    while (v227);
    v142 = v935;
  }
  v144 = *(_QWORD *)(v142 + 192);
  if (v144)
  {
    v145 = *(unsigned int *)(v144 - 4);
    v146 = (unint64_t *)(v144 + 16 * v145);
    if (*(_DWORD *)(v144 - 12))
    {
      v147 = *(unint64_t **)(v142 + 192);
      if ((_DWORD)v145)
      {
        v148 = 16 * v145;
        v147 = *(unint64_t **)(v142 + 192);
        while (*v147 + 1 <= 1)
        {
          v147 += 2;
          v148 -= 16;
          if (!v148)
          {
            v147 = v146;
            goto LABEL_128;
          }
        }
      }
      goto LABEL_128;
    }
    v147 = (unint64_t *)(v144 + 16 * v145);
  }
  else
  {
    v147 = 0;
    v145 = 0;
  }
  v146 = (unint64_t *)(v144 + 16 * v145);
LABEL_128:
  if (v144)
    v149 = (unint64_t *)(v144 + 16 * *(unsigned int *)(v144 - 4));
  else
    v149 = 0;
  if (v149 == v147)
    goto LABEL_154;
  do
  {
    if ((v147[1] & 4) == 0)
      goto LABEL_144;
    v150 = (int *)*v147;
    if (v141 && v150 == *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 880))
      goto LABEL_144;
    if (!v927 || (v708 = *v919) == 0 || (v709 = *v708, !(_DWORD)v709))
    {
LABEL_134:
      v151 = v150[4];
      if ((v151 & 0x20) != 0)
      {
        v152 = *v150 + 2;
      }
      else
      {
        if ((v151 & 0x10) != 0)
        {
          v152 = *v150 + 2;
          *v150 = v152;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a1 + 696) + 41912), *v147, v83, v84, v85, v86, v87, v88, &v941);
          v150 = (int *)v941;
          v152 = *(_DWORD *)v941;
        }
        *v150 = v152 + 2;
        if (!v152)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v150, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
          goto LABEL_139;
        }
      }
      *v150 = v152;
LABEL_139:
      *(_QWORD *)&v941 = v150;
      if (v929((uint64_t)v930, *v147))
        v153 = 1;
      else
        v153 = 2;
      JSC::BytecodeGenerator::createVariable(a1, (uint64_t *)&v941, v153, (uint64_t)v100, 1);
      *(_QWORD *)&v941 = 0;
      if (*v150 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v150, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
        WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
      }
      else
      {
        *v150 -= 2;
      }
      goto LABEL_144;
    }
    v710 = 0;
    v711 = v708 + 2;
    while (1)
    {
      if ((_DWORD)v709 == (_DWORD)v710)
      {
        __break(0xC471u);
        JUMPOUT(0x19822E0B8);
      }
      if (*(int **)&v711[2 * v710] == v150)
        break;
      if (v709 == ++v710)
        goto LABEL_134;
    }
LABEL_144:
    v154 = v147 + 2;
    v147 = v146;
    if (v154 != v146)
    {
      v147 = v154;
      while (*v147 + 1 <= 1)
      {
        v147 += 2;
        if (v147 == v146)
        {
          v147 = v146;
          break;
        }
      }
    }
  }
  while (v147 != v149);
  v142 = v935;
LABEL_154:
  if ((*(_WORD *)(v142 + 164) & 0x500) != 0
    || (v171 = *(_QWORD *)(a1 + 192), (*(_BYTE *)(v171 + 167) & 0x20) != 0)
    || (*(_BYTE *)(v171 + 167) & 9) != 0
    || (*(_WORD *)(v171 + 164) & 1) != 0)
  {
    *(_QWORD *)(a1 + 288) = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  }
  v172 = v920;
  v173 = v925;
  switch((char)v920)
  {
    case 1:
    case 7:
    case 8:
    case 15:
      v82 = *(WTF::AtomStringImpl **)(a1 + 288);
      if (!v82)
        goto LABEL_165;
      JSC::BytecodeGenerator::emitLoad(a1, (int *)v82, 10, v84, v85, v86, v87, v88);
      goto LABEL_703;
    case 2:
    case 16:
    case 17:
    case 18:
      *(_QWORD *)(a1 + 272) = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
      goto LABEL_702;
    case 6:
      v179 = v924;
      v180 = (v924 & 0x840) != 0;
      if (v925 || (v924 & 0x840) == 0)
        goto LABEL_169;
      v180 = 1;
      goto LABEL_237;
    case 9:
    case 10:
    case 11:
      v656 = v920;
      *(_QWORD *)(a1 + 272) = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
      *(_QWORD *)(a1 + 320) = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
      if (v656 != 11)
        JSC::BytecodeGenerator::emitToThis(a1, v918, v657, v658, v659, v660, v661, v662);
      v663 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4);
      v664 = (v663 - 1073741808) < 0x80;
      if (v663 <= 0x3FFFFFFF)
        v664 = (v663 + 128) < 0x90;
      if (v664)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x89, v657, v658, v659, v660, v661, v662);
        LOBYTE(v941) = -119;
        v669 = *(unsigned int *)(a1 + 12);
        v670 = *(unsigned int *)(a1 + 16);
        if (v669 > v670)
        {
          *(_DWORD *)(a1 + 16) = v670 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v670) = -119;
          v673 = *(_DWORD *)(a1 + 12);
          v674 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v669 == *(_DWORD *)(a1 + 8))
          {
            v775 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v669 + 1), (unint64_t)&v941);
            v669 = *(unsigned int *)(a1 + 12);
            v671 = *(_QWORD *)a1;
            v672 = *v775;
          }
          else
          {
            v671 = *(_QWORD *)a1;
            v672 = -119;
          }
          *(_BYTE *)(v671 + v669) = v672;
          v673 = *(_DWORD *)(a1 + 12) + 1;
          v674 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v673;
          *(_DWORD *)(a1 + 16) = v674;
        }
        v675 = v663 + 16;
        if (v663 <= 0x3FFFFFFF)
          v675 = v663;
        LOBYTE(v941) = v675;
        if (v673 > v674)
        {
          *(_DWORD *)(a1 + 16) = v674 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v674) = v675;
        }
        else
        {
          v676 = v673;
          if (v673 == *(_DWORD *)(a1 + 8))
          {
            v776 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v673 + 1), (unint64_t)&v941);
            v676 = *(unsigned int *)(a1 + 12);
            v677 = *(_QWORD *)a1;
            v675 = *v776;
          }
          else
          {
            v677 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v677 + v676) = v675;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
      }
      else if (!JSC::OpNewGenerator::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4), v657, v658, v659, v660, v661, v662))
      {
        JSC::OpNewGenerator::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v663, v783, (uint64_t)v665.m_characters, *(uint64_t *)&v665.m_length, v666, v667, v668);
      }
      if (*(_BYTE *)(a1 + 707))
      {
        v751 = *(_QWORD *)(v935 + 232);
        if (v751)
          LODWORD(v751) = WTF::StringImpl::startsWith(v751, (uint64_t)"defaultAsync", (void *)0x10000000CLL, v665);
        v678 = v751 ^ 1;
        v100 = v926;
        v173 = v925;
      }
      else
      {
        v678 = 0;
      }
      v679 = *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4);
      if (!JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v679, v678, (uint64_t)v665.m_characters, *(uint64_t *)&v665.m_length, v666, v667, v668)&& !JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v679, v678, v680, v681, v682, v683, v684))
      {
        JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v679, v678, v871, v681, v682, v683, v684);
      }
      v685 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4);
      v686 = *(unsigned int *)(*(_QWORD *)(a1 + 320) + 4);
      v687 = JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v685, 5, v686, v681, v682, v683, v684);
      v172 = v920;
      if ((v687 & 1) != 0)
        goto LABEL_165;
      v688 = JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v685, 5, v686, v85, v86, v87, v88);
      v172 = v920;
      if ((v688 & 1) != 0)
        goto LABEL_165;
      JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v685, 5, v686, v85, v86, v87, v88);
      goto LABEL_703;
    default:
      v174 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
      if ((*(_QWORD *)(v174 + 20) & 0x80000000) == 0)
      {
        if ((*(_WORD *)(v174 + 28) & 0xC0) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19822D728);
        }
        v175 = *(_WORD *)(v935 + 164);
        if ((v175 & 8) == 0)
        {
          v176 = *(_QWORD *)(a1 + 192);
          if ((*(_WORD *)(v176 + 164) & 1) == 0)
          {
            v177 = *(_BYTE *)(v176 + 167);
            if ((v177 & 5) == 0 && (!(v175 & 0x200 | v177 & 0x10) || (_DWORD)v923))
              goto LABEL_165;
          }
        }
LABEL_702:
        JSC::BytecodeGenerator::emitToThis(a1, v918, (uint64_t)v83, v84, v85, v86, v87, v88);
LABEL_703:
        v172 = v920;
        goto LABEL_165;
      }
      v82 = *(WTF::AtomStringImpl **)(a1 + 288);
      v299 = ((*(unsigned __int16 *)(v174 + 28) | ((unint64_t)*(unsigned __int8 *)(v174 + 30) << 16)) >> 6) & 0x3FFFF;
      if (v82 != (WTF::AtomStringImpl *)v918 && v82 && v915 != (int *)v82)
      {
        JSC::BytecodeGenerator::emitMove(a1, (int *)v82, (uint64_t)v918, v84, v85, v86, v87, v88);
        v172 = v920;
        v174 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
        v299 = (*(unsigned __int16 *)(v174 + 28) | ((unint64_t)*(unsigned __int8 *)(v174 + 30) << 16)) >> 6;
      }
      v300 = v299 & 3;
      if (v300 < 2)
      {
        v301 = *(unsigned int *)(a1 + 224);
        v302 = *(_QWORD *)(v174 + 72);
        *(_BYTE *)(v302 + 4) |= 1u;
        v303 = *(_QWORD *)(v302 + 16);
        v304 = *(unsigned int *)(v303 + 112);
        *(_DWORD *)(v303 + 112) = v304 + 1;
        v305 = (v301 - 1073741808) < 0x80;
        if ((int)v301 <= 0x3FFFFFFF)
          v305 = (v301 + 128) < 0x90;
        if (v305 && v304 <= 0xFF)
        {
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1C, (uint64_t)v83, v84, v85, v86, v87, v88);
          LOBYTE(v941) = 28;
          v306 = *(unsigned int *)(a1 + 12);
          v307 = *(unsigned int *)(a1 + 16);
          if (v306 > v307)
          {
            *(_DWORD *)(a1 + 16) = v307 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v307) = 28;
            v310 = *(_DWORD *)(a1 + 12);
            v311 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if ((_DWORD)v306 == *(_DWORD *)(a1 + 8))
            {
              v712 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v306 + 1), (unint64_t)&v941);
              v306 = *(unsigned int *)(a1 + 12);
              v308 = *(_QWORD *)a1;
              v309 = *v712;
            }
            else
            {
              v308 = *(_QWORD *)a1;
              v309 = 28;
            }
            *(_BYTE *)(v308 + v306) = v309;
            v310 = *(_DWORD *)(a1 + 12) + 1;
            v311 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v310;
            *(_DWORD *)(a1 + 16) = v311;
          }
          if ((int)v301 <= 0x3FFFFFFF)
            v312 = v301;
          else
            v312 = v301 + 16;
          LOBYTE(v941) = v312;
          if (v310 > v311)
          {
            *(_DWORD *)(a1 + 16) = v311 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v311) = v312;
            v313 = *(_DWORD *)(a1 + 12);
            v314 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v310 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v310 + 1), (unint64_t)&v941);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v310) = v312;
            v313 = *(_DWORD *)(a1 + 12) + 1;
            v314 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v313;
            *(_DWORD *)(a1 + 16) = v314;
          }
          LOBYTE(v941) = v312;
          if (v313 > v314)
          {
            *(_DWORD *)(a1 + 16) = v314 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v314) = v312;
            v315 = *(_DWORD *)(a1 + 12);
            v316 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v313 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v313 + 1), (unint64_t)&v941);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v313) = v312;
            v315 = *(_DWORD *)(a1 + 12) + 1;
            v316 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v315;
            *(_DWORD *)(a1 + 16) = v316;
          }
          LOBYTE(v941) = 0;
          if (v315 > v316)
          {
            *(_DWORD *)(a1 + 16) = v316 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v316) = 0;
            v317 = *(_DWORD *)(a1 + 12);
            v318 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v315 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v315 + 1), (unint64_t)&v941);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v315) = 0;
            v317 = *(_DWORD *)(a1 + 12) + 1;
            v318 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v317;
            *(_DWORD *)(a1 + 16) = v318;
          }
          LOBYTE(v941) = v304;
          if (v317 > v318)
          {
            *(_DWORD *)(a1 + 16) = v318 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v318) = v304;
          }
          else
          {
            if (v317 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v317 + 1), (unint64_t)&v941);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v317) = v304;
            *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          }
        }
        else if ((JSC::OpCreateThis::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v301, v301, v304, v85, v86, v87, v88) & 1) == 0)
        {
          JSC::OpCreateThis::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v301, v301, v304, v808, v809, v810, v811);
        }
        v319 = *(_QWORD *)(a1 + 40);
        v320 = *(_DWORD *)(a1 + 48);
        LODWORD(v936) = *(_DWORD *)(a1 + 224);
        v321 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)v321 = 1;
        *(_QWORD *)(v321 + 8) = v319;
        *(_DWORD *)(v321 + 16) = v320;
        *(_QWORD *)(v321 + 24) = 0;
        v946 = (WTF *)v321;
        WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>((uint64_t)&v941, (uint64_t *)(a1 + 688), (int *)&v936, (uint64_t *)&v946, v322, v323, v324, v325);
        if (v946)
          WTF::RefCounted<JSC::StaticPropertyAnalysis>::deref(v946, v326, v327, v328, v329, v330, v331, v332);
        v333 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 152);
        if (v333 && (*(_BYTE *)(v333 + 56) & 2) != 0)
          JSC::BytecodeGenerator::emitInstallPrivateBrand(a1, (uint64_t)v918, v327, v328, v329, v330, v331, v332);
        JSC::BytecodeGenerator::emitInstanceFieldInitializationIfNeeded(a1, (uint64_t)v918, v917, (_DWORD *)(*(_QWORD *)(a1 + 192) + 8), (_DWORD *)(*(_QWORD *)(a1 + 192) + 8), (_DWORD *)(*(_QWORD *)(a1 + 192) + 8));
        goto LABEL_703;
      }
      if (v300 == 2)
      {
        v527 = (int *)JSC::BytecodeGenerator::addConstantEmptyValue((JSC::BytecodeGenerator *)a1);
        v528 = v527;
        if (v527)
          ++*v527;
        v82 = (WTF::AtomStringImpl *)v918;
        if (v527 != v918)
          JSC::BytecodeGenerator::emitMove(a1, v918, (uint64_t)v527, v84, v85, v86, v87, v88);
        v172 = v920;
        if (v528)
          --*v528;
      }
LABEL_165:
      v178 = v173 == 0;
      v179 = v924;
      v180 = (v924 & 0x840) != 0;
      if ((v924 & 0x840) == 0)
        v178 = 0;
      if (v172 == 8 || v178)
      {
LABEL_237:
        if ((*(_WORD *)(v935 + 164) & 0x208) != 0)
        {
          JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a1, (uint64_t)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          v179 = v924;
        }
        if ((*(_WORD *)(*(_QWORD *)(a1 + 192) + 164) & 0x500) != 0)
        {
          JSC::BytecodeGenerator::emitLoadNewTargetFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a1, (uint64_t)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          v179 = v924;
        }
      }
LABEL_169:
      if ((*(_BYTE *)(a1 + 711) & 1) != 0 && ((1 << v916[42]) & 0x940) == 0)
      {
        JSC::BytecodeGenerator::initializeArrowFunctionContextScopeIfNeeded(a1, (uint64_t)v100, v173 != 0, v84, v85, v86, v87, v88);
        JSC::BytecodeGenerator::emitPutThisToArrowFunctionContextScope((JSC::BytecodeGenerator *)a1, v274, v275, v276, v277, v278, v279, v280);
        v281 = *(_QWORD *)(a1 + 192);
        if ((*(_BYTE *)(v281 + 167) & 0x20) != 0
          || (*(_BYTE *)(v281 + 167) & 9) != 0
          || (*(_WORD *)(v281 + 164) & 1) != 0)
        {
          JSC::Symbols::newTargetLocalPrivateName[0] += 2;
          v946 = (WTF *)JSC::Symbols::newTargetLocalPrivateName;
          JSC::BytecodeGenerator::variable((uint64_t)&v941, a1, (uint64_t)&v946, 0, v85, v86, v87, v88);
          if (JSC::Symbols::newTargetLocalPrivateName[0] == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName, v282, v283, v284, v285, v286, v287, v288);
            WTF::fastFree(v540, v541, v542, v543, v544, v545, v546, v547);
          }
          else
          {
            JSC::Symbols::newTargetLocalPrivateName[0] -= 2;
          }
          JSC::BytecodeGenerator::emitPutToScope(a1, *(_QWORD *)(a1 + 312), (uint64_t)&v941, *(_QWORD *)(a1 + 288), 1, 0, v287, v288);
          v289 = (WTF::StringImpl *)v941;
          *(_QWORD *)&v941 = 0;
          if (v289)
          {
            if (*(_DWORD *)v289 == 2)
            {
              WTF::StringImpl::~StringImpl(v289, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
              WTF::fastFree(v548, v549, v550, v551, v552, v553, v554, v555);
            }
            else
            {
              *(_DWORD *)v289 -= 2;
            }
          }
        }
        v179 = v924;
        if ((*(_WORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 28) & 0x10) != 0)
        {
          v290 = *(_QWORD *)(a1 + 192);
          if ((*(_BYTE *)(v290 + 167) & 0x19) != 0 || (*(_WORD *)(v290 + 164) & 1) != 0)
          {
            JSC::Symbols::derivedConstructorPrivateName[0] += 2;
            v946 = (WTF *)JSC::Symbols::derivedConstructorPrivateName;
            JSC::BytecodeGenerator::variable((uint64_t)&v941, a1, (uint64_t)&v946, 0, v85, v86, v87, v88);
            if (JSC::Symbols::derivedConstructorPrivateName[0] == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::derivedConstructorPrivateName, v291, v292, v293, v294, v295, v296, v297);
              WTF::fastFree(v887, v888, v889, v890, v891, v892, v893, v894);
            }
            else
            {
              JSC::Symbols::derivedConstructorPrivateName[0] -= 2;
            }
            JSC::BytecodeGenerator::emitPutToScope(a1, *(_QWORD *)(a1 + 312), (uint64_t)&v941, v917, 1, 0, v296, v297);
            v298 = (WTF::StringImpl *)v941;
            *(_QWORD *)&v941 = 0;
            if (v298)
            {
              if (*(_DWORD *)v298 == 2)
              {
                WTF::StringImpl::~StringImpl(v298, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
                WTF::fastFree(v895, v896, v897, v898, v899, v900, v901, v902);
              }
              else
              {
                *(_DWORD *)v298 -= 2;
              }
            }
            v100 = v926;
            v179 = v924;
            v173 = v925;
          }
        }
      }
      if (!v173 && (v179 & 0xE00) != 0)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v946, a1, (uint64_t)v83, v84, v85, v86, v87, v88);
        *(_QWORD *)&v941 = v946;
        v741 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        if (v741)
          ++*v741;
        *((_QWORD *)&v941 + 1) = v741;
        std::optional<JSC::BytecodeGenerator::AsyncFuncParametersTryCatchInfo>::operator=[abi:sn180100]<JSC::BytecodeGenerator::AsyncFuncParametersTryCatchInfo,void>(a1 + 552, (uint64_t *)&v941);
        if (*((_QWORD *)&v941 + 1))
          --**((_DWORD **)&v941 + 1);
        v179 = v924;
        if ((_QWORD)v941)
          --*(_DWORD *)v941;
      }
      if (*(_BYTE *)(a1 + 568))
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v941, a1, (uint64_t)v83, v84, v85, v86, v87, v88);
        v181 = (_DWORD *)v941;
        v182 = *(_DWORD *)(a1 + 16);
        JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation(v941, a1, v182, v183, v184, v185, v186, v187);
        v188 = *(_QWORD *)(a1 + 24);
        v189 = *(unsigned int *)(v188 + 28);
        if (!(_DWORD)v189 || v182 != *(_DWORD *)(*(_QWORD *)(v188 + 16) + 4 * v189 - 4))
        {
          LODWORD(v946) = v182;
          v190 = (_QWORD *)(v188 + 16);
          if ((_DWORD)v189 == *(_DWORD *)(v188 + 24))
            *(_DWORD *)(*(_QWORD *)(v188 + 16) + 4 * *(unsigned int *)(v188 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v190, v189 + 1, (unint64_t)&v946);
          else
            *(_DWORD *)(*v190 + 4 * v189) = v182;
          ++*(_DWORD *)(v188 + 28);
          *(_DWORD *)(a1 + 36) = 115;
        }
        v191 = JSC::BytecodeGenerator::pushTry(a1, v181, *(_DWORD **)(a1 + 552), 2);
        --*v181;
        v179 = v924;
      }
      else
      {
        v191 = 0;
      }
      v192 = v935;
      v936 = 0;
      v937 = 0;
      if (!v173)
      {
        v945 = 0;
        v946 = 0;
        v947 = 0;
        v948 = 0;
        v944 = 0;
        if (*(_DWORD *)(v928 + 20))
        {
          v334 = 0;
          v335 = 0;
          do
          {
            (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(*(_QWORD *)(v928 + 8) + v334) + 16))(*(_QWORD *)(*(_QWORD *)(v928 + 8) + v334), &v944);
            ++v335;
            v334 += 16;
          }
          while (v335 < *(unsigned int *)(v928 + 20));
        }
        if (v141)
        {
          v752 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 880);
          v753 = HIDWORD(v945);
          if (HIDWORD(v945) == (_DWORD)v945)
          {
            WTF::Vector<JSC::Identifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier const&>((uint64_t)&v944, (unint64_t)v752);
          }
          else
          {
            v754 = v944;
            v755 = (_DWORD *)*v752;
            if (*v752)
              *v755 += 2;
            v754[v753] = v755;
            HIDWORD(v945) = v753 + 1;
          }
        }
        v943 = 0;
        if (HIDWORD(v945))
        {
          v336 = (WTF::StringImpl **)v944;
          v337 = 8 * HIDWORD(v945);
          do
          {
            v338 = *v336;
            if (*v336)
              *(_DWORD *)v338 += 2;
            v938 = v338;
            WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)&v943, (WTF::AtomStringImpl *)&v938, (uint64_t)v83, v84, v85, v86, v87, v88, (uint64_t)&v941);
            v346 = v938;
            v938 = 0;
            if (v346)
            {
              if (*(_DWORD *)v346 == 2)
              {
                WTF::StringImpl::~StringImpl(v346, v339, v340, v341, v342, v343, v344, v345);
                WTF::fastFree(v356, v357, v358, v359, v360, v361, v362, v363);
              }
              else
              {
                *(_DWORD *)v346 -= 2;
              }
            }
            v347 = *v336;
            if (*v336)
              *(_DWORD *)v347 += 2;
            v938 = v347;
            LOWORD(v940) = 0;
            WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>((uint64_t)&v946, &v938, &v940, (uint64_t)&v941);
            v355 = v938;
            v938 = 0;
            if (v355)
            {
              if (*(_DWORD *)v355 == 2)
              {
                WTF::StringImpl::~StringImpl(v355, v348, v349, v350, v351, v352, v353, v354);
                WTF::fastFree(v364, v365, v366, v367, v368, v369, v370, v371);
              }
              else
              {
                *(_DWORD *)v355 -= 2;
              }
            }
            *(_WORD *)(v941 + 8) |= 8u;
            if (v929((uint64_t)v930, (uint64_t)*v336))
              *(_WORD *)(v941 + 8) |= 1u;
            ++v336;
            v337 -= 8;
          }
          while (v337);
        }
        JSC::BytecodeGenerator::pushLexicalScopeInternal(a1, (JSC::VariableEnvironment *)&v946, 0, 1, 0, 0, 2, 1);
        if (v141)
        {
          JSC::BytecodeGenerator::variable((uint64_t)&v941, a1, *(_QWORD *)(*(_QWORD *)(a1 + 696) + 41952) + 880, 0, v372, v373, v374, v375);
          JSC::BytecodeGenerator::initializeVariable(a1, (unsigned __int8 *)&v941, *(_QWORD *)(a1 + 256), v756, v757, v758, v759, v760);
          JSC::BytecodeGenerator::liftTDZCheckIfPossible(a1, (WTF::StringImpl *)v941, v761, v762, v763, v764, v765, v766);
          v774 = (WTF::StringImpl *)v941;
          *(_QWORD *)&v941 = 0;
          if (v774)
          {
            if (*(_DWORD *)v774 == 2)
            {
              WTF::StringImpl::~StringImpl(v774, v767, v768, v769, v770, v771, v772, v773);
              WTF::fastFree(v879, v880, v881, v882, v883, v884, v885, v886);
            }
            else
            {
              *(_DWORD *)v774 -= 2;
            }
          }
        }
        v376 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        if (v376)
          ++*v376;
        v923 = v376;
        v383 = v928;
        if (*(_DWORD *)(v928 + 20))
        {
          v384 = 0;
          v385 = 1;
          while (1)
          {
            v386 = (_QWORD *)(*(_QWORD *)(v383 + 8) + v384);
            v388 = *v386;
            v387 = v386[1];
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v386 + 56))(*v386) & 1) == 0)
              break;
LABEL_356:
            v384 += 16;
            if (v385++ >= *(unsigned int *)(v383 + 20))
              goto LABEL_373;
          }
          v389 = v923;
          if (*v921 <= v385)
          {
            v391 = v923[1];
            v392 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
            *(_BYTE *)(v392 + 4) |= 1u;
            v393 = (*(_DWORD *)(v392 + 8) + 1);
            *(_DWORD *)(v392 + 8) = v393;
            v394 = JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v391, v385, v393, v379, v380, v381, v382);
            v389 = v923;
            if ((v394 & 1) == 0)
            {
              v872 = JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v391, v385, v393, v395, v396, v397, v398);
              v389 = v923;
              if ((v872 & 1) == 0)
              {
                JSC::OpGetArgument::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v391, v385, v393, v873, v874, v875, v876);
                goto LABEL_352;
              }
            }
          }
          else
          {
            if (v385 >> 5 >= *(unsigned int *)(a1 + 356))
            {
              __break(0xC471u);
              JUMPOUT(0x19822E2E4);
            }
            if (v915 != v923)
            {
              if (v923)
              {
                v390 = (int *)(*(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * (v385 >> 5)) + 12 * (v385 & 0x1F));
                if (v923 != v390)
                {
                  JSC::BytecodeGenerator::emitMove(a1, v923, (uint64_t)v390, v378, v379, v380, v381, v382);
LABEL_352:
                  v389 = v923;
                }
              }
            }
          }
          if (!v387)
          {
LABEL_355:
            (*(void (**)(uint64_t, unint64_t, int *))(*(_QWORD *)v388 + 24))(v388, a1, v389);
            v383 = v928;
            goto LABEL_356;
          }
          v917 = v387;
          v400 = (uint64_t)v389;
          v401 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
          v407 = JSC::BytecodeGenerator::emitLoad(a1, 0, 10, v402, v403, v404, v405, v406);
          if ((JSC::BytecodeGenerator::emitEqualityOpImpl(a1, (uint64_t)v401, v400, (uint64_t)v407, v408, v409, v410, v411, v412) & 1) != 0)
          {
            if (!v401)
            {
              LODWORD(v920) = 1;
              goto LABEL_362;
            }
          }
          else
          {
            v419 = v401[1];
            v420 = *(unsigned int *)(v400 + 4);
            v421 = v407[1];
            v920 = v419;
            if ((JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v419, v420, v421, v415, v416, v417, v418) & 1) == 0&& (JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v920, v420, v421, v415, v416, v417, v418) & 1) == 0)
            {
              JSC::OpStricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v920, v420, v421, v415, v416, v417, v418);
            }
          }
          LODWORD(v920) = 0;
          ++*v401;
LABEL_362:
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v941, a1, v413, v414, v415, v416, v417, v418);
          v422 = (_DWORD *)v941;
          v918 = v401;
          JSC::BytecodeGenerator::emitJumpIfFalse(a1, (uint64_t)v401, v941, v423, v424, v425, v426, v427);
          LODWORD(v919) = *(unsigned __int8 *)(a1 + 709);
          v433 = *(_BYTE *)(a1 + 710);
          *(_WORD *)(a1 + 709) = 0;
          if ((unint64_t)&v913 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
          {
            *(_BYTE *)(a1 + 706) = 1;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
          }
          else
          {
            v434 = v917;
            v435 = v923;
            if (*(_BYTE *)(v917 + 24))
            {
              JSC::BytecodeGenerator::emitDebugHook((char *)a1, 5, v917 + 8, v428, v429, v430, v431, v432);
              v435 = v923;
            }
            (*(void (**)(uint64_t, unint64_t, int *))(*(_QWORD *)v434 + 16))(v434, a1, v435);
          }
          *(_BYTE *)(a1 + 710) = v433;
          *(_BYTE *)(a1 + 709) = (_BYTE)v919;
          v441 = *(_DWORD *)(a1 + 16);
          JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v422, a1, v441, v436, v437, v438, v439, v440);
          v442 = *(_QWORD *)(a1 + 24);
          v443 = *(unsigned int *)(v442 + 28);
          v389 = v923;
          if (!(_DWORD)v443 || v441 != *(_DWORD *)(*(_QWORD *)(v442 + 16) + 4 * v443 - 4))
          {
            LODWORD(v938) = v441;
            v444 = (_QWORD *)(v442 + 16);
            if ((_DWORD)v443 == *(_DWORD *)(v442 + 24))
            {
              *(_DWORD *)(*(_QWORD *)(v442 + 16) + 4 * *(unsigned int *)(v442 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v444, v443 + 1, (unint64_t)&v938);
              v389 = v923;
            }
            else
            {
              *(_DWORD *)(*v444 + 4 * v443) = v441;
            }
            ++*(_DWORD *)(v442 + 28);
            *(_DWORD *)(a1 + 36) = 115;
          }
          --*v422;
          if ((v920 & 1) == 0)
            --*v918;
          goto LABEL_355;
        }
LABEL_373:
        v445 = *(_QWORD *)(a1 + 544);
        if (v445)
        {
          v567 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
          if (v567)
          {
            v568 = v567;
            ++*v567;
            JSC::BytecodeGenerator::emitRestParameter(a1, (uint64_t)v567, *(unsigned int *)(v445 + 16));
            (*(void (**)(_QWORD, unint64_t, _DWORD *))(**(_QWORD **)(v445 + 8) + 24))(*(_QWORD *)(v445 + 8), a1, v568);
            --*v568;
          }
          else
          {
            JSC::BytecodeGenerator::emitRestParameter(a1, 0, *(unsigned int *)(v445 + 16));
            (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(v445 + 8) + 24))(*(_QWORD *)(v445 + 8), a1, 0);
          }
        }
        v446 = *(_WORD **)(v192 + 192);
        if (v446)
        {
          v447 = *((unsigned int *)v446 - 1);
          v448 = &v446[8 * v447];
          if (*((_DWORD *)v446 - 3))
          {
            v449 = v446;
            if ((_DWORD)v447)
            {
              v450 = 16 * v447;
              v449 = v446;
              while ((unint64_t)(*(_QWORD *)v449 + 1) <= 1)
              {
                v449 += 8;
                v450 -= 16;
                if (!v450)
                {
                  v449 = v448;
                  goto LABEL_381;
                }
              }
            }
            goto LABEL_381;
          }
          v449 = &v446[8 * v447];
        }
        else
        {
          v449 = 0;
          v447 = 0;
        }
        v448 = &v446[8 * v447];
LABEL_381:
        if (v446)
          v451 = &v446[8 * *((unsigned int *)v446 - 1)];
        else
          v451 = 0;
        if (v451 == v449)
        {
          v452 = 0;
          LODWORD(v453) = 0;
        }
        else
        {
          v452 = 0;
          LODWORD(v453) = 0;
          do
          {
            if ((v449[4] & 4) != 0 && v943)
            {
              v569 = *(WTF::StringImpl **)v449;
              v570 = *(_DWORD *)(*(_QWORD *)v449 + 16);
              if ((v570 & 0x20) != 0)
                v570 = *((_DWORD *)v569 + 8);
              v571 = *((_DWORD *)v943 - 2);
              v572 = v571 & (v570 >> 8);
              v573 = v943[v572];
              if (v573 == v569)
              {
LABEL_522:
                JSC::Identifier::fromUid(v569, *(_QWORD *)(a1 + 696), v377, v378, v379, v380, v381, v382, &v940);
                JSC::BytecodeGenerator::variable((uint64_t)&v941, a1, (uint64_t)&v940, 0, v574, v575, v576, v577);
                v583 = JSC::BytecodeGenerator::emitResolveScope(a1, 0, (unsigned __int8 *)&v941, v578, v579, v580, v581, v582);
                v584 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
                v588 = JSC::BytecodeGenerator::emitGetFromScope(a1, v584, v583, (unint64_t)&v941, 1, v585, v586, v587);
                v590 = v588;
                if (v588)
                  ++*v588;
                v591 = v940;
                if (v940)
                  *(_DWORD *)v940 += 2;
                v938 = v591;
                if (v588)
                  ++*v588;
                v939 = v588;
                if ((_DWORD)v453 == (_DWORD)v937)
                {
                  v592 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v936, v453 + 1, (unint64_t)&v938);
                  LODWORD(v453) = HIDWORD(v937);
                  v452 = v936;
                  v593 = &v936[16 * HIDWORD(v937)];
                  v591 = *(WTF::StringImpl **)v592;
                  *(_QWORD *)v592 = 0;
                  v594 = (uint64_t *)(v592 + 8);
                }
                else
                {
                  v594 = (uint64_t *)&v939;
                  v593 = &v452[16 * v453];
                  v938 = 0;
                }
                *(_QWORD *)v593 = v591;
                v701 = *v594;
                *v594 = 0;
                *((_QWORD *)v593 + 1) = v701;
                LODWORD(v453) = v453 + 1;
                HIDWORD(v937) = v453;
                v702 = v939;
                v939 = 0;
                if (v702)
                  --*v702;
                v703 = v938;
                v938 = 0;
                if (v703)
                {
                  if (*(_DWORD *)v703 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v703, v589, (uint64_t)v377, v378, v379, v380, v381, v382);
                    WTF::fastFree(v715, v716, v717, v718, v719, v720, v721, v722);
                  }
                  else
                  {
                    *(_DWORD *)v703 -= 2;
                  }
                }
                if (v590)
                  --*v590;
                v704 = (WTF::StringImpl *)v941;
                *(_QWORD *)&v941 = 0;
                if (v704)
                {
                  if (*(_DWORD *)v704 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v704, v589, (uint64_t)v377, v378, v379, v380, v381, v382);
                    WTF::fastFree(v723, v724, v725, v726, v727, v728, v729, v730);
                  }
                  else
                  {
                    *(_DWORD *)v704 -= 2;
                  }
                }
                v705 = v940;
                v940 = 0;
                if (v705)
                {
                  if (*(_DWORD *)v705 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v705, v589, (uint64_t)v377, v378, v379, v380, v381, v382);
                    WTF::fastFree(v731, v732, v733, v734, v735, v736, v737, v738);
                  }
                  else
                  {
                    *(_DWORD *)v705 -= 2;
                  }
                }
              }
              else
              {
                v713 = 1;
                while (v573)
                {
                  v572 = (v572 + v713) & v571;
                  v573 = v943[v572];
                  ++v713;
                  if (v573 == v569)
                    goto LABEL_522;
                }
              }
            }
            v454 = v449 + 8;
            v449 = v448;
            if (v454 != v448)
            {
              v449 = v454;
              while ((unint64_t)(*(_QWORD *)v449 + 1) <= 1)
              {
                v449 += 8;
                if (v449 == v448)
                {
                  v449 = v448;
                  break;
                }
              }
            }
          }
          while (v449 != v451);
        }
        v100 = v926;
        JSC::BytecodeGenerator::initializeVarLexicalEnvironment(a1, v922, (uint64_t)v926, *(_QWORD *)(a1 + 264) != 0);
        if (v923)
          --*v923;
        v462 = (uint64_t)v943;
        if (v943)
        {
          v556 = *((unsigned int *)v943 - 1);
          if ((_DWORD)v556)
          {
            v557 = v943;
            do
            {
              v558 = *v557;
              if (*v557 != (WTF::StringImpl *)-1)
              {
                *v557 = 0;
                if (v558)
                {
                  if (*(_DWORD *)v558 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v558, v455, v456, v457, v458, v459, v460, v461);
                    WTF::fastFree(v559, v560, v561, v562, v563, v564, v565, v566);
                  }
                  else
                  {
                    *(_DWORD *)v558 -= 2;
                  }
                }
              }
              ++v557;
              --v556;
            }
            while (v556);
          }
          WTF::fastFree(v462 - 16, v455, v456, v457, v458, v459, v460, v461);
        }
        if (HIDWORD(v945))
        {
          v529 = (WTF::StringImpl **)v944;
          v530 = 8 * HIDWORD(v945);
          do
          {
            v531 = *v529;
            *v529 = 0;
            if (v531)
            {
              if (*(_DWORD *)v531 == 2)
              {
                WTF::StringImpl::~StringImpl(v531, v455, v456, v457, v458, v459, v460, v461);
                WTF::fastFree(v532, v533, v534, v535, v536, v537, v538, v539);
              }
              else
              {
                *(_DWORD *)v531 -= 2;
              }
            }
            ++v529;
            v530 -= 8;
          }
          while (v530);
        }
        v463 = v944;
        if (v944)
        {
          v944 = 0;
          LODWORD(v945) = 0;
          WTF::fastFree((unint64_t)v463, v455, v456, v457, v458, v459, v460, v461);
        }
        JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v946, v455, v456, v457, v458, v459, v460, v461);
        v179 = v924;
        if ((_DWORD)v453)
        {
          v785 = v453;
          v786 = (uint64_t)v452;
          v453 = v453;
          do
          {
            JSC::BytecodeGenerator::variable((uint64_t)&v941, a1, v786, 0, v85, v86, v87, v88);
            v792 = JSC::BytecodeGenerator::emitResolveScope(a1, 0, (unsigned __int8 *)&v941, v787, v788, v789, v790, v791);
            JSC::BytecodeGenerator::emitPutToScope(a1, v792, (uint64_t)&v941, *(_QWORD *)(v786 + 8), 1, 2, v793, v794);
            v795 = (WTF::StringImpl *)v941;
            *(_QWORD *)&v941 = 0;
            if (v795)
            {
              if (*(_DWORD *)v795 == 2)
              {
                WTF::StringImpl::~StringImpl(v795, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
                WTF::fastFree(v903, v904, v905, v906, v907, v908, v909, v910);
              }
              else
              {
                *(_DWORD *)v795 -= 2;
              }
            }
            v786 += 16;
            --v453;
          }
          while (v453);
          v796 = 16 * v785;
          v797 = (_DWORD **)(v452 + 8);
          v100 = v926;
          v179 = v924;
          do
          {
            v798 = *v797;
            *v797 = 0;
            if (v798)
              --*v798;
            v799 = (WTF::StringImpl *)*(v797 - 1);
            *(v797 - 1) = 0;
            if (v799)
            {
              if (*(_DWORD *)v799 == 2)
              {
                WTF::StringImpl::~StringImpl(v799, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
                WTF::fastFree(v800, v801, v802, v803, v804, v805, v806, v807);
                v179 = v924;
              }
              else
              {
                *(_DWORD *)v799 -= 2;
              }
            }
            v797 += 2;
            v796 -= 16;
          }
          while (v796);
        }
        v173 = v925;
        if (v452)
        {
          v936 = 0;
          LODWORD(v937) = 0;
          WTF::fastFree((unint64_t)v452, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          v179 = v924;
        }
      }
      if (*(_BYTE *)(a1 + 568))
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v946, a1, (uint64_t)v83, v84, v85, v86, v87, v88);
        v193 = v946;
        v194 = *(_DWORD *)(a1 + 16);
        JSC::GenericLabel<JSC::JSGeneratorTraits>::setLocation((uint64_t)v946, a1, v194, v195, v196, v197, v198, v199);
        v200 = *(_QWORD *)(a1 + 24);
        v201 = *(unsigned int *)(v200 + 28);
        if (!(_DWORD)v201 || v194 != *(_DWORD *)(*(_QWORD *)(v200 + 16) + 4 * v201 - 4))
        {
          LODWORD(v941) = v194;
          v202 = (_QWORD *)(v200 + 16);
          if ((_DWORD)v201 == *(_DWORD *)(v200 + 24))
            *(_DWORD *)(*(_QWORD *)(v200 + 16) + 4 * *(unsigned int *)(v200 + 28)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v202, v201 + 1, (unint64_t)&v941);
          else
            *(_DWORD *)(*v202 + 4 * v201) = v194;
          ++*(_DWORD *)(v200 + 28);
          *(_DWORD *)(a1 + 36) = 115;
        }
        JSC::BytecodeGenerator::popTry(a1, v193);
        v203 = *(_QWORD *)(a1 + 560);
        v204 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        *(_QWORD *)&v941 = v191;
        DWORD2(v941) = *(_DWORD *)(v204 + 4);
        HIDWORD(v941) = *(_DWORD *)(v203 + 4);
        LODWORD(v942) = 0x3FFFFFFF;
        v205 = *(unsigned int *)(a1 + 732);
        if ((_DWORD)v205 == *(_DWORD *)(a1 + 728))
        {
          v206 = WTF::Vector<JSC::BytecodeGenerator::CatchEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 720, v205 + 1, (unint64_t)&v941);
          v207 = *(_QWORD *)(a1 + 720) + 24 * *(unsigned int *)(a1 + 732);
          v208 = *(_OWORD *)v206;
          v209 = *(_QWORD *)(v206 + 16);
        }
        else
        {
          v207 = *(_QWORD *)(a1 + 720) + 24 * v205;
          v208 = v941;
          v209 = v942;
        }
        *(_QWORD *)(v207 + 16) = v209;
        *(_OWORD *)v207 = v208;
        v179 = v924;
        ++*(_DWORD *)(a1 + 732);
        --*(_DWORD *)v193;
      }
      v210 = !v180;
      if (!v173)
        v210 = 1;
      if ((v210 & 1) == 0)
      {
        if ((*(_WORD *)(v935 + 164) & 0x208) != 0)
        {
          JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a1, (uint64_t)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          v179 = v924;
        }
        if ((*(_WORD *)(*(_QWORD *)(a1 + 192) + 164) & 0x500) != 0)
        {
          JSC::BytecodeGenerator::emitLoadNewTargetFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a1, (uint64_t)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          v179 = v924;
        }
      }
      if ((v179 & 0x40004) != 0)
      {
        JSC::OpCreateGenerator::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4), *(_DWORD *)(a1 + 236), v84, v85, v86, v87, v88);
      }
      else if ((v179 & 0x30000) != 0)
      {
        JSC::OpCreateAsyncGenerator::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4), *(_DWORD *)(a1 + 236), v84, v85, v86, v87, v88);
      }
      if (v927)
      {
        v601 = *(JSC::JSCell ***)(a1 + 504);
        if (!v601)
        {
          v602 = *(_QWORD *)(a1 + 696);
          v603 = *(_QWORD **)(v602 + 712);
          if (!v603)
          {
            JSC::HandleSet::grow((JSC::HandleSet *)(v602 + 672), (uint64_t)v82, (unint64_t)v83, v84, v85, v86, v87, v88);
            v603 = *(_QWORD **)(v602 + 712);
          }
          *(_QWORD *)(v602 + 712) = *v603;
          v603[2] = 0;
          v601 = (JSC::JSCell **)(v603 + 2);
          *v603 = 0;
          v603[1] = 0;
          *(_QWORD *)(a1 + 504) = v603 + 2;
        }
        v604 = (unint64_t)(v601 - 2);
        if ((v100 != 0) != (*v601 != 0))
        {
          if (v100)
          {
            v605 = *(unint64_t **)((v604 & 0xFFFFFFFFFFFFF000) + 0x10);
            v606 = v605[3];
            v605 += 3;
            *(_QWORD *)v604 = v606;
            *(v601 - 1) = (JSC::JSCell *)v605;
            *v605 = v604;
            *(_QWORD *)(v606 + 8) = v604;
          }
          else
          {
            v912 = *(_QWORD *)v604;
            v911 = *(v601 - 1);
            *v911 = *(_QWORD *)v604;
            *(_QWORD *)(v912 + 8) = v911;
            *(_QWORD *)v604 = 0;
            *(_QWORD *)(v604 + 8) = 0;
            v601 = *(JSC::JSCell ***)(a1 + 504);
          }
        }
        *v601 = v100;
        *(_DWORD *)(a1 + 512) = v922;
        v607 = *(_QWORD *)(a1 + 264);
        v608 = *(_DWORD *)(a1 + 356);
        if (v607)
        {
          if (!v608)
          {
            __break(0xC471u);
            JUMPOUT(0x19822E340);
          }
          v750 = (int *)(**(_QWORD **)(a1 + 344) + 60);
          if (v915 != v750 && v750 != (int *)v607)
            JSC::BytecodeGenerator::emitMove(a1, v750, v607, v84, v85, v86, v87, v88);
        }
        else
        {
          if (!v608)
          {
            __break(0xC471u);
            JUMPOUT(0x19822E31CLL);
          }
          v609 = *(_DWORD *)(**(_QWORD **)(a1 + 344) + 64);
          v610 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4);
          v617 = *(unsigned int *)(JSC::BytecodeGenerator::addConstantValue(a1, 10) + 4);
          v618 = (v609 - 1073741808) < 0x80;
          if (v609 <= 0x3FFFFFFF)
            v618 = (v609 + 128) < 0x90;
          if (!v618)
            goto LABEL_739;
          if (!((int)v610 <= 0x3FFFFFFF ? (v610 + 128) < 0x90 : (v610 - 1073741808) < 0x80))
            goto LABEL_739;
          v620 = (v922 - 1073741808) < 0x80;
          if (v922 <= 0x3FFFFFFF)
            v620 = (v922 + 128) < 0x90;
          if (v620
            && ((int)v617 <= 0x3FFFFFFF
              ? (v621 = (v617 + 128) < 0x90)
              : (v621 = (v617 - 1073741808) < 0x80),
                v621))
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6E, v611, v612, v613, v614, v615, v616);
            LOBYTE(v941) = 110;
            v622 = *(unsigned int *)(a1 + 12);
            v623 = *(unsigned int *)(a1 + 16);
            if (v622 > v623)
            {
              *(_DWORD *)(a1 + 16) = v623 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v623) = 110;
              v626 = *(_DWORD *)(a1 + 12);
              v627 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v622 == *(_DWORD *)(a1 + 8))
              {
                v777 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v622 + 1), (unint64_t)&v941);
                v622 = *(unsigned int *)(a1 + 12);
                v624 = *(_QWORD *)a1;
                v625 = *v777;
              }
              else
              {
                v624 = *(_QWORD *)a1;
                v625 = 110;
              }
              *(_BYTE *)(v624 + v622) = v625;
              v626 = *(_DWORD *)(a1 + 12) + 1;
              v627 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v626;
              *(_DWORD *)(a1 + 16) = v627;
            }
            v628 = v609 + 16;
            if (v609 <= 0x3FFFFFFF)
              v628 = v609;
            LOBYTE(v941) = v628;
            if (v626 > v627)
            {
              *(_DWORD *)(a1 + 16) = v627 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v627) = v628;
              v631 = *(_DWORD *)(a1 + 12);
              v632 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v629 = v626;
              if (v626 == *(_DWORD *)(a1 + 8))
              {
                v778 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v626 + 1), (unint64_t)&v941);
                v629 = *(unsigned int *)(a1 + 12);
                v630 = *(_QWORD *)a1;
                v628 = *v778;
              }
              else
              {
                v630 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v630 + v629) = v628;
              v631 = *(_DWORD *)(a1 + 12) + 1;
              v632 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v631;
              *(_DWORD *)(a1 + 16) = v632;
            }
            v633 = v610 + 16;
            if ((int)v610 <= 0x3FFFFFFF)
              v633 = v610;
            LOBYTE(v941) = v633;
            if (v631 > v632)
            {
              *(_DWORD *)(a1 + 16) = v632 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v632) = v633;
              v636 = *(_DWORD *)(a1 + 12);
              v637 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v634 = v631;
              if (v631 == *(_DWORD *)(a1 + 8))
              {
                v779 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v631 + 1), (unint64_t)&v941);
                v634 = *(unsigned int *)(a1 + 12);
                v635 = *(_QWORD *)a1;
                v633 = *v779;
              }
              else
              {
                v635 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v635 + v634) = v633;
              v636 = *(_DWORD *)(a1 + 12) + 1;
              v637 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v636;
              *(_DWORD *)(a1 + 16) = v637;
            }
            v638 = v922 + 16;
            if (v922 <= 0x3FFFFFFF)
              v638 = v922;
            LOBYTE(v941) = v638;
            if (v636 > v637)
            {
              *(_DWORD *)(a1 + 16) = v637 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v637) = v638;
              v641 = *(_DWORD *)(a1 + 12);
              v642 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v639 = v636;
              if (v636 == *(_DWORD *)(a1 + 8))
              {
                v780 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v636 + 1), (unint64_t)&v941);
                v639 = *(unsigned int *)(a1 + 12);
                v640 = *(_QWORD *)a1;
                v638 = *v780;
              }
              else
              {
                v640 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v640 + v639) = v638;
              v641 = *(_DWORD *)(a1 + 12) + 1;
              v642 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v641;
              *(_DWORD *)(a1 + 16) = v642;
            }
            v643 = v617 + 16;
            if ((int)v617 <= 0x3FFFFFFF)
              v643 = v617;
            LOBYTE(v941) = v643;
            if (v641 > v642)
            {
              *(_DWORD *)(a1 + 16) = v642 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v642) = v643;
            }
            else
            {
              v644 = v641;
              if (v641 == *(_DWORD *)(a1 + 8))
              {
                v781 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v641 + 1), (unint64_t)&v941);
                v644 = *(unsigned int *)(a1 + 12);
                v645 = *(_QWORD *)a1;
                v643 = *v781;
              }
              else
              {
                v645 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v645 + v644) = v643;
              *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
            }
          }
          else
          {
LABEL_739:
            v782 = v922;
            if ((JSC::OpCreateGeneratorFrameEnvironment::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v609, v610, v922, v617, v614, v615, v616) & 1) == 0)JSC::OpCreateGeneratorFrameEnvironment::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v609, v610, v782, v617, v86, v87, v88);
          }
        }
        if (!*(_DWORD *)(a1 + 356))
        {
          __break(0xC471u);
          JUMPOUT(0x19822E314);
        }
        v646 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4);
        v647 = *(unsigned int *)(**(_QWORD **)(a1 + 344) + 64);
        if ((JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v646, 4, v647, v85, v86, v87, v88) & 1) == 0&& (JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v646, 4, v647, v648, v649, v650, v651) & 1) == 0)
        {
          JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v646, 4, v647, v652, v653, v654, v655);
        }
      }
      v211 = *(_QWORD *)(a1 + 192);
      if (v211)
        v212 = v211 + 104;
      else
        v212 = 0;
      *(_QWORD *)&v941 = 0;
      JSC::BytecodeGenerator::pushLexicalScopeInternal(a1, (JSC::VariableEnvironment *)(v212 + 8), 0, 1, (unint64_t *)&v941, 0, 2, 1);
      return a1;
  }
}

uint64_t *JSC::BytecodeGenerator::pushPrivateAccessNames(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a2 && *a2 && *(_DWORD *)(*a2 - 12))
  {
    v2 = result;
    v3 = result + 20;
    v4 = *((unsigned int *)v2 + 43);
    if ((_DWORD)v4 == *((_DWORD *)v2 + 42))
    {
      a2 = (_QWORD *)WTF::Vector<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)a2);
      v5 = (uint64_t *)(v2[20] + 8 * *((unsigned int *)v2 + 43));
    }
    else
    {
      v5 = (uint64_t *)(*v3 + 8 * v4);
    }
    result = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(v5, a2);
    ++*((_DWORD *)v2 + 43);
  }
  return result;
}

void JSC::BytecodeGenerator::emitThrowTypeError(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;

  if (a3)
  {
    if (a3 == 2)
    {
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(*(_QWORD *)(a1 + 696) + 41968), *a2, a4, a5, a6, a7, a8, &v39);
      goto LABEL_3;
    }
    --a3;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)a2, a3, a4, a5, a6, a7, a8, &v39);
LABEL_3:
  v38 = v39;
  v15 = JSC::BytecodeGenerator::addStringConstant(a1, (JSC::VM *)&v38, v9, v10, v11, v12, v13, v14);
  v16 = *(_DWORD *)(JSC::BytecodeGenerator::addConstantValue(a1, v15) + 4);
  if (!JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v16, 5, v17, v18, v19, v20, v21)&& !JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v16, 5, v24, v25, v26, v27, v28))
  {
    JSC::OpThrowStaticError::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v16, 5, v24, v25, v26, v27, v28);
  }
  v29 = v38;
  v38 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
}

_DWORD *JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  ++*(_DWORD *)(v2 + 16);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = v3 + 1;
  *(_QWORD *)(a1 + 80) = v3 + 1;
  v5 = v3 >> 5;
  v6 = *(unsigned int *)(a1 + 100);
  if (v3 >> 5 >= v6)
  {
    v14 = (_QWORD *)(a1 + 88);
    v15 = WTF::fastMalloc((WTF *)0x180);
    v18 = v15;
    v16 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 96))
    {
      v17 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v16 + 1, (unint64_t)&v18);
      v16 = *(unsigned int *)(a1 + 100);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v16) = *v17;
    }
    else
    {
      *(_QWORD *)(*v14 + 8 * v16) = v15;
    }
    v6 = (v16 + 1);
    *(_DWORD *)(a1 + 100) = v6;
    v4 = *(_QWORD *)(a1 + 80);
    v7 = v4 - 1;
    v5 = (v4 - 1) >> 5;
  }
  else
  {
    v7 = v3;
  }
  if (v5 >= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19822E694);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v5) + 12 * (v7 & 0x1F);
  *(_DWORD *)v8 = 0;
  *(_DWORD *)(v8 + 4) = ~(_DWORD)v3;
  *(_BYTE *)(v8 + 8) = 0;
  v9 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v10 = *(_QWORD *)(v9 + 20);
  if ((v10 & 0x7FFFFFFF) > v4)
    v4 = v10 & 0x7FFFFFFF;
  v11 = v4 + 1;
  *(_QWORD *)(v9 + 20) = v10 & 0xFFFFFFFF80000000 | v11 & 0x7FFFFFFE;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL)
    || (v12 = *(_QWORD *)(a1 + 80) - 1, v12 >> 5 >= *(unsigned int *)(a1 + 100)))
  {
    __break(0xC471u);
    JUMPOUT(0x19822E68CLL);
  }
  result = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v12 >> 5)) + 12 * (v12 & 0x1F));
  ++*result;
  return result;
}

unint64_t JSC::BytecodeGenerator::addConstantValue(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE *v44;
  unsigned int v45;
  uint64_t v46;
  char v47;

  if (!a2)
    return JSC::BytecodeGenerator::addConstantEmptyValue((JSC::BytecodeGenerator *)a1);
  v4 = *(_DWORD *)(a1 + 632);
  v5 = (uint64_t *)(a1 + 648);
  v6 = *(_QWORD *)(a1 + 648);
  if (v6
    || (WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a1 + 648), 8u), (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((0xD7862706ELL * (unint64_t)(277951225 * ((v10 >> 31) ^ v10) - 3301266)) >> 4);
  v12 = (uint64_t *)(v6 + 24 * v11);
  v13 = *v12;
  v14 = *((unsigned __int8 *)v12 + 8);
  if (*v12)
    v15 = 0;
  else
    v15 = v14 == 0;
  if (v15)
    goto LABEL_23;
  v16 = 0;
  v17 = 1;
  do
  {
    if (v13 == a2 && !v14)
    {
      v4 = *((_DWORD *)v12 + 4);
      goto LABEL_38;
    }
    if (*((_BYTE *)v12 + 8))
      v18 = v16;
    else
      v18 = v12;
    if (v13 == 4)
      v16 = v18;
    v11 = (v11 + v17) & v7;
    v12 = (uint64_t *)(v6 + 24 * v11);
    v13 = *v12;
    v14 = *((unsigned __int8 *)v12 + 8);
    ++v17;
    if (*v12)
      v19 = 0;
    else
      v19 = v14 == 0;
  }
  while (!v19);
  if (v16)
  {
    *v16 = 0;
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    --*(_DWORD *)(*v5 - 16);
    v12 = v16;
  }
LABEL_23:
  *v12 = a2;
  *((_BYTE *)v12 + 8) = 0;
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a1 + 632);
  v20 = *(_QWORD *)(a1 + 648);
  if (v20)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v5;
  if (*v5)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_29;
LABEL_48:
    v45 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_53;
  }
  if (3 * v25 > 4 * v24)
    goto LABEL_29;
  if ((_DWORD)v25)
    goto LABEL_48;
  v45 = 8;
LABEL_53:
  WTF::HashTable<std::pair<long long,JSC::SourceCodeRepresentation>,WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int>>,JSC::EncodedJSValueWithRepresentationHash,WTF::HashMap<std::pair<long long,JSC::SourceCodeRepresentation>,unsigned int,JSC::EncodedJSValueWithRepresentationHash,JSC::EncodedJSValueWithRepresentationHashTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,JSC::EncodedJSValueWithRepresentationHashTraits>::rehash((uint64_t *)(a1 + 648), v45);
LABEL_29:
  v26 = *(_DWORD *)(a1 + 632);
  v27 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v27 + 1;
  v28 = v27 >> 5;
  v29 = *(unsigned int *)(a1 + 404);
  if (v27 >> 5 >= v29)
  {
    v41 = WTF::fastMalloc((WTF *)0x180);
    v46 = v41;
    v42 = *(unsigned int *)(a1 + 404);
    if ((_DWORD)v42 == *(_DWORD *)(a1 + 400))
    {
      v43 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 392, v42 + 1, (unint64_t)&v46);
      v42 = *(unsigned int *)(a1 + 404);
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v42) = *v43;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v42) = v41;
    }
    v29 = (v42 + 1);
    *(_DWORD *)(a1 + 404) = v29;
    v27 = *(_QWORD *)(a1 + 384) - 1;
    v28 = v27 >> 5;
  }
  if (v28 >= v29)
  {
    __break(0xC471u);
    JUMPOUT(0x19822EA48);
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v28) + 12 * (v27 & 0x1F);
  *(_DWORD *)v30 = 0;
  *(_DWORD *)(v30 + 4) = v26 + 0x40000000;
  *(_BYTE *)(v30 + 8) = 0;
  ++*(_DWORD *)(a1 + 632);
  v31 = *(_QWORD *)(a1 + 24);
  v47 = 0;
  v32 = (_QWORD *)(v31 + 48);
  v46 = 0;
  v33 = *(unsigned int *)(v31 + 60);
  if ((_DWORD)v33 == *(_DWORD *)(v31 + 56))
    *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * *(unsigned int *)(v31 + 60)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)&v46);
  else
    *(_QWORD *)(*v32 + 8 * v33) = 0;
  v34 = *(_DWORD *)(v31 + 60);
  v35 = __CFADD__(v34, 1);
  v36 = v34 + 1;
  *(_DWORD *)(v31 + 60) = v36;
  if (v35)
    goto LABEL_58;
  *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * v36 - 8) = a2;
  v37 = (_QWORD *)(v31 + 64);
  v38 = *(unsigned int *)(v31 + 76);
  if ((_DWORD)v38 == *(_DWORD *)(v31 + 72))
  {
    v44 = (_BYTE *)WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, (WTF *)(v38 + 1), (unint64_t)&v47);
    v38 = *(unsigned int *)(v31 + 76);
    *(_BYTE *)(*(_QWORD *)(v31 + 64) + v38) = *v44;
  }
  else
  {
    *(_BYTE *)(*v37 + v38) = 0;
  }
  *(_DWORD *)(v31 + 76) = v38 + 1;
LABEL_38:
  v39 = (unint64_t)v4 >> 5;
  if (v39 >= *(unsigned int *)(a1 + 404))
  {
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x19822EA40);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v39) + 12 * (v4 & 0x1F);
}

uint64_t JSC::BytecodeGenerator::initializeVarLexicalEnvironment(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  if (!a4)
    goto LABEL_2;
  v14 = *(_QWORD *)(a1 + 264);
  if (!v14)
  {
    __break(0xC471u);
    goto LABEL_23;
  }
  v15 = *(_DWORD *)(v14 + 4);
  v16 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4);
  v17 = *(unsigned int *)(JSC::BytecodeGenerator::addConstantValue(a1, 10) + 4);
  if ((JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v15, v16, a2, v17, v18, v19, v20) & 1) == 0&& (JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v15, v16, a2, v17, v23, v24, v25) & 1) == 0)
  {
    JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v15, v16, a2, v17, v23, v24, v25);
  }
  v26 = *(int **)(a1 + 248);
  if ((int *)(a1 + 208) != v26)
  {
    if (v26)
    {
      v27 = *(_QWORD *)(a1 + 264);
      if (v26 != (int *)v27)
        JSC::BytecodeGenerator::emitMove(a1, v26, v27, v21, v22, v23, v24, v25);
    }
  }
  v28 = *(_DWORD *)(a1 + 124);
  v29 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v29 + 1;
  v30 = v29 >> 4;
  v31 = *(unsigned int *)(a1 + 444);
  if (v29 >> 4 >= v31)
  {
    v32 = WTF::fastMalloc((WTF *)0x100);
    *(_QWORD *)&v36 = v32;
    v33 = *(unsigned int *)(a1 + 444);
    if ((_DWORD)v33 == *(_DWORD *)(a1 + 440))
    {
      v34 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 432, v33 + 1, (unint64_t)&v36);
      v33 = *(unsigned int *)(a1 + 444);
      *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v33) = *v34;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v33) = v32;
    }
    v31 = (v33 + 1);
    *(_DWORD *)(a1 + 444) = v31;
    v29 = *(_QWORD *)(a1 + 424) - 1;
    v30 = v29 >> 4;
  }
  if (v30 >= v31)
  {
    __break(0xC471u);
LABEL_23:
    JUMPOUT(0x19822EC88);
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v30) + 16 * (v29 & 0xF);
  *(_BYTE *)v35 = 0;
  *(_DWORD *)(v35 + 4) = v28 - 1;
  *(_QWORD *)(v35 + 8) = 0;
  ++*(_DWORD *)(a1 + 412);
LABEL_2:
  result = a1 + 112;
  v8 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)&v36 = a3;
  *((_QWORD *)&v36 + 1) = v8;
  LOBYTE(v37) = 0;
  HIDWORD(v37) = a2;
  v9 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 120))
  {
    result = WTF::Vector<JSC::BytecodeGenerator::LexicalScopeStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v9 + 1, (unint64_t)&v36);
    v10 = *(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 124);
    v11 = *(_OWORD *)result;
    v12 = *(_QWORD *)(result + 16);
  }
  else
  {
    v10 = *(_QWORD *)result + 24 * v9;
    v11 = v36;
    v12 = v37;
  }
  *(_QWORD *)(v10 + 16) = v12;
  *(_OWORD *)v10 = v11;
  v13 = (*(_DWORD *)(a1 + 124) + 1);
  *(_DWORD *)(a1 + 124) = v13;
  *(_QWORD *)(a1 + 176) = v13 - 1;
  *(_BYTE *)(a1 + 184) = 1;
  return result;
}

uint64_t JSC::SymbolTableEntry::SymbolTableEntry(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (HIDWORD(a2) << 6) | 9;
  *(_QWORD *)result = v2;
  if (a2 != 1)
  {
    if (a2 == 2)
    {
      v3 = 32;
LABEL_4:
      *(_QWORD *)result = v3 | v2;
      return result;
    }
    if (a2 == 3)
    {
      v3 = 48;
      goto LABEL_4;
    }
    result = 425;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::addConstant(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;

  v10 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v10 += 2;
  v11 = (uint64_t *)(a1 + 640);
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
  v13 = *(_QWORD *)(a1 + 640);
  if (v13
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), 8u, 0), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *((_DWORD *)v10 + 4);
  if ((v15 & 0x20) != 0)
    v15 = *((_DWORD *)v10 + 8);
  v16 = v14 & (v15 >> 8);
  v17 = v13 + 16 * v16;
  v18 = *(WTF::StringImpl **)v17;
  if (!*(_QWORD *)v17)
  {
LABEL_15:
    *(_QWORD *)v17 = v10;
    *(_DWORD *)(v17 + 8) = v12;
    v21 = *v11;
    if (*v11)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *v11;
    if (*v11)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
        goto LABEL_21;
    }
    else
    {
      if (3 * v26 > 4 * v25)
      {
LABEL_21:
        v27 = *(_QWORD *)(a1 + 24);
        v28 = (uint64_t *)(v27 + 32);
        v29 = *(unsigned int *)(v27 + 44);
        if ((_DWORD)v29 == *(_DWORD *)(v27 + 40))
        {
          v41 = (_DWORD **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)a2);
          v29 = *(unsigned int *)(v27 + 44);
          v42 = *(_QWORD *)(v27 + 32);
          v43 = *v41;
          if (*v41)
            *v43 += 2;
          *(_QWORD *)(v42 + 8 * v29) = v43;
        }
        else
        {
          v30 = *v28;
          v31 = *(WTF::StringImpl **)a2;
          if (*(_QWORD *)a2)
            *(_DWORD *)v31 += 2;
          *(_QWORD *)(v30 + 8 * v29) = v31;
        }
        *(_DWORD *)(v27 + 44) = v29 + 1;
        return *(unsigned int *)(v17 + 8);
      }
      if (!(_DWORD)v26)
      {
        v44 = 8;
LABEL_38:
        v17 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), v44, (WTF::StringImpl **)v17);
        goto LABEL_21;
      }
    }
    v44 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_38;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != v10)
  {
    if (v18 == (WTF::StringImpl *)-1)
      v19 = v17;
    v16 = (v16 + v20) & v14;
    v17 = v13 + 16 * v16;
    v18 = *(WTF::StringImpl **)v17;
    ++v20;
    if (!*(_QWORD *)v17)
    {
      if (v19)
      {
        *(_QWORD *)v19 = 0;
        *(_DWORD *)(v19 + 8) = 0x7FFFFFFF;
        --*(_DWORD *)(*v11 - 16);
        v17 = v19;
      }
      goto LABEL_15;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  return *(unsigned int *)(v17 + 8);
}

uint64_t JSC::OpCreateScopedArguments::emit<JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;

  v8 = a3;
  v11 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 128) < 0x90;
  if (!v11)
    goto LABEL_27;
  v12 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v12 = (a3 + 128) < 0x90;
  if (v12)
  {
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x86, a3, a4, a5, a6, a7, a8);
    v35 = -122;
    v14 = *(unsigned int *)(a1 + 12);
    v15 = *(unsigned int *)(a1 + 16);
    if (v14 > v15)
    {
      *(_DWORD *)(a1 + 16) = v15 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v15) = -122;
      v18 = *(_DWORD *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v35);
        v14 = *(unsigned int *)(a1 + 12);
        v16 = *(_QWORD *)a1;
        v17 = *(_BYTE *)result;
      }
      else
      {
        v16 = *(_QWORD *)a1;
        v17 = -122;
      }
      *(_BYTE *)(v16 + v14) = v17;
      v18 = *(_DWORD *)(a1 + 12) + 1;
      v19 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(_DWORD *)(a1 + 16) = v19;
    }
    v20 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v20 = a2;
    v36 = v20;
    if (v18 > v19)
    {
      *(_DWORD *)(a1 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v19) = v20;
      v23 = *(_DWORD *)(a1 + 12);
      v24 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v21 = v18;
      if (v18 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v18 + 1), (unint64_t)&v36);
        v21 = *(unsigned int *)(a1 + 12);
        v22 = *(_QWORD *)a1;
        v20 = *(_BYTE *)result;
      }
      else
      {
        v22 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v22 + v21) = v20;
      v23 = *(_DWORD *)(a1 + 12) + 1;
      v24 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
    }
    v25 = v8 + 16;
    if (v8 <= 0x3FFFFFFF)
      v25 = v8;
    v37 = v25;
    if (v23 > v24)
    {
      *(_DWORD *)(a1 + 16) = v24 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v24) = v25;
    }
    else
    {
      v26 = v23;
      if (v23 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v37);
        v26 = *(unsigned int *)(a1 + 12);
        v27 = *(_QWORD *)a1;
        v25 = *(_BYTE *)result;
      }
      else
      {
        v27 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v27 + v26) = v25;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_27:
    v29 = a3;
    result = JSC::OpCreateScopedArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
    if ((result & 1) == 0)
      return JSC::OpCreateScopedArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v29, v30, v31, v32, v33, v34);
  }
  return result;
}

void JSC::SymbolTable::set<JSC::SymbolTableEntry>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  if (*(_QWORD *)(a1 + 48))
  {
    __break(0xC471u);
  }
  else
  {
    v8 = *a4;
    if (((unint64_t)*a4 & 1) != 0)
      v8 = (WTF::StringImpl *)a4;
    v9 = *(_QWORD *)v8;
    if ((v9 & 0x30) <= 0x10)
    {
      v10 = v9 >> 6;
      v11 = *(_DWORD *)(a1 + 16);
      if (v11 == -1 || v11 < v10)
        *(_DWORD *)(a1 + 16) = v10;
    }
    v13 = (uint64_t *)(a1 + 8);
    if (a3)
      *(_DWORD *)a3 += 2;
    v31 = a3;
    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>(v13, (WTF::AtomStringImpl *)&v31, a4, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v30);
    v21 = v31;
    v31 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
}

void JSC::BytecodeGenerator::createVariable(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, int a5)
{
  uint64_t *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t *v45;
  char v46;
  WTF::StringImpl *v47;
  _QWORD v48[3];

  v46 = a3;
  v10 = (uint64_t *)(a4 + 8);
  JSC::SymbolTable::get((unint64_t *)&v45, *(_QWORD *)(a4 + 8), *a2);
  v18 = (char)v45;
  if ((v45 & 1) != 0)
    v19 = (unint64_t *)&v45;
  else
    v19 = v45;
  v20 = *v19;
  if (v20 >= 2)
  {
    if (a5 != 1)
    {
      v31 = v20 >> 6;
      v32 = v20 & 0x30;
      v33 = 2;
      if (v32 != 32)
        v33 = 3;
      if (v32 < 0x11)
        v34 = 1;
      else
        v34 = v33;
      v48[0] = v34 | (v31 << 32);
      if ((_DWORD)v34 != a3)
      {
        WTF::dataLog<char [31],JSC::Identifier,char [5],JSC::VarKind,char [30],JSC::VarOffset,char [3]>((JSC::Identifier *)a2, &v46, (JSC::VarOffset *)v48);
        __break(0xC471u);
        JUMPOUT(0x19822F418);
      }
    }
  }
  else
  {
    if (a3 == 1)
    {
      v30 = (*(_DWORD *)(a4 + 16) + 1);
      *(_DWORD *)(a4 + 16) = v30;
      v22 = ((_DWORD)v30 != -1) | (unint64_t)(v30 << 32);
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 80);
      v22 = ((unint64_t)~v21 << 32) | 2;
      if (v21 == -1073741824)
        v22 = 0xFFFFFFFF00000000;
    }
    v23 = HIDWORD(v22);
    v24 = (HIDWORD(v22) << 6) | 9;
    v44 = (uint64_t *)v24;
    if (v22 != 1)
    {
      if (v22 == 2)
      {
        v43 = 32;
      }
      else
      {
        if (v22 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19822F4C4);
        }
        v43 = 48;
      }
      v24 |= v43;
      v44 = (uint64_t *)v24;
    }
    if (*(_QWORD *)(a4 + 48))
    {
      __break(0xC471u);
      JUMPOUT(0x19822F468);
    }
    v25 = (WTF::StringImpl *)*a2;
    if ((v24 & 1) != 0)
      v24 = (uint64_t)&v44;
    v26 = *(_QWORD *)v24;
    if ((v26 & 0x30) <= 0x10)
    {
      v27 = v26 >> 6;
      v28 = *(_DWORD *)(a4 + 16);
      if (v28 == -1 || v28 < v27)
        *(_DWORD *)(a4 + 16) = v27;
    }
    if (v25)
      *(_DWORD *)v25 += 2;
    v47 = v25;
    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::add<JSC::SymbolTableEntry&>(v10, (WTF::AtomStringImpl *)&v47, &v44, v13, v14, v15, v16, v17, (uint64_t)v48);
    v29 = v47;
    v47 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    if (a3 == 2 && JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1)[1] != (_DWORD)v23)
    {
      __break(0xC471u);
      JUMPOUT(0x19822F494);
    }
    if ((v44 & 1) == 0)
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v44, v11, v12, v13, v14, v15, v16, v17);
    v18 = (char)v45;
  }
  if ((v18 & 1) == 0)
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v45, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t JSC::BytecodeGenerator::emitNewPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_DWORD *)(a2 + 4);
  if (!JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v10, 0, a4, a5, a6, a7, a8)
    && !JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v10, 0, v11, v12, v13, v14, v15))
  {
    JSC::OpNewPromise::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v10, 0, v17, v18, v19, v20, v21);
  }
  return a2;
}

uint64_t JSC::BytecodeGenerator::emitPutInternalField(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v11 = *(unsigned int *)(a4 + 4);
  if ((JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, a5, a6, a7, a8) & 1) == 0&& (JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, v13, v14, v15, v16) & 1) == 0)
  {
    JSC::OpPutInternalField::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, a3, v11, v18, v19, v20, v21);
  }
  return a4;
}

void JSC::BytecodeGenerator::emitInstallPrivateBrand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  WTF::StringImpl *v64[5];

  JSC::Symbols::privateBrandPrivateName[0] += 2;
  v63 = JSC::Symbols::privateBrandPrivateName;
  JSC::BytecodeGenerator::variable((uint64_t)v64, a1, (uint64_t)&v63, 0, a5, a6, a7, a8);
  if (JSC::Symbols::privateBrandPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    JSC::Symbols::privateBrandPrivateName[0] -= 2;
  }
  v17 = (_DWORD *)JSC::BytecodeGenerator::emitResolveScope(a1, 0, (unsigned __int8 *)v64, v12, v13, v14, v15, v16);
  if (v17)
  {
    v18 = v17;
    ++*v17;
    v19 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    JSC::BytecodeGenerator::emitGetPrivateBrand(a1, v19, (uint64_t)v18, 0, v20, v21, v22, v23);
    JSC::OpSetPrivateBrand::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), v19[1], v24, v25, v26, v27, v28);
    --*v18;
  }
  else
  {
    v53 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
    JSC::BytecodeGenerator::emitGetPrivateBrand(a1, v53, 0, 0, v54, v55, v56, v57);
    JSC::OpSetPrivateBrand::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a2 + 4), v53[1], v58, v59, v60, v61, v62);
  }
  v36 = v64[0];
  v64[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

uint64_t JSC::BytecodeGenerator::emitInstanceFieldInitializationIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49[12];

  v12 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_QWORD *)(v12 + 20) & 0x80000000) != 0 || *(_BYTE *)(a1 + 713) == 1)
  {
    v13 = *(_QWORD *)(v12 + 152);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 56) & 1) != 0)
      {
        v15 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        JSC::Symbols::instanceFieldInitializerPrivateName += 2;
        v49[0] = (WTF::StringImpl *)&JSC::Symbols::instanceFieldInitializerPrivateName;
        JSC::BytecodeGenerator::emitDirectGetById(a1, v15, a3, (WTF::AtomStringImpl *)v49, v16, v17, v18, v19);
        if (v15)
          ++*v15;
        v27 = v49[0];
        v49[0] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        JSC::CallArguments::CallArguments((uint64_t)v49, a1, 0, 0);
        JSC::BytecodeGenerator::emitMove(a1, *(int **)v49[1], a2, v28, v29, v30, v31, v32);
        v33 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
        JSC::BytecodeGenerator::emitCall<JSC::OpCallIgnoreResult>(a1, v33, (uint64_t)v15, 0, (uint64_t)v49, a4, a5, a6, 0);
        JSC::CallArguments::~CallArguments((JSC::CallArguments *)v49, v34, v35, v36, v37, v38, v39, v40);
        if (v15)
          --*v15;
      }
    }
  }
  return a2;
}

void JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int *v70;
  WTF::StringImpl *v71[5];

  v9 = (_DWORD *)((char *)this + 220);
  JSC::Symbols::thisPrivateName[0] += 2;
  v70 = JSC::Symbols::thisPrivateName;
  JSC::BytecodeGenerator::variable((uint64_t)v71, (uint64_t)this, (uint64_t)&v70, 1, a5, a6, a7, a8);
  v22 = JSC::BytecodeGenerator::emitResolveScope((uint64_t)this, 0, (unsigned __int8 *)v71, v10, v11, v12, v13, v14);
  v23 = v71[0];
  v71[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  JSC::Symbols::thisPrivateName[0] += 2;
  v69 = JSC::Symbols::thisPrivateName;
  JSC::BytecodeGenerator::variable((uint64_t)v71, (uint64_t)this, (uint64_t)&v69, 1, v18, v19, v20, v21);
  JSC::BytecodeGenerator::emitGetFromScope((uint64_t)this, v9, v22, (unint64_t)v71, 1, v24, v25, v26);
  v34 = v71[0];
  v71[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = JSC::Symbols::thisPrivateName[0] - 2;
  if (JSC::Symbols::thisPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, v27, v28, v29, v30, v31, v32, v33);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    v35 = JSC::Symbols::thisPrivateName[0];
  }
  else
  {
    JSC::Symbols::thisPrivateName[0] -= 2;
  }
  v36 = v35 - 2;
  if (v36)
  {
    JSC::Symbols::thisPrivateName[0] = v36;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::thisPrivateName, v27, v28, v29, v30, v31, v32, v33);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
}

void JSC::BytecodeGenerator::emitLoadNewTargetFromArrowFunctionLexicalEnvironment(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t ArrowFunctionLexicalEnvironment;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  WTF::StringImpl *v55[5];

  JSC::Symbols::newTargetLocalPrivateName[0] += 2;
  v54 = JSC::Symbols::newTargetLocalPrivateName;
  JSC::BytecodeGenerator::variable((uint64_t)v55, (uint64_t)this, (uint64_t)&v54, 0, a5, a6, a7, a8);
  v16 = JSC::Symbols::newTargetLocalPrivateName[0];
  if (JSC::Symbols::newTargetLocalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    v16 = JSC::Symbols::newTargetLocalPrivateName[0] + 2;
  }
  v17 = (_DWORD *)*((_QWORD *)this + 36);
  JSC::Symbols::newTargetLocalPrivateName[0] = v16;
  v54 = JSC::Symbols::newTargetLocalPrivateName;
  ArrowFunctionLexicalEnvironment = JSC::BytecodeGenerator::emitLoadArrowFunctionLexicalEnvironment((uint64_t)this, (uint64_t)&v54, v10, v11, v12, v13, v14, v15);
  JSC::BytecodeGenerator::emitGetFromScope((uint64_t)this, v17, ArrowFunctionLexicalEnvironment, (unint64_t)v55, 0, v19, v20, v21);
  if (JSC::Symbols::newTargetLocalPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::newTargetLocalPrivateName, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    JSC::Symbols::newTargetLocalPrivateName[0] -= 2;
  }
  v29 = v55[0];
  v55[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
}

uint64_t std::optional<JSC::BytecodeGenerator::AsyncFuncParametersTryCatchInfo>::operator=[abi:sn180100]<JSC::BytecodeGenerator::AsyncFuncParametersTryCatchInfo,void>(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(result + 16);
  v3 = *a2;
  *a2 = 0;
  if (v2)
  {
    v4 = *(_DWORD **)result;
    *(_QWORD *)result = v3;
    if (v4)
      --*v4;
    v5 = a2[1];
    a2[1] = 0;
    v6 = *(_DWORD **)(result + 8);
    *(_QWORD *)(result + 8) = v5;
    if (v6)
      --*v6;
  }
  else
  {
    *(_QWORD *)result = v3;
    v7 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(result + 8) = v7;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

unint64_t **JSC::Strong<JSC::SymbolTable,(JSC::ShouldStrongDestructorGrabLock)0>::set(unint64_t **result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t **v17;

  v8 = *result;
  if (!*result)
  {
    v9 = *(_QWORD **)(a2 + 712);
    if (!v9)
    {
      v17 = result;
      v15 = a2;
      v16 = a3;
      JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), a2, a3, a4, a5, a6, a7, a8);
      a2 = v15;
      a3 = v16;
      result = v17;
      v9 = *(_QWORD **)(v15 + 712);
    }
    *(_QWORD *)(a2 + 712) = *v9;
    v9[2] = 0;
    v8 = v9 + 2;
    *v9 = 0;
    v9[1] = 0;
    *result = v9 + 2;
  }
  v10 = (unint64_t)(v8 - 2);
  if ((a3 != 0) != (*v8 != 0))
  {
    if (a3)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
      v12 = v11[3];
      v11 += 3;
      *(_QWORD *)v10 = v12;
      *(v8 - 1) = (unint64_t)v11;
      *v11 = v10;
      *(_QWORD *)(v12 + 8) = v10;
    }
    else
    {
      v14 = *(_QWORD *)v10;
      v13 = (_QWORD *)*(v8 - 1);
      *v13 = *(_QWORD *)v10;
      *(_QWORD *)(v14 + 8) = v13;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v8 = *result;
    }
  }
  *v8 = a3;
  return result;
}

void JSC::BytecodeGenerator::pushLexicalScope(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = (uint64_t *)(a2 + 8);
  v5 = 0;
  JSC::BytecodeGenerator::pushLexicalScopeInternal(a1, (JSC::VariableEnvironment *)(a2 + 8), 0, 0, (unint64_t *)&v5, 0, 4, 1);
  JSC::BytecodeGenerator::initializeBlockScopedFunctions(a1, v4, a2 + 32, v5);
}

_QWORD *JSC::BytecodeGenerator::BytecodeGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _DWORD **a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  _QWORD *v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  _DWORD *v39;
  JSC::TDZEnvironmentLink *v40;
  _DWORD *v41;
  WTF::AtomStringImpl *v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  unsigned int *v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  WTF *v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  unsigned int *v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  WTF::StringImpl **v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  uint64_t v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  WTF *v137;
  _QWORD *result;
  WTF *v139;
  uint64_t v140;
  __int16 v141;
  WTF *v142;
  int v143;
  int v144;
  WTF *v145;
  unint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  WTF *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  int v180;
  BOOL v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  WTF *v185;
  WTF::StringImpl *v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF::StringImpl **v196;
  WTF::StringImpl *v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  WTF *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  WTF *v221;
  uint64_t v222;
  WTF *v223[2];
  WTF *v224;

  v15 = WTF::fastMalloc((WTF *)0x128);
  *(_QWORD *)v15 = a2;
  v23 = *(_QWORD *)(a2 + 712);
  if (!v23)
  {
    v220 = v15;
    JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), v16, v17, v18, v19, v20, v21, v22);
    v15 = v220;
    v23 = *(_QWORD *)(a2 + 712);
  }
  *(_QWORD *)(a2 + 712) = *(_QWORD *)v23;
  *(_QWORD *)(v23 + 16) = 0;
  v24 = (_QWORD *)(v23 + 16);
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v15 + 8) = v23 + 16;
  if ((a4 != 0) != (*(_QWORD *)(v23 + 16) != 0))
  {
    if (a4)
    {
      v25 = *(unint64_t **)((v23 & 0xFFFFFFFFFFFFF000) + 0x10);
      v26 = v25[3];
      v25 += 3;
      *(_QWORD *)v23 = v26;
      *(_QWORD *)(v23 + 8) = v25;
      *v25 = v23;
      *(_QWORD *)(v26 + 8) = v23;
    }
    else
    {
      v219 = *(_QWORD *)v23;
      v218 = *(_QWORD **)(v23 + 8);
      *v218 = *(_QWORD *)v23;
      *(_QWORD *)(v219 + 8) = v218;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
      v24 = *(_QWORD **)(v15 + 8);
    }
  }
  *v24 = a4;
  *(_QWORD *)(v15 + 288) = 0;
  *(_OWORD *)(v15 + 256) = 0u;
  *(_OWORD *)(v15 + 272) = 0u;
  *(_OWORD *)(v15 + 224) = 0u;
  *(_OWORD *)(v15 + 240) = 0u;
  *(_OWORD *)(v15 + 192) = 0u;
  *(_OWORD *)(v15 + 208) = 0u;
  *(_OWORD *)(v15 + 160) = 0u;
  *(_OWORD *)(v15 + 176) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)(a1 + 13) = 0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 115;
  *(_QWORD *)(a1 + 40) = a1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  v34 = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v35 = (_QWORD *)(a1 + 160);
  *(_BYTE *)(a1 + 104) = a5;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = a3;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0x3FFFFFFF00000000;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 0x500000000;
  *(_BYTE *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 232) = 0x3FFFFFFF00000000;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 1;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_BYTE *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 620) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 696) = a2;
  *(_DWORD *)(a1 + 704) = 0;
  v36 = *(_WORD *)(a3 + 164);
  if ((v36 & 1) != 0)
    v34 = (*(_BYTE *)(a3 + 166) & 1) == 0;
  *(_BYTE *)(a1 + 708) = v34;
  *(_WORD *)(a1 + 709) = 0;
  v37 = 1;
  if ((v36 & 0x40) == 0)
    v37 = v36 & 1;
  *(_BYTE *)(a1 + 711) = *(_BYTE *)(a1 + 711) & 0xFC | v37;
  *(_BYTE *)(a1 + 712) = (*(_BYTE *)(a3 + 166) & 1) == 0;
  *(_BYTE *)(a1 + 713) = *(_BYTE *)(a4 + 29) & 3;
  *(_OWORD *)(a1 + 720) = 0uLL;
  *(_OWORD *)(a1 + 736) = xmmword_199154580;
  v38 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  *(_QWORD *)(v38 + 20) = *(_QWORD *)(v38 + 20) & 0x80000000FFFFFFFFLL | 0x100000000;
  if (a8 && *a8 && *(_DWORD *)(*a8 - 12))
  {
    v206 = *(unsigned int *)(a1 + 172);
    if ((_DWORD)v206 == *(_DWORD *)(a1 + 168))
    {
      v207 = (_QWORD *)WTF::Vector<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v206 + 1, (unint64_t)a8);
      v208 = (uint64_t *)(*(_QWORD *)(a1 + 160) + 8 * *(unsigned int *)(a1 + 172));
    }
    else
    {
      v208 = (uint64_t *)(*v35 + 8 * v206);
      v207 = a8;
    }
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(v208, v207);
    ++*(_DWORD *)(a1 + 172);
  }
  v39 = *a6;
  if (*a6)
    ++*v39;
  v40 = *(JSC::TDZEnvironmentLink **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
    {
      JSC::TDZEnvironmentLink::~TDZEnvironmentLink(v40);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      --*(_DWORD *)v40;
    }
  }
  JSC::BytecodeGenerator::emitEnter((JSC::BytecodeGenerator *)a1, v27, v28, v29, v30, v31, v32, v33);
  v41 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
  *(_QWORD *)(a1 + 248) = v41;
  v49 = v41[1];
  ++*v41;
  *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 12) = v49;
  v50 = *(unsigned int *)(a3 + 148);
  if (!(_DWORD)v50)
  {
LABEL_18:
    v51 = 0;
    v52 = 0;
    v223[0] = 0;
    v223[1] = 0;
    v221 = 0;
    v222 = 0;
    v53 = *(_QWORD *)(a3 + 192);
    if (v53)
    {
      v52 = *(unsigned int *)(v53 - 4);
      v54 = (unint64_t *)(v53 + 16 * v52);
      if (*(_DWORD *)(v53 - 12))
      {
        v51 = *(unint64_t **)(a3 + 192);
        if ((_DWORD)v52)
        {
          v55 = 16 * v52;
          v51 = *(unint64_t **)(a3 + 192);
          while (*v51 + 1 <= 1)
          {
            v51 += 2;
            v55 -= 16;
            if (!v55)
            {
              v51 = v54;
              goto LABEL_25;
            }
          }
        }
        goto LABEL_25;
      }
      v51 = (unint64_t *)(v53 + 16 * v52);
    }
    v54 = (unint64_t *)(v53 + 16 * v52);
LABEL_25:
    if (v53)
      v56 = (unint64_t *)(v53 + 16 * *(unsigned int *)(v53 - 4));
    else
      v56 = 0;
    if (v56 == v51)
    {
LABEL_28:
      WTF::FixedVector<JSC::Identifier>::FixedVector<0ul,WTF::UnsafeVectorOverflow>((unsigned int **)&v224, (uint64_t)v223, (uint64_t)v43, v44, v45, v46, v47, v48);
      v64 = v224;
      v224 = 0;
      v65 = *(unsigned int **)(a4 + 216);
      *(_QWORD *)(a4 + 216) = v64;
      if (v65)
      {
        v67 = (WTF::StringImpl **)(v65 + 2);
        v66 = *v65;
        if ((_DWORD)v66)
        {
          v68 = 8 * v66;
          do
          {
            v69 = *v67;
            *v67 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
              {
                WTF::StringImpl::~StringImpl(v69, v57, v58, v59, v60, v61, v62, v63);
                WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
              }
              else
              {
                *(_DWORD *)v69 -= 2;
              }
            }
            ++v67;
            v68 -= 8;
          }
          while (v68);
        }
        WTF::fastFree((unint64_t)v65, v57, v58, v59, v60, v61, v62, v63);
        v79 = v224;
        v224 = 0;
        if (v79)
        {
          v81 = (WTF::StringImpl **)((char *)v79 + 8);
          v80 = *(unsigned int *)v79;
          if ((_DWORD)v80)
          {
            v82 = 8 * v80;
            do
            {
              v83 = *v81;
              *v81 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                {
                  WTF::StringImpl::~StringImpl(v83, v78, v58, v59, v60, v61, v62, v63);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v83 -= 2;
                }
              }
              ++v81;
              v82 -= 8;
            }
            while (v82);
          }
          WTF::fastFree((unint64_t)v79, v78, v58, v59, v60, v61, v62, v63);
        }
      }
      WTF::FixedVector<JSC::Identifier>::FixedVector<0ul,WTF::UnsafeVectorOverflow>((unsigned int **)&v224, (uint64_t)&v221, v58, v59, v60, v61, v62, v63);
      v99 = v224;
      v224 = 0;
      v100 = *(unsigned int **)(a4 + 224);
      *(_QWORD *)(a4 + 224) = v99;
      if (v100)
      {
        v102 = (WTF::StringImpl **)(v100 + 2);
        v101 = *v100;
        if ((_DWORD)v101)
        {
          v103 = 8 * v101;
          do
          {
            v104 = *v102;
            *v102 = 0;
            if (v104)
            {
              if (*(_DWORD *)v104 == 2)
              {
                WTF::StringImpl::~StringImpl(v104, v92, v93, v94, v95, v96, v97, v98);
                WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
              }
              else
              {
                *(_DWORD *)v104 -= 2;
              }
            }
            ++v102;
            v103 -= 8;
          }
          while (v103);
        }
        WTF::fastFree((unint64_t)v100, v92, v93, v94, v95, v96, v97, v98);
        v113 = v224;
        v224 = 0;
        if (v113)
        {
          v115 = (WTF::StringImpl **)((char *)v113 + 8);
          v114 = *(unsigned int *)v113;
          if ((_DWORD)v114)
          {
            v116 = 8 * v114;
            do
            {
              v117 = *v115;
              *v115 = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                {
                  WTF::StringImpl::~StringImpl(v117, v92, v93, v94, v95, v96, v97, v98);
                  WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
                }
                else
                {
                  *(_DWORD *)v117 -= 2;
                }
              }
              ++v115;
              v116 -= 8;
            }
            while (v116);
          }
          WTF::fastFree((unint64_t)v113, v92, v93, v94, v95, v96, v97, v98);
        }
      }
      v126 = *(_WORD *)(a3 + 164);
      if ((v126 & 0x500) != 0)
      {
        *(_QWORD *)(a1 + 288) = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
        v126 = *(_WORD *)(a3 + 164);
      }
      if ((*(_WORD *)(a4 + 28) & 8) != 0 && (v126 & 0x208) != 0)
      {
        JSC::BytecodeGenerator::emitLoadThisFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a1, (uint64_t)v92, v93, v94, v95, v96, v97, v98);
        v126 = *(_WORD *)(a3 + 164);
      }
      if ((v126 & 0x500) != 0)
        JSC::BytecodeGenerator::emitLoadNewTargetFromArrowFunctionLexicalEnvironment((JSC::BytecodeGenerator *)a1, (uint64_t)v92, v93, v94, v95, v96, v97, v98);
      if ((*(_BYTE *)(a1 + 711) & 1) != 0 && (*(_WORD *)(a4 + 28) & 8) == 0 && *(_BYTE *)(a1 + 713) != 1)
      {
        JSC::BytecodeGenerator::initializeArrowFunctionContextScopeIfNeeded(a1, 0, 0, v94, v95, v96, v97, v98);
        JSC::BytecodeGenerator::emitPutThisToArrowFunctionContextScope((JSC::BytecodeGenerator *)a1, v209, v210, v211, v212, v213, v214, v215);
      }
      v127 = *(_QWORD *)(a1 + 192);
      if (v127)
        v128 = v127 + 104;
      else
        v128 = 0;
      v224 = 0;
      JSC::BytecodeGenerator::pushLexicalScopeInternal(a1, (JSC::VariableEnvironment *)(v128 + 8), 0, 1, (unint64_t *)&v224, 0, 2, 1);
      v136 = v221;
      if (HIDWORD(v222))
      {
        v184 = 8 * HIDWORD(v222);
        v185 = v221;
        do
        {
          v186 = *(WTF::StringImpl **)v185;
          *(_QWORD *)v185 = 0;
          if (v186)
          {
            if (*(_DWORD *)v186 == 2)
            {
              WTF::StringImpl::~StringImpl(v186, v129, v130, v131, v132, v133, v134, v135);
              WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
            }
            else
            {
              *(_DWORD *)v186 -= 2;
            }
          }
          v185 = (WTF *)((char *)v185 + 8);
          v184 -= 8;
        }
        while (v184);
      }
      if (v136)
        WTF::fastFree((unint64_t)v136, v129, v130, v131, v132, v133, v134, v135);
      v137 = v223[0];
      if (HIDWORD(v223[1]))
      {
        v195 = 8 * HIDWORD(v223[1]);
        v196 = (WTF::StringImpl **)v223[0];
        do
        {
          v197 = *v196;
          *v196 = 0;
          if (v197)
          {
            if (*(_DWORD *)v197 == 2)
            {
              WTF::StringImpl::~StringImpl(v197, v129, v130, v131, v132, v133, v134, v135);
              WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
            }
            else
            {
              *(_DWORD *)v197 -= 2;
            }
          }
          ++v196;
          v195 -= 8;
        }
        while (v195);
      }
      if (v137)
        WTF::fastFree((unint64_t)v137, v129, v130, v131, v132, v133, v134, v135);
      return (_QWORD *)a1;
    }
    v139 = 0;
    LODWORD(v140) = 0;
    while (1)
    {
      v141 = *((_WORD *)v51 + 4);
      if ((v141 & 0x200) != 0)
        break;
      if ((v141 & 0x80) == 0)
      {
        v142 = (WTF *)*v51;
        v143 = *(_DWORD *)(*v51 + 16);
        if ((v143 & 0x20) != 0)
        {
          v144 = *(_DWORD *)v142 + 2;
          goto LABEL_90;
        }
        if ((v143 & 0x10) != 0)
        {
          v144 = *(_DWORD *)v142 + 2;
          *(_DWORD *)v142 = v144;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a1 + 696) + 41912), *v51, v43, v44, v45, v46, v47, v48, &v224);
          v142 = v224;
          v144 = *(_DWORD *)v224;
        }
        *(_DWORD *)v142 = v144 + 2;
        if (v144)
        {
LABEL_90:
          *(_DWORD *)v142 = v144;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v142, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
          WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
        }
        v224 = v142;
        if ((_DWORD)v140 == LODWORD(v223[1]))
        {
          v147 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v223, v140 + 1, (unint64_t)&v224);
          v140 = HIDWORD(v223[1]);
          v139 = v223[0];
          v148 = *v147;
          *v147 = 0;
          *((_QWORD *)v139 + v140) = v148;
        }
        else
        {
          v224 = 0;
          *((_QWORD *)v139 + v140) = v142;
        }
        LODWORD(v140) = v140 + 1;
        HIDWORD(v223[1]) = v140;
LABEL_94:
        v145 = v224;
        v224 = 0;
        if (v145)
        {
          if (*(_DWORD *)v145 == 2)
          {
            WTF::StringImpl::~StringImpl(v145, v42, (uint64_t)v43, v44, v45, v46, v47, v48);
            WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
          }
          else
          {
            *(_DWORD *)v145 -= 2;
          }
        }
      }
      v146 = v51 + 2;
      v51 = v54;
      if (v146 != v54)
      {
        v51 = v146;
        while (*v51 + 1 <= 1)
        {
          v51 += 2;
          if (v51 == v54)
          {
            v51 = v54;
            break;
          }
        }
      }
      if (v51 == v56)
        goto LABEL_28;
    }
    JSC::Identifier::fromUid((WTF::StringImpl *)*v51, *(_QWORD *)(a1 + 696), v43, v44, v45, v46, v47, v48, &v224);
    v216 = HIDWORD(v222);
    if (HIDWORD(v222) == (_DWORD)v222)
    {
      WTF::Vector<JSC::Identifier,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>((uint64_t)&v221, (unint64_t)&v224);
    }
    else
    {
      v217 = v224;
      v224 = 0;
      *((_QWORD *)v221 + HIDWORD(v222)) = v217;
      HIDWORD(v222) = v216 + 1;
    }
    goto LABEL_94;
  }
  v173 = *(uint64_t **)(a3 + 136);
  v174 = 8 * v50;
  while (1)
  {
    v175 = (WTF *)*v173;
    v176 = *(_QWORD *)(a1 + 24);
    result = (_QWORD *)JSC::BytecodeGenerator::makeFunction(a1, *v173, (uint64_t)v43, v44, v45, v46, v47, v48);
    v177 = result;
    v178 = (_QWORD *)(v176 + 80);
    v223[0] = 0;
    v179 = *(unsigned int *)(v176 + 92);
    if ((_DWORD)v179 == *(_DWORD *)(v176 + 88))
    {
      result = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v176 + 80, v179 + 1, (unint64_t)v223);
      *(_QWORD *)(*(_QWORD *)(v176 + 80) + 8 * *(unsigned int *)(v176 + 92)) = *result;
    }
    else
    {
      *(_QWORD *)(*v178 + 8 * v179) = 0;
    }
    v180 = *(_DWORD *)(v176 + 92);
    v181 = __CFADD__(v180, 1);
    v182 = v180 + 1;
    *(_DWORD *)(v176 + 92) = v182;
    if (v181)
      break;
    *(_QWORD *)(*v178 + 8 * v182 - 8) = v177;
    v223[0] = v175;
    v223[1] = (WTF *)1;
    v183 = *(unsigned int *)(a1 + 532);
    if ((_DWORD)v183 == *(_DWORD *)(a1 + 528))
    {
      WTF::Vector<std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::FunctionMetadataNode *,JSC::BytecodeGenerator::FunctionVariableType>>(a1 + 520, (unint64_t)v223);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 520) + 16 * v183) = *(_OWORD *)v223;
      ++*(_DWORD *)(a1 + 532);
    }
    ++v173;
    v174 -= 8;
    if (!v174)
      goto LABEL_18;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeGenerator::makeFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  int v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl **v37;
  JSC::TDZEnvironmentLink *v38;
  WTF::StringImpl **v39;
  WTF *v40;
  uint64_t result;
  WTF *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  WTF *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  WTF::StringImpl **v101;
  char v102;
  JSC::TDZEnvironmentLink *v103;
  WTF *v104;
  uint64_t v105;
  WTF::StringImpl **v106;
  unsigned __int8 v107;
  WTF *v108;
  uint64_t v109;
  char v110;
  JSC::TDZEnvironmentLink *v111;

  v10 = *(unsigned __int16 *)(a2 + 33);
  v11 = (v10 >> 7) & 1;
  v12 = (v10 >> 10) & 1;
  if (((1 << *(_BYTE *)(a2 + 35)) & 0x940) != 0)
  {
    v53 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v53 + 28) & 0xC0) == 0x80 || (v54 = *(unsigned __int8 *)(a1 + 713), v54 == 1))
    {
      v99 = *(_QWORD *)(v53 + 152);
      if (v99)
      {
        v100 = *(unsigned __int8 *)(v99 + 56);
        LOBYTE(v11) = v100 & 1;
        v12 = (v100 >> 1) & 1;
      }
      else
      {
        LOBYTE(v11) = 0;
        v12 = 0;
      }
      v13 = 1;
    }
    else
    {
      v55 = ((*(unsigned __int16 *)(v53 + 28) | ((unint64_t)*(unsigned __int8 *)(v53 + 30) << 16)) >> 4) & 1;
      if (v54 == 2)
        LODWORD(v55) = 1;
      if ((_DWORD)v55)
        v13 = 2;
      else
        v13 = 0;
    }
  }
  else
  {
    v13 = 0;
  }
  JSC::BytecodeGenerator::getVariablesUnderTDZ((JSC::BytecodeGenerator *)&v111, a1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v108) = 0;
  v110 = 0;
  JSC::BytecodeGenerator::getAvailablePrivateAccessNames((JSC::BytecodeGenerator *)&v106, a1, v14, v15, v16, v17, v18, v19);
  v20 = *(unsigned __int8 *)(a2 + 35);
  v21 = *(_BYTE *)(a2 + 35) != 0;
  if (v20 == 5)
    v21 = (*(_WORD *)(a2 + 33) & 0x60) == 0 && *(_BYTE *)(a2 + 35) != 0;
  v22 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  if (((1 << *(_BYTE *)(v22 + 42)) & 0x70E04) != 0 && ((1 << v20) & 0x8182) != 0)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 56))(*(_QWORD *)(a1 + 192)) & 1) == 0)
    {
      result = 3231;
      __break(0xC471u);
      return result;
    }
    v85 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 248);
    v104 = 0;
    v105 = 0;
    if (*(_DWORD *)(v85 + 20))
    {
      v86 = 0;
      v87 = 0;
      do
      {
        (*(void (**)(_QWORD, WTF **))(**(_QWORD **)(*(_QWORD *)(v85 + 8) + v86) + 16))(*(_QWORD *)(*(_QWORD *)(v85 + 8) + v86), &v104);
        ++v87;
        v86 += 16;
      }
      while (v87 < *(unsigned int *)(v85 + 20));
    }
    if (v110)
    {
      if (HIDWORD(v109))
      {
        v88 = v108;
        v89 = 8 * HIDWORD(v109);
        do
        {
          v90 = *(WTF::StringImpl **)v88;
          *(_QWORD *)v88 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
            {
              WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
              WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
            }
            else
            {
              *(_DWORD *)v90 -= 2;
            }
          }
          v88 = (WTF *)((char *)v88 + 8);
          v89 -= 8;
        }
        while (v89);
      }
      if (v108)
        WTF::fastFree((unint64_t)v108, v78, v79, v80, v81, v82, v83, v84);
      v108 = v104;
      v109 = v105;
    }
    else
    {
      v108 = v104;
      v109 = v105;
      v110 = 1;
    }
    v22 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  }
  v23 = *(_QWORD *)(a1 + 696);
  v24 = (JSC::VM *)(*(_QWORD *)(a1 + 192) + 168);
  v25 = *(unsigned __int8 *)(a1 + 707);
  v26 = (*(unsigned __int16 *)(v22 + 28) >> 2) & 1;
  v103 = v111;
  LOBYTE(v101) = 0;
  v102 = 0;
  v27 = v107;
  if (v107)
  {
    v28 = v106;
    v106 = 0;
    v101 = v28;
    v102 = 1;
  }
  v36 = JSC::UnlinkedFunctionExecutable::create(v23, v24, a2, v25, v21, 0, v26, &v103, (uint64_t)&v108, (uint64_t)&v101, v13, v11, v12, 0);
  if (v102)
  {
    v37 = v101;
    if (v101)
    {
      v56 = *((unsigned int *)v101 - 1);
      if ((_DWORD)v56)
      {
        v57 = v101;
        do
        {
          v58 = *v57;
          if (*v57 != (WTF::StringImpl *)-1)
          {
            *v57 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
              {
                WTF::StringImpl::~StringImpl(v58, v29, v30, v31, v32, v33, v34, v35);
                WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
              }
              else
              {
                *(_DWORD *)v58 -= 2;
              }
            }
          }
          v57 += 2;
          --v56;
        }
        while (v56);
      }
      WTF::fastFree((unint64_t)(v37 - 2), v29, v30, v31, v32, v33, v34, v35);
    }
  }
  v38 = v103;
  v103 = 0;
  if (v38)
    WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v38);
  if (v27)
  {
    v39 = v106;
    if (v106)
    {
      v67 = *((unsigned int *)v106 - 1);
      if ((_DWORD)v67)
      {
        v68 = v106;
        do
        {
          v69 = *v68;
          if (*v68 != (WTF::StringImpl *)-1)
          {
            *v68 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
              {
                WTF::StringImpl::~StringImpl(v69, v29, v30, v31, v32, v33, v34, v35);
                WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
              }
              else
              {
                *(_DWORD *)v69 -= 2;
              }
            }
          }
          v68 += 2;
          --v67;
        }
        while (v67);
      }
      WTF::fastFree((unint64_t)(v39 - 2), v29, v30, v31, v32, v33, v34, v35);
    }
  }
  if (v110)
  {
    if (HIDWORD(v109))
    {
      v42 = v108;
      v43 = 8 * HIDWORD(v109);
      do
      {
        v44 = *(WTF::StringImpl **)v42;
        *(_QWORD *)v42 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, v29, v30, v31, v32, v33, v34, v35);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        v42 = (WTF *)((char *)v42 + 8);
        v43 -= 8;
      }
      while (v43);
    }
    v40 = v108;
    if (v108)
    {
      v108 = 0;
      LODWORD(v109) = 0;
      WTF::fastFree((unint64_t)v40, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v36;
}

uint64_t JSC::BytecodeGenerator::initializeNextParameter(JSC::BytecodeGenerator *this)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_DWORD *)(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 24) & 0x7FFFFFFF;
  result = WTF::SegmentedVector<JSC::RegisterID,32ul>::grow((uint64_t)this + 336, *((_QWORD *)this + 42) + 1);
  if (v2 >> 5 >= *((unsigned int *)this + 89))
  {
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + 8 * (v2 >> 5)) + 12 * (v2 & 0x1F) + 4) = v2 + 5;
    v4 = **(_QWORD **)(*((_QWORD *)this + 3) + 8);
    *(_QWORD *)(v4 + 20) = *(_QWORD *)(v4 + 20) & 0x80000000FFFFFFFFLL | (((HIDWORD(*(_QWORD *)(v4 + 20)) + 1) & 0x7FFFFFFF) << 32);
  }
  return result;
}

void JSC::BytecodeGenerator::pushTDZVariables(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::TDZEnvironmentLink *v23;
  uint64_t v24;
  int v25;
  WTF::AtomStringImpl *v26;
  _QWORD *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::TDZEnvironmentLink *v40;
  int v41;
  uint64_t v42;

  if (a2)
    v9 = *((_DWORD *)a2 - 3);
  else
    v9 = 0;
  if (a3)
  {
    v10 = *a3;
    if (*a3)
      LODWORD(v10) = *(_DWORD *)(v10 - 12);
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (!(v9 + (_DWORD)v10))
    return;
  v11 = 0;
  v12 = 0;
  if ((_DWORD)a4)
    v13 = 2;
  else
    v13 = 1;
  v42 = 0;
  if (a2)
  {
    v12 = *((unsigned int *)a2 - 1);
    v14 = (char *)a2 + 16 * v12;
    if (*((_DWORD *)a2 - 3))
    {
      v11 = a2;
      if ((_DWORD)v12)
      {
        v15 = 16 * v12;
        v11 = a2;
        while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
        {
          v11 = (WTF::AtomStringImpl *)((char *)v11 + 16);
          v15 -= 16;
          if (!v15)
          {
            v11 = (WTF::AtomStringImpl *)v14;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v11 = (WTF::AtomStringImpl *)((char *)a2 + 16 * v12);
  }
  v14 = (char *)a2 + 16 * v12;
LABEL_16:
  if (a2)
    v16 = (WTF::AtomStringImpl *)((char *)a2 + 16 * *((unsigned int *)a2 - 1));
  else
    v16 = 0;
  if (v16 != v11)
  {
    if ((_DWORD)a5)
    {
      do
      {
        v41 = 0;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::add<JSC::BytecodeGenerator::TDZNecessityLevel>((uint64_t)&v39, &v42, (WTF::StringImpl **)v11, &v41);
        v17 = (WTF::AtomStringImpl *)((char *)v11 + 16);
        v11 = (WTF::AtomStringImpl *)v14;
        if (v17 != (WTF::AtomStringImpl *)v14)
        {
          v11 = v17;
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 = (WTF::AtomStringImpl *)((char *)v11 + 16);
            if (v11 == (WTF::AtomStringImpl *)v14)
            {
              v11 = (WTF::AtomStringImpl *)v14;
              break;
            }
          }
        }
      }
      while (v11 != v16);
    }
    else
    {
      do
      {
        if ((*((_WORD *)v11 + 4) & 0x80) != 0)
          v25 = 0;
        else
          v25 = v13;
        v41 = v25;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>::add<JSC::BytecodeGenerator::TDZNecessityLevel>((uint64_t)&v39, &v42, (WTF::StringImpl **)v11, &v41);
        v26 = (WTF::AtomStringImpl *)((char *)v11 + 16);
        v11 = (WTF::AtomStringImpl *)v14;
        if (v26 != (WTF::AtomStringImpl *)v14)
        {
          v11 = v26;
          while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
          {
            v11 = (WTF::AtomStringImpl *)((char *)v11 + 16);
            if (v11 == (WTF::AtomStringImpl *)v14)
            {
              v11 = (WTF::AtomStringImpl *)v14;
              break;
            }
          }
        }
      }
      while (v11 != v16);
    }
  }
  v39 = v42;
  v40 = 0;
  v18 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 152))
  {
    v19 = (uint64_t *)WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 144, v18 + 1, (unint64_t)&v39);
    v20 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 16 * *(unsigned int *)(a1 + 156));
    *v20 = 0;
    v21 = *v19;
    *v19 = 0;
    *v20 = v21;
    v22 = v19[1];
    v19[1] = 0;
    v20[1] = v22;
    v23 = v40;
    ++*(_DWORD *)(a1 + 156);
    v40 = 0;
    if (v23)
      WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v23);
  }
  else
  {
    v27 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 16 * v18);
    v39 = 0;
    *v27 = v42;
    v27[1] = 0;
    ++*(_DWORD *)(a1 + 156);
    v40 = 0;
  }
  v24 = v39;
  if (v39)
  {
    v28 = *(unsigned int *)(v39 - 4);
    if ((_DWORD)v28)
    {
      v29 = (WTF::StringImpl **)v39;
      do
      {
        v30 = *v29;
        if (*v29 != (WTF::StringImpl *)-1)
        {
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
            {
              WTF::StringImpl::~StringImpl(v30, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
            }
            else
            {
              *(_DWORD *)v30 -= 2;
            }
          }
        }
        v29 += 2;
        --v28;
      }
      while (v28);
    }
    WTF::fastFree(v24 - 16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

void JSC::BytecodeGenerator::emitPrefillStackTDZVariables(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  unint64_t *v30;

  if (!a2)
  {
    v7 = 0;
    v5 = 0;
LABEL_44:
    v6 = a2 + 16 * v5;
    goto LABEL_8;
  }
  v5 = *(unsigned int *)(a2 - 4);
  v6 = a2 + 16 * v5;
  if (!*(_DWORD *)(a2 - 12))
  {
    v7 = a2 + 16 * v5;
    goto LABEL_44;
  }
  v7 = a2;
  if ((_DWORD)v5)
  {
    v8 = 16 * v5;
    v7 = a2;
    while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
    {
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_8:
  if (a2)
    v9 = a2 + 16 * *(unsigned int *)(a2 - 4);
  else
    v9 = 0;
  if (v9 != v7)
  {
    v10 = (int *)(a1 + 52);
    do
    {
      v11 = *(_WORD *)(v7 + 8);
      if ((v11 & 0x20) != 0)
      {
        if ((v11 & 0xC0) == 0x40)
        {
LABEL_14:
          JSC::SymbolTable::get((unint64_t *)&v30, *(_QWORD *)(a3 + 8), *(_QWORD *)v7);
          v19 = v30;
          if ((v30 & 1) != 0)
            v19 = (unint64_t *)&v30;
          v20 = *v19;
          if ((v20 & 0x30) >= 0x11)
          {
            v21 = v20 >> 6;
            v22 = (v20 >> 6);
            if ((v21 & 0x80000000) != 0)
            {
              v23 = v22 ^ 0xFFFFFFFFLL;
              v24 = v23 >> 5;
              if (v23 >> 5 >= a1[25])
              {
                __break(0xC471u);
                JUMPOUT(0x198231DF0);
              }
              v25 = a1 + 22;
              goto LABEL_20;
            }
            if ((_DWORD)v21 == 3)
            {
              v26 = (int *)(a1 + 58);
            }
            else
            {
              v23 = (int)v22 - 5;
              v24 = v23 >> 5;
              if (v23 >> 5 >= a1[89])
              {
                __break(0xC471u);
                JUMPOUT(0x198231DF8);
              }
              v25 = a1 + 86;
LABEL_20:
              v26 = (int *)(*(_QWORD *)(*v25 + 8 * v24) + 12 * (v23 & 0x1F));
            }
            v27 = (int *)JSC::BytecodeGenerator::addConstantEmptyValue((JSC::BytecodeGenerator *)a1);
            v28 = v27;
            if (v27)
              ++*v27;
            if (v10 != v26 && v26 && v27 != v26)
              JSC::BytecodeGenerator::emitMove((uint64_t)a1, v26, (uint64_t)v27, v14, v15, v16, v17, v18);
            if (v28)
              --*v28;
          }
          if ((v30 & 1) == 0)
            JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v30, v12, v13, v14, v15, v16, v17, v18);
        }
      }
      else if ((v11 & 0x80) == 0)
      {
        goto LABEL_14;
      }
      v29 = v7 + 16;
      v7 = v6;
      if (v29 != v6)
      {
        v7 = v29;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 16;
          if (v7 == v6)
          {
            v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
  }
}

void JSC::BytecodeGenerator::~BytecodeGenerator(JSC::BytecodeGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::TemplateObjectDescriptor **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t k;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl ***v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::TDZEnvironmentLink *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t m;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t n;
  unint64_t v80;
  unint64_t v81;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  WTF::StringImpl ***v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  WTF::StringImpl **v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t i;
  unint64_t v129;
  uint64_t v130;
  WTF::StringImpl **v131;
  WTF::StringImpl *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t j;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  uint64_t v145;
  _DWORD *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  _DWORD **v153;
  _DWORD *v154;
  _DWORD *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t *v161;
  uint64_t v162;
  unint64_t v163;
  WTF::StringImpl ***v164;
  WTF::StringImpl **v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  WTF::StringImpl **v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl ***v180;
  WTF::StringImpl **v181;
  uint64_t v182;
  WTF::StringImpl **v183;
  WTF::StringImpl *v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WTF::StringImpl **v194;
  WTF::StringImpl *v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _DWORD **v204;
  uint64_t v205;
  _DWORD *v206;
  JSC::ForInContext **v207;
  uint64_t v208;
  JSC::ForInContext *v209;
  _DWORD **v210;
  uint64_t v211;
  _DWORD *v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;

  v9 = *((_QWORD *)this + 90);
  if (v9)
  {
    *((_QWORD *)this + 90) = 0;
    *((_DWORD *)this + 182) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 86);
  if (v10)
  {
    v113 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v113)
    {
      v114 = (unint64_t *)(v10 + 8);
      do
      {
        if (*((_DWORD *)v114 - 2) != 2147483646)
        {
          v115 = *v114;
          *v114 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 1)
            {
              v116 = *(_QWORD *)(v115 + 24);
              if (v116)
                WTF::fastFree(v116 - 16, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v115, a2, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              --*(_DWORD *)v115;
            }
          }
        }
        v114 += 2;
        --v113;
      }
      while (v113);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 85);
  if (v11)
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::TemplateObjectDescriptor **)*((_QWORD *)this + 84);
  if (v12)
    WTF::HashTable<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>,WTF::HashTraits<WTF::Ref<JSC::TemplateObjectDescriptor,WTF::RawPtrTraits<JSC::TemplateObjectDescriptor>,WTF::DefaultRefDerefTraits<JSC::TemplateObjectDescriptor>>>>::deallocateTable(v12, a2, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)this + 83);
  if (v13)
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 82);
  if (v14)
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  v15 = *((_QWORD *)this + 81);
  if (v15)
    WTF::fastFree(v15 - 16, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 80);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (WTF::StringImpl **)*((_QWORD *)this + 80);
      do
      {
        v19 = *v18;
        if (*v18 != (WTF::StringImpl *)-1)
        {
          *v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              WTF::StringImpl::~StringImpl(v19, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
            }
            else
            {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = *((unsigned int *)this + 157);
  if ((_DWORD)v28)
  {
    v204 = (_DWORD **)*((_QWORD *)this + 77);
    v205 = 8 * v28;
    do
    {
      v206 = *v204;
      *v204 = 0;
      if (v206)
        --*v206;
      ++v204;
      v205 -= 8;
    }
    while (v205);
  }
  v29 = *((_QWORD *)this + 77);
  if (v29)
  {
    *((_QWORD *)this + 77) = 0;
    *((_DWORD *)this + 156) = 0;
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v30 = *((_QWORD *)this + 74);
  v31 = *((unsigned int *)this + 153);
  if (v30)
  {
    v148 = 0;
    while (v148 >> 3 < v31)
    {
      v149 = *(_QWORD *)(*((_QWORD *)this + 75) + 8 * (v148 >> 3));
      v150 = 16 * (v148 & 7);
      v151 = *(_DWORD **)(v149 + v150);
      *(_QWORD *)(v149 + v150) = 0;
      if (v151)
        --*v151;
      if (v30 == ++v148)
        goto LABEL_29;
    }
LABEL_297:
    __break(0xC471u);
    JUMPOUT(0x1982329CCLL);
  }
LABEL_29:
  if ((_DWORD)v31)
  {
    v156 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 75) + 8 * v156++), a2, a3, a4, a5, a6, a7, a8);
    while (v156 < *((unsigned int *)this + 153));
  }
  v32 = *((_QWORD *)this + 75);
  if (v32)
  {
    *((_QWORD *)this + 75) = 0;
    *((_DWORD *)this + 152) = 0;
    WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
  }
  v33 = *((unsigned int *)this + 147);
  if ((_DWORD)v33)
  {
    v152 = 24 * v33;
    v153 = (_DWORD **)(*((_QWORD *)this + 72) + 8);
    do
    {
      v154 = *v153;
      *v153 = 0;
      if (v154)
        --*v154;
      v155 = *(v153 - 1);
      *(v153 - 1) = 0;
      if (v155)
        --*v155;
      v153 += 3;
      v152 -= 24;
    }
    while (v152);
  }
  v34 = *((_QWORD *)this + 72);
  if (v34)
  {
    *((_QWORD *)this + 72) = 0;
    *((_DWORD *)this + 146) = 0;
    WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*((_BYTE *)this + 568))
  {
    v35 = (_DWORD *)*((_QWORD *)this + 70);
    *((_QWORD *)this + 70) = 0;
    if (v35)
      --*v35;
    v36 = (_DWORD *)*((_QWORD *)this + 69);
    *((_QWORD *)this + 69) = 0;
    if (v36)
      --*v36;
  }
  v37 = *((_QWORD *)this + 65);
  if (v37)
  {
    *((_QWORD *)this + 65) = 0;
    *((_DWORD *)this + 132) = 0;
    WTF::fastFree(v37, a2, a3, a4, a5, a6, a7, a8);
  }
  v38 = *((_QWORD *)this + 63);
  if (v38)
  {
    v157 = (uint64_t *)(v38 - 16);
    v158 = *(_QWORD *)(((v38 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v159 = *(uint64_t **)(v38 - 8);
    if (v159)
    {
      v160 = *v157;
      *v159 = *v157;
      *(_QWORD *)(v160 + 8) = v159;
      *v157 = 0;
      v157[1] = 0;
    }
    *v157 = *(_QWORD *)(v158 + 40);
    *(_QWORD *)(v158 + 40) = v157;
    *((_QWORD *)this + 63) = 0;
  }
  v39 = *((unsigned int *)this + 123);
  if ((_DWORD)v39)
  {
    v210 = (_DWORD **)*((_QWORD *)this + 60);
    v211 = 16 * v39;
    do
    {
      v212 = *v210;
      *v210 = 0;
      if (v212)
        --*v212;
      v210 += 2;
      v211 -= 16;
    }
    while (v211);
  }
  v40 = *((_QWORD *)this + 60);
  if (v40)
  {
    *((_QWORD *)this + 60) = 0;
    *((_DWORD *)this + 122) = 0;
    WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
  }
  v41 = *((unsigned int *)this + 119);
  if ((_DWORD)v41)
  {
    v207 = (JSC::ForInContext **)*((_QWORD *)this + 58);
    v208 = 8 * v41;
    do
    {
      v209 = *v207;
      *v207 = 0;
      if (v209)
      {
        if (*(_DWORD *)v209 == 1)
        {
          JSC::ForInContext::~ForInContext(v209, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
        }
        else
        {
          --*(_DWORD *)v209;
        }
      }
      ++v207;
      v208 -= 8;
    }
    while (v208);
  }
  v42 = *((_QWORD *)this + 58);
  if (v42)
  {
    *((_QWORD *)this + 58) = 0;
    *((_DWORD *)this + 118) = 0;
    WTF::fastFree(v42, a2, a3, a4, a5, a6, a7, a8);
  }
  v43 = *((_QWORD *)this + 56);
  if (v43)
  {
    *((_QWORD *)this + 56) = 0;
    *((_DWORD *)this + 114) = 0;
    WTF::fastFree(v43, a2, a3, a4, a5, a6, a7, a8);
  }
  v44 = *((_QWORD *)this + 53);
  v45 = *((unsigned int *)this + 111);
  if (v44)
  {
    for (i = 0; i != v44; ++i)
    {
      if (v45 <= i >> 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1982329ECLL);
      }
    }
  }
  if ((_DWORD)v45)
  {
    v129 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 54) + 8 * v129++), a2, a3, a4, a5, a6, a7, a8);
    while (v129 < *((unsigned int *)this + 111));
  }
  v46 = *((_QWORD *)this + 54);
  if (v46)
  {
    *((_QWORD *)this + 54) = 0;
    *((_DWORD *)this + 110) = 0;
    WTF::fastFree(v46, a2, a3, a4, a5, a6, a7, a8);
  }
  v47 = *((_QWORD *)this + 48);
  v48 = *((unsigned int *)this + 101);
  if (v47)
  {
    v49 = 0;
    while (v48 > v49 >> 5)
    {
      if (v47 == ++v49)
        goto LABEL_59;
    }
    goto LABEL_297;
  }
LABEL_59:
  if ((_DWORD)v48)
  {
    v50 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 49) + 8 * v50++), a2, a3, a4, a5, a6, a7, a8);
    while (v50 < *((unsigned int *)this + 101));
  }
  v51 = *((_QWORD *)this + 49);
  if (v51)
  {
    *((_QWORD *)this + 49) = 0;
    *((_DWORD *)this + 100) = 0;
    WTF::fastFree(v51, a2, a3, a4, a5, a6, a7, a8);
  }
  v52 = *((_QWORD *)this + 45);
  v53 = *((unsigned int *)this + 95);
  if (v52)
  {
    for (j = 0; j != v52; ++j)
    {
      if (j >> 5 >= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x1982329F4);
      }
      v142 = *(_QWORD *)(*((_QWORD *)this + 46) + 8 * (j >> 5));
      v143 = v142 + 40 * (j & 0x1F);
      v144 = *(_DWORD **)(v143 + 32);
      *(_QWORD *)(v143 + 32) = 0;
      if (v144)
        --*v144;
      v145 = v142 + 40 * (j & 0x1F);
      v146 = *(_DWORD **)(v145 + 24);
      *(_QWORD *)(v145 + 24) = 0;
      if (v146)
        --*v146;
    }
  }
  if ((_DWORD)v53)
  {
    v147 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 46) + 8 * v147++), a2, a3, a4, a5, a6, a7, a8);
    while (v147 < *((unsigned int *)this + 95));
  }
  v54 = *((_QWORD *)this + 46);
  if (v54)
  {
    *((_QWORD *)this + 46) = 0;
    *((_DWORD *)this + 94) = 0;
    WTF::fastFree(v54, a2, a3, a4, a5, a6, a7, a8);
  }
  v55 = *((_QWORD *)this + 42);
  v56 = *((unsigned int *)this + 89);
  if (v55)
  {
    for (k = 0; k != v55; ++k)
    {
      if (v56 <= k >> 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1982329D4);
      }
    }
  }
  if ((_DWORD)v56)
  {
    v58 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 43) + 8 * v58++), a2, a3, a4, a5, a6, a7, a8);
    while (v58 < *((unsigned int *)this + 89));
  }
  v59 = *((_QWORD *)this + 43);
  if (v59)
  {
    *((_QWORD *)this + 43) = 0;
    *((_DWORD *)this + 88) = 0;
    WTF::fastFree(v59, a2, a3, a4, a5, a6, a7, a8);
  }
  v60 = *((_QWORD *)this + 38);
  if (v60)
    WTF::fastFree(v60 - 16, a2, a3, a4, a5, a6, a7, a8);
  v61 = *((_QWORD *)this + 25);
  if (v61)
  {
    v130 = *(unsigned int *)(v61 - 4);
    if ((_DWORD)v130)
    {
      v131 = (WTF::StringImpl **)*((_QWORD *)this + 25);
      do
      {
        v132 = *v131;
        if (*v131 != (WTF::StringImpl *)-1)
        {
          *v131 = 0;
          if (v132)
          {
            if (*(_DWORD *)v132 == 2)
            {
              WTF::StringImpl::~StringImpl(v132, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
            }
            else
            {
              *(_DWORD *)v132 -= 2;
            }
          }
        }
        ++v131;
        --v130;
      }
      while (v130);
    }
    WTF::fastFree(v61 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v62 = *((unsigned int *)this + 43);
  v63 = (WTF::StringImpl ***)*((_QWORD *)this + 20);
  if ((_DWORD)v62)
  {
    v164 = &v63[v62];
    do
    {
      v165 = *v63;
      if (*v63)
      {
        v193 = *((unsigned int *)v165 - 1);
        if ((_DWORD)v193)
        {
          v194 = *v63;
          do
          {
            v195 = *v194;
            if (*v194 != (WTF::StringImpl *)-1)
            {
              *v194 = 0;
              if (v195)
              {
                if (*(_DWORD *)v195 == 2)
                {
                  WTF::StringImpl::~StringImpl(v195, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
                }
                else
                {
                  *(_DWORD *)v195 -= 2;
                }
              }
            }
            v194 += 2;
            --v193;
          }
          while (v193);
        }
        WTF::fastFree((unint64_t)(v165 - 2), a2, a3, a4, a5, a6, a7, a8);
      }
      ++v63;
    }
    while (v63 != v164);
    v63 = (WTF::StringImpl ***)*((_QWORD *)this + 20);
  }
  if (v63)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree((unint64_t)v63, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::Vector<std::pair<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeGenerator::TDZNecessityLevel,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeGenerator::TDZNecessityLevel>,WTF::HashTableTraits>,WTF::RefPtr<JSC::TDZEnvironmentLink,WTF::RawPtrTraits<JSC::TDZEnvironmentLink>,WTF::DefaultRefDerefTraits<JSC::TDZEnvironmentLink>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 144, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v71 = (JSC::TDZEnvironmentLink *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v71)
    WTF::RefCounted<JSC::TDZEnvironmentLink>::deref(v71);
  v72 = *((_QWORD *)this + 14);
  if (v72)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v72, v64, v65, v66, v67, v68, v69, v70);
  }
  v73 = *((_QWORD *)this + 10);
  v74 = *((unsigned int *)this + 25);
  if (v73)
  {
    for (m = 0; m != v73; ++m)
    {
      if (v74 <= m >> 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1982329DCLL);
      }
    }
  }
  if ((_DWORD)v74)
  {
    v76 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * v76++), v64, v65, v66, v67, v68, v69, v70);
    while (v76 < *((unsigned int *)this + 25));
  }
  v77 = *((_QWORD *)this + 11);
  if (v77)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v77, v64, v65, v66, v67, v68, v69, v70);
  }
  v78 = *((_QWORD *)this + 7);
  if (v78)
  {
    for (n = 0; n < v78; ++n)
    {
      if (n >> 5 >= *((unsigned int *)this + 19))
      {
        __break(0xC471u);
        JUMPOUT(0x1982329E4);
      }
      v80 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * (n >> 5)) + ((n & 0x1F) << 6);
      v81 = *(_QWORD *)(v80 + 16);
      if (v80 + 32 != v81 && v81 != 0)
      {
        *(_QWORD *)(v80 + 16) = 0;
        *(_DWORD *)(v80 + 24) = 0;
        WTF::fastFree(v81, v64, v65, v66, v67, v68, v69, v70);
        v78 = *((_QWORD *)this + 7);
      }
    }
  }
  if (*((_DWORD *)this + 19))
  {
    v112 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v112++), v64, v65, v66, v67, v68, v69, v70);
    while (v112 < *((unsigned int *)this + 19));
  }
  v83 = *((_QWORD *)this + 8);
  if (v83)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v83, v64, v65, v66, v67, v68, v69, v70);
  }
  v84 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v84)
  {
    v85 = *(unsigned int *)(v84 + 284);
    v86 = *(WTF::StringImpl ****)(v84 + 272);
    if ((_DWORD)v85)
    {
      v180 = &v86[v85];
      do
      {
        v181 = *v86;
        if (*v86)
        {
          v182 = *((unsigned int *)v181 - 1);
          if ((_DWORD)v182)
          {
            v183 = *v86;
            do
            {
              v184 = *v183;
              if (*v183 != (WTF::StringImpl *)-1)
              {
                *v183 = 0;
                if (v184)
                {
                  if (*(_DWORD *)v184 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v184, (WTF::AtomStringImpl *)v64, v65, v66, v67, v68, v69, v70);
                    WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
                  }
                  else
                  {
                    *(_DWORD *)v184 -= 2;
                  }
                }
              }
              ++v183;
              --v182;
            }
            while (v182);
          }
          WTF::fastFree((unint64_t)(v181 - 2), v64, v65, v66, v67, v68, v69, v70);
        }
        ++v86;
      }
      while (v86 != v180);
      v86 = *(WTF::StringImpl ****)(v84 + 272);
    }
    if (v86)
    {
      *(_QWORD *)(v84 + 272) = 0;
      *(_DWORD *)(v84 + 280) = 0;
      WTF::fastFree((unint64_t)v86, v64, v65, v66, v67, v68, v69, v70);
    }
    v87 = *(unsigned int *)(v84 + 268);
    v88 = *(_QWORD **)(v84 + 256);
    if ((_DWORD)v87)
    {
      v179 = 8 * v87;
      do
      {
        if ((*v88 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * *v88, v64, v65, v66, v67, v68, v69, v70);
        ++v88;
        v179 -= 8;
      }
      while (v179);
      v88 = *(_QWORD **)(v84 + 256);
    }
    if (v88)
    {
      *(_QWORD *)(v84 + 256) = 0;
      *(_DWORD *)(v84 + 264) = 0;
      WTF::fastFree((unint64_t)v88, v64, v65, v66, v67, v68, v69, v70);
    }
    v89 = *(_QWORD *)(v84 + 240);
    if (v89)
    {
      *(_QWORD *)(v84 + 240) = 0;
      *(_DWORD *)(v84 + 248) = 0;
      WTF::fastFree(v89, v64, v65, v66, v67, v68, v69, v70);
    }
    v90 = *(_QWORD *)(v84 + 232);
    if (v90)
      WTF::fastFree(v90 - 16, v64, v65, v66, v67, v68, v69, v70);
    v91 = *(_DWORD *)(v84 + 228);
    v92 = *(_QWORD *)(v84 + 216);
    if (v91)
    {
      v166 = v92 + 24 * v91;
      do
      {
        v167 = *(_QWORD *)v92;
        if (*(_QWORD *)v92)
        {
          v168 = *(unsigned int *)(v92 + 8);
          if ((_DWORD)v168)
          {
            v169 = *(WTF::StringImpl ***)v92;
            do
            {
              v170 = *v169;
              *v169 = 0;
              if (v170)
              {
                if (*(_DWORD *)v170 == 2)
                {
                  WTF::StringImpl::~StringImpl(v170, (WTF::AtomStringImpl *)v64, v65, v66, v67, v68, v69, v70);
                  WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
                }
                else
                {
                  *(_DWORD *)v170 -= 2;
                }
              }
              v169 += 2;
              --v168;
            }
            while (v168);
          }
          WTF::fastFree(v167, v64, v65, v66, v67, v68, v69, v70);
        }
        v92 += 24;
      }
      while (v92 != v166);
      v92 = *(_QWORD *)(v84 + 216);
    }
    if (v92)
    {
      *(_QWORD *)(v84 + 216) = 0;
      *(_DWORD *)(v84 + 224) = 0;
      WTF::fastFree(v92, v64, v65, v66, v67, v68, v69, v70);
    }
    v93 = *(unsigned int *)(v84 + 212);
    if ((_DWORD)v93)
    {
      v161 = *(unint64_t **)(v84 + 200);
      v162 = 16 * v93;
      do
      {
        v163 = *v161;
        *v161 = 0;
        if (v163)
          WTF::fastFree(v163, v64, v65, v66, v67, v68, v69, v70);
        v161 += 2;
        v162 -= 16;
      }
      while (v162);
    }
    v94 = *(_QWORD *)(v84 + 200);
    if (v94)
    {
      *(_QWORD *)(v84 + 200) = 0;
      *(_DWORD *)(v84 + 208) = 0;
      WTF::fastFree(v94, v64, v65, v66, v67, v68, v69, v70);
    }
    v95 = *(_QWORD *)(v84 + 184);
    if (v95)
    {
      *(_QWORD *)(v84 + 184) = 0;
      *(_DWORD *)(v84 + 192) = 0;
      WTF::fastFree(v95, v64, v65, v66, v67, v68, v69, v70);
    }
    v96 = *(_QWORD *)(v84 + 176);
    if (v96)
      WTF::fastFree(v96 - 16, v64, v65, v66, v67, v68, v69, v70);
    v97 = *(_QWORD *)(v84 + 160);
    if (v97)
    {
      *(_QWORD *)(v84 + 160) = 0;
      *(_DWORD *)(v84 + 168) = 0;
      WTF::fastFree(v97, v64, v65, v66, v67, v68, v69, v70);
    }
    v98 = *(_QWORD *)(v84 + 144);
    if (v98)
    {
      *(_QWORD *)(v84 + 144) = 0;
      *(_DWORD *)(v84 + 152) = 0;
      WTF::fastFree(v98, v64, v65, v66, v67, v68, v69, v70);
    }
    v99 = *(_QWORD *)(v84 + 96);
    if (v99)
    {
      *(_QWORD *)(v84 + 96) = 0;
      *(_DWORD *)(v84 + 104) = 0;
      WTF::fastFree(v99, v64, v65, v66, v67, v68, v69, v70);
    }
    v100 = *(_QWORD *)(v84 + 80);
    if (v100)
    {
      *(_QWORD *)(v84 + 80) = 0;
      *(_DWORD *)(v84 + 88) = 0;
      WTF::fastFree(v100, v64, v65, v66, v67, v68, v69, v70);
    }
    v101 = *(_QWORD *)(v84 + 64);
    if (v101)
    {
      *(_QWORD *)(v84 + 64) = 0;
      *(_DWORD *)(v84 + 72) = 0;
      WTF::fastFree(v101, v64, v65, v66, v67, v68, v69, v70);
    }
    v102 = *(_QWORD *)(v84 + 48);
    if (v102)
    {
      *(_QWORD *)(v84 + 48) = 0;
      *(_DWORD *)(v84 + 56) = 0;
      WTF::fastFree(v102, v64, v65, v66, v67, v68, v69, v70);
    }
    v103 = *(unsigned int *)(v84 + 44);
    if ((_DWORD)v103)
    {
      v117 = *(WTF::StringImpl ***)(v84 + 32);
      v118 = 8 * v103;
      do
      {
        v119 = *v117;
        *v117 = 0;
        if (v119)
        {
          if (*(_DWORD *)v119 == 2)
          {
            WTF::StringImpl::~StringImpl(v119, (WTF::AtomStringImpl *)v64, v65, v66, v67, v68, v69, v70);
            WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
          }
          else
          {
            *(_DWORD *)v119 -= 2;
          }
        }
        ++v117;
        v118 -= 8;
      }
      while (v118);
    }
    v104 = *(_QWORD *)(v84 + 32);
    if (v104)
    {
      *(_QWORD *)(v84 + 32) = 0;
      *(_DWORD *)(v84 + 40) = 0;
      WTF::fastFree(v104, v64, v65, v66, v67, v68, v69, v70);
    }
    v105 = *(_QWORD *)(v84 + 16);
    if (v105)
    {
      *(_QWORD *)(v84 + 16) = 0;
      *(_DWORD *)(v84 + 24) = 0;
      WTF::fastFree(v105, v64, v65, v66, v67, v68, v69, v70);
    }
    v106 = *(_QWORD *)(v84 + 8);
    if (v106)
    {
      v107 = (uint64_t *)(v106 - 16);
      v108 = *(_QWORD *)(((v106 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v109 = *(uint64_t **)(v106 - 8);
      if (v109)
      {
        v110 = *v107;
        *v109 = *v107;
        *(_QWORD *)(v110 + 8) = v109;
        *v107 = 0;
        v107[1] = 0;
      }
      *v107 = *(_QWORD *)(v108 + 40);
      *(_QWORD *)(v108 + 40) = v107;
      *(_QWORD *)(v84 + 8) = 0;
    }
    WTF::fastFree(v84, v64, v65, v66, v67, v68, v69, v70);
  }
  v111 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v111, v64, v65, v66, v67, v68, v69, v70);
  }
}

WTF::StringImpl ***WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(WTF::StringImpl ***a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v9;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *a1;
  if (*a1)
  {
    v11 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v11)
    {
      v12 = *a1;
      do
      {
        v13 = *v12;
        if (*v12 != (WTF::StringImpl *)-1)
        {
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
            {
              WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
            }
            else
            {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
        ++v12;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((unint64_t)(v9 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::BytecodeGenerator::pushLexicalScopeInternal(uint64_t a1, JSC::VariableEnvironment *this, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t SlowCase;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC::SymbolTable *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  int v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 *v144;
  int v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v163;
  unsigned int v164;
  int v165;
  char v166;
  uint64_t *v167;
  WTF::StringImpl *v168;
  __int16 v169;
  __int128 v170;
  uint64_t v171;
  char v172;
  uint64_t v173;

  v8 = a7;
  v9 = a4;
  v173 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    LODWORD(v12) = *(_DWORD *)(v12 - 12);
  v13 = (_QWORD *)*((_QWORD *)this + 2);
  if (v13)
  {
    v13 = (_QWORD *)*v13;
    if (v13)
      LODWORD(v13) = *((_DWORD *)v13 - 3);
  }
  if (!((_DWORD)v12 + (_DWORD)v13))
    return;
  v164 = a6;
  v165 = a8;
  v163 = a3;
  if ((*(_BYTE *)(a1 + 104) & 1) != 0 && !*(_BYTE *)(a1 + 707))
    JSC::VariableEnvironment::markAllVariablesAsCaptured((uint64_t *)this);
  v14 = *(_QWORD *)(a1 + 696);
  SlowCase = *(_QWORD *)(v14 + 40048);
  if (SlowCase < *(_QWORD *)(v14 + 40056))
    goto LABEL_8;
  SlowCase = *(_QWORD *)(v14 + 40064);
  if ((SlowCase & 1) == 0)
  {
    v130 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 40072);
    *(_QWORD *)(v14 + 40056) = SlowCase + HIDWORD(v130);
    *(_QWORD *)(v14 + 40064) = SlowCase + (int)v130;
LABEL_8:
    *(_QWORD *)(v14 + 40048) = SlowCase + 64;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM(*(JSC **)(a1 + 696), this, a3, a4, (uint64_t)a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14 + 40024, v14 + 192, 64, 0, 0);
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  JSC::SymbolTable::SymbolTable(SlowCase, v14);
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  if (v8 <= 4)
    *(_BYTE *)(SlowCase + 21) = *(_BYTE *)(SlowCase + 21) & 0xE3 | (0x81408100CuLL >> (8 * v8));
  if (!v9)
    *(_BYTE *)(SlowCase + 21) |= 2u;
  v23 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v23 || (v131 = *v23) == 0)
  {
    v166 = 0;
    v24 = 1;
    goto LABEL_17;
  }
  v166 = 0;
  v24 = 1;
  if (v8 == 4 && *(_DWORD *)(v131 - 12))
  {
    v132 = (*(_DWORD *)(SlowCase + 16) + 1);
    *(_DWORD *)(SlowCase + 16) = v132;
    BYTE8(v170) = 0;
    v172 = 0;
    JSC::Symbols::privateClassBrandPrivateName[0] += 2;
    v168 = (WTF::StringImpl *)((v132 << 6) | 0xB);
    if ((_DWORD)v132 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19823352CLL);
    }
    JSC::SymbolTable::add<JSC::SymbolTableEntry>(SlowCase, (WTF::AtomStringImpl *)&v170, (WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, (uint64_t *)&v168, v19, v20, v21, v22);
    if ((v168 & 1) == 0)
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v168, v133, v134, v135, v136, v137, v138, v139);
    if (JSC::Symbols::privateClassBrandPrivateName[0] == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, (WTF::AtomStringImpl *)v133, v134, v135, v136, v137, v138, v139);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      JSC::Symbols::privateClassBrandPrivateName[0] -= 2;
    }
    if (v172 && (_BYTE)v171)
    {
      v140 = (unsigned __int8 *)*((_QWORD *)&v170 + 1);
      v141 = __ldxr(*((unsigned __int8 **)&v170 + 1));
      if (v141 == 1)
      {
        if (!__stlxr(0, *((unsigned __int8 **)&v170 + 1)))
          goto LABEL_162;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v140, 0, v134, v135, v136, v137, v138, v139);
    }
LABEL_162:
    v143 = (*(_DWORD *)(SlowCase + 16) + 1);
    *(_DWORD *)(SlowCase + 16) = v143;
    BYTE8(v170) = 0;
    v172 = 0;
    JSC::Symbols::privateBrandPrivateName[0] += 2;
    v168 = (WTF::StringImpl *)((v143 << 6) | 0xB);
    if ((_DWORD)v143 == -1)
    {
      __break(0xC471u);
LABEL_188:
      JUMPOUT(0x198233194);
    }
    JSC::SymbolTable::add<JSC::SymbolTableEntry>(SlowCase, (WTF::AtomStringImpl *)&v170, (WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, (uint64_t *)&v168, v136, v137, v138, v139);
    if ((v168 & 1) == 0)
      JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v168, v16, v17, v18, v19, v20, v21, v22);
    if (JSC::Symbols::privateBrandPrivateName[0] == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      JSC::Symbols::privateBrandPrivateName[0] -= 2;
    }
    if (!v172 || !(_BYTE)v171)
      goto LABEL_174;
    v144 = (unsigned __int8 *)*((_QWORD *)&v170 + 1);
    v145 = __ldxr(*((unsigned __int8 **)&v170 + 1));
    if (v145 == 1)
    {
      if (!__stlxr(0, *((unsigned __int8 **)&v170 + 1)))
        goto LABEL_174;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v144, 0, v17, v18, v19, v20, v21, v22);
LABEL_174:
    v24 = 0;
    v166 = 1;
  }
LABEL_17:
  v25 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v26 = *(unsigned int *)(v25 - 4);
    v27 = v25 + 16 * v26;
    if (*(_DWORD *)(v25 - 12))
    {
      v28 = *(_QWORD *)this;
      if ((_DWORD)v26)
      {
        v29 = 16 * v26;
        v28 = *(_QWORD *)this;
        while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
        {
          v28 += 16;
          v29 -= 16;
          if (!v29)
          {
            v28 = v27;
            goto LABEL_24;
          }
        }
      }
      goto LABEL_24;
    }
    v28 = v25 + 16 * v26;
  }
  else
  {
    v28 = 0;
    v26 = 0;
  }
  v27 = v25 + 16 * v26;
LABEL_24:
  if (v25)
    v30 = v25 + 16 * *(unsigned int *)(v25 - 4);
  else
    v30 = 0;
  while (v28 != v30)
  {
    v31 = *(int **)v28;
    if ((v24 & 1) != 0)
      goto LABEL_196;
    v38 = JSC::Symbols::privateClassBrandPrivateName[0];
    JSC::Symbols::privateClassBrandPrivateName[0] += 2;
    if (v38)
    {
      JSC::Symbols::privateClassBrandPrivateName[0] = v38;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateClassBrandPrivateName, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    if (v31 != JSC::Symbols::privateClassBrandPrivateName)
    {
      v39 = JSC::Symbols::privateBrandPrivateName[0];
      JSC::Symbols::privateBrandPrivateName[0] += 2;
      if (v39)
      {
        JSC::Symbols::privateBrandPrivateName[0] = v39;
      }
      else
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::privateBrandPrivateName, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
      }
      if (v31 != JSC::Symbols::privateBrandPrivateName)
      {
LABEL_196:
        v32 = *(_WORD *)(v28 + 8);
        if ((v32 & 0x60) != 0x20)
        {
          if ((v32 & 1) != 0)
          {
            v40 = (*(_DWORD *)(SlowCase + 16) + 1);
            *(_DWORD *)(SlowCase + 16) = v40;
            v41 = 11;
            if ((*(_WORD *)(v28 + 8) & 2) == 0)
              v41 = 9;
            v42 = v41 | (v40 << 6);
            v167 = (uint64_t *)v42;
            if ((_DWORD)v40 == -1)
              goto LABEL_159;
            v166 = 1;
          }
          else
          {
            if (v165 == 1)
            {
              v33 = *(_QWORD *)(a1 + 80);
              if (v33)
              {
                v34 = *(unsigned int *)(a1 + 100);
                v35 = *(_QWORD *)(a1 + 88);
                v36 = v33 - 1;
                do
                {
                  if (v36 >> 5 >= v34)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1982334DCLL);
                  }
                  if (*(_DWORD *)(*(_QWORD *)(v35 + 8 * (v36 >> 5)) + 12 * (v36 & 0x1F)))
                    break;
                  *(_QWORD *)(a1 + 80) = v36--;
                }
                while (v36 != -1);
              }
              v37 = (_DWORD *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister(a1);
              ++*v37;
            }
            else
            {
              v37 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
            }
            v43 = v37[1];
            if ((_DWORD)v43 == 0x3FFFFFFF)
            {
              if ((*(_WORD *)(v28 + 8) & 2) != 0)
                v142 = 0x3FFFFFFFCBLL;
              else
                v142 = 0x3FFFFFFFC9;
              v167 = (uint64_t *)v142;
LABEL_159:
              __break(0xC471u);
              JUMPOUT(0x198233388);
            }
            v44 = 11;
            if ((*(_WORD *)(v28 + 8) & 2) == 0)
              v44 = 9;
            v42 = v44 | (v43 << 6) | 0x20;
            v167 = (uint64_t *)v42;
          }
          if (*(_QWORD *)(SlowCase + 48))
          {
            __break(0xC471u);
            goto LABEL_188;
          }
          if ((v42 & 1) != 0)
            v42 = (uint64_t)&v167;
          v45 = *(_QWORD *)v42;
          if ((v45 & 0x30) <= 0x10)
          {
            v46 = v45 >> 6;
            v47 = *(_DWORD *)(SlowCase + 16);
            if (v47 == -1 || v47 < v46)
              *(_DWORD *)(SlowCase + 16) = v46;
          }
          if (v31)
            *v31 += 2;
          v168 = (WTF::StringImpl *)v31;
          WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::add<JSC::SymbolTableEntry&>((uint64_t *)(SlowCase + 8), (WTF::AtomStringImpl *)&v168, &v167, v18, v19, v20, v21, v22, (uint64_t)&v170);
          v48 = v168;
          v168 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
            {
              WTF::StringImpl::~StringImpl(v48, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
            else
            {
              *(_DWORD *)v48 -= 2;
            }
          }
          v49 = (uint64_t *)*((_QWORD *)this + 2);
          if (v49)
          {
            v113 = *v49;
            if (v113)
            {
              v114 = v31[4];
              if ((v114 & 0x20) != 0)
                v114 = v31[8];
              v115 = *(_DWORD *)(v113 - 8);
              v116 = v115 & (v114 >> 8);
              v117 = *(int **)(v113 + 16 * v116);
              if (v117 != v31)
              {
                v121 = 1;
                while (v117)
                {
                  v116 = ((_DWORD)v116 + v121) & v115;
                  v117 = *(int **)(v113 + 16 * v116);
                  ++v121;
                  if (v117 == v31)
                    goto LABEL_118;
                }
                v116 = *(unsigned int *)(v113 - 4);
              }
LABEL_118:
              if (v116 != *(_DWORD *)(v113 - 4))
              {
                v118 = *(WTF::StringImpl **)(v113 + 16 * v116);
                if (v118)
                  *(_DWORD *)v118 += 2;
                v168 = v118;
                v169 = *(_WORD *)(v113 + 16 * v116 + 8);
                v119 = *(_QWORD *)(SlowCase + 24);
                if (!v119)
                  v119 = JSC::SymbolTable::ensureRareDataSlow((JSC::SymbolTable *)SlowCase);
                WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>((uint64_t *)(v119 + 32), &v168, &v169, (uint64_t)&v170);
                v120 = v168;
                v168 = 0;
                if (v120)
                {
                  if (*(_DWORD *)v120 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v120, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
                    WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
                  }
                  else
                  {
                    *(_DWORD *)v120 -= 2;
                  }
                }
              }
            }
          }
          if ((v167 & 1) == 0)
            JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v167, v16, v17, v18, v19, v20, v21, v22);
        }
      }
    }
    v50 = v28 + 16;
    v28 = v27;
    if (v50 != v27)
    {
      v28 = v50;
      while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
      {
        v28 += 16;
        if (v28 == v27)
        {
          v28 = v27;
          break;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 104) & 2) != 0)
  {
    v75 = JSC::BytecodeGenerator::addConstantValue(a1, SlowCase);
    v76 = *(_DWORD *)(v75 + 4);
  }
  else
  {
    v75 = 0;
    v76 = 0;
  }
  if ((v166 & 1) != 0)
  {
    if (v165 == 1)
    {
      v84 = *(_QWORD *)(a1 + 80);
      if (v84)
      {
        v85 = *(unsigned int *)(a1 + 100);
        v86 = *(_QWORD *)(a1 + 88);
        v87 = v84 - 1;
        do
        {
          if (v87 >> 5 >= v85)
          {
            __break(0xC471u);
            JUMPOUT(0x198233504);
          }
          if (*(_DWORD *)(*(_QWORD *)(v86 + 8 * (v87 >> 5)) + 12 * (v87 & 0x1F)))
            break;
          *(_QWORD *)(a1 + 80) = v87--;
        }
        while (v87 != -1);
      }
      v77 = (int *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister(a1);
      ++*v77;
    }
    else
    {
      v77 = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::addVar(a1);
    }
    if (!v75)
    {
      v94 = JSC::SymbolTable::cloneScopePart((JSC::SymbolTable *)SlowCase, *(JSC::VM **)(a1 + 696), v88, v89, v90, v91, v92, v93);
      v75 = JSC::BytecodeGenerator::addConstantValue(a1, (uint64_t)v94);
      v76 = *(_DWORD *)(v75 + 4);
    }
    if (a5)
      *a5 = v75;
    v95 = v77[1];
    v96 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 4);
    if (v164)
      v97 = 10;
    else
      v97 = 0;
    v98 = *(unsigned int *)(JSC::BytecodeGenerator::addConstantValue(a1, v97) + 4);
    if ((JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v95, v96, v76, v98, v99, v100, v101) & 1) == 0&& (JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v95, v96, v76, v98, v20, v21, v22) & 1) == 0)
    {
      JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v95, v96, v76, v98, v20, v21, v22);
    }
    v104 = *(int **)(a1 + 248);
    if ((int *)(a1 + 208) != v104 && v104 && v104 != v77)
      JSC::BytecodeGenerator::emitMove(a1, v104, (uint64_t)v77, v102, v103, v20, v21, v22);
    v105 = *(_DWORD *)(a1 + 124);
    v106 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a1 + 424) = v106 + 1;
    v107 = v106 >> 4;
    v108 = *(unsigned int *)(a1 + 444);
    if (v106 >> 4 >= v108)
    {
      v109 = WTF::fastMalloc((WTF *)0x100);
      *(_QWORD *)&v170 = v109;
      v110 = *(unsigned int *)(a1 + 444);
      if ((_DWORD)v110 == *(_DWORD *)(a1 + 440))
      {
        v111 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 432, v110 + 1, (unint64_t)&v170);
        v110 = *(unsigned int *)(a1 + 444);
        *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v110) = *v111;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v110) = v109;
      }
      v108 = (v110 + 1);
      *(_DWORD *)(a1 + 444) = v108;
      v106 = *(_QWORD *)(a1 + 424) - 1;
      v107 = v106 >> 4;
    }
    if (v107 >= v108)
    {
      __break(0xC471u);
      JUMPOUT(0x19823350CLL);
    }
    v112 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v107) + 16 * (v106 & 0xF);
    *(_BYTE *)v112 = 0;
    *(_DWORD *)(v112 + 4) = v105 - 1;
    *(_QWORD *)(v112 + 8) = 0;
    ++*(_DWORD *)(a1 + 412);
  }
  else
  {
    v77 = 0;
  }
  v78 = (_QWORD *)(a1 + 112);
  *(_QWORD *)&v170 = SlowCase;
  *((_QWORD *)&v170 + 1) = v77;
  LOBYTE(v171) = 0;
  HIDWORD(v171) = v76;
  v79 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v79 == *(_DWORD *)(a1 + 120))
  {
    v80 = WTF::Vector<JSC::BytecodeGenerator::LexicalScopeStackEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v79 + 1, (unint64_t)&v170);
    v81 = *(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 124);
    v82 = *(_OWORD *)v80;
    v83 = *(_QWORD *)(v80 + 16);
  }
  else
  {
    v81 = *v78 + 24 * v79;
    v82 = v170;
    v83 = v171;
  }
  *(_QWORD *)(v81 + 16) = v83;
  *(_OWORD *)v81 = v82;
  ++*(_DWORD *)(a1 + 124);
  JSC::BytecodeGenerator::pushTDZVariables(a1, *(WTF::AtomStringImpl **)this, *((uint64_t **)this + 2), v163, v164, v20, v21, v22);
  if (!v164)
    JSC::BytecodeGenerator::emitPrefillStackTDZVariables((unsigned int *)a1, *(_QWORD *)this, SlowCase);
}

void JSC::BytecodeGenerator::liftTDZCheckIfPossible(uint64_t a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  if (this)
    *(_DWORD *)this += 2;
  v8 = *(unsigned int *)(a1 + 156);
  while (v8)
  {
    --v8;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16 * v8);
    if (v9)
    {
      v10 = *((_DWORD *)this + 4);
      if ((v10 & 0x20) != 0)
        v10 = *((_DWORD *)this + 8);
      v11 = *(_DWORD *)(v9 - 8);
      v12 = v11 & (v10 >> 8);
      v13 = *(WTF::StringImpl **)(v9 + 16 * v12);
      if (v13 != this)
      {
        v23 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v23) & v11;
          v13 = *(WTF::StringImpl **)(v9 + 16 * v12);
          ++v23;
          if (v13 == this)
            goto LABEL_9;
        }
        v12 = *(unsigned int *)(v9 - 4);
      }
LABEL_9:
      v14 = v9 + 16 * v12;
      v9 += 16 * *(unsigned int *)(v9 - 4);
    }
    else
    {
      v14 = 0;
    }
    if (v14 != v9)
    {
      if (*(_DWORD *)(v14 + 8) == 1)
        *(_DWORD *)(v14 + 8) = 0;
      break;
    }
  }
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::~StringImpl(this, this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
  }
}

uint64_t JSC::BytecodeGenerator::emitIsUndefined(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;

  v11 = JSC::BytecodeGenerator::emitLoad(a1, 0, 10, a4, a5, a6, a7, a8);
  return JSC::BytecodeGenerator::emitEqualityOp<JSC::OpStricteq>(a1, a2, a3, (uint64_t)v11, v12, v13, v14, v15, v16);
}

uint64_t JSC::BytecodeGenerator::emitJumpIfFalse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  signed int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  signed int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  BOOL v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  BOOL v105;
  int v106;
  _BOOL4 v107;
  _BOOL4 v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  unsigned int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  BOOL v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  BOOL v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  int v161;
  int v162;
  int v163;
  int v164;
  BOOL v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  _BOOL4 v179;
  _BOOL4 v180;
  unsigned __int8 *v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  _BOOL4 v188;
  _BOOL4 v189;
  uint64_t v190;
  unsigned __int8 *v191;
  int v192;
  int v193;
  int v194;
  int v195;
  BOOL v196;
  unsigned int v197;
  uint64_t v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 *v212;
  int v213;
  int v214;
  int v215;
  int v216;
  BOOL v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 *v225;
  int v226;
  int v227;
  int v228;
  int v229;
  BOOL v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BOOL4 v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  unsigned int v243;
  unsigned int v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  char *v261;
  char *v262;
  char *v263;
  _BOOL4 v264;
  _BOOL4 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  unsigned int v270;
  unsigned int v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  unsigned __int8 *v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  BOOL v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  char *v314;
  char *v315;
  char *v316;
  int v317;
  int v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  char *v335;
  char *v336;
  _BYTE *v337;
  _BYTE *v338;
  int v339;
  int v340;
  unsigned __int8 v341[4];
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  char v345;

  v8 = a3;
  v11 = *(_DWORD *)(a1 + 36);
  switch(v11)
  {
    case 144:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v125 = *(unsigned int *)(a1 + 48);
      v126 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v125);
      v127 = *v126;
      if (v127 == 128)
      {
        v317 = *((__int16 *)v126 + 1);
        v129 = v317 + 1073741760;
        if (v317 <= 63)
          v129 = *((__int16 *)v126 + 1);
        v130 = *((__int16 *)v126 + 2);
        if (v130 > 63)
          v130 += 1073741760;
        v131 = *((__int16 *)v126 + 3);
        v132 = v131 + 1073741760;
        v133 = v131 <= 63;
      }
      else
      {
        if (v127 == 130)
        {
          v129 = *(_DWORD *)(v126 + 2);
          v130 = *(_DWORD *)(v126 + 6);
          v131 = *(_DWORD *)(v126 + 10);
          goto LABEL_159;
        }
        v128 = (char)v126[1];
        v129 = v128 + 1073741808;
        if (v128 <= 15)
          v129 = (char)v126[1];
        v130 = (char)v126[2];
        if (v130 > 15)
          v130 += 1073741808;
        v131 = (char)v126[3];
        v132 = v131 + 1073741808;
        v133 = v131 <= 15;
      }
      if (!v133)
        v131 = v132;
LABEL_159:
      if (*(_DWORD *)(a2 + 4) != v129 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v125;
      *(_DWORD *)(a1 + 16) = v125;
      *(_BYTE *)(a3 + 8) = 1;
      v134 = v130;
      v135 = v131;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJneq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v130, v131, v341, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJneq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v134, v135, v341, v136, v137, v138, v139);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJneq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v134, v135, v341, v140, v141, v142, v143);
        }
      }
      return result;
    case 145:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v144 = *(unsigned int *)(a1 + 48);
      v145 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v144);
      v146 = *v145;
      if (v146 == 128)
      {
        v319 = *((__int16 *)v145 + 1);
        v148 = v319 + 1073741760;
        if (v319 <= 63)
          v148 = *((__int16 *)v145 + 1);
        v149 = *((__int16 *)v145 + 2);
        if (v149 > 63)
          v149 += 1073741760;
        v150 = *((__int16 *)v145 + 3);
        v151 = v150 + 1073741760;
        v152 = v150 <= 63;
      }
      else
      {
        if (v146 == 130)
        {
          v148 = *(_DWORD *)(v145 + 2);
          v149 = *(_DWORD *)(v145 + 6);
          v150 = *(_DWORD *)(v145 + 10);
          goto LABEL_175;
        }
        v147 = (char)v145[1];
        v148 = v147 + 1073741808;
        if (v147 <= 15)
          v148 = (char)v145[1];
        v149 = (char)v145[2];
        if (v149 > 15)
          v149 += 1073741808;
        v150 = (char)v145[3];
        v151 = v150 + 1073741808;
        v152 = v150 <= 15;
      }
      if (!v152)
        v150 = v151;
LABEL_175:
      if (*(_DWORD *)(a2 + 4) != v148 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v144;
      *(_DWORD *)(a1 + 16) = v144;
      *(_BYTE *)(a3 + 8) = 1;
      v153 = v149;
      v154 = v150;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJeq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v149, v150, v341, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJeq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v153, v154, v341);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJeq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v153, v154, v341, v155, v156, v157, v158);
        }
      }
      return result;
    case 146:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v60 = *(unsigned int *)(a1 + 48);
      v61 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v60);
      v62 = *v61;
      if (v62 == 128)
      {
        v339 = *((__int16 *)v61 + 1);
        v64 = v339 + 1073741760;
        if (v339 <= 63)
          v64 = *((__int16 *)v61 + 1);
        v65 = *((__int16 *)v61 + 2);
        if (v65 > 63)
          v65 += 1073741760;
        v66 = *((__int16 *)v61 + 3);
        v67 = v66 + 1073741760;
        v68 = v66 <= 63;
      }
      else
      {
        if (v62 == 130)
        {
          v64 = *(_DWORD *)(v61 + 2);
          v65 = *(_DWORD *)(v61 + 6);
          v66 = *(_DWORD *)(v61 + 10);
          goto LABEL_88;
        }
        v63 = (char)v61[1];
        v64 = v63 + 1073741808;
        if (v63 <= 15)
          v64 = (char)v61[1];
        v65 = (char)v61[2];
        if (v65 > 15)
          v65 += 1073741808;
        v66 = (char)v61[3];
        v67 = v66 + 1073741808;
        v68 = v66 <= 15;
      }
      if (!v68)
        v66 = v67;
LABEL_88:
      if (*(_DWORD *)(a2 + 4) != v64 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v60;
      *(_DWORD *)(a1 + 16) = v60;
      *(_BYTE *)(a3 + 8) = 1;
      v69 = v65;
      v70 = v66;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v65, v66, v341, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v69, v70, v341, v71, v72, v73, v74);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v69, v70, v341, v75, v76, v77, v78);
        }
      }
      return result;
    case 147:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v79 = *(unsigned int *)(a1 + 48);
      v80 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v79);
      v81 = *v80;
      if (v81 == 128)
      {
        v340 = *((__int16 *)v80 + 1);
        v83 = v340 + 1073741760;
        if (v340 <= 63)
          v83 = *((__int16 *)v80 + 1);
        v84 = *((__int16 *)v80 + 2);
        if (v84 > 63)
          v84 += 1073741760;
        v85 = *((__int16 *)v80 + 3);
        v86 = v85 + 1073741760;
        v87 = v85 <= 63;
      }
      else
      {
        if (v81 == 130)
        {
          v83 = *(_DWORD *)(v80 + 2);
          v84 = *(_DWORD *)(v80 + 6);
          v85 = *(_DWORD *)(v80 + 10);
          goto LABEL_104;
        }
        v82 = (char)v80[1];
        v83 = v82 + 1073741808;
        if (v82 <= 15)
          v83 = (char)v80[1];
        v84 = (char)v80[2];
        if (v84 > 15)
          v84 += 1073741808;
        v85 = (char)v80[3];
        v86 = v85 + 1073741808;
        v87 = v85 <= 15;
      }
      if (!v87)
        v85 = v86;
LABEL_104:
      if (*(_DWORD *)(a2 + 4) != v83 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v79;
      *(_DWORD *)(a1 + 16) = v79;
      *(_BYTE *)(a3 + 8) = 1;
      v88 = v84;
      v89 = v85;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v84, v85, v341, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v88, v89, v341, v90, v91, v92, v93);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v88, v89, v341, v94, v95, v96, v97);
        }
      }
      return result;
    case 148:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v12 = *(unsigned int *)(a1 + 48);
      v13 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v12);
      v14 = *v13;
      if (v14 == 128)
      {
        v15 = *((__int16 *)v13 + 1);
        if (v15 > 63)
          v15 += 1073741760;
        v313 = *((__int16 *)v13 + 2);
        if (v313 <= 63)
          v17 = *((__int16 *)v13 + 2);
        else
          v17 = v313 + 1073741760;
        v18 = *((__int16 *)v13 + 3);
        v19 = v18 + 1073741760;
        v20 = v18 <= 63;
      }
      else
      {
        if (v14 == 130)
        {
          v15 = *(_DWORD *)(v13 + 2);
          v17 = *(_DWORD *)(v13 + 6);
          v21 = *(_DWORD *)(v13 + 10);
          goto LABEL_14;
        }
        v15 = (char)v13[1];
        if (v15 > 15)
          v15 += 1073741808;
        v16 = (char)v13[2];
        if (v16 <= 15)
          v17 = (char)v13[2];
        else
          v17 = v16 + 1073741808;
        v18 = (char)v13[3];
        v19 = v18 + 1073741808;
        v20 = v18 <= 15;
      }
      if (v20)
        v21 = v18;
      else
        v21 = v19;
LABEL_14:
      if (*(_DWORD *)(a2 + 4) != v15 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v12;
      *(_DWORD *)(a1 + 16) = v12;
      *(_BYTE *)(a3 + 8) = 1;
      v341[0] = 1;
      v343 = a1;
      v344 = a3;
      v22 = (v17 - 1073741808) < 0x80;
      if (v17 <= 0x3FFFFFFF)
        v22 = (v17 + 128) < 0x90;
      if (v22)
      {
        v23 = (v21 - 1073741808) < 0x80;
        if (v21 <= 0x3FFFFFFF)
          v23 = (v21 + 128) < 0x90;
        if (v23)
        {
          v342 = v12;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x53, a3, a4, a5, a6, a7, a8);
          v345 = 83;
          v24 = *(unsigned int *)(a1 + 12);
          v25 = *(unsigned int *)(a1 + 16);
          if (v24 > v25)
          {
            *(_DWORD *)(a1 + 16) = v25 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v25) = 83;
            v28 = *(_DWORD *)(a1 + 12);
            v29 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if ((_DWORD)v24 == *(_DWORD *)(a1 + 8))
            {
              v261 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v345);
              v24 = *(unsigned int *)(a1 + 12);
              v26 = *(_QWORD *)a1;
              v27 = *v261;
            }
            else
            {
              v26 = *(_QWORD *)a1;
              v27 = 83;
            }
            *(_BYTE *)(v26 + v24) = v27;
            v28 = *(_DWORD *)(a1 + 12) + 1;
            v29 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v28;
            *(_DWORD *)(a1 + 16) = v29;
          }
          v30 = v17 + 16;
          if (v17 <= 0x3FFFFFFF)
            v30 = v17;
          v345 = v30;
          if (v28 > v29)
          {
            *(_DWORD *)(a1 + 16) = v29 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v29) = v30;
            v33 = *(_DWORD *)(a1 + 12);
            v34 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v31 = v28;
            if (v28 == *(_DWORD *)(a1 + 8))
            {
              v262 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v345);
              v31 = *(unsigned int *)(a1 + 12);
              v32 = *(_QWORD *)a1;
              v30 = *v262;
            }
            else
            {
              v32 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v32 + v31) = v30;
            v33 = *(_DWORD *)(a1 + 12) + 1;
            v34 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v33;
            *(_DWORD *)(a1 + 16) = v34;
          }
          v35 = v21 + 16;
          if (v21 <= 0x3FFFFFFF)
            v35 = v21;
          v345 = v35;
          if (v33 > v34)
          {
            *(_DWORD *)(a1 + 16) = v34 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v34) = v35;
          }
          else
          {
            v36 = v33;
            if (v33 == *(_DWORD *)(a1 + 8))
            {
              v263 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v345);
              v36 = *(unsigned int *)(a1 + 12);
              v37 = *(_QWORD *)a1;
              v35 = *v263;
            }
            else
            {
              v37 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v37 + v36) = v35;
            *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          }
          result = v8 + 16;
          v39 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v39 == *(_DWORD *)(v8 + 24))
          {
            v124 = v39 + 1;
            goto LABEL_420;
          }
          goto LABEL_40;
        }
      }
      v341[0] = 1;
      v343 = a1;
      v344 = a3;
      v264 = (v17 - 1073741760) < 0x8000;
      if (v17 <= 0x3FFFFFFF)
        v264 = (v17 + 0x8000) >> 6 < 0x201;
      if (!v264)
        goto LABEL_468;
      v265 = (v21 - 1073741760) < 0x8000;
      if (v21 <= 0x3FFFFFFF)
        v265 = (v21 + 0x8000) >> 6 < 0x201;
      if (v265)
      {
        v342 = v12;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x53, a3, a4, a5, a6, a7, a8);
        v345 = 0x80;
        v266 = *(unsigned int *)(a1 + 12);
        v267 = *(unsigned int *)(a1 + 16);
        if (v266 > v267)
        {
          *(_DWORD *)(a1 + 16) = v267 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v267) = 0x80;
          v270 = *(_DWORD *)(a1 + 12);
          v271 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v266 == *(_DWORD *)(a1 + 8))
          {
            v335 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v266 + 1), (unint64_t)&v345);
            v266 = *(unsigned int *)(a1 + 12);
            v268 = *(_QWORD *)a1;
            v269 = *v335;
          }
          else
          {
            v268 = *(_QWORD *)a1;
            v269 = 0x80;
          }
          *(_BYTE *)(v268 + v266) = v269;
          v270 = *(_DWORD *)(a1 + 12) + 1;
          v271 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v270;
          *(_DWORD *)(a1 + 16) = v271;
        }
        v272 = 83;
        v345 = 83;
        if (v270 > v271)
        {
          *(_DWORD *)(a1 + 16) = v271 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v271) = 83;
          v275 = *(_DWORD *)(a1 + 12);
          v276 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v273 = v270;
          if (v270 == *(_DWORD *)(a1 + 8))
          {
            v336 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v270 + 1), (unint64_t)&v345);
            v273 = *(unsigned int *)(a1 + 12);
            v274 = *(_QWORD *)a1;
            v272 = *v336;
          }
          else
          {
            v274 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v274 + v273) = v272;
          v275 = *(_DWORD *)(a1 + 12) + 1;
          v276 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v275;
          *(_DWORD *)(a1 + 16) = v276;
        }
        if (v17 > 0x3FFFFFFF)
          v17 += 64;
        v345 = v17;
        if (v275 > v276)
        {
          *(_DWORD *)(a1 + 16) = v276 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v276) = v17;
          v277 = *(_DWORD *)(a1 + 12);
          v278 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v275 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v275 + 1), (unint64_t)&v345);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v275) = v17;
          v277 = *(_DWORD *)(a1 + 12) + 1;
          v278 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v277;
          *(_DWORD *)(a1 + 16) = v278;
        }
        v279 = v17 >> 8;
        v345 = BYTE1(v17);
        if (v277 > v278)
        {
          *(_DWORD *)(a1 + 16) = v278 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v278) = BYTE1(v17);
          v282 = *(_DWORD *)(a1 + 12);
          v283 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v280 = v277;
          if (v277 == *(_DWORD *)(a1 + 8))
          {
            v337 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v277 + 1), (unint64_t)&v345);
            v280 = *(unsigned int *)(a1 + 12);
            v281 = *(_QWORD *)a1;
            LOBYTE(v279) = *v337;
          }
          else
          {
            v281 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v281 + v280) = v279;
          v282 = *(_DWORD *)(a1 + 12) + 1;
          v283 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v282;
          *(_DWORD *)(a1 + 16) = v283;
        }
        if (v21 > 0x3FFFFFFF)
          v21 += 64;
        v345 = v21;
        if (v282 > v283)
        {
          *(_DWORD *)(a1 + 16) = v283 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v283) = v21;
          v284 = *(_DWORD *)(a1 + 12);
          v285 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v282 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v282 + 1), (unint64_t)&v345);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v282) = v21;
          v284 = *(_DWORD *)(a1 + 12) + 1;
          v285 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v284;
          *(_DWORD *)(a1 + 16) = v285;
        }
        v286 = v21 >> 8;
        v345 = BYTE1(v21);
        if (v284 > v285)
        {
          *(_DWORD *)(a1 + 16) = v285 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v285) = BYTE1(v21);
        }
        else
        {
          v287 = v284;
          if (v284 == *(_DWORD *)(a1 + 8))
          {
            v338 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v284 + 1), (unint64_t)&v345);
            v287 = *(unsigned int *)(a1 + 12);
            v288 = *(_QWORD *)a1;
            LOBYTE(v286) = *v338;
          }
          else
          {
            v288 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v288 + v287) = v286;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        result = v8 + 16;
        v289 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v289 == *(_DWORD *)(v8 + 24))
        {
          result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v289 + 1, (unint64_t)&v342);
          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * *(unsigned int *)(v8 + 28)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)result + 4 * v289) = v12;
        }
        ++*(_DWORD *)(v8 + 28);
        v345 = 0;
        v290 = *(unsigned int *)(a1 + 12);
        v291 = *(unsigned int *)(a1 + 16);
        if (v290 > v291)
        {
          *(_DWORD *)(a1 + 16) = v291 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v291) = 0;
          v292 = *(_DWORD *)(a1 + 12);
          v293 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v290 == *(_DWORD *)(a1 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v290 + 1), (unint64_t)&v345);
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)a1 + v290) = 0;
          }
          v292 = *(_DWORD *)(a1 + 12) + 1;
          v293 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v292;
          *(_DWORD *)(a1 + 16) = v293;
        }
        v345 = 0;
        if (v292 <= v293)
        {
          v40 = v292;
          goto LABEL_42;
        }
        *(_DWORD *)(a1 + 16) = v293 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v293) = 0;
      }
      else
      {
LABEL_468:
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = a3;
        return JSC::OpJnless::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v17, v21, v341, a5, a6, a7, a8);
      }
      return result;
    case 149:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v12 = *(unsigned int *)(a1 + 48);
      v181 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v12);
      v182 = *v181;
      if (v182 == 128)
      {
        v183 = *((__int16 *)v181 + 1);
        if (v183 > 63)
          v183 += 1073741760;
        v334 = *((__int16 *)v181 + 2);
        if (v334 <= 63)
          v102 = *((__int16 *)v181 + 2);
        else
          v102 = v334 + 1073741760;
        v185 = *((__int16 *)v181 + 3);
        v186 = v185 + 1073741760;
        v187 = v185 <= 63;
      }
      else
      {
        if (v182 == 130)
        {
          v183 = *(_DWORD *)(v181 + 2);
          v102 = *(_DWORD *)(v181 + 6);
          v106 = *(_DWORD *)(v181 + 10);
          goto LABEL_231;
        }
        v183 = (char)v181[1];
        if (v183 > 15)
          v183 += 1073741808;
        v184 = (char)v181[2];
        if (v184 <= 15)
          v102 = (char)v181[2];
        else
          v102 = v184 + 1073741808;
        v185 = (char)v181[3];
        v186 = v185 + 1073741808;
        v187 = v185 <= 15;
      }
      if (v187)
        v106 = v185;
      else
        v106 = v186;
LABEL_231:
      if (*(_DWORD *)(a2 + 4) != v183 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v12;
      *(_DWORD *)(a1 + 16) = v12;
      *(_BYTE *)(a3 + 8) = 1;
      v341[0] = 1;
      v343 = a1;
      v344 = a3;
      v188 = (v102 - 1073741808) < 0x80;
      if (v102 <= 0x3FFFFFFF)
        v188 = (v102 + 128) < 0x90;
      if (v188)
      {
        v189 = (v106 - 1073741808) < 0x80;
        if (v106 <= 0x3FFFFFFF)
          v189 = (v106 + 128) < 0x90;
        if (v189)
        {
          v342 = v12;
          v109 = 84;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x54, a3, a4, a5, a6, a7, a8);
          v345 = 84;
          v110 = *(unsigned int *)(a1 + 12);
          v111 = *(unsigned int *)(a1 + 16);
          if (v110 > v111)
            goto LABEL_499;
          if ((_DWORD)v110 != *(_DWORD *)(a1 + 8))
          {
            v112 = *(_QWORD *)a1;
            v113 = 84;
            goto LABEL_134;
          }
          goto LABEL_395;
        }
      }
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJnlesseq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v102, v106, v341);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        return JSC::OpJnlesseq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v102, v106, v341, v330, v331, v332, v333);
      }
      return result;
    case 150:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v12 = *(unsigned int *)(a1 + 48);
      v98 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v12);
      v99 = *v98;
      if (v99 == 128)
      {
        v100 = *((__int16 *)v98 + 1);
        if (v100 > 63)
          v100 += 1073741760;
        v328 = *((__int16 *)v98 + 2);
        if (v328 <= 63)
          v102 = *((__int16 *)v98 + 2);
        else
          v102 = v328 + 1073741760;
        v103 = *((__int16 *)v98 + 3);
        v104 = v103 + 1073741760;
        v105 = v103 <= 63;
      }
      else
      {
        if (v99 == 130)
        {
          v100 = *(_DWORD *)(v98 + 2);
          v102 = *(_DWORD *)(v98 + 6);
          v106 = *(_DWORD *)(v98 + 10);
          goto LABEL_122;
        }
        v100 = (char)v98[1];
        if (v100 > 15)
          v100 += 1073741808;
        v101 = (char)v98[2];
        if (v101 <= 15)
          v102 = (char)v98[2];
        else
          v102 = v101 + 1073741808;
        v103 = (char)v98[3];
        v104 = v103 + 1073741808;
        v105 = v103 <= 15;
      }
      if (v105)
        v106 = v103;
      else
        v106 = v104;
LABEL_122:
      if (*(_DWORD *)(a2 + 4) != v100 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v12;
      *(_DWORD *)(a1 + 16) = v12;
      *(_BYTE *)(a3 + 8) = 1;
      v341[0] = 1;
      v343 = a1;
      v344 = a3;
      v107 = (v102 - 1073741808) < 0x80;
      if (v102 <= 0x3FFFFFFF)
        v107 = (v102 + 128) < 0x90;
      if (v107)
      {
        v108 = (v106 - 1073741808) < 0x80;
        if (v106 <= 0x3FFFFFFF)
          v108 = (v106 + 128) < 0x90;
        if (v108)
        {
          v342 = v12;
          v109 = 85;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x55, a3, a4, a5, a6, a7, a8);
          v345 = 85;
          v110 = *(unsigned int *)(a1 + 12);
          v111 = *(unsigned int *)(a1 + 16);
          if (v110 > v111)
            goto LABEL_499;
          if ((_DWORD)v110 != *(_DWORD *)(a1 + 8))
          {
            v112 = *(_QWORD *)a1;
            v113 = 85;
            goto LABEL_134;
          }
          goto LABEL_395;
        }
      }
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJngreater::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v102, v106, v341);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        return JSC::OpJngreater::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v102, v106, v341, v320, v321, v322, v323);
      }
      return result;
    case 151:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v12 = *(unsigned int *)(a1 + 48);
      v172 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v12);
      v173 = *v172;
      if (v173 == 128)
      {
        v174 = *((__int16 *)v172 + 1);
        if (v174 > 63)
          v174 += 1073741760;
        v329 = *((__int16 *)v172 + 2);
        if (v329 <= 63)
          v102 = *((__int16 *)v172 + 2);
        else
          v102 = v329 + 1073741760;
        v176 = *((__int16 *)v172 + 3);
        v177 = v176 + 1073741760;
        v178 = v176 <= 63;
      }
      else
      {
        if (v173 == 130)
        {
          v174 = *(_DWORD *)(v172 + 2);
          v102 = *(_DWORD *)(v172 + 6);
          v106 = *(_DWORD *)(v172 + 10);
          goto LABEL_207;
        }
        v174 = (char)v172[1];
        if (v174 > 15)
          v174 += 1073741808;
        v175 = (char)v172[2];
        if (v175 <= 15)
          v102 = (char)v172[2];
        else
          v102 = v175 + 1073741808;
        v176 = (char)v172[3];
        v177 = v176 + 1073741808;
        v178 = v176 <= 15;
      }
      if (v178)
        v106 = v176;
      else
        v106 = v177;
LABEL_207:
      if (*(_DWORD *)(a2 + 4) != v174 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v12;
      *(_DWORD *)(a1 + 16) = v12;
      *(_BYTE *)(a3 + 8) = 1;
      v341[0] = 1;
      v343 = a1;
      v344 = a3;
      v179 = (v102 - 1073741808) < 0x80;
      if (v102 <= 0x3FFFFFFF)
        v179 = (v102 + 128) < 0x90;
      if (!v179)
        goto LABEL_421;
      v180 = (v106 - 1073741808) < 0x80;
      if (v106 <= 0x3FFFFFFF)
        v180 = (v106 + 128) < 0x90;
      if (v180)
      {
        v342 = v12;
        v109 = 86;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x56, a3, a4, a5, a6, a7, a8);
        v345 = 86;
        v110 = *(unsigned int *)(a1 + 12);
        v111 = *(unsigned int *)(a1 + 16);
        if (v110 > v111)
        {
LABEL_499:
          *(_DWORD *)(a1 + 16) = v111 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v111) = v109;
          v114 = *(_DWORD *)(a1 + 12);
          v115 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v110 == *(_DWORD *)(a1 + 8))
          {
LABEL_395:
            v314 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v110 + 1), (unint64_t)&v345);
            v110 = *(unsigned int *)(a1 + 12);
            v112 = *(_QWORD *)a1;
            v113 = *v314;
          }
          else
          {
            v112 = *(_QWORD *)a1;
            v113 = 86;
          }
LABEL_134:
          *(_BYTE *)(v112 + v110) = v113;
          v114 = *(_DWORD *)(a1 + 12) + 1;
          v115 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v114;
          *(_DWORD *)(a1 + 16) = v115;
        }
        v116 = v102 + 16;
        if (v102 <= 0x3FFFFFFF)
          v116 = v102;
        v345 = v116;
        if (v114 > v115)
        {
          *(_DWORD *)(a1 + 16) = v115 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v115) = v116;
          v119 = *(_DWORD *)(a1 + 12);
          v120 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v117 = v114;
          if (v114 == *(_DWORD *)(a1 + 8))
          {
            v315 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v114 + 1), (unint64_t)&v345);
            v117 = *(unsigned int *)(a1 + 12);
            v118 = *(_QWORD *)a1;
            v116 = *v315;
          }
          else
          {
            v118 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v118 + v117) = v116;
          v119 = *(_DWORD *)(a1 + 12) + 1;
          v120 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v119;
          *(_DWORD *)(a1 + 16) = v120;
        }
        v121 = v106 + 16;
        if (v106 <= 0x3FFFFFFF)
          v121 = v106;
        v345 = v121;
        if (v119 > v120)
        {
          *(_DWORD *)(a1 + 16) = v120 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v120) = v121;
        }
        else
        {
          v122 = v119;
          if (v119 == *(_DWORD *)(a1 + 8))
          {
            v316 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v119 + 1), (unint64_t)&v345);
            v122 = *(unsigned int *)(a1 + 12);
            v123 = *(_QWORD *)a1;
            v121 = *v316;
          }
          else
          {
            v123 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v123 + v122) = v121;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        result = v8 + 16;
        v39 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v39 == *(_DWORD *)(v8 + 24))
        {
          v124 = v39 + 1;
LABEL_420:
          result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v124, (unint64_t)&v342);
          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * *(unsigned int *)(v8 + 28)) = *(_DWORD *)result;
        }
        else
        {
LABEL_40:
          *(_DWORD *)(*(_QWORD *)result + 4 * v39) = v12;
        }
        ++*(_DWORD *)(v8 + 28);
        v345 = 0;
        v40 = *(unsigned int *)(a1 + 12);
        v41 = *(unsigned int *)(a1 + 16);
        if (v40 <= v41)
        {
LABEL_42:
          if ((_DWORD)v40 == *(_DWORD *)(a1 + 8))
            goto LABEL_325;
          *(_BYTE *)(*(_QWORD *)a1 + v40) = 0;
          goto LABEL_73;
        }
        *(_DWORD *)(a1 + 16) = v41 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v41) = 0;
      }
      else
      {
LABEL_421:
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = a3;
        result = JSC::OpJngreatereq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v102, v106, v341);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJngreatereq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v102, v106, v341, v324, v325, v326, v327);
        }
      }
      return result;
    case 152:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v294 = *(unsigned int *)(a1 + 48);
      v295 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v294);
      v296 = *v295;
      if (v296 == 128)
      {
        v318 = *((__int16 *)v295 + 1);
        v298 = v318 + 1073741760;
        if (v318 <= 63)
          v298 = *((__int16 *)v295 + 1);
        v299 = *((__int16 *)v295 + 2);
        if (v299 > 63)
          v299 += 1073741760;
        v300 = *((__int16 *)v295 + 3);
        v301 = v300 + 1073741760;
        v302 = v300 <= 63;
      }
      else
      {
        if (v296 == 130)
        {
          v298 = *(_DWORD *)(v295 + 2);
          v299 = *(_DWORD *)(v295 + 6);
          v300 = *(_DWORD *)(v295 + 10);
          goto LABEL_383;
        }
        v297 = (char)v295[1];
        v298 = v297 + 1073741808;
        if (v297 <= 15)
          v298 = (char)v295[1];
        v299 = (char)v295[2];
        if (v299 > 15)
          v299 += 1073741808;
        v300 = (char)v295[3];
        v301 = v300 + 1073741808;
        v302 = v300 <= 15;
      }
      if (!v302)
        v300 = v301;
LABEL_383:
      if (*(_DWORD *)(a2 + 4) != v298 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v294;
      *(_DWORD *)(a1 + 16) = v294;
      *(_BYTE *)(a3 + 8) = 1;
      v303 = v300;
      v304 = v299;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v300, v299, v341, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v303, v304, v341, v305, v306, v307, v308);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJbeloweq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v303, v304, v341, v309, v310, v311, v312);
        }
      }
      return result;
    case 153:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      result = JSC::BytecodeGenerator::fuseCompareAndJump<JSC::OpBeloweq,JSC::OpJbelow>(a1, a2, a3);
      if ((result & 1) == 0)
        goto LABEL_45;
      return result;
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
      goto LABEL_45;
    case 166:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v211 = *(unsigned int *)(a1 + 48);
      v212 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v211);
      v213 = *v212;
      if (v213 == 128)
      {
        v214 = *((__int16 *)v212 + 1);
        if (v214 > 63)
          v214 += 1073741760;
        v215 = *((__int16 *)v212 + 2);
        v216 = v215 + 1073741760;
        v217 = v215 <= 63;
      }
      else
      {
        if (v213 == 130)
        {
          v214 = *(_DWORD *)(v212 + 2);
          v215 = *(_DWORD *)(v212 + 6);
          goto LABEL_270;
        }
        v214 = (char)v212[1];
        if (v214 > 15)
          v214 += 1073741808;
        v215 = (char)v212[2];
        v216 = v215 + 1073741808;
        v217 = v215 <= 15;
      }
      if (!v217)
        v215 = v216;
LABEL_270:
      if (*(_DWORD *)(a2 + 4) != v214 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      v218 = v215;
      *(_DWORD *)(a1 + 12) = v211;
      *(_DWORD *)(a1 + 16) = v211;
      *(_BYTE *)(a3 + 8) = 1;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v215, v341, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v218, v341);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v218, v341, v219, v220, v221, v222, v223);
        }
      }
      return result;
    case 167:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v159 = *(unsigned int *)(a1 + 48);
      v160 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v159);
      v161 = *v160;
      if (v161 == 128)
      {
        v162 = *((__int16 *)v160 + 1);
        if (v162 > 63)
          v162 += 1073741760;
        v163 = *((__int16 *)v160 + 2);
        v164 = v163 + 1073741760;
        v165 = v163 <= 63;
      }
      else
      {
        if (v161 == 130)
        {
          v162 = *(_DWORD *)(v160 + 2);
          v163 = *(_DWORD *)(v160 + 6);
          goto LABEL_189;
        }
        v162 = (char)v160[1];
        if (v162 > 15)
          v162 += 1073741808;
        v163 = (char)v160[2];
        v164 = v163 + 1073741808;
        v165 = v163 <= 15;
      }
      if (!v165)
        v163 = v164;
LABEL_189:
      if (*(_DWORD *)(a2 + 4) != v162 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      v166 = v163;
      *(_DWORD *)(a1 + 12) = v159;
      *(_DWORD *)(a1 + 16) = v159;
      *(_BYTE *)(a3 + 8) = 1;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v163, v341, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v166, v341);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v166, v341, v167, v168, v169, v170, v171);
        }
      }
      return result;
    case 174:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_45;
      v224 = *(unsigned int *)(a1 + 48);
      v225 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v224);
      v226 = *v225;
      if (v226 == 128)
      {
        v227 = *((__int16 *)v225 + 1);
        if (v227 > 63)
          v227 += 1073741760;
        v228 = *((__int16 *)v225 + 2);
        v229 = v228 + 1073741760;
        v230 = v228 <= 63;
      }
      else
      {
        if (v226 == 130)
        {
          v227 = *(_DWORD *)(v225 + 2);
          v228 = *(_DWORD *)(v225 + 6);
          goto LABEL_286;
        }
        v227 = (char)v225[1];
        if (v227 > 15)
          v227 += 1073741808;
        v228 = (char)v225[2];
        v229 = v228 + 1073741808;
        v230 = v228 <= 15;
      }
      if (!v230)
        v228 = v229;
LABEL_286:
      if (*(_DWORD *)(a2 + 4) != v227 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_45;
      *(_DWORD *)(a1 + 36) = 115;
      v231 = v228;
      *(_DWORD *)(a1 + 12) = v224;
      *(_DWORD *)(a1 + 16) = v224;
      *(_BYTE *)(a3 + 8) = 1;
      v341[0] = 1;
      v342 = 0;
      v343 = a1;
      v344 = a3;
      result = JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v228, v341, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = 1;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v231, v341);
        if ((result & 1) == 0)
        {
          v341[0] = 1;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJnundefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v231, v341, v232, v233, v234, v235, v236);
        }
      }
      return result;
    default:
      if (v11 != 184)
        goto LABEL_45;
      v190 = *(unsigned int *)(a1 + 48);
      v191 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v190);
      v192 = *v191;
      if (v192 == 128)
      {
        v193 = *((__int16 *)v191 + 1);
        if (v193 > 63)
          v193 += 1073741760;
        v194 = *((__int16 *)v191 + 2);
        v195 = v194 + 1073741760;
        v196 = v194 <= 63;
      }
      else
      {
        if (v192 == 130)
        {
          v193 = *(_DWORD *)(v191 + 2);
          v194 = *(_DWORD *)(v191 + 6);
          goto LABEL_250;
        }
        v193 = (char)v191[1];
        if (v193 > 15)
          v193 += 1073741808;
        v194 = (char)v191[2];
        v195 = v194 + 1073741808;
        v196 = v194 <= 15;
      }
      if (!v196)
        v194 = v195;
LABEL_250:
      if (*(_DWORD *)(a2 + 4) != v193 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
      {
LABEL_45:
        v42 = *(_DWORD *)(a2 + 4);
        *(_BYTE *)(v8 + 8) = 1;
        v43 = *(unsigned int *)(v8 + 4);
        if ((_DWORD)v43 == -1)
          v44 = v8;
        else
          v44 = *(unsigned int *)(v8 + 4);
        if ((_DWORD)v43 == -1)
          v45 = 1;
        else
          v45 = 2;
        if (v43 == 0xFFFFFFFFLL)
          v46 = 1;
        else
          v46 = 2;
        v341[0] = v46;
        v343 = a1;
        v344 = v44;
        v47 = (v42 - 1073741808) < 0x80;
        if (v42 <= 0x3FFFFFFF)
          v47 = (v42 + 128) < 0x90;
        if (v47)
        {
          v48 = *(_DWORD *)(a1 + 16);
          if ((_DWORD)v43 == -1)
          {
            v342 = *(_DWORD *)(a1 + 16);
            goto LABEL_59;
          }
          v48 = v44 - v48;
          v342 = v48;
          if (v48 == (char)v48)
          {
LABEL_59:
            result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x45, a3, a4, a5, a6, a7, a8);
            v345 = 69;
            v49 = *(unsigned int *)(a1 + 12);
            v50 = *(unsigned int *)(a1 + 16);
            if (v49 > v50)
            {
              *(_DWORD *)(a1 + 16) = v50 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v50) = 69;
              v53 = *(_DWORD *)(a1 + 12);
              v54 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v49 == *(_DWORD *)(a1 + 8))
              {
                result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v345);
                v49 = *(unsigned int *)(a1 + 12);
                v51 = *(_QWORD *)a1;
                v52 = *(_BYTE *)result;
              }
              else
              {
                v51 = *(_QWORD *)a1;
                v52 = 69;
              }
              *(_BYTE *)(v51 + v49) = v52;
              v53 = *(_DWORD *)(a1 + 12) + 1;
              v54 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v53;
              *(_DWORD *)(a1 + 16) = v54;
            }
            v55 = v42 + 16;
            if (v42 <= 0x3FFFFFFF)
              v55 = v42;
            v345 = v55;
            if (v53 > v54)
            {
              *(_DWORD *)(a1 + 16) = v54 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v54) = v55;
            }
            else
            {
              v56 = v53;
              if (v53 == *(_DWORD *)(a1 + 8))
              {
                result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v53 + 1), (unint64_t)&v345);
                v56 = *(unsigned int *)(a1 + 12);
                v57 = *(_QWORD *)a1;
                v55 = *(_BYTE *)result;
              }
              else
              {
                v57 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v57 + v56) = v55;
              *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
            }
            if ((_DWORD)v43 == -1)
            {
              v59 = *(unsigned int *)(v8 + 28);
              if ((_DWORD)v59 == *(_DWORD *)(v8 + 24))
              {
                result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 16, v59 + 1, (unint64_t)&v342);
                LOBYTE(v48) = 0;
                *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * *(unsigned int *)(v8 + 28)) = *(_DWORD *)result;
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v59) = v48;
                LOBYTE(v48) = 0;
              }
              ++*(_DWORD *)(v8 + 28);
            }
            v345 = v48;
            v40 = *(unsigned int *)(a1 + 12);
            v58 = *(unsigned int *)(a1 + 16);
            if (v40 > v58)
            {
              *(_DWORD *)(a1 + 16) = v58 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v58) = v48;
              return result;
            }
            if ((_DWORD)v40 != *(_DWORD *)(a1 + 8))
            {
              *(_BYTE *)(*(_QWORD *)a1 + v40) = v48;
LABEL_73:
              *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
              return result;
            }
            goto LABEL_325;
          }
        }
        v341[0] = v45;
        v343 = a1;
        v344 = v44;
        v237 = (v42 - 1073741760) < 0x8000;
        if (v42 <= 0x3FFFFFFF)
          v237 = (v42 + 0x8000) >> 6 < 0x201;
        if (v237)
        {
          v238 = *(_DWORD *)(a1 + 16);
          if ((_DWORD)v43 == -1)
          {
            v342 = *(_DWORD *)(a1 + 16);
            goto LABEL_298;
          }
          v238 = v44 - v238;
          v342 = v238;
          if (v238 == (__int16)v238)
          {
LABEL_298:
            result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x45, a3, a4, a5, a6, a7, a8);
            v345 = 0x80;
            v239 = *(unsigned int *)(a1 + 12);
            v240 = *(unsigned int *)(a1 + 16);
            if (v239 > v240)
            {
              *(_DWORD *)(a1 + 16) = v240 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v240) = 0x80;
              v243 = *(_DWORD *)(a1 + 12);
              v244 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v239 == *(_DWORD *)(a1 + 8))
              {
                result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v239 + 1), (unint64_t)&v345);
                v239 = *(unsigned int *)(a1 + 12);
                v241 = *(_QWORD *)a1;
                v242 = *(_BYTE *)result;
              }
              else
              {
                v241 = *(_QWORD *)a1;
                v242 = 0x80;
              }
              *(_BYTE *)(v241 + v239) = v242;
              v243 = *(_DWORD *)(a1 + 12) + 1;
              v244 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v243;
              *(_DWORD *)(a1 + 16) = v244;
            }
            v245 = 69;
            v345 = 69;
            if (v243 > v244)
            {
              *(_DWORD *)(a1 + 16) = v244 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v244) = 69;
              v248 = *(_DWORD *)(a1 + 12);
              v249 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v246 = v243;
              if (v243 == *(_DWORD *)(a1 + 8))
              {
                result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v243 + 1), (unint64_t)&v345);
                v246 = *(unsigned int *)(a1 + 12);
                v247 = *(_QWORD *)a1;
                v245 = *(_BYTE *)result;
              }
              else
              {
                v247 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v247 + v246) = v245;
              v248 = *(_DWORD *)(a1 + 12) + 1;
              v249 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v248;
              *(_DWORD *)(a1 + 16) = v249;
            }
            if (v42 > 0x3FFFFFFF)
              v42 += 64;
            v345 = v42;
            if (v248 > v249)
            {
              *(_DWORD *)(a1 + 16) = v249 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v249) = v42;
              v250 = *(_DWORD *)(a1 + 12);
              v251 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if (v248 == *(_DWORD *)(a1 + 8))
              {
                result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v248 + 1), (unint64_t)&v345);
                *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
              }
              else
              {
                *(_BYTE *)(*(_QWORD *)a1 + v248) = v42;
              }
              v250 = *(_DWORD *)(a1 + 12) + 1;
              v251 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v250;
              *(_DWORD *)(a1 + 16) = v251;
            }
            v252 = v42 >> 8;
            v345 = BYTE1(v42);
            if (v250 > v251)
            {
              *(_DWORD *)(a1 + 16) = v251 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v251) = BYTE1(v42);
            }
            else
            {
              v253 = v250;
              if (v250 == *(_DWORD *)(a1 + 8))
              {
                result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v250 + 1), (unint64_t)&v345);
                v253 = *(unsigned int *)(a1 + 12);
                v254 = *(_QWORD *)a1;
                LOBYTE(v252) = *(_BYTE *)result;
              }
              else
              {
                v254 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v254 + v253) = v252;
              *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
            }
            if ((_DWORD)v43 == -1)
            {
              v260 = *(unsigned int *)(v8 + 28);
              if ((_DWORD)v260 == *(_DWORD *)(v8 + 24))
              {
                result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 16, v260 + 1, (unint64_t)&v342);
                LOBYTE(v238) = 0;
                LOBYTE(v255) = 0;
                *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * (*(_DWORD *)(v8 + 28))++) = *(_DWORD *)result;
              }
              else
              {
                LOBYTE(v255) = 0;
                *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v260) = v238;
                ++*(_DWORD *)(v8 + 28);
                LOBYTE(v238) = 0;
              }
            }
            else
            {
              v255 = v238 >> 8;
            }
            v345 = v238;
            v256 = *(unsigned int *)(a1 + 12);
            v257 = *(unsigned int *)(a1 + 16);
            if (v256 > v257)
            {
              *(_DWORD *)(a1 + 16) = v257 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v257) = v238;
              v258 = *(_DWORD *)(a1 + 12);
              v259 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v256 == *(_DWORD *)(a1 + 8))
              {
                result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v256 + 1), (unint64_t)&v345);
                *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
              }
              else
              {
                *(_BYTE *)(*(_QWORD *)a1 + v256) = v238;
              }
              v258 = *(_DWORD *)(a1 + 12) + 1;
              v259 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v258;
              *(_DWORD *)(a1 + 16) = v259;
            }
            v345 = v255;
            if (v258 > v259)
            {
              *(_DWORD *)(a1 + 16) = v259 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v259) = v255;
              return result;
            }
            v40 = v258;
            if (v258 != *(_DWORD *)(a1 + 8))
            {
              *(_BYTE *)(*(_QWORD *)a1 + v258) = v255;
              goto LABEL_73;
            }
LABEL_325:
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v345);
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
            goto LABEL_73;
          }
        }
        v341[0] = v45;
        v342 = 0;
        v343 = a1;
        v344 = v44;
        return JSC::OpJfalse::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v42, v341, a4, a5, a6, a7, a8);
      }
      v197 = v194;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v190;
      *(_DWORD *)(a1 + 16) = v190;
      *(_BYTE *)(a3 + 8) = 1;
      v198 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v198 == -1)
      {
        v199 = 1;
      }
      else
      {
        v8 = *(unsigned int *)(a3 + 4);
        v199 = 2;
      }
      if (v198 == 0xFFFFFFFFLL)
        v200 = 1;
      else
        v200 = 2;
      v341[0] = v200;
      v342 = 0;
      v343 = a1;
      v344 = v8;
      result = JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v197, v341, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v341[0] = v199;
        v342 = 0;
        v343 = a1;
        v344 = v8;
        result = JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v197, v341, v201, v202, v203, v204, v205);
        if ((result & 1) == 0)
        {
          v341[0] = v199;
          v342 = 0;
          v343 = a1;
          v344 = v8;
          return JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v197, v341, v206, v207, v208, v209, v210);
        }
      }
      return result;
  }
}

uint64_t JSC::BytecodeGenerator::emitNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(_BYTE *)(a1 + 709);
  v10 = *(_BYTE *)(a1 + 710);
  *(_WORD *)(a1 + 709) = 0;
  if ((unint64_t)&v22 < *(_QWORD *)(*(_QWORD *)(a1 + 696) + 93104))
  {
    *(_BYTE *)(a1 + 706) = 1;
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newTemporary(a1);
  }
  else
  {
    v11 = a2;
    if (*(_BYTE *)(a3 + 24)
      && (*(_BYTE *)(a1 + 104) & 1) != 0
      && !*(_BYTE *)(a1 + 707)
      && (*(_DWORD *)(a1 + 736) != *(_DWORD *)(a3 + 8)
       || *(_DWORD *)(a1 + 740) != *(_DWORD *)(a3 + 12)
       || *(_DWORD *)(a1 + 744) != *(_DWORD *)(a3 + 16)
       || *(_DWORD *)(a1 + 748) != 5))
    {
      v22 = a3;
      v23 = a2;
      v13 = *(_QWORD *)(a3 + 8);
      *(_DWORD *)(a1 + 744) = *(_DWORD *)(a3 + 16);
      *(_QWORD *)(a1 + 736) = v13;
      *(_DWORD *)(a1 + 748) = 5;
      v14 = *(_DWORD *)(a3 + 8);
      v15 = *(_DWORD *)(a3 + 12);
      v16 = *(_DWORD *)(a3 + 16);
      if (v14 != -1 || v15 != -1 || v16 != -1)
      {
        v17 = *(_QWORD *)(a1 + 192);
        v18 = *(_DWORD *)(v17 + 176);
        a3 = v15 - v18;
        v19 = v16 - v18;
        if (v16 < v18)
          v19 = 0;
        v20 = a3 >= v19;
        v21 = a3 - v19;
        if (v20)
          JSC::UnlinkedCodeBlockGenerator::addExpressionInfo(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 12), a3, 0, 0, (v14 + ~*(_DWORD *)(v17 + 184)) | (unint64_t)(v21 << 32));
      }
      JSC::OpDebug::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, 5, a3, a4, a5, a6, a7, a8);
      a3 = v22;
      v11 = v23;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, a1, v11);
  }
  *(_BYTE *)(a1 + 710) = v10;
  *(_BYTE *)(a1 + 709) = v9;
  return result;
}

_DWORD *JSC::BytecodeGenerator::emitGetFromScope(uint64_t a1, _DWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BOOL4 v56;
  _BOOL4 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD **v112;
  uint64_t v113;
  _DWORD *v114;
  unsigned int v115;
  char *v116;
  char *v117;
  char *v118;
  _BYTE *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  _BOOL4 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  unsigned int v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  _DWORD *v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;

  v10 = a2;
  v12 = *(unsigned __int8 *)(a4 + 8);
  if (v12 < 2)
  {
    v13 = a5;
    v14 = *(_QWORD *)(a1 + 688);
    if (v14)
    {
      v88 = a2[1];
      v89 = *(_DWORD *)(v14 - 8);
      v90 = 9 * ((v88 + ~(v88 << 15)) ^ ((v88 + ~(v88 << 15)) >> 10));
      v91 = (v90 ^ (v90 >> 6)) + ~((v90 ^ (v90 >> 6)) << 11);
      v92 = v89 & (v91 ^ HIWORD(v91));
      v93 = *(_DWORD *)(v14 + 16 * v92);
      if (v93 != v88)
      {
        v94 = 1;
        while (v93 != 0x7FFFFFFF)
        {
          v92 = ((_DWORD)v92 + v94) & v89;
          v93 = *(_DWORD *)(v14 + 16 * v92);
          ++v94;
          if (v93 == v88)
            goto LABEL_105;
        }
        v92 = *(unsigned int *)(v14 - 4);
      }
LABEL_105:
      if (v92 != *(_DWORD *)(v14 - 4))
      {
        v95 = v14 + 16 * v92;
        v96 = (unint64_t *)(v95 + 8);
        v97 = *(_QWORD *)(v95 + 8);
        v98 = *(_QWORD *)(v97 + 24);
        if (v98)
        {
          v99 = *(_DWORD *)(v98 - 12);
          if (v99)
          {
            v100 = (uint64_t *)(a1 + 688);
            if (*(_DWORD *)v97 == 1)
            {
              v101 = (unsigned __int8 *)(**(_QWORD **)(v97 + 8) + *(unsigned int *)(v97 + 16));
              v102 = *v101;
              v103 = v102;
              if ((v102 | 2) == 0x82)
                v103 = v101[1];
              if (v103 == 29)
              {
                if (v102 == 128)
                {
                  if (v99 >= 0x10000)
                    LOWORD(v99) = 255;
                  *((_WORD *)v101 + 2) = v99;
                }
                else if (v102 == 130)
                {
                  *(_DWORD *)(v101 + 6) = v99;
                }
                else
                {
                  if (v99 >= 0xFF)
                    LOBYTE(v99) = -1;
                  v101[2] = v99;
                }
              }
              else if (v103 == 28)
              {
                if (v102 == 128)
                {
                  if (v99 >= 0x10000)
                    LOWORD(v99) = 255;
                  *((_WORD *)v101 + 3) = v99;
                }
                else if (v102 == 130)
                {
                  *(_DWORD *)(v101 + 10) = v99;
                }
                else
                {
                  if (v99 >= 0xFF)
                    LOBYTE(v99) = -1;
                  v101[3] = v99;
                }
              }
            }
            v120 = *v100;
            if (!*v100 || (v120 += 16 * *(unsigned int *)(v120 - 4), v120 != v95))
            {
              if (v120 != v95)
              {
                *(_DWORD *)v95 = 2147483646;
                v121 = *v96;
                *v96 = 0;
                if (v121)
                {
                  if (*(_DWORD *)v121 == 1)
                  {
                    v127 = *(_QWORD *)(v121 + 24);
                    if (v127)
                      WTF::fastFree(v127 - 16, a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v121, a2, a3, a4, a5, a6, a7, a8);
                  }
                  else
                  {
                    --*(_DWORD *)v121;
                  }
                }
                ++*(_DWORD *)(*v100 - 16);
                v122 = *v100;
                if (*v100)
                  v123 = *(_DWORD *)(v122 - 12) - 1;
                else
                  v123 = -1;
                *(_DWORD *)(v122 - 12) = v123;
                v124 = *v100;
                if (*v100)
                {
                  v125 = 6 * *(_DWORD *)(v124 - 12);
                  v126 = *(_DWORD *)(v124 - 4);
                  if (v125 < v126 && v126 >= 9)
                    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)(a1 + 688), v126 >> 1, 0);
                }
              }
            }
          }
        }
      }
    }
    v15 = v10[1];
    v16 = *(unsigned int *)(a3 + 4);
    v17 = *(WTF::StringImpl **)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)v17 += 2;
    v18 = (uint64_t *)(a1 + 640);
    v19 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
    v20 = *(_QWORD *)(a1 + 640);
    if (v20
      || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), 8u, 0), (v20 = *v18) != 0))
    {
      v21 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      v21 = 0;
    }
    v22 = *((_DWORD *)v17 + 4);
    if ((v22 & 0x20) != 0)
      v22 = *((_DWORD *)v17 + 8);
    v23 = v21 & (v22 >> 8);
    v24 = v20 + 16 * v23;
    v25 = *(WTF::StringImpl **)v24;
    if (*(_QWORD *)v24)
    {
      v26 = 0;
      v27 = 1;
      while (v25 != v17)
      {
        if (v25 == (WTF::StringImpl *)-1)
          v26 = v24;
        v23 = (v23 + v27) & v21;
        v24 = v20 + 16 * v23;
        v25 = *(WTF::StringImpl **)v24;
        ++v27;
        if (!*(_QWORD *)v24)
        {
          if (v26)
          {
            *(_QWORD *)v26 = 0;
            *(_DWORD *)(v26 + 8) = 0x7FFFFFFF;
            --*(_DWORD *)(*v18 - 16);
            v24 = v26;
          }
          goto LABEL_17;
        }
      }
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
LABEL_31:
      v39 = *(unsigned int *)(v24 + 8);
      v40 = *(_QWORD *)(a4 + 8);
      v167 = v10;
      if (v40 == 1)
      {
        v45 = 4;
      }
      else
      {
        v41 = *(unsigned int *)(a1 + 124);
        if ((_DWORD)v41)
        {
          v42 = *(_QWORD *)(a1 + 112);
          v43 = 24 * v41;
          while (!*(_BYTE *)(v42 + v43 - 8))
          {
            v44 = *(unsigned __int8 *)(a1 + 708);
            if (*(_BYTE *)(a1 + 708))
            {
              if ((*(_BYTE *)(*(_QWORD *)(v42 + v43 - 24) + 21) & 0x1C) == 0x14)
                break;
            }
            v43 -= 24;
            if (!v43)
              goto LABEL_39;
          }
          v45 = 12;
        }
        else
        {
          v44 = *(unsigned __int8 *)(a1 + 708);
LABEL_39:
          if (v44)
            v45 = 6;
          else
            v45 = 0;
        }
      }
      v46 = v45 | (v13 << 20);
      v47 = v46 | ((*(_BYTE *)(a1 + 712) == 0) << 30);
      v48 = v47 | 0x800u;
      v49 = *(unsigned int *)(a1 + 412);
      if (v40 == 1)
        v50 = HIDWORD(*(_QWORD *)(a4 + 8));
      else
        v50 = 0;
      v51 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
      *(_BYTE *)(v51 + 4) |= 1u;
      v52 = (*(_DWORD *)(v51 + 8) + 1);
      *(_DWORD *)(v51 + 8) = v52;
      v53 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
      *(_BYTE *)(v53 + 4) |= 1u;
      v54 = *(_QWORD *)(v53 + 16);
      v55 = *(_DWORD *)(v54 + 104);
      *(_DWORD *)(v54 + 104) = v55 + 1;
      v56 = (v15 - 1073741808) < 0x80;
      if (v15 <= 0x3FFFFFFF)
        v56 = (v15 + 128) < 0x90;
      if (v56
        && ((int)v16 <= 0x3FFFFFFF
          ? (v57 = (v16 + 128) < 0x90)
          : (v57 = (v16 - 1073741808) < 0x80),
            v57
         && v39 <= 0xFF
         && (v49 | v50 | v52 | v55) <= 0xFF))
      {
        v166 = v47;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1A, a3, a4, a5, a6, a7, a8);
        v58 = 26;
        v168 = 26;
        v59 = *(unsigned int *)(a1 + 12);
        v60 = *(unsigned int *)(a1 + 16);
        if (v59 > v60)
        {
          *(_DWORD *)(a1 + 16) = v60 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v60) = 26;
          v62 = *(_DWORD *)(a1 + 12);
          v63 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v59 == *(_DWORD *)(a1 + 8))
          {
            v116 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v59 + 1), (unint64_t)&v168);
            v59 = *(unsigned int *)(a1 + 12);
            v61 = *(_QWORD *)a1;
            v58 = *v116;
          }
          else
          {
            v61 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v61 + v59) = v58;
          v62 = *(_DWORD *)(a1 + 12) + 1;
          v63 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v62;
          *(_DWORD *)(a1 + 16) = v63;
        }
        v64 = v15 + 16;
        if (v15 <= 0x3FFFFFFF)
          v64 = v15;
        v169 = v64;
        if (v62 > v63)
        {
          *(_DWORD *)(a1 + 16) = v63 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v63) = v64;
          v67 = *(_DWORD *)(a1 + 12);
          v68 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v65 = v62;
          if (v62 == *(_DWORD *)(a1 + 8))
          {
            v117 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v62 + 1), (unint64_t)&v169);
            v65 = *(unsigned int *)(a1 + 12);
            v66 = *(_QWORD *)a1;
            v64 = *v117;
          }
          else
          {
            v66 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v66 + v65) = v64;
          v67 = *(_DWORD *)(a1 + 12) + 1;
          v68 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v67;
          *(_DWORD *)(a1 + 16) = v68;
        }
        v69 = v16 + 16;
        if ((int)v16 <= 0x3FFFFFFF)
          v69 = v16;
        v170 = v69;
        if (v67 > v68)
        {
          *(_DWORD *)(a1 + 16) = v68 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v68) = v69;
          v72 = *(_DWORD *)(a1 + 12);
          v73 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v70 = v67;
          if (v67 == *(_DWORD *)(a1 + 8))
          {
            v118 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v67 + 1), (unint64_t)&v170);
            v70 = *(unsigned int *)(a1 + 12);
            v71 = *(_QWORD *)a1;
            v69 = *v118;
          }
          else
          {
            v71 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v71 + v70) = v69;
          v72 = *(_DWORD *)(a1 + 12) + 1;
          v73 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v72;
          *(_DWORD *)(a1 + 16) = v73;
        }
        v171 = v39;
        if (v72 > v73)
        {
          *(_DWORD *)(a1 + 16) = v73 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v73) = v39;
          v74 = *(_DWORD *)(a1 + 12);
          v75 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v72 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v72 + 1), (unint64_t)&v171);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v72) = v39;
          v74 = *(_DWORD *)(a1 + 12) + 1;
          v75 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v74;
          *(_DWORD *)(a1 + 16) = v75;
        }
        v76 = (v166 >> 20) | (8 * v46) | (v166 >> 23) & 0x80 | (v48 >> 9) & 0xFE;
        v172 = (v166 >> 20) | (8 * v46) | (v166 >> 23) & 0x80 | (v48 >> 9) & 0xFE;
        if (v74 > v75)
        {
          *(_DWORD *)(a1 + 16) = v75 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v75) = v76;
          v79 = *(_DWORD *)(a1 + 12);
          v80 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v77 = v74;
          if (v74 == *(_DWORD *)(a1 + 8))
          {
            v119 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v74 + 1), (unint64_t)&v172);
            v77 = *(unsigned int *)(a1 + 12);
            v78 = *(_QWORD *)a1;
            LOBYTE(v76) = *v119;
          }
          else
          {
            v78 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v78 + v77) = v76;
          v79 = *(_DWORD *)(a1 + 12) + 1;
          v80 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v79;
          *(_DWORD *)(a1 + 16) = v80;
        }
        v173 = v49;
        if (v79 > v80)
        {
          *(_DWORD *)(a1 + 16) = v80 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v80) = v49;
          v81 = *(_DWORD *)(a1 + 12);
          v82 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v79 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v79 + 1), (unint64_t)&v173);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v79) = v49;
          v81 = *(_DWORD *)(a1 + 12) + 1;
          v82 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v81;
          *(_DWORD *)(a1 + 16) = v82;
        }
        v174 = v50;
        if (v81 > v82)
        {
          *(_DWORD *)(a1 + 16) = v82 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v82) = v50;
          v83 = *(_DWORD *)(a1 + 12);
          v84 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v81 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v81 + 1), (unint64_t)&v174);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v81) = v50;
          v83 = *(_DWORD *)(a1 + 12) + 1;
          v84 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v83;
          *(_DWORD *)(a1 + 16) = v84;
        }
        v175 = v52;
        if (v83 > v84)
        {
          *(_DWORD *)(a1 + 16) = v84 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v84) = v52;
          v85 = *(_DWORD *)(a1 + 12);
          v86 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v83 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v83 + 1), (unint64_t)&v175);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v83) = v52;
          v85 = *(_DWORD *)(a1 + 12) + 1;
          v86 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v85;
          *(_DWORD *)(a1 + 16) = v86;
        }
        v176 = v55;
        if (v85 <= v86)
        {
          if (v85 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v85 + 1), (unint64_t)&v176);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v85) = v55;
          v10 = v167;
LABEL_94:
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          return v10;
        }
        *(_DWORD *)(a1 + 16) = v86 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v86) = v55;
      }
      else if ((JSC::OpGetFromScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v15, v16, v39, v47 | 0x800u, v49, v50, v52, v55) & 1) == 0)
      {
        JSC::OpGetFromScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v15, v16, v39, v48, v49, v50, v52, v55);
      }
      return v167;
    }
LABEL_17:
    *(_QWORD *)v24 = v17;
    *(_DWORD *)(v24 + 8) = v19;
    v28 = *v18;
    if (*v18)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v18;
    if (*v18)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_23;
    }
    else
    {
      if (3 * v33 > 4 * v32)
      {
LABEL_23:
        v34 = *(_QWORD *)(a1 + 24);
        v35 = (uint64_t *)(v34 + 32);
        v36 = *(unsigned int *)(v34 + 44);
        if ((_DWORD)v36 == *(_DWORD *)(v34 + 40))
        {
          v112 = (_DWORD **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, a4);
          v36 = *(unsigned int *)(v34 + 44);
          v113 = *(_QWORD *)(v34 + 32);
          v114 = *v112;
          if (*v112)
            *v114 += 2;
          *(_QWORD *)(v113 + 8 * v36) = v114;
        }
        else
        {
          v37 = *v35;
          v38 = *(WTF::StringImpl **)a4;
          if (*(_QWORD *)a4)
            *(_DWORD *)v38 += 2;
          *(_QWORD *)(v37 + 8 * v36) = v38;
        }
        *(_DWORD *)(v34 + 44) = v36 + 1;
        goto LABEL_31;
      }
      if (!(_DWORD)v33)
      {
        v115 = 8;
LABEL_124:
        v24 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::IdentifierMapIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(a1 + 640), v115, (WTF::StringImpl **)v24);
        goto LABEL_23;
      }
    }
    v115 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
    goto LABEL_124;
  }
  if (v12 == 3)
  {
    JSC::BytecodeGenerator::kill(a1, a2, a3, a4, a5, a6, a7, a8);
    v134 = v10[1];
    v135 = *(unsigned int *)(a3 + 4);
    v136 = HIDWORD(*(_QWORD *)(a4 + 8));
    v137 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
    *(_BYTE *)(v137 + 4) |= 1u;
    v138 = (*(_DWORD *)(v137 + 8) + 1);
    *(_DWORD *)(v137 + 8) = v138;
    v139 = (v134 - 1073741808) < 0x80;
    if (v134 <= 0x3FFFFFFF)
      v139 = (v134 + 128) < 0x90;
    if (v139)
    {
      v140 = (int)v135 <= 0x3FFFFFFF ? (v135 + 128) < 0x90 : (v135 - 1073741808) < 0x80;
      if (v140 && (v138 | v136) <= 0xFF)
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x30, v128, v129, v130, v131, v132, v133);
        v177 = 48;
        v141 = *(unsigned int *)(a1 + 12);
        v142 = *(unsigned int *)(a1 + 16);
        if (v141 > v142)
        {
          *(_DWORD *)(a1 + 16) = v142 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v142) = 48;
          v145 = *(_DWORD *)(a1 + 12);
          v146 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v141 == *(_DWORD *)(a1 + 8))
          {
            v159 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v141 + 1), (unint64_t)&v177);
            v141 = *(unsigned int *)(a1 + 12);
            v143 = *(_QWORD *)a1;
            v144 = *v159;
          }
          else
          {
            v143 = *(_QWORD *)a1;
            v144 = 48;
          }
          *(_BYTE *)(v143 + v141) = v144;
          v145 = *(_DWORD *)(a1 + 12) + 1;
          v146 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v145;
          *(_DWORD *)(a1 + 16) = v146;
        }
        v147 = v134 + 16;
        if (v134 <= 0x3FFFFFFF)
          v147 = v134;
        v178 = v147;
        if (v145 > v146)
        {
          *(_DWORD *)(a1 + 16) = v146 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v146) = v147;
          v150 = *(_DWORD *)(a1 + 12);
          v151 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v148 = v145;
          if (v145 == *(_DWORD *)(a1 + 8))
          {
            v160 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v145 + 1), (unint64_t)&v178);
            v148 = *(unsigned int *)(a1 + 12);
            v149 = *(_QWORD *)a1;
            v147 = *v160;
          }
          else
          {
            v149 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v149 + v148) = v147;
          v150 = *(_DWORD *)(a1 + 12) + 1;
          v151 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v150;
          *(_DWORD *)(a1 + 16) = v151;
        }
        v152 = v135 + 16;
        if ((int)v135 <= 0x3FFFFFFF)
          v152 = v135;
        v179 = v152;
        if (v150 > v151)
        {
          *(_DWORD *)(a1 + 16) = v151 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v151) = v152;
          v155 = *(_DWORD *)(a1 + 12);
          v156 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v153 = v150;
          if (v150 == *(_DWORD *)(a1 + 8))
          {
            v161 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v150 + 1), (unint64_t)&v179);
            v153 = *(unsigned int *)(a1 + 12);
            v154 = *(_QWORD *)a1;
            v152 = *v161;
          }
          else
          {
            v154 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v154 + v153) = v152;
          v155 = *(_DWORD *)(a1 + 12) + 1;
          v156 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v155;
          *(_DWORD *)(a1 + 16) = v156;
        }
        v180 = v136;
        if (v155 > v156)
        {
          *(_DWORD *)(a1 + 16) = v156 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v156) = v136;
          v157 = *(_DWORD *)(a1 + 12);
          v158 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v155 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v155 + 1), (unint64_t)&v180);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v155) = v136;
          v157 = *(_DWORD *)(a1 + 12) + 1;
          v158 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v157;
          *(_DWORD *)(a1 + 16) = v158;
        }
        v181 = v138;
        if (v157 > v158)
        {
          *(_DWORD *)(a1 + 16) = v158 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v158) = v138;
          return v10;
        }
        if (v157 == *(_DWORD *)(a1 + 8))
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v157 + 1), (unint64_t)&v181);
        else
          *(_BYTE *)(*(_QWORD *)a1 + v157) = v138;
        goto LABEL_94;
      }
    }
    if ((JSC::OpGetFromArguments::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v134, v135, v136, v138, v131, v132, v133) & 1) == 0)JSC::OpGetFromArguments::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v134, v135, v136, v138, v163, v164, v165);
  }
  else
  {
    if (v12 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1982364ECLL);
    }
    if ((_DWORD *)(a1 + 208) == a2)
    {
      return 0;
    }
    else
    {
      v162 = *(_QWORD *)(a4 + 16);
      if (!a2 || (_DWORD *)v162 == a2)
        return *(_DWORD **)(a4 + 16);
      else
        JSC::BytecodeGenerator::emitMove(a1, a2, v162, a4, a5, a6, a7, a8);
    }
  }
  return v10;
}

uint64_t WTF::SegmentedVector<JSC::RegisterID,32ul>::grow(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)result + 31;
  v6 = a2 + 31;
  if (v5 >= 0x20)
    v7 = (v5 >> 5) - 1;
  else
    v7 = 0;
  if (v7 < v6 >> 5)
  {
    v8 = v6 >> 5;
    v9 = *(_DWORD *)(result + 20);
    do
    {
      if (v7 == v9)
      {
        result = WTF::fastMalloc((WTF *)0x180);
        v13 = result;
        v10 = *(unsigned int *)(v3 + 20);
        if ((_DWORD)v10 == *(_DWORD *)(v3 + 16))
        {
          result = WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 8, v10 + 1, (unint64_t)&v13);
          v10 = *(unsigned int *)(v3 + 20);
          *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v10) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v10) = result;
        }
        v9 = v10 + 1;
        *(_DWORD *)(v3 + 20) = v9;
      }
      ++v7;
    }
    while (v8 != v7);
    v4 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = a2;
  if (v4 < a2)
  {
    v11 = *(unsigned int *)(v3 + 20);
    while (v4 >> 5 < v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * (v4 >> 5)) + 12 * (v4 & 0x1F);
      *(_QWORD *)v12 = 0x3FFFFFFF00000000;
      *(_BYTE *)(v12 + 8) = 0;
      if (a2 == ++v4)
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::pushLocalControlFlowScope(uint64_t this)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = *(_DWORD *)(this + 124);
  v3 = *(_QWORD *)(this + 424);
  *(_QWORD *)(this + 424) = v3 + 1;
  v4 = v3 >> 4;
  v5 = *(unsigned int *)(this + 444);
  if (v3 >> 4 >= v5)
  {
    v6 = (_QWORD *)(this + 432);
    this = WTF::fastMalloc((WTF *)0x100);
    v9 = this;
    v7 = *(unsigned int *)(v1 + 444);
    if ((_DWORD)v7 == *(_DWORD *)(v1 + 440))
    {
      this = WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 432, v7 + 1, (unint64_t)&v9);
      v7 = *(unsigned int *)(v1 + 444);
      *(_QWORD *)(*(_QWORD *)(v1 + 432) + 8 * v7) = *(_QWORD *)this;
    }
    else
    {
      *(_QWORD *)(*v6 + 8 * v7) = this;
    }
    v5 = (v7 + 1);
    *(_DWORD *)(v1 + 444) = v5;
    v3 = *(_QWORD *)(v1 + 424) - 1;
    v4 = v3 >> 4;
  }
  if (v4 >= v5)
  {
    __break(0xC471u);
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 432) + 8 * v4) + 16 * (v3 & 0xF);
    *(_BYTE *)v8 = 0;
    *(_DWORD *)(v8 + 4) = v2 - 1;
    *(_QWORD *)(v8 + 8) = 0;
    ++*(_DWORD *)(v1 + 412);
  }
  return this;
}

uint64_t JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = v2 + 1;
  *(_QWORD *)(a1 + 80) = v2 + 1;
  v4 = v2 >> 5;
  v5 = *(unsigned int *)(a1 + 100);
  if (v2 >> 5 >= v5)
  {
    v13 = (_QWORD *)(a1 + 88);
    v14 = WTF::fastMalloc((WTF *)0x180);
    v17 = v14;
    v15 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 96))
    {
      v16 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 88, v15 + 1, (unint64_t)&v17);
      v15 = *(unsigned int *)(a1 + 100);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v15) = *v16;
    }
    else
    {
      *(_QWORD *)(*v13 + 8 * v15) = v14;
    }
    v5 = (v15 + 1);
    *(_DWORD *)(a1 + 100) = v5;
    v3 = *(_QWORD *)(a1 + 80);
    v6 = v3 - 1;
    v4 = (v3 - 1) >> 5;
  }
  else
  {
    v6 = v2;
  }
  if (v4 >= v5)
  {
    __break(0xC471u);
    JUMPOUT(0x198236954);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v4) + 12 * (v6 & 0x1F);
  *(_DWORD *)v7 = 0;
  *(_DWORD *)(v7 + 4) = ~(_DWORD)v2;
  *(_BYTE *)(v7 + 8) = 0;
  v8 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  v9 = *(_QWORD *)(v8 + 20);
  if ((v9 & 0x7FFFFFFF) > v3)
    v3 = v9 & 0x7FFFFFFF;
  v10 = v3 + 1;
  *(_QWORD *)(v8 + 20) = v9 & 0xFFFFFFFF80000000 | v10 & 0x7FFFFFFE;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 20) & 0x7FFFFFFFLL)
    || (v11 = *(_QWORD *)(a1 + 80) - 1, v11 >> 5 >= *(unsigned int *)(a1 + 100)))
  {
    __break(0xC471u);
    JUMPOUT(0x19823694CLL);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v11 >> 5)) + 12 * (v11 & 0x1F);
}

void JSC::BytecodeGenerator::newLabelScope(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v9 = a3;
  v12 = *(_QWORD *)(a2 + 360);
  if (v12)
  {
    v13 = *(unsigned int *)(a2 + 380);
    v14 = v12 - 1;
    while (v14 >> 5 < v13)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 368) + 8 * (v14 >> 5));
      if (!*(_DWORD *)(v15 + 40 * (v14 & 0x1F)))
      {
        v16 = v15 + 40 * (v14 & 0x1F);
        v17 = *(_DWORD **)(v16 + 32);
        *(_QWORD *)(v16 + 32) = 0;
        if (v17)
          --*v17;
        v18 = v15 + 40 * (v14 & 0x1F);
        v19 = *(_DWORD **)(v18 + 24);
        *(_QWORD *)(v18 + 24) = 0;
        if (v19)
          --*v19;
        *(_QWORD *)(a2 + 360) = v14--;
        if (v14 != -1)
          continue;
      }
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x198236B38);
  }
LABEL_10:
  v20 = *(_DWORD *)(a2 + 412);
  v21 = *(_DWORD *)(a2 + 408);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v42, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    v28 = 0;
  }
  else
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newLabel(&v41, a2, v22, v23, v24, v25, v26, v27);
    v28 = v41;
  }
  v29 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = v29 + 1;
  v30 = v29 >> 5;
  v31 = *(unsigned int *)(a2 + 380);
  if (v29 >> 5 >= v31)
  {
    v32 = WTF::fastMalloc((WTF *)0x500);
    v43 = v32;
    v33 = *(unsigned int *)(a2 + 380);
    if ((_DWORD)v33 == *(_DWORD *)(a2 + 376))
    {
      v34 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 368, v33 + 1, (unint64_t)&v43);
      v33 = *(unsigned int *)(a2 + 380);
      *(_QWORD *)(*(_QWORD *)(a2 + 368) + 8 * v33) = *v34;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 368) + 8 * v33) = v32;
    }
    v31 = (v33 + 1);
    *(_DWORD *)(a2 + 380) = v31;
    v29 = *(_QWORD *)(a2 + 360) - 1;
    v30 = v29 >> 5;
  }
  if (v30 >= v31)
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  v35 = *(_QWORD *)(a2 + 368);
  v36 = *(_QWORD *)(v35 + 8 * v30);
  v37 = v29 & 0x1F;
  v38 = v36 + 40 * (v29 & 0x1F);
  *(_DWORD *)v38 = 0;
  *(_DWORD *)(v38 + 4) = v9;
  *(_QWORD *)(v38 + 8) = a4;
  *(_DWORD *)(v38 + 16) = v21 + v20;
  *(_QWORD *)(v38 + 24) = v42;
  *(_QWORD *)(v38 + 32) = v28;
  v39 = v29 >> 5;
  if (v39 >= v31)
  {
    __break(0xC471u);
    JUMPOUT(0x198236B40);
  }
  v40 = *(_QWORD *)(v35 + 8 * v39);
  ++*(_DWORD *)(v40 + 40 * v37);
  *a1 = v40 + 40 * v37;
}

char *JSC::BytecodeGenerator::emitLoopHint(JSC::BytecodeGenerator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  char v25;
  char v26;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)this, (void *)0x59, a3, a4, a5, a6, a7, a8);
  v25 = 89;
  v15 = *((unsigned int *)this + 3);
  v16 = *((unsigned int *)this + 4);
  if (v15 > v16)
  {
    *((_DWORD *)this + 4) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)this + v16) = 89;
  }
  else
  {
    if ((_DWORD)v15 == *((_DWORD *)this + 2))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v15 + 1), (unint64_t)&v25);
      v15 = *((unsigned int *)this + 3);
      v17 = *(_QWORD *)this;
      v18 = *v24;
    }
    else
    {
      v17 = *(_QWORD *)this;
      v18 = 89;
    }
    *(_BYTE *)(v17 + v15) = v18;
    *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000001);
  }
  result = (char *)JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode((uint64_t)this, (void *)0x79, v9, v10, v11, v12, v13, v14);
  v26 = 121;
  v20 = *((unsigned int *)this + 3);
  v21 = *((unsigned int *)this + 4);
  if (v20 > v21)
  {
    *((_DWORD *)this + 4) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)this + v21) = 121;
  }
  else
  {
    if ((_DWORD)v20 == *((_DWORD *)this + 2))
    {
      result = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, (WTF *)(v20 + 1), (unint64_t)&v26);
      v20 = *((unsigned int *)this + 3);
      v22 = *(_QWORD *)this;
      v23 = *result;
    }
    else
    {
      v22 = *(_QWORD *)this;
      v23 = 121;
    }
    *(_BYTE *)(v22 + v20) = v23;
    *(int32x2_t *)((char *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000001);
  }
  return result;
}

uint64_t JSC::OpJmp::emit<JSC::BytecodeGenerator>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v18, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    v18 = v16;
    v19 = v17;
    result = JSC::OpJmp::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, (unsigned __int8 *)&v18, v10, v11, v12, v13, v14, v15);
    if ((result & 1) == 0)
    {
      v18 = v16;
      v19 = v17;
      return JSC::OpJmp::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, (uint64_t)&v18);
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitJumpIfTrue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  signed int v16;
  int v17;
  signed int v18;
  BOOL v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  BOOL v76;
  signed int v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  unsigned int v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  int v135;
  int v136;
  signed int v137;
  int v138;
  int v139;
  BOOL v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  _BOOL4 v146;
  _BOOL4 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  int v167;
  int v168;
  signed int v169;
  BOOL v170;
  uint64_t v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  _BOOL4 v174;
  _BOOL4 v175;
  unsigned __int8 *v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  BOOL v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 v187;
  unsigned __int8 v188;
  _BOOL4 v189;
  _BOOL4 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  unsigned int v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned __int8 *v208;
  int v209;
  int v210;
  int v211;
  int v212;
  BOOL v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int8 *v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  BOOL v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int8 v231;
  unsigned __int8 v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BOOL4 v243;
  _BOOL4 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  unsigned int v249;
  unsigned int v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  unsigned __int8 *v275;
  int v276;
  int v277;
  int v278;
  int v279;
  BOOL v280;
  unsigned int v281;
  uint64_t v282;
  unsigned __int8 v283;
  unsigned __int8 v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _BOOL4 v310;
  _BOOL4 v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  unsigned int v316;
  unsigned int v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _BOOL4 v336;
  _BOOL4 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  unsigned __int8 v353[4];
  int v354;
  uint64_t v355;
  uint64_t v356;
  char v357;

  v8 = a3;
  switch(*(_DWORD *)(a1 + 36))
  {
    case 0x90:
      v90 = *(unsigned int *)(a1 + 48);
      v91 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v90);
      v92 = *v91;
      if (v92 == 128)
      {
        v304 = *((__int16 *)v91 + 1);
        v94 = v304 + 1073741760;
        if (v304 <= 63)
          v94 = *((__int16 *)v91 + 1);
        v95 = *((__int16 *)v91 + 2);
        if (v95 > 63)
          v95 += 1073741760;
        v96 = *((__int16 *)v91 + 3);
        v97 = v96 + 1073741760;
        v98 = v96 <= 63;
      }
      else
      {
        if (v92 == 130)
        {
          v94 = *(_DWORD *)(v91 + 2);
          v95 = *(_DWORD *)(v91 + 6);
          v96 = *(_DWORD *)(v91 + 10);
          goto LABEL_120;
        }
        v93 = (char)v91[1];
        v94 = v93 + 1073741808;
        if (v93 <= 15)
          v94 = (char)v91[1];
        v95 = (char)v91[2];
        if (v95 > 15)
          v95 += 1073741808;
        v96 = (char)v91[3];
        v97 = v96 + 1073741808;
        v98 = v96 <= 15;
      }
      if (!v98)
        v96 = v97;
LABEL_120:
      if (*(_DWORD *)(a2 + 4) != v94 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v90;
      *(_DWORD *)(a1 + 16) = v90;
      *(_BYTE *)(a3 + 8) = 1;
      v99 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v99 == -1)
        v100 = a3;
      else
        v100 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v99 == -1)
        v101 = 1;
      else
        v101 = 2;
      if (v99 == 0xFFFFFFFFLL)
        v102 = 1;
      else
        v102 = 2;
      v103 = v95;
      v353[0] = v102;
      v104 = v96;
      v354 = 0;
      v355 = a1;
      v356 = v100;
      result = JSC::OpJeq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v95, v96, v353, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v353[0] = v101;
        v354 = 0;
        v355 = a1;
        v356 = v100;
        result = JSC::OpJeq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v103, v104, v353);
        if ((result & 1) == 0)
        {
          v353[0] = v101;
          v354 = 0;
          v355 = a1;
          v356 = v100;
          return JSC::OpJeq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v103, v104, v353, v105, v106, v107, v108);
        }
      }
      return result;
    case 0x91:
      v220 = *(unsigned int *)(a1 + 48);
      v221 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v220);
      v222 = *v221;
      if (v222 == 128)
      {
        v342 = *((__int16 *)v221 + 1);
        v224 = v342 + 1073741760;
        if (v342 <= 63)
          v224 = *((__int16 *)v221 + 1);
        v225 = *((__int16 *)v221 + 2);
        if (v225 > 63)
          v225 += 1073741760;
        v226 = *((__int16 *)v221 + 3);
        v227 = v226 + 1073741760;
        v228 = v226 <= 63;
      }
      else
      {
        if (v222 == 130)
        {
          v224 = *(_DWORD *)(v221 + 2);
          v225 = *(_DWORD *)(v221 + 6);
          v226 = *(_DWORD *)(v221 + 10);
          goto LABEL_320;
        }
        v223 = (char)v221[1];
        v224 = v223 + 1073741808;
        if (v223 <= 15)
          v224 = (char)v221[1];
        v225 = (char)v221[2];
        if (v225 > 15)
          v225 += 1073741808;
        v226 = (char)v221[3];
        v227 = v226 + 1073741808;
        v228 = v226 <= 15;
      }
      if (!v228)
        v226 = v227;
LABEL_320:
      if (*(_DWORD *)(a2 + 4) != v224 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v220;
      *(_DWORD *)(a1 + 16) = v220;
      *(_BYTE *)(a3 + 8) = 1;
      v229 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v229 == -1)
        v230 = a3;
      else
        v230 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v229 == -1)
        v231 = 1;
      else
        v231 = 2;
      if (v229 == 0xFFFFFFFFLL)
        v232 = 1;
      else
        v232 = 2;
      v233 = v225;
      v353[0] = v232;
      v234 = v226;
      v354 = 0;
      v355 = a1;
      v356 = v230;
      result = JSC::OpJneq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v225, v226, v353, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v353[0] = v231;
        v354 = 0;
        v355 = a1;
        v356 = v230;
        result = JSC::OpJneq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v233, v234, v353, v235, v236, v237, v238);
        if ((result & 1) == 0)
        {
          v353[0] = v231;
          v354 = 0;
          v355 = a1;
          v356 = v230;
          return JSC::OpJneq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v233, v234, v353, v239, v240, v241, v242);
        }
      }
      return result;
    case 0x92:
      v46 = *(unsigned int *)(a1 + 48);
      v47 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v46);
      v48 = *v47;
      if (v48 == 128)
      {
        v351 = *((__int16 *)v47 + 1);
        v50 = v351 + 1073741760;
        if (v351 <= 63)
          v50 = *((__int16 *)v47 + 1);
        v51 = *((__int16 *)v47 + 2);
        if (v51 > 63)
          v51 += 1073741760;
        v52 = *((__int16 *)v47 + 3);
        v53 = v52 + 1073741760;
        v54 = v52 <= 63;
      }
      else
      {
        if (v48 == 130)
        {
          v50 = *(_DWORD *)(v47 + 2);
          v51 = *(_DWORD *)(v47 + 6);
          v52 = *(_DWORD *)(v47 + 10);
          goto LABEL_64;
        }
        v49 = (char)v47[1];
        v50 = v49 + 1073741808;
        if (v49 <= 15)
          v50 = (char)v47[1];
        v51 = (char)v47[2];
        if (v51 > 15)
          v51 += 1073741808;
        v52 = (char)v47[3];
        v53 = v52 + 1073741808;
        v54 = v52 <= 15;
      }
      if (!v54)
        v52 = v53;
LABEL_64:
      if (*(_DWORD *)(a2 + 4) != v50 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v46;
      *(_DWORD *)(a1 + 16) = v46;
      *(_BYTE *)(a3 + 8) = 1;
      v55 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v55 == -1)
        v56 = a3;
      else
        v56 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v55 == -1)
        v57 = 1;
      else
        v57 = 2;
      if (v55 == 0xFFFFFFFFLL)
        v58 = 1;
      else
        v58 = 2;
      v59 = v51;
      v353[0] = v58;
      v60 = v52;
      v354 = 0;
      v355 = a1;
      v356 = v56;
      result = JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v51, v52, v353, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v353[0] = v57;
        v354 = 0;
        v355 = a1;
        v356 = v56;
        result = JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v59, v60, v353, v61, v62, v63, v64);
        if ((result & 1) == 0)
        {
          v353[0] = v57;
          v354 = 0;
          v355 = a1;
          v356 = v56;
          return JSC::OpJstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v59, v60, v353, v65, v66, v67, v68);
        }
      }
      return result;
    case 0x93:
      v109 = *(unsigned int *)(a1 + 48);
      v110 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v109);
      v111 = *v110;
      if (v111 == 128)
      {
        v352 = *((__int16 *)v110 + 1);
        v113 = v352 + 1073741760;
        if (v352 <= 63)
          v113 = *((__int16 *)v110 + 1);
        v114 = *((__int16 *)v110 + 2);
        if (v114 > 63)
          v114 += 1073741760;
        v115 = *((__int16 *)v110 + 3);
        v116 = v115 + 1073741760;
        v117 = v115 <= 63;
      }
      else
      {
        if (v111 == 130)
        {
          v113 = *(_DWORD *)(v110 + 2);
          v114 = *(_DWORD *)(v110 + 6);
          v115 = *(_DWORD *)(v110 + 10);
          goto LABEL_144;
        }
        v112 = (char)v110[1];
        v113 = v112 + 1073741808;
        if (v112 <= 15)
          v113 = (char)v110[1];
        v114 = (char)v110[2];
        if (v114 > 15)
          v114 += 1073741808;
        v115 = (char)v110[3];
        v116 = v115 + 1073741808;
        v117 = v115 <= 15;
      }
      if (!v117)
        v115 = v116;
LABEL_144:
      if (*(_DWORD *)(a2 + 4) != v113 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v109;
      *(_DWORD *)(a1 + 16) = v109;
      *(_BYTE *)(a3 + 8) = 1;
      v118 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v118 == -1)
        v119 = a3;
      else
        v119 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v118 == -1)
        v120 = 1;
      else
        v120 = 2;
      if (v118 == 0xFFFFFFFFLL)
        v121 = 1;
      else
        v121 = 2;
      v122 = v114;
      v353[0] = v121;
      v123 = v115;
      v354 = 0;
      v355 = a1;
      v356 = v119;
      result = JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v114, v115, v353, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v353[0] = v120;
        v354 = 0;
        v355 = a1;
        v356 = v119;
        result = JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v122, v123, v353, v124, v125, v126, v127);
        if ((result & 1) == 0)
        {
          v353[0] = v120;
          v354 = 0;
          v355 = a1;
          v356 = v119;
          return JSC::OpJnstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v122, v123, v353, v128, v129, v130, v131);
        }
      }
      return result;
    case 0x94:
      v11 = *(unsigned int *)(a1 + 48);
      v12 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v11);
      v13 = *v12;
      if (v13 == 128)
      {
        v14 = *((__int16 *)v12 + 1);
        if (v14 > 63)
          v14 += 1073741760;
        v273 = *((__int16 *)v12 + 2);
        if (v273 <= 63)
          v16 = *((__int16 *)v12 + 2);
        else
          v16 = v273 + 1073741760;
        v17 = *((__int16 *)v12 + 3);
        v18 = v17 + 1073741760;
        v19 = v17 <= 63;
      }
      else
      {
        if (v13 == 130)
        {
          v14 = *(_DWORD *)(v12 + 2);
          v16 = *(_DWORD *)(v12 + 6);
          v20 = *(_DWORD *)(v12 + 10);
          goto LABEL_13;
        }
        v14 = (char)v12[1];
        if (v14 > 15)
          v14 += 1073741808;
        v15 = (char)v12[2];
        if (v15 <= 15)
          v16 = (char)v12[2];
        else
          v16 = v15 + 1073741808;
        v17 = (char)v12[3];
        v18 = v17 + 1073741808;
        v19 = v17 <= 15;
      }
      if (v19)
        v20 = v17;
      else
        v20 = v18;
LABEL_13:
      if (*(_DWORD *)(a2 + 4) != v14 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v11;
      *(_DWORD *)(a1 + 16) = v11;
      *(_BYTE *)(a3 + 8) = 1;
      v21 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v21 == -1)
        v22 = a3;
      else
        v22 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v21 == -1)
        v23 = 1;
      else
        v23 = 2;
      if (v21 == 0xFFFFFFFFLL)
        v24 = 1;
      else
        v24 = 2;
      v353[0] = v24;
      v355 = a1;
      v356 = v22;
      v25 = (v16 - 1073741808) < 0x80;
      if (v16 <= 0x3FFFFFFF)
        v25 = (v16 + 128) < 0x90;
      if (!v25)
        goto LABEL_339;
      v26 = (v20 - 1073741808) < 0x80;
      if (v20 <= 0x3FFFFFFF)
        v26 = (v20 + 128) < 0x90;
      if (!v26)
        goto LABEL_339;
      if ((_DWORD)v21 == -1)
      {
        v354 = v11;
        v27 = v11;
LABEL_33:
        v28 = 79;
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4F, a3, a4, a5, a6, a7, a8);
        v357 = 79;
        v30 = *(unsigned int *)(a1 + 12);
        v31 = *(unsigned int *)(a1 + 16);
        if (v30 > v31)
          goto LABEL_562;
        if ((_DWORD)v30 != *(_DWORD *)(a1 + 8))
        {
          v32 = *(_QWORD *)a1;
          v33 = 79;
          goto LABEL_36;
        }
LABEL_337:
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v357);
        v30 = *(unsigned int *)(a1 + 12);
        v32 = *(_QWORD *)a1;
        v33 = *(_BYTE *)result;
LABEL_36:
        *(_BYTE *)(v32 + v30) = v33;
        v34 = *(_DWORD *)(a1 + 12) + 1;
        v35 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v34;
        *(_DWORD *)(a1 + 16) = v35;
        goto LABEL_37;
      }
      v27 = v22 - v11;
      v354 = v22 - v11;
      if ((_DWORD)v22 - (_DWORD)v11 == (char)(v22 - v11))
        goto LABEL_33;
LABEL_339:
      v353[0] = v23;
      v355 = a1;
      v356 = v22;
      if (v16 <= 0x3FFFFFFF)
        v243 = (v16 + 0x8000) >> 6 < 0x201;
      else
        v243 = (v16 - 1073741760) < 0x8000;
      if (!v243)
        goto LABEL_542;
      v244 = (v20 - 1073741760) < 0x8000;
      if (v20 <= 0x3FFFFFFF)
        v244 = (v20 + 0x8000) >> 6 < 0x201;
      if (!v244)
        goto LABEL_542;
      if ((_DWORD)v21 == -1)
      {
        v354 = v11;
      }
      else
      {
        LODWORD(v11) = v22 - v11;
        v354 = v11;
        if ((_DWORD)v11 != (__int16)v11)
        {
LABEL_542:
          v353[0] = v23;
          v354 = 0;
          v355 = a1;
          v356 = v22;
          return JSC::OpJless::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v16, v20, (uint64_t)v353);
        }
      }
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x4F, a3, a4, a5, a6, a7, a8);
      v357 = 0x80;
      v245 = *(unsigned int *)(a1 + 12);
      v246 = *(unsigned int *)(a1 + 16);
      if (v245 > v246)
      {
        *(_DWORD *)(a1 + 16) = v246 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v246) = 0x80;
        v249 = *(_DWORD *)(a1 + 12);
        v250 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v245 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v245 + 1), (unint64_t)&v357);
          v245 = *(unsigned int *)(a1 + 12);
          v247 = *(_QWORD *)a1;
          v248 = *(_BYTE *)result;
        }
        else
        {
          v247 = *(_QWORD *)a1;
          v248 = 0x80;
        }
        *(_BYTE *)(v247 + v245) = v248;
        v249 = *(_DWORD *)(a1 + 12) + 1;
        v250 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v249;
        *(_DWORD *)(a1 + 16) = v250;
      }
      v251 = 79;
      goto LABEL_353;
    case 0x95:
      v132 = *(unsigned int *)(a1 + 48);
      v133 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v132);
      v134 = *v133;
      if (v134 == 128)
      {
        v135 = *((__int16 *)v133 + 1);
        if (v135 > 63)
          v135 += 1073741760;
        v348 = *((__int16 *)v133 + 2);
        if (v348 <= 63)
          v137 = *((__int16 *)v133 + 2);
        else
          v137 = v348 + 1073741760;
        v138 = *((__int16 *)v133 + 3);
        v139 = v138 + 1073741760;
        v140 = v138 <= 63;
      }
      else
      {
        if (v134 == 130)
        {
          v135 = *(_DWORD *)(v133 + 2);
          v137 = *(_DWORD *)(v133 + 6);
          v141 = *(_DWORD *)(v133 + 10);
          goto LABEL_170;
        }
        v135 = (char)v133[1];
        if (v135 > 15)
          v135 += 1073741808;
        v136 = (char)v133[2];
        if (v136 <= 15)
          v137 = (char)v133[2];
        else
          v137 = v136 + 1073741808;
        v138 = (char)v133[3];
        v139 = v138 + 1073741808;
        v140 = v138 <= 15;
      }
      if (v140)
        v141 = v138;
      else
        v141 = v139;
LABEL_170:
      if (*(_DWORD *)(a2 + 4) != v135 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v132;
      *(_DWORD *)(a1 + 16) = v132;
      *(_BYTE *)(a3 + 8) = 1;
      v142 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v142 == -1)
        v143 = a3;
      else
        v143 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v142 == -1)
        v144 = 1;
      else
        v144 = 2;
      if (v142 == 0xFFFFFFFFLL)
        v145 = 1;
      else
        v145 = 2;
      v353[0] = v145;
      v355 = a1;
      v356 = v143;
      v146 = (v137 - 1073741808) < 0x80;
      if (v137 <= 0x3FFFFFFF)
        v146 = (v137 + 128) < 0x90;
      if (!v146)
        goto LABEL_431;
      v147 = (v141 - 1073741808) < 0x80;
      if (v141 <= 0x3FFFFFFF)
        v147 = (v141 + 128) < 0x90;
      if (!v147)
        goto LABEL_431;
      if ((_DWORD)v142 == -1)
      {
        v354 = v132;
        goto LABEL_190;
      }
      v354 = v143 - v132;
      if ((_DWORD)v143 - (_DWORD)v132 == (char)(v143 - v132))
      {
        LODWORD(v132) = v143 - v132;
LABEL_190:
        result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x50, a3, a4, a5, a6, a7, a8);
        v357 = 80;
        v148 = *(unsigned int *)(a1 + 12);
        v149 = *(unsigned int *)(a1 + 16);
        if (v148 > v149)
        {
          *(_DWORD *)(a1 + 16) = v149 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v149) = 80;
          v152 = *(_DWORD *)(a1 + 12);
          v153 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v148 == *(_DWORD *)(a1 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v148 + 1), (unint64_t)&v357);
            v148 = *(unsigned int *)(a1 + 12);
            v150 = *(_QWORD *)a1;
            v151 = *(_BYTE *)result;
          }
          else
          {
            v150 = *(_QWORD *)a1;
            v151 = 80;
          }
          *(_BYTE *)(v150 + v148) = v151;
          v152 = *(_DWORD *)(a1 + 12) + 1;
          v153 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v152;
          *(_DWORD *)(a1 + 16) = v153;
        }
        v154 = v137 + 16;
        if (v137 <= 0x3FFFFFFF)
          v154 = v137;
        v357 = v154;
        if (v152 > v153)
        {
          *(_DWORD *)(a1 + 16) = v153 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v153) = v154;
          v157 = *(_DWORD *)(a1 + 12);
          v158 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v155 = v152;
          if (v152 == *(_DWORD *)(a1 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v152 + 1), (unint64_t)&v357);
            v155 = *(unsigned int *)(a1 + 12);
            v156 = *(_QWORD *)a1;
            v154 = *(_BYTE *)result;
          }
          else
          {
            v156 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v156 + v155) = v154;
          v157 = *(_DWORD *)(a1 + 12) + 1;
          v158 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v157;
          *(_DWORD *)(a1 + 16) = v158;
        }
        v159 = v141 + 16;
        if (v141 <= 0x3FFFFFFF)
          v159 = v141;
        v357 = v159;
        if (v157 > v158)
        {
          *(_DWORD *)(a1 + 16) = v158 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v158) = v159;
        }
        else
        {
          v160 = v157;
          if (v157 == *(_DWORD *)(a1 + 8))
          {
            result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v157 + 1), (unint64_t)&v357);
            v160 = *(unsigned int *)(a1 + 12);
            v161 = *(_QWORD *)a1;
            v159 = *(_BYTE *)result;
          }
          else
          {
            v161 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v161 + v160) = v159;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        if ((_DWORD)v142 == -1)
        {
          v162 = *(unsigned int *)(v8 + 28);
          if ((_DWORD)v162 != *(_DWORD *)(v8 + 24))
            goto LABEL_208;
          v205 = v8 + 16;
          v206 = v162 + 1;
LABEL_548:
          result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v205, v206, (unint64_t)&v354);
          LOBYTE(v132) = 0;
          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * *(unsigned int *)(v8 + 28)) = *(_DWORD *)result;
LABEL_209:
          ++*(_DWORD *)(v8 + 28);
        }
LABEL_210:
        v357 = v132;
        v44 = *(unsigned int *)(a1 + 12);
        v163 = *(unsigned int *)(a1 + 16);
        if (v44 > v163)
        {
          *(_DWORD *)(a1 + 16) = v163 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v163) = v132;
          return result;
        }
        if ((_DWORD)v44 != *(_DWORD *)(a1 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a1 + v44) = v132;
          goto LABEL_53;
        }
LABEL_386:
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v357);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
        goto LABEL_53;
      }
LABEL_431:
      v353[0] = v144;
      v355 = a1;
      v356 = v143;
      if (v137 <= 0x3FFFFFFF)
        v310 = (v137 + 0x8000) >> 6 < 0x201;
      else
        v310 = (v137 - 1073741760) < 0x8000;
      if (!v310)
        goto LABEL_560;
      v311 = (v141 - 1073741760) < 0x8000;
      if (v141 <= 0x3FFFFFFF)
        v311 = (v141 + 0x8000) >> 6 < 0x201;
      if (!v311)
        goto LABEL_560;
      if ((_DWORD)v142 == -1)
      {
        v354 = v132;
      }
      else
      {
        LODWORD(v132) = v143 - v132;
        v354 = v132;
        if ((_DWORD)v132 != (__int16)v132)
        {
LABEL_560:
          v353[0] = v144;
          v354 = 0;
          v355 = a1;
          v356 = v143;
          return JSC::OpJlesseq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v137, v141, v353, a5, a6, a7, a8);
        }
      }
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x50, a3, a4, a5, a6, a7, a8);
      v357 = 0x80;
      v312 = *(unsigned int *)(a1 + 12);
      v313 = *(unsigned int *)(a1 + 16);
      if (v312 > v313)
      {
        *(_DWORD *)(a1 + 16) = v313 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v313) = 0x80;
        v316 = *(_DWORD *)(a1 + 12);
        v317 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v312 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v312 + 1), (unint64_t)&v357);
          v312 = *(unsigned int *)(a1 + 12);
          v314 = *(_QWORD *)a1;
          v315 = *(_BYTE *)result;
        }
        else
        {
          v314 = *(_QWORD *)a1;
          v315 = 0x80;
        }
        *(_BYTE *)(v314 + v312) = v315;
        v316 = *(_DWORD *)(a1 + 12) + 1;
        v317 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v316;
        *(_DWORD *)(a1 + 16) = v317;
      }
      v318 = 80;
      v357 = 80;
      if (v316 > v317)
      {
        *(_DWORD *)(a1 + 16) = v317 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v317) = 80;
        v321 = *(_DWORD *)(a1 + 12);
        v322 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v319 = v316;
        if (v316 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v316 + 1), (unint64_t)&v357);
          v319 = *(unsigned int *)(a1 + 12);
          v320 = *(_QWORD *)a1;
          v318 = *(_BYTE *)result;
        }
        else
        {
          v320 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v320 + v319) = v318;
        v321 = *(_DWORD *)(a1 + 12) + 1;
        v322 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v321;
        *(_DWORD *)(a1 + 16) = v322;
      }
      if (v137 > 0x3FFFFFFF)
        v137 += 64;
      v357 = v137;
      if (v321 > v322)
      {
        *(_DWORD *)(a1 + 16) = v322 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v322) = v137;
        v323 = *(_DWORD *)(a1 + 12);
        v324 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v321 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v321 + 1), (unint64_t)&v357);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v321) = v137;
        }
        v323 = *(_DWORD *)(a1 + 12) + 1;
        v324 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v323;
        *(_DWORD *)(a1 + 16) = v324;
      }
      v325 = v137 >> 8;
      v357 = BYTE1(v137);
      if (v323 > v324)
      {
        *(_DWORD *)(a1 + 16) = v324 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v324) = BYTE1(v137);
        v328 = *(_DWORD *)(a1 + 12);
        v329 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v326 = v323;
        if (v323 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v323 + 1), (unint64_t)&v357);
          v326 = *(unsigned int *)(a1 + 12);
          v327 = *(_QWORD *)a1;
          LOBYTE(v325) = *(_BYTE *)result;
        }
        else
        {
          v327 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v327 + v326) = v325;
        v328 = *(_DWORD *)(a1 + 12) + 1;
        v329 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v328;
        *(_DWORD *)(a1 + 16) = v329;
      }
      if (v141 > 0x3FFFFFFF)
        v141 += 64;
      v357 = v141;
      if (v328 > v329)
      {
        *(_DWORD *)(a1 + 16) = v329 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v329) = v141;
        v330 = *(_DWORD *)(a1 + 12);
        v331 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if (v328 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v328 + 1), (unint64_t)&v357);
          *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)a1 + v328) = v141;
        }
        v330 = *(_DWORD *)(a1 + 12) + 1;
        v331 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v330;
        *(_DWORD *)(a1 + 16) = v331;
      }
      v332 = v141 >> 8;
      v357 = BYTE1(v141);
      if (v330 > v331)
      {
        *(_DWORD *)(a1 + 16) = v331 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v331) = BYTE1(v141);
      }
      else
      {
        v333 = v330;
        if (v330 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v330 + 1), (unint64_t)&v357);
          v333 = *(unsigned int *)(a1 + 12);
          v334 = *(_QWORD *)a1;
          LOBYTE(v332) = *(_BYTE *)result;
        }
        else
        {
          v334 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v334 + v333) = v332;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      if ((_DWORD)v142 == -1)
      {
        v343 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v343 == *(_DWORD *)(v8 + 24))
        {
          result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 16, v343 + 1, (unint64_t)&v354);
          LOBYTE(v132) = 0;
          LOBYTE(v268) = 0;
          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * (*(_DWORD *)(v8 + 28))++) = *(_DWORD *)result;
        }
        else
        {
          LOBYTE(v268) = 0;
          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v343) = v132;
          ++*(_DWORD *)(v8 + 28);
          LOBYTE(v132) = 0;
        }
      }
      else
      {
        v268 = v132 >> 8;
      }
      v357 = v132;
      v269 = *(unsigned int *)(a1 + 12);
      v335 = *(unsigned int *)(a1 + 16);
      if (v269 <= v335)
      {
        if ((_DWORD)v269 == *(_DWORD *)(a1 + 8))
          goto LABEL_523;
        *(_BYTE *)(*(_QWORD *)a1 + v269) = v132;
LABEL_382:
        v271 = *(_DWORD *)(a1 + 12) + 1;
        v272 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v271;
        *(_DWORD *)(a1 + 16) = v272;
        goto LABEL_383;
      }
      *(_DWORD *)(a1 + 16) = v335 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v335) = v132;
      goto LABEL_600;
    case 0x96:
      v11 = *(unsigned int *)(a1 + 48);
      v164 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v11);
      v165 = *v164;
      if (v165 == 128)
      {
        v166 = *((__int16 *)v164 + 1);
        if (v166 > 63)
          v166 += 1073741760;
        v349 = *((__int16 *)v164 + 2);
        if (v349 <= 63)
          v16 = *((__int16 *)v164 + 2);
        else
          v16 = v349 + 1073741760;
        v168 = *((__int16 *)v164 + 3);
        v169 = v168 + 1073741760;
        v170 = v168 <= 63;
      }
      else
      {
        if (v165 == 130)
        {
          v166 = *(_DWORD *)(v164 + 2);
          v16 = *(_DWORD *)(v164 + 6);
          v20 = *(_DWORD *)(v164 + 10);
          goto LABEL_224;
        }
        v166 = (char)v164[1];
        if (v166 > 15)
          v166 += 1073741808;
        v167 = (char)v164[2];
        if (v167 <= 15)
          v16 = (char)v164[2];
        else
          v16 = v167 + 1073741808;
        v168 = (char)v164[3];
        v169 = v168 + 1073741808;
        v170 = v168 <= 15;
      }
      if (v170)
        v20 = v168;
      else
        v20 = v169;
LABEL_224:
      if (*(_DWORD *)(a2 + 4) != v166 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v11;
      *(_DWORD *)(a1 + 16) = v11;
      *(_BYTE *)(a3 + 8) = 1;
      v21 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v21 == -1)
        v171 = a3;
      else
        v171 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v21 == -1)
        v172 = 1;
      else
        v172 = 2;
      if (v21 == 0xFFFFFFFFLL)
        v173 = 1;
      else
        v173 = 2;
      v353[0] = v173;
      v355 = a1;
      v356 = v171;
      v174 = (v16 - 1073741808) < 0x80;
      if (v16 <= 0x3FFFFFFF)
        v174 = (v16 + 128) < 0x90;
      if (!v174)
        goto LABEL_477;
      v175 = (v20 - 1073741808) < 0x80;
      if (v20 <= 0x3FFFFFFF)
        v175 = (v20 + 128) < 0x90;
      if (!v175)
        goto LABEL_477;
      if ((_DWORD)v21 == -1)
      {
        v354 = v11;
        v27 = v11;
        goto LABEL_244;
      }
      v27 = v171 - v11;
      v354 = v171 - v11;
      if ((_DWORD)v171 - (_DWORD)v11 != (char)(v171 - v11))
      {
LABEL_477:
        v353[0] = v172;
        v355 = a1;
        v356 = v171;
        if (v16 <= 0x3FFFFFFF)
          v336 = (v16 + 0x8000) >> 6 < 0x201;
        else
          v336 = (v16 - 1073741760) < 0x8000;
        if (v336)
        {
          v337 = (v20 - 1073741760) < 0x8000;
          if (v20 <= 0x3FFFFFFF)
            v337 = (v20 + 0x8000) >> 6 < 0x201;
          if (v337)
          {
            if ((_DWORD)v21 == -1)
            {
              v354 = v11;
              goto LABEL_486;
            }
            LODWORD(v11) = v171 - v11;
            v354 = v11;
            if ((_DWORD)v11 == (__int16)v11)
            {
LABEL_486:
              result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x51, a3, a4, a5, a6, a7, a8);
              v357 = 0x80;
              v338 = *(unsigned int *)(a1 + 12);
              v339 = *(unsigned int *)(a1 + 16);
              if (v338 > v339)
              {
                *(_DWORD *)(a1 + 16) = v339 + 1;
                *(_BYTE *)(*(_QWORD *)a1 + v339) = 0x80;
                v249 = *(_DWORD *)(a1 + 12);
                v250 = *(_DWORD *)(a1 + 16);
              }
              else
              {
                if ((_DWORD)v338 == *(_DWORD *)(a1 + 8))
                {
                  result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v338 + 1), (unint64_t)&v357);
                  v338 = *(unsigned int *)(a1 + 12);
                  v340 = *(_QWORD *)a1;
                  v341 = *(_BYTE *)result;
                }
                else
                {
                  v340 = *(_QWORD *)a1;
                  v341 = 0x80;
                }
                *(_BYTE *)(v340 + v338) = v341;
                v249 = *(_DWORD *)(a1 + 12) + 1;
                v250 = *(_DWORD *)(a1 + 16) + 1;
                *(_DWORD *)(a1 + 12) = v249;
                *(_DWORD *)(a1 + 16) = v250;
              }
              v251 = 81;
LABEL_353:
              v357 = v251;
              if (v249 > v250)
              {
                *(_DWORD *)(a1 + 16) = v250 + 1;
                *(_BYTE *)(*(_QWORD *)a1 + v250) = v251;
                v254 = *(_DWORD *)(a1 + 12);
                v255 = *(_DWORD *)(a1 + 16);
              }
              else
              {
                v252 = v249;
                if (v249 == *(_DWORD *)(a1 + 8))
                {
                  result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v249 + 1), (unint64_t)&v357);
                  v252 = *(unsigned int *)(a1 + 12);
                  v253 = *(_QWORD *)a1;
                  v251 = *(_BYTE *)result;
                }
                else
                {
                  v253 = *(_QWORD *)a1;
                }
                *(_BYTE *)(v253 + v252) = v251;
                v254 = *(_DWORD *)(a1 + 12) + 1;
                v255 = *(_DWORD *)(a1 + 16) + 1;
                *(_DWORD *)(a1 + 12) = v254;
                *(_DWORD *)(a1 + 16) = v255;
              }
              if (v16 > 0x3FFFFFFF)
                v16 += 64;
              v357 = v16;
              if (v254 > v255)
              {
                *(_DWORD *)(a1 + 16) = v255 + 1;
                *(_BYTE *)(*(_QWORD *)a1 + v255) = v16;
                v256 = *(_DWORD *)(a1 + 12);
                v257 = *(_DWORD *)(a1 + 16);
              }
              else
              {
                if (v254 == *(_DWORD *)(a1 + 8))
                {
                  result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v254 + 1), (unint64_t)&v357);
                  *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)a1 + v254) = v16;
                }
                v256 = *(_DWORD *)(a1 + 12) + 1;
                v257 = *(_DWORD *)(a1 + 16) + 1;
                *(_DWORD *)(a1 + 12) = v256;
                *(_DWORD *)(a1 + 16) = v257;
              }
              v258 = v16 >> 8;
              v357 = BYTE1(v16);
              if (v256 > v257)
              {
                *(_DWORD *)(a1 + 16) = v257 + 1;
                *(_BYTE *)(*(_QWORD *)a1 + v257) = BYTE1(v16);
                v261 = *(_DWORD *)(a1 + 12);
                v262 = *(_DWORD *)(a1 + 16);
              }
              else
              {
                v259 = v256;
                if (v256 == *(_DWORD *)(a1 + 8))
                {
                  result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v256 + 1), (unint64_t)&v357);
                  v259 = *(unsigned int *)(a1 + 12);
                  v260 = *(_QWORD *)a1;
                  LOBYTE(v258) = *(_BYTE *)result;
                }
                else
                {
                  v260 = *(_QWORD *)a1;
                }
                *(_BYTE *)(v260 + v259) = v258;
                v261 = *(_DWORD *)(a1 + 12) + 1;
                v262 = *(_DWORD *)(a1 + 16) + 1;
                *(_DWORD *)(a1 + 12) = v261;
                *(_DWORD *)(a1 + 16) = v262;
              }
              if (v20 > 0x3FFFFFFF)
                v20 += 64;
              v357 = v20;
              if (v261 > v262)
              {
                *(_DWORD *)(a1 + 16) = v262 + 1;
                *(_BYTE *)(*(_QWORD *)a1 + v262) = v20;
                v263 = *(_DWORD *)(a1 + 12);
                v264 = *(_DWORD *)(a1 + 16);
              }
              else
              {
                if (v261 == *(_DWORD *)(a1 + 8))
                {
                  result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v261 + 1), (unint64_t)&v357);
                  *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)a1 + v261) = v20;
                }
                v263 = *(_DWORD *)(a1 + 12) + 1;
                v264 = *(_DWORD *)(a1 + 16) + 1;
                *(_DWORD *)(a1 + 12) = v263;
                *(_DWORD *)(a1 + 16) = v264;
              }
              v265 = v20 >> 8;
              v357 = BYTE1(v20);
              if (v263 > v264)
              {
                *(_DWORD *)(a1 + 16) = v264 + 1;
                *(_BYTE *)(*(_QWORD *)a1 + v264) = BYTE1(v20);
              }
              else
              {
                v266 = v263;
                if (v263 == *(_DWORD *)(a1 + 8))
                {
                  result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v263 + 1), (unint64_t)&v357);
                  v266 = *(unsigned int *)(a1 + 12);
                  v267 = *(_QWORD *)a1;
                  LOBYTE(v265) = *(_BYTE *)result;
                }
                else
                {
                  v267 = *(_QWORD *)a1;
                }
                *(_BYTE *)(v267 + v266) = v265;
                *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
              }
              if ((_DWORD)v21 == -1)
              {
                v295 = *(unsigned int *)(v8 + 28);
                if ((_DWORD)v295 == *(_DWORD *)(v8 + 24))
                {
                  result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 16, v295 + 1, (unint64_t)&v354);
                  LOBYTE(v11) = 0;
                  LOBYTE(v268) = 0;
                  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * (*(_DWORD *)(v8 + 28))++) = *(_DWORD *)result;
                }
                else
                {
                  LOBYTE(v268) = 0;
                  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v295) = v11;
                  ++*(_DWORD *)(v8 + 28);
                  LOBYTE(v11) = 0;
                }
              }
              else
              {
                v268 = v11 >> 8;
              }
              v357 = v11;
              v269 = *(unsigned int *)(a1 + 12);
              v270 = *(unsigned int *)(a1 + 16);
              if (v269 <= v270)
              {
                if ((_DWORD)v269 == *(_DWORD *)(a1 + 8))
                {
LABEL_523:
                  result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v269 + 1), (unint64_t)&v357);
                  *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)a1 + v269) = v11;
                }
                goto LABEL_382;
              }
              *(_DWORD *)(a1 + 16) = v270 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v270) = v11;
LABEL_600:
              v271 = *(_DWORD *)(a1 + 12);
              v272 = *(_DWORD *)(a1 + 16);
LABEL_383:
              v357 = v268;
              if (v271 > v272)
              {
                *(_DWORD *)(a1 + 16) = v272 + 1;
                *(_BYTE *)(*(_QWORD *)a1 + v272) = v268;
                return result;
              }
              v44 = v271;
              if (v271 != *(_DWORD *)(a1 + 8))
              {
                *(_BYTE *)(*(_QWORD *)a1 + v271) = v268;
                goto LABEL_53;
              }
              goto LABEL_386;
            }
          }
        }
        v353[0] = v172;
        v354 = 0;
        v355 = a1;
        v356 = v171;
        return JSC::OpJgreater::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v16, v20, v353, a5, a6, a7, a8);
      }
LABEL_244:
      v28 = 81;
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x51, a3, a4, a5, a6, a7, a8);
      v357 = 81;
      v30 = *(unsigned int *)(a1 + 12);
      v31 = *(unsigned int *)(a1 + 16);
      if (v30 <= v31)
      {
        if ((_DWORD)v30 == *(_DWORD *)(a1 + 8))
          goto LABEL_337;
        v32 = *(_QWORD *)a1;
        v33 = 81;
        goto LABEL_36;
      }
LABEL_562:
      *(_DWORD *)(a1 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v31) = v28;
      v34 = *(_DWORD *)(a1 + 12);
      v35 = *(_DWORD *)(a1 + 16);
LABEL_37:
      v36 = v16 + 16;
      if (v16 <= 0x3FFFFFFF)
        v36 = v16;
      v357 = v36;
      if (v34 > v35)
      {
        *(_DWORD *)(a1 + 16) = v35 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v35) = v36;
        v39 = *(_DWORD *)(a1 + 12);
        v40 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v37 = v34;
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v34 + 1), (unint64_t)&v357);
          v37 = *(unsigned int *)(a1 + 12);
          v38 = *(_QWORD *)a1;
          v36 = *(_BYTE *)result;
        }
        else
        {
          v38 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v38 + v37) = v36;
        v39 = *(_DWORD *)(a1 + 12) + 1;
        v40 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v39;
        *(_DWORD *)(a1 + 16) = v40;
      }
      v41 = v20 + 16;
      if (v20 <= 0x3FFFFFFF)
        v41 = v20;
      v357 = v41;
      if (v39 > v40)
      {
        *(_DWORD *)(a1 + 16) = v40 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v40) = v41;
      }
      else
      {
        v42 = v39;
        if (v39 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v357);
          v42 = *(unsigned int *)(a1 + 12);
          v43 = *(_QWORD *)a1;
          v41 = *(_BYTE *)result;
        }
        else
        {
          v43 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v43 + v42) = v41;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      if ((_DWORD)v21 == -1)
      {
        v69 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v69 == *(_DWORD *)(v8 + 24))
        {
          result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 16, v69 + 1, (unint64_t)&v354);
          LOBYTE(v27) = 0;
          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * *(unsigned int *)(v8 + 28)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v69) = v27;
          LOBYTE(v27) = 0;
        }
        ++*(_DWORD *)(v8 + 28);
      }
      v357 = v27;
      v44 = *(unsigned int *)(a1 + 12);
      v45 = *(unsigned int *)(a1 + 16);
      if (v44 > v45)
      {
        *(_DWORD *)(a1 + 16) = v45 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v45) = v27;
        return result;
      }
      if ((_DWORD)v44 == *(_DWORD *)(a1 + 8))
        goto LABEL_386;
      *(_BYTE *)(*(_QWORD *)a1 + v44) = v27;
LABEL_53:
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      return result;
    case 0x97:
      v132 = *(unsigned int *)(a1 + 48);
      v176 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v132);
      v177 = *v176;
      if (v177 == 128)
      {
        v178 = *((__int16 *)v176 + 1);
        if (v178 > 63)
          v178 += 1073741760;
        v350 = *((__int16 *)v176 + 2);
        if (v350 <= 63)
          v180 = *((__int16 *)v176 + 2);
        else
          v180 = v350 + 1073741760;
        v181 = *((__int16 *)v176 + 3);
        v182 = v181 + 1073741760;
        v183 = v181 <= 63;
      }
      else
      {
        if (v177 == 130)
        {
          v178 = *(_DWORD *)(v176 + 2);
          v180 = *(_DWORD *)(v176 + 6);
          v184 = *(_DWORD *)(v176 + 10);
          goto LABEL_258;
        }
        v178 = (char)v176[1];
        if (v178 > 15)
          v178 += 1073741808;
        v179 = (char)v176[2];
        if (v179 <= 15)
          v180 = (char)v176[2];
        else
          v180 = v179 + 1073741808;
        v181 = (char)v176[3];
        v182 = v181 + 1073741808;
        v183 = v181 <= 15;
      }
      if (v183)
        v184 = v181;
      else
        v184 = v182;
LABEL_258:
      if (*(_DWORD *)(a2 + 4) != v178 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v132;
      *(_DWORD *)(a1 + 16) = v132;
      *(_BYTE *)(a3 + 8) = 1;
      v185 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v185 == -1)
        v186 = a3;
      else
        v186 = *(unsigned int *)(a3 + 4);
      if ((_DWORD)v185 == -1)
        v187 = 1;
      else
        v187 = 2;
      if (v185 == 0xFFFFFFFFLL)
        v188 = 1;
      else
        v188 = 2;
      v353[0] = v188;
      v355 = a1;
      v356 = v186;
      v189 = (v180 - 1073741808) < 0x80;
      if (v180 <= 0x3FFFFFFF)
        v189 = (v180 + 128) < 0x90;
      if (!v189)
        goto LABEL_506;
      v190 = (v184 - 1073741808) < 0x80;
      if (v184 <= 0x3FFFFFFF)
        v190 = (v184 + 128) < 0x90;
      if (!v190)
        goto LABEL_506;
      if ((_DWORD)v185 == -1)
      {
        v354 = v132;
      }
      else
      {
        LODWORD(v132) = v186 - v132;
        v354 = v132;
        if ((_DWORD)v132 != (char)v132)
        {
LABEL_506:
          v353[0] = v187;
          v354 = 0;
          v355 = a1;
          v356 = v186;
          result = JSC::OpJgreatereq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v180, v184, v353);
          if ((result & 1) == 0)
          {
            v353[0] = v187;
            v354 = 0;
            v355 = a1;
            v356 = v186;
            return JSC::OpJgreatereq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v180, v184, v353, v344, v345, v346, v347);
          }
          return result;
        }
      }
      result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x52, a3, a4, a5, a6, a7, a8);
      v357 = 82;
      v191 = *(unsigned int *)(a1 + 12);
      v192 = *(unsigned int *)(a1 + 16);
      if (v191 > v192)
      {
        *(_DWORD *)(a1 + 16) = v192 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v192) = 82;
        v195 = *(_DWORD *)(a1 + 12);
        v196 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v191 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v191 + 1), (unint64_t)&v357);
          v191 = *(unsigned int *)(a1 + 12);
          v193 = *(_QWORD *)a1;
          v194 = *(_BYTE *)result;
        }
        else
        {
          v193 = *(_QWORD *)a1;
          v194 = 82;
        }
        *(_BYTE *)(v193 + v191) = v194;
        v195 = *(_DWORD *)(a1 + 12) + 1;
        v196 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v195;
        *(_DWORD *)(a1 + 16) = v196;
      }
      v197 = v180 + 16;
      if (v180 <= 0x3FFFFFFF)
        v197 = v180;
      v357 = v197;
      if (v195 > v196)
      {
        *(_DWORD *)(a1 + 16) = v196 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v196) = v197;
        v200 = *(_DWORD *)(a1 + 12);
        v201 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v198 = v195;
        if (v195 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v195 + 1), (unint64_t)&v357);
          v198 = *(unsigned int *)(a1 + 12);
          v199 = *(_QWORD *)a1;
          v197 = *(_BYTE *)result;
        }
        else
        {
          v199 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v199 + v198) = v197;
        v200 = *(_DWORD *)(a1 + 12) + 1;
        v201 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v200;
        *(_DWORD *)(a1 + 16) = v201;
      }
      v202 = v184 + 16;
      if (v184 <= 0x3FFFFFFF)
        v202 = v184;
      v357 = v202;
      if (v200 > v201)
      {
        *(_DWORD *)(a1 + 16) = v201 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v201) = v202;
      }
      else
      {
        v203 = v200;
        if (v200 == *(_DWORD *)(a1 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v200 + 1), (unint64_t)&v357);
          v203 = *(unsigned int *)(a1 + 12);
          v204 = *(_QWORD *)a1;
          v202 = *(_BYTE *)result;
        }
        else
        {
          v204 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v204 + v203) = v202;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      if ((_DWORD)v185 != -1)
        goto LABEL_210;
      v162 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v162 != *(_DWORD *)(v8 + 24))
      {
LABEL_208:
        *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v162) = v132;
        LOBYTE(v132) = 0;
        goto LABEL_209;
      }
      v205 = v8 + 16;
      v206 = v162 + 1;
      goto LABEL_548;
    case 0x98:
      result = JSC::BytecodeGenerator::fuseCompareAndJump<JSC::OpBelow,JSC::OpJbelow>(a1, a2, a3);
      if ((result & 1) == 0)
        goto LABEL_404;
      return result;
    case 0x99:
      result = JSC::BytecodeGenerator::fuseCompareAndJump<JSC::OpBeloweq,JSC::OpJbeloweq>(a1, a2, a3);
      if ((result & 1) == 0)
        goto LABEL_404;
      return result;
    case 0xA6:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_404;
      v207 = *(unsigned int *)(a1 + 48);
      v208 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v207);
      v209 = *v208;
      if (v209 == 128)
      {
        v210 = *((__int16 *)v208 + 1);
        if (v210 > 63)
          v210 += 1073741760;
        v211 = *((__int16 *)v208 + 2);
        v212 = v211 + 1073741760;
        v213 = v211 <= 63;
      }
      else
      {
        if (v209 == 130)
        {
          v210 = *(_DWORD *)(v208 + 2);
          v211 = *(_DWORD *)(v208 + 6);
          goto LABEL_305;
        }
        v210 = (char)v208[1];
        if (v210 > 15)
          v210 += 1073741808;
        v211 = (char)v208[2];
        v212 = v211 + 1073741808;
        v213 = v211 <= 15;
      }
      if (!v213)
        v211 = v212;
LABEL_305:
      if (*(_DWORD *)(a2 + 4) != v210 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      v214 = v211;
      *(_DWORD *)(a1 + 12) = v207;
      *(_DWORD *)(a1 + 16) = v207;
      *(_BYTE *)(a3 + 8) = 1;
      v353[0] = 1;
      v354 = 0;
      v355 = a1;
      v356 = a3;
      result = JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v211, v353, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v353[0] = 1;
        v354 = 0;
        v355 = a1;
        v356 = v8;
        result = JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v214, v353);
        if ((result & 1) == 0)
        {
          v353[0] = 1;
          v354 = 0;
          v355 = a1;
          v356 = v8;
          return JSC::OpJeqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v214, v353, v215, v216, v217, v218, v219);
        }
      }
      return result;
    case 0xA7:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_404;
      v274 = *(unsigned int *)(a1 + 48);
      v275 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v274);
      v276 = *v275;
      if (v276 == 128)
      {
        v277 = *((__int16 *)v275 + 1);
        if (v277 > 63)
          v277 += 1073741760;
        v278 = *((__int16 *)v275 + 2);
        v279 = v278 + 1073741760;
        v280 = v278 <= 63;
      }
      else
      {
        if (v276 == 130)
        {
          v277 = *(_DWORD *)(v275 + 2);
          v278 = *(_DWORD *)(v275 + 6);
          goto LABEL_401;
        }
        v277 = (char)v275[1];
        if (v277 > 15)
          v277 += 1073741808;
        v278 = (char)v275[2];
        v279 = v278 + 1073741808;
        v280 = v278 <= 15;
      }
      if (!v280)
        v278 = v279;
LABEL_401:
      if (*(_DWORD *)(a2 + 4) != v277 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
        goto LABEL_404;
      *(_DWORD *)(a1 + 36) = 115;
      v298 = v278;
      *(_DWORD *)(a1 + 12) = v274;
      *(_DWORD *)(a1 + 16) = v274;
      *(_BYTE *)(a3 + 8) = 1;
      v353[0] = 1;
      v354 = 0;
      v355 = a1;
      v356 = a3;
      result = JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v278, v353, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
        v353[0] = 1;
        v354 = 0;
        v355 = a1;
        v356 = v8;
        result = JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v298, v353);
        if ((result & 1) == 0)
        {
          v353[0] = 1;
          v354 = 0;
          v355 = a1;
          v356 = v8;
          return JSC::OpJneqNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v298, v353, v299, v300, v301, v302, v303);
        }
      }
      return result;
    case 0xAE:
      if (*(_DWORD *)(a3 + 4) != -1)
        goto LABEL_404;
      v70 = *(unsigned int *)(a1 + 48);
      v71 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v70);
      v72 = *v71;
      if (v72 == 128)
      {
        v73 = *((__int16 *)v71 + 1);
        if (v73 > 63)
          v73 += 1073741760;
        v74 = *((__int16 *)v71 + 2);
        v75 = v74 + 1073741760;
        v76 = v74 <= 63;
      }
      else
      {
        if (v72 == 130)
        {
          v73 = *(_DWORD *)(v71 + 2);
          v74 = *(_DWORD *)(v71 + 6);
          goto LABEL_90;
        }
        v73 = (char)v71[1];
        if (v73 > 15)
          v73 += 1073741808;
        v74 = (char)v71[2];
        v75 = v74 + 1073741808;
        v76 = v74 <= 15;
      }
      if (!v76)
        v74 = v75;
LABEL_90:
      if (*(_DWORD *)(a2 + 4) != v73 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
      {
LABEL_404:
        v281 = *(_DWORD *)(a2 + 4);
        *(_BYTE *)(v8 + 8) = 1;
        v282 = *(unsigned int *)(v8 + 4);
        if ((_DWORD)v282 == -1)
        {
          v283 = 1;
        }
        else
        {
          v8 = *(unsigned int *)(v8 + 4);
          v283 = 2;
        }
        if (v282 == 0xFFFFFFFFLL)
          v284 = 1;
        else
          v284 = 2;
        v353[0] = v284;
        v354 = 0;
        v355 = a1;
        v356 = v8;
        result = JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v281, v353, a4, a5, a6, a7, a8);
        if ((result & 1) == 0)
        {
          v353[0] = v283;
          v354 = 0;
          v355 = a1;
          v356 = v8;
          result = JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v281, v353, v285, v286, v287, v288, v289);
          if ((result & 1) == 0)
          {
            v353[0] = v283;
            v354 = 0;
            v355 = a1;
            v356 = v8;
            return JSC::OpJtrue::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v281, v353, v290, v291, v292, v293, v294);
          }
        }
        return result;
      }
      v77 = v74;
      *(_DWORD *)(a1 + 36) = 115;
      *(_DWORD *)(a1 + 12) = v70;
      *(_DWORD *)(a1 + 16) = v70;
      *(_BYTE *)(a3 + 8) = 1;
      v353[0] = 1;
      v355 = a1;
      v356 = a3;
      v78 = (v74 - 1073741808) < 0x80;
      if (v74 <= 0x3FFFFFFF)
        v78 = (v74 + 128) < 0x90;
      if (!v78)
      {
        v353[0] = 1;
        v354 = 0;
        v355 = a1;
        v356 = a3;
        result = JSC::OpJundefinedOrNull::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v74, v353);
        if ((result & 1) == 0)
        {
          v353[0] = 1;
          v354 = 0;
          v355 = a1;
          v356 = v8;
          return JSC::OpJundefinedOrNull::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v77, v353, v305, v306, v307, v308, v309);
        }
        return result;
      }
      v354 = v70;
      JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x48, a3, a4, a5, a6, a7, a8);
      v357 = 72;
      v79 = *(unsigned int *)(a1 + 12);
      v80 = *(unsigned int *)(a1 + 16);
      if (v79 > v80)
      {
        *(_DWORD *)(a1 + 16) = v80 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v80) = 72;
        v83 = *(_DWORD *)(a1 + 12);
        v84 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        if ((_DWORD)v79 == *(_DWORD *)(a1 + 8))
        {
          v296 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v79 + 1), (unint64_t)&v357);
          v79 = *(unsigned int *)(a1 + 12);
          v81 = *(_QWORD *)a1;
          v82 = *v296;
        }
        else
        {
          v81 = *(_QWORD *)a1;
          v82 = 72;
        }
        *(_BYTE *)(v81 + v79) = v82;
        v83 = *(_DWORD *)(a1 + 12) + 1;
        v84 = *(_DWORD *)(a1 + 16) + 1;
        *(_DWORD *)(a1 + 12) = v83;
        *(_DWORD *)(a1 + 16) = v84;
      }
      v85 = v77 + 16;
      if (v77 <= 0x3FFFFFFF)
        v85 = v77;
      v357 = v85;
      if (v83 > v84)
      {
        *(_DWORD *)(a1 + 16) = v84 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v84) = v85;
      }
      else
      {
        v86 = v83;
        if (v83 == *(_DWORD *)(a1 + 8))
        {
          v297 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v83 + 1), (unint64_t)&v357);
          v86 = *(unsigned int *)(a1 + 12);
          v87 = *(_QWORD *)a1;
          v85 = *v297;
        }
        else
        {
          v87 = *(_QWORD *)a1;
        }
        *(_BYTE *)(v87 + v86) = v85;
        *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
      }
      result = v8 + 16;
      v88 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v88 == *(_DWORD *)(v8 + 24))
      {
        result = WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v88 + 1, (unint64_t)&v354);
        *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * *(unsigned int *)(v8 + 28)) = *(_DWORD *)result;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)result + 4 * v88) = v70;
      }
      ++*(_DWORD *)(v8 + 28);
      v357 = 0;
      v44 = *(unsigned int *)(a1 + 12);
      v89 = *(unsigned int *)(a1 + 16);
      if (v44 > v89)
      {
        *(_DWORD *)(a1 + 16) = v89 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v89) = 0;
        return result;
      }
      if ((_DWORD)v44 == *(_DWORD *)(a1 + 8))
        goto LABEL_386;
      *(_BYTE *)(*(_QWORD *)a1 + v44) = 0;
      goto LABEL_53;
    default:
      goto LABEL_404;
  }
}

uint64_t JSC::BytecodeGenerator::fuseCompareAndJump<JSC::OpBelow,JSC::OpJbelow>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  uint64_t v15;

  v6 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>((unsigned __int8 *)(**(_QWORD **)(a1 + 40)
                                                                                       + *(unsigned int *)(a1 + 48)));
  if (*(_DWORD *)(a2 + 4) != (_DWORD)v6 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
    return 0;
  *(_DWORD *)(a1 + 36) = 115;
  v8 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = 1;
  *(_BYTE *)(a3 + 8) = 1;
  v10 = *(unsigned int *)(a3 + 4);
  if ((_DWORD)v10 == -1)
    v11 = a3;
  else
    v11 = *(unsigned int *)(a3 + 4);
  if (v10 == 0xFFFFFFFFLL)
    v12 = 1;
  else
    v12 = 2;
  LOBYTE(v14) = v12;
  DWORD1(v14) = 0;
  *((_QWORD *)&v14 + 1) = a1;
  v15 = v11;
  JSC::OpJbelow::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, HIDWORD(v6), v7, &v14);
  return v9;
}

uint64_t JSC::BytecodeGenerator::fuseCompareAndJump<JSC::OpBeloweq,JSC::OpJbeloweq>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  __int128 v15;
  uint64_t v16;

  v6 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>((unsigned __int8 *)(**(_QWORD **)(a1 + 40)
                                                                                       + *(unsigned int *)(a1 + 48)));
  if (*(_DWORD *)(a2 + 4) != (_DWORD)v6 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
    return 0;
  *(_DWORD *)(a1 + 36) = 115;
  v12 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 12) = v12;
  *(_DWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a3 + 8) = 1;
  if (*(_DWORD *)(a3 + 4) == -1)
  {
    v16 = a3;
    v13 = 1;
  }
  else
  {
    LODWORD(v16) = *(_DWORD *)(a3 + 4);
    v13 = 2;
  }
  LOBYTE(v15) = v13;
  DWORD1(v15) = 0;
  *((_QWORD *)&v15 + 1) = a1;
  JSC::OpJbeloweq::emit<JSC::BytecodeGenerator>(a1, HIDWORD(v6), v7, &v15, v8, v9, v10, v11);
  return 1;
}

uint64_t JSC::BytecodeGenerator::fuseCompareAndJump<JSC::OpBeloweq,JSC::OpJbelow>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  uint64_t v15;

  v6 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>((unsigned __int8 *)(**(_QWORD **)(a1 + 40)
                                                                                       + *(unsigned int *)(a1 + 48)));
  if (*(_DWORD *)(a2 + 4) != (_DWORD)v6 || !*(_BYTE *)(a2 + 8) || *(_DWORD *)a2)
    return 0;
  *(_DWORD *)(a1 + 36) = 115;
  v8 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = 1;
  *(_BYTE *)(a3 + 8) = 1;
  v10 = *(unsigned int *)(a3 + 4);
  if ((_DWORD)v10 == -1)
    v11 = a3;
  else
    v11 = *(unsigned int *)(a3 + 4);
  if (v10 == 0xFFFFFFFFLL)
    v12 = 1;
  else
    v12 = 2;
  LOBYTE(v14) = v12;
  DWORD1(v14) = 0;
  *((_QWORD *)&v14 + 1) = a1;
  v15 = v11;
  JSC::OpJbelow::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, v7, HIDWORD(v6), &v14);
  return v9;
}

uint64_t JSC::OpJneqPtr::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v22 = *a4;
  v9 = *a4;
  v23 = *((_QWORD *)a4 + 2);
  v11 = a3;
  v12 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v12 + 4) |= 1u;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(unsigned int *)(v13 + 184);
  *(_DWORD *)(v13 + 184) = v14 + 1;
  v24 = v9;
  v25 = v23;
  result = JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, (unsigned __int8 *)&v24, v14, a6, a7, a8);
  if ((result & 1) == 0)
  {
    v24 = v22;
    v25 = v23;
    result = JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, (unsigned __int8 *)&v24, v14, v16, v17, v18);
    if ((result & 1) == 0)
    {
      v24 = v22;
      v25 = v23;
      return JSC::OpJneqPtr::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, (unsigned __int8 *)&v24, v14, v19, v20, v21);
    }
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitJumpIfNotEvalFunction(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v18;
  uint64_t v19;

  v11 = JSC::BytecodeGenerator::moveLinkTimeConstant(a1, 0, 0xA2u, a4, a5, a6, a7, a8)[1];
  *(_BYTE *)(a3 + 8) = 1;
  if (*(_DWORD *)(a3 + 4) == -1)
  {
    v19 = a3;
    v16 = 1;
  }
  else
  {
    LODWORD(v19) = *(_DWORD *)(a3 + 4);
    v16 = 2;
  }
  LOBYTE(v18) = v16;
  DWORD1(v18) = 0;
  *((_QWORD *)&v18 + 1) = a1;
  return JSC::OpJneqPtr::emit<JSC::BytecodeGenerator>(a1, a2, v11, &v18, v12, v13, v14, v15);
}

unint64_t JSC::BytecodeGenerator::addConstantEmptyValue(JSC::BytecodeGenerator *this)
{
  unint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;

  result = *((_QWORD *)this + 35);
  if (!result)
  {
    v3 = *((int *)this + 158);
    v4 = *((_QWORD *)this + 48);
    *((_QWORD *)this + 48) = v4 + 1;
    v5 = v4 >> 5;
    v6 = *((unsigned int *)this + 101);
    if (v4 >> 5 >= v6)
    {
      v16 = WTF::fastMalloc((WTF *)0x180);
      v20 = v16;
      v17 = *((unsigned int *)this + 101);
      if ((_DWORD)v17 == *((_DWORD *)this + 100))
      {
        v18 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 392, v17 + 1, (unint64_t)&v20);
        v17 = *((unsigned int *)this + 101);
        *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v17) = *v18;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v17) = v16;
      }
      v6 = (v17 + 1);
      *((_DWORD *)this + 101) = v6;
      v4 = *((_QWORD *)this + 48) - 1;
      v5 = v4 >> 5;
    }
    if (v5 >= v6)
      goto LABEL_19;
    v7 = *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v5) + 12 * (v4 & 0x1F);
    *(_DWORD *)v7 = 0;
    *(_DWORD *)(v7 + 4) = v3 + 0x40000000;
    *(_BYTE *)(v7 + 8) = 0;
    ++*((_DWORD *)this + 158);
    v8 = *((_QWORD *)this + 3);
    v21 = 0;
    v9 = (_QWORD *)(v8 + 48);
    v20 = 0;
    v10 = *(unsigned int *)(v8 + 60);
    if ((_DWORD)v10 == *(_DWORD *)(v8 + 56))
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * *(unsigned int *)(v8 + 60)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v20);
    else
      *(_QWORD *)(*v9 + 8 * v10) = 0;
    v11 = *(_DWORD *)(v8 + 60);
    v12 = __CFADD__(v11, 1);
    v13 = v11 + 1;
    *(_DWORD *)(v8 + 60) = v13;
    if (v12)
    {
      __break(0xC471u);
      JUMPOUT(0x198239414);
    }
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v13 - 8) = 0;
    v14 = (_QWORD *)(v8 + 64);
    v15 = *(unsigned int *)(v8 + 76);
    if ((_DWORD)v15 == *(_DWORD *)(v8 + 72))
    {
      v19 = (_BYTE *)WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, (WTF *)(v15 + 1), (unint64_t)&v21);
      v15 = *(unsigned int *)(v8 + 76);
      *(_BYTE *)(*(_QWORD *)(v8 + 64) + v15) = *v19;
    }
    else
    {
      *(_BYTE *)(*v14 + v15) = 0;
    }
    *(_DWORD *)(v8 + 76) = v15 + 1;
    if (v3 >> 5 >= *((unsigned int *)this + 101))
    {
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x19823940CLL);
    }
    result = *(_QWORD *)(*((_QWORD *)this + 49) + 8 * (v3 >> 5)) + 12 * (v3 & 0x1F);
    *((_QWORD *)this + 35) = result;
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::addConstantIndex(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v2 = *(unsigned int *)(this + 632);
  v3 = *(_QWORD *)(this + 384);
  *(_QWORD *)(this + 384) = v3 + 1;
  v4 = v3 >> 5;
  v5 = *(unsigned int *)(this + 404);
  if (v3 >> 5 >= v5)
  {
    v7 = (_QWORD *)(this + 392);
    this = WTF::fastMalloc((WTF *)0x180);
    v9 = this;
    v8 = *(unsigned int *)(v1 + 404);
    if ((_DWORD)v8 == *(_DWORD *)(v1 + 400))
    {
      this = WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1 + 392, v8 + 1, (unint64_t)&v9);
      v8 = *(unsigned int *)(v1 + 404);
      *(_QWORD *)(*(_QWORD *)(v1 + 392) + 8 * v8) = *(_QWORD *)this;
    }
    else
    {
      *(_QWORD *)(*v7 + 8 * v8) = this;
    }
    v5 = (v8 + 1);
    *(_DWORD *)(v1 + 404) = v5;
    v3 = *(_QWORD *)(v1 + 384) - 1;
    v4 = v3 >> 5;
  }
  if (v4 >= v5)
  {
    __break(0xC471u);
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + 392) + 8 * v4) + 12 * (v3 & 0x1F);
    *(_DWORD *)v6 = 0;
    *(_DWORD *)(v6 + 4) = v2 + 0x40000000;
    *(_BYTE *)(v6 + 8) = 0;
    ++*(_DWORD *)(v1 + 632);
    return v2;
  }
  return this;
}

_QWORD *JSC::UnlinkedCodeBlockGenerator::addConstant(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v11 = 0;
  result = (_QWORD *)(a1 + 48);
  v10 = 0;
  v5 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 56))
  {
    result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, (unint64_t)&v10);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(unsigned int *)(a1 + 60)) = *result;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v5) = 0;
  }
  v6 = *(_DWORD *)(a1 + 60);
  v7 = __CFADD__(v6, 1);
  v8 = v6 + 1;
  *(_DWORD *)(a1 + 60) = v8;
  if (v7)
  {
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8 - 8) = a2;
    result = (_QWORD *)(a1 + 64);
    v9 = *(unsigned int *)(a1 + 76);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 72))
    {
      result = (_QWORD *)WTF::Vector<JSC::SourceCodeRepresentation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (WTF *)(v9 + 1), (unint64_t)&v11);
      v9 = *(unsigned int *)(a1 + 76);
      *(_BYTE *)(*(_QWORD *)(a1 + 64) + v9) = *(_BYTE *)result;
    }
    else
    {
      *(_BYTE *)(*result + v9) = 0;
    }
    *(_DWORD *)(a1 + 76) = v9 + 1;
  }
  return result;
}

int *JSC::BytecodeGenerator::emitMove(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  signed int v41;
  uint64_t v42;
  _BOOL4 v43;
  _BOOL4 v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  _BYTE *v58;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  unint64_t v64;
  int v65;
  unsigned __int8 *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  char **v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  char *v113;
  size_t v114;
  char *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;

  v11 = *(_QWORD *)(a1 + 688);
  if (!v11)
    goto LABEL_25;
  v12 = (uint64_t *)(a1 + 688);
  v13 = *(_DWORD *)(a3 + 4);
  v14 = *(_DWORD *)(v11 - 8);
  v15 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = v14 & (v16 ^ HIWORD(v16));
  v18 = *(_DWORD *)(v11 + 16 * v17);
  if (v18 != v13)
  {
    v63 = 1;
    while (v18 != 0x7FFFFFFF)
    {
      v17 = ((_DWORD)v17 + v63) & v14;
      v18 = *(_DWORD *)(v11 + 16 * v17);
      ++v63;
      if (v18 == v13)
        goto LABEL_3;
    }
    goto LABEL_76;
  }
LABEL_3:
  v19 = *(_QWORD *)(v11 + 16 * v17 + 8);
  if (!v19)
  {
LABEL_76:
    v75 = a2[1];
    v76 = 9 * ((v75 + ~(v75 << 15)) ^ ((v75 + ~(v75 << 15)) >> 10));
    v77 = (v76 ^ (v76 >> 6)) + ~((v76 ^ (v76 >> 6)) << 11);
    v78 = (v77 ^ HIWORD(v77)) & v14;
    v79 = *(_DWORD *)(v11 + 16 * v78);
    if (v79 != v75)
    {
      v80 = 1;
      while (v79 != 0x7FFFFFFF)
      {
        v78 = ((_DWORD)v78 + v80) & v14;
        v79 = *(_DWORD *)(v11 + 16 * v78);
        ++v80;
        if (v79 == v75)
          goto LABEL_82;
      }
      v78 = *(unsigned int *)(v11 - 4);
    }
LABEL_82:
    if (v78 != *(_DWORD *)(v11 - 4))
    {
      v81 = v11 + 16 * v78;
      v82 = (unint64_t *)(v81 + 8);
      v83 = *(_QWORD *)(v81 + 8);
      v84 = *(_QWORD *)(v83 + 24);
      if (v84)
      {
        v85 = *(_DWORD *)(v84 - 12);
        if (v85)
        {
          if (*(_DWORD *)v83 == 1)
          {
            v86 = (unsigned __int8 *)(**(_QWORD **)(v83 + 8) + *(unsigned int *)(v83 + 16));
            v87 = *v86;
            v88 = v87;
            if ((v87 | 2) == 0x82)
              v88 = v86[1];
            if (v88 == 29)
            {
              if (v87 == 128)
              {
                if (v85 >= 0x10000)
                  LOWORD(v85) = 255;
                *((_WORD *)v86 + 2) = v85;
              }
              else if (v87 == 130)
              {
                *(_DWORD *)(v86 + 6) = v85;
              }
              else
              {
                if (v85 >= 0xFF)
                  LOBYTE(v85) = -1;
                v86[2] = v85;
              }
            }
            else if (v88 == 28)
            {
              if (v87 == 128)
              {
                if (v85 >= 0x10000)
                  LOWORD(v85) = 255;
                *((_WORD *)v86 + 3) = v85;
              }
              else if (v87 == 130)
              {
                *(_DWORD *)(v86 + 10) = v85;
              }
              else
              {
                if (v85 >= 0xFF)
                  LOBYTE(v85) = -1;
                v86[3] = v85;
              }
            }
          }
          v97 = *v12;
          if (!*v12 || (v97 += 16 * *(unsigned int *)(v97 - 4), v97 != v81))
          {
            if (v97 != v81)
            {
              *(_DWORD *)v81 = 2147483646;
              v98 = *v82;
              *v82 = 0;
              if (v98)
              {
                if (*(_DWORD *)v98 == 1)
                {
                  v104 = *(_QWORD *)(v98 + 24);
                  if (v104)
                    WTF::fastFree(v104 - 16, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v98, a2, a3, a4, a5, a6, a7, a8);
                }
                else
                {
                  --*(_DWORD *)v98;
                }
              }
              ++*(_DWORD *)(*v12 - 16);
              v99 = *v12;
              if (*v12)
                v100 = *(_DWORD *)(v99 - 12) - 1;
              else
                v100 = -1;
              *(_DWORD *)(v99 - 12) = v100;
              v101 = *v12;
              if (*v12)
              {
                v102 = 6 * *(_DWORD *)(v101 - 12);
                v103 = *(_DWORD *)(v101 - 4);
                if (v102 < v103 && v103 >= 9)
                  WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)(a1 + 688), v103 >> 1, 0);
              }
            }
          }
        }
      }
    }
    goto LABEL_25;
  }
  ++*(_DWORD *)v19;
  v20 = a2[1];
  v21 = *v12;
  if (*v12
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand((uint64_t *)(a1 + 688)),
        (v21 = *v12) != 0))
  {
    v22 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v22 = 0;
  }
  v23 = 9 * ((v20 + ~(v20 << 15)) ^ ((v20 + ~(v20 << 15)) >> 10));
  v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
  v25 = v22 & (v24 ^ HIWORD(v24));
  v26 = v21 + 16 * v25;
  v27 = *(_DWORD *)v26;
  if (*(_DWORD *)v26 == 0x7FFFFFFF)
  {
LABEL_14:
    *(_DWORD *)v26 = v20;
    ++*(_DWORD *)v19;
    v30 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v26 + 8) = v19;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        v92 = *(_QWORD *)(v30 + 24);
        if (v92)
          WTF::fastFree(v92 - 16, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
    v31 = *v12;
    if (*v12)
      v32 = *(_DWORD *)(v31 - 12) + 1;
    else
      v32 = 1;
    *(_DWORD *)(v31 - 12) = v32;
    v33 = *v12;
    if (*v12)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
        goto LABEL_23;
    }
    else
    {
      if (3 * v36 > 4 * v35)
      {
LABEL_23:
        if (*(_DWORD *)v19 == 1)
        {
          v90 = *(_QWORD *)(v19 + 24);
          if (v90)
            WTF::fastFree(v90 - 16, a2, a3, a4, a5, a6, a7, a8);
          v91 = v19;
LABEL_107:
          WTF::fastFree(v91, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_25;
        }
        --*(_DWORD *)v19;
        goto LABEL_25;
      }
      if (!(_DWORD)v36)
      {
        v94 = 8;
        goto LABEL_122;
      }
    }
    v94 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
LABEL_122:
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RefPtr<JSC::StaticPropertyAnalysis,WTF::RawPtrTraits<JSC::StaticPropertyAnalysis>,WTF::DefaultRefDerefTraits<JSC::StaticPropertyAnalysis>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)(a1 + 688), v94, (int *)v26);
    goto LABEL_23;
  }
  v28 = 0;
  v29 = 1;
  while (v27 != v20)
  {
    if (v27 == 2147483646)
      v28 = v26;
    v25 = (v25 + v29) & v22;
    v26 = v21 + 16 * v25;
    v27 = *(_DWORD *)v26;
    ++v29;
    if (*(_DWORD *)v26 == 0x7FFFFFFF)
    {
      if (v28)
      {
        *(_DWORD *)v28 = 0x7FFFFFFF;
        *(_QWORD *)(v28 + 8) = 0;
        --*(_DWORD *)(*v12 - 16);
        v26 = v28;
      }
      goto LABEL_14;
    }
  }
  v64 = *(_QWORD *)(v26 + 8);
  if (!v64)
  {
    *(_QWORD *)(v26 + 8) = v19;
    goto LABEL_25;
  }
  v65 = *(_DWORD *)v64;
  if (*(_DWORD *)v64 != 1)
  {
    *(_QWORD *)(v26 + 8) = v19;
    goto LABEL_100;
  }
  v66 = (unsigned __int8 *)(**(_QWORD **)(v64 + 8) + *(unsigned int *)(v64 + 16));
  v67 = *(_QWORD *)(v64 + 24);
  if (v67)
    LODWORD(v67) = *(_DWORD *)(v67 - 12);
  v68 = *v66;
  v69 = v68;
  if ((v68 | 2) == 0x82)
    v69 = v66[1];
  if (v69 == 29)
  {
    if (v68 == 128)
    {
      if (v67 >= 0x10000)
        LOWORD(v67) = 255;
      *((_WORD *)v66 + 2) = v67;
    }
    else if (v68 == 130)
    {
      *(_DWORD *)(v66 + 6) = v67;
    }
    else
    {
      if (v67 >= 0xFF)
        LOBYTE(v67) = -1;
      v66[2] = v67;
    }
  }
  else if (v69 == 28)
  {
    if (v68 == 128)
    {
      if (v67 >= 0x10000)
        LOWORD(v67) = 255;
      *((_WORD *)v66 + 3) = v67;
    }
    else if (v68 == 130)
    {
      *(_DWORD *)(v66 + 10) = v67;
    }
    else
    {
      if (v67 >= 0xFF)
        LOBYTE(v67) = -1;
      v66[3] = v67;
    }
  }
  v64 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v19;
  if (v64)
  {
    v65 = *(_DWORD *)v64;
LABEL_100:
    v89 = v65 - 1;
    if (v89)
    {
      *(_DWORD *)v64 = v89;
      goto LABEL_25;
    }
    v93 = *(_QWORD *)(v64 + 24);
    if (v93)
      WTF::fastFree(v93 - 16, a2, a3, a4, a5, a6, a7, a8);
    v91 = v64;
    goto LABEL_107;
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 36) != 115)
  {
    v37 = *(unsigned int *)(a1 + 48);
    v38 = (unsigned __int8 *)(**(_QWORD **)(a1 + 40) + v37);
    v39 = *v38;
    v40 = v39;
    if ((v39 | 2) == 0x82)
      v40 = v38[1];
    if (v40 == 143)
    {
      if (v39 == 128)
      {
        v60 = *((__int16 *)v38 + 1);
        v61 = v60 + 1073741760;
        v62 = v60 <= 63;
      }
      else
      {
        if (v39 == 130)
        {
          v60 = *(_DWORD *)(v38 + 2);
LABEL_58:
          if (v60 == a2[1])
          {
            *(_DWORD *)(a1 + 36) = 115;
            *(_DWORD *)(a1 + 12) = v37;
            *(_DWORD *)(a1 + 16) = v37;
          }
          goto LABEL_29;
        }
        v60 = (char)v38[1];
        v61 = v60 + 1073741808;
        v62 = v60 <= 15;
      }
      if (!v62)
        v60 = v61;
      goto LABEL_58;
    }
  }
LABEL_29:
  v41 = a2[1];
  v42 = *(unsigned int *)(a3 + 4);
  v43 = (v41 - 1073741808) < 0x80;
  if (v41 <= 0x3FFFFFFF)
    v43 = (v41 + 128) < 0x90;
  if (!v43)
    goto LABEL_74;
  v44 = (v42 - 1073741808) < 0x80;
  if ((int)v42 <= 0x3FFFFFFF)
    v44 = (v42 + 128) < 0x90;
  if (v44)
  {
    v45 = *(_DWORD *)(a1 + 16);
    v46 = *(_QWORD *)(a1 + 40);
    v47 = v45;
    if (v46 != a1)
    {
      v105 = *(char ***)(a1 + 40);
      v106 = *(_DWORD *)(v46 + 12);
      v107 = *(_DWORD *)(a1 + 12);
      if (v106 > v107)
      {
        *(_DWORD *)(v46 + 12) = v107;
        v106 = v107;
      }
      else
      {
        v108 = *(_DWORD *)(v46 + 8);
        if (v107 > v108)
        {
          if (v108)
          {
            if (v106)
              *((_DWORD *)v105 + 3) = 0;
            v111 = (unint64_t)*v105;
            if (*v105)
            {
              *v105 = 0;
              *((_DWORD *)v105 + 2) = 0;
              WTF::fastFree(v111, a2, a3, a4, a5, a6, a7, a8);
              v108 = *((_DWORD *)v105 + 2);
            }
          }
          v112 = *(_DWORD *)(a1 + 12);
          if (v108 < v112)
          {
            v113 = *v105;
            v114 = *((unsigned int *)v105 + 3);
            v115 = (char *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 12));
            *((_DWORD *)v105 + 2) = v112;
            *v105 = v115;
            memcpy(v115, v113, v114);
            if (v113)
            {
              if (*v105 == v113)
              {
                *v105 = 0;
                *((_DWORD *)v105 + 2) = 0;
              }
              WTF::fastFree((unint64_t)v113, v116, v117, v118, v119, v120, v121, v122);
            }
          }
          v106 = *((_DWORD *)v105 + 3);
        }
      }
      v109 = *v105;
      if (v106)
      {
        memmove(v109, *(const void **)a1, v106);
        v110 = *((unsigned int *)v105 + 3);
        v109 = *v105;
      }
      else
      {
        v110 = 0;
      }
      memcpy(&v109[v110], (const void *)(*(_QWORD *)a1 + v110), *(_QWORD *)a1 + *(unsigned int *)(a1 + 12) - (*(_QWORD *)a1 + v110));
      v47 = *(_DWORD *)(a1 + 16);
      *((_DWORD *)v105 + 3) = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 48) = v45;
    *(_DWORD *)(a1 + 36) = 143;
    v123 = -113;
    v48 = *(unsigned int *)(a1 + 12);
    if (v48 > v47)
    {
      *(_DWORD *)(a1 + 16) = v47 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v47) = -113;
      v49 = *(_DWORD *)(a1 + 12);
      v50 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v48 == *(_DWORD *)(a1 + 8))
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v48 + 1), (unint64_t)&v123);
      else
        *(_BYTE *)(*(_QWORD *)a1 + v48) = -113;
      v49 = *(_DWORD *)(a1 + 12) + 1;
      v50 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v49;
      *(_DWORD *)(a1 + 16) = v50;
    }
    v51 = v41 + 16;
    if (v41 <= 0x3FFFFFFF)
      v51 = v41;
    v124 = v51;
    if (v49 > v50)
    {
      *(_DWORD *)(a1 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v50) = v51;
      v54 = *(_DWORD *)(a1 + 12);
      v55 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v52 = v49;
      if (v49 == *(_DWORD *)(a1 + 8))
      {
        v95 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v124);
        v52 = *(unsigned int *)(a1 + 12);
        v53 = *(_BYTE **)a1;
        v51 = *v95;
      }
      else
      {
        v53 = *(_BYTE **)a1;
      }
      v53[v52] = v51;
      v54 = *(_DWORD *)(a1 + 12) + 1;
      v55 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v54;
      *(_DWORD *)(a1 + 16) = v55;
    }
    v56 = v42 + 16;
    if ((int)v42 <= 0x3FFFFFFF)
      v56 = v42;
    v125 = v56;
    if (v54 > v55)
    {
      *(_DWORD *)(a1 + 16) = v55 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v55) = v56;
    }
    else
    {
      v57 = v54;
      if (v54 == *(_DWORD *)(a1 + 8))
      {
        v96 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v54 + 1), (unint64_t)&v125);
        v57 = *(unsigned int *)(a1 + 12);
        v58 = *(_BYTE **)a1;
        v56 = *v96;
      }
      else
      {
        v58 = *(_BYTE **)a1;
      }
      v58[v57] = v56;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_74:
    if ((JSC::OpMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2[1], v42, a4, a5, a6, a7, a8) & 1) == 0)
      JSC::OpMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v41, v42, v70, v71, v72, v73, v74);
  }
  return a2;
}

uint64_t JSC::OpToNumber::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpToNumber::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::OpToNumeric::emit<JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  result = JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    result = JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v13, v14, v15, v16);
    if ((result & 1) == 0)
      return JSC::OpToNumeric::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v11, a4, v17, v18, v19, v20);
  }
  return result;
}

uint64_t JSC::BytecodeGenerator::emitBinaryOp(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  signed int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  BOOL v61;
  _BOOL4 v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  uint64_t v87;
  _BOOL4 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  BOOL v91;
  _BOOL4 v92;
  BOOL v93;
  _BOOL4 v94;
  _BOOL4 v96;
  uint64_t v97;
  _BOOL4 v98;
  _BOOL4 v99;
  _BOOL4 v100;
  BOOL v101;
  _BOOL4 v102;
  BOOL v103;
  uint64_t v104;
  _BOOL4 v105;
  _BOOL4 v106;
  _BOOL4 v107;
  BOOL v108;
  _BOOL4 v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  signed int v113;
  uint64_t v114;
  _BOOL4 v115;
  _BOOL4 v116;
  _BOOL4 v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  unsigned int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  _BOOL4 v140;
  _BOOL4 v142;
  uint64_t v143;
  _BOOL4 v144;
  _BOOL4 v145;
  _BOOL4 v146;
  BOOL v147;
  _BOOL4 v148;
  BOOL v149;
  _BOOL4 v150;
  _BOOL4 v151;
  _BOOL4 v152;
  _BOOL4 v153;
  _BOOL4 v155;
  uint64_t v156;
  _BOOL4 v157;
  _BOOL4 v158;
  _BOOL4 v159;
  _BOOL4 v160;
  _BOOL4 v162;
  _BOOL4 v163;
  _BOOL4 v164;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  unsigned int v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  _BOOL4 v207;
  _BOOL4 v209;
  uint64_t v210;
  _BOOL4 v211;
  _BOOL4 v213;
  BOOL v214;
  _BOOL4 v215;
  BOOL v216;
  _BYTE *v217;
  _BOOL4 v218;
  _BOOL4 v219;
  _BOOL4 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  unsigned int v225;
  unsigned int v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  _BOOL4 v253;
  _BOOL4 v254;
  _BOOL4 v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  _BOOL4 v296;
  _BOOL4 v297;
  _BOOL4 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  _BOOL4 v303;
  _BOOL4 v304;
  _BOOL4 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  _BOOL4 v310;
  _BOOL4 v311;
  _BOOL4 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  _BOOL4 v317;
  _BOOL4 v318;
  _BOOL4 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  _BOOL4 v324;
  _BOOL4 v325;
  _BOOL4 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  unsigned int v331;
  unsigned int v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  _BOOL4 v350;
  _BOOL4 v351;
  _BOOL4 v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  _BOOL4 v357;
  _BOOL4 v358;
  _BOOL4 v359;
  char *v360;
  char *v361;
  char *v362;
  char *v363;
  char *v364;
  _BOOL4 v365;
  _BOOL4 v366;
  _BOOL4 v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  _BOOL4 v372;
  _BOOL4 v373;
  _BOOL4 v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char v378;
  _BOOL4 v379;
  _BOOL4 v380;
  _BOOL4 v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  _BYTE *v391;
  _BYTE *v392;
  _BYTE *v393;
  _BYTE *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  char *v400;
  _BYTE *v401;
  _BYTE *v402;
  _BYTE *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  _BYTE *v417;
  _BYTE *v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  char *v431;
  char v432;

  v12 = a3;
  switch((int)a2)
  {
    case 144:
      JSC::BytecodeGenerator::emitBinaryOp<JSC::OpEq>(a1, a3, *(_DWORD *)(a4 + 4), *(_DWORD *)(a5 + 4), a5, a6, a7, a8);
      return v12;
    case 145:
      v26 = *(unsigned int *)(a4 + 4);
      LODWORD(v27) = *(_DWORD *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v150 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v150 = (v28 + 128) < 0x90;
      if (v150)
      {
        v151 = (v26 - 1073741808) < 0x80;
        if ((int)v26 <= 0x3FFFFFFF)
          v151 = (v26 + 128) < 0x90;
        if (v151)
        {
          v152 = (v27 - 1073741808) < 0x80;
          if ((int)v27 <= 0x3FFFFFFF)
            v152 = (v27 + 128) < 0x90;
          if (v152)
          {
            v32 = -111;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x91, a3, a4, a5, a6, a7, a8);
            v432 = -111;
            v33 = *(unsigned int *)(a1 + 12);
            v34 = *(unsigned int *)(a1 + 16);
            if (v33 > v34)
              goto LABEL_760;
            if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
            {
              v35 = *(_QWORD *)a1;
              v36 = -111;
              goto LABEL_33;
            }
            goto LABEL_640;
          }
        }
      }
      if (v28 <= 0x3FFFFFFF)
        v365 = (v28 + 0x8000) >> 6 < 0x201;
      else
        v365 = (v28 - 1073741760) < 0x8000;
      if (v365)
      {
        v366 = (v26 - 1073741760) < 0x8000;
        if ((int)v26 <= 0x3FFFFFFF)
          v366 = (v26 + 0x8000) >> 6 < 0x201;
        if (v366)
        {
          v367 = (v27 - 1073741760) < 0x8000;
          if ((int)v27 <= 0x3FFFFFFF)
            v367 = (v27 + 0x8000) >> 6 < 0x201;
          if (v367)
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x91, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v368 = *(unsigned int *)(a1 + 12);
            v369 = *(unsigned int *)(a1 + 16);
            if (v368 > v369)
            {
              *(_DWORD *)(a1 + 16) = v369 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v369) = 0x80;
              v331 = *(_DWORD *)(a1 + 12);
              v332 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v368 == *(_DWORD *)(a1 + 8))
              {
                v429 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v368 + 1), (unint64_t)&v432);
                v368 = *(unsigned int *)(a1 + 12);
                v370 = *(_QWORD *)a1;
                v371 = *v429;
              }
              else
              {
                v370 = *(_QWORD *)a1;
                v371 = 0x80;
              }
              *(_BYTE *)(v370 + v368) = v371;
              v331 = *(_DWORD *)(a1 + 12) + 1;
              v332 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v331;
              *(_DWORD *)(a1 + 16) = v332;
            }
            v333 = -111;
            goto LABEL_586;
          }
        }
      }
      JSC::OpNeq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(unsigned int *)(a5 + 4), a5, a6, a7, a8);
      return v12;
    case 146:
      JSC::OpStricteq::emit<JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), *(_DWORD *)(a4 + 4), *(_DWORD *)(a5 + 4), a5, a6, a7, a8);
      return v12;
    case 147:
      v26 = *(unsigned int *)(a4 + 4);
      v27 = *(unsigned int *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v94 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v94 = (v28 + 128) < 0x90;
      if (v94 && ((int)v26 <= 0x3FFFFFFF ? (v26 + 128) < 0x90 : (v26 - 1073741808) < 0x80))
      {
        v96 = (v27 - 1073741808) < 0x80;
        if ((int)v27 <= 0x3FFFFFFF)
          v96 = (v27 + 128) < 0x90;
        if (v96)
        {
          v32 = -109;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x93, a3, a4, a5, a6, a7, a8);
          v432 = -109;
          v33 = *(unsigned int *)(a1 + 12);
          v34 = *(unsigned int *)(a1 + 16);
          if (v33 > v34)
            goto LABEL_760;
          if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
          {
            v35 = *(_QWORD *)a1;
            v36 = -109;
            goto LABEL_33;
          }
          goto LABEL_640;
        }
      }
      if (!JSC::OpNstricteq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(_DWORD *)(a5 + 4)))JSC::OpNstricteq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v28, v26, v27, v395, v396, v397, v398);
      return v12;
    case 148:
      v26 = *(unsigned int *)(a4 + 4);
      LODWORD(v27) = *(_DWORD *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v29 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v29 = (v28 + 128) < 0x90;
      if (v29)
      {
        v30 = (v26 - 1073741808) < 0x80;
        if ((int)v26 <= 0x3FFFFFFF)
          v30 = (v26 + 128) < 0x90;
        if (v30)
        {
          v31 = (v27 - 1073741808) < 0x80;
          if ((int)v27 <= 0x3FFFFFFF)
            v31 = (v27 + 128) < 0x90;
          if (v31)
          {
            v32 = -108;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x94, a3, a4, a5, a6, a7, a8);
            v432 = -108;
            v33 = *(unsigned int *)(a1 + 12);
            v34 = *(unsigned int *)(a1 + 16);
            if (v33 > v34)
              goto LABEL_760;
            if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
            {
              v35 = *(_QWORD *)a1;
              v36 = -108;
              goto LABEL_33;
            }
            goto LABEL_640;
          }
        }
      }
      if (v28 <= 0x3FFFFFFF)
        v324 = (v28 + 0x8000) >> 6 < 0x201;
      else
        v324 = (v28 - 1073741760) < 0x8000;
      if (v324)
      {
        v325 = (v26 - 1073741760) < 0x8000;
        if ((int)v26 <= 0x3FFFFFFF)
          v325 = (v26 + 0x8000) >> 6 < 0x201;
        if (v325)
        {
          v326 = (v27 - 1073741760) < 0x8000;
          if ((int)v27 <= 0x3FFFFFFF)
            v326 = (v27 + 0x8000) >> 6 < 0x201;
          if (v326)
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x94, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v327 = *(unsigned int *)(a1 + 12);
            v328 = *(unsigned int *)(a1 + 16);
            if (v327 > v328)
            {
              *(_DWORD *)(a1 + 16) = v328 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v328) = 0x80;
              v331 = *(_DWORD *)(a1 + 12);
              v332 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v327 == *(_DWORD *)(a1 + 8))
              {
                v423 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v327 + 1), (unint64_t)&v432);
                v327 = *(unsigned int *)(a1 + 12);
                v329 = *(_QWORD *)a1;
                v330 = *v423;
              }
              else
              {
                v329 = *(_QWORD *)a1;
                v330 = 0x80;
              }
              *(_BYTE *)(v329 + v327) = v330;
              v331 = *(_DWORD *)(a1 + 12) + 1;
              v332 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v331;
              *(_DWORD *)(a1 + 16) = v332;
            }
            v333 = -108;
            goto LABEL_586;
          }
        }
      }
      JSC::OpLess::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(unsigned int *)(a5 + 4), a5, a6, a7, a8);
      return v12;
    case 149:
      v26 = *(unsigned int *)(a4 + 4);
      v27 = *(unsigned int *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v153 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v153 = (v28 + 128) < 0x90;
      if (v153 && ((int)v26 <= 0x3FFFFFFF ? (v26 + 128) < 0x90 : (v26 - 1073741808) < 0x80))
      {
        v155 = (v27 - 1073741808) < 0x80;
        if ((int)v27 <= 0x3FFFFFFF)
          v155 = (v27 + 128) < 0x90;
        if (v155)
        {
          v32 = -107;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x95, a3, a4, a5, a6, a7, a8);
          v432 = -107;
          v33 = *(unsigned int *)(a1 + 12);
          v34 = *(unsigned int *)(a1 + 16);
          if (v33 > v34)
            goto LABEL_760;
          if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
          {
            v35 = *(_QWORD *)a1;
            v36 = -107;
            goto LABEL_33;
          }
          goto LABEL_640;
        }
      }
      if (!JSC::OpLesseq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(_DWORD *)(a5 + 4)))JSC::OpLesseq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v28, v26, v27, v409, v410, v411, v412);
      return v12;
    case 150:
      v26 = *(unsigned int *)(a4 + 4);
      v27 = *(unsigned int *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v140 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v140 = (v28 + 128) < 0x90;
      if (v140 && ((int)v26 <= 0x3FFFFFFF ? (v26 + 128) < 0x90 : (v26 - 1073741808) < 0x80))
      {
        v142 = (v27 - 1073741808) < 0x80;
        if ((int)v27 <= 0x3FFFFFFF)
          v142 = (v27 + 128) < 0x90;
        if (v142)
        {
          v32 = -106;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x96, a3, a4, a5, a6, a7, a8);
          v432 = -106;
          v33 = *(unsigned int *)(a1 + 12);
          v34 = *(unsigned int *)(a1 + 16);
          if (v33 > v34)
            goto LABEL_760;
          if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
          {
            v35 = *(_QWORD *)a1;
            v36 = -106;
            goto LABEL_33;
          }
          goto LABEL_640;
        }
      }
      if (!JSC::OpGreater::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(_DWORD *)(a5 + 4)))JSC::OpGreater::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v28, v26, v27, v386, v387, v388, v389);
      return v12;
    case 151:
      v26 = *(unsigned int *)(a4 + 4);
      v27 = *(unsigned int *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v160 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v160 = (v28 + 128) < 0x90;
      if (v160 && ((int)v26 <= 0x3FFFFFFF ? (v26 + 128) < 0x90 : (v26 - 1073741808) < 0x80))
      {
        v162 = (v27 - 1073741808) < 0x80;
        if ((int)v27 <= 0x3FFFFFFF)
          v162 = (v27 + 128) < 0x90;
        if (v162)
        {
          v32 = -105;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x97, a3, a4, a5, a6, a7, a8);
          v432 = -105;
          v33 = *(unsigned int *)(a1 + 12);
          v34 = *(unsigned int *)(a1 + 16);
          if (v33 > v34)
            goto LABEL_760;
          if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
          {
            v35 = *(_QWORD *)a1;
            v36 = -105;
            goto LABEL_33;
          }
          goto LABEL_640;
        }
      }
      if (!JSC::OpGreatereq::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(_DWORD *)(a5 + 4)))JSC::OpGreatereq::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v28, v26, v27, v405, v406, v407, v408);
      return v12;
    case 152:
      v26 = *(unsigned int *)(a4 + 4);
      LODWORD(v27) = *(_DWORD *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v357 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v357 = (v28 + 128) < 0x90;
      if (v357)
      {
        v358 = (v26 - 1073741808) < 0x80;
        if ((int)v26 <= 0x3FFFFFFF)
          v358 = (v26 + 128) < 0x90;
        if (v358)
        {
          v359 = (v27 - 1073741808) < 0x80;
          if ((int)v27 <= 0x3FFFFFFF)
            v359 = (v27 + 128) < 0x90;
          if (v359)
          {
            v32 = -104;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x98, a3, a4, a5, a6, a7, a8);
            v432 = -104;
            v33 = *(unsigned int *)(a1 + 12);
            v34 = *(unsigned int *)(a1 + 16);
            if (v33 > v34)
              goto LABEL_760;
            if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
            {
              v35 = *(_QWORD *)a1;
              v36 = -104;
              goto LABEL_33;
            }
            goto LABEL_640;
          }
        }
      }
      if (v28 <= 0x3FFFFFFF)
        v379 = (v28 + 0x8000) >> 6 < 0x201;
      else
        v379 = (v28 - 1073741760) < 0x8000;
      if (v379)
      {
        v380 = (v26 - 1073741760) < 0x8000;
        if ((int)v26 <= 0x3FFFFFFF)
          v380 = (v26 + 0x8000) >> 6 < 0x201;
        if (v380)
        {
          v381 = (v27 - 1073741760) < 0x8000;
          if ((int)v27 <= 0x3FFFFFFF)
            v381 = (v27 + 0x8000) >> 6 < 0x201;
          if (v381)
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x98, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v382 = *(unsigned int *)(a1 + 12);
            v383 = *(unsigned int *)(a1 + 16);
            if (v382 > v383)
            {
              *(_DWORD *)(a1 + 16) = v383 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v383) = 0x80;
              v331 = *(_DWORD *)(a1 + 12);
              v332 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v382 == *(_DWORD *)(a1 + 8))
              {
                v431 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v382 + 1), (unint64_t)&v432);
                v382 = *(unsigned int *)(a1 + 12);
                v384 = *(_QWORD *)a1;
                v385 = *v431;
              }
              else
              {
                v384 = *(_QWORD *)a1;
                v385 = 0x80;
              }
              *(_BYTE *)(v384 + v382) = v385;
              v331 = *(_DWORD *)(a1 + 12) + 1;
              v332 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v331;
              *(_DWORD *)(a1 + 16) = v332;
            }
            v333 = -104;
            goto LABEL_586;
          }
        }
      }
      JSC::OpBelow::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(unsigned int *)(a5 + 4), a5, a6, a7, a8);
      return v12;
    case 153:
      JSC::OpBeloweq::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), *(_DWORD *)(a4 + 4), *(_DWORD *)(a5 + 4));
      return v12;
    case 154:
      v26 = *(unsigned int *)(a4 + 4);
      v27 = *(unsigned int *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v207 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v207 = (v28 + 128) < 0x90;
      if (v207 && ((int)v26 <= 0x3FFFFFFF ? (v26 + 128) < 0x90 : (v26 - 1073741808) < 0x80))
      {
        v209 = (v27 - 1073741808) < 0x80;
        if ((int)v27 <= 0x3FFFFFFF)
          v209 = (v27 + 128) < 0x90;
        if (v209)
        {
          v32 = -102;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9A, a3, a4, a5, a6, a7, a8);
          v432 = -102;
          v33 = *(unsigned int *)(a1 + 12);
          v34 = *(unsigned int *)(a1 + 16);
          if (v33 > v34)
            goto LABEL_760;
          if ((_DWORD)v33 != *(_DWORD *)(a1 + 8))
          {
            v35 = *(_QWORD *)a1;
            v36 = -102;
            goto LABEL_33;
          }
          goto LABEL_640;
        }
      }
      if (!JSC::OpMod::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(_DWORD *)(a5 + 4)))JSC::OpMod::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v28, v26, v27, v425, v426, v427, v428);
      return v12;
    case 155:
      JSC::OpPow::emitWithSmallestSizeRequirement<(JSC::OpcodeSize)1,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), *(_DWORD *)(a4 + 4), *(_DWORD *)(a5 + 4));
      return v12;
    case 156:
      v26 = *(unsigned int *)(a4 + 4);
      LODWORD(v27) = *(_DWORD *)(a5 + 4);
      v28 = *(_DWORD *)(a3 + 4);
      v253 = (v28 - 1073741808) < 0x80;
      if (v28 <= 0x3FFFFFFF)
        v253 = (v28 + 128) < 0x90;
      if (v253)
      {
        v254 = (v26 - 1073741808) < 0x80;
        if ((int)v26 <= 0x3FFFFFFF)
          v254 = (v26 + 128) < 0x90;
        if (v254)
        {
          v255 = (v27 - 1073741808) < 0x80;
          if ((int)v27 <= 0x3FFFFFFF)
            v255 = (v27 + 128) < 0x90;
          if (v255)
          {
            v32 = -100;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9C, a3, a4, a5, a6, a7, a8);
            v432 = -100;
            v33 = *(unsigned int *)(a1 + 12);
            v34 = *(unsigned int *)(a1 + 16);
            if (v33 > v34)
            {
LABEL_760:
              *(_DWORD *)(a1 + 16) = v34 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v34) = v32;
              v37 = *(_DWORD *)(a1 + 12);
              v38 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v33 == *(_DWORD *)(a1 + 8))
              {
LABEL_640:
                v360 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v432);
                v33 = *(unsigned int *)(a1 + 12);
                v35 = *(_QWORD *)a1;
                v36 = *v360;
              }
              else
              {
                v35 = *(_QWORD *)a1;
                v36 = -100;
              }
LABEL_33:
              *(_BYTE *)(v35 + v33) = v36;
              v37 = *(_DWORD *)(a1 + 12) + 1;
              v38 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v37;
              *(_DWORD *)(a1 + 16) = v38;
            }
            v39 = v28 + 16;
            if (v28 <= 0x3FFFFFFF)
              v39 = v28;
            v432 = v39;
            if (v37 > v38)
            {
              *(_DWORD *)(a1 + 16) = v38 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v38) = v39;
              v42 = *(_DWORD *)(a1 + 12);
              v43 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v40 = v37;
              if (v37 == *(_DWORD *)(a1 + 8))
              {
                v290 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v432);
                v40 = *(unsigned int *)(a1 + 12);
                v41 = *(_QWORD *)a1;
                v39 = *v290;
              }
              else
              {
                v41 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v41 + v40) = v39;
              v42 = *(_DWORD *)(a1 + 12) + 1;
              v43 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v42;
              *(_DWORD *)(a1 + 16) = v43;
            }
            v44 = v26 + 16;
            if ((int)v26 <= 0x3FFFFFFF)
              v44 = v26;
            v432 = v44;
            if (v42 > v43)
            {
              *(_DWORD *)(a1 + 16) = v43 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v43) = v44;
              v47 = *(_DWORD *)(a1 + 12);
              v48 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v45 = v42;
              if (v42 == *(_DWORD *)(a1 + 8))
              {
                v291 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v432);
                v45 = *(unsigned int *)(a1 + 12);
                v46 = *(_QWORD *)a1;
                v44 = *v291;
              }
              else
              {
                v46 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v46 + v45) = v44;
              v47 = *(_DWORD *)(a1 + 12) + 1;
              v48 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v47;
              *(_DWORD *)(a1 + 16) = v48;
            }
            LOBYTE(v49) = v27 + 16;
            if ((int)v27 <= 0x3FFFFFFF)
              LOBYTE(v49) = v27;
            goto LABEL_48;
          }
        }
      }
      if (v28 <= 0x3FFFFFFF)
        v350 = (v28 + 0x8000) >> 6 < 0x201;
      else
        v350 = (v28 - 1073741760) < 0x8000;
      if (v350)
      {
        v351 = (v26 - 1073741760) < 0x8000;
        if ((int)v26 <= 0x3FFFFFFF)
          v351 = (v26 + 0x8000) >> 6 < 0x201;
        if (v351)
        {
          v352 = (v27 - 1073741760) < 0x8000;
          if ((int)v27 <= 0x3FFFFFFF)
            v352 = (v27 + 0x8000) >> 6 < 0x201;
          if (v352)
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9C, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v353 = *(unsigned int *)(a1 + 12);
            v354 = *(unsigned int *)(a1 + 16);
            if (v353 > v354)
            {
              *(_DWORD *)(a1 + 16) = v354 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v354) = 0x80;
              v331 = *(_DWORD *)(a1 + 12);
              v332 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v353 == *(_DWORD *)(a1 + 8))
              {
                v424 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v353 + 1), (unint64_t)&v432);
                v353 = *(unsigned int *)(a1 + 12);
                v355 = *(_QWORD *)a1;
                v356 = *v424;
              }
              else
              {
                v355 = *(_QWORD *)a1;
                v356 = 0x80;
              }
              *(_BYTE *)(v355 + v353) = v356;
              v331 = *(_DWORD *)(a1 + 12) + 1;
              v332 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v331;
              *(_DWORD *)(a1 + 16) = v332;
            }
            v333 = -100;
LABEL_586:
            v432 = v333;
            if (v331 > v332)
            {
              *(_DWORD *)(a1 + 16) = v332 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v332) = v333;
              v336 = *(_DWORD *)(a1 + 12);
              v337 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v334 = v331;
              if (v331 == *(_DWORD *)(a1 + 8))
              {
                v416 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v331 + 1), (unint64_t)&v432);
                v334 = *(unsigned int *)(a1 + 12);
                v335 = *(_QWORD *)a1;
                v333 = *v416;
              }
              else
              {
                v335 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v335 + v334) = v333;
              v336 = *(_DWORD *)(a1 + 12) + 1;
              v337 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v336;
              *(_DWORD *)(a1 + 16) = v337;
            }
            if (v28 > 0x3FFFFFFF)
              v28 += 64;
            v432 = v28;
            if (v336 > v337)
            {
              *(_DWORD *)(a1 + 16) = v337 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v337) = v28;
              v338 = *(_DWORD *)(a1 + 12);
              v339 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if (v336 == *(_DWORD *)(a1 + 8))
                *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v336 + 1), (unint64_t)&v432);
              else
                *(_BYTE *)(*(_QWORD *)a1 + v336) = v28;
              v338 = *(_DWORD *)(a1 + 12) + 1;
              v339 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v338;
              *(_DWORD *)(a1 + 16) = v339;
            }
            v340 = v28 >> 8;
            v432 = BYTE1(v28);
            if (v338 > v339)
            {
              *(_DWORD *)(a1 + 16) = v339 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v339) = BYTE1(v28);
              v343 = *(_DWORD *)(a1 + 12);
              v344 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v341 = v338;
              if (v338 == *(_DWORD *)(a1 + 8))
              {
                v417 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v338 + 1), (unint64_t)&v432);
                v341 = *(unsigned int *)(a1 + 12);
                v342 = *(_QWORD *)a1;
                LOBYTE(v340) = *v417;
              }
              else
              {
                v342 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v342 + v341) = v340;
              v343 = *(_DWORD *)(a1 + 12) + 1;
              v344 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v343;
              *(_DWORD *)(a1 + 16) = v344;
            }
            if ((int)v26 > 0x3FFFFFFF)
              LODWORD(v26) = v26 + 64;
            v432 = v26;
            if (v343 > v344)
            {
              *(_DWORD *)(a1 + 16) = v344 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v344) = v26;
              v345 = *(_DWORD *)(a1 + 12);
              v346 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if (v343 == *(_DWORD *)(a1 + 8))
                *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v343 + 1), (unint64_t)&v432);
              else
                *(_BYTE *)(*(_QWORD *)a1 + v343) = v26;
              v345 = *(_DWORD *)(a1 + 12) + 1;
              v346 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v345;
              *(_DWORD *)(a1 + 16) = v346;
            }
            v347 = v26 >> 8;
            v432 = BYTE1(v26);
            if (v345 > v346)
            {
              *(_DWORD *)(a1 + 16) = v346 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v346) = BYTE1(v26);
              v251 = *(_DWORD *)(a1 + 12);
              v252 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v348 = v345;
              if (v345 == *(_DWORD *)(a1 + 8))
              {
                v418 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v345 + 1), (unint64_t)&v432);
                v348 = *(unsigned int *)(a1 + 12);
                v349 = *(_QWORD *)a1;
                LOBYTE(v347) = *v418;
              }
              else
              {
                v349 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v349 + v348) = v347;
              v251 = *(_DWORD *)(a1 + 12) + 1;
              v252 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v251;
              *(_DWORD *)(a1 + 16) = v252;
            }
            if ((int)v27 > 0x3FFFFFFF)
              LODWORD(v27) = v27 + 64;
            goto LABEL_475;
          }
        }
      }
      JSC::OpUrshift::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(a3 + 4), v26, *(unsigned int *)(a5 + 4), a5, a6, a7, a8);
      return v12;
    case 157:
      v14 = *(_DWORD *)(a4 + 4);
      if (v14 < 0x40000000)
        goto LABEL_11;
      v15 = *(_QWORD *)(a1 + 24);
      v16 = v14 - 0x40000000;
      if (v16 >= *(_DWORD *)(v15 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x19823D240);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v16);
      if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
        goto LABEL_11;
      v18 = *(int **)(v17 + 8);
      if ((v18 & 1) != 0)
        v18 = *JSC::JSRopeString::resolveRope(v17, 0, a3, a4, a9, a5, a6, a7, a8);
      if (!v18)
        goto LABEL_493;
      *v18 += 2;
      v19 = v18[1];
      if (*v18 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
        if (v19)
          goto LABEL_11;
LABEL_493:
        v264 = *(_DWORD *)(v12 + 4);
        v265 = *(unsigned int *)(a5 + 4);
        goto LABEL_496;
      }
      *v18 -= 2;
      if (!v19)
        goto LABEL_493;
LABEL_11:
      v20 = *(_DWORD *)(a5 + 4);
      if (v20 < 0x40000000)
        goto LABEL_20;
      v21 = *(_QWORD *)(a1 + 24);
      v22 = v20 - 0x40000000;
      if (v22 >= *(_DWORD *)(v21 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x19823D248);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * v22);
      if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 2)
        goto LABEL_20;
      v24 = *(int **)(v23 + 8);
      if ((v24 & 1) != 0)
        v24 = *JSC::JSRopeString::resolveRope(v23, 0, a3, a4, a9, a5, a6, a7, a8);
      if (v24)
      {
        *v24 += 2;
        v25 = v24[1];
        if (*v24 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v24, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
          if (v25)
            goto LABEL_20;
        }
        else
        {
          *v24 -= 2;
          if (v25)
          {
LABEL_20:
            JSC::BytecodeGenerator::emitBinaryOp<JSC::OpAdd>(a1, v12, *(unsigned int *)(a4 + 4), *(unsigned int *)(a5 + 4), (unsigned __int16)a6, a6, a7, a8);
            return v12;
          }
        }
      }
      v264 = *(_DWORD *)(v12 + 4);
      v265 = *(unsigned int *)(a4 + 4);
LABEL_496:
      if ((JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, v264, v265, a4, a5, a6, a7, a8) & 1) == 0&& (JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v264, v265, v274, v275, v276, v277, v278) & 1) == 0)
      {
        JSC::OpToPrimitive::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v264, v265, v274, v275, v276, v277, v278);
      }
      v279 = *(unsigned int *)(v12 + 4);
      if ((JSC::OpToString::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(a1, *(_DWORD *)(v12 + 4), v279, v274, v275, v276, v277, v278) & 1) == 0&& (JSC::OpToString::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v279, v279, v280, v281, v282, v283, v284) & 1) == 0)
      {
        JSC::OpToString::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v279, v279, v285, v286, v287, v288, v289);
      }
      return v12;
    case 158:
      v53 = *(unsigned int *)(a4 + 4);
      v54 = *(unsigned int *)(a5 + 4);
      v55 = *(_DWORD *)(a3 + 4);
      v56 = *(_QWORD *)(a1 + 24);
      v57 = *(unsigned int *)(v56 + 288);
      *(_DWORD *)(v56 + 288) = v57 + 1;
      v58 = (v55 - 1073741808) < 0x80;
      if (v55 <= 0x3FFFFFFF)
        v58 = (v55 + 128) < 0x90;
      if (v58)
      {
        v59 = (v53 - 1073741808) < 0x80;
        if ((int)v53 <= 0x3FFFFFFF)
          v59 = (v53 + 128) < 0x90;
        if (v59)
        {
          v60 = (v54 - 1073741808) < 0x80;
          if ((int)v54 <= 0x3FFFFFFF)
            v60 = (v54 + 128) < 0x90;
          if (v60 && v57 <= 0xFF)
          {
            v61 = BYTE1(a6) != 126 && BYTE1(a6) >= 0x10u;
            v62 = !v61;
            v63 = a6 <= 0xFu || a6 == 126;
            if (v63 && v62)
            {
              v64 = -98;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9E, a3, a4, a5, a6, a7, a8);
              v432 = -98;
              v65 = *(unsigned int *)(a1 + 12);
              v66 = *(unsigned int *)(a1 + 16);
              if (v65 > v66)
                goto LABEL_761;
              if ((_DWORD)v65 != *(_DWORD *)(a1 + 8))
              {
                v67 = *(_QWORD *)a1;
                v68 = -98;
                goto LABEL_79;
              }
              goto LABEL_506;
            }
          }
        }
      }
      if (v55 <= 0x3FFFFFFF)
        v303 = (v55 + 0x8000) >> 6 < 0x201;
      else
        v303 = (v55 - 1073741760) < 0x8000;
      if (v303)
      {
        v304 = (v53 - 1073741760) < 0x8000;
        if ((int)v53 <= 0x3FFFFFFF)
          v304 = (v53 + 0x8000) >> 6 < 0x201;
        if (v304)
        {
          v305 = (v54 - 1073741760) < 0x8000;
          if ((int)v54 <= 0x3FFFFFFF)
            v305 = (v54 + 0x8000) >> 6 < 0x201;
          if (v305 && !WORD1(v57))
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9E, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v306 = *(unsigned int *)(a1 + 12);
            v307 = *(unsigned int *)(a1 + 16);
            if (v306 > v307)
            {
              *(_DWORD *)(a1 + 16) = v307 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v307) = 0x80;
              v170 = *(_DWORD *)(a1 + 12);
              v171 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v306 == *(_DWORD *)(a1 + 8))
              {
                v420 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v306 + 1), (unint64_t)&v432);
                v306 = *(unsigned int *)(a1 + 12);
                v308 = *(_QWORD *)a1;
                v309 = *v420;
              }
              else
              {
                v308 = *(_QWORD *)a1;
                v309 = 0x80;
              }
              *(_BYTE *)(v308 + v306) = v309;
              v170 = *(_DWORD *)(a1 + 12) + 1;
              v171 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v170;
              *(_DWORD *)(a1 + 16) = v171;
            }
            v172 = -98;
            goto LABEL_336;
          }
        }
      }
      JSC::OpMul::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v55, v53, v54, v57, (unsigned __int16)a6, a7, a8);
      return v12;
    case 159:
      v53 = *(unsigned int *)(a4 + 4);
      v54 = *(unsigned int *)(a5 + 4);
      v55 = *(_DWORD *)(a3 + 4);
      v143 = *(_QWORD *)(a1 + 24);
      v57 = *(unsigned int *)(v143 + 288);
      *(_DWORD *)(v143 + 288) = v57 + 1;
      v144 = (v55 - 1073741808) < 0x80;
      if (v55 <= 0x3FFFFFFF)
        v144 = (v55 + 128) < 0x90;
      if (v144)
      {
        v145 = (v53 - 1073741808) < 0x80;
        if ((int)v53 <= 0x3FFFFFFF)
          v145 = (v53 + 128) < 0x90;
        if (v145)
        {
          v146 = (v54 - 1073741808) < 0x80;
          if ((int)v54 <= 0x3FFFFFFF)
            v146 = (v54 + 128) < 0x90;
          if (v146 && v57 <= 0xFF)
          {
            v147 = BYTE1(a6) != 126 && BYTE1(a6) >= 0x10u;
            v148 = !v147;
            v149 = a6 <= 0xFu || a6 == 126;
            if (v149 && v148)
            {
              v64 = -97;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9F, a3, a4, a5, a6, a7, a8);
              v432 = -97;
              v65 = *(unsigned int *)(a1 + 12);
              v66 = *(unsigned int *)(a1 + 16);
              if (v65 > v66)
                goto LABEL_761;
              if ((_DWORD)v65 != *(_DWORD *)(a1 + 8))
              {
                v67 = *(_QWORD *)a1;
                v68 = -97;
                goto LABEL_79;
              }
              goto LABEL_506;
            }
          }
        }
      }
      if (v55 <= 0x3FFFFFFF)
        v372 = (v55 + 0x8000) >> 6 < 0x201;
      else
        v372 = (v55 - 1073741760) < 0x8000;
      if (v372)
      {
        v373 = (v53 - 1073741760) < 0x8000;
        if ((int)v53 <= 0x3FFFFFFF)
          v373 = (v53 + 0x8000) >> 6 < 0x201;
        if (v373)
        {
          v374 = (v54 - 1073741760) < 0x8000;
          if ((int)v54 <= 0x3FFFFFFF)
            v374 = (v54 + 0x8000) >> 6 < 0x201;
          if (v374 && !WORD1(v57))
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x9F, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v375 = *(unsigned int *)(a1 + 12);
            v376 = *(unsigned int *)(a1 + 16);
            if (v375 > v376)
            {
              *(_DWORD *)(a1 + 16) = v376 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v376) = 0x80;
              v170 = *(_DWORD *)(a1 + 12);
              v171 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v375 == *(_DWORD *)(a1 + 8))
              {
                v430 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v375 + 1), (unint64_t)&v432);
                v375 = *(unsigned int *)(a1 + 12);
                v377 = *(_QWORD *)a1;
                v378 = *v430;
              }
              else
              {
                v377 = *(_QWORD *)a1;
                v378 = 0x80;
              }
              *(_BYTE *)(v377 + v375) = v378;
              v170 = *(_DWORD *)(a1 + 12) + 1;
              v171 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v170;
              *(_DWORD *)(a1 + 16) = v171;
            }
            v172 = -97;
            goto LABEL_336;
          }
        }
      }
      JSC::OpDiv::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v55, v53, v54, v57, (unsigned __int16)a6, a7, a8);
      return v12;
    case 160:
      v53 = *(unsigned int *)(a4 + 4);
      v54 = *(unsigned int *)(a5 + 4);
      v55 = *(_DWORD *)(a3 + 4);
      v87 = *(_QWORD *)(a1 + 24);
      v57 = *(unsigned int *)(v87 + 288);
      *(_DWORD *)(v87 + 288) = v57 + 1;
      v88 = (v55 - 1073741808) < 0x80;
      if (v55 <= 0x3FFFFFFF)
        v88 = (v55 + 128) < 0x90;
      if (v88)
      {
        v89 = (v53 - 1073741808) < 0x80;
        if ((int)v53 <= 0x3FFFFFFF)
          v89 = (v53 + 128) < 0x90;
        if (v89)
        {
          v90 = (v54 - 1073741808) < 0x80;
          if ((int)v54 <= 0x3FFFFFFF)
            v90 = (v54 + 128) < 0x90;
          if (v90 && v57 <= 0xFF)
          {
            v91 = BYTE1(a6) != 126 && BYTE1(a6) >= 0x10u;
            v92 = !v91;
            v93 = a6 <= 0xFu || a6 == 126;
            if (v93 && v92)
            {
              v64 = -96;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA0, a3, a4, a5, a6, a7, a8);
              v432 = -96;
              v65 = *(unsigned int *)(a1 + 12);
              v66 = *(unsigned int *)(a1 + 16);
              if (v65 > v66)
                goto LABEL_761;
              if ((_DWORD)v65 != *(_DWORD *)(a1 + 8))
              {
                v67 = *(_QWORD *)a1;
                v68 = -96;
                goto LABEL_79;
              }
              goto LABEL_506;
            }
          }
        }
      }
      if (v55 <= 0x3FFFFFFF)
        v296 = (v55 + 0x8000) >> 6 < 0x201;
      else
        v296 = (v55 - 1073741760) < 0x8000;
      if (v296)
      {
        v297 = (v53 - 1073741760) < 0x8000;
        if ((int)v53 <= 0x3FFFFFFF)
          v297 = (v53 + 0x8000) >> 6 < 0x201;
        if (v297)
        {
          v298 = (v54 - 1073741760) < 0x8000;
          if ((int)v54 <= 0x3FFFFFFF)
            v298 = (v54 + 0x8000) >> 6 < 0x201;
          if (v298 && !WORD1(v57))
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA0, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v299 = *(unsigned int *)(a1 + 12);
            v300 = *(unsigned int *)(a1 + 16);
            if (v299 > v300)
            {
              *(_DWORD *)(a1 + 16) = v300 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v300) = 0x80;
              v170 = *(_DWORD *)(a1 + 12);
              v171 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v299 == *(_DWORD *)(a1 + 8))
              {
                v419 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v299 + 1), (unint64_t)&v432);
                v299 = *(unsigned int *)(a1 + 12);
                v301 = *(_QWORD *)a1;
                v302 = *v419;
              }
              else
              {
                v301 = *(_QWORD *)a1;
                v302 = 0x80;
              }
              *(_BYTE *)(v301 + v299) = v302;
              v170 = *(_DWORD *)(a1 + 12) + 1;
              v171 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v170;
              *(_DWORD *)(a1 + 16) = v171;
            }
            v172 = -96;
            goto LABEL_336;
          }
        }
      }
      JSC::OpSub::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v55, v53, v54, v57, (unsigned __int16)a6, a7, a8);
      return v12;
    case 161:
      v53 = *(unsigned int *)(a4 + 4);
      v54 = *(unsigned int *)(a5 + 4);
      v55 = *(_DWORD *)(a3 + 4);
      v104 = *(_QWORD *)(a1 + 24);
      v57 = *(unsigned int *)(v104 + 288);
      *(_DWORD *)(v104 + 288) = v57 + 1;
      v105 = (v55 - 1073741808) < 0x80;
      if (v55 <= 0x3FFFFFFF)
        v105 = (v55 + 128) < 0x90;
      if (v105)
      {
        v106 = (v53 - 1073741808) < 0x80;
        if ((int)v53 <= 0x3FFFFFFF)
          v106 = (v53 + 128) < 0x90;
        if (v106)
        {
          v107 = (v54 - 1073741808) < 0x80;
          if ((int)v54 <= 0x3FFFFFFF)
            v107 = (v54 + 128) < 0x90;
          if (v107 && v57 <= 0xFF)
          {
            v108 = BYTE1(a6) != 126 && BYTE1(a6) >= 0x10u;
            v109 = !v108;
            v110 = a6 <= 0xFu || a6 == 126;
            if (v110 && v109)
            {
              v64 = -95;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA1, a3, a4, a5, a6, a7, a8);
              v432 = -95;
              v65 = *(unsigned int *)(a1 + 12);
              v66 = *(unsigned int *)(a1 + 16);
              if (v65 > v66)
                goto LABEL_761;
              if ((_DWORD)v65 != *(_DWORD *)(a1 + 8))
              {
                v67 = *(_QWORD *)a1;
                v68 = -95;
                goto LABEL_79;
              }
              goto LABEL_506;
            }
          }
        }
      }
      if (v55 <= 0x3FFFFFFF)
        v310 = (v55 + 0x8000) >> 6 < 0x201;
      else
        v310 = (v55 - 1073741760) < 0x8000;
      if (v310)
      {
        v311 = (v53 - 1073741760) < 0x8000;
        if ((int)v53 <= 0x3FFFFFFF)
          v311 = (v53 + 0x8000) >> 6 < 0x201;
        if (v311)
        {
          v312 = (v54 - 1073741760) < 0x8000;
          if ((int)v54 <= 0x3FFFFFFF)
            v312 = (v54 + 0x8000) >> 6 < 0x201;
          if (v312 && !WORD1(v57))
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA1, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v313 = *(unsigned int *)(a1 + 12);
            v314 = *(unsigned int *)(a1 + 16);
            if (v313 > v314)
            {
              *(_DWORD *)(a1 + 16) = v314 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v314) = 0x80;
              v170 = *(_DWORD *)(a1 + 12);
              v171 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v313 == *(_DWORD *)(a1 + 8))
              {
                v421 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v313 + 1), (unint64_t)&v432);
                v313 = *(unsigned int *)(a1 + 12);
                v315 = *(_QWORD *)a1;
                v316 = *v421;
              }
              else
              {
                v315 = *(_QWORD *)a1;
                v316 = 0x80;
              }
              *(_BYTE *)(v315 + v313) = v316;
              v170 = *(_DWORD *)(a1 + 12) + 1;
              v171 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v170;
              *(_DWORD *)(a1 + 16) = v171;
            }
            v172 = -95;
            goto LABEL_336;
          }
        }
      }
      JSC::OpBitand::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v55, v53, v54, v57, (unsigned __int16)a6, a7, a8);
      return v12;
    case 162:
      v53 = *(unsigned int *)(a4 + 4);
      v54 = *(unsigned int *)(a5 + 4);
      v55 = *(_DWORD *)(a3 + 4);
      v97 = *(_QWORD *)(a1 + 24);
      v57 = *(unsigned int *)(v97 + 288);
      *(_DWORD *)(v97 + 288) = v57 + 1;
      v98 = (v55 - 1073741808) < 0x80;
      if (v55 <= 0x3FFFFFFF)
        v98 = (v55 + 128) < 0x90;
      if (v98)
      {
        v99 = (v53 - 1073741808) < 0x80;
        if ((int)v53 <= 0x3FFFFFFF)
          v99 = (v53 + 128) < 0x90;
        if (v99)
        {
          v100 = (v54 - 1073741808) < 0x80;
          if ((int)v54 <= 0x3FFFFFFF)
            v100 = (v54 + 128) < 0x90;
          if (v100 && v57 <= 0xFF)
          {
            v101 = BYTE1(a6) != 126 && BYTE1(a6) >= 0x10u;
            v102 = !v101;
            v103 = a6 <= 0xFu || a6 == 126;
            if (v103 && v102)
            {
              v64 = -94;
              JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA2, a3, a4, a5, a6, a7, a8);
              v432 = -94;
              v65 = *(unsigned int *)(a1 + 12);
              v66 = *(unsigned int *)(a1 + 16);
              if (v65 > v66)
                goto LABEL_761;
              if ((_DWORD)v65 != *(_DWORD *)(a1 + 8))
              {
                v67 = *(_QWORD *)a1;
                v68 = -94;
                goto LABEL_79;
              }
              goto LABEL_506;
            }
          }
        }
      }
      if (v55 <= 0x3FFFFFFF)
        v163 = (v55 + 0x8000) >> 6 < 0x201;
      else
        v163 = (v55 - 1073741760) < 0x8000;
      if (!v163)
        goto LABEL_739;
      v164 = (v53 - 1073741760) < 0x8000;
      if ((int)v53 <= 0x3FFFFFFF)
        v164 = (v53 + 0x8000) >> 6 < 0x201;
      if (!v164)
        goto LABEL_739;
      v165 = (v54 - 1073741760) < 0x8000;
      if ((int)v54 <= 0x3FFFFFFF)
        v165 = (v54 + 0x8000) >> 6 < 0x201;
      if (v165 && !WORD1(v57))
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA2, a3, a4, a5, a6, a7, a8);
        v432 = 0x80;
        v166 = *(unsigned int *)(a1 + 12);
        v167 = *(unsigned int *)(a1 + 16);
        if (v166 > v167)
        {
          *(_DWORD *)(a1 + 16) = v167 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v167) = 0x80;
          v170 = *(_DWORD *)(a1 + 12);
          v171 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v166 == *(_DWORD *)(a1 + 8))
          {
            v399 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v166 + 1), (unint64_t)&v432);
            v166 = *(unsigned int *)(a1 + 12);
            v168 = *(_QWORD *)a1;
            v169 = *v399;
          }
          else
          {
            v168 = *(_QWORD *)a1;
            v169 = 0x80;
          }
          *(_BYTE *)(v168 + v166) = v169;
          v170 = *(_DWORD *)(a1 + 12) + 1;
          v171 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v170;
          *(_DWORD *)(a1 + 16) = v171;
        }
        v172 = -94;
LABEL_336:
        v432 = v172;
        if (v170 > v171)
        {
          *(_DWORD *)(a1 + 16) = v171 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v171) = v172;
          v175 = *(_DWORD *)(a1 + 12);
          v176 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v173 = v170;
          if (v170 == *(_DWORD *)(a1 + 8))
          {
            v390 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v170 + 1), (unint64_t)&v432);
            v173 = *(unsigned int *)(a1 + 12);
            v174 = *(_QWORD *)a1;
            v172 = *v390;
          }
          else
          {
            v174 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v174 + v173) = v172;
          v175 = *(_DWORD *)(a1 + 12) + 1;
          v176 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v175;
          *(_DWORD *)(a1 + 16) = v176;
        }
        if (v55 > 0x3FFFFFFF)
          v55 += 64;
        v432 = v55;
        if (v175 > v176)
        {
          *(_DWORD *)(a1 + 16) = v176 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v176) = v55;
          v177 = *(_DWORD *)(a1 + 12);
          v178 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v175 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v175 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v175) = v55;
          v177 = *(_DWORD *)(a1 + 12) + 1;
          v178 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v177;
          *(_DWORD *)(a1 + 16) = v178;
        }
        v179 = v55 >> 8;
        v432 = BYTE1(v55);
        if (v177 > v178)
        {
          *(_DWORD *)(a1 + 16) = v178 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v178) = BYTE1(v55);
          v182 = *(_DWORD *)(a1 + 12);
          v183 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v180 = v177;
          if (v177 == *(_DWORD *)(a1 + 8))
          {
            v391 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v177 + 1), (unint64_t)&v432);
            v180 = *(unsigned int *)(a1 + 12);
            v181 = *(_QWORD *)a1;
            LOBYTE(v179) = *v391;
          }
          else
          {
            v181 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v181 + v180) = v179;
          v182 = *(_DWORD *)(a1 + 12) + 1;
          v183 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v182;
          *(_DWORD *)(a1 + 16) = v183;
        }
        if ((int)v53 > 0x3FFFFFFF)
          LODWORD(v53) = v53 + 64;
        v432 = v53;
        if (v182 > v183)
        {
          *(_DWORD *)(a1 + 16) = v183 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v183) = v53;
          v184 = *(_DWORD *)(a1 + 12);
          v185 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v182 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v182 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v182) = v53;
          v184 = *(_DWORD *)(a1 + 12) + 1;
          v185 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v184;
          *(_DWORD *)(a1 + 16) = v185;
        }
        v186 = v53 >> 8;
        v432 = BYTE1(v53);
        if (v184 > v185)
        {
          *(_DWORD *)(a1 + 16) = v185 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v185) = BYTE1(v53);
          v189 = *(_DWORD *)(a1 + 12);
          v190 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v187 = v184;
          if (v184 == *(_DWORD *)(a1 + 8))
          {
            v392 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v184 + 1), (unint64_t)&v432);
            v187 = *(unsigned int *)(a1 + 12);
            v188 = *(_QWORD *)a1;
            LOBYTE(v186) = *v392;
          }
          else
          {
            v188 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v188 + v187) = v186;
          v189 = *(_DWORD *)(a1 + 12) + 1;
          v190 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v189;
          *(_DWORD *)(a1 + 16) = v190;
        }
        if ((int)v54 > 0x3FFFFFFF)
          LODWORD(v54) = v54 + 64;
        v432 = v54;
        if (v189 > v190)
        {
          *(_DWORD *)(a1 + 16) = v190 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v190) = v54;
          v191 = *(_DWORD *)(a1 + 12);
          v192 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v189 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v189 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v189) = v54;
          v191 = *(_DWORD *)(a1 + 12) + 1;
          v192 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v191;
          *(_DWORD *)(a1 + 16) = v192;
        }
        v193 = v54 >> 8;
        v432 = BYTE1(v54);
        if (v191 > v192)
        {
          *(_DWORD *)(a1 + 16) = v192 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v192) = BYTE1(v54);
          v196 = *(_DWORD *)(a1 + 12);
          v197 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v194 = v191;
          if (v191 == *(_DWORD *)(a1 + 8))
          {
            v393 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v191 + 1), (unint64_t)&v432);
            v194 = *(unsigned int *)(a1 + 12);
            v195 = *(_QWORD *)a1;
            LOBYTE(v193) = *v393;
          }
          else
          {
            v195 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v195 + v194) = v193;
          v196 = *(_DWORD *)(a1 + 12) + 1;
          v197 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v196;
          *(_DWORD *)(a1 + 16) = v197;
        }
        v432 = v57;
        if (v196 > v197)
        {
          *(_DWORD *)(a1 + 16) = v197 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v197) = v57;
          v198 = *(_DWORD *)(a1 + 12);
          v199 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v196 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v196 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v196) = v57;
          v198 = *(_DWORD *)(a1 + 12) + 1;
          v199 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v198;
          *(_DWORD *)(a1 + 16) = v199;
        }
        v200 = v57 >> 8;
        v432 = BYTE1(v57);
        if (v198 > v199)
        {
          *(_DWORD *)(a1 + 16) = v199 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v199) = BYTE1(v57);
          v203 = *(_DWORD *)(a1 + 12);
          v204 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v201 = v198;
          if (v198 == *(_DWORD *)(a1 + 8))
          {
            v394 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v198 + 1), (unint64_t)&v432);
            v201 = *(unsigned int *)(a1 + 12);
            v202 = *(_QWORD *)a1;
            LOBYTE(v200) = *v394;
          }
          else
          {
            v202 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v202 + v201) = v200;
          v203 = *(_DWORD *)(a1 + 12) + 1;
          v204 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v203;
          *(_DWORD *)(a1 + 16) = v204;
        }
        v432 = a6;
        if (v203 > v204)
        {
          *(_DWORD *)(a1 + 16) = v204 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v204) = a6;
          v205 = *(_DWORD *)(a1 + 12);
          v206 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v203 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v203 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v203) = a6;
          v205 = *(_DWORD *)(a1 + 12) + 1;
          v206 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v205;
          *(_DWORD *)(a1 + 16) = v206;
        }
        v432 = BYTE1(a6);
        if (v205 <= v206)
        {
          v50 = v205;
          if (v205 == *(_DWORD *)(a1 + 8))
            goto LABEL_424;
          *(_BYTE *)(*(_QWORD *)a1 + v205) = BYTE1(a6);
          goto LABEL_52;
        }
        *(_DWORD *)(a1 + 16) = v206 + 1;
        *(_BYTE *)(*(_QWORD *)a1 + v206) = BYTE1(a6);
      }
      else
      {
LABEL_739:
        JSC::OpBitor::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v55, v53, v54, v57, (unsigned __int16)a6, a7, a8);
      }
      return v12;
    case 163:
      v53 = *(unsigned int *)(a4 + 4);
      v54 = *(unsigned int *)(a5 + 4);
      v55 = *(_DWORD *)(a3 + 4);
      v210 = *(_QWORD *)(a1 + 24);
      v57 = *(unsigned int *)(v210 + 288);
      *(_DWORD *)(v210 + 288) = v57 + 1;
      v211 = (v55 - 1073741808) < 0x80;
      if (v55 <= 0x3FFFFFFF)
        v211 = (v55 + 128) < 0x90;
      if (v211 && ((int)v53 <= 0x3FFFFFFF ? (v53 + 128) < 0x90 : (v53 - 1073741808) < 0x80))
      {
        v213 = (v54 - 1073741808) < 0x80;
        if ((int)v54 <= 0x3FFFFFFF)
          v213 = (v54 + 128) < 0x90;
        if (v213 && v57 <= 0xFF)
        {
          v214 = BYTE1(a6) != 126 && BYTE1(a6) >= 0x10u;
          v215 = !v214;
          v216 = a6 <= 0xFu || a6 == 126;
          if (v216 && v215)
          {
            v64 = -93;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA3, a3, a4, a5, a6, a7, a8);
            v432 = -93;
            v65 = *(unsigned int *)(a1 + 12);
            v66 = *(unsigned int *)(a1 + 16);
            if (v65 > v66)
            {
LABEL_761:
              *(_DWORD *)(a1 + 16) = v66 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v66) = v64;
              v69 = *(_DWORD *)(a1 + 12);
              v70 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v65 == *(_DWORD *)(a1 + 8))
              {
LABEL_506:
                v295 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v65 + 1), (unint64_t)&v432);
                v65 = *(unsigned int *)(a1 + 12);
                v67 = *(_QWORD *)a1;
                v68 = *v295;
              }
              else
              {
                v67 = *(_QWORD *)a1;
                v68 = -93;
              }
LABEL_79:
              *(_BYTE *)(v67 + v65) = v68;
              v69 = *(_DWORD *)(a1 + 12) + 1;
              v70 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v69;
              *(_DWORD *)(a1 + 16) = v70;
            }
            v71 = v55 + 16;
            if (v55 <= 0x3FFFFFFF)
              v71 = v55;
            v432 = v71;
            if (v69 > v70)
            {
              *(_DWORD *)(a1 + 16) = v70 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v70) = v71;
              v74 = *(_DWORD *)(a1 + 12);
              v75 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v72 = v69;
              if (v69 == *(_DWORD *)(a1 + 8))
              {
                v292 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v69 + 1), (unint64_t)&v432);
                v72 = *(unsigned int *)(a1 + 12);
                v73 = *(_QWORD *)a1;
                v71 = *v292;
              }
              else
              {
                v73 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v73 + v72) = v71;
              v74 = *(_DWORD *)(a1 + 12) + 1;
              v75 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v74;
              *(_DWORD *)(a1 + 16) = v75;
            }
            v76 = v53 + 16;
            if ((int)v53 <= 0x3FFFFFFF)
              v76 = v53;
            v432 = v76;
            if (v74 > v75)
            {
              *(_DWORD *)(a1 + 16) = v75 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v75) = v76;
              v79 = *(_DWORD *)(a1 + 12);
              v80 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v77 = v74;
              if (v74 == *(_DWORD *)(a1 + 8))
              {
                v293 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v74 + 1), (unint64_t)&v432);
                v77 = *(unsigned int *)(a1 + 12);
                v78 = *(_QWORD *)a1;
                v76 = *v293;
              }
              else
              {
                v78 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v78 + v77) = v76;
              v79 = *(_DWORD *)(a1 + 12) + 1;
              v80 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v79;
              *(_DWORD *)(a1 + 16) = v80;
            }
            v81 = v54 + 16;
            if ((int)v54 <= 0x3FFFFFFF)
              v81 = v54;
            v432 = v81;
            if (v79 > v80)
            {
              *(_DWORD *)(a1 + 16) = v80 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v80) = v81;
              v84 = *(_DWORD *)(a1 + 12);
              v85 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              v82 = v79;
              if (v79 == *(_DWORD *)(a1 + 8))
              {
                v294 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v79 + 1), (unint64_t)&v432);
                v82 = *(unsigned int *)(a1 + 12);
                v83 = *(_QWORD *)a1;
                v81 = *v294;
              }
              else
              {
                v83 = *(_QWORD *)a1;
              }
              *(_BYTE *)(v83 + v82) = v81;
              v84 = *(_DWORD *)(a1 + 12) + 1;
              v85 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v84;
              *(_DWORD *)(a1 + 16) = v85;
            }
            v432 = v57;
            if (v84 > v85)
            {
              *(_DWORD *)(a1 + 16) = v85 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v85) = v57;
              v47 = *(_DWORD *)(a1 + 12);
              v48 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if (v84 == *(_DWORD *)(a1 + 8))
                *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v432);
              else
                *(_BYTE *)(*(_QWORD *)a1 + v84) = v57;
              v47 = *(_DWORD *)(a1 + 12) + 1;
              v48 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v47;
              *(_DWORD *)(a1 + 16) = v48;
            }
            v49 = a6 >> 8;
            if (BYTE1(a6) == 126)
              LOBYTE(v49) = 0;
            if (a6 == 126)
              v86 = 0;
            else
              v86 = 16 * a6;
            LOBYTE(v49) = v49 | v86;
            goto LABEL_48;
          }
        }
      }
      v413 = (unsigned __int16)a6;
      if (!JSC::OpBitxor::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, v55, v53, v54, v57, a6))
        JSC::OpBitxor::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v55, v53, v54, v57, v413, v414, v415);
      return v12;
    case 164:
      v111 = *(unsigned int *)(a4 + 4);
      v112 = *(unsigned int *)(a5 + 4);
      v113 = *(_DWORD *)(a3 + 4);
      v156 = *(_QWORD *)(a1 + 24);
      v27 = *(unsigned int *)(v156 + 288);
      *(_DWORD *)(v156 + 288) = v27 + 1;
      v157 = (v113 - 1073741808) < 0x80;
      if (v113 <= 0x3FFFFFFF)
        v157 = (v113 + 128) < 0x90;
      if (v157)
      {
        v158 = (v111 - 1073741808) < 0x80;
        if ((int)v111 <= 0x3FFFFFFF)
          v158 = (v111 + 128) < 0x90;
        if (v158)
        {
          v159 = (v112 - 1073741808) < 0x80;
          if ((int)v112 <= 0x3FFFFFFF)
            v159 = (v112 + 128) < 0x90;
          if (v159 && v27 <= 0xFF)
          {
            v118 = -92;
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA4, a3, a4, a5, a6, a7, a8);
            v432 = -92;
            v119 = *(unsigned int *)(a1 + 12);
            v120 = *(unsigned int *)(a1 + 16);
            if (v119 > v120)
              goto LABEL_766;
            if ((_DWORD)v119 != *(_DWORD *)(a1 + 8))
            {
              v121 = *(_QWORD *)a1;
              v122 = -92;
              goto LABEL_209;
            }
            goto LABEL_644;
          }
        }
      }
      if (v113 <= 0x3FFFFFFF)
        v317 = (v113 + 0x8000) >> 6 < 0x201;
      else
        v317 = (v113 - 1073741760) < 0x8000;
      if (v317)
      {
        v318 = (v111 - 1073741760) < 0x8000;
        if ((int)v111 <= 0x3FFFFFFF)
          v318 = (v111 + 0x8000) >> 6 < 0x201;
        if (v318)
        {
          v319 = (v112 - 1073741760) < 0x8000;
          if ((int)v112 <= 0x3FFFFFFF)
            v319 = (v112 + 0x8000) >> 6 < 0x201;
          if (v319 && !WORD1(v27))
          {
            JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA4, a3, a4, a5, a6, a7, a8);
            v432 = 0x80;
            v320 = *(unsigned int *)(a1 + 12);
            v321 = *(unsigned int *)(a1 + 16);
            if (v320 > v321)
            {
              *(_DWORD *)(a1 + 16) = v321 + 1;
              *(_BYTE *)(*(_QWORD *)a1 + v321) = 0x80;
              v225 = *(_DWORD *)(a1 + 12);
              v226 = *(_DWORD *)(a1 + 16);
            }
            else
            {
              if ((_DWORD)v320 == *(_DWORD *)(a1 + 8))
              {
                v422 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v320 + 1), (unint64_t)&v432);
                v320 = *(unsigned int *)(a1 + 12);
                v322 = *(_QWORD *)a1;
                v323 = *v422;
              }
              else
              {
                v322 = *(_QWORD *)a1;
                v323 = 0x80;
              }
              *(_BYTE *)(v322 + v320) = v323;
              v225 = *(_DWORD *)(a1 + 12) + 1;
              v226 = *(_DWORD *)(a1 + 16) + 1;
              *(_DWORD *)(a1 + 12) = v225;
              *(_DWORD *)(a1 + 16) = v226;
            }
            v227 = -92;
            goto LABEL_441;
          }
        }
      }
      JSC::OpLshift::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v113, v111, v112, v27, a6, a7, a8);
      return v12;
    case 165:
      v111 = *(unsigned int *)(a4 + 4);
      v112 = *(unsigned int *)(a5 + 4);
      v113 = *(_DWORD *)(a3 + 4);
      v114 = *(_QWORD *)(a1 + 24);
      v27 = *(unsigned int *)(v114 + 288);
      *(_DWORD *)(v114 + 288) = v27 + 1;
      v115 = (v113 - 1073741808) < 0x80;
      if (v113 <= 0x3FFFFFFF)
        v115 = (v113 + 128) < 0x90;
      if (!v115)
        goto LABEL_425;
      v116 = (v111 - 1073741808) < 0x80;
      if ((int)v111 <= 0x3FFFFFFF)
        v116 = (v111 + 128) < 0x90;
      if (!v116)
        goto LABEL_425;
      v117 = (v112 - 1073741808) < 0x80;
      if ((int)v112 <= 0x3FFFFFFF)
        v117 = (v112 + 128) < 0x90;
      if (v117 && v27 <= 0xFF)
      {
        v118 = -91;
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA5, a3, a4, a5, a6, a7, a8);
        v432 = -91;
        v119 = *(unsigned int *)(a1 + 12);
        v120 = *(unsigned int *)(a1 + 16);
        if (v119 > v120)
        {
LABEL_766:
          *(_DWORD *)(a1 + 16) = v120 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v120) = v118;
          v123 = *(_DWORD *)(a1 + 12);
          v124 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v119 == *(_DWORD *)(a1 + 8))
          {
LABEL_644:
            v364 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v119 + 1), (unint64_t)&v432);
            v119 = *(unsigned int *)(a1 + 12);
            v121 = *(_QWORD *)a1;
            v122 = *v364;
          }
          else
          {
            v121 = *(_QWORD *)a1;
            v122 = -91;
          }
LABEL_209:
          *(_BYTE *)(v121 + v119) = v122;
          v123 = *(_DWORD *)(a1 + 12) + 1;
          v124 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v123;
          *(_DWORD *)(a1 + 16) = v124;
        }
        v125 = v113 + 16;
        if (v113 <= 0x3FFFFFFF)
          v125 = v113;
        v432 = v125;
        if (v123 > v124)
        {
          *(_DWORD *)(a1 + 16) = v124 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v124) = v125;
          v128 = *(_DWORD *)(a1 + 12);
          v129 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v126 = v123;
          if (v123 == *(_DWORD *)(a1 + 8))
          {
            v361 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v123 + 1), (unint64_t)&v432);
            v126 = *(unsigned int *)(a1 + 12);
            v127 = *(_QWORD *)a1;
            v125 = *v361;
          }
          else
          {
            v127 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v127 + v126) = v125;
          v128 = *(_DWORD *)(a1 + 12) + 1;
          v129 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v128;
          *(_DWORD *)(a1 + 16) = v129;
        }
        v130 = v111 + 16;
        if ((int)v111 <= 0x3FFFFFFF)
          v130 = v111;
        v432 = v130;
        if (v128 > v129)
        {
          *(_DWORD *)(a1 + 16) = v129 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v129) = v130;
          v133 = *(_DWORD *)(a1 + 12);
          v134 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v131 = v128;
          if (v128 == *(_DWORD *)(a1 + 8))
          {
            v362 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v128 + 1), (unint64_t)&v432);
            v131 = *(unsigned int *)(a1 + 12);
            v132 = *(_QWORD *)a1;
            v130 = *v362;
          }
          else
          {
            v132 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v132 + v131) = v130;
          v133 = *(_DWORD *)(a1 + 12) + 1;
          v134 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v133;
          *(_DWORD *)(a1 + 16) = v134;
        }
        v135 = v112 + 16;
        if ((int)v112 <= 0x3FFFFFFF)
          v135 = v112;
        v432 = v135;
        if (v133 > v134)
        {
          *(_DWORD *)(a1 + 16) = v134 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v134) = v135;
          v138 = *(_DWORD *)(a1 + 12);
          v139 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v136 = v133;
          if (v133 == *(_DWORD *)(a1 + 8))
          {
            v363 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v133 + 1), (unint64_t)&v432);
            v136 = *(unsigned int *)(a1 + 12);
            v137 = *(_QWORD *)a1;
            v135 = *v363;
          }
          else
          {
            v137 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v137 + v136) = v135;
          v138 = *(_DWORD *)(a1 + 12) + 1;
          v139 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v138;
          *(_DWORD *)(a1 + 16) = v139;
        }
        v432 = v27;
        if (v138 > v139)
        {
          *(_DWORD *)(a1 + 16) = v139 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v139) = v27;
          return v12;
        }
        v50 = v138;
        if (v138 != *(_DWORD *)(a1 + 8))
        {
          *(_BYTE *)(*(_QWORD *)a1 + v138) = v27;
          goto LABEL_52;
        }
      }
      else
      {
LABEL_425:
        if (v113 <= 0x3FFFFFFF)
          v218 = (v113 + 0x8000) >> 6 < 0x201;
        else
          v218 = (v113 - 1073741760) < 0x8000;
        if (!v218)
          goto LABEL_740;
        v219 = (v111 - 1073741760) < 0x8000;
        if ((int)v111 <= 0x3FFFFFFF)
          v219 = (v111 + 0x8000) >> 6 < 0x201;
        if (!v219)
          goto LABEL_740;
        v220 = (v112 - 1073741760) < 0x8000;
        if ((int)v112 <= 0x3FFFFFFF)
          v220 = (v112 + 0x8000) >> 6 < 0x201;
        if (!v220 || WORD1(v27))
        {
LABEL_740:
          JSC::OpRshift::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, v113, v111, v112, v27, a6, a7, a8);
          return v12;
        }
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0xA5, a3, a4, a5, a6, a7, a8);
        v432 = 0x80;
        v221 = *(unsigned int *)(a1 + 12);
        v222 = *(unsigned int *)(a1 + 16);
        if (v221 > v222)
        {
          *(_DWORD *)(a1 + 16) = v222 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v222) = 0x80;
          v225 = *(_DWORD *)(a1 + 12);
          v226 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v221 == *(_DWORD *)(a1 + 8))
          {
            v404 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v221 + 1), (unint64_t)&v432);
            v221 = *(unsigned int *)(a1 + 12);
            v223 = *(_QWORD *)a1;
            v224 = *v404;
          }
          else
          {
            v223 = *(_QWORD *)a1;
            v224 = 0x80;
          }
          *(_BYTE *)(v223 + v221) = v224;
          v225 = *(_DWORD *)(a1 + 12) + 1;
          v226 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v225;
          *(_DWORD *)(a1 + 16) = v226;
        }
        v227 = -91;
LABEL_441:
        v432 = v227;
        if (v225 > v226)
        {
          *(_DWORD *)(a1 + 16) = v226 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v226) = v227;
          v230 = *(_DWORD *)(a1 + 12);
          v231 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v228 = v225;
          if (v225 == *(_DWORD *)(a1 + 8))
          {
            v400 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v225 + 1), (unint64_t)&v432);
            v228 = *(unsigned int *)(a1 + 12);
            v229 = *(_QWORD *)a1;
            v227 = *v400;
          }
          else
          {
            v229 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v229 + v228) = v227;
          v230 = *(_DWORD *)(a1 + 12) + 1;
          v231 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v230;
          *(_DWORD *)(a1 + 16) = v231;
        }
        if (v113 > 0x3FFFFFFF)
          v113 += 64;
        v432 = v113;
        if (v230 > v231)
        {
          *(_DWORD *)(a1 + 16) = v231 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v231) = v113;
          v232 = *(_DWORD *)(a1 + 12);
          v233 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v230 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v230 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v230) = v113;
          v232 = *(_DWORD *)(a1 + 12) + 1;
          v233 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v232;
          *(_DWORD *)(a1 + 16) = v233;
        }
        v234 = v113 >> 8;
        v432 = BYTE1(v113);
        if (v232 > v233)
        {
          *(_DWORD *)(a1 + 16) = v233 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v233) = BYTE1(v113);
          v237 = *(_DWORD *)(a1 + 12);
          v238 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v235 = v232;
          if (v232 == *(_DWORD *)(a1 + 8))
          {
            v401 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v232 + 1), (unint64_t)&v432);
            v235 = *(unsigned int *)(a1 + 12);
            v236 = *(_QWORD *)a1;
            LOBYTE(v234) = *v401;
          }
          else
          {
            v236 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v236 + v235) = v234;
          v237 = *(_DWORD *)(a1 + 12) + 1;
          v238 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v237;
          *(_DWORD *)(a1 + 16) = v238;
        }
        if ((int)v111 > 0x3FFFFFFF)
          LODWORD(v111) = v111 + 64;
        v432 = v111;
        if (v237 > v238)
        {
          *(_DWORD *)(a1 + 16) = v238 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v238) = v111;
          v239 = *(_DWORD *)(a1 + 12);
          v240 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v237 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v237 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v237) = v111;
          v239 = *(_DWORD *)(a1 + 12) + 1;
          v240 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v239;
          *(_DWORD *)(a1 + 16) = v240;
        }
        v241 = v111 >> 8;
        v432 = BYTE1(v111);
        if (v239 > v240)
        {
          *(_DWORD *)(a1 + 16) = v240 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v240) = BYTE1(v111);
          v244 = *(_DWORD *)(a1 + 12);
          v245 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v242 = v239;
          if (v239 == *(_DWORD *)(a1 + 8))
          {
            v402 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v239 + 1), (unint64_t)&v432);
            v242 = *(unsigned int *)(a1 + 12);
            v243 = *(_QWORD *)a1;
            LOBYTE(v241) = *v402;
          }
          else
          {
            v243 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v243 + v242) = v241;
          v244 = *(_DWORD *)(a1 + 12) + 1;
          v245 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v244;
          *(_DWORD *)(a1 + 16) = v245;
        }
        if ((int)v112 > 0x3FFFFFFF)
          LODWORD(v112) = v112 + 64;
        v432 = v112;
        if (v244 > v245)
        {
          *(_DWORD *)(a1 + 16) = v245 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v245) = v112;
          v246 = *(_DWORD *)(a1 + 12);
          v247 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v244 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v244 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v244) = v112;
          v246 = *(_DWORD *)(a1 + 12) + 1;
          v247 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v246;
          *(_DWORD *)(a1 + 16) = v247;
        }
        v248 = v112 >> 8;
        v432 = BYTE1(v112);
        if (v246 > v247)
        {
          *(_DWORD *)(a1 + 16) = v247 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v247) = BYTE1(v112);
          v251 = *(_DWORD *)(a1 + 12);
          v252 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v249 = v246;
          if (v246 == *(_DWORD *)(a1 + 8))
          {
            v403 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v246 + 1), (unint64_t)&v432);
            v249 = *(unsigned int *)(a1 + 12);
            v250 = *(_QWORD *)a1;
            LOBYTE(v248) = *v403;
          }
          else
          {
            v250 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v250 + v249) = v248;
          v251 = *(_DWORD *)(a1 + 12) + 1;
          v252 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v251;
          *(_DWORD *)(a1 + 16) = v252;
        }
LABEL_475:
        v432 = v27;
        if (v251 > v252)
        {
          *(_DWORD *)(a1 + 16) = v252 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v252) = v27;
          v47 = *(_DWORD *)(a1 + 12);
          v48 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v251 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v251 + 1), (unint64_t)&v432);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v251) = v27;
          v47 = *(_DWORD *)(a1 + 12) + 1;
          v48 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v47;
          *(_DWORD *)(a1 + 16) = v48;
        }
        LODWORD(v49) = v27 >> 8;
LABEL_48:
        v432 = v49;
        if (v47 > v48)
        {
          *(_DWORD *)(a1 + 16) = v48 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v48) = v49;
          return v12;
        }
        v50 = v47;
        if (v47 != *(_DWORD *)(a1 + 8))
        {
          v51 = *(_QWORD *)a1;
LABEL_51:
          *(_BYTE *)(v51 + v50) = v49;
LABEL_52:
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          return v12;
        }
      }
LABEL_424:
      v217 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v432);
      v50 = *(unsigned int *)(a1 + 12);
      v51 = *(_QWORD *)a1;
      LOBYTE(v49) = *v217;
      goto LABEL_51;
    default:
      return 0;
  }
}

