__int128 *llint_stack_check(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::VM *v37;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v37 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v16 = *((_QWORD *)v10 + 6);
  v17 = (_QWORD *)a1;
  while (1)
  {
    v17 = (_QWORD *)*v17;
    if (v17 == (_QWORD *)v16)
      break;
    if (!v17)
      goto LABEL_12;
LABEL_9:
    v18 = v17[3];
    if ((v18 & 0xFFFE000000000007) != 3)
    {
      v20 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 40;
      goto LABEL_13;
    }
  }
  v19 = vmEntryRecord(v16);
  v16 = *(_QWORD *)(v19 + 16);
  v17 = *(_QWORD **)(v19 + 8);
  if (v17)
    goto LABEL_9;
LABEL_12:
  v20 = *((_QWORD *)v10 + 11321) + 8;
LABEL_13:
  v21 = *(_QWORD *)(*(_QWORD *)v20 + 96);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v21;
  *(_DWORD *)(a1 + 32) = 0;
  if (!*((_QWORD *)v10 + 11636))
  {
    __break(0xC471u);
    JUMPOUT(0x19882B134);
  }
  v22 = *((_QWORD *)v10 + 11637);
  *((_QWORD *)v10 + 11637) = dword_1ECF4C250;
  JSC::VM::updateStackLimits(v10, a2, a3, a4, a5, a6, a7, a8);
  JSC::throwStackOverflowError(v9, &v37, v23, v24, v25, v26, v27, v28);
  if (!*((_QWORD *)v10 + 11636))
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x19882B114);
  }
  *((_QWORD *)v10 + 11637) = v22;
  JSC::VM::updateStackLimits(v10, v29, v30, v31, v32, v33, v34, v35);
  return &xmmword_1ECF4C7C0;
}

uint64_t llint_default_call(JSC::CallFrame **a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  JSC::CodeBlock **v20;
  unsigned int v21;
  _BOOL8 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  unsigned int *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  JSC::Compilation *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  const void *v42;
  uint64_t (*v43)();
  uint64_t v44;
  unsigned int v45;
  JSC::JSCell *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  const void *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  JSC::Compilation *v68;
  _QWORD *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  JSC::CallFrame *v78;
  int v79;
  unsigned int *v80;
  unsigned int *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  JSC::Compilation *v91;
  unsigned int *v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;

  v8 = a2;
  v9 = (uint64_t)a1;
  v10 = *((_QWORD *)a2 + 8);
  if (!v10)
  {
    v78 = *a1;
    if ((*(_QWORD *)(*(_QWORD *)v9 + 24) & 0xFFFE000000000007) == 3)
      v10 = JSC::CallFrame::codeOwnerCellSlow(v78);
    else
      v10 = *((_QWORD *)v78 + 2);
  }
  v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v10 & 8) != 0)
    v11 = (uint64_t *)(v10 - 16);
  v12 = *v11;
  *(_QWORD *)(v12 + 40) = v9;
  JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v9 + 16) = 0;
  v20 = (JSC::CodeBlock **)(v9 + 16);
  v21 = v8[17] >> 4;
  v23 = v21 == 8 || v21 - 3 < 2;
  v24 = *(_QWORD *)(v9 + 24);
  if ((v24 & 0xFFFE000000000002) != 0)
    return JSC::handleHostCall((_QWORD *)v12, (JSC::JSCell *)v10, v9, *(_QWORD *)(v9 + 24), v8, (uint64_t)v20, v17, v18);
  v25 = *(unsigned __int8 *)(v24 + 5);
  if (v25 == 26)
  {
    v26 = *(_QWORD *)(v24 + 24);
    if ((v26 & 1) != 0)
      v26 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v27 = *(const WTF::StringImpl **)(v24 + 16);
    v28 = (unsigned int *)(v12 + 80);
    v29 = *(_DWORD *)(v12 + 80);
    if ((v29 & 0x20) == 0)
    {
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 | 0x20, v28));
    }
    v95 = v24;
    v96 = v29;
    if (*(_BYTE *)(v26 + 5) != 8)
    {
      if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v26 + 88) + 24) & 0x80000000) != 0)
        {
          v90 = JSC::CallLinkInfo::globalObjectForSlowPath((JSC::CallLinkInfo *)v8, (JSC::JSCell *)v10, v14, (uint64_t)v27, v16, (uint64_t)v20, v17, v18);
          *(_QWORD *)(v9 + 24) = *(_QWORD *)(v90 + 96);
          v42 = (const void *)JSC::throwNotAConstructorErrorFromCallIC(v90, (JSC::JSCell *)v10, (WTF::StringImpl *)v24, (JSC::CallLinkInfo *)v8);
          goto LABEL_61;
        }
        v31 = *(_QWORD *)(v26 + 16);
      }
      else
      {
        v31 = *(_QWORD *)(v26 + 8);
      }
      if (v31)
        v43 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
      else
        v43 = 0;
      if (v43)
      {
        v44 = 96;
        if (v23)
          v44 = 104;
        *v20 = *(JSC::CodeBlock **)(v26 + v44);
      }
      else
      {
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v26, v12, v24, v27, (JSC::VM *)v23, v20, v17, v18);
      }
      if (*v28)
      {
        v79 = *(_DWORD *)(v12 + 80);
        if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, (uint64_t)v27, v16, (uint64_t)v20, v17, v18);
        if (*(_QWORD *)(v12 + 16))
        {
          v42 = 0;
          goto LABEL_61;
        }
      }
      v40 = *(unsigned int **)(v9 + 16);
      if (*(int *)(v9 + 32) >= (unint64_t)v40[7])
      {
        v45 = v8[17] >> 4;
        if (v45 > 6 || ((1 << v45) & 0x54) == 0)
        {
          v46 = (JSC::JSCell *)v10;
          v47 = v8;
          v48 = v9;
          v49 = 8;
          if (v23)
            v49 = 16;
          v50 = *(unsigned int **)(v26 + v49);
          v51 = v50 + 2;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
          v42 = (const void *)(*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v50 + 40))(v50, 0);
          do
          {
            v53 = __ldaxr(v51);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v51));
          if (!v54)
          {
            atomic_store(1u, v50 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 32))(v50);
          }
          v9 = v48;
          v8 = v47;
          v10 = (unint64_t)v46;
          goto LABEL_56;
        }
      }
      if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
      {
        v59 = *(const void **)(v26 + 32);
        if (!v59)
        {
LABEL_67:
          v94 = v9;
          v60 = 8;
          if (v23)
            v60 = 16;
          v61 = *(unsigned int **)(v26 + v60);
          v62 = v61 + 2;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 + 1, v62));
          v92 = v61;
          v64 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v61 + 40))(v61, 1);
          do
          {
            v65 = __ldaxr(v62);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v62));
          if (!v66)
          {
            v81 = v92;
            atomic_store(1u, v92 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v81 + 32))(v81);
          }
          v67 = 24;
          if (v23)
            v67 = 32;
          v42 = (const void *)v64;
          *(_QWORD *)(v26 + v67) = v64;
          v9 = v94;
          goto LABEL_56;
        }
      }
      else
      {
        v59 = *(const void **)(v26 + 24);
        if (!v59)
          goto LABEL_67;
      }
      v42 = v59;
LABEL_56:
      v55 = *(unsigned __int16 *)(v8 + 17);
      v56 = (v55 >> 9) & 7;
      if (v56)
      {
        if ((v56 - 1) < 2)
        {
          LOBYTE(v29) = v96;
          if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
            JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)v8, (JSC::VM *)v12, v14, (uint64_t)v27, v95, (uint64_t)v20, v17, v18, v19);
          else
            JSC::linkPolymorphicCall((JSC::VM *)v12, (unsigned __int8 *)v10, v9, (uint64_t)v8, v95, (uint64_t)v20, v17, v18, v19);
          goto LABEL_61;
        }
      }
      else if ((v55 & 1) != 0)
      {
        JSC::linkMonomorphicCall((JSC::VM *)v12, (JSC::JSCell *)v10, (JSC::CallLinkInfoBase *)v8, (JSC::CodeBlock *)v40, v95, v42, v17, v18, v19);
      }
      else
      {
        *(_WORD *)(v8 + 17) = v55 | 1;
      }
      LOBYTE(v29) = v96;
LABEL_61:
      if ((v29 & 0x20) == 0)
      {
        do
          v57 = __ldaxr(v28);
        while (__stlxr(v57 & 0xFFFFFFDF, v28));
      }
      return (uint64_t)v42;
    }
    if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
      goto LABEL_23;
    if (&JSC::WebAssemblyFunction::s_info == (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C)))
    {
      v91 = JSC::WebAssemblyFunction::jsCallEntrypoint((JSC::WebAssemblyFunction *)v24);
      if (v91)
      {
        v68 = v91;
        goto LABEL_83;
      }
    }
    if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
    {
LABEL_23:
      v32 = *(JSC::Compilation **)(v26 + 32);
      if (!v32)
      {
LABEL_24:
        v33 = 8;
        if (v23)
          v33 = 16;
        v34 = *(unsigned int **)(v26 + v33);
        v35 = v34 + 2;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
        v93 = v34;
        v37 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v34 + 40))(v34, 1);
        do
        {
          v38 = __ldaxr(v35);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v35));
        if (!v39)
        {
          v80 = v93;
          atomic_store(1u, v93 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 32))(v80);
        }
        v40 = 0;
        v41 = 24;
        if (v23)
          v41 = 32;
        v42 = (const void *)v37;
        *(_QWORD *)(v26 + v41) = v37;
        goto LABEL_56;
      }
    }
    else
    {
      v32 = *(JSC::Compilation **)(v26 + 24);
      if (!v32)
        goto LABEL_24;
    }
    v68 = v32;
LABEL_83:
    v40 = 0;
    v42 = v68;
    goto LABEL_56;
  }
  if ((v25 - 27) > 1)
    return JSC::handleHostCall((_QWORD *)v12, (JSC::JSCell *)v10, v9, *(_QWORD *)(v9 + 24), v8, (uint64_t)v20, v17, v18);
  if (BYTE1(dword_1ECF4C240))
  {
    v69 = *(_QWORD **)(v12 + 90440);
    if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
    {
      v42 = (const void *)v69[17];
      v70 = (unsigned int *)v69[18];
      if (v70)
      {
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 + 1, v70));
        do
        {
          v72 = __ldaxr(v70);
          v73 = --v72 == 0;
        }
        while (__stlxr(v72, v70));
        goto LABEL_103;
      }
    }
    else
    {
      v42 = (const void *)v69[15];
      v70 = (unsigned int *)v69[16];
      if (v70)
      {
        do
          v74 = __ldaxr(v70);
        while (__stlxr(v74 + 1, v70));
        do
        {
          v75 = __ldaxr(v70);
          v73 = --v75 == 0;
        }
        while (__stlxr(v75, v70));
LABEL_103:
        if (v73)
        {
          atomic_store(1u, v70);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v70, v13, v14, v15, v16, (uint64_t)v20, v17, v18);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
      }
    }
  }
  else if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
  {
    v42 = (const void *)qword_1ECF53240;
  }
  else
  {
    v42 = (const void *)qword_1ECF53238;
  }
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x19882B7E4);
  }
  v76 = *(unsigned __int16 *)(v8 + 17);
  v77 = (v76 >> 9) & 7;
  if (v77)
  {
    if ((v77 - 1) < 2)
    {
      if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
        JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)v8, (JSC::VM *)v12, v14, v15, v16, (uint64_t)v20, v17, v18, v19);
      else
        JSC::linkPolymorphicCall((JSC::VM *)v12, (unsigned __int8 *)v10, v9, (uint64_t)v8, v24, (uint64_t)v20, v17, v18, v19);
    }
  }
  else if ((v76 & 1) != 0)
  {
    JSC::linkMonomorphicCall((JSC::VM *)v12, (JSC::JSCell *)v10, (JSC::CallLinkInfoBase *)v8, 0, v24, v42, v17, v18, v19);
  }
  else
  {
    *(_WORD *)(v8 + 17) = v76 | 1;
  }
  return (uint64_t)v42;
}

uint64_t llint_virtual_call(JSC::CodeBlock **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::CodeBlock **v19;
  unsigned int v20;
  _BOOL8 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::CallFrame *v58;
  int v59;
  unint64_t v60;

  v10 = *(_QWORD *)(a2 + 64);
  if (!v10)
  {
    v58 = *a1;
    if ((*((_QWORD *)*a1 + 3) & 0xFFFE000000000007) == 3)
      v10 = JSC::CallFrame::codeOwnerCellSlow(v58);
    else
      v10 = *((_QWORD *)v58 + 2);
  }
  v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v10 & 8) != 0)
    v11 = (uint64_t *)(v10 - 16);
  v12 = *v11;
  *(_QWORD *)(v12 + 40) = a1;
  JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  a1[2] = 0;
  v19 = a1 + 2;
  v20 = *(unsigned __int8 *)(a2 + 17) >> 4;
  v22 = v20 == 8 || v20 - 3 < 2;
  v23 = (uint64_t)a1[3];
  if ((v23 & 0xFFFE000000000002) != 0)
    return JSC::handleHostCall((_QWORD *)v12, (JSC::JSCell *)v10, (uint64_t)a1, (unint64_t)a1[3], (unsigned __int8 *)a2, (uint64_t)v19, v17, v18);
  v24 = *(unsigned __int8 *)(v23 + 5);
  if (v24 == 26)
  {
    v25 = *(_QWORD *)(v23 + 24);
    if ((v25 & 1) != 0)
      v25 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v26 = *(const WTF::StringImpl **)(v23 + 16);
    v27 = (unsigned int *)(v12 + 80);
    v28 = *(_DWORD *)(v12 + 80);
    if ((v28 & 0x20) == 0)
    {
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 | 0x20, v27));
    }
    if (*(_BYTE *)(v25 + 5) != 8)
    {
      if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v25 + 88) + 24) & 0x80000000) != 0)
        {
          v60 = JSC::CallLinkInfo::globalObjectForSlowPath((JSC::CallLinkInfo *)a2, (JSC::JSCell *)v10, v14, (uint64_t)v26, v16, (uint64_t)v19, v17, v18);
          a1[3] = *(JSC::CodeBlock **)(v60 + 96);
          v33 = JSC::throwNotAConstructorErrorFromCallIC(v60, (JSC::JSCell *)v10, (WTF::StringImpl *)v23, (JSC::CallLinkInfo *)a2);
LABEL_45:
          if ((v28 & 0x20) == 0)
          {
            do
              v41 = __ldaxr(v27);
            while (__stlxr(v41 & 0xFFFFFFDF, v27));
          }
          return v33;
        }
        v30 = *(_QWORD *)(v25 + 16);
      }
      else
      {
        v30 = *(_QWORD *)(v25 + 8);
      }
      if (v30)
        v31 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
      else
        v31 = 0;
      if (v31)
      {
        v32 = 96;
        if (v22)
          v32 = 104;
        *v19 = *(JSC::CodeBlock **)(v25 + v32);
      }
      else
      {
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v25, v12, v23, v26, (JSC::VM *)v22, v19, v17, v18);
      }
      if (*v27)
      {
        v59 = *(_DWORD *)(v12 + 80);
        if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, (uint64_t)v26, v16, (uint64_t)v19, v17, v18);
        if (*(_QWORD *)(v12 + 16))
        {
          v33 = 0;
          goto LABEL_45;
        }
      }
    }
    if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
    {
      v33 = *(_QWORD *)(v25 + 32);
      if (v33)
        goto LABEL_45;
    }
    else
    {
      v33 = *(_QWORD *)(v25 + 24);
      if (v33)
        goto LABEL_45;
    }
    v34 = 8;
    if (v22)
      v34 = 16;
    v35 = *(unsigned int **)(v25 + v34);
    v36 = v35 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    v33 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v35 + 40))(v35, 1);
    do
    {
      v38 = __ldaxr(v36);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v36));
    if (!v39)
    {
      atomic_store(1u, v35 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 32))(v35);
    }
    v40 = 24;
    if (v22)
      v40 = 32;
    *(_QWORD *)(v25 + v40) = v33;
    goto LABEL_45;
  }
  if ((v24 - 27) > 1)
    return JSC::handleHostCall((_QWORD *)v12, (JSC::JSCell *)v10, (uint64_t)a1, (unint64_t)a1[3], (unsigned __int8 *)a2, (uint64_t)v19, v17, v18);
  if (BYTE1(dword_1ECF4C240))
  {
    v43 = *(_QWORD **)(v12 + 90440);
    if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
    {
      v33 = v43[17];
      v44 = (unsigned int *)v43[18];
      if (!v44)
        return v33;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
      do
      {
        v46 = __ldaxr(v44);
        v47 = --v46 == 0;
      }
      while (__stlxr(v46, v44));
    }
    else
    {
      v33 = v43[15];
      v44 = (unsigned int *)v43[16];
      if (!v44)
        return v33;
      do
        v48 = __ldaxr(v44);
      while (__stlxr(v48 + 1, v44));
      do
      {
        v49 = __ldaxr(v44);
        v47 = --v49 == 0;
      }
      while (__stlxr(v49, v44));
    }
    if (v47)
    {
      atomic_store(1u, v44);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v44, v13, v14, v15, v16, (uint64_t)v19, v17, v18);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  else if (v20 <= 8 && ((1 << v20) & 0x118) != 0)
  {
    return qword_1ECF53240;
  }
  else
  {
    return qword_1ECF53238;
  }
  return v33;
}

uint64_t llint_polymorphic_call(JSC::CodeBlock **a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  JSC::CodeBlock **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  JSC::CodeBlock **v20;
  unsigned int v21;
  _BOOL8 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const WTF::StringImpl *v27;
  unsigned int *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  JSC::CallFrame *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::CodeBlock **v62;
  unsigned __int8 *v63;

  v8 = a2;
  v9 = a1;
  v10 = *((_QWORD *)a2 + 8);
  if (!v10)
  {
    v51 = *a1;
    if ((*((_QWORD *)*v9 + 3) & 0xFFFE000000000007) == 3)
      v10 = JSC::CallFrame::codeOwnerCellSlow(v51);
    else
      v10 = *((_QWORD *)v51 + 2);
  }
  v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v10 & 8) != 0)
    v11 = (uint64_t *)(v10 - 16);
  v12 = *v11;
  *(_QWORD *)(v12 + 40) = v9;
  JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  v9[2] = 0;
  v20 = v9 + 2;
  v21 = v8[17] >> 4;
  v23 = v21 == 8 || v21 - 3 < 2;
  v24 = (uint64_t)v9[3];
  if ((v24 & 0xFFFE000000000002) != 0)
    goto LABEL_71;
  v25 = *(unsigned __int8 *)(v24 + 5);
  if (v25 != 26)
  {
    if ((v25 - 27) <= 1)
    {
      if (BYTE1(dword_1ECF4C240))
      {
        v44 = *(_QWORD **)(v12 + 90440);
        if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
        {
          v34 = v44[17];
          v45 = (unsigned int *)v44[18];
          if (v45)
          {
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 + 1, v45));
            do
            {
              v47 = __ldaxr(v45);
              v48 = --v47 == 0;
            }
            while (__stlxr(v47, v45));
            goto LABEL_62;
          }
        }
        else
        {
          v34 = v44[15];
          v45 = (unsigned int *)v44[16];
          if (v45)
          {
            do
              v49 = __ldaxr(v45);
            while (__stlxr(v49 + 1, v45));
            do
            {
              v50 = __ldaxr(v45);
              v48 = --v50 == 0;
            }
            while (__stlxr(v50, v45));
LABEL_62:
            if (v48)
            {
              atomic_store(1u, v45);
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, v13, v14, v15, v16, (uint64_t)v20, v17, v18);
              WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
            }
          }
        }
      }
      else if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
      {
        v34 = qword_1ECF53240;
      }
      else
      {
        v34 = qword_1ECF53238;
      }
LABEL_64:
      v24 = 0;
      goto LABEL_47;
    }
LABEL_71:
    v34 = JSC::handleHostCall((_QWORD *)v12, (JSC::JSCell *)v10, (uint64_t)v9, (unint64_t)v9[3], v8, (uint64_t)v20, v17, v18);
    goto LABEL_64;
  }
  v26 = *(_QWORD *)(v24 + 24);
  if ((v26 & 1) != 0)
    v26 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v27 = *(const WTF::StringImpl **)(v24 + 16);
  v28 = (unsigned int *)(v12 + 80);
  v29 = *(_DWORD *)(v12 + 80);
  if ((v29 & 0x20) == 0)
  {
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 | 0x20, v28));
  }
  if (*(_BYTE *)(v26 + 5) == 8)
    goto LABEL_30;
  if (v21 > 8 || ((1 << v21) & 0x118) == 0)
  {
    v31 = *(_QWORD *)(v26 + 8);
LABEL_22:
    if (v31)
      v32 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
    else
      v32 = 0;
    if (v32)
    {
      v33 = 96;
      if (v23)
        v33 = 104;
      *v20 = *(JSC::CodeBlock **)(v26 + v33);
    }
    else
    {
      JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v26, v12, v24, v27, (JSC::VM *)v23, v20, v17, v18);
    }
    if (*v28)
    {
      v52 = *(_DWORD *)(v12 + 80);
      if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, (uint64_t)v27, v16, (uint64_t)v20, v17, v18);
      if (*(_QWORD *)(v12 + 16))
      {
        v34 = 0;
        goto LABEL_45;
      }
    }
LABEL_30:
    if (v21 <= 8 && ((1 << v21) & 0x118) != 0)
    {
      v34 = *(_QWORD *)(v26 + 32);
      if (v34)
        goto LABEL_45;
    }
    else
    {
      v34 = *(_QWORD *)(v26 + 24);
      if (v34)
        goto LABEL_45;
    }
    v62 = v9;
    v63 = v8;
    v35 = 8;
    if (v23)
      v35 = 16;
    v36 = *(unsigned int **)(v26 + v35);
    v37 = v36 + 2;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
    v34 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v36 + 40))(v36, 1);
    do
    {
      v39 = __ldaxr(v37);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v37));
    if (!v40)
    {
      atomic_store(1u, v36 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 32))(v36);
    }
    v41 = 24;
    if (v23)
      v41 = 32;
    *(_QWORD *)(v26 + v41) = v34;
    v9 = v62;
    v8 = v63;
    goto LABEL_45;
  }
  if ((*(_DWORD *)(*(_QWORD *)(v26 + 88) + 24) & 0x80000000) == 0)
  {
    v31 = *(_QWORD *)(v26 + 16);
    goto LABEL_22;
  }
  v53 = JSC::CallLinkInfo::globalObjectForSlowPath((JSC::CallLinkInfo *)v8, (JSC::JSCell *)v10, v14, (uint64_t)v27, v16, (uint64_t)v20, v17, v18);
  v9[3] = *(JSC::CodeBlock **)(v53 + 96);
  v34 = JSC::throwNotAConstructorErrorFromCallIC(v53, (JSC::JSCell *)v10, (WTF::StringImpl *)v24, (JSC::CallLinkInfo *)v8);
LABEL_45:
  if ((v29 & 0x20) == 0)
  {
    do
      v42 = __ldaxr(v28);
    while (__stlxr(v42 & 0xFFFFFFDF, v28));
  }
LABEL_47:
  if (!*(_QWORD *)(v12 + 16))
    JSC::linkPolymorphicCall((JSC::VM *)v12, (unsigned __int8 *)v10, (uint64_t)v9, (uint64_t)v8, v24, (uint64_t)v20, v17, v18, v19);
  return v34;
}

__int128 *llint_slow_path_new_object(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t SlowCase;
  uint64_t v40;
  uint64_t Slow;
  uint64_t v42;
  JSC::VM *v43;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = v8[1];
  v10 = v8[9];
  *(_QWORD *)(v10 + 40) = a1;
  v43 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x19882C244);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v18 = *((__int16 *)a2 + 1);
    if (v18 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v18 + 1073741760;
    v20 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v30 = (char)a2[1];
    if (v30 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v30 + 1073741808;
    v20 = a2[3];
  }
  v21 = v8[17];
  v22 = *(unsigned __int16 *)(v21 + 58);
  if (!*(_WORD *)(v21 + 58))
    v22 = *(_DWORD *)(v21 + 212);
  v23 = *(_QWORD *)(((v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v20 + 8);
  v24 = (JSC::VM *)(8 * *(unsigned __int8 *)(v23 + 14));
  v25 = *(_QWORD *)(v10 + ((((unint64_t)v24 + 31) >> 1) & 0x7F8) + 15024);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 + 60);
    v27 = *(_QWORD *)(v25 + 24);
    if (v27 < *(_QWORD *)(v25 + 32))
    {
LABEL_15:
      *(_QWORD *)(v25 + 24) = v27 + v26;
      goto LABEL_16;
    }
    v27 = *(_QWORD *)(v25 + 40);
    if ((v27 & 1) == 0)
    {
      v31 = *(_QWORD *)(v27 + 8) ^ *(_QWORD *)(v25 + 48);
      *(_QWORD *)(v25 + 32) = v27 + HIDWORD(v31);
      *(_QWORD *)(v25 + 40) = v27 + (int)v31;
      goto LABEL_15;
    }
    v32 = *(_QWORD *)(v10 + ((((unint64_t)v24 + 31) >> 1) & 0x7F8) + 15024);
    v42 = 8 * *(unsigned __int8 *)(v23 + 14);
    v33 = v23;
    v34 = *(unsigned int *)(v25 + 60);
    JSC::sanitizeStackForVM((JSC *)v10, v24, a3, a4, a5, a6, a7, a8);
    v35 = v34;
    v23 = v33;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v32, v10 + 192, v35, 0, 0, v36, v37, v38);
    v24 = (JSC::VM *)v42;
    v27 = SlowCase;
  }
  else
  {
    v40 = 8 * *(unsigned __int8 *)(v23 + 14);
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, ((_WORD)v24 + 31) & 0xFF0, 0, a5, a6, a7, a8);
    v24 = (JSC::VM *)v40;
    v27 = Slow;
    if (!Slow)
      goto LABEL_34;
  }
LABEL_16:
  *(_DWORD *)v27 = 0;
  v28 = *(_DWORD *)(v23 + 8);
  *(_DWORD *)v27 = v23 >> 4;
  *(_DWORD *)(v27 + 4) = v28;
  *(_QWORD *)(v27 + 8) = 0;
  bzero((void *)(v27 + 16), (size_t)v24);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v43, "LLIntSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v27;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_new_array(uint64_t a1, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  int v28;
  JSC::VM *v29;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v29 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19882C494);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v28 = *((__int16 *)a2 + 1);
    if (v28 <= 63)
      v20 = *((__int16 *)a2 + 1);
    else
      v20 = v28 + 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((unsigned __int16 *)a2 + 3);
    v23 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v18 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v21 = *(_DWORD *)(a2 + 6);
    v22 = *(unsigned int *)(a2 + 10);
    v23 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
      v20 = (char)a2[1];
    else
      v20 = v19 + 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = a2[3];
    v23 = a2[5];
  }
  v24 = v9[17];
  v25 = *(unsigned __int16 *)(v24 + 60);
  if (!*(_WORD *)(v24 + 60))
    v25 = *(_DWORD *)(v24 + 216);
  v26 = JSC::constructArrayNegativeIndexed(v10, ((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v23, (JSC::ExecutableBase *)(a1 + 8 * v21), v22, 0, a7, a8, a9, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v29, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v20) = v26;
  return (__int128 *)v16;
}

unint64_t JSC::constructArrayNegativeIndexed(unint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t i;
  char **v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  JSC::FunctionRareData *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t SlowCase;
  unint64_t v49;
  unsigned int *v50;
  _DWORD *v51;
  void *v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  double v65;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t OutOfMemoryError;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  JSC::Exception *v100;
  unint64_t v102;
  unint64_t v103;
  JSC::VM *v104;
  unint64_t v105;
  unint64_t InternalFunctionAllocationStructureFromBase;
  int v107;
  JSC::FunctionRareData *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  JSC::FunctionRareData *v116;
  JSC::VM *v117;
  uint64_t v118;
  JSC::FunctionRareData *v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  int v126;
  unint64_t *v127;
  JSC::VM *v128;

  v10 = a4;
  v127 = (unint64_t *)a3;
  v11 = a2;
  v13 = *(_QWORD *)(a1 + 56);
  if (a2)
  {
    v14 = *(_QWORD *)a2;
    v15 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFLL;
    if (v15)
    {
      v16 = *(_BYTE *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFLL) + 4);
      v17 = HIBYTE(v14);
      if ((v16 & 0xF) != HIBYTE(v14))
      {
        *(_QWORD *)a2 = v14 & 0xFFFF000000000000;
        if (byte_1ECF4C722)
        {
          v72 = HIWORD(v14);
          v73 = HIBYTE(v14) & 0xF;
          if (v73 <= (v16 & 0xFu))
            LODWORD(v73) = v16 & 0xF;
          if (v73 >= 0xA)
            v74 = 9;
          else
            v74 = v73;
          v75 = v74 | 0x10;
          if ((v17 & 0x10) != 0)
            LODWORD(v73) = v75;
          if ((v16 & 0xE) != 0)
            v76 = *(_DWORD *)(*(_QWORD *)(v15 + 8) - 4);
          else
            v76 = 0;
          if (v72 > v76)
            v76 = v72;
          if (v76 >= 0x19)
            v76 = 25;
          v14 = (unint64_t)(v76 | ((_DWORD)v73 << 8)) << 48;
          *(_QWORD *)a2 = v14;
        }
        else
        {
          v14 &= 0xFFFF000000000000;
        }
      }
    }
    v18 = HIBYTE(v14);
    if (!a5)
    {
LABEL_7:
      v19 = (v18 >> 1) & 7;
      if ((v18 & 0x10) != 0)
        v19 = ((v18 & 0xE) + 10) >> 1;
      v20 = *(_DWORD *)(a1 + 4 * v19 + 892);
      if (v20)
        v21 = 16 * (v20 & 0xFFFFFFFE);
      else
        v21 = 0;
      if (!*(_DWORD *)(v13 + 80))
        goto LABEL_42;
      goto LABEL_137;
    }
  }
  else
  {
    LODWORD(v18) = 3;
    if (!a5)
      goto LABEL_7;
  }
  if (*(_QWORD *)(a1 + 232) == a5)
    goto LABEL_7;
  v128 = (JSC::VM *)v13;
  for (i = a5; ; i = *(_QWORD *)(i + 16))
  {
    while (1)
    {
      v23 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
      if (v23 != &JSC::JSBoundFunction::s_info && v23 != &JSC::JSRemoteFunction::s_info)
        break;
      i = *(_QWORD *)(i + 32);
    }
    if (*(_BYTE *)(i + 5) != 61)
    {
      v24 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
      goto LABEL_20;
    }
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)i))
      break;
  }
  JSC::throwTypeError(a1, &v128, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v24 = 0;
LABEL_20:
  if (*(_DWORD *)(v13 + 80))
  {
    v107 = *(_DWORD *)(v13 + 80);
    if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_181;
  }
  v25 = (v18 >> 1) & 7;
  if ((v18 & 0x10) != 0)
    v25 = ((v18 & 0xE) + 10) >> 1;
  v26 = *(_DWORD *)(v24 + 4 * v25 + 892);
  v27 = 16 * (v26 & 0xFFFFFFFE);
  if (v26)
    v28 = 16 * (v26 & 0xFFFFFFFE);
  else
    v28 = 0;
  v29 = *(JSC::FunctionRareData **)(a1 + 56);
  v30 = *(_QWORD **)(v28 + 40);
  if (*(_BYTE *)(a5 + 5) != 26)
    goto LABEL_216;
  a2 = *(_QWORD *)(a5 + 24);
  if ((a2 & 1) != 0)
  {
    v67 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v67 + 5) == 8)
      goto LABEL_216;
    v31 = *(_QWORD *)(v67 + 88);
  }
  else
  {
    if (*(_BYTE *)(a2 + 5) == 8)
      goto LABEL_216;
    v31 = *(_QWORD *)(a2 + 88);
  }
  if ((*(_DWORD *)(v31 + 16) & 0x80000000) != 0)
  {
    v116 = *(JSC::FunctionRareData **)(a1 + 56);
    v117 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28) + 56);
    LODWORD(v128) = 0;
    JSC::JSObject::getDirect((_DWORD *)a5, v117, *(_QWORD *)(*((_QWORD *)v117 + 5244) + 2160), (const JSC::PropertyTable *)&v128, a5, a6, a7, a8);
    if (!v118 || (v128 & 0x70) != 0)
    {
      v29 = v116;
      goto LABEL_216;
    }
    a2 = *(_QWORD *)(a5 + 24);
    v29 = v116;
  }
  if ((a2 & 1) != 0)
    v32 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 48);
  else
    v32 = a2;
  v33 = *(_QWORD *)(v32 + 88);
  if (((1 << *(_BYTE *)(v33 + 50)) & 0x78007) != 0 || (v34 = *(_QWORD **)(v33 + 88)) != 0 && *v34)
  {
    if ((a2 & 1) != 0)
    {
      v35 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v108 = v29;
      v35 = JSC::FunctionRareData::create(v29, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      __dmb(0xAu);
      *(_QWORD *)(a5 + 24) = v35 | 1;
      if (v35 && *((_DWORD *)v108 + 190) >= *(unsigned __int8 *)(a5 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v108 + 192, a5);
      v29 = v108;
    }
    v36 = *(_DWORD *)(v35 + 40) & 0xFFFFFFFE;
    if ((_DWORD)v36)
    {
      v21 = 16 * v36;
      if (16 * *(unsigned int *)(16 * v36 + 0x4C) == 16 * *(unsigned int *)(v28 + 76)
        && *(_QWORD **)(16 * v36 + 0x28) == v30)
      {
        goto LABEL_41;
      }
    }
    v104 = v29;
    v105 = JSC::JSObject::get((unsigned int *)a5, a1, *(_QWORD *)(*((_QWORD *)v29 + 5244) + 2160), a4, a5, a6, a7, a8);
    if ((v105 & 0xFFFE000000000002) != 0 || (a4 = v105, *(unsigned __int8 *)(v105 + 5) < 0x17u))
    {
      v21 = v27;
      goto LABEL_41;
    }
    InternalFunctionAllocationStructureFromBase = JSC::FunctionRareData::createInternalFunctionAllocationStructureFromBase((JSC::FunctionRareData *)v35, v104, (JSC::JSGlobalObject *)v30, (JSC::JSObject *)v105, (JSC::Structure *)v28, a9);
LABEL_221:
    v21 = InternalFunctionAllocationStructureFromBase;
    goto LABEL_41;
  }
LABEL_216:
  v119 = v29;
  v120 = JSC::JSObject::get((unsigned int *)a5, a1, *(_QWORD *)(*((_QWORD *)v29 + 5244) + 2160), a4, a5, a6, a7, a8);
  if (*((_DWORD *)v119 + 20))
  {
    v121 = *((_DWORD *)v119 + 20);
    if ((v121 & 0x27) != 0 && (v121 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::FunctionRareData *)((char *)v119 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v119 + 2))
    {
LABEL_181:
      v21 = 0;
      goto LABEL_41;
    }
  }
  v21 = v27;
  if (*(_BYTE *)(v30[256] + 4) == 2)
  {
    v122 = *(unsigned __int8 *)(v28 + 8);
    v123 = (v122 >> 1) & 7;
    if ((v122 & 0x10) != 0)
      v123 = ((v122 & 0xE) + 10) >> 1;
    v124 = *((_DWORD *)v30 + v123 + 213);
    if (v124)
      v125 = 16 * (v124 & 0xFFFFFFFE);
    else
      v125 = 0;
    v21 = v27;
    if (v125 == v28)
    {
      v126 = *((_DWORD *)v30 + ((v122 >> 1) & 7) + 223);
      if (v126)
        v21 = 16 * (v126 & 0xFFFFFFFE);
      else
        v21 = 0;
    }
  }
  if ((v120 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v120 + 5) >= 0x17u)
  {
    InternalFunctionAllocationStructureFromBase = JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::StructureCache *)(v30 + 246), (JSC::JSGlobalObject *)v30, (JSC::JSObject *)v120, (JSC::Structure *)v21, a9);
    goto LABEL_221;
  }
LABEL_41:
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_42;
LABEL_137:
  v81 = *(_DWORD *)(v13 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v13 + 16))
    return 0;
LABEL_42:
  v37 = *(_QWORD *)(a1 + 56);
  if (v10 > 0x10000000)
    goto LABEL_158;
  v38 = *(unsigned __int16 *)(v21 + 24);
  if (v38 == 65534
    || (v38 == 0xFFFF ? (v39 = *(_DWORD *)(*(_QWORD *)(v21 + 64) + 84)) : (v39 = *(unsigned __int16 *)(v21 + 24)),
        v39 < 64))
  {
    v40 = 0;
  }
  else if ((v39 - 63) >= 5)
  {
    v68 = (v39 - 64) | ((v39 - 64) >> 1) | (((v39 - 64) | ((v39 - 64) >> 1)) >> 2);
    v69 = v68 | (v68 >> 4) | ((v68 | (v68 >> 4)) >> 8);
    v40 = (v69 | HIWORD(v69)) + 1;
  }
  else
  {
    v40 = 4;
  }
  v41 = *(_BYTE *)(v21 + 8) & 0xE;
  if (v41 > 9)
  {
    if (v38 == 65534)
      goto LABEL_144;
    if (v38 == 0xFFFF)
      v38 = *(_DWORD *)(*(_QWORD *)(v21 + 64) + 84);
    if (v38 < 64)
    {
LABEL_144:
      v82 = 0;
    }
    else if ((v38 - 63) >= 5)
    {
      v113 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
      v114 = v113 | (v113 >> 4) | ((v113 | (v113 >> 4)) >> 8);
      v82 = (v114 | HIWORD(v114)) + 1;
    }
    else
    {
      v82 = 4;
    }
    if (v10 <= 4)
      v83 = 4;
    else
      v83 = v10;
    v84 = v82 + v83;
    v85 = 8 * (v82 + v83);
    if (v84 > 7)
    {
      if (v84 > 0x3E9)
        v86 = v85 + 24;
      else
        v86 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                              + (((unint64_t)(v85 + 39) >> 2) & 0x7FFFFFFFCLL));
    }
    else
    {
      v86 = (v85 + 39) & 0x1FFFFFFFF0;
    }
    v87 = v86 - 8 * v82 + 0x7FFFFFFE8;
    v88 = (v87 >> 3);
    v89 = v88 + v40;
    v90 = 8 * v89;
    if (v89 <= 0x3E9 && (v91 = *(_QWORD *)(v37 + (((unint64_t)(v90 + 39) >> 1) & 0xFFFFFFFF8) + 6736)) != 0)
    {
      v92 = *(unsigned int *)(v91 + 60);
      SlowCase = *(_QWORD *)(v91 + 24);
      if (SlowCase >= *(_QWORD *)(v91 + 32))
      {
        SlowCase = *(_QWORD *)(v91 + 40);
        if ((SlowCase & 1) == 0)
        {
          v115 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v91 + 48);
          *(_QWORD *)(v91 + 32) = SlowCase + HIDWORD(v115);
          *(_QWORD *)(v91 + 40) = SlowCase + (int)v115;
          *(_QWORD *)(v91 + 24) = SlowCase + v92;
          goto LABEL_155;
        }
        JSC::sanitizeStackForVM((JSC *)v37, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v91, v37 + 192, v92, 0, 1);
      }
      else
      {
        *(_QWORD *)(v91 + 24) = SlowCase + v92;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v37 + 6648, *(JSC **)(a1 + 56), v90 + 24, 0, a5, a6, a7, a8);
    }
    if (!SlowCase)
      goto LABEL_158;
LABEL_155:
    v49 = v87 >> 3;
    if ((v87 >> 3) >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x19882CF38);
    }
    v93 = SlowCase + 8 * v40;
    *(_QWORD *)v93 = v10 | (unint64_t)(v88 << 32);
    *(_QWORD *)(v93 + 8) = 0;
    v51 = (_DWORD *)(v93 + 8);
    *(_DWORD *)(v93 + 16) = 0;
    *(_DWORD *)(v93 + 20) = v10;
    if (v49 > v10)
    {
      v52 = (void *)(SlowCase + 8 * (v40 + (unint64_t)v10) + 24);
LABEL_70:
      bzero(v52, 8 * (v49 + ~v10) + 8);
    }
LABEL_71:
    v53 = *(_QWORD *)(v37 + 37584);
    if (v53 >= *(_QWORD *)(v37 + 37592))
    {
      v53 = *(_QWORD *)(v37 + 37600);
      if ((v53 & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v37, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v37 + 37560, v37 + 192, 16, 0, 0);
        v53 = SlowCase;
LABEL_73:
        *(_DWORD *)v53 = 0;
        v54 = *(_DWORD *)(v21 + 8);
        *(_DWORD *)v53 = v21 >> 4;
        *(_DWORD *)(v53 + 4) = v54;
        *(_QWORD *)(v53 + 8) = v51;
        if (*(_BYTE *)(v37 + 755))
          __dmb(0xAu);
        v55 = *(unsigned __int8 *)(v21 + 8);
        if ((v55 & 0x10) != 0)
          v56 = ((v55 & 0xE) + 10) >> 1;
        else
          v56 = (v55 >> 1) & 7;
        v57 = *(_DWORD *)(*(_QWORD *)(v21 + 40) + 4 * v56 + 852);
        if (v57)
          v58 = 16 * (v57 & 0xFFFFFFFE);
        else
          v58 = 0;
        if (v58 != v21)
          JSC::JSArray::eagerlyInitializeButterfly(SlowCase, v53, v10);
        if (v10)
        {
          v59 = 0;
          v60 = 0;
          v61 = 8 * v10;
          while (1)
          {
            v62 = *v127--;
            v63 = *(_QWORD *)(v53 + 8);
            switch(*(_BYTE *)(v53 + 4) & 0xF)
            {
              case 3:
                JSC::JSObject::convertUndecidedForValue(v53, (JSC::VM *)v37, v62, a4, a5, a6, a7, a8, a9);
                JSC::JSObject::setIndexQuickly(v53, (JSC::VM *)v37, v60, v62, v77, v78, v79, v80);
                goto LABEL_91;
              case 4:
              case 5:
                if (v62 > 0xFFFDFFFFFFFFFFFFLL)
                  goto LABEL_86;
                *(_QWORD *)&v65 = v62 - 0x2000000000000;
                if (v62 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL || BYTE1(dword_1ECF4C5C0) == 0)
                  JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v53, (JSC::VM *)v37, (uint64_t)a3, a4, a5, a6, a7, a8, v65);
                else
                  JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v53, (JSC::VM *)v37, (uint64_t)a3, a4, a5, a6, a7, a8, v65);
                JSC::JSObject::setIndexQuickly(v53, (JSC::VM *)v37, v60, v62, v109, v110, v111, v112);
                goto LABEL_91;
              case 6:
              case 7:
                if (v62 >> 49)
                {
                  a9 = (double)(int)v62;
                  if (v62 <= 0xFFFDFFFFFFFFFFFFLL)
                    *(_QWORD *)&a9 = v62 - 0x2000000000000;
                  *(double *)(v63 + v59) = a9;
                  v60 = (v60 + 1);
                  v59 += 8;
                  if (v61 == v59)
                    goto LABEL_161;
                }
                else
                {
                  JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v53, (JSC::VM *)v37, v60, v62, a5, a6, a7, a8, a9);
LABEL_91:
                  v60 = (v60 + 1);
                  v59 += 8;
                  if (v61 == v59)
                    goto LABEL_161;
                }
                break;
              case 8:
              case 9:
LABEL_86:
                *(_QWORD *)(v63 + v59) = v62;
                goto LABEL_87;
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
                *(_QWORD *)(v63 + v59 + 16) = v62;
LABEL_87:
                if (v62)
                  v64 = (v62 & 0xFFFE000000000002) == 0;
                else
                  v64 = 0;
                if (v64 && *(_DWORD *)(v37 + 760) >= *(unsigned __int8 *)(v53 + 7))
                  JSC::Heap::writeBarrierSlowPath(v37 + 192, v53);
                goto LABEL_91;
              default:
                __break(0xC471u);
                JUMPOUT(0x19882CFF0);
            }
          }
        }
        goto LABEL_161;
      }
      v102 = *(_QWORD *)(v53 + 8) ^ *(_QWORD *)(v37 + 37608);
      *(_QWORD *)(v37 + 37592) = v53 + HIDWORD(v102);
      *(_QWORD *)(v37 + 37600) = v53 + (int)v102;
    }
    *(_QWORD *)(v37 + 37584) = v53 + 16;
    goto LABEL_73;
  }
  if (v38 == 65534)
    goto LABEL_53;
  if (v38 == 0xFFFF)
    v38 = *(_DWORD *)(*(_QWORD *)(v21 + 64) + 84);
  if (v38 < 64)
  {
LABEL_53:
    v42 = 8;
  }
  else if ((v38 - 63) >= 5)
  {
    v70 = (v38 - 64) | ((v38 - 64) >> 1) | (((v38 - 64) | ((v38 - 64) >> 1)) >> 2);
    v71 = v70 | (v70 >> 4) | ((v70 | (v70 >> 4)) >> 8);
    v42 = 8 * ((v71 | HIWORD(v71)) + 1) + 8;
  }
  else
  {
    v42 = 40;
  }
  if (v10 <= 3)
    v43 = 3;
  else
    v43 = v10;
  if (!v10)
    v43 = 5;
  v44 = v42 + 8 * v43;
  if (v44 > 0x50)
  {
    if (v44 <= 0x1F60)
      v44 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v44 + 15) >> 2) & 0xFFFFFFFFCLL));
  }
  else
  {
    v44 = (v44 + 15) & 0x3FFFFFFFF0;
  }
  v45 = v44 - v42;
  a3 = (JSC::ExecutableBase *)(((v44 - v42) & 0x7FFFFFFF8) + 8 * v40 + 8);
  if ((unint64_t)a3 <= 0x1F60
    && (v46 = *(_QWORD *)(v37 + (((((v44 - v42) & 0x7FFFFFFF8) + 8 * v40 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v47 = *(unsigned int *)(v46 + 60);
    SlowCase = *(_QWORD *)(v46 + 24);
    if (SlowCase >= *(_QWORD *)(v46 + 32))
    {
      SlowCase = *(_QWORD *)(v46 + 40);
      if ((SlowCase & 1) == 0)
      {
        v103 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v46 + 48);
        *(_QWORD *)(v46 + 32) = SlowCase + HIDWORD(v103);
        *(_QWORD *)(v46 + 40) = SlowCase + (int)v103;
        *(_QWORD *)(v46 + 24) = SlowCase + v47;
        goto LABEL_66;
      }
      JSC::sanitizeStackForVM((JSC *)v37, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v46, v37 + 192, v47, 0, 1);
    }
    else
    {
      *(_QWORD *)(v46 + 24) = SlowCase + v47;
    }
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v37 + 6648, *(JSC **)(a1 + 56), (unint64_t)a3, 0, a5, a6, a7, a8);
  }
  if (SlowCase)
  {
LABEL_66:
    v49 = v45 >> 3;
    if ((v45 >> 3) >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x19882CD2CLL);
    }
    v50 = (unsigned int *)(SlowCase + 8 * v40);
    v51 = v50 + 2;
    *v50 = v10;
    v50[1] = v49;
    if (v41 != 6)
    {
      if (v49 <= v10)
        goto LABEL_71;
      v52 = (void *)(SlowCase + 8 * (v40 + (unint64_t)v10) + 8);
      goto LABEL_70;
    }
    if (v49 > v10)
      memset_pattern16((void *)(SlowCase + 8 * (v40 + (unint64_t)v10) + 8), &memset_pattern_263, 8 * (v49 + ~v10) + 8);
    goto LABEL_71;
  }
LABEL_158:
  OutOfMemoryError = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)a2);
  v100 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v100 = (JSC::Exception *)JSC::Exception::create(v37, (JSC::VM *)OutOfMemoryError, 0, v95, v96, v97, v98, v99);
  }
  JSC::VM::throwException((JSC::VM *)v37, (JSC::JSGlobalObject *)a1, v100);
  v53 = 0;
LABEL_161:
  if (*(_BYTE *)(v37 + 755))
    __dmb(0xAu);
  if (v11 && v53)
    *(_QWORD *)v11 = v53 | ((unint64_t)*(unsigned __int16 *)(v11 + 6) << 48);
  return v53;
}

__int128 *llint_slow_path_new_array_with_size(uint64_t a1, unsigned __int8 *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v30;
  int v31;
  int v32;
  JSC::VM *v33;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v33 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x19882D3E8);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v31 = *((__int16 *)a2 + 1);
    if (v31 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v31 + 1073741760;
    v32 = *((__int16 *)a2 + 2);
    v23 = v32 + 1073741760;
    if (v32 <= 63)
      v23 = *((__int16 *)a2 + 2);
    v24 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v19 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v23 = *(_DWORD *)(a2 + 6);
    v24 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v20 = (char)a2[1];
    if (v20 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v20 + 1073741808;
    v22 = (char)a2[2];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)a2[2];
    v24 = a2[3];
  }
  v25 = v9[17];
  v26 = *(unsigned __int16 *)(v25 + 32);
  if (!*(_WORD *)(v25 + 32))
    v26 = *(_DWORD *)(v25 + 160);
  if (v23 >= 0x40000000)
  {
    v30 = v23 - 0x40000000;
    if (v30 >= *(_DWORD *)(v12 + 172))
      goto LABEL_33;
    v27 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v30);
  }
  else
  {
    v27 = (unint64_t *)(a1 + 8 * v23);
  }
  v28 = JSC::constructArrayWithSizeQuirk(v10, (JSC::VM *)(((v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v24), *v27, 0, a6, a7, a8, a9, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v33, "LLIntSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v21) = v28;
  return (__int128 *)v17;
}

__int128 *llint_slow_path_new_regexp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t SlowCase;
  JSC::VM *v39;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v39 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x19882D5E0);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_28:
    v30 = v21 + v20;
    goto LABEL_29;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    if (v21 <= 15)
    {
LABEL_11:
      v22 = v19;
LABEL_12:
      v23 = (uint64_t *)(a1 + 8 * v21);
      goto LABEL_13;
    }
    goto LABEL_28;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v30 = *(_DWORD *)(a2 + 6);
LABEL_29:
  v21 = v30;
  v22 = v19;
  if (v30 < 0x40000000)
    goto LABEL_12;
  v31 = (v30 - 0x40000000);
  if (v31 >= *(unsigned int *)(v11 + 172))
    goto LABEL_37;
  v23 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v31);
LABEL_13:
  v24 = (uint64_t *)(v10 + 39344);
  v25 = *v23;
  v26 = *(_DWORD *)(v9 + 976);
  if (v26)
    v27 = 16 * (v26 & 0xFFFFFFFE);
  else
    v27 = 0;
  v28 = *v24;
  if ((unint64_t)*v24 < *(_QWORD *)(v10 + 39352))
    goto LABEL_17;
  v28 = *(_QWORD *)(v10 + 39360);
  if ((v28 & 1) == 0)
  {
    v32 = *(_QWORD *)(v28 + 8) ^ *(_QWORD *)(v10 + 39368);
    *(_QWORD *)(v10 + 39352) = v28 + HIDWORD(v32);
    *(_QWORD *)(v10 + 39360) = v28 + (int)v32;
LABEL_17:
    *v24 = v28 + 32;
    goto LABEL_18;
  }
  v33 = v25;
  v34 = v27;
  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, v27, v25, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39320, v10 + 192, 32, 0, 0, v35, v36, v37);
  v27 = v34;
  v25 = v33;
  v28 = SlowCase;
LABEL_18:
  *(_DWORD *)v28 = 0;
  JSC::RegExpObject::RegExpObject(v28, v10, v27, v25, 1);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v39, "LLIntSlowPaths", v16);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v28;
  return (__int128 *)v16;
}

__int128 *llint_slow_path_instanceof(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v29;
  int v30;
  unint64_t v31;
  JSC::VM *v32;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v32 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19882D808);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = *((__int16 *)a2 + 3);
    if (v22 > 63)
      v22 += 1073741760;
    if (v21 <= 63)
      goto LABEL_13;
LABEL_33:
    v30 = v21 + v20;
    goto LABEL_34;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    v22 = (char)a2[3];
    if (v22 > 15)
      v22 += 1073741808;
    if (v21 <= 15)
    {
LABEL_13:
      v23 = v19;
      v24 = v22;
LABEL_14:
      v25 = (uint64_t *)(a1 + 8 * v21);
      goto LABEL_15;
    }
    goto LABEL_33;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v30 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_34:
  v21 = v30;
  v23 = v19;
  v24 = v22;
  if (v30 < 0x40000000)
    goto LABEL_14;
  v31 = (v30 - 0x40000000);
  if (v31 >= *(unsigned int *)(v11 + 172))
    goto LABEL_39;
  v25 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v31);
LABEL_15:
  if (v24 >= 0x40000000)
  {
    v29 = (v24 - 0x40000000);
    if (v29 >= *(unsigned int *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19882D8B4);
    }
    v26 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v29);
  }
  else
  {
    v26 = (uint64_t *)(a1 + 8 * v24);
  }
  if (JSC::JSObject::defaultHasInstance(v9, *v25, *v26, a4, a5, a6, a7, a8))
    v27 = 7;
  else
    v27 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v32, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v23) = v27;
  return (__int128 *)v16;
}

__int128 *llint_slow_path_create_lexical_environment(uint64_t a1, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  JSC::VM *v32;
  unint64_t v33;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  JSC::VM *v39;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v39 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x19882DAACLL);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v36 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v36 <= 63)
      v22 = *((__int16 *)a2 + 1);
    else
      v22 = v36 + 1073741760;
    v37 = *((__int16 *)a2 + 2);
    if (v37 <= 63)
      v24 = *((__int16 *)a2 + 2);
    else
      v24 = v37 + 1073741760;
    v25 = *((__int16 *)a2 + 3);
    v26 = *((__int16 *)a2 + 4);
    if (v26 > 63)
      v26 += 1073741760;
    if (v25 <= 63)
      goto LABEL_17;
LABEL_40:
    v25 += v21;
    goto LABEL_41;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 <= 15)
      v22 = (char)a2[1];
    else
      v22 = v20 + 1073741808;
    v23 = (char)a2[2];
    if (v23 <= 15)
      v24 = (char)a2[2];
    else
      v24 = v23 + 1073741808;
    v25 = (char)a2[3];
    v26 = (char)a2[4];
    if (v26 > 15)
      v26 += 1073741808;
    if (v25 <= 15)
    {
LABEL_17:
      v27 = *(_QWORD *)(a1 + 8 * v24);
LABEL_18:
      v28 = (uint64_t *)(a1 + 8 * v25);
      goto LABEL_19;
    }
    goto LABEL_40;
  }
  v22 = *(_DWORD *)(a2 + 2);
  v24 = *(_DWORD *)(a2 + 6);
  v25 = *(_DWORD *)(a2 + 10);
  v26 = *(_DWORD *)(a2 + 14);
LABEL_41:
  v27 = *(_QWORD *)(a1 + 8 * v24);
  if (v25 < 0x40000000)
    goto LABEL_18;
  v38 = v25 - 0x40000000;
  if (v38 >= *(_DWORD *)(v12 + 172))
    goto LABEL_47;
  v28 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v38);
LABEL_19:
  if (v26 >= 0x40000000)
  {
    v35 = v26 - 0x40000000;
    if (v35 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19882DAF0);
    }
    v29 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v35);
  }
  else
  {
    v29 = (uint64_t *)(a1 + 8 * v26);
  }
  v30 = *v29;
  v31 = *(_DWORD *)(v10 + 832);
  if (v31)
    v32 = (JSC::VM *)(16 * (v31 & 0xFFFFFFFE));
  else
    v32 = 0;
  v33 = JSC::JSLexicalEnvironment::create(v11, v32, v27, *v28, v30, a7, a8, a9, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v39, "LLIntSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v33;
  return (__int128 *)v17;
}

__int128 *llint_slow_path_create_direct_arguments(uint64_t a1, unsigned __int8 *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::DirectArguments *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  JSC::VM *v24;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::DirectArguments **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v24 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19882DBF8);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
  }
  else
  {
    if (v17 == 128)
    {
      v18 = *((__int16 *)a2 + 1);
      v19 = v18 + 1073741760;
      v20 = v18 <= 63;
    }
    else
    {
      v18 = (char)a2[1];
      v19 = v18 + 1073741808;
      v20 = v18 <= 15;
    }
    if (v20)
      v21 = v18;
    else
      v21 = v19;
  }
  v22 = JSC::DirectArguments::createByCopying(v9, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v24, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v21) = v22;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_create_scoped_arguments(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v30;
  unint64_t v31;
  JSC::VM *v32;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v32 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x19882DD94);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v30 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    if (v18 == 128)
    {
      v19 = *((__int16 *)a2 + 1);
      v20 = 1073741760;
      if (v19 > 63)
        v19 += 1073741760;
      v21 = *((__int16 *)a2 + 2);
      if (v21 <= 63)
        goto LABEL_11;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = 1073741808;
      if (v19 > 15)
        v19 += 1073741808;
      v21 = (char)a2[2];
      if (v21 <= 15)
      {
LABEL_11:
        v22 = v19;
LABEL_12:
        v23 = a1 + 8 * v21;
        goto LABEL_13;
      }
    }
    v30 = v21 + v20;
  }
  v21 = v30;
  v22 = v19;
  if (v30 < 0x40000000)
    goto LABEL_12;
  v31 = (v30 - 0x40000000);
  if (v31 >= *(unsigned int *)(v11 + 172))
    goto LABEL_32;
  v23 = *(_QWORD *)(v11 + 160) + 8 * v31;
LABEL_13:
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v23 + 24) + 32);
  if (v25)
    *(_BYTE *)(v25 + 12) = 1;
  v26 = *(_DWORD *)(v9 + 840);
  if (v26)
    v27 = 16 * (v26 & 0xFFFFFFFE);
  else
    v27 = 0;
  v28 = JSC::ScopedArguments::createByCopyingFrom(*(JSC **)(v9 + 56), v27, a1 + 48, (*(_DWORD *)(a1 + 32) - 1), *(_QWORD *)(a1 + 24), v25, v24, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v32, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v28;
  return (__int128 *)v16;
}

__int128 *llint_slow_path_create_cloned_arguments(uint64_t a1, unsigned __int8 *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  unint64_t v23;
  JSC::VM *v25;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v25 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19882DF2CLL);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v22 = *(_DWORD *)(a2 + 2);
  }
  else
  {
    if (v18 == 128)
    {
      v19 = *((__int16 *)a2 + 1);
      v20 = v19 + 1073741760;
      v21 = v19 <= 63;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = v19 + 1073741808;
      v21 = v19 <= 15;
    }
    if (v21)
      v22 = v19;
    else
      v22 = v20;
  }
  v23 = JSC::ClonedArguments::createWithMachineFrame(v10, a1, 0, a5, a6, a7, a8, a9, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v25, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v23;
  return (__int128 *)v16;
}

__int128 *llint_slow_path_try_get_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  JSC::VM *v30;
  unsigned int v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  JSC::VM *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 *v53;
  JSC::VM *v54;
  uint64_t v55;
  unint64_t v56;
  JSC::JSGlobalObject *v57;
  int v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  _WORD *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int *v76;
  int *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  int v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  JSC::JSGlobalObject *v89;
  _DWORD *v90;
  unsigned __int16 *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  unint64_t v95;
  JSC::JSGlobalObject *v96;
  char OwnStaticPropertySlot;
  uint64_t v98;
  unint64_t v99;
  JSC::JSGlobalObject *v100;
  int v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  JSC::VM *v107;
  uint64_t v108;
  JSC::JSGlobalObject *v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  JSC::JSGlobalObject *v115;
  _DWORD *v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _WORD *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  JSC::VM *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  JSC::JSGlobalObject *v144;
  int v145;
  unsigned int v146;
  int v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unsigned __int16 *v154;
  uint64_t v155;
  unsigned int v156;
  unint64_t v157;
  JSC::JSGlobalObject *v158;
  char v159;
  unint64_t v160;
  JSC::VM *v161;
  uint64_t v162;
  JSC::JSGlobalObject *v163;
  int v164;
  uint64_t v165;
  int v166;
  JSC::JSArrayBufferView *v167;
  int v168;
  uint64_t v169;
  JSC::JSGlobalObject *v170;
  _BOOL4 v171;
  unsigned int v172;
  unint64_t v173;
  _DWORD *v174;
  __int16 v175;
  unsigned __int8 *v176;
  int v178;
  uint64_t v179;
  JSC::JSGlobalObject *v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v188;
  uint64_t v189;
  BOOL v190;
  BOOL v191;
  uint64_t v193;
  uint64_t v194;
  BOOL v195;
  JSC::JSGlobalObject *v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unsigned __int8 *v203;
  int v204;
  _BOOL4 v205;
  double v206;
  const unsigned __int8 *v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unint64_t v211;
  _BOOL4 v212;
  uint64_t v213;
  unsigned __int8 *v214;
  unsigned int v215;
  JSC::VM *v216;
  uint64_t v217;
  unsigned int *v218;
  uint64_t v219;
  uint64_t Index;
  int v221;
  int v222;
  _BYTE *v223;
  uint64_t v224;
  JSC::JSGlobalObject *v225;
  uint64_t v226;
  unsigned __int16 *v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  unint64_t v232;
  uint64_t v233;
  unsigned __int8 *v234;
  unsigned int v235;
  BOOL v236;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v238;
  unsigned __int8 *v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  _DWORD *v244;
  BOOL v245;
  unint64_t v246;
  JSC::JSGlobalObject *v247;
  JSC::JSGlobalObject *v248;
  __int128 *v249;
  uint64_t v250;
  uint64_t v251;
  JSC::VM *v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  int *v260;
  uint64_t v261;
  int v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  int *v268;
  JSC::VM *v269;
  _QWORD v270[18];

  v270[16] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v269 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19882E994);
  }
  v16 = (__int128 *)a2;
  v17 = a1;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v181 = *((__int16 *)a2 + 1);
    if (v181 <= 63)
      v182 = *((__int16 *)a2 + 1);
    else
      v182 = v181 + 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = *((unsigned __int16 *)a2 + 3);
    v254 = *((unsigned __int16 *)a2 + 4);
    v255 = v182;
    v253 = *((unsigned __int16 *)a2 + 5);
    if (v21 <= 63)
    {
LABEL_12:
      v23 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
      if (v23)
      {
        v24 = *v23;
        if (*v23 > v22)
        {
          v25 = (unint64_t *)&v23[2 * v22 + 2];
LABEL_15:
          v26 = v21;
          goto LABEL_16;
        }
      }
      else
      {
        v24 = 0;
      }
      v89 = v10;
      v90 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
      if (*v90 <= v22 - v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19882EAA0);
      }
      v25 = (unint64_t *)&v90[2 * (v22 - v24) + 2];
      v10 = v89;
      goto LABEL_15;
    }
    v101 = v21 + 1073741760;
  }
  else if (v18 == 130)
  {
    v101 = *(_DWORD *)(a2 + 6);
    v22 = *(_DWORD *)(a2 + 10);
    v254 = *(_DWORD *)(a2 + 14);
    v255 = *(_DWORD *)(a2 + 2);
    v253 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
      v20 = (char)a2[1];
    else
      v20 = v19 + 1073741808;
    v21 = (char)a2[2];
    v22 = a2[3];
    v254 = a2[4];
    v255 = v20;
    v253 = a2[5];
    if (v21 <= 15)
      goto LABEL_12;
    v101 = v21 + 1073741808;
  }
  v102 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
  if (v102)
  {
    v103 = *v102;
    if (*v102 > v22)
    {
      v25 = (unint64_t *)&v102[2 * v22 + 2];
      goto LABEL_129;
    }
  }
  else
  {
    v103 = 0;
  }
  v115 = v10;
  v116 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
  if (*v116 <= v22 - v103)
  {
    __break(0xC471u);
    JUMPOUT(0x19882ED00);
  }
  v25 = (unint64_t *)&v116[2 * (v22 - v103) + 2];
  v10 = v115;
LABEL_129:
  v26 = v101;
  if (v101 >= 0x40000000)
  {
    v104 = *(_QWORD *)(v17 + 16);
    v105 = (v101 - 0x40000000);
    if (v105 >= *(unsigned int *)(v104 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19882F408);
    }
    v27 = (uint64_t *)(*(_QWORD *)(v104 + 160) + 8 * v105);
    goto LABEL_17;
  }
LABEL_16:
  v27 = (uint64_t *)(v17 + 8 * v26);
LABEL_17:
  v28 = *v27;
  v267 = 0;
  v268 = (int *)v28;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v258 = 0xFFFFFFFF00000000;
  v260 = 0;
  v261 = 0;
  v259 = v28;
  v262 = 196608;
  v263 = 0;
  v266 = 0;
  v264 = v11;
  v252 = (JSC::VM *)v11;
  ++*(_DWORD *)(v11 + 4);
  v265 = 1;
  v29 = *v25;
  if ((v28 & 0xFFFE000000000002) == 0)
  {
    v30 = (JSC::VM *)*((_QWORD *)v10 + 7);
    v31 = *(unsigned __int8 *)(v28 + 5);
    if (v31 > 0x16)
      goto LABEL_19;
    if (v31 == 2)
    {
      v170 = v10;
      v216 = (JSC::VM *)*((_QWORD *)v10 + 7);
      if (*(_QWORD *)(*((_QWORD *)v30 + 5244) + 1768) == v29)
      {
        v217 = *(_QWORD *)(v28 + 8);
        if ((v217 & 1) != 0)
          v218 = (unsigned int *)(v28 + 16);
        else
          v218 = (unsigned int *)(v217 + 4);
        v219 = *v218;
        if ((v219 & 0x80000000) != 0)
        {
          *(double *)a9.i64 = (double)v219;
          Index = COERCE__INT64((double)v219) + 0x2000000000000;
        }
        else
        {
          Index = v219 | 0xFFFE000000000000;
        }
        v221 = 14;
        goto LABEL_402;
      }
      if (!v29)
        goto LABEL_409;
      v222 = *(_DWORD *)(v29 + 16);
      if ((v222 & 0x20) != 0)
        goto LABEL_409;
      v223 = *(_BYTE **)(v29 + 8);
      v224 = *(unsigned int *)(v29 + 4);
      if ((v222 & 4) != 0)
      {
        if ((_DWORD)v224)
        {
          a3 = *v223 - 48;
          if (a3 <= 9 && (v224 < 2 || *v223 != 48))
          {
            v240 = v223 + 1;
            v241 = v224 - 1;
            while (v241)
            {
              if (a3 <= 0x19999999)
              {
                v242 = *v240 - 48;
                if (v242 <= 9)
                {
                  v94 = __CFADD__(v242, 10 * a3);
                  a3 = v242 + 10 * (_DWORD)a3;
                  ++v240;
                  --v241;
                  if (!v94)
                    continue;
                }
              }
              goto LABEL_409;
            }
LABEL_495:
            if ((_DWORD)a3 != -1)
            {
              v243 = *(_QWORD *)(v28 + 8);
              v244 = (_DWORD *)((v243 & 1) != 0 ? v28 + 16 : v243 + 4);
              if (*v244 > a3)
              {
                Index = JSC::JSString::getIndex((JSC::JSString *)v28, v10, a3, a4, a5, a6, a7, a8, a9);
                if (!*((_DWORD *)v216 + 20)
                  || !JSC::VM::hasExceptionsAfterHandlingTraps(v216, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                {
                  v221 = 10;
LABEL_402:
                  v256 = Index;
                  LODWORD(v258) = v221;
                  v260 = 0;
                  BYTE1(v262) = 1;
                  v10 = v170;
                  if (!*((_DWORD *)v216 + 20))
                    goto LABEL_63;
                  JSC::VM::hasExceptionsAfterHandlingTraps(v216, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  goto LABEL_241;
                }
              }
            }
          }
        }
      }
      else if ((_DWORD)v224)
      {
        a3 = *(unsigned __int16 *)v223 - 48;
        if (a3 <= 9 && (*(_WORD *)v223 != 48 || v224 <= 1))
        {
          v228 = (unsigned __int16 *)(v223 + 2);
          v229 = v224 - 1;
          while (v229)
          {
            if (a3 <= 0x19999999)
            {
              v230 = *v228 - 48;
              if (v230 <= 9)
              {
                v94 = __CFADD__(v230, 10 * a3);
                a3 = v230 + 10 * (_DWORD)a3;
                ++v228;
                --v229;
                if (!v94)
                  continue;
              }
            }
            goto LABEL_409;
          }
          goto LABEL_495;
        }
      }
LABEL_409:
      v10 = v170;
      if (*((_DWORD *)v216 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v216, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v10 = v170;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_63;
      }
    }
  }
  v225 = v10;
  v226 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v268, (unint64_t)v10);
  v10 = v225;
  if (!v226)
    goto LABEL_63;
  v28 = v226;
  v30 = (JSC::VM *)*((_QWORD *)v225 + 7);
LABEL_19:
  v32 = (_BYTE *)(v28 + 6);
  v33 = v29 >> 4;
  v34 = v28;
  if ((*(_BYTE *)(v28 + 6) & 8) == 0)
  {
    v35 = v28;
    do
    {
      v36 = *(_DWORD *)v35 & 0xFFFFFFFE;
      v37 = 16 * v36;
      if (!(_DWORD)v33 || (v33 & ~*(_DWORD *)(16 * v36 + 0x20)) != 0)
        goto LABEL_32;
      v38 = *(_QWORD *)(16 * v36 + 0x58);
      if (!v38)
      {
        v49 = *(_QWORD *)(16 * v36 + 0x40);
        if (!v49 || *(_BYTE *)(v49 + 5) != 1 && *(_DWORD *)(v49 + 80) < 2u)
          goto LABEL_32;
        v50 = v30;
        v250 = v28;
        v51 = v29;
        v52 = v33;
        v53 = v16;
        v54 = v30;
        v55 = v17;
        v56 = v9;
        v57 = v10;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v37, v50, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v10 = v57;
        v9 = v56;
        v17 = v55;
        v30 = v54;
        v16 = v53;
        v33 = v52;
        v29 = v51;
        v28 = v250;
        if (!v38)
          goto LABEL_32;
      }
      if (!*(_DWORD *)(v38 + 24))
        goto LABEL_32;
      v39 = *(_QWORD *)(v38 + 16);
      v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
      v41 = *(unsigned int *)(v38 + 8);
      v42 = *(_DWORD *)(v29 + 16);
      if ((v39 & 1) != 0)
      {
        if ((v42 & 0x20) != 0)
          v42 = *(_DWORD *)(v29 + 32);
        v43 = *(_DWORD *)(v38 + 12);
        v44 = (v42 >> 8) & *(_QWORD *)&v43;
        v45 = *(unsigned __int8 *)(v40 + v44);
        if (!*(_BYTE *)(v40 + v44))
          goto LABEL_32;
        v46 = v40 + v41;
        v47 = 1;
        while (1)
        {
          v48 = *(_QWORD *)(v46 + 8 * (v45 - 1));
          if (v29 == (v48 & 0xFFFFFFFFFFFFLL))
            break;
          v44 = ((_DWORD)v44 + v47) & v43;
          v45 = *(unsigned __int8 *)(v40 + v44);
          ++v47;
          if (!*(_BYTE *)(v40 + v44))
            goto LABEL_32;
        }
        a6 = (v48 >> 16) & 0xFF00000000 | HIBYTE(v48);
      }
      else
      {
        if ((v42 & 0x20) != 0)
          v42 = *(_DWORD *)(v29 + 32);
        v58 = *(_DWORD *)(v38 + 12);
        v59 = v58 & (v42 >> 8);
        v60 = *(_DWORD *)(v40 + 4 * v59);
        if (!v60)
          goto LABEL_32;
        v61 = v40 + 4 * v41;
        v62 = 1;
        while (1)
        {
          v63 = (v60 - 1);
          if (v29 == *(_QWORD *)(v61 + 16 * v63))
            break;
          v59 = (v59 + v62) & v58;
          v60 = *(_DWORD *)(v40 + 4 * v59);
          ++v62;
          if (!v60)
            goto LABEL_32;
        }
        a6 = *(unsigned int *)(v61 + 16 * v63 + 8) | ((unint64_t)*(unsigned __int8 *)(v61 + 16 * v63 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v86 = v35 + 16;
          v87 = a6 << 32;
        }
        else
        {
          v86 = *(_QWORD *)(v35 + 8) - 8;
          v87 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v86 + (v87 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_101;
        v88 = *(unsigned __int8 *)(a4 + 5);
        if (v88 == 5)
        {
          v98 = v17;
          v99 = v9;
          v100 = v10;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v35, (uint64_t)v30, (uint64_t)&v256, a4, SHIDWORD(a6), a6);
          v10 = v100;
          v9 = v99;
          v17 = v98;
          goto LABEL_63;
        }
        if (v88 != 6)
        {
LABEL_101:
          v256 = a4;
          v260 = (int *)v35;
LABEL_102:
          v258 = __PAIR64__(a6, a5);
          LOWORD(v262) = 257;
          goto LABEL_63;
        }
        v117 = *(_DWORD *)(v37 + 16) & 3;
        v118 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v120 = *(_QWORD *)(a4 + 24);
          v119 = *(_QWORD *)(a4 + 32);
          v256 = *(_QWORD *)(a4 + 8);
          v257 = v118;
          LODWORD(v258) = HIDWORD(a6);
          v260 = (int *)v35;
          goto LABEL_151;
        }
        v256 = *(_QWORD *)(a4 + 8);
        v257 = v118;
        LODWORD(v258) = HIDWORD(a6);
        v260 = (int *)v35;
LABEL_223:
        BYTE1(v262) = 3;
        if (v117 != 2)
          LOBYTE(v262) = 1;
        goto LABEL_63;
      }
LABEL_32:
      if ((*v32 & 0x20) != 0)
      {
        v95 = v9;
        v96 = v10;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v35, v30, v29, (uint64_t)&v256);
        v10 = v96;
        v9 = v95;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_63;
      }
      v34 = *(_QWORD *)(v37 + 48);
      if (!v34)
        v34 = *(_QWORD *)(v35 + 16);
      if ((v34 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v34 + 5) < 0x17u)
      {
        if (!v29)
          goto LABEL_63;
        v64 = *(_DWORD *)(v29 + 16);
        if ((v64 & 0x20) != 0)
          goto LABEL_63;
        v65 = *(_WORD **)(v29 + 8);
        v66 = *(unsigned int *)(v29 + 4);
        if ((v64 & 4) == 0)
        {
          if ((_DWORD)v66)
          {
            v67 = (unsigned __int16)*v65 - 48;
            if (v67 <= 9 && (*v65 != 48 || v66 <= 1))
            {
              v91 = v65 + 1;
              v92 = v66 - 1;
              while (v92)
              {
                if (v67 > 0x19999999)
                  goto LABEL_59;
                v93 = *v91 - 48;
                if (v93 > 9)
                  goto LABEL_59;
                v68 = 0;
                LOBYTE(v66) = 0;
                v69 = 0;
                v94 = __CFADD__(v93, 10 * v67);
                v67 = v93 + 10 * v67;
                ++v91;
                --v92;
                if (v94)
                  goto LABEL_61;
              }
              v69 = v67 & 0xFFFFFF00;
              v68 = 0x100000000;
              if (v67 == -1)
              {
                v68 = 0;
                LOBYTE(v66) = 0;
              }
              else
              {
                LOBYTE(v66) = v67;
              }
              if (v67 == -1)
                v69 = 0;
LABEL_61:
              v70 = v66;
LABEL_62:
              if ((v68 & 0x100000000) == 0)
                goto LABEL_63;
              v106 = v69 | v70;
              v107 = (JSC::VM *)*((_QWORD *)v10 + 7);
              while (2)
              {
                v108 = 16 * (*(_DWORD *)v28 & 0xFFFFFFFE);
                v109 = v10;
                v110 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v108 + 0x4C) + 0x70))(v28, v10, v106, &v256);
                v112 = v110;
                if (*((_DWORD *)v107 + 20))
                {
                  v171 = JSC::VM::hasExceptionsAfterHandlingTraps(v107, v111, a3, a4, a5, a6, a7, a8);
                  v10 = v109;
                  if (((v171 | v112) & 1) != 0)
                    goto LABEL_63;
                }
                else
                {
                  v10 = v109;
                  if ((v110 & 1) != 0)
                    goto LABEL_63;
                }
                if (BYTE2(v262) == 3)
                {
                  if (v263)
                  {
                    v71 = 2;
                    v10 = v109;
                    goto LABEL_70;
                  }
                  v113 = *(unsigned __int8 *)(v28 + 5);
                  v10 = v109;
                  if (v113 != 61)
                  {
LABEL_139:
                    if ((v113 - 39) <= 0xA)
                    {
                      v211 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v28, v111, a3, a4, a5, a6, a7, a8);
                      v10 = v109;
                      if (v211 <= v106)
                        goto LABEL_63;
                    }
                  }
                }
                else
                {
                  v113 = *(unsigned __int8 *)(v28 + 5);
                  if (v113 != 61)
                    goto LABEL_139;
                  if (BYTE2(v262) == 1)
                    goto LABEL_63;
                }
                if ((*(_WORD *)(v108 + 12) & 0x800) == 0 || BYTE2(v262) == 3)
                {
                  v114 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x30);
                  if (!v114)
                    v114 = *(_QWORD *)(v28 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v114 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v28, v109);
                  }
                  else
                  {
                    v114 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x30);
                    if (!v114)
                      v114 = *(_QWORD *)(v28 + 16);
                  }
                  if (*((_DWORD *)v107 + 20))
                  {
                    v238 = JSC::VM::hasExceptionsAfterHandlingTraps(v107, v111, a3, a4, a5, a6, a7, a8);
                    v10 = v109;
                    if (v238)
                      goto LABEL_63;
                  }
                  else
                  {
                    v10 = v109;
                  }
                }
                if ((v114 & 0xFFFE000000000002) != 0)
                  goto LABEL_63;
                v28 = v114;
                if (*(unsigned __int8 *)(v114 + 5) <= 0x16u)
                  goto LABEL_63;
                continue;
              }
            }
LABEL_59:
            v68 = 0;
            LOBYTE(v66) = 0;
          }
          else
          {
            v68 = 0;
          }
          v69 = 0;
          goto LABEL_61;
        }
        if ((_DWORD)v66)
        {
          v210 = *(unsigned __int8 *)v65 - 48;
          if (v210 <= 9 && (v66 < 2 || *(_BYTE *)v65 != 48))
          {
            v213 = v66 - 1;
            v214 = (unsigned __int8 *)v65 + 1;
            while (v213)
            {
              if (v210 > 0x19999999)
                goto LABEL_355;
              v215 = *v214 - 48;
              if (v215 > 9)
                goto LABEL_355;
              v70 = 0;
              LOBYTE(v66) = 0;
              v68 = 0;
              v94 = __CFADD__(v215, 10 * v210);
              v210 = v215 + 10 * v210;
              --v213;
              ++v214;
              if (v94)
                goto LABEL_357;
            }
            if (v210 == -1)
              v70 = 0;
            else
              v70 = v210 & 0xFFFFFF00;
            if (v210 == -1)
              LOBYTE(v66) = 0;
            else
              LOBYTE(v66) = v210;
            if (v210 == -1)
              v68 = 0;
            else
              v68 = 0x100000000;
            goto LABEL_357;
          }
LABEL_355:
          v70 = 0;
          LOBYTE(v66) = 0;
        }
        else
        {
          v70 = 0;
        }
        v68 = 0;
LABEL_357:
        v69 = v66;
        goto LABEL_62;
      }
      v32 = (_BYTE *)(v34 + 6);
      v35 = v34;
    }
    while ((*(_BYTE *)(v34 + 6) & 8) == 0);
  }
  if (!v29)
    goto LABEL_163;
  v121 = *(_DWORD *)(v29 + 16);
  if ((v121 & 0x20) != 0)
    goto LABEL_163;
  v122 = *(_WORD **)(v29 + 8);
  v123 = *(unsigned int *)(v29 + 4);
  if ((v121 & 4) == 0)
  {
    if ((_DWORD)v123)
    {
      v124 = (unsigned __int16)*v122 - 48;
      if (v124 <= 9 && (*v122 != 48 || v123 <= 1))
      {
        v154 = v122 + 1;
        v155 = v123 - 1;
        while (v155)
        {
          if (v124 > 0x19999999)
            goto LABEL_159;
          v156 = *v154 - 48;
          if (v156 > 9)
            goto LABEL_159;
          v125 = 0;
          LOBYTE(v123) = 0;
          v126 = 0;
          v94 = __CFADD__(v156, 10 * v124);
          v124 = v156 + 10 * v124;
          ++v154;
          --v155;
          if (v94)
            goto LABEL_161;
        }
        v126 = v124 & 0xFFFFFF00;
        v125 = 0x100000000;
        if (v124 == -1)
        {
          v125 = 0;
          LOBYTE(v123) = 0;
        }
        else
        {
          LOBYTE(v123) = v124;
        }
        if (v124 == -1)
          v126 = 0;
        goto LABEL_161;
      }
LABEL_159:
      v125 = 0;
      LOBYTE(v123) = 0;
    }
    else
    {
      v125 = 0;
    }
    v126 = 0;
LABEL_161:
    v127 = v123;
    goto LABEL_162;
  }
  if ((_DWORD)v123)
  {
    v231 = *(unsigned __int8 *)v122 - 48;
    if (v231 <= 9 && (v123 < 2 || *(_BYTE *)v122 != 48))
    {
      v233 = v123 - 1;
      v234 = (unsigned __int8 *)v122 + 1;
      while (v233)
      {
        if (v231 > 0x19999999)
          goto LABEL_427;
        v235 = *v234 - 48;
        if (v235 > 9)
          goto LABEL_427;
        v127 = 0;
        LOBYTE(v123) = 0;
        v125 = 0;
        v94 = __CFADD__(v235, 10 * v231);
        v231 = v235 + 10 * v231;
        --v233;
        ++v234;
        if (v94)
          goto LABEL_429;
      }
      if (v231 == -1)
        v127 = 0;
      else
        v127 = v231 & 0xFFFFFF00;
      if (v231 == -1)
        LOBYTE(v123) = 0;
      else
        LOBYTE(v123) = v231;
      if (v231 == -1)
        v125 = 0;
      else
        v125 = 0x100000000;
      goto LABEL_429;
    }
LABEL_427:
    v127 = 0;
    LOBYTE(v123) = 0;
  }
  else
  {
    v127 = 0;
  }
  v125 = 0;
LABEL_429:
  v126 = v123;
LABEL_162:
  if ((v125 & 0x100000000) != 0)
  {
    v160 = v126 | v127;
    v161 = (JSC::VM *)*((_QWORD *)v10 + 7);
    while (1)
    {
      v162 = 16 * (*(_DWORD *)v28 & 0xFFFFFFFE);
      v163 = v10;
      v164 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v162 + 0x4C) + 0x70))(v28, v10, v160, &v256);
      v166 = v164;
      if (*((_DWORD *)v161 + 20))
      {
        v205 = JSC::VM::hasExceptionsAfterHandlingTraps(v161, v165, a3, a4, a5, a6, a7, a8);
        v10 = v163;
        if (((v205 | v166) & 1) != 0)
          goto LABEL_63;
      }
      else
      {
        v10 = v163;
        if ((v164 & 1) != 0)
          goto LABEL_63;
      }
      v249 = v16;
      v251 = v17;
      if (BYTE2(v262) == 3)
      {
        if (v263)
        {
          v71 = 2;
          v10 = v163;
LABEL_444:
          v16 = v249;
          v17 = v251;
          goto LABEL_70;
        }
        v167 = (JSC::JSArrayBufferView *)v28;
        v168 = *(unsigned __int8 *)(v28 + 5);
        if (v168 != 61)
        {
LABEL_233:
          if ((v168 - 39) <= 0xA)
          {
            v232 = JSC::JSArrayBufferView::length(v167, v165, a3, a4, a5, a6, a7, a8);
            v10 = v163;
            if (v232 <= v160)
              goto LABEL_63;
          }
        }
      }
      else
      {
        v167 = (JSC::JSArrayBufferView *)v28;
        v168 = *(unsigned __int8 *)(v28 + 5);
        if (v168 != 61)
          goto LABEL_233;
        v10 = v163;
        if (BYTE2(v262) == 1)
          goto LABEL_63;
      }
      if ((*(_WORD *)(v162 + 12) & 0x800) == 0 || BYTE2(v262) == 3)
      {
        v169 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x30);
        v10 = v163;
        if (!v169)
          v169 = *(_QWORD *)(v28 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v169 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v28, v163);
        }
        else
        {
          v169 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x30);
          if (!v169)
            v169 = *(_QWORD *)(v28 + 16);
        }
        if (*((_DWORD *)v161 + 20))
        {
          v245 = JSC::VM::hasExceptionsAfterHandlingTraps(v161, v165, a3, a4, a5, a6, a7, a8);
          v10 = v163;
          if (v245)
            goto LABEL_63;
        }
        else
        {
          v10 = v163;
        }
      }
      if ((v169 & 0xFFFE000000000002) == 0)
      {
        v28 = v169;
        if (*(unsigned __int8 *)(v169 + 5) > 0x16u)
          continue;
      }
      goto LABEL_63;
    }
  }
LABEL_163:
  v128 = (JSC::VM *)*((_QWORD *)v10 + 7);
  while (1)
  {
    v129 = 16 * (*(_DWORD *)v34 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v34 + 6) & 8) == 0)
      break;
    v249 = v16;
    v251 = v17;
    v248 = v10;
    v198 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x68))(v34, v10, v29, &v256);
    v199 = v198;
    if (*((_DWORD *)v128 + 20))
    {
      v212 = JSC::VM::hasExceptionsAfterHandlingTraps(v128, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v10 = v248;
      if (((v212 | v199) & 1) != 0)
        goto LABEL_63;
    }
    else
    {
      v10 = v248;
      if ((v198 & 1) != 0)
        goto LABEL_63;
    }
    if (BYTE2(v262) == 3)
    {
      if (v263)
      {
        v71 = 2;
        v10 = v248;
        goto LABEL_444;
      }
      v200 = *(unsigned __int8 *)(v34 + 5);
      if (v200 == 61)
      {
LABEL_360:
        v10 = v248;
        goto LABEL_177;
      }
LABEL_318:
      if (!v29)
        goto LABEL_360;
      if ((v200 - 50) < 0xFFFFFFF5)
        goto LABEL_360;
      v201 = *(_DWORD *)(v29 + 16);
      if ((v201 & 0x20) != 0)
        goto LABEL_360;
      v202 = *(unsigned int *)(v29 + 4);
      if (!(_DWORD)v202)
        goto LABEL_360;
      v203 = *(unsigned __int8 **)(v29 + 8);
      if ((v201 & 4) != 0)
      {
        v204 = *v203;
        if ((_DWORD)v202 == 1)
        {
LABEL_324:
          v10 = v248;
          if ((v204 - 48) < 0xA)
            goto LABEL_63;
          goto LABEL_177;
        }
        if (v204 == 45)
        {
          v204 = v203[1];
LABEL_329:
          if ((v204 - 48) < 0xA)
          {
            v10 = v248;
            if ((_DWORD)v202 == 2)
              goto LABEL_63;
            goto LABEL_335;
          }
          if ((_DWORD)v202 != 9)
            goto LABEL_360;
        }
        else
        {
          if ((v204 - 48) < 0xA)
            goto LABEL_335;
          if ((_DWORD)v202 != 8)
            goto LABEL_350;
        }
        v209 = v204 == 73;
LABEL_346:
        v10 = v248;
        if (!v209)
          goto LABEL_177;
      }
      else
      {
        v204 = *(unsigned __int16 *)v203;
        if ((_DWORD)v202 == 1)
          goto LABEL_324;
        if (v204 == 45)
        {
          v204 = *((unsigned __int16 *)v203 + 1);
          goto LABEL_329;
        }
        if ((v204 - 48) >= 0xA && ((_DWORD)v202 != 8 || v204 != 73))
        {
LABEL_350:
          if ((_DWORD)v202 != 3)
            goto LABEL_360;
          v209 = v204 == 78;
          goto LABEL_346;
        }
      }
LABEL_335:
      v246 = v246 & 0xFFFFFF0000000000 | v202 | ((unint64_t)((v201 >> 2) & 1) << 32);
      JSC::jsToNumber(v203, v246);
      WTF::numberToString(v270, v206);
      v208 = WTF::equal(v29, (unint64_t)v270, v207);
      v10 = v248;
      if (v208)
        goto LABEL_63;
      goto LABEL_177;
    }
    v200 = *(unsigned __int8 *)(v34 + 5);
    if (v200 != 61)
      goto LABEL_318;
    v10 = v248;
    if (BYTE2(v262) == 1)
      goto LABEL_63;
LABEL_177:
    if ((*(_WORD *)(v129 + 12) & 0x800) != 0)
    {
      v141 = *(_DWORD *)v34;
      if (BYTE2(v262) != 3)
      {
        v196 = v10;
        v197 = 16 * (v141 & 0xFFFFFFFE);
        if ((*(_WORD *)(v197 + 12) & 0x800) != 0)
        {
          v142 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v197 + 76) + 0xB0))(v34, v10);
        }
        else
        {
          v142 = *(_QWORD *)(v197 + 48);
          if (!v142)
            v142 = *(_QWORD *)(v34 + 16);
        }
        if (*((_DWORD *)v128 + 20))
        {
          v236 = JSC::VM::hasExceptionsAfterHandlingTraps(v128, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v10 = v196;
          if (v236)
            goto LABEL_63;
        }
        else
        {
          v10 = v196;
        }
        goto LABEL_181;
      }
    }
    else
    {
      v141 = *(_DWORD *)v34;
    }
    v142 = *(_QWORD *)(16 * (v141 & 0xFFFFFFFE) + 0x30);
    if (!v142)
      v142 = *(_QWORD *)(v34 + 16);
LABEL_181:
    if ((v142 & 0xFFFE000000000002) == 0)
    {
      v34 = v142;
      if (*(unsigned __int8 *)(v142 + 5) > 0x16u)
        continue;
    }
    goto LABEL_63;
  }
  if (!(_DWORD)v33 || (v33 & ~*(_DWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_176;
  v130 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x58);
  if (!v130)
  {
    v143 = *(_QWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x40);
    if (!v143 || *(_BYTE *)(v143 + 5) != 1 && *(_DWORD *)(v143 + 80) < 2u)
      goto LABEL_176;
    v144 = v10;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE)), v128, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v10 = v144;
    if (!v130)
      goto LABEL_176;
  }
  if (!*(_DWORD *)(v130 + 24))
    goto LABEL_176;
  v131 = *(_QWORD *)(v130 + 16);
  v132 = v131 & 0xFFFFFFFFFFFFFFFELL;
  v133 = *(unsigned int *)(v130 + 8);
  v134 = *(_DWORD *)(v29 + 16);
  if ((v131 & 1) != 0)
  {
    if ((v134 & 0x20) != 0)
      v134 = *(_DWORD *)(v29 + 32);
    v135 = *(_DWORD *)(v130 + 12);
    v136 = (v134 >> 8) & *(_QWORD *)&v135;
    v137 = *(unsigned __int8 *)(v132 + v136);
    if (*(_BYTE *)(v132 + v136))
    {
      v138 = v132 + v133;
      v139 = 1;
      while (1)
      {
        v140 = *(_QWORD *)(v138 + 8 * (v137 - 1));
        if (v29 == (v140 & 0xFFFFFFFFFFFFLL))
          break;
        v136 = ((_DWORD)v136 + v139) & v135;
        v137 = *(unsigned __int8 *)(v132 + v136);
        ++v139;
        if (!*(_BYTE *)(v132 + v136))
          goto LABEL_176;
      }
      a6 = (v140 >> 16) & 0xFF00000000 | HIBYTE(v140);
      goto LABEL_189;
    }
LABEL_176:
    if ((*(_BYTE *)(v34 + 6) & 0x20) != 0)
    {
      v157 = v9;
      v158 = v10;
      v159 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v34, v128, v29, (uint64_t)&v256);
      v10 = v158;
      v9 = v157;
      if ((v159 & 1) != 0)
        goto LABEL_63;
    }
    goto LABEL_177;
  }
  if ((v134 & 0x20) != 0)
    v134 = *(_DWORD *)(v29 + 32);
  v145 = *(_DWORD *)(v130 + 12);
  v146 = v145 & (v134 >> 8);
  v147 = *(_DWORD *)(v132 + 4 * v146);
  if (!v147)
    goto LABEL_176;
  v148 = v132 + 4 * v133;
  v149 = 1;
  while (1)
  {
    v150 = (v147 - 1);
    if (v29 == *(_QWORD *)(v148 + 16 * v150))
      break;
    v146 = (v146 + v149) & v145;
    v147 = *(_DWORD *)(v132 + 4 * v146);
    ++v149;
    if (!v147)
      goto LABEL_176;
  }
  a6 = *(unsigned int *)(v148 + 16 * v150 + 8) | ((unint64_t)*(unsigned __int8 *)(v148 + 16 * v150 + 12) << 32);
LABEL_189:
  if ((_DWORD)a6 == -1)
    goto LABEL_176;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v151 = v34 + 16;
    v152 = a6 << 32;
  }
  else
  {
    v151 = *(_QWORD *)(v34 + 8) - 8;
    v152 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v151 + (v152 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_204;
  v153 = *(unsigned __int8 *)(a4 + 5);
  if (v153 == 5)
  {
    v170 = v10;
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v34, (uint64_t)v128, (uint64_t)&v256, a4, SHIDWORD(a6), a6);
LABEL_241:
    v10 = v170;
    goto LABEL_63;
  }
  if (v153 != 6)
  {
LABEL_204:
    v256 = a4;
    v260 = (int *)v34;
    goto LABEL_102;
  }
  v117 = *(_DWORD *)(v129 + 16) & 3;
  v179 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v256 = *(_QWORD *)(a4 + 8);
    v257 = v179;
    LODWORD(v258) = HIDWORD(a6);
    v260 = (int *)v34;
    goto LABEL_223;
  }
  v120 = *(_QWORD *)(a4 + 24);
  v119 = *(_QWORD *)(a4 + 32);
  v256 = *(_QWORD *)(a4 + 8);
  v257 = v179;
  LODWORD(v258) = HIDWORD(a6);
  v260 = (int *)v34;
LABEL_151:
  BYTE1(v262) = 3;
  if (v117 != 2)
    LOBYTE(v262) = 1;
  HIBYTE(v262) = 1;
  v266 = v120;
  v267 = v119;
LABEL_63:
  if (v263)
  {
    v71 = 2;
  }
  else if (BYTE1(v262))
  {
    if (BYTE1(v262) == 1 && v262 == 1 || (v71 = 2, BYTE1(v262) == 2) && v262 == 1)
      v71 = v256;
  }
  else
  {
    v71 = 10;
  }
LABEL_70:
  if ((_BYTE)qword_1ECF4C789)
  {
    v72 = BYTE1(v262);
    if (BYTE1(v262))
    {
      if (v262 == 1)
      {
        v73 = *(_QWORD *)(v9 + 136);
        v74 = *(unsigned __int16 *)(v73 + 90);
        if (!*(_WORD *)(v73 + 90))
          v74 = *(_DWORD *)(v73 + 276);
        v75 = (v73 + v74 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v76 = (unsigned int *)(v75 + 8 * v253);
        v77 = v268;
        v78 = *v268;
        v79 = *v76 & 0xFFFFFFFE;
        v80 = 16 * v79;
        if (*v76)
          v81 = (_DWORD)v79 == 0;
        else
          v81 = 1;
        if (!v81 && (*v268 & 0xFFFFFFFE) != 0 && v80 != 16 * (*v268 & 0xFFFFFFFE))
        {
          v180 = v10;
          if (*(_DWORD *)(16 * v79 + 0x1C) == *(_DWORD *)(16 * (v78 & 0xFFFFFFFE) + 0x1C))
          {
            v183 = *(_QWORD *)(16 * v79 + 0x40);
            if (v183)
            {
              if (*(_BYTE *)(v183 + 5) != 1)
              {
                v184 = *(_QWORD *)(16 * (v78 & 0xFFFFFFFE) + 0x40);
                if (v184)
                {
                  if (*(_BYTE *)(v184 + 5) != 1)
                  {
                    v185 = *(_QWORD *)(v183 + 72);
                    v186 = *(_QWORD *)(v184 + 72);
                    if (v185 && v185 == v186)
                    {
                      v188 = *(_QWORD *)(v80 + 48);
                      if (v188)
                      {
                        v189 = *(_QWORD *)(16 * (v78 & 0xFFFFFFFE) + 0x30);
                        if (v189)
                        {
                          if (v188 != v189)
                          {
                            v190 = v189 != 2;
                            v191 = v188 != 2;
                            if (v188 == 2 || v189 == 2)
                            {
LABEL_304:
                              if (!v191 && !v190)
                              {
                                v270[0] = &off_1E3583C90;
                                v270[1] = "Detected poly proto opportunity.";
                                JSC::InlineWatchpointSet::invalidate((uint64_t *)(v185 + 8), v252, v270, a4, a5, a6, a7, a8, *(double *)a9.i64);
                                v10 = v180;
                                v72 = BYTE1(v262);
                                v78 = *v77;
                              }
                            }
                            else
                            {
                              while (*(_DWORD *)(16 * (*(_DWORD *)v188 & 0xFFFFFFFE) + 0x1C) == *(_DWORD *)(16 * (*(_DWORD *)v189 & 0xFFFFFFFE) + 0x1C))
                              {
                                v193 = *(_QWORD *)(16 * (*(_DWORD *)v188 & 0xFFFFFFFE) + 0x30);
                                if (!v193)
                                  v193 = *(_QWORD *)(v188 + 16);
                                v194 = *(_QWORD *)(16 * (*(_DWORD *)v189 & 0xFFFFFFFE) + 0x30);
                                if (!v194)
                                  v194 = *(_QWORD *)(v189 + 16);
                                v191 = (v193 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                v190 = (v194 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                v195 = (v193 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v194 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                                v189 = v194;
                                v188 = v193;
                                if (v195)
                                  goto LABEL_304;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v72 == 1 && v77 == v260)
        {
          v172 = v78 & 0xFFFFFFFE;
          v173 = v75 + 8 * v253;
          *(_DWORD *)(v173 + 4) = 0;
          v174 = (_DWORD *)(v173 + 4);
          *(_DWORD *)(v75 + 8 * v253) = 0;
          if ((*(_DWORD *)(16 * (v78 & 0xFFFFFFFE) + 0x10) & 3) != 2)
          {
            v175 = *(_WORD *)(16 * (v78 & 0xFFFFFFFE) + 0xC);
            if ((v175 & 8) == 0
              && ((v175 & 0x10) == 0 || (v175 & 0x20) != 0)
              && ((v175 & 0x18) != 0x10 || (v175 & 0x20) == 0))
            {
              v247 = v10;
              v176 = (unsigned __int8 *)(v9 + 16);
              if (__ldaxr((unsigned __int8 *)(v9 + 16)))
              {
                __clrex();
                goto LABEL_252;
              }
              if (__stxr(1u, v176))
LABEL_252:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 16);
              *v76 = v172;
              *v174 = HIDWORD(v258);
              v178 = __ldxr(v176);
              if (v178 == 1)
              {
                if (!__stlxr(0, v176))
                {
LABEL_266:
                  v10 = v247;
                  if (v9 && *((_DWORD *)v252 + 190) >= *(unsigned __int8 *)(v9 + 7))
                  {
                    JSC::Heap::writeBarrierSlowPath((uint64_t)v252 + 192, v9);
                    v10 = v247;
                  }
                  goto LABEL_88;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 16), 0, a3, a4, a5, a6, a7, a8);
              goto LABEL_266;
            }
          }
        }
      }
    }
  }
LABEL_88:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v269, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v269 + 2))
  {
    v16 = &xmmword_1ECF4C7C0;
  }
  else
  {
    *(_QWORD *)(v17 + 8 * v255) = v71;
    *(_QWORD *)(*(_QWORD *)(v9 + 136) - 16 * v254 - 16) = v71;
  }
  if (v265)
  {
    v84 = *(_DWORD *)(v264 + 4);
    if (!v84)
    {
      __break(0xC471u);
      JUMPOUT(0x19882EA30);
    }
    *(_DWORD *)(v264 + 4) = v84 - 1;
  }
  return v16;
}

uint64_t *JSC::InlineWatchpointSet::invalidate(uint64_t *result, JSC::VM *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  uint64_t **v11;
  int v12;
  uint64_t *v14;
  uint64_t v15;

  v9 = *result;
  if ((*result & 1) != 0)
  {
    *result = 5;
  }
  else
  {
    if (*(_BYTE *)(v9 + 4) == 1)
    {
      __dmb(0xAu);
      v11 = (uint64_t **)(v9 + 8);
      result = *(uint64_t **)(v9 + 8);
      *(_BYTE *)(v9 + 4) = 2;
      v12 = *((_DWORD *)a2 + 229);
      *((_DWORD *)a2 + 229) = v12 + 1;
      if (result != (uint64_t *)(v9 + 8))
      {
        do
        {
          v15 = *result;
          v14 = (uint64_t *)result[1];
          *v14 = *result;
          *(_QWORD *)(v15 + 8) = v14;
          *result = 0;
          result[1] = 0;
          JSC::Watchpoint::fire((unint64_t)result, a2, a3, a4, a5, a6, a7, a8, a9);
          result = *v11;
        }
        while (*v11 != (uint64_t *)v11);
        v12 = *((_DWORD *)a2 + 229) - 1;
      }
      *((_DWORD *)a2 + 229) = v12;
      __dmb(0xAu);
    }
    *(_BYTE *)(v9 + 4) = 2;
  }
  return result;
}

__int128 *llint_slow_path_get_by_id_direct(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  WTF::StringImpl **v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  JSC::VM *v31;
  unsigned int v32;
  int OwnPropertySlotInline;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  __int16 v44;
  unsigned __int8 *v45;
  int v47;
  int v48;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t NotAnObjectError;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  unsigned __int8 *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t Index;
  unsigned int v101;
  int v102;
  JSC::VM **v103;
  _QWORD v104[2];
  _QWORD v105[2];
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  JSC::VM *v116;

  v9 = *(_QWORD *)(a1 + 16);
  v103 = *(JSC::VM ***)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v116 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19882FD40);
  }
  v15 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v71 = *(_DWORD *)(a2 + 6);
    v22 = *(_DWORD *)(a2 + 10);
    v101 = *(_DWORD *)(a2 + 14);
    v102 = *(_DWORD *)(a2 + 2);
    v23 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    if (v17 == 128)
    {
      v72 = *((__int16 *)a2 + 1);
      v19 = 1073741760;
      if (v72 <= 63)
        v73 = *((__int16 *)a2 + 1);
      else
        v73 = v72 + 1073741760;
      v21 = *((__int16 *)a2 + 2);
      v22 = *((unsigned __int16 *)a2 + 3);
      v101 = *((unsigned __int16 *)a2 + 4);
      v102 = v73;
      v23 = *((unsigned __int16 *)a2 + 5);
      if (v21 <= 63)
      {
LABEL_12:
        v24 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
        if (v24)
        {
          v25 = *v24;
          if (*v24 > v22)
          {
            v26 = &v24[2 * v22];
LABEL_15:
            v27 = (WTF::StringImpl **)(v26 + 2);
            v28 = v21;
            goto LABEL_16;
          }
        }
        else
        {
          v25 = 0;
        }
        v50 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120))
                         + 48);
        if (*v50 <= v22 - v25)
        {
          __break(0xC471u);
          JUMPOUT(0x19882FE78);
        }
        v26 = &v50[2 * (v22 - v25)];
        goto LABEL_15;
      }
    }
    else
    {
      v18 = (char)a2[1];
      v19 = 1073741808;
      if (v18 <= 15)
        v20 = (char)a2[1];
      else
        v20 = v18 + 1073741808;
      v21 = (char)a2[2];
      v22 = a2[3];
      v101 = a2[4];
      v102 = v20;
      v23 = a2[5];
      if (v21 <= 15)
        goto LABEL_12;
    }
    v71 = v21 + v19;
  }
  v27 = (WTF::StringImpl **)JSC::CodeBlock::identifier((JSC::CodeBlock *)v9, v22);
  v28 = v71;
  if (v71 >= 0x40000000)
  {
    v74 = *(_QWORD *)(a1 + 16);
    v75 = (v71 - 0x40000000);
    if (v75 >= *(unsigned int *)(v74 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19882FF9CLL);
    }
    v29 = (unint64_t *)(*(_QWORD *)(v74 + 160) + 8 * v75);
    goto LABEL_17;
  }
LABEL_16:
  v29 = (unint64_t *)(a1 + 8 * v28);
LABEL_17:
  v30 = *v29;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v106 = 0xFFFFFFFF00000000;
  v110 = 0x20000;
  v108 = 0;
  v109 = 0;
  v107 = v30;
  v111 = 0;
  LOBYTE(v112) = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v31 = v103[7];
  if ((v30 & 0xFFFE000000000002) != 0)
    goto LABEL_131;
  a3 = (unint64_t)*v27;
  v32 = *(unsigned __int8 *)(v30 + 5);
  if (v32 > 0x16)
  {
    OwnPropertySlotInline = JSC::JSObject::getOwnPropertySlotInline(v30, (uint64_t)v103, a3, (uint64_t)v105, a5, a6, a7, a8);
    goto LABEL_20;
  }
  if (v32 != 2)
  {
LABEL_131:
    if ((v30 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v103, v30);
      JSC::VM::throwException(v31, (JSC::JSGlobalObject *)v103, NotAnObjectError, v82, v83, v84, v85, v86);
    }
    goto LABEL_133;
  }
  if (*(_QWORD *)(*((_QWORD *)v31 + 5244) + 1768) == a3)
  {
    v76 = *(_QWORD *)(v30 + 8);
    if ((v76 & 1) != 0)
      v77 = (unsigned int *)(v30 + 16);
    else
      v77 = (unsigned int *)(v76 + 4);
    v78 = *v77;
    if ((v78 & 0x80000000) != 0)
    {
      *(double *)a9.i64 = (double)v78;
      v79 = COERCE__INT64((double)v78) + 0x2000000000000;
    }
    else
    {
      v79 = v78 | 0xFFFE000000000000;
    }
    v105[0] = v79;
    v80 = 14;
    goto LABEL_130;
  }
  if (a3)
  {
    v87 = *(_DWORD *)(a3 + 16);
    if ((v87 & 0x20) == 0)
    {
      v88 = *(_BYTE **)(a3 + 8);
      v89 = *(unsigned int *)(a3 + 4);
      if ((v87 & 4) != 0)
      {
        if (!(_DWORD)v89)
          goto LABEL_133;
        a3 = *v88 - 48;
        if (a3 > 9 || v89 >= 2 && *v88 == 48)
          goto LABEL_133;
        v94 = v88 + 1;
        v95 = v89 - 1;
        while (v95)
        {
          if (a3 > 0x19999999)
            goto LABEL_133;
          v96 = *v94 - 48;
          if (v96 > 9)
            goto LABEL_133;
          OwnPropertySlotInline = 0;
          v93 = __CFADD__(v96, 10 * a3);
          a3 = v96 + 10 * (_DWORD)a3;
          ++v94;
          --v95;
          if (v93)
            goto LABEL_20;
        }
      }
      else
      {
        if (!(_DWORD)v89)
          goto LABEL_133;
        a3 = *(unsigned __int16 *)v88 - 48;
        if (a3 > 9 || *(_WORD *)v88 == 48 && v89 > 1)
          goto LABEL_133;
        v90 = (unsigned __int16 *)(v88 + 2);
        v91 = v89 - 1;
        while (v91)
        {
          if (a3 > 0x19999999)
            goto LABEL_133;
          v92 = *v90 - 48;
          if (v92 > 9)
            goto LABEL_133;
          OwnPropertySlotInline = 0;
          v93 = __CFADD__(v92, 10 * a3);
          a3 = v92 + 10 * (_DWORD)a3;
          ++v90;
          --v91;
          if (v93)
            goto LABEL_20;
        }
      }
      if ((_DWORD)a3 != -1)
      {
        v97 = *(_QWORD *)(v30 + 8);
        v98 = (_DWORD *)((v97 & 1) != 0 ? v30 + 16 : v97 + 4);
        if (*v98 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)v30, (JSC::JSGlobalObject *)v103, a3, a4, a5, a6, a7, a8, a9);
          if (!*((_DWORD *)v31 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v31, v99, a3, a4, a5, a6, a7, a8))
          {
            v105[0] = Index;
            v80 = 10;
LABEL_130:
            LODWORD(v106) = v80;
            v108 = 0;
            OwnPropertySlotInline = 1;
            BYTE1(v110) = 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
LABEL_133:
  OwnPropertySlotInline = 0;
LABEL_20:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v103, &v116, "LLIntSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    goto LABEL_102;
  if (OwnPropertySlotInline)
  {
    if (BYTE1(v110) == 1)
    {
      v34 = v105[0];
    }
    else
    {
      if (BYTE1(v110) == 2)
        v70 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v105, (JSC::JSGlobalObject *)v103, a3, a4, a5, a6, a7, a8);
      else
        v70 = JSC::PropertySlot::customGetter((uint64_t)v105, v103[7], *v27);
      v34 = v70;
    }
  }
  else
  {
    v34 = 10;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v103, &v116, "LLIntSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    goto LABEL_102;
  if ((_BYTE)qword_1ECF4C789)
  {
    v35 = BYTE1(v110);
    if (BYTE1(v110))
    {
      if (v110 == 1)
      {
        v36 = *(_QWORD *)(v9 + 136);
        v37 = *(unsigned __int16 *)(v36 + 88);
        if (!*(_WORD *)(v36 + 88))
          v37 = *(_DWORD *)(v36 + 272);
        v38 = (v36 + v37 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v39 = (_DWORD *)(v38 + 8 * v23);
        if (*v39)
        {
          v51 = *v39 & 0xFFFFFFFE;
          v52 = 16 * v51;
          v53 = *(_DWORD *)v30 & 0xFFFFFFFE;
          v54 = 16 * v53;
          v55 = !(_DWORD)v51 || (_DWORD)v53 == 0;
          if (!v55 && v52 != v54 && *(_DWORD *)(16 * v51 + 0x1C) == *(_DWORD *)(16 * v53 + 0x1C))
          {
            v57 = *(_QWORD *)(16 * v51 + 0x40);
            if (v57)
            {
              if (*(_BYTE *)(v57 + 5) != 1)
              {
                v58 = *(_QWORD *)(16 * v53 + 0x40);
                if (v58)
                {
                  if (*(_BYTE *)(v58 + 5) != 1)
                  {
                    v59 = *(_QWORD *)(v57 + 72);
                    v60 = *(_QWORD *)(v58 + 72);
                    if (v59 && v59 == v60)
                    {
                      v62 = *(_QWORD *)(v52 + 48);
                      if (v62)
                      {
                        v63 = *(_QWORD *)(v54 + 48);
                        if (v63)
                        {
                          if (v62 != v63)
                          {
                            v64 = v63 != 2;
                            v65 = v62 != 2;
                            if (v62 == 2 || v63 == 2)
                            {
LABEL_97:
                              if (!v65 && !v64)
                              {
                                v104[0] = &off_1E3583C90;
                                v104[1] = "Detected poly proto opportunity.";
                                JSC::InlineWatchpointSet::invalidate((uint64_t *)(v59 + 8), (JSC::VM *)v10, v104, a4, a5, a6, a7, a8, *(double *)a9.i64);
                                v35 = BYTE1(v110);
                              }
                            }
                            else
                            {
                              while (*(_DWORD *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x1C) == *(_DWORD *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x1C))
                              {
                                v67 = *(_QWORD *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x30);
                                if (!v67)
                                  v67 = *(_QWORD *)(v62 + 16);
                                v68 = *(_QWORD *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x30);
                                if (!v68)
                                  v68 = *(_QWORD *)(v63 + 16);
                                v65 = (v67 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                v64 = (v68 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                v69 = (v67 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v68 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                                v63 = v68;
                                v62 = v67;
                                if (v69)
                                  goto LABEL_97;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v35 == 1)
        {
          v40 = v23;
          v41 = *(_DWORD *)v30 & 0xFFFFFFFE;
          v42 = v38 + 8 * v40;
          *(_DWORD *)(v42 + 4) = 0;
          v43 = (_DWORD *)(v42 + 4);
          *(_DWORD *)(v38 + 8 * v40) = 0;
          if ((*(_DWORD *)(16 * v41 + 0x10) & 3) != 2)
          {
            v44 = *(_WORD *)(16 * v41 + 0xC);
            if ((v44 & 8) == 0
              && ((v44 & 0x10) == 0 || (v44 & 0x20) != 0)
              && ((v44 & 0x18) != 0x10 || (v44 & 0x20) == 0))
            {
              v45 = (unsigned __int8 *)(v9 + 16);
              if (__ldaxr((unsigned __int8 *)(v9 + 16)))
              {
                __clrex();
              }
              else if (!__stxr(1u, v45))
              {
LABEL_42:
                *v39 = v41;
                *v43 = HIDWORD(v106);
                v47 = __ldxr(v45);
                if (v47 == 1)
                {
                  if (!__stlxr(0, v45))
                    goto LABEL_47;
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 16), 0, a3, a4, a5, a6, a7, a8);
LABEL_47:
                if (v9 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v9 + 7))
                  JSC::Heap::writeBarrierSlowPath(v10 + 192, v9);
                goto LABEL_50;
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 16);
              goto LABEL_42;
            }
          }
        }
      }
    }
  }
LABEL_50:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v103, &v116, "LLIntSlowPaths", v15);
  if (!*((_QWORD *)v116 + 2))
  {
    *(_QWORD *)(a1 + 8 * v102) = v34;
    *(_QWORD *)(*(_QWORD *)(v9 + 136) - 16 * v101 - 16) = v34;
    goto LABEL_54;
  }
LABEL_102:
  v15 = &xmmword_1ECF4C7C0;
LABEL_54:
  if (v113)
  {
    v48 = *(_DWORD *)(v112 + 4);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x19882FDC4);
    }
    *(_DWORD *)(v112 + 4) = v48 - 1;
  }
  return v15;
}

__int128 *llint_slow_path_get_by_id_with_this(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t *v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _DWORD *v74;
  unsigned __int16 *v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  unint64_t v83;
  JSC::VM *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  BOOL v95;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int8x16_t **v100;
  int v101;
  _WORD *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  JSC::VM *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned __int16 *v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  JSC::VM *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  uint64_t v151;
  unint64_t v152;
  _DWORD *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int8x16_t **v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned __int8 *v162;
  int v163;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  double v165;
  const unsigned __int8 *v166;
  unsigned int v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int *v172;
  uint64_t v173;
  uint64_t Index;
  int v175;
  char v176;
  uint64_t v177;
  int v178;
  _WORD *v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  unsigned __int16 *v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  unsigned __int8 *v191;
  unsigned int v192;
  uint64_t v193;
  _DWORD *v194;
  unsigned int v195;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned int v199;
  char v200;
  unsigned int v201;
  int v202;
  JSC::JSGlobalObject *v203;
  uint64_t (*v204)(unint64_t);
  uint64_t v205;
  unint64_t v206;
  _DWORD *v207;
  _DWORD *v208;
  _QWORD v209[2];
  uint64_t v210;
  char v211;
  int8x16_t **v212;
  uint64_t v213;
  unint64_t v214;
  JSC::VM *v215;
  JSC::VM *v216[18];

  v216[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 16);
  v203 = *(JSC::JSGlobalObject **)(v9 + 8);
  v10 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v215 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988309D0);
  }
  v15 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v144 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
    v24 = *(_DWORD *)(a2 + 14);
    v201 = *(_DWORD *)(a2 + 18);
    v202 = *(_DWORD *)(a2 + 2);
  }
  else
  {
    if (v17 == 128)
    {
      v145 = *((__int16 *)a2 + 1);
      v19 = 1073741760;
      if (v145 <= 63)
        v146 = *((__int16 *)a2 + 1);
      else
        v146 = v145 + 1073741760;
      v21 = *((__int16 *)a2 + 2);
      v147 = *((__int16 *)a2 + 3);
      if (v147 <= 63)
        v23 = *((__int16 *)a2 + 3);
      else
        v23 = v147 + 1073741760;
      v24 = *((unsigned __int16 *)a2 + 4);
      v201 = *((unsigned __int16 *)a2 + 5);
      v202 = v146;
      if (v21 <= 63)
      {
LABEL_15:
        v25 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
        if (v25)
        {
          v26 = *v25;
          if (*v25 > v24)
          {
            v27 = &v25[2 * v24];
LABEL_18:
            v28 = (unint64_t *)(v27 + 2);
            v29 = v21;
            goto LABEL_19;
          }
        }
        else
        {
          v26 = 0;
        }
        v74 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120))
                         + 48);
        if (*v74 <= v24 - v26)
        {
          __break(0xC471u);
          JUMPOUT(0x198830ADCLL);
        }
        v27 = &v74[2 * (v24 - v26)];
        goto LABEL_18;
      }
    }
    else
    {
      v18 = (char)a2[1];
      v19 = 1073741808;
      if (v18 <= 15)
        v20 = (char)a2[1];
      else
        v20 = v18 + 1073741808;
      v21 = (char)a2[2];
      v22 = (char)a2[3];
      if (v22 <= 15)
        v23 = (char)a2[3];
      else
        v23 = v22 + 1073741808;
      v24 = a2[4];
      v201 = a2[5];
      v202 = v20;
      if (v21 <= 15)
        goto LABEL_15;
    }
    v144 = v21 + v19;
  }
  v148 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
  if (v148)
  {
    v149 = *v148;
    if (*v148 > v24)
    {
      v150 = &v148[2 * v24];
      goto LABEL_246;
    }
  }
  else
  {
    v149 = 0;
  }
  v153 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
  if (*v153 <= v24 - v149)
  {
    __break(0xC471u);
    JUMPOUT(0x198830D70);
  }
  v150 = &v153[2 * (v24 - v149)];
LABEL_246:
  v28 = (unint64_t *)(v150 + 2);
  v29 = v144;
  if (v144 >= 0x40000000)
  {
    v151 = *(_QWORD *)(a1 + 16);
    v152 = (v144 - 0x40000000);
    if (v152 >= *(unsigned int *)(v151 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883120CLL);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v151 + 160) + 8 * v152);
    goto LABEL_20;
  }
LABEL_19:
  v30 = (unint64_t *)(a1 + 8 * v29);
LABEL_20:
  v31 = *v30;
  v214 = *v30;
  if (v23 >= 0x40000000)
  {
    v79 = *(_QWORD *)(a1 + 16);
    if ((v23 - 0x40000000) >= *(_DWORD *)(v79 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988311A8);
    }
    v32 = (_QWORD *)(*(_QWORD *)(v79 + 160) + 8 * (v23 - 0x40000000));
  }
  else
  {
    v32 = (_QWORD *)(a1 + 8 * v23);
  }
  v33 = (_DWORD *)*v32;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v206 = 0xFFFFFFFF00000000;
  LOBYTE(v210) = 0;
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v208 = 0;
  memset(v209, 0, 13);
  v207 = v33;
  v34 = *v28;
  if ((v31 & 0xFFFE000000000002) == 0)
  {
    v35 = *((_QWORD *)v203 + 7);
    v36 = *(unsigned __int8 *)(v31 + 5);
    if (v36 > 0x16)
      goto LABEL_24;
    if (v36 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v35 + 41952) + 1768) == v34)
      {
        v171 = *(_QWORD *)(v31 + 8);
        if ((v171 & 1) != 0)
          v172 = (unsigned int *)(v31 + 16);
        else
          v172 = (unsigned int *)(v171 + 4);
        v173 = *v172;
        if ((v173 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v173) + 0x2000000000000;
        else
          Index = v173 | 0xFFFE000000000000;
        v175 = 14;
        goto LABEL_355;
      }
      if (!v34 || (v178 = *(_DWORD *)(v34 + 16), (v178 & 0x20) != 0))
      {
LABEL_369:
        v176 = 0;
LABEL_356:
        if (*(_DWORD *)(v35 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v35, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_68;
        }
        if ((v176 & 1) != 0)
          goto LABEL_84;
        goto LABEL_358;
      }
      v179 = *(_WORD **)(v34 + 8);
      v180 = *(unsigned int *)(v34 + 4);
      if ((v178 & 4) == 0)
      {
        if ((_DWORD)v180)
        {
          v181 = (unsigned __int16)*v179 - 48;
          if (v181 <= 9 && (*v179 != 48 || v180 <= 1))
          {
            v186 = v179 + 1;
            v187 = v180 - 1;
            while (v187)
            {
              if (v181 > 0x19999999)
                goto LABEL_365;
              v188 = *v186 - 48;
              if (v188 > 9)
                goto LABEL_365;
              v182 = 0;
              LOBYTE(v180) = 0;
              v183 = 0;
              v78 = __CFADD__(v188, 10 * v181);
              v181 = v188 + 10 * v181;
              ++v186;
              --v187;
              if (v78)
                goto LABEL_367;
            }
            v183 = v181 & 0xFFFFFF00;
            v182 = 0x100000000;
            if (v181 == -1)
            {
              v182 = 0;
              LOBYTE(v180) = 0;
            }
            else
            {
              LOBYTE(v180) = v181;
            }
            if (v181 == -1)
              v183 = 0;
            goto LABEL_367;
          }
LABEL_365:
          v182 = 0;
          LOBYTE(v180) = 0;
        }
        else
        {
          v182 = 0;
        }
        v183 = 0;
LABEL_367:
        v184 = v180;
LABEL_368:
        if ((v182 & 0x100000000) != 0)
        {
          a3 = v183 | v184;
          v193 = *(_QWORD *)(v31 + 8);
          v194 = (_DWORD *)((v193 & 1) != 0 ? v31 + 16 : v193 + 4);
          if (*v194 > a3)
          {
            Index = JSC::JSString::getIndex((JSC::JSString *)v31, v203, a3, a4, a5, a6, a7, a8, a9);
            if (!*(_DWORD *)(v35 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v35, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
            {
              v175 = 10;
LABEL_355:
              v204 = (uint64_t (*)(unint64_t))Index;
              LODWORD(v206) = v175;
              v208 = 0;
              v176 = 1;
              BYTE1(v209[1]) = 1;
              goto LABEL_356;
            }
          }
        }
        goto LABEL_369;
      }
      if ((_DWORD)v180)
      {
        v195 = *(unsigned __int8 *)v179 - 48;
        if (v195 <= 9 && (v180 < 2 || *(_BYTE *)v179 != 48))
        {
          v197 = v180 - 1;
          v198 = (unsigned __int8 *)v179 + 1;
          while (v197)
          {
            if (v195 > 0x19999999)
              goto LABEL_456;
            v199 = *v198 - 48;
            if (v199 > 9)
              goto LABEL_456;
            v184 = 0;
            LOBYTE(v180) = 0;
            v182 = 0;
            v78 = __CFADD__(v199, 10 * v195);
            v195 = v199 + 10 * v195;
            --v197;
            ++v198;
            if (v78)
              goto LABEL_458;
          }
          if (v195 != -1)
          {
            v184 = v195 & 0xFFFFFF00;
            v182 = 0x100000000;
            LOBYTE(v180) = v195;
            goto LABEL_458;
          }
        }
LABEL_456:
        v184 = 0;
        LOBYTE(v180) = 0;
      }
      else
      {
        v184 = 0;
      }
      v182 = 0;
LABEL_458:
      v183 = v180;
      goto LABEL_368;
    }
  }
LABEL_358:
  v177 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v214, (unint64_t)v203);
  if (!v177)
    goto LABEL_68;
  v31 = v177;
  v35 = *((_QWORD *)v203 + 7);
LABEL_24:
  v37 = (_BYTE *)(v31 + 6);
  v38 = v34 >> 4;
  v39 = v31;
  if ((*(_BYTE *)(v31 + 6) & 8) != 0)
  {
LABEL_146:
    if (!v34)
      goto LABEL_155;
    v101 = *(_DWORD *)(v34 + 16);
    if ((v101 & 0x20) != 0)
      goto LABEL_155;
    v102 = *(_WORD **)(v34 + 8);
    v103 = *(unsigned int *)(v34 + 4);
    if ((v101 & 4) == 0)
    {
      if ((_DWORD)v103)
      {
        v104 = (unsigned __int16)*v102 - 48;
        if (v104 <= 9 && (*v102 != 48 || v103 <= 1))
        {
          v133 = v102 + 1;
          v134 = v103 - 1;
          while (v134)
          {
            if (v104 > 0x19999999)
              goto LABEL_151;
            v135 = *v133 - 48;
            if (v135 > 9)
              goto LABEL_151;
            v105 = 0;
            LOBYTE(v103) = 0;
            v106 = 0;
            v78 = __CFADD__(v135, 10 * v104);
            v104 = v135 + 10 * v104;
            ++v133;
            --v134;
            if (v78)
              goto LABEL_153;
          }
          v106 = v104 & 0xFFFFFF00;
          v105 = 0x100000000;
          if (v104 == -1)
          {
            v105 = 0;
            LOBYTE(v103) = 0;
          }
          else
          {
            LOBYTE(v103) = v104;
          }
          if (v104 == -1)
            v106 = 0;
          goto LABEL_153;
        }
LABEL_151:
        v105 = 0;
        LOBYTE(v103) = 0;
      }
      else
      {
        v105 = 0;
      }
      v106 = 0;
LABEL_153:
      v107 = v103;
LABEL_154:
      if ((v105 & 0x100000000) == 0)
      {
LABEL_155:
        v108 = (JSC::VM *)*((_QWORD *)v203 + 7);
        v68 = 10;
        while (1)
        {
          v109 = 16 * (*(_DWORD *)v39 & 0xFFFFFFFE);
          if ((*(_BYTE *)(v39 + 6) & 8) == 0)
            break;
          v200 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C) + 0x68))(v39, v203, v34, &v204);
          if (*((_DWORD *)v108 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v108, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_68;
          }
          if ((v200 & 1) != 0)
            goto LABEL_84;
          if (BYTE2(v209[1]) == 3)
          {
            if (BYTE4(v209[1]))
              goto LABEL_68;
            v159 = *(unsigned __int8 *)(v39 + 5);
            if (v159 != 61)
            {
LABEL_272:
              if (!v34)
                goto LABEL_169;
              if ((v159 - 50) < 0xFFFFFFF5)
                goto LABEL_169;
              v160 = *(_DWORD *)(v34 + 16);
              if ((v160 & 0x20) != 0)
                goto LABEL_169;
              v161 = *(unsigned int *)(v34 + 4);
              if (!(_DWORD)v161)
                goto LABEL_169;
              v162 = *(unsigned __int8 **)(v34 + 8);
              if ((v160 & 4) == 0)
              {
                v163 = *(unsigned __int16 *)v162;
                if ((_DWORD)v161 == 1)
                  goto LABEL_278;
                if (v163 == 45)
                {
                  v163 = *((unsigned __int16 *)v162 + 1);
                  goto LABEL_284;
                }
                if ((v163 - 48) >= 0xA && ((_DWORD)v161 != 8 || v163 != 73))
                {
LABEL_301:
                  if ((_DWORD)v161 != 3 || v163 != 78)
                    goto LABEL_169;
                }
LABEL_291:
                v31 = v31 & 0xFFFFFF0000000000 | v161 | ((unint64_t)((v160 >> 2) & 1) << 32);
                JSC::jsToNumber(v162, v31);
                WTF::numberToString(v216, v165);
                if (WTF::equal(v34, (unint64_t)v216, v166))
                  goto LABEL_68;
                goto LABEL_169;
              }
              v163 = *v162;
              if ((_DWORD)v161 == 1)
              {
LABEL_278:
                if ((v163 - 48) < 0xA)
                  goto LABEL_68;
                goto LABEL_169;
              }
              if (v163 == 45)
              {
                v163 = v162[1];
LABEL_284:
                if ((v163 - 48) < 0xA)
                {
                  if ((_DWORD)v161 == 2)
                    goto LABEL_68;
                  goto LABEL_291;
                }
                if ((_DWORD)v161 != 9)
                  goto LABEL_169;
              }
              else
              {
                if ((v163 - 48) < 0xA)
                  goto LABEL_291;
                if ((_DWORD)v161 != 8)
                  goto LABEL_301;
              }
              if (v163 != 73)
                goto LABEL_169;
              goto LABEL_291;
            }
          }
          else
          {
            v159 = *(unsigned __int8 *)(v39 + 5);
            if (v159 != 61)
              goto LABEL_272;
            if (BYTE2(v209[1]) == 1)
              goto LABEL_68;
          }
LABEL_169:
          if ((*(_WORD *)(v109 + 12) & 0x800) == 0)
          {
            v121 = *(_DWORD *)v39;
LABEL_171:
            v122 = *(_QWORD *)(16 * (v121 & 0xFFFFFFFE) + 0x30);
            if (!v122)
              v122 = *(_QWORD *)(v39 + 16);
            goto LABEL_173;
          }
          v121 = *(_DWORD *)v39;
          if (BYTE2(v209[1]) == 3)
            goto LABEL_171;
          v158 = 16 * (v121 & 0xFFFFFFFE);
          if ((*(_WORD *)(v158 + 12) & 0x800) != 0)
          {
            v122 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                      * *(unsigned int *)(v158 + 76)
                                                                                      + 0xB0))(v39, v203);
          }
          else
          {
            v122 = *(_QWORD *)(v158 + 48);
            if (!v122)
              v122 = *(_QWORD *)(v39 + 16);
          }
          if (*((_DWORD *)v108 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v108, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_68;
          }
LABEL_173:
          if ((v122 & 0xFFFE000000000002) == 0)
          {
            v39 = v122;
            if (*(unsigned __int8 *)(v122 + 5) > 0x16u)
              continue;
          }
          goto LABEL_69;
        }
        if ((_DWORD)v38 && (v38 & ~*(_DWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v110 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x58);
          if (v110
            || (v123 = *(_QWORD *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x40)) != 0
            && (*(_BYTE *)(v123 + 5) == 1 || *(_DWORD *)(v123 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE)), v108, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v110))
          {
            if (*(_DWORD *)(v110 + 24))
            {
              v111 = *(_QWORD *)(v110 + 16);
              v112 = v111 & 0xFFFFFFFFFFFFFFFELL;
              v113 = *(unsigned int *)(v110 + 8);
              v114 = *(_DWORD *)(v34 + 16);
              if ((v111 & 1) != 0)
              {
                if ((v114 & 0x20) != 0)
                  v114 = *(_DWORD *)(v34 + 32);
                v115 = *(_DWORD *)(v110 + 12);
                v116 = (v114 >> 8) & *(_QWORD *)&v115;
                v117 = *(unsigned __int8 *)(v112 + v116);
                if (*(_BYTE *)(v112 + v116))
                {
                  v118 = v112 + v113;
                  v119 = 1;
                  while (1)
                  {
                    v120 = *(_QWORD *)(v118 + 8 * (v117 - 1));
                    if (v34 == (v120 & 0xFFFFFFFFFFFFLL))
                      break;
                    v116 = ((_DWORD)v116 + v119) & v115;
                    v117 = *(unsigned __int8 *)(v112 + v116);
                    ++v119;
                    if (!*(_BYTE *)(v112 + v116))
                      goto LABEL_168;
                  }
                  a6 = (v120 >> 16) & 0xFF00000000 | HIBYTE(v120);
                  goto LABEL_181;
                }
              }
              else
              {
                if ((v114 & 0x20) != 0)
                  v114 = *(_DWORD *)(v34 + 32);
                v124 = *(_DWORD *)(v110 + 12);
                v125 = v124 & (v114 >> 8);
                v126 = *(_DWORD *)(v112 + 4 * v125);
                if (v126)
                {
                  v127 = v112 + 4 * v113;
                  v128 = 1;
                  while (1)
                  {
                    v129 = (v126 - 1);
                    if (v34 == *(_QWORD *)(v127 + 16 * v129))
                      break;
                    v125 = (v125 + v128) & v124;
                    v126 = *(_DWORD *)(v112 + 4 * v125);
                    ++v128;
                    if (!v126)
                      goto LABEL_168;
                  }
                  a6 = *(unsigned int *)(v127 + 16 * v129 + 8) | ((unint64_t)*(unsigned __int8 *)(v127 + 16 * v129 + 12) << 32);
LABEL_181:
                  if ((_DWORD)a6 != -1)
                  {
                    a5 = HIDWORD(a6);
                    if ((int)a6 <= 63)
                    {
                      v130 = v39 + 16;
                      v131 = a6 << 32;
                    }
                    else
                    {
                      v130 = *(_QWORD *)(v39 + 8) - 8;
                      v131 = 0x3F00000000 - (a6 << 32);
                    }
                    a4 = *(_QWORD *)(v130 + (v131 >> 29));
                    if ((a4 & 0xFFFE000000000002) == 0)
                    {
                      v132 = *(unsigned __int8 *)(a4 + 5);
                      if (v132 != 5)
                      {
                        if (v132 != 6)
                          goto LABEL_196;
                        v154 = *(_DWORD *)(v109 + 16) & 3;
                        v155 = *(_QWORD *)(a4 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v157 = *(int8x16_t ***)(a4 + 24);
                          v156 = *(_QWORD *)(a4 + 32);
                          v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
                          v205 = v155;
                          LODWORD(v206) = HIDWORD(a6);
                          v208 = (_DWORD *)v39;
                          BYTE1(v209[1]) = 3;
                          if (v154 != 2)
                            LOBYTE(v209[1]) = 1;
                          BYTE3(v209[1]) = 1;
                          v212 = v157;
                          v213 = v156;
                          goto LABEL_84;
                        }
                        v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v205 = v155;
                        LODWORD(v206) = HIDWORD(a6);
                        v208 = (_DWORD *)v39;
                        BYTE1(v209[1]) = 3;
                        if (v154 == 2)
                          goto LABEL_84;
LABEL_215:
                        LOBYTE(v209[1]) = 1;
                        goto LABEL_84;
                      }
                      v81 = (unsigned int *)v39;
                      v82 = (uint64_t)v108;
LABEL_112:
                      JSC::JSObject::fillGetterPropertySlot(v81, v82, (uint64_t)&v204, a4, a5, a6);
                      goto LABEL_84;
                    }
LABEL_196:
                    v204 = (uint64_t (*)(unint64_t))a4;
                    v208 = (_DWORD *)v39;
LABEL_83:
                    v206 = __PAIR64__(a6, a5);
                    LOWORD(v209[1]) = 257;
                    goto LABEL_84;
                  }
                }
              }
            }
          }
        }
LABEL_168:
        if ((*(_BYTE *)(v39 + 6) & 0x20) != 0
          && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v39, v108, v34, (uint64_t)&v204) & 1) != 0)
        {
          goto LABEL_84;
        }
        goto LABEL_169;
      }
      v136 = v106 | v107;
      v137 = (JSC::VM *)*((_QWORD *)v203 + 7);
      v68 = 10;
      while (1)
      {
        v138 = 16 * (*(_DWORD *)v31 & 0xFFFFFFFE);
        v139 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v138 + 0x4C) + 0x70))(v31, v203, v136, &v204);
        v141 = v139;
        if (*((_DWORD *)v137 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v137, v140, a3, a4, a5, a6, a7, a8);
          if (((hasExceptionsAfterHandlingTraps | v141) & 1) != 0)
          {
            if (!hasExceptionsAfterHandlingTraps)
              goto LABEL_84;
LABEL_68:
            v68 = 10;
            goto LABEL_69;
          }
        }
        else if ((v139 & 1) != 0)
        {
          goto LABEL_84;
        }
        if (BYTE2(v209[1]) == 3)
        {
          if (BYTE4(v209[1]))
            goto LABEL_68;
          v142 = *(unsigned __int8 *)(v31 + 5);
          if (v142 == 61)
            goto LABEL_225;
        }
        else
        {
          v142 = *(unsigned __int8 *)(v31 + 5);
          if (v142 == 61)
          {
            if (BYTE2(v209[1]) == 1)
              goto LABEL_68;
            goto LABEL_225;
          }
        }
        if ((v142 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v31, v140, a3, a4, a5, a6, a7, a8) <= v136)
        {
          goto LABEL_68;
        }
LABEL_225:
        if ((*(_WORD *)(v138 + 12) & 0x800) == 0 || BYTE2(v209[1]) == 3)
        {
          v143 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x30);
          if (!v143)
            v143 = *(_QWORD *)(v31 + 16);
        }
        else
        {
          if ((*(_WORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v143 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0xB0))(v31, v203);
          }
          else
          {
            v143 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x30);
            if (!v143)
              v143 = *(_QWORD *)(v31 + 16);
          }
          if (*((_DWORD *)v137 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v137, v140, a3, a4, a5, a6, a7, a8))
            goto LABEL_68;
        }
        if ((v143 & 0xFFFE000000000002) == 0)
        {
          v31 = v143;
          if (*(unsigned __int8 *)(v143 + 5) > 0x16u)
            continue;
        }
        goto LABEL_69;
      }
    }
    if ((_DWORD)v103)
    {
      v189 = *(unsigned __int8 *)v102 - 48;
      if (v189 <= 9 && (v103 < 2 || *(_BYTE *)v102 != 48))
      {
        v190 = v103 - 1;
        v191 = (unsigned __int8 *)v102 + 1;
        while (v190)
        {
          if (v189 > 0x19999999)
            goto LABEL_392;
          v192 = *v191 - 48;
          if (v192 > 9)
            goto LABEL_392;
          v107 = 0;
          LOBYTE(v103) = 0;
          v105 = 0;
          v78 = __CFADD__(v192, 10 * v189);
          v189 = v192 + 10 * v189;
          --v190;
          ++v191;
          if (v78)
            goto LABEL_394;
        }
        if (v189 == -1)
          v107 = 0;
        else
          v107 = v189 & 0xFFFFFF00;
        if (v189 == -1)
          LOBYTE(v103) = 0;
        else
          LOBYTE(v103) = v189;
        if (v189 == -1)
          v105 = 0;
        else
          v105 = 0x100000000;
        goto LABEL_394;
      }
LABEL_392:
      v107 = 0;
      LOBYTE(v103) = 0;
    }
    else
    {
      v107 = 0;
    }
    v105 = 0;
LABEL_394:
    v106 = v103;
    goto LABEL_154;
  }
  v40 = v31;
  while (1)
  {
    v41 = *(_DWORD *)v40 & 0xFFFFFFFE;
    v42 = 16 * v41;
    if (!(_DWORD)v38 || (v38 & ~*(_DWORD *)(16 * v41 + 0x20)) != 0)
      goto LABEL_37;
    v43 = *(_QWORD *)(16 * v41 + 0x58);
    if (!v43)
    {
      v54 = *(_QWORD *)(16 * v41 + 0x40);
      if (!v54 || *(_BYTE *)(v54 + 5) != 1 && *(_DWORD *)(v54 + 80) < 2u)
        goto LABEL_37;
      JSC::Structure::materializePropertyTable((JSC::Structure *)v42, (JSC::VM *)v35, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      if (!v43)
        goto LABEL_37;
    }
    if (!*(_DWORD *)(v43 + 24))
      goto LABEL_37;
    v44 = *(_QWORD *)(v43 + 16);
    v45 = v44 & 0xFFFFFFFFFFFFFFFELL;
    v46 = *(unsigned int *)(v43 + 8);
    v47 = *(_DWORD *)(v34 + 16);
    if ((v44 & 1) != 0)
    {
      if ((v47 & 0x20) != 0)
        v47 = *(_DWORD *)(v34 + 32);
      v48 = *(_DWORD *)(v43 + 12);
      v49 = (v47 >> 8) & *(_QWORD *)&v48;
      v50 = *(unsigned __int8 *)(v45 + v49);
      if (!*(_BYTE *)(v45 + v49))
        goto LABEL_37;
      v51 = v45 + v46;
      v52 = 1;
      while (1)
      {
        v53 = *(_QWORD *)(v51 + 8 * (v50 - 1));
        if (v34 == (v53 & 0xFFFFFFFFFFFFLL))
          break;
        v49 = ((_DWORD)v49 + v52) & v48;
        v50 = *(unsigned __int8 *)(v45 + v49);
        ++v52;
        if (!*(_BYTE *)(v45 + v49))
          goto LABEL_37;
      }
      a6 = (v53 >> 16) & 0xFF00000000 | HIBYTE(v53);
    }
    else
    {
      if ((v47 & 0x20) != 0)
        v47 = *(_DWORD *)(v34 + 32);
      v55 = *(_DWORD *)(v43 + 12);
      v56 = v55 & (v47 >> 8);
      v57 = *(_DWORD *)(v45 + 4 * v56);
      if (!v57)
        goto LABEL_37;
      v58 = v45 + 4 * v46;
      v59 = 1;
      while (1)
      {
        v60 = (v57 - 1);
        if (v34 == *(_QWORD *)(v58 + 16 * v60))
          break;
        v56 = (v56 + v59) & v55;
        v57 = *(_DWORD *)(v45 + 4 * v56);
        ++v59;
        if (!v57)
          goto LABEL_37;
      }
      a6 = *(unsigned int *)(v58 + 16 * v60 + 8) | ((unint64_t)*(unsigned __int8 *)(v58 + 16 * v60 + 12) << 32);
    }
    if ((_DWORD)a6 != -1)
    {
      a5 = HIDWORD(a6);
      if ((int)a6 <= 63)
      {
        v71 = v40 + 16;
        v72 = a6 << 32;
      }
      else
      {
        v71 = *(_QWORD *)(v40 + 8) - 8;
        v72 = 0x3F00000000 - (a6 << 32);
      }
      a4 = *(_QWORD *)(v71 + (v72 >> 29));
      if ((a4 & 0xFFFE000000000002) != 0)
        goto LABEL_82;
      v73 = *(unsigned __int8 *)(a4 + 5);
      if (v73 == 5)
      {
        v81 = (unsigned int *)v40;
        v82 = v35;
        goto LABEL_112;
      }
      if (v73 != 6)
      {
LABEL_82:
        v204 = (uint64_t (*)(unint64_t))a4;
        v208 = (_DWORD *)v40;
        goto LABEL_83;
      }
      v97 = *(_DWORD *)(v42 + 16) & 3;
      v98 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v205 = v98;
        LODWORD(v206) = HIDWORD(a6);
        v208 = (_DWORD *)v40;
        BYTE1(v209[1]) = 3;
        if (v97 == 2)
          goto LABEL_84;
        goto LABEL_215;
      }
      v100 = *(int8x16_t ***)(a4 + 24);
      v99 = *(_QWORD *)(a4 + 32);
      v204 = *(uint64_t (**)(unint64_t))(a4 + 8);
      v205 = v98;
      LODWORD(v206) = HIDWORD(a6);
      v208 = (_DWORD *)v40;
      BYTE1(v209[1]) = 3;
      if (v97 != 2)
        LOBYTE(v209[1]) = 1;
      BYTE3(v209[1]) = 1;
      v212 = v100;
      v213 = v99;
LABEL_84:
      if (BYTE1(v209[1]) == 1)
      {
        v68 = (uint64_t)v204;
      }
      else
      {
        if (BYTE1(v209[1]) == 2)
        {
          v80 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v204, v203, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v90 = (unint64_t)v208;
          v91 = *(_QWORD *)(16 * (*v208 & 0xFFFFFFFE) + 0x28);
          if ((v206 & 0x20) != 0)
            v90 = (unint64_t)v207;
          if (BYTE3(v209[1]) != 1)
            goto LABEL_141;
          if ((v90 & 0xFFFE000000000002) != 0)
            goto LABEL_305;
          v92 = *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C);
          v93 = *(_DWORD *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C) != 0;
          v94 = 16 * v92;
          if ((_DWORD)v92)
            v95 = v212 == (int8x16_t **)v94;
          else
            v95 = 1;
          if (!v95)
          {
            do
            {
              v94 = *(_QWORD *)(v94 + 16);
              v93 = v94 != 0;
            }
            while ((int8x16_t **)v94 != v212 && v94 != 0);
          }
          if (!v93)
          {
LABEL_305:
            v216[0] = *((JSC::VM **)v203 + 7);
            v80 = JSC::throwDOMAttributeGetterTypeError(v91, v216, v212, (WTF::StringImpl *)v34);
          }
          else
          {
LABEL_141:
            v80 = v204(v91);
          }
        }
        v68 = v80;
      }
      goto LABEL_69;
    }
LABEL_37:
    if ((*v37 & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v40, (JSC::VM *)v35, v34, (uint64_t)&v204) & 1) != 0)
    {
      goto LABEL_84;
    }
    v39 = *(_QWORD *)(v42 + 48);
    if (!v39)
      v39 = *(_QWORD *)(v40 + 16);
    if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) < 0x17u)
      break;
    v37 = (_BYTE *)(v39 + 6);
    v40 = v39;
    if ((*(_BYTE *)(v39 + 6) & 8) != 0)
      goto LABEL_146;
  }
  if (!v34)
    goto LABEL_68;
  v61 = *(_DWORD *)(v34 + 16);
  if ((v61 & 0x20) != 0)
    goto LABEL_68;
  v62 = *(_BYTE **)(v34 + 8);
  v63 = *(unsigned int *)(v34 + 4);
  if ((v61 & 4) != 0)
  {
    if ((_DWORD)v63)
    {
      v167 = *v62 - 48;
      if (v167 <= 9 && (v63 < 2 || *v62 != 48))
      {
        v168 = v63 - 1;
        v169 = v62 + 1;
        while (v168)
        {
          if (v167 > 0x19999999)
            goto LABEL_308;
          v170 = *v169 - 48;
          if (v170 > 9)
            goto LABEL_308;
          v67 = 0;
          LOBYTE(v63) = 0;
          v65 = 0;
          v78 = __CFADD__(v170, 10 * v167);
          v167 = v170 + 10 * v167;
          --v168;
          ++v169;
          if (v78)
            goto LABEL_310;
        }
        if (v167 == -1)
          v67 = 0;
        else
          v67 = v167 & 0xFFFFFF00;
        if (v167 == -1)
          LOBYTE(v63) = 0;
        else
          LOBYTE(v63) = v167;
        if (v167 == -1)
          v65 = 0;
        else
          v65 = 0x100000000;
        goto LABEL_310;
      }
LABEL_308:
      v67 = 0;
      LOBYTE(v63) = 0;
    }
    else
    {
      v67 = 0;
    }
    v65 = 0;
LABEL_310:
    v66 = v63;
    goto LABEL_67;
  }
  if (!(_DWORD)v63)
  {
    v65 = 0;
    goto LABEL_65;
  }
  v64 = *(unsigned __int16 *)v62 - 48;
  if (v64 > 9 || *(_WORD *)v62 == 48 && v63 > 1)
  {
LABEL_64:
    v65 = 0;
    LOBYTE(v63) = 0;
LABEL_65:
    v66 = 0;
    goto LABEL_66;
  }
  v75 = (unsigned __int16 *)(v62 + 2);
  v76 = v63 - 1;
  while (v76)
  {
    if (v64 > 0x19999999)
      goto LABEL_64;
    v77 = *v75 - 48;
    if (v77 > 9)
      goto LABEL_64;
    v65 = 0;
    LOBYTE(v63) = 0;
    v66 = 0;
    v78 = __CFADD__(v77, 10 * v64);
    v64 = v77 + 10 * v64;
    ++v75;
    --v76;
    if (v78)
      goto LABEL_66;
  }
  v66 = v64 & 0xFFFFFF00;
  v65 = 0x100000000;
  if (v64 == -1)
  {
    v65 = 0;
    LOBYTE(v63) = 0;
  }
  else
  {
    LOBYTE(v63) = v64;
  }
  if (v64 == -1)
    v66 = 0;
LABEL_66:
  v67 = v63;
LABEL_67:
  if ((v65 & 0x100000000) == 0)
    goto LABEL_68;
  v83 = v66 | v67;
  v84 = (JSC::VM *)*((_QWORD *)v203 + 7);
  v68 = 10;
  while (2)
  {
    v85 = 16 * (*(_DWORD *)v31 & 0xFFFFFFFE);
    v87 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v85 + 0x4C) + 0x70))(v31, v203, v83, &v204);
    if (*((_DWORD *)v84 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v84, v86, a3, a4, a5, a6, a7, a8))
      goto LABEL_68;
    if ((v87 & 1) != 0)
      goto LABEL_84;
    if (BYTE2(v209[1]) == 3)
    {
      if (BYTE4(v209[1]))
        goto LABEL_68;
      v88 = *(unsigned __int8 *)(v31 + 5);
      if (v88 != 61)
        goto LABEL_120;
    }
    else
    {
      v88 = *(unsigned __int8 *)(v31 + 5);
      if (v88 == 61)
      {
        if (BYTE2(v209[1]) == 1)
          goto LABEL_68;
      }
      else
      {
LABEL_120:
        if ((v88 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v31, v86, a3, a4, a5, a6, a7, a8) <= v83)
        {
          goto LABEL_68;
        }
      }
    }
    if ((*(_WORD *)(v85 + 12) & 0x800) == 0 || BYTE2(v209[1]) == 3)
    {
      v89 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x30);
      if (!v89)
        v89 = *(_QWORD *)(v31 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v89 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0xB0))(v31, v203);
      }
      else
      {
        v89 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x30);
        if (!v89)
          v89 = *(_QWORD *)(v31 + 16);
      }
      if (*((_DWORD *)v84 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v84, v86, a3, a4, a5, a6, a7, a8))
        goto LABEL_68;
    }
    if ((v89 & 0xFFFE000000000002) == 0)
    {
      v31 = v89;
      if (*(unsigned __int8 *)(v89 + 5) > 0x16u)
        continue;
    }
    break;
  }
LABEL_69:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v203, &v215, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v215 + 2))
  {
    v15 = &xmmword_1ECF4C7C0;
  }
  else
  {
    *(_QWORD *)(a1 + 8 * v202) = v68;
    *(_QWORD *)(*(_QWORD *)(v9 + 136) - 16 * v201 - 16) = v68;
  }
  if (v211)
  {
    v69 = *(_DWORD *)(v210 + 4);
    if (!v69)
    {
      __break(0xC471u);
      JUMPOUT(0x198830A6CLL);
    }
    *(_DWORD *)(v210 + 4) = v69 - 1;
  }
  return v15;
}

__int128 *llint_slow_path_get_by_id(uint64_t a1, unsigned __int8 *a2, int8x16_t a3)
{
  uint64_t v3;
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  JSC::VM *v38;
  unsigned int v39;
  int v40;
  JSC::VM *v41;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(JSC::VM **)(v3 + 72);
  *((_QWORD *)v5 + 5) = a1;
  v41 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1988317CCLL);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v35 = *((__int16 *)a2 + 1);
    if (v35 <= 63)
      v36 = *((__int16 *)a2 + 1);
    else
      v36 = v35 + 1073741760;
    v37 = *((__int16 *)a2 + 2);
    if (v37 <= 63)
      v16 = *((__int16 *)a2 + 2);
    else
      v16 = v37 + 1073741760;
    v17 = *((unsigned __int16 *)a2 + 3);
    v39 = *((unsigned __int16 *)a2 + 4);
    v40 = v36;
    v18 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v12 == 130)
  {
    v16 = *(_DWORD *)(a2 + 6);
    v17 = *(_DWORD *)(a2 + 10);
    v39 = *(_DWORD *)(a2 + 14);
    v40 = *(_DWORD *)(a2 + 2);
    v18 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v13 = (char)a2[1];
    if (v13 <= 15)
      v14 = (char)a2[1];
    else
      v14 = v13 + 1073741808;
    v15 = (char)a2[2];
    if (v15 <= 15)
      v16 = (char)a2[2];
    else
      v16 = v15 + 1073741808;
    v17 = a2[3];
    v39 = a2[4];
    v40 = v14;
    v18 = a2[5];
  }
  v19 = *(_QWORD *)(v3 + 136);
  v20 = *(unsigned __int16 *)(v19 + 36);
  if (!*(_WORD *)(v19 + 36))
    v20 = *(_DWORD *)(v19 + 168);
  v21 = *(unsigned int **)(*(_QWORD *)(v3 + 56) + 104);
  if (v21)
  {
    v22 = *v21;
    if (*v21 > v17)
    {
      v23 = (unint64_t *)&v21[2 * v17 + 2];
      goto LABEL_20;
    }
  }
  else
  {
    v22 = 0;
  }
  v38 = v5;
  v32 = v18;
  v33 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 120) + 72))(*(_QWORD *)(v3 + 120)) + 48);
  if (*v33 <= v17 - v22)
  {
    __break(0xC471u);
    JUMPOUT(0x198831834);
  }
  v23 = (unint64_t *)&v33[2 * (v17 - v22) + 2];
  v18 = v32;
  v5 = v38;
LABEL_20:
  if (v16 >= 0x40000000)
  {
    v34 = *(_QWORD *)(a1 + 16);
    if ((v16 - 0x40000000) >= *(_DWORD *)(v34 + 172))
      goto LABEL_47;
    v24 = (uint64_t *)(*(_QWORD *)(v34 + 160) + 8 * (v16 - 0x40000000));
  }
  else
  {
    v24 = (uint64_t *)(a1 + 8 * v16);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 80);
  v26 = *(_QWORD *)v25;
  v27 = *(unsigned int *)(v25 + 12) + *(_QWORD *)v25;
  if (v26 > (unint64_t)v10 || v27 <= (unint64_t)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1988317ECLL);
  }
  v29 = v4;
  v30 = JSC::LLInt::performLLIntGetByID(4 * ((int)v10 - (int)v26), (unsigned __int8 *)v3, v4, *v24, v23, ((v19 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v18, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v29, &v41, "LLIntSlowPaths", v10);
  if (*((_QWORD *)v5 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v40) = v30;
  *(_QWORD *)(*(_QWORD *)(v3 + 136) - 16 * v39 - 16) = v30;
  return (__int128 *)v10;
}

uint64_t JSC::LLInt::performLLIntGetByID(unsigned int a1, unsigned __int8 *a2, uint64_t a3, uint64_t this, unint64_t *a5, unint64_t a6, int8x16_t a7)
{
  unint64_t v7;
  unint64_t *v8;
  unsigned __int8 *v9;
  WTF **v10;
  JSC::VM *v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  unsigned int v14;
  JSC::VM *v15;
  JSC::JSString *v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  JSC::JSString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  JSC::VM *v35;
  JSC::JSString *v36;
  JSC::JSGlobalObject *v37;
  unint64_t *v38;
  unint64_t v39;
  WTF **v40;
  JSC::VM *v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  _WORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  JSC::VM *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  __int16 v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned __int16 *v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  const JSC::PropertyTable *v76;
  __int16 v77;
  int v78;
  WTF **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned int *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  unsigned int *v107;
  __int128 v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unsigned int *v114;
  int v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  _QWORD *v122;
  int v123;
  int v124;
  BOOL v125;
  unsigned int *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 *v138;
  unsigned __int8 *v140;
  int v141;
  JSC::VM *v142;
  WTF **v143;
  JSC::JSGlobalObject *v144;
  uint64_t v145;
  JSC::VM *v146;
  JSC::JSString *v147;
  JSC::JSGlobalObject *v148;
  unint64_t v149;
  WTF **v150;
  unsigned __int8 *v151;
  unint64_t *v152;
  JSC::VM *v153;
  char OwnStaticPropertySlot;
  JSC::JSGlobalObject *v155;
  JSC::VM *v156;
  WTF **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF **v167;
  JSC::VM *v168;
  BOOL v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  WTF *v174;
  JSC::VM *v175;
  uint64_t v176;
  JSC::JSString *v177;
  WTF **v178;
  JSC::VM *v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  JSC::JSArrayBufferView *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  JSC::JSGlobalObject *v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  BOOL v194;
  WTF **v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int8x16_t **v208;
  _QWORD *v209;
  int v210;
  BOOL v211;
  uint64_t (*v212)(WTF **);
  WTF **v213;
  WTF *v214;
  char *v215;
  unsigned int v216;
  int v217;
  _BYTE *v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  JSC::VM *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  JSC::VM *v240;
  JSC::VM *v241;
  unint64_t v242;
  JSC::JSGlobalObject *v243;
  WTF **v244;
  int v245;
  unsigned int v246;
  int v247;
  unint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v254;
  unsigned __int16 *v255;
  uint64_t v256;
  unsigned int v257;
  JSC::VM *v258;
  JSC::VM *v259;
  JSC::JSGlobalObject *v260;
  WTF **v261;
  char v262;
  JSC::VM *v263;
  uint64_t v264;
  JSC::JSString *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  uint64_t v272;
  JSC::JSGlobalObject *v273;
  WTF **v274;
  JSC::VM *v275;
  uint64_t v276;
  unint64_t v277;
  WTF **v278;
  BOOL hasExceptionsAfterHandlingTraps;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int8x16_t **v283;
  JSC::VM *v284;
  JSC::JSGlobalObject *v285;
  WTF **v286;
  JSC::VM *v287;
  uint64_t v288;
  JSC::VM *v289;
  WTF **v290;
  JSC::VM *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  int v296;
  unsigned int v297;
  uint64_t v298;
  unsigned __int8 *v299;
  int v300;
  uint64_t v301;
  _BOOL4 v302;
  double v303;
  const unsigned __int8 *v304;
  BOOL v305;
  JSC::VM *v306;
  JSC::JSGlobalObject *v307;
  unint64_t v308;
  unint64_t NotAnObjectError;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  unint64_t v316;
  uint64_t v317;
  unsigned __int8 *v318;
  unsigned int v319;
  uint64_t v320;
  JSC::VM *v321;
  uint64_t v322;
  unsigned int *v323;
  uint64_t v324;
  uint64_t Index;
  int v326;
  char v327;
  JSC::JSString **v328;
  JSC::JSString **v329;
  int v330;
  _BYTE *v331;
  uint64_t v332;
  unsigned __int16 *v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  unsigned __int8 *v339;
  unsigned int v340;
  BOOL v341;
  JSC::VM *v342;
  WTF **v343;
  JSC::JSGlobalObject *v344;
  BOOL v345;
  uint64_t v346;
  unsigned __int8 *v347;
  unsigned int v348;
  uint64_t v349;
  JSC::JSString *v350;
  unint64_t v351;
  unsigned int v352;
  unsigned int v353;
  JSC::JSGlobalObject *v354;
  JSC::JSGlobalObject *v355;
  unint64_t v356;
  JSC::VM *v357;
  JSC::VM *v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  JSC::JSGlobalObject *v362;
  JSC::Structure *v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v370;
  WTF *v371;
  uint64_t (*v372)(unint64_t);
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unsigned __int8 *v376;
  _QWORD v377[2];
  uint64_t v378;
  char v379;
  int8x16_t **v380;
  uint64_t v381;
  WTF *v382[2];
  char *v383;
  uint64_t v384;

  v7 = a6;
  v8 = a5;
  v9 = (unsigned __int8 *)this;
  v10 = (WTF **)a3;
  v384 = *MEMORY[0x1E0C80C00];
  v11 = *(JSC::VM **)(a3 + 56);
  a7.i64[0] = 0xFFFFFFFF00000000;
  v374 = 0xFFFFFFFF00000000;
  LOBYTE(v378) = 0;
  v12 = 0xFFFE000000000002;
  v379 = 0;
  v380 = 0;
  v381 = 0;
  v376 = 0;
  memset(v377, 0, 13);
  v375 = this;
  v370 = *a5;
  v13 = (JSC::JSGlobalObject *)(this & 0xFFFE000000000002);
  if ((this & 0xFFFE000000000002) != 0)
  {
    if ((unint64_t)this >> 49)
    {
      v73 = *(_QWORD *)(a3 + 1536);
      if ((v73 & 1) == 0)
        goto LABEL_95;
      v212 = *(uint64_t (**)(WTF **))(v73 & 0xFFFFFFFFFFFFFFFCLL);
      v274 = (WTF **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a3 & 8) != 0)
        v274 = (WTF **)(a3 - 16);
      v214 = *v274;
      v215 = (char *)(a3 + 1536);
    }
    else
    {
      if ((this & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        v306 = v11;
        v307 = (JSC::JSGlobalObject *)a3;
        v308 = this & 0xFFFE000000000002;
        NotAnObjectError = JSC::createNotAnObjectError(a3, this);
        JSC::VM::throwException(v306, v307, NotAnObjectError, v310, v311, v312, v313, v314);
        v13 = (JSC::JSGlobalObject *)v308;
        v10 = (WTF **)v307;
        v11 = v306;
        goto LABEL_47;
      }
      v73 = *(_QWORD *)(a3 + 1472);
      if ((v73 & 1) == 0)
        goto LABEL_95;
      v212 = *(uint64_t (**)(WTF **))(v73 & 0xFFFFFFFFFFFFFFFCLL);
      v213 = (WTF **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a3 & 8) != 0)
        v213 = (WTF **)(a3 - 16);
      v214 = *v213;
      v215 = (char *)(a3 + 1472);
    }
    v382[0] = v214;
    v382[1] = (WTF *)a3;
    v383 = v215;
    v275 = v11;
    v276 = a3;
    v277 = this & 0xFFFE000000000002;
    v73 = v212(v382);
    v12 = 0xFFFE000000000002;
    v13 = (JSC::JSGlobalObject *)v277;
    v10 = (WTF **)v276;
    v11 = v275;
LABEL_95:
    v16 = *(JSC::JSString **)(v73 + 48);
    if (v16 == (JSC::JSString *)2)
      goto LABEL_47;
    goto LABEL_96;
  }
  v14 = *(unsigned __int8 *)(this + 5);
  v15 = v11;
  v16 = (JSC::JSString *)this;
  if (v14 > 0x16)
    goto LABEL_3;
  v356 = this & 0xFFFE000000000002;
  v320 = a3;
  v321 = v11;
  if (v14 != 2)
    goto LABEL_490;
  if (*(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768) == v370)
  {
    v322 = *(_QWORD *)(this + 8);
    if ((v322 & 1) != 0)
      v323 = (unsigned int *)(this + 16);
    else
      v323 = (unsigned int *)(v322 + 4);
    v324 = *v323;
    if ((v324 & 0x80000000) != 0)
    {
      *(double *)a7.i64 = (double)v324;
      Index = COERCE__INT64((double)v324) + 0x2000000000000;
    }
    else
    {
      Index = v324 | 0xFFFE000000000000;
    }
    v326 = 14;
    goto LABEL_486;
  }
  if (v370)
  {
    v330 = *(_DWORD *)(v370 + 16);
    if ((v330 & 0x20) == 0)
    {
      v331 = *(_BYTE **)(v370 + 8);
      v332 = *(unsigned int *)(v370 + 4);
      if ((v330 & 4) != 0)
      {
        if (!(_DWORD)v332)
          goto LABEL_501;
        a3 = *v331 - 48;
        if (a3 > 9 || v332 >= 2 && *v331 == 48)
          goto LABEL_501;
        v346 = v332 - 1;
        v347 = v331 + 1;
        while (v346)
        {
          if (a3 > 0x19999999)
            goto LABEL_501;
          v348 = *v347 - 48;
          if (v348 > 9)
            goto LABEL_501;
          v327 = 0;
          v72 = __CFADD__(v348, 10 * a3);
          a3 = v348 + 10 * (_DWORD)a3;
          --v346;
          ++v347;
          if (v72)
            goto LABEL_487;
        }
      }
      else
      {
        if (!(_DWORD)v332)
          goto LABEL_501;
        a3 = *(unsigned __int16 *)v331 - 48;
        if (a3 > 9)
          goto LABEL_501;
        if (*(_WORD *)v331 == 48 && v332 > 1)
          goto LABEL_501;
        v334 = (unsigned __int16 *)(v331 + 2);
        v335 = v332 - 1;
        while (v335)
        {
          if (a3 > 0x19999999)
            goto LABEL_501;
          v336 = *v334 - 48;
          if (v336 > 9)
            goto LABEL_501;
          v327 = 0;
          v72 = __CFADD__(v336, 10 * a3);
          a3 = v336 + 10 * (_DWORD)a3;
          ++v334;
          --v335;
          if (v72)
            goto LABEL_487;
        }
      }
      if ((_DWORD)a3 != -1)
      {
        v349 = *(_QWORD *)(this + 8);
        v350 = (JSC::JSString *)((v349 & 1) != 0 ? this + 16 : v349 + 4);
        if (*(_DWORD *)v350 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, (JSC::JSGlobalObject *)v10, a3, this, this, a6, 0xFFFE000000000002, 0, a7);
          if (!*((_DWORD *)v321 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v321, (uint64_t)v15, a3, this, (uint64_t)v16, a6, v12, (uint64_t)v13))
          {
            v326 = 10;
LABEL_486:
            v372 = (uint64_t (*)(unint64_t))Index;
            LODWORD(v374) = v326;
            v376 = 0;
            v327 = 1;
            BYTE1(v377[1]) = 1;
            goto LABEL_487;
          }
        }
      }
    }
  }
LABEL_501:
  v327 = 0;
LABEL_487:
  if (*((_DWORD *)v321 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v321, (uint64_t)v15, a3, this, (uint64_t)v16, a6, v12, (uint64_t)v13))
  {
    v55 = 10;
    v11 = v321;
    v10 = (WTF **)v320;
    v13 = (JSC::JSGlobalObject *)v356;
    goto LABEL_48;
  }
  v11 = v321;
  v10 = (WTF **)v320;
  v13 = (JSC::JSGlobalObject *)v356;
  v12 = 0xFFFE000000000002;
  if ((v327 & 1) != 0)
  {
LABEL_77:
    if (BYTE1(v377[1]) == 1)
    {
      v55 = (uint64_t)v372;
    }
    else
    {
      v142 = v11;
      if (BYTE1(v377[1]) == 2)
      {
        v143 = v10;
        v144 = v13;
        v145 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v372, (JSC::JSGlobalObject *)v10, a3, this, (uint64_t)v16, a6, 0xFFFE000000000002, (uint64_t)v13);
        v13 = v144;
        v10 = v143;
        v55 = v145;
        v11 = v142;
      }
      else
      {
        v188 = (uint64_t)v376;
        v189 = *(_QWORD *)(16 * (*(_DWORD *)v376 & 0xFFFFFFFE) + 0x28);
        v190 = v13;
        if ((v374 & 0x20) != 0)
          v188 = v375;
        if (BYTE3(v377[1]) != 1)
          goto LABEL_223;
        if ((v188 & 0xFFFE000000000002) != 0)
          goto LABEL_436;
        v191 = *(unsigned int *)(16 * (*(_DWORD *)v188 & 0xFFFFFFFE) + 0x4C);
        v192 = *(_DWORD *)(16 * (*(_DWORD *)v188 & 0xFFFFFFFE) + 0x4C) != 0;
        v193 = 16 * v191;
        if ((_DWORD)v191)
          v194 = v380 == (int8x16_t **)v193;
        else
          v194 = 1;
        if (!v194)
        {
          do
          {
            v193 = *(_QWORD *)(v193 + 16);
            v192 = v193 != 0;
          }
          while ((int8x16_t **)v193 != v380 && v193 != 0);
        }
        if (!v192)
        {
LABEL_436:
          v382[0] = v10[7];
          v196 = v10;
          v197 = JSC::throwDOMAttributeGetterTypeError(v189, v382, v380, (WTF::StringImpl *)v370);
        }
        else
        {
LABEL_223:
          v196 = v10;
          v197 = v372(v189);
        }
        v10 = v196;
        v55 = v197;
        v11 = v142;
        v13 = v190;
      }
    }
    goto LABEL_48;
  }
  v14 = v9[5];
LABEL_490:
  v328 = (JSC::JSString **)(v320 + 1208);
  if (v14 != 3)
    v328 = (JSC::JSString **)(v320 + 1216);
  if (v14 == 2)
    v329 = (JSC::JSString **)(v320 + 1192);
  else
    v329 = v328;
  v16 = *v329;
  v11 = v321;
  v10 = (WTF **)v320;
  v13 = (JSC::JSGlobalObject *)v356;
LABEL_96:
  if (!v16)
    goto LABEL_47;
  v15 = v10[7];
LABEL_3:
  v17 = (char *)v16 + 6;
  v18 = v370 >> 4;
  v19 = (unint64_t)v16;
  if ((*((_BYTE *)v16 + 6) & 8) == 0)
  {
    v20 = v16;
    do
    {
      v21 = *(_DWORD *)v20 & 0xFFFFFFFE;
      v22 = 16 * v21;
      if (!(_DWORD)v18 || (v18 & ~*(_DWORD *)(16 * v21 + 0x20)) != 0)
        goto LABEL_16;
      v23 = *(_QWORD *)(16 * v21 + 0x58);
      if (!v23)
      {
        v34 = *(_QWORD *)(16 * v21 + 0x40);
        if (!v34 || *(_BYTE *)(v34 + 5) != 1 && *(_DWORD *)(v34 + 80) < 2u)
          goto LABEL_16;
        v35 = v11;
        v36 = v16;
        v357 = (JSC::VM *)v9;
        v359 = v18;
        v37 = v13;
        v38 = v8;
        v39 = v7;
        v40 = v10;
        v41 = v15;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v22, v15, 1, (const JSC::PropertyTable *)this, (uint64_t)v16, a6, 0xFFFE000000000002, (uint64_t)v13);
        v15 = v41;
        v16 = v36;
        v12 = 0xFFFE000000000002;
        v13 = v37;
        v10 = v40;
        v7 = v39;
        v8 = v38;
        v9 = (unsigned __int8 *)v357;
        v18 = v359;
        v11 = v35;
        if (!v23)
          goto LABEL_16;
      }
      if (!*(_DWORD *)(v23 + 24))
        goto LABEL_16;
      v24 = *(_QWORD *)(v23 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      v26 = *(unsigned int *)(v23 + 8);
      v27 = *(_DWORD *)(v370 + 16);
      if ((v24 & 1) != 0)
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v370 + 32);
        v28 = *(_DWORD *)(v23 + 12);
        v29 = (v27 >> 8) & *(_QWORD *)&v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_16;
        v31 = v25 + v26;
        v32 = 1;
        while (1)
        {
          v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
          if (v370 == (v33 & 0xFFFFFFFFFFFFLL))
            break;
          v29 = ((_DWORD)v29 + v32) & v28;
          v30 = *(unsigned __int8 *)(v25 + v29);
          ++v32;
          if (!*(_BYTE *)(v25 + v29))
            goto LABEL_16;
        }
        a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      }
      else
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v370 + 32);
        v42 = *(_DWORD *)(v23 + 12);
        v43 = v42 & (v27 >> 8);
        v44 = *(_DWORD *)(v25 + 4 * v43);
        if (!v44)
          goto LABEL_16;
        v45 = v25 + 4 * v26;
        v46 = 1;
        while (1)
        {
          v47 = (v44 - 1);
          if (v370 == *(_QWORD *)(v45 + 16 * v47))
            break;
          v43 = (v43 + v46) & v42;
          v44 = *(_DWORD *)(v25 + 4 * v43);
          ++v46;
          if (!v44)
            goto LABEL_16;
        }
        a6 = *(unsigned int *)(v45 + 16 * v47 + 8) | ((unint64_t)*(unsigned __int8 *)(v45 + 16 * v47 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v16 = (JSC::JSString *)HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v64 = (uint64_t)v20 + 16;
          v65 = a6 << 32;
        }
        else
        {
          v64 = *((_QWORD *)v20 + 1) - 8;
          v65 = 0x3F00000000 - (a6 << 32);
        }
        this = *(_QWORD *)(v64 + (v65 >> 29));
        if ((this & 0xFFFE000000000002) != 0)
          goto LABEL_75;
        v66 = *(unsigned __int8 *)(this + 5);
        if (v66 == 5)
        {
          v155 = v13;
          v156 = v11;
          v157 = v10;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v20, (uint64_t)v15, (uint64_t)&v372, this, SHIDWORD(a6), a6);
          v12 = 0xFFFE000000000002;
          v13 = v155;
          goto LABEL_164;
        }
        if (v66 == 6)
        {
          v205 = *(_DWORD *)(v22 + 16) & 3;
          v206 = *(_QWORD *)(this + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v372 = *(uint64_t (**)(unint64_t))(this + 8);
            v373 = v206;
            LODWORD(v374) = HIDWORD(a6);
            v376 = (unsigned __int8 *)v20;
            BYTE1(v377[1]) = 3;
            if (v205 == 2)
              goto LABEL_77;
            goto LABEL_349;
          }
          v208 = *(int8x16_t ***)(this + 24);
          v207 = *(_QWORD *)(this + 32);
          v372 = *(uint64_t (**)(unint64_t))(this + 8);
          v373 = v206;
          LODWORD(v374) = HIDWORD(a6);
          v376 = (unsigned __int8 *)v20;
          BYTE1(v377[1]) = 3;
          if (v205 != 2)
            LOBYTE(v377[1]) = 1;
          BYTE3(v377[1]) = 1;
          v380 = v208;
          v381 = v207;
        }
        else
        {
LABEL_75:
          v372 = (uint64_t (*)(unint64_t))this;
          v376 = (unsigned __int8 *)v20;
LABEL_76:
          v374 = __PAIR64__(a6, v16);
          LOWORD(v377[1]) = 257;
        }
        goto LABEL_77;
      }
LABEL_16:
      if ((*v17 & 0x20) != 0)
      {
        v146 = v11;
        v147 = v16;
        v148 = v13;
        v149 = v7;
        v150 = v10;
        v361 = v18;
        v151 = v9;
        v152 = v8;
        v153 = v15;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, v15, v370, (uint64_t)&v372);
        v15 = v153;
        v8 = v152;
        v9 = v151;
        v18 = v361;
        v16 = v147;
        v12 = 0xFFFE000000000002;
        v13 = v148;
        v10 = v150;
        v7 = v149;
        v11 = v146;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_77;
      }
      v19 = *(_QWORD *)(v22 + 48);
      if (!v19)
        v19 = *((_QWORD *)v20 + 2);
      if ((v19 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v19 + 5) < 0x17u)
      {
        if (!v370)
          goto LABEL_47;
        v48 = *(_DWORD *)(v370 + 16);
        if ((v48 & 0x20) != 0)
          goto LABEL_47;
        v49 = *(_WORD **)(v370 + 8);
        v50 = *(unsigned int *)(v370 + 4);
        if ((v48 & 4) == 0)
        {
          if ((_DWORD)v50)
          {
            v51 = (unsigned __int16)*v49 - 48;
            if (v51 <= 9 && (*v49 != 48 || v50 <= 1))
            {
              v69 = v49 + 1;
              v70 = v50 - 1;
              while (v70)
              {
                if (v51 > 0x19999999)
                  goto LABEL_43;
                v71 = *v69 - 48;
                if (v71 > 9)
                  goto LABEL_43;
                v52 = 0;
                LOBYTE(v50) = 0;
                v53 = 0;
                v72 = __CFADD__(v71, 10 * v51);
                v51 = v71 + 10 * v51;
                ++v69;
                --v70;
                if (v72)
                  goto LABEL_45;
              }
              v53 = v51 & 0xFFFFFF00;
              v52 = 0x100000000;
              if (v51 == -1)
              {
                v52 = 0;
                LOBYTE(v50) = 0;
              }
              else
              {
                LOBYTE(v50) = v51;
              }
              if (v51 == -1)
                v53 = 0;
LABEL_45:
              v54 = v50;
LABEL_46:
              if ((v52 & 0x100000000) == 0)
                goto LABEL_47;
              v174 = v10[7];
              v55 = 10;
              v354 = v13;
              v362 = (JSC::JSGlobalObject *)(v53 | v54);
              while (2)
              {
                v175 = v11;
                v176 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
                v177 = v16;
                v178 = v10;
                v179 = v174;
                v180 = (*(uint64_t (**)(JSC::JSString *, WTF **))(16 * *(unsigned int *)(v176 + 0x4C) + 0x70))(v16, v10);
                v174 = v179;
                v184 = v180;
                if (*((_DWORD *)v179 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v179, v181, a3, this, (uint64_t)v16, a6, v182, v183);
                  v174 = v179;
                  if (hasExceptionsAfterHandlingTraps)
                  {
LABEL_378:
                    v55 = 10;
                    v11 = v175;
                    v10 = v178;
                    v13 = v354;
                    goto LABEL_48;
                  }
                }
                v11 = v175;
                v10 = v178;
                v13 = v354;
                v12 = 0xFFFE000000000002;
                if ((v184 & 1) != 0)
                  goto LABEL_77;
                if (BYTE2(v377[1]) == 3)
                {
                  if (BYTE4(v377[1]))
                    goto LABEL_378;
                  v185 = v177;
                  v186 = *((unsigned __int8 *)v177 + 5);
                  v11 = v175;
                  v10 = v178;
                  v13 = v354;
                  v55 = 10;
                  v174 = v179;
                  if (v186 != 61)
                  {
LABEL_202:
                    if ((v186 - 39) <= 0xA)
                    {
                      v316 = JSC::JSArrayBufferView::length(v185, v181, a3, this, (uint64_t)v16, a6, 0xFFFE000000000002, (uint64_t)v13);
                      v174 = v179;
                      v185 = v177;
                      v12 = 0xFFFE000000000002;
                      v13 = v354;
                      v10 = v178;
                      v11 = v175;
                      if (v316 <= (unint64_t)v362)
                        goto LABEL_47;
                    }
                  }
                }
                else
                {
                  v185 = v177;
                  v186 = *((unsigned __int8 *)v177 + 5);
                  if (v186 != 61)
                    goto LABEL_202;
                  if (BYTE2(v377[1]) == 1)
                    goto LABEL_47;
                }
                if ((*(_WORD *)(v176 + 12) & 0x800) == 0 || BYTE2(v377[1]) == 3)
                {
                  v187 = *(_QWORD *)(16 * (*(_DWORD *)v185 & 0xFFFFFFFE) + 0x30);
                  if (!v187)
                    v187 = *((_QWORD *)v185 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v185 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v187 = (*(uint64_t (**)(JSC::JSString *, WTF **))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v185 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v177, v178);
                  }
                  else
                  {
                    v187 = *(_QWORD *)(16 * (*(_DWORD *)v185 & 0xFFFFFFFE) + 0x30);
                    if (!v187)
                      v187 = *((_QWORD *)v177 + 2);
                  }
                  if (*((_DWORD *)v179 + 20))
                  {
                    v345 = JSC::VM::hasExceptionsAfterHandlingTraps(v179, v181, a3, this, (uint64_t)v16, a6, v12, (uint64_t)v13);
                    v174 = v179;
                    v11 = v175;
                    v10 = v178;
                    v13 = v354;
                    v12 = 0xFFFE000000000002;
                    v55 = 10;
                    if (v345)
                      goto LABEL_47;
                  }
                  else
                  {
                    v11 = v175;
                    v10 = v178;
                    v13 = v354;
                    v12 = 0xFFFE000000000002;
                    v55 = 10;
                    v174 = v179;
                  }
                }
                if ((v187 & 0xFFFE000000000002) != 0)
                  goto LABEL_48;
                v16 = (JSC::JSString *)v187;
                a3 = (uint64_t)v362;
                if (*(unsigned __int8 *)(v187 + 5) <= 0x16u)
                  goto LABEL_48;
                continue;
              }
            }
LABEL_43:
            v52 = 0;
            LOBYTE(v50) = 0;
          }
          else
          {
            v52 = 0;
          }
          v53 = 0;
          goto LABEL_45;
        }
        a3 = (uint64_t)v13;
        if ((_DWORD)v50)
        {
          v315 = *(unsigned __int8 *)v49 - 48;
          if (v315 <= 9 && (v50 < 2 || *(_BYTE *)v49 != 48))
          {
            v317 = v50 - 1;
            v318 = (unsigned __int8 *)v49 + 1;
            while (v317)
            {
              if (v315 > 0x19999999)
                goto LABEL_439;
              v319 = *v318 - 48;
              if (v319 > 9)
                goto LABEL_439;
              v54 = 0;
              LOBYTE(v50) = 0;
              v52 = 0;
              v72 = __CFADD__(v319, 10 * v315);
              v315 = v319 + 10 * v315;
              --v317;
              ++v318;
              if (v72)
                goto LABEL_441;
            }
            if (v315 == -1)
              v54 = 0;
            else
              v54 = v315 & 0xFFFFFF00;
            if (v315 == -1)
              LOBYTE(v50) = 0;
            else
              LOBYTE(v50) = v315;
            if (v315 == -1)
              v52 = 0;
            else
              v52 = 0x100000000;
            goto LABEL_441;
          }
LABEL_439:
          v54 = 0;
          LOBYTE(v50) = 0;
        }
        else
        {
          v54 = 0;
        }
        v52 = 0;
LABEL_441:
        v53 = v50;
        goto LABEL_46;
      }
      v17 = (_BYTE *)(v19 + 6);
      v20 = (JSC::JSString *)v19;
    }
    while ((*(_BYTE *)(v19 + 6) & 8) == 0);
  }
  if (!v370)
    goto LABEL_283;
  v217 = *(_DWORD *)(v370 + 16);
  if ((v217 & 0x20) != 0)
    goto LABEL_283;
  v218 = *(_BYTE **)(v370 + 8);
  v219 = *(unsigned int *)(v370 + 4);
  if ((v217 & 4) != 0)
  {
    a3 = (uint64_t)v13;
    if ((_DWORD)v219)
    {
      v337 = *v218 - 48;
      if (v337 <= 9 && (v219 < 2 || *v218 != 48))
      {
        v338 = v219 - 1;
        v339 = v218 + 1;
        while (v338)
        {
          if (v337 > 0x19999999)
            goto LABEL_516;
          v340 = *v339 - 48;
          if (v340 > 9)
            goto LABEL_516;
          v223 = 0;
          LOBYTE(v219) = 0;
          v221 = 0;
          v72 = __CFADD__(v340, 10 * v337);
          v337 = v340 + 10 * v337;
          --v338;
          ++v339;
          if (v72)
            goto LABEL_518;
        }
        if (v337 == -1)
          v223 = 0;
        else
          v223 = v337 & 0xFFFFFF00;
        if (v337 == -1)
          LOBYTE(v219) = 0;
        else
          LOBYTE(v219) = v337;
        if (v337 == -1)
          v221 = 0;
        else
          v221 = 0x100000000;
        goto LABEL_518;
      }
LABEL_516:
      v223 = 0;
      LOBYTE(v219) = 0;
    }
    else
    {
      v223 = 0;
    }
    v221 = 0;
LABEL_518:
    v222 = v219;
    v12 = 0xFFFE000000000002;
    goto LABEL_282;
  }
  if ((_DWORD)v219)
  {
    v220 = *(unsigned __int16 *)v218 - 48;
    if (v220 <= 9 && (*(_WORD *)v218 != 48 || v219 <= 1))
    {
      v255 = (unsigned __int16 *)(v218 + 2);
      v256 = v219 - 1;
      while (v256)
      {
        if (v220 > 0x19999999)
          goto LABEL_279;
        v257 = *v255 - 48;
        if (v257 > 9)
          goto LABEL_279;
        v221 = 0;
        LOBYTE(v219) = 0;
        v222 = 0;
        v72 = __CFADD__(v257, 10 * v220);
        v220 = v257 + 10 * v220;
        ++v255;
        --v256;
        if (v72)
          goto LABEL_281;
      }
      v222 = v220 & 0xFFFFFF00;
      v221 = 0x100000000;
      if (v220 == -1)
      {
        v221 = 0;
        LOBYTE(v219) = 0;
      }
      else
      {
        LOBYTE(v219) = v220;
      }
      if (v220 == -1)
        v222 = 0;
      goto LABEL_281;
    }
LABEL_279:
    v221 = 0;
    LOBYTE(v219) = 0;
  }
  else
  {
    v221 = 0;
  }
  v222 = 0;
LABEL_281:
  v223 = v219;
LABEL_282:
  if ((v221 & 0x100000000) == 0)
  {
LABEL_283:
    v224 = v10[7];
    v55 = 10;
    while (1)
    {
      v225 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v19 + 6) & 8) == 0)
        break;
      v355 = v13;
      v289 = v11;
      v367 = 16 * (*(_DWORD *)v19 & 0xFFFFFFFE);
      v290 = v10;
      v291 = v224;
      v295 = (*(uint64_t (**)(unint64_t, WTF **, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v367 + 0x4C) + 0x68))(v19, v10, v370, &v372);
      if (*((_DWORD *)v291 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v291, v292, a3, this, (uint64_t)v16, a6, v293, v294))
      {
LABEL_459:
        v55 = 10;
        v11 = v289;
        v10 = v290;
        v13 = v355;
        goto LABEL_48;
      }
      v11 = v289;
      v10 = v290;
      v13 = v355;
      v12 = 0xFFFE000000000002;
      if ((v295 & 1) != 0)
        goto LABEL_77;
      if (BYTE2(v377[1]) == 3)
      {
        if (BYTE4(v377[1]))
          goto LABEL_459;
        v296 = *(unsigned __int8 *)(v19 + 5);
        if (v296 == 61)
        {
LABEL_428:
          v11 = v289;
          v10 = v290;
          v13 = v355;
          v224 = v291;
          v225 = v367;
          v55 = 10;
          goto LABEL_297;
        }
LABEL_398:
        if (!v370)
          goto LABEL_428;
        if ((v296 - 50) < 0xFFFFFFF5)
          goto LABEL_428;
        v297 = *(_DWORD *)(v370 + 16);
        if ((v297 & 0x20) != 0)
          goto LABEL_428;
        v298 = *(unsigned int *)(v370 + 4);
        if (!(_DWORD)v298)
          goto LABEL_428;
        v299 = *(unsigned __int8 **)(v370 + 8);
        if ((v297 & 4) == 0)
        {
          v300 = *(unsigned __int16 *)v299;
          if ((_DWORD)v298 == 1)
            goto LABEL_404;
          if (v300 == 45)
          {
            v300 = *((unsigned __int16 *)v299 + 1);
            goto LABEL_414;
          }
          if ((v300 - 48) >= 0xA && ((_DWORD)v298 != 8 || v300 != 73))
          {
LABEL_431:
            if ((_DWORD)v298 != 3 || v300 != 78)
              goto LABEL_428;
          }
LABEL_421:
          v351 = v351 & 0xFFFFFF0000000000 | v298 | ((unint64_t)((v297 >> 2) & 1) << 32);
          JSC::jsToNumber(v299, v351);
          WTF::numberToString(v382, v303);
          v305 = WTF::equal(v370, (unint64_t)v382, v304);
          v11 = v289;
          v10 = v290;
          v13 = v355;
          v12 = 0xFFFE000000000002;
          v224 = v291;
          v225 = v367;
          v55 = 10;
          if (v305)
            goto LABEL_47;
          goto LABEL_297;
        }
        v300 = *v299;
        if ((_DWORD)v298 == 1)
        {
LABEL_404:
          v11 = v289;
          v10 = v290;
          v13 = v355;
          v224 = v291;
          v225 = v367;
          v55 = 10;
          if ((v300 - 48) < 0xA)
            goto LABEL_47;
          goto LABEL_297;
        }
        if (v300 == 45)
        {
          v300 = v299[1];
LABEL_414:
          if ((v300 - 48) < 0xA)
          {
            if ((_DWORD)v298 == 2)
              goto LABEL_459;
            goto LABEL_421;
          }
          if ((_DWORD)v298 != 9)
            goto LABEL_428;
        }
        else
        {
          if ((v300 - 48) < 0xA)
            goto LABEL_421;
          if ((_DWORD)v298 != 8)
            goto LABEL_431;
        }
        if (v300 != 73)
          goto LABEL_428;
        goto LABEL_421;
      }
      v296 = *(unsigned __int8 *)(v19 + 5);
      if (v296 != 61)
        goto LABEL_398;
      v11 = v289;
      v10 = v290;
      v13 = v355;
      v224 = v291;
      v225 = v367;
      v55 = 10;
      if (BYTE2(v377[1]) == 1)
        goto LABEL_47;
LABEL_297:
      if ((*(_WORD *)(v225 + 12) & 0x800) != 0)
      {
        v237 = *(_DWORD *)v19;
        if (BYTE2(v377[1]) != 3)
        {
          v284 = v224;
          v366 = v18;
          v285 = v13;
          v286 = v10;
          v287 = v11;
          v288 = 16 * (v237 & 0xFFFFFFFE);
          if ((*(_WORD *)(v288 + 12) & 0x800) != 0)
          {
            v238 = (*(uint64_t (**)(unint64_t, WTF **))(16 * *(unsigned int *)(v288 + 76) + 0xB0))(v19, v10);
          }
          else
          {
            v238 = *(_QWORD *)(v288 + 48);
            if (!v238)
              v238 = *(_QWORD *)(v19 + 16);
          }
          if (*((_DWORD *)v284 + 20))
          {
            v341 = JSC::VM::hasExceptionsAfterHandlingTraps(v284, (uint64_t)v224, a3, this, (uint64_t)v16, a6, v12, (uint64_t)v13);
            v224 = v284;
            v11 = v287;
            v10 = v286;
            v13 = v285;
            v12 = 0xFFFE000000000002;
            v18 = v366;
            v55 = 10;
            if (v341)
              goto LABEL_47;
          }
          else
          {
            v11 = v287;
            v10 = v286;
            v13 = v285;
            v12 = 0xFFFE000000000002;
            v18 = v366;
            v224 = v284;
            v55 = 10;
          }
          goto LABEL_301;
        }
      }
      else
      {
        v237 = *(_DWORD *)v19;
      }
      v238 = *(_QWORD *)(16 * (v237 & 0xFFFFFFFE) + 0x30);
      if (!v238)
        v238 = *(_QWORD *)(v19 + 16);
LABEL_301:
      if ((v238 & 0xFFFE000000000002) == 0)
      {
        v19 = v238;
        if (*(unsigned __int8 *)(v238 + 5) > 0x16u)
          continue;
      }
      goto LABEL_48;
    }
    if ((_DWORD)v18 && (v18 & ~*(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v226 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x58);
      if (v226)
        goto LABEL_598;
      v239 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x40);
      if (v239 && (*(_BYTE *)(v239 + 5) == 1 || *(_DWORD *)(v239 + 80) >= 2u))
      {
        v240 = v11;
        v363 = (JSC::Structure *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE));
        v241 = v224;
        v242 = v18;
        v243 = v13;
        v244 = v10;
        JSC::Structure::materializePropertyTable(v363, v224, 1, (const JSC::PropertyTable *)this, (uint64_t)v16, a6, 0xFFFE000000000002, (uint64_t)v13);
        v224 = v241;
        v225 = (uint64_t)v363;
        v12 = 0xFFFE000000000002;
        v13 = v243;
        v18 = v242;
        v10 = v244;
        v11 = v240;
        if (v226)
        {
LABEL_598:
          if (*(_DWORD *)(v226 + 24))
          {
            v227 = *(_QWORD *)(v226 + 16);
            v228 = v227 & 0xFFFFFFFFFFFFFFFELL;
            v229 = *(unsigned int *)(v226 + 8);
            v230 = *(_DWORD *)(v370 + 16);
            if ((v227 & 1) != 0)
            {
              if ((v230 & 0x20) != 0)
                v230 = *(_DWORD *)(v370 + 32);
              v231 = *(_DWORD *)(v226 + 12);
              v232 = (v230 >> 8) & *(_QWORD *)&v231;
              v233 = *(unsigned __int8 *)(v228 + v232);
              if (*(_BYTE *)(v228 + v232))
              {
                v234 = v228 + v229;
                v235 = 1;
                while (1)
                {
                  v236 = *(_QWORD *)(v234 + 8 * (v233 - 1));
                  if (v370 == (v236 & 0xFFFFFFFFFFFFLL))
                    break;
                  v232 = ((_DWORD)v232 + v235) & v231;
                  v233 = *(unsigned __int8 *)(v228 + v232);
                  ++v235;
                  if (!*(_BYTE *)(v228 + v232))
                    goto LABEL_296;
                }
                a6 = (v236 >> 16) & 0xFF00000000 | HIBYTE(v236);
                goto LABEL_309;
              }
            }
            else
            {
              if ((v230 & 0x20) != 0)
                v230 = *(_DWORD *)(v370 + 32);
              v245 = *(_DWORD *)(v226 + 12);
              v246 = v245 & (v230 >> 8);
              v247 = *(_DWORD *)(v228 + 4 * v246);
              if (v247)
              {
                v248 = v228 + 4 * v229;
                v249 = 1;
                while (1)
                {
                  v250 = (v247 - 1);
                  if (v370 == *(_QWORD *)(v248 + 16 * v250))
                    break;
                  v246 = (v246 + v249) & v245;
                  v247 = *(_DWORD *)(v228 + 4 * v246);
                  ++v249;
                  if (!v247)
                    goto LABEL_296;
                }
                a6 = *(unsigned int *)(v248 + 16 * v250 + 8) | ((unint64_t)*(unsigned __int8 *)(v248 + 16 * v250 + 12) << 32);
LABEL_309:
                if ((_DWORD)a6 != -1)
                {
                  v16 = (JSC::JSString *)HIDWORD(a6);
                  if ((int)a6 <= 63)
                  {
                    v251 = v19 + 16;
                    v252 = a6 << 32;
                  }
                  else
                  {
                    v251 = *(_QWORD *)(v19 + 8) - 8;
                    v252 = 0x3F00000000 - (a6 << 32);
                  }
                  this = *(_QWORD *)(v251 + (v252 >> 29));
                  if ((this & 0xFFFE000000000002) != 0)
                    goto LABEL_324;
                  v253 = *(unsigned __int8 *)(this + 5);
                  if (v253 != 5)
                  {
                    if (v253 != 6)
                    {
LABEL_324:
                      v372 = (uint64_t (*)(unint64_t))this;
                      v376 = (unsigned __int8 *)v19;
                      goto LABEL_76;
                    }
                    a3 = (uint64_t)v13;
                    v280 = *(_DWORD *)(v225 + 16) & 3;
                    v281 = *(_QWORD *)(this + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v283 = *(int8x16_t ***)(this + 24);
                      v282 = *(_QWORD *)(this + 32);
                      v372 = *(uint64_t (**)(unint64_t))(this + 8);
                      v373 = v281;
                      LODWORD(v374) = HIDWORD(a6);
                      v376 = (unsigned __int8 *)v19;
                      BYTE1(v377[1]) = 3;
                      if (v280 != 2)
                        LOBYTE(v377[1]) = 1;
                      BYTE3(v377[1]) = 1;
                      v380 = v283;
                      v381 = v282;
                      v12 = 0xFFFE000000000002;
                      goto LABEL_77;
                    }
                    v372 = *(uint64_t (**)(unint64_t))(this + 8);
                    v373 = v281;
                    LODWORD(v374) = HIDWORD(a6);
                    v376 = (unsigned __int8 *)v19;
                    BYTE1(v377[1]) = 3;
                    v12 = 0xFFFE000000000002;
                    if (v280 == 2)
                      goto LABEL_77;
LABEL_349:
                    LOBYTE(v377[1]) = 1;
                    goto LABEL_77;
                  }
                  v273 = v13;
                  v156 = v11;
                  v157 = v10;
                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v19, (uint64_t)v224, (uint64_t)&v372, this, SHIDWORD(a6), a6);
                  v12 = 0xFFFE000000000002;
                  v13 = v273;
LABEL_164:
                  v10 = v157;
                  v11 = v156;
                  goto LABEL_77;
                }
              }
            }
          }
        }
      }
    }
LABEL_296:
    if ((*(_BYTE *)(v19 + 6) & 0x20) != 0)
    {
      v258 = v11;
      v259 = v224;
      v364 = v18;
      v260 = v13;
      v261 = v10;
      v262 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, v224, v370, (uint64_t)&v372);
      v224 = v259;
      v12 = 0xFFFE000000000002;
      v13 = v260;
      v18 = v364;
      v10 = v261;
      v11 = v258;
      if ((v262 & 1) != 0)
        goto LABEL_77;
    }
    goto LABEL_297;
  }
  v263 = v10[7];
  v354 = v13;
  v365 = v222 | v223;
  while (1)
  {
    v175 = v11;
    v264 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    v265 = v16;
    v178 = v10;
    v266 = (*(uint64_t (**)(JSC::JSString *, WTF **))(16 * *(unsigned int *)(v264 + 0x4C) + 0x70))(v16, v10);
    v270 = v266;
    if (*((_DWORD *)v263 + 20))
      break;
    v11 = v175;
    v10 = v178;
    v13 = v354;
    v12 = 0xFFFE000000000002;
    if ((v266 & 1) != 0)
      goto LABEL_77;
LABEL_355:
    if (BYTE2(v377[1]) == 3)
    {
      if (BYTE4(v377[1]))
        goto LABEL_378;
      v271 = *((unsigned __int8 *)v265 + 5);
      if (v271 == 61)
        goto LABEL_358;
    }
    else
    {
      v271 = *((unsigned __int8 *)v265 + 5);
      if (v271 == 61)
      {
        if (BYTE2(v377[1]) == 1)
          goto LABEL_378;
        goto LABEL_358;
      }
    }
    if ((v271 - 39) <= 0xA
      && JSC::JSArrayBufferView::length(v265, v267, a3, this, (uint64_t)v16, a6, 0xFFFE000000000002, (uint64_t)v13) <= v365)
    {
      goto LABEL_378;
    }
LABEL_358:
    if ((*(_WORD *)(v264 + 12) & 0x800) == 0 || BYTE2(v377[1]) == 3)
    {
      v272 = *(_QWORD *)(16 * (*(_DWORD *)v265 & 0xFFFFFFFE) + 0x30);
      if (!v272)
        v272 = *((_QWORD *)v265 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v265 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v272 = (*(uint64_t (**)(JSC::JSString *, WTF **))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v265 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0xB0))(v265, v178);
      }
      else
      {
        v272 = *(_QWORD *)(16 * (*(_DWORD *)v265 & 0xFFFFFFFE) + 0x30);
        if (!v272)
          v272 = *((_QWORD *)v265 + 2);
      }
      if (*((_DWORD *)v263 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v263, v267, a3, this, (uint64_t)v16, a6, v12, (uint64_t)v13))
      {
        goto LABEL_378;
      }
    }
    if ((v272 & 0xFFFE000000000002) != 0)
    {
      v11 = v175;
      v10 = v178;
      v13 = v354;
      goto LABEL_47;
    }
    v16 = (JSC::JSString *)v272;
    v11 = v175;
    v10 = v178;
    v13 = v354;
    v55 = 10;
    a3 = v365;
    if (*(unsigned __int8 *)(v272 + 5) <= 0x16u)
      goto LABEL_48;
  }
  v302 = JSC::VM::hasExceptionsAfterHandlingTraps(v263, v267, a3, this, (uint64_t)v16, a6, v268, v269);
  v13 = v354;
  v12 = 0xFFFE000000000002;
  if (((v302 | v270) & 1) == 0)
    goto LABEL_355;
  v11 = v175;
  v10 = v178;
  if (!v302)
    goto LABEL_77;
LABEL_47:
  v55 = 10;
LABEL_48:
  if (*((_DWORD *)v11 + 20))
  {
    v254 = *((_DWORD *)v11 + 20);
    if ((v254 & 0x27) != 0 && (v254 & 0x20) == 0)
    {
      v342 = v11;
      v343 = v10;
      v344 = v13;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, a3, this, (uint64_t)v16, a6, v12, (uint64_t)v13);
      v13 = v344;
      v10 = v343;
      v11 = v342;
    }
    if (*((_QWORD *)v11 + 2))
    {
      v55 = 0;
      goto LABEL_80;
    }
  }
  if (!v13 && (_BYTE)qword_1ECF4C789)
  {
    v56 = BYTE1(v377[1]);
    if (!BYTE1(v377[1]) || LOBYTE(v377[1]) != 1)
    {
      if (v9[5] == 36 && *v8 == *(_QWORD *)(*((_QWORD *)v11 + 5244) + 1768))
        *(_WORD *)(v7 + 14) = 3;
      goto LABEL_80;
    }
    if (*(unsigned __int8 *)(v7 + 14) <= 2u)
    {
      if (*(_DWORD *)v7)
      {
        v158 = *(_DWORD *)v7 & 0xFFFFFFFE;
        if ((_DWORD)v158)
        {
          v159 = *(_DWORD *)v9 & 0xFFFFFFFE;
          if ((_DWORD)v159)
          {
            v160 = 16 * v158;
            v161 = 16 * v159;
            if (16 * v158 != v161 && *(_DWORD *)(16 * v158 + 0x1C) == *(_DWORD *)(v161 + 28))
            {
              v162 = *(_QWORD *)(16 * v158 + 0x40);
              if (v162)
              {
                if (*(_BYTE *)(v162 + 5) != 1)
                {
                  v163 = *(_QWORD *)(v161 + 64);
                  if (v163)
                  {
                    if (*(_BYTE *)(v163 + 5) != 1)
                    {
                      v164 = *(_QWORD *)(v162 + 72);
                      if (v164)
                      {
                        if (v164 == *(_QWORD *)(v163 + 72))
                        {
                          v165 = *(_QWORD *)(v160 + 48);
                          if (v165)
                          {
                            v166 = *(_QWORD *)(v161 + 48);
                            if (v166)
                            {
                              if (v165 != v166)
                              {
                                v167 = v10;
                                v168 = v11;
                                v169 = v166 != 2;
                                v170 = v165 != 2;
                                if (v165 == 2 || v166 == 2)
                                {
LABEL_190:
                                  if (!v170 && !v169)
                                  {
                                    v382[0] = (WTF *)&off_1E3583C90;
                                    v382[1] = (WTF *)"Detected poly proto opportunity.";
                                    JSC::InlineWatchpointSet::invalidate((uint64_t *)(v164 + 8), v11, v382, this, (uint64_t)v16, a6, v12, 0, *(double *)a7.i64);
                                    v10 = v167;
                                    v11 = v168;
                                    v56 = BYTE1(v377[1]);
                                  }
                                }
                                else
                                {
                                  while (*(_DWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x1C) == *(_DWORD *)(16 * (*(_DWORD *)v166 & 0xFFFFFFFE) + 0x1C))
                                  {
                                    v171 = *(_QWORD *)(16 * (*(_DWORD *)v165 & 0xFFFFFFFE) + 0x30);
                                    if (!v171)
                                      v171 = *(_QWORD *)(v165 + 16);
                                    v172 = *(_QWORD *)(16 * (*(_DWORD *)v166 & 0xFFFFFFFE) + 0x30);
                                    if (!v172)
                                      v172 = *(_QWORD *)(v166 + 16);
                                    v170 = (v171 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                    v169 = (v172 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                    v173 = (v171 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v172 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                                    v166 = v172;
                                    v165 = v171;
                                    if (v173)
                                      goto LABEL_190;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v56 == 1)
    {
      if (v376 == v9)
      {
        v57 = v11;
        v58 = *(_DWORD *)v9 & 0xFFFFFFFE;
        v59 = a2 + 16;
        if (__ldaxr(a2 + 16))
        {
          __clrex();
          goto LABEL_59;
        }
        if (__stxr(1u, v59))
LABEL_59:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v59);
        *(_WORD *)(v7 + 14) = 1;
        *(_QWORD *)v7 = 0;
        if ((*(_DWORD *)(16 * v58 + 0x10) & 3) != 2)
        {
          v61 = *(_WORD *)(16 * v58 + 0xC);
          if ((v61 & 8) == 0 && ((v61 & 0x10) == 0 || (v61 & 0x20) != 0) && ((v61 & 0x18) != 0x10 || (v61 & 0x20) == 0))
          {
            v62 = HIDWORD(v374);
            *(_DWORD *)v7 = v58;
            *(_DWORD *)(v7 + 4) = v62;
            if (a2)
            {
              if (*((_DWORD *)v57 + 190) >= a2[7])
                JSC::Heap::writeBarrierSlowPath((uint64_t)v57 + 192, (unint64_t)a2);
            }
          }
        }
        v63 = __ldxr(v59);
        if (v63 == 1)
        {
          if (!__stlxr(0, v59))
            goto LABEL_80;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v59, 0, a3, this, (uint64_t)v16, a6, v12, (uint64_t)v13);
        goto LABEL_80;
      }
      if (*(_BYTE *)(v7 + 15))
      {
        v74 = *(_BYTE *)(v7 + 15) - 1;
        *(_BYTE *)(v7 + 15) = v74;
        if (!v74)
        {
          v75 = *(_DWORD *)v9 & 0xFFFFFFFE;
          v76 = (const JSC::PropertyTable *)(16 * v75);
          v77 = *((_WORD *)v76 + 6);
          if ((v77 & 8) == 0)
          {
            v371 = v11;
            v78 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x10);
            if ((v78 & 3) != 2)
            {
              if ((v77 & 0x18) != 0x10 || (v77 & 0x20) == 0)
              {
                if ((v78 & 3) == 0)
                  goto LABEL_104;
                goto LABEL_373;
              }
              goto LABEL_80;
            }
LABEL_373:
            if ((v78 & 0x800000) != 0)
              goto LABEL_80;
            v278 = v10;
            JSC::Structure::flattenDictionaryStructure((unint64_t)v76, v11, (JSC::JSObject *)v9, this, (uint64_t)v16, a6, v12, (uint64_t)v13);
            v10 = v278;
LABEL_104:
            v79 = v10;
            JSC::prepareChainForCaching(v10, (JSC::JSObject *)v9, *v8, (uint64_t)&v372, (uint64_t)v16, a6, v12, (uint64_t)v13);
            if (BYTE1(v377[1]))
            {
              v83 = *v8;
              v84 = a2;
              JSC::generateConditionsForPrototypePropertyHit(v371, a2, v79, v76, (uint64_t)v376, v83, v81, v82, (uint64_t *)v382);
            }
            else
            {
              v301 = *v8;
              v84 = a2;
              JSC::generateConditionsForPropertyMiss((uint64_t)v371, a2, v79, (uint64_t)v76, v301, v80, v81, v82, (uint64_t *)v382);
            }
            v92 = (unsigned int *)v382[0];
            if (v382[0])
            {
              v93 = *((_DWORD *)v382[0] + 1);
              if (!v93)
                goto LABEL_238;
              v94 = (unsigned int *)WTF::fastMalloc((WTF *)(56 * v93 + 8));
              v95 = v94;
              *v94 = v93;
              v96 = 2;
              do
              {
                v97 = &v94[v96];
                *(_QWORD *)v97 = 0;
                *((_QWORD *)v97 + 1) = 0;
                *((_BYTE *)v97 + 16) = 3;
                *((_BYTE *)v97 + 21) = 0;
                *(unsigned int *)((char *)v97 + 17) = 0;
                *(unsigned int *)((char *)v97 + 22) = -1;
                *((_QWORD *)v97 + 5) = 0;
                *((_QWORD *)v97 + 6) = 0;
                v96 += 14;
                *((_QWORD *)v97 + 4) = 0;
              }
              while (v97 + 14 != &v94[14 * v93 + 2]);
              v98 = v92[1];
              if ((_DWORD)v98)
              {
                v353 = v75;
                v358 = (JSC::VM *)v55;
                v99 = 0;
                v100 = v84;
                v101 = v92 + 2;
                v102 = 24 * v98;
                v103 = -1;
                v104 = -1;
                v360 = (unint64_t)v100 >> 32;
                while (1)
                {
                  v105 = *(_OWORD *)v101;
                  v383 = (char *)*((_QWORD *)v101 + 2);
                  *(_OWORD *)v382 = v105;
                  if (++v104 >= (unint64_t)*v95)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198832C54);
                  }
                  JSC::ObjectPropertyCondition::isWatchable((uint64_t)v382, 0, v86, v87, v88, v89, v90, v91);
                  if (!v106)
                    break;
                  v107 = &v95[v99];
                  if (!((unint64_t)BYTE6(v382[1]) << 48))
                    v103 = (int)v383;
                  *(unsigned int *)((char *)v107 + 25) = a2;
                  *((_BYTE *)v107 + 29) = v360;
                  *(unsigned int *)((char *)v107 + 30) = a1;
                  v108 = *(_OWORD *)v382;
                  *((_QWORD *)v107 + 7) = v383;
                  *(_OWORD *)(v107 + 10) = v108;
                  JSC::ObjectPropertyCondition::isWatchable((uint64_t)(v107 + 10), 0, v86, v87, v88, v89, v90, v91);
                  if ((v109 & 1) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198832C74);
                  }
                  v110 = 16 * (**((_DWORD **)v107 + 5) & 0xFFFFFFFE);
                  v111 = *(_QWORD *)(v110 + 0x60);
                  if ((v111 & 1) != 0)
                  {
                    v352 = (v111 >> 1) & 3;
                    v111 = WTF::fastMalloc((WTF *)0x18);
                    *(_DWORD *)v111 = 1;
                    *(_BYTE *)(v111 + 4) = v352;
                    *(_BYTE *)(v111 + 5) = 0;
                    *(_QWORD *)(v111 + 8) = v111 + 8;
                    *(_QWORD *)(v111 + 16) = v111 + 8;
                    __dmb(0xAu);
                    *(_QWORD *)(v110 + 96) = v111;
                  }
                  v113 = *(_QWORD *)(v111 + 8);
                  v112 = (_QWORD *)(v111 + 8);
                  v114 = &v95[v99];
                  v99 += 14;
                  *((_QWORD *)v114 + 2) = v112;
                  *((_QWORD *)v107 + 1) = v113;
                  *v112 = v107 + 2;
                  *(_QWORD *)(v113 + 8) = v107 + 2;
                  *((_WORD *)v112 - 2) = 257;
                  v101 += 6;
                  v102 -= 24;
                  if (!v102)
                  {
                    v84 = a2;
                    v115 = v103;
                    v75 = v353;
                    v55 = (uint64_t)v358;
                    goto LABEL_121;
                  }
                }
                v55 = (uint64_t)v358;
LABEL_231:
                v198 = (uint64_t *)(v95 + 2);
                v199 = *v95;
                if ((_DWORD)v199)
                {
                  v200 = 56 * v199;
                  do
                  {
                    v201 = (uint64_t *)v198[1];
                    if (v201)
                    {
                      v202 = *v198;
                      *v201 = *v198;
                      *(_QWORD *)(v202 + 8) = v201;
                      *v198 = 0;
                      v198[1] = 0;
                    }
                    v198 += 7;
                    v200 -= 56;
                  }
                  while (v200);
                }
                WTF::fastFree((unint64_t)v95, v85, v86, v87, v88, v89, v90, v91);
LABEL_237:
                if (!v92)
                  goto LABEL_80;
                do
                {
LABEL_238:
                  v203 = __ldaxr(v92);
                  v204 = v203 - 1;
                }
                while (__stlxr(v204, v92));
                if (!v204)
                {
                  atomic_store(1u, v92);
                  WTF::fastFree((unint64_t)v92, v85, v86, v87, v88, v89, v90, v91);
                }
                goto LABEL_80;
              }
            }
            else
            {
              v95 = 0;
            }
            v115 = -1;
LABEL_121:
            v117 = (uint64_t *)(v84 + 112);
            v116 = *((_QWORD *)v84 + 14);
            if (v116
              || (WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::rehash((uint64_t *)v84 + 14, 8u, 0), (v116 = *v117) != 0))
            {
              v118 = *(_DWORD *)(v116 - 8);
            }
            else
            {
              v118 = 0;
            }
            v119 = 9 * ((~(a1 << 15) + a1) ^ ((~(a1 << 15) + a1) >> 10));
            v120 = (v119 ^ (v119 >> 6)) + ~((v119 ^ (v119 >> 6)) << 11);
            v121 = v118 & ((0xD7862706ELL * (unint64_t)(95187966 * (v120 ^ HIWORD(v120)) + 277951225 * v75)) >> 4);
            v122 = (_QWORD *)(v116 + 16 * v121);
            v123 = *(_DWORD *)v122;
            v124 = *((_DWORD *)v122 + 1);
            if (*(_DWORD *)v122)
              v125 = 0;
            else
              v125 = v124 == -1;
            if (!v125)
            {
              v209 = 0;
              v210 = 1;
              while (v123 != v75 || v124 != a1)
              {
                if (v123 == 1)
                  v209 = v122;
                v121 = (v121 + v210) & v118;
                v122 = (_QWORD *)(v116 + 16 * v121);
                v123 = *(_DWORD *)v122;
                v124 = *((_DWORD *)v122 + 1);
                ++v210;
                if (*(_DWORD *)v122)
                  v211 = 0;
                else
                  v211 = v124 == -1;
                if (v211)
                {
                  if (v209)
                  {
                    *v209 = 0xFFFFFFFF00000000;
                    v209[1] = 0;
                    --*(_DWORD *)(*v117 - 16);
                    v122 = v209;
                  }
                  goto LABEL_129;
                }
              }
LABEL_143:
              v138 = a2 + 16;
              if (__ldaxr(a2 + 16))
              {
                __clrex();
                goto LABEL_145;
              }
              if (__stxr(1u, v138))
LABEL_145:
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v138);
              if (BYTE1(v377[1]))
              {
                v140 = v376;
                *(_DWORD *)(v7 + 4) = v115;
                *(_QWORD *)(v7 + 8) = v140;
              }
              else
              {
                *(_BYTE *)(v7 + 14) = 2;
              }
              *(_DWORD *)v7 = v75;
              v141 = __ldxr(v138);
              if (v141 == 1)
              {
                if (!__stlxr(0, v138))
                  goto LABEL_227;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v138, 0, v86, v87, v88, v89, v90, v91);
LABEL_227:
              if (a2 && *((_DWORD *)v371 + 190) >= a2[7])
                JSC::Heap::writeBarrierSlowPath((uint64_t)v371 + 192, (unint64_t)a2);
              if (v95)
                goto LABEL_231;
              goto LABEL_237;
            }
LABEL_129:
            *(_DWORD *)v122 = v75;
            *((_DWORD *)v122 + 1) = a1;
            v126 = (unsigned int *)v122[1];
            v122[1] = v95;
            if (v126)
            {
              v127 = (uint64_t *)(v126 + 2);
              v128 = *v126;
              if ((_DWORD)v128)
              {
                v129 = 56 * v128;
                do
                {
                  v130 = (uint64_t *)v127[1];
                  if (v130)
                  {
                    v131 = *v127;
                    *v130 = *v127;
                    *(_QWORD *)(v131 + 8) = v130;
                    *v127 = 0;
                    v127[1] = 0;
                  }
                  v127 += 7;
                  v129 -= 56;
                }
                while (v129);
              }
              WTF::fastFree((unint64_t)v126, v85, v86, v87, v88, v89, v90, v91);
            }
            v132 = *v117;
            if (*v117)
              v133 = *(_DWORD *)(v132 - 12) + 1;
            else
              v133 = 1;
            *(_DWORD *)(v132 - 12) = v133;
            v134 = *v117;
            if (*v117)
              v135 = *(_DWORD *)(v134 - 12);
            else
              v135 = 0;
            v136 = (*(_DWORD *)(v134 - 16) + v135);
            v137 = *(unsigned int *)(v134 - 4);
            if (v137 > 0x400)
            {
              if (v137 > 2 * v136)
                goto LABEL_142;
            }
            else
            {
              if (3 * v137 > 4 * v136)
              {
LABEL_142:
                v95 = 0;
                goto LABEL_143;
              }
              if (!(_DWORD)v137)
              {
                v216 = 8;
                goto LABEL_273;
              }
            }
            v216 = (_DWORD)v137 << (6 * *(_DWORD *)(v134 - 12) >= (2 * v137));
LABEL_273:
            WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::rehash(v117, v216, (int *)v122);
            goto LABEL_142;
          }
        }
      }
    }
  }
LABEL_80:
  if (v379)
  {
    v67 = *(_DWORD *)(v378 + 4);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x1988329CCLL);
    }
    *(_DWORD *)(v378 + 4) = v67 - 1;
  }
  return v55;
}

__int128 *llint_slow_path_get_length(uint64_t a1, unsigned __int8 *a2, int8x16_t a3)
{
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  unsigned int v33;
  int v34;
  int v35;
  JSC::VM *v36;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(JSC::VM **)(v3 + 72);
  *((_QWORD *)v5 + 5) = a1;
  v36 = v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
  if (v8 > (unint64_t)a2 || v9 <= (unint64_t)a2)
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x1988339B8);
  }
  v11 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v8) & 0x3FFFFFFF;
  v13 = *a2;
  if (v13 == 128)
  {
    v34 = *((__int16 *)a2 + 1);
    if (v34 <= 63)
      v15 = *((__int16 *)a2 + 1);
    else
      v15 = v34 + 1073741760;
    v35 = *((__int16 *)a2 + 2);
    v17 = v35 + 1073741760;
    if (v35 <= 63)
      v17 = *((__int16 *)a2 + 2);
    v18 = *((unsigned __int16 *)a2 + 3);
    v19 = *((unsigned __int16 *)a2 + 4);
  }
  else if (v13 == 130)
  {
    v15 = *(_DWORD *)(a2 + 2);
    v17 = *(_DWORD *)(a2 + 6);
    v18 = *(_DWORD *)(a2 + 10);
    v19 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    v14 = (char)a2[1];
    if (v14 <= 15)
      v15 = (char)a2[1];
    else
      v15 = v14 + 1073741808;
    v16 = (char)a2[2];
    v17 = v16 + 1073741808;
    if (v16 <= 15)
      v17 = (char)a2[2];
    v18 = a2[3];
    v19 = a2[4];
  }
  v20 = *(_QWORD *)(v3 + 136);
  v21 = *(unsigned __int16 *)(v20 + 38);
  if (!*(_WORD *)(v20 + 38))
    v21 = *(_DWORD *)(v20 + 172);
  v22 = *((_QWORD *)v5 + 5244);
  if (v17 >= 0x40000000)
  {
    v33 = v17 - 0x40000000;
    if (v33 >= *(_DWORD *)(v6 + 172))
      goto LABEL_40;
    v23 = (_DWORD **)(*(_QWORD *)(v6 + 160) + 8 * v33);
  }
  else
  {
    v23 = (_DWORD **)(a1 + 8 * v17);
  }
  v24 = v19;
  v25 = (v20 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = *v23;
  if (((unint64_t)*v23 & 0xFFFE000000000002) == 0)
    *(_DWORD *)(v25 + 32 * v24 + 16) = *v26 & 0xFFFFFFFE;
  v27 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 80);
  v28 = *(_QWORD *)v27;
  v29 = *(unsigned int *)(v27 + 12) + *(_QWORD *)v27;
  if (v28 > (unint64_t)a2 || v29 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988339D8);
  }
  v31 = JSC::LLInt::performLLIntGetByID(4 * ((int)a2 - (int)v28), (unsigned __int8 *)v3, v4, (uint64_t)v26, (unint64_t *)(v22 + 1768), v25 + 32 * v24, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v4, &v36, "LLIntSlowPaths", v11);
  if (*((_QWORD *)v5 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v15) = v31;
  *(_QWORD *)(*(_QWORD *)(v3 + 136) - 16 * v18 - 16) = v31;
  return (__int128 *)v11;
}

__int128 *llint_slow_path_iterator_open_get_next(uint64_t a1, JSC::OpIteratorOpen *this, int8x8_t a3)
{
  uint64_t v3;
  JSC::JSGlobalObject *v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  JSC::OpIteratorOpen *v10;
  int8x16_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  const WTF::String *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  JSC::Exception *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint32x4_t v52;
  unsigned int v53;
  unsigned int v54;
  JSC::VM *v55;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(JSC::JSGlobalObject **)(v3 + 8);
  v5 = *(JSC::VM **)(v3 + 72);
  *((_QWORD *)v5 + 5) = a1;
  v55 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)this || v8 <= (unint64_t)this)
  {
    __break(0xC471u);
    goto LABEL_36;
  }
  v10 = this;
  *(_DWORD *)(a1 + 36) = ((_DWORD)this - v7) & 0x3FFFFFFF;
  JSC::OpIteratorOpen::decode(this, &v52, a3);
  v13 = *(_QWORD *)(v3 + 136);
  v14 = *(unsigned __int16 *)(v13 + 8);
  if (!*(_WORD *)(v13 + 8))
    v14 = *(_DWORD *)(v13 + 112);
  if (v52.i32[0] >= 0x40000000)
  {
    v42 = *(_QWORD *)(a1 + 16);
    if ((v52.i32[0] - 0x40000000) >= *(_DWORD *)(v42 + 172))
    {
      __break(0xC471u);
LABEL_36:
      JUMPOUT(0x198833C9CLL);
    }
    v15 = (uint64_t *)(*(_QWORD *)(v42 + 160) + 8 * (v52.i32[0] - 0x40000000));
  }
  else
  {
    v15 = (uint64_t *)(a1 + 8 * v52.i32[0]);
  }
  v16 = *v15;
  if ((*v15 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) <= 0x16u)
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x2B00000002;
    *(_QWORD *)(v24 + 8) = "Iterator result interface is not an object.";
    *(_DWORD *)(v24 + 16) = 4;
    v51 = (WTF::StringImpl *)v24;
    v26 = JSC::createTypeError((unint64_t)v4, &v51, v25);
    v33 = (JSC::Exception *)v26;
    if ((v26 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)))
    {
      v33 = (JSC::Exception *)JSC::Exception::create((uint64_t)v5, (JSC::VM *)v26, 0, v27, v28, v29, v30, v31);
    }
    JSC::VM::throwException(v5, v4, v33, v32, v27, v28, v29, v30, v31);
    v41 = v51;
    v51 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    return &xmmword_1ECF4C7C0;
  }
  else
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 80);
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned int *)(v17 + 12) + *(_QWORD *)v17;
    if (v18 > (unint64_t)v10 || v19 <= (unint64_t)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198833CBCLL);
    }
    v21 = v52.i32[1];
    v22 = JSC::LLInt::performLLIntGetByID((4 * ((_DWORD)v10 - v18)) | 1, (unsigned __int8 *)v3, (uint64_t)v4, v16, (unint64_t *)(*((_QWORD *)v5 + 5244) + 2000), ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 112 * v54 + 80, v12);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v4, &v55, "LLIntSlowPaths", v10);
    if (*((_QWORD *)v5 + 2))
      return &xmmword_1ECF4C7C0;
    *(_QWORD *)(a1 + 8 * v21) = v22;
    *(_QWORD *)(*(_QWORD *)(v3 + 136) - 16 * v53 - 16) = v22;
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v4, &v55, "LLIntSlowPaths", v10);
    if (*((_QWORD *)v5 + 2))
      return &xmmword_1ECF4C7C0;
  }
  return (__int128 *)v10;
}

__int128 *llint_slow_path_iterator_next_get_done(uint64_t a1, JSC::OpIteratorNext *this, int8x8_t a3)
{
  uint64_t v3;
  JSC::JSGlobalObject *v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  JSC::OpIteratorNext *v10;
  int8x16_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  const WTF::String *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  JSC::Exception *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  JSC::VM *v56;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(JSC::JSGlobalObject **)(v3 + 8);
  v5 = *(JSC::VM **)(v3 + 72);
  *((_QWORD *)v5 + 5) = a1;
  v56 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)this || v8 <= (unint64_t)this)
  {
    __break(0xC471u);
    goto LABEL_36;
  }
  v10 = this;
  *(_DWORD *)(a1 + 36) = ((_DWORD)this - v7) & 0x3FFFFFFF;
  JSC::OpIteratorNext::decode(this, (uint64_t)&v52, a3);
  v13 = *(_QWORD *)(v3 + 136);
  v14 = *(unsigned __int16 *)(v13 + 4);
  if (!*(_WORD *)(v13 + 4))
    v14 = *(_DWORD *)(v13 + 104);
  if (v53 >= 0x40000000)
  {
    v42 = *(_QWORD *)(a1 + 16);
    if ((v53 - 0x40000000) >= *(_DWORD *)(v42 + 172))
    {
      __break(0xC471u);
LABEL_36:
      JUMPOUT(0x198833F90);
    }
    v15 = (uint64_t *)(*(_QWORD *)(v42 + 160) + 8 * (v53 - 0x40000000));
  }
  else
  {
    v15 = (uint64_t *)(a1 + 8 * v53);
  }
  v16 = *v15;
  if ((*v15 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) <= 0x16u)
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x2B00000002;
    *(_QWORD *)(v24 + 8) = "Iterator result interface is not an object.";
    *(_DWORD *)(v24 + 16) = 4;
    v51 = (WTF::StringImpl *)v24;
    v26 = JSC::createTypeError((unint64_t)v4, &v51, v25);
    v33 = (JSC::Exception *)v26;
    if ((v26 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)))
    {
      v33 = (JSC::Exception *)JSC::Exception::create((uint64_t)v5, (JSC::VM *)v26, 0, v27, v28, v29, v30, v31);
    }
    JSC::VM::throwException(v5, v4, v33, v32, v27, v28, v29, v30, v31);
    v41 = v51;
    v51 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
    return &xmmword_1ECF4C7C0;
  }
  else
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 80);
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned int *)(v17 + 12) + *(_QWORD *)v17;
    if (v18 > (unint64_t)v10 || v19 <= (unint64_t)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198833FB0);
    }
    v21 = v52;
    v22 = JSC::LLInt::performLLIntGetByID((4 * ((_DWORD)v10 - v18)) | 1, (unsigned __int8 *)v3, (uint64_t)v4, v16, (unint64_t *)(*((_QWORD *)v5 + 5244) + 1200), ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)v55 << 7) + 80, v12);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v4, &v56, "LLIntSlowPaths", v10);
    if (*((_QWORD *)v5 + 2))
      return &xmmword_1ECF4C7C0;
    *(_QWORD *)(a1 + 8 * v21) = v22;
    *(_QWORD *)(*(_QWORD *)(v3 + 136) - 16 * v54 - 16) = v22;
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v4, &v56, "LLIntSlowPaths", v10);
    if (*((_QWORD *)v5 + 2))
      return &xmmword_1ECF4C7C0;
  }
  return (__int128 *)v10;
}

__int128 *llint_slow_path_iterator_next_get_value(uint64_t a1, JSC::OpIteratorNext *this, int8x8_t a3)
{
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  JSC::OpIteratorNext *v10;
  int8x16_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  JSC::VM *v30;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(JSC::VM **)(v3 + 72);
  *((_QWORD *)v5 + 5) = a1;
  v30 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)this || v8 <= (unint64_t)this)
  {
    __break(0xC471u);
    JUMPOUT(0x19883423CLL);
  }
  v10 = this;
  *(_DWORD *)(a1 + 36) = ((_DWORD)this - v7) & 0x3FFFFFFF;
  JSC::OpIteratorNext::decode(this, (uint64_t)&v26, a3);
  v13 = *(_QWORD *)(v3 + 136);
  v14 = *(unsigned __int16 *)(v13 + 4);
  if (!*(_WORD *)(v13 + 4))
    v14 = *(_DWORD *)(v13 + 104);
  v15 = v27;
  v16 = *(_QWORD *)(a1 + 8 * v26);
  if (v16 >= 0xFFFE000000000000)
  {
LABEL_34:
    if (!(_DWORD)v16)
      goto LABEL_12;
    goto LABEL_27;
  }
  if (v16 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v12.i64[0] = v16 - 0x2000000000000;
    if (COERCE_DOUBLE(v16 - 0x2000000000000) == 0.0)
      goto LABEL_12;
    goto LABEL_27;
  }
  if ((v16 & 0xFFFE000000000002) != 0)
  {
    if (v16 != 7)
      goto LABEL_12;
    goto LABEL_27;
  }
  v23 = *(unsigned __int8 *)(v16 + 5);
  if (v23 == 2)
  {
    v25 = *(_QWORD *)(v16 + 8);
    v16 += 16;
    if ((v25 & 1) == 0)
      v16 = v25 + 4;
    LODWORD(v16) = *(_DWORD *)v16;
    goto LABEL_34;
  }
  if (v23 == 3)
  {
    LODWORD(v16) = *(_DWORD *)(v16 + 8);
    goto LABEL_34;
  }
  v24 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v24 + 10) & 1) != 0 && *(_QWORD *)(v24 + 40) == v4)
  {
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 80);
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned int *)(v17 + 12) + *(_QWORD *)v17;
    if (v18 > (unint64_t)v10 || v19 <= (unint64_t)v10)
    {
      __break(0xC471u);
      JUMPOUT(0x19883425CLL);
    }
    v21 = JSC::LLInt::performLLIntGetByID((4 * ((_DWORD)v10 - v18)) | 2, (unsigned __int8 *)v3, v4, *(_QWORD *)(a1 + 8 * v27), (unint64_t *)(*((_QWORD *)v5 + 5244) + 2608), ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)v29 << 7) + 96, v12);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v4, &v30, "LLIntSlowPaths", v10);
    if (*((_QWORD *)v5 + 2))
      return &xmmword_1ECF4C7C0;
    *(_QWORD *)(a1 + 8 * v15) = v21;
    *(_QWORD *)(*(_QWORD *)(v3 + 136) - 16 * v28 - 16) = v21;
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v4, &v30, "LLIntSlowPaths", v10);
    if (*((_QWORD *)v5 + 2))
      return &xmmword_1ECF4C7C0;
    return (__int128 *)v10;
  }
LABEL_27:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v4, &v30, "LLIntSlowPaths", v10);
  if (*((_QWORD *)v5 + 2))
    return &xmmword_1ECF4C7C0;
  return (__int128 *)v10;
}

__int128 *llint_slow_path_put_by_id(uint64_t a1, unsigned __int8 *a2, JSC::ExecutableBase *a3, const JSC::PropertyTable *a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t *v28;
  char v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  JSC::VM **v37;
  JSC::VM *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  JSC::VM *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  _DWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  const JSC::PropertyTable **v73;
  const JSC::PropertyTable *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v88;
  __int16 v89;
  unint64_t v90;
  int *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  JSC::JSObject *v95;
  uint64_t v96;
  JSC::Structure *v97;
  __int16 v98;
  int *v99;
  unsigned __int8 *v100;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  char v109;
  JSC::VM *v110;
  uint64_t v111;
  JSC::JSObject *i;
  unsigned int v113;
  JSC::JSObject *v114;
  BOOL v115;
  int v116;
  int v117;
  JSC::VM *v118;
  int v119;
  BOOL v120;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  unsigned __int16 *v136;
  uint64_t v137;
  unsigned int v138;
  BOOL v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 *v149;
  int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  char **v178;
  JSC::VM *v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __n128 v192;
  unsigned int v193;
  unsigned __int8 *v195;
  uint64_t v196;
  unsigned int v197;
  char v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  JSC::VM *v202;
  unsigned int v203;
  unsigned int v204;
  const void *v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  JSC::JSGlobalObject *v209;
  unsigned int v210;
  JSC::JSCell *v211;
  JSC::VM *v212;
  _DWORD *v213;
  unint64_t v214;
  int v215;
  BOOL v216;
  __int16 v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  JSC::VM *v221;
  void (**v222)(JSC::StringFireDetail *__hidden);
  const char *v223;
  uint64_t v224;
  uint64_t v225;

  v9 = *(_QWORD *)(a1 + 16);
  v209 = *(JSC::JSGlobalObject **)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v221 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19883522CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v65 = *((__int16 *)a2 + 1);
    if (v65 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v65 + 1073741760;
    v20 = *((unsigned __int16 *)a2 + 2);
    v66 = *((__int16 *)a2 + 3);
    if (v66 <= 63)
      v22 = *((__int16 *)a2 + 3);
    else
      v22 = v66 + 1073741760;
    v210 = a2[8];
    v23 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v22 = *(_DWORD *)(a2 + 10);
    v210 = a2[14];
    v23 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = a2[2];
    v21 = (char)a2[3];
    if (v21 <= 15)
      v22 = (char)a2[3];
    else
      v22 = v21 + 1073741808;
    v210 = a2[4];
    v23 = a2[5];
  }
  v24 = *(_QWORD *)(v9 + 136);
  v25 = *(unsigned __int16 *)(v24 + 14);
  if (!*(_WORD *)(v24 + 14))
    v25 = *(_DWORD *)(v24 + 124);
  v201 = *(_QWORD *)(v9 + 136);
  v26 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
  v211 = (JSC::JSCell *)v9;
  v203 = v23;
  if (v26)
  {
    v27 = *v26;
    if (*v26 > v20)
    {
      v28 = (unint64_t *)&v26[2 * v20 + 2];
      goto LABEL_20;
    }
  }
  else
  {
    v27 = 0;
  }
  v64 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
  if (*v64 <= v20 - v27)
  {
    __break(0xC471u);
    JUMPOUT(0x198835300);
  }
  v28 = (unint64_t *)&v64[2 * (v20 - v27) + 2];
  v9 = (unint64_t)v211;
LABEL_20:
  v29 = v210;
  if (v19 >= 0x40000000)
  {
    v72 = *(_QWORD *)(a1 + 16);
    if ((v19 - 0x40000000) >= *(_DWORD *)(v72 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198835578);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v72 + 160) + 8 * (v19 - 0x40000000));
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v19);
  }
  v31 = *v30;
  v220 = v31;
  v32 = *(_WORD *)(*(_QWORD *)(v9 + 56) + 28) & 0x3000;
  v33 = (v31 & 0xFFFE000000000002) == 0;
  v34 = (v210 >> 1) & 1;
  v212 = (JSC::VM *)v10;
  if ((v31 & 0xFFFE000000000002) == 0 && v32 != 4096)
  {
    v213 = 0;
    v214 = v31;
    v215 = -1;
    v216 = (v210 & 2) != 0;
    v217 = 256;
    v218 = 1;
    v219 = 0;
LABEL_25:
    v35 = 16 * (*(_DWORD *)v31 & 0xFFFFFFFE);
    goto LABEL_26;
  }
  if (v32 == 4096)
    v198 = 2;
  else
    v198 = 1;
  v213 = 0;
  v214 = v31;
  v215 = -1;
  v216 = (v210 & 2) != 0;
  LOBYTE(v217) = 0;
  HIBYTE(v217) = v198;
  v218 = 1;
  v33 = (v31 & 0xFFFE000000000002) == 0;
  v219 = 0;
  if ((v31 & 0xFFFE000000000002) == 0)
  {
    v9 = (unint64_t)v211;
    v29 = v210;
    goto LABEL_25;
  }
  v35 = 0;
  v9 = (unint64_t)v211;
  v29 = v210;
LABEL_26:
  v36 = *v28;
  if ((v29 & 1) == 0)
  {
    if (v22 >= 0x40000000)
    {
      v152 = *(_QWORD *)(a1 + 16);
      if ((v22 - 0x40000000) >= *(_DWORD *)(v152 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x1988355A4);
      }
      v73 = (const JSC::PropertyTable **)(*(_QWORD *)(v152 + 160) + 8 * (v22 - 0x40000000));
    }
    else
    {
      v73 = (const JSC::PropertyTable **)(a1 + 8 * v22);
    }
    v74 = *v73;
    if (!v33)
    {
      JSC::JSValue::putToPrimitive((JSC::JSValue *)&v220, v209, v36, (unint64_t)v74, (uint64_t)&v213, a7, a8, a9);
      goto LABEL_122;
    }
    v75 = 16 * (*(_DWORD *)v31 & 0xFFFFFFFE);
    if ((*(_WORD *)(v75 + 0xC) & 0x400) != 0)
    {
      (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, const JSC::PropertyTable *, _DWORD **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v75 & 0xFFFFFFFE) + 0x4C) + 0x48))(v31, v209, v36, v74, &v213);
      goto LABEL_122;
    }
    v76 = *((_QWORD *)v209 + 7);
    if (v36)
    {
      v77 = *(_DWORD *)(v36 + 16);
      if ((v77 & 0x20) == 0)
      {
        v78 = *(_BYTE **)(v36 + 8);
        v79 = *(unsigned int *)(v36 + 4);
        if ((v77 & 4) != 0)
        {
          if ((_DWORD)v79)
          {
            v193 = *v78 - 48;
            if (v193 <= 9 && (v79 < 2 || *v78 != 48))
            {
              v195 = v78 + 1;
              v196 = v79 - 1;
              while (v196)
              {
                if (v193 <= 0x19999999)
                {
                  v197 = *v195 - 48;
                  if (v197 <= 9)
                  {
                    v139 = __CFADD__(v197, 10 * v193);
                    v193 = v197 + 10 * v193;
                    ++v195;
                    --v196;
                    if (!v139)
                      continue;
                  }
                }
                goto LABEL_95;
              }
              if (v193 != -1)
                goto LABEL_229;
            }
          }
        }
        else if ((_DWORD)v79)
        {
          v80 = *(unsigned __int16 *)v78 - 48;
          if (v80 <= 9 && (*(_WORD *)v78 != 48 || v79 <= 1))
          {
            v136 = (unsigned __int16 *)(v78 + 2);
            v137 = v79 - 1;
            while (v137)
            {
              if (v80 <= 0x19999999)
              {
                v138 = *v136 - 48;
                if (v138 <= 9)
                {
                  v139 = __CFADD__(v138, 10 * v80);
                  v80 = v138 + 10 * v80;
                  ++v136;
                  --v137;
                  if (!v139)
                    continue;
                }
              }
              goto LABEL_95;
            }
            if (v80 != -1)
            {
LABEL_229:
              (*(void (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v31 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x50))(v31, v209);
              goto LABEL_122;
            }
          }
        }
      }
    }
LABEL_95:
    if (*(_QWORD *)(*(_QWORD *)(v76 + 41952) + 16) != v36)
    {
      v81 = *(_DWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x10);
      if ((v81 & 0x10) == 0)
      {
        v82 = (_DWORD *)v31;
        while ((*(_WORD *)(v75 + 12) & 0x800) == 0 && (v82 == (_DWORD *)v31 || (*(_WORD *)(v75 + 12) & 0x400) == 0))
        {
          v83 = *(_DWORD **)(v75 + 48);
          if (!v83)
            v83 = (_DWORD *)*((_QWORD *)v82 + 2);
          if (v83 == (_DWORD *)2)
          {
            if ((*(_BYTE *)(v31 + 6) & 0x20) == 0 || (v81 & 0x400000) != 0)
            {
              v222 = (void (**)(JSC::StringFireDetail *__hidden))*((_QWORD *)v209 + 7);
              v140 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)v31, v76, v36, (uint64_t)v74, 0, (uint64_t)&v213, a8, a9, a5);
              if (v141 && v216)
                JSC::throwTypeError((unint64_t)v209, (JSC::VM **)&v222, (uint64_t)v140, v141);
            }
            else
            {
              JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)v31, (unint64_t)v209, v36, (uint64_t)v74, (uint64_t)&v213, a5, a7, a8, a9);
            }
            goto LABEL_122;
          }
          v75 = 16 * (*v83 & 0xFFFFFFFE);
          v82 = v83;
          if ((*(_BYTE *)(v75 + 0x10) & 0x10) != 0)
            break;
        }
      }
    }
    JSC::JSObject::putInlineSlow((unsigned __int8 *)v31, (unint64_t)v209, v36, v74, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))&v213, a7, a8, a9, a5);
    goto LABEL_122;
  }
  if (v22 >= 0x40000000)
  {
    v85 = *(_QWORD *)(a1 + 16);
    if ((v22 - 0x40000000) >= *(_DWORD *)(v85 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198835580);
    }
    v37 = (JSC::VM **)(*(_QWORD *)(v85 + 160) + 8 * (v22 - 0x40000000));
  }
  else
  {
    v37 = (JSC::VM **)(a1 + 8 * v22);
  }
  v38 = *v37;
  v39 = *(unsigned __int8 *)(v31 + 5);
  v40 = v39;
  if (v39 != 26)
  {
LABEL_49:
    v51 = (_DWORD *)v31;
    if (v40 == 32)
      v51 = *(_DWORD **)(v31 + 16);
    v52 = 16 * (*v51 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v52 + 0x12) & 0x10) != 0)
      goto LABEL_293;
    if ((v36 >> 4) && ((v36 >> 4) & ~*(_DWORD *)(16 * (*v51 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v53 = *(_QWORD *)(16 * (*v51 & 0xFFFFFFFE) + 0x58);
      if (v53
        || (v84 = *(_QWORD *)(16 * (*v51 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v84 + 5) == 1 || *(_DWORD *)(v84 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v52, v212, 1, a4, v34, a7, a8, a9), v53))
      {
        if (*(_DWORD *)(v53 + 24))
        {
          v54 = *(_QWORD *)(v53 + 16);
          v55 = v54 & 0xFFFFFFFFFFFFFFFELL;
          v56 = *(unsigned int *)(v53 + 8);
          v57 = *(_DWORD *)(v36 + 16);
          if ((v54 & 1) != 0)
          {
            if ((v57 & 0x20) != 0)
              v57 = *(_DWORD *)(v36 + 32);
            v58 = *(_DWORD *)(v53 + 12);
            v59 = (v57 >> 8) & *(_QWORD *)&v58;
            v60 = *(unsigned __int8 *)(v55 + v59);
            if (*(_BYTE *)(v55 + v59))
            {
              v61 = v55 + v56;
              v62 = 1;
              while (1)
              {
                v63 = *(_QWORD *)(v61 + 8 * (v60 - 1));
                if (v36 == (v63 & 0xFFFFFFFFFFFFLL))
                  break;
                v59 = ((_DWORD)v59 + v62) & v58;
                v60 = *(unsigned __int8 *)(v55 + v59);
                ++v62;
                if (!*(_BYTE *)(v55 + v59))
                  goto LABEL_118;
              }
              v86 = (v63 >> 16) & 0xFF00000000 | HIBYTE(v63);
              goto LABEL_113;
            }
          }
          else
          {
            if ((v57 & 0x20) != 0)
              v57 = *(_DWORD *)(v36 + 32);
            v124 = *(_DWORD *)(v53 + 12);
            v125 = v124 & (v57 >> 8);
            v126 = *(_DWORD *)(v55 + 4 * v125);
            if (v126)
            {
              v127 = v55 + 4 * v56;
              v128 = 1;
              while (1)
              {
                v129 = (v126 - 1);
                if (v36 == *(_QWORD *)(v127 + 16 * v129))
                  break;
                v125 = (v125 + v128) & v124;
                v126 = *(_DWORD *)(v55 + 4 * v125);
                ++v128;
                if (!v126)
                  goto LABEL_118;
              }
              v86 = *(unsigned int *)(v127 + 16 * v129 + 8) | ((unint64_t)*(unsigned __int8 *)(v127 + 16 * v129 + 12) << 32);
LABEL_113:
              if ((_DWORD)v86 != -1 && (v86 & 0x800000000) != 0)
                goto LABEL_293;
            }
          }
        }
      }
    }
LABEL_118:
    if (v39 != 26
      && ((*(_BYTE *)(v52 + 10) & 0x20) != 0 && (*(_BYTE *)(v52 + 18) & 0x40) == 0
       || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v52 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
    {
LABEL_293:
      v218 = 0;
      v222 = (void (**)(JSC::StringFireDetail *__hidden))v38;
      v223 = 0;
      v224 = 0;
      v225 = 0x700000000;
      (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, void (***)(JSC::StringFireDetail *__hidden)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C) + 0x90))(v31, v209, v36, &v222);
      v10 = (uint64_t)v212;
      goto LABEL_122;
    }
    v10 = (uint64_t)v212;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v31, (uint64_t)v212, v36, (uint64_t)v38, 0, (uint64_t)&v213, a8, a9, a5);
LABEL_122:
    v9 = (unint64_t)v211;
    goto LABEL_123;
  }
  v41 = v10 + 41952;
  if (*(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2160) == v36)
  {
    v218 = 0;
    v68 = *(_QWORD *)(v31 + 24);
    if ((v68 & 1) != 0)
    {
      v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
      if ((v68 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)(v69 + 8) = 0;
        *(_QWORD *)(v69 + 16) = 0;
        *(_QWORD *)(v69 + 24) = 0;
        *(_DWORD *)(v69 + 40) = 0;
        if ((v68 & 8) != 0)
          v70 = (uint64_t *)(v69 - 16);
        else
          v70 = (uint64_t *)(v68 & 0xFFFFFFFFFFFFC000 | 8);
        v71 = *v70;
        v222 = &off_1E3583C90;
        v223 = "Store to prototype property of a function";
        JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v69 + 32), v71);
        v34 = (v210 >> 1) & 1;
        v9 = (unint64_t)v211;
      }
    }
  }
  v42 = *(_QWORD *)(v31 + 24);
  if ((v42 & 1) == 0)
  {
    if (*(_BYTE *)(v42 + 5) != 8)
    {
      v43 = *(_QWORD *)(v42 + 88);
      goto LABEL_34;
    }
LABEL_309:
    v178 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C));
    if (v178 != &JSC::JSBoundFunction::s_info && v178 != &JSC::JSRemoteFunction::s_info)
      goto LABEL_315;
    goto LABEL_314;
  }
  v67 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v67 + 5) == 8)
    goto LABEL_309;
  v43 = *(_QWORD *)(v67 + 88);
LABEL_34:
  if ((*(_DWORD *)(v43 + 16) & 0x80000000) != 0)
  {
LABEL_314:
    if (*(_QWORD *)(*(_QWORD *)v41 + 1768) == v36)
      goto LABEL_298;
LABEL_315:
    v180 = v38;
    v181 = v25;
    v182 = v34;
    JSC::JSFunction::reifyLazyBoundNameIfNeeded(v31, (JSC::VM *)v10, v209, v36, v34, a7, a8, a9, (int8x16_t)a5);
    v34 = v182;
    v25 = v181;
    v38 = v180;
    goto LABEL_302;
  }
  v44 = *(_QWORD *)v41;
  if (*(_QWORD *)(*(_QWORD *)v41 + 2160) != v36)
  {
LABEL_36:
    if (*(_QWORD *)(v44 + 1768) != v36)
    {
      if (*(_QWORD *)(v44 + 1968) != v36)
        goto LABEL_41;
      v45 = *(_QWORD *)(v31 + 24);
      if ((v45 & 1) != 0)
      {
        v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
        {
          if ((*(_BYTE *)(v46 + 64) & 2) != 0)
            goto LABEL_41;
        }
      }
      v206 = v25;
      v177 = v34;
      JSC::JSFunction::reifyName((JSC::JSFunction *)v31, (JSC::VM *)v10, v209, (uint64_t)a4, v34, a7, a8, a9);
      goto LABEL_301;
    }
    v42 = *(_QWORD *)(v31 + 24);
LABEL_298:
    if ((v42 & 1) != 0)
    {
      v176 = v42 & 0xFFFFFFFFFFFFFFFELL;
      if (v176)
      {
        if ((*(_BYTE *)(v176 + 64) & 1) != 0)
          goto LABEL_41;
      }
    }
    v206 = v25;
    v177 = v34;
    JSC::JSFunction::reifyLength((JSC::JSFunction *)v31, (JSC::VM *)v10, a3, (uint64_t)a4, v34, a7, a8, a9, a5);
LABEL_301:
    v34 = v177;
    v25 = v206;
LABEL_302:
    v9 = (unint64_t)v211;
    goto LABEL_41;
  }
  v208 = v34;
  if (!JSC::JSFunction::mayHaveNonReifiedPrototype((JSC::JSFunction *)v31))
  {
    v44 = *(_QWORD *)v41;
    v9 = (unint64_t)v211;
    v34 = v208;
    goto LABEL_36;
  }
  JSC::JSObject::getDirect((_DWORD *)v31, (JSC::VM *)v10, v36, a4, v186, a7, a8, a9);
  v9 = (unint64_t)v211;
  v34 = v208;
  if (!v187)
  {
    v188 = JSC::constructPrototypeObject(v209, (JSC::JSGlobalObject *)v31, a3, (uint64_t)a4, v208, a7, a8, a9, a5.n128_f64[0]);
    JSC::JSObject::putDirect((int *)v31, v10, v36, v188, 12, v192, v189, v190, v191);
    v34 = v208;
    goto LABEL_302;
  }
LABEL_41:
  v47 = *(JSC::VM **)(v31 + 24);
  if ((v47 & 1) != 0)
    v48 = *(_QWORD *)(((unint64_t)v47 & 0xFFFFFFFFFFFFFFFELL) + 48);
  else
    v48 = *(_QWORD *)(v31 + 24);
  if ((*(_BYTE *)(v48 + 5) != 8
     || &JSC::JSBoundFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C)))
    && (*(_BYTE *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
  {
    v49 = *(_QWORD *)v41;
    v50 = *(_QWORD *)(*(_QWORD *)v41 + 1768);
    if (v50 == v36 || *(_QWORD *)(v49 + 1968) == v36)
    {
      if ((v47 & 1) != 0)
      {
        v153 = (unint64_t)v47 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v207 = v34;
        v184 = v35;
        v185 = v10;
        v153 = JSC::FunctionRareData::create((JSC::FunctionRareData *)v10, v47, a3, (uint64_t)a4, v34, a7, a8, a9);
        __dmb(0xAu);
        *(_QWORD *)(v31 + 24) = v153 | 1;
        if (*(_DWORD *)(v185 + 760) >= *(unsigned __int8 *)(v31 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)v212 + 192, v31);
        v9 = (unint64_t)v211;
        v35 = v184;
        v34 = v207;
      }
      if (v50 == v36)
        v154 = 4;
      else
        v154 = 8;
      *(_BYTE *)(v153 + 64) |= v154;
      v10 = (uint64_t)v212;
    }
  }
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_48;
  v183 = *(_DWORD *)(v10 + 80);
  if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
  {
    v199 = v34;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, v34, a7, a8, a9);
    v34 = v199;
    v9 = (unint64_t)v211;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_48:
    v40 = *(unsigned __int8 *)(v31 + 5);
    goto LABEL_49;
  }
LABEL_123:
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v209, &v221, "LLIntSlowPaths", a2);
    v9 = (unint64_t)v211;
  }
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  v205 = a2;
  if (!(_BYTE)qword_1ECF4C789)
    goto LABEL_185;
  if ((v220 & 0xFFFE000000000002) != 0)
    goto LABEL_185;
  if (v218 != 1)
    goto LABEL_185;
  if (v217 - 1 > 1)
    goto LABEL_185;
  v88 = *(_DWORD *)(v35 + 16);
  if ((v88 & 3) == 2)
    goto LABEL_185;
  v89 = *(_WORD *)(v35 + 12);
  if ((v89 & 8) != 0)
    goto LABEL_185;
  if ((v89 & 0x10) != 0)
  {
    if ((v88 & 0x80000) != 0 || (v89 & 0x20) == 0)
      goto LABEL_185;
  }
  else if ((v88 & 0x80000) != 0)
  {
    goto LABEL_185;
  }
  v90 = (v201 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v91 = (int *)(v90 + 24 * v203);
  v92 = *v91;
  if (*v91)
  {
    v155 = 16 * (*(_DWORD *)v220 & 0xFFFFFFFE);
    if (v217 == 2)
    {
      v155 = *(_QWORD *)(16 * (*(_DWORD *)v220 & 0xFFFFFFFE) + 0x40);
      if (!v155)
        goto LABEL_135;
      if (*(_BYTE *)(v155 + 5) != 1)
      {
        v175 = *(_DWORD *)(v155 + 80);
        if (v175)
          v155 = 16 * (v175 & 0xFFFFFFFE);
        else
          v155 = 0;
      }
    }
    v156 = 16 * (v92 & 0xFFFFFFFE);
    if (v155 != v156 && (v92 & 0xFFFFFFFE) != 0)
    {
      if (v155)
      {
        if (*(_DWORD *)(16 * (v92 & 0xFFFFFFFE) + 0x1C) == *(_DWORD *)(v155 + 28))
        {
          v157 = *(_QWORD *)(16 * (v92 & 0xFFFFFFFE) + 0x40);
          if (v157)
          {
            if (*(_BYTE *)(v157 + 5) != 1)
            {
              v158 = *(_QWORD *)(v155 + 64);
              if (v158)
              {
                if (*(_BYTE *)(v158 + 5) != 1)
                {
                  v159 = *(_QWORD *)(v157 + 72);
                  if (v159)
                  {
                    if (v159 == *(_QWORD *)(v158 + 72))
                    {
                      v160 = *(_QWORD *)(v156 + 48);
                      if (v160)
                      {
                        v161 = *(_QWORD *)(v155 + 48);
                        if (v161)
                        {
                          if (v160 != v161)
                          {
                            v162 = v35;
                            v163 = v161 != 2;
                            v164 = v160 != 2;
                            if (v160 == 2 || v161 == 2)
                            {
LABEL_280:
                              v9 = (unint64_t)v211;
                              v10 = (uint64_t)v212;
                              v35 = v162;
                              if (!v164 && !v163)
                              {
                                v222 = &off_1E3583C90;
                                v223 = "Detected poly proto opportunity.";
                                JSC::InlineWatchpointSet::invalidate((uint64_t *)(v159 + 8), v212, &v222, (uint64_t)a4, v34, a7, a8, a9, a5.n128_f64[0]);
                                v168 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v155 + 64) + 72) + 8);
                                v222 = &off_1E3583C90;
                                v223 = "Detected poly proto opportunity.";
                                v35 = v162;
                                JSC::InlineWatchpointSet::invalidate(v168, v212, &v222, v169, v170, v171, v172, v173, v174);
                                v9 = (unint64_t)v211;
                              }
                            }
                            else
                            {
                              v10 = (uint64_t)v212;
                              while (1)
                              {
                                v9 = (unint64_t)v211;
                                v35 = v162;
                                if (*(_DWORD *)(16 * (*(_DWORD *)v160 & 0xFFFFFFFE) + 0x1C) != *(_DWORD *)(16 * (*(_DWORD *)v161 & 0xFFFFFFFE) + 0x1C))
                                  break;
                                v165 = *(_QWORD *)(16 * (*(_DWORD *)v160 & 0xFFFFFFFE) + 0x30);
                                if (!v165)
                                  v165 = *(_QWORD *)(v160 + 16);
                                v166 = *(_QWORD *)(16 * (*(_DWORD *)v161 & 0xFFFFFFFE) + 0x30);
                                if (!v166)
                                  v166 = *(_QWORD *)(v161 + 16);
                                v164 = (v165 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                v163 = (v166 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                                v167 = (v165 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v166 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                                v161 = v166;
                                v160 = v165;
                                if (v167)
                                  goto LABEL_280;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_135:
  v93 = v90 + 24 * v203;
  *(_QWORD *)v91 = 0;
  *(_DWORD *)(v93 + 8) = 0;
  v94 = v93 + 8;
  *(_QWORD *)(v94 + 8) = 0;
  v95 = (JSC::JSObject *)v220;
  v96 = *(_DWORD *)v220 & 0xFFFFFFFE;
  v97 = (JSC::Structure *)(16 * v96);
  if ((*(_DWORD *)(16 * v96 + 0x10) & 3) != 2)
  {
    v98 = *(_WORD *)(16 * v96 + 0xC);
    if ((v98 & 8) == 0 && ((v98 & 0x10) == 0 || (v98 & 0x20) != 0) && (_DWORD *)v220 == v213)
    {
      v99 = (int *)(v94 - 4);
      if (v217 == 2)
      {
        v204 = *(_DWORD *)v220 & 0xFFFFFFFE;
        v100 = (unsigned __int8 *)(v9 + 16);
        if (__ldaxr((unsigned __int8 *)(v9 + 16)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v100))
        {
          goto LABEL_143;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 16);
        v99 = (int *)(v94 - 4);
        v9 = (unint64_t)v211;
LABEL_143:
        ++*(_DWORD *)(v10 + 916);
        if ((*(_BYTE *)(16 * v96 + 0x10) & 3) == 0)
        {
          v102 = *(_QWORD *)(16 * v96 + 0x40);
          if (v102)
          {
            v103 = *(_QWORD *)(16 * v96 + 0x40);
            if (*(_BYTE *)(v102 + 5) != 1)
            {
              v122 = *(_DWORD *)(v102 + 80);
              if (v122)
                v103 = 16 * (v122 & 0xFFFFFFFE);
              else
                v103 = 0;
            }
          }
          else
          {
            v103 = 0;
          }
          v104 = *(unsigned __int16 *)(v103 + 24);
          if (v104 == 65534)
            goto LABEL_150;
          if (v104 == 0xFFFF)
            v104 = *(_DWORD *)(*(_QWORD *)(v103 + 64) + 84);
          if (v104 < 64)
          {
LABEL_150:
            v105 = 0;
          }
          else if ((v104 - 63) >= 5)
          {
            v130 = (v104 - 64) | ((v104 - 64) >> 1) | (((v104 - 64) | ((v104 - 64) >> 1)) >> 2);
            v131 = v130 | (v130 >> 4) | ((v130 | (v130 >> 4)) >> 8);
            v105 = (v131 | HIWORD(v131)) + 1;
          }
          else
          {
            v105 = 4;
          }
          v106 = *(unsigned __int16 *)(16 * v96 + 0x18);
          if (v106 == 65534)
            goto LABEL_155;
          if (v106 == 0xFFFF)
            v106 = *(_DWORD *)(v102 + 84);
          if (v106 < 64)
          {
LABEL_155:
            v107 = 0;
          }
          else if ((v106 - 63) >= 5)
          {
            v132 = (v106 - 64) | ((v106 - 64) >> 1) | (((v106 - 64) | ((v106 - 64) >> 1)) >> 2);
            v133 = v132 | (v132 >> 4) | ((v132 | (v132 >> 4)) >> 8);
            v107 = (v133 | HIWORD(v133)) + 1;
          }
          else
          {
            v107 = 4;
          }
          if (v105 == v107)
          {
            if (v102 && *(_BYTE *)(v102 + 5) != 1)
            {
              v123 = *(_DWORD *)(v102 + 80);
              if (v123)
                v102 = 16 * (v123 & 0xFFFFFFFE);
              else
                v102 = 0;
            }
            if (v35 == v102)
            {
              v108 = v35;
              v109 = 0;
              v110 = (JSC::VM *)*((_QWORD *)v209 + 7);
              v111 = -1;
              for (i = v95; ; i = v114)
              {
                v113 = *(unsigned __int8 *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 9);
                if (v113 == 32 || v113 == 61)
                  break;
                v114 = *(JSC::JSObject **)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x30);
                v115 = v114 == 0;
                if (v113 < 0x17)
                {
                  if (v113 == 2)
                  {
                    v114 = (JSC::JSObject *)*((_QWORD *)v209 + 149);
                  }
                  else if (v113 == 3)
                  {
                    v114 = (JSC::JSObject *)*((_QWORD *)v209 + 151);
                  }
                  else
                  {
                    v114 = (JSC::JSObject *)*((_QWORD *)v209 + 152);
                  }
                  v9 = (unint64_t)v211;
                }
                else if (!v114)
                {
                  v114 = (JSC::JSObject *)*((_QWORD *)i + 2);
                }
                v109 |= v115;
                if (v114 == (JSC::JSObject *)2)
                {
                  if (v111 && !v109)
                  {
                    *v91 = v108 >> 4;
                    *v99 = v215;
                    *(_DWORD *)v94 = v204;
                    if ((v210 & 1) == 0
                      && (v134 = JSC::Structure::prototypeChain(v97, v212, v209, v95, v34, a7, a8, a9),
                          v9 = (unint64_t)v211,
                          *(_QWORD *)(v94 + 8) = v134,
                          v211)
                      && v134)
                    {
                      if (*((_DWORD *)v212 + 190) >= *((unsigned __int8 *)v211 + 7))
                      {
                        JSC::Heap::writeBarrierSlowPath((uint64_t)v212 + 192, (unint64_t)v211);
                        v9 = (unint64_t)v211;
                      }
                    }
                    else if (!v9)
                    {
                      break;
                    }
                    if (*((_DWORD *)v212 + 190) >= *(unsigned __int8 *)(v9 + 7))
                      JSC::Heap::writeBarrierSlowPath((uint64_t)v212 + 192, v9);
                  }
                  break;
                }
                v116 = *(_DWORD *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x10);
                if ((v116 & 3) != 0)
                {
                  if ((v116 & 0x800000) != 0)
                    break;
                  v200 = v99;
                  v202 = v110;
                  JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)v114 & 0xFFFFFFFE), v110, v114, (uint64_t)a4, v34, a7, a8, a9);
                  v99 = v200;
                  v110 = v202;
                  v9 = (unint64_t)v211;
                }
                --v111;
              }
            }
          }
        }
        v117 = __ldxr(v100);
        if (v117 == 1)
        {
          v118 = v212;
          if (!__stlxr(0, v100))
          {
LABEL_180:
            v119 = *((_DWORD *)v118 + 229) - 1;
            *((_DWORD *)v118 + 229) = v119;
            if (*((unsigned __int8 *)v118 + 1198) | HIBYTE(dword_1ECF4C5CE))
              v120 = v119 == 0;
            else
              v120 = 0;
            if (v120)
            {
              *((_BYTE *)v118 + 1198) = 0;
              JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v118 + 192, 0);
            }
            goto LABEL_185;
          }
        }
        else
        {
          __clrex();
          v118 = v212;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v100, 0, (uint64_t)a3, (uint64_t)a4, v34, a7, a8, a9);
        goto LABEL_180;
      }
      if ((JSC::Structure *)v35 != v97)
      {
        __break(0xC471u);
        JUMPOUT(0x1988353ACLL);
      }
      JSC::Structure::firePropertyReplacementWatchpointSet((JSC::Structure *)v35, (JSC::VM *)v10, (JSC::Structure *)v215, "Did cache property replacement", v34, a7, a8, a9);
      v148 = (unint64_t)v211;
      v149 = (unsigned __int8 *)v211 + 16;
      if (__ldaxr((unsigned __int8 *)v211 + 16))
      {
        __clrex();
      }
      else if (!__stxr(1u, v149))
      {
LABEL_240:
        *v91 = v96;
        *(_DWORD *)(v94 - 4) = v215;
        v151 = __ldxr(v149);
        if (v151 == 1)
        {
          if (!__stlxr(0, v149))
            goto LABEL_285;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v149, 0, v142, v143, v144, v145, v146, v147);
        v148 = (unint64_t)v211;
LABEL_285:
        if (v148 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v148 + 7))
          JSC::Heap::writeBarrierSlowPath(v10 + 192, v148);
        goto LABEL_185;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v149);
      v148 = (unint64_t)v211;
      goto LABEL_240;
    }
  }
LABEL_185:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v209, &v221, "LLIntSlowPaths", v205);
  if (*((_QWORD *)v221 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)v205;
}

__int128 *llint_slow_path_del_by_id(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned __int8 **v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  char v30;
  uint64_t v31;
  _DWORD *v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  const WTF::String *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF::StringImpl *v62;
  JSC::VM *v63;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v63 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x19883581CLL);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v35 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v35 <= 63)
      v21 = *((__int16 *)a2 + 1);
    else
      v21 = v35 + 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((unsigned __int16 *)a2 + 3);
    v24 = a2[8];
    if (v22 <= 63)
      goto LABEL_12;
LABEL_39:
    v22 += v20;
    goto LABEL_40;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 <= 15)
      v21 = (char)a2[1];
    else
      v21 = v19 + 1073741808;
    v22 = (char)a2[2];
    v23 = a2[3];
    v24 = a2[4];
    if (v22 <= 15)
      goto LABEL_12;
    goto LABEL_39;
  }
  v21 = *(_DWORD *)(a2 + 2);
  v22 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
  v24 = a2[14];
LABEL_40:
  if (v22 < 0x40000000)
  {
LABEL_12:
    v61 = v24;
    v25 = (unsigned __int8 **)(a1 + 8 * v22);
    goto LABEL_13;
  }
  v36 = v22 - 0x40000000;
  if (v36 >= *(_DWORD *)(v11 + 172))
    goto LABEL_53;
  v61 = v24;
  v25 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v36);
LABEL_13:
  v26 = (unint64_t)*v25;
  v62 = (WTF::StringImpl *)v26;
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    v34 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v62, v9, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(v26 + 5) > 0x16u)
      goto LABEL_15;
    v34 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v26, (JSC::SymbolObject **)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v26 = v34;
LABEL_15:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v63, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  v27 = *(unsigned int **)(*(_QWORD *)(v8 + 56) + 104);
  if (v27)
  {
    v28 = *v27;
    if (*v27 > v23)
    {
      v29 = &v27[2 * v23];
      goto LABEL_21;
    }
  }
  else
  {
    v28 = 0;
  }
  v33 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 72))(*(_QWORD *)(v8 + 120)) + 48);
  if (*v33 <= v23 - v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1988358C4);
  }
  v29 = &v33[2 * (v23 - v28)];
LABEL_21:
  v30 = JSC::JSCell::deleteProperty(v26, (uint64_t)v9, *((_QWORD *)v29 + 1), a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v63, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  if ((v30 & 1) != 0)
  {
    v31 = 7;
  }
  else
  {
    if (!v61)
    {
      v37 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v37 = 0x1A00000002;
      *(_QWORD *)(v37 + 8) = "Unable to delete property.";
      *(_DWORD *)(v37 + 16) = 4;
      v62 = (WTF::StringImpl *)v37;
      v39 = JSC::createTypeError((unint64_t)v9, &v62, v38);
      JSC::VM::throwException(v10, v9, v39, v40, v41, v42, v43, v44);
      v52 = v62;
      v62 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
      return &xmmword_1ECF4C7C0;
    }
    v31 = 6;
  }
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v9, &v63, "LLIntSlowPaths", v16);
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(a1 + 8 * v21) = v31;
  return (__int128 *)v16;
}

__int128 *llint_slow_path_get_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t Index;
  int v60;
  unsigned int v61;
  int v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  int v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  _WORD *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  JSC::VM *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int16 *v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  uint64_t v142;
  unsigned int *v143;
  uint64_t v144;
  int v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  JSC::VM *v149;
  uint64_t v150;
  char v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  BOOL v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  _QWORD *v185;
  uint64_t v186;
  WTF::StringImpl **v187;
  WTF::StringImpl **v188;
  WTF::StringImpl *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int8x16_t **v193;
  int v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  _WORD *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  JSC::VM *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  unint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  unsigned int v236;
  int v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  unsigned __int16 *v247;
  uint64_t v248;
  unsigned int v249;
  unint64_t v250;
  JSC::VM *v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  unsigned __int8 *v278;
  int v279;
  JSC::VM *v280;
  unint64_t NotAnObjectError;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  double v288;
  const unsigned __int8 *v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  unsigned __int8 *v293;
  unsigned int v294;
  int v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  _QWORD *v301;
  uint64_t v302;
  WTF::StringImpl **v303;
  WTF::StringImpl **v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  int v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int *v341;
  uint64_t v342;
  WTF::StringImpl *v343;
  int v344;
  char v345;
  uint64_t v346;
  int v347;
  _BYTE *v348;
  uint64_t v349;
  uint64_t v350;
  _DWORD *v351;
  WTF::StringImpl *v352;
  int v353;
  uint64_t v354;
  int v355;
  uint64_t **v356;
  WTF::AtomStringImpl *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  WTF::StringImpl *v364;
  unint64_t v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned __int16 *v373;
  uint64_t v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  unsigned __int8 *v378;
  unsigned int v379;
  uint64_t v380;
  unsigned __int8 *v381;
  unsigned int v382;
  uint64_t v383;
  _DWORD *v384;
  char v385;
  unsigned int v386;
  int v387;
  JSC::JSGlobalObject *v388;
  JSC::VM *v389;
  unint64_t v390;
  WTF::StringImpl *v391;
  uint64_t v392;
  unint64_t v393;
  _DWORD *v394;
  _DWORD *v395;
  _QWORD v396[2];
  uint64_t v397;
  char v398;
  int8x16_t **v399;
  uint64_t v400;
  WTF::StringImpl *v401[2];
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  _QWORD v405[2];
  uint64_t v406;
  char v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;

  v410 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = v9[9];
  *(_QWORD *)(v11 + 40) = a1;
  v388 = v10;
  v389 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198836874);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v145 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v145 > 63)
      v145 += 1073741760;
    v387 = v145;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    v386 = *((unsigned __int16 *)a2 + 4);
    v24 = *((unsigned __int16 *)a2 + 5);
    if (v22 <= 63)
      goto LABEL_13;
LABEL_225:
    v146 = v22 + v21;
    goto LABEL_226;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v387 = v20;
    v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    v386 = a2[4];
    v24 = a2[5];
    if (v22 <= 15)
    {
LABEL_13:
      v25 = v22;
LABEL_14:
      v26 = (unint64_t *)(a1 + 8 * v25);
      goto LABEL_15;
    }
    goto LABEL_225;
  }
  v387 = *(_DWORD *)(a2 + 2);
  v146 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
  v386 = *(_DWORD *)(a2 + 14);
  v24 = *(_DWORD *)(a2 + 18);
LABEL_226:
  v25 = v146;
  if (v146 < 0x40000000)
    goto LABEL_14;
  v147 = (v146 - 0x40000000);
  if (v147 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988376C0);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v147);
LABEL_15:
  v27 = *v26;
  if (v23 >= 0x40000000)
  {
    v54 = v23 - 0x40000000;
    if (v54 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198837524);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v54);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v23);
  }
  v29 = *v28;
  v30 = *v28 & 0xFFFE000000000002;
  if (!v30)
  {
    v31 = *(unsigned __int8 *)(v29 + 5);
    if (v31 != 2 && v31 != 4)
      goto LABEL_34;
    v33 = v9[17];
    v34 = *(unsigned __int16 *)(v33 + 64);
    if (!*(_WORD *)(v33 + 64))
      v34 = *(_DWORD *)(v33 + 224);
    v35 = ((v33 + v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v24;
    v38 = *(_QWORD *)(v35 + 16);
    v37 = (unint64_t *)(v35 + 16);
    v36 = v38;
    if (qword_1ECF4C75C < HIBYTE(v38))
    {
LABEL_34:
      v390 = v27;
      if (((v29 | v27) & 0xFFFE000000000002) != 0)
        goto LABEL_97;
      if (*(_BYTE *)(v29 + 5) != 2)
        goto LABEL_97;
      v41 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
      if (((*(_DWORD *)(v41 + 0x10) | *(unsigned __int8 *)(v41 + 0xA)) & 8) != 0)
        goto LABEL_97;
      v42 = *(_QWORD *)(v29 + 8);
      if ((v42 & 1) != 0)
      {
        JSC::JSRopeString::resolveRopeToExistingAtomString((JSC::JSRopeString *)v29, v388);
      }
      else
      {
        if ((*(_BYTE *)(v42 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v42 += 2;
LABEL_40:
          if (*(_DWORD *)(v11 + 80))
          {
            v241 = *(_DWORD *)(v11 + 80);
            if ((v241 & 0x27) != 0 && (v241 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v11 + 16))
              goto LABEL_371;
          }
          if (!v42)
            goto LABEL_97;
          if (!(v42 >> 4) || ((v42 >> 4) & ~*(_DWORD *)(v41 + 32)) != 0)
            goto LABEL_82;
          v43 = *(_QWORD *)(v41 + 88);
          if (!v43)
          {
            v55 = *(_QWORD *)(v41 + 64);
            if (!v55 || *(_BYTE *)(v55 + 5) != 1 && *(_DWORD *)(v55 + 80) < 2u)
              goto LABEL_82;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v41, (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
            if (!v43)
              goto LABEL_82;
          }
          if (!*(_DWORD *)(v43 + 24))
            goto LABEL_82;
          v44 = *(_QWORD *)(v43 + 16);
          v45 = v44 & 0xFFFFFFFFFFFFFFFELL;
          v46 = *(unsigned int *)(v43 + 8);
          v47 = *(_DWORD *)(v42 + 16);
          if ((v44 & 1) != 0)
          {
            if ((v47 & 0x20) != 0)
              v47 = *(_DWORD *)(v42 + 32);
            v48 = *(_DWORD *)(v43 + 12);
            v49 = (v47 >> 8) & *(_QWORD *)&v48;
            v50 = *(unsigned __int8 *)(v45 + v49);
            if (*(_BYTE *)(v45 + v49))
            {
              v51 = v45 + v46;
              v52 = 1;
              while (1)
              {
                v53 = *(_QWORD *)(v51 + 8 * (v50 - 1));
                if (v42 == (v53 & 0xFFFFFFFFFFFFLL))
                  break;
                v49 = ((_DWORD)v49 + v52) & v48;
                v50 = *(unsigned __int8 *)(v45 + v49);
                ++v52;
                if (!*(_BYTE *)(v45 + v49))
                  goto LABEL_82;
              }
              v56 = HIBYTE(v53);
LABEL_64:
              if ((_DWORD)v56 != -1)
              {
                if ((int)v56 <= 63)
                {
                  v57 = v27 + 16;
                  v58 = v56 << 32;
                }
                else
                {
                  v57 = *(_QWORD *)(v27 + 8) - 8;
                  v58 = 0x3F00000000 - (v56 << 32);
                }
                Index = *(_QWORD *)(v57 + (v58 >> 29));
                if (Index)
                  goto LABEL_157;
              }
            }
          }
          else
          {
            if ((v47 & 0x20) != 0)
              v47 = *(_DWORD *)(v42 + 32);
            v60 = *(_DWORD *)(v43 + 12);
            v61 = v60 & (v47 >> 8);
            v62 = *(_DWORD *)(v45 + 4 * v61);
            if (v62)
            {
              v63 = v45 + 4 * v46;
              v64 = 1;
              while (1)
              {
                v65 = (v62 - 1);
                if (v42 == *(_QWORD *)(v63 + 16 * v65))
                  break;
                v61 = (v61 + v64) & v60;
                v62 = *(_DWORD *)(v45 + 4 * v61);
                ++v64;
                if (!v62)
                  goto LABEL_82;
              }
              v56 = *(unsigned int *)(v63 + 16 * v65 + 8);
              goto LABEL_64;
            }
          }
LABEL_82:
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v42, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
          goto LABEL_84;
        }
        WTF::AtomStringImpl::lookUpSlowCase(*(WTF::AtomStringImpl **)(v29 + 8), (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v401);
      }
      v42 = (unint64_t)v401[0];
      goto LABEL_40;
    }
    if (v31 == 4)
    {
      v39 = *(WTF::StringImpl **)(v29 + 8);
      v194 = *(_DWORD *)v39;
      *(_DWORD *)v39 += 2;
      if (v194)
      {
        *(_DWORD *)v39 = v194;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
        v36 = *v37;
      }
    }
    else
    {
      v39 = *(WTF::StringImpl **)(v29 + 8);
      if (v39)
        v40 = (*(_QWORD *)(v29 + 8) & 1) == 0;
      else
        v40 = 0;
      if (!v40 || (*((_BYTE *)v39 + 16) & 0x10) == 0)
      {
        v66 = v36 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(qword_1ECF4C75C + 1) << 56);
        goto LABEL_80;
      }
    }
    if (((unint64_t)v39 & ~(v36 & 0xFFFFFFFFFFFFFFLL)) == 0)
      goto LABEL_34;
    v66 = ((v36 & 0xFF00000000000000) + 0x100000000000000) | (unint64_t)v39 | v36 & 0xFFFFFFFFFFFFFFLL;
LABEL_80:
    *v37 = v66;
    goto LABEL_34;
  }
  v390 = *v26;
LABEL_84:
  if (v29 >= 0xFFFE000000000000 && (v29 & 0x80000000) == 0)
  {
    v67 = v29;
    goto LABEL_87;
  }
  if (v29 >> 49)
  {
    *(double *)a9.i64 = (double)(int)v29;
    if (v29 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v29 - 0x2000000000000;
    v67 = *(double *)a9.i64;
    if ((_DWORD)v67 != -1 && *(double *)a9.i64 == (double)v67)
    {
LABEL_87:
      v68 = v9[17];
      v69 = *(unsigned __int16 *)(v68 + 64);
      if (!*(_WORD *)(v68 + 64))
        v69 = *(_DWORD *)(v68 + 224);
      if ((v27 & 0xFFFE000000000002) != 0)
        goto LABEL_180;
      v70 = ((v68 + v69 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v24;
      v71 = *(unsigned __int8 *)(v27 + 5);
      if (v71 == 2)
      {
        v72 = *(_QWORD *)(v27 + 8);
        if ((v72 & 1) != 0)
          v73 = (_DWORD *)(v27 + 16);
        else
          v73 = (_DWORD *)(v72 + 4);
        if (*v73 > v67)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)v27, v388, v67, a4, a5, a6, a7, a8, a9);
          goto LABEL_160;
        }
      }
      else
      {
        if (v71 < 0x17)
          goto LABEL_180;
        Index = JSC::JSObject::tryGetIndexQuickly(v27, v67, v70);
        if (Index)
          goto LABEL_160;
        if ((*(_BYTE *)(v27 + 4) & 0xF) == 9 && v67 < *(_DWORD *)(*(_QWORD *)(v27 + 8) - 8))
        {
          v173 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28);
          v174 = *(unsigned __int8 *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 8);
          v175 = (v174 & 0x10) != 0 ? ((v174 & 0xE) + 10) >> 1 : (v174 >> 1) & 7;
          v176 = *(_DWORD *)(v173 + 4 * v175 + 852);
          v177 = v176 ? 16 * (v176 & 0xFFFFFFFE) : 0;
          if (v177 == 16 * (*(_DWORD *)v27 & 0xFFFFFFFE))
          {
            v178 = *(_QWORD *)(v173 + 2304);
            v179 = (v178 & 1) != 0 ? (v178 >> 1) & 3 : *(unsigned __int8 *)(v178 + 4);
            if (v179 != 2)
              goto LABEL_180;
          }
        }
        v114 = *(unsigned __int8 *)(v27 + 5);
        if (v114 == 33)
        {
          if (*(_DWORD *)(v27 + 32) > v67)
          {
            v211 = *(_QWORD *)(v27 + 40);
            if (!v211
              || qword_1ECF4C038
              && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
              && !((v211 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
            {
              goto LABEL_180;
            }
          }
        }
        else if (v114 == 34 && JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)v27, v67))
        {
          goto LABEL_180;
        }
      }
      *(_DWORD *)(v70 + 4) |= 2u;
LABEL_180:
      a9.i64[0] = 0xFFFFFFFF00000000;
      v402 = 0xFFFFFFFF00000000;
      LOBYTE(v406) = 0;
      v407 = 0;
      v408 = 0;
      v409 = 0;
      v404 = 0;
      memset(v405, 0, 13);
      v403 = v27;
      if ((v27 & 0xFFFE000000000002) == 0)
      {
        v115 = (JSC::VM *)*((_QWORD *)v388 + 7);
        v116 = *(unsigned __int8 *)(v27 + 5);
        if (v116 > 0x16)
        {
LABEL_182:
          Index = 10;
          while (1)
          {
            v117 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
            v119 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v117 + 0x4C) + 0x70))(v27, v388, v67, v401);
            if (*((_DWORD *)v115 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v115, v118, a3, a4, a5, a6, a7, a8))
            {
LABEL_409:
              Index = 10;
              goto LABEL_627;
            }
            if ((v119 & 1) != 0)
              goto LABEL_625;
            if (BYTE2(v405[1]) == 3)
            {
              if (BYTE4(v405[1]))
                goto LABEL_409;
              v120 = *(unsigned __int8 *)(v27 + 5);
              if (v120 == 61)
                goto LABEL_188;
            }
            else
            {
              v120 = *(unsigned __int8 *)(v27 + 5);
              if (v120 == 61)
              {
                if (BYTE2(v405[1]) == 1)
                  goto LABEL_409;
                goto LABEL_188;
              }
            }
            if ((v120 - 39) <= 0xA
              && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v27, v118, a3, a4, a5, a6, a7, a8) <= v67)
            {
              goto LABEL_409;
            }
LABEL_188:
            if ((*(_WORD *)(v117 + 12) & 0x800) == 0 || BYTE2(v405[1]) == 3)
            {
              v121 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x30);
              if (!v121)
                v121 = *(_QWORD *)(v27 + 16);
            }
            else
            {
              if ((*(_WORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v121 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0xB0))(v27, v388);
              }
              else
              {
                v121 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x30);
                if (!v121)
                  v121 = *(_QWORD *)(v27 + 16);
              }
              if (*((_DWORD *)v115 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v115, v118, a3, a4, a5, a6, a7, a8))
              {
                goto LABEL_409;
              }
            }
            if ((v121 & 0xFFFE000000000002) == 0)
            {
              v27 = v121;
              if (*(unsigned __int8 *)(v121 + 5) > 0x16u)
                continue;
            }
            goto LABEL_627;
          }
        }
        if (v116 == 2)
        {
          v350 = *(_QWORD *)(v27 + 8);
          if ((v350 & 1) != 0)
            v351 = (_DWORD *)(v27 + 16);
          else
            v351 = (_DWORD *)(v350 + 4);
          if (*v351 <= v67
            || (v352 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v27, v388, v67, a4, a5, a6, a7, a8, a9), *((_DWORD *)v115 + 20))&& JSC::VM::hasExceptionsAfterHandlingTraps(v115, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            v353 = 0;
          }
          else
          {
            v401[0] = v352;
            LODWORD(v402) = 10;
            v404 = 0;
            v353 = 1;
            BYTE1(v405[1]) = 1;
          }
          if (*((_DWORD *)v115 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v115, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_697;
          }
          if (v353)
          {
LABEL_625:
            if (BYTE1(v405[1]) == 1)
            {
              Index = (uint64_t)v401[0];
            }
            else if (BYTE1(v405[1]) == 2)
            {
              Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v401, v388, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              v356 = (uint64_t **)*((_QWORD *)v388 + 7);
              JSC::Identifier::from(v356, v67, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v391);
              Index = JSC::PropertySlot::customGetter((uint64_t)v401, (JSC::VM *)v356, v391);
              v364 = v391;
              v391 = 0;
              if (v364)
              {
                if (*(_DWORD *)v364 == 2)
                {
                  WTF::StringImpl::~StringImpl(v364, v357, v358, v359, v360, v361, v362, v363);
                  WTF::fastFree(v365, v366, v367, v368, v369, v370, v371, v372);
                }
                else
                {
                  *(_DWORD *)v364 -= 2;
                }
              }
            }
LABEL_627:
            if (v407)
            {
              v355 = *(_DWORD *)(v406 + 4);
              if (!v355)
              {
                __break(0xC471u);
                JUMPOUT(0x198837630);
              }
              *(_DWORD *)(v406 + 4) = v355 - 1;
            }
            goto LABEL_160;
          }
        }
      }
      v354 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v390, (unint64_t)v388);
      if (v354)
      {
        v27 = v354;
        v115 = (JSC::VM *)*((_QWORD *)v388 + 7);
        goto LABEL_182;
      }
LABEL_697:
      Index = 0;
      goto LABEL_627;
    }
    if ((v27 & 0xFFFE000000000002) == 0)
    {
      v154 = v9[17];
      v155 = *(unsigned __int16 *)(v154 + 64);
      if (!*(_WORD *)(v154 + 64))
        v155 = *(_DWORD *)(v154 + 224);
      v156 = ((v154 + v155 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v24;
      *(_DWORD *)(v156 + 4) |= 2u;
      if (v29 == 0xFFFE0000FFFFFFFFLL && v27 && (*(_BYTE *)(v27 + 5) & 0xFE) == 0x24)
      {
        v157 = *(_QWORD **)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28);
        v158 = v157[288];
        v159 = (v158 & 1) != 0 ? (v158 >> 1) & 3 : *(unsigned __int8 *)(v158 + 4);
        if (v159 != 2)
        {
          v160 = v157[287];
          v161 = (v160 & 1) != 0 ? (v160 >> 1) & 3 : *(unsigned __int8 *)(v160 + 4);
          if (v161 != 2)
          {
            v162 = *(unsigned __int8 *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 8);
            v163 = (v162 & 0x10) != 0 ? ((v162 & 0xE) + 10) >> 1 : (v162 >> 1) & 7;
            v164 = *((_DWORD *)v157 + v163 + 213);
            v165 = v164 ? 16 * (v164 & 0xFFFFFFFE) : 0;
            if (v165 == 16 * (*(_DWORD *)v27 & 0xFFFFFFFE))
              goto LABEL_264;
            v290 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x30);
            if (!v290)
              v290 = *(_QWORD *)(v27 + 16);
            if (v290 == v157[84] && !*(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x20))
            {
LABEL_264:
              Index = 10;
              goto LABEL_160;
            }
          }
        }
      }
    }
  }
LABEL_97:
  if ((v27 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v280 = (JSC::VM *)*((_QWORD *)v388 + 7);
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)v388, v27);
    JSC::VM::throwException(v280, v388, NotAnObjectError, v282, v283, v284, v285, v286);
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v245 = *(_DWORD *)(v11 + 80);
    if ((v245 & 0x27) != 0 && (v245 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
      Index = 0;
      goto LABEL_160;
    }
  }
  v74 = *((_QWORD *)v388 + 7);
  if (!v30)
  {
    if (*(_BYTE *)(v29 + 5) == 2)
    {
      v42 = *(_QWORD *)(v29 + 8);
      if ((v42 & 1) == 0)
      {
        if ((*(_BYTE *)(v42 + 16) & 0x10) == 0)
        {
          v180 = *(WTF::StringImpl **)(v74 + 64768);
          if (v180 != (WTF::StringImpl *)v42)
          {
            *(_DWORD *)v42 += 2;
            *(_QWORD *)(v74 + 64768) = v42;
            if (v180)
            {
              if (*(_DWORD *)v180 == 2)
              {
                WTF::StringImpl::~StringImpl(v180, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v265, v266, v267, v268, v269, v270, v271, v272);
              }
              else
              {
                *(_DWORD *)v180 -= 2;
              }
            }
            v181 = *(WTF::StringImpl **)(v29 + 8);
            if (v181)
            {
              if ((*((_BYTE *)v181 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v181 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v181, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v401);
                v181 = v401[0];
              }
            }
            v182 = *(WTF::StringImpl **)(v74 + 64776);
            *(_QWORD *)(v74 + 64776) = v181;
            if (v182)
            {
              if (*(_DWORD *)v182 == 2)
              {
                WTF::StringImpl::~StringImpl(v182, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v257, v258, v259, v260, v261, v262, v263, v264);
              }
              else
              {
                *(_DWORD *)v182 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
          {
            v183 = *(WTF::StringImpl **)(v74 + 64776);
            *(_DWORD *)v183 += 2;
            v401[0] = v183;
            __dmb(0xAu);
            v184 = *(WTF::StringImpl **)(v29 + 8);
            *(WTF::StringImpl **)(v29 + 8) = v401[0];
            v401[0] = v184;
            v185 = (_QWORD *)(v74 + 808);
            v186 = *(unsigned int *)(v74 + 820);
            if ((_DWORD)v186 == *(_DWORD *)(v74 + 816))
            {
              v188 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v185, v186 + 1, (unint64_t)v401);
              v186 = *(unsigned int *)(v74 + 820);
              v187 = (WTF::StringImpl **)(*(_QWORD *)(v74 + 808) + 8 * v186);
              v184 = *v188;
            }
            else
            {
              v187 = (WTF::StringImpl **)(*v185 + 8 * v186);
              v188 = v401;
            }
            *v188 = 0;
            *v187 = v184;
            *(_DWORD *)(v74 + 820) = v186 + 1;
            v189 = v401[0];
            v401[0] = 0;
            if (v189)
            {
              if (*(_DWORD *)v189 == 2)
              {
                WTF::StringImpl::~StringImpl(v189, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
              }
              else
              {
                *(_DWORD *)v189 -= 2;
              }
            }
          }
          v42 = *(_QWORD *)(v74 + 64776);
        }
        goto LABEL_104;
      }
LABEL_566:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v29, v388);
      if (*(_DWORD *)(v74 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v74, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      {
        v42 = 0;
        v306 = v401[0];
        v401[0] = 0;
        if (!v306)
          goto LABEL_106;
      }
      else
      {
        v42 = (unint64_t)v401[0];
        if (!v401[0])
          goto LABEL_106;
        *(_DWORD *)v401[0] += 2;
        v401[0] = 0;
        v306 = (WTF::StringImpl *)v42;
      }
      if (*(_DWORD *)v306 != 2)
      {
        *(_DWORD *)v306 -= 2;
        goto LABEL_106;
      }
LABEL_574:
      WTF::StringImpl::~StringImpl(v306, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
      goto LABEL_106;
    }
    v29 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v388, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v391 = (WTF::StringImpl *)v29;
  if (!*(_DWORD *)(v74 + 80))
  {
LABEL_548:
    if ((v29 & 0xFFFE000000000002) == 0)
    {
      v295 = *(unsigned __int8 *)(v29 + 5);
      if (v295 == 2)
        goto LABEL_550;
      if (v295 == 4)
      {
        v42 = *(_QWORD *)(v29 + 8);
        v307 = *(_DWORD *)v42;
        *(_DWORD *)v42 += 4;
        v75 = v307 + 2;
        if (v75)
          goto LABEL_105;
        v306 = (WTF::StringImpl *)v42;
        goto LABEL_574;
      }
    }
    v29 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v391, (uint64_t)v388, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_550:
    if (*(_DWORD *)(v74 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v74, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v42 = 0;
      goto LABEL_106;
    }
    v42 = *(_QWORD *)(v29 + 8);
    v74 = *((_QWORD *)v388 + 7);
    if ((v42 & 1) == 0)
    {
      if ((*(_BYTE *)(v42 + 16) & 0x10) == 0)
      {
        v296 = *(WTF::StringImpl **)(v74 + 64768);
        if (v296 != (WTF::StringImpl *)v42)
        {
          *(_DWORD *)v42 += 2;
          *(_QWORD *)(v74 + 64768) = v42;
          if (v296)
          {
            if (*(_DWORD *)v296 == 2)
            {
              WTF::StringImpl::~StringImpl(v296, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
            }
            else
            {
              *(_DWORD *)v296 -= 2;
            }
          }
          v297 = *(WTF::StringImpl **)(v29 + 8);
          if (v297)
          {
            if ((*((_BYTE *)v297 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v297 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v297, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)v401);
              v297 = v401[0];
            }
          }
          v298 = *(WTF::StringImpl **)(v74 + 64776);
          *(_QWORD *)(v74 + 64776) = v297;
          if (v298)
          {
            if (*(_DWORD *)v298 == 2)
            {
              WTF::StringImpl::~StringImpl(v298, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
            }
            else
            {
              *(_DWORD *)v298 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
        {
          v299 = *(WTF::StringImpl **)(v74 + 64776);
          *(_DWORD *)v299 += 2;
          v401[0] = v299;
          __dmb(0xAu);
          v300 = *(WTF::StringImpl **)(v29 + 8);
          *(WTF::StringImpl **)(v29 + 8) = v401[0];
          v401[0] = v300;
          v301 = (_QWORD *)(v74 + 808);
          v302 = *(unsigned int *)(v74 + 820);
          if ((_DWORD)v302 == *(_DWORD *)(v74 + 816))
          {
            v304 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v301, v302 + 1, (unint64_t)v401);
            v302 = *(unsigned int *)(v74 + 820);
            v303 = (WTF::StringImpl **)(*(_QWORD *)(v74 + 808) + 8 * v302);
            v300 = *v304;
          }
          else
          {
            v303 = (WTF::StringImpl **)(*v301 + 8 * v302);
            v304 = v401;
          }
          *v304 = 0;
          *v303 = v300;
          *(_DWORD *)(v74 + 820) = v302 + 1;
          v305 = v401[0];
          v401[0] = 0;
          if (v305)
          {
            if (*(_DWORD *)v305 == 2)
            {
              WTF::StringImpl::~StringImpl(v305, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
            }
            else
            {
              *(_DWORD *)v305 -= 2;
            }
          }
        }
        v42 = *(_QWORD *)(v74 + 64776);
      }
      goto LABEL_104;
    }
    goto LABEL_566;
  }
  if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v74, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v29 = (unint64_t)v391;
    goto LABEL_548;
  }
  v42 = *(_QWORD *)(*(_QWORD *)(v74 + 41952) + 8);
  if (v42)
  {
LABEL_104:
    v75 = *(_DWORD *)v42 + 2;
LABEL_105:
    *(_DWORD *)v42 = v75;
  }
LABEL_106:
  if (*(_DWORD *)(v11 + 80))
  {
    v246 = *(_DWORD *)(v11 + 80);
    if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
LABEL_371:
      Index = 0;
      goto LABEL_157;
    }
  }
  a9.i64[0] = 0xFFFFFFFF00000000;
  v393 = 0xFFFFFFFF00000000;
  LOBYTE(v397) = 0;
  v398 = 0;
  v399 = 0;
  v400 = 0;
  v395 = 0;
  memset(v396, 0, 13);
  v394 = (_DWORD *)v27;
  if ((v27 & 0xFFFE000000000002) == 0)
  {
    v76 = *((_QWORD *)v388 + 7);
    v77 = *(unsigned __int8 *)(v27 + 5);
    if (v77 > 0x16)
      goto LABEL_109;
    if (v77 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v76 + 41952) + 1768) == v42)
      {
        v340 = *(_QWORD *)(v27 + 8);
        if ((v340 & 1) != 0)
          v341 = (unsigned int *)(v27 + 16);
        else
          v341 = (unsigned int *)(v340 + 4);
        v342 = *v341;
        if ((v342 & 0x80000000) != 0)
          v343 = (WTF::StringImpl *)(COERCE__INT64((double)v342) + 0x2000000000000);
        else
          v343 = (WTF::StringImpl *)(v342 | 0xFFFE000000000000);
        v344 = 14;
        goto LABEL_602;
      }
      if (v42)
      {
        v347 = *(_DWORD *)(v42 + 16);
        if ((v347 & 0x20) == 0)
        {
          v348 = *(_BYTE **)(v42 + 8);
          v349 = *(unsigned int *)(v42 + 4);
          if ((v347 & 4) != 0)
          {
            if (!(_DWORD)v349)
              goto LABEL_613;
            a3 = *v348 - 48;
            if (a3 > 9 || v349 >= 2 && *v348 == 48)
              goto LABEL_613;
            v380 = v349 - 1;
            v381 = v348 + 1;
            while (v380)
            {
              if (a3 > 0x19999999)
                goto LABEL_613;
              v382 = *v381 - 48;
              if (v382 > 9)
                goto LABEL_613;
              v345 = 0;
              v141 = __CFADD__(v382, 10 * a3);
              a3 = v382 + 10 * (_DWORD)a3;
              --v380;
              ++v381;
              if (v141)
                goto LABEL_603;
            }
          }
          else
          {
            if (!(_DWORD)v349)
              goto LABEL_613;
            a3 = *(unsigned __int16 *)v348 - 48;
            if (a3 > 9 || *(_WORD *)v348 == 48 && v349 > 1)
              goto LABEL_613;
            v373 = (unsigned __int16 *)(v348 + 2);
            v374 = v349 - 1;
            while (v374)
            {
              if (a3 > 0x19999999)
                goto LABEL_613;
              v375 = *v373 - 48;
              if (v375 > 9)
                goto LABEL_613;
              v345 = 0;
              v141 = __CFADD__(v375, 10 * a3);
              a3 = v375 + 10 * (_DWORD)a3;
              ++v373;
              --v374;
              if (v141)
                goto LABEL_603;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v383 = *(_QWORD *)(v27 + 8);
            v384 = (_DWORD *)((v383 & 1) != 0 ? v27 + 16 : v383 + 4);
            if (*v384 > a3)
            {
              v343 = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v27, v388, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v76 + 80)
                || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v76, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
              {
                v344 = 10;
LABEL_602:
                v391 = v343;
                LODWORD(v393) = v344;
                v395 = 0;
                v345 = 1;
                BYTE1(v396[1]) = 1;
                goto LABEL_603;
              }
            }
          }
        }
      }
LABEL_613:
      v345 = 0;
LABEL_603:
      if (*(_DWORD *)(v76 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v76, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_153;
      }
      if ((v345 & 1) != 0)
        goto LABEL_172;
    }
  }
  v346 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v390, (unint64_t)v388);
  if (!v346)
    goto LABEL_153;
  v27 = v346;
  v76 = *((_QWORD *)v388 + 7);
LABEL_109:
  v78 = v27 + 6;
  v79 = v42 >> 4;
  v80 = v27;
  if ((*(_BYTE *)(v27 + 6) & 8) == 0)
  {
    v81 = v27;
    do
    {
      v82 = *(_DWORD *)v81 & 0xFFFFFFFE;
      v83 = 16 * v82;
      if (!(_DWORD)v79 || (v79 & ~*(_DWORD *)(16 * v82 + 0x20)) != 0)
        goto LABEL_122;
      v84 = *(_QWORD *)(16 * v82 + 0x58);
      if (!v84)
      {
        v95 = *(_QWORD *)(16 * v82 + 0x40);
        if (!v95 || *(_BYTE *)(v95 + 5) != 1 && *(_DWORD *)(v95 + 80) < 2u)
          goto LABEL_122;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v83, (JSC::VM *)v76, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v84)
          goto LABEL_122;
      }
      if (!*(_DWORD *)(v84 + 24))
        goto LABEL_122;
      v85 = *(_QWORD *)(v84 + 16);
      v86 = v85 & 0xFFFFFFFFFFFFFFFELL;
      v87 = *(unsigned int *)(v84 + 8);
      v88 = *(_DWORD *)(v42 + 16);
      if ((v85 & 1) != 0)
      {
        if ((v88 & 0x20) != 0)
          v88 = *(_DWORD *)(v42 + 32);
        v89 = *(_DWORD *)(v84 + 12);
        v90 = (v88 >> 8) & *(_QWORD *)&v89;
        v91 = *(unsigned __int8 *)(v86 + v90);
        if (!*(_BYTE *)(v86 + v90))
          goto LABEL_122;
        v92 = v86 + v87;
        v93 = 1;
        while (1)
        {
          v94 = *(_QWORD *)(v92 + 8 * (v91 - 1));
          if (v42 == (v94 & 0xFFFFFFFFFFFFLL))
            break;
          v90 = ((_DWORD)v90 + v93) & v89;
          v91 = *(unsigned __int8 *)(v86 + v90);
          ++v93;
          if (!*(_BYTE *)(v86 + v90))
            goto LABEL_122;
        }
        a6 = (v94 >> 16) & 0xFF00000000 | HIBYTE(v94);
      }
      else
      {
        if ((v88 & 0x20) != 0)
          v88 = *(_DWORD *)(v42 + 32);
        v96 = *(_DWORD *)(v84 + 12);
        v97 = v96 & (v88 >> 8);
        v98 = *(_DWORD *)(v86 + 4 * v97);
        if (!v98)
          goto LABEL_122;
        v99 = v86 + 4 * v87;
        v100 = 1;
        while (1)
        {
          v101 = (v98 - 1);
          if (v42 == *(_QWORD *)(v99 + 16 * v101))
            break;
          v97 = (v97 + v100) & v96;
          v98 = *(_DWORD *)(v86 + 4 * v97);
          ++v100;
          if (!v98)
            goto LABEL_122;
        }
        a6 = *(unsigned int *)(v99 + 16 * v101 + 8) | ((unint64_t)*(unsigned __int8 *)(v99 + 16 * v101 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v111 = v81 + 16;
          v112 = a6 << 32;
        }
        else
        {
          v111 = *(_QWORD *)(v81 + 8) - 8;
          v112 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v111 + (v112 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v113 = *(unsigned __int8 *)(a4 + 5);
          if (v113 != 5)
          {
            if (v113 != 6)
              goto LABEL_170;
            v190 = *(_DWORD *)(v83 + 16) & 3;
            v191 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v193 = *(int8x16_t ***)(a4 + 24);
              v192 = *(_QWORD *)(a4 + 32);
              v391 = *(WTF::StringImpl **)(a4 + 8);
              v392 = v191;
              LODWORD(v393) = HIDWORD(a6);
              v395 = (_DWORD *)v81;
              goto LABEL_307;
            }
            v391 = *(WTF::StringImpl **)(a4 + 8);
            v392 = v191;
            LODWORD(v393) = HIDWORD(a6);
            v395 = (_DWORD *)v81;
LABEL_404:
            BYTE1(v396[1]) = 3;
            if (v190 != 2)
              LOBYTE(v396[1]) = 1;
            goto LABEL_172;
          }
          v143 = (unsigned int *)v81;
          v144 = v76;
LABEL_217:
          JSC::JSObject::fillGetterPropertySlot(v143, v144, (uint64_t)&v391, a4, a5, a6);
          goto LABEL_172;
        }
LABEL_170:
        v391 = (WTF::StringImpl *)a4;
        v395 = (_DWORD *)v81;
LABEL_171:
        v393 = __PAIR64__(a6, a5);
        LOWORD(v396[1]) = 257;
        goto LABEL_172;
      }
LABEL_122:
      if ((*(_BYTE *)v78 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v81, (JSC::VM *)v76, v42, (uint64_t)&v391) & 1) != 0)
      {
        goto LABEL_172;
      }
      v80 = *(_QWORD *)(v83 + 48);
      if (!v80)
        v80 = *(_QWORD *)(v81 + 16);
      if ((v80 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v80 + 5) < 0x17u)
      {
        if (!v42)
          goto LABEL_153;
        v102 = *(_DWORD *)(v42 + 16);
        if ((v102 & 0x20) != 0)
          goto LABEL_153;
        v103 = *(_WORD **)(v42 + 8);
        v104 = *(unsigned int *)(v42 + 4);
        if ((v102 & 4) == 0)
        {
          if ((_DWORD)v104)
          {
            v105 = (unsigned __int16)*v103 - 48;
            if (v105 <= 9 && (*v103 != 48 || v104 <= 1))
            {
              v138 = v103 + 1;
              v139 = v104 - 1;
              while (v139)
              {
                if (v105 > 0x19999999)
                  goto LABEL_149;
                v140 = *v138 - 48;
                if (v140 > 9)
                  goto LABEL_149;
                v106 = 0;
                LOBYTE(v104) = 0;
                v107 = 0;
                v141 = __CFADD__(v140, 10 * v105);
                v105 = v140 + 10 * v105;
                ++v138;
                --v139;
                if (v141)
                  goto LABEL_151;
              }
              v107 = v105 & 0xFFFFFF00;
              v106 = 0x100000000;
              if (v105 == -1)
              {
                v106 = 0;
                LOBYTE(v104) = 0;
              }
              else
              {
                LOBYTE(v104) = v105;
              }
              if (v105 == -1)
                v107 = 0;
LABEL_151:
              v108 = v104;
LABEL_152:
              if ((v106 & 0x100000000) == 0)
              {
LABEL_153:
                Index = 10;
                goto LABEL_154;
              }
              v148 = v107 | v108;
              v149 = (JSC::VM *)*((_QWORD *)v388 + 7);
              Index = 10;
              while (2)
              {
                v150 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
                v151 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v150 + 0x4C) + 0x70))(v27, v388, v148, &v391);
                if (*((_DWORD *)v149 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v149, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                {
                  goto LABEL_153;
                }
                if ((v151 & 1) != 0)
                  goto LABEL_172;
                if (BYTE2(v396[1]) == 3)
                {
                  if (BYTE4(v396[1]))
                    goto LABEL_153;
                  v152 = *(unsigned __int8 *)(v27 + 5);
                  if (v152 != 61)
                    goto LABEL_234;
                }
                else
                {
                  v152 = *(unsigned __int8 *)(v27 + 5);
                  if (v152 == 61)
                  {
                    if (BYTE2(v396[1]) == 1)
                      goto LABEL_153;
                  }
                  else
                  {
LABEL_234:
                    if ((v152 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v27, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v148)
                    {
                      goto LABEL_153;
                    }
                  }
                }
                if ((*(_WORD *)(v150 + 12) & 0x800) == 0 || BYTE2(v396[1]) == 3)
                {
                  v153 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x30);
                  if (!v153)
                    v153 = *(_QWORD *)(v27 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v153 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v27, v388);
                  }
                  else
                  {
                    v153 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x30);
                    if (!v153)
                      v153 = *(_QWORD *)(v27 + 16);
                  }
                  if (*((_DWORD *)v149 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v149, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_153;
                  }
                }
                if ((v153 & 0xFFFE000000000002) != 0)
                  goto LABEL_154;
                v27 = v153;
                if (*(unsigned __int8 *)(v153 + 5) <= 0x16u)
                  goto LABEL_154;
                continue;
              }
            }
LABEL_149:
            v106 = 0;
            LOBYTE(v104) = 0;
          }
          else
          {
            v106 = 0;
          }
          v107 = 0;
          goto LABEL_151;
        }
        if ((_DWORD)v104)
        {
          v291 = *(unsigned __int8 *)v103 - 48;
          if (v291 <= 9 && (v104 < 2 || *(_BYTE *)v103 != 48))
          {
            v292 = v104 - 1;
            v293 = (unsigned __int8 *)v103 + 1;
            while (v292)
            {
              if (v291 > 0x19999999)
                goto LABEL_506;
              v294 = *v293 - 48;
              if (v294 > 9)
                goto LABEL_506;
              v108 = 0;
              LOBYTE(v104) = 0;
              v106 = 0;
              v141 = __CFADD__(v294, 10 * v291);
              v291 = v294 + 10 * v291;
              --v292;
              ++v293;
              if (v141)
                goto LABEL_508;
            }
            if (v291 == -1)
              v108 = 0;
            else
              v108 = v291 & 0xFFFFFF00;
            if (v291 == -1)
              LOBYTE(v104) = 0;
            else
              LOBYTE(v104) = v291;
            if (v291 == -1)
              v106 = 0;
            else
              v106 = 0x100000000;
            goto LABEL_508;
          }
LABEL_506:
          v108 = 0;
          LOBYTE(v104) = 0;
        }
        else
        {
          v108 = 0;
        }
        v106 = 0;
LABEL_508:
        v107 = v104;
        goto LABEL_152;
      }
      v78 = v80 + 6;
      v81 = v80;
    }
    while ((*(_BYTE *)(v80 + 6) & 8) == 0);
  }
  if (!v42)
    goto LABEL_333;
  v212 = *(_DWORD *)(v42 + 16);
  if ((v212 & 0x20) != 0)
    goto LABEL_333;
  v213 = *(_WORD **)(v42 + 8);
  v214 = *(unsigned int *)(v42 + 4);
  if ((v212 & 4) == 0)
  {
    if ((_DWORD)v214)
    {
      v215 = (unsigned __int16)*v213 - 48;
      if (v215 <= 9 && (*v213 != 48 || v214 <= 1))
      {
        v247 = v213 + 1;
        v248 = v214 - 1;
        while (v248)
        {
          if (v215 > 0x19999999)
            goto LABEL_329;
          v249 = *v247 - 48;
          if (v249 > 9)
            goto LABEL_329;
          v216 = 0;
          LOBYTE(v214) = 0;
          v217 = 0;
          v141 = __CFADD__(v249, 10 * v215);
          v215 = v249 + 10 * v215;
          ++v247;
          --v248;
          if (v141)
            goto LABEL_331;
        }
        v217 = v215 & 0xFFFFFF00;
        v216 = 0x100000000;
        if (v215 == -1)
        {
          v216 = 0;
          LOBYTE(v214) = 0;
        }
        else
        {
          LOBYTE(v214) = v215;
        }
        if (v215 == -1)
          v217 = 0;
        goto LABEL_331;
      }
LABEL_329:
      v216 = 0;
      LOBYTE(v214) = 0;
    }
    else
    {
      v216 = 0;
    }
    v217 = 0;
LABEL_331:
    v218 = v214;
    goto LABEL_332;
  }
  if ((_DWORD)v214)
  {
    v376 = *(unsigned __int8 *)v213 - 48;
    if (v376 <= 9 && (v214 < 2 || *(_BYTE *)v213 != 48))
    {
      v377 = v214 - 1;
      v378 = (unsigned __int8 *)v213 + 1;
      while (v377)
      {
        if (v376 > 0x19999999)
          goto LABEL_650;
        v379 = *v378 - 48;
        if (v379 > 9)
          goto LABEL_650;
        v218 = 0;
        LOBYTE(v214) = 0;
        v216 = 0;
        v141 = __CFADD__(v379, 10 * v376);
        v376 = v379 + 10 * v376;
        --v377;
        ++v378;
        if (v141)
          goto LABEL_652;
      }
      if (v376 == -1)
        v218 = 0;
      else
        v218 = v376 & 0xFFFFFF00;
      if (v376 == -1)
        LOBYTE(v214) = 0;
      else
        LOBYTE(v214) = v376;
      if (v376 == -1)
        v216 = 0;
      else
        v216 = 0x100000000;
      goto LABEL_652;
    }
LABEL_650:
    v218 = 0;
    LOBYTE(v214) = 0;
  }
  else
  {
    v218 = 0;
  }
  v216 = 0;
LABEL_652:
  v217 = v214;
LABEL_332:
  if ((v216 & 0x100000000) != 0)
  {
    v250 = v217 | v218;
    v251 = (JSC::VM *)*((_QWORD *)v388 + 7);
    Index = 10;
    while (1)
    {
      v252 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
      v253 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v252 + 0x4C) + 0x70))(v27, v388, v250, &v391);
      v254 = v253;
      if (*((_DWORD *)v251 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v251, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        if (((hasExceptionsAfterHandlingTraps | v254) & 1) != 0)
        {
          if (!hasExceptionsAfterHandlingTraps)
            goto LABEL_172;
          goto LABEL_153;
        }
      }
      else if ((v253 & 1) != 0)
      {
        goto LABEL_172;
      }
      if (BYTE2(v396[1]) == 3)
      {
        if (BYTE4(v396[1]))
          goto LABEL_153;
        v255 = *(unsigned __int8 *)(v27 + 5);
        if (v255 == 61)
          goto LABEL_418;
      }
      else
      {
        v255 = *(unsigned __int8 *)(v27 + 5);
        if (v255 == 61)
        {
          if (BYTE2(v396[1]) == 1)
            goto LABEL_153;
          goto LABEL_418;
        }
      }
      if ((v255 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v27, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v250)
      {
        goto LABEL_153;
      }
LABEL_418:
      if ((*(_WORD *)(v252 + 12) & 0x800) == 0 || BYTE2(v396[1]) == 3)
      {
        v256 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x30);
        if (!v256)
          v256 = *(_QWORD *)(v27 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v256 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v27, v388);
        }
        else
        {
          v256 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x30);
          if (!v256)
            v256 = *(_QWORD *)(v27 + 16);
        }
        if (*((_DWORD *)v251 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v251, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_153;
        }
      }
      if ((v256 & 0xFFFE000000000002) == 0)
      {
        v27 = v256;
        if (*(unsigned __int8 *)(v256 + 5) > 0x16u)
          continue;
      }
      goto LABEL_154;
    }
  }
LABEL_333:
  v219 = (JSC::VM *)*((_QWORD *)v388 + 7);
  Index = 10;
  while (1)
  {
    v220 = 16 * (*(_DWORD *)v80 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v80 + 6) & 8) == 0)
      break;
    v385 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x4C) + 0x68))(v80, v388, v42, &v391);
    if (*((_DWORD *)v219 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v219, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_153;
    if ((v385 & 1) != 0)
      goto LABEL_172;
    if (BYTE2(v396[1]) == 3)
    {
      if (BYTE4(v396[1]))
        goto LABEL_153;
      v275 = *(unsigned __int8 *)(v80 + 5);
      if (v275 != 61)
      {
LABEL_450:
        if (!v42)
          goto LABEL_347;
        if ((v275 - 50) < 0xFFFFFFF5)
          goto LABEL_347;
        v276 = *(_DWORD *)(v42 + 16);
        if ((v276 & 0x20) != 0)
          goto LABEL_347;
        v277 = *(unsigned int *)(v42 + 4);
        if (!(_DWORD)v277)
          goto LABEL_347;
        v278 = *(unsigned __int8 **)(v42 + 8);
        if ((v276 & 4) == 0)
        {
          v279 = *(unsigned __int16 *)v278;
          if ((_DWORD)v277 == 1)
            goto LABEL_456;
          if (v279 == 45)
          {
            v279 = *((unsigned __int16 *)v278 + 1);
            goto LABEL_463;
          }
          if ((v279 - 48) >= 0xA && ((_DWORD)v277 != 8 || v279 != 73))
          {
LABEL_485:
            if ((_DWORD)v277 != 3 || v279 != 78)
              goto LABEL_347;
          }
LABEL_470:
          v78 = v78 & 0xFFFFFF0000000000 | v277 | ((unint64_t)((v276 >> 2) & 1) << 32);
          JSC::jsToNumber(v278, v78);
          WTF::numberToString(v401, v288);
          if (WTF::equal(v42, (unint64_t)v401, v289))
            goto LABEL_153;
          goto LABEL_347;
        }
        v279 = *v278;
        if ((_DWORD)v277 == 1)
        {
LABEL_456:
          if ((v279 - 48) < 0xA)
            goto LABEL_153;
          goto LABEL_347;
        }
        if (v279 == 45)
        {
          v279 = v278[1];
LABEL_463:
          if ((v279 - 48) < 0xA)
          {
            if ((_DWORD)v277 == 2)
              goto LABEL_153;
            goto LABEL_470;
          }
          if ((_DWORD)v277 != 9)
            goto LABEL_347;
        }
        else
        {
          if ((v279 - 48) < 0xA)
            goto LABEL_470;
          if ((_DWORD)v277 != 8)
            goto LABEL_485;
        }
        if (v279 != 73)
          goto LABEL_347;
        goto LABEL_470;
      }
    }
    else
    {
      v275 = *(unsigned __int8 *)(v80 + 5);
      if (v275 != 61)
        goto LABEL_450;
      if (BYTE2(v396[1]) == 1)
        goto LABEL_153;
    }
LABEL_347:
    if ((*(_WORD *)(v220 + 12) & 0x800) == 0)
    {
      v232 = *(_DWORD *)v80;
LABEL_349:
      v233 = *(_QWORD *)(16 * (v232 & 0xFFFFFFFE) + 0x30);
      if (!v233)
        v233 = *(_QWORD *)(v80 + 16);
      goto LABEL_351;
    }
    v232 = *(_DWORD *)v80;
    if (BYTE2(v396[1]) == 3)
      goto LABEL_349;
    v274 = 16 * (v232 & 0xFFFFFFFE);
    if ((*(_WORD *)(v274 + 12) & 0x800) != 0)
    {
      v233 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v274 + 76)
                                                                                + 0xB0))(v80, v388);
    }
    else
    {
      v233 = *(_QWORD *)(v274 + 48);
      if (!v233)
        v233 = *(_QWORD *)(v80 + 16);
    }
    if (*((_DWORD *)v219 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v219, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_153;
LABEL_351:
    if ((v233 & 0xFFFE000000000002) == 0)
    {
      v80 = v233;
      if (*(unsigned __int8 *)(v233 + 5) > 0x16u)
        continue;
    }
    goto LABEL_154;
  }
  if (!(_DWORD)v79 || (v79 & ~*(_DWORD *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_346;
  v221 = *(_QWORD *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x58);
  if (!v221)
  {
    v234 = *(_QWORD *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x40);
    if (!v234 || *(_BYTE *)(v234 + 5) != 1 && *(_DWORD *)(v234 + 80) < 2u)
      goto LABEL_346;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE)), v219, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v221)
      goto LABEL_346;
  }
  if (!*(_DWORD *)(v221 + 24))
    goto LABEL_346;
  v222 = *(_QWORD *)(v221 + 16);
  v223 = v222 & 0xFFFFFFFFFFFFFFFELL;
  v224 = *(unsigned int *)(v221 + 8);
  v225 = *(_DWORD *)(v42 + 16);
  if ((v222 & 1) != 0)
  {
    if ((v225 & 0x20) != 0)
      v225 = *(_DWORD *)(v42 + 32);
    v226 = *(_DWORD *)(v221 + 12);
    v227 = (v225 >> 8) & *(_QWORD *)&v226;
    v228 = *(unsigned __int8 *)(v223 + v227);
    if (*(_BYTE *)(v223 + v227))
    {
      v229 = v223 + v224;
      v230 = 1;
      while (1)
      {
        v231 = *(_QWORD *)(v229 + 8 * (v228 - 1));
        if (v42 == (v231 & 0xFFFFFFFFFFFFLL))
          break;
        v227 = ((_DWORD)v227 + v230) & v226;
        v228 = *(unsigned __int8 *)(v223 + v227);
        ++v230;
        if (!*(_BYTE *)(v223 + v227))
          goto LABEL_346;
      }
      a6 = (v231 >> 16) & 0xFF00000000 | HIBYTE(v231);
      goto LABEL_359;
    }
LABEL_346:
    if ((*(_BYTE *)(v80 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v80, v219, v42, (uint64_t)&v391) & 1) != 0)
    {
      goto LABEL_172;
    }
    goto LABEL_347;
  }
  if ((v225 & 0x20) != 0)
    v225 = *(_DWORD *)(v42 + 32);
  v235 = *(_DWORD *)(v221 + 12);
  v236 = v235 & (v225 >> 8);
  v237 = *(_DWORD *)(v223 + 4 * v236);
  if (!v237)
    goto LABEL_346;
  v238 = v223 + 4 * v224;
  v239 = 1;
  while (1)
  {
    v240 = (v237 - 1);
    if (v42 == *(_QWORD *)(v238 + 16 * v240))
      break;
    v236 = (v236 + v239) & v235;
    v237 = *(_DWORD *)(v223 + 4 * v236);
    ++v239;
    if (!v237)
      goto LABEL_346;
  }
  a6 = *(unsigned int *)(v238 + 16 * v240 + 8) | ((unint64_t)*(unsigned __int8 *)(v238 + 16 * v240 + 12) << 32);
LABEL_359:
  if ((_DWORD)a6 == -1)
    goto LABEL_346;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v242 = v80 + 16;
    v243 = a6 << 32;
  }
  else
  {
    v242 = *(_QWORD *)(v80 + 8) - 8;
    v243 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v242 + (v243 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_378:
    v391 = (WTF::StringImpl *)a4;
    v395 = (_DWORD *)v80;
    goto LABEL_171;
  }
  v244 = *(unsigned __int8 *)(a4 + 5);
  if (v244 == 5)
  {
    v143 = (unsigned int *)v80;
    v144 = (uint64_t)v219;
    goto LABEL_217;
  }
  if (v244 != 6)
    goto LABEL_378;
  v190 = *(_DWORD *)(v220 + 16) & 3;
  v273 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v391 = *(WTF::StringImpl **)(a4 + 8);
    v392 = v273;
    LODWORD(v393) = HIDWORD(a6);
    v395 = (_DWORD *)v80;
    goto LABEL_404;
  }
  v193 = *(int8x16_t ***)(a4 + 24);
  v192 = *(_QWORD *)(a4 + 32);
  v391 = *(WTF::StringImpl **)(a4 + 8);
  v392 = v273;
  LODWORD(v393) = HIDWORD(a6);
  v395 = (_DWORD *)v80;
LABEL_307:
  BYTE1(v396[1]) = 3;
  if (v190 != 2)
    LOBYTE(v396[1]) = 1;
  BYTE3(v396[1]) = 1;
  v399 = v193;
  v400 = v192;
LABEL_172:
  if (BYTE1(v396[1]) == 1)
  {
    Index = (uint64_t)v391;
  }
  else
  {
    if (BYTE1(v396[1]) == 2)
    {
      v142 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v391, v388, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v166 = (unint64_t)v395;
      v167 = *(_QWORD *)(16 * (*v395 & 0xFFFFFFFE) + 0x28);
      if ((v393 & 0x20) != 0)
        v166 = (unint64_t)v394;
      if (BYTE3(v396[1]) != 1)
        goto LABEL_279;
      if ((v166 & 0xFFFE000000000002) != 0)
        goto LABEL_489;
      v168 = *(unsigned int *)(16 * (*(_DWORD *)v166 & 0xFFFFFFFE) + 0x4C);
      v169 = *(_DWORD *)(16 * (*(_DWORD *)v166 & 0xFFFFFFFE) + 0x4C) != 0;
      v170 = 16 * v168;
      if ((_DWORD)v168)
        v171 = v399 == (int8x16_t **)v170;
      else
        v171 = 1;
      if (!v171)
      {
        do
        {
          v170 = *(_QWORD *)(v170 + 16);
          v169 = v170 != 0;
        }
        while ((int8x16_t **)v170 != v399 && v170 != 0);
      }
      if (!v169)
      {
LABEL_489:
        v401[0] = *((WTF::StringImpl **)v388 + 7);
        v142 = JSC::throwDOMAttributeGetterTypeError(v167, v401, v399, (WTF::StringImpl *)v42);
      }
      else
      {
LABEL_279:
        v142 = ((uint64_t (*)(unint64_t))v391)(v167);
      }
    }
    Index = v142;
  }
LABEL_154:
  if (v398)
  {
    v109 = *(_DWORD *)(v397 + 4);
    if (!v109)
    {
      __break(0xC471u);
      JUMPOUT(0x198836B9CLL);
    }
    *(_DWORD *)(v397 + 4) = v109 - 1;
  }
LABEL_157:
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v42, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
LABEL_160:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v388, &v389, "LLIntSlowPaths", v17);
  if (*((_QWORD *)v389 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v387) = Index;
  *(_QWORD *)(v9[17] - 16 * v386 - 16) = Index;
  return (__int128 *)v17;
}

__int128 *llint_slow_path_get_private_name(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned __int8 **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  unsigned int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned __int8 *v46;
  _DWORD *v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  WTF::StringImpl *v69;
  int v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  _DWORD *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  JSC::VM **v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  __int128 *v154;
  JSC::VM *v155;
  unsigned __int8 *v156[2];
  WTF::StringImpl *v157[2];
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  JSC::VM *v169[2];

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v169[0] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198838220);
  }
  v16 = (__int128 *)a2;
  v17 = a1;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v123 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
    v24 = *(_DWORD *)(a2 + 14);
    v25 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    if (v18 == 128)
    {
      v124 = *((__int16 *)a2 + 1);
      v20 = 1073741760;
      if (v124 <= 63)
        v21 = *((__int16 *)a2 + 1);
      else
        v21 = v124 + 1073741760;
      v22 = *((__int16 *)a2 + 2);
      v23 = *((__int16 *)a2 + 3);
      if (v23 > 63)
        v23 += 1073741760;
      v24 = *((unsigned __int16 *)a2 + 4);
      v25 = *((unsigned __int16 *)a2 + 5);
      if (v22 <= 63)
        goto LABEL_14;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = 1073741808;
      if (v19 <= 15)
        v21 = (char)a2[1];
      else
        v21 = v19 + 1073741808;
      v22 = (char)a2[2];
      v23 = (char)a2[3];
      if (v23 > 15)
        v23 += 1073741808;
      v24 = a2[4];
      v25 = a2[5];
      if (v22 <= 15)
      {
LABEL_14:
        v26 = v22;
LABEL_15:
        v153 = v25;
        v27 = (unsigned __int8 **)(a1 + 8 * v26);
        goto LABEL_16;
      }
    }
    v123 = v22 + v20;
  }
  v26 = v123;
  if (v123 < 0x40000000)
    goto LABEL_15;
  v125 = (v123 - 0x40000000);
  if (v125 >= *(unsigned int *)(v11 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988385BCLL);
  }
  v153 = v25;
  v27 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v125);
LABEL_16:
  v28 = (uint64_t)*v27;
  v168 = *v27;
  if (v23 >= 0x40000000)
  {
    v56 = v23 - 0x40000000;
    if (v56 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988385B4);
    }
    v29 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v56);
  }
  else
  {
    v29 = (uint64_t *)(a1 + 8 * v23);
  }
  v30 = *v29;
  v151 = *v29;
  if ((v28 & 0xFFFE000000000002) != 0)
  {
    v92 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v168, v9, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(v28 + 5) > 0x16u)
      goto LABEL_20;
    v92 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v28, (JSC::SymbolObject **)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v30 = v151;
  v28 = v92;
LABEL_20:
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v9, v169, "LLIntSlowPaths", v16);
    v30 = v151;
  }
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  v152 = v24;
  v31 = *((_QWORD *)v9 + 7);
  v155 = v10;
  if ((v30 & 0xFFFE000000000002) != 0)
  {
    v65 = v30;
  }
  else
  {
    if (*(_BYTE *)(v30 + 5) == 2)
    {
      v32 = *(_QWORD *)(v30 + 8);
      if ((v32 & 1) == 0)
      {
        if ((*(_BYTE *)(v32 + 16) & 0x10) == 0)
        {
          if (*(_QWORD *)(v31 + 64768) != v32)
          {
            WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v31 + 64768), *(WTF::AtomStringImpl **)(v30 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            v79 = *(WTF::StringImpl **)(v151 + 8);
            if (v79)
            {
              if ((*((_BYTE *)v79 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v79 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v79, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v157);
                v79 = v157[0];
              }
            }
            v80 = *(WTF::StringImpl **)(v31 + 64776);
            *(_QWORD *)(v31 + 64776) = v79;
            v30 = v151;
            if (v80)
            {
              if (*(_DWORD *)v80 == 2)
              {
                WTF::StringImpl::~StringImpl(v80, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
                v30 = v151;
              }
              else
              {
                *(_DWORD *)v80 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v30 + 8) + 16) & 0x10) == 0)
          {
            v81 = *(WTF::StringImpl **)(v31 + 64776);
            *(_DWORD *)v81 += 2;
            v157[0] = v81;
            __dmb(0xAu);
            v82 = *(WTF::StringImpl **)(v30 + 8);
            *(WTF::StringImpl **)(v30 + 8) = v157[0];
            v157[0] = v82;
            JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v31 + 192, (unint64_t)v157);
            v83 = v157[0];
            v157[0] = 0;
            if (v83)
            {
              if (*(_DWORD *)v83 == 2)
              {
                WTF::StringImpl::~StringImpl(v83, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
              }
              else
              {
                *(_DWORD *)v83 -= 2;
              }
            }
          }
          v32 = *(_QWORD *)(v31 + 64776);
        }
        *(_DWORD *)v32 += 2;
        goto LABEL_28;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v30, v9);
      if (*(_DWORD *)(v31 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v32 = 0;
        v69 = v157[0];
        v157[0] = 0;
        if (!v69)
          goto LABEL_28;
        goto LABEL_90;
      }
      v32 = (unint64_t)v157[0];
      if (!v157[0])
        goto LABEL_28;
LABEL_89:
      *(_DWORD *)v32 += 2;
      v157[0] = 0;
      v69 = (WTF::StringImpl *)v32;
LABEL_90:
      if (*(_DWORD *)v69 == 2)
      {
        WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v69 -= 2;
      }
      goto LABEL_28;
    }
    v65 = JSC::JSCell::toPrimitive(v30, (JSC::VM **)v9, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
  }
  v156[0] = (unsigned __int8 *)v65;
  if (!*(_DWORD *)(v31 + 80))
  {
LABEL_79:
    if ((v65 & 0xFFFE000000000002) == 0)
    {
      v66 = *(unsigned __int8 *)(v65 + 5);
      if (v66 == 2)
        goto LABEL_81;
      if (v66 == 4)
      {
        v32 = *(_QWORD *)(v65 + 8);
        v70 = *(_DWORD *)v32;
        *(_DWORD *)v32 += 4;
        v68 = v70 + 2;
        if (!v68)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          goto LABEL_86;
        }
LABEL_85:
        *(_DWORD *)v32 = v68;
LABEL_86:
        v10 = v155;
        goto LABEL_28;
      }
    }
    v65 = (uint64_t)JSC::JSValue::toStringSlowCase(v156, (uint64_t)v9, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_81:
    if (*(_DWORD *)(v31 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v32 = 0;
      goto LABEL_86;
    }
    v32 = *(_QWORD *)(v65 + 8);
    v67 = *((_QWORD *)v9 + 7);
    if ((v32 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v65, v9);
      if (*(_DWORD *)(v67 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v67, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v32 = 0;
        v69 = v157[0];
        v157[0] = 0;
        v10 = v155;
        if (!v69)
          goto LABEL_28;
        goto LABEL_90;
      }
      v32 = (unint64_t)v157[0];
      v10 = v155;
      if (!v157[0])
        goto LABEL_28;
      goto LABEL_89;
    }
    if ((*(_BYTE *)(v32 + 16) & 0x10) == 0)
    {
      v101 = v67 + 64768;
      if (*(_QWORD *)(v67 + 64768) != v32)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v67 + 64768), (WTF::AtomStringImpl *)v32, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v102 = *(WTF::StringImpl **)(v65 + 8);
        if (v102)
        {
          if ((*((_BYTE *)v102 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v102 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v102, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v157);
            v102 = v157[0];
          }
        }
        v101 = v67 + 64768;
        v103 = *(WTF::StringImpl **)(v67 + 64776);
        *(_QWORD *)(v67 + 64776) = v102;
        if (v103)
        {
          if (*(_DWORD *)v103 == 2)
          {
            WTF::StringImpl::~StringImpl(v103, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
          }
          else
          {
            *(_DWORD *)v103 -= 2;
          }
          v101 = v67 + 64768;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v65 + 8) + 16) & 0x10) == 0)
      {
        v104 = *(WTF::StringImpl **)(v101 + 8);
        *(_DWORD *)v104 += 2;
        v157[0] = v104;
        __dmb(0xAu);
        v105 = *(WTF::StringImpl **)(v65 + 8);
        *(WTF::StringImpl **)(v65 + 8) = v157[0];
        v157[0] = v105;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v67 + 192, (unint64_t)v157);
        v106 = v157[0];
        v157[0] = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
          {
            WTF::StringImpl::~StringImpl(v106, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
          }
          else
          {
            *(_DWORD *)v106 -= 2;
          }
        }
        v101 = v67 + 64768;
      }
      v32 = *(_QWORD *)(v101 + 8);
    }
    v68 = *(_DWORD *)v32 + 2;
    goto LABEL_85;
  }
  if (!JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v65 = (uint64_t)v156[0];
    goto LABEL_79;
  }
  v126 = *(_DWORD **)(*(_QWORD *)(v31 + 41952) + 8);
  v32 = (unint64_t)v126;
  if (v126)
    *v126 += 2;
  v10 = v155;
LABEL_28:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, v169, "LLIntSlowPaths", v16);
  if (!*((_QWORD *)v10 + 2))
  {
    v158 = 0xFFFFFFFF00000000;
    v160 = 0;
    v161 = 0;
    v159 = v28;
    v162 = 0x20000;
    v163 = 0;
    LOBYTE(v164) = 0;
    v165 = 0;
    v166 = 0;
    v167 = 0;
    JSC::JSObject::getPrivateField(v28, (JSC::VM **)v9, v32, (uint64_t)v157, a5, a6, a7, a8);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v9, v169, "LLIntSlowPaths", v16);
    v34 = v153;
    if (*((_QWORD *)v10 + 2))
      goto LABEL_138;
    v150 = (JSC::VM **)v9;
    if (!(_BYTE)qword_1ECF4C789
      || (v35 = v168, ((unint64_t)v168 & 0xFFFE000000000002) != 0)
      || (v36 = BYTE1(v162), !BYTE1(v162))
      || v162 != 1)
    {
LABEL_56:
      if (BYTE1(v162) == 1)
      {
        v52 = v157[0];
      }
      else
      {
        if (BYTE1(v162) == 2)
          v55 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v157, (JSC::JSGlobalObject *)v150, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        else
          v55 = JSC::PropertySlot::customGetter((uint64_t)v157, v150[7], (WTF::StringImpl *)v32);
        v52 = (WTF::StringImpl *)v55;
      }
      if (HIBYTE(word_1ECF4C620))
        JSC::doExceptionFuzzing((unint64_t)v150, v169, "LLIntSlowPaths", v16);
      if (!*((_QWORD *)v169[0] + 2))
      {
        *(_QWORD *)(v17 + 8 * v21) = v52;
        *(_QWORD *)(*(_QWORD *)(v8 + 136) - 16 * v152 - 16) = v52;
        goto LABEL_62;
      }
LABEL_138:
      v16 = &xmmword_1ECF4C7C0;
LABEL_62:
      if (v165)
      {
        v53 = *(_DWORD *)(v164 + 4);
        if (!v53)
        {
          __break(0xC471u);
          JUMPOUT(0x198838314);
        }
        *(_DWORD *)(v164 + 4) = v53 - 1;
      }
      goto LABEL_65;
    }
    v37 = *(_QWORD *)(v8 + 136);
    v38 = *(unsigned __int16 *)(v37 + 68);
    if (!*(_WORD *)(v37 + 68))
      v38 = *(_DWORD *)(v37 + 232);
    v39 = (v37 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = (_DWORD *)(v39 + 16 * v153);
    if (*v40)
    {
      v107 = *v40 & 0xFFFFFFFE;
      if ((_DWORD)v107)
      {
        v108 = *(_DWORD *)v168 & 0xFFFFFFFE;
        if ((_DWORD)v108)
        {
          v109 = 16 * v107;
          v110 = 16 * v108;
          if (16 * v107 != v110 && *(_DWORD *)(16 * v107 + 0x1C) == *(_DWORD *)(v110 + 28))
          {
            v111 = *(_QWORD *)(16 * v107 + 0x40);
            if (v111)
            {
              if (*(_BYTE *)(v111 + 5) != 1)
              {
                v112 = v39;
                v113 = *(_QWORD *)(v110 + 64);
                if (!v113
                  || *(_BYTE *)(v113 + 5) == 1
                  || (v114 = *(_QWORD *)(v111 + 72)) == 0
                  || v114 != *(_QWORD *)(v113 + 72)
                  || (v135 = *(_QWORD *)(v109 + 48)) == 0
                  || (v136 = *(_QWORD *)(v110 + 48)) == 0
                  || v135 == v136)
                {
                  v34 = v153;
LABEL_137:
                  v39 = v112;
                  goto LABEL_41;
                }
                v137 = v136 != 2;
                v138 = v135 != 2;
                if (v135 != 2 && v136 != 2)
                {
                  while (*(_DWORD *)(16 * (*(_DWORD *)v135 & 0xFFFFFFFE) + 0x1C) == *(_DWORD *)(16
                                                                                                 * (*(_DWORD *)v136 & 0xFFFFFFFE)
                                                                                                 + 0x1C))
                  {
                    v139 = *(_QWORD *)(16 * (*(_DWORD *)v135 & 0xFFFFFFFE) + 0x30);
                    if (!v139)
                      v139 = *(_QWORD *)(v135 + 16);
                    v140 = *(_QWORD *)(16 * (*(_DWORD *)v136 & 0xFFFFFFFE) + 0x30);
                    if (!v140)
                      v140 = *(_QWORD *)(v136 + 16);
                    v138 = (v139 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                    v137 = (v140 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                    v141 = (v139 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v140 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                    v136 = v140;
                    v135 = v139;
                    if (v141)
                      goto LABEL_188;
                  }
                  goto LABEL_196;
                }
LABEL_188:
                if (v138)
                {
LABEL_196:
                  v34 = v153;
                  goto LABEL_137;
                }
                v34 = v153;
                v39 = v112;
                if (!v137)
                {
                  v156[0] = (unsigned __int8 *)&off_1E3583C90;
                  v156[1] = "Detected poly proto opportunity.";
                  JSC::InlineWatchpointSet::invalidate((uint64_t *)(v114 + 8), v155, v156, (uint64_t)a4, a5, a6, a7, a8, v33);
                  v39 = v112;
                  v35 = v168;
                  v36 = BYTE1(v162);
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    if (v36 != 1)
      goto LABEL_56;
    v41 = *v35 & 0xFFFFFFFE;
    *(_QWORD *)v40 = 0;
    if ((*(_DWORD *)(16 * v41 + 0x10) & 3) == 2)
      goto LABEL_56;
    v154 = v16;
    v42 = v21;
    v43 = v17;
    v44 = v34;
    v45 = (_DWORD *)(v39 + 16 * v34 + 4);
    v46 = (unsigned __int8 *)(v8 + 16);
    if (__ldaxr((unsigned __int8 *)(v8 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v46))
    {
      goto LABEL_46;
    }
    v48 = v40;
    v49 = v32;
    v50 = v39;
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 16);
    v39 = v50;
    v32 = v49;
    v40 = v48;
LABEL_46:
    *v40 = v41;
    *v45 = HIDWORD(v158);
    *(_QWORD *)(v39 + 16 * v44 + 8) = v151;
    if (v8 && v151 && *((_DWORD *)v155 + 190) >= *(unsigned __int8 *)(v8 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v155 + 192, v8);
    v51 = __ldxr(v46);
    v17 = v43;
    v21 = v42;
    if (v51 == 1)
    {
      v16 = v154;
      if (!__stlxr(0, v46))
        goto LABEL_53;
    }
    else
    {
      __clrex();
      v16 = v154;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 16), 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_53:
    if (v8 && *((_DWORD *)v155 + 190) >= *(unsigned __int8 *)(v8 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v155 + 192, v8);
    goto LABEL_56;
  }
  v16 = &xmmword_1ECF4C7C0;
LABEL_65:
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v16;
}

__int128 *llint_slow_path_put_by_val(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  _QWORD *v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl **v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  _DWORD *v93;
  WTF::StringImpl *v94;
  _QWORD *v95;
  uint64_t v96;
  WTF::StringImpl **v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134[2];
  int v135;
  BOOL v136;
  __int16 v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  JSC::VM *v141;
  unsigned __int8 *v142;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v141 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_149:
    __break(0xC471u);
    JUMPOUT(0x198838AA0);
  }
  v17 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v51 = *((__int16 *)a2 + 2);
    if (v51 <= 63)
      v22 = *((__int16 *)a2 + 2);
    else
      v22 = v51 + 1073741760;
    v52 = *((__int16 *)a2 + 3);
    v24 = v52 + 1073741760;
    if (v52 <= 63)
      v24 = *((__int16 *)a2 + 3);
    v25 = a2[8];
    v26 = *((unsigned __int16 *)a2 + 5);
    if (v19 <= 63)
      goto LABEL_14;
LABEL_65:
    v53 = v19 + v20;
    goto LABEL_66;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v21 = (char)a2[2];
    if (v21 <= 15)
      v22 = (char)a2[2];
    else
      v22 = v21 + 1073741808;
    v23 = (char)a2[3];
    v24 = v23 + 1073741808;
    if (v23 <= 15)
      v24 = (char)a2[3];
    v25 = a2[4];
    v26 = a2[5];
    if (v19 <= 15)
    {
LABEL_14:
      v27 = v19;
LABEL_15:
      v28 = (unint64_t *)(a1 + 8 * v27);
      goto LABEL_16;
    }
    goto LABEL_65;
  }
  v53 = *(_DWORD *)(a2 + 2);
  v22 = *(_DWORD *)(a2 + 6);
  v24 = *(_DWORD *)(a2 + 10);
  v25 = a2[14];
  v26 = *(_DWORD *)(a2 + 18);
LABEL_66:
  v27 = v53;
  if (v53 < 0x40000000)
    goto LABEL_15;
  v54 = (v53 - 0x40000000);
  if (v54 >= *(unsigned int *)(v12 + 172))
    goto LABEL_149;
  v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v54);
LABEL_16:
  v29 = *v28;
  v140 = *v28;
  if (v22 >= 0x40000000)
  {
    v41 = v22 - 0x40000000;
    if (v41 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198838E3CLL);
    }
    v30 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v41);
  }
  else
  {
    v30 = (unint64_t *)(a1 + 8 * v22);
  }
  v31 = *v30;
  if (v24 >= 0x40000000)
  {
    v42 = v24 - 0x40000000;
    if (v42 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198838E44);
    }
    v32 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v42);
  }
  else
  {
    v32 = (unint64_t *)(a1 + 8 * v24);
  }
  v33 = *v32;
  v34 = v9[17];
  v35 = *(unsigned __int16 *)(v34 + 70);
  if (!*(_WORD *)(v34 + 70))
    v35 = *(_DWORD *)(v34 + 236);
  if (v31 >= 0xFFFE000000000000 && (v31 & 0x80000000) == 0)
  {
    v36 = *v30;
LABEL_25:
    if ((v29 & 0xFFFE000000000002) != 0)
    {
      JSC::JSValue::putToPrimitiveByIndex((JSC::JSValue *)&v140, v10, (const WTF::StringImpl *)v36, v33, v25 == 0, a6, a7, a8);
    }
    else if (*(unsigned __int8 *)(v29 + 5) < 0x17u
           || (JSC::JSObject::trySetIndexQuickly(v29, v11, v36, v33, ((v34 + v35 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v26, a6, a7, a8, a9) & 1) == 0)
    {
      (*(void (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, unint64_t, BOOL))(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) + 0x50))(v29, v10, v36, v33, v25 == 0);
    }
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v10, &v141, "LLIntSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      return &xmmword_1ECF4C7C0;
    return v17;
  }
  if (v31 >> 49)
  {
    a9 = (double)(int)v31;
    if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&a9 = v31 - 0x2000000000000;
    v36 = a9;
    if ((_DWORD)v36 != -1 && a9 == (double)v36)
      goto LABEL_25;
  }
  v37 = *((_QWORD *)v10 + 7);
  if ((v31 & 0xFFFE000000000002) != 0)
  {
LABEL_101:
    v142 = (unsigned __int8 *)v31;
    if (*(_DWORD *)(v37 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v38 = *(_QWORD *)(*(_QWORD *)(v37 + 41952) + 8);
      if (!v38)
        goto LABEL_39;
      goto LABEL_37;
    }
    if ((v31 & 0xFFFE000000000002) == 0)
    {
      v89 = *(unsigned __int8 *)(v31 + 5);
      if (v89 == 2)
      {
LABEL_104:
        if (*(_DWORD *)(v37 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v38 = 0;
          goto LABEL_39;
        }
        v38 = *(_QWORD *)(v31 + 8);
        v37 = *((_QWORD *)v10 + 7);
        if ((v38 & 1) == 0)
        {
          if ((*(_BYTE *)(v38 + 16) & 0x10) == 0)
          {
            v90 = *(WTF::StringImpl **)(v37 + 64768);
            if (v90 != (WTF::StringImpl *)v38)
            {
              *(_DWORD *)v38 += 2;
              *(_QWORD *)(v37 + 64768) = v38;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                {
                  WTF::StringImpl::~StringImpl(v90, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
                }
                else
                {
                  *(_DWORD *)v90 -= 2;
                }
              }
              v91 = *(WTF::StringImpl **)(v31 + 8);
              if (v91)
              {
                if ((*((_BYTE *)v91 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v91 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v91, a3, a4, a5, a6, a7, a8, (WTF *)v134);
                  v91 = v134[0];
                }
              }
              v92 = *(WTF::StringImpl **)(v37 + 64776);
              *(_QWORD *)(v37 + 64776) = v91;
              if (v92)
              {
                if (*(_DWORD *)v92 == 2)
                {
                  WTF::StringImpl::~StringImpl(v92, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
                }
                else
                {
                  *(_DWORD *)v92 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v31 + 8) + 16) & 0x10) == 0)
            {
              v93 = *(_DWORD **)(v37 + 64776);
              *v93 += 2;
              __dmb(0xAu);
              v94 = *(WTF::StringImpl **)(v31 + 8);
              *(_QWORD *)(v31 + 8) = v93;
              v134[0] = v94;
              v95 = (_QWORD *)(v37 + 808);
              v96 = *(unsigned int *)(v37 + 820);
              if ((_DWORD)v96 == *(_DWORD *)(v37 + 816))
              {
                v98 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, v96 + 1, (unint64_t)v134);
                v96 = *(unsigned int *)(v37 + 820);
                v97 = (WTF::StringImpl **)(*(_QWORD *)(v37 + 808) + 8 * v96);
                v94 = *v98;
              }
              else
              {
                v97 = (WTF::StringImpl **)(*v95 + 8 * v96);
                v98 = v134;
              }
              *v98 = 0;
              *v97 = v94;
              *(_DWORD *)(v37 + 820) = v96 + 1;
              v99 = v134[0];
              v134[0] = 0;
              if (v99)
              {
                if (*(_DWORD *)v99 == 2)
                {
                  WTF::StringImpl::~StringImpl(v99, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                }
                else
                {
                  *(_DWORD *)v99 -= 2;
                }
              }
            }
            v38 = *(_QWORD *)(v37 + 64776);
          }
          goto LABEL_37;
        }
        goto LABEL_120;
      }
      if (v89 == 4)
      {
        v38 = *(_QWORD *)(v31 + 8);
        v101 = *(_DWORD *)v38;
        *(_DWORD *)v38 += 4;
        v39 = v101 + 2;
        if (v39)
          goto LABEL_38;
        v100 = (WTF::StringImpl *)v38;
LABEL_128:
        WTF::StringImpl::~StringImpl(v100, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        goto LABEL_39;
      }
    }
    v31 = (unint64_t)JSC::JSValue::toStringSlowCase(&v142, (uint64_t)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_104;
  }
  if (*(_BYTE *)(v31 + 5) != 2)
  {
    v31 = JSC::JSCell::toPrimitive(v31, (JSC::VM **)v10, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_101;
  }
  v38 = *(_QWORD *)(v31 + 8);
  if ((v38 & 1) != 0)
  {
LABEL_120:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v31, v10);
    if (*(_DWORD *)(v37 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v37, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v38 = 0;
      v100 = v134[0];
      v134[0] = 0;
      if (!v100)
        goto LABEL_39;
    }
    else
    {
      v38 = (uint64_t)v134[0];
      if (!v134[0])
        goto LABEL_39;
      *(_DWORD *)v134[0] += 2;
      v134[0] = 0;
      v100 = (WTF::StringImpl *)v38;
    }
    if (*(_DWORD *)v100 != 2)
    {
      *(_DWORD *)v100 -= 2;
      goto LABEL_39;
    }
    goto LABEL_128;
  }
  if ((*(_BYTE *)(v38 + 16) & 0x10) == 0)
  {
    v55 = *(WTF::StringImpl **)(v37 + 64768);
    if (v55 != (WTF::StringImpl *)v38)
    {
      *(_DWORD *)v38 += 2;
      *(_QWORD *)(v37 + 64768) = v38;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
      v56 = *(WTF::StringImpl **)(v31 + 8);
      if (v56)
      {
        if ((*((_BYTE *)v56 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v56 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v56, a3, a4, a5, a6, a7, a8, (WTF *)v134);
          v56 = v134[0];
        }
      }
      v57 = *(WTF::StringImpl **)(v37 + 64776);
      *(_QWORD *)(v37 + 64776) = v56;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
        {
          WTF::StringImpl::~StringImpl(v57, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
        }
        else
        {
          *(_DWORD *)v57 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v31 + 8) + 16) & 0x10) == 0)
    {
      v58 = *(_DWORD **)(v37 + 64776);
      *v58 += 2;
      __dmb(0xAu);
      v59 = *(WTF::StringImpl **)(v31 + 8);
      *(_QWORD *)(v31 + 8) = v58;
      v134[0] = v59;
      v60 = (_QWORD *)(v37 + 808);
      v61 = *(unsigned int *)(v37 + 820);
      if ((_DWORD)v61 == *(_DWORD *)(v37 + 816))
      {
        v63 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)v134);
        v61 = *(unsigned int *)(v37 + 820);
        v62 = (WTF::StringImpl **)(*(_QWORD *)(v37 + 808) + 8 * v61);
        v59 = *v63;
      }
      else
      {
        v62 = (WTF::StringImpl **)(*v60 + 8 * v61);
        v63 = v134;
      }
      *v63 = 0;
      *v62 = v59;
      *(_DWORD *)(v37 + 820) = v61 + 1;
      v64 = v134[0];
      v134[0] = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
        {
          WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v64 -= 2;
        }
      }
    }
    v38 = *(_QWORD *)(v37 + 64776);
  }
LABEL_37:
  v39 = *(_DWORD *)v38 + 2;
LABEL_38:
  *(_DWORD *)v38 = v39;
LABEL_39:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v141, "LLIntSlowPaths", v17);
  if (*((_QWORD *)v11 + 2))
  {
    v17 = &xmmword_1ECF4C7C0;
  }
  else
  {
    v134[0] = 0;
    v134[1] = (WTF::StringImpl *)v140;
    v135 = -1;
    v136 = v25 == 0;
    v137 = 0;
    v138 = 1;
    v139 = 0;
    if ((v140 & 0xFFFE000000000002) != 0)
      JSC::JSValue::putToPrimitive((JSC::JSValue *)&v140, v10, v38, v33, (uint64_t)v134, a6, a7, a8);
    else
      (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v140 & 0xFFFFFFFE) + 0x4C) + 0x48))();
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v10, &v141, "LLIntSlowPaths", v17);
    if (*((_QWORD *)v11 + 2))
      v17 = &xmmword_1ECF4C7C0;
  }
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v38, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  return v17;
}

__int128 *llint_slow_path_put_by_val_direct(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  JSC::VM *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unsigned __int16 *v62;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  _DWORD *v91;
  WTF::StringImpl *v92;
  _QWORD *v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  JSC::VM *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159[2];
  int v160;
  BOOL v161;
  __int16 v162;
  char v163;
  uint64_t v164;
  JSC::VM *v165;
  WTF::StringImpl *v166[4];

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v165 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988395ACLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = v21 + 1073741760;
    if (v21 <= 63)
      v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    v24 = a2[8];
    if (v19 <= 63)
    {
LABEL_12:
      v25 = v19;
LABEL_13:
      v26 = (unint64_t *)(a1 + 8 * v25);
      goto LABEL_14;
    }
    goto LABEL_69;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v58 = (char)a2[2];
    v22 = v58 + 1073741808;
    if (v58 <= 15)
      v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    v24 = a2[4];
    if (v19 <= 15)
      goto LABEL_12;
LABEL_69:
    v59 = v19 + v20;
    goto LABEL_70;
  }
  v59 = *(_DWORD *)(a2 + 2);
  v22 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
  v24 = a2[14];
LABEL_70:
  v25 = v59;
  if (v59 < 0x40000000)
    goto LABEL_13;
  v60 = (v59 - 0x40000000);
  if (v60 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x198839958);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v60);
LABEL_14:
  v27 = *v26;
  if (v22 >= 0x40000000)
  {
    v66 = v22 - 0x40000000;
    if (v66 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198839960);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v66);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v22);
  }
  v29 = *v28;
  if (v23 >= 0x40000000)
  {
    v67 = v23 - 0x40000000;
    if (v67 >= *(_DWORD *)(v12 + 172))
      goto LABEL_223;
    v30 = (WTF::StringImpl **)(*(_QWORD *)(v12 + 160) + 8 * v67);
  }
  else
  {
    v30 = (WTF::StringImpl **)(a1 + 8 * v23);
  }
  if ((v27 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v27 + 5) <= 0x16u)
  {
LABEL_223:
    __break(0xC471u);
    JUMPOUT(0x19883920CLL);
  }
  v31 = *v30;
  if (v29 >= 0xFFFE000000000000 && (v29 & 0x80000000) == 0)
  {
    a3 = *v28;
LABEL_23:
    if (v24)
      v32 = 1;
    else
      v32 = 2;
    JSC::JSObject::putDirectIndex(v27, (uint64_t)v10, (JSC::VM *)a3, (unint64_t)v31, 0, v32, a7, a8, a9.n128_f64[0]);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v10, &v165, "LLIntSlowPaths", a2);
    if (*(_QWORD *)(v11 + 16))
      return &xmmword_1ECF4C7C0;
    else
      return (__int128 *)a2;
  }
  if (v29 >> 49)
  {
    a9.n128_f64[0] = (double)(int)v29;
    if (v29 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.n128_u64[0] = v29 - 0x2000000000000;
    a3 = a9.n128_f64[0];
    if ((_DWORD)a3 != -1 && a9.n128_f64[0] == (double)a3)
      goto LABEL_23;
  }
  v34 = *((_QWORD *)v10 + 7);
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v29 + 5) == 2)
    {
      v35 = *(_QWORD *)(v29 + 8);
      if ((v35 & 1) == 0)
      {
        if ((*(_BYTE *)(v35 + 16) & 0x10) == 0)
        {
          v88 = *(WTF::StringImpl **)(v34 + 64768);
          if (v88 != (WTF::StringImpl *)v35)
          {
            *(_DWORD *)v35 += 2;
            *(_QWORD *)(v34 + 64768) = v35;
            if (v88)
            {
              if (*(_DWORD *)v88 == 2)
              {
                WTF::StringImpl::~StringImpl(v88, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
              }
              else
              {
                *(_DWORD *)v88 -= 2;
              }
            }
            v89 = *(WTF::StringImpl **)(v29 + 8);
            if (v89)
            {
              if ((*((_BYTE *)v89 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v89 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v89, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v166);
                v89 = v166[0];
              }
            }
            v90 = *(WTF::StringImpl **)(v34 + 64776);
            *(_QWORD *)(v34 + 64776) = v89;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
              {
                WTF::StringImpl::~StringImpl(v90, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
              }
              else
              {
                *(_DWORD *)v90 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
          {
            v91 = *(_DWORD **)(v34 + 64776);
            *v91 += 2;
            __dmb(0xAu);
            v92 = *(WTF::StringImpl **)(v29 + 8);
            *(_QWORD *)(v29 + 8) = v91;
            v166[0] = v92;
            v93 = (_QWORD *)(v34 + 808);
            v94 = *(unsigned int *)(v34 + 820);
            if ((_DWORD)v94 == *(_DWORD *)(v34 + 816))
            {
              v96 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)v166);
              v94 = *(unsigned int *)(v34 + 820);
              v95 = (WTF::StringImpl **)(*(_QWORD *)(v34 + 808) + 8 * v94);
              v92 = *v96;
            }
            else
            {
              v95 = (WTF::StringImpl **)(*v93 + 8 * v94);
              v96 = v166;
            }
            *v96 = 0;
            *v95 = v92;
            *(_DWORD *)(v34 + 820) = v94 + 1;
            v97 = v166[0];
            v166[0] = 0;
            if (v97)
            {
              if (*(_DWORD *)v97 == 2)
              {
                WTF::StringImpl::~StringImpl(v97, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
              }
              else
              {
                *(_DWORD *)v97 -= 2;
              }
            }
          }
          v35 = *(_QWORD *)(v34 + 64776);
        }
        goto LABEL_36;
      }
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v29, v10);
      if (!*(_DWORD *)(v34 + 80))
        goto LABEL_125;
      v122 = (JSC::VM *)v34;
      goto LABEL_165;
    }
    v29 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
  }
  v159[0] = (unsigned __int8 *)v29;
  if (*(_DWORD *)(v34 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 41952) + 8);
    if (v35)
    {
LABEL_36:
      v36 = *(_DWORD *)v35 + 2;
LABEL_37:
      *(_DWORD *)v35 = v36;
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    v127 = *(unsigned __int8 *)(v29 + 5);
    if (v127 == 2)
      goto LABEL_191;
    if (v127 == 4)
    {
      v35 = *(_QWORD *)(v29 + 8);
      v134 = *(_DWORD *)v35;
      *(_DWORD *)v35 += 4;
      v36 = v134 + 2;
      if (v36)
        goto LABEL_37;
      v87 = (WTF::StringImpl *)v35;
LABEL_207:
      WTF::StringImpl::~StringImpl(v87, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
      goto LABEL_38;
    }
  }
  v29 = (unint64_t)JSC::JSValue::toStringSlowCase(v159, (uint64_t)v10, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_191:
  if (*(_DWORD *)(v34 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v34, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v35 = 0;
    goto LABEL_38;
  }
  v35 = *(_QWORD *)(v29 + 8);
  v128 = *((_QWORD *)v10 + 7);
  if ((v35 & 1) == 0)
  {
    if ((*(_BYTE *)(v35 + 16) & 0x10) == 0)
    {
      if (*(_QWORD *)(v128 + 64768) != v35)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v128 + 64768), *(WTF::AtomStringImpl **)(v29 + 8), a3, (uint64_t)a4, a5, a6, a7, a8);
        v129 = *(WTF::StringImpl **)(v29 + 8);
        if (v129)
        {
          if ((*((_BYTE *)v129 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v129 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v129, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v166);
            v129 = v166[0];
          }
        }
        v130 = *(WTF::StringImpl **)(v128 + 64776);
        *(_QWORD *)(v128 + 64776) = v129;
        if (v130)
        {
          if (*(_DWORD *)v130 == 2)
          {
            WTF::StringImpl::~StringImpl(v130, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
          }
          else
          {
            *(_DWORD *)v130 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
      {
        v131 = *(WTF::StringImpl **)(v128 + 64776);
        *(_DWORD *)v131 += 2;
        v166[0] = v131;
        __dmb(0xAu);
        v132 = *(WTF::StringImpl **)(v29 + 8);
        *(WTF::StringImpl **)(v29 + 8) = v166[0];
        v166[0] = v132;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v128 + 192, (unint64_t)v166);
        v133 = v166[0];
        v166[0] = 0;
        if (v133)
        {
          if (*(_DWORD *)v133 == 2)
          {
            WTF::StringImpl::~StringImpl(v133, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
          }
          else
          {
            *(_DWORD *)v133 -= 2;
          }
        }
      }
      v35 = *(_QWORD *)(v128 + 64776);
    }
    goto LABEL_36;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v29, v10);
  if (!*(_DWORD *)(v128 + 80))
  {
LABEL_125:
    v35 = (unint64_t)v166[0];
    if (!v166[0])
      goto LABEL_38;
    *(_DWORD *)v166[0] += 2;
    v166[0] = 0;
    v87 = (WTF::StringImpl *)v35;
LABEL_127:
    if (*(_DWORD *)v87 != 2)
    {
      *(_DWORD *)v87 -= 2;
      goto LABEL_38;
    }
    goto LABEL_207;
  }
  v122 = (JSC::VM *)v128;
LABEL_165:
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v122, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8))
    goto LABEL_125;
  v35 = 0;
  v87 = v166[0];
  v166[0] = 0;
  if (v87)
    goto LABEL_127;
LABEL_38:
  if (*(_QWORD *)(v11 + 16))
  {
    v33 = &xmmword_1ECF4C7C0;
    if (HIBYTE(word_1ECF4C620))
    {
      JSC::doExceptionFuzzing((unint64_t)v10, &v165, "LLIntSlowPaths", a2);
      if (!*(_QWORD *)(v11 + 16))
        v33 = (__int128 *)a2;
    }
    goto LABEL_111;
  }
  if (v35)
  {
    v37 = *(_DWORD *)(v35 + 16);
    if ((v37 & 0x20) == 0)
    {
      v38 = *(_BYTE **)(v35 + 8);
      v39 = *(unsigned int *)(v35 + 4);
      if ((v37 & 4) != 0)
      {
        if (!(_DWORD)v39)
          goto LABEL_44;
        v40 = (JSC::VM *)(*v38 - 48);
        if (v40 > 9 || v39 >= 2 && *v38 == 48)
          goto LABEL_44;
        v123 = v39 - 1;
        v124 = v38 + 1;
        while (v123)
        {
          if (v40 <= 0x19999999)
          {
            v125 = *v124 - 48;
            if (v125 <= 9)
            {
              v65 = __CFADD__(v125, 10 * (_DWORD)v40);
              v40 = (JSC::VM *)(v125 + 10 * (_DWORD)v40);
              --v123;
              ++v124;
              if (!v65)
                continue;
            }
          }
          goto LABEL_44;
        }
      }
      else
      {
        if (!(_DWORD)v39)
          goto LABEL_44;
        v40 = (JSC::VM *)(*(unsigned __int16 *)v38 - 48);
        if (v40 > 9)
          goto LABEL_44;
        if (*(_WORD *)v38 == 48 && v39 > 1)
          goto LABEL_44;
        v62 = (unsigned __int16 *)(v38 + 2);
        v63 = v39 - 1;
        while (v63)
        {
          if (v40 <= 0x19999999)
          {
            v64 = *v62 - 48;
            if (v64 <= 9)
            {
              v65 = __CFADD__(v64, 10 * (_DWORD)v40);
              v40 = (JSC::VM *)(v64 + 10 * (_DWORD)v40);
              ++v62;
              --v63;
              if (!v65)
                continue;
            }
          }
          goto LABEL_44;
        }
      }
      if ((_DWORD)v40 != -1)
      {
        if (v24)
          v126 = 1;
        else
          v126 = 2;
        JSC::JSObject::putDirectIndex(v27, (uint64_t)v10, v40, (unint64_t)v31, 0, v126, a7, a8, a9.n128_f64[0]);
        goto LABEL_106;
      }
    }
  }
LABEL_44:
  v159[0] = 0;
  v159[1] = (unsigned __int8 *)v27;
  v160 = -1;
  v161 = v24 == 0;
  v162 = 0;
  v163 = 1;
  v164 = 0;
  v41 = *(unsigned __int8 *)(v27 + 5);
  v42 = v41;
  if (v41 == 26)
  {
    if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2160) == v35)
    {
      v163 = 0;
      v68 = *(_QWORD *)(v27 + 24);
      if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFFFFFFFFFELL) != 0)
        JSC::FunctionRareData::clear(v68 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    }
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)v27, (JSC::FunctionRareData *)v11, v10, (const JSC::PropertyTable *)v35, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v43, v44, (uint64_t)a4, a5, a6, a7, a8))
    {
      goto LABEL_106;
    }
    v42 = *(unsigned __int8 *)(v27 + 5);
  }
  v45 = (_DWORD *)v27;
  if (v42 == 32)
    v45 = *(_DWORD **)(v27 + 16);
  v46 = 16 * (*v45 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v46 + 0x12) & 0x10) != 0)
    goto LABEL_151;
  if ((v35 >> 4) && ((v35 >> 4) & ~*(_DWORD *)(16 * (*v45 & 0xFFFFFFFE) + 0x20)) == 0)
  {
    v47 = *(_QWORD *)(16 * (*v45 & 0xFFFFFFFE) + 0x58);
    if (v47
      || (v69 = *(_QWORD *)(16 * (*v45 & 0xFFFFFFFE) + 0x40)) != 0
      && (*(_BYTE *)(v69 + 5) == 1 || *(_DWORD *)(v69 + 80) >= 2u)
      && (JSC::Structure::materializePropertyTable((JSC::Structure *)v46, (JSC::VM *)v11, 1, a4, a5, a6, a7, a8), v47))
    {
      if (*(_DWORD *)(v47 + 24))
      {
        v48 = *(_QWORD *)(v47 + 16);
        v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v50 = *(unsigned int *)(v47 + 8);
        v51 = *(_DWORD *)(v35 + 16);
        if ((v48 & 1) != 0)
        {
          if ((v51 & 0x20) != 0)
            v51 = *(_DWORD *)(v35 + 32);
          v52 = *(_DWORD *)(v47 + 12);
          v53 = (v51 >> 8) & *(_QWORD *)&v52;
          v54 = *(unsigned __int8 *)(v49 + v53);
          if (!*(_BYTE *)(v49 + v53))
            goto LABEL_102;
          v55 = v49 + v50;
          v56 = 1;
          while (1)
          {
            v57 = *(_QWORD *)(v55 + 8 * (v54 - 1));
            if (v35 == (v57 & 0xFFFFFFFFFFFFLL))
              break;
            v53 = ((_DWORD)v53 + v56) & v52;
            v54 = *(unsigned __int8 *)(v49 + v53);
            ++v56;
            if (!*(_BYTE *)(v49 + v53))
              goto LABEL_102;
          }
          v70 = (v57 >> 16) & 0xFF00000000 | HIBYTE(v57);
        }
        else
        {
          if ((v51 & 0x20) != 0)
            v51 = *(_DWORD *)(v35 + 32);
          v81 = *(_DWORD *)(v47 + 12);
          v82 = v81 & (v51 >> 8);
          v83 = *(_DWORD *)(v49 + 4 * v82);
          if (!v83)
            goto LABEL_102;
          v84 = v49 + 4 * v50;
          v85 = 1;
          while (1)
          {
            v86 = (v83 - 1);
            if (v35 == *(_QWORD *)(v84 + 16 * v86))
              break;
            v82 = (v82 + v85) & v81;
            v83 = *(_DWORD *)(v49 + 4 * v82);
            ++v85;
            if (!v83)
              goto LABEL_102;
          }
          v70 = *(unsigned int *)(v84 + 16 * v86 + 8) | ((unint64_t)*(unsigned __int8 *)(v84 + 16 * v86 + 12) << 32);
        }
        if ((_DWORD)v70 != -1 && (v70 & 0x800000000) != 0)
          goto LABEL_151;
      }
    }
  }
LABEL_102:
  if (v41 != 26
    && ((*(_BYTE *)(v46 + 10) & 0x20) != 0 && (*(_BYTE *)(v46 + 18) & 0x40) == 0
     || *(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(16 * *(unsigned int *)(v46 + 76) + 0x90) != JSC::JSObject::defineOwnProperty))
  {
LABEL_151:
    v166[0] = v31;
    v166[1] = 0;
    v166[2] = 0;
    v166[3] = (WTF::StringImpl *)0x700000000;
    (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **, BOOL))(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) + 0x90))(v27, v10, v35, v166, v24 == 0);
    goto LABEL_106;
  }
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v27, v11, v35, (uint64_t)v31, 0, (uint64_t)v159, a7, a8, a9);
LABEL_106:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v165, "LLIntSlowPaths", a2);
  if (*(_QWORD *)(v11 + 16))
    v33 = &xmmword_1ECF4C7C0;
  else
    v33 = (__int128 *)a2;
LABEL_111:
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, (WTF::AtomStringImpl *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  return v33;
}

__int128 *llint_slow_path_put_private_name(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::VM **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 **v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  JSC::Symbol **v32;
  JSC::Symbol *v33;
  JSC::VM *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  JSC::VM *v38;
  JSC::Structure *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  JSC::Symbol *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  JSC::Symbol *v74;
  uint64_t v75;
  JSC::Symbol *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t InvalidPrivateNameError;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  int v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  double v92;
  JSC::Structure *v93;
  JSC::JSObject *v94;
  __int16 v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  _DWORD *v99;
  uint64_t v100;
  __int16 v101;
  unint64_t v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  char v111;
  _DWORD *v112;
  JSC::VM *v113;
  uint64_t i;
  unsigned int v115;
  JSC::JSObject *v116;
  BOOL v117;
  int v118;
  unsigned __int8 *v119;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  BOOL v125;
  __int128 *v126;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  JSC::Symbol *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  JSC::Exception *v150;
  JSC::Symbol *v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  JSC::Symbol *v182;
  JSC::Symbol *v183;
  int v184;
  int v185;
  JSC::VM *v186;
  int v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  JSC::Symbol *v196;
  uint64_t v197;
  int v198;
  JSC::VM *v199;
  int v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  JSC::Symbol *v209;
  unsigned __int8 *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  JSC::Symbol *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  JSC::Symbol *v230;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  JSC::VM **v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  _DWORD *v246;
  unint64_t v247;
  int *v248;
  JSC::Structure *v249;
  JSC::Structure *v250;
  JSC::Structure *v251;
  JSC::JSCell *v252;
  void (**v253)(JSC::StringFireDetail *__hidden);
  const char *v254;
  WTF::StringImpl *v255[2];
  int v256;
  char v257;
  __int16 v258;
  char v259;
  uint64_t v260;
  JSC::JSObject *v261;
  JSC::VM *v262;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::VM ***)(v9 + 8);
  v252 = (JSC::JSCell *)v9;
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v262 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19883A6A0);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v22 = *(_DWORD *)(a2 + 6);
    v23 = *(_DWORD *)(a2 + 10);
    v24 = a2[14];
    v25 = *(_DWORD *)(a2 + 18);
  }
  else if (v18 == 128)
  {
    v184 = *((__int16 *)a2 + 1);
    if (v184 <= 63)
      v20 = *((__int16 *)a2 + 1);
    else
      v20 = v184 + 1073741760;
    v185 = *((__int16 *)a2 + 2);
    v22 = v185 + 1073741760;
    if (v185 <= 63)
      v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    v24 = a2[8];
    v25 = *((unsigned __int16 *)a2 + 5);
  }
  else
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
      v20 = (char)a2[1];
    else
      v20 = v19 + 1073741808;
    v21 = (char)a2[2];
    v22 = v21 + 1073741808;
    if (v21 <= 15)
      v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    v24 = a2[4];
    v25 = a2[5];
  }
  v26 = *((_QWORD *)v252 + 17);
  v27 = *(unsigned __int16 *)(v26 + 66);
  if (!*(_WORD *)(v26 + 66))
    v27 = *(_DWORD *)(v26 + 228);
  if (v20 >= 0x40000000)
  {
    v61 = v20 - 0x40000000;
    if (v61 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883ABFCLL);
    }
    v28 = (unsigned __int8 **)(*(_QWORD *)(v12 + 160) + 8 * v61);
  }
  else
  {
    v28 = (unsigned __int8 **)(a1 + 8 * v20);
  }
  v29 = (unint64_t)*v28;
  v261 = (JSC::JSObject *)*v28;
  if (v22 >= 0x40000000)
  {
    v62 = v22 - 0x40000000;
    if (v62 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883AC04);
    }
    v30 = (uint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v62);
  }
  else
  {
    v30 = (uint64_t *)(a1 + 8 * v22);
  }
  v31 = *v30;
  v245 = v26;
  v244 = v27;
  if (v23 >= 0x40000000)
  {
    v63 = v23 - 0x40000000;
    if (v63 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883AC0CLL);
    }
    v32 = (JSC::Symbol **)(*(_QWORD *)(v12 + 160) + 8 * v63);
  }
  else
  {
    v32 = (JSC::Symbol **)(a1 + 8 * v23);
  }
  v33 = *v32;
  if ((v29 & 0xFFFE000000000002) != 0)
  {
    v151 = *v32;
    v152 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v261, (JSC::JSGlobalObject *)v10, a3, (uint64_t)v33, a6, a7, a8, a9);
  }
  else
  {
    if (*(unsigned __int8 *)(v29 + 5) > 0x16u)
      goto LABEL_26;
    v151 = *v32;
    v152 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v29, v10, (uint64_t)a3, v33, a6, a7, a8, a9);
  }
  v33 = v151;
  v29 = v152;
LABEL_26:
  if (HIBYTE(word_1ECF4C620))
  {
    v182 = v33;
    JSC::doExceptionFuzzing((unint64_t)v10, &v262, "LLIntSlowPaths", v17);
    v33 = v182;
  }
  if (*(_QWORD *)(v11 + 16))
    return &xmmword_1ECF4C7C0;
  v34 = v10[7];
  v247 = v31 & 0xFFFE000000000002;
  v242 = v31;
  v243 = v25;
  if ((v31 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v31 + 5) == 2)
    {
      v35 = *(_QWORD *)(v31 + 8);
      if ((v35 & 1) == 0)
      {
        if ((*(_BYTE *)(v35 + 16) & 0x10) != 0)
        {
          v36 = *(_DWORD *)v35 + 2;
LABEL_34:
          *(_DWORD *)v35 = v36;
          goto LABEL_35;
        }
        if (*((_QWORD *)v34 + 8096) != v35)
        {
          v250 = v33;
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v34 + 8096, (WTF::AtomStringImpl *)v35, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9);
          v143 = *(WTF::StringImpl **)(v31 + 8);
          if (v143)
          {
            if ((*((_BYTE *)v143 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v143 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v143, a3, v142, a6, a7, a8, a9, (WTF *)v255);
              v143 = v255[0];
            }
          }
          v33 = v250;
          v144 = (WTF::StringImpl *)*((_QWORD *)v34 + 8097);
          *((_QWORD *)v34 + 8097) = v143;
          if (v144)
          {
            if (*(_DWORD *)v144 == 2)
            {
              WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)v250, a6, a7, a8, a9);
              WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
              v33 = v250;
            }
            else
            {
              *(_DWORD *)v144 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v31 + 8) + 16) & 0x10) == 0)
        {
          v145 = v33;
          v146 = (WTF::StringImpl *)*((_QWORD *)v34 + 8097);
          *(_DWORD *)v146 += 2;
          v255[0] = v146;
          __dmb(0xAu);
          v147 = *(WTF::StringImpl **)(v31 + 8);
          *(WTF::StringImpl **)(v31 + 8) = v255[0];
          v255[0] = v147;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v34 + 192, (unint64_t)v255);
          v149 = v255[0];
          v255[0] = 0;
          if (v149)
          {
            if (*(_DWORD *)v149 == 2)
            {
              WTF::StringImpl::~StringImpl(v149, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v148, a6, a7, a8, a9);
              WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
            }
            else
            {
              *(_DWORD *)v149 -= 2;
            }
          }
          v33 = v145;
        }
        v35 = *((_QWORD *)v34 + 8097);
        goto LABEL_308;
      }
      v76 = v33;
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v31, (JSC::JSGlobalObject *)v10);
      if (!*((_DWORD *)v34 + 20)
        || !JSC::VM::hasExceptionsAfterHandlingTraps(v34, (uint64_t)a2, (uint64_t)a3, v77, a6, a7, a8, a9))
      {
        v35 = (unint64_t)v255[0];
        if (!v255[0])
        {
LABEL_314:
          v33 = v76;
          goto LABEL_35;
        }
        *(_DWORD *)v255[0] += 2;
        v255[0] = 0;
        v78 = (WTF::StringImpl *)v35;
        v33 = v76;
        goto LABEL_89;
      }
      goto LABEL_293;
    }
    v196 = v33;
    v197 = JSC::JSCell::toPrimitive(v31, v10, (JSC::Structure *)2, (uint64_t)v33, a6, a7, a8, a9);
    v33 = v196;
    v31 = v197;
  }
  v253 = (void (**)(JSC::StringFireDetail *__hidden))v31;
  if (*((_DWORD *)v34 + 20))
  {
    v251 = v33;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v34, (uint64_t)a2, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9))
    {
      v35 = *(_QWORD *)(*((_QWORD *)v34 + 5244) + 8);
      if (v35)
        *(_DWORD *)v35 += 2;
      v33 = v251;
      goto LABEL_35;
    }
    v31 = (uint64_t)v253;
    v33 = v251;
  }
  if ((v31 & 0xFFFE000000000002) == 0)
  {
    v198 = *(unsigned __int8 *)(v31 + 5);
    if (v198 == 2)
      goto LABEL_305;
    if (v198 == 4)
    {
      v35 = *(_QWORD *)(v31 + 8);
      v200 = *(_DWORD *)v35;
      *(_DWORD *)v35 += 4;
      v36 = v200 + 2;
      if (v36)
        goto LABEL_34;
      v78 = (WTF::StringImpl *)v35;
      v76 = v33;
LABEL_313:
      WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9);
      WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
      goto LABEL_314;
    }
  }
  v209 = v33;
  v210 = JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v253, (uint64_t)v10, (JSC::Structure *)1, (uint64_t)v33, a6, a7, a8, a9);
  v33 = v209;
  v31 = (uint64_t)v210;
LABEL_305:
  if (*((_DWORD *)v34 + 20))
  {
    v230 = v33;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v34, (uint64_t)a2, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9);
    v33 = v230;
    if (hasExceptionsAfterHandlingTraps)
    {
      v35 = 0;
      goto LABEL_35;
    }
  }
  v35 = *(_QWORD *)(v31 + 8);
  v199 = v10[7];
  if ((v35 & 1) == 0)
  {
    if ((*(_BYTE *)(v35 + 16) & 0x10) == 0)
    {
      v212 = (char *)v199 + 64768;
      if (*((_QWORD *)v199 + 8096) != v35)
      {
        v213 = (uint64_t)v33;
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)v199 + 8096, (WTF::AtomStringImpl *)v35, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9);
        v215 = *(WTF::StringImpl **)(v31 + 8);
        if (v215)
        {
          if ((*((_BYTE *)v215 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v215 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v215, a3, v214, a6, a7, a8, a9, (WTF *)v255);
            v215 = v255[0];
          }
        }
        v33 = (JSC::Symbol *)v213;
        v212 = (char *)v199 + 64768;
        v216 = (WTF::StringImpl *)*((_QWORD *)v199 + 8097);
        *((_QWORD *)v199 + 8097) = v215;
        if (v216)
        {
          if (*(_DWORD *)v216 == 2)
          {
            WTF::StringImpl::~StringImpl(v216, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v213, a6, a7, a8, a9);
            WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
          }
          else
          {
            *(_DWORD *)v216 -= 2;
          }
          v33 = (JSC::Symbol *)v213;
          v212 = (char *)v199 + 64768;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v31 + 8) + 16) & 0x10) == 0)
      {
        v217 = v33;
        v218 = (WTF::StringImpl *)*((_QWORD *)v212 + 1);
        *(_DWORD *)v218 += 2;
        v255[0] = v218;
        __dmb(0xAu);
        v219 = *(WTF::StringImpl **)(v31 + 8);
        *(WTF::StringImpl **)(v31 + 8) = v255[0];
        v255[0] = v219;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads((uint64_t)v199 + 192, (unint64_t)v255);
        v221 = v255[0];
        v255[0] = 0;
        if (v221)
        {
          if (*(_DWORD *)v221 == 2)
          {
            WTF::StringImpl::~StringImpl(v221, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v220, a6, a7, a8, a9);
            WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
          }
          else
          {
            *(_DWORD *)v221 -= 2;
          }
        }
        v33 = v217;
        v212 = (char *)v199 + 64768;
      }
      v35 = *((_QWORD *)v212 + 1);
    }
LABEL_308:
    *(_DWORD *)v35 += 2;
    goto LABEL_35;
  }
  v76 = v33;
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v31, (JSC::JSGlobalObject *)v10);
  if (*((_DWORD *)v199 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v199, (uint64_t)a2, (uint64_t)a3, v211, a6, a7, a8, a9))
  {
LABEL_293:
    v35 = 0;
    v78 = v255[0];
    v255[0] = 0;
    v33 = v76;
    if (!v78)
      goto LABEL_35;
    goto LABEL_89;
  }
  v35 = (unint64_t)v255[0];
  v33 = v76;
  if (v255[0])
  {
    *(_DWORD *)v255[0] += 2;
    v255[0] = 0;
    v78 = (WTF::StringImpl *)v35;
LABEL_89:
    if (*(_DWORD *)v78 != 2)
    {
      *(_DWORD *)v78 -= 2;
      goto LABEL_35;
    }
    goto LABEL_313;
  }
LABEL_35:
  if (HIBYTE(word_1ECF4C620))
  {
    v183 = v33;
    JSC::doExceptionFuzzing((unint64_t)v10, &v262, "LLIntSlowPaths", v17);
    v33 = v183;
  }
  if (*(_QWORD *)(v11 + 16))
  {
    v126 = &xmmword_1ECF4C7C0;
    goto LABEL_179;
  }
  if (((unint64_t)v261 & 0xFFFE000000000002) != 0)
    v37 = 0;
  else
    v37 = 16 * (*(_DWORD *)v261 & 0xFFFFFFFE);
  v249 = (JSC::Structure *)v37;
  v255[0] = 0;
  v255[1] = (WTF::StringImpl *)v29;
  v256 = -1;
  v257 = v257 & 0xF8 | 1;
  v258 = 0;
  v259 = 1;
  v260 = 0;
  v38 = v10[7];
  v39 = (JSC::Structure *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE));
  v40 = v35 >> 4;
  if (v24 != 2)
  {
    if ((_DWORD)v40 && (v40 & ~*(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v51 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x58);
      if (v51
        || (v73 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v73 + 5) == 1 || *(_DWORD *)(v73 + 80) >= 2u)
        && (v74 = v33,
            JSC::Structure::materializePropertyTable(v39, v10[7], 1, v33, a6, a7, a8, a9),
            v33 = v74,
            (v51 = v75) != 0))
      {
        if (*(_DWORD *)(v51 + 24))
        {
          v52 = *(_QWORD *)(v51 + 16);
          v53 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v54 = *(unsigned int *)(v51 + 8);
          v55 = *(_DWORD *)(v35 + 16);
          if ((v52 & 1) != 0)
          {
            if ((v55 & 0x20) != 0)
              v55 = *(_DWORD *)(v35 + 32);
            v56 = *(_DWORD *)(v51 + 12);
            v57 = (v55 >> 8) & *(_QWORD *)&v56;
            v58 = *(unsigned __int8 *)(v53 + v57);
            if (*(_BYTE *)(v53 + v57))
            {
              v59 = v53 + v54;
              v60 = 1;
              while (v35 != (*(_QWORD *)(v59 + 8 * (v58 - 1)) & 0xFFFFFFFFFFFFLL))
              {
                v57 = ((_DWORD)v57 + v60) & v56;
                v58 = *(unsigned __int8 *)(v53 + v57);
                ++v60;
                if (!*(_BYTE *)(v53 + v57))
                  goto LABEL_220;
              }
              goto LABEL_101;
            }
          }
          else
          {
            if ((v55 & 0x20) != 0)
              v55 = *(_DWORD *)(v35 + 32);
            v86 = *(_DWORD *)(v51 + 12);
            v87 = v86 & (v55 >> 8);
            v88 = *(_DWORD *)(v53 + 4 * v87);
            if (v88)
            {
              v89 = v53 + 4 * v54;
              v90 = 1;
              while (1)
              {
                v91 = (v88 - 1);
                if (*(_QWORD *)(v89 + 16 * v91) == v35)
                  break;
                v87 = (v87 + v90) & v86;
                v88 = *(_DWORD *)(v53 + 4 * v87);
                ++v90;
                if (!v88)
                  goto LABEL_220;
              }
              if (*(_DWORD *)(v89 + 16 * v91 + 8) != -1)
                goto LABEL_101;
            }
          }
        }
      }
    }
LABEL_220:
    InvalidPrivateNameError = JSC::createInvalidPrivateNameError((JSC *)v10, (JSC::JSGlobalObject *)a2);
LABEL_221:
    v150 = (JSC::Exception *)InvalidPrivateNameError;
    if ((InvalidPrivateNameError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)InvalidPrivateNameError & 0xFFFFFFFE)
                                                              + 0x4C)))
    {
      v150 = (JSC::Exception *)JSC::Exception::create((uint64_t)v38, (JSC::VM *)InvalidPrivateNameError, 0, v80, v81, v82, v83, v84);
    }
    JSC::VM::throwException(v38, (JSC::JSGlobalObject *)v10, v150, v85, v80, v81, v82, v83, v84);
    goto LABEL_102;
  }
  if ((_DWORD)v40 && (v40 & ~*(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x20)) == 0)
  {
    v41 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x58);
    if (v41
      || (v64 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x40)) != 0
      && (*(_BYTE *)(v64 + 5) == 1 || *(_DWORD *)(v64 + 80) >= 2u)
      && (v65 = v33,
          JSC::Structure::materializePropertyTable(v39, v10[7], 1, v33, a6, a7, a8, a9),
          v33 = v65,
          (v41 = v66) != 0))
    {
      if (*(_DWORD *)(v41 + 24))
      {
        v42 = *(_QWORD *)(v41 + 16);
        v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
        v44 = *(unsigned int *)(v41 + 8);
        v45 = *(_DWORD *)(v35 + 16);
        if ((v42 & 1) != 0)
        {
          if ((v45 & 0x20) != 0)
            v45 = *(_DWORD *)(v35 + 32);
          v46 = *(_DWORD *)(v41 + 12);
          v47 = (v45 >> 8) & *(_QWORD *)&v46;
          v48 = *(unsigned __int8 *)(v43 + v47);
          if (*(_BYTE *)(v43 + v47))
          {
            v49 = v43 + v44;
            v50 = 1;
            while (v35 != (*(_QWORD *)(v49 + 8 * (v48 - 1)) & 0xFFFFFFFFFFFFLL))
            {
              v47 = ((_DWORD)v47 + v50) & v46;
              v48 = *(unsigned __int8 *)(v43 + v47);
              ++v50;
              if (!*(_BYTE *)(v43 + v47))
                goto LABEL_101;
            }
LABEL_92:
            InvalidPrivateNameError = JSC::createRedefinedPrivateNameError((JSC *)v10, (JSC::JSGlobalObject *)a2);
            goto LABEL_221;
          }
        }
        else
        {
          if ((v45 & 0x20) != 0)
            v45 = *(_DWORD *)(v35 + 32);
          v67 = *(_DWORD *)(v41 + 12);
          v68 = v67 & (v45 >> 8);
          v69 = *(_DWORD *)(v43 + 4 * v68);
          if (v69)
          {
            v70 = v43 + 4 * v44;
            v71 = 1;
            while (1)
            {
              v72 = (v69 - 1);
              if (*(_QWORD *)(v70 + 16 * v72) == v35)
                break;
              v68 = (v68 + v71) & v67;
              v69 = *(_DWORD *)(v43 + 4 * v68);
              ++v71;
              if (!v69)
                goto LABEL_101;
            }
            if (*(_DWORD *)(v70 + 16 * v72 + 8) != -1)
              goto LABEL_92;
          }
        }
      }
    }
  }
LABEL_101:
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v29, (uint64_t)v38, v35, (uint64_t)v33, 0, (uint64_t)v255, a8, a9, a4);
LABEL_102:
  v93 = v249;
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v10, &v262, "LLIntSlowPaths", v17);
    v93 = v249;
  }
  if (!*(_QWORD *)(v11 + 16))
  {
    v241 = v10;
    if (!(_BYTE)qword_1ECF4C789
      || (v94 = v261, ((unint64_t)v261 & 0xFFFE000000000002) != 0)
      || v259 != 1
      || v247
      || v258 - 3 < 0xFFFFFFFE
      || (*((_DWORD *)v93 + 4) & 3) == 2
      || (v95 = *((_WORD *)v93 + 6), (v95 & 8) != 0)
      || (v95 & 0x10) != 0 && (v95 & 0x20) == 0)
    {
LABEL_174:
      if (HIBYTE(word_1ECF4C620))
        JSC::doExceptionFuzzing((unint64_t)v241, &v262, "LLIntSlowPaths", v17);
      if (*((_QWORD *)v262 + 2))
        v126 = &xmmword_1ECF4C7C0;
      else
        v126 = (__int128 *)v17;
      goto LABEL_179;
    }
    v96 = (v245 + v244 + 7) & 0xFFFFFFFFFFFFFFF8;
    v97 = v96 + 24 * v243;
    v99 = (_DWORD *)(v97 + 8);
    v98 = *(_DWORD *)(v97 + 8);
    if (!v98)
    {
LABEL_114:
      *(_QWORD *)v97 = 0;
      *(_QWORD *)(v97 + 8) = 0;
      *(_DWORD *)(v97 + 16) = 0;
      v100 = *(_DWORD *)v94 & 0xFFFFFFFE;
      if ((*(_DWORD *)(16 * v100 + 0x10) & 3) == 2)
        goto LABEL_174;
      v101 = *(_WORD *)(16 * v100 + 0xC);
      if ((v101 & 8) != 0 || (v101 & 0x10) != 0 && (v101 & 0x20) == 0)
        goto LABEL_174;
      if (v94 != v255[0])
        goto LABEL_174;
      v102 = v96 + 24 * v243;
      if (v258 == 2)
      {
        v248 = (int *)(v102 + 12);
        v103 = (unsigned __int8 *)v252 + 16;
        v104 = __ldaxr((unsigned __int8 *)v252 + 16);
        v240 = v17;
        if (v104)
        {
          __clrex();
        }
        else if (!__stxr(1u, v103))
        {
          goto LABEL_122;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v103);
        v93 = v249;
LABEL_122:
        ++*(_DWORD *)(v11 + 916);
        if ((*(_BYTE *)(16 * v100 + 0x10) & 3) == 0)
        {
          v105 = *(_QWORD *)(16 * v100 + 0x40);
          if (v105)
          {
            v106 = *(_QWORD *)(16 * v100 + 0x40);
            if (*(_BYTE *)(v105 + 5) != 1)
            {
              v136 = *(_DWORD *)(v105 + 80);
              if (v136)
                v106 = 16 * (v136 & 0xFFFFFFFE);
              else
                v106 = 0;
            }
          }
          else
          {
            v106 = 0;
          }
          v107 = *(unsigned __int16 *)(v106 + 24);
          if (v107 == 65534)
            goto LABEL_129;
          if (v107 == 0xFFFF)
            v107 = *(_DWORD *)(*(_QWORD *)(v106 + 64) + 84);
          if (v107 < 64)
          {
LABEL_129:
            v108 = 0;
          }
          else if ((v107 - 63) >= 5)
          {
            v138 = (v107 - 64) | ((v107 - 64) >> 1) | (((v107 - 64) | ((v107 - 64) >> 1)) >> 2);
            v139 = v138 | (v138 >> 4) | ((v138 | (v138 >> 4)) >> 8);
            v108 = (v139 | HIWORD(v139)) + 1;
          }
          else
          {
            v108 = 4;
          }
          v109 = *(unsigned __int16 *)(16 * v100 + 0x18);
          if (v109 == 65534)
            goto LABEL_134;
          if (v109 == 0xFFFF)
            v109 = *(_DWORD *)(v105 + 84);
          if (v109 < 64)
          {
LABEL_134:
            v110 = 0;
          }
          else if ((v109 - 63) >= 5)
          {
            v140 = (v109 - 64) | ((v109 - 64) >> 1) | (((v109 - 64) | ((v109 - 64) >> 1)) >> 2);
            v141 = v140 | (v140 >> 4) | ((v140 | (v140 >> 4)) >> 8);
            v110 = (v141 | HIWORD(v141)) + 1;
          }
          else
          {
            v110 = 4;
          }
          if (v108 == v110)
          {
            if (v105 && *(_BYTE *)(v105 + 5) != 1)
            {
              v137 = *(_DWORD *)(v105 + 80);
              if (v137)
                v105 = 16 * (v137 & 0xFFFFFFFE);
              else
                v105 = 0;
            }
            if (v93 == (JSC::Structure *)v105)
            {
              v111 = 0;
              v112 = (_DWORD *)(v102 + 16);
              v113 = v241[7];
              for (i = -1; ; --i)
              {
                v115 = *(unsigned __int8 *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 9);
                if (v115 == 32 || v115 == 61)
                  break;
                v116 = *(JSC::JSObject **)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 0x30);
                v117 = v116 == 0;
                if (v115 < 0x17)
                {
                  if (v115 == 2)
                  {
                    v116 = v241[149];
                  }
                  else if (v115 == 3)
                  {
                    v116 = v241[151];
                  }
                  else
                  {
                    v116 = v241[152];
                  }
                  v93 = v249;
                }
                else if (!v116)
                {
                  v116 = (JSC::JSObject *)*((_QWORD *)v94 + 2);
                }
                v111 |= v117;
                if (v116 == (JSC::JSObject *)2)
                {
                  if (i && !v111)
                  {
                    *v99 = (unint64_t)v93 >> 4;
                    *v248 = v256;
                    *v112 = v100;
                    *(_QWORD *)v97 = v242;
                    if (v252 && v242)
                    {
                      if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)v252 + 7))
                        JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)v252);
                    }
                    else if (!v252)
                    {
                      break;
                    }
                    if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)v252 + 7))
                      JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)v252);
                  }
                  break;
                }
                v118 = *(_DWORD *)(16 * (*(_DWORD *)v116 & 0xFFFFFFFE) + 0x10);
                if ((v118 & 3) != 0)
                {
                  if ((v118 & 0x800000) != 0)
                    break;
                  v186 = v113;
                  v246 = v112;
                  JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)v116 & 0xFFFFFFFE), v113, v116, (uint64_t)v33, a6, a7, a8, a9);
                  v113 = v186;
                  v112 = v246;
                  v93 = v249;
                }
                v94 = v116;
              }
            }
          }
        }
        v123 = __ldxr(v103);
        if (v123 == 1)
        {
          v17 = v240;
          if (!__stlxr(0, v103))
          {
LABEL_169:
            v124 = *(_DWORD *)(v11 + 916) - 1;
            *(_DWORD *)(v11 + 916) = v124;
            if (*(unsigned __int8 *)(v11 + 1198) | HIBYTE(dword_1ECF4C5CE))
              v125 = v124 == 0;
            else
              v125 = 0;
            if (v125)
            {
              *(_BYTE *)(v11 + 1198) = 0;
              JSC::Heap::collectIfNecessaryOrDefer(v11 + 192, 0);
            }
            goto LABEL_174;
          }
        }
        else
        {
          __clrex();
          v17 = v240;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v103, 0, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9);
        goto LABEL_169;
      }
      if (v93 != (JSC::Structure *)(16 * v100))
      {
        __break(0xC471u);
        JUMPOUT(0x19883A80CLL);
      }
      JSC::Structure::firePropertyReplacementWatchpointSet(v93, (JSC::VM *)v11, (JSC::Structure *)v256, "Did cache property replacement", a6, a7, a8, a9);
      v119 = (unsigned __int8 *)v252 + 16;
      if (__ldaxr((unsigned __int8 *)v252 + 16))
      {
        __clrex();
        v121 = v242;
      }
      else
      {
        v121 = v242;
        if (!__stxr(1u, v119))
          goto LABEL_152;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v119);
LABEL_152:
      *v99 = v100;
      *(_DWORD *)(v102 + 12) = v256;
      *(_QWORD *)v97 = v121;
      if (v252 && v121 && *(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)v252 + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)v252);
      v122 = __ldxr(v119);
      if (v122 == 1)
      {
        if (!__stlxr(0, v119))
          goto LABEL_191;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v119, 0, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9);
LABEL_191:
      if (v252 && *(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)v252 + 7))
        JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)v252);
      goto LABEL_174;
    }
    v161 = 16 * (*(_DWORD *)v261 & 0xFFFFFFFE);
    if (v258 == 2)
    {
      v161 = *(_QWORD *)(16 * (*(_DWORD *)v261 & 0xFFFFFFFE) + 0x40);
      if (!v161)
        goto LABEL_114;
      if (*(_BYTE *)(v161 + 5) != 1)
      {
        v187 = *(_DWORD *)(v161 + 80);
        if (v187)
          v161 = 16 * (v187 & 0xFFFFFFFE);
        else
          v161 = 0;
      }
    }
    v162 = v98 & 0xFFFFFFFE;
    v163 = 16 * (v98 & 0xFFFFFFFE);
    if (v161 == v163)
      goto LABEL_114;
    if (!v162)
      goto LABEL_114;
    if (!v161)
      goto LABEL_114;
    if (*(_DWORD *)(v163 + 28) != *(_DWORD *)(v161 + 28))
      goto LABEL_114;
    v164 = *(_QWORD *)(v163 + 64);
    if (!v164 || *(_BYTE *)(v164 + 5) == 1)
      goto LABEL_114;
    v165 = v17;
    v166 = *(_QWORD *)(v161 + 64);
    if (v166)
    {
      if (*(_BYTE *)(v166 + 5) != 1)
      {
        v167 = *(_QWORD *)(v164 + 72);
        if (v167)
        {
          v93 = v249;
          if (v167 != *(_QWORD *)(v166 + 72))
            goto LABEL_114;
          v168 = *(_QWORD *)(v163 + 48);
          if (v168)
          {
            v169 = *(_QWORD *)(v161 + 48);
            if (v169)
            {
              v93 = v249;
              if (v168 == v169)
                goto LABEL_114;
              v170 = v169 != 2;
              v171 = v168 != 2;
              if (v168 != 2 && v169 != 2)
              {
                do
                {
                  v17 = v165;
                  v93 = v249;
                  if (*(_DWORD *)(16 * (*(_DWORD *)v168 & 0xFFFFFFFE) + 0x1C) != *(_DWORD *)(16
                                                                                              * (*(_DWORD *)v169 & 0xFFFFFFFE)
                                                                                              + 0x1C))
                    goto LABEL_114;
                  v172 = *(_QWORD *)(16 * (*(_DWORD *)v168 & 0xFFFFFFFE) + 0x30);
                  if (!v172)
                    v172 = *(_QWORD *)(v168 + 16);
                  v173 = *(_QWORD *)(16 * (*(_DWORD *)v169 & 0xFFFFFFFE) + 0x30);
                  if (!v173)
                    v173 = *(_QWORD *)(v169 + 16);
                  v171 = (v172 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                  v170 = (v173 & 0xFFFFFFFFFFFFFFFDLL) != 0;
                  v174 = (v172 & 0xFFFFFFFFFFFFFFFDLL) == 0 || (v173 & 0xFFFFFFFFFFFFFFFDLL) == 0;
                  v169 = v173;
                  v168 = v172;
                }
                while (!v174);
              }
              if (!v171)
              {
                v17 = v165;
                v93 = v249;
                if (!v170)
                {
                  v253 = &off_1E3583C90;
                  v254 = "Detected poly proto opportunity.";
                  JSC::InlineWatchpointSet::invalidate((uint64_t *)(v167 + 8), (JSC::VM *)v11, &v253, (uint64_t)v33, a6, a7, a8, a9, v92);
                  v175 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v161 + 64) + 72) + 8);
                  v253 = &off_1E3583C90;
                  v254 = "Detected poly proto opportunity.";
                  v17 = v165;
                  JSC::InlineWatchpointSet::invalidate(v175, (JSC::VM *)v11, &v253, v176, v177, v178, v179, v180, v181);
                  v93 = v249;
                  v94 = v261;
                }
                goto LABEL_114;
              }
              v17 = v165;
            }
          }
        }
      }
    }
    v93 = v249;
    goto LABEL_114;
  }
  v126 = &xmmword_1ECF4C7C0;
LABEL_179:
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)v33, a6, a7, a8, a9);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  return v126;
}

__int128 *llint_slow_path_set_private_brand(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  JSC::VM *v43;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(JSC::JSGlobalObject **)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v4 + 40) = a1;
  v43 = (JSC::VM *)v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x19883AF38);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v11 = *a2;
  if (v11 == 130)
  {
    v12 = *(_DWORD *)(a2 + 2);
    v14 = *(_DWORD *)(a2 + 6);
    v15 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v11 == 128)
    {
      v12 = *((__int16 *)a2 + 1);
      v13 = 1073741760;
      v14 = *((__int16 *)a2 + 2);
      if (v14 > 63)
        v14 += 1073741760;
      v15 = *((unsigned __int16 *)a2 + 3);
      if (v12 <= 63)
        goto LABEL_11;
    }
    else
    {
      v12 = (char)a2[1];
      v13 = 1073741808;
      v14 = (char)a2[2];
      if (v14 > 15)
        v14 += 1073741808;
      v15 = a2[3];
      if (v12 <= 15)
      {
LABEL_11:
        v16 = v15;
LABEL_12:
        v17 = (unsigned int **)(a1 + 8 * v12);
        goto LABEL_13;
      }
    }
    v12 += v13;
  }
  v16 = v15;
  if (v12 < 0x40000000)
    goto LABEL_12;
  v41 = v12 - 0x40000000;
  if (v41 >= *(_DWORD *)(v5 + 172))
    goto LABEL_57;
  v17 = (unsigned int **)(*(_QWORD *)(v5 + 160) + 8 * v41);
LABEL_13:
  v18 = *v17;
  if (v14 >= 0x40000000)
  {
    v40 = v14 - 0x40000000;
    if (v40 >= *(_DWORD *)(v5 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883AFC8);
    }
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v40);
  }
  else
  {
    v19 = (uint64_t *)(a1 + 8 * v14);
  }
  v20 = *v19;
  v21 = *(_QWORD *)(v2 + 136);
  v22 = *(unsigned __int16 *)(v21 + 10);
  if (!*(_WORD *)(v21 + 10))
    v22 = *(_DWORD *)(v21 + 116);
  v23 = *v18;
  JSC::JSObject::setPrivateBrand((unint64_t)v18, v3, *v19);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v3, &v43, "LLIntSlowPaths", v10);
  if (*(_QWORD *)(v4 + 16))
    return &xmmword_1ECF4C7C0;
  v42 = (unint64_t)v3;
  if (!(_BYTE)qword_1ECF4C789)
    goto LABEL_35;
  v30 = v23 & 0xFFFFFFFE;
  if ((*(_BYTE *)(16 * (v23 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    goto LABEL_35;
  v31 = (v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (_QWORD *)(v31 + 16 * v16);
  v33 = (unsigned __int8 *)(v2 + 16);
  if (__ldaxr((unsigned __int8 *)(v2 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v33))
  {
    goto LABEL_25;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v2 + 16);
LABEL_25:
  ++*(_DWORD *)(v4 + 916);
  v35 = *v18;
  *v32 = 0;
  v32[1] = 0;
  if ((*(_BYTE *)((16 * v35) | 0x10) & 3) == 0)
  {
    *(_DWORD *)v32 = v30;
    v36 = v31 + 16 * v16;
    *(_DWORD *)(v36 + 4) = v35 & 0xFFFFFFFE;
    *(_QWORD *)(v36 + 8) = v20;
    if (v20)
    {
      if (*(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(v2 + 7))
        JSC::Heap::writeBarrierSlowPath(v4 + 192, v2);
    }
  }
  if (*(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath(v4 + 192, v2);
  v37 = __ldxr(v33);
  if (v37 == 1)
  {
    if (!__stlxr(0, v33))
      goto LABEL_34;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v2 + 16), 0, v24, v25, v26, v27, v28, v29);
LABEL_34:
  v38 = *(_DWORD *)(v4 + 916) - 1;
  *(_DWORD *)(v4 + 916) = v38;
  if (*(unsigned __int8 *)(v4 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v38)
  {
    *(_BYTE *)(v4 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v4 + 192, 0);
  }
LABEL_35:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v42, &v43, "LLIntSlowPaths", v10);
  if (*((_QWORD *)v43 + 2))
    return &xmmword_1ECF4C7C0;
  return (__int128 *)v10;
}

__int128 *llint_slow_path_check_private_brand(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 **v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  int v34;
  int v35;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t PrivateMethodAccessError;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::Heap *v48;
  JSC *v49;
  unsigned __int8 *v50;
  JSC::VM *v51;

  v8 = *(_QWORD *)(a1 + 16);
  v49 = *(JSC **)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v9 + 40) = a1;
  v51 = (JSC::VM *)v9;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x19883B31CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v16 = *a2;
  if (v16 == 130)
  {
    v18 = *(_DWORD *)(a2 + 2);
    v19 = *(_DWORD *)(a2 + 6);
    v20 = *(_DWORD *)(a2 + 10);
  }
  else if (v16 == 128)
  {
    v40 = *((__int16 *)a2 + 1);
    v18 = v40 + 1073741760;
    if (v40 <= 63)
      v18 = *((__int16 *)a2 + 1);
    v19 = *((__int16 *)a2 + 2);
    if (v19 > 63)
      v19 += 1073741760;
    v20 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v17 = (char)a2[1];
    v18 = v17 + 1073741808;
    if (v17 <= 15)
      v18 = (char)a2[1];
    v19 = (char)a2[2];
    if (v19 > 15)
      v19 += 1073741808;
    v20 = a2[3];
  }
  v21 = *(_QWORD *)(v8 + 136);
  v22 = *(unsigned __int16 *)(v21 + 12);
  if (!*(_WORD *)(v21 + 12))
    v22 = *(_DWORD *)(v21 + 120);
  if (v18 >= 0x40000000)
  {
    v37 = v18 - 0x40000000;
    if (v37 >= *(_DWORD *)(v10 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883B3D4);
    }
    v23 = (unsigned __int8 **)(*(_QWORD *)(v10 + 160) + 8 * v37);
  }
  else
  {
    v23 = (unsigned __int8 **)(a1 + 8 * v18);
  }
  v24 = (unint64_t)*v23;
  v50 = *v23;
  if (v19 >= 0x40000000)
  {
    v38 = v19 - 0x40000000;
    if (v38 >= *(_DWORD *)(v10 + 172))
      goto LABEL_73;
    v25 = (uint64_t *)(*(_QWORD *)(v10 + 160) + 8 * v38);
  }
  else
  {
    v25 = (uint64_t *)(a1 + 8 * v19);
  }
  v26 = *v25;
  if ((v24 & 0xFFFE000000000002) != 0)
  {
    v39 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v50, v49, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_58;
  }
  if (*(unsigned __int8 *)(v24 + 5) <= 0x16u)
  {
    v39 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v24, (JSC::SymbolObject **)v49, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_58:
    v24 = v39;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v49, &v51, "LLIntSlowPaths", a2);
  if (*(_QWORD *)(v9 + 16))
    return &xmmword_1ECF4C7C0;
  v27 = (JSC::VM *)*((_QWORD *)v49 + 7);
  v28 = *(_DWORD *)v24 & 0xFFFFFFFE;
  v29 = 16 * v28;
  if ((*(_BYTE *)(16 * v28 + 0x13) & 1) != 0 && (_DWORD)v28)
  {
    while (*(_QWORD *)(v26 + 8) != 16 * *(unsigned int *)(v29 + 104))
    {
      v41 = *(_DWORD *)(v29 + 108) & 0xFFFFFFFE;
      v29 = 16 * v41;
      if (!(_DWORD)v41)
        goto LABEL_71;
    }
  }
  else
  {
LABEL_71:
    PrivateMethodAccessError = JSC::createPrivateMethodAccessError(v49, (JSC::JSGlobalObject *)a2);
    JSC::VM::throwException(v27, v49, PrivateMethodAccessError, v43, v44, v45, v46, v47);
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v49, &v51, "LLIntSlowPaths", a2);
  if (*(_QWORD *)(v9 + 16))
    return &xmmword_1ECF4C7C0;
  if ((_BYTE)qword_1ECF4C789)
  {
    v30 = (v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v31 = *(_DWORD *)v24 & 0xFFFFFFFE;
    v32 = (unsigned __int8 *)(v8 + 16);
    if (__ldaxr((unsigned __int8 *)(v8 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v32))
    {
      goto LABEL_34;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 16);
LABEL_34:
    v48 = (JSC::Heap *)(v9 + 192);
    ++*(_DWORD *)(v9 + 916);
    *(_DWORD *)(v30 + 16 * v20) = v31;
    *(_QWORD *)(v30 + 16 * v20 + 8) = v26;
    if (v8 && v26)
    {
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v8 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v48, v8);
    }
    else if (!v8)
    {
      goto LABEL_39;
    }
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v8 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v48, v8);
LABEL_39:
    v34 = __ldxr(v32);
    if (v34 == 1)
    {
      if (!__stlxr(0, v32))
        goto LABEL_44;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 16), 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_44:
    v35 = *(_DWORD *)(v9 + 916) - 1;
    *(_DWORD *)(v9 + 916) = v35;
    if (*(unsigned __int8 *)(v9 + 1198) | HIBYTE(dword_1ECF4C5CE) && !v35)
    {
      *(_BYTE *)(v9 + 1198) = 0;
      JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v48, 0);
    }
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v49, &v51, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v51 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

__int128 *llint_slow_path_del_by_val(uint64_t a1, unsigned __int8 *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 **v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  JSC::VM *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  const WTF::String *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  _DWORD *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  JSC::VM *v131;
  unsigned __int8 *v132;
  WTF::StringImpl *v133;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v131 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_140:
    __break(0xC471u);
    JUMPOUT(0x19883B754);
  }
  v16 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v21 = *(_DWORD *)(a2 + 2);
    v22 = *(_DWORD *)(a2 + 6);
    v24 = *(_DWORD *)(a2 + 10);
    v25 = a2[14];
  }
  else
  {
    if (v18 == 128)
    {
      v61 = *((__int16 *)a2 + 1);
      v20 = 1073741760;
      if (v61 <= 63)
        v21 = *((__int16 *)a2 + 1);
      else
        v21 = v61 + 1073741760;
      v22 = *((__int16 *)a2 + 2);
      v62 = *((__int16 *)a2 + 3);
      if (v62 <= 63)
        v24 = *((__int16 *)a2 + 3);
      else
        v24 = v62 + 1073741760;
      v25 = a2[8];
      if (v22 <= 63)
        goto LABEL_15;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = 1073741808;
      if (v19 <= 15)
        v21 = (char)a2[1];
      else
        v21 = v19 + 1073741808;
      v22 = (char)a2[2];
      v23 = (char)a2[3];
      if (v23 <= 15)
        v24 = (char)a2[3];
      else
        v24 = v23 + 1073741808;
      v25 = a2[4];
      if (v22 <= 15)
        goto LABEL_15;
    }
    v22 += v20;
  }
  if (v22 < 0x40000000)
  {
LABEL_15:
    v128 = v25;
    v129 = v21;
    v26 = (unsigned __int8 **)(a1 + 8 * v22);
    goto LABEL_16;
  }
  v63 = v22 - 0x40000000;
  if (v63 >= *(_DWORD *)(v11 + 172))
    goto LABEL_140;
  v128 = v25;
  v129 = v21;
  v26 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v63);
LABEL_16:
  v27 = (unint64_t)*v26;
  v130 = v27;
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    v52 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v130, v9, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(v27 + 5) > 0x16u)
      goto LABEL_18;
    v52 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v27, (JSC::SymbolObject **)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v27 = v52;
LABEL_18:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v131, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  if (v24 >= 0x40000000)
  {
    v38 = *(_QWORD *)(a1 + 16);
    if ((v24 - 0x40000000) >= *(_DWORD *)(v38 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883BB58);
    }
    v28 = (uint64_t *)(*(_QWORD *)(v38 + 160) + 8 * (v24 - 0x40000000));
  }
  else
  {
    v28 = (uint64_t *)(a1 + 8 * v24);
  }
  v29 = *v28;
  if ((unint64_t)*v28 >= 0xFFFE000000000000)
  {
    if ((v29 & 0x80000000) == 0)
      goto LABEL_44;
LABEL_25:
    if (HIBYTE(word_1ECF4C620))
    {
      JSC::doExceptionFuzzing((unint64_t)v9, &v131, "LLIntSlowPaths", v16);
      if (*((_QWORD *)v10 + 2))
        return &xmmword_1ECF4C7C0;
    }
    v30 = *((_QWORD *)v9 + 7);
    if ((v29 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v29 + 5) == 2)
      {
        v31 = *(_QWORD *)(v29 + 8);
        if ((v31 & 1) == 0)
        {
          if ((*(_BYTE *)(v31 + 16) & 0x10) == 0)
          {
            if (*(_QWORD *)(v30 + 64768) != v31)
            {
              WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v30 + 64768), *(WTF::AtomStringImpl **)(v29 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v47 = *(WTF::StringImpl **)(v29 + 8);
              if (v47)
              {
                if ((*((_BYTE *)v47 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v47 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v47, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v133);
                  v47 = v133;
                }
              }
              v48 = *(WTF::StringImpl **)(v30 + 64776);
              *(_QWORD *)(v30 + 64776) = v47;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                {
                  WTF::StringImpl::~StringImpl(v48, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                }
                else
                {
                  *(_DWORD *)v48 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
            {
              v49 = *(_DWORD **)(v30 + 64776);
              *v49 += 2;
              __dmb(0xAu);
              v50 = *(WTF::StringImpl **)(v29 + 8);
              *(_QWORD *)(v29 + 8) = v49;
              v133 = v50;
              JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v30 + 192, (unint64_t)&v133);
              v51 = v133;
              v133 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                {
                  WTF::StringImpl::~StringImpl(v51, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
                }
                else
                {
                  *(_DWORD *)v51 -= 2;
                }
              }
            }
            v31 = *(_QWORD *)(v30 + 64776);
          }
          goto LABEL_30;
        }
LABEL_115:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v29, v9);
        if (*(_DWORD *)(v30 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          v31 = 0;
          v102 = v133;
          v133 = 0;
          if (!v102)
            goto LABEL_32;
        }
        else
        {
          v31 = (uint64_t)v133;
          if (!v133)
            goto LABEL_32;
          *(_DWORD *)v133 += 2;
          v133 = 0;
          v102 = (WTF::StringImpl *)v31;
        }
        if (*(_DWORD *)v102 != 2)
        {
          *(_DWORD *)v102 -= 2;
          goto LABEL_32;
        }
LABEL_123:
        WTF::StringImpl::~StringImpl(v102, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        goto LABEL_32;
      }
      v29 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v9, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    }
    v132 = (unsigned __int8 *)v29;
    if (*(_DWORD *)(v30 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v30 + 41952) + 8);
        if (v31)
        {
LABEL_30:
          v32 = *(_DWORD *)v31 + 2;
LABEL_31:
          *(_DWORD *)v31 = v32;
        }
LABEL_32:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v9, &v131, "LLIntSlowPaths", v16);
        v33 = *((_QWORD *)v10 + 2);
        if (v33)
        {
          v34 = 0;
          v16 = &xmmword_1ECF4C7C0;
        }
        else
        {
          v34 = JSC::JSCell::deleteProperty(v27, (uint64_t)v9, v31, a4, a5, a6, a7, a8);
        }
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
        if (v33)
          return &xmmword_1ECF4C7C0;
        goto LABEL_45;
      }
      v29 = (uint64_t)v132;
    }
    if ((v29 & 0xFFFE000000000002) == 0)
    {
      v96 = *(unsigned __int8 *)(v29 + 5);
      if (v96 == 2)
        goto LABEL_102;
      if (v96 == 4)
      {
        v31 = *(_QWORD *)(v29 + 8);
        v103 = *(_DWORD *)v31;
        *(_DWORD *)v31 += 4;
        v32 = v103 + 2;
        if (v32)
          goto LABEL_31;
        v102 = (WTF::StringImpl *)v31;
        goto LABEL_123;
      }
    }
    v29 = (uint64_t)JSC::JSValue::toStringSlowCase(&v132, (uint64_t)v9, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_102:
    if (*(_DWORD *)(v30 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v31 = 0;
      goto LABEL_32;
    }
    v31 = *(_QWORD *)(v29 + 8);
    v30 = *((_QWORD *)v9 + 7);
    if ((v31 & 1) == 0)
    {
      if ((*(_BYTE *)(v31 + 16) & 0x10) == 0)
      {
        if (*(_QWORD *)(v30 + 64768) != v31)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v30 + 64768), *(WTF::AtomStringImpl **)(v29 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v97 = *(WTF::StringImpl **)(v29 + 8);
          if (v97)
          {
            if ((*((_BYTE *)v97 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v97 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v97, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v133);
              v97 = v133;
            }
          }
          v98 = *(WTF::StringImpl **)(v30 + 64776);
          *(_QWORD *)(v30 + 64776) = v97;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
            {
              WTF::StringImpl::~StringImpl(v98, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
            }
            else
            {
              *(_DWORD *)v98 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v29 + 8) + 16) & 0x10) == 0)
        {
          v99 = *(_DWORD **)(v30 + 64776);
          *v99 += 2;
          __dmb(0xAu);
          v100 = *(WTF::StringImpl **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = v99;
          v133 = v100;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v30 + 192, (unint64_t)&v133);
          v101 = v133;
          v133 = 0;
          if (v101)
          {
            if (*(_DWORD *)v101 == 2)
            {
              WTF::StringImpl::~StringImpl(v101, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
            }
            else
            {
              *(_DWORD *)v101 -= 2;
            }
          }
        }
        v31 = *(_QWORD *)(v30 + 64776);
      }
      goto LABEL_30;
    }
    goto LABEL_115;
  }
  if ((unint64_t)(v29 - 0x2000000000000) > 0xFFFBFFFFFFFFFFFFLL
    || COERCE_DOUBLE(v29 - 0x2000000000000) != (double)COERCE_DOUBLE(v29 - 0x2000000000000))
  {
    goto LABEL_25;
  }
  v29 = COERCE_DOUBLE(v29 - 0x2000000000000);
LABEL_44:
  v34 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x60))(v27, v9, v29);
LABEL_45:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v131, "LLIntSlowPaths", v16);
  v36 = v131;
  if (*((_QWORD *)v131 + 2))
    return &xmmword_1ECF4C7C0;
  if ((v34 & 1) != 0)
  {
    v37 = 7;
  }
  else
  {
    if (!v128)
    {
      v64 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v64 = 0x1A00000002;
      *(_QWORD *)(v64 + 8) = "Unable to delete property.";
      *(_DWORD *)(v64 + 16) = 4;
      v133 = (WTF::StringImpl *)v64;
      v66 = JSC::createTypeError((unint64_t)v9, &v133, v65);
      JSC::VM::throwException(v36, v9, v66, v67, v68, v69, v70, v71);
      v79 = v133;
      v133 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, v72, v73, v74, v75, v76, v77, v78);
          WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
        }
        else
        {
          *(_DWORD *)v79 -= 2;
        }
      }
      return &xmmword_1ECF4C7C0;
    }
    v37 = 6;
  }
  if (!HIBYTE(word_1ECF4C620)
    || (JSC::doExceptionFuzzing((unint64_t)v9, &v131, "LLIntSlowPaths", v16), !*((_QWORD *)v131 + 2)))
  {
    *(_QWORD *)(a1 + 8 * v129) = v37;
    return v16;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_in_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  _DWORD *v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  double v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::VM *v58;
  uint64_t v59;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v58 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x19883BE14);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = *((unsigned __int16 *)a2 + 3);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_37:
    v48 = v21 + v20;
    goto LABEL_38;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    v22 = a2[3];
    if (v21 <= 15)
    {
LABEL_11:
      v23 = v21;
      v24 = v19;
LABEL_12:
      v25 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_37;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v48 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_38:
  v23 = v48;
  v24 = v19;
  if (v48 < 0x40000000)
    goto LABEL_12;
  v49 = (v48 - 0x40000000);
  if (v49 >= *(unsigned int *)(v11 + 172))
    goto LABEL_46;
  v25 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v49);
LABEL_13:
  v26 = *v25;
  if ((*v25 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v26 + 5) > 0x16u)
  {
    v27 = *(unsigned int **)(*(_QWORD *)(v8 + 56) + 104);
    if (v27)
    {
      v28 = *v27;
      if (*v27 > v22)
      {
        v29 = &v27[2 * v22];
LABEL_18:
        if (JSC::JSObject::hasProperty(v26, (uint64_t)v9, *((_QWORD *)v29 + 1), a4, a5, a6, a7, a8))
          v30 = 7;
        else
          v30 = 6;
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v9, &v58, "LLIntSlowPaths", v16);
        if (*((_QWORD *)v10 + 2))
          return &xmmword_1ECF4C7C0;
        *(_QWORD *)(a1 + 8 * v24) = v30;
        return (__int128 *)v16;
      }
    }
    else
    {
      v28 = 0;
    }
    v32 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 72))(*(_QWORD *)(v8 + 120)) + 48);
    if (*v32 <= v22 - v28)
    {
      __break(0xC471u);
      JUMPOUT(0x19883BE74);
    }
    v29 = &v32[2 * (v22 - v28)];
    goto LABEL_18;
  }
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  v34.i64[0] = 0x1100000002;
  *(_QWORD *)v33 = 0x1100000002;
  *(_QWORD *)(v33 + 8) = "is not an Object.";
  *(_DWORD *)(v33 + 16) = 4;
  v59 = v33;
  v46 = JSC::createError((unint64_t)v9, v26, &v59, (uint64_t)JSC::invalidParameterInSourceAppender, v35, v36, v37, v38, v34);
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  if ((v46 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C)))
  {
    v46 = JSC::Exception::create((uint64_t)v10, (JSC::VM *)v46, 0, v41, v42, v43, v44, v45);
  }
  JSC::VM::throwException(v10, v9, (JSC::Exception *)v46, v47, v41, v42, v43, v44, v45);
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_in_by_val(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  JSC::VM *v37;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = (JSC::JSGlobalObject *)v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v37 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x19883C048);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v22 = *(_DWORD *)(a2 + 6);
    v24 = *(_DWORD *)(a2 + 10);
    v25 = *(_DWORD *)(a2 + 14);
  }
  else if (v18 == 128)
  {
    v34 = *((__int16 *)a2 + 1);
    if (v34 <= 63)
      v20 = *((__int16 *)a2 + 1);
    else
      v20 = v34 + 1073741760;
    v35 = *((__int16 *)a2 + 2);
    v22 = v35 + 1073741760;
    if (v35 <= 63)
      v22 = *((__int16 *)a2 + 2);
    v36 = *((__int16 *)a2 + 3);
    v24 = v36 + 1073741760;
    if (v36 <= 63)
      v24 = *((__int16 *)a2 + 3);
    v25 = *((unsigned __int16 *)a2 + 4);
  }
  else
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
      v20 = (char)a2[1];
    else
      v20 = v19 + 1073741808;
    v21 = (char)a2[2];
    v22 = v21 + 1073741808;
    if (v21 <= 15)
      v22 = (char)a2[2];
    v23 = (char)a2[3];
    v24 = v23 + 1073741808;
    if (v23 <= 15)
      v24 = (char)a2[3];
    v25 = a2[4];
  }
  v26 = v8[17];
  v27 = *(unsigned __int16 *)(v26 + 74);
  if (!*(_WORD *)(v26 + 74))
    v27 = *(_DWORD *)(v26 + 244);
  if (v22 >= 0x40000000)
  {
    v32 = v22 - 0x40000000;
    if (v32 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883C0C8);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v32);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v22);
  }
  if (v24 >= 0x40000000)
  {
    v33 = v24 - 0x40000000;
    if (v33 >= *(_DWORD *)(v11 + 172))
      goto LABEL_45;
    v29 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v33);
  }
  else
  {
    v29 = (unint64_t *)(a1 + 8 * v24);
  }
  if (JSC::CommonSlowPaths::opInByVal(v9, *v28, *v29, (const JSC::PropertyTable *)(((v26 + v27 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v25), a5, a6, a7, a8))
  {
    v30 = 7;
  }
  else
  {
    v30 = 6;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v37, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v20) = v30;
  return (__int128 *)v16;
}

__int128 *llint_slow_path_has_private_name(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t Error;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  _DWORD *v87;
  WTF::StringImpl *v88;
  _QWORD *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl **v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  _DWORD *v124;
  WTF::StringImpl *v125;
  _QWORD *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  WTF::StringImpl **v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::VM *v166;
  unsigned __int8 *v167;
  WTF::StringImpl *v168;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v166 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_159:
    __break(0xC471u);
    JUMPOUT(0x19883C5E8);
  }
  v16 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v22 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v23 = *((__int16 *)a2 + 2);
    v21 = *((__int16 *)a2 + 3);
    if (v21 > 63)
      v21 += 1073741760;
    if (v23 <= 63)
      goto LABEL_23;
  }
  else
  {
    if (v18 == 130)
    {
      v19 = *(_DWORD *)(a2 + 2);
      v20 = *(_DWORD *)(a2 + 6);
      v21 = *(_DWORD *)(a2 + 10);
      goto LABEL_15;
    }
    v19 = (char)a2[1];
    v22 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v23 = (char)a2[2];
    v21 = (char)a2[3];
    if (v21 > 15)
      v21 += 1073741808;
    if (v23 <= 15)
    {
LABEL_23:
      v24 = v19;
      v25 = v21;
      goto LABEL_24;
    }
  }
  v20 = v23 + v22;
LABEL_15:
  v23 = v20;
  v24 = v19;
  v25 = v21;
  if (v20 < 0x40000000)
  {
LABEL_24:
    v27 = (unint64_t *)(a1 + 8 * v23);
    goto LABEL_25;
  }
  v26 = (v20 - 0x40000000);
  if (v26 >= *(unsigned int *)(v11 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x19883C98CLL);
  }
  v27 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v26);
LABEL_25:
  v28 = *v27;
  if ((*v27 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v28 + 5) > 0x16u)
  {
    if (v25 >= 0x40000000)
    {
      v68 = (v25 - 0x40000000);
      if (v68 >= *(unsigned int *)(v11 + 172))
        goto LABEL_159;
      v29 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v68);
    }
    else
    {
      v29 = (uint64_t *)(a1 + 8 * v25);
    }
    v30 = *v29;
    v31 = *((_QWORD *)v9 + 7);
    if ((*v29 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v30 + 5) == 2)
      {
        v32 = *(WTF::StringImpl **)(v30 + 8);
        if ((v32 & 1) == 0)
        {
          if ((*((_BYTE *)v32 + 16) & 0x10) == 0)
          {
            v84 = *(WTF::StringImpl **)(v31 + 64768);
            if (v84 != v32)
            {
              *(_DWORD *)v32 += 2;
              *(_QWORD *)(v31 + 64768) = v32;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                {
                  WTF::StringImpl::~StringImpl(v84, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                }
                else
                {
                  *(_DWORD *)v84 -= 2;
                }
              }
              v85 = *(WTF::StringImpl **)(v30 + 8);
              if (v85)
              {
                if ((*((_BYTE *)v85 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v85 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v85, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v168);
                  v85 = v168;
                }
              }
              v86 = *(WTF::StringImpl **)(v31 + 64776);
              *(_QWORD *)(v31 + 64776) = v85;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                {
                  WTF::StringImpl::~StringImpl(v86, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
                }
                else
                {
                  *(_DWORD *)v86 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v30 + 8) + 16) & 0x10) == 0)
            {
              v87 = *(_DWORD **)(v31 + 64776);
              *v87 += 2;
              __dmb(0xAu);
              v88 = *(WTF::StringImpl **)(v30 + 8);
              *(_QWORD *)(v30 + 8) = v87;
              v168 = v88;
              v89 = (_QWORD *)(v31 + 808);
              v90 = *(unsigned int *)(v31 + 820);
              if ((_DWORD)v90 == *(_DWORD *)(v31 + 816))
              {
                v92 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v168);
                v90 = *(unsigned int *)(v31 + 820);
                v91 = (WTF::StringImpl **)(*(_QWORD *)(v31 + 808) + 8 * v90);
                v88 = *v92;
              }
              else
              {
                v91 = (WTF::StringImpl **)(*v89 + 8 * v90);
                v92 = &v168;
              }
              *v92 = 0;
              *v91 = v88;
              *(_DWORD *)(v31 + 820) = v90 + 1;
              v93 = v168;
              v168 = 0;
              if (v93)
              {
                if (*(_DWORD *)v93 == 2)
                {
                  WTF::StringImpl::~StringImpl(v93, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
                }
                else
                {
                  *(_DWORD *)v93 -= 2;
                }
              }
            }
            v32 = *(WTF::StringImpl **)(v31 + 64776);
          }
          goto LABEL_33;
        }
LABEL_126:
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v30, v9);
        if (!*(_DWORD *)(v31 + 80))
          goto LABEL_127;
        v149 = *(_DWORD *)(v31 + 80);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v31 + 16))
        {
          v32 = 0;
          v120 = v168;
          v168 = 0;
          if (!v120)
            goto LABEL_35;
        }
        else
        {
LABEL_127:
          v32 = v168;
          if (!v168)
            goto LABEL_35;
          *(_DWORD *)v168 += 2;
          v168 = 0;
          v120 = v32;
        }
        if (*(_DWORD *)v120 != 2)
        {
          *(_DWORD *)v120 -= 2;
          goto LABEL_35;
        }
LABEL_131:
        WTF::StringImpl::~StringImpl(v120, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        goto LABEL_35;
      }
      v30 = JSC::JSCell::toPrimitive(v30, (JSC::VM **)v9, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    }
    v167 = (unsigned __int8 *)v30;
    if (*(_DWORD *)(v31 + 80))
    {
      v147 = *(_DWORD *)(v31 + 80);
      if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v31 + 16))
      {
        v32 = *(WTF::StringImpl **)(*(_QWORD *)(v31 + 41952) + 8);
        if (v32)
        {
LABEL_33:
          v33 = *(_DWORD *)v32 + 2;
LABEL_34:
          *(_DWORD *)v32 = v33;
        }
LABEL_35:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v9, &v166, "LLIntSlowPaths", v16);
        if (*((_QWORD *)v10 + 2))
          goto LABEL_92;
        if (((unint64_t)v32 >> 4)
          && (((unint64_t)v32 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x20)) == 0)
        {
          v34 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x58);
          if (v34
            || (v35 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x40)) != 0
            && ((a2 = (unsigned __int8 *)*((_QWORD *)v9 + 7), *(_BYTE *)(v35 + 5) == 1) || *(_DWORD *)(v35 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE)), (JSC::VM *)a2, 1, a4, a5, a6, a7, a8), v34))
          {
            if (*(_DWORD *)(v34 + 24))
            {
              v36 = *(_QWORD *)(v34 + 16);
              v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
              v38 = *(unsigned int *)(v34 + 8);
              v39 = *((_DWORD *)v32 + 4);
              if ((v36 & 1) != 0)
              {
                if ((v39 & 0x20) != 0)
                  v39 = *((_DWORD *)v32 + 8);
                v40 = *(_DWORD *)(v34 + 12);
                v41 = (v39 >> 8) & *(_QWORD *)&v40;
                v42 = *(unsigned __int8 *)(v37 + v41);
                if (*(_BYTE *)(v37 + v41))
                {
                  v43 = v37 + v38;
                  v44 = 1;
                  v45 = 6;
                  while (v32 != (WTF::StringImpl *)(*(_QWORD *)(v43 + 8 * (v42 - 1)) & 0xFFFFFFFFFFFFLL))
                  {
                    v41 = ((_DWORD)v41 + v44) & v40;
                    v42 = *(unsigned __int8 *)(v37 + v41);
                    ++v44;
                    if (!*(_BYTE *)(v37 + v41))
                      goto LABEL_70;
                  }
LABEL_67:
                  v45 = 7;
                  goto LABEL_70;
                }
              }
              else
              {
                if ((v39 & 0x20) != 0)
                  v39 = *((_DWORD *)v32 + 8);
                v69 = *(_DWORD *)(v34 + 12);
                v70 = v69 & (v39 >> 8);
                v71 = *(_DWORD *)(v37 + 4 * v70);
                if (v71)
                {
                  v72 = v37 + 4 * v38;
                  v73 = 1;
                  v45 = 6;
                  while (1)
                  {
                    v74 = (v71 - 1);
                    if (*(WTF::StringImpl **)(v72 + 16 * v74) == v32)
                      break;
                    v70 = (v70 + v73) & v69;
                    v71 = *(_DWORD *)(v37 + 4 * v70);
                    ++v73;
                    if (!v71)
                      goto LABEL_70;
                  }
                  if (*(_DWORD *)(v72 + 16 * v74 + 8) != -1)
                    goto LABEL_67;
                }
              }
            }
          }
        }
        v45 = 6;
LABEL_70:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v9, &v166, "LLIntSlowPaths", v16);
        if (!*((_QWORD *)v10 + 2))
        {
          *(_QWORD *)(a1 + 8 * v24) = v45;
          if (!v32)
            return v16;
          goto LABEL_74;
        }
LABEL_92:
        v16 = &xmmword_1ECF4C7C0;
        if (!v32)
          return v16;
LABEL_74:
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v32 -= 2;
        }
        return v16;
      }
    }
    if ((v30 & 0xFFFE000000000002) == 0)
    {
      v118 = *(unsigned __int8 *)(v30 + 5);
      if (v118 == 2)
        goto LABEL_110;
      if (v118 == 4)
      {
        v32 = *(WTF::StringImpl **)(v30 + 8);
        v119 = *(_DWORD *)v32;
        *(_DWORD *)v32 += 4;
        v33 = v119 + 2;
        if (v33)
          goto LABEL_34;
        v120 = v32;
        goto LABEL_131;
      }
    }
    v30 = (uint64_t)JSC::JSValue::toStringSlowCase(&v167, (uint64_t)v9, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_110:
    if (*(_DWORD *)(v31 + 80))
    {
      v148 = *(_DWORD *)(v31 + 80);
      if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v31 + 16))
      {
        v32 = 0;
        goto LABEL_35;
      }
    }
    v32 = *(WTF::StringImpl **)(v30 + 8);
    v31 = *((_QWORD *)v9 + 7);
    if ((v32 & 1) == 0)
    {
      if ((*((_BYTE *)v32 + 16) & 0x10) == 0)
      {
        v121 = *(WTF::StringImpl **)(v31 + 64768);
        if (v121 != v32)
        {
          *(_DWORD *)v32 += 2;
          *(_QWORD *)(v31 + 64768) = v32;
          if (v121)
          {
            if (*(_DWORD *)v121 == 2)
            {
              WTF::StringImpl::~StringImpl(v121, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
            }
            else
            {
              *(_DWORD *)v121 -= 2;
            }
          }
          v122 = *(WTF::StringImpl **)(v30 + 8);
          if (v122)
          {
            if ((*((_BYTE *)v122 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v122 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v122, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v168);
              v122 = v168;
            }
          }
          v123 = *(WTF::StringImpl **)(v31 + 64776);
          *(_QWORD *)(v31 + 64776) = v122;
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
            {
              WTF::StringImpl::~StringImpl(v123, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
            }
            else
            {
              *(_DWORD *)v123 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v30 + 8) + 16) & 0x10) == 0)
        {
          v124 = *(_DWORD **)(v31 + 64776);
          *v124 += 2;
          __dmb(0xAu);
          v125 = *(WTF::StringImpl **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = v124;
          v168 = v125;
          v126 = (_QWORD *)(v31 + 808);
          v127 = *(unsigned int *)(v31 + 820);
          if ((_DWORD)v127 == *(_DWORD *)(v31 + 816))
          {
            v129 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v126, v127 + 1, (unint64_t)&v168);
            v127 = *(unsigned int *)(v31 + 820);
            v128 = (WTF::StringImpl **)(*(_QWORD *)(v31 + 808) + 8 * v127);
            v125 = *v129;
          }
          else
          {
            v128 = (WTF::StringImpl **)(*v126 + 8 * v127);
            v129 = &v168;
          }
          *v129 = 0;
          *v128 = v125;
          *(_DWORD *)(v31 + 820) = v127 + 1;
          v130 = v168;
          v168 = 0;
          if (v130)
          {
            if (*(_DWORD *)v130 == 2)
            {
              WTF::StringImpl::~StringImpl(v130, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
            }
            else
            {
              *(_DWORD *)v130 -= 2;
            }
          }
        }
        v32 = *(WTF::StringImpl **)(v31 + 64776);
      }
      goto LABEL_33;
    }
    goto LABEL_126;
  }
  v46 = WTF::fastCompactMalloc((WTF *)0x20);
  v47.i64[0] = 0x1100000002;
  *(_QWORD *)v46 = 0x1100000002;
  *(_QWORD *)(v46 + 8) = "is not an Object.";
  *(_DWORD *)(v46 + 16) = 4;
  v168 = (WTF::StringImpl *)v46;
  Error = JSC::createError((unint64_t)v9, v28, (uint64_t *)&v168, (uint64_t)JSC::invalidParameterInSourceAppender, v48, v49, v50, v51, v47);
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  JSC::VM::throwException(v10, v9, Error, v54, v55, v56, v57, v58);
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_has_private_brand(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  JSC::JSGlobalObject *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  JSC::VM *v53;
  uint64_t v54;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(JSC::JSGlobalObject **)(v2 + 8);
  v4 = *(JSC::VM **)(v2 + 72);
  *((_QWORD *)v4 + 5) = a1;
  v53 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
  v7 = *(_QWORD *)v6;
  v8 = *(unsigned int *)(v6 + 12) + *(_QWORD *)v6;
  if (v7 > (unint64_t)a2 || v8 <= (unint64_t)a2)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x19883CC68);
  }
  v10 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v7) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v16 = 1073741760;
    if (v13 > 63)
      v13 += 1073741760;
    v17 = *((__int16 *)a2 + 2);
    v15 = *((__int16 *)a2 + 3);
    if (v15 > 63)
      v15 += 1073741760;
    if (v17 <= 63)
      goto LABEL_23;
  }
  else
  {
    if (v12 == 130)
    {
      v13 = *(_DWORD *)(a2 + 2);
      v14 = *(_DWORD *)(a2 + 6);
      v15 = *(_DWORD *)(a2 + 10);
      goto LABEL_15;
    }
    v13 = (char)a2[1];
    v16 = 1073741808;
    if (v13 > 15)
      v13 += 1073741808;
    v17 = (char)a2[2];
    v15 = (char)a2[3];
    if (v15 > 15)
      v15 += 1073741808;
    if (v17 <= 15)
    {
LABEL_23:
      v18 = v13;
      v19 = v15;
      goto LABEL_24;
    }
  }
  v14 = v17 + v16;
LABEL_15:
  v17 = v14;
  v18 = v13;
  v19 = v15;
  if (v14 < 0x40000000)
  {
LABEL_24:
    v21 = (unint64_t *)(a1 + 8 * v17);
    goto LABEL_25;
  }
  v20 = (v14 - 0x40000000);
  if (v20 >= *(unsigned int *)(v5 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x19883CC98);
  }
  v21 = (unint64_t *)(*(_QWORD *)(v5 + 160) + 8 * v20);
LABEL_25:
  v22 = *v21;
  if ((*v21 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v22 + 5) <= 0x16u)
  {
    v27 = WTF::fastCompactMalloc((WTF *)0x20);
    v28.i64[0] = 0x1100000002;
    *(_QWORD *)v27 = 0x1100000002;
    *(_QWORD *)(v27 + 8) = "is not an Object.";
    *(_DWORD *)(v27 + 16) = 4;
    v54 = v27;
    v40 = JSC::createError((unint64_t)v3, v22, &v54, (uint64_t)JSC::invalidParameterInSourceAppender, v29, v30, v31, v32, v28);
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    JSC::VM::throwException(v4, v3, v40, v35, v36, v37, v38, v39);
    return &xmmword_1ECF4C7C0;
  }
  else
  {
    if (v19 >= 0x40000000)
    {
      v52 = (v19 - 0x40000000);
      if (v52 >= *(unsigned int *)(v5 + 172))
        goto LABEL_50;
      v23 = *(_QWORD *)(v5 + 160) + 8 * v52;
    }
    else
    {
      v23 = a1 + 8 * v19;
    }
    v24 = *(_DWORD *)v22 & 0xFFFFFFFE;
    v25 = 16 * v24;
    if ((*(_BYTE *)(16 * v24 + 0x13) & 1) != 0 && (_DWORD)v24)
    {
      v41 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      v26 = 6;
      while (v41 != 16 * *(unsigned int *)(v25 + 104))
      {
        v42 = *(_DWORD *)(v25 + 108) & 0xFFFFFFFE;
        v25 = 16 * v42;
        if (!(_DWORD)v42)
          goto LABEL_40;
      }
      v26 = 7;
    }
    else
    {
      v26 = 6;
    }
LABEL_40:
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v3, &v53, "LLIntSlowPaths", a2);
    if (*((_QWORD *)v4 + 2))
      return &xmmword_1ECF4C7C0;
    else
      *(_QWORD *)(a1 + 8 * v18) = v26;
  }
  return (__int128 *)v10;
}

__int128 *llint_slow_path_has_structure_with_flags(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int **v18;
  uint64_t v19;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  JSC::VM *v26;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(JSC::VM **)(v3 + 72);
  *((_QWORD *)v5 + 5) = a1;
  v26 = v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
  if (v8 > (unint64_t)a2 || v9 <= (unint64_t)a2)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x19883CE0CLL);
  }
  v11 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v8) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 130)
  {
    v13 = *(_DWORD *)(a2 + 2);
    v14 = *(_DWORD *)(a2 + 6);
    v15 = *(_DWORD *)(a2 + 10);
    goto LABEL_8;
  }
  if (v12 != 128)
  {
    v25 = (char)a2[1];
    v23 = 1073741808;
    v13 = v25 + 1073741808;
    if (v25 <= 15)
      v13 = (char)a2[1];
    v24 = (char)a2[2];
    v15 = a2[3];
    if (v24 > 15)
      goto LABEL_24;
LABEL_29:
    v16 = v24;
    v17 = v13;
    goto LABEL_9;
  }
  v22 = *((__int16 *)a2 + 1);
  v23 = 1073741760;
  v13 = v22 + 1073741760;
  if (v22 <= 63)
    v13 = *((__int16 *)a2 + 1);
  v24 = *((__int16 *)a2 + 2);
  v15 = *((unsigned __int16 *)a2 + 3);
  if (v24 <= 63)
    goto LABEL_29;
LABEL_24:
  v14 = v24 + v23;
LABEL_8:
  v16 = v14;
  v17 = v13;
  if (v14 < 0x40000000)
  {
LABEL_9:
    v18 = (unsigned int **)(a1 + 8 * v16);
    goto LABEL_10;
  }
  v21 = (v14 - 0x40000000);
  if (v21 >= *(unsigned int *)(v6 + 172))
    goto LABEL_30;
  v18 = (unsigned int **)(*(_QWORD *)(v6 + 160) + 8 * v21);
LABEL_10:
  if ((*(_DWORD *)((16 * **v18) | 0x10) & v15) != 0)
    v19 = 7;
  else
    v19 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v4, &v26, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v5 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v17) = v19;
  return (__int128 *)v11;
}

__int128 *llint_slow_path_put_getter_by_id(uint64_t a1, unsigned __int8 *a2, __n128 a3, int32x2_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::VM *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  JSC::JSObject *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unint64_t v30;
  int8x8_t v31;
  int32x2_t v32;
  _DWORD *v34;
  JSC::VM *v35;
  _QWORD v36[4];

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(JSC::JSGlobalObject **)(v10 + 8);
  v12 = *(JSC::VM **)(v10 + 72);
  *((_QWORD *)v12 + 5) = a1;
  v35 = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x19883D078);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
    v23 = *(_DWORD *)(a2 + 14);
  }
  else
  {
    if (v18 == 128)
    {
      v19 = *((__int16 *)a2 + 1);
      if (v19 > 63)
        v19 += 1073741760;
      v20 = *((unsigned __int16 *)a2 + 2);
      LOWORD(v21) = *((_WORD *)a2 + 3);
      v22 = *((__int16 *)a2 + 4);
      v23 = v22 + 1073741760;
      v24 = v22 <= 63;
    }
    else
    {
      v19 = (char)a2[1];
      if (v19 > 15)
        v19 += 1073741808;
      v20 = a2[2];
      LOBYTE(v21) = a2[3];
      v22 = (char)a2[4];
      v23 = v22 + 1073741808;
      v24 = v22 <= 15;
    }
    if (v24)
      v23 = v22;
  }
  v25 = *(JSC::JSObject **)(a1 + 8 * v19);
  v26 = *(_QWORD *)(a1 + 8 * v23);
  v27 = *(unsigned int **)(*(_QWORD *)(v10 + 56) + 104);
  if (v27)
  {
    v28 = *v27;
    if (*v27 > v20)
    {
      v29 = &v27[2 * v20];
      goto LABEL_17;
    }
  }
  else
  {
    v28 = 0;
  }
  v34 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 120) + 72))(*(_QWORD *)(v10 + 120)) + 48);
  if (*v34 <= v20 - v28)
    goto LABEL_29;
  v29 = &v34[2 * (v20 - v28)];
LABEL_17:
  a3.n128_u32[0] = 0;
  a4.i32[0] = v21 & 2;
  v30 = *((_QWORD *)v29 + 1);
  v36[1] = v26;
  v36[2] = 0;
  v31 = (int8x8_t)vdup_lane_s32(vceq_s32(a4, (int32x2_t)a3.n128_u64[0]), 0);
  v36[0] = 0;
  v32.i32[1] = 2;
  v32.i32[0] = v21 & 4;
  a3.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(v32, (int32x2_t)a3.n128_u64[0]), 0), vbsl_s8(v31, (int8x8_t)0x600000010, (int8x8_t)0x200000018), vbsl_s8(v31, (int8x8_t)0x400000014, (int8x8_t)28));
  v36[3] = a3.n128_u64[0];
  JSC::JSObject::defineOwnProperty(v25, v11, v30, (uint64_t)v36, 1, a8, a9, a10, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v11, &v35, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v12 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

__int128 *llint_slow_path_put_setter_by_id(uint64_t a1, JSC::OpPutSetterById *a2)
{
  JSC::CodeBlock *v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  const unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  JSC::JSObject *v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::VM *v15;

  v4 = *(JSC::CodeBlock **)(a1 + 16);
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)v4 + 1);
  v6 = (JSC::VM *)*((_QWORD *)v4 + 9);
  *((_QWORD *)v6 + 5) = a1;
  v15 = v6;
  JSC::CallFrame::setCurrentVPC(a1, (unint64_t)a2);
  v8 = JSC::OpPutSetterById::decode(a2, v7);
  v10 = v9;
  v11 = *(JSC::JSObject **)(a1 + 8 * (int)v8);
  v12 = *(_QWORD *)(a1 + 8 * (v9 >> 32));
  v13 = (unint64_t *)JSC::CodeBlock::identifier(v4, HIDWORD(v8));
  JSC::JSObject::putSetter(v11, v5, *v13, v12, v10);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v5, &v15, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v6 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

__int128 *llint_slow_path_put_getter_setter_by_id(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  JSC::JSGlobalObject *v31;
  JSC::JSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  const JSC::PropertyTable *v42;
  _DWORD *v44;
  int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::VM *v53;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::VM **)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 72);
  *(_QWORD *)(v10 + 40) = a1;
  v53 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x19883D450);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v45 = *((__int16 *)a2 + 1);
    v19 = 1073741760;
    v20 = v45 + 1073741760;
    if (v45 <= 63)
      v20 = *((__int16 *)a2 + 1);
    v21 = *((unsigned __int16 *)a2 + 2);
    v22 = *((unsigned __int16 *)a2 + 3);
    v23 = *((__int16 *)a2 + 4);
    v24 = *((__int16 *)a2 + 5);
    if (v24 > 63)
      v24 += 1073741760;
    if (v23 <= 63)
      goto LABEL_13;
LABEL_43:
    v46 = v23 + v19;
    goto LABEL_44;
  }
  if (v17 != 130)
  {
    v18 = (char)a2[1];
    v19 = 1073741808;
    v20 = v18 + 1073741808;
    if (v18 <= 15)
      v20 = (char)a2[1];
    v21 = a2[2];
    v22 = a2[3];
    v23 = (char)a2[4];
    v24 = (char)a2[5];
    if (v24 > 15)
      v24 += 1073741808;
    if (v23 <= 15)
    {
LABEL_13:
      v25 = *(_QWORD *)(a1 + 8 * v20);
      v26 = v23;
LABEL_14:
      v27 = (unsigned __int8 **)(a1 + 8 * v26);
      goto LABEL_15;
    }
    goto LABEL_43;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v22 = *(unsigned int *)(a2 + 10);
  v46 = *(_DWORD *)(a2 + 14);
  v24 = *(_DWORD *)(a2 + 18);
LABEL_44:
  v25 = *(_QWORD *)(a1 + 8 * v20);
  v26 = v46;
  if (v46 < 0x40000000)
    goto LABEL_14;
  v47 = (v46 - 0x40000000);
  if (v47 >= *(unsigned int *)(v11 + 172))
    goto LABEL_57;
  v27 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v47);
LABEL_15:
  v28 = *v27;
  if (v24 >= 0x40000000)
  {
    v48 = v24 - 0x40000000;
    if (v48 >= *(_DWORD *)(v11 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883D4ACLL);
    }
    v29 = (unsigned __int8 **)(*(_QWORD *)(v11 + 160) + 8 * v48);
  }
  else
  {
    v29 = (unsigned __int8 **)(a1 + 8 * v24);
  }
  v30 = *v29;
  if (((unint64_t)v28 & 0xFFFE000000000002) != 0)
  {
    v31 = 0;
  }
  else if (v28[5] <= 0x16u)
  {
    v31 = 0;
  }
  else
  {
    v31 = (JSC::JSGlobalObject *)v28;
  }
  if (((unint64_t)v30 & 0xFFFE000000000002) != 0)
  {
    v32 = 0;
  }
  else if (v30[5] <= 0x16u)
  {
    v32 = 0;
  }
  else
  {
    v32 = (JSC::JSObject *)v30;
  }
  v37 = JSC::GetterSetter::create((JSC::GetterSetter *)v10, v9, v31, v32, a5, a6, a7, a8);
  v39 = *(unsigned int **)(*(_QWORD *)(v8 + 56) + 104);
  if (v39)
  {
    v40 = *v39;
    if (*v39 > v21)
    {
      v41 = &v39[2 * v21];
      goto LABEL_28;
    }
  }
  else
  {
    v40 = 0;
  }
  v44 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 72))(*(_QWORD *)(v8 + 120)) + 48);
  if (*v44 <= v21 - v40)
  {
    __break(0xC471u);
    JUMPOUT(0x19883D48CLL);
  }
  v41 = &v44[2 * (v21 - v40)];
LABEL_28:
  v42 = (const JSC::PropertyTable *)*((_QWORD *)v41 + 1);
  if (*(_BYTE *)(v25 + 5) != 26
    || (JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>((JSC::JSFunction *)v25, (JSC::FunctionRareData *)v10, v9, v42, v33, v34, v35, v36, v38), !*(_DWORD *)(v10 + 80))|| !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v49, v50, v51, v52, v34, v35, v36))
  {
    JSC::JSObject::putDirectAccessor((int *)v25, (uint64_t)v9, (unint64_t)v42, v37, v22, v38, v34, v35, v36);
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v53, "LLIntSlowPaths", a2);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

int64_t llint_slow_path_put_getter_by_val(uint64_t a1, JSC::OpPutGetterByVal *a2)
{
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  const unsigned __int8 *v7;
  int64_t result;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  int32x2_t v17;
  char v18;
  JSC::JSObject *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  JSC::VM *v59;
  int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  _DWORD *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::VM *v92;
  unsigned __int8 *v93;
  WTF::StringImpl *v94;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(JSC::JSGlobalObject **)(v4 + 8);
  v6 = *(JSC::VM **)(v4 + 72);
  *((_QWORD *)v6 + 5) = a1;
  v92 = v6;
  JSC::CallFrame::setCurrentVPC(a1, (unint64_t)a2);
  result = JSC::OpPutGetterByVal::decode(a2, v7);
  v18 = v9;
  v19 = *(JSC::JSObject **)(a1 + 8 * (int)result);
  if (SHIDWORD(result) >= 0x40000000)
  {
    v27 = *(_QWORD *)(a1 + 16);
    v28 = (HIDWORD(result) - 0x40000000);
    if (v28 >= *(unsigned int *)(v27 + 172))
    {
      __break(0xC471u);
      return result;
    }
    v20 = (uint64_t *)(*(_QWORD *)(v27 + 160) + 8 * v28);
  }
  else
  {
    v20 = (uint64_t *)(a1 + 8 * (result >> 32));
  }
  v21 = *v20;
  v22 = *(_QWORD *)(a1 + 8 * (v9 >> 32));
  v23 = *((_QWORD *)v5 + 7);
  if ((*v20 & 0xFFFE000000000002) != 0)
  {
LABEL_50:
    v93 = (unsigned __int8 *)v21;
    if (*(_DWORD *)(v23 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23, v9, (uint64_t)v10, v11, v12, v13, v14, v15))
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v23 + 41952) + 8);
      if (!v24)
        goto LABEL_9;
      goto LABEL_7;
    }
    if ((v21 & 0xFFFE000000000002) == 0)
    {
      v60 = *(unsigned __int8 *)(v21 + 5);
      if (v60 == 2)
        goto LABEL_53;
      if (v60 == 4)
      {
        v24 = *(_QWORD *)(v21 + 8);
        v67 = *(_DWORD *)v24;
        *(_DWORD *)v24 += 4;
        v25 = v67 + 2;
        if (v25)
          goto LABEL_8;
        v37 = (WTF::StringImpl *)v24;
LABEL_69:
        WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
        goto LABEL_9;
      }
    }
    v21 = (uint64_t)JSC::JSValue::toStringSlowCase(&v93, (uint64_t)v5, (JSC::Structure *)1, v11, v12, v13, v14, v15);
LABEL_53:
    if (*(_DWORD *)(v23 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23, v9, (uint64_t)v10, v11, v12, v13, v14, v15))
    {
      v24 = 0;
      goto LABEL_9;
    }
    v24 = *(_QWORD *)(v21 + 8);
    v61 = *((_QWORD *)v5 + 7);
    if ((v24 & 1) == 0)
    {
      if ((*(_BYTE *)(v24 + 16) & 0x10) == 0)
      {
        if (*(_QWORD *)(v61 + 64768) != v24)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v61 + 64768), *(WTF::AtomStringImpl **)(v21 + 8), (uint64_t)v10, v11, v12, v13, v14, v15);
          v62 = *(WTF::StringImpl **)(v21 + 8);
          if (v62)
          {
            if ((*((_BYTE *)v62 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v62 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v62, v10, v11, v12, v13, v14, v15, (WTF *)&v94);
              v62 = v94;
            }
          }
          v63 = *(WTF::StringImpl **)(v61 + 64776);
          *(_QWORD *)(v61 + 64776) = v62;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
            {
              WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
            }
            else
            {
              *(_DWORD *)v63 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v21 + 8) + 16) & 0x10) == 0)
        {
          v64 = *(_DWORD **)(v61 + 64776);
          *v64 += 2;
          __dmb(0xAu);
          v65 = *(WTF::StringImpl **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = v64;
          v94 = v65;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v61 + 192, (unint64_t)&v94);
          v66 = v94;
          v94 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
            {
              WTF::StringImpl::~StringImpl(v66, (WTF::AtomStringImpl *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
            }
            else
            {
              *(_DWORD *)v66 -= 2;
            }
          }
        }
        v24 = *(_QWORD *)(v61 + 64776);
      }
      goto LABEL_7;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v21, v5);
    if (!*(_DWORD *)(v61 + 80))
      goto LABEL_25;
    v59 = (JSC::VM *)v61;
    goto LABEL_46;
  }
  if (*(_BYTE *)(v21 + 5) != 2)
  {
    v21 = JSC::JSCell::toPrimitive(v21, (JSC::VM **)v5, (JSC::Structure *)2, v11, v12, v13, v14, v15);
    goto LABEL_50;
  }
  v24 = *(_QWORD *)(v21 + 8);
  if ((v24 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v21, v5);
    if (!*(_DWORD *)(v23 + 80))
      goto LABEL_25;
    v59 = (JSC::VM *)v23;
LABEL_46:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v59, v9, (uint64_t)v10, v11, v12, v13, v14, v15))
    {
      v24 = 0;
      v37 = v94;
      v94 = 0;
      if (!v37)
        goto LABEL_9;
LABEL_27:
      if (*(_DWORD *)v37 != 2)
      {
        *(_DWORD *)v37 -= 2;
        goto LABEL_9;
      }
      goto LABEL_69;
    }
LABEL_25:
    v24 = (unint64_t)v94;
    if (!v94)
      goto LABEL_9;
    *(_DWORD *)v94 += 2;
    v94 = 0;
    v37 = (WTF::StringImpl *)v24;
    goto LABEL_27;
  }
  if ((*(_BYTE *)(v24 + 16) & 0x10) == 0)
  {
    if (*(_QWORD *)(v23 + 64768) != v24)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v23 + 64768), *(WTF::AtomStringImpl **)(v21 + 8), (uint64_t)v10, v11, v12, v13, v14, v15);
      v38 = *(WTF::StringImpl **)(v21 + 8);
      if (v38)
      {
        if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v38 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v38, v10, v11, v12, v13, v14, v15, (WTF *)&v94);
          v38 = v94;
        }
      }
      v39 = *(WTF::StringImpl **)(v23 + 64776);
      *(_QWORD *)(v23 + 64776) = v38;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
        }
        else
        {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v21 + 8) + 16) & 0x10) == 0)
    {
      v40 = *(_DWORD **)(v23 + 64776);
      *v40 += 2;
      __dmb(0xAu);
      v41 = *(WTF::StringImpl **)(v21 + 8);
      *(_QWORD *)(v21 + 8) = v40;
      v94 = v41;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v23 + 192, (unint64_t)&v94);
      v42 = v94;
      v94 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
    }
    v24 = *(_QWORD *)(v23 + 64776);
  }
LABEL_7:
  v25 = *(_DWORD *)v24 + 2;
LABEL_8:
  *(_DWORD *)v24 = v25;
LABEL_9:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v5, &v92, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v6 + 2))
  {
    v26 = &xmmword_1ECF4C7C0;
  }
  else
  {
    JSC::JSObject::putGetter(v19, v5, v24, v22, v18, v13, v14, v15, v16, v17);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v5, &v92, "LLIntSlowPaths", a2);
    if (*((_QWORD *)v6 + 2))
      v26 = &xmmword_1ECF4C7C0;
    else
      v26 = (__int128 *)a2;
  }
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v24, (WTF::AtomStringImpl *)v9, (uint64_t)v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return (int64_t)v26;
}

__int128 *llint_slow_path_put_setter_by_val(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  JSC::JSObject *v24;
  unsigned int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  __int128 *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  _DWORD *v83;
  WTF::StringImpl *v84;
  _QWORD *v85;
  uint64_t v86;
  WTF::StringImpl **v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::VM *v125;
  unsigned __int8 *v126;
  WTF::StringImpl *v127;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v125 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_126:
    __break(0xC471u);
    JUMPOUT(0x19883DC9CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v22 = *((__int16 *)a2 + 1);
    v23 = 1073741760;
    if (v22 <= 63)
      v18 = *((__int16 *)a2 + 1);
    else
      v18 = v22 + 1073741760;
    v19 = *((__int16 *)a2 + 2);
    LOWORD(v20) = *((_WORD *)a2 + 3);
    v21 = *((__int16 *)a2 + 4);
    if (v21 > 63)
      v21 += 1073741760;
    if (v19 <= 63)
      goto LABEL_25;
  }
  else
  {
    if (v17 == 130)
    {
      v18 = *(_DWORD *)(a2 + 2);
      v19 = *(_DWORD *)(a2 + 6);
      v20 = *(_DWORD *)(a2 + 10);
      v21 = *(_DWORD *)(a2 + 14);
      goto LABEL_16;
    }
    v27 = (char)a2[1];
    v23 = 1073741808;
    if (v27 <= 15)
      v18 = (char)a2[1];
    else
      v18 = v27 + 1073741808;
    v19 = (char)a2[2];
    LOBYTE(v20) = a2[3];
    v21 = (char)a2[4];
    if (v21 > 15)
      v21 += 1073741808;
    if (v19 <= 15)
    {
LABEL_25:
      v24 = *(JSC::JSObject **)(a1 + 8 * v18);
      goto LABEL_26;
    }
  }
  v19 += v23;
LABEL_16:
  v24 = *(JSC::JSObject **)(a1 + 8 * v18);
  if (v19 < 0x40000000)
  {
LABEL_26:
    v26 = (uint64_t *)(a1 + 8 * v19);
    goto LABEL_27;
  }
  v25 = v19 - 0x40000000;
  if (v25 >= *(_DWORD *)(v11 + 172))
    goto LABEL_126;
  v26 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v25);
LABEL_27:
  v28 = *v26;
  v29 = *(_QWORD *)(a1 + 8 * v21);
  v30 = *((_QWORD *)v9 + 7);
  if ((*v26 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v28 + 5) == 2)
    {
      v31 = *(_QWORD *)(v28 + 8);
      if ((v31 & 1) == 0)
      {
        if ((*(_BYTE *)(v31 + 16) & 0x10) == 0)
        {
          v43 = *(WTF::StringImpl **)(v30 + 64768);
          if (v43 != (WTF::StringImpl *)v31)
          {
            *(_DWORD *)v31 += 2;
            *(_QWORD *)(v30 + 64768) = v31;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
            }
            v44 = *(WTF::StringImpl **)(v28 + 8);
            if (v44)
            {
              if ((*((_BYTE *)v44 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v44 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v44, a3, a4, a5, a6, a7, a8, (WTF *)&v127);
                v44 = v127;
              }
            }
            v45 = *(WTF::StringImpl **)(v30 + 64776);
            *(_QWORD *)(v30 + 64776) = v44;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
              {
                WTF::StringImpl::~StringImpl(v45, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              }
              else
              {
                *(_DWORD *)v45 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v28 + 8) + 16) & 0x10) == 0)
          {
            v46 = *(_DWORD **)(v30 + 64776);
            *v46 += 2;
            __dmb(0xAu);
            v47 = *(WTF::StringImpl **)(v28 + 8);
            *(_QWORD *)(v28 + 8) = v46;
            v127 = v47;
            v48 = (_QWORD *)(v30 + 808);
            v49 = *(unsigned int *)(v30 + 820);
            if ((_DWORD)v49 == *(_DWORD *)(v30 + 816))
            {
              v51 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v127);
              v49 = *(unsigned int *)(v30 + 820);
              v50 = (WTF::StringImpl **)(*(_QWORD *)(v30 + 808) + 8 * v49);
              v47 = *v51;
            }
            else
            {
              v50 = (WTF::StringImpl **)(*v48 + 8 * v49);
              v51 = &v127;
            }
            *v51 = 0;
            *v50 = v47;
            *(_DWORD *)(v30 + 820) = v49 + 1;
            v52 = v127;
            v127 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
              {
                WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
              }
              else
              {
                *(_DWORD *)v52 -= 2;
              }
            }
          }
          v31 = *(_QWORD *)(v30 + 64776);
        }
        goto LABEL_31;
      }
LABEL_94:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v28, v9);
      if (!*(_DWORD *)(v30 + 80))
        goto LABEL_95;
      v108 = *(_DWORD *)(v30 + 80);
      if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v30 + 16))
      {
        v31 = 0;
        v79 = v127;
        v127 = 0;
        if (!v79)
          goto LABEL_33;
      }
      else
      {
LABEL_95:
        v31 = (unint64_t)v127;
        if (!v127)
          goto LABEL_33;
        *(_DWORD *)v127 += 2;
        v127 = 0;
        v79 = (WTF::StringImpl *)v31;
      }
      if (*(_DWORD *)v79 != 2)
      {
        *(_DWORD *)v79 -= 2;
        goto LABEL_33;
      }
LABEL_99:
      WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      goto LABEL_33;
    }
    v28 = JSC::JSCell::toPrimitive(v28, (JSC::VM **)v9, (JSC::Structure *)2, a4, a5, a6, a7, a8);
  }
  v126 = (unsigned __int8 *)v28;
  if (!*(_DWORD *)(v30 + 80))
    goto LABEL_72;
  v106 = *(_DWORD *)(v30 + 80);
  if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v30 + 16))
  {
LABEL_72:
    if ((v28 & 0xFFFE000000000002) == 0)
    {
      v77 = *(unsigned __int8 *)(v28 + 5);
      if (v77 == 2)
        goto LABEL_78;
      if (v77 == 4)
      {
        v31 = *(_QWORD *)(v28 + 8);
        v78 = *(_DWORD *)v31;
        *(_DWORD *)v31 += 4;
        v32 = v78 + 2;
        if (v32)
          goto LABEL_32;
        v79 = (WTF::StringImpl *)v31;
        goto LABEL_99;
      }
    }
    v28 = (uint64_t)JSC::JSValue::toStringSlowCase(&v126, (uint64_t)v9, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_78:
    if (*(_DWORD *)(v30 + 80))
    {
      v107 = *(_DWORD *)(v30 + 80);
      if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v30 + 16))
      {
        v31 = 0;
        goto LABEL_33;
      }
    }
    v31 = *(_QWORD *)(v28 + 8);
    v30 = *((_QWORD *)v9 + 7);
    if ((v31 & 1) == 0)
    {
      if ((*(_BYTE *)(v31 + 16) & 0x10) == 0)
      {
        v80 = *(WTF::StringImpl **)(v30 + 64768);
        if (v80 != (WTF::StringImpl *)v31)
        {
          *(_DWORD *)v31 += 2;
          *(_QWORD *)(v30 + 64768) = v31;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
            {
              WTF::StringImpl::~StringImpl(v80, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
            }
            else
            {
              *(_DWORD *)v80 -= 2;
            }
          }
          v81 = *(WTF::StringImpl **)(v28 + 8);
          if (v81)
          {
            if ((*((_BYTE *)v81 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v81 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v81, a3, a4, a5, a6, a7, a8, (WTF *)&v127);
              v81 = v127;
            }
          }
          v82 = *(WTF::StringImpl **)(v30 + 64776);
          *(_QWORD *)(v30 + 64776) = v81;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
            {
              WTF::StringImpl::~StringImpl(v82, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
            }
            else
            {
              *(_DWORD *)v82 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v28 + 8) + 16) & 0x10) == 0)
        {
          v83 = *(_DWORD **)(v30 + 64776);
          *v83 += 2;
          __dmb(0xAu);
          v84 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = v83;
          v127 = v84;
          v85 = (_QWORD *)(v30 + 808);
          v86 = *(unsigned int *)(v30 + 820);
          if ((_DWORD)v86 == *(_DWORD *)(v30 + 816))
          {
            v88 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v127);
            v86 = *(unsigned int *)(v30 + 820);
            v87 = (WTF::StringImpl **)(*(_QWORD *)(v30 + 808) + 8 * v86);
            v84 = *v88;
          }
          else
          {
            v87 = (WTF::StringImpl **)(*v85 + 8 * v86);
            v88 = &v127;
          }
          *v88 = 0;
          *v87 = v84;
          *(_DWORD *)(v30 + 820) = v86 + 1;
          v89 = v127;
          v127 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
            {
              WTF::StringImpl::~StringImpl(v89, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
            }
            else
            {
              *(_DWORD *)v89 -= 2;
            }
          }
        }
        v31 = *(_QWORD *)(v30 + 64776);
      }
      goto LABEL_31;
    }
    goto LABEL_94;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v30 + 41952) + 8);
  if (v31)
  {
LABEL_31:
    v32 = *(_DWORD *)v31 + 2;
LABEL_32:
    *(_DWORD *)v31 = v32;
  }
LABEL_33:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v125, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v10 + 2))
  {
    v33 = &xmmword_1ECF4C7C0;
    if (!v31)
      return v33;
    goto LABEL_42;
  }
  JSC::JSObject::putSetter(v24, v9, v31, v29, v20);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v125, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v125 + 2))
    v33 = &xmmword_1ECF4C7C0;
  else
    v33 = (__int128 *)a2;
  if (v31)
  {
LABEL_42:
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  return v33;
}

__int128 *llint_slow_path_jtrue(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  _BOOL4 v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  char v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  JSC::VM *v53;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = v3[1];
  v5 = (JSC::VM *)v3[9];
  *((_QWORD *)v5 + 5) = a1;
  v53 = v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
  v10 = v8 <= (unint64_t)a2 && v9 > (unint64_t)a2;
  if (!v10)
  {
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x19883E330);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v8) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = *((__int16 *)a2 + 2);
    if (v13 <= 63)
      goto LABEL_9;
    v28 = 1073741760;
LABEL_35:
    v29 = v13 + v28;
    goto LABEL_36;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = (char)a2[2];
    if (v13 <= 15)
    {
LABEL_9:
      v15 = v13;
LABEL_10:
      v16 = (unint64_t *)(a1 + 8 * v15);
      goto LABEL_11;
    }
    v28 = 1073741808;
    goto LABEL_35;
  }
  v29 = *(_DWORD *)(a2 + 2);
  v14 = *(_DWORD *)(a2 + 6);
LABEL_36:
  v15 = v29;
  if (v29 < 0x40000000)
    goto LABEL_10;
  v30 = (v29 - 0x40000000);
  if (v30 >= *(unsigned int *)(v6 + 172))
    goto LABEL_71;
  v16 = (unint64_t *)(*(_QWORD *)(v6 + 160) + 8 * v30);
LABEL_11:
  v17 = *v16;
  if (v17 >= 0xFFFE000000000000)
  {
    v24 = (_DWORD)v17 == 0;
    goto LABEL_27;
  }
  *(_QWORD *)&v18 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v17 & 0xFFFE000000000002) != 0)
    {
      v19 = v17 == 7;
      goto LABEL_15;
    }
    v22 = *(unsigned __int8 *)(v17 + 5);
    if (v22 == 2)
    {
      v25 = *(_QWORD *)(v17 + 8);
      v26 = (int *)(v17 + 16);
      if ((v25 & 1) == 0)
        v26 = (int *)(v25 + 4);
      v27 = *v26;
    }
    else
    {
      if (v22 != 3)
      {
        v23 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v23 + 10) & 1) == 0)
        {
          v19 = 1;
          goto LABEL_15;
        }
        v24 = *(_QWORD *)(v23 + 40) == v4;
        goto LABEL_27;
      }
      v27 = *(_DWORD *)(v17 + 8);
    }
    v24 = v27 == 0;
LABEL_27:
    v19 = !v24;
    goto LABEL_15;
  }
  v10 = v18 <= 0.0;
  v39 = v18 < 0.0;
  v19 = !v10 || v39;
LABEL_15:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v4, &v53, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v5 + 2))
  {
    if (!v19)
    {
      v31 = *a2;
      v32 = v31;
      if ((v31 | 2) == 0x82)
        v32 = a2[1];
      v33 = v31 == 128;
      v34 = v31 == 130;
      if (v31 == 130)
        v33 = 2;
      v24 = v31 == 128;
      v35 = JSC::opcodeLengths[v32];
      v36 = v24 || v34;
      v37 = v35 << v33;
      v24 = v36 == 0;
      v38 = 1;
      if (!v24)
        v38 = 2;
      v20 = v37 + v38;
      return (__int128 *)&a2[v20];
    }
    if (v14)
    {
LABEL_20:
      v20 = v14;
      return (__int128 *)&a2[v20];
    }
    v40 = v3[7];
    v41 = *(_QWORD *)(v40 + 80);
    v42 = *(_QWORD *)v41;
    v43 = *(unsigned int *)(v41 + 12) + *(_QWORD *)v41;
    if (v42 > (unint64_t)a2 || v43 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19883E374);
    }
    v45 = *(_QWORD *)(v40 + 144);
    if (v45)
    {
      v46 = (_DWORD)a2 - v42;
      v47 = *(_DWORD *)(v45 - 8);
      v48 = 9 * ((~(v46 << 15) + v46) ^ ((~(v46 << 15) + v46) >> 10));
      v49 = (v48 ^ (v48 >> 6)) + ~((v48 ^ (v48 >> 6)) << 11);
      v50 = v47 & (v49 ^ HIWORD(v49));
      v51 = *(_DWORD *)(v45 + 8 * v50);
      if (v51 == v46)
      {
LABEL_61:
        v14 = *(_DWORD *)(v45 + 8 * v50 + 4);
        goto LABEL_20;
      }
      v52 = 1;
      while (v51)
      {
        v50 = ((_DWORD)v50 + v52) & v47;
        v51 = *(_DWORD *)(v45 + 8 * v50);
        ++v52;
        if (v51 == v46)
          goto LABEL_61;
      }
    }
    v14 = 0;
    goto LABEL_20;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_jfalse(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  BOOL v19;
  int v20;
  int v21;
  char v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  JSC::VM *v53;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = v3[1];
  v5 = (JSC::VM *)v3[9];
  *((_QWORD *)v5 + 5) = a1;
  v53 = v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
  v10 = v8 <= (unint64_t)a2 && v9 > (unint64_t)a2;
  if (!v10)
  {
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x19883E694);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v8) & 0x3FFFFFFF;
  v12 = *a2;
  if (v12 == 128)
  {
    v13 = *((__int16 *)a2 + 1);
    v14 = *((__int16 *)a2 + 2);
    if (v13 <= 63)
      goto LABEL_9;
    v36 = 1073741760;
LABEL_45:
    v37 = v13 + v36;
    goto LABEL_46;
  }
  if (v12 != 130)
  {
    v13 = (char)a2[1];
    v14 = (char)a2[2];
    if (v13 <= 15)
    {
LABEL_9:
      v15 = v13;
LABEL_10:
      v16 = (unint64_t *)(a1 + 8 * v15);
      goto LABEL_11;
    }
    v36 = 1073741808;
    goto LABEL_45;
  }
  v37 = *(_DWORD *)(a2 + 2);
  v14 = *(_DWORD *)(a2 + 6);
LABEL_46:
  v15 = v37;
  if (v37 < 0x40000000)
    goto LABEL_10;
  v38 = (v37 - 0x40000000);
  if (v38 >= *(unsigned int *)(v6 + 172))
    goto LABEL_71;
  v16 = (unint64_t *)(*(_QWORD *)(v6 + 160) + 8 * v38);
LABEL_11:
  v17 = *v16;
  if (v17 >= 0xFFFE000000000000)
  {
    v32 = (_DWORD)v17 == 0;
    goto LABEL_37;
  }
  *(_QWORD *)&v18 = v17 - 0x2000000000000;
  if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v17 & 0xFFFE000000000002) != 0)
    {
      v19 = v17 == 7;
      goto LABEL_15;
    }
    v30 = *(unsigned __int8 *)(v17 + 5);
    if (v30 == 2)
    {
      v33 = *(_QWORD *)(v17 + 8);
      v34 = (int *)(v17 + 16);
      if ((v33 & 1) == 0)
        v34 = (int *)(v33 + 4);
      v35 = *v34;
    }
    else
    {
      if (v30 != 3)
      {
        v31 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v31 + 10) & 1) == 0)
        {
          v19 = 1;
          goto LABEL_15;
        }
        v32 = *(_QWORD *)(v31 + 40) == v4;
        goto LABEL_37;
      }
      v35 = *(_DWORD *)(v17 + 8);
    }
    v32 = v35 == 0;
LABEL_37:
    v19 = !v32;
    goto LABEL_15;
  }
  v10 = v18 <= 0.0;
  v52 = v18 < 0.0;
  v19 = !v10 || v52;
LABEL_15:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v4, &v53, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v5 + 2))
  {
    if (v19)
    {
      v20 = *a2;
      v21 = v20;
      if ((v20 | 2) == 0x82)
        v21 = a2[1];
      v22 = v20 == 128;
      v23 = v20 == 130;
      if (v20 == 130)
        v22 = 2;
      v32 = v20 == 128;
      v24 = JSC::opcodeLengths[v21];
      v25 = v32 || v23;
      v26 = v24 << v22;
      v32 = v25 == 0;
      v27 = 1;
      if (!v32)
        v27 = 2;
      v28 = v26 + v27;
      return (__int128 *)&a2[v28];
    }
    if (v14)
    {
LABEL_30:
      v28 = v14;
      return (__int128 *)&a2[v28];
    }
    v39 = v3[7];
    v40 = *(_QWORD *)(v39 + 80);
    v41 = *(_QWORD *)v40;
    v42 = *(unsigned int *)(v40 + 12) + *(_QWORD *)v40;
    if (v41 > (unint64_t)a2 || v42 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19883E6D8);
    }
    v44 = *(_QWORD *)(v39 + 144);
    if (v44)
    {
      v45 = (_DWORD)a2 - v41;
      v46 = *(_DWORD *)(v44 - 8);
      v47 = 9 * ((~(v45 << 15) + v45) ^ ((~(v45 << 15) + v45) >> 10));
      v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
      v49 = v46 & (v48 ^ HIWORD(v48));
      v50 = *(_DWORD *)(v44 + 8 * v49);
      if (v50 == v45)
      {
LABEL_56:
        v14 = *(_DWORD *)(v44 + 8 * v49 + 4);
        goto LABEL_30;
      }
      v51 = 1;
      while (v50)
      {
        v49 = ((_DWORD)v49 + v51) & v46;
        v50 = *(_DWORD *)(v44 + 8 * v49);
        ++v51;
        if (v50 == v45)
          goto LABEL_56;
      }
    }
    v14 = 0;
    goto LABEL_30;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_less(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  JSC::VM *v30;
  BOOL v31;
  BOOL v32;
  int **v33;
  int **v34;
  int v35;
  uint64_t v36;
  unint64_t v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  _BOOL4 v43;
  int v44;
  JSC::VM *v45;
  double v46;
  _BOOL4 v47;
  int v48;
  int v49;
  WTF *v50;
  unint64_t v51;
  int **v52;
  int **v53;
  int v54;
  unint64_t v55;
  JSC::VM *v56;
  int v57;
  unint64_t v58;
  int **v59;
  int *v60;
  uint64_t v61;
  unint64_t v62;
  JSC::JSBigInt *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  double v67;
  uint64_t v68;
  int **v69;
  int *v70;
  uint64_t v71;
  unint64_t v72;
  JSC::JSBigInt *v73;
  uint64_t v74;
  BOOL v75;
  double v76;
  double v77;
  double v78;
  JSC::VM *v79;
  JSC::JSRopeString *v80;
  WTF *v81;
  JSC::JSObject *v82;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v79 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19883EBF8);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v20 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v20 > 63)
      v20 += 1073741760;
    v22 = *((__int16 *)a2 + 2);
    v23 = *((__int16 *)a2 + 3);
    if (v23 > 63)
      v23 += 1073741760;
    if (v22 <= 63)
      goto LABEL_13;
LABEL_102:
    v54 = v22 + v21;
    goto LABEL_103;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 > 15)
      v20 += 1073741808;
    v22 = (char)a2[2];
    v23 = (char)a2[3];
    if (v23 > 15)
      v23 += 1073741808;
    if (v22 <= 15)
    {
LABEL_13:
      v24 = v20;
      v25 = v23;
LABEL_14:
      v26 = (unint64_t *)(a1 + 8 * v22);
      goto LABEL_15;
    }
    goto LABEL_102;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v54 = *(_DWORD *)(a2 + 6);
  v23 = *(_DWORD *)(a2 + 10);
LABEL_103:
  v22 = v54;
  v24 = v20;
  v25 = v23;
  if (v54 < 0x40000000)
    goto LABEL_14;
  v55 = (v54 - 0x40000000);
  if (v55 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x19883F05CLL);
  }
  v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v55);
LABEL_15:
  v27 = *v26;
  if (v25 >= 0x40000000)
  {
    v38 = (v25 - 0x40000000);
    if (v38 >= *(unsigned int *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883EFECLL);
    }
    v28 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v38);
  }
  else
  {
    v28 = (unint64_t *)(a1 + 8 * v25);
  }
  v29 = *v28;
  v30 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v27 >= 0xFFFE000000000000)
  {
    if (v29 >= 0xFFFE000000000000)
    {
      v35 = (int)v27 < (int)v29;
      goto LABEL_37;
    }
    if (v29 >> 49)
    {
LABEL_49:
      v39 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v39 = v27 - 0x2000000000000;
      v40 = (double)(int)v29;
      if (v29 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v40 = v29 - 0x2000000000000;
      v41 = v39 < v40;
      goto LABEL_54;
    }
  }
  else
  {
    if (v27 >> 49)
      v31 = v29 >> 49 == 0;
    else
      v31 = 1;
    if (!v31)
      goto LABEL_49;
  }
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    v80 = 0;
  }
  else
  {
    v32 = *(_BYTE *)(v27 + 5) == 2 && (v29 & 0xFFFE000000000002) == 0;
    if (v32 && *(_BYTE *)(v29 + 5) == 2)
    {
      v33 = (int **)(v27 + 8);
      if ((*(_BYTE *)(v27 + 8) & 1) != 0)
        v33 = JSC::JSRopeString::resolveRope(v27, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (*((_DWORD *)v30 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v35 = 0;
      }
      else
      {
        v34 = (int **)(v29 + 8);
        if ((*(_BYTE *)(v29 + 8) & 1) != 0)
          v34 = JSC::JSRopeString::resolveRope(v29, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v30 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v35 = 0;
        }
        else
        {
          v35 = WTF::codePointCompareLessThan((WTF *)v33, (const WTF::String *)v34, a3);
        }
      }
      goto LABEL_37;
    }
    v80 = 0;
    v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v81 = (WTF *)v27;
  if (*((_DWORD *)v30 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v44 = 0;
LABEL_117:
    v42 = 0.0;
    goto LABEL_66;
  }
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    if (v27 >= 0xFFFE000000000000)
    {
      v42 = (double)(int)v27;
      goto LABEL_62;
    }
    if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v42 = v27 - 0x2000000000000;
      goto LABEL_62;
    }
  }
  else if (*(_BYTE *)(v27 + 5) == 3)
  {
    v44 = 1;
    goto LABEL_117;
  }
  JSC::JSValue::toNumberSlowCase(&v81, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v42 = *(double *)a9.i64;
LABEL_62:
  if (*((_DWORD *)v30 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v44 = 0;
  }
  else
  {
    v43 = ((unint64_t)v81 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v81 + 5) == 2;
    v44 = !v43;
  }
LABEL_66:
  if (*((_DWORD *)v30 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_124;
  }
  v45 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v29 & 0xFFFE000000000002) == 0)
    v29 = JSC::JSCell::toPrimitive(v29, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v80 = (JSC::JSRopeString *)v29;
  if (*((_DWORD *)v45 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v45, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v48 = 0;
      goto LABEL_122;
    }
    v29 = (unint64_t)v80;
  }
  if ((v29 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v29 + 5) != 3)
      goto LABEL_72;
    v48 = 1;
LABEL_122:
    v46 = 0.0;
    goto LABEL_77;
  }
  if (v29 >= 0xFFFE000000000000)
  {
    v46 = (double)(int)v29;
    goto LABEL_73;
  }
  if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v46 = v29 - 0x2000000000000;
    goto LABEL_73;
  }
LABEL_72:
  JSC::JSValue::toNumberSlowCase(&v80, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v46 = *(double *)a9.i64;
LABEL_73:
  if (*((_DWORD *)v45 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v45, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v48 = 0;
  }
  else
  {
    v47 = ((unint64_t)v80 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v80 + 5) == 2;
    v48 = !v47;
  }
LABEL_77:
  if (*((_DWORD *)v30 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_124;
  }
  v49 = v44 | v48;
  v50 = v81;
  if (v49 == 1)
  {
    if (((unint64_t)v81 & 0xFFFE000000000002) != 0)
    {
      v51 = (unint64_t)v80;
    }
    else
    {
      v51 = (unint64_t)v80;
      if (*((_BYTE *)v81 + 5) == 3)
      {
        v56 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v57 = 3;
        goto LABEL_132;
      }
    }
    if ((v51 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v51 + 5) != 3)
    {
      v41 = v42 < v46;
LABEL_54:
      v35 = v41;
      goto LABEL_37;
    }
    v56 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (((unint64_t)v81 & 0xFFFE000000000002) != 0)
    {
      v82 = v81;
      if ((unint64_t)v81 >= 0xFFFE000000000000)
      {
        v67 = (double)(int)v81;
        goto LABEL_151;
      }
      if ((unint64_t)v81 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v67 = (char *)v81 - 0x2000000000000;
LABEL_151:
        if (*((_DWORD *)v56 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v56, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v66 = 1;
        }
        else
        {
          v66 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v51, v67);
        }
LABEL_153:
        if (!*((_DWORD *)v56 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v56, v68, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if (v66 == 2)
          {
            v66 = 3;
          }
          else if (v66 == 3)
          {
            v66 = 2;
          }
          goto LABEL_181;
        }
        goto LABEL_124;
      }
LABEL_185:
      JSC::JSValue::toNumberSlowCase(&v82, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v67 = v78;
      goto LABEL_151;
    }
    v57 = *((unsigned __int8 *)v81 + 5);
LABEL_132:
    v58 = v51 & 0xFFFE000000000002;
    if (v57 == 3 && !v58)
    {
      if (*(_BYTE *)(v51 + 5) == 3)
      {
        v75 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v81, v51) == 3;
        goto LABEL_182;
      }
      v82 = (JSC::JSObject *)v51;
      goto LABEL_136;
    }
    if (v57 == 3)
    {
      v82 = (JSC::JSObject *)v51;
      if (v58)
      {
        if (v51 >= 0xFFFE000000000000)
        {
          v77 = (double)(int)v51;
          goto LABEL_178;
        }
        if (v51 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v77 = v51 - 0x2000000000000;
          goto LABEL_178;
        }
LABEL_177:
        JSC::JSValue::toNumberSlowCase(&v82, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v77 = v76;
LABEL_178:
        if (*((_DWORD *)v56 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v56, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v66 = 1;
        }
        else
        {
          v66 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v50, v77);
        }
LABEL_180:
        if (!*((_DWORD *)v56 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v56, v64, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_181:
          v75 = v66 == 3;
LABEL_182:
          v35 = v75;
          goto LABEL_37;
        }
LABEL_124:
        v35 = 0;
        goto LABEL_37;
      }
LABEL_136:
      if (*(_BYTE *)(v51 + 5) == 2)
      {
        v59 = (int **)(v51 + 8);
        if ((*(_BYTE *)(v51 + 8) & 1) != 0)
          v59 = JSC::JSRopeString::resolveRope(v51, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v56 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v56, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_200;
        }
        v60 = *v59;
        if (*v59)
        {
          v61 = *((_QWORD *)v60 + 1);
          v62 = v60[1] | ((unint64_t)((v60[4] >> 2) & 1) << 32);
        }
        else
        {
          v61 = 0;
          v62 = 0x100000000;
        }
        v63 = JSC::JSBigInt::stringToBigInt(v10, v61, v62, a4, a5);
        v65 = (uint64_t)v63;
        if (*((_DWORD *)v56 + 20))
        {
          v66 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v56, v64, (uint64_t)a3, a4, a5, a6, a7, a8) || !v65)
            goto LABEL_180;
        }
        else if (!v63)
        {
LABEL_200:
          v66 = 1;
          goto LABEL_180;
        }
        if ((v65 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v65 + 5) == 3)
        {
          v66 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v50, v65);
          goto LABEL_180;
        }
      }
      goto LABEL_177;
    }
    v82 = v81;
    if (v57 != 2)
      goto LABEL_185;
    v69 = (int **)((char *)v81 + 8);
    if ((*((_BYTE *)v81 + 8) & 1) != 0)
      v69 = JSC::JSRopeString::resolveRope((unint64_t)v81, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v56 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v56, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_206:
      v66 = 1;
      goto LABEL_153;
    }
    v70 = *v69;
    if (*v69)
    {
      v71 = *((_QWORD *)v70 + 1);
      v72 = v70[1] | ((unint64_t)((v70[4] >> 2) & 1) << 32);
    }
    else
    {
      v71 = 0;
      v72 = 0x100000000;
    }
    v73 = JSC::JSBigInt::stringToBigInt(v10, v71, v72, a4, a5);
    v74 = (uint64_t)v73;
    if (*((_DWORD *)v56 + 20))
    {
      v66 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v56, v68, (uint64_t)a3, a4, a5, a6, a7, a8) || !v74)
        goto LABEL_153;
    }
    else if (!v73)
    {
      goto LABEL_206;
    }
    if ((v74 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v74 + 5) == 3)
    {
      v66 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v51, v74);
      goto LABEL_153;
    }
    goto LABEL_185;
  }
  v52 = (int **)((char *)v81 + 8);
  if ((*((_BYTE *)v81 + 8) & 1) != 0)
    v52 = JSC::JSRopeString::resolveRope((unint64_t)v81, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v53 = (int **)((char *)v80 + 8);
  if ((*((_BYTE *)v80 + 8) & 1) != 0)
    v53 = JSC::JSRopeString::resolveRope((unint64_t)v80, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v35 = WTF::codePointCompareLessThan((WTF *)v52, (const WTF::String *)v53, a3);
LABEL_37:
  if (v35)
    v36 = 7;
  else
    v36 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v79, "LLIntSlowPaths", v17);
  if (*((_QWORD *)v79 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v24) = v36;
  return (__int128 *)v17;
}

__int128 *llint_slow_path_lesseq(uint64_t a1, unint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  int64_t v7;
  uint64_t v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  JSC::VM *v21;
  BOOL v22;
  BOOL v23;
  int **v24;
  int **v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  BOOL v35;
  double v36;
  _BOOL4 v37;
  int v38;
  JSC::VM *v39;
  _BOOL4 v40;
  int v41;
  JSC::JSRopeString *v42;
  unint64_t v43;
  BOOL v44;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v46;
  int v47;
  unint64_t v48;
  int **v49;
  int *v50;
  uint64_t v51;
  unint64_t v52;
  JSC::JSBigInt *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  double v57;
  uint64_t v58;
  int **v59;
  int **v60;
  int **v61;
  int *v62;
  uint64_t v63;
  unint64_t v64;
  JSC::JSBigInt *v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  JSC::VM *v74;
  WTF *v75;
  JSC::JSRopeString *v76;
  JSC::JSObject *v77;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(JSC::JSGlobalObject **)(v4 + 8);
  v6 = *(JSC::VM **)(v4 + 72);
  *((_QWORD *)v6 + 5) = a1;
  v74 = v6;
  JSC::CallFrame::setCurrentVPC(a1, a2);
  v7 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>(v2);
  v16 = v7;
  if (SHIDWORD(v7) >= 0x40000000)
  {
    v29 = *(_QWORD *)(a1 + 16);
    v30 = (HIDWORD(v7) - 0x40000000);
    if (v30 >= *(unsigned int *)(v29 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883F90CLL);
    }
    v17 = (unint64_t *)(*(_QWORD *)(v29 + 160) + 8 * v30);
  }
  else
  {
    v17 = (unint64_t *)(a1 + 8 * (v7 >> 32));
  }
  v18 = *v17;
  if ((int)v8 >= 0x40000000)
  {
    v31 = *(_QWORD *)(a1 + 16);
    v32 = (v8 - 0x40000000);
    if (v32 >= *(unsigned int *)(v31 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19883F914);
    }
    v19 = (unint64_t *)(*(_QWORD *)(v31 + 160) + 8 * v32);
  }
  else
  {
    v19 = (unint64_t *)(a1 + 8 * (int)v8);
  }
  v20 = *v19;
  v21 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if (v18 >= 0xFFFE000000000000)
  {
    if (v20 >= 0xFFFE000000000000)
    {
      v26 = (int)v18 <= (int)v20;
      goto LABEL_25;
    }
    if (v20 >> 49)
    {
LABEL_39:
      v33 = (double)(int)v18;
      if (v18 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v33 = v18 - 0x2000000000000;
      v34 = (double)(int)v20;
      if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v34 = v20 - 0x2000000000000;
      v35 = v33 > v34;
      goto LABEL_44;
    }
  }
  else
  {
    if (v18 >> 49)
      v22 = v20 >> 49 == 0;
    else
      v22 = 1;
    if (!v22)
      goto LABEL_39;
  }
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    v75 = 0;
  }
  else
  {
    v23 = *(_BYTE *)(v18 + 5) == 2 && (v20 & 0xFFFE000000000002) == 0;
    if (v23 && *(_BYTE *)(v20 + 5) == 2)
    {
      v24 = (int **)(v18 + 8);
      if ((*(_BYTE *)(v18 + 8) & 1) != 0)
        v24 = JSC::JSRopeString::resolveRope(v18, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
      if (*((_DWORD *)v21 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
      {
        v26 = 0;
      }
      else
      {
        v25 = (int **)(v20 + 8);
        if ((*(_BYTE *)(v20 + 8) & 1) != 0)
          v25 = JSC::JSRopeString::resolveRope(v20, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
        if (*((_DWORD *)v21 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
          v26 = 0;
        }
        else
        {
          v26 = WTF::codePointCompareLessThan((WTF *)v25, (const WTF::String *)v24, v9) ^ 1;
        }
      }
      goto LABEL_25;
    }
    v75 = 0;
    v18 = JSC::JSCell::toPrimitive(v18, (JSC::VM **)v5, (JSC::Structure *)1, v10, v11, v12, v13, v14);
  }
  v76 = (JSC::JSRopeString *)v18;
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
  {
    v38 = 0;
LABEL_93:
    v36 = 0.0;
    goto LABEL_56;
  }
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    if (v18 >= 0xFFFE000000000000)
    {
      v36 = (double)(int)v18;
      goto LABEL_52;
    }
    if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v36 = v18 - 0x2000000000000;
      goto LABEL_52;
    }
  }
  else if (*(_BYTE *)(v18 + 5) == 3)
  {
    v38 = 1;
    goto LABEL_93;
  }
  JSC::JSValue::toNumberSlowCase(&v76, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  v36 = *(double *)v15.i64;
LABEL_52:
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
  {
    v38 = 0;
  }
  else
  {
    v37 = ((unint64_t)v76 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v76 + 5) == 2;
    v38 = !v37;
  }
LABEL_56:
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
    goto LABEL_100;
  v39 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if ((v20 & 0xFFFE000000000002) == 0)
    v20 = JSC::JSCell::toPrimitive(v20, (JSC::VM **)v5, (JSC::Structure *)1, v10, v11, v12, v13, v14);
  v75 = (WTF *)v20;
  if (*((_DWORD *)v39 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v39, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
    {
      v41 = 0;
      goto LABEL_98;
    }
    v20 = (unint64_t)v75;
  }
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v20 + 5) != 3)
      goto LABEL_62;
    v41 = 1;
LABEL_98:
    v15.i64[0] = 0;
    goto LABEL_67;
  }
  if (v20 >= 0xFFFE000000000000)
  {
    *(double *)v15.i64 = (double)(int)v20;
    goto LABEL_63;
  }
  if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v15.i64[0] = v20 - 0x2000000000000;
    goto LABEL_63;
  }
LABEL_62:
  JSC::JSValue::toNumberSlowCase(&v75, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
LABEL_63:
  if (*((_DWORD *)v39 + 20)
    && (v73 = v15.i64[0],
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v39, v8, (uint64_t)v9, v10, v11, v12, v13, v14), v15.i64[0] = v73, hasExceptionsAfterHandlingTraps))
  {
    v41 = 0;
  }
  else
  {
    v40 = ((unint64_t)v75 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v75 + 5) == 2;
    v41 = !v40;
  }
LABEL_67:
  if (*((_DWORD *)v21 + 20))
  {
    v72 = v15.i64[0];
    v44 = JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
    v15.i64[0] = v72;
    if (v44)
      goto LABEL_100;
  }
  if ((v38 | v41) == 1)
  {
    v42 = v76;
    if (((unint64_t)v76 & 0xFFFE000000000002) != 0)
    {
      v43 = (unint64_t)v75;
    }
    else
    {
      v43 = (unint64_t)v75;
      if (*((_BYTE *)v76 + 5) == 3)
      {
        v46 = (JSC::VM *)*((_QWORD *)v5 + 7);
        v47 = 3;
        goto LABEL_107;
      }
    }
    if ((v43 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v43 + 5) != 3)
    {
      v35 = v36 > *(double *)v15.i64;
LABEL_44:
      v26 = !v35;
      goto LABEL_25;
    }
    v46 = (JSC::VM *)*((_QWORD *)v5 + 7);
    if (((unint64_t)v76 & 0xFFFE000000000002) != 0)
    {
      v77 = v76;
      if ((unint64_t)v76 >= 0xFFFE000000000000)
      {
        v57 = (double)(int)v76;
        goto LABEL_126;
      }
      if ((unint64_t)v76 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v57 = (char *)v76 - 0x2000000000000;
LABEL_126:
        if (*((_DWORD *)v46 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v46, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
          v56 = 1;
        }
        else
        {
          v56 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v43, v57);
        }
LABEL_128:
        if (!*((_DWORD *)v46 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v46, v58, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
          if (v56 == 2)
          {
            v56 = 3;
          }
          else if (v56 == 3)
          {
            v56 = 2;
          }
          goto LABEL_161;
        }
        goto LABEL_100;
      }
LABEL_167:
      JSC::JSValue::toNumberSlowCase(&v77, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
      v57 = v71;
      goto LABEL_126;
    }
    v47 = *((unsigned __int8 *)v76 + 5);
LABEL_107:
    v48 = v43 & 0xFFFE000000000002;
    if (v47 == 3 && !v48)
    {
      if (*(_BYTE *)(v43 + 5) == 3)
      {
        v67 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v76, v43);
        v68 = v67 == 3 || v67 == 0;
        goto LABEL_164;
      }
      v77 = (JSC::JSObject *)v43;
      goto LABEL_111;
    }
    if (v47 == 3)
    {
      v77 = (JSC::JSObject *)v43;
      if (v48)
      {
        if (v43 >= 0xFFFE000000000000)
        {
          v70 = (double)(int)v43;
          goto LABEL_158;
        }
        if (v43 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v70 = v43 - 0x2000000000000;
          goto LABEL_158;
        }
LABEL_157:
        JSC::JSValue::toNumberSlowCase(&v77, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
        v70 = v69;
LABEL_158:
        if (*((_DWORD *)v46 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v46, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
          v56 = 1;
        }
        else
        {
          v56 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v42, v70);
        }
LABEL_160:
        if (!*((_DWORD *)v46 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v46, v54, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
LABEL_161:
          v68 = v56 == 3 || v56 == 0;
LABEL_164:
          v26 = v68;
          goto LABEL_25;
        }
LABEL_100:
        v26 = 0;
        goto LABEL_25;
      }
LABEL_111:
      if (*(_BYTE *)(v43 + 5) == 2)
      {
        v49 = (int **)(v43 + 8);
        if ((*(_BYTE *)(v43 + 8) & 1) != 0)
          v49 = JSC::JSRopeString::resolveRope(v43, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
        if (*((_DWORD *)v46 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v46, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
          goto LABEL_183;
        }
        v50 = *v49;
        if (*v49)
        {
          v51 = *((_QWORD *)v50 + 1);
          v52 = v50[1] | ((unint64_t)((v50[4] >> 2) & 1) << 32);
        }
        else
        {
          v51 = 0;
          v52 = 0x100000000;
        }
        v53 = JSC::JSBigInt::stringToBigInt(v5, v51, v52, v10, v11);
        v55 = (uint64_t)v53;
        if (*((_DWORD *)v46 + 20))
        {
          v56 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v46, v54, (uint64_t)v9, v10, v11, v12, v13, v14) || !v55)
            goto LABEL_160;
        }
        else if (!v53)
        {
LABEL_183:
          v56 = 1;
          goto LABEL_160;
        }
        if ((v55 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v55 + 5) == 3)
        {
          v56 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v42, v55);
          goto LABEL_160;
        }
      }
      goto LABEL_157;
    }
    v77 = v76;
    if (v47 != 2)
      goto LABEL_167;
    v61 = (int **)((char *)v76 + 8);
    if ((*((_BYTE *)v76 + 8) & 1) != 0)
      v61 = JSC::JSRopeString::resolveRope((unint64_t)v76, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
    if (*((_DWORD *)v46 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v46, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
    {
LABEL_189:
      v56 = 1;
      goto LABEL_128;
    }
    v62 = *v61;
    if (*v61)
    {
      v63 = *((_QWORD *)v62 + 1);
      v64 = v62[1] | ((unint64_t)((v62[4] >> 2) & 1) << 32);
    }
    else
    {
      v63 = 0;
      v64 = 0x100000000;
    }
    v65 = JSC::JSBigInt::stringToBigInt(v5, v63, v64, v10, v11);
    v66 = (uint64_t)v65;
    if (*((_DWORD *)v46 + 20))
    {
      v56 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v46, v58, (uint64_t)v9, v10, v11, v12, v13, v14) || !v66)
        goto LABEL_128;
    }
    else if (!v65)
    {
      goto LABEL_189;
    }
    if ((v66 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v66 + 5) == 3)
    {
      v56 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v43, v66);
      goto LABEL_128;
    }
    goto LABEL_167;
  }
  v59 = (int **)((char *)v75 + 8);
  if ((*((_BYTE *)v75 + 8) & 1) != 0)
    v59 = JSC::JSRopeString::resolveRope((unint64_t)v75, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
  v60 = (int **)((char *)v76 + 8);
  if ((*((_BYTE *)v76 + 8) & 1) != 0)
    v60 = JSC::JSRopeString::resolveRope((unint64_t)v76, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
  v26 = WTF::codePointCompareLessThan((WTF *)v59, (const WTF::String *)v60, v9) ^ 1;
LABEL_25:
  if (v26)
    v27 = 7;
  else
    v27 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v5, &v74, "LLIntSlowPaths", v2);
  if (*((_QWORD *)v74 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v27;
  return (__int128 *)v2;
}

__int128 *llint_slow_path_greater(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v17;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  JSC::VM *v29;
  double v30;
  double v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  BOOL v36;
  unint64_t v37;
  double v39;
  _BOOL4 v40;
  int v41;
  JSC::VM *v42;
  double v43;
  _BOOL4 v44;
  int v45;
  int v46;
  WTF *v47;
  unint64_t v48;
  unsigned int v49;
  int **v50;
  int **v51;
  int v52;
  unsigned int v53;
  JSC::VM *v54;
  int v55;
  unint64_t v56;
  int **v57;
  int *v58;
  uint64_t v59;
  unint64_t v60;
  JSC::JSBigInt *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  double v65;
  uint64_t v66;
  int **v67;
  int *v68;
  uint64_t v69;
  unint64_t v70;
  JSC::JSBigInt *v71;
  uint64_t v72;
  BOOL v73;
  double v74;
  double v75;
  double v76;
  int **v77;
  int **v78;
  JSC::VM *v79;
  JSC::JSRopeString *v80;
  WTF *v81;
  JSC::JSObject *v82;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v79 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19883FD84);
  }
  v17 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v19 = *a2;
  if (v19 == 128)
  {
    v52 = *((__int16 *)a2 + 1);
    v21 = 1073741760;
    if (v52 <= 63)
      v22 = *((__int16 *)a2 + 1);
    else
      v22 = v52 + 1073741760;
    v23 = *((__int16 *)a2 + 2);
    if (v23 > 63)
      v23 += 1073741760;
    v24 = *((__int16 *)a2 + 3);
    if (v24 <= 63)
      goto LABEL_14;
LABEL_101:
    v24 += v21;
    goto LABEL_102;
  }
  if (v19 != 130)
  {
    v20 = (char)a2[1];
    v21 = 1073741808;
    if (v20 <= 15)
      v22 = (char)a2[1];
    else
      v22 = v20 + 1073741808;
    v23 = (char)a2[2];
    if (v23 > 15)
      v23 += 1073741808;
    v24 = (char)a2[3];
    if (v24 < 16)
      goto LABEL_14;
    goto LABEL_101;
  }
  v22 = *(_DWORD *)(a2 + 2);
  v23 = *(_DWORD *)(a2 + 6);
  v24 = *(_DWORD *)(a2 + 10);
LABEL_102:
  if (v24 < 0x40000000)
  {
LABEL_14:
    v25 = (unint64_t *)(a1 + 8 * v24);
    goto LABEL_15;
  }
  v53 = v24 - 0x40000000;
  if (v53 >= *(_DWORD *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x198840220);
  }
  v25 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v53);
LABEL_15:
  v26 = *v25;
  if (v23 >= 0x40000000)
  {
    v49 = v23 - 0x40000000;
    if (v49 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988401B0);
    }
    v27 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v49);
  }
  else
  {
    v27 = (unint64_t *)(a1 + 8 * v23);
  }
  v28 = *v27;
  v29 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v26 < 0xFFFE000000000000)
  {
    if (v26 >> 49)
      v36 = v28 >> 49 == 0;
    else
      v36 = 1;
    if (!v36)
      goto LABEL_20;
  }
  else
  {
    if (v28 >= 0xFFFE000000000000)
    {
      v33 = (int)v26 < (int)v28;
      goto LABEL_28;
    }
    if (v28 >> 49)
    {
LABEL_20:
      v30 = (double)(int)v26;
      if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v30 = v26 - 0x2000000000000;
      v31 = (double)(int)v28;
      if (v28 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v31 = v28 - 0x2000000000000;
      v32 = v30 < v31;
      goto LABEL_25;
    }
  }
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    v37 = v28 & 0xFFFE000000000002;
  }
  else
  {
    v37 = v28 & 0xFFFE000000000002;
    if (*(_BYTE *)(v26 + 5) == 2 && v37 == 0)
    {
      if (*(_BYTE *)(v28 + 5) == 2)
      {
        v50 = (int **)(v26 + 8);
        if ((*(_BYTE *)(v26 + 8) & 1) != 0)
          v50 = JSC::JSRopeString::resolveRope(v26, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v29 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v33 = 0;
        }
        else
        {
          v51 = (int **)(v28 + 8);
          if ((*(_BYTE *)(v28 + 8) & 1) != 0)
            v51 = JSC::JSRopeString::resolveRope(v28, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          if (*((_DWORD *)v29 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            v33 = 0;
          }
          else
          {
            v33 = WTF::codePointCompareLessThan((WTF *)v50, (const WTF::String *)v51, a3);
          }
        }
        goto LABEL_28;
      }
      v81 = 0;
      goto LABEL_213;
    }
  }
  v81 = 0;
  if (!v37)
LABEL_213:
    v28 = JSC::JSCell::toPrimitive(v28, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v80 = (JSC::JSRopeString *)v28;
  if (*((_DWORD *)v29 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v41 = 0;
LABEL_108:
    v39 = 0.0;
    goto LABEL_55;
  }
  if ((v28 & 0xFFFE000000000002) != 0)
  {
    if (v28 >= 0xFFFE000000000000)
    {
      v39 = (double)(int)v28;
      goto LABEL_51;
    }
    if (v28 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v39 = v28 - 0x2000000000000;
      goto LABEL_51;
    }
  }
  else if (*(_BYTE *)(v28 + 5) == 3)
  {
    v41 = 1;
    goto LABEL_108;
  }
  JSC::JSValue::toNumberSlowCase(&v80, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v39 = *(double *)a9.i64;
LABEL_51:
  if (*((_DWORD *)v29 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v41 = 0;
  }
  else
  {
    v40 = ((unint64_t)v80 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v80 + 5) == 2;
    v41 = !v40;
  }
LABEL_55:
  if (*((_DWORD *)v29 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_115;
  }
  v42 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v26 & 0xFFFE000000000002) == 0)
    v26 = JSC::JSCell::toPrimitive(v26, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v81 = (WTF *)v26;
  if (*((_DWORD *)v42 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v42, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v45 = 0;
      goto LABEL_113;
    }
    v26 = (unint64_t)v81;
  }
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    if (v26 >= 0xFFFE000000000000)
    {
      v43 = (double)(int)v26;
      goto LABEL_62;
    }
    if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v43 = v26 - 0x2000000000000;
      goto LABEL_62;
    }
LABEL_61:
    JSC::JSValue::toNumberSlowCase(&v81, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v43 = *(double *)a9.i64;
LABEL_62:
    if (*((_DWORD *)v42 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v42, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v45 = 0;
    }
    else
    {
      v44 = ((unint64_t)v81 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v81 + 5) == 2;
      v45 = !v44;
    }
    goto LABEL_66;
  }
  if (*(_BYTE *)(v26 + 5) != 3)
    goto LABEL_61;
  v45 = 1;
LABEL_113:
  v43 = 0.0;
LABEL_66:
  if (*((_DWORD *)v29 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v29, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_115;
  }
  v46 = v45 | v41;
  v47 = v81;
  if (v46 == 1)
  {
    if (((unint64_t)v81 & 0xFFFE000000000002) != 0)
    {
      v48 = (unint64_t)v80;
    }
    else
    {
      v48 = (unint64_t)v80;
      if (*((_BYTE *)v81 + 5) == 3)
      {
        v54 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v55 = 3;
        goto LABEL_128;
      }
    }
    if ((v48 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v48 + 5) != 3)
    {
      v32 = v43 < v39;
LABEL_25:
      v33 = v32;
      goto LABEL_28;
    }
    v54 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (((unint64_t)v81 & 0xFFFE000000000002) != 0)
    {
      v82 = v81;
      if ((unint64_t)v81 >= 0xFFFE000000000000)
      {
        v65 = (double)(int)v81;
        goto LABEL_147;
      }
      if ((unint64_t)v81 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v65 = (char *)v81 - 0x2000000000000;
LABEL_147:
        if (*((_DWORD *)v54 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v54, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v64 = 1;
        }
        else
        {
          v64 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v48, v65);
        }
LABEL_149:
        if (!*((_DWORD *)v54 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v54, v66, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if (v64 == 2)
          {
            v64 = 3;
          }
          else if (v64 == 3)
          {
            v64 = 2;
          }
          goto LABEL_176;
        }
        goto LABEL_115;
      }
LABEL_180:
      JSC::JSValue::toNumberSlowCase(&v82, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v65 = v76;
      goto LABEL_147;
    }
    v55 = *((unsigned __int8 *)v81 + 5);
LABEL_128:
    v56 = v48 & 0xFFFE000000000002;
    if (v55 == 3 && !v56)
    {
      if (*(_BYTE *)(v48 + 5) == 3)
      {
        v73 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v81, v48) == 3;
        goto LABEL_177;
      }
      v82 = (JSC::JSObject *)v48;
      goto LABEL_132;
    }
    if (v55 == 3)
    {
      v82 = (JSC::JSObject *)v48;
      if (v56)
      {
        if (v48 >= 0xFFFE000000000000)
        {
          v75 = (double)(int)v48;
          goto LABEL_173;
        }
        if (v48 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v75 = v48 - 0x2000000000000;
          goto LABEL_173;
        }
LABEL_172:
        JSC::JSValue::toNumberSlowCase(&v82, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v75 = v74;
LABEL_173:
        if (*((_DWORD *)v54 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v54, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v64 = 1;
        }
        else
        {
          v64 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v47, v75);
        }
LABEL_175:
        if (!*((_DWORD *)v54 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v54, v62, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_176:
          v73 = v64 == 3;
LABEL_177:
          v33 = v73;
          goto LABEL_28;
        }
LABEL_115:
        v33 = 0;
        goto LABEL_28;
      }
LABEL_132:
      if (*(_BYTE *)(v48 + 5) == 2)
      {
        v57 = (int **)(v48 + 8);
        if ((*(_BYTE *)(v48 + 8) & 1) != 0)
          v57 = JSC::JSRopeString::resolveRope(v48, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v54 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v54, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_200;
        }
        v58 = *v57;
        if (*v57)
        {
          v59 = *((_QWORD *)v58 + 1);
          v60 = v58[1] | ((unint64_t)((v58[4] >> 2) & 1) << 32);
        }
        else
        {
          v59 = 0;
          v60 = 0x100000000;
        }
        v61 = JSC::JSBigInt::stringToBigInt(v10, v59, v60, a4, a5);
        v63 = (uint64_t)v61;
        if (*((_DWORD *)v54 + 20))
        {
          v64 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v54, v62, (uint64_t)a3, a4, a5, a6, a7, a8) || !v63)
            goto LABEL_175;
        }
        else if (!v61)
        {
LABEL_200:
          v64 = 1;
          goto LABEL_175;
        }
        if ((v63 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v63 + 5) == 3)
        {
          v64 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v47, v63);
          goto LABEL_175;
        }
      }
      goto LABEL_172;
    }
    v82 = v81;
    if (v55 != 2)
      goto LABEL_180;
    v67 = (int **)((char *)v81 + 8);
    if ((*((_BYTE *)v81 + 8) & 1) != 0)
      v67 = JSC::JSRopeString::resolveRope((unint64_t)v81, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v54 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v54, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_206:
      v64 = 1;
      goto LABEL_149;
    }
    v68 = *v67;
    if (*v67)
    {
      v69 = *((_QWORD *)v68 + 1);
      v70 = v68[1] | ((unint64_t)((v68[4] >> 2) & 1) << 32);
    }
    else
    {
      v69 = 0;
      v70 = 0x100000000;
    }
    v71 = JSC::JSBigInt::stringToBigInt(v10, v69, v70, a4, a5);
    v72 = (uint64_t)v71;
    if (*((_DWORD *)v54 + 20))
    {
      v64 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v54, v66, (uint64_t)a3, a4, a5, a6, a7, a8) || !v72)
        goto LABEL_149;
    }
    else if (!v71)
    {
      goto LABEL_206;
    }
    if ((v72 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v72 + 5) == 3)
    {
      v64 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v48, v72);
      goto LABEL_149;
    }
    goto LABEL_180;
  }
  v77 = (int **)((char *)v81 + 8);
  if ((*((_BYTE *)v81 + 8) & 1) != 0)
    v77 = JSC::JSRopeString::resolveRope((unint64_t)v81, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v78 = (int **)((char *)v80 + 8);
  if ((*((_BYTE *)v80 + 8) & 1) != 0)
    v78 = JSC::JSRopeString::resolveRope((unint64_t)v80, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v33 = WTF::codePointCompareLessThan((WTF *)v77, (const WTF::String *)v78, a3);
LABEL_28:
  if (v33)
    v34 = 7;
  else
    v34 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v79, "LLIntSlowPaths", v17);
  if (*((_QWORD *)v79 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v34;
  return (__int128 *)v17;
}

__int128 *llint_slow_path_greatereq(uint64_t a1, unint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  int64_t v7;
  uint64_t v8;
  const WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  JSC::VM *v21;
  BOOL v22;
  unint64_t v23;
  int **v25;
  int **v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  double v33;
  BOOL v34;
  uint64_t v35;
  double v37;
  _BOOL4 v38;
  int v39;
  JSC::VM *v40;
  _BOOL4 v41;
  int v42;
  int **v43;
  int **v44;
  JSC::JSRopeString *v45;
  unint64_t v46;
  BOOL v47;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v49;
  int v50;
  unint64_t v51;
  int **v52;
  int *v53;
  uint64_t v54;
  unint64_t v55;
  JSC::JSBigInt *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  double v60;
  uint64_t v61;
  int **v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  JSC::JSBigInt *v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  JSC::VM *v75;
  WTF *v76;
  JSC::JSRopeString *v77;
  JSC::JSObject *v78;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(JSC::JSGlobalObject **)(v4 + 8);
  v6 = *(JSC::VM **)(v4 + 72);
  *((_QWORD *)v6 + 5) = a1;
  v75 = v6;
  JSC::CallFrame::setCurrentVPC(a1, a2);
  v7 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpBeloweq>(v2);
  v16 = v7;
  if ((int)v8 >= 0x40000000)
  {
    v28 = *(_QWORD *)(a1 + 16);
    v29 = (v8 - 0x40000000);
    if (v29 >= *(unsigned int *)(v28 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198840B18);
    }
    v17 = (unint64_t *)(*(_QWORD *)(v28 + 160) + 8 * v29);
  }
  else
  {
    v17 = (unint64_t *)(a1 + 8 * (int)v8);
  }
  v18 = *v17;
  if (SHIDWORD(v7) >= 0x40000000)
  {
    v30 = *(_QWORD *)(a1 + 16);
    v31 = (HIDWORD(v7) - 0x40000000);
    if (v31 >= *(unsigned int *)(v30 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198840B20);
    }
    v19 = (unint64_t *)(*(_QWORD *)(v30 + 160) + 8 * v31);
  }
  else
  {
    v19 = (unint64_t *)(a1 + 8 * (v7 >> 32));
  }
  v20 = *v19;
  v21 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if (v18 >= 0xFFFE000000000000)
  {
    if (v20 >= 0xFFFE000000000000)
    {
      v27 = (int)v18 <= (int)v20;
      goto LABEL_39;
    }
    if (v20 >> 49)
    {
LABEL_31:
      v32 = (double)(int)v18;
      if (v18 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v32 = v18 - 0x2000000000000;
      v33 = (double)(int)v20;
      if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v33 = v20 - 0x2000000000000;
      v34 = v32 > v33;
      goto LABEL_36;
    }
  }
  else
  {
    if (v18 >> 49)
      v22 = v20 >> 49 == 0;
    else
      v22 = 1;
    if (!v22)
      goto LABEL_31;
  }
  if ((v18 & 0xFFFE000000000002) != 0)
  {
    v23 = v20 & 0xFFFE000000000002;
    goto LABEL_48;
  }
  v23 = v20 & 0xFFFE000000000002;
  if (*(_BYTE *)(v18 + 5) != 2 || v23 != 0)
  {
LABEL_48:
    v77 = 0;
    if (v23)
    {
LABEL_49:
      v76 = (WTF *)v20;
      if (*((_DWORD *)v21 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
      {
        v39 = 0;
LABEL_98:
        v37 = 0.0;
        goto LABEL_57;
      }
      if ((v20 & 0xFFFE000000000002) != 0)
      {
        if (v20 >= 0xFFFE000000000000)
        {
          v37 = (double)(int)v20;
          goto LABEL_53;
        }
        if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v37 = v20 - 0x2000000000000;
          goto LABEL_53;
        }
      }
      else if (*(_BYTE *)(v20 + 5) == 3)
      {
        v39 = 1;
        goto LABEL_98;
      }
      JSC::JSValue::toNumberSlowCase(&v76, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
      v37 = *(double *)v15.i64;
LABEL_53:
      if (*((_DWORD *)v21 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
      {
        v39 = 0;
      }
      else
      {
        v38 = ((unint64_t)v76 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v76 + 5) == 2;
        v39 = !v38;
      }
LABEL_57:
      if (*((_DWORD *)v21 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
      {
        goto LABEL_105;
      }
      v40 = (JSC::VM *)*((_QWORD *)v5 + 7);
      if ((v18 & 0xFFFE000000000002) == 0)
        v18 = JSC::JSCell::toPrimitive(v18, (JSC::VM **)v5, (JSC::Structure *)1, v10, v11, v12, v13, v14);
      v77 = (JSC::JSRopeString *)v18;
      if (*((_DWORD *)v40 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v40, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
          v42 = 0;
          goto LABEL_103;
        }
        v18 = (unint64_t)v77;
      }
      if ((v18 & 0xFFFE000000000002) != 0)
      {
        if (v18 >= 0xFFFE000000000000)
        {
          *(double *)v15.i64 = (double)(int)v18;
          goto LABEL_64;
        }
        if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v15.i64[0] = v18 - 0x2000000000000;
          goto LABEL_64;
        }
LABEL_63:
        JSC::JSValue::toNumberSlowCase(&v77, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
LABEL_64:
        if (*((_DWORD *)v40 + 20)
          && (v74 = v15.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v40, v8, (uint64_t)v9, v10, v11, v12, v13, v14), v15.i64[0] = v74, hasExceptionsAfterHandlingTraps))
        {
          v42 = 0;
        }
        else
        {
          v41 = ((unint64_t)v77 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v77 + 5) == 2;
          v42 = !v41;
        }
LABEL_68:
        if (*((_DWORD *)v21 + 20))
        {
          v73 = v15.i64[0];
          v47 = JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
          v15.i64[0] = v73;
          if (v47)
            goto LABEL_105;
        }
        if ((v42 | v39) != 1)
        {
          v43 = (int **)((char *)v76 + 8);
          if ((*((_BYTE *)v76 + 8) & 1) != 0)
            v43 = JSC::JSRopeString::resolveRope((unint64_t)v76, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
          v44 = (int **)((char *)v77 + 8);
          if ((*((_BYTE *)v77 + 8) & 1) != 0)
            v44 = JSC::JSRopeString::resolveRope((unint64_t)v77, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
          v27 = WTF::codePointCompareLessThan((WTF *)v43, (const WTF::String *)v44, v9) ^ 1;
          goto LABEL_39;
        }
        v45 = v77;
        if (((unint64_t)v77 & 0xFFFE000000000002) != 0)
        {
          v46 = (unint64_t)v76;
        }
        else
        {
          v46 = (unint64_t)v76;
          if (*((_BYTE *)v77 + 5) == 3)
          {
            v49 = (JSC::VM *)*((_QWORD *)v5 + 7);
            v50 = 3;
            goto LABEL_112;
          }
        }
        if ((v46 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v46 + 5) != 3)
        {
          v34 = *(double *)v15.i64 > v37;
LABEL_36:
          v27 = !v34;
          goto LABEL_39;
        }
        v49 = (JSC::VM *)*((_QWORD *)v5 + 7);
        if (((unint64_t)v77 & 0xFFFE000000000002) != 0)
        {
          v78 = v77;
          if ((unint64_t)v77 >= 0xFFFE000000000000)
          {
            v60 = (double)(int)v77;
            goto LABEL_131;
          }
          if ((unint64_t)v77 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            *(_QWORD *)&v60 = (char *)v77 - 0x2000000000000;
LABEL_131:
            if (*((_DWORD *)v49 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v49, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
            {
              v59 = 1;
            }
            else
            {
              v59 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v46, v60);
            }
LABEL_133:
            if (!*((_DWORD *)v49 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v49, v61, (uint64_t)v9, v10, v11, v12, v13, v14))
            {
              if (v59 == 2)
              {
                v59 = 3;
              }
              else if (v59 == 3)
              {
                v59 = 2;
              }
              goto LABEL_161;
            }
            goto LABEL_105;
          }
LABEL_167:
          JSC::JSValue::toNumberSlowCase(&v78, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
          v60 = v72;
          goto LABEL_131;
        }
        v50 = *((unsigned __int8 *)v77 + 5);
LABEL_112:
        v51 = v46 & 0xFFFE000000000002;
        if (v50 == 3 && !v51)
        {
          if (*(_BYTE *)(v46 + 5) == 3)
          {
            v68 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v77, v46);
            v69 = v68 == 3 || v68 == 0;
            goto LABEL_164;
          }
          v78 = (JSC::JSObject *)v46;
          goto LABEL_116;
        }
        if (v50 == 3)
        {
          v78 = (JSC::JSObject *)v46;
          if (v51)
          {
            if (v46 >= 0xFFFE000000000000)
            {
              v71 = (double)(int)v46;
              goto LABEL_158;
            }
            if (v46 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              *(_QWORD *)&v71 = v46 - 0x2000000000000;
              goto LABEL_158;
            }
LABEL_157:
            JSC::JSValue::toNumberSlowCase(&v78, v5, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
            v71 = v70;
LABEL_158:
            if (*((_DWORD *)v49 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v49, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
            {
              v59 = 1;
            }
            else
            {
              v59 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v45, v71);
            }
LABEL_160:
            if (!*((_DWORD *)v49 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v49, v57, (uint64_t)v9, v10, v11, v12, v13, v14))
            {
LABEL_161:
              v69 = v59 == 3 || v59 == 0;
LABEL_164:
              v27 = v69;
              goto LABEL_39;
            }
LABEL_105:
            v27 = 0;
            goto LABEL_39;
          }
LABEL_116:
          if (*(_BYTE *)(v46 + 5) == 2)
          {
            v52 = (int **)(v46 + 8);
            if ((*(_BYTE *)(v46 + 8) & 1) != 0)
              v52 = JSC::JSRopeString::resolveRope(v46, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
            if (*((_DWORD *)v49 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v49, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
            {
              goto LABEL_185;
            }
            v53 = *v52;
            if (*v52)
            {
              v54 = *((_QWORD *)v53 + 1);
              v55 = v53[1] | ((unint64_t)((v53[4] >> 2) & 1) << 32);
            }
            else
            {
              v54 = 0;
              v55 = 0x100000000;
            }
            v56 = JSC::JSBigInt::stringToBigInt(v5, v54, v55, v10, v11);
            v58 = (uint64_t)v56;
            if (*((_DWORD *)v49 + 20))
            {
              v59 = 1;
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v49, v57, (uint64_t)v9, v10, v11, v12, v13, v14) || !v58)
                goto LABEL_160;
            }
            else if (!v56)
            {
LABEL_185:
              v59 = 1;
              goto LABEL_160;
            }
            if ((v58 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v58 + 5) == 3)
            {
              v59 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v45, v58);
              goto LABEL_160;
            }
          }
          goto LABEL_157;
        }
        v78 = v77;
        if (v50 != 2)
          goto LABEL_167;
        v62 = (int **)((char *)v77 + 8);
        if ((*((_BYTE *)v77 + 8) & 1) != 0)
          v62 = JSC::JSRopeString::resolveRope((unint64_t)v77, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
        if (*((_DWORD *)v49 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v49, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
        {
LABEL_191:
          v59 = 1;
          goto LABEL_133;
        }
        v63 = *v62;
        if (*v62)
        {
          v64 = *((_QWORD *)v63 + 1);
          v65 = v63[1] | ((unint64_t)((v63[4] >> 2) & 1) << 32);
        }
        else
        {
          v64 = 0;
          v65 = 0x100000000;
        }
        v66 = JSC::JSBigInt::stringToBigInt(v5, v64, v65, v10, v11);
        v67 = (uint64_t)v66;
        if (*((_DWORD *)v49 + 20))
        {
          v59 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v49, v61, (uint64_t)v9, v10, v11, v12, v13, v14) || !v67)
            goto LABEL_133;
        }
        else if (!v66)
        {
          goto LABEL_191;
        }
        if ((v67 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v67 + 5) == 3)
        {
          v59 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v46, v67);
          goto LABEL_133;
        }
        goto LABEL_167;
      }
      if (*(_BYTE *)(v18 + 5) != 3)
        goto LABEL_63;
      v42 = 1;
LABEL_103:
      v15.i64[0] = 0;
      goto LABEL_68;
    }
LABEL_183:
    v20 = JSC::JSCell::toPrimitive(v20, (JSC::VM **)v5, (JSC::Structure *)1, v10, v11, v12, v13, v14);
    goto LABEL_49;
  }
  if (*(_BYTE *)(v20 + 5) != 2)
  {
    v77 = 0;
    goto LABEL_183;
  }
  v25 = (int **)(v18 + 8);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    v25 = JSC::JSRopeString::resolveRope(v18, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
  {
    v27 = 0;
  }
  else
  {
    v26 = (int **)(v20 + 8);
    if ((*(_BYTE *)(v20 + 8) & 1) != 0)
      v26 = JSC::JSRopeString::resolveRope(v20, v5, (uint64_t)v9, v10, v15, v11, v12, v13, v14);
    if (*((_DWORD *)v21 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v21, v8, (uint64_t)v9, v10, v11, v12, v13, v14))
    {
      v27 = 0;
    }
    else
    {
      v27 = WTF::codePointCompareLessThan((WTF *)v26, (const WTF::String *)v25, v9) ^ 1;
    }
  }
LABEL_39:
  if (v27)
    v35 = 7;
  else
    v35 = 6;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v5, &v75, "LLIntSlowPaths", v2);
  if (*((_QWORD *)v75 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v35;
  return (__int128 *)v2;
}

__int128 *llint_slow_path_jless(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  JSC::VM *v27;
  BOOL v28;
  BOOL v29;
  int **v30;
  int **v31;
  int v32;
  int v33;
  int v34;
  char v35;
  _BOOL4 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  unsigned int v44;
  unsigned int v45;
  double v46;
  double v47;
  BOOL v48;
  double v49;
  _BOOL4 v50;
  int v51;
  JSC::VM *v52;
  double v53;
  _BOOL4 v54;
  int v55;
  int v56;
  WTF *v57;
  unint64_t v58;
  int **v59;
  int **v60;
  int v61;
  JSC::VM *v62;
  int v63;
  unint64_t v64;
  int **v65;
  int *v66;
  uint64_t v67;
  unint64_t v68;
  JSC::JSBigInt *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  double v73;
  uint64_t v74;
  int **v75;
  int *v76;
  uint64_t v77;
  unint64_t v78;
  JSC::JSBigInt *v79;
  uint64_t v80;
  BOOL v81;
  double v82;
  double v83;
  double v84;
  unsigned __int8 v85[4];
  int v86;
  uint64_t v87;
  int v88;
  JSC::VM *v89;
  JSC::JSRopeString *v90;
  WTF *v91;
  JSC::JSObject *v92;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v89 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198841060);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v43 = *((__int16 *)a2 + 1);
    v20 = v43 + 1073741760;
    if (v43 <= 63)
      v20 = *((__int16 *)a2 + 1);
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((__int16 *)a2 + 3);
  }
  else if (v18 == 130)
  {
    v20 = *(_DWORD *)(a2 + 2);
    v21 = *(_DWORD *)(a2 + 6);
    v22 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v19 = (char)a2[1];
    v20 = v19 + 1073741808;
    if (v19 <= 15)
      v20 = (char)a2[1];
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = (char)a2[3];
  }
  v85[0] = 0;
  v86 = 0;
  v87 = 0;
  v88 = v22;
  if (v20 >= 0x40000000)
  {
    v44 = v20 - 0x40000000;
    if (v44 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19884148CLL);
    }
    v23 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v44);
  }
  else
  {
    v23 = (unint64_t *)(a1 + 8 * v20);
  }
  v24 = *v23;
  if (v21 >= 0x40000000)
  {
    v45 = v21 - 0x40000000;
    if (v45 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198841494);
    }
    v25 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v45);
  }
  else
  {
    v25 = (unint64_t *)(a1 + 8 * v21);
  }
  v26 = *v25;
  v27 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v24 >= 0xFFFE000000000000)
  {
    if (v26 >= 0xFFFE000000000000)
    {
      v32 = (int)v24 < (int)v26;
      goto LABEL_37;
    }
    if (v26 >> 49)
      goto LABEL_63;
  }
  else
  {
    if (v24 >> 49)
      v28 = v26 >> 49 == 0;
    else
      v28 = 1;
    if (!v28)
    {
LABEL_63:
      v46 = (double)(int)v24;
      if (v24 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v46 = v24 - 0x2000000000000;
      v47 = (double)(int)v26;
      if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v47 = v26 - 0x2000000000000;
      v48 = v46 < v47;
      goto LABEL_68;
    }
  }
  if ((v24 & 0xFFFE000000000002) != 0)
  {
    v90 = 0;
  }
  else
  {
    v29 = *(_BYTE *)(v24 + 5) == 2 && (v26 & 0xFFFE000000000002) == 0;
    if (v29 && *(_BYTE *)(v26 + 5) == 2)
    {
      v30 = (int **)(v24 + 8);
      if ((*(_BYTE *)(v24 + 8) & 1) != 0)
        v30 = JSC::JSRopeString::resolveRope(v24, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (*((_DWORD *)v27 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v32 = 0;
      }
      else
      {
        v31 = (int **)(v26 + 8);
        if ((*(_BYTE *)(v26 + 8) & 1) != 0)
          v31 = JSC::JSRopeString::resolveRope(v26, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v27 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v32 = 0;
        }
        else
        {
          v32 = WTF::codePointCompareLessThan((WTF *)v30, (const WTF::String *)v31, a3);
        }
      }
      goto LABEL_37;
    }
    v90 = 0;
    v24 = JSC::JSCell::toPrimitive(v24, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v91 = (WTF *)v24;
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v51 = 0;
LABEL_125:
    v49 = 0.0;
    goto LABEL_80;
  }
  if ((v24 & 0xFFFE000000000002) != 0)
  {
    if (v24 >= 0xFFFE000000000000)
    {
      v49 = (double)(int)v24;
      goto LABEL_76;
    }
    if (v24 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v49 = v24 - 0x2000000000000;
      goto LABEL_76;
    }
  }
  else if (*(_BYTE *)(v24 + 5) == 3)
  {
    v51 = 1;
    goto LABEL_125;
  }
  JSC::JSValue::toNumberSlowCase(&v91, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v49 = *(double *)a9.i64;
LABEL_76:
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v51 = 0;
  }
  else
  {
    v50 = ((unint64_t)v91 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v91 + 5) == 2;
    v51 = !v50;
  }
LABEL_80:
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_132;
  }
  v52 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v26 & 0xFFFE000000000002) == 0)
    v26 = JSC::JSCell::toPrimitive(v26, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v90 = (JSC::JSRopeString *)v26;
  if (*((_DWORD *)v52 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v52, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v55 = 0;
      goto LABEL_130;
    }
    v26 = (unint64_t)v90;
  }
  if ((v26 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v26 + 5) != 3)
      goto LABEL_86;
    v55 = 1;
LABEL_130:
    v53 = 0.0;
    goto LABEL_91;
  }
  if (v26 >= 0xFFFE000000000000)
  {
    v53 = (double)(int)v26;
    goto LABEL_87;
  }
  if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v53 = v26 - 0x2000000000000;
    goto LABEL_87;
  }
LABEL_86:
  JSC::JSValue::toNumberSlowCase(&v90, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v53 = *(double *)a9.i64;
LABEL_87:
  if (*((_DWORD *)v52 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v52, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v55 = 0;
  }
  else
  {
    v54 = ((unint64_t)v90 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v90 + 5) == 2;
    v55 = !v54;
  }
LABEL_91:
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_132;
  }
  v56 = v51 | v55;
  v57 = v91;
  if (v56 == 1)
  {
    if (((unint64_t)v91 & 0xFFFE000000000002) != 0)
    {
      v58 = (unint64_t)v90;
    }
    else
    {
      v58 = (unint64_t)v90;
      if (*((_BYTE *)v91 + 5) == 3)
      {
        v62 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v63 = 3;
        goto LABEL_141;
      }
    }
    if ((v58 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v58 + 5) != 3)
    {
      v48 = v49 < v53;
LABEL_68:
      v32 = v48;
      goto LABEL_37;
    }
    v62 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (((unint64_t)v91 & 0xFFFE000000000002) != 0)
    {
      v92 = v91;
      if ((unint64_t)v91 >= 0xFFFE000000000000)
      {
        v73 = (double)(int)v91;
        goto LABEL_160;
      }
      if ((unint64_t)v91 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v73 = (char *)v91 - 0x2000000000000;
LABEL_160:
        if (*((_DWORD *)v62 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v72 = 1;
        }
        else
        {
          v72 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v58, v73);
        }
LABEL_162:
        if (!*((_DWORD *)v62 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v62, v74, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if (v72 == 2)
          {
            v72 = 3;
          }
          else if (v72 == 3)
          {
            v72 = 2;
          }
          goto LABEL_190;
        }
        goto LABEL_132;
      }
LABEL_194:
      JSC::JSValue::toNumberSlowCase(&v92, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v73 = v84;
      goto LABEL_160;
    }
    v63 = *((unsigned __int8 *)v91 + 5);
LABEL_141:
    v64 = v58 & 0xFFFE000000000002;
    if (v63 == 3 && !v64)
    {
      if (*(_BYTE *)(v58 + 5) == 3)
      {
        v81 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v91, v58) == 3;
        goto LABEL_191;
      }
      v92 = (JSC::JSObject *)v58;
      goto LABEL_145;
    }
    if (v63 == 3)
    {
      v92 = (JSC::JSObject *)v58;
      if (v64)
      {
        if (v58 >= 0xFFFE000000000000)
        {
          v83 = (double)(int)v58;
          goto LABEL_187;
        }
        if (v58 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v83 = v58 - 0x2000000000000;
          goto LABEL_187;
        }
LABEL_186:
        JSC::JSValue::toNumberSlowCase(&v92, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v83 = v82;
LABEL_187:
        if (*((_DWORD *)v62 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v72 = 1;
        }
        else
        {
          v72 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v57, v83);
        }
LABEL_189:
        if (!*((_DWORD *)v62 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v62, v70, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_190:
          v81 = v72 == 3;
LABEL_191:
          v32 = v81;
          goto LABEL_37;
        }
LABEL_132:
        v32 = 0;
        goto LABEL_37;
      }
LABEL_145:
      if (*(_BYTE *)(v58 + 5) == 2)
      {
        v65 = (int **)(v58 + 8);
        if ((*(_BYTE *)(v58 + 8) & 1) != 0)
          v65 = JSC::JSRopeString::resolveRope(v58, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v62 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_210;
        }
        v66 = *v65;
        if (*v65)
        {
          v67 = *((_QWORD *)v66 + 1);
          v68 = v66[1] | ((unint64_t)((v66[4] >> 2) & 1) << 32);
        }
        else
        {
          v67 = 0;
          v68 = 0x100000000;
        }
        v69 = JSC::JSBigInt::stringToBigInt(v10, v67, v68, a4, a5);
        v71 = (uint64_t)v69;
        if (*((_DWORD *)v62 + 20))
        {
          v72 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v62, v70, (uint64_t)a3, a4, a5, a6, a7, a8) || !v71)
            goto LABEL_189;
        }
        else if (!v69)
        {
LABEL_210:
          v72 = 1;
          goto LABEL_189;
        }
        if ((v71 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v71 + 5) == 3)
        {
          v72 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v57, v71);
          goto LABEL_189;
        }
      }
      goto LABEL_186;
    }
    v92 = v91;
    if (v63 != 2)
      goto LABEL_194;
    v75 = (int **)((char *)v91 + 8);
    if ((*((_BYTE *)v91 + 8) & 1) != 0)
      v75 = JSC::JSRopeString::resolveRope((unint64_t)v91, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v62 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_216:
      v72 = 1;
      goto LABEL_162;
    }
    v76 = *v75;
    if (*v75)
    {
      v77 = *((_QWORD *)v76 + 1);
      v78 = v76[1] | ((unint64_t)((v76[4] >> 2) & 1) << 32);
    }
    else
    {
      v77 = 0;
      v78 = 0x100000000;
    }
    v79 = JSC::JSBigInt::stringToBigInt(v10, v77, v78, a4, a5);
    v80 = (uint64_t)v79;
    if (*((_DWORD *)v62 + 20))
    {
      v72 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v62, v74, (uint64_t)a3, a4, a5, a6, a7, a8) || !v80)
        goto LABEL_162;
    }
    else if (!v79)
    {
      goto LABEL_216;
    }
    if ((v80 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v80 + 5) == 3)
    {
      v72 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v58, v80);
      goto LABEL_162;
    }
    goto LABEL_194;
  }
  v59 = (int **)((char *)v91 + 8);
  if ((*((_BYTE *)v91 + 8) & 1) != 0)
    v59 = JSC::JSRopeString::resolveRope((unint64_t)v91, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v60 = (int **)((char *)v90 + 8);
  if ((*((_BYTE *)v90 + 8) & 1) != 0)
    v60 = JSC::JSRopeString::resolveRope((unint64_t)v90, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v32 = WTF::codePointCompareLessThan((WTF *)v59, (const WTF::String *)v60, a3);
LABEL_37:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v89, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v89 + 2))
    return &xmmword_1ECF4C7C0;
  if (v32)
  {
    if (JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v85))
      v61 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v85);
    else
      v61 = JSC::CodeBlock::outOfLineJumpOffset(v9, (unint64_t)a2);
    v41 = v61;
  }
  else
  {
    v33 = *a2;
    v34 = v33;
    if ((v33 | 2) == 0x82)
      v34 = a2[1];
    v35 = v33 == 128;
    v36 = v33 == 130;
    if (v33 == 130)
      v35 = 2;
    v28 = v33 == 128;
    v37 = JSC::opcodeLengths[v34];
    v38 = v28 || v36;
    v39 = v37 << v35;
    v28 = v38 == 0;
    v40 = 1;
    if (!v28)
      v40 = 2;
    v41 = v39 + v40;
  }
  return (__int128 *)&a2[v41];
}

__int128 *llint_slow_path_jnless(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  JSC::VM *v28;
  BOOL v29;
  BOOL v30;
  int **v31;
  int **v32;
  char v33;
  int v34;
  int v35;
  char v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v44;
  double v45;
  double v46;
  BOOL v47;
  double v48;
  _BOOL4 v49;
  int v50;
  JSC::VM *v51;
  double v52;
  _BOOL4 v53;
  int v54;
  int v55;
  WTF *v56;
  unint64_t v57;
  int **v58;
  int **v59;
  int v60;
  unint64_t v61;
  JSC::VM *v62;
  int v63;
  unint64_t v64;
  int **v65;
  int *v66;
  uint64_t v67;
  unint64_t v68;
  JSC::JSBigInt *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  double v73;
  uint64_t v74;
  int **v75;
  int *v76;
  uint64_t v77;
  unint64_t v78;
  JSC::JSBigInt *v79;
  uint64_t v80;
  BOOL v81;
  double v82;
  double v83;
  double v84;
  JSC::VM *v85;
  JSC::JSRopeString *v86;
  WTF *v87;
  JSC::JSObject *v88;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v85 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198841A34);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((__int16 *)a2 + 3);
    if (v19 <= 63)
      goto LABEL_11;
LABEL_112:
    v60 = v19 + v20;
    goto LABEL_113;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = (char)a2[3];
    if (v19 <= 15)
    {
LABEL_11:
      v23 = v19;
LABEL_12:
      v24 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_112;
  }
  v60 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_113:
  v23 = v60;
  if (v60 < 0x40000000)
    goto LABEL_12;
  v61 = (v60 - 0x40000000);
  if (v61 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x198841EACLL);
  }
  v24 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v61);
LABEL_13:
  v25 = *v24;
  if (v21 >= 0x40000000)
  {
    v44 = v21 - 0x40000000;
    if (v44 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198841E3CLL);
    }
    v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v44);
  }
  else
  {
    v26 = (unint64_t *)(a1 + 8 * v21);
  }
  v27 = *v26;
  v28 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v25 >= 0xFFFE000000000000)
  {
    if (v27 >= 0xFFFE000000000000)
    {
      v33 = (int)v25 < (int)v27;
      goto LABEL_35;
    }
    if (v27 >> 49)
      goto LABEL_57;
  }
  else
  {
    if (v25 >> 49)
      v29 = v27 >> 49 == 0;
    else
      v29 = 1;
    if (!v29)
    {
LABEL_57:
      v45 = (double)(int)v25;
      if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v45 = v25 - 0x2000000000000;
      v46 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v46 = v27 - 0x2000000000000;
      v47 = v45 < v46;
      goto LABEL_62;
    }
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    v86 = 0;
  }
  else
  {
    v30 = *(_BYTE *)(v25 + 5) == 2 && (v27 & 0xFFFE000000000002) == 0;
    if (v30 && *(_BYTE *)(v27 + 5) == 2)
    {
      v31 = (int **)(v25 + 8);
      if ((*(_BYTE *)(v25 + 8) & 1) != 0)
        v31 = JSC::JSRopeString::resolveRope(v25, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (*((_DWORD *)v28 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v33 = 0;
      }
      else
      {
        v32 = (int **)(v27 + 8);
        if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          v32 = JSC::JSRopeString::resolveRope(v27, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v28 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v33 = 0;
        }
        else
        {
          v33 = WTF::codePointCompareLessThan((WTF *)v31, (const WTF::String *)v32, a3);
        }
      }
      goto LABEL_35;
    }
    v86 = 0;
    v25 = JSC::JSCell::toPrimitive(v25, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v87 = (WTF *)v25;
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v50 = 0;
LABEL_123:
    v48 = 0.0;
    goto LABEL_74;
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    if (v25 >= 0xFFFE000000000000)
    {
      v48 = (double)(int)v25;
      goto LABEL_70;
    }
    if (v25 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v48 = v25 - 0x2000000000000;
      goto LABEL_70;
    }
  }
  else if (*(_BYTE *)(v25 + 5) == 3)
  {
    v50 = 1;
    goto LABEL_123;
  }
  JSC::JSValue::toNumberSlowCase(&v87, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v48 = *(double *)a9.i64;
LABEL_70:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v50 = 0;
  }
  else
  {
    v49 = ((unint64_t)v87 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v87 + 5) == 2;
    v50 = !v49;
  }
LABEL_74:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_130;
  }
  v51 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v27 & 0xFFFE000000000002) == 0)
    v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v86 = (JSC::JSRopeString *)v27;
  if (*((_DWORD *)v51 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v54 = 0;
      goto LABEL_128;
    }
    v27 = (unint64_t)v86;
  }
  if ((v27 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v27 + 5) != 3)
      goto LABEL_80;
    v54 = 1;
LABEL_128:
    v52 = 0.0;
    goto LABEL_85;
  }
  if (v27 >= 0xFFFE000000000000)
  {
    v52 = (double)(int)v27;
    goto LABEL_81;
  }
  if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v52 = v27 - 0x2000000000000;
    goto LABEL_81;
  }
LABEL_80:
  JSC::JSValue::toNumberSlowCase(&v86, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v52 = *(double *)a9.i64;
LABEL_81:
  if (*((_DWORD *)v51 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v54 = 0;
  }
  else
  {
    v53 = ((unint64_t)v86 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v86 + 5) == 2;
    v54 = !v53;
  }
LABEL_85:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_130;
  }
  v55 = v50 | v54;
  v56 = v87;
  if (v55 == 1)
  {
    if (((unint64_t)v87 & 0xFFFE000000000002) != 0)
    {
      v57 = (unint64_t)v86;
    }
    else
    {
      v57 = (unint64_t)v86;
      if (*((_BYTE *)v87 + 5) == 3)
      {
        v62 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v63 = 3;
        goto LABEL_138;
      }
    }
    if ((v57 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v57 + 5) != 3)
    {
      v47 = v48 < v52;
LABEL_62:
      v33 = v47;
      goto LABEL_35;
    }
    v62 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (((unint64_t)v87 & 0xFFFE000000000002) != 0)
    {
      v88 = v87;
      if ((unint64_t)v87 >= 0xFFFE000000000000)
      {
        v73 = (double)(int)v87;
        goto LABEL_157;
      }
      if ((unint64_t)v87 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v73 = (char *)v87 - 0x2000000000000;
LABEL_157:
        if (*((_DWORD *)v62 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v72 = 1;
        }
        else
        {
          v72 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v57, v73);
        }
LABEL_159:
        if (!*((_DWORD *)v62 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v62, v74, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if (v72 == 2)
          {
            v72 = 3;
          }
          else if (v72 == 3)
          {
            v72 = 2;
          }
          goto LABEL_187;
        }
        goto LABEL_130;
      }
LABEL_191:
      JSC::JSValue::toNumberSlowCase(&v88, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v73 = v84;
      goto LABEL_157;
    }
    v63 = *((unsigned __int8 *)v87 + 5);
LABEL_138:
    v64 = v57 & 0xFFFE000000000002;
    if (v63 == 3 && !v64)
    {
      if (*(_BYTE *)(v57 + 5) == 3)
      {
        v81 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v87, v57) == 3;
        goto LABEL_188;
      }
      v88 = (JSC::JSObject *)v57;
      goto LABEL_142;
    }
    if (v63 == 3)
    {
      v88 = (JSC::JSObject *)v57;
      if (v64)
      {
        if (v57 >= 0xFFFE000000000000)
        {
          v83 = (double)(int)v57;
          goto LABEL_184;
        }
        if (v57 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v83 = v57 - 0x2000000000000;
          goto LABEL_184;
        }
LABEL_183:
        JSC::JSValue::toNumberSlowCase(&v88, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v83 = v82;
LABEL_184:
        if (*((_DWORD *)v62 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v72 = 1;
        }
        else
        {
          v72 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v56, v83);
        }
LABEL_186:
        if (!*((_DWORD *)v62 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v62, v70, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_187:
          v81 = v72 == 3;
LABEL_188:
          v33 = v81;
          goto LABEL_35;
        }
LABEL_130:
        v33 = 0;
        goto LABEL_35;
      }
LABEL_142:
      if (*(_BYTE *)(v57 + 5) == 2)
      {
        v65 = (int **)(v57 + 8);
        if ((*(_BYTE *)(v57 + 8) & 1) != 0)
          v65 = JSC::JSRopeString::resolveRope(v57, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v62 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_206;
        }
        v66 = *v65;
        if (*v65)
        {
          v67 = *((_QWORD *)v66 + 1);
          v68 = v66[1] | ((unint64_t)((v66[4] >> 2) & 1) << 32);
        }
        else
        {
          v67 = 0;
          v68 = 0x100000000;
        }
        v69 = JSC::JSBigInt::stringToBigInt(v10, v67, v68, a4, a5);
        v71 = (uint64_t)v69;
        if (*((_DWORD *)v62 + 20))
        {
          v72 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v62, v70, (uint64_t)a3, a4, a5, a6, a7, a8) || !v71)
            goto LABEL_186;
        }
        else if (!v69)
        {
LABEL_206:
          v72 = 1;
          goto LABEL_186;
        }
        if ((v71 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v71 + 5) == 3)
        {
          v72 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v56, v71);
          goto LABEL_186;
        }
      }
      goto LABEL_183;
    }
    v88 = v87;
    if (v63 != 2)
      goto LABEL_191;
    v75 = (int **)((char *)v87 + 8);
    if ((*((_BYTE *)v87 + 8) & 1) != 0)
      v75 = JSC::JSRopeString::resolveRope((unint64_t)v87, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v62 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_212:
      v72 = 1;
      goto LABEL_159;
    }
    v76 = *v75;
    if (*v75)
    {
      v77 = *((_QWORD *)v76 + 1);
      v78 = v76[1] | ((unint64_t)((v76[4] >> 2) & 1) << 32);
    }
    else
    {
      v77 = 0;
      v78 = 0x100000000;
    }
    v79 = JSC::JSBigInt::stringToBigInt(v10, v77, v78, a4, a5);
    v80 = (uint64_t)v79;
    if (*((_DWORD *)v62 + 20))
    {
      v72 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v62, v74, (uint64_t)a3, a4, a5, a6, a7, a8) || !v80)
        goto LABEL_159;
    }
    else if (!v79)
    {
      goto LABEL_212;
    }
    if ((v80 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v80 + 5) == 3)
    {
      v72 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v57, v80);
      goto LABEL_159;
    }
    goto LABEL_191;
  }
  v58 = (int **)((char *)v87 + 8);
  if ((*((_BYTE *)v87 + 8) & 1) != 0)
    v58 = JSC::JSRopeString::resolveRope((unint64_t)v87, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v59 = (int **)((char *)v86 + 8);
  if ((*((_BYTE *)v86 + 8) & 1) != 0)
    v59 = JSC::JSRopeString::resolveRope((unint64_t)v86, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v33 = WTF::codePointCompareLessThan((WTF *)v58, (const WTF::String *)v59, a3);
LABEL_35:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v85, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v85 + 2))
    return &xmmword_1ECF4C7C0;
  if ((v33 & 1) != 0)
  {
    v34 = *a2;
    v35 = v34;
    if ((v34 | 2) == 0x82)
      v35 = a2[1];
    v36 = v34 == 128;
    v37 = v34 == 130;
    if (v34 == 130)
      v36 = 2;
    v29 = v34 == 128;
    v38 = JSC::opcodeLengths[v35];
    v39 = v29 || v37;
    v40 = v38 << v36;
    v29 = v39 == 0;
    v41 = 1;
    if (!v29)
      v41 = 2;
    v42 = v40 + v41;
  }
  else
  {
    if (!v22)
      v22 = JSC::CodeBlock::outOfLineJumpOffset(v9, (unint64_t)a2);
    v42 = v22;
  }
  return (__int128 *)&a2[v42];
}

__int128 *llint_slow_path_jgreater(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  char v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v42;
  unint64_t v43;
  double v45;
  _BOOL4 v46;
  int v47;
  JSC::VM *v48;
  double v49;
  _BOOL4 v50;
  int v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int **v56;
  int **v57;
  int v58;
  WTF *v59;
  JSC::VM *v60;
  int v61;
  unint64_t v62;
  int **v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  JSC::JSBigInt *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  double v71;
  uint64_t v72;
  int **v73;
  int *v74;
  uint64_t v75;
  unint64_t v76;
  JSC::JSBigInt *v77;
  uint64_t v78;
  BOOL v79;
  double v80;
  double v81;
  double v82;
  int **v83;
  int **v84;
  unsigned __int8 v85[4];
  int v86;
  uint64_t v87;
  int v88;
  JSC::VM *v89;
  JSC::JSRopeString *v90;
  WTF *v91;
  JSC::JSObject *v92;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v89 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198842398);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    if (v19 > 63)
      v19 += 1073741760;
    v53 = *((__int16 *)a2 + 2);
    v21 = v53 + 1073741760;
    if (v53 <= 63)
      v21 = *((__int16 *)a2 + 2);
    v22 = *((__int16 *)a2 + 3);
  }
  else if (v18 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v21 = *(_DWORD *)(a2 + 6);
    v22 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v19 = (char)a2[1];
    if (v19 > 15)
      v19 += 1073741808;
    v20 = (char)a2[2];
    v21 = v20 + 1073741808;
    if (v20 <= 15)
      v21 = (char)a2[2];
    v22 = (char)a2[3];
  }
  v85[0] = 0;
  v86 = 0;
  v87 = 0;
  v88 = v22;
  if (v21 >= 0x40000000)
  {
    v54 = v21 - 0x40000000;
    if (v54 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988427E8);
    }
    v23 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v54);
  }
  else
  {
    v23 = (unint64_t *)(a1 + 8 * v21);
  }
  v24 = *v23;
  if (v19 >= 0x40000000)
  {
    v55 = v19 - 0x40000000;
    if (v55 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988427F0);
    }
    v25 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v55);
  }
  else
  {
    v25 = (unint64_t *)(a1 + 8 * v19);
  }
  v26 = *v25;
  v27 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v24 < 0xFFFE000000000000)
  {
    if (v24 >> 49)
      v42 = v26 >> 49 == 0;
    else
      v42 = 1;
    if (!v42)
    {
LABEL_20:
      v28 = (double)(int)v24;
      if (v24 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v28 = v24 - 0x2000000000000;
      v29 = (double)(int)v26;
      if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v29 = v26 - 0x2000000000000;
      v30 = v28 < v29;
      goto LABEL_25;
    }
  }
  else
  {
    if (v26 >= 0xFFFE000000000000)
    {
      v31 = (int)v24 < (int)v26;
      goto LABEL_28;
    }
    if (v26 >> 49)
      goto LABEL_20;
  }
  if ((v24 & 0xFFFE000000000002) != 0)
  {
    v43 = v26 & 0xFFFE000000000002;
  }
  else
  {
    v43 = v26 & 0xFFFE000000000002;
    if (*(_BYTE *)(v24 + 5) == 2 && v43 == 0)
    {
      if (*(_BYTE *)(v26 + 5) == 2)
      {
        v56 = (int **)(v24 + 8);
        if ((*(_BYTE *)(v24 + 8) & 1) != 0)
          v56 = JSC::JSRopeString::resolveRope(v24, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v27 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v31 = 0;
        }
        else
        {
          v57 = (int **)(v26 + 8);
          if ((*(_BYTE *)(v26 + 8) & 1) != 0)
            v57 = JSC::JSRopeString::resolveRope(v26, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          if (*((_DWORD *)v27 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            v31 = 0;
          }
          else
          {
            v31 = WTF::codePointCompareLessThan((WTF *)v56, (const WTF::String *)v57, a3);
          }
        }
        goto LABEL_28;
      }
      v91 = 0;
      goto LABEL_221;
    }
  }
  v91 = 0;
  if (!v43)
LABEL_221:
    v26 = JSC::JSCell::toPrimitive(v26, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v90 = (JSC::JSRopeString *)v26;
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v47 = 0;
LABEL_116:
    v45 = 0.0;
    goto LABEL_62;
  }
  if ((v26 & 0xFFFE000000000002) != 0)
  {
    if (v26 >= 0xFFFE000000000000)
    {
      v45 = (double)(int)v26;
      goto LABEL_58;
    }
    if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v45 = v26 - 0x2000000000000;
      goto LABEL_58;
    }
  }
  else if (*(_BYTE *)(v26 + 5) == 3)
  {
    v47 = 1;
    goto LABEL_116;
  }
  JSC::JSValue::toNumberSlowCase(&v90, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v45 = *(double *)a9.i64;
LABEL_58:
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v47 = 0;
  }
  else
  {
    v46 = ((unint64_t)v90 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v90 + 5) == 2;
    v47 = !v46;
  }
LABEL_62:
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_123;
  }
  v48 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v24 & 0xFFFE000000000002) == 0)
    v24 = JSC::JSCell::toPrimitive(v24, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v91 = (WTF *)v24;
  if (*((_DWORD *)v48 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v48, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v51 = 0;
      goto LABEL_121;
    }
    v24 = (unint64_t)v91;
  }
  if ((v24 & 0xFFFE000000000002) != 0)
  {
    if (v24 >= 0xFFFE000000000000)
    {
      v49 = (double)(int)v24;
      goto LABEL_69;
    }
    if (v24 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v49 = v24 - 0x2000000000000;
      goto LABEL_69;
    }
LABEL_68:
    JSC::JSValue::toNumberSlowCase(&v91, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v49 = *(double *)a9.i64;
LABEL_69:
    if (*((_DWORD *)v48 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v48, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v51 = 0;
    }
    else
    {
      v50 = ((unint64_t)v91 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v91 + 5) == 2;
      v51 = !v50;
    }
    goto LABEL_73;
  }
  if (*(_BYTE *)(v24 + 5) != 3)
    goto LABEL_68;
  v51 = 1;
LABEL_121:
  v49 = 0.0;
LABEL_73:
  if (*((_DWORD *)v27 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_123;
  }
  if ((v51 | v47) == 1)
  {
    if (((unint64_t)v91 & 0xFFFE000000000002) != 0)
    {
      v52 = (unint64_t)v90;
    }
    else
    {
      v52 = (unint64_t)v90;
      if (*((_BYTE *)v91 + 5) == 3)
      {
        v59 = v91;
        v60 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v61 = 3;
        goto LABEL_136;
      }
    }
    if ((v52 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v52 + 5) != 3)
    {
      v30 = v49 < v45;
LABEL_25:
      v31 = v30;
      goto LABEL_28;
    }
    v59 = v91;
    v60 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (((unint64_t)v91 & 0xFFFE000000000002) != 0)
    {
      v92 = v91;
      if ((unint64_t)v91 >= 0xFFFE000000000000)
      {
        v71 = (double)(int)v91;
        goto LABEL_155;
      }
      if ((unint64_t)v91 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v71 = (char *)v91 - 0x2000000000000;
LABEL_155:
        if (*((_DWORD *)v60 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v70 = 1;
        }
        else
        {
          v70 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v52, v71);
        }
LABEL_157:
        if (!*((_DWORD *)v60 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v60, v72, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if (v70 == 2)
          {
            v70 = 3;
          }
          else if (v70 == 3)
          {
            v70 = 2;
          }
          goto LABEL_184;
        }
        goto LABEL_123;
      }
LABEL_188:
      JSC::JSValue::toNumberSlowCase(&v92, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v71 = v82;
      goto LABEL_155;
    }
    v61 = *((unsigned __int8 *)v91 + 5);
LABEL_136:
    v62 = v52 & 0xFFFE000000000002;
    if (v61 == 3 && !v62)
    {
      if (*(_BYTE *)(v52 + 5) == 3)
      {
        v79 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v59, v52) == 3;
        goto LABEL_185;
      }
      v92 = (JSC::JSObject *)v52;
      goto LABEL_140;
    }
    if (v61 == 3)
    {
      v92 = (JSC::JSObject *)v52;
      if (v62)
      {
        if (v52 >= 0xFFFE000000000000)
        {
          v81 = (double)(int)v52;
          goto LABEL_181;
        }
        if (v52 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v81 = v52 - 0x2000000000000;
          goto LABEL_181;
        }
LABEL_180:
        JSC::JSValue::toNumberSlowCase(&v92, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v81 = v80;
LABEL_181:
        if (*((_DWORD *)v60 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v70 = 1;
        }
        else
        {
          v70 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v59, v81);
        }
LABEL_183:
        if (!*((_DWORD *)v60 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v60, v68, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_184:
          v79 = v70 == 3;
LABEL_185:
          v31 = v79;
          goto LABEL_28;
        }
LABEL_123:
        v31 = 0;
        goto LABEL_28;
      }
LABEL_140:
      if (*(_BYTE *)(v52 + 5) == 2)
      {
        v63 = (int **)(v52 + 8);
        if ((*(_BYTE *)(v52 + 8) & 1) != 0)
          v63 = JSC::JSRopeString::resolveRope(v52, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v60 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_209;
        }
        v64 = *v63;
        if (*v63)
        {
          v65 = *((_QWORD *)v64 + 1);
          v66 = v64[1] | ((unint64_t)((v64[4] >> 2) & 1) << 32);
        }
        else
        {
          v65 = 0;
          v66 = 0x100000000;
        }
        v67 = JSC::JSBigInt::stringToBigInt(v10, v65, v66, a4, a5);
        v69 = (uint64_t)v67;
        if (*((_DWORD *)v60 + 20))
        {
          v70 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v60, v68, (uint64_t)a3, a4, a5, a6, a7, a8) || !v69)
            goto LABEL_183;
        }
        else if (!v67)
        {
LABEL_209:
          v70 = 1;
          goto LABEL_183;
        }
        if ((v69 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v69 + 5) == 3)
        {
          v70 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v59, v69);
          goto LABEL_183;
        }
      }
      goto LABEL_180;
    }
    v92 = v59;
    if (v61 != 2)
      goto LABEL_188;
    v73 = (int **)((char *)v59 + 8);
    if ((*((_BYTE *)v59 + 8) & 1) != 0)
      v73 = JSC::JSRopeString::resolveRope((unint64_t)v59, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v60 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_215:
      v70 = 1;
      goto LABEL_157;
    }
    v74 = *v73;
    if (*v73)
    {
      v75 = *((_QWORD *)v74 + 1);
      v76 = v74[1] | ((unint64_t)((v74[4] >> 2) & 1) << 32);
    }
    else
    {
      v75 = 0;
      v76 = 0x100000000;
    }
    v77 = JSC::JSBigInt::stringToBigInt(v10, v75, v76, a4, a5);
    v78 = (uint64_t)v77;
    if (*((_DWORD *)v60 + 20))
    {
      v70 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v60, v72, (uint64_t)a3, a4, a5, a6, a7, a8) || !v78)
        goto LABEL_157;
    }
    else if (!v77)
    {
      goto LABEL_215;
    }
    if ((v78 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v78 + 5) == 3)
    {
      v70 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v52, v78);
      goto LABEL_157;
    }
    goto LABEL_188;
  }
  v83 = (int **)((char *)v91 + 8);
  if ((*((_BYTE *)v91 + 8) & 1) != 0)
    v83 = JSC::JSRopeString::resolveRope((unint64_t)v91, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v84 = (int **)((char *)v90 + 8);
  if ((*((_BYTE *)v90 + 8) & 1) != 0)
    v84 = JSC::JSRopeString::resolveRope((unint64_t)v90, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v31 = WTF::codePointCompareLessThan((WTF *)v83, (const WTF::String *)v84, a3);
LABEL_28:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v89, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v89 + 2))
    return &xmmword_1ECF4C7C0;
  if (v31)
  {
    if (JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v85))
      v58 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v85);
    else
      v58 = JSC::CodeBlock::outOfLineJumpOffset(v9, (unint64_t)a2);
    v40 = v58;
  }
  else
  {
    v32 = *a2;
    v33 = v32;
    if ((v32 | 2) == 0x82)
      v33 = a2[1];
    v34 = v32 == 128;
    v35 = v32 == 130;
    if (v32 == 130)
      v34 = 2;
    v42 = v32 == 128;
    v36 = JSC::opcodeLengths[v33];
    v37 = v42 || v35;
    v38 = v36 << v34;
    v42 = v37 == 0;
    v39 = 1;
    if (!v42)
      v39 = 2;
    v40 = v38 + v39;
  }
  return (__int128 *)&a2[v40];
}

__int128 *llint_slow_path_jngreater(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  double v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  BOOL v35;
  unint64_t v36;
  double v38;
  _BOOL4 v39;
  int v40;
  JSC::VM *v41;
  double v42;
  _BOOL4 v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  _BOOL4 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int **v68;
  int **v69;
  int v70;
  unint64_t v71;
  WTF *v72;
  JSC::VM *v73;
  int v74;
  unint64_t v75;
  int **v76;
  int *v77;
  uint64_t v78;
  unint64_t v79;
  JSC::JSBigInt *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  double v84;
  uint64_t v85;
  int **v86;
  int *v87;
  uint64_t v88;
  unint64_t v89;
  JSC::JSBigInt *v90;
  uint64_t v91;
  BOOL v92;
  double v93;
  double v94;
  double v95;
  int **v96;
  int **v97;
  JSC::VM *v98;
  JSC::JSRopeString *v99;
  WTF *v100;
  JSC::JSObject *v101;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v98 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198842DF8);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = *((__int16 *)a2 + 3);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_117:
    v70 = v21 + v20;
    goto LABEL_118;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    v22 = (char)a2[3];
    if (v21 <= 15)
    {
LABEL_11:
      v23 = v21;
LABEL_12:
      v24 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_117;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v70 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_118:
  v23 = v70;
  if (v70 < 0x40000000)
    goto LABEL_12;
  v71 = (v70 - 0x40000000);
  if (v71 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988432CCLL);
  }
  v24 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v71);
LABEL_13:
  v25 = *v24;
  if (v19 >= 0x40000000)
  {
    v58 = v19 - 0x40000000;
    if (v58 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19884325CLL);
    }
    v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v58);
  }
  else
  {
    v26 = (unint64_t *)(a1 + 8 * v19);
  }
  v27 = *v26;
  v28 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v25 < 0xFFFE000000000000)
  {
    if (v25 >> 49)
      v35 = v27 >> 49 == 0;
    else
      v35 = 1;
    if (!v35)
    {
LABEL_18:
      v29 = (double)(int)v25;
      if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v29 = v25 - 0x2000000000000;
      v30 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v30 = v27 - 0x2000000000000;
      v31 = v29 < v30;
      goto LABEL_23;
    }
  }
  else
  {
    if (v27 >= 0xFFFE000000000000)
    {
      v32 = (int)v25 < (int)v27;
      goto LABEL_26;
    }
    if (v27 >> 49)
      goto LABEL_18;
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    v36 = v27 & 0xFFFE000000000002;
  }
  else
  {
    v36 = v27 & 0xFFFE000000000002;
    if (*(_BYTE *)(v25 + 5) == 2 && v36 == 0)
    {
      if (*(_BYTE *)(v27 + 5) == 2)
      {
        v68 = (int **)(v25 + 8);
        if ((*(_BYTE *)(v25 + 8) & 1) != 0)
          v68 = JSC::JSRopeString::resolveRope(v25, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v28 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v32 = 0;
        }
        else
        {
          v69 = (int **)(v27 + 8);
          if ((*(_BYTE *)(v27 + 8) & 1) != 0)
            v69 = JSC::JSRopeString::resolveRope(v27, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          if (*((_DWORD *)v28 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            v32 = 0;
          }
          else
          {
            v32 = WTF::codePointCompareLessThan((WTF *)v68, (const WTF::String *)v69, a3);
          }
        }
        goto LABEL_26;
      }
      v100 = 0;
      goto LABEL_230;
    }
  }
  v100 = 0;
  if (!v36)
LABEL_230:
    v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v99 = (JSC::JSRopeString *)v27;
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v40 = 0;
LABEL_124:
    v38 = 0.0;
    goto LABEL_52;
  }
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    if (v27 >= 0xFFFE000000000000)
    {
      v38 = (double)(int)v27;
      goto LABEL_48;
    }
    if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v38 = v27 - 0x2000000000000;
      goto LABEL_48;
    }
  }
  else if (*(_BYTE *)(v27 + 5) == 3)
  {
    v40 = 1;
    goto LABEL_124;
  }
  JSC::JSValue::toNumberSlowCase(&v99, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v38 = *(double *)a9.i64;
LABEL_48:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v40 = 0;
  }
  else
  {
    v39 = ((unint64_t)v99 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v99 + 5) == 2;
    v40 = !v39;
  }
LABEL_52:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_131;
  }
  v41 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v25 & 0xFFFE000000000002) == 0)
    v25 = JSC::JSCell::toPrimitive(v25, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v100 = (WTF *)v25;
  if (*((_DWORD *)v41 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v41, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v44 = 0;
      goto LABEL_129;
    }
    v25 = (unint64_t)v100;
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    if (v25 >= 0xFFFE000000000000)
    {
      v42 = (double)(int)v25;
      goto LABEL_59;
    }
    if (v25 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v42 = v25 - 0x2000000000000;
      goto LABEL_59;
    }
LABEL_58:
    JSC::JSValue::toNumberSlowCase(&v100, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v42 = *(double *)a9.i64;
LABEL_59:
    if (*((_DWORD *)v41 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v41, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v44 = 0;
    }
    else
    {
      v43 = ((unint64_t)v100 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v100 + 5) == 2;
      v44 = !v43;
    }
    goto LABEL_63;
  }
  if (*(_BYTE *)(v25 + 5) != 3)
    goto LABEL_58;
  v44 = 1;
LABEL_129:
  v42 = 0.0;
LABEL_63:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_131;
  }
  if ((v44 | v40) == 1)
  {
    if (((unint64_t)v100 & 0xFFFE000000000002) != 0)
    {
      v45 = (unint64_t)v99;
    }
    else
    {
      v45 = (unint64_t)v99;
      if (*((_BYTE *)v100 + 5) == 3)
      {
        v72 = v100;
        v73 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v74 = 3;
        goto LABEL_145;
      }
    }
    if ((v45 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v45 + 5) != 3)
    {
      v31 = v42 < v38;
LABEL_23:
      v32 = v31;
      goto LABEL_26;
    }
    v72 = v100;
    v73 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (((unint64_t)v100 & 0xFFFE000000000002) != 0)
    {
      v101 = v100;
      if ((unint64_t)v100 >= 0xFFFE000000000000)
      {
        v84 = (double)(int)v100;
        goto LABEL_164;
      }
      if ((unint64_t)v100 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v84 = (char *)v100 - 0x2000000000000;
LABEL_164:
        if (*((_DWORD *)v73 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v73, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v83 = 1;
        }
        else
        {
          v83 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v45, v84);
        }
LABEL_166:
        if (!*((_DWORD *)v73 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v73, v85, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if (v83 == 2)
          {
            v83 = 3;
          }
          else if (v83 == 3)
          {
            v83 = 2;
          }
          goto LABEL_193;
        }
        goto LABEL_131;
      }
LABEL_197:
      JSC::JSValue::toNumberSlowCase(&v101, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v84 = v95;
      goto LABEL_164;
    }
    v74 = *((unsigned __int8 *)v100 + 5);
LABEL_145:
    v75 = v45 & 0xFFFE000000000002;
    if (v74 == 3 && !v75)
    {
      if (*(_BYTE *)(v45 + 5) == 3)
      {
        v92 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v72, v45) == 3;
        goto LABEL_194;
      }
      v101 = (JSC::JSObject *)v45;
      goto LABEL_149;
    }
    if (v74 == 3)
    {
      v101 = (JSC::JSObject *)v45;
      if (v75)
      {
        if (v45 >= 0xFFFE000000000000)
        {
          v94 = (double)(int)v45;
          goto LABEL_190;
        }
        if (v45 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v94 = v45 - 0x2000000000000;
          goto LABEL_190;
        }
LABEL_189:
        JSC::JSValue::toNumberSlowCase(&v101, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v94 = v93;
LABEL_190:
        if (*((_DWORD *)v73 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v73, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v83 = 1;
        }
        else
        {
          v83 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v72, v94);
        }
LABEL_192:
        if (!*((_DWORD *)v73 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v73, v81, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_193:
          v92 = v83 == 3;
LABEL_194:
          v32 = v92;
          goto LABEL_26;
        }
LABEL_131:
        v32 = 0;
        goto LABEL_26;
      }
LABEL_149:
      if (*(_BYTE *)(v45 + 5) == 2)
      {
        v76 = (int **)(v45 + 8);
        if ((*(_BYTE *)(v45 + 8) & 1) != 0)
          v76 = JSC::JSRopeString::resolveRope(v45, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v73 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v73, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_217;
        }
        v77 = *v76;
        if (*v76)
        {
          v78 = *((_QWORD *)v77 + 1);
          v79 = v77[1] | ((unint64_t)((v77[4] >> 2) & 1) << 32);
        }
        else
        {
          v78 = 0;
          v79 = 0x100000000;
        }
        v80 = JSC::JSBigInt::stringToBigInt(v10, v78, v79, a4, a5);
        v82 = (uint64_t)v80;
        if (*((_DWORD *)v73 + 20))
        {
          v83 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v73, v81, (uint64_t)a3, a4, a5, a6, a7, a8) || !v82)
            goto LABEL_192;
        }
        else if (!v80)
        {
LABEL_217:
          v83 = 1;
          goto LABEL_192;
        }
        if ((v82 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v82 + 5) == 3)
        {
          v83 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v72, v82);
          goto LABEL_192;
        }
      }
      goto LABEL_189;
    }
    v101 = v72;
    if (v74 != 2)
      goto LABEL_197;
    v86 = (int **)((char *)v72 + 8);
    if ((*((_BYTE *)v72 + 8) & 1) != 0)
      v86 = JSC::JSRopeString::resolveRope((unint64_t)v72, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v73 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v73, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_223:
      v83 = 1;
      goto LABEL_166;
    }
    v87 = *v86;
    if (*v86)
    {
      v88 = *((_QWORD *)v87 + 1);
      v89 = v87[1] | ((unint64_t)((v87[4] >> 2) & 1) << 32);
    }
    else
    {
      v88 = 0;
      v89 = 0x100000000;
    }
    v90 = JSC::JSBigInt::stringToBigInt(v10, v88, v89, a4, a5);
    v91 = (uint64_t)v90;
    if (*((_DWORD *)v73 + 20))
    {
      v83 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v73, v85, (uint64_t)a3, a4, a5, a6, a7, a8) || !v91)
        goto LABEL_166;
    }
    else if (!v90)
    {
      goto LABEL_223;
    }
    if ((v91 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v91 + 5) == 3)
    {
      v83 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v45, v91);
      goto LABEL_166;
    }
    goto LABEL_197;
  }
  v96 = (int **)((char *)v100 + 8);
  if ((*((_BYTE *)v100 + 8) & 1) != 0)
    v96 = JSC::JSRopeString::resolveRope((unint64_t)v100, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v97 = (int **)((char *)v99 + 8);
  if ((*((_BYTE *)v99 + 8) & 1) != 0)
    v97 = JSC::JSRopeString::resolveRope((unint64_t)v99, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v32 = WTF::codePointCompareLessThan((WTF *)v96, (const WTF::String *)v97, a3);
LABEL_26:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v98, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v98 + 2))
  {
    if ((v32 & 1) != 0)
    {
      v60 = *a2;
      v61 = v60;
      if ((v60 | 2) == 0x82)
        v61 = a2[1];
      v62 = v60 == 128;
      v63 = v60 == 130;
      if (v60 == 130)
        v62 = 2;
      v35 = v60 == 128;
      v64 = JSC::opcodeLengths[v61];
      v65 = v35 || v63;
      v66 = v64 << v62;
      v35 = v65 == 0;
      v67 = 1;
      if (!v35)
        v67 = 2;
      v33 = v66 + v67;
      return (__int128 *)&a2[v33];
    }
    if (v22)
    {
LABEL_31:
      v33 = v22;
      return (__int128 *)&a2[v33];
    }
    v46 = v9[7];
    v47 = *(_QWORD *)(v46 + 80);
    v48 = *(_QWORD *)v47;
    v49 = *(unsigned int *)(v47 + 12) + *(_QWORD *)v47;
    if (v48 > (unint64_t)a2 || v49 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198842E40);
    }
    v51 = *(_QWORD *)(v46 + 144);
    if (v51)
    {
      v52 = (_DWORD)a2 - v48;
      v53 = *(_DWORD *)(v51 - 8);
      v54 = 9 * ((~(v52 << 15) + v52) ^ ((~(v52 << 15) + v52) >> 10));
      v55 = (v54 ^ (v54 >> 6)) + ~((v54 ^ (v54 >> 6)) << 11);
      v56 = v53 & (v55 ^ HIWORD(v55));
      v57 = *(_DWORD *)(v51 + 8 * v56);
      if (v57 == v52)
      {
LABEL_77:
        v22 = *(_DWORD *)(v51 + 8 * v56 + 4);
        goto LABEL_31;
      }
      v59 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v59) & v53;
        v57 = *(_DWORD *)(v51 + 8 * v56);
        ++v59;
        if (v57 == v52)
          goto LABEL_77;
      }
    }
    v22 = 0;
    goto LABEL_31;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_jlesseq(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  JSC::JSGlobalObject *v5;
  JSC::VM *v6;
  uint64_t v7;
  const WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  JSC::VM *v19;
  BOOL v20;
  BOOL v21;
  int **v22;
  int **v23;
  int v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  _BOOL4 v33;
  int v34;
  JSC::VM *v35;
  _BOOL4 v36;
  int v37;
  JSC::JSObject *v38;
  unint64_t v39;
  BOOL v40;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v42;
  int v43;
  unint64_t v44;
  int **v45;
  int *v46;
  uint64_t v47;
  unint64_t v48;
  JSC::JSBigInt *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  double v53;
  uint64_t v54;
  int **v55;
  int **v56;
  int **v57;
  int *v58;
  uint64_t v59;
  unint64_t v60;
  JSC::JSBigInt *v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  int8x8_t v70;
  unsigned __int8 v71[24];
  JSC::VM *v72;
  WTF *v73;
  uint64_t v74;
  JSC::JSObject *v75;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(JSC::JSGlobalObject **)(v4 + 8);
  v6 = *(JSC::VM **)(v4 + 72);
  *((_QWORD *)v6 + 5) = a1;
  v72 = v6;
  JSC::CallFrame::setCurrentVPC(a1, (unint64_t)a2);
  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJless>(a2, &v70);
  if (v70.i32[0] >= 0x40000000)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if ((v70.i32[0] - 0x40000000) >= *(_DWORD *)(v27 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198843BF4);
    }
    v15 = (unint64_t *)(*(_QWORD *)(v27 + 160) + 8 * (v70.i32[0] - 0x40000000));
  }
  else
  {
    v15 = (unint64_t *)(a1 + 8 * v70.i32[0]);
  }
  v16 = *v15;
  if (v70.i32[1] >= 0x40000000)
  {
    v28 = *(_QWORD *)(a1 + 16);
    if ((v70.i32[1] - 0x40000000) >= *(_DWORD *)(v28 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198843BFCLL);
    }
    v17 = (unint64_t *)(*(_QWORD *)(v28 + 160) + 8 * (v70.i32[1] - 0x40000000));
  }
  else
  {
    v17 = (unint64_t *)(a1 + 8 * v70.i32[1]);
  }
  v18 = *v17;
  v19 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    if (v18 >= 0xFFFE000000000000)
    {
      v24 = (int)v16 <= (int)v18;
      goto LABEL_25;
    }
    if (v18 >> 49)
      goto LABEL_40;
  }
  else
  {
    if (v16 >> 49)
      v20 = v18 >> 49 == 0;
    else
      v20 = 1;
    if (!v20)
    {
LABEL_40:
      v29 = (double)(int)v16;
      if (v16 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v29 = v16 - 0x2000000000000;
      v30 = (double)(int)v18;
      if (v18 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v30 = v18 - 0x2000000000000;
      v31 = v29 > v30;
      goto LABEL_45;
    }
  }
  if ((v16 & 0xFFFE000000000002) != 0)
  {
    v73 = 0;
  }
  else
  {
    v21 = *(_BYTE *)(v16 + 5) == 2 && (v18 & 0xFFFE000000000002) == 0;
    if (v21 && *(_BYTE *)(v18 + 5) == 2)
    {
      v22 = (int **)(v16 + 8);
      if ((*(_BYTE *)(v16 + 8) & 1) != 0)
        v22 = JSC::JSRopeString::resolveRope(v16, v5, (uint64_t)v8, v9, v14, v10, v11, v12, v13);
      if (*((_DWORD *)v19 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v19, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
      {
        v24 = 0;
      }
      else
      {
        v23 = (int **)(v18 + 8);
        if ((*(_BYTE *)(v18 + 8) & 1) != 0)
          v23 = JSC::JSRopeString::resolveRope(v18, v5, (uint64_t)v8, v9, v14, v10, v11, v12, v13);
        if (*((_DWORD *)v19 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v19, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
        {
          v24 = 0;
        }
        else
        {
          v24 = WTF::codePointCompareLessThan((WTF *)v23, (const WTF::String *)v22, v8) ^ 1;
        }
      }
      goto LABEL_25;
    }
    v74 = 0;
    v73 = 0;
    v16 = JSC::JSCell::toPrimitive(v16, (JSC::VM **)v5, (JSC::Structure *)1, v9, v10, v11, v12, v13);
  }
  v74 = v16;
  if (*((_DWORD *)v19 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v19, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
    {
      v34 = 0;
      goto LABEL_95;
    }
    v16 = v74;
  }
  if ((v16 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v16 + 5) != 3)
      goto LABEL_52;
    v34 = 1;
LABEL_95:
    v32 = 0.0;
    goto LABEL_57;
  }
  if (v16 >= 0xFFFE000000000000)
  {
    v32 = (double)(int)v16;
    goto LABEL_53;
  }
  if (v16 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v32 = v16 - 0x2000000000000;
    goto LABEL_53;
  }
LABEL_52:
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v74, v5, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
  v32 = *(double *)v14.i64;
LABEL_53:
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
  {
    v34 = 0;
  }
  else
  {
    v33 = (v74 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v74 + 5) == 2;
    v34 = !v33;
  }
LABEL_57:
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
    goto LABEL_102;
  v35 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if ((v18 & 0xFFFE000000000002) == 0)
    v18 = JSC::JSCell::toPrimitive(v18, (JSC::VM **)v5, (JSC::Structure *)1, v9, v10, v11, v12, v13);
  v73 = (WTF *)v18;
  if (*((_DWORD *)v35 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v35, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
    {
      v37 = 0;
      goto LABEL_100;
    }
    v18 = (unint64_t)v73;
  }
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v18 + 5) != 3)
      goto LABEL_63;
    v37 = 1;
LABEL_100:
    v14.i64[0] = 0;
    goto LABEL_68;
  }
  if (v18 >= 0xFFFE000000000000)
  {
    *(double *)v14.i64 = (double)(int)v18;
    goto LABEL_64;
  }
  if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v14.i64[0] = v18 - 0x2000000000000;
    goto LABEL_64;
  }
LABEL_63:
  JSC::JSValue::toNumberSlowCase(&v73, v5, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
LABEL_64:
  if (*((_DWORD *)v35 + 20)
    && (v69 = v14.i64[0],
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v35, v7, (uint64_t)v8, v9, v10, v11, v12, v13), v14.i64[0] = v69, hasExceptionsAfterHandlingTraps))
  {
    v37 = 0;
  }
  else
  {
    v36 = ((unint64_t)v73 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v73 + 5) == 2;
    v37 = !v36;
  }
LABEL_68:
  if (*((_DWORD *)v19 + 20))
  {
    v68 = v14.i64[0];
    v40 = JSC::VM::hasExceptionsAfterHandlingTraps(v19, v7, (uint64_t)v8, v9, v10, v11, v12, v13);
    v14.i64[0] = v68;
    if (v40)
      goto LABEL_102;
  }
  if ((v34 | v37) == 1)
  {
    v38 = (JSC::JSObject *)v74;
    if ((v74 & 0xFFFE000000000002) != 0)
    {
      v39 = (unint64_t)v73;
    }
    else
    {
      v39 = (unint64_t)v73;
      if (*(_BYTE *)(v74 + 5) == 3)
      {
        v42 = (JSC::VM *)*((_QWORD *)v5 + 7);
        v43 = 3;
        goto LABEL_110;
      }
    }
    if ((v39 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v39 + 5) != 3)
    {
      v31 = v32 > *(double *)v14.i64;
LABEL_45:
      v24 = !v31;
      goto LABEL_25;
    }
    v42 = (JSC::VM *)*((_QWORD *)v5 + 7);
    if ((v74 & 0xFFFE000000000002) != 0)
    {
      v75 = (JSC::JSObject *)v74;
      if ((unint64_t)v74 >= 0xFFFE000000000000)
      {
        v53 = (double)(int)v74;
        goto LABEL_129;
      }
      if ((unint64_t)(v74 - 0x2000000000000) <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v53 = v74 - 0x2000000000000;
LABEL_129:
        if (*((_DWORD *)v42 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v42, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
        {
          v52 = 1;
        }
        else
        {
          v52 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v39, v53);
        }
LABEL_131:
        if (!*((_DWORD *)v42 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v42, v54, (uint64_t)v8, v9, v10, v11, v12, v13))
        {
          if (v52 == 2)
          {
            v52 = 3;
          }
          else if (v52 == 3)
          {
            v52 = 2;
          }
          goto LABEL_164;
        }
        goto LABEL_102;
      }
LABEL_170:
      JSC::JSValue::toNumberSlowCase(&v75, v5, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
      v53 = v67;
      goto LABEL_129;
    }
    v43 = *(unsigned __int8 *)(v74 + 5);
LABEL_110:
    v44 = v39 & 0xFFFE000000000002;
    if (v43 == 3 && !v44)
    {
      if (*(_BYTE *)(v39 + 5) == 3)
      {
        v63 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v74, v39);
        v64 = v63 == 3 || v63 == 0;
        goto LABEL_167;
      }
      v75 = (JSC::JSObject *)v39;
      goto LABEL_114;
    }
    if (v43 == 3)
    {
      v75 = (JSC::JSObject *)v39;
      if (v44)
      {
        if (v39 >= 0xFFFE000000000000)
        {
          v66 = (double)(int)v39;
          goto LABEL_161;
        }
        if (v39 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v66 = v39 - 0x2000000000000;
          goto LABEL_161;
        }
LABEL_160:
        JSC::JSValue::toNumberSlowCase(&v75, v5, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
        v66 = v65;
LABEL_161:
        if (*((_DWORD *)v42 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v42, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
        {
          v52 = 1;
        }
        else
        {
          v52 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v38, v66);
        }
LABEL_163:
        if (!*((_DWORD *)v42 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v42, v50, (uint64_t)v8, v9, v10, v11, v12, v13))
        {
LABEL_164:
          v64 = v52 == 3 || v52 == 0;
LABEL_167:
          v24 = v64;
          goto LABEL_25;
        }
LABEL_102:
        v24 = 0;
        goto LABEL_25;
      }
LABEL_114:
      if (*(_BYTE *)(v39 + 5) == 2)
      {
        v45 = (int **)(v39 + 8);
        if ((*(_BYTE *)(v39 + 8) & 1) != 0)
          v45 = JSC::JSRopeString::resolveRope(v39, v5, (uint64_t)v8, v9, v14, v10, v11, v12, v13);
        if (*((_DWORD *)v42 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v42, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
        {
          goto LABEL_186;
        }
        v46 = *v45;
        if (*v45)
        {
          v47 = *((_QWORD *)v46 + 1);
          v48 = v46[1] | ((unint64_t)((v46[4] >> 2) & 1) << 32);
        }
        else
        {
          v47 = 0;
          v48 = 0x100000000;
        }
        v49 = JSC::JSBigInt::stringToBigInt(v5, v47, v48, v9, v10);
        v51 = (uint64_t)v49;
        if (*((_DWORD *)v42 + 20))
        {
          v52 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v42, v50, (uint64_t)v8, v9, v10, v11, v12, v13) || !v51)
            goto LABEL_163;
        }
        else if (!v49)
        {
LABEL_186:
          v52 = 1;
          goto LABEL_163;
        }
        if ((v51 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v51 + 5) == 3)
        {
          v52 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v38, v51);
          goto LABEL_163;
        }
      }
      goto LABEL_160;
    }
    v75 = (JSC::JSObject *)v74;
    if (v43 != 2)
      goto LABEL_170;
    v57 = (int **)(v74 + 8);
    if ((*(_BYTE *)(v74 + 8) & 1) != 0)
      v57 = JSC::JSRopeString::resolveRope(v74, v5, (uint64_t)v8, v9, v14, v10, v11, v12, v13);
    if (*((_DWORD *)v42 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v42, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
    {
LABEL_192:
      v52 = 1;
      goto LABEL_131;
    }
    v58 = *v57;
    if (*v57)
    {
      v59 = *((_QWORD *)v58 + 1);
      v60 = v58[1] | ((unint64_t)((v58[4] >> 2) & 1) << 32);
    }
    else
    {
      v59 = 0;
      v60 = 0x100000000;
    }
    v61 = JSC::JSBigInt::stringToBigInt(v5, v59, v60, v9, v10);
    v62 = (uint64_t)v61;
    if (*((_DWORD *)v42 + 20))
    {
      v52 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v42, v54, (uint64_t)v8, v9, v10, v11, v12, v13) || !v62)
        goto LABEL_131;
    }
    else if (!v61)
    {
      goto LABEL_192;
    }
    if ((v62 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v62 + 5) == 3)
    {
      v52 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v39, v62);
      goto LABEL_131;
    }
    goto LABEL_170;
  }
  v55 = (int **)((char *)v73 + 8);
  if ((*((_BYTE *)v73 + 8) & 1) != 0)
    v55 = JSC::JSRopeString::resolveRope((unint64_t)v73, v5, (uint64_t)v8, v9, v14, v10, v11, v12, v13);
  v56 = (int **)(v74 + 8);
  if ((*(_BYTE *)(v74 + 8) & 1) != 0)
    v56 = JSC::JSRopeString::resolveRope(v74, v5, (uint64_t)v8, v9, v14, v10, v11, v12, v13);
  v24 = WTF::codePointCompareLessThan((WTF *)v55, (const WTF::String *)v56, v8) ^ 1;
LABEL_25:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v5, &v72, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v72 + 2))
    return &xmmword_1ECF4C7C0;
  if (v24)
  {
    if (JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v71))
      LODWORD(v25) = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v71);
    else
      LODWORD(v25) = JSC::CodeBlock::outOfLineJumpOffset(v4, (unint64_t)a2);
    v25 = (int)v25;
  }
  else
  {
    v25 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::size(a2);
  }
  return (__int128 *)&a2[v25];
}

__int128 *llint_slow_path_jnlesseq(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  JSC::VM *v28;
  BOOL v29;
  BOOL v30;
  int **v31;
  int **v32;
  char v33;
  int v34;
  int v35;
  char v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v44;
  double v45;
  double v46;
  BOOL v47;
  double v48;
  _BOOL4 v49;
  int v50;
  JSC::VM *v51;
  _BOOL4 v52;
  int v53;
  JSC::JSRopeString *v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  BOOL v58;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v60;
  int v61;
  unint64_t v62;
  int **v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  JSC::JSBigInt *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  double v71;
  uint64_t v72;
  int **v73;
  int **v74;
  int **v75;
  int *v76;
  uint64_t v77;
  unint64_t v78;
  JSC::JSBigInt *v79;
  uint64_t v80;
  int v81;
  BOOL v82;
  double v83;
  double v84;
  double v85;
  unint64_t v86;
  unint64_t v87;
  JSC::VM *v88;
  WTF *v89;
  JSC::JSRopeString *v90;
  JSC::JSObject *v91;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v88 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988440E0);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((__int16 *)a2 + 3);
    if (v19 <= 63)
      goto LABEL_11;
LABEL_107:
    v56 = v19 + v20;
    goto LABEL_108;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = (char)a2[3];
    if (v19 <= 15)
    {
LABEL_11:
      v23 = v19;
LABEL_12:
      v24 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_107;
  }
  v56 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_108:
  v23 = v56;
  if (v56 < 0x40000000)
    goto LABEL_12;
  v57 = (v56 - 0x40000000);
  if (v57 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988445C4);
  }
  v24 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v57);
LABEL_13:
  v25 = *v24;
  if (v21 >= 0x40000000)
  {
    v44 = v21 - 0x40000000;
    if (v44 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988445BCLL);
    }
    v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v44);
  }
  else
  {
    v26 = (unint64_t *)(a1 + 8 * v21);
  }
  v27 = *v26;
  v28 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v25 >= 0xFFFE000000000000)
  {
    if (v27 >= 0xFFFE000000000000)
    {
      v33 = (int)v25 <= (int)v27;
      goto LABEL_35;
    }
    if (v27 >> 49)
      goto LABEL_57;
  }
  else
  {
    if (v25 >> 49)
      v29 = v27 >> 49 == 0;
    else
      v29 = 1;
    if (!v29)
    {
LABEL_57:
      v45 = (double)(int)v25;
      if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v45 = v25 - 0x2000000000000;
      v46 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v46 = v27 - 0x2000000000000;
      v47 = v45 > v46;
      goto LABEL_62;
    }
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    v89 = 0;
  }
  else
  {
    v30 = *(_BYTE *)(v25 + 5) == 2 && (v27 & 0xFFFE000000000002) == 0;
    if (v30 && *(_BYTE *)(v27 + 5) == 2)
    {
      v31 = (int **)(v25 + 8);
      if ((*(_BYTE *)(v25 + 8) & 1) != 0)
        v31 = JSC::JSRopeString::resolveRope(v25, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (*((_DWORD *)v28 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v33 = 0;
      }
      else
      {
        v32 = (int **)(v27 + 8);
        if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          v32 = JSC::JSRopeString::resolveRope(v27, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v28 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v33 = 0;
        }
        else
        {
          v33 = WTF::codePointCompareLessThan((WTF *)v32, (const WTF::String *)v31, a3) ^ 1;
        }
      }
      goto LABEL_35;
    }
    v89 = 0;
    v25 = JSC::JSCell::toPrimitive(v25, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  }
  v90 = (JSC::JSRopeString *)v25;
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v50 = 0;
LABEL_119:
    v48 = 0.0;
    goto LABEL_74;
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    if (v25 >= 0xFFFE000000000000)
    {
      v48 = (double)(int)v25;
      goto LABEL_70;
    }
    if (v25 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v48 = v25 - 0x2000000000000;
      goto LABEL_70;
    }
  }
  else if (*(_BYTE *)(v25 + 5) == 3)
  {
    v50 = 1;
    goto LABEL_119;
  }
  JSC::JSValue::toNumberSlowCase(&v90, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v48 = *(double *)a9.i64;
LABEL_70:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v50 = 0;
  }
  else
  {
    v49 = ((unint64_t)v90 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v90 + 5) == 2;
    v50 = !v49;
  }
LABEL_74:
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_126;
  }
  v51 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if ((v27 & 0xFFFE000000000002) == 0)
    v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v89 = (WTF *)v27;
  if (*((_DWORD *)v51 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v53 = 0;
      goto LABEL_124;
    }
    v27 = (unint64_t)v89;
  }
  if ((v27 & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(v27 + 5) != 3)
      goto LABEL_80;
    v53 = 1;
LABEL_124:
    a9.i64[0] = 0;
    goto LABEL_85;
  }
  if (v27 >= 0xFFFE000000000000)
  {
    *(double *)a9.i64 = (double)(int)v27;
    goto LABEL_81;
  }
  if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    a9.i64[0] = v27 - 0x2000000000000;
    goto LABEL_81;
  }
LABEL_80:
  JSC::JSValue::toNumberSlowCase(&v89, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_81:
  if (*((_DWORD *)v51 + 20)
    && (v87 = a9.i64[0],
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v51, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), a9.i64[0] = v87, hasExceptionsAfterHandlingTraps))
  {
    v53 = 0;
  }
  else
  {
    v52 = ((unint64_t)v89 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v89 + 5) == 2;
    v53 = !v52;
  }
LABEL_85:
  if (*((_DWORD *)v28 + 20))
  {
    v86 = a9.i64[0];
    v58 = JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    a9.i64[0] = v86;
    if (v58)
      goto LABEL_126;
  }
  if ((v50 | v53) == 1)
  {
    v54 = v90;
    if (((unint64_t)v90 & 0xFFFE000000000002) != 0)
    {
      v55 = (unint64_t)v89;
    }
    else
    {
      v55 = (unint64_t)v89;
      if (*((_BYTE *)v90 + 5) == 3)
      {
        v60 = (JSC::VM *)*((_QWORD *)v10 + 7);
        v61 = 3;
        goto LABEL_133;
      }
    }
    if ((v55 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v55 + 5) != 3)
    {
      v47 = v48 > *(double *)a9.i64;
LABEL_62:
      v33 = !v47;
      goto LABEL_35;
    }
    v60 = (JSC::VM *)*((_QWORD *)v10 + 7);
    if (((unint64_t)v90 & 0xFFFE000000000002) != 0)
    {
      v91 = v90;
      if ((unint64_t)v90 >= 0xFFFE000000000000)
      {
        v71 = (double)(int)v90;
        goto LABEL_152;
      }
      if ((unint64_t)v90 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        *(_QWORD *)&v71 = (char *)v90 - 0x2000000000000;
LABEL_152:
        if (*((_DWORD *)v60 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v70 = 1;
        }
        else
        {
          v70 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v55, v71);
        }
LABEL_154:
        if (!*((_DWORD *)v60 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v60, v72, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if (v70 == 2)
          {
            v70 = 3;
          }
          else if (v70 == 3)
          {
            v70 = 2;
          }
          goto LABEL_187;
        }
        goto LABEL_126;
      }
LABEL_193:
      JSC::JSValue::toNumberSlowCase(&v91, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v71 = v85;
      goto LABEL_152;
    }
    v61 = *((unsigned __int8 *)v90 + 5);
LABEL_133:
    v62 = v55 & 0xFFFE000000000002;
    if (v61 == 3 && !v62)
    {
      if (*(_BYTE *)(v55 + 5) == 3)
      {
        v81 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v90, v55);
        v82 = v81 == 3 || v81 == 0;
        goto LABEL_190;
      }
      v91 = (JSC::JSObject *)v55;
      goto LABEL_137;
    }
    if (v61 == 3)
    {
      v91 = (JSC::JSObject *)v55;
      if (v62)
      {
        if (v55 >= 0xFFFE000000000000)
        {
          v84 = (double)(int)v55;
          goto LABEL_184;
        }
        if (v55 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v84 = v55 - 0x2000000000000;
          goto LABEL_184;
        }
LABEL_183:
        JSC::JSValue::toNumberSlowCase(&v91, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v84 = v83;
LABEL_184:
        if (*((_DWORD *)v60 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v70 = 1;
        }
        else
        {
          v70 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v54, v84);
        }
LABEL_186:
        if (!*((_DWORD *)v60 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v60, v68, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_187:
          v82 = v70 == 3 || v70 == 0;
LABEL_190:
          v33 = v82;
          goto LABEL_35;
        }
LABEL_126:
        v33 = 0;
        goto LABEL_35;
      }
LABEL_137:
      if (*(_BYTE *)(v55 + 5) == 2)
      {
        v63 = (int **)(v55 + 8);
        if ((*(_BYTE *)(v55 + 8) & 1) != 0)
          v63 = JSC::JSRopeString::resolveRope(v55, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v60 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_209;
        }
        v64 = *v63;
        if (*v63)
        {
          v65 = *((_QWORD *)v64 + 1);
          v66 = v64[1] | ((unint64_t)((v64[4] >> 2) & 1) << 32);
        }
        else
        {
          v65 = 0;
          v66 = 0x100000000;
        }
        v67 = JSC::JSBigInt::stringToBigInt(v10, v65, v66, a4, a5);
        v69 = (uint64_t)v67;
        if (*((_DWORD *)v60 + 20))
        {
          v70 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v60, v68, (uint64_t)a3, a4, a5, a6, a7, a8) || !v69)
            goto LABEL_186;
        }
        else if (!v67)
        {
LABEL_209:
          v70 = 1;
          goto LABEL_186;
        }
        if ((v69 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v69 + 5) == 3)
        {
          v70 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v54, v69);
          goto LABEL_186;
        }
      }
      goto LABEL_183;
    }
    v91 = v90;
    if (v61 != 2)
      goto LABEL_193;
    v75 = (int **)((char *)v90 + 8);
    if ((*((_BYTE *)v90 + 8) & 1) != 0)
      v75 = JSC::JSRopeString::resolveRope((unint64_t)v90, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v60 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v60, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_215:
      v70 = 1;
      goto LABEL_154;
    }
    v76 = *v75;
    if (*v75)
    {
      v77 = *((_QWORD *)v76 + 1);
      v78 = v76[1] | ((unint64_t)((v76[4] >> 2) & 1) << 32);
    }
    else
    {
      v77 = 0;
      v78 = 0x100000000;
    }
    v79 = JSC::JSBigInt::stringToBigInt(v10, v77, v78, a4, a5);
    v80 = (uint64_t)v79;
    if (*((_DWORD *)v60 + 20))
    {
      v70 = 1;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v60, v72, (uint64_t)a3, a4, a5, a6, a7, a8) || !v80)
        goto LABEL_154;
    }
    else if (!v79)
    {
      goto LABEL_215;
    }
    if ((v80 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v80 + 5) == 3)
    {
      v70 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v55, v80);
      goto LABEL_154;
    }
    goto LABEL_193;
  }
  v73 = (int **)((char *)v89 + 8);
  if ((*((_BYTE *)v89 + 8) & 1) != 0)
    v73 = JSC::JSRopeString::resolveRope((unint64_t)v89, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v74 = (int **)((char *)v90 + 8);
  if ((*((_BYTE *)v90 + 8) & 1) != 0)
    v74 = JSC::JSRopeString::resolveRope((unint64_t)v90, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v33 = WTF::codePointCompareLessThan((WTF *)v73, (const WTF::String *)v74, a3) ^ 1;
LABEL_35:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v88, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v88 + 2))
    return &xmmword_1ECF4C7C0;
  if ((v33 & 1) != 0)
  {
    v34 = *a2;
    v35 = v34;
    if ((v34 | 2) == 0x82)
      v35 = a2[1];
    v36 = v34 == 128;
    v37 = v34 == 130;
    if (v34 == 130)
      v36 = 2;
    v29 = v34 == 128;
    v38 = JSC::opcodeLengths[v35];
    v39 = v29 || v37;
    v40 = v38 << v36;
    v29 = v39 == 0;
    v41 = 1;
    if (!v29)
      v41 = 2;
    v42 = v40 + v41;
  }
  else
  {
    if (!v22)
      v22 = JSC::CodeBlock::outOfLineJumpOffset(v9, (unint64_t)a2);
    v42 = v22;
  }
  return (__int128 *)&a2[v42];
}

__int128 *llint_slow_path_jgreatereq(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  int **v32;
  int **v33;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  double v38;
  double v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  char v57;
  _BOOL4 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  double v64;
  _BOOL4 v65;
  int v66;
  uint64_t v67;
  _BOOL4 v68;
  int v69;
  int **v70;
  int **v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  double v83;
  unint64_t v84;
  double v85;
  int **v86;
  int *v87;
  uint64_t v88;
  unint64_t v89;
  JSC::JSBigInt *v90;
  int v91;
  BOOL v92;
  int **v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  JSC::JSBigInt *v97;
  int **v98;
  uint64_t v99;
  int v100;
  double v101;
  uint64_t v102;
  double v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  JSC::JSRopeString *v112;
  unint64_t v113;
  JSC::JSRopeString *v114;
  JSC::JSRopeString *v115;
  JSC::VM *v116;
  WTF *v117;
  JSC::JSRopeString *v118;
  JSC::JSObject *v119;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v116 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198844B7CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = *((__int16 *)a2 + 3);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_40:
    v36 = v21 + v20;
    goto LABEL_41;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    v22 = (char)a2[3];
    if (v21 <= 15)
    {
LABEL_11:
      v23 = v21;
LABEL_12:
      v24 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_40;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v36 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_41:
  v23 = v36;
  if (v36 < 0x40000000)
    goto LABEL_12;
  v37 = (v36 - 0x40000000);
  if (v37 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1988451DCLL);
  }
  v24 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v37);
LABEL_13:
  v25 = *v24;
  if (v19 >= 0x40000000)
  {
    v35 = v19 - 0x40000000;
    if (v35 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988451D4);
    }
    v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v35);
  }
  else
  {
    v26 = (unint64_t *)(a1 + 8 * v19);
  }
  v27 = *v26;
  v28 = *((_QWORD *)v10 + 7);
  if (v25 >= 0xFFFE000000000000)
  {
    if (v27 >= 0xFFFE000000000000)
    {
      v34 = (int)v25 <= (int)v27;
      goto LABEL_54;
    }
    if (v27 >> 49)
      goto LABEL_46;
  }
  else
  {
    if (v25 >> 49)
      v29 = v27 >> 49 == 0;
    else
      v29 = 1;
    if (!v29)
    {
LABEL_46:
      v38 = (double)(int)v25;
      if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v38 = v25 - 0x2000000000000;
      v39 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v39 = v27 - 0x2000000000000;
      v40 = v38 > v39;
      goto LABEL_51;
    }
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    v30 = v27 & 0xFFFE000000000002;
    goto LABEL_83;
  }
  v30 = v27 & 0xFFFE000000000002;
  if (*(_BYTE *)(v25 + 5) != 2 || v30 != 0)
  {
LABEL_83:
    v118 = 0;
    if (v30)
    {
LABEL_84:
      v117 = (WTF *)v27;
      if (*(_DWORD *)(v28 + 80))
      {
        v77 = *(_DWORD *)(v28 + 80);
        if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v28 + 16))
        {
          v66 = 0;
LABEL_138:
          v64 = 0.0;
          goto LABEL_94;
        }
      }
      if ((v27 & 0xFFFE000000000002) != 0)
      {
        if (v27 >= 0xFFFE000000000000)
        {
          v64 = (double)(int)v27;
          goto LABEL_90;
        }
        if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v64 = v27 - 0x2000000000000;
          goto LABEL_90;
        }
      }
      else if (*(_BYTE *)(v27 + 5) == 3)
      {
        v66 = 1;
        goto LABEL_138;
      }
      JSC::JSValue::toNumberSlowCase(&v117, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v64 = *(double *)a9.i64;
      if (!*(_DWORD *)(v28 + 80))
        goto LABEL_91;
LABEL_90:
      v81 = *(_DWORD *)(v28 + 80);
      if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v28 + 16))
      {
        v66 = 0;
      }
      else
      {
LABEL_91:
        v65 = ((unint64_t)v117 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v117 + 5) == 2;
        v66 = !v65;
      }
LABEL_94:
      if (*(_DWORD *)(v28 + 80))
      {
        v78 = *(_DWORD *)(v28 + 80);
        if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v28 + 16))
          goto LABEL_148;
      }
      v67 = *((_QWORD *)v10 + 7);
      if ((v25 & 0xFFFE000000000002) == 0)
        v25 = JSC::JSCell::toPrimitive(v25, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
      v118 = (JSC::JSRopeString *)v25;
      if (*(_DWORD *)(v67 + 80))
      {
        v79 = *(_DWORD *)(v67 + 80);
        if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v67 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v67 + 16))
        {
          v69 = 0;
          goto LABEL_145;
        }
        v25 = (unint64_t)v118;
      }
      if ((v25 & 0xFFFE000000000002) != 0)
      {
        if (v25 >= 0xFFFE000000000000)
        {
          *(double *)a9.i64 = (double)(int)v25;
          goto LABEL_103;
        }
        if (v25 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          a9.i64[0] = v25 - 0x2000000000000;
          goto LABEL_103;
        }
LABEL_100:
        JSC::JSValue::toNumberSlowCase(&v118, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        if (!*(_DWORD *)(v67 + 80))
          goto LABEL_104;
LABEL_103:
        v115 = (JSC::JSRopeString *)a9.i64[0];
        v82 = *(_DWORD *)(v67 + 80);
        if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v67 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        a9.i64[0] = (uint64_t)v115;
        if (*(_QWORD *)(v67 + 16))
        {
          v69 = 0;
        }
        else
        {
LABEL_104:
          v68 = ((unint64_t)v118 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v118 + 5) == 2;
          v69 = !v68;
        }
LABEL_107:
        if (*(_DWORD *)(v28 + 80))
        {
          v114 = (JSC::JSRopeString *)a9.i64[0];
          v80 = *(_DWORD *)(v28 + 80);
          if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          a9.i64[0] = (uint64_t)v114;
          if (*(_QWORD *)(v28 + 16))
            goto LABEL_148;
        }
        if ((v69 | v66) != 1)
        {
          v70 = (int **)((char *)v117 + 8);
          if ((*((_BYTE *)v117 + 8) & 1) != 0)
            v70 = JSC::JSRopeString::resolveRope((unint64_t)v117, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          v71 = (int **)((char *)v118 + 8);
          if ((*((_BYTE *)v118 + 8) & 1) != 0)
            v71 = JSC::JSRopeString::resolveRope((unint64_t)v118, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          v34 = WTF::codePointCompareLessThan((WTF *)v70, (const WTF::String *)v71, a3) ^ 1;
          goto LABEL_54;
        }
        if (((unint64_t)v118 & 0xFFFE000000000002) != 0)
        {
          v72 = (unint64_t)v117;
        }
        else
        {
          v72 = (unint64_t)v117;
          if (*((_BYTE *)v118 + 5) == 3)
          {
            v112 = v118;
            v113 = (unint64_t)v117;
            v73 = *((_QWORD *)v10 + 7);
            v74 = 3;
            goto LABEL_163;
          }
        }
        if ((v72 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v72 + 5) != 3)
        {
          v40 = *(double *)a9.i64 > v64;
LABEL_51:
          v34 = !v40;
          goto LABEL_54;
        }
        v112 = v118;
        v113 = v72;
        v73 = *((_QWORD *)v10 + 7);
        if (((unint64_t)v118 & 0xFFFE000000000002) != 0)
        {
          v119 = v118;
          if ((unint64_t)v118 >= 0xFFFE000000000000)
          {
            v83 = (double)(int)v118;
          }
          else
          {
            if ((unint64_t)v118 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              goto LABEL_224;
            *(_QWORD *)&v83 = (char *)v118 - 0x2000000000000;
          }
          if (!*(_DWORD *)(v73 + 80))
            goto LABEL_226;
LABEL_225:
          v105 = *(_DWORD *)(v73 + 80);
          if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v73 + 16))
            v100 = 1;
          else
LABEL_226:
            v100 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v113, v83);
          goto LABEL_227;
        }
        v74 = *((unsigned __int8 *)v118 + 5);
LABEL_163:
        v84 = v113 & 0xFFFE000000000002;
        if (v74 == 3 && !v84)
        {
          if (*(_BYTE *)(v113 + 5) == 3)
          {
            v91 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v112, v113);
            v92 = v91 == 3 || v91 == 0;
            goto LABEL_250;
          }
          v119 = (JSC::JSObject *)v113;
          goto LABEL_182;
        }
        if (v74 == 3)
        {
          v119 = (JSC::JSObject *)v113;
          if (v84)
          {
            if (v113 >= 0xFFFE000000000000)
            {
              v85 = (double)(int)v113;
              if (!*(_DWORD *)(v73 + 80))
                goto LABEL_216;
LABEL_215:
              v106 = *(_DWORD *)(v73 + 80);
              if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v73 + 16))
                v100 = 1;
              else
LABEL_216:
                v100 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v112, v85);
              goto LABEL_246;
            }
            if (v113 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              *(_QWORD *)&v85 = v113 - 0x2000000000000;
              goto LABEL_215;
            }
LABEL_214:
            JSC::JSValue::toNumberSlowCase(&v119, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
            v85 = v101;
            goto LABEL_215;
          }
LABEL_182:
          if (*(_BYTE *)(v113 + 5) != 2)
            goto LABEL_214;
          v93 = (int **)(v113 + 8);
          if ((*(_BYTE *)(v113 + 8) & 1) != 0)
            v93 = JSC::JSRopeString::resolveRope(v113, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          if (*(_DWORD *)(v73 + 80))
          {
            v107 = *(_DWORD *)(v73 + 80);
            if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v73 + 16))
            {
LABEL_245:
              v100 = 1;
              goto LABEL_246;
            }
          }
          v94 = *v93;
          if (*v93)
          {
            v95 = *((_QWORD *)v94 + 1);
            v96 = v94[1];
            if ((v94[4] & 4) == 0)
            {
              v97 = JSC::JSBigInt::parseInt<char16_t>(v10, v95, v96, 1);
              goto LABEL_209;
            }
          }
          else
          {
            v95 = 0;
            v96 = 0;
          }
          v97 = JSC::JSBigInt::parseInt<unsigned char>(v10, v95, v96, 1, a5);
LABEL_209:
          v99 = (uint64_t)v97;
          if (*(_DWORD *)(v73 + 80))
          {
            v109 = *(_DWORD *)(v73 + 80);
            if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            v100 = 1;
            if (*(_QWORD *)(v73 + 16) || !v99)
            {
LABEL_246:
              if (!*(_DWORD *)(v73 + 80))
                goto LABEL_247;
              v108 = *(_DWORD *)(v73 + 80);
              if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (!*(_QWORD *)(v73 + 16))
              {
LABEL_247:
                v92 = v100 == 3 || v100 == 0;
LABEL_250:
                v34 = v92;
                goto LABEL_54;
              }
              goto LABEL_148;
            }
          }
          else if (!v97)
          {
            goto LABEL_245;
          }
          if ((v99 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v99 + 5) == 3)
          {
            v100 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v112, v99);
            goto LABEL_246;
          }
          goto LABEL_214;
        }
        v119 = v112;
        if (v74 == 2)
        {
          v86 = (int **)((char *)v112 + 8);
          if ((*((_BYTE *)v112 + 8) & 1) != 0)
            v86 = JSC::JSRopeString::resolveRope((unint64_t)v112, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          if (*(_DWORD *)(v73 + 80))
          {
            v110 = *(_DWORD *)(v73 + 80);
            if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v73 + 16))
              goto LABEL_262;
          }
          v87 = *v86;
          if (*v86)
          {
            v88 = *((_QWORD *)v87 + 1);
            v89 = v87[1];
            if ((v87[4] & 4) == 0)
            {
              v90 = JSC::JSBigInt::parseInt<char16_t>(v10, v88, v89, 1);
LABEL_219:
              v102 = (uint64_t)v90;
              if (*(_DWORD *)(v73 + 80))
              {
                v111 = *(_DWORD *)(v73 + 80);
                if ((v111 & 0x27) != 0 && (v111 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                v100 = 1;
                if (*(_QWORD *)(v73 + 16) || !v102)
                {
LABEL_227:
                  if (!*(_DWORD *)(v73 + 80))
                    goto LABEL_228;
                  v104 = *(_DWORD *)(v73 + 80);
                  if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (!*(_QWORD *)(v73 + 16))
                  {
LABEL_228:
                    if (v100 == 2)
                    {
                      v100 = 3;
                    }
                    else if (v100 == 3)
                    {
                      v100 = 2;
                    }
                    goto LABEL_247;
                  }
LABEL_148:
                  v34 = 0;
                  goto LABEL_54;
                }
              }
              else if (!v90)
              {
LABEL_262:
                v100 = 1;
                goto LABEL_227;
              }
              if ((v102 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v102 + 5) == 3)
              {
                v100 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v113, v102);
                goto LABEL_227;
              }
              goto LABEL_224;
            }
          }
          else
          {
            v88 = 0;
            v89 = 0;
          }
          v90 = JSC::JSBigInt::parseInt<unsigned char>(v10, v88, v89, 1, a5);
          goto LABEL_219;
        }
LABEL_224:
        JSC::JSValue::toNumberSlowCase(&v119, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v83 = v103;
        goto LABEL_225;
      }
      if (*(_BYTE *)(v25 + 5) != 3)
        goto LABEL_100;
      v69 = 1;
LABEL_145:
      a9.i64[0] = 0;
      goto LABEL_107;
    }
LABEL_242:
    v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_84;
  }
  if (*(_BYTE *)(v27 + 5) != 2)
  {
    v118 = 0;
    goto LABEL_242;
  }
  v32 = (int **)(v25 + 8);
  if ((*(_BYTE *)(v25 + 8) & 1) != 0)
    v32 = JSC::JSRopeString::resolveRope(v25, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v28 + 80))
    goto LABEL_31;
  v75 = *(_DWORD *)(v28 + 80);
  if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v28 + 16))
  {
    v34 = 0;
  }
  else
  {
LABEL_31:
    v33 = (int **)(v27 + 8);
    if ((*(_BYTE *)(v27 + 8) & 1) != 0)
      v33 = JSC::JSRopeString::resolveRope(v27, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!*(_DWORD *)(v28 + 80))
      goto LABEL_34;
    v76 = *(_DWORD *)(v28 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
    {
      v98 = v33;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = v98;
    }
    if (*(_QWORD *)(v28 + 16))
      v34 = 0;
    else
LABEL_34:
      v34 = WTF::codePointCompareLessThan((WTF *)v33, (const WTF::String *)v32, a3) ^ 1;
  }
LABEL_54:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v116, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v116 + 2))
  {
    if (!v34)
    {
      v55 = *a2;
      v56 = v55;
      if ((v55 | 2) == 0x82)
        v56 = a2[1];
      v57 = v55 == 128;
      v58 = v55 == 130;
      if (v55 == 130)
        v57 = 2;
      v29 = v55 == 128;
      v59 = JSC::opcodeLengths[v56];
      v60 = v29 || v58;
      v61 = v59 << v57;
      v29 = v60 == 0;
      v62 = 1;
      if (!v29)
        v62 = 2;
      v54 = v61 + v62;
      return (__int128 *)&a2[v54];
    }
    if (!v22)
    {
      v41 = v9[7];
      v42 = *(_QWORD *)(v41 + 80);
      v43 = *(_QWORD *)v42;
      v44 = *(unsigned int *)(v42 + 12) + *(_QWORD *)v42;
      if (v43 > (unint64_t)a2 || v44 <= (unint64_t)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x198844C14);
      }
      v46 = *(_QWORD *)(v41 + 144);
      if (!v46)
      {
LABEL_161:
        v22 = 0;
        goto LABEL_70;
      }
      v47 = (_DWORD)a2 - v43;
      v48 = *(_DWORD *)(v46 - 8);
      v49 = 9 * ((~(v47 << 15) + v47) ^ ((~(v47 << 15) + v47) >> 10));
      v50 = (v49 ^ (v49 >> 6)) + ~((v49 ^ (v49 >> 6)) << 11);
      v51 = v48 & (v50 ^ HIWORD(v50));
      v52 = *(_DWORD *)(v46 + 8 * v51);
      if (v52 != v47)
      {
        v53 = 1;
        while (v52)
        {
          v51 = ((_DWORD)v51 + v53) & v48;
          v52 = *(_DWORD *)(v46 + 8 * v51);
          ++v53;
          if (v52 == v47)
            goto LABEL_69;
        }
        goto LABEL_161;
      }
LABEL_69:
      v22 = *(_DWORD *)(v46 + 8 * v51 + 4);
    }
LABEL_70:
    v54 = v22;
    return (__int128 *)&a2[v54];
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_jngreatereq(uint64_t a1, unsigned __int8 *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  JSC::VM *v28;
  BOOL v29;
  unint64_t v30;
  int **v32;
  int **v33;
  char v34;
  unsigned int v35;
  double v36;
  double v37;
  BOOL v38;
  int v39;
  int v40;
  char v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v49;
  _BOOL4 v50;
  int v51;
  JSC::VM *v52;
  _BOOL4 v53;
  int v54;
  int **v55;
  int **v56;
  JSC::JSRopeString *v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  BOOL v61;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v63;
  int v64;
  unint64_t v65;
  int **v66;
  int *v67;
  uint64_t v68;
  unint64_t v69;
  JSC::JSBigInt *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  double v74;
  uint64_t v75;
  int **v76;
  int *v77;
  uint64_t v78;
  unint64_t v79;
  JSC::JSBigInt *v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  double v84;
  double v85;
  double v86;
  unint64_t v87;
  unint64_t v88;
  JSC::VM *v89;
  WTF *v90;
  JSC::JSRopeString *v91;
  JSC::JSObject *v92;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v89 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884575CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    v22 = *((__int16 *)a2 + 3);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_113:
    v59 = v21 + v20;
    goto LABEL_114;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    v22 = (char)a2[3];
    if (v21 <= 15)
    {
LABEL_11:
      v23 = v21;
LABEL_12:
      v24 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_113;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v59 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_114:
  v23 = v59;
  if (v59 < 0x40000000)
    goto LABEL_12;
  v60 = (v59 - 0x40000000);
  if (v60 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x198845C4CLL);
  }
  v24 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v60);
LABEL_13:
  v25 = *v24;
  if (v19 >= 0x40000000)
  {
    v35 = v19 - 0x40000000;
    if (v35 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198845C44);
    }
    v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v35);
  }
  else
  {
    v26 = (unint64_t *)(a1 + 8 * v19);
  }
  v27 = *v26;
  v28 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v25 >= 0xFFFE000000000000)
  {
    if (v27 >= 0xFFFE000000000000)
    {
      v34 = (int)v25 <= (int)v27;
      goto LABEL_47;
    }
    if (v27 >> 49)
      goto LABEL_39;
  }
  else
  {
    if (v25 >> 49)
      v29 = v27 >> 49 == 0;
    else
      v29 = 1;
    if (!v29)
    {
LABEL_39:
      v36 = (double)(int)v25;
      if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v36 = v25 - 0x2000000000000;
      v37 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v37 = v27 - 0x2000000000000;
      v38 = v36 > v37;
      goto LABEL_44;
    }
  }
  if ((v25 & 0xFFFE000000000002) != 0)
  {
    v30 = v27 & 0xFFFE000000000002;
    goto LABEL_66;
  }
  v30 = v27 & 0xFFFE000000000002;
  if (*(_BYTE *)(v25 + 5) != 2 || v30 != 0)
  {
LABEL_66:
    v91 = 0;
    if (v30)
    {
LABEL_67:
      v90 = (WTF *)v27;
      if (*((_DWORD *)v28 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v51 = 0;
LABEL_123:
        v49 = 0.0;
        goto LABEL_75;
      }
      if ((v27 & 0xFFFE000000000002) != 0)
      {
        if (v27 >= 0xFFFE000000000000)
        {
          v49 = (double)(int)v27;
          goto LABEL_71;
        }
        if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          *(_QWORD *)&v49 = v27 - 0x2000000000000;
          goto LABEL_71;
        }
      }
      else if (*(_BYTE *)(v27 + 5) == 3)
      {
        v51 = 1;
        goto LABEL_123;
      }
      JSC::JSValue::toNumberSlowCase(&v90, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      v49 = *(double *)a9.i64;
LABEL_71:
      if (*((_DWORD *)v28 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v51 = 0;
      }
      else
      {
        v50 = ((unint64_t)v90 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v90 + 5) == 2;
        v51 = !v50;
      }
LABEL_75:
      if (*((_DWORD *)v28 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_130;
      }
      v52 = (JSC::VM *)*((_QWORD *)v10 + 7);
      if ((v25 & 0xFFFE000000000002) == 0)
        v25 = JSC::JSCell::toPrimitive(v25, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
      v91 = (JSC::JSRopeString *)v25;
      if (*((_DWORD *)v52 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v52, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v54 = 0;
          goto LABEL_128;
        }
        v25 = (unint64_t)v91;
      }
      if ((v25 & 0xFFFE000000000002) != 0)
      {
        if (v25 >= 0xFFFE000000000000)
        {
          *(double *)a9.i64 = (double)(int)v25;
          goto LABEL_82;
        }
        if (v25 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          a9.i64[0] = v25 - 0x2000000000000;
          goto LABEL_82;
        }
LABEL_81:
        JSC::JSValue::toNumberSlowCase(&v91, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_82:
        if (*((_DWORD *)v52 + 20)
          && (v88 = a9.i64[0],
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v52, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), a9.i64[0] = v88, hasExceptionsAfterHandlingTraps))
        {
          v54 = 0;
        }
        else
        {
          v53 = ((unint64_t)v91 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v91 + 5) == 2;
          v54 = !v53;
        }
LABEL_86:
        if (*((_DWORD *)v28 + 20))
        {
          v87 = a9.i64[0];
          v61 = JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          a9.i64[0] = v87;
          if (v61)
            goto LABEL_130;
        }
        if ((v54 | v51) != 1)
        {
          v55 = (int **)((char *)v90 + 8);
          if ((*((_BYTE *)v90 + 8) & 1) != 0)
            v55 = JSC::JSRopeString::resolveRope((unint64_t)v90, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          v56 = (int **)((char *)v91 + 8);
          if ((*((_BYTE *)v91 + 8) & 1) != 0)
            v56 = JSC::JSRopeString::resolveRope((unint64_t)v91, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
          v34 = WTF::codePointCompareLessThan((WTF *)v55, (const WTF::String *)v56, a3) ^ 1;
          goto LABEL_47;
        }
        v57 = v91;
        if (((unint64_t)v91 & 0xFFFE000000000002) != 0)
        {
          v58 = (unint64_t)v90;
        }
        else
        {
          v58 = (unint64_t)v90;
          if (*((_BYTE *)v91 + 5) == 3)
          {
            v63 = (JSC::VM *)*((_QWORD *)v10 + 7);
            v64 = 3;
            goto LABEL_138;
          }
        }
        if ((v58 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v58 + 5) != 3)
        {
          v38 = *(double *)a9.i64 > v49;
LABEL_44:
          v34 = !v38;
          goto LABEL_47;
        }
        v63 = (JSC::VM *)*((_QWORD *)v10 + 7);
        if (((unint64_t)v91 & 0xFFFE000000000002) != 0)
        {
          v92 = v91;
          if ((unint64_t)v91 >= 0xFFFE000000000000)
          {
            v74 = (double)(int)v91;
            goto LABEL_157;
          }
          if ((unint64_t)v91 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            *(_QWORD *)&v74 = (char *)v91 - 0x2000000000000;
LABEL_157:
            if (*((_DWORD *)v63 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v63, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              v73 = 1;
            }
            else
            {
              v73 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(v58, v74);
            }
LABEL_159:
            if (!*((_DWORD *)v63 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v63, v75, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              if (v73 == 2)
              {
                v73 = 3;
              }
              else if (v73 == 3)
              {
                v73 = 2;
              }
              goto LABEL_187;
            }
            goto LABEL_130;
          }
LABEL_193:
          JSC::JSValue::toNumberSlowCase(&v92, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          v74 = v86;
          goto LABEL_157;
        }
        v64 = *((unsigned __int8 *)v91 + 5);
LABEL_138:
        v65 = v58 & 0xFFFE000000000002;
        if (v64 == 3 && !v65)
        {
          if (*(_BYTE *)(v58 + 5) == 3)
          {
            v82 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v91, v58);
            v83 = v82 == 3 || v82 == 0;
            goto LABEL_190;
          }
          v92 = (JSC::JSObject *)v58;
          goto LABEL_142;
        }
        if (v64 == 3)
        {
          v92 = (JSC::JSObject *)v58;
          if (v65)
          {
            if (v58 >= 0xFFFE000000000000)
            {
              v85 = (double)(int)v58;
              goto LABEL_184;
            }
            if (v58 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              *(_QWORD *)&v85 = v58 - 0x2000000000000;
              goto LABEL_184;
            }
LABEL_183:
            JSC::JSValue::toNumberSlowCase(&v92, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
            v85 = v84;
LABEL_184:
            if (*((_DWORD *)v63 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v63, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              v73 = 1;
            }
            else
            {
              v73 = JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>((uint64_t)v57, v85);
            }
LABEL_186:
            if (!*((_DWORD *)v63 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v63, v71, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
LABEL_187:
              v83 = v73 == 3 || v73 == 0;
LABEL_190:
              v34 = v83;
              goto LABEL_47;
            }
LABEL_130:
            v34 = 0;
            goto LABEL_47;
          }
LABEL_142:
          if (*(_BYTE *)(v58 + 5) == 2)
          {
            v66 = (int **)(v58 + 8);
            if ((*(_BYTE *)(v58 + 8) & 1) != 0)
              v66 = JSC::JSRopeString::resolveRope(v58, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
            if (*((_DWORD *)v63 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v63, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              goto LABEL_211;
            }
            v67 = *v66;
            if (*v66)
            {
              v68 = *((_QWORD *)v67 + 1);
              v69 = v67[1] | ((unint64_t)((v67[4] >> 2) & 1) << 32);
            }
            else
            {
              v68 = 0;
              v69 = 0x100000000;
            }
            v70 = JSC::JSBigInt::stringToBigInt(v10, v68, v69, a4, a5);
            v72 = (uint64_t)v70;
            if (*((_DWORD *)v63 + 20))
            {
              v73 = 1;
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v63, v71, (uint64_t)a3, a4, a5, a6, a7, a8) || !v72)
                goto LABEL_186;
            }
            else if (!v70)
            {
LABEL_211:
              v73 = 1;
              goto LABEL_186;
            }
            if ((v72 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v72 + 5) == 3)
            {
              v73 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((uint64_t)v57, v72);
              goto LABEL_186;
            }
          }
          goto LABEL_183;
        }
        v92 = v91;
        if (v64 != 2)
          goto LABEL_193;
        v76 = (int **)((char *)v91 + 8);
        if ((*((_BYTE *)v91 + 8) & 1) != 0)
          v76 = JSC::JSRopeString::resolveRope((unint64_t)v91, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (*((_DWORD *)v63 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v63, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_217:
          v73 = 1;
          goto LABEL_159;
        }
        v77 = *v76;
        if (*v76)
        {
          v78 = *((_QWORD *)v77 + 1);
          v79 = v77[1] | ((unint64_t)((v77[4] >> 2) & 1) << 32);
        }
        else
        {
          v78 = 0;
          v79 = 0x100000000;
        }
        v80 = JSC::JSBigInt::stringToBigInt(v10, v78, v79, a4, a5);
        v81 = (uint64_t)v80;
        if (*((_DWORD *)v63 + 20))
        {
          v73 = 1;
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v63, v75, (uint64_t)a3, a4, a5, a6, a7, a8) || !v81)
            goto LABEL_159;
        }
        else if (!v80)
        {
          goto LABEL_217;
        }
        if ((v81 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v81 + 5) == 3)
        {
          v73 = JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v58, v81);
          goto LABEL_159;
        }
        goto LABEL_193;
      }
      if (*(_BYTE *)(v25 + 5) != 3)
        goto LABEL_81;
      v54 = 1;
LABEL_128:
      a9.i64[0] = 0;
      goto LABEL_86;
    }
LABEL_209:
    v27 = JSC::JSCell::toPrimitive(v27, (JSC::VM **)v10, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_67;
  }
  if (*(_BYTE *)(v27 + 5) != 2)
  {
    v91 = 0;
    goto LABEL_209;
  }
  v32 = (int **)(v25 + 8);
  if ((*(_BYTE *)(v25 + 8) & 1) != 0)
    v32 = JSC::JSRopeString::resolveRope(v25, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v28 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v34 = 0;
  }
  else
  {
    v33 = (int **)(v27 + 8);
    if ((*(_BYTE *)(v27 + 8) & 1) != 0)
      v33 = JSC::JSRopeString::resolveRope(v27, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*((_DWORD *)v28 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v28, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v34 = 0;
    }
    else
    {
      v34 = WTF::codePointCompareLessThan((WTF *)v33, (const WTF::String *)v32, a3) ^ 1;
    }
  }
LABEL_47:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v89, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v89 + 2))
    return &xmmword_1ECF4C7C0;
  if ((v34 & 1) != 0)
  {
    v39 = *a2;
    v40 = v39;
    if ((v39 | 2) == 0x82)
      v40 = a2[1];
    v41 = v39 == 128;
    v42 = v39 == 130;
    if (v39 == 130)
      v41 = 2;
    v29 = v39 == 128;
    v43 = JSC::opcodeLengths[v40];
    v44 = v29 || v42;
    v45 = v43 << v41;
    v29 = v44 == 0;
    v46 = 1;
    if (!v29)
      v46 = 2;
    v47 = v45 + v46;
  }
  else
  {
    if (!v22)
      v22 = JSC::CodeBlock::outOfLineJumpOffset(v9, (unint64_t)a2);
    v47 = v22;
  }
  return (__int128 *)&a2[v47];
}

__int128 *llint_slow_path_jeq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  JSC::VM **v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  JSC::JSBigInt **v24;
  JSC::JSBigInt *v25;
  JSC::JSBigInt **v26;
  JSC::JSBigInt *v27;
  int v29;
  int v30;
  int v31;
  char v32;
  _BOOL4 v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  JSC::VM *v57;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::VM **)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v57 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_63:
    __break(0xC471u);
    JUMPOUT(0x198845F1CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((__int16 *)a2 + 3);
    if (v19 <= 63)
      goto LABEL_11;
LABEL_54:
    v55 = v19 + v20;
    goto LABEL_55;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = (char)a2[3];
    if (v19 <= 15)
    {
LABEL_11:
      v23 = v19;
LABEL_12:
      v24 = (JSC::JSBigInt **)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_54;
  }
  v55 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_55:
  v23 = v55;
  if (v55 < 0x40000000)
    goto LABEL_12;
  v56 = (v55 - 0x40000000);
  if (v56 >= *(unsigned int *)(v12 + 172))
    goto LABEL_63;
  v24 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v56);
LABEL_13:
  v25 = *v24;
  if (v21 >= 0x40000000)
  {
    v41 = v21 - 0x40000000;
    if (v41 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198845F90);
    }
    v26 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v41);
  }
  else
  {
    v26 = (JSC::JSBigInt **)(a1 + 8 * v21);
  }
  v27 = *v26;
  if ((unint64_t)v25 >= 0xFFFE000000000000 && (unint64_t)v27 >= 0xFFFE000000000000)
    v29 = v25 == v27;
  else
    v29 = JSC::JSValue::equalSlowCase(v10, v25, v27, a5, a6, a7, a8, a9, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v57, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v11 + 2))
  {
    if (!v29)
    {
      v30 = *a2;
      v31 = v30;
      if ((v30 | 2) == 0x82)
        v31 = a2[1];
      v32 = v30 == 128;
      v33 = v30 == 130;
      if (v30 == 130)
        v32 = 2;
      v34 = v30 == 128;
      v35 = JSC::opcodeLengths[v31];
      v36 = v34 || v33;
      v37 = v35 << v32;
      v34 = v36 == 0;
      v38 = 1;
      if (!v34)
        v38 = 2;
      v39 = v37 + v38;
      return (__int128 *)&a2[v39];
    }
    if (v22)
    {
LABEL_36:
      v39 = v22;
      return (__int128 *)&a2[v39];
    }
    v42 = v9[7];
    v43 = *(_QWORD *)(v42 + 80);
    v44 = *(_QWORD *)v43;
    v45 = *(unsigned int *)(v43 + 12) + *(_QWORD *)v43;
    if (v44 > (unint64_t)a2 || v45 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198845F64);
    }
    v47 = *(_QWORD *)(v42 + 144);
    if (v47)
    {
      v48 = (_DWORD)a2 - v44;
      v49 = *(_DWORD *)(v47 - 8);
      v50 = 9 * ((~(v48 << 15) + v48) ^ ((~(v48 << 15) + v48) >> 10));
      v51 = (v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11);
      v52 = v49 & (v51 ^ HIWORD(v51));
      v53 = *(_DWORD *)(v47 + 8 * v52);
      if (v53 == v48)
      {
LABEL_46:
        v22 = *(_DWORD *)(v47 + 8 * v52 + 4);
        goto LABEL_36;
      }
      v54 = 1;
      while (v53)
      {
        v52 = ((_DWORD)v52 + v54) & v49;
        v53 = *(_DWORD *)(v47 + 8 * v52);
        ++v54;
        if (v53 == v48)
          goto LABEL_46;
      }
    }
    v22 = 0;
    goto LABEL_36;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_jneq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  JSC::VM **v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  JSC::JSBigInt **v24;
  JSC::JSBigInt *v25;
  JSC::JSBigInt **v26;
  JSC::JSBigInt *v27;
  char v29;
  uint64_t v30;
  unsigned int v32;
  int v33;
  int v34;
  char v35;
  _BOOL4 v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  JSC::VM *v57;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::VM **)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v57 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_63:
    __break(0xC471u);
    JUMPOUT(0x198846250);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((__int16 *)a2 + 3);
    if (v19 <= 63)
      goto LABEL_11;
LABEL_50:
    v54 = v19 + v20;
    goto LABEL_51;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = (char)a2[3];
    if (v19 <= 15)
    {
LABEL_11:
      v23 = v19;
LABEL_12:
      v24 = (JSC::JSBigInt **)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_50;
  }
  v54 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_51:
  v23 = v54;
  if (v54 < 0x40000000)
    goto LABEL_12;
  v55 = (v54 - 0x40000000);
  if (v55 >= *(unsigned int *)(v12 + 172))
    goto LABEL_63;
  v24 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v55);
LABEL_13:
  v25 = *v24;
  if (v21 >= 0x40000000)
  {
    v32 = v21 - 0x40000000;
    if (v32 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988462C4);
    }
    v26 = (JSC::JSBigInt **)(*(_QWORD *)(v12 + 160) + 8 * v32);
  }
  else
  {
    v26 = (JSC::JSBigInt **)(a1 + 8 * v21);
  }
  v27 = *v26;
  if ((unint64_t)v25 >= 0xFFFE000000000000 && (unint64_t)v27 >= 0xFFFE000000000000)
    v29 = v25 == v27;
  else
    v29 = JSC::JSValue::equalSlowCase(v10, v25, v27, a5, a6, a7, a8, a9, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v57, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v11 + 2))
  {
    if ((v29 & 1) != 0)
    {
      v33 = *a2;
      v34 = v33;
      if ((v33 | 2) == 0x82)
        v34 = a2[1];
      v35 = v33 == 128;
      v36 = v33 == 130;
      if (v33 == 130)
        v35 = 2;
      v37 = v33 == 128;
      v38 = JSC::opcodeLengths[v34];
      v39 = v37 || v36;
      v40 = v38 << v35;
      v37 = v39 == 0;
      v41 = 1;
      if (!v37)
        v41 = 2;
      v30 = v40 + v41;
      return (__int128 *)&a2[v30];
    }
    if (v22)
    {
LABEL_25:
      v30 = v22;
      return (__int128 *)&a2[v30];
    }
    v42 = v9[7];
    v43 = *(_QWORD *)(v42 + 80);
    v44 = *(_QWORD *)v43;
    v45 = *(unsigned int *)(v43 + 12) + *(_QWORD *)v43;
    if (v44 > (unint64_t)a2 || v45 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198846298);
    }
    v47 = *(_QWORD *)(v42 + 144);
    if (v47)
    {
      v48 = (_DWORD)a2 - v44;
      v49 = *(_DWORD *)(v47 - 8);
      v50 = 9 * ((~(v48 << 15) + v48) ^ ((~(v48 << 15) + v48) >> 10));
      v51 = (v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11);
      v52 = v49 & (v51 ^ HIWORD(v51));
      v53 = *(_DWORD *)(v47 + 8 * v52);
      if (v53 == v48)
      {
LABEL_46:
        v22 = *(_DWORD *)(v47 + 8 * v52 + 4);
        goto LABEL_25;
      }
      v56 = 1;
      while (v53)
      {
        v52 = ((_DWORD)v52 + v56) & v49;
        v53 = *(_DWORD *)(v47 + 8 * v52);
        ++v56;
        if (v53 == v48)
          goto LABEL_46;
      }
    }
    v22 = 0;
    goto LABEL_25;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_jstricteq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  char v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v42;
  const WTF::StringImpl *v43;
  _BOOL4 v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  JSC::VM *v63;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v63 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x198846638);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((__int16 *)a2 + 3);
    if (v19 <= 63)
      goto LABEL_11;
LABEL_56:
    v46 = v19 + v20;
    goto LABEL_57;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = (char)a2[3];
    if (v19 <= 15)
    {
LABEL_11:
      v23 = v19;
LABEL_12:
      v24 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_56;
  }
  v46 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_57:
  v23 = v46;
  if (v46 < 0x40000000)
    goto LABEL_12;
  v47 = (v46 - 0x40000000);
  if (v47 >= *(unsigned int *)(v12 + 172))
    goto LABEL_85;
  v24 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v47);
LABEL_13:
  v25 = *v24;
  if (v21 >= 0x40000000)
  {
    v45 = v21 - 0x40000000;
    if (v45 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988466BCLL);
    }
    v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v45);
  }
  else
  {
    v26 = (unint64_t *)(a1 + 8 * v21);
  }
  v27 = *v26;
  if (v25 >= 0xFFFE000000000000)
  {
    if (v27 >= 0xFFFE000000000000)
      goto LABEL_24;
    if (v27 >> 49)
    {
LABEL_62:
      v48 = (double)(int)v25;
      if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v48 = v25 - 0x2000000000000;
      v49 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v49 = v27 - 0x2000000000000;
      v30 = v48 == v49;
      goto LABEL_25;
    }
  }
  else
  {
    if (v25 >> 49)
      v28 = v27 >> 49 == 0;
    else
      v28 = 1;
    if (!v28)
      goto LABEL_62;
  }
  if (((v25 | v27) & 0xFFFE000000000002) == 0)
  {
    v29 = *(unsigned __int8 *)(v25 + 5);
    if (v29 == 2)
    {
      if (*(_BYTE *)(v27 + 5) == 2)
      {
        v42 = *(WTF **)(v25 + 8);
        if ((v42 & 1) != 0
          || (v43 = *(const WTF::StringImpl **)(v27 + 8), (v43 & 1) != 0))
        {
          v44 = JSC::JSString::equalSlowCase((JSC::JSString *)v25, v10, (JSC::JSString *)v27, a5, a6, a7, a8, a9, a3);
        }
        else
        {
          v44 = WTF::equal(v42, v43, (const WTF::StringImpl *)v27);
        }
        goto LABEL_47;
      }
    }
    else if (v29 == 3 && *(_BYTE *)(v27 + 5) == 3)
    {
      v44 = JSC::JSBigInt::equals((JSC::JSBigInt *)v25, (JSC::JSBigInt *)v27, (JSC::JSBigInt *)v27);
LABEL_47:
      v31 = v44;
      goto LABEL_28;
    }
  }
LABEL_24:
  v30 = v25 == v27;
LABEL_25:
  v31 = v30;
LABEL_28:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v63, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v11 + 2))
  {
    if (!v31)
    {
      v32 = *a2;
      v33 = v32;
      if ((v32 | 2) == 0x82)
        v33 = a2[1];
      v34 = v32 == 128;
      v35 = v32 == 130;
      if (v32 == 130)
        v34 = 2;
      v28 = v32 == 128;
      v36 = JSC::opcodeLengths[v33];
      v37 = v28 || v35;
      v38 = v36 << v34;
      v28 = v37 == 0;
      v39 = 1;
      if (!v28)
        v39 = 2;
      v40 = v38 + v39;
      return (__int128 *)&a2[v40];
    }
    if (v22)
    {
LABEL_51:
      v40 = v22;
      return (__int128 *)&a2[v40];
    }
    v50 = v9[7];
    v51 = *(_QWORD *)(v50 + 80);
    v52 = *(_QWORD *)v51;
    v53 = *(unsigned int *)(v51 + 12) + *(_QWORD *)v51;
    if (v52 > (unint64_t)a2 || v53 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198846690);
    }
    v55 = *(_QWORD *)(v50 + 144);
    if (v55)
    {
      v56 = (_DWORD)a2 - v52;
      v57 = *(_DWORD *)(v55 - 8);
      v58 = 9 * ((~(v56 << 15) + v56) ^ ((~(v56 << 15) + v56) >> 10));
      v59 = (v58 ^ (v58 >> 6)) + ~((v58 ^ (v58 >> 6)) << 11);
      v60 = v57 & (v59 ^ HIWORD(v59));
      v61 = *(_DWORD *)(v55 + 8 * v60);
      if (v61 == v56)
      {
LABEL_74:
        v22 = *(_DWORD *)(v55 + 8 * v60 + 4);
        goto LABEL_51;
      }
      v62 = 1;
      while (v61)
      {
        v60 = ((_DWORD)v60 + v62) & v57;
        v61 = *(_DWORD *)(v55 + 8 * v60);
        ++v62;
        if (v61 == v56)
          goto LABEL_74;
      }
    }
    v22 = 0;
    goto LABEL_51;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_jnstricteq(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  WTF *v34;
  const WTF::StringImpl *v35;
  BOOL v36;
  unsigned int v37;
  int v38;
  int v39;
  char v40;
  _BOOL4 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  int v60;
  double v61;
  double v62;
  JSC::VM *v63;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v63 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x198846A30);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 > 63)
      v21 += 1073741760;
    v22 = *((__int16 *)a2 + 3);
    if (v19 <= 63)
      goto LABEL_11;
LABEL_63:
    v58 = v19 + v20;
    goto LABEL_64;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    v21 = (char)a2[2];
    if (v21 > 15)
      v21 += 1073741808;
    v22 = (char)a2[3];
    if (v19 <= 15)
    {
LABEL_11:
      v23 = v19;
LABEL_12:
      v24 = (unint64_t *)(a1 + 8 * v23);
      goto LABEL_13;
    }
    goto LABEL_63;
  }
  v58 = *(_DWORD *)(a2 + 2);
  v21 = *(_DWORD *)(a2 + 6);
  v22 = *(_DWORD *)(a2 + 10);
LABEL_64:
  v23 = v58;
  if (v58 < 0x40000000)
    goto LABEL_12;
  v59 = (v58 - 0x40000000);
  if (v59 >= *(unsigned int *)(v12 + 172))
    goto LABEL_85;
  v24 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v59);
LABEL_13:
  v25 = *v24;
  if (v21 >= 0x40000000)
  {
    v37 = v21 - 0x40000000;
    if (v37 >= *(_DWORD *)(v12 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198846AB4);
    }
    v26 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v37);
  }
  else
  {
    v26 = (unint64_t *)(a1 + 8 * v21);
  }
  v27 = *v26;
  if (v25 >= 0xFFFE000000000000)
  {
    if (v27 >= 0xFFFE000000000000)
      goto LABEL_24;
    if (v27 >> 49)
    {
LABEL_74:
      v61 = (double)(int)v25;
      if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v61 = v25 - 0x2000000000000;
      v62 = (double)(int)v27;
      if (v27 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v62 = v27 - 0x2000000000000;
      v30 = v61 == v62;
      goto LABEL_25;
    }
  }
  else
  {
    if (v25 >> 49)
      v28 = v27 >> 49 == 0;
    else
      v28 = 1;
    if (!v28)
      goto LABEL_74;
  }
  if (((v25 | v27) & 0xFFFE000000000002) == 0)
  {
    v29 = *(unsigned __int8 *)(v25 + 5);
    if (v29 == 2)
    {
      if (*(_BYTE *)(v27 + 5) == 2)
      {
        v34 = *(WTF **)(v25 + 8);
        if ((v34 & 1) != 0
          || (v35 = *(const WTF::StringImpl **)(v27 + 8), (v35 & 1) != 0))
        {
          v36 = JSC::JSString::equalSlowCase((JSC::JSString *)v25, v10, (JSC::JSString *)v27, a5, a6, a7, a8, a9, a3);
        }
        else
        {
          v36 = WTF::equal(v34, v35, (const WTF::StringImpl *)v27);
        }
        goto LABEL_39;
      }
    }
    else if (v29 == 3 && *(_BYTE *)(v27 + 5) == 3)
    {
      v36 = JSC::JSBigInt::equals((JSC::JSBigInt *)v25, (JSC::JSBigInt *)v27, (JSC::JSBigInt *)v27);
LABEL_39:
      v31 = v36;
      goto LABEL_28;
    }
  }
LABEL_24:
  v30 = v25 == v27;
LABEL_25:
  v31 = v30;
LABEL_28:
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v63, "LLIntSlowPaths", a2);
  if (!*((_QWORD *)v11 + 2))
  {
    if ((v31 & 1) != 0)
    {
      v38 = *a2;
      v39 = v38;
      if ((v38 | 2) == 0x82)
        v39 = a2[1];
      v40 = v38 == 128;
      v41 = v38 == 130;
      if (v38 == 130)
        v40 = 2;
      v28 = v38 == 128;
      v42 = JSC::opcodeLengths[v39];
      v43 = v28 || v41;
      v44 = v42 << v40;
      v28 = v43 == 0;
      v45 = 1;
      if (!v28)
        v45 = 2;
      v32 = v44 + v45;
      return (__int128 *)&a2[v32];
    }
    if (v22)
    {
LABEL_33:
      v32 = v22;
      return (__int128 *)&a2[v32];
    }
    v46 = v9[7];
    v47 = *(_QWORD *)(v46 + 80);
    v48 = *(_QWORD *)v47;
    v49 = *(unsigned int *)(v47 + 12) + *(_QWORD *)v47;
    if (v48 > (unint64_t)a2 || v49 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198846A78);
    }
    v51 = *(_QWORD *)(v46 + 144);
    if (v51)
    {
      v52 = (_DWORD)a2 - v48;
      v53 = *(_DWORD *)(v51 - 8);
      v54 = 9 * ((~(v52 << 15) + v52) ^ ((~(v52 << 15) + v52) >> 10));
      v55 = (v54 ^ (v54 >> 6)) + ~((v54 ^ (v54 >> 6)) << 11);
      v56 = v53 & (v55 ^ HIWORD(v55));
      v57 = *(_DWORD *)(v51 + 8 * v56);
      if (v57 == v52)
      {
LABEL_59:
        v22 = *(_DWORD *)(v51 + 8 * v56 + 4);
        goto LABEL_33;
      }
      v60 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v60) & v53;
        v57 = *(_DWORD *)(v51 + 8 * v56);
        ++v60;
        if (v57 == v52)
          goto LABEL_59;
      }
    }
    v22 = 0;
    goto LABEL_33;
  }
  return &xmmword_1ECF4C7C0;
}

__int128 *llint_slow_path_switch_imm(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  double v30;
  int v31;
  unsigned int *v32;
  _DWORD *v33;
  int v34;
  BOOL v35;
  int v36;
  _DWORD *v37;
  int v38;
  unsigned __int8 *v39;
  int v41;
  int v42;
  unint64_t v43;
  JSC::VM *v44;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = v3[1];
  v5 = (JSC::VM *)v3[9];
  *((_QWORD *)v5 + 5) = a1;
  v44 = v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
  v8 = *(_QWORD *)v7;
  v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
  if (v8 > (unint64_t)a2 || v9 <= (unint64_t)a2)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x198846CF0);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v8) & 0x3FFFFFFF;
  v11 = *a2;
  if (v11 == 130)
  {
    v12 = *(_DWORD *)(a2 + 2);
    LODWORD(v13) = *(_DWORD *)(a2 + 6);
    v42 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v11 == 128)
    {
      v12 = *((unsigned __int16 *)a2 + 1);
      LODWORD(v13) = *((__int16 *)a2 + 2);
      v14 = *((__int16 *)a2 + 3);
      if (v14 <= 63)
        goto LABEL_9;
      v41 = 1073741760;
    }
    else
    {
      v12 = a2[1];
      LODWORD(v13) = (char)a2[2];
      v14 = (char)a2[3];
      if (v14 <= 15)
      {
LABEL_9:
        v15 = v14;
LABEL_10:
        v16 = (uint64_t *)(a1 + 8 * v15);
        goto LABEL_11;
      }
      v41 = 1073741808;
    }
    v42 = v14 + v41;
  }
  v15 = v42;
  if (v42 < 0x40000000)
    goto LABEL_10;
  v43 = (v42 - 0x40000000);
  if (v43 >= *(unsigned int *)(v6 + 172))
    goto LABEL_45;
  v16 = (uint64_t *)(*(_QWORD *)(v6 + 160) + 8 * v43);
LABEL_11:
  v17 = *v16;
  if (!(_DWORD)v13)
  {
    v18 = v3[7];
    v19 = *(_QWORD *)(v18 + 80);
    v20 = *(_QWORD *)v19;
    v21 = *(unsigned int *)(v19 + 12) + *(_QWORD *)v19;
    if (v20 > (unint64_t)a2 || v21 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198846D48);
    }
    v13 = *(_QWORD *)(v18 + 144);
    if (v13)
    {
      v23 = (_DWORD)a2 - v20;
      v24 = *(_DWORD *)(v13 - 8);
      v25 = 9 * ((~(v23 << 15) + v23) ^ ((~(v23 << 15) + v23) >> 10));
      v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
      v27 = v24 & (v26 ^ HIWORD(v26));
      v28 = *(_DWORD *)(v13 + 8 * v27);
      if (v28 == v23)
      {
LABEL_22:
        LODWORD(v13) = *(_DWORD *)(v13 + 8 * v27 + 4);
      }
      else
      {
        v29 = 1;
        while (v28)
        {
          v27 = ((_DWORD)v27 + v29) & v24;
          v28 = *(_DWORD *)(v13 + 8 * v27);
          ++v29;
          if (v28 == v23)
            goto LABEL_22;
        }
        LODWORD(v13) = 0;
      }
    }
  }
  *(_QWORD *)&v30 = v17 - 0x2000000000000;
  v31 = (int)COERCE_DOUBLE(v17 - 0x2000000000000);
  if (v30 != (double)v31)
    goto LABEL_29;
  v32 = *(unsigned int **)(*(_QWORD *)(v3[7] + 152) + 8);
  if (*v32 <= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198846D28);
  }
  v33 = v32 + 2;
  v34 = v33[4 * v12 + 2];
  v35 = __OFSUB__(v31, v34);
  v36 = v31 - v34;
  if (v36 < 0 != v35
    || (v37 = *(_DWORD **)&v33[4 * v12]) == 0
    || *v37 <= v36
    || (v38 = v37[v36 + 1]) == 0)
  {
LABEL_29:
    v38 = v13;
  }
  v39 = &a2[v38];
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v4, &v44, "LLIntSlowPaths", v39);
  if (*((_QWORD *)v5 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)v39;
}

__int128 *llint_slow_path_switch_char(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int **v38;
  unsigned int *v39;
  _DWORD *v40;
  int *v41;
  int v42;
  BOOL v43;
  int v44;
  _DWORD *v45;
  int v46;
  unsigned __int8 *v47;
  int v49;
  int v50;
  unint64_t v51;
  unsigned __int8 *v52;
  JSC::VM *v53;

  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = (JSC::VM *)v9[9];
  *((_QWORD *)v11 + 5) = a1;
  v53 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198847010);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v50 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    if (v18 == 128)
    {
      v19 = *((unsigned __int16 *)a2 + 1);
      v20 = *((__int16 *)a2 + 2);
      v21 = *((__int16 *)a2 + 3);
      if (v21 <= 63)
        goto LABEL_9;
      v49 = 1073741760;
    }
    else
    {
      v19 = a2[1];
      v20 = (char)a2[2];
      v21 = (char)a2[3];
      if (v21 <= 15)
      {
LABEL_9:
        v22 = v21;
LABEL_10:
        v23 = (unint64_t *)(a1 + 8 * v22);
        goto LABEL_11;
      }
      v49 = 1073741808;
    }
    v50 = v21 + v49;
  }
  v22 = v50;
  if (v50 < 0x40000000)
    goto LABEL_10;
  v51 = (v50 - 0x40000000);
  if (v51 >= *(unsigned int *)(v12 + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x198847090);
  }
  v23 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v51);
LABEL_11:
  v24 = *v23;
  if (v20)
    goto LABEL_23;
  v25 = v9[7];
  v26 = *(_QWORD *)(v25 + 80);
  v27 = *(_QWORD *)v26;
  v28 = *(unsigned int *)(v26 + 12) + *(_QWORD *)v26;
  if (v27 > (unint64_t)a2 || v28 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884706CLL);
  }
  v30 = *(_QWORD *)(v25 + 144);
  if (v30)
  {
    v31 = (_DWORD)a2 - v27;
    v32 = *(_DWORD *)(v30 - 8);
    v33 = 9 * ((~(v31 << 15) + v31) ^ ((~(v31 << 15) + v31) >> 10));
    v34 = (v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11);
    v35 = v32 & (v34 ^ HIWORD(v34));
    v36 = *(_DWORD *)(v30 + 8 * v35);
    if (v36 == v31)
    {
LABEL_22:
      v20 = *(_DWORD *)(v30 + 8 * v35 + 4);
      goto LABEL_23;
    }
    v37 = 1;
    while (v36)
    {
      v35 = ((_DWORD)v35 + v37) & v32;
      v36 = *(_DWORD *)(v30 + 8 * v35);
      ++v37;
      if (v36 == v31)
        goto LABEL_22;
    }
  }
  v20 = 0;
LABEL_23:
  v38 = (int **)(v24 + 8);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
    v38 = JSC::JSRopeString::resolveRope(v24, v10, a3, a4, a9, a5, a6, a7, a8);
  v39 = *(unsigned int **)(*(_QWORD *)(v9[7] + 152) + 8);
  if (*v39 <= v19)
  {
    __break(0xC471u);
    JUMPOUT(0x198847030);
  }
  v40 = v39 + 2;
  v41 = *v38;
  if (*v38)
  {
    if (v41[1])
    {
      v52 = (unsigned __int8 *)*((_QWORD *)v41 + 1);
      if ((v41[4] & 4) != 0)
        LODWORD(v41) = *v52;
      else
        LODWORD(v41) = *(unsigned __int16 *)v52;
    }
    else
    {
      LODWORD(v41) = 0;
    }
  }
  v42 = v40[4 * v19 + 2];
  v43 = __OFSUB__((_DWORD)v41, v42);
  v44 = (_DWORD)v41 - v42;
  if (v44 < 0 != v43
    || (v45 = *(_DWORD **)&v40[4 * v19]) == 0
    || *v45 <= v44
    || (v46 = v45[v44 + 1]) == 0)
  {
    v46 = v20;
  }
  v47 = &a2[v46];
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v53, "LLIntSlowPaths", v47);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)v47;
}

__int128 *llint_slow_path_switch_string(uint64_t a1, unsigned __int8 *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int **v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  JSC::VM *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  int v59;
  JSC::VM *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  JSC::VM *v64;
  uint64_t v65;
  unint64_t v66;
  int **v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  JSC::VM *v72;
  JSC::VM *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  char *v78;
  JSC::VM *v79;
  WTF::StringImpl *v80;
  JSC::JSGlobalObject *v81;
  JSC::VM *v82;

  v9 = *(_QWORD **)(a1 + 16);
  v81 = (JSC::JSGlobalObject *)v9[1];
  v10 = (JSC::VM *)v9[9];
  *((_QWORD *)v10 + 5) = a1;
  v82 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_69:
    __break(0xC471u);
    JUMPOUT(0x19884745CLL);
  }
  v16 = (char *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v18 = *(_DWORD *)(a2 + 2);
    v19 = *(unsigned int *)(a2 + 6);
    v68 = *(_DWORD *)(a2 + 10);
  }
  else if (v17 == 128)
  {
    v18 = *((unsigned __int16 *)a2 + 1);
    v19 = *((__int16 *)a2 + 2);
    v20 = *((__int16 *)a2 + 3);
    if (v20 <= 63)
      goto LABEL_9;
    v68 = v20 + 1073741760;
  }
  else
  {
    v18 = a2[1];
    v19 = (char)a2[2];
    v20 = (char)a2[3];
    if (v20 <= 15)
    {
LABEL_9:
      v21 = v20;
LABEL_10:
      v22 = (unint64_t *)(a1 + 8 * v21);
      goto LABEL_11;
    }
    v68 = v20 + 1073741808;
  }
  v21 = v68;
  if (v68 < 0x40000000)
    goto LABEL_10;
  v69 = (v68 - 0x40000000);
  if (v69 >= *(unsigned int *)(v11 + 172))
    goto LABEL_69;
  v22 = (unint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v69);
LABEL_11:
  v23 = *v22;
  if (!(_DWORD)v19)
  {
    v24 = v9[7];
    v25 = *(_QWORD *)(v24 + 80);
    v26 = *(_QWORD *)v25;
    v27 = *(unsigned int *)(v25 + 12) + *(_QWORD *)v25;
    if (v26 > (unint64_t)a2 || v27 <= (unint64_t)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198847514);
    }
    v29 = *(_QWORD *)(v24 + 144);
    if (v29)
    {
      v30 = (_DWORD)a2 - v26;
      v31 = *(_DWORD *)(v29 - 8);
      v32 = 9 * ((~(v30 << 15) + v30) ^ ((~(v30 << 15) + v30) >> 10));
      v33 = (v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11);
      v34 = v31 & (v33 ^ HIWORD(v33));
      v35 = *(_DWORD *)(v29 + 8 * v34);
      if (v35 == v30)
      {
LABEL_19:
        v19 = *(unsigned int *)(v29 + 8 * v34 + 4);
        goto LABEL_20;
      }
      v59 = 1;
      while (v35)
      {
        v34 = ((_DWORD)v34 + v59) & v31;
        v35 = *(_DWORD *)(v29 + 8 * v34);
        ++v59;
        if (v35 == v30)
          goto LABEL_19;
      }
    }
    v19 = 0;
  }
LABEL_20:
  if ((v23 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v23 + 5) == 2)
  {
    v36 = (int **)(v23 + 8);
    if ((*(_BYTE *)(v23 + 8) & 1) != 0)
    {
      v64 = v10;
      v65 = v19;
      v66 = v23;
      v67 = JSC::JSRopeString::resolveRope(v23, v81, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      v23 = v66;
      v19 = v65;
      v10 = v64;
      v36 = v67;
    }
    if (HIBYTE(word_1ECF4C620))
    {
      v73 = v10;
      v74 = v19;
      v75 = v23;
      JSC::doExceptionFuzzing((unint64_t)v81, &v82, "LLIntSlowPaths", v16);
      v23 = v75;
      v19 = v74;
      v10 = v73;
    }
    if (*((_QWORD *)v10 + 2))
      return &xmmword_1ECF4C7C0;
    v37 = *(unsigned int **)(*(_QWORD *)(v9[7] + 152) + 16);
    if (*v37 <= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1988474F4);
    }
    v38 = &v37[6 * v18];
    v41 = *((_QWORD *)v38 + 1);
    v40 = v38 + 2;
    v39 = v41;
    v42 = v40[2];
    if (!v41)
    {
      v49 = 16 * v42;
      goto LABEL_43;
    }
    v43 = (WTF::StringImpl *)*v36;
    v44 = v42 - 1;
    v45 = v40[4];
    v46 = (*v36)[4];
    v80 = (WTF::StringImpl *)*v36;
    if (v46 < 0x100)
    {
      v60 = v10;
      v61 = v19;
      v62 = v23;
      v63 = WTF::StringImpl::hashSlowCase(v43);
      v23 = v62;
      v19 = v61;
      v10 = v60;
      v47 = v63;
      v39 = *(_QWORD *)v40;
    }
    else
    {
      v47 = v46 >> 8;
    }
    v48 = (v47 ^ v45) & v44;
    v49 = v39 + 16 * v48;
    v50 = *(WTF **)v49;
    if (*(_QWORD *)v49)
    {
      v51 = -1;
      do
      {
        v52 = *((_DWORD *)v50 + 4);
        if (v52 < 0x100)
        {
          v54 = v10;
          v78 = v16;
          v55 = v19;
          v76 = v47;
          v56 = v23;
          v53 = WTF::StringImpl::hashSlowCase(v50);
          v23 = v56;
          v47 = v76;
          v19 = v55;
          v16 = v78;
          v10 = v54;
        }
        else
        {
          v53 = v52 >> 8;
        }
        if (++v51 > ((v48 + (_DWORD)v42 - ((v53 ^ v45) & v44)) & v44))
        {
          v39 = *(_QWORD *)v40;
          break;
        }
        if (v53 == v47)
        {
          v77 = v23;
          v79 = v10;
          v70 = v19;
          v71 = WTF::equal(*(WTF **)v49, v80, a3);
          v39 = *(_QWORD *)v40;
          if (v71)
          {
            v42 = v40[2];
            v10 = v79;
            LODWORD(v19) = v70;
            goto LABEL_43;
          }
          v23 = v77;
          v10 = v79;
          v19 = v70;
        }
        else
        {
          v39 = *(_QWORD *)v40;
        }
        v48 = (v48 + 1) & v44;
        v49 = v39 + 16 * v48;
        v50 = *(WTF **)v49;
      }
      while (*(_QWORD *)v49);
    }
    v42 = v40[2];
    v49 = v39 + 16 * v42;
LABEL_43:
    if (v49 != v39 + 16 * v42)
      LODWORD(v19) = *(_DWORD *)(v49 + 8);
  }
  v57 = &v16[(int)v19];
  if (HIBYTE(word_1ECF4C620))
  {
    v72 = v10;
    JSC::doExceptionFuzzing((unint64_t)v81, &v82, "LLIntSlowPaths", v57);
    v10 = v72;
  }
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)v57;
}

__int128 *llint_slow_path_new_func(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  int v25;
  JSC::VM *v26;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v26 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988476D8);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v25 = *((__int16 *)a2 + 1);
    if (v25 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v25 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
  }
  v22 = (unsigned int *)v8[22];
  if (*v22 <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1988476F8);
  }
  v23 = JSC::JSFunction::create((uint64_t)v10, *(_QWORD *)&v22[2 * v21 + 2], *(_DWORD **)(a1 + 8 * v20), a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v26, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v23;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_new_generator_func(uint64_t a1, unint64_t a2)
{
  JSC::OpNewGeneratorFunc *v2;
  _QWORD *v4;
  unint64_t v5;
  JSC::VM *v6;
  const unsigned __int8 *v7;
  int64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unint64_t v17;
  JSC::VM *v19;

  v2 = (JSC::OpNewGeneratorFunc *)a2;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = v4[1];
  v6 = (JSC::VM *)v4[9];
  *((_QWORD *)v6 + 5) = a1;
  v19 = v6;
  JSC::CallFrame::setCurrentVPC(a1, a2);
  v8 = JSC::OpNewGeneratorFunc::decode(v2, v7);
  v15 = (unsigned int *)v4[22];
  if (*v15 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198847808);
  }
  v16 = v8;
  v17 = JSC::JSGeneratorFunction::create((uint64_t)v6, *(uint64_t **)&v15[2 * v9 + 2], *(_DWORD **)(a1 + 8 * (v8 >> 32)), v10, v11, v12, v13, v14);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v5, &v19, "LLIntSlowPaths", v2);
  if (*((_QWORD *)v6 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v17;
  return (__int128 *)v2;
}

__int128 *llint_slow_path_new_async_func(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  int v25;
  JSC::VM *v26;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v26 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198847998);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v25 = *((__int16 *)a2 + 1);
    if (v25 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v25 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
  }
  v22 = (unsigned int *)v8[22];
  if (*v22 <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1988479B8);
  }
  v23 = JSC::JSAsyncFunction::create((uint64_t)v10, *(uint64_t **)&v22[2 * v21 + 2], *(_DWORD **)(a1 + 8 * v20), a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v26, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v23;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_new_async_generator_func(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int *v23;
  JSC::JSFunction *v24;
  JSC::VM *v26;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v26 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198847B48);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v21 = *((__int16 *)a2 + 1);
    if (v21 <= 63)
      v18 = *((__int16 *)a2 + 1);
    else
      v18 = v21 + 1073741760;
    v19 = *((__int16 *)a2 + 2);
    if (v19 > 63)
      v19 += 1073741760;
    v20 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v18 = *(_DWORD *)(a2 + 2);
    v19 = *(_DWORD *)(a2 + 6);
    v20 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v22 = (char)a2[1];
    if (v22 <= 15)
      v18 = (char)a2[1];
    else
      v18 = v22 + 1073741808;
    v19 = (char)a2[2];
    if (v19 > 15)
      v19 += 1073741808;
    v20 = a2[3];
  }
  v23 = (unsigned int *)v8[22];
  if (*v23 <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x198847B68);
  }
  v24 = JSC::JSAsyncGeneratorFunction::create(v10, *(JSC::FunctionExecutable **)&v23[2 * v20 + 2], *(_DWORD **)(a1 + 8 * v19), a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v26, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v18) = v24;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_new_func_exp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unsigned int v41;
  int *v43;
  int *v44;
  int v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t SlowCase;
  JSC::VM *v53;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = v8[1];
  v10 = v8[9];
  *(_QWORD *)(v10 + 40) = a1;
  v53 = (JSC::VM *)v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198847DB4);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v45 = *((__int16 *)a2 + 1);
    if (v45 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v45 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
  }
  v22 = (unsigned int *)v8[23];
  if (*v22 <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x198847DD4);
  }
  v23 = (uint64_t *)(v10 + 38288);
  v24 = *(_DWORD **)(a1 + 8 * v20);
  v25 = *(_QWORD *)&v22[2 * v21 + 2];
  v26 = *(int **)(16 * (*v24 & 0xFFFFFFFE) + 0x28);
  v27 = *(_QWORD *)(v25 + 88);
  v28 = *(_QWORD *)(v27 + 16);
  if (*(_BYTE *)(v27 + 50) == 6)
  {
    v43 = v26 + 239;
    v44 = v26 + 236;
    if ((int)v28 < 0)
      v32 = v44;
    else
      v32 = v43;
  }
  else
  {
    v29 = v26 + 240;
    if ((int)v28 < 0)
      v29 = v26 + 237;
    v30 = v26 + 241;
    v31 = v26 + 238;
    if ((int)v28 < 0)
      v32 = v31;
    else
      v32 = v30;
    if ((*(_BYTE *)(v25 + 68) & 1) == 0)
      v32 = v29;
  }
  v33 = *v32;
  if (v33)
    v34 = 16 * (v33 & 0xFFFFFFFE);
  else
    v34 = 0;
  v35 = *v23;
  if ((unint64_t)*v23 < *(_QWORD *)(v10 + 38296))
    goto LABEL_27;
  v35 = *(_QWORD *)(v10 + 38304);
  if ((v35 & 1) == 0)
  {
    v46 = *(_QWORD *)(v35 + 8) ^ *(_QWORD *)(v10 + 38312);
    *(_QWORD *)(v10 + 38296) = v35 + HIDWORD(v46);
    *(_QWORD *)(v10 + 38304) = v35 + (int)v46;
LABEL_27:
    *v23 = v35 + 32;
    goto LABEL_28;
  }
  v47 = v24;
  v48 = v34;
  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, (uint64_t)v24, v34, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38264, v10 + 192, 32, 0, 0, v49, v50, v51);
  v34 = v48;
  v24 = v47;
  v35 = SlowCase;
LABEL_28:
  *(_DWORD *)v35 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v35, v10, (uint64_t)v24, v34);
  *(_QWORD *)(v35 + 24) = v25;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(v25 + 112);
  if ((v40 & 1) != 0)
    v41 = (v40 >> 1) & 3;
  else
    v41 = *(unsigned __int8 *)(v40 + 4);
  if (v41 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow((uint64_t *)(v25 + 112), (JSC::VM *)v10, (JSC::JSCell *)v25, v35, (uint64_t)"Allocating a function", v36, v37, v38, v39);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v53, "LLIntSlowPaths", v15);
  if (*(_QWORD *)(v10 + 16))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v35;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_new_generator_func_exp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  _DWORD *v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v29;
  JSC::VM *v30;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v30 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884802CLL);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
  }
  else if (v17 == 128)
  {
    v29 = *((__int16 *)a2 + 1);
    if (v29 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v29 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
  }
  v22 = (unsigned int *)v8[23];
  if (*v22 <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x19884804CLL);
  }
  v23 = *(_DWORD **)(a1 + 8 * v20);
  v24 = *(uint64_t **)&v22[2 * v21 + 2];
  v25 = *(_DWORD *)(*(_QWORD *)(16 * (*v23 & 0xFFFFFFFE) + 0x28) + 988);
  if (v25)
    v26 = 16 * (v25 & 0xFFFFFFFE);
  else
    v26 = 0;
  v27 = JSC::JSGeneratorFunction::create((uint64_t)v10, v24, (uint64_t)v23, v26, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v30, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v27;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_new_async_func_exp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  int v25;
  JSC::VM *v26;

  v8 = *(_QWORD **)(a1 + 16);
  v9 = v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v26 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1988481CCLL);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v25 = *((__int16 *)a2 + 1);
    if (v25 <= 63)
      v19 = *((__int16 *)a2 + 1);
    else
      v19 = v25 + 1073741760;
    v20 = *((__int16 *)a2 + 2);
    if (v20 > 63)
      v20 += 1073741760;
    v21 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v20 = *(_DWORD *)(a2 + 6);
    v21 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 <= 15)
      v19 = (char)a2[1];
    else
      v19 = v18 + 1073741808;
    v20 = (char)a2[2];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = a2[3];
  }
  v22 = (unsigned int *)v8[23];
  if (*v22 <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1988481ECLL);
  }
  v23 = JSC::JSAsyncFunction::create((uint64_t)v10, *(uint64_t **)&v22[2 * v21 + 2], *(_DWORD **)(a1 + 8 * v20), a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v9, &v26, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v19) = v23;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_new_async_generator_func_exp(uint64_t a1, unint64_t a2)
{
  JSC::OpNewAsyncGeneratorFuncExp *v2;
  _QWORD *v4;
  unint64_t v5;
  JSC::VM *v6;
  const unsigned __int8 *v7;
  int64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  JSC::JSFunction *v17;
  JSC::VM *v19;

  v2 = (JSC::OpNewAsyncGeneratorFuncExp *)a2;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = v4[1];
  v6 = (JSC::VM *)v4[9];
  *((_QWORD *)v6 + 5) = a1;
  v19 = v6;
  JSC::CallFrame::setCurrentVPC(a1, a2);
  v8 = JSC::OpNewAsyncGeneratorFuncExp::decode(v2, v7);
  v15 = (unsigned int *)v4[23];
  if (*v15 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1988482FCLL);
  }
  v16 = v8;
  v17 = JSC::JSAsyncGeneratorFunction::create(v6, *(JSC::FunctionExecutable **)&v15[2 * v9 + 2], *(_DWORD **)(a1 + 8 * (v8 >> 32)), v10, v11, v12, v13, v14);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v5, &v19, "LLIntSlowPaths", v2);
  if (*((_QWORD *)v6 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v16) = v17;
  return (__int128 *)v2;
}

__int128 *llint_slow_path_set_function_name(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t *v23;
  int v25;
  unint64_t v26;
  JSC::VM *v27;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v27 = v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 12) + *(_QWORD *)v13;
  if (v14 > (unint64_t)a2 || v15 <= (unint64_t)a2)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198848490);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v14) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v19 = *(_DWORD *)(a2 + 2);
    v25 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    if (v18 == 128)
    {
      v19 = *((__int16 *)a2 + 1);
      v20 = 1073741760;
      if (v19 > 63)
        v19 += 1073741760;
      v21 = *((__int16 *)a2 + 2);
      if (v21 <= 63)
        goto LABEL_11;
    }
    else
    {
      v19 = (char)a2[1];
      v20 = 1073741808;
      if (v19 > 15)
        v19 += 1073741808;
      v21 = (char)a2[2];
      if (v21 <= 15)
      {
LABEL_11:
        v22 = *(_QWORD *)(a1 + 8 * v19);
LABEL_12:
        v23 = (unint64_t *)(a1 + 8 * v21);
        goto LABEL_13;
      }
    }
    v25 = v21 + v20;
  }
  v21 = v25;
  v22 = *(_QWORD *)(a1 + 8 * v19);
  if (v25 < 0x40000000)
    goto LABEL_12;
  v26 = (v25 - 0x40000000);
  if (v26 >= *(unsigned int *)(v12 + 172))
    goto LABEL_26;
  v23 = (unint64_t *)(*(_QWORD *)(v12 + 160) + 8 * v26);
LABEL_13:
  JSC::JSFunction::setFunctionName(v22, v10, *v23, a5, a6, a7, a8, a9, a3);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v27, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

JSC::OpConstructVarargs *llint_slow_path_size_frame_for_varargs(uint64_t a1, JSC::OpConstructVarargs *this, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  JSC::OpConstructVarargs *v16;
  int v18;
  int v19;
  int8x16_t v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  int v24;
  int16x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int32 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  unint64_t v41;
  int v42;
  JSC::VM *v43;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v43 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)this || v14 <= (unint64_t)this)
  {
    __break(0xC471u);
    JUMPOUT(0x1988486FCLL);
  }
  v16 = this;
  *(_DWORD *)(a1 + 36) = ((_DWORD)this - v13) & 0x3FFFFFFF;
  v18 = *(unsigned __int8 *)this;
  v19 = v18;
  if ((v18 | 2) == 0x82)
    v19 = *((unsigned __int8 *)this + 1);
  if (v19 == 1)
  {
    v20 = JSC::OpCallVarargs::decode(this, &v40, a3);
    v21 = v41;
    v22 = v40.i32[3];
    if (v40.i32[3] < 0x40000000)
    {
LABEL_10:
      v23 = (unint64_t *)(a1 + 8 * v22);
      goto LABEL_11;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = v40.i32[3] - 0x40000000;
    if ((v40.i32[3] - 0x40000000) < *(_DWORD *)(v31 + 172))
      goto LABEL_26;
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1988486B4);
  }
  if (v19)
  {
    if (v19 != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x198848754);
    }
    JSC::OpConstructVarargs::decode((int *)this, (uint64_t)&v40, a3);
    v21 = v41;
    v22 = v40.i32[3];
    if (v40.i32[3] < 0x40000000)
      goto LABEL_10;
    v31 = *(_QWORD *)(a1 + 16);
    v32 = v40.i32[3] - 0x40000000;
    if ((v40.i32[3] - 0x40000000) >= *(_DWORD *)(v31 + 172))
      goto LABEL_37;
  }
  else
  {
    if (v18 == 130)
    {
      v20 = *(int8x16_t *)((char *)this + 2);
      v40 = v20;
      v41 = *(_QWORD *)((char *)this + 18);
      v42 = *(_DWORD *)((char *)this + 26);
      v30 = v20.i32[3];
      v21 = v41;
    }
    else if (v18 == 128)
    {
      JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(v40.i32, (const unsigned __int16 *)this + 1);
      v30 = v40.i32[3];
      v21 = v41;
    }
    else
    {
      a3.i32[0] = *(_DWORD *)((char *)this + 1);
      v26 = (int16x4_t)vmovl_s8(a3).u64[0];
      v27 = vmovl_s16(v26);
      v28.i64[0] = 0xF0000000FLL;
      v28.i64[1] = 0xF0000000FLL;
      v20 = vbslq_s8((int8x16_t)vcgtq_s32(v27, v28), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v26), (int8x16_t)v27);
      v40 = v20;
      v29 = *((char *)this + 5);
      if (v29 <= 15)
        v21 = *((char *)this + 5);
      else
        v21 = v29 + 1073741808;
      v41 = __PAIR64__(*((unsigned __int8 *)this + 6), v21);
      v42 = *((unsigned __int8 *)this + 7);
      v30 = v20.i32[3];
    }
    if (v30 < 0x40000000)
    {
      v23 = (unint64_t *)(a1 + 8 * v30);
      goto LABEL_11;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = v30 - 0x40000000;
    if (v32 >= *(_DWORD *)(v31 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988486DCLL);
    }
  }
LABEL_26:
  v23 = (unint64_t *)(*(_QWORD *)(v31 + 160) + 8 * v32);
LABEL_11:
  v24 = JSC::sizeFrameForVarargs(v10, a1, v11, *v23, -v21, HIDWORD(v41), a8, a9, v20);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v10, &v43, "LLIntSlowPaths/call", 0);
  if (*(_QWORD *)(v11 + 16))
  {
    JSC::LLInt::callToThrow(&v40);
    v16 = (JSC::OpConstructVarargs *)v40.i64[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v40, v33, v34, v35, v36, v37, v38, v39);
  }
  else
  {
    *(_DWORD *)(v11 + 90532) = v24;
    *(_QWORD *)(v11 + 90472) = a1 - 8 * ((((v24 + 1) & 0xFFFFFFFE) - v21 + 7) & 0xFFFFFFFE);
  }
  return v16;
}

int *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpTailCallVarargs>(int *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3;
  int16x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v3 = *a2;
  if (v3 == 130)
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 2);
    *((_QWORD *)result + 2) = *(_QWORD *)(a2 + 18);
    v10 = *(_DWORD *)(a2 + 26);
LABEL_6:
    result[6] = v10;
    return result;
  }
  if (v3 != 128)
  {
    a3.i32[0] = *(_DWORD *)(a2 + 1);
    v4 = (int16x4_t)vmovl_s8(a3).u64[0];
    v5 = vmovl_s16(v4);
    v6.i64[0] = 0xF0000000FLL;
    v6.i64[1] = 0xF0000000FLL;
    *(int8x16_t *)result = vbslq_s8((int8x16_t)vcgtq_s32(v5, v6), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v4), (int8x16_t)v5);
    v7 = (char)a2[5];
    v8 = v7 + 1073741808;
    if (v7 <= 15)
      v8 = (char)a2[5];
    v9 = a2[6];
    result[4] = v8;
    result[5] = v9;
    v10 = a2[7];
    goto LABEL_6;
  }
  return JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(result, (const unsigned __int16 *)a2 + 1);
}

JSC::VM *llint_slow_path_size_frame_for_forward_arguments(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  JSC::VM *v16;
  int v18;
  int16x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::VM *v34[2];
  int8x16_t v35;
  unint64_t v36;
  int v37;
  JSC::VM *v38;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v38 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198848968);
  }
  v16 = (JSC::VM *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 130)
  {
    v35 = *(int8x16_t *)(a2 + 2);
    v36 = *(_QWORD *)(a2 + 18);
    v37 = *(_DWORD *)(a2 + 26);
    v23 = v36;
  }
  else if (v18 == 128)
  {
    JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(v35.i32, (const unsigned __int16 *)a2 + 1);
    v23 = v36;
  }
  else
  {
    a9.i32[0] = *(_DWORD *)(a2 + 1);
    v19 = (int16x4_t)vmovl_s8(a9).u64[0];
    v20 = vmovl_s16(v19);
    v21.i64[0] = 0xF0000000FLL;
    v21.i64[1] = 0xF0000000FLL;
    v35 = vbslq_s8((int8x16_t)vcgtq_s32(v20, v21), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v19), (int8x16_t)v20);
    v22 = (char)a2[5];
    v23 = v22 + 1073741808;
    if (v22 <= 15)
      v23 = (char)a2[5];
    v36 = __PAIR64__(a2[6], v23);
    v37 = a2[7];
  }
  v34[0] = (JSC::VM *)v11;
  v24 = *(_DWORD *)(a1 + 32);
  v25 = a1 - 8 * (((v24 & 0xFFFFFFFE) - v23 + 7) & 0xFFFFFFFE);
  if (*(_QWORD *)(v11 + 8) > v25)
    JSC::throwStackOverflowError(v10, v34, a3, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v38, "LLIntSlowPaths/call", 0);
  if (*(_QWORD *)(v11 + 16))
  {
    JSC::LLInt::callToThrow(v34);
    v16 = v34[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    *(_DWORD *)(v11 + 90532) = v24 - 1;
    *(_QWORD *)(v11 + 90472) = v25;
  }
  return v16;
}

JSC::OpCallVarargs *llint_slow_path_call_varargs(uint64_t a1, JSC::OpCallVarargs *this, int8x8_t a3)
{
  JSC::OpCallVarargs *v3;
  _QWORD *v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD v37[2];
  int8x16_t v38;
  unsigned int v39;
  unsigned int v40;
  JSC::VM *v41;

  v3 = this;
  v5 = *(_QWORD **)(a1 + 16);
  v6 = (JSC::JSGlobalObject *)v5[1];
  v7 = v5[9];
  *(_QWORD *)(v7 + 40) = a1;
  v41 = (JSC::VM *)v7;
  JSC::OpCallVarargs::decode(this, &v38, a3);
  v8 = v5[17];
  v9 = *(unsigned __int16 *)(v8 + 2);
  if (!*(_WORD *)(v8 + 2))
    v9 = *(_DWORD *)(v8 + 100);
  if (v38.i32[1] >= 0x40000000)
  {
    v26 = *(_QWORD *)(a1 + 16);
    if ((v38.i32[1] - 0x40000000) >= *(_DWORD *)(v26 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198848C3CLL);
    }
    v10 = (uint64_t *)(*(_QWORD *)(v26 + 160) + 8 * (v38.i32[1] - 0x40000000));
  }
  else
  {
    v10 = (uint64_t *)(a1 + 8 * v38.i32[1]);
  }
  v11 = *v10;
  v12 = *(uint64_t **)(v7 + 90472);
  v13 = *(_DWORD *)(v7 + 90532);
  if (v38.i32[2] >= 0x40000000)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if ((v38.i32[2] - 0x40000000) >= *(_DWORD *)(v27 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198848C44);
    }
    v14 = (uint64_t *)(*(_QWORD *)(v27 + 160) + 8 * (v38.i32[2] - 0x40000000));
  }
  else
  {
    v14 = (uint64_t *)(a1 + 8 * v38.i32[2]);
  }
  v15 = *v14;
  v36 = v40;
  if (v38.i32[3] >= 0x40000000)
  {
    v28 = *(_QWORD *)(a1 + 16);
    if ((v38.i32[3] - 0x40000000) >= *(_DWORD *)(v28 + 172))
      goto LABEL_31;
    v16 = (uint64_t *)(*(_QWORD *)(v28 + 160) + 8 * (v38.i32[3] - 0x40000000));
  }
  else
  {
    v16 = (uint64_t *)(a1 + 8 * v38.i32[3]);
  }
  JSC::setupVarargsFrame(v6, a1, (uint64_t)v12, *v16, v39, v13);
  v12[5] = v15;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v6, &v41, "LLIntSlowPaths/call", 0);
  if (*(_QWORD *)(v7 + 16))
  {
    JSC::LLInt::callToThrow(v37);
    v3 = (JSC::OpCallVarargs *)v37[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v37, v29, v30, v31, v32, v33, v34, v35);
  }
  else
  {
    *v12 = a1;
    v12[3] = v11;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned int *)(v17 + 12) + *(_QWORD *)v17;
    if (v18 > (unint64_t)v3 || v19 <= (unint64_t)v3)
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x198848C34);
    }
    v21 = v13 + 1;
    *(_DWORD *)(a1 + 36) = ((_DWORD)v3 - v18) & 0x3FFFFFFF;
    v22 = ((v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v36;
    v24 = *(unsigned __int8 *)(v22 + 19);
    v23 = (_BYTE *)(v22 + 19);
    if (v13 + 1 > v24)
    {
      if (v21 >= 0xFF)
        LOBYTE(v21) = -1;
      *v23 = v21;
    }
  }
  return v3;
}

unsigned __int8 *llint_slow_path_tail_call_varargs(uint64_t a1, unsigned __int8 *a2, int8x8_t a3)
{
  unsigned __int8 *v3;
  _QWORD *v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  int v8;
  int16x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD v44[2];
  int8x16_t v45;
  unint64_t v46;
  unsigned int v47;
  JSC::VM *v48;

  v3 = a2;
  v5 = *(_QWORD **)(a1 + 16);
  v6 = (JSC::JSGlobalObject *)v5[1];
  v7 = v5[9];
  *(_QWORD *)(v7 + 40) = a1;
  v48 = (JSC::VM *)v7;
  v8 = *a2;
  if (v8 == 130)
  {
    v45 = *(int8x16_t *)(a2 + 2);
    v46 = *(_QWORD *)(a2 + 18);
    v14 = *(_DWORD *)(a2 + 26);
LABEL_6:
    v47 = v14;
    goto LABEL_7;
  }
  if (v8 != 128)
  {
    a3.i32[0] = *(_DWORD *)(a2 + 1);
    v9 = (int16x4_t)vmovl_s8(a3).u64[0];
    v10 = vmovl_s16(v9);
    v11.i64[0] = 0xF0000000FLL;
    v11.i64[1] = 0xF0000000FLL;
    v45 = vbslq_s8((int8x16_t)vcgtq_s32(v10, v11), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v9), (int8x16_t)v10);
    v12 = (char)a2[5];
    v13 = v12 + 1073741808;
    if (v12 <= 15)
      v13 = (char)a2[5];
    v46 = __PAIR64__(a2[6], v13);
    v14 = a2[7];
    goto LABEL_6;
  }
  JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(v45.i32, (const unsigned __int16 *)a2 + 1);
  v14 = v47;
LABEL_7:
  v15 = (unsigned __int16 *)v5[17];
  v16 = *v15;
  if (!*v15)
    v16 = *((_DWORD *)v15 + 24);
  if (v45.i32[1] >= 0x40000000)
  {
    v33 = *(_QWORD *)(a1 + 16);
    if ((v45.i32[1] - 0x40000000) >= *(_DWORD *)(v33 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198848F20);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v33 + 160) + 8 * (v45.i32[1] - 0x40000000));
  }
  else
  {
    v17 = (uint64_t *)(a1 + 8 * v45.i32[1]);
  }
  v18 = *v17;
  v19 = *(uint64_t **)(v7 + 90472);
  if (v45.i32[2] >= 0x40000000)
  {
    v34 = *(_QWORD *)(a1 + 16);
    if ((v45.i32[2] - 0x40000000) >= *(_DWORD *)(v34 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198848F28);
    }
    v20 = (uint64_t *)(*(_QWORD *)(v34 + 160) + 8 * (v45.i32[2] - 0x40000000));
  }
  else
  {
    v20 = (uint64_t *)(a1 + 8 * v45.i32[2]);
  }
  v21 = *v20;
  v43 = v14;
  if (v45.i32[3] >= 0x40000000)
  {
    v35 = *(_QWORD *)(a1 + 16);
    if ((v45.i32[3] - 0x40000000) >= *(_DWORD *)(v35 + 172))
      goto LABEL_39;
    v22 = (uint64_t *)(*(_QWORD *)(v35 + 160) + 8 * (v45.i32[3] - 0x40000000));
  }
  else
  {
    v22 = (uint64_t *)(a1 + 8 * v45.i32[3]);
  }
  v23 = *(_DWORD *)(v7 + 90532);
  JSC::setupVarargsFrame(v6, a1, (uint64_t)v19, *v22, HIDWORD(v46), v23);
  v19[5] = v21;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v6, &v48, "LLIntSlowPaths/call", 0);
  if (*(_QWORD *)(v7 + 16))
  {
    JSC::LLInt::callToThrow(v44);
    v3 = (unsigned __int8 *)v44[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v44, v36, v37, v38, v39, v40, v41, v42);
  }
  else
  {
    *v19 = a1;
    v19[3] = v18;
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
    v25 = *(_QWORD *)v24;
    v26 = *(unsigned int *)(v24 + 12) + *(_QWORD *)v24;
    if (v25 > (unint64_t)v3 || v26 <= (unint64_t)v3)
    {
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x198848EECLL);
    }
    v28 = v23 + 1;
    *(_DWORD *)(a1 + 36) = ((_DWORD)v3 - v25) & 0x3FFFFFFF;
    v29 = (((unint64_t)v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v43;
    v31 = *(unsigned __int8 *)(v29 + 19);
    v30 = (_BYTE *)(v29 + 19);
    if (v23 + 1 > v31)
    {
      if (v28 >= 0xFF)
        LOBYTE(v28) = -1;
      *v30 = v28;
    }
  }
  return v3;
}

unsigned __int8 *llint_slow_path_tail_call_forward_arguments(uint64_t a1, unsigned __int8 *a2, int8x8_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int16x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  char *v29;
  unsigned int v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  unint64_t v36;
  unsigned int v37;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v6 + 40) = a1;
  v7 = *a2;
  if (v7 == 130)
  {
    v35 = *(int8x16_t *)(a2 + 2);
    v36 = *(_QWORD *)(a2 + 18);
    v13 = *(_DWORD *)(a2 + 26);
LABEL_6:
    v37 = v13;
    goto LABEL_7;
  }
  if (v7 != 128)
  {
    a3.i32[0] = *(_DWORD *)(a2 + 1);
    v8 = (int16x4_t)vmovl_s8(a3).u64[0];
    v9 = vmovl_s16(v8);
    v10.i64[0] = 0xF0000000FLL;
    v10.i64[1] = 0xF0000000FLL;
    v35 = vbslq_s8((int8x16_t)vcgtq_s32(v9, v10), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v8), (int8x16_t)v9);
    v11 = (char)a2[5];
    v12 = v11 + 1073741808;
    if (v11 <= 15)
      v12 = (char)a2[5];
    v36 = __PAIR64__(a2[6], v12);
    v13 = a2[7];
    goto LABEL_6;
  }
  JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(v35.i32, (const unsigned __int16 *)a2 + 1);
  v13 = v37;
LABEL_7:
  v14 = *(_QWORD *)(v5 + 136);
  v15 = *(unsigned __int16 *)(v14 + 22);
  if (!*(_WORD *)(v14 + 22))
    v15 = *(_DWORD *)(v14 + 140);
  if (v35.i32[1] >= 0x40000000)
  {
    v33 = *(_QWORD *)(a1 + 16);
    if ((v35.i32[1] - 0x40000000) >= *(_DWORD *)(v33 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x198849164);
    }
    v16 = (uint64_t *)(*(_QWORD *)(v33 + 160) + 8 * (v35.i32[1] - 0x40000000));
  }
  else
  {
    v16 = (uint64_t *)(a1 + 8 * v35.i32[1]);
  }
  v17 = v6 + 90472;
  v18 = *v16;
  v19 = *(_QWORD *)(v6 + 90472);
  v20 = *(unsigned int *)(v17 + 60);
  if (v35.i32[2] >= 0x40000000)
  {
    v34 = *(_QWORD *)(a1 + 16);
    if ((v35.i32[2] - 0x40000000) >= *(_DWORD *)(v34 + 172))
      goto LABEL_31;
    v21 = (uint64_t *)(*(_QWORD *)(v34 + 160) + 8 * (v35.i32[2] - 0x40000000));
  }
  else
  {
    v21 = (uint64_t *)(a1 + 8 * v35.i32[2]);
  }
  v22 = v20 + 1;
  v23 = *v21;
  memcpy((void *)(v19 + 48), (const void *)(a1 + 48), 8 * v20);
  *(_DWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v23;
  *(_QWORD *)v19 = a1;
  *(_QWORD *)(v19 + 24) = v18;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v25 = *(_QWORD *)v24;
  v26 = *(unsigned int *)(v24 + 12) + *(_QWORD *)v24;
  if (v25 > (unint64_t)a2 || v26 <= (unint64_t)a2)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x198849130);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v25) & 0x3FFFFFFF;
  v28 = ((v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v13;
  v30 = *(unsigned __int8 *)(v28 + 19);
  v29 = (char *)(v28 + 19);
  if (v22 > v30)
  {
    if (v22 >= 0xFF)
      v32 = -1;
    else
      v32 = v22;
    *v29 = v32;
  }
  return a2;
}

JSC::OpConstructVarargs *llint_slow_path_construct_varargs(uint64_t a1, JSC::OpConstructVarargs *this, int8x8_t a3)
{
  JSC::OpConstructVarargs *v3;
  _QWORD *v5;
  JSC::JSGlobalObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD v37[2];
  char v38[4];
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  JSC::VM *v44;

  v3 = this;
  v5 = *(_QWORD **)(a1 + 16);
  v6 = (JSC::JSGlobalObject *)v5[1];
  v7 = v5[9];
  *(_QWORD *)(v7 + 40) = a1;
  v44 = (JSC::VM *)v7;
  JSC::OpConstructVarargs::decode((int *)this, (uint64_t)v38, a3);
  v8 = v5[17];
  v9 = *(unsigned __int16 *)(v8 + 6);
  if (!*(_WORD *)(v8 + 6))
    v9 = *(_DWORD *)(v8 + 108);
  if (v39 >= 0x40000000)
  {
    v26 = *(_QWORD *)(a1 + 16);
    if ((v39 - 0x40000000) >= *(_DWORD *)(v26 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988493C4);
    }
    v10 = (uint64_t *)(*(_QWORD *)(v26 + 160) + 8 * (v39 - 0x40000000));
  }
  else
  {
    v10 = (uint64_t *)(a1 + 8 * v39);
  }
  v11 = *v10;
  v12 = *(uint64_t **)(v7 + 90472);
  v13 = *(_DWORD *)(v7 + 90532);
  if (v40 >= 0x40000000)
  {
    v27 = *(_QWORD *)(a1 + 16);
    if ((v40 - 0x40000000) >= *(_DWORD *)(v27 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1988493CCLL);
    }
    v14 = (uint64_t *)(*(_QWORD *)(v27 + 160) + 8 * (v40 - 0x40000000));
  }
  else
  {
    v14 = (uint64_t *)(a1 + 8 * v40);
  }
  v15 = *v14;
  v36 = v43;
  if (v41 >= 0x40000000)
  {
    v28 = *(_QWORD *)(a1 + 16);
    if ((v41 - 0x40000000) >= *(_DWORD *)(v28 + 172))
      goto LABEL_31;
    v16 = (uint64_t *)(*(_QWORD *)(v28 + 160) + 8 * (v41 - 0x40000000));
  }
  else
  {
    v16 = (uint64_t *)(a1 + 8 * v41);
  }
  JSC::setupVarargsFrame(v6, a1, (uint64_t)v12, *v16, v42, v13);
  v12[5] = v15;
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v6, &v44, "LLIntSlowPaths/call", 0);
  if (*(_QWORD *)(v7 + 16))
  {
    JSC::LLInt::callToThrow(v37);
    v3 = (JSC::OpConstructVarargs *)v37[0];
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v37, v29, v30, v31, v32, v33, v34, v35);
  }
  else
  {
    *v12 = a1;
    v12[3] = v11;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned int *)(v17 + 12) + *(_QWORD *)v17;
    if (v18 > (unint64_t)v3 || v19 <= (unint64_t)v3)
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x1988493BCLL);
    }
    v21 = v13 + 1;
    *(_DWORD *)(a1 + 36) = ((_DWORD)v3 - v18) & 0x3FFFFFFF;
    v22 = ((v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v36;
    v24 = *(unsigned __int8 *)(v22 + 19);
    v23 = (_BYTE *)(v22 + 19);
    if (v13 + 1 > v24)
    {
      if (v21 >= 0xFF)
        LOBYTE(v21) = -1;
      *v23 = v21;
    }
  }
  return v3;
}

uint64_t llint_slow_path_call_direct_eval(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  char v35;
  char **v36;
  char *v37;

  if (!BYTE1(dword_1ECF4C240))
  {
    v33 = qword_1ECF53210;
LABEL_12:
    v34 = 0;
    return JSC::LLInt::commonCallDirectEval(a1, a2, &v33, a3, a5, a6, a7, a8, a9);
  }
  v11 = atomic_load(&qword_1ECF58A60);
  if (v11 != -1)
  {
    v37 = &v35;
    v36 = &v37;
    std::__call_once(&qword_1ECF58A60, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::genericReturnPointThunk(JSC::OpcodeSize)::$_0 &&>>);
  }
  v12 = *(unsigned int **)algn_1ECF58A58;
  v33 = qword_1ECF58A50;
  if (!*(_QWORD *)algn_1ECF58A58)
    goto LABEL_12;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v34 = v12;
  v21 = JSC::LLInt::commonCallDirectEval(a1, a2, &v33, a3, a5, a6, a7, a8, a9);
  v34 = 0;
  do
  {
    v22 = __ldaxr(v12);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v12));
  if (!v23)
  {
    atomic_store(1u, v12);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  return v21;
}

uint64_t JSC::LLInt::commonCallDirectEval(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  JSC::CodeBlock **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  const WTF::StringImpl **v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  JSC::JSGlobalObject *v53;
  JSC::VM *v54;
  int v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  unsigned int *v58;
  int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  uint64_t (*v66)();
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  char *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x16_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t Error;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  unsigned int v134;
  int v135;
  int v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  JSC::VM *v169;
  JSC::VM *v170;
  char ***v171;
  uint64_t (*v172)(_QWORD, uint64_t);
  uint64_t v173;
  JSC::VM *v174;
  char v175;
  char **v176;
  char *v177;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v169 = v11;
  v12 = *a2;
  if (v12 == 130)
  {
    v14 = *(_DWORD *)(a2 + 6);
    v15 = *(_DWORD *)(a2 + 10);
    v16 = *(_DWORD *)(a2 + 14);
    v18 = *(_DWORD *)(a2 + 18);
    v20 = *(_DWORD *)(a2 + 22);
    v21 = *(_DWORD *)(a2 + 26);
  }
  else
  {
    if (v12 == 128)
    {
      v135 = *((__int16 *)a2 + 2);
      if (v135 <= 63)
        v14 = *((__int16 *)a2 + 2);
      else
        v14 = v135 + 1073741760;
      v15 = *((unsigned __int16 *)a2 + 3);
      v16 = *((unsigned __int16 *)a2 + 4);
      v136 = *((__int16 *)a2 + 5);
      v18 = v136 + 1073741760;
      if (v136 <= 63)
        v18 = *((__int16 *)a2 + 5);
      v19 = *((__int16 *)a2 + 6);
      v20 = v19 + 1073741760;
      LOBYTE(v21) = a2[14];
      v22 = v19 <= 63;
    }
    else
    {
      v13 = (char)a2[2];
      if (v13 <= 15)
        v14 = (char)a2[2];
      else
        v14 = v13 + 1073741808;
      v15 = a2[3];
      v16 = a2[4];
      v17 = (char)a2[5];
      v18 = v17 + 1073741808;
      if (v17 <= 15)
        v18 = (char)a2[5];
      v19 = (char)a2[6];
      v20 = v19 + 1073741808;
      LOBYTE(v21) = a2[7];
      v22 = v19 <= 15;
    }
    if (v22)
      v20 = v19;
  }
  v23 = *(_QWORD *)(a1 + 8 * v14);
  v24 = a1 - 8 * v16;
  *(_DWORD *)(v24 + 32) = v15;
  *(_QWORD *)v24 = a1;
  *(_QWORD *)(v24 + 24) = v23;
  *(_QWORD *)(v24 + 8) = *a3;
  v25 = (_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 16) = 0;
  v26 = (JSC::CodeBlock **)(v24 + 16);
  v27 = *(_QWORD *)(a1 + 16);
  v28 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 80);
  v29 = *(_QWORD *)v28;
  v30 = *(unsigned int *)(v28 + 12) + *(_QWORD *)v28;
  if (v29 > (unint64_t)a2 || v30 <= (unint64_t)a2)
  {
LABEL_182:
    __break(0xC471u);
    JUMPOUT(0x198849CFCLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v29) & 0x3FFFFFFF;
  if (v20 >= 0x40000000)
  {
    v70 = v20 - 0x40000000;
    if (v70 >= *(_DWORD *)(v27 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x19884A0C0);
    }
    v32 = (const WTF::StringImpl **)(*(_QWORD *)(v27 + 160) + 8 * v70);
  }
  else
  {
    v32 = (const WTF::StringImpl **)(a1 + 8 * v20);
  }
  if (v18 >= 0x40000000)
  {
    v71 = v18 - 0x40000000;
    if (v71 >= *(_DWORD *)(v27 + 172))
      goto LABEL_182;
    v33 = (void **)(*(_QWORD *)(v27 + 160) + 8 * v71);
  }
  else
  {
    v33 = (void **)(a1 + 8 * v18);
  }
  v41 = JSC::eval((JSC::CallFrame *)v24, *v33, *v32, v21, a6, a7, a8, a9, a4);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v169, "LLIntSlowPaths/call", 0);
  if (*((_QWORD *)v11 + 2))
  {
    if (BYTE1(dword_1ECF4C240))
    {
      v111 = atomic_load(&qword_1ECF589B8);
      if (v111 != -1)
      {
        v171 = &v176;
        v177 = (char *)&v171;
        std::__call_once(&qword_1ECF589B8, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
      }
      v43 = qword_1ECF589A8;
      v49 = (unsigned int *)unk_1ECF589B0;
      if (unk_1ECF589B0)
      {
        do
          v112 = __ldaxr(v49);
        while (__stlxr(v112 + 1, v49));
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
        goto LABEL_146;
      }
      return v43;
    }
    return qword_1ECF53220;
  }
  if (v41)
  {
    *((_QWORD *)v11 + 11308) = v41;
    if (BYTE1(dword_1ECF4C240))
    {
      v42 = atomic_load(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey);
      if (v42 != -1)
      {
        v171 = &v176;
        v177 = (char *)&v171;
        std::__call_once(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::getHostCallReturnValueThunk(void)::$_0 &&>>);
      }
      v43 = JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
      v44 = (unsigned int *)JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
      if (JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef)
      {
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 + 1, v44));
        do
        {
          v46 = __ldaxr(v44);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v44));
        if (!v47)
        {
          atomic_store(1u, v44);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v44, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
        }
      }
    }
    else
    {
      v43 = qword_1ECF532A0;
    }
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing(v10, &v169, "LLIntSlowPaths/call", 0);
    if (!*((_QWORD *)v169 + 2))
      return v43;
    if (BYTE1(dword_1ECF4C240))
    {
      v48 = atomic_load(&qword_1ECF589B8);
      if (v48 != -1)
      {
        v171 = &v176;
        v177 = (char *)&v171;
        std::__call_once(&qword_1ECF589B8, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
      }
      v43 = qword_1ECF589A8;
      v49 = (unsigned int *)unk_1ECF589B0;
      if (unk_1ECF589B0)
      {
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 + 1, v49));
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
LABEL_146:
        if (v51 == 1)
        {
          atomic_store(1u, v49);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v49, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
        }
        return v43;
      }
      return v43;
    }
    return qword_1ECF53220;
  }
  v52 = *(_QWORD *)(*(_QWORD *)v24 + 16);
  v53 = *(JSC::JSGlobalObject **)(v52 + 8);
  v54 = *(JSC::VM **)(v52 + 72);
  v170 = v54;
  if ((v23 & 0xFFFE000000000002) != 0)
  {
    v174 = v54;
    *v25 = 0;
    *(_QWORD *)(v24 + 16) = 0;
    LOBYTE(v171) = 0;
    goto LABEL_112;
  }
  v55 = *(unsigned __int8 *)(v23 + 5);
  if (v55 == 26)
  {
    v56 = *(_QWORD *)(v23 + 24);
    if ((v56 & 1) != 0)
      v56 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v57 = *(const WTF::StringImpl **)(v23 + 16);
    v58 = (unsigned int *)((char *)v54 + 80);
    v59 = *((_DWORD *)v54 + 20);
    if ((v59 & 0x20) == 0)
    {
      do
        v60 = __ldaxr(v58);
      while (__stlxr(v60 | 0x20, v58));
    }
    if (*(_BYTE *)(v56 + 5) == 8)
    {
      v43 = *(_QWORD *)(v56 + 24);
      if (v43)
        goto LABEL_83;
      v61 = *(unsigned int **)(v56 + 8);
      v62 = v61 + 2;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
      v43 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v61 + 40))(v61, 1);
      do
      {
        v64 = __ldaxr(v62);
        v65 = --v64 == 0;
      }
      while (__stlxr(v64, v62));
    }
    else
    {
      if (*(_QWORD *)(v56 + 8))
        v66 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
      else
        v66 = 0;
      if (v66)
        *v26 = *(JSC::CodeBlock **)(v56 + 96);
      else
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v56, (uint64_t)v54, v23, v57, 0, v26, v39, v40);
      if (HIBYTE(word_1ECF4C620))
        JSC::doExceptionFuzzing((unint64_t)v53, &v170, "LLIntSlowPaths/call", 0);
      if (*((_QWORD *)v170 + 2))
      {
        if (BYTE1(dword_1ECF4C240))
        {
          v133 = atomic_load(&qword_1ECF589B8);
          if (v133 != -1)
          {
            v171 = &v176;
            v177 = (char *)&v171;
            std::__call_once(&qword_1ECF589B8, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
          }
          v43 = qword_1ECF589A8;
          v130 = (unsigned int *)unk_1ECF589B0;
          if (!unk_1ECF589B0)
            goto LABEL_86;
          do
            v134 = __ldaxr(v130);
          while (__stlxr(v134 + 1, v130));
          do
            v132 = __ldaxr(v130);
          while (__stlxr(v132 - 1, v130));
LABEL_164:
          if (v132 == 1)
          {
            atomic_store(1u, v130);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v130, v34, v35, (uint64_t)v57, v37, v38, v39, v40);
            WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
          }
          goto LABEL_86;
        }
LABEL_167:
        v43 = qword_1ECF53220;
LABEL_86:
        if ((v59 & 0x20) == 0)
        {
          do
            v77 = __ldaxr(v58);
          while (__stlxr(v77 & 0xFFFFFFDF, v58));
        }
        return v43;
      }
      if (*(int *)(v24 + 32) >= (unint64_t)*(unsigned int *)(*(_QWORD *)(v24 + 16) + 28))
      {
        v72 = *(unsigned int **)(v56 + 8);
        v73 = v72 + 2;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 + 1, v73));
        v43 = (*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)v72 + 40))(v72, 0);
        do
        {
          v75 = __ldaxr(v73);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v73));
        if (!v76)
        {
          atomic_store(1u, v72 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 32))(v72);
        }
LABEL_83:
        if (HIBYTE(word_1ECF4C620))
          JSC::doExceptionFuzzing((unint64_t)v53, &v170, "LLIntSlowPaths/call", 0);
        if (!*((_QWORD *)v170 + 2))
          goto LABEL_86;
        if (BYTE1(dword_1ECF4C240))
        {
          v129 = atomic_load(&qword_1ECF589B8);
          if (v129 != -1)
          {
            v171 = &v176;
            v177 = (char *)&v171;
            std::__call_once(&qword_1ECF589B8, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
          }
          v43 = qword_1ECF589A8;
          v130 = (unsigned int *)unk_1ECF589B0;
          if (!unk_1ECF589B0)
            goto LABEL_86;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 + 1, v130));
          do
            v132 = __ldaxr(v130);
          while (__stlxr(v132 - 1, v130));
          goto LABEL_164;
        }
        goto LABEL_167;
      }
      v43 = *(_QWORD *)(v56 + 24);
      if (v43)
        goto LABEL_83;
      v61 = *(unsigned int **)(v56 + 8);
      v67 = v61 + 2;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
      v43 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v61 + 40))(v61, 1);
      do
      {
        v69 = __ldaxr(v67);
        v65 = --v69 == 0;
      }
      while (__stlxr(v69, v67));
    }
    if (v65)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 32))(v61);
    }
    *(_QWORD *)(v56 + 24) = v43;
    goto LABEL_83;
  }
  v79 = (char *)v54 + 90440;
  if ((v55 - 27) > 1)
  {
    v174 = v54;
    *v25 = 0;
    *(_QWORD *)(v24 + 16) = 0;
    if (*(_BYTE *)(v23 + 5) == 26)
    {
      v86 = *(_QWORD *)(v23 + 24);
      if ((v86 & 1) != 0)
        v86 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v86 + 5) != 8)
      {
        LOBYTE(v171) = 2;
        v87 = *(_QWORD *)(v23 + 16);
        v172 = (uint64_t (*)(_QWORD, uint64_t))v86;
        v173 = v87;
        goto LABEL_112;
      }
      LOBYTE(v171) = 1;
      v172 = *(uint64_t (**)(_QWORD, uint64_t))(v86 + 40);
      LOBYTE(v173) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE)
                                                                                + 0x4C));
LABEL_122:
      *((_QWORD *)v54 + 5) = v24;
      *(_QWORD *)(v24 + 24) = v23;
      *((_QWORD *)v54 + 11308) = v172(*(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28), v24);
      if (BYTE1(dword_1ECF4C240))
      {
        v104 = atomic_load(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey);
        if (v104 != -1)
        {
          v177 = &v175;
          v176 = &v177;
          std::__call_once(&JSC::LLInt::getHostCallReturnValueThunk(void)::onceKey, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::getHostCallReturnValueThunk(void)::$_0 &&>>);
        }
        v43 = JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
        v105 = (unsigned int *)JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef;
        if (JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef)
        {
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 + 1, v105));
          do
          {
            v107 = __ldaxr(v105);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v105));
          if (!v108)
          {
            atomic_store(1u, v105);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v105, v34, v35, v36, v37, v38, v39, v40);
            WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
          }
        }
      }
      else
      {
        v43 = qword_1ECF532A0;
      }
      if (HIBYTE(word_1ECF4C620))
        JSC::doExceptionFuzzing((unint64_t)v53, &v174, "LLIntSlowPaths/call", 0);
      if (!*((_QWORD *)v174 + 2))
        return v43;
      if (BYTE1(dword_1ECF4C240))
      {
        v109 = atomic_load(&qword_1ECF589B8);
        if (v109 != -1)
        {
          v177 = &v175;
          v176 = &v177;
          std::__call_once(&qword_1ECF589B8, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
        }
        v43 = qword_1ECF589A8;
        v49 = (unsigned int *)unk_1ECF589B0;
        if (unk_1ECF589B0)
        {
          do
            v110 = __ldaxr(v49);
          while (__stlxr(v110 + 1, v49));
          do
            v51 = __ldaxr(v49);
          while (__stlxr(v51 - 1, v49));
          goto LABEL_146;
        }
        return v43;
      }
      return qword_1ECF53220;
    }
    (*(void (**)(char ****__return_ptr, unint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v23 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v171, v23);
    if (v171 == 1)
      goto LABEL_122;
LABEL_112:
    v88 = WTF::fastCompactMalloc((WTF *)0x20);
    v89.i64[0] = 0x1100000002;
    *(_QWORD *)v88 = 0x1100000002;
    *(_QWORD *)(v88 + 8) = "is not a function";
    *(_DWORD *)(v88 + 16) = 4;
    v177 = (char *)v88;
    Error = JSC::createError((unint64_t)v53, v23, (uint64_t *)&v177, (uint64_t)JSC::notAFunctionSourceAppender, v90, v91, v92, v93, v89);
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v88, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
    JSC::VM::throwException(v54, v53, Error, v96, v97, v98, v99, v100);
    if (BYTE1(dword_1ECF4C240))
    {
      v102 = atomic_load(&qword_1ECF589B8);
      if (v102 != -1)
      {
        v177 = &v175;
        v176 = &v177;
        std::__call_once(&qword_1ECF589B8, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
      }
      v43 = qword_1ECF589A8;
      v49 = (unsigned int *)unk_1ECF589B0;
      if (unk_1ECF589B0)
      {
        do
          v103 = __ldaxr(v49);
        while (__stlxr(v103 + 1, v49));
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
        goto LABEL_146;
      }
      return v43;
    }
    return qword_1ECF53220;
  }
  if (BYTE1(dword_1ECF4C240))
  {
    v43 = *(_QWORD *)(*(_QWORD *)v79 + 120);
    v80 = *(unsigned int **)(*(_QWORD *)v79 + 128);
    if (v80)
    {
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 + 1, v80));
      do
      {
        v82 = __ldaxr(v80);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v80));
      if (!v83)
      {
        atomic_store(1u, v80);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v80, v34, v35, v36, v37, v38, v39, v40);
        WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
      }
    }
  }
  else
  {
    v43 = qword_1ECF53238;
  }
  if (HIBYTE(word_1ECF4C620))
  {
    JSC::doExceptionFuzzing((unint64_t)v53, &v170, "LLIntSlowPaths/call", 0);
    v54 = v170;
  }
  if (!*((_QWORD *)v54 + 2))
    return v43;
  if (!BYTE1(dword_1ECF4C240))
    return qword_1ECF53220;
  v84 = atomic_load(&qword_1ECF589B8);
  if (v84 != -1)
  {
    v171 = &v176;
    v177 = (char *)&v171;
    std::__call_once(&qword_1ECF589B8, &v177, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>);
  }
  v43 = qword_1ECF589A8;
  v49 = (unsigned int *)unk_1ECF589B0;
  if (unk_1ECF589B0)
  {
    do
      v85 = __ldaxr(v49);
    while (__stlxr(v85 + 1, v49));
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    goto LABEL_146;
  }
  return v43;
}

uint64_t llint_slow_path_call_direct_eval_wide16(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  char v35;
  char **v36;
  char *v37;

  if (!BYTE1(dword_1ECF4C240))
  {
    v33 = qword_1ECF50F70;
LABEL_12:
    v34 = 0;
    return JSC::LLInt::commonCallDirectEval(a1, a2, &v33, a3, a5, a6, a7, a8, a9);
  }
  v11 = atomic_load(&qword_1ECF58A78);
  if (v11 != -1)
  {
    v37 = &v35;
    v36 = &v37;
    std::__call_once(&qword_1ECF58A78, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::genericReturnPointThunk(JSC::OpcodeSize)::$_1 &&>>);
  }
  v12 = (unsigned int *)unk_1ECF58A70;
  v33 = qword_1ECF58A68;
  if (!unk_1ECF58A70)
    goto LABEL_12;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v34 = v12;
  v21 = JSC::LLInt::commonCallDirectEval(a1, a2, &v33, a3, a5, a6, a7, a8, a9);
  v34 = 0;
  do
  {
    v22 = __ldaxr(v12);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v12));
  if (!v23)
  {
    atomic_store(1u, v12);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  return v21;
}

uint64_t llint_slow_path_call_direct_eval_wide32(uint64_t a1, unsigned __int8 *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  char v35;
  char **v36;
  char *v37;

  if (!BYTE1(dword_1ECF4C240))
  {
    v33 = qword_1ECF520C0;
LABEL_12:
    v34 = 0;
    return JSC::LLInt::commonCallDirectEval(a1, a2, &v33, a3, a5, a6, a7, a8, a9);
  }
  v11 = atomic_load(&qword_1ECF58A90);
  if (v11 != -1)
  {
    v37 = &v35;
    v36 = &v37;
    std::__call_once(&qword_1ECF58A90, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::genericReturnPointThunk(JSC::OpcodeSize)::$_2 &&>>);
  }
  v12 = *(unsigned int **)algn_1ECF58A88;
  v33 = qword_1ECF58A80;
  if (!*(_QWORD *)algn_1ECF58A88)
    goto LABEL_12;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v34 = v12;
  v21 = JSC::LLInt::commonCallDirectEval(a1, a2, &v33, a3, a5, a6, a7, a8, a9);
  v34 = 0;
  do
  {
    v22 = __ldaxr(v12);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v12));
  if (!v23)
  {
    atomic_store(1u, v12);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  return v21;
}

__int128 *llint_slow_path_strcat(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v15;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  JSC *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int *v40;
  unint64_t v41;
  int *v42;
  unint64_t v43;
  int *v44;
  JSC *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int *v50;
  unint64_t v51;
  int *v52;
  int v53;
  int v54;
  unint64_t *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t OutOfMemoryError;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  JSC::Exception *v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t SlowCase;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  JSC::VMTraps *v85;
  JSC *v86;
  int v87;
  JSC::VM *v88;
  JSC::VM *v89;
  unsigned __int8 *v90;
  char v91[8];
  JSC *v92;
  char v93;
  uint64_t v94;
  unint64_t *v95;
  _OWORD v96[5];
  char v97[24];
  uint64_t *v98;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(uint64_t **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v89 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884A89CLL);
  }
  v15 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  v88 = v10;
  if (v17 == 128)
  {
    v75 = *((__int16 *)a2 + 1);
    if (v75 > 63)
      v75 += 1073741760;
    v87 = v75;
    v19 = *((__int16 *)a2 + 2);
    if (v19 > 63)
      v19 += 1073741760;
    v20 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v17 == 130)
  {
    v87 = *(_DWORD *)(a2 + 2);
    v19 = *(_DWORD *)(a2 + 6);
    v20 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v18 = (char)a2[1];
    if (v18 > 15)
      v18 += 1073741808;
    v87 = v18;
    v19 = (char)a2[2];
    if (v19 > 15)
      v19 += 1073741808;
    v20 = a2[3];
  }
  v86 = (JSC *)v9;
  v21 = v9[7];
  v91[0] = 0;
  v92 = (JSC *)v21;
  v93 = 0;
  v94 = 0x800000000;
  v95 = (unint64_t *)v96 + 1;
  memset(v96, 0, 76);
  if (!v20)
  {
LABEL_51:
    switch((int)v94)
    {
      case 0:
        SlowCase = *((_QWORD *)v92 + 5246);
        break;
      case 1:
        SlowCase = *v95;
        break;
      case 2:
        v45 = v92;
        v46 = (unint64_t *)((char *)v92 + 39432);
        v48 = *v95;
        v47 = v95[1];
        v49 = *(_QWORD *)(*v95 + 8);
        v50 = (int *)(v49 + 4);
        if ((v49 & 1) != 0)
          v50 = (int *)(*v95 + 16);
        v51 = *(_QWORD *)(v47 + 8);
        v52 = (int *)(v47 + 16);
        if ((v51 & 1) == 0)
          v52 = (int *)(v51 + 4);
        if ((v49 & 1) != 0)
          v49 = (v49 >> 2) & 1;
        else
          LODWORD(v49) = (*(unsigned __int8 *)(v49 + 16) >> 2) & 1;
        v61 = *v50;
        v62 = *v52;
        if ((v51 & 1) != 0)
          v51 = (v51 >> 2) & 1;
        else
          LODWORD(v51) = (*(unsigned __int8 *)(v51 + 16) >> 2) & 1;
        v63 = v62 + v61;
        v64 = v49 & v51;
        SlowCase = *v46;
        if (*v46 < *((_QWORD *)v92 + 4930))
          goto LABEL_86;
        SlowCase = *((_QWORD *)v92 + 4931);
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM(v92, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v45 + 39408, (uint64_t)v45 + 192, 32, 0, 0, v82, v83, v84);
        }
        else
        {
          v77 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v92 + 4932);
          *((_QWORD *)v92 + 4930) = SlowCase + HIDWORD(v77);
          v46[2] = SlowCase + (int)v77;
LABEL_86:
          *v46 = SlowCase + 32;
        }
        *(_DWORD *)SlowCase = v46[260] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        v65 = 5;
        if (!v64)
          v65 = 1;
        *(_QWORD *)(SlowCase + 8) = v65 | v48;
        *(_DWORD *)(SlowCase + 16) = v63;
        *(_DWORD *)(SlowCase + 20) = v47;
        *(_WORD *)(SlowCase + 24) = WORD2(v47);
        *(_WORD *)(SlowCase + 26) = 0;
        *(_DWORD *)(SlowCase + 28) = 0;
        if (*((_BYTE *)v45 + 755))
          goto LABEL_90;
        break;
      case 3:
        v35 = v92;
        v37 = *v95;
        v36 = v95[1];
        v38 = v95[2];
        v39 = *(_QWORD *)(*v95 + 8);
        if ((v39 & 1) != 0)
          v40 = (int *)(*v95 + 16);
        else
          v40 = (int *)(v39 + 4);
        v41 = *(_QWORD *)(v36 + 8);
        if ((v41 & 1) != 0)
          v42 = (int *)(v36 + 16);
        else
          v42 = (int *)(v41 + 4);
        v43 = *(_QWORD *)(v38 + 8);
        v44 = (int *)(v38 + 16);
        if ((v43 & 1) == 0)
          v44 = (int *)(v43 + 4);
        if ((v39 & 1) != 0)
          v39 = (v39 >> 2) & 1;
        else
          LODWORD(v39) = (*(unsigned __int8 *)(v39 + 16) >> 2) & 1;
        v53 = *v40;
        v54 = *v42;
        v55 = (unint64_t *)((char *)v92 + 39432);
        if ((v41 & 1) != 0)
          v41 = (v41 >> 2) & 1;
        else
          LODWORD(v41) = (*(unsigned __int8 *)(v41 + 16) >> 2) & 1;
        v56 = *v44;
        v57 = v39 & v41;
        if ((v43 & 1) != 0)
          v43 = (v43 >> 2) & 1;
        else
          LODWORD(v43) = (*(unsigned __int8 *)(v43 + 16) >> 2) & 1;
        v58 = v54 + v53 + v56;
        v59 = v57 & v43;
        SlowCase = *v55;
        if (*v55 < *((_QWORD *)v92 + 4930))
          goto LABEL_76;
        SlowCase = *((_QWORD *)v92 + 4931);
        if ((SlowCase & 1) != 0)
        {
          v85 = (JSC *)((char *)v92 + 39408);
          JSC::sanitizeStackForVM(v92, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v85, (uint64_t)v35 + 192, 32, 0, 0, v79, v80, v81);
        }
        else
        {
          v76 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v92 + 4932);
          *((_QWORD *)v92 + 4930) = SlowCase + HIDWORD(v76);
          v55[2] = SlowCase + (int)v76;
LABEL_76:
          *v55 = SlowCase + 32;
        }
        *(_DWORD *)SlowCase = v55[260] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        v60 = 5;
        if (!v59)
          v60 = 1;
        *(_QWORD *)(SlowCase + 8) = v60 | v37;
        *(_DWORD *)(SlowCase + 16) = v58;
        *(_DWORD *)(SlowCase + 20) = v36;
        *(_WORD *)(SlowCase + 24) = WORD2(v36);
        *(_WORD *)(SlowCase + 26) = v38;
        *(_DWORD *)(SlowCase + 28) = v38 >> 16;
        if (*((_BYTE *)v35 + 755))
LABEL_90:
          __dmb(0xAu);
        break;
      default:
        SlowCase = 0;
        break;
    }
    v93 = 0;
    LODWORD(v94) = 0;
    DWORD2(v96[4]) = 0;
    goto LABEL_92;
  }
  v22 = 0;
  v23 = -v20;
  v24 = a1 + 8 * v19;
  while (1)
  {
    v25 = *(_QWORD *)(v24 + 8 * v22);
    v90 = (unsigned __int8 *)v25;
    if ((v25 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v25 + 5) != 2)
      v25 = (unint64_t)JSC::JSValue::toStringSlowCase(&v90, (uint64_t)v86, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v21 + 80))
    {
      v33 = *(_DWORD *)(v21 + 80);
      if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v21 + 16))
      {
        SlowCase = 0;
        goto LABEL_92;
      }
    }
    if (v91[0])
      break;
    v26 = *(_QWORD *)(v25 + 8);
    v27 = v26 & 1;
    v28 = (_DWORD *)(v26 + 4);
    if ((v26 & 1) != 0)
      v28 = (_DWORD *)(v25 + 16);
    if (!*v28)
      goto LABEL_33;
    if ((_DWORD)v94 == 3)
    {
      JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::expand((JSC::MarkedVectorBase *)v91, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v26 = *(_QWORD *)(v25 + 8);
      v27 = v26 & 1;
    }
    v29 = (int *)(v26 + 4);
    if (v27)
      v29 = (int *)(v25 + 16);
    v30 = *v29;
    if ((v30 | DWORD2(v96[4])) < 0 || (v31 = DWORD2(v96[4]) + v30, __OFADD__(DWORD2(v96[4]), v30)))
    {
      v91[0] = 1;
      break;
    }
    v32 = v94;
    if ((_DWORD)v94 == HIDWORD(v94))
    {
      if (!(v94 >> 30)
        && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v94, 2 * (int)v94))
      {
        v32 = v94;
LABEL_43:
        v95[v32] = v25;
        LODWORD(v94) = v32 + 1;
        if (!*(_QWORD *)&v96[0] && (v25 & 0xFFFE000000000002) == 0)
        {
          v34 = (unsigned __int8 *)(v25 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v25 & 8) != 0)
            v34 = (unsigned __int8 *)(v25 - 16);
          *(_QWORD *)&v96[0] = *(_QWORD *)v34 + 560;
          v98 = &v94;
          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v96[0], (uint64_t *)&v98, a4, a5, a6, a7, a8, (uint64_t)v97);
        }
        goto LABEL_32;
      }
      v93 = 1;
    }
    else
    {
      if (v95 != (unint64_t *)((char *)v96 + 8) && v95)
        goto LABEL_43;
      v95[v94] = v25;
      LODWORD(v94) = v32 + 1;
    }
LABEL_32:
    DWORD2(v96[4]) = v31;
LABEL_33:
    if (v23 == --v22)
    {
      if (v91[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19884A8E4);
      }
      goto LABEL_51;
    }
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v86, (JSC::JSGlobalObject *)a2);
  v74 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v74 = (JSC::Exception *)JSC::Exception::create(v21, (JSC::VM *)OutOfMemoryError, 0, v68, v69, v70, v71, v72);
  }
  SlowCase = (unint64_t)JSC::VM::throwException((JSC::VM *)v21, v86, v74, v73, v68, v69, v70, v71, v72);
LABEL_92:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v94, a2, a3, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v86, &v89, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v88 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v87) = SlowCase;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_to_primitive(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM **v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  const void *v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v26;
  unint64_t v27;
  JSC::VM **v28;
  uint64_t v29;
  JSC::VM *v30;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::VM ***)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v30 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x19884AB48);
  }
  v16 = a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    v20 = 1073741760;
    if (v19 > 63)
      v19 += 1073741760;
    v21 = *((__int16 *)a2 + 2);
    if (v21 <= 63)
      goto LABEL_11;
LABEL_24:
    v26 = v21 + v20;
    goto LABEL_25;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    v20 = 1073741808;
    if (v19 > 15)
      v19 += 1073741808;
    v21 = (char)a2[2];
    if (v21 <= 15)
    {
LABEL_11:
      v22 = v19;
LABEL_12:
      v23 = (uint64_t *)(a1 + 8 * v21);
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  v19 = *(_DWORD *)(a2 + 2);
  v26 = *(_DWORD *)(a2 + 6);
LABEL_25:
  v21 = v26;
  v22 = v19;
  if (v26 < 0x40000000)
    goto LABEL_12;
  v27 = (v26 - 0x40000000);
  if (v27 >= *(unsigned int *)(v11 + 172))
    goto LABEL_29;
  v23 = (uint64_t *)(*(_QWORD *)(v11 + 160) + 8 * v27);
LABEL_13:
  v24 = *v23;
  if ((*v23 & 0xFFFE000000000002) == 0)
  {
    v28 = v9;
    v29 = JSC::JSCell::toPrimitive(*v23, v9, 0, a4, a5, a6, a7, a8);
    v9 = v28;
    v24 = v29;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v9, &v30, "LLIntSlowPaths", v16);
  if (*((_QWORD *)v10 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(a1 + 8 * v22) = v24;
  return (__int128 *)v16;
}

__int128 *llint_slow_path_throw(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v18;
  int v19;
  unint64_t *v20;
  int v22;
  int v23;
  unint64_t v24;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(JSC::JSGlobalObject **)(v10 + 8);
  v12 = *(JSC::VM **)(v10 + 72);
  *((_QWORD *)v12 + 5) = a1;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 80);
  v15 = *(_QWORD *)v14;
  v16 = *(unsigned int *)(v14 + 12) + *(_QWORD *)v14;
  if (v15 > (unint64_t)a2 || v16 <= (unint64_t)a2)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19884ACF0);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v15) & 0x3FFFFFFF;
  v18 = *a2;
  if (v18 == 128)
  {
    v19 = *((__int16 *)a2 + 1);
    if (v19 <= 63)
      goto LABEL_9;
    v22 = 1073741760;
LABEL_12:
    v23 = v19 + v22;
    goto LABEL_13;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
    {
LABEL_9:
      v20 = (unint64_t *)(a1 + 8 * v19);
      goto LABEL_10;
    }
    v22 = 1073741808;
    goto LABEL_12;
  }
  v23 = *(_DWORD *)(a2 + 2);
LABEL_13:
  v19 = v23;
  if (v23 < 0x40000000)
    goto LABEL_9;
  v24 = (v23 - 0x40000000);
  if (v24 >= *(unsigned int *)(v13 + 172))
    goto LABEL_19;
  v20 = (unint64_t *)(*(_QWORD *)(v13 + 160) + 8 * v24);
LABEL_10:
  JSC::VM::throwException(v12, v11, *v20, a4, a5, a6, a7, a8);
  return &xmmword_1ECF4C7C0;
}

uint64_t llint_slow_path_handle_traps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 72);
  v8[5] = a1;
  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 8), 0xFu, a3, a4, a5, a6, a7, a8);
  return v8[2];
}

__int128 *llint_slow_path_debug(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v16;
  uint64_t v17;
  JSC::VM *v19;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v11 + 5) = a1;
  v19 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884AE3CLL);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v16 = *a2;
  if (v16 == 128)
  {
    v17 = *((unsigned __int16 *)a2 + 1);
  }
  else if (v16 == 130)
  {
    v17 = *(unsigned int *)(a2 + 2);
  }
  else
  {
    v17 = a2[1];
  }
  JSC::Interpreter::debug((uint64_t)v11 + 90560, (_QWORD *)a1, v17, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v10, &v19, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v11 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

uint64_t llint_slow_path_handle_exception(JSC::VM *a1, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC **v11;
  JSC *v12;

  v10 = *((_QWORD *)a1 + 3);
  if ((v10 & 8) != 0)
    v11 = (JSC **)(v10 - 16);
  else
    v11 = (JSC **)(v10 & 0xFFFFFFFFFFFFC000 | 8);
  v12 = *v11;
  *((_QWORD *)v12 + 5) = a1;
  JSC::genericUnwind(v12, a1, a3, a4, a5, a6, a7, a8);
  return a2;
}

__int128 *llint_slow_path_get_from_scope(uint64_t a1, unsigned __int8 *a2, uint8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  JSC::VM *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint32x4_t v23;
  __int32 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  JSC::VM *v33;
  _BYTE *v34;
  JSC::VM *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::VM *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  JSC::VM *v56;
  uint64_t *v57;
  JSC::VM *v58;
  int v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _DWORD *v74;
  WTF::StringImpl **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::JSGlobalObject *v82;
  unint64_t TDZError;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned __int16 *v92;
  uint64_t v93;
  unsigned int v94;
  BOOL v95;
  JSC::VM *v96;
  uint64_t v97;
  uint64_t v98;
  JSC::VM *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  JSC::VM *v106;
  JSC::VM *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  JSC::VM *v113;
  char OwnStaticPropertySlot;
  unsigned int *v115;
  JSC::VM *v116;
  uint64_t *v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int8x16_t **v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  BOOL v143;
  int v145;
  _BYTE *v146;
  uint64_t v147;
  unsigned int v148;
  JSC::VM *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  unint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  JSC::VM *v167;
  JSC::VM *v168;
  JSC::Structure *v169;
  int v170;
  unsigned int v171;
  int v172;
  unint64_t v173;
  int v174;
  uint64_t v175;
  JSC::VM *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  JSC::VM *v180;
  uint64_t *v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unsigned __int16 *v186;
  uint64_t v187;
  unsigned int v188;
  JSC::VM *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  JSC::VM *v201;
  char v202;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int8x16_t **v207;
  JSC::VM *v208;
  uint64_t *v209;
  uint64_t v210;
  JSC::VM *v211;
  unint64_t v212;
  JSC::VM *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  JSC::VM *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  JSC::VM *v222;
  uint64_t *v223;
  unint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unsigned int v227;
  _BOOL4 v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  unsigned __int8 *v232;
  int v233;
  double v234;
  const unsigned __int8 *v235;
  BOOL v236;
  uint64_t v237;
  unsigned __int8 *v238;
  unsigned int v239;
  BOOL v240;
  BOOL v241;
  unint64_t v242;
  uint64_t *v243;
  uint64_t *v244;
  JSC::VM *v245;
  JSC::VM *v246;
  JSC::VM *v247;
  JSC::VM *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  JSC::VM *v253;
  JSC::VM *v254;
  JSC::VM *v255;
  JSC::VM *v256;
  JSC::VM *v257;
  JSC::VM *v258;
  unsigned int v259;
  uint64_t v260;
  unsigned __int32 v261;
  JSC *v262;
  int v263;
  _BYTE v264[28];
  JSC::VM *v265;
  uint64_t (*v266)(unint64_t);
  uint64_t v267;
  unint64_t v268;
  _DWORD *v269;
  _DWORD *v270;
  _QWORD v271[2];
  uint64_t v272;
  char v273;
  int8x16_t **v274;
  uint64_t v275;
  JSC::VM *v276[18];

  v276[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 16);
  v262 = *(JSC **)(v9 + 8);
  v10 = *(JSC::VM **)(v9 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v265 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884B850);
  }
  v15 = (JSC::VM *)a2;
  v16 = a1;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v17 = *a2;
  if (v17 == 128)
  {
    v118 = *((__int16 *)a2 + 1);
    if (v118 > 63)
      v118 += 1073741760;
    v119 = *((__int16 *)a2 + 2);
    if (v119 <= 63)
      v20 = *((__int16 *)a2 + 2);
    else
      v20 = v119 + 1073741760;
    v263 = v118;
    *(_DWORD *)v264 = v20;
    v21 = *((unsigned __int16 *)a2 + 3);
    v120 = ((*((unsigned __int16 *)a2 + 4) >> 3) | (*((unsigned __int16 *)a2 + 4) << 20)) & 0x10000F | (((*((unsigned __int16 *)a2 + 4) >> 1) & 3) << 10) & 0xBFFFFFFF | (((*((unsigned __int16 *)a2 + 4) >> 7) & 1) << 30);
    *(_DWORD *)&v264[4] = v21;
    *(_DWORD *)&v264[8] = v120;
    v23 = vmovl_u16(*(uint16x4_t *)(a2 + 10));
    goto LABEL_14;
  }
  if (v17 != 130)
  {
    v18 = (char)a2[1];
    if (v18 > 15)
      v18 += 1073741808;
    v19 = (char)a2[2];
    if (v19 <= 15)
      v20 = (char)a2[2];
    else
      v20 = v19 + 1073741808;
    v263 = v18;
    *(_DWORD *)v264 = v20;
    v21 = a2[3];
    v22 = ((a2[4] >> 3) | (a2[4] << 20) | (a2[4] << 9)) & 0x100C0F | ((((a2[4] & 0x80) >> 7) & 1) << 30);
    *(_DWORD *)&v264[4] = v21;
    *(_DWORD *)&v264[8] = v22;
    a3.i32[0] = *(_DWORD *)(a2 + 5);
    v23 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
LABEL_14:
    *(uint32x4_t *)&v264[12] = v23;
    v24 = v23.i32[3];
    goto LABEL_15;
  }
  v263 = *(_DWORD *)(a2 + 2);
  *(_OWORD *)v264 = *(_OWORD *)(a2 + 6);
  *(_QWORD *)&v264[16] = *(_QWORD *)(a2 + 22);
  v24 = *(_DWORD *)(a2 + 30);
  *(_DWORD *)&v264[24] = v24;
  v21 = *(_DWORD *)&v264[4];
  v20 = *(_DWORD *)v264;
LABEL_15:
  v25 = *(_QWORD *)(v9 + 136);
  v26 = *(unsigned __int16 *)(v25 + 52);
  if (!*(_WORD *)(v25 + 52))
    v26 = *(_DWORD *)(v25 + 200);
  v27 = *(unsigned int **)(*(_QWORD *)(v9 + 56) + 104);
  v261 = v24;
  v260 = *(_QWORD *)(v9 + 136);
  if (!v27)
  {
    v28 = 0;
    goto LABEL_78;
  }
  v28 = *v27;
  if (*v27 <= v21)
  {
LABEL_78:
    v74 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
    if (*v74 <= v21 - v28)
    {
      __break(0xC471u);
      JUMPOUT(0x19884BC94);
    }
    v29 = &v74[2 * (v21 - v28)];
    goto LABEL_20;
  }
  v29 = &v27[2 * v21];
LABEL_20:
  v30 = (uint64_t *)(v29 + 2);
  v259 = v26;
  v31 = *(_QWORD *)(v16 + 8 * v20);
  v32 = *((_QWORD *)v29 + 1);
  v268 = 0xFFFFFFFF00000000;
  LOBYTE(v272) = 0;
  v273 = 0;
  v274 = 0;
  v275 = 0;
  v270 = 0;
  memset(v271, 0, 13);
  v269 = (_DWORD *)v31;
  v33 = (JSC::VM *)*((_QWORD *)v262 + 7);
  v34 = (_BYTE *)(v31 + 6);
  v35 = (JSC::VM *)(v32 >> 4);
  if ((*(_BYTE *)(v31 + 6) & 8) == 0)
  {
    v36 = v31;
    while (1)
    {
      v37 = *(_DWORD *)v36 & 0xFFFFFFFE;
      v38 = 16 * v37;
      if (!(_DWORD)v35 || (v35 & ~*(_DWORD *)(16 * v37 + 0x20)) != 0)
        goto LABEL_33;
      v39 = *(_QWORD *)(16 * v37 + 0x58);
      if (!v39)
      {
        v51 = *(_QWORD *)(16 * v37 + 0x40);
        if (!v51 || *(_BYTE *)(v51 + 5) != 1 && *(_DWORD *)(v51 + 80) < 2u)
          goto LABEL_33;
        v52 = v33;
        v53 = v32;
        v249 = v16;
        v253 = v15;
        v54 = v9;
        v55 = v31;
        v56 = v10;
        v57 = v30;
        v58 = v35;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v38, v33, 1, (const JSC::PropertyTable *)a5, a6, a7, (uint64_t)v30, a9);
        v35 = v58;
        v32 = v53;
        v33 = v52;
        v30 = v57;
        v10 = v56;
        v31 = v55;
        v9 = v54;
        v16 = v249;
        v15 = v253;
        if (!v39)
          goto LABEL_33;
      }
      if (!*(_DWORD *)(v39 + 24))
        goto LABEL_33;
      v40 = *(_QWORD *)(v39 + 16);
      v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
      v42 = *(unsigned int *)(v39 + 8);
      v43 = *(_DWORD *)(v32 + 16);
      if ((v40 & 1) != 0)
      {
        if ((v43 & 0x20) != 0)
          v43 = *(_DWORD *)(v32 + 32);
        v44 = *(_DWORD *)(v39 + 12);
        v45 = (v43 >> 8) & *(_QWORD *)&v44;
        v46 = *(unsigned __int8 *)(v41 + v45);
        if (!*(_BYTE *)(v41 + v45))
          goto LABEL_33;
        v47 = v41 + v42;
        v48 = 1;
        while (1)
        {
          v49 = *(_QWORD *)(v47 + 8 * (v46 - 1));
          if (v32 == (v49 & 0xFFFFFFFFFFFFLL))
            break;
          v45 = ((_DWORD)v45 + v48) & v44;
          v46 = *(unsigned __int8 *)(v41 + v45);
          ++v48;
          if (!*(_BYTE *)(v41 + v45))
            goto LABEL_33;
        }
        a7 = (v49 >> 16) & 0xFF00000000 | HIBYTE(v49);
      }
      else
      {
        if ((v43 & 0x20) != 0)
          v43 = *(_DWORD *)(v32 + 32);
        v59 = *(_DWORD *)(v39 + 12);
        v60 = v59 & (v43 >> 8);
        v61 = *(_DWORD *)(v41 + 4 * v60);
        if (!v61)
          goto LABEL_33;
        v62 = v41 + 4 * v42;
        v63 = 1;
        while (1)
        {
          v64 = (v61 - 1);
          if (v32 == *(_QWORD *)(v62 + 16 * v64))
            break;
          v60 = (v60 + v63) & v59;
          v61 = *(_DWORD *)(v41 + 4 * v60);
          ++v63;
          if (!v61)
            goto LABEL_33;
        }
        a7 = *(unsigned int *)(v62 + 16 * v64 + 8) | ((unint64_t)*(unsigned __int8 *)(v62 + 16 * v64 + 12) << 32);
      }
      if ((_DWORD)a7 != -1)
      {
        a6 = HIDWORD(a7);
        if ((int)a7 <= 63)
        {
          v71 = v36 + 16;
          v72 = a7 << 32;
        }
        else
        {
          v71 = *(_QWORD *)(v36 + 8) - 8;
          v72 = 0x3F00000000 - (a7 << 32);
        }
        a5 = *(_QWORD *)(v71 + (v72 >> 29));
        if ((a5 & 0xFFFE000000000002) != 0)
        {
LABEL_75:
          v266 = (uint64_t (*)(unint64_t))a5;
          v270 = (_DWORD *)v36;
LABEL_76:
          v268 = __PAIR64__(a7, a6);
          v69 = 1;
          LOWORD(v271[1]) = 257;
          goto LABEL_61;
        }
        v73 = *(unsigned __int8 *)(a5 + 5);
        if (v73 != 5)
        {
          if (v73 == 6)
          {
            v123 = *(_DWORD *)(v38 + 16) & 3;
            v124 = *(_QWORD *)(a5 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a5 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v126 = *(int8x16_t ***)(a5 + 24);
              v125 = *(_QWORD *)(a5 + 32);
              v266 = *(uint64_t (**)(unint64_t))(a5 + 8);
              v267 = v124;
              LODWORD(v268) = HIDWORD(a7);
              v270 = (_DWORD *)v36;
              BYTE1(v271[1]) = 3;
              v69 = 1;
              if (v123 != 2)
                LOBYTE(v271[1]) = 1;
              BYTE3(v271[1]) = 1;
              v274 = v126;
              v275 = v125;
            }
            else
            {
              v266 = *(uint64_t (**)(unint64_t))(a5 + 8);
              v267 = v124;
              LODWORD(v268) = HIDWORD(a7);
              v270 = (_DWORD *)v36;
              v69 = 1;
              BYTE1(v271[1]) = 3;
              if (v123 != 2)
                LOBYTE(v271[1]) = 1;
            }
            goto LABEL_61;
          }
          goto LABEL_75;
        }
        v115 = (unsigned int *)v36;
        v116 = v33;
LABEL_118:
        v117 = v30;
        JSC::JSObject::fillGetterPropertySlot(v115, (uint64_t)v33, (uint64_t)&v266, a5, a6, a7);
        v33 = v116;
        v30 = v117;
LABEL_119:
        v69 = 1;
        goto LABEL_61;
      }
LABEL_33:
      if ((*v34 & 0x20) != 0)
      {
        v106 = v33;
        v107 = v10;
        v108 = v32;
        v109 = v30;
        v254 = v15;
        v110 = v16;
        v111 = v9;
        v112 = v31;
        v113 = v35;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v36, v33, v32, (uint64_t)&v266);
        v35 = v113;
        v31 = v112;
        v9 = v111;
        v16 = v110;
        v15 = v254;
        v32 = v108;
        v10 = v107;
        v33 = v106;
        v30 = v109;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_119;
      }
      v50 = *(_QWORD *)(v38 + 48);
      if (!v50)
        v50 = *(_QWORD *)(v36 + 16);
      if ((v50 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v50 + 5) < 0x17u)
      {
        if (!v32)
          goto LABEL_60;
        v65 = *(_DWORD *)(v32 + 16);
        if ((v65 & 0x20) != 0)
          goto LABEL_60;
        v66 = *(_WORD **)(v32 + 8);
        v67 = *(unsigned int *)(v32 + 4);
        if ((v65 & 4) == 0)
        {
          if ((_DWORD)v67)
          {
            v68 = (unsigned __int16)*v66 - 48;
            if (v68 <= 9 && (*v66 != 48 || v67 <= 1))
            {
              v92 = v66 + 1;
              v93 = v67 - 1;
              while (v93)
              {
                if (v68 > 0x19999999)
                  goto LABEL_60;
                v94 = *v92 - 48;
                if (v94 > 9)
                  goto LABEL_60;
                v69 = 0;
                v95 = __CFADD__(v94, 10 * v68);
                v68 = v94 + 10 * (_DWORD)v68;
                ++v92;
                --v93;
                if (v95)
                  goto LABEL_61;
              }
              if ((_DWORD)v68 != -1)
                goto LABEL_103;
            }
          }
LABEL_60:
          v69 = 0;
          goto LABEL_61;
        }
        v32 = (unint64_t)v33;
        v218 = v15;
        v219 = v16;
        v220 = v9;
        v221 = v31;
        v222 = v10;
        v223 = v30;
        if (!(_DWORD)v67
          || (v68 = *(unsigned __int8 *)v66 - 48, v68 > 9)
          || v67 >= 2 && *(_BYTE *)v66 == 48)
        {
LABEL_282:
          v69 = 0;
          v30 = v223;
          v10 = v222;
          v31 = v221;
          v9 = v220;
          v16 = v219;
          v15 = v218;
          v33 = (JSC::VM *)v32;
          goto LABEL_61;
        }
        v225 = (unsigned __int8 *)v66 + 1;
        v226 = v67 - 1;
        while (v226)
        {
          if (v68 > 0x19999999)
            goto LABEL_282;
          v227 = *v225 - 48;
          if (v227 > 9)
            goto LABEL_282;
          v69 = 0;
          v95 = __CFADD__(v227, 10 * v68);
          v68 = v227 + 10 * (_DWORD)v68;
          ++v225;
          --v226;
          v30 = v223;
          v10 = v222;
          v31 = v221;
          v9 = v220;
          v16 = v219;
          v15 = v218;
          v33 = (JSC::VM *)v32;
          if (v95)
            goto LABEL_61;
        }
        v30 = v223;
        v10 = v222;
        v31 = v221;
        v9 = v220;
        v16 = v219;
        v15 = v218;
        v33 = (JSC::VM *)v32;
        if ((_DWORD)v68 == -1)
          goto LABEL_60;
LABEL_103:
        v96 = (JSC::VM *)*((_QWORD *)v262 + 7);
        v97 = v31;
        v243 = v30;
        v245 = v33;
        while (2)
        {
          v98 = 16 * (*(_DWORD *)v97 & 0xFFFFFFFE);
          v99 = v96;
          v100 = (*(uint64_t (**)(uint64_t, JSC *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v98 + 0x4C) + 0x70))(v97, v262, v68, &v266);
          v96 = v99;
          v103 = v100;
          if (*((_DWORD *)v99 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v99, v101, v32, a5, a6, a7, v102, a9);
            v96 = v99;
            if (((hasExceptionsAfterHandlingTraps | v103) & 1) != 0)
            {
LABEL_255:
              v69 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_243;
            }
          }
          else if ((v100 & 1) != 0)
          {
LABEL_242:
            v69 = 1;
LABEL_243:
            v30 = v243;
            v33 = v245;
            goto LABEL_61;
          }
          v30 = v243;
          v33 = v245;
          if (BYTE2(v271[1]) == 3)
          {
            if (BYTE4(v271[1]))
            {
LABEL_362:
              v69 = 0;
              goto LABEL_243;
            }
            v104 = *(unsigned __int8 *)(v97 + 5);
            v30 = v243;
            v33 = v245;
            v96 = v99;
            if (v104 != 61)
            {
LABEL_108:
              if ((v104 - 39) <= 0xA)
              {
                v224 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v97, (uint64_t)v33, v32, a5, a6, a7, (uint64_t)v30, a9);
                v96 = v99;
                v30 = v243;
                v33 = v245;
                if (v224 <= v68)
                {
LABEL_295:
                  v69 = 0;
                  goto LABEL_61;
                }
              }
            }
          }
          else
          {
            v104 = *(unsigned __int8 *)(v97 + 5);
            if (v104 != 61)
              goto LABEL_108;
            if (BYTE2(v271[1]) == 1)
              goto LABEL_295;
          }
          if ((*(_WORD *)(v98 + 12) & 0x800) == 0 || BYTE2(v271[1]) == 3)
          {
            v105 = *(_QWORD *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE) + 0x30);
            if (!v105)
              v105 = *(_QWORD *)(v97 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v105 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0xB0))(v97, v262);
            }
            else
            {
              v105 = *(_QWORD *)(16 * (*(_DWORD *)v97 & 0xFFFFFFFE) + 0x30);
              if (!v105)
                v105 = *(_QWORD *)(v97 + 16);
            }
            if (*((_DWORD *)v99 + 20))
            {
              v241 = JSC::VM::hasExceptionsAfterHandlingTraps(v99, (uint64_t)v33, v32, a5, a6, a7, (uint64_t)v30, a9);
              v96 = v99;
              v30 = v243;
              v33 = v245;
              if (v241)
                goto LABEL_295;
            }
            else
            {
              v30 = v243;
              v33 = v245;
              v96 = v99;
            }
          }
          if ((v105 & 0xFFFE000000000002) != 0)
            goto LABEL_295;
          v69 = 0;
          v97 = v105;
          if (*(unsigned __int8 *)(v105 + 5) <= 0x16u)
            goto LABEL_61;
          continue;
        }
      }
      v34 = (_BYTE *)(v50 + 6);
      v36 = v50;
      if ((*(_BYTE *)(v50 + 6) & 8) != 0)
        goto LABEL_170;
    }
  }
  v50 = v31;
LABEL_170:
  if (v32)
  {
    v145 = *(_DWORD *)(v32 + 16);
    if ((v145 & 0x20) == 0)
    {
      v146 = *(_BYTE **)(v32 + 8);
      v147 = *(unsigned int *)(v32 + 4);
      if ((v145 & 4) != 0)
      {
        if ((_DWORD)v147)
        {
          v148 = *v146 - 48;
          if (v148 <= 9 && (v147 < 2 || *v146 != 48))
          {
            v237 = v147 - 1;
            v238 = v146 + 1;
            while (v237)
            {
              if (v148 <= 0x19999999)
              {
                v239 = *v238 - 48;
                if (v239 <= 9)
                {
                  v95 = __CFADD__(v239, 10 * v148);
                  v148 = v239 + 10 * v148;
                  --v237;
                  ++v238;
                  if (!v95)
                    continue;
                }
              }
              goto LABEL_175;
            }
            if (v148 != -1)
              goto LABEL_230;
          }
        }
      }
      else if ((_DWORD)v147)
      {
        v148 = *(unsigned __int16 *)v146 - 48;
        if (v148 <= 9 && (*(_WORD *)v146 != 48 || v147 <= 1))
        {
          v186 = (unsigned __int16 *)(v146 + 2);
          v187 = v147 - 1;
          while (v187)
          {
            if (v148 <= 0x19999999)
            {
              v188 = *v186 - 48;
              if (v188 <= 9)
              {
                v95 = __CFADD__(v188, 10 * v148);
                v148 = v188 + 10 * v148;
                ++v186;
                --v187;
                if (!v95)
                  continue;
              }
            }
            goto LABEL_175;
          }
          if (v148 != -1)
          {
LABEL_230:
            v189 = (JSC::VM *)*((_QWORD *)v262 + 7);
            v190 = (uint64_t *)v31;
            v243 = v30;
            v245 = v33;
            while (1)
            {
              v191 = 16 * (*(_DWORD *)v190 & 0xFFFFFFFE);
              v192 = v190;
              v193 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v191 + 0x4C) + 0x70))();
              v196 = v193;
              if (*((_DWORD *)v189 + 20))
              {
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v189, v194, v32, a5, a6, a7, v195, a9);
                if (((hasExceptionsAfterHandlingTraps | v196) & 1) != 0)
                  goto LABEL_255;
              }
              else if ((v193 & 1) != 0)
              {
                goto LABEL_242;
              }
              if (BYTE2(v271[1]) == 3)
              {
                if (BYTE4(v271[1]))
                  goto LABEL_362;
                v197 = *((unsigned __int8 *)v192 + 5);
                if (v197 == 61)
                  goto LABEL_236;
              }
              else
              {
                v197 = *((unsigned __int8 *)v192 + 5);
                if (v197 == 61)
                {
                  if (BYTE2(v271[1]) == 1)
                    goto LABEL_362;
                  goto LABEL_236;
                }
              }
              if ((v197 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v192, v194, v32, a5, a6, a7, v195, a9) <= v148)
              {
                goto LABEL_362;
              }
LABEL_236:
              if ((*(_WORD *)(v191 + 12) & 0x800) == 0 || BYTE2(v271[1]) == 3)
              {
                v198 = *(_QWORD *)(16 * (*(_DWORD *)v192 & 0xFFFFFFFE) + 0x30);
                if (!v198)
                  v198 = v192[2];
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v192 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v198 = (*(uint64_t (**)(uint64_t *, JSC *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v192 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v192, v262);
                }
                else
                {
                  v198 = *(_QWORD *)(16 * (*(_DWORD *)v192 & 0xFFFFFFFE) + 0x30);
                  if (!v198)
                    v198 = v192[2];
                }
                if (*((_DWORD *)v189 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v189, v194, v32, a5, a6, a7, v195, a9))
                {
                  goto LABEL_362;
                }
              }
              if ((v198 & 0xFFFE000000000002) != 0)
                goto LABEL_362;
              v69 = 0;
              v190 = (uint64_t *)v198;
              v30 = v243;
              v33 = v245;
              if (*(unsigned __int8 *)(v198 + 5) <= 0x16u)
                goto LABEL_61;
            }
          }
        }
      }
    }
  }
LABEL_175:
  v149 = (JSC::VM *)*((_QWORD *)v262 + 7);
  while (1)
  {
    v150 = 16 * (*(_DWORD *)v50 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v50 + 6) & 8) == 0)
    {
      if ((_DWORD)v35 && (v35 & ~*(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v151 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x58);
        if (v151)
          goto LABEL_386;
        v164 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x40);
        if (v164 && (*(_BYTE *)(v164 + 5) == 1 || *(_DWORD *)(v164 + 80) >= 2u))
        {
          v246 = v33;
          v255 = v10;
          v165 = v32;
          v166 = v30;
          v167 = v35;
          v168 = v149;
          v169 = (JSC::Structure *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE));
          JSC::Structure::materializePropertyTable(v169, v149, 1, (const JSC::PropertyTable *)a5, a6, a7, (uint64_t)v30, a9);
          v150 = (uint64_t)v169;
          v149 = v168;
          v35 = v167;
          v32 = v165;
          v10 = v255;
          v33 = v246;
          v30 = v166;
          if (v151)
          {
LABEL_386:
            if (*(_DWORD *)(v151 + 24))
            {
              v152 = *(_QWORD *)(v151 + 16);
              v153 = v152 & 0xFFFFFFFFFFFFFFFELL;
              v154 = *(unsigned int *)(v151 + 8);
              v155 = *(_DWORD *)(v32 + 16);
              if ((v152 & 1) != 0)
              {
                if ((v155 & 0x20) != 0)
                  v155 = *(_DWORD *)(v32 + 32);
                v156 = *(_DWORD *)(v151 + 12);
                v157 = (v155 >> 8) & *(_QWORD *)&v156;
                v158 = *(unsigned __int8 *)(v153 + v157);
                if (*(_BYTE *)(v153 + v157))
                {
                  v159 = v153 + v154;
                  v160 = 1;
                  while (1)
                  {
                    v161 = *(_QWORD *)(v159 + 8 * (v158 - 1));
                    if (v32 == (v161 & 0xFFFFFFFFFFFFLL))
                      break;
                    v157 = ((_DWORD)v157 + v160) & v156;
                    v158 = *(unsigned __int8 *)(v153 + v157);
                    ++v160;
                    if (!*(_BYTE *)(v153 + v157))
                      goto LABEL_188;
                  }
                  a7 = (v161 >> 16) & 0xFF00000000 | HIBYTE(v161);
                  goto LABEL_201;
                }
              }
              else
              {
                if ((v155 & 0x20) != 0)
                  v155 = *(_DWORD *)(v32 + 32);
                v170 = *(_DWORD *)(v151 + 12);
                v171 = v170 & (v155 >> 8);
                v172 = *(_DWORD *)(v153 + 4 * v171);
                if (v172)
                {
                  v173 = v153 + 4 * v154;
                  v174 = 1;
                  while (1)
                  {
                    v175 = (v172 - 1);
                    if (v32 == *(_QWORD *)(v173 + 16 * v175))
                      break;
                    v171 = (v171 + v174) & v170;
                    v172 = *(_DWORD *)(v153 + 4 * v171);
                    ++v174;
                    if (!v172)
                      goto LABEL_188;
                  }
                  a7 = *(unsigned int *)(v173 + 16 * v175 + 8) | ((unint64_t)*(unsigned __int8 *)(v173 + 16 * v175 + 12) << 32);
LABEL_201:
                  if ((_DWORD)a7 != -1)
                  {
                    a6 = HIDWORD(a7);
                    if ((int)a7 <= 63)
                    {
                      v183 = v50 + 16;
                      v184 = a7 << 32;
                    }
                    else
                    {
                      v183 = *(_QWORD *)(v50 + 8) - 8;
                      v184 = 0x3F00000000 - (a7 << 32);
                    }
                    a5 = *(_QWORD *)(v183 + (v184 >> 29));
                    if ((a5 & 0xFFFE000000000002) == 0)
                    {
                      v185 = *(unsigned __int8 *)(a5 + 5);
                      if (v185 == 5)
                      {
                        v115 = (unsigned int *)v50;
                        v116 = v33;
                        v33 = v149;
                        goto LABEL_118;
                      }
                      if (v185 == 6)
                      {
                        v204 = *(_DWORD *)(v150 + 16) & 3;
                        v205 = *(_QWORD *)(a5 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a5 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v207 = *(int8x16_t ***)(a5 + 24);
                          v206 = *(_QWORD *)(a5 + 32);
                          v266 = *(uint64_t (**)(unint64_t))(a5 + 8);
                          v267 = v205;
                          LODWORD(v268) = HIDWORD(a7);
                          v270 = (_DWORD *)v50;
                          BYTE1(v271[1]) = 3;
                          v69 = 1;
                          if (v204 != 2)
                            LOBYTE(v271[1]) = 1;
                          BYTE3(v271[1]) = 1;
                          v274 = v207;
                          v275 = v206;
                        }
                        else
                        {
                          v266 = *(uint64_t (**)(unint64_t))(a5 + 8);
                          v267 = v205;
                          LODWORD(v268) = HIDWORD(a7);
                          v270 = (_DWORD *)v50;
                          v69 = 1;
                          BYTE1(v271[1]) = 3;
                          if (v204 != 2)
                            LOBYTE(v271[1]) = 1;
                        }
                        goto LABEL_61;
                      }
                    }
                    v266 = (uint64_t (*)(unint64_t))a5;
                    v270 = (_DWORD *)v50;
                    goto LABEL_76;
                  }
                }
              }
            }
          }
        }
      }
LABEL_188:
      if ((*(_BYTE *)(v50 + 6) & 0x20) != 0)
      {
        v247 = v33;
        v250 = v150;
        v199 = v32;
        v200 = v30;
        v256 = v35;
        v201 = v149;
        v202 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v50, v149, v32, (uint64_t)&v266);
        v150 = v250;
        v35 = v256;
        v149 = v201;
        v32 = v199;
        v33 = v247;
        v30 = v200;
        if ((v202 & 1) != 0)
          goto LABEL_119;
      }
      goto LABEL_189;
    }
    v252 = 16 * (*(_DWORD *)v50 & 0xFFFFFFFE);
    v258 = v35;
    v211 = v33;
    v244 = v30;
    v212 = v32;
    v213 = v149;
    v214 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v252 + 0x4C) + 0x68))(v50, v262);
    v217 = v214;
    if (*((_DWORD *)v213 + 20))
    {
      v228 = JSC::VM::hasExceptionsAfterHandlingTraps(v213, v215, v32, a5, a6, a7, v216, a9);
      if (((v228 | v217) & 1) != 0)
      {
        v69 = !v228;
        goto LABEL_271;
      }
    }
    else if ((v214 & 1) != 0)
    {
      v69 = 1;
      goto LABEL_271;
    }
    if (BYTE2(v271[1]) == 3)
      break;
    v229 = *(unsigned __int8 *)(v50 + 5);
    if (v229 != 61)
      goto LABEL_311;
    v149 = v213;
    v30 = v244;
    v33 = v211;
    v32 = v212;
    v150 = v252;
    v35 = v258;
    if (BYTE2(v271[1]) == 1)
      goto LABEL_60;
LABEL_189:
    if ((*(_WORD *)(v150 + 12) & 0x800) != 0)
    {
      v162 = *(_DWORD *)v50;
      if (BYTE2(v271[1]) != 3)
      {
        v208 = v149;
        v251 = v32;
        v257 = v35;
        v248 = v33;
        v209 = v30;
        v210 = 16 * (v162 & 0xFFFFFFFE);
        if ((*(_WORD *)(v210 + 12) & 0x800) != 0)
        {
          v163 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v210 + 76) + 0xB0))(v50, v262);
        }
        else
        {
          v163 = *(_QWORD *)(v210 + 48);
          if (!v163)
            v163 = *(_QWORD *)(v50 + 16);
        }
        if (*((_DWORD *)v208 + 20))
        {
          v240 = JSC::VM::hasExceptionsAfterHandlingTraps(v208, (uint64_t)v33, v32, a5, a6, a7, (uint64_t)v30, a9);
          v149 = v208;
          v30 = v209;
          v33 = v248;
          v32 = v251;
          v35 = v257;
          if (v240)
            goto LABEL_60;
        }
        else
        {
          v30 = v209;
          v33 = v248;
          v32 = v251;
          v35 = v257;
          v149 = v208;
        }
        goto LABEL_193;
      }
    }
    else
    {
      v162 = *(_DWORD *)v50;
    }
    v163 = *(_QWORD *)(16 * (v162 & 0xFFFFFFFE) + 0x30);
    if (!v163)
      v163 = *(_QWORD *)(v50 + 16);
LABEL_193:
    if ((v163 & 0xFFFE000000000002) != 0)
      goto LABEL_60;
    v69 = 0;
    v50 = v163;
    if (*(unsigned __int8 *)(v163 + 5) <= 0x16u)
      goto LABEL_61;
  }
  if (!BYTE4(v271[1]))
  {
    v229 = *(unsigned __int8 *)(v50 + 5);
    if (v229 == 61)
      goto LABEL_329;
LABEL_311:
    if (!v212
      || (v229 - 50) < 0xFFFFFFF5
      || (v230 = *(_DWORD *)(v212 + 16), (v230 & 0x20) != 0)
      || (v231 = *(unsigned int *)(v212 + 4), !(_DWORD)v231))
    {
LABEL_329:
      v149 = v213;
      v30 = v244;
      v33 = v211;
      v32 = v212;
      v150 = v252;
      v35 = v258;
      goto LABEL_189;
    }
    v232 = *(unsigned __int8 **)(v212 + 8);
    if ((v230 & 4) == 0)
    {
      v233 = *(unsigned __int16 *)v232;
      if ((_DWORD)v231 == 1)
        goto LABEL_317;
      if (v233 == 45)
      {
        v233 = *((unsigned __int16 *)v232 + 1);
        goto LABEL_321;
      }
      if ((v233 - 48) >= 0xA && ((_DWORD)v231 != 8 || v233 != 73))
      {
LABEL_332:
        if ((_DWORD)v231 != 3 || v233 != 78)
          goto LABEL_329;
      }
LABEL_325:
      v242 = v242 & 0xFFFFFF0000000000 | v231 | ((unint64_t)((v230 >> 2) & 1) << 32);
      JSC::jsToNumber(v232, v242);
      WTF::numberToString(v276, v234);
      v236 = WTF::equal(v212, (unint64_t)v276, v235);
      v32 = v212;
      v149 = v213;
      v30 = v244;
      v33 = v211;
      v150 = v252;
      v35 = v258;
      if (v236)
        goto LABEL_60;
      goto LABEL_189;
    }
    v233 = *v232;
    if ((_DWORD)v231 == 1)
    {
LABEL_317:
      v149 = v213;
      v30 = v244;
      v33 = v211;
      v32 = v212;
      v150 = v252;
      v35 = v258;
      if ((v233 - 48) < 0xA)
        goto LABEL_60;
      goto LABEL_189;
    }
    if (v233 == 45)
    {
      v233 = v232[1];
LABEL_321:
      if ((v233 - 48) < 0xA)
      {
        if ((_DWORD)v231 == 2)
          goto LABEL_365;
        goto LABEL_325;
      }
      if ((_DWORD)v231 != 9)
        goto LABEL_329;
    }
    else
    {
      if ((v233 - 48) < 0xA)
        goto LABEL_325;
      if ((_DWORD)v231 != 8)
        goto LABEL_332;
    }
    if (v233 != 73)
      goto LABEL_329;
    goto LABEL_325;
  }
LABEL_365:
  v69 = 0;
LABEL_271:
  v30 = v244;
  v33 = v211;
LABEL_61:
  if (!*((_DWORD *)v33 + 20))
    goto LABEL_62;
  v176 = v15;
  v177 = v16;
  v178 = v9;
  v179 = v31;
  v180 = v10;
  v181 = v30;
  v182 = JSC::VM::hasExceptionsAfterHandlingTraps(v33, (uint64_t)v33, v32, a5, a6, a7, (uint64_t)v30, a9);
  v30 = v181;
  v10 = v180;
  v31 = v179;
  v9 = v178;
  v16 = v177;
  v15 = v176;
  if (!v182)
  {
LABEL_62:
    if ((v69 & 1) != 0)
    {
      if (*(_BYTE *)(v31 + 5) != 52)
      {
        v75 = (WTF::StringImpl **)v30;
        JSC::CommonSlowPaths::tryCacheGetFromScopeGlobal((uint64_t)v262, v9, v10, (uint64_t)&v263, v31, (uint64_t)&v266, v30, a9);
        if (BYTE1(v271[1]) == 1)
        {
          v70 = (uint64_t)v266;
          goto LABEL_86;
        }
        if (BYTE1(v271[1]) == 2)
        {
          v89 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v266, v262, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          v137 = *v75;
          v138 = (unint64_t)v270;
          v139 = *(_QWORD *)(16 * (*v270 & 0xFFFFFFFE) + 0x28);
          if ((v268 & 0x20) != 0)
            v138 = (unint64_t)v269;
          if (BYTE3(v271[1]) != 1)
            goto LABEL_168;
          if ((v138 & 0xFFFE000000000002) != 0)
            goto LABEL_279;
          v140 = *(unsigned int *)(16 * (*(_DWORD *)v138 & 0xFFFFFFFE) + 0x4C);
          v141 = *(_DWORD *)(16 * (*(_DWORD *)v138 & 0xFFFFFFFE) + 0x4C) != 0;
          v142 = 16 * v140;
          if ((_DWORD)v140)
            v143 = v274 == (int8x16_t **)v142;
          else
            v143 = 1;
          if (!v143)
          {
            do
            {
              v142 = *(_QWORD *)(v142 + 16);
              v141 = v142 != 0;
            }
            while ((int8x16_t **)v142 != v274 && v142 != 0);
          }
          if (!v141)
          {
LABEL_279:
            v276[0] = *((JSC::VM **)v262 + 7);
            v89 = JSC::throwDOMAttributeGetterTypeError(v139, v276, v274, v137);
          }
          else
          {
LABEL_168:
            v89 = v266(v139);
          }
        }
        goto LABEL_85;
      }
      if (BYTE1(v271[1]) == 1)
      {
        v70 = (uint64_t)v266;
      }
      else if (BYTE1(v271[1]) == 2)
      {
        v121 = v30;
        v122 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v266, v262, v32, a5, a6, a7, (uint64_t)v30, a9);
        v30 = v121;
        v70 = v122;
      }
      else
      {
        v127 = (WTF::StringImpl *)*v30;
        v128 = (unint64_t)v270;
        v129 = *(_QWORD *)(16 * (*v270 & 0xFFFFFFFE) + 0x28);
        if ((v268 & 0x20) != 0)
          v128 = (unint64_t)v269;
        v130 = v30;
        if (BYTE3(v271[1]) != 1)
          goto LABEL_152;
        if ((v128 & 0xFFFE000000000002) != 0)
          goto LABEL_278;
        v131 = *(unsigned int *)(16 * (*(_DWORD *)v128 & 0xFFFFFFFE) + 0x4C);
        v132 = *(_DWORD *)(16 * (*(_DWORD *)v128 & 0xFFFFFFFE) + 0x4C) != 0;
        v133 = 16 * v131;
        if ((_DWORD)v131)
          v134 = v274 == (int8x16_t **)v133;
        else
          v134 = 1;
        if (!v134)
        {
          do
          {
            v133 = *(_QWORD *)(v133 + 16);
            v132 = v133 != 0;
          }
          while ((int8x16_t **)v133 != v274 && v133 != 0);
        }
        if (!v132)
        {
LABEL_278:
          v276[0] = *((JSC::VM **)v262 + 7);
          v136 = JSC::throwDOMAttributeGetterTypeError(v129, v276, v274, v127);
        }
        else
        {
LABEL_152:
          v136 = v266(v129);
        }
        v70 = v136;
        v30 = v130;
      }
      if (v70)
      {
        JSC::CommonSlowPaths::tryCacheGetFromScopeGlobal((uint64_t)v262, v9, v10, (uint64_t)&v263, v31, (uint64_t)&v266, v30, a9);
        goto LABEL_86;
      }
      v82 = v262;
      TDZError = JSC::createTDZError(v262, v33);
    }
    else
    {
      if ((*(_WORD *)(((v260 + v259 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v261 + 2) & 0x3FF0) != 0)
      {
        v70 = 10;
        goto LABEL_86;
      }
      v82 = v262;
      TDZError = JSC::createUndefinedVariableError((uint64_t)v262, (JSC::JSGlobalObject *)v30, (const JSC::Identifier *)v32);
    }
    v89 = JSC::VM::throwException(v265, v82, TDZError, v84, v85, v86, v87, v88);
LABEL_85:
    v70 = v89;
    goto LABEL_86;
  }
  v70 = 0;
LABEL_86:
  if (v273)
  {
    v90 = *(_DWORD *)(v272 + 4);
    if (!v90)
    {
      __break(0xC471u);
      JUMPOUT(0x19884BB5CLL);
    }
    *(_DWORD *)(v272 + 4) = v90 - 1;
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing((unint64_t)v262, &v265, "LLIntSlowPaths", v15);
  if (*((_QWORD *)v265 + 2))
    return &xmmword_1ECF4C7C0;
  *(_QWORD *)(v16 + 8 * v263) = v70;
  return (__int128 *)v15;
}

__int128 *llint_slow_path_put_to_scope(uint64_t a1, unsigned __int8 *a2, __n128 a3, uint64_t a4, const JSC::PropertyTable *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v16;
  int v18;
  int v19;
  int v20;
  unsigned __int32 v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned __int32 *v29;
  unsigned __int32 v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  JSC::VM *v48;
  const JSC::Identifier *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int hasProperty;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::JSGlobalObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t UndefinedVariableError;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  unint64_t TDZError;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  JSC::JSGlobalObject *v92;
  void (**v93)(JSC::StringFireDetail *__hidden);
  const char *v94;
  unint64_t v95;
  _DWORD *v96;
  _DWORD *v97;
  _QWORD v98[2];
  uint64_t v99;
  char v100;
  int8x16_t **v101;
  uint64_t v102;
  int v103;
  __n128 v104;
  int v105;
  unsigned int v106;
  JSC::VM *v107;
  JSC::VM *v108;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(JSC::JSGlobalObject **)(v9 + 8);
  v11 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v11 + 40) = a1;
  v107 = (JSC::VM *)v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 12) + *(_QWORD *)v12;
  if (v13 > (unint64_t)a2 || v14 <= (unint64_t)a2)
  {
LABEL_92:
    __break(0xC471u);
    JUMPOUT(0x19884C948);
  }
  v16 = (__int128 *)a2;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v13) & 0x3FFFFFFF;
  v18 = *a2;
  v92 = v10;
  if (v18 == 128)
  {
    v43 = *((__int16 *)a2 + 1);
    if (v43 <= 63)
      v20 = *((__int16 *)a2 + 1);
    else
      v20 = v43 + 1073741760;
    v21 = *((unsigned __int16 *)a2 + 2);
    v103 = v20;
    v104.n128_u32[0] = v21;
    v44 = *((__int16 *)a2 + 3);
    if (v44 <= 63)
      v23 = *((__int16 *)a2 + 3);
    else
      v23 = v44 + 1073741760;
    v45 = *((unsigned __int16 *)a2 + 4);
    v104.n128_u32[1] = v23;
    v104.n128_u32[2] = ((v45 >> 3) | (v45 << 20)) & 0x10000F | (((v45 >> 1) & 3) << 10) & 0xBFFFFFFF | (((v45 >> 7) & 1) << 30);
    v46 = *((unsigned __int16 *)a2 + 6);
    v104.n128_u32[3] = *((unsigned __int16 *)a2 + 5);
    v105 = v46;
    v26 = *((unsigned __int16 *)a2 + 7);
    goto LABEL_15;
  }
  if (v18 != 130)
  {
    v19 = (char)a2[1];
    if (v19 <= 15)
      v20 = (char)a2[1];
    else
      v20 = v19 + 1073741808;
    v21 = a2[2];
    v103 = v20;
    v104.n128_u32[0] = v21;
    v22 = (char)a2[3];
    if (v22 <= 15)
      v23 = (char)a2[3];
    else
      v23 = v22 + 1073741808;
    v24 = a2[4];
    v104.n128_u32[1] = v23;
    v104.n128_u32[2] = ((v24 >> 3) | (v24 << 20) | (v24 << 9)) & 0x100C0F | ((((v24 & 0x80) >> 7) & 1) << 30);
    v25 = a2[6];
    v104.n128_u32[3] = a2[5];
    v105 = v25;
    v26 = a2[7];
LABEL_15:
    v106 = v26;
    goto LABEL_16;
  }
  v20 = *(_DWORD *)(a2 + 2);
  v103 = v20;
  a3 = *(__n128 *)(a2 + 6);
  v104 = a3;
  v26 = *(_DWORD *)(a2 + 26);
  v105 = *(_DWORD *)(a2 + 22);
  v106 = v26;
  v23 = a3.n128_i32[1];
  v21 = a3.n128_u32[0];
LABEL_16:
  v27 = *(_QWORD *)(v9 + 136);
  v28 = *(unsigned __int16 *)(v27 + 54);
  if (!*(_WORD *)(v27 + 54))
    v28 = *(_DWORD *)(v27 + 204);
  v29 = *(unsigned __int32 **)(*(_QWORD *)(v9 + 56) + 104);
  if (v29)
  {
    v30 = *v29;
    if (*v29 > v21)
    {
      v31 = (unint64_t *)&v29[2 * v21 + 2];
      goto LABEL_21;
    }
  }
  else
  {
    v30 = 0;
  }
  v40 = v11;
  v91 = v9;
  v41 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120)) + 48);
  if (*v41 <= v21 - v30)
  {
    __break(0xC471u);
    JUMPOUT(0x19884C9D4);
  }
  v31 = (unint64_t *)&v41[2 * (v21 - v30) + 2];
  v11 = v40;
  v9 = v91;
LABEL_21:
  v32 = *(_QWORD *)(a1 + 8 * v20);
  if (v23 >= 0x40000000)
  {
    v42 = *(_QWORD *)(a1 + 16);
    if ((v23 - 0x40000000) >= *(_DWORD *)(v42 + 172))
      goto LABEL_92;
    v33 = (uint64_t *)(*(_QWORD *)(v42 + 160) + 8 * (v23 - 0x40000000));
  }
  else
  {
    v33 = (uint64_t *)(a1 + 8 * v23);
  }
  v34 = (v27 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = (int *)(v34 + 24 * v26);
  v36 = *v33;
  if ((*v35 & 0x3FF) != 4)
  {
    v47 = v9;
    v48 = (JSC::VM *)v11;
    hasProperty = JSC::JSObject::hasProperty(v32, (uint64_t)v92, *v31, a5, a6, a7, a8, a9);
    if (HIBYTE(word_1ECF4C620))
      JSC::doExceptionFuzzing((unint64_t)v92, &v107, "LLIntSlowPaths", v16);
    if (!*((_QWORD *)v48 + 2))
    {
      if (hasProperty)
      {
        v56 = *v35;
        if (*(_BYTE *)(v32 + 5) != 52 || (v56 & 0xFF800) == 0)
          goto LABEL_53;
        v95 = 0xFFFFFFFF00000000;
        LOBYTE(v99) = 0;
        v100 = 0;
        v101 = 0;
        v102 = 0;
        v97 = 0;
        memset(v98, 0, 13);
        v96 = (_DWORD *)v32;
        JSC::symbolTableGet<JSC::JSGlobalLexicalEnvironment>(v32, *v31, (uint64_t)&v93, v50, v51, v52, v53, v54);
        if (BYTE1(v98[1]) == 1)
        {
          v67 = (uint64_t)v93;
        }
        else
        {
          if (BYTE1(v98[1]) == 2)
          {
            v75 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v93, v92, v61, v62, v63, v64, v65, v66);
          }
          else
          {
            v76 = (WTF::StringImpl *)*v31;
            v77 = (unint64_t)v97;
            v78 = *(_QWORD *)(16 * (*v97 & 0xFFFFFFFE) + 0x28);
            if ((v95 & 0x20) != 0)
              v77 = (unint64_t)v96;
            if (BYTE3(v98[1]) != 1)
              goto LABEL_85;
            if ((v77 & 0xFFFE000000000002) != 0)
              goto LABEL_91;
            v79 = *(unsigned int *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x4C);
            v80 = *(_DWORD *)(16 * (*(_DWORD *)v77 & 0xFFFFFFFE) + 0x4C) != 0;
            if ((_DWORD)v79)
            {
              v81 = 16 * v79;
              if (v101 != (int8x16_t **)v81)
              {
                do
                {
                  v81 = *(_QWORD *)(v81 + 16);
                  v80 = v81 != 0;
                }
                while ((int8x16_t **)v81 != v101 && v81 != 0);
              }
            }
            if (!v80)
            {
LABEL_91:
              v108 = (JSC::VM *)*((_QWORD *)v92 + 7);
              v75 = JSC::throwDOMAttributeGetterTypeError(v78, &v108, v101, v76);
            }
            else
            {
LABEL_85:
              v75 = ((uint64_t (*)(unint64_t))v93)(v78);
            }
          }
          v67 = v75;
        }
        if (!v67)
        {
          TDZError = JSC::createTDZError(v92, v60);
          JSC::VM::throwException(v48, v92, TDZError, v86, v87, v88, v89, v90);
          v16 = &xmmword_1ECF4C7C0;
        }
        if (v100)
        {
          v68 = *(_DWORD *)(v99 + 4);
          if (!v68)
          {
            __break(0xC471u);
            JUMPOUT(0x19884CA30);
          }
          *(_DWORD *)(v99 + 4) = v68 - 1;
        }
        if (v67)
        {
          v56 = *v35;
LABEL_53:
          v93 = 0;
          v94 = (const char *)v32;
          LODWORD(v95) = -1;
          BYTE4(v95) = (2 * ((v56 & 0xFF800) == 0)) | ((v56 & 0x40000000) != 0);
          *(_WORD *)((char *)&v95 + 5) = 0;
          HIBYTE(v95) = 1;
          v96 = 0;
          (*(void (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t, void (***)(JSC::StringFireDetail *__hidden)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C) + 0x48))(v32, v92, *v31, v36, &v93);
          JSC::CommonSlowPaths::tryCachePutToScopeGlobal((uint64_t)v92, v47, (uint64_t)&v103, v32, (uint64_t)&v93, (uint64_t *)v31, v57, v58);
          if (HIBYTE(word_1ECF4C620))
          {
            JSC::doExceptionFuzzing((unint64_t)v92, &v107, "LLIntSlowPaths", v16);
            v48 = v107;
          }
          v38 = *((_QWORD *)v48 + 2);
          goto LABEL_32;
        }
      }
      else
      {
        v56 = *v35;
        if ((*v35 & 0x3FF00000) != 0)
          goto LABEL_53;
        UndefinedVariableError = JSC::createUndefinedVariableError((uint64_t)v92, (JSC::JSGlobalObject *)v31, v49);
        JSC::VM::throwException(v48, v92, UndefinedVariableError, v70, v71, v72, v73, v74);
      }
    }
    return &xmmword_1ECF4C7C0;
  }
  *(_QWORD *)(v32 + 8 * *(unsigned int *)(v34 + 24 * v26 + 16) + 32) = v36;
  if (v36 && (v36 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v32 + 7))
  {
    v84 = v11;
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v32);
    v11 = v84;
  }
  v37 = *(_QWORD *)(v34 + 24 * v26 + 8);
  if (v37)
  {
    v93 = &off_1E3583C90;
    v94 = "Executed op_put_scope<ResolvedClosureVar>";
    if (*(_BYTE *)(v37 + 4))
    {
      if (*(_BYTE *)(v37 + 4) == 1)
      {
        v59 = v11;
        JSC::WatchpointSet::fireAllSlow(v37, (JSC::VM *)v11, &v93, (uint64_t)a5, a6, a7, a8, a9, a3.n128_f64[0]);
        v11 = v59;
      }
    }
    else
    {
      __dmb(0xAu);
      *(_BYTE *)(v37 + 4) = 1;
      __dmb(0xAu);
    }
  }
  if (HIBYTE(word_1ECF4C620))
  {
    v83 = v11;
    JSC::doExceptionFuzzing((unint64_t)v92, &v107, "LLIntSlowPaths", v16);
    v11 = v83;
  }
  v38 = *(_QWORD *)(v11 + 16);
LABEL_32:
  if (v38)
    return &xmmword_1ECF4C7C0;
  else
    return v16;
}

unint64_t llint_slow_path_retrieve_and_clear_exception_if_catchable(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 72);
  v2[5] = a1;
  v3 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v4 = *v3;
  v5 = *((unsigned int *)v3 + 3) + *v3;
  v6 = v4 <= a2 && v5 > a2;
  if (!v6 || (*(_DWORD *)(a1 + 36) = (a2 - v4) & 0x3FFFFFFF, (v7 = v2[2]) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x19884CB14);
  }
  if (v2[3] != v7)
  {
    v2[2] = 0;
    v8 = (unsigned int *)(v2 + 10);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 & 0xFFFFFFEF, v8));
  }
  return a2;
}

__int128 *llint_slow_path_log_shadow_chicken_prologue(JSC::CallFrame *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  JSC::ShadowChicken *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  JSC::VM *v27;
  JSC::VM *v29;

  v8 = *((_QWORD *)a1 + 2);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v29 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884CC20);
  }
  *((_DWORD *)a1 + 9) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v16 = *a2;
  if (v16 == 128)
  {
    v17 = *((__int16 *)a2 + 1);
    v18 = v17 + 1073741760;
    v19 = v17 <= 63;
  }
  else
  {
    if (v16 == 130)
    {
      v17 = *(_DWORD *)(a2 + 2);
      goto LABEL_13;
    }
    v17 = (char)a2[1];
    v18 = v17 + 1073741808;
    v19 = v17 <= 15;
  }
  if (!v19)
    v17 = v18;
LABEL_13:
  v20 = (JSC::ShadowChicken *)*((_QWORD *)v10 + 11673);
  if ((v20 & 1) != 0 || !v20)
  {
    __break(0xC471u);
    JUMPOUT(0x19884CC00);
  }
  v26 = v9;
  v27 = v10;
  v21 = *((_QWORD *)a1 + v17);
  v22 = *((_QWORD *)a1 + 3);
  v23 = *(_QWORD *)a1;
  v24 = *((_QWORD *)v20 + 2);
  *((_QWORD *)v20 + 2) = v24 + 56;
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = v22;
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = v23;
  *(_QWORD *)(v24 + 32) = v21;
  *(_QWORD *)(v24 + 40) = 0;
  *(_DWORD *)(v24 + 48) = -1;
  JSC::ShadowChicken::update(v20, v10, a1, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v26, &v29, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v27 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

__int128 *llint_slow_path_log_shadow_chicken_tail(JSC::CallFrame *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  JSC::ShadowChicken *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v31;
  JSC::VM *v32;
  JSC::VM *v34;

  v8 = (_QWORD *)*((_QWORD *)a1 + 2);
  v9 = v8[1];
  v10 = (JSC::VM *)v8[9];
  *((_QWORD *)v10 + 5) = a1;
  v34 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884CDE8);
  }
  *((_DWORD *)a1 + 9) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v16 = *a2;
  if (v16 == 128)
  {
    v17 = *((__int16 *)a2 + 1);
    if (v17 > 63)
      v17 += 1073741760;
    v19 = *((__int16 *)a2 + 2);
    v18 = v19 + 1073741760;
    v20 = v19 <= 63;
  }
  else
  {
    if (v16 == 130)
    {
      v17 = *(_DWORD *)(a2 + 2);
      v18 = *(_DWORD *)(a2 + 6);
      goto LABEL_18;
    }
    v17 = (char)a2[1];
    if (v17 > 15)
      v17 += 1073741808;
    v19 = (char)a2[2];
    v18 = v19 + 1073741808;
    v20 = v19 <= 15;
  }
  if (v20)
    v18 = v19;
LABEL_18:
  v21 = *(_QWORD *)(v8[7] + 80);
  v22 = *(_QWORD *)v21;
  v23 = *(unsigned int *)(v21 + 12) + *(_QWORD *)v21;
  if (v22 > (unint64_t)a2 || v23 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884CE08);
  }
  v25 = (JSC::ShadowChicken *)*((_QWORD *)v10 + 11673);
  if ((v25 & 1) != 0 || !v25)
  {
    __break(0xC471u);
    JUMPOUT(0x19884CDC8);
  }
  v31 = v9;
  v32 = v10;
  v26 = *((_QWORD *)a1 + v17);
  v27 = *((_QWORD *)a1 + v18);
  v28 = ((_DWORD)a2 - v22) & 0x3FFFFFFF;
  v29 = *((_QWORD *)v25 + 2);
  *((_QWORD *)v25 + 2) = v29 + 56;
  *(_QWORD *)v29 = v26;
  *(_QWORD *)(v29 + 8) = 31249;
  *(_QWORD *)(v29 + 16) = a1;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = v27;
  *(_QWORD *)(v29 + 40) = v8;
  *(_DWORD *)(v29 + 48) = v28;
  JSC::ShadowChicken::update(v25, v10, a1, a4, a5, a6, a7, a8);
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v31, &v34, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v32 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

__int128 *llint_slow_path_profile_catch(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  unint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  int *v32;
  int v34;
  JSC::VM *v35;
  unint64_t v36;
  unsigned int v37;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = v2[1];
  v4 = (JSC::VM *)v2[9];
  *((_QWORD *)v4 + 5) = a1;
  v35 = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v6 = *(_QWORD *)v5;
  v7 = *(unsigned int *)(v5 + 12) + *(_QWORD *)v5;
  if (v6 > (unint64_t)a2 || v7 <= (unint64_t)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884D098);
  }
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v6) & 0x3FFFFFFF;
  v11 = JSC::CallFrame::bytecodeIndex((JSC::CallFrame *)a1);
  v18 = (unsigned __int8 *)(**(_QWORD **)(v2[7] + 80) + (v11 >> 2));
  v19 = *v18;
  if (v19 == 128)
  {
    v20 = *((__int16 *)v18 + 1);
    if (v20 > 63)
      v20 += 1073741760;
    v34 = *((__int16 *)v18 + 2);
    LODWORD(v22) = v34 + 1073741760;
    if (v34 <= 63)
      v22 = v34;
    else
      v22 = v22;
    v23 = *((unsigned __int16 *)v18 + 3);
  }
  else if (v19 == 130)
  {
    v20 = *(_DWORD *)(v18 + 2);
    v22 = *(unsigned int *)(v18 + 6);
    v23 = *(_DWORD *)(v18 + 10);
  }
  else
  {
    v20 = (char)v18[1];
    if (v20 > 15)
      v20 += 1073741808;
    v21 = (char)v18[2];
    LODWORD(v22) = v21 + 1073741808;
    if (v21 <= 15)
      v22 = v21;
    else
      v22 = v22;
    v23 = v18[3];
  }
  v36 = v20 | (unint64_t)(v22 << 32);
  v37 = v23;
  v24 = v2[17];
  v25 = *(unsigned __int16 *)(v24 + 30);
  if (!*(_WORD *)(v24 + 30))
    v25 = *(_DWORD *)(v24 + 156);
  if (!*(_QWORD *)(((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v23))
    JSC::CodeBlock::ensureCatchLivenessIsComputedForBytecodeIndexSlow((uint64_t)v2, (uint64_t)&v36, v11, v12, v13, v14, v15, v16, v17);
  v26 = *a2;
  if (v26 == 128)
  {
    v27 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v26 == 130)
  {
    v27 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    v27 = a2[3];
  }
  v28 = v2[17];
  v29 = *(unsigned __int16 *)(v28 + 30);
  if (!*(_WORD *)(v28 + 30))
    v29 = *(_DWORD *)(v28 + 156);
  v30 = *(unsigned int **)(((v28 + v29 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v27);
  v31 = *v30;
  if ((_DWORD)v31)
  {
    v32 = (int *)(v30 + 6);
    do
    {
      *((_QWORD *)v32 - 2) = *(_QWORD *)(a1 + 8 * *v32);
      v32 += 6;
      --v31;
    }
    while (v31);
  }
  if (HIBYTE(word_1ECF4C620))
    JSC::doExceptionFuzzing(v3, &v35, "LLIntSlowPaths", a2);
  if (*((_QWORD *)v4 + 2))
    return &xmmword_1ECF4C7C0;
  else
    return (__int128 *)a2;
}

unint64_t llint_slow_path_out_of_line_jump_target(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  v3 = *(unint64_t **)(v2 + 80);
  v4 = *v3;
  v5 = *((unsigned int *)v3 + 3) + *v3;
  if (v4 > a2 || v5 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19884D198);
  }
  v7 = a2 - v4;
  v8 = *(_QWORD *)(v2 + 144);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = 9 * ((~(v7 << 15) + v7) ^ ((~(v7 << 15) + v7) >> 10));
    v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
    v12 = v9 & (v11 ^ HIWORD(v11));
    v13 = *(_DWORD *)(v8 + 8 * v12);
    if (v13 == v7)
    {
LABEL_8:
      LODWORD(v8) = *(_DWORD *)(v8 + 8 * v12 + 4);
    }
    else
    {
      v15 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v15) & v9;
        v13 = *(_DWORD *)(v8 + 8 * v12);
        ++v15;
        if (v13 == v7)
          goto LABEL_8;
      }
      LODWORD(v8) = 0;
    }
  }
  return v4 + (v8 + v7);
}

uint64_t llint_slow_path_arityCheck(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::JSGlobalObject *v26;
  unint64_t StackOverflowError;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(JSC::JSGlobalObject **)(v8 + 8);
  v10 = *(JSC::VM **)(v8 + 72);
  *((_QWORD *)v10 + 5) = a1;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 56) + 80);
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned int *)(v11 + 12) + *(_QWORD *)v11;
  if (v12 > (unint64_t)a2 || v13 <= (unint64_t)a2)
    goto LABEL_24;
  *(_DWORD *)(a1 + 36) = ((_DWORD)a2 - v12) & 0x3FFFFFFF;
  v16 = *(_DWORD *)(v8 + 28);
  if (v16 > *(_DWORD *)(a1 + 32))
    v17 = (((v16 & 0xFFFFFFFE) - (*(_DWORD *)(a1 + 32) & 0xFFFFFFFE)) & 0xFFFFFFFE | *(_DWORD *)(a1 + 32) & 1) ^ 1;
  else
    v17 = 0;
  if (*((_QWORD *)v10 + 1) > (unint64_t)(a1 - 8 * (int)((v17 + 1) & 0xFFFFFFFE)))
    v17 = -1;
  if ((v17 & 0x80000000) == 0)
    return 0;
  v19 = *((_QWORD *)v10 + 6);
  v20 = (_QWORD *)a1;
  while (1)
  {
    v20 = (_QWORD *)*v20;
    if (v20 == (_QWORD *)v19)
      break;
    if (!v20)
      goto LABEL_19;
LABEL_16:
    v21 = v20[3];
    if ((v21 & 0xFFFE000000000007) != 3)
    {
      v23 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 40;
      goto LABEL_20;
    }
  }
  v22 = vmEntryRecord(v19);
  v19 = *(_QWORD *)(v22 + 16);
  v20 = *(_QWORD **)(v22 + 8);
  if (v20)
    goto LABEL_16;
LABEL_19:
  v23 = *((_QWORD *)v10 + 11321) + 8;
LABEL_20:
  v24 = *(_QWORD *)(*(_QWORD *)v23 + 96);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 32) = 0;
  *((_QWORD *)v10 + 5) = a1;
  if (!*((_QWORD *)v10 + 11636))
  {
    __break(0xC471u);
    JUMPOUT(0x19884D368);
  }
  v25 = *((_QWORD *)v10 + 11637);
  *((_QWORD *)v10 + 11637) = dword_1ECF4C250;
  JSC::VM::updateStackLimits(v10, a2, a3, a4, a5, a6, a7, a8);
  StackOverflowError = JSC::createStackOverflowError((unint64_t)v9, v26);
  JSC::VM::throwException(v10, v9, StackOverflowError, v28, v29, v30, v31, v32);
  if (!*((_QWORD *)v10 + 11636))
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x19884D278);
  }
  *((_QWORD *)v10 + 11637) = v25;
  JSC::VM::updateStackLimits(v10, v33, v34, v35, v36, v37, v38, v39);
  return 1;
}

__int128 *llint_slow_path_checkpoint_osr_exit_from_inlined_call(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v9;
  JSC::VM **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *InstructionDuringExit;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  int8x8_t v35;
  uint32x4_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  JSC::VM *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int16 *v75;
  uint64_t v76;
  unsigned int v77;
  BOOL v78;
  unsigned int *v79;
  uint64_t v80;
  char OwnStaticPropertySlot;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  uint64_t v90;
  unsigned int v91;
  char v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  double v105;
  const unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t Index;
  int v120;
  char v121;
  uint64_t v122;
  int v123;
  _BYTE *v124;
  uint64_t v125;
  unsigned __int16 *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  unint64_t v147;
  JSC::VM **v148;
  JSC::VM *v149;
  JSC::VM *v150;
  JSC::VM *v151;
  WTF *v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  _DWORD v156[10];
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[2];
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  int8x16_t v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a1 + 16);
  v10 = (JSC::VM **)v9[1];
  v11 = v9[9];
  v12 = (_QWORD *)(v11 + 93216);
  *(_QWORD *)(v11 + 40) = a1;
  v13 = *(unsigned int *)(v11 + 93228);
  if (!(_DWORD)v13)
  {
    __break(0xC471u);
    JUMPOUT(0x19884DD3CLL);
  }
  v16 = v13 - 1;
  v17 = *(_QWORD *)(*v12 + 8 * (v13 - 1));
  *(_QWORD *)(*v12 + 8 * (v13 - 1)) = 0;
  v18 = *(_QWORD *)(*v12 + 8 * (v13 - 1));
  *(_QWORD *)(*v12 + 8 * (v13 - 1)) = 0;
  if (v18)
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v11 + 93228) = v16;
  if (*(_QWORD *)v17 != a1)
  {
    __break(0xC471u);
    JUMPOUT(0x19884D998);
  }
  v19 = *(unsigned int *)(v17 + 8);
  v20 = *(_QWORD **)(v9[7] + 80);
  v21 = (unsigned __int8 *)(*v20 + (v19 >> 2));
  v22 = *v21;
  if ((v22 | 2) == 0x82)
    v22 = v21[1];
  v23 = v19 >> 2;
  switch(v22)
  {
    case 1:
      JSC::OpCallVarargs::decode((JSC::OpCallVarargs *)v21, &v167, a9);
      goto LABEL_9;
    case 2:
      JSC::OpIteratorNext::decode(v21, (uint64_t)&v167, a9);
      v34 = v19 & 3;
      *(_QWORD *)(a1 + 8 * (int)JSC::destinationFor<JSC::OpIteratorNext>((unsigned int *)&v167, v34)) = a2;
      if (v34 != 1)
      {
        if (!v34)
        {
          __break(0xC471u);
          JUMPOUT(0x19884D524);
        }
        goto LABEL_11;
      }
      JSC::OpIteratorNext::decode((_DWORD *)(*v20 + v23), (uint64_t)v156, v35);
      v37 = v156[1];
      v167.i64[0] = *(_QWORD *)(a1 + 8 * v156[0]);
      if (JSC::JSValue::toBoolean(v167.i64, (uint64_t)v10))
      {
        *(_QWORD *)(a1 + 8 * v37) = 10;
        goto LABEL_11;
      }
      v148 = v10;
      v146 = v37;
      v45 = *(_QWORD *)(v17 + 16);
      v155 = v45;
      v46 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2608);
      v44.i64[0] = 0xFFFFFFFF00000000;
      v159 = 0xFFFFFFFF00000000;
      LOBYTE(v163) = 0;
      v164 = 0;
      v165 = 0;
      v166 = 0;
      v161 = 0;
      memset(v162, 0, 13);
      v160 = v45;
      v152 = (WTF *)v46;
      if ((v45 & 0xFFFE000000000002) != 0)
        goto LABEL_221;
      v147 = (unint64_t)v10[7];
      v47 = *(unsigned __int8 *)(v45 + 5);
      if (v47 > 0x16)
        goto LABEL_23;
      if (v47 != 2)
        goto LABEL_221;
      if (*(_QWORD *)(*(_QWORD *)(v147 + 41952) + 1768) == v46)
      {
        v116 = *(_QWORD *)(v45 + 8);
        if ((v116 & 1) != 0)
          v117 = (unsigned int *)(v45 + 16);
        else
          v117 = (unsigned int *)(v116 + 4);
        v118 = *v117;
        if ((v118 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v118) + 0x2000000000000;
        else
          Index = v118 | 0xFFFE000000000000;
        v120 = 14;
        goto LABEL_218;
      }
      if (!v46)
        goto LABEL_228;
      v123 = *(_DWORD *)(v46 + 16);
      if ((v123 & 0x20) != 0)
        goto LABEL_228;
      v124 = *(_BYTE **)(v46 + 8);
      v125 = *(unsigned int *)(v46 + 4);
      if ((v123 & 4) != 0)
      {
        if (!(_DWORD)v125)
          goto LABEL_228;
        v46 = *v124 - 48;
        if (v46 > 9 || v125 >= 2 && *v124 == 48)
          goto LABEL_228;
        v141 = v124 + 1;
        v142 = v125 - 1;
        while (v142)
        {
          if (v46 > 0x19999999)
            goto LABEL_228;
          v143 = *v141 - 48;
          if (v143 > 9)
            goto LABEL_228;
          v121 = 0;
          v78 = __CFADD__(v143, 10 * v46);
          v46 = v143 + 10 * (_DWORD)v46;
          ++v141;
          --v142;
          if (v78)
            goto LABEL_219;
        }
      }
      else
      {
        if (!(_DWORD)v125)
          goto LABEL_228;
        v46 = *(unsigned __int16 *)v124 - 48;
        if (v46 > 9)
          goto LABEL_228;
        if (*(_WORD *)v124 == 48 && v125 > 1)
          goto LABEL_228;
        v127 = (unsigned __int16 *)(v124 + 2);
        v128 = v125 - 1;
        while (v128)
        {
          if (v46 > 0x19999999)
            goto LABEL_228;
          v129 = *v127 - 48;
          if (v129 > 9)
            goto LABEL_228;
          v121 = 0;
          v78 = __CFADD__(v129, 10 * v46);
          v46 = v129 + 10 * (_DWORD)v46;
          ++v127;
          --v128;
          if (v78)
            goto LABEL_219;
        }
      }
      if ((_DWORD)v46 != -1)
      {
        v144 = *(_QWORD *)(v45 + 8);
        v145 = (_DWORD *)((v144 & 1) != 0 ? v45 + 16 : v144 + 4);
        if (*v145 > v46)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)v45, (JSC::JSGlobalObject *)v10, v46, v39, v40, v41, v42, v43, v44);
          if (!*(_DWORD *)(v147 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v147, v38, v46, v39, v40, v41, v42, v43))
          {
            v120 = 10;
LABEL_218:
            v157 = Index;
            LODWORD(v159) = v120;
            v161 = 0;
            v121 = 1;
            BYTE1(v162[1]) = 1;
            goto LABEL_219;
          }
        }
      }
LABEL_228:
      v121 = 0;
LABEL_219:
      if (*(_DWORD *)(v147 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v147, v38, v46, v39, v40, v41, v42, v43))
      {
        goto LABEL_71;
      }
      v46 = (unint64_t)v152;
      if ((v121 & 1) != 0)
        goto LABEL_60;
LABEL_221:
      v122 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v155, (unint64_t)v10);
      if (!v122)
        goto LABEL_71;
      v45 = v122;
      v147 = (unint64_t)v10[7];
      v46 = (unint64_t)v152;
LABEL_23:
      v48 = (_BYTE *)(v45 + 6);
      v49 = v46 >> 4;
      v50 = v45;
      v149 = (JSC::VM *)(v46 >> 4);
      if ((*(_BYTE *)(v45 + 6) & 8) == 0)
      {
        v51 = v45;
        while (1)
        {
          v52 = *(_DWORD *)v51 & 0xFFFFFFFE;
          v53 = 16 * v52;
          if ((_DWORD)v49)
          {
            if ((v49 & ~*(_DWORD *)(16 * v52 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v53, (JSC::VM *)v147, v46, (const JSC::PropertyTable *)v39, v40, v41, v42, v43);
              LODWORD(v49) = (_DWORD)v149;
              v46 = (unint64_t)v152;
              if (v54)
              {
                v167.i64[0] = (uint64_t)v152;
                v55 = JSC::PropertyTable::get(v54, v167.i64);
                LODWORD(v49) = (_DWORD)v149;
                v46 = (unint64_t)v152;
                v41 = v55;
                if ((_DWORD)v55 != -1)
                  break;
              }
            }
          }
          if ((*v48 & 0x20) != 0)
          {
            OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v51, (JSC::VM *)v147, (unint64_t)v152, (uint64_t)&v157);
            LODWORD(v49) = (_DWORD)v149;
            v46 = (unint64_t)v152;
            if ((OwnStaticPropertySlot & 1) != 0)
              goto LABEL_60;
          }
          v50 = *(_QWORD *)(v53 + 48);
          if (!v50)
            v50 = *(_QWORD *)(v51 + 16);
          if ((v50 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v50 + 5) < 0x17u)
          {
            if (!v46)
              goto LABEL_71;
            v71 = *(_DWORD *)(v46 + 16);
            if ((v71 & 0x20) != 0)
              goto LABEL_71;
            v72 = *(_WORD **)(v46 + 8);
            v73 = *(unsigned int *)(v46 + 4);
            if ((v71 & 4) == 0)
            {
              if ((_DWORD)v73)
              {
                v74 = (unsigned __int16)*v72 - 48;
                if (v74 <= 9 && (*v72 != 48 || v73 <= 1))
                {
                  v75 = v72 + 1;
                  v76 = v73 - 1;
                  v66 = 10;
                  while (v76)
                  {
                    if (v74 <= 0x19999999)
                    {
                      v77 = *v75 - 48;
                      if (v77 <= 9)
                      {
                        v78 = __CFADD__(v77, 10 * v74);
                        v74 = v77 + 10 * (_DWORD)v74;
                        ++v75;
                        --v76;
                        if (!v78)
                          continue;
                      }
                    }
                    goto LABEL_62;
                  }
                  goto LABEL_176;
                }
              }
              goto LABEL_71;
            }
            if (!(_DWORD)v73)
              goto LABEL_71;
            v74 = *(unsigned __int8 *)v72 - 48;
            if (v74 > 9 || v73 >= 2 && *(_BYTE *)v72 == 48)
              goto LABEL_71;
            v107 = (unsigned __int8 *)v72 + 1;
            v108 = v73 - 1;
            while (v108)
            {
              if (v74 > 0x19999999)
                goto LABEL_71;
              v109 = *v107 - 48;
              if (v109 > 9)
                goto LABEL_71;
              v78 = __CFADD__(v109, 10 * v74);
              v74 = v109 + 10 * (_DWORD)v74;
              ++v107;
              --v108;
              v66 = 10;
              if (v78)
                goto LABEL_62;
            }
LABEL_176:
            if ((_DWORD)v74 == -1)
            {
LABEL_71:
              v66 = 10;
              goto LABEL_62;
            }
            v150 = v148[7];
            while (2)
            {
              v110 = 16 * (*(_DWORD *)v45 & 0xFFFFFFFE);
              v113 = (*(uint64_t (**)(uint64_t, JSC::VM **, uint64_t, uint64_t *))(16
                                                                                        * *(unsigned int *)(v110 + 0x4C)
                                                                                        + 0x70))(v45, v148, v74, &v157);
              if (*((_DWORD *)v150 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v150, v111, v112, v39, v40, v41, v42, v43))
              {
                goto LABEL_71;
              }
              v46 = (unint64_t)v152;
              if ((v113 & 1) != 0)
                goto LABEL_60;
              if (BYTE2(v162[1]) == 3)
              {
                if (BYTE4(v162[1]))
                  goto LABEL_71;
                v114 = *(unsigned __int8 *)(v45 + 5);
                if (v114 != 61)
                  goto LABEL_182;
              }
              else
              {
                v114 = *(unsigned __int8 *)(v45 + 5);
                if (v114 == 61)
                {
                  if (BYTE2(v162[1]) == 1)
                    goto LABEL_71;
                }
                else
                {
LABEL_182:
                  if ((v114 - 39) <= 0xA
                    && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v45, v111, (uint64_t)v152, v39, v40, v41, v42, v43) <= v74)
                  {
                    goto LABEL_71;
                  }
                }
              }
              if ((*(_WORD *)(v110 + 12) & 0x800) == 0 || BYTE2(v162[1]) == 3)
              {
                v115 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x30);
                if (!v115)
                  v115 = *(_QWORD *)(v45 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v115 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0xB0))(v45, v148, v46);
                }
                else
                {
                  v115 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x30);
                  if (!v115)
                    v115 = *(_QWORD *)(v45 + 16);
                }
                if (*((_DWORD *)v150 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v150, v111, v46, v39, v40, v41, v42, v43))
                {
                  goto LABEL_71;
                }
              }
              if ((v115 & 0xFFFE000000000002) != 0)
                goto LABEL_71;
              v45 = v115;
              v66 = 10;
              if (*(unsigned __int8 *)(v115 + 5) <= 0x16u)
                goto LABEL_62;
              continue;
            }
          }
          v48 = (_BYTE *)(v50 + 6);
          v51 = v50;
          if ((*(_BYTE *)(v50 + 6) & 8) != 0)
            goto LABEL_35;
        }
        v40 = HIDWORD(v55);
        if ((int)v55 <= 63)
        {
          v67 = v51 + 16;
          v68 = v55 << 32;
        }
        else
        {
          v67 = *(_QWORD *)(v51 + 8) - 8;
          v68 = 0x3F00000000 - (v55 << 32);
        }
        v39 = *(_QWORD *)(v67 + (v68 >> 29));
        if ((v39 & 0xFFFE000000000002) != 0)
        {
LABEL_59:
          v157 = v39;
          v161 = v51;
          v159 = __PAIR64__(v55, HIDWORD(v55));
          LOWORD(v162[1]) = 257;
          goto LABEL_60;
        }
        v69 = *(unsigned __int8 *)(v39 + 5);
        if (v69 != 5)
        {
          if (v69 != 6)
            goto LABEL_59;
          v82 = *(_DWORD *)(v53 + 16) & 3;
          v83 = *(_QWORD *)(v39 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v39 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v85 = *(_QWORD *)(v39 + 24);
            v84 = *(_QWORD *)(v39 + 32);
            v157 = *(_QWORD *)(v39 + 8);
            v158 = v83;
            LODWORD(v159) = HIDWORD(v55);
            v161 = v51;
            BYTE1(v162[1]) = 3;
            if (v82 != 2)
              LOBYTE(v162[1]) = 1;
            BYTE3(v162[1]) = 1;
            v165 = v85;
            v166 = v84;
            goto LABEL_60;
          }
          v157 = *(_QWORD *)(v39 + 8);
          v158 = v83;
          LODWORD(v159) = HIDWORD(v55);
          v161 = v51;
          BYTE1(v162[1]) = 3;
          if (v82 == 2)
            goto LABEL_60;
LABEL_113:
          LOBYTE(v162[1]) = 1;
          goto LABEL_60;
        }
        v79 = (unsigned int *)v51;
        v80 = v147;
LABEL_84:
        JSC::JSObject::fillGetterPropertySlot(v79, v80, (uint64_t)&v157, v39, v40, v41);
        goto LABEL_85;
      }
LABEL_35:
      if (!v46)
        goto LABEL_40;
      v56 = *(_DWORD *)(v46 + 16);
      if ((v56 & 0x20) != 0)
        goto LABEL_40;
      v57 = *(_BYTE **)(v46 + 8);
      v58 = *(unsigned int *)(v46 + 4);
      if ((v56 & 4) != 0)
      {
        if (!(_DWORD)v58)
          goto LABEL_40;
        v59 = *v57 - 48;
        if (v59 > 9 || v58 >= 2 && *v57 == 48)
          goto LABEL_40;
        v130 = v58 - 1;
        v131 = v57 + 1;
        while (v130)
        {
          if (v59 <= 0x19999999)
          {
            v132 = *v131 - 48;
            if (v132 <= 9)
            {
              v78 = __CFADD__(v132, 10 * v59);
              v59 = v132 + 10 * (_DWORD)v59;
              --v130;
              ++v131;
              if (!v78)
                continue;
            }
          }
          goto LABEL_40;
        }
      }
      else
      {
        if (!(_DWORD)v58)
          goto LABEL_40;
        v59 = *(unsigned __int16 *)v57 - 48;
        if (v59 > 9 || *(_WORD *)v57 == 48 && v58 > 1)
          goto LABEL_40;
        v89 = (unsigned __int16 *)(v57 + 2);
        v90 = v58 - 1;
        while (v90)
        {
          if (v59 <= 0x19999999)
          {
            v91 = *v89 - 48;
            if (v91 <= 9)
            {
              v78 = __CFADD__(v91, 10 * v59);
              v59 = v91 + 10 * (_DWORD)v59;
              ++v89;
              --v90;
              if (!v78)
                continue;
            }
          }
          goto LABEL_40;
        }
      }
      if ((_DWORD)v59 != -1)
      {
        v151 = v148[7];
        while (1)
        {
          v133 = 16 * (*(_DWORD *)v45 & 0xFFFFFFFE);
          v134 = (*(uint64_t (**)(uint64_t, JSC::VM **, uint64_t, uint64_t *))(16
                                                                                    * *(unsigned int *)(v133 + 0x4C)
                                                                                    + 0x70))(v45, v148, v59, &v157);
          v137 = v134;
          if (*((_DWORD *)v151 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v151, v135, v136, v39, v40, v41, v42, v43);
            v46 = (unint64_t)v152;
            if (((hasExceptionsAfterHandlingTraps | v137) & 1) != 0)
            {
              if (!hasExceptionsAfterHandlingTraps)
                goto LABEL_60;
              goto LABEL_71;
            }
          }
          else
          {
            v46 = (unint64_t)v152;
            if ((v134 & 1) != 0)
              goto LABEL_60;
          }
          if (BYTE2(v162[1]) == 3)
          {
            if (BYTE4(v162[1]))
              goto LABEL_71;
            v138 = *(unsigned __int8 *)(v45 + 5);
            if (v138 == 61)
              goto LABEL_259;
          }
          else
          {
            v138 = *(unsigned __int8 *)(v45 + 5);
            if (v138 == 61)
            {
              if (BYTE2(v162[1]) == 1)
                goto LABEL_71;
              goto LABEL_259;
            }
          }
          if ((v138 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v45, v135, v46, v39, v40, v41, v42, v43) <= v59)
          {
            goto LABEL_71;
          }
LABEL_259:
          if ((*(_WORD *)(v133 + 12) & 0x800) == 0 || BYTE2(v162[1]) == 3)
          {
            v139 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x30);
            if (!v139)
              v139 = *(_QWORD *)(v45 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v139 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0xB0))(v45, v148, v46);
            }
            else
            {
              v139 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x30);
              if (!v139)
                v139 = *(_QWORD *)(v45 + 16);
            }
            if (*((_DWORD *)v151 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v151, v135, v46, v39, v40, v41, v42, v43))
            {
              goto LABEL_71;
            }
          }
          if ((v139 & 0xFFFE000000000002) != 0)
            goto LABEL_71;
          v45 = v139;
          v66 = 10;
          if (*(unsigned __int8 *)(v139 + 5) <= 0x16u)
            goto LABEL_62;
        }
      }
LABEL_40:
      v60 = v148[7];
      break;
    case 3:
      JSC::OpConstructVarargs::decode((int *)v21, (uint64_t)&v167, a9);
LABEL_9:
      v24 = v167.i32[0];
      goto LABEL_10;
    case 4:
      v36 = (uint32x4_t *)&v167;
      JSC::OpIteratorOpen::decode(v21, (uint32x4_t *)&v167, a9);
      if ((v19 & 3) != 0)
      {
        if ((v19 & 3) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19884D9D4);
        }
        v36 = (uint32x4_t *)((char *)v167.i64 + 4);
      }
      v24 = v36->i32[0];
LABEL_10:
      *(_QWORD *)(a1 + 8 * v24) = a2;
      goto LABEL_11;
    default:
      WTFCrashWithInfoImpl(2638, "./llint/LLIntSlowPaths.cpp", "UGPRPair JSC::LLInt::llint_slow_path_checkpoint_osr_exit_from_inlined_call(CallFrame *, EncodedJSValue)");
  }
  while (1)
  {
    v61 = 16 * (*(_DWORD *)v50 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v50 + 6) & 8) == 0)
      break;
    v99 = (*(uint64_t (**)(uint64_t, JSC::VM **, WTF *, uint64_t *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v50 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x68))(v50, v148, v152, &v157);
    if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60, v38, v98, v39, v40, v41, v42, v43))
      goto LABEL_71;
    v46 = (unint64_t)v152;
    if ((v99 & 1) != 0)
      goto LABEL_60;
    if (BYTE2(v162[1]) == 3)
    {
      if (BYTE4(v162[1]))
        goto LABEL_71;
      v100 = *(unsigned __int8 *)(v50 + 5);
      if (v100 != 61)
      {
LABEL_135:
        if (!v152)
          goto LABEL_47;
        if ((v100 - 50) < 0xFFFFFFF5)
          goto LABEL_47;
        v101 = *((_DWORD *)v152 + 4);
        if ((v101 & 0x20) != 0)
          goto LABEL_47;
        v102 = *((unsigned int *)v152 + 1);
        if (!(_DWORD)v102)
          goto LABEL_47;
        v103 = (unsigned __int8 *)*((_QWORD *)v152 + 1);
        if ((v101 & 4) == 0)
        {
          v104 = *(unsigned __int16 *)v103;
          if ((_DWORD)v102 == 1)
            goto LABEL_141;
          if (v104 == 45)
          {
            v104 = *((unsigned __int16 *)v103 + 1);
            goto LABEL_147;
          }
          if ((v104 - 48) >= 0xA && ((_DWORD)v102 != 8 || v104 != 73))
          {
LABEL_161:
            if ((_DWORD)v102 != 3 || v104 != 78)
              goto LABEL_47;
          }
LABEL_153:
          v147 = v147 & 0xFFFFFF0000000000 | v102 | ((unint64_t)((v101 >> 2) & 1) << 32);
          JSC::jsToNumber(v103, v147);
          WTF::numberToString(&v167, v105);
          if (WTF::equal((unint64_t)v152, (unint64_t)&v167, v106))
            goto LABEL_71;
          goto LABEL_47;
        }
        v104 = *v103;
        if ((_DWORD)v102 == 1)
        {
LABEL_141:
          if ((v104 - 48) < 0xA)
            goto LABEL_71;
          goto LABEL_47;
        }
        if (v104 == 45)
        {
          v104 = v103[1];
LABEL_147:
          if ((v104 - 48) < 0xA)
          {
            if ((_DWORD)v102 == 2)
              goto LABEL_71;
            goto LABEL_153;
          }
          if ((_DWORD)v102 != 9)
            goto LABEL_47;
        }
        else
        {
          if ((v104 - 48) < 0xA)
            goto LABEL_153;
          if ((_DWORD)v102 != 8)
            goto LABEL_161;
        }
        if (v104 != 73)
          goto LABEL_47;
        goto LABEL_153;
      }
    }
    else
    {
      v100 = *(unsigned __int8 *)(v50 + 5);
      if (v100 != 61)
        goto LABEL_135;
      if (BYTE2(v162[1]) == 1)
        goto LABEL_71;
    }
LABEL_47:
    if ((*(_WORD *)(v61 + 12) & 0x800) != 0)
    {
      v64 = *(_DWORD *)v50;
      if (BYTE2(v162[1]) != 3)
      {
        v97 = 16 * (v64 & 0xFFFFFFFE);
        if ((*(_WORD *)(v97 + 12) & 0x800) != 0)
        {
          v65 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v97 + 76) + 0xB0))(v50, v148);
        }
        else
        {
          v65 = *(_QWORD *)(v97 + 48);
          if (!v65)
            v65 = *(_QWORD *)(v50 + 16);
        }
        if (*((_DWORD *)v60 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v60, v38, v46, v39, v40, v41, v42, v43))
          goto LABEL_71;
        goto LABEL_51;
      }
    }
    else
    {
      v64 = *(_DWORD *)v50;
    }
    v65 = *(_QWORD *)(16 * (v64 & 0xFFFFFFFE) + 0x30);
    if (!v65)
      v65 = *(_QWORD *)(v50 + 16);
LABEL_51:
    if ((v65 & 0xFFFE000000000002) != 0)
      goto LABEL_71;
    v50 = v65;
    v66 = 10;
    if (*(unsigned __int8 *)(v65 + 5) <= 0x16u)
      goto LABEL_62;
  }
  if (!(_DWORD)v149
    || (v149 & ~*(_DWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE)), v60, v46, (const JSC::PropertyTable *)v39, v40, v41, v42, v43), !v62)|| (v167.i64[0] = (uint64_t)v152, v63 = JSC::PropertyTable::get(v62, v167.i64), v41 = v63, (_DWORD)v63 == -1))
  {
    if ((*(_BYTE *)(v50 + 6) & 0x20) != 0)
    {
      v92 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v50, v60, (unint64_t)v152, (uint64_t)&v157);
      v46 = (unint64_t)v152;
      if ((v92 & 1) != 0)
        goto LABEL_60;
    }
    goto LABEL_47;
  }
  v40 = HIDWORD(v63);
  if ((int)v63 <= 63)
  {
    v86 = v50 + 16;
    v87 = v63 << 32;
  }
  else
  {
    v86 = *(_QWORD *)(v50 + 8) - 8;
    v87 = 0x3F00000000 - (v63 << 32);
  }
  v39 = *(_QWORD *)(v86 + (v87 >> 29));
  if ((v39 & 0xFFFE000000000002) != 0)
  {
LABEL_102:
    v157 = v39;
    v161 = v50;
    v159 = __PAIR64__(v63, HIDWORD(v63));
    LOWORD(v162[1]) = 257;
    goto LABEL_85;
  }
  v88 = *(unsigned __int8 *)(v39 + 5);
  if (v88 == 5)
  {
    v79 = (unsigned int *)v50;
    v80 = (uint64_t)v60;
    goto LABEL_84;
  }
  if (v88 != 6)
    goto LABEL_102;
  v93 = *(_DWORD *)(v61 + 16) & 3;
  v94 = *(_QWORD *)(v39 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C)))
  {
    v157 = *(_QWORD *)(v39 + 8);
    v158 = v94;
    LODWORD(v159) = HIDWORD(v63);
    v161 = v50;
    BYTE1(v162[1]) = 3;
    v46 = (unint64_t)v152;
    if (v93 == 2)
      goto LABEL_60;
    goto LABEL_113;
  }
  v96 = *(_QWORD *)(v39 + 24);
  v95 = *(_QWORD *)(v39 + 32);
  v157 = *(_QWORD *)(v39 + 8);
  v158 = v94;
  LODWORD(v159) = HIDWORD(v63);
  v161 = v50;
  BYTE1(v162[1]) = 3;
  if (v93 != 2)
    LOBYTE(v162[1]) = 1;
  BYTE3(v162[1]) = 1;
  v165 = v96;
  v166 = v95;
LABEL_85:
  v46 = (unint64_t)v152;
LABEL_60:
  if (BYTE1(v162[1]) == 1)
  {
    v66 = v157;
  }
  else if (BYTE1(v162[1]) == 2)
  {
    v66 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v157, (JSC::JSGlobalObject *)v148, v46, v39, v40, v41, v42, v43);
  }
  else
  {
    v66 = JSC::PropertySlot::customGetter((uint64_t)&v157, v148[7], (WTF::StringImpl *)v46);
  }
LABEL_62:
  if (v164)
  {
    v70 = *(_DWORD *)(v163 + 4);
    if (!v70)
    {
      __break(0xC471u);
      JUMPOUT(0x19884DA9CLL);
    }
    *(_DWORD *)(v163 + 4) = v70 - 1;
  }
  *(_QWORD *)(a1 + 8 * v146) = v66;
LABEL_11:
  v153 = v20;
  v154 = v23;
  InstructionDuringExit = JSC::LLInt::dispatchToNextInstructionDuringExit(*(_QWORD *)(v11 + 16), (uint64_t)v9, (uint64_t)&v153);
  WTF::fastFree(v17, v26, v27, v28, v29, v30, v31, v32);
  return InstructionDuringExit;
}

unint64_t JSC::destinationFor<JSC::OpIteratorNext>(unsigned int *a1, int a2)
{
  unint64_t result;

  switch(a2)
  {
    case 0:
      goto LABEL_2;
    case 1:
      return *a1 | ((((unint64_t)*a1 >> 31) & 1) << 32);
    case 2:
LABEL_2:
      ++a1;
      return *a1 | ((((unint64_t)*a1 >> 31) & 1) << 32);
  }
  result = 76;
  __break(0xC471u);
  return result;
}

__int128 *JSC::LLInt::dispatchToNextInstructionDuringExit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  char v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int *v24;

  if (a1)
    return &xmmword_1ECF4C7C0;
  if (HIBYTE(word_1ECF4C758) || (v3 = *(_QWORD *)(a2 + 120)) != 0 && *(_BYTE *)(v3 + 12) == 2)
  {
    JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const>::next(a3, (uint64_t)&v23);
    v11 = *v23 + v24;
    std::call_once[abi:sn180100]<JSC::LLInt::normalOSRExitTrampolineThunk(void)::$_0>((uint64_t)&v23);
    v21 = *(unsigned int **)algn_1ECF58AB8;
    v23 = (_QWORD *)qword_1ECF58AB0;
    if (*(_QWORD *)algn_1ECF58AB8)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v24 = v21;
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v23, v14, v15, v16, v17, v18, v19, v20);
  }
  else
  {
    v4 = *(unsigned int *)(a3 + 8);
    v5 = (unsigned __int8 *)(**(_QWORD **)a3 + v4);
    v6 = *v5;
    v7 = v6;
    if ((v6 | 2) == 0x82)
      v7 = v5[1];
    v8 = v6 == 128;
    v9 = v6 == 130;
    if (v6 == 130)
      v8 = 2;
    if (v6 == 128)
      v9 = 1;
    v10 = JSC::opcodeLengths[v7] << v8;
    v11 = 1;
    if (v9)
      v12 = 2;
    else
      v12 = 1;
    JSC::JITCodeMap::find(*(_QWORD *)(v3 + 104), *(_DWORD *)(v3 + 112), 4 * (v12 + v4 + v10));
  }
  return (__int128 *)v11;
}

__int128 *llint_slow_path_checkpoint_osr_exit(JSC::VM *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *InstructionDuringExit;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const JSC::OpIteratorOpen *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  _QWORD *v70;
  int v71;
  int8x16_t v72;
  unsigned int v73;
  uint32x4_t v74;
  char *v75;
  _OWORD v76[4];
  uint64_t v77;
  JSC::VM *v78;
  char *v79;
  __int32 v80;
  uint64_t *v81;

  v9 = (_QWORD *)*((_QWORD *)a1 + 2);
  v10 = (JSC::JSGlobalObject *)v9[1];
  v11 = v9[9];
  v12 = (_QWORD *)(v11 + 93216);
  *(_QWORD *)(v11 + 40) = a1;
  v13 = *(unsigned int *)(v11 + 93228);
  if (!(_DWORD)v13)
  {
    __break(0xC471u);
    JUMPOUT(0x19884E974);
  }
  v15 = v13 - 1;
  v16 = *(_QWORD *)(*v12 + 8 * (v13 - 1));
  *(_QWORD *)(*v12 + 8 * (v13 - 1)) = 0;
  v17 = *(_QWORD *)(*v12 + 8 * (v13 - 1));
  *(_QWORD *)(*v12 + 8 * (v13 - 1)) = 0;
  if (v17)
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(v11 + 93228) = v15;
  if (*(JSC::VM **)v16 != a1)
  {
    __break(0xC471u);
    JUMPOUT(0x19884E938);
  }
  v18 = *(unsigned int *)(v16 + 8);
  v19 = *(_QWORD **)(v9[7] + 80);
  v20 = (unsigned __int8 *)(*v19 + (v18 >> 2));
  v21 = *v20;
  if ((v21 | 2) == 0x82)
    v21 = v20[1];
  if (v21 == 1)
  {
    JSC::OpCallVarargs::decode((JSC::OpCallVarargs *)(*v19 + (v18 >> 2)), &v72, a9);
    v28 = *(_DWORD *)(v16 + 16);
    v78 = (JSC::VM *)v11;
    v29 = v73;
    v74.i8[0] = 0;
    v74.i64[1] = 0x800000000;
    v30 = (char *)v76 + 8;
    v75 = (char *)v76 + 8;
    memset(v76, 0, sizeof(v76));
    v77 = 0;
    v31 = (v28 - 1);
    if (v31 >= 9)
    {
      if ((v31 & 0x80000000) != 0
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v74.u64[1], v28 - 1))
      {
        v74.i8[0] = 1;
        goto LABEL_32;
      }
      if (v74.i8[0])
      {
LABEL_32:
        JSC::throwStackOverflowError((unint64_t)v10, &v78, v22, v23, v24, v25, v26, v27);
LABEL_19:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v74.u64[1], v38, v39, v40, v41, v42, v26, v27);
        goto LABEL_20;
      }
      if (v75 != (char *)v76 + 8)
      {
        if (!*(_QWORD *)&v76[0])
        {
          *(_QWORD *)&v76[0] = v11 + 560;
          v81 = &v74.i64[1];
          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)(v11 + 560), (uint64_t *)&v81, v23, v24, v25, v26, v27, (uint64_t)&v79);
        }
        v30 = v75;
      }
    }
    v74.i32[2] = v31;
    bzero(v30, 8 * v31);
    if (v72.i32[3] >= 0x40000000)
    {
      v53 = *((_QWORD *)a1 + 2);
      if ((v72.i32[3] - 0x40000000) >= *(_DWORD *)(v53 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x19884E97CLL);
      }
      v32 = (uint64_t *)(*(_QWORD *)(v53 + 160) + 8 * (v72.i32[3] - 0x40000000));
    }
    else
    {
      v32 = (uint64_t *)((char *)a1 + 8 * v72.i32[3]);
    }
    JSC::loadVarargs(v10, (JSC::JSValue *)v30, *v32, v29, v31);
    if (!v74.i8[0])
    {
      if (!*(_DWORD *)(v11 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v33, v22, v23, v24, v25, v26, v27))
      {
        if (v72.i32[1] >= 0x40000000)
        {
          v54 = *((_QWORD *)a1 + 2);
          if ((v72.i32[1] - 0x40000000) >= *(_DWORD *)(v54 + 172))
          {
            __break(0xC471u);
            JUMPOUT(0x19884E984);
          }
          v34 = (uint64_t *)(*(_QWORD *)(v54 + 160) + 8 * (v72.i32[1] - 0x40000000));
        }
        else
        {
          v34 = (uint64_t *)((char *)a1 + 8 * v72.i32[1]);
        }
        v35 = *v34;
        if (v72.i32[2] >= 0x40000000)
        {
          v55 = *((_QWORD *)a1 + 2);
          if ((v72.i32[2] - 0x40000000) >= *(_DWORD *)(v55 + 172))
          {
            __break(0xC471u);
            JUMPOUT(0x19884E98CLL);
          }
          v36 = (uint64_t *)(*(_QWORD *)(v55 + 160) + 8 * (v72.i32[2] - 0x40000000));
        }
        else
        {
          v36 = (uint64_t *)((char *)a1 + 8 * v72.i32[2]);
        }
        v37 = *v36;
        v79 = v75;
        v80 = v74.i32[2];
        v43 = JSC::call((unint64_t)v10, v35, v37, (uint64_t)&v79, (uint64_t)"", 1, v26, v27);
        if (!*(_DWORD *)(v11 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v38, v39, v40, v41, v42, v26, v27))
        {
          *((_QWORD *)a1 + v72.i32[0]) = v43;
        }
      }
      goto LABEL_19;
    }
    goto LABEL_32;
  }
  switch(v21)
  {
    case 0:
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpTailCallVarargs>(v74.i32, v20, a9);
      JSC::LLInt::handleVarargsCheckpoint<JSC::OpTailCallVarargs>(v11, (uint64_t)a1, v10, v74.i32, *(_QWORD *)(v16 + 16), v56, v57, v58);
      break;
    case 2:
      JSC::OpIteratorNext::decode((_DWORD *)(*v19 + (v18 >> 2)), (uint64_t)&v74, a9);
      JSC::LLInt::handleIteratorNextCheckpoint((JSC::VM *)v11, (uint64_t)a1, (uint64_t)v10, (uint64_t)&v74, *(unsigned int *)(v16 + 8), *(_QWORD *)(v16 + 16), v61, v59, v60);
      break;
    case 3:
      JSC::OpConstructVarargs::decode((int *)(*v19 + (v18 >> 2)), (uint64_t)&v74, a9);
      JSC::LLInt::handleVarargsCheckpoint<JSC::OpConstructVarargs>(v11, (uint64_t)a1, v10, v74.i32, *(_QWORD *)(v16 + 16), v62, v63, v64);
      break;
    case 4:
      JSC::OpIteratorOpen::decode((_DWORD *)(*v19 + (v18 >> 2)), &v74, a9);
      JSC::LLInt::handleIteratorOpenCheckpoint((JSC::LLInt *)v11, a1, (uint64_t)v10, (uint64_t)&v74, v65, v66, v67, v68, v69);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19884E8E0);
  }
LABEL_20:
  v70 = v19;
  v71 = v18 >> 2;
  InstructionDuringExit = JSC::LLInt::dispatchToNextInstructionDuringExit(*(_QWORD *)(v11 + 16), (uint64_t)v9, (uint64_t)&v70);
  WTF::fastFree(v16, v45, v46, v47, v48, v49, v50, v51);
  return InstructionDuringExit;
}

void JSC::LLInt::handleVarargsCheckpoint<JSC::OpConstructVarargs>(uint64_t a1, uint64_t a2, JSC::JSGlobalObject *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF **v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  _OWORD v41[4];
  uint64_t v42;
  JSC::VM *v43;
  char *v44;
  int v45;
  uint64_t *v46;

  v42 = 0;
  v43 = (JSC::VM *)a1;
  v12 = a4[5];
  v39 = 0x800000000;
  v40 = (char *)v41 + 8;
  memset(v41, 0, sizeof(v41));
  v13 = (a5 - 1);
  v14 = (char *)v41 + 8;
  if (v13 >= 9)
  {
    if ((v13 & 0x80000000) != 0
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v39, (int)a5 - 1))
    {
      JSC::throwStackOverflowError((unint64_t)a3, &v43, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_11;
    }
    v14 = v40;
    if (v40 != (char *)v41 + 8 && !*(_QWORD *)&v41[0])
    {
      *(_QWORD *)&v41[0] = a1 + 560;
      v46 = &v39;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)(a1 + 560), (uint64_t *)&v46, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v44);
      v14 = v40;
    }
  }
  LODWORD(v39) = v13;
  bzero(v14, 8 * v13);
  v15 = a4[3];
  if ((int)v15 >= 0x40000000)
  {
    v31 = *(_QWORD *)(a2 + 16);
    v32 = v15 - 0x40000000;
    if (v32 >= *(_DWORD *)(v31 + 172))
      goto LABEL_36;
    v16 = (uint64_t *)(*(_QWORD *)(v31 + 160) + 8 * v32);
  }
  else
  {
    v16 = (uint64_t *)(a2 + 8 * v15);
  }
  JSC::loadVarargs(a3, (JSC::JSValue *)v14, *v16, v12, v13);
  if (!*(_DWORD *)(a1 + 80))
    goto LABEL_5;
  v37 = *(_DWORD *)(a1 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, v18, v19, v20, v21, v22, v23);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_5:
    v24 = a4[1];
    if ((int)v24 >= 0x40000000)
    {
      v33 = *(_QWORD *)(a2 + 16);
      v34 = v24 - 0x40000000;
      if (v34 >= *(_DWORD *)(v33 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x19884EC3CLL);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v33 + 160) + 8 * v34);
    }
    else
    {
      v25 = (uint64_t *)(a2 + 8 * v24);
    }
    v26 = *v25;
    v27 = a4[2];
    if ((int)v27 < 0x40000000)
    {
      v28 = (WTF **)(a2 + 8 * v27);
LABEL_9:
      v29 = *v28;
      v44 = v40;
      v45 = v39;
      v30 = JSC::construct((unint64_t)a3, v26, v29, (uint64_t)&v44, (uint64_t)"", 1);
      if (!*(_DWORD *)(a1 + 80))
        goto LABEL_10;
      v38 = *(_DWORD *)(a1 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (!*(_QWORD *)(a1 + 16))
LABEL_10:
        *(_QWORD *)(a2 + 8 * *a4) = v30;
      goto LABEL_11;
    }
    v35 = *(_QWORD *)(a2 + 16);
    v36 = v27 - 0x40000000;
    if (v36 < *(_DWORD *)(v35 + 172))
    {
      v28 = (WTF **)(*(_QWORD *)(v35 + 160) + 8 * v36);
      goto LABEL_9;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x19884EC34);
  }
LABEL_11:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v39, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::LLInt::handleVarargsCheckpoint<JSC::OpTailCallVarargs>(uint64_t a1, uint64_t a2, JSC::JSGlobalObject *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  _OWORD v41[4];
  uint64_t v42;
  JSC::VM *v43;
  char *v44;
  int v45;
  uint64_t *v46;

  v42 = 0;
  v43 = (JSC::VM *)a1;
  v12 = a4[5];
  v39 = 0x800000000;
  v40 = (char *)v41 + 8;
  memset(v41, 0, sizeof(v41));
  v13 = (a5 - 1);
  v14 = (char *)v41 + 8;
  if (v13 >= 9)
  {
    if ((v13 & 0x80000000) != 0
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v39, (int)a5 - 1))
    {
      JSC::throwStackOverflowError((unint64_t)a3, &v43, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_11;
    }
    v14 = v40;
    if (v40 != (char *)v41 + 8 && !*(_QWORD *)&v41[0])
    {
      *(_QWORD *)&v41[0] = a1 + 560;
      v46 = &v39;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)(a1 + 560), (uint64_t *)&v46, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v44);
      v14 = v40;
    }
  }
  LODWORD(v39) = v13;
  bzero(v14, 8 * v13);
  v15 = a4[3];
  if ((int)v15 >= 0x40000000)
  {
    v31 = *(_QWORD *)(a2 + 16);
    v32 = v15 - 0x40000000;
    if (v32 >= *(_DWORD *)(v31 + 172))
      goto LABEL_36;
    v16 = (uint64_t *)(*(_QWORD *)(v31 + 160) + 8 * v32);
  }
  else
  {
    v16 = (uint64_t *)(a2 + 8 * v15);
  }
  JSC::loadVarargs(a3, (JSC::JSValue *)v14, *v16, v12, v13);
  if (!*(_DWORD *)(a1 + 80))
    goto LABEL_5;
  v37 = *(_DWORD *)(a1 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, v18, v19, v20, v21, v22, v23);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_5:
    v24 = a4[1];
    if ((int)v24 >= 0x40000000)
    {
      v33 = *(_QWORD *)(a2 + 16);
      v34 = v24 - 0x40000000;
      if (v34 >= *(_DWORD *)(v33 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x19884EEE0);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v33 + 160) + 8 * v34);
    }
    else
    {
      v25 = (uint64_t *)(a2 + 8 * v24);
    }
    v26 = *v25;
    v27 = a4[2];
    if ((int)v27 < 0x40000000)
    {
      v28 = (uint64_t *)(a2 + 8 * v27);
LABEL_9:
      v29 = *v28;
      v44 = v40;
      v45 = v39;
      v30 = JSC::call((unint64_t)a3, v26, v29, (uint64_t)&v44, (uint64_t)"", 1, v22, v23);
      if (!*(_DWORD *)(a1 + 80))
        goto LABEL_10;
      v38 = *(_DWORD *)(a1 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (!*(_QWORD *)(a1 + 16))
LABEL_10:
        *(_QWORD *)(a2 + 8 * *a4) = v30;
      goto LABEL_11;
    }
    v35 = *(_QWORD *)(a2 + 16);
    v36 = v27 - 0x40000000;
    if (v36 < *(_DWORD *)(v35 + 172))
    {
      v28 = (uint64_t *)(*(_QWORD *)(v35 + 160) + 8 * v36);
      goto LABEL_9;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x19884EED8);
  }
LABEL_11:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v39, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::LLInt::handleIteratorOpenCheckpoint(JSC::LLInt *this, JSC::VM *a2, uint64_t a3, uint64_t a4, const JSC::OpIteratorOpen *a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::CallFrame *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  BOOL v63;
  int v65;
  JSC::VM *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int8x16_t **v70;
  int v71;
  _WORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unsigned __int16 *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  JSC::VMTraps *v84;
  char *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  JSC::VM *v89;
  char *v90;
  uint64_t v91;
  JSC::VMTraps *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  _BYTE *v111;
  JSC::VM *v112;
  char *v113;
  JSC::VMTraps *v114;
  char OwnStaticPropertySlot;
  JSC::VMTraps *v116;
  uint64_t v117;
  _BYTE *v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned __int8 *v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  size_t v130;
  char *v131;
  char *v132;
  int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  JSC::VM **v136;
  uint64_t v137;
  int v138;
  int v139;
  JSC::VM **p_dst;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t Index;
  int v153;
  char v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  int8x16_t **v158;
  int v159;
  _WORD *v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  unsigned __int16 *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  int v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  char v182;
  int v183;
  uint64_t v184;
  unsigned __int8 *v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  char v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  char v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  char v202;
  uint64_t v203;
  unsigned __int8 *v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  int v210;
  uint64_t v212;
  unsigned __int8 *v213;
  unsigned int v214;
  unint64_t v215;
  JSC::VMTraps *v216;
  char *v217;
  char *v218;
  char v219;
  _BYTE *v220;
  uint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  JSC::Structure *v224;
  JSC::CallFrame *v225;
  unsigned int *v226;
  JSC::VMTraps *v227;
  JSC::VMTraps *v228;
  uint64_t v229;
  JSC::VM *v230;
  uint64_t (*v231)(unint64_t);
  uint64_t v232;
  unint64_t v233;
  _DWORD *v234;
  _DWORD *v235;
  _QWORD v236[2];
  uint64_t v237;
  char v238;
  int8x16_t **v239;
  uint64_t v240;
  JSC::VM *__dst;
  char v242;
  char __s[3];
  _BYTE v244[39];

  v9 = (JSC::CallFrame *)a3;
  *(_QWORD *)&v244[23] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a2 + *(int *)a4);
  v229 = v10;
  v230 = this;
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a3, &v230, (uint64_t)"Iterator result interface is not an object.", 44);
    return;
  }
  v11 = a4;
  v13 = *(_QWORD *)(*((_QWORD *)this + 5244) + 2000);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v233 = 0xFFFFFFFF00000000;
  LOBYTE(v237) = 0;
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v235 = 0;
  memset(v236, 0, 13);
  v234 = (_DWORD *)v10;
  v14 = *(_QWORD *)(a3 + 56);
  v15 = *(unsigned __int8 *)(v10 + 5);
  if (v15 <= 0x16)
  {
    if (v15 != 2)
    {
LABEL_113:
      v77 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v229, (unint64_t)v9);
      if (!v77)
        goto LABEL_72;
      v10 = v77;
      v14 = *((_QWORD *)v9 + 7);
      goto LABEL_4;
    }
    if (*(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768) == v13)
    {
      v149 = *(_QWORD *)(v10 + 8);
      if ((v149 & 1) != 0)
        v150 = (unsigned int *)(v10 + 16);
      else
        v150 = (unsigned int *)(v149 + 4);
      v151 = *v150;
      if ((v151 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v151) + 0x2000000000000;
      else
        Index = v151 | 0xFFFE000000000000;
      v153 = 14;
      goto LABEL_271;
    }
    if (!v13 || (v159 = *(_DWORD *)(v13 + 16), (v159 & 0x20) != 0))
    {
LABEL_303:
      v154 = 0;
LABEL_304:
      if (*(_DWORD *)(v14 + 80))
      {
        v170 = *(_DWORD *)(v14 + 80);
        if ((v170 & 0x27) != 0 && (v170 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
        if (*(_QWORD *)(v14 + 16))
          goto LABEL_72;
      }
      if ((v154 & 1) != 0)
        goto LABEL_75;
      goto LABEL_113;
    }
    v160 = *(_WORD **)(v13 + 8);
    v161 = *(unsigned int *)(v13 + 4);
    if ((v159 & 4) == 0)
    {
      if ((_DWORD)v161)
      {
        v162 = (unsigned __int16)*v160 - 48;
        if (v162 <= 9 && (*v160 != 48 || v161 <= 1))
        {
          v166 = v160 + 1;
          v167 = v161 - 1;
          while (v167)
          {
            if (v162 > 0x19999999)
              goto LABEL_281;
            v168 = *v166 - 48;
            if (v168 > 9)
              goto LABEL_281;
            v163 = 0;
            LOBYTE(v161) = 0;
            v164 = 0;
            v52 = __CFADD__(v168, 10 * v162);
            v162 = v168 + 10 * v162;
            ++v166;
            --v167;
            if (v52)
              goto LABEL_302;
          }
          v164 = v162 & 0xFFFFFF00;
          v163 = 0x100000000;
          if (v162 == -1)
          {
            v163 = 0;
            LOBYTE(v161) = 0;
          }
          else
          {
            LOBYTE(v161) = v162;
          }
          if (v162 == -1)
            v164 = 0;
LABEL_302:
          v169 = v161;
          if ((v163 & 0x100000000) == 0)
            goto LABEL_303;
          goto LABEL_462;
        }
LABEL_281:
        v163 = 0;
        LOBYTE(v161) = 0;
      }
      else
      {
        v163 = 0;
      }
      v164 = 0;
      goto LABEL_302;
    }
    if ((_DWORD)v161)
    {
      v206 = *(unsigned __int8 *)v160 - 48;
      if (v206 <= 9 && (v161 < 2 || *(_BYTE *)v160 != 48))
      {
        v212 = v161 - 1;
        v213 = (unsigned __int8 *)v160 + 1;
        while (v212)
        {
          if (v206 > 0x19999999)
            goto LABEL_459;
          v214 = *v213 - 48;
          if (v214 > 9)
            goto LABEL_459;
          v169 = 0;
          LOBYTE(v161) = 0;
          v207 = 0;
          v52 = __CFADD__(v214, 10 * v206);
          v206 = v214 + 10 * v206;
          --v212;
          ++v213;
          if (v52)
            goto LABEL_461;
        }
        if (v206 == -1)
          v169 = 0;
        else
          v169 = v206 & 0xFFFFFF00;
        if (v206 == -1)
          LOBYTE(v161) = 0;
        else
          LOBYTE(v161) = v206;
        if (v206 == -1)
          v207 = 0;
        else
          v207 = 0x100000000;
LABEL_461:
        v164 = v161;
        if ((v207 & 0x100000000) == 0)
          goto LABEL_303;
LABEL_462:
        a3 = v164 | v169;
        v208 = *(_QWORD *)(v10 + 8);
        if ((v208 & 1) != 0)
          v209 = (_DWORD *)(v10 + 16);
        else
          v209 = (_DWORD *)(v208 + 4);
        if (*v209 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)v10, v9, a3, a4, (uint64_t)a5, a6, a7, a8, a9);
          if (!*(_DWORD *)(v14 + 80))
            goto LABEL_467;
          v210 = *(_DWORD *)(v14 + 80);
          if ((v210 & 0x27) != 0 && (v210 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
          if (!*(_QWORD *)(v14 + 16))
          {
LABEL_467:
            v153 = 10;
LABEL_271:
            v231 = (uint64_t (*)(unint64_t))Index;
            LODWORD(v233) = v153;
            v235 = 0;
            v154 = 1;
            BYTE1(v236[1]) = 1;
            goto LABEL_304;
          }
        }
        goto LABEL_303;
      }
LABEL_459:
      v169 = 0;
      LOBYTE(v161) = 0;
    }
    else
    {
      v169 = 0;
    }
    v207 = 0;
    goto LABEL_461;
  }
LABEL_4:
  v16 = (_BYTE *)(v10 + 6);
  v17 = v13 >> 4;
  v18 = v10;
  if ((*(_BYTE *)(v10 + 6) & 8) == 0)
  {
    v19 = v10;
    do
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v20 + 0x20)) != 0)
        goto LABEL_33;
      v22 = *(_QWORD *)(16 * v20 + 0x58);
      if (!v22)
      {
        v23 = *(_QWORD *)(16 * v20 + 0x40);
        if (!v23 || *(_BYTE *)(v23 + 5) != 1 && *(_DWORD *)(v23 + 80) < 2u)
          goto LABEL_33;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v21, (JSC::VM *)v14, 1, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
        if (!v22)
          goto LABEL_33;
      }
      if (!*(_DWORD *)(v22 + 24))
        goto LABEL_33;
      v24 = *(_QWORD *)(v22 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      v26 = *(unsigned int *)(v22 + 8);
      v27 = *(_DWORD *)(v13 + 16);
      if ((v24 & 1) != 0)
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v13 + 32);
        v28 = *(_DWORD *)(v22 + 12);
        v29 = (v27 >> 8) & *(_QWORD *)&v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_33;
        v31 = v25 + v26;
        v32 = 1;
        while (1)
        {
          v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
          if (v13 == (v33 & 0xFFFFFFFFFFFFLL))
            break;
          v29 = ((_DWORD)v29 + v32) & v28;
          v30 = *(unsigned __int8 *)(v25 + v29);
          ++v32;
          if (!*(_BYTE *)(v25 + v29))
            goto LABEL_33;
        }
        a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      }
      else
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v13 + 32);
        v34 = *(_DWORD *)(v22 + 12);
        v35 = v34 & (v27 >> 8);
        v36 = *(_DWORD *)(v25 + 4 * v35);
        if (!v36)
          goto LABEL_33;
        v37 = v25 + 4 * v26;
        v38 = 1;
        while (1)
        {
          v39 = (v36 - 1);
          if (v13 == *(_QWORD *)(v37 + 16 * v39))
            break;
          v35 = (v35 + v38) & v34;
          v36 = *(_DWORD *)(v25 + 4 * v35);
          ++v38;
          if (!v36)
            goto LABEL_33;
        }
        a6 = *(unsigned int *)(v37 + 16 * v39 + 8) | ((unint64_t)*(unsigned __int8 *)(v37 + 16 * v39 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = (const JSC::OpIteratorOpen *)HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v46 = v19 + 16;
          v47 = a6 << 32;
        }
        else
        {
          v46 = *(_QWORD *)(v19 + 8) - 8;
          v47 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v46 + (v47 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_56;
        v48 = *(unsigned __int8 *)(a4 + 5);
        if (v48 == 5)
        {
          v55 = (unsigned int *)v19;
          v56 = v14;
          goto LABEL_74;
        }
        if (v48 != 6)
        {
LABEL_56:
          v231 = (uint64_t (*)(unint64_t))a4;
          v235 = (_DWORD *)v19;
          goto LABEL_57;
        }
        v67 = *(_DWORD *)(v21 + 16) & 3;
        v68 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v231 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v232 = v68;
          LODWORD(v233) = HIDWORD(a6);
          v235 = (_DWORD *)v19;
          BYTE1(v236[1]) = 3;
          if (v67 == 2)
            goto LABEL_75;
          goto LABEL_262;
        }
        v70 = *(int8x16_t ***)(a4 + 24);
        v69 = *(_QWORD *)(a4 + 32);
        v231 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v232 = v68;
        LODWORD(v233) = HIDWORD(a6);
        v235 = (_DWORD *)v19;
        BYTE1(v236[1]) = 3;
        if (v67 != 2)
          LOBYTE(v236[1]) = 1;
        BYTE3(v236[1]) = 1;
        v239 = v70;
        v240 = v69;
LABEL_75:
        if (BYTE1(v236[1]) == 1)
        {
          v54 = (uint64_t)v231;
        }
        else
        {
          if (BYTE1(v236[1]) == 2)
          {
            v57 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v231, v9, a3, a4, (uint64_t)a5, a6, a7, a8);
          }
          else
          {
            v58 = (unint64_t)v235;
            v59 = *(_QWORD *)(16 * (*v235 & 0xFFFFFFFE) + 0x28);
            if ((v233 & 0x20) != 0)
              v58 = (unint64_t)v234;
            if (BYTE3(v236[1]) != 1)
              goto LABEL_93;
            if ((v58 & 0xFFFE000000000002) != 0)
              goto LABEL_318;
            v60 = *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C);
            v61 = *(_DWORD *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C) != 0;
            v62 = 16 * v60;
            if ((_DWORD)v60)
              v63 = v239 == (int8x16_t **)v62;
            else
              v63 = 1;
            if (!v63)
            {
              do
              {
                v62 = *(_QWORD *)(v62 + 16);
                v61 = v62 != 0;
              }
              while ((int8x16_t **)v62 != v239 && v62 != 0);
            }
            if (!v61)
            {
LABEL_318:
              __dst = (JSC::VM *)*((_QWORD *)v9 + 7);
              v57 = JSC::throwDOMAttributeGetterTypeError(v59, &__dst, v239, (WTF::StringImpl *)v13);
            }
            else
            {
LABEL_93:
              v57 = v231(v59);
            }
          }
          v54 = v57;
        }
        goto LABEL_95;
      }
LABEL_33:
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, (JSC::VM *)v14, v13, (uint64_t)&v231) & 1) != 0)
      {
        goto LABEL_75;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v19 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_72;
        v40 = *(_DWORD *)(v13 + 16);
        if ((v40 & 0x20) != 0)
          goto LABEL_72;
        v41 = *(_WORD **)(v13 + 8);
        v42 = *(unsigned int *)(v13 + 4);
        if ((v40 & 4) == 0)
        {
          if ((_DWORD)v42)
          {
            v43 = (unsigned __int16)*v41 - 48;
            if (v43 <= 9 && (*v41 != 48 || v42 <= 1))
            {
              v49 = v41 + 1;
              v50 = v42 - 1;
              while (v50)
              {
                if (v43 > 0x19999999)
                  goto LABEL_48;
                v51 = *v49 - 48;
                if (v51 > 9)
                  goto LABEL_48;
                v44 = 0;
                LOBYTE(v42) = 0;
                v45 = 0;
                v52 = __CFADD__(v51, 10 * v43);
                v43 = v51 + 10 * v43;
                ++v49;
                --v50;
                if (v52)
                  goto LABEL_71;
              }
              v45 = v43 & 0xFFFFFF00;
              v44 = 0x100000000;
              if (v43 == -1)
              {
                v44 = 0;
                LOBYTE(v42) = 0;
              }
              else
              {
                LOBYTE(v42) = v43;
              }
              if (v43 == -1)
                v45 = 0;
LABEL_71:
              v53 = v42;
              if ((v44 & 0x100000000) == 0)
                goto LABEL_72;
LABEL_325:
              v173 = v45 | v53;
              v174 = *((_QWORD *)v9 + 7);
              v227 = (JSC::VMTraps *)(v174 + 64);
              v54 = 10;
              while (2)
              {
                v175 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                v176 = (*(uint64_t (**)(uint64_t, JSC::CallFrame *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v175 + 0x4C) + 0x70))(v10, v9, v173, &v231);
                if (*(_DWORD *)(v174 + 80))
                {
                  v179 = *(_DWORD *)(v174 + 80);
                  if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v227, 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
                  if (*(_QWORD *)(v174 + 16))
                    goto LABEL_95;
                }
                if ((v176 & 1) != 0)
                  goto LABEL_75;
                if (BYTE2(v236[1]) == 3)
                {
                  if (BYTE4(v236[1]))
                    goto LABEL_95;
                  v177 = *(unsigned __int8 *)(v10 + 5);
                  if (v177 != 61)
                    goto LABEL_330;
                }
                else
                {
                  v177 = *(unsigned __int8 *)(v10 + 5);
                  if (v177 == 61)
                  {
                    if (BYTE2(v236[1]) == 1)
                      goto LABEL_95;
                  }
                  else
                  {
LABEL_330:
                    if ((v177 - 39) <= 0xA)
                    {
                      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v242 = 0;
                        v181 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&__dst, a3, a4, (uint64_t)a5, a6, a7, a8);
                        v180 = v182 ? v181 : 0;
                      }
                      else
                      {
                        v180 = *(_QWORD *)(v10 + 24);
                      }
                      if (v180 <= v173)
                        goto LABEL_95;
                    }
                  }
                }
                if ((*(_WORD *)(v175 + 12) & 0x800) == 0 || BYTE2(v236[1]) == 3)
                {
                  v178 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  if (!v178)
                    v178 = *(_QWORD *)(v10 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v178 = (*(uint64_t (**)(uint64_t, JSC::CallFrame *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v10, v9);
                  }
                  else
                  {
                    v178 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                    if (!v178)
                      v178 = *(_QWORD *)(v10 + 16);
                  }
                  if (*(_DWORD *)(v174 + 80))
                  {
                    v183 = *(_DWORD *)(v174 + 80);
                    if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v227, 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
                    if (*(_QWORD *)(v174 + 16))
                      goto LABEL_95;
                  }
                }
                if ((v178 & 0xFFFE000000000002) != 0)
                  goto LABEL_95;
                v10 = v178;
                if (*(unsigned __int8 *)(v178 + 5) <= 0x16u)
                  goto LABEL_95;
                continue;
              }
            }
LABEL_48:
            v44 = 0;
            LOBYTE(v42) = 0;
          }
          else
          {
            v44 = 0;
          }
          v45 = 0;
          goto LABEL_71;
        }
        if ((_DWORD)v42)
        {
          v171 = *(unsigned __int8 *)v41 - 48;
          if (v171 <= 9 && (v42 < 2 || *(_BYTE *)v41 != 48))
          {
            v184 = v42 - 1;
            v185 = (unsigned __int8 *)v41 + 1;
            while (v184)
            {
              if (v171 > 0x19999999)
                goto LABEL_322;
              v186 = *v185 - 48;
              if (v186 > 9)
                goto LABEL_322;
              v53 = 0;
              LOBYTE(v42) = 0;
              v172 = 0;
              v52 = __CFADD__(v186, 10 * v171);
              v171 = v186 + 10 * v171;
              --v184;
              ++v185;
              if (v52)
                goto LABEL_324;
            }
            if (v171 == -1)
              v53 = 0;
            else
              v53 = v171 & 0xFFFFFF00;
            if (v171 == -1)
              LOBYTE(v42) = 0;
            else
              LOBYTE(v42) = v171;
            if (v171 == -1)
              v172 = 0;
            else
              v172 = 0x100000000;
            goto LABEL_324;
          }
LABEL_322:
          v53 = 0;
          LOBYTE(v42) = 0;
        }
        else
        {
          v53 = 0;
        }
        v172 = 0;
LABEL_324:
        v45 = v42;
        if ((v172 & 0x100000000) == 0)
          goto LABEL_72;
        goto LABEL_325;
      }
      v16 = (_BYTE *)(v18 + 6);
      v19 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (!v13)
    goto LABEL_133;
  v71 = *(_DWORD *)(v13 + 16);
  if ((v71 & 0x20) != 0)
    goto LABEL_133;
  v72 = *(_WORD **)(v13 + 8);
  v73 = *(unsigned int *)(v13 + 4);
  if ((v71 & 4) == 0)
  {
    if ((_DWORD)v73)
    {
      v74 = (unsigned __int16)*v72 - 48;
      if (v74 <= 9 && (*v72 != 48 || v73 <= 1))
      {
        v79 = v72 + 1;
        v80 = v73 - 1;
        while (v80)
        {
          if (v74 > 0x19999999)
            goto LABEL_110;
          v81 = *v79 - 48;
          if (v81 > 9)
            goto LABEL_110;
          v75 = 0;
          LOBYTE(v73) = 0;
          v76 = 0;
          v52 = __CFADD__(v81, 10 * v74);
          v74 = v81 + 10 * v74;
          ++v79;
          --v80;
          if (v52)
            goto LABEL_132;
        }
        v76 = v74 & 0xFFFFFF00;
        v75 = 0x100000000;
        if (v74 == -1)
        {
          v75 = 0;
          LOBYTE(v73) = 0;
        }
        else
        {
          LOBYTE(v73) = v74;
        }
        if (v74 == -1)
          v76 = 0;
LABEL_132:
        v82 = v73;
        if ((v75 & 0x100000000) == 0)
        {
LABEL_133:
          v83 = *((_QWORD *)v9 + 7);
          v84 = (JSC::VMTraps *)(v83 + 64);
          v85 = &__s[1];
          v86 = v244;
          v54 = 10;
          while (1)
          {
            a3 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
            if ((*(_BYTE *)(v18 + 6) & 8) == 0)
            {
              if ((_DWORD)v17 && (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) == 0)
              {
                v87 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
                if (v87)
                  goto LABEL_498;
                v88 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
                if (v88 && (*(_BYTE *)(v88 + 5) == 1 || *(_DWORD *)(v88 + 80) >= 2u))
                {
                  v220 = v86;
                  v224 = (JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
                  v89 = (JSC::VM *)v83;
                  v90 = v85;
                  v91 = v83;
                  v92 = v84;
                  JSC::Structure::materializePropertyTable(v224, v89, 1, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
                  v86 = v220;
                  a3 = (uint64_t)v224;
                  v84 = v92;
                  v83 = v91;
                  v85 = v90;
                  if (v87)
                  {
LABEL_498:
                    if (*(_DWORD *)(v87 + 24))
                    {
                      v93 = *(_QWORD *)(v87 + 16);
                      v94 = v93 & 0xFFFFFFFFFFFFFFFELL;
                      v95 = *(unsigned int *)(v87 + 8);
                      v96 = *(_DWORD *)(v13 + 16);
                      if ((v93 & 1) != 0)
                      {
                        if ((v96 & 0x20) != 0)
                          v96 = *(_DWORD *)(v13 + 32);
                        v97 = *(_DWORD *)(v87 + 12);
                        v98 = (v96 >> 8) & *(_QWORD *)&v97;
                        v99 = *(unsigned __int8 *)(v94 + v98);
                        if (*(_BYTE *)(v94 + v98))
                        {
                          v100 = v94 + v95;
                          v101 = 1;
                          while (1)
                          {
                            v102 = *(_QWORD *)(v100 + 8 * (v99 - 1));
                            if (v13 == (v102 & 0xFFFFFFFFFFFFLL))
                              break;
                            v98 = ((_DWORD)v98 + v101) & v97;
                            v99 = *(unsigned __int8 *)(v94 + v98);
                            ++v101;
                            if (!*(_BYTE *)(v94 + v98))
                              goto LABEL_162;
                          }
                          a6 = (v102 >> 16) & 0xFF00000000 | HIBYTE(v102);
LABEL_159:
                          if ((_DWORD)a6 != -1)
                          {
                            a5 = (const JSC::OpIteratorOpen *)HIDWORD(a6);
                            if ((int)a6 <= 63)
                            {
                              v146 = v18 + 16;
                              v147 = a6 << 32;
                            }
                            else
                            {
                              v146 = *(_QWORD *)(v18 + 8) - 8;
                              v147 = 0x3F00000000 - (a6 << 32);
                            }
                            a4 = *(_QWORD *)(v146 + (v147 >> 29));
                            if ((a4 & 0xFFFE000000000002) == 0)
                            {
                              v148 = *(unsigned __int8 *)(a4 + 5);
                              if (v148 != 5)
                              {
                                if (v148 != 6)
                                  goto LABEL_260;
                                v155 = *(_DWORD *)(a3 + 16) & 3;
                                v156 = *(_QWORD *)(a4 + 16);
                                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                {
                                  v158 = *(int8x16_t ***)(a4 + 24);
                                  v157 = *(_QWORD *)(a4 + 32);
                                  v231 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                  v232 = v156;
                                  LODWORD(v233) = HIDWORD(a6);
                                  v235 = (_DWORD *)v18;
                                  BYTE1(v236[1]) = 3;
                                  if (v155 != 2)
                                    LOBYTE(v236[1]) = 1;
                                  BYTE3(v236[1]) = 1;
                                  v239 = v158;
                                  v240 = v157;
                                  goto LABEL_75;
                                }
                                v231 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v232 = v156;
                                LODWORD(v233) = HIDWORD(a6);
                                v235 = (_DWORD *)v18;
                                BYTE1(v236[1]) = 3;
                                if (v155 == 2)
                                  goto LABEL_75;
LABEL_262:
                                LOBYTE(v236[1]) = 1;
                                goto LABEL_75;
                              }
                              v55 = (unsigned int *)v18;
                              v56 = v83;
LABEL_74:
                              JSC::JSObject::fillGetterPropertySlot(v55, v56, (uint64_t)&v231, a4, (int)a5, a6);
                              goto LABEL_75;
                            }
LABEL_260:
                            v231 = (uint64_t (*)(unint64_t))a4;
                            v235 = (_DWORD *)v18;
LABEL_57:
                            v233 = __PAIR64__(a6, a5);
                            LOWORD(v236[1]) = 257;
                            goto LABEL_75;
                          }
                        }
                      }
                      else
                      {
                        if ((v96 & 0x20) != 0)
                          v96 = *(_DWORD *)(v13 + 32);
                        v103 = *(_DWORD *)(v87 + 12);
                        v104 = v103 & (v96 >> 8);
                        v105 = *(_DWORD *)(v94 + 4 * v104);
                        if (v105)
                        {
                          v106 = v94 + 4 * v95;
                          v107 = 1;
                          while (1)
                          {
                            v108 = (v105 - 1);
                            if (v13 == *(_QWORD *)(v106 + 16 * v108))
                              break;
                            v104 = (v104 + v107) & v103;
                            v105 = *(_DWORD *)(v94 + 4 * v104);
                            ++v107;
                            if (!v105)
                              goto LABEL_162;
                          }
                          a6 = *(unsigned int *)(v106 + 16 * v108 + 8) | ((unint64_t)*(unsigned __int8 *)(v106 + 16 * v108 + 12) << 32);
                          goto LABEL_159;
                        }
                      }
                    }
                  }
                }
              }
LABEL_162:
              if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
              {
                v111 = v86;
                v112 = (JSC::VM *)v83;
                v221 = v83;
                v225 = (JSC::CallFrame *)a3;
                v113 = v85;
                v114 = v84;
                OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v112, v13, (uint64_t)&v231);
                v86 = v111;
                v84 = v114;
                v83 = v221;
                a3 = (uint64_t)v225;
                v85 = v113;
                if ((OwnStaticPropertySlot & 1) != 0)
                  goto LABEL_75;
              }
              goto LABEL_163;
            }
            v118 = v86;
            v216 = v84;
            v218 = v85;
            v226 = (unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
            v219 = (*(uint64_t (**)(uint64_t, JSC::CallFrame *, unint64_t, uint64_t (**)(unint64_t)))(16 * v226[19] + 0x68))(v18, v9, v13, &v231);
            v223 = v83;
            if (*(_DWORD *)(v83 + 80))
            {
              v144 = *(_DWORD *)(v83 + 80);
              if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v216, 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
              if (*(_QWORD *)(v83 + 16))
                goto LABEL_95;
            }
            if ((v219 & 1) != 0)
              goto LABEL_75;
            if (BYTE2(v236[1]) == 3)
            {
              if (BYTE4(v236[1]))
                goto LABEL_95;
              v119 = *(unsigned __int8 *)(v18 + 5);
              if (v119 == 61)
                goto LABEL_231;
            }
            else
            {
              v119 = *(unsigned __int8 *)(v18 + 5);
              if (v119 == 61)
              {
                v84 = v216;
                v85 = v218;
                a3 = (uint64_t)v226;
                v86 = v118;
                if (BYTE2(v236[1]) == 1)
                  goto LABEL_95;
                goto LABEL_163;
              }
            }
            if (!v13)
              goto LABEL_231;
            if ((v119 - 50) < 0xFFFFFFF5)
              goto LABEL_231;
            v120 = *(_DWORD *)(v13 + 16);
            if ((v120 & 0x20) != 0)
              goto LABEL_231;
            v121 = *(unsigned int *)(v13 + 4);
            if (!(_DWORD)v121)
              goto LABEL_231;
            v122 = *(unsigned __int8 **)(v13 + 8);
            if ((v120 & 4) != 0)
            {
              v123 = *v122;
              if ((_DWORD)v121 == 1)
              {
LABEL_188:
                v84 = v216;
                v85 = v218;
                a3 = (uint64_t)v226;
                v86 = v118;
                if ((v123 - 48) < 0xA)
                  goto LABEL_95;
                goto LABEL_163;
              }
              if (v123 == 45)
              {
                v123 = v122[1];
                goto LABEL_192;
              }
              if ((v123 - 48) < 0xA)
                goto LABEL_203;
              if ((_DWORD)v121 == 8)
                goto LABEL_202;
            }
            else
            {
              v123 = *(unsigned __int16 *)v122;
              if ((_DWORD)v121 == 1)
                goto LABEL_188;
              if (v123 == 45)
              {
                v123 = *((unsigned __int16 *)v122 + 1);
LABEL_192:
                if ((v123 - 48) < 0xA)
                {
                  if ((_DWORD)v121 == 2)
                    goto LABEL_95;
                  goto LABEL_203;
                }
                if ((_DWORD)v121 != 9)
                  goto LABEL_231;
LABEL_202:
                if (v123 != 73)
                  goto LABEL_231;
                goto LABEL_203;
              }
              if ((v123 - 48) < 0xA || (_DWORD)v121 == 8 && v123 == 73)
                goto LABEL_203;
            }
            if ((_DWORD)v121 != 3 || v123 != 78)
              goto LABEL_231;
LABEL_203:
            v215 = v215 & 0xFFFFFF0000000000 | v121 | ((unint64_t)((v120 >> 2) & 1) << 32);
            JSC::jsToNumber(v122, v215);
            v125 = (v124 >> 52) & 0x7FF;
            if ((_DWORD)v125 == 2047)
            {
              if ((v124 & 0xFFFFFFFFFFFFFLL) != 0)
              {
                qmemcpy(__s, "NaN", sizeof(__s));
                v126 = v118;
              }
              else
              {
                if ((v124 & 0x8000000000000000) != 0)
                {
                  __s[0] = 45;
                  v132 = v218;
                }
                else
                {
                  v132 = __s;
                }
                *(_QWORD *)v132 = 0x7974696E69666E49;
                v126 = v132 + 8;
              }
              goto LABEL_217;
            }
            v127 = v124 & 0x7FFFFFFFFFFFFFFFLL;
            if ((v124 & 0x8000000000000000) != 0 && v127)
            {
              __s[0] = 45;
              v128 = v218;
            }
            else
            {
              if (!v127)
              {
                __s[0] = 48;
                v126 = v218;
                goto LABEL_217;
              }
              v128 = __s;
            }
            v129 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v124 & 0x800FFFFFFFFFFFFFLL, v125);
            v126 = WTF::dragonbox::detail::to_shortest(v129, v130, (uint64_t)v128, v131);
LABEL_217:
            *v126 = 0;
            v133 = strlen(__s);
            memcpy(&__dst, __s, v133);
            *((_BYTE *)&__dst + v133) = 0;
            v134 = *(unsigned int *)(v13 + 4);
            v135 = *(unsigned __int8 **)(v13 + 8);
            if ((*(_BYTE *)(v13 + 16) & 4) != 0)
            {
              if ((_DWORD)v134)
              {
                p_dst = &__dst;
                v141 = *(unsigned int *)(v13 + 4);
                do
                {
                  v143 = *(unsigned __int8 *)p_dst;
                  p_dst = (JSC::VM **)((char *)p_dst + 1);
                  v142 = v143;
                  if (!v143 || *v135 != v142)
                    goto LABEL_231;
                  ++v135;
                }
                while (--v141);
              }
            }
            else if ((_DWORD)v134)
            {
              v136 = &__dst;
              v137 = *(unsigned int *)(v13 + 4);
              while (1)
              {
                v139 = *(unsigned __int8 *)v136;
                v136 = (JSC::VM **)((char *)v136 + 1);
                v138 = v139;
                if (!v139 || *(unsigned __int16 *)v135 != v138)
                  break;
                v135 += 2;
                if (!--v137)
                  goto LABEL_229;
              }
LABEL_231:
              v84 = v216;
              v85 = v218;
              v83 = v223;
              a3 = (uint64_t)v226;
              v86 = v118;
              goto LABEL_163;
            }
LABEL_229:
            v84 = v216;
            v85 = v218;
            v83 = v223;
            a3 = (uint64_t)v226;
            v86 = v118;
            if (!*((_BYTE *)&__dst + v134))
              goto LABEL_95;
LABEL_163:
            if ((*(_WORD *)(a3 + 12) & 0x800) == 0)
            {
              v109 = *(_DWORD *)v18;
LABEL_165:
              v110 = *(_QWORD *)(16 * (v109 & 0xFFFFFFFE) + 0x30);
              if (!v110)
                v110 = *(_QWORD *)(v18 + 16);
              goto LABEL_167;
            }
            v109 = *(_DWORD *)v18;
            if (BYTE2(v236[1]) == 3)
              goto LABEL_165;
            v222 = v86;
            v116 = v84;
            v217 = v85;
            v117 = 16 * (v109 & 0xFFFFFFFE);
            if ((*(_WORD *)(v117 + 12) & 0x800) != 0)
            {
              v110 = (*(uint64_t (**)(uint64_t, JSC::CallFrame *))(16 * *(unsigned int *)(v117 + 76) + 0xB0))(v18, v9);
            }
            else
            {
              v110 = *(_QWORD *)(v117 + 48);
              if (!v110)
                v110 = *(_QWORD *)(v18 + 16);
            }
            if (*(_DWORD *)(v83 + 80))
            {
              v145 = *(_DWORD *)(v83 + 80);
              if ((v145 & 0x27) != 0 && (v145 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v116, 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
              v85 = v217;
              v84 = v116;
              v86 = v222;
              if (*(_QWORD *)(v83 + 16))
                goto LABEL_95;
            }
            else
            {
              v85 = v217;
              v84 = v116;
              v86 = v222;
            }
LABEL_167:
            if ((v110 & 0xFFFE000000000002) == 0)
            {
              v18 = v110;
              if (*(unsigned __int8 *)(v110 + 5) > 0x16u)
                continue;
            }
            goto LABEL_95;
          }
        }
        goto LABEL_393;
      }
LABEL_110:
      v75 = 0;
      LOBYTE(v73) = 0;
    }
    else
    {
      v75 = 0;
    }
    v76 = 0;
    goto LABEL_132;
  }
  if (!(_DWORD)v73)
  {
    v82 = 0;
    goto LABEL_391;
  }
  v187 = *(unsigned __int8 *)v72 - 48;
  if (v187 > 9 || v73 >= 2 && *(_BYTE *)v72 == 48)
  {
LABEL_390:
    v82 = 0;
    LOBYTE(v73) = 0;
LABEL_391:
    v188 = 0;
    goto LABEL_392;
  }
  v203 = v73 - 1;
  v204 = (unsigned __int8 *)v72 + 1;
  while (v203)
  {
    if (v187 > 0x19999999)
      goto LABEL_390;
    v205 = *v204 - 48;
    if (v205 > 9)
      goto LABEL_390;
    v82 = 0;
    LOBYTE(v73) = 0;
    v188 = 0;
    v52 = __CFADD__(v205, 10 * v187);
    v187 = v205 + 10 * v187;
    --v203;
    ++v204;
    if (v52)
      goto LABEL_392;
  }
  if (v187 == -1)
    v82 = 0;
  else
    v82 = v187 & 0xFFFFFF00;
  if (v187 == -1)
    LOBYTE(v73) = 0;
  else
    LOBYTE(v73) = v187;
  if (v187 == -1)
    v188 = 0;
  else
    v188 = 0x100000000;
LABEL_392:
  v76 = v73;
  if ((v188 & 0x100000000) == 0)
    goto LABEL_133;
LABEL_393:
  v189 = v76 | v82;
  v190 = *((_QWORD *)v9 + 7);
  v228 = (JSC::VMTraps *)(v190 + 64);
  v54 = 10;
  while (1)
  {
    v191 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    v192 = (*(uint64_t (**)(uint64_t, JSC::CallFrame *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v191 + 0x4C) + 0x70))(v10, v9, v189, &v231);
    v193 = v192;
    if (*(_DWORD *)(v190 + 80))
      break;
    if ((v192 & 1) != 0)
      goto LABEL_75;
LABEL_396:
    if (BYTE2(v236[1]) == 3)
    {
      if (BYTE4(v236[1]))
        goto LABEL_95;
      v194 = *(unsigned __int8 *)(v10 + 5);
      if (v194 == 61)
        goto LABEL_399;
    }
    else
    {
      v194 = *(unsigned __int8 *)(v10 + 5);
      if (v194 == 61)
      {
        if (BYTE2(v236[1]) == 1)
          goto LABEL_95;
        goto LABEL_399;
      }
    }
    if ((v194 - 39) <= 0xA)
    {
      if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
      {
        LOBYTE(__dst) = 0;
        v242 = 0;
        v201 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&__dst, a3, a4, (uint64_t)a5, a6, a7, a8);
        v200 = v202 ? v201 : 0;
      }
      else
      {
        v200 = *(_QWORD *)(v10 + 24);
      }
      if (v200 <= v189)
        goto LABEL_95;
    }
LABEL_399:
    if ((*(_WORD *)(v191 + 12) & 0x800) == 0 || BYTE2(v236[1]) == 3)
    {
      v195 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v195)
        v195 = *(_QWORD *)(v10 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v195 = (*(uint64_t (**)(uint64_t, JSC::CallFrame *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v10, v9);
      }
      else
      {
        v195 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
        if (!v195)
          v195 = *(_QWORD *)(v10 + 16);
      }
      if (*(_DWORD *)(v190 + 80))
      {
        v199 = *(_DWORD *)(v190 + 80);
        if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v228, 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
        if (*(_QWORD *)(v190 + 16))
          goto LABEL_95;
      }
    }
    if ((v195 & 0xFFFE000000000002) == 0)
    {
      v10 = v195;
      if (*(unsigned __int8 *)(v195 + 5) > 0x16u)
        continue;
    }
    goto LABEL_95;
  }
  v196 = *(_DWORD *)(v190 + 80);
  if ((v196 & 0x27) != 0 && (v196 & 0x20) == 0)
    JSC::VMTraps::handleTraps(v228, 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
  v197 = *(_QWORD *)(v190 + 16);
  if (v197)
    v198 = 1;
  else
    v198 = v193;
  if ((v198 & 1) == 0)
    goto LABEL_396;
  if (!v197)
    goto LABEL_75;
LABEL_72:
  v54 = 10;
LABEL_95:
  if (v238)
  {
    v65 = *(_DWORD *)(v237 + 4);
    if (!v65)
    {
      __break(0xC471u);
      JUMPOUT(0x19884F518);
    }
    *(_DWORD *)(v237 + 4) = v65 - 1;
  }
  v66 = v230;
  if (!*((_DWORD *)v230 + 20))
    goto LABEL_99;
  v78 = *((_DWORD *)v230 + 20);
  if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v230 + 64), 7u, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (!*((_QWORD *)v66 + 2))
LABEL_99:
    *((_QWORD *)a2 + *(int *)(v11 + 4)) = v54;
}

void JSC::LLInt::handleIteratorNextCheckpoint(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t this, int8x16_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSString *v9;
  JSC::JSGlobalObject *v10;
  int *v11;
  uint64_t v12;
  JSC::VMTraps *v13;
  uint64_t v14;
  unint64_t v15;
  JSC::VM *v16;
  unsigned int v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  JSC::JSString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  JSC::JSGlobalObject *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::VM *v51;
  JSC::JSGlobalObject *v52;
  char OwnStaticPropertySlot;
  int v54;
  _WORD *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  JSC::JSGlobalObject *v70;
  uint64_t v71;
  JSC::JSGlobalObject *v72;
  uint64_t v73;
  JSC::JSString *v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  BOOL v79;
  int v81;
  JSC::VM *v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int8x16_t **v91;
  unint64_t v92;
  JSC::JSString *v93;
  uint64_t v94;
  unsigned int v95;
  _BYTE *v96;
  unint64_t v97;
  uint64_t v98;
  JSC::JSString *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  JSC::JSGlobalObject *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  int v115;
  unsigned int v116;
  int v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  JSC::JSGlobalObject *v121;
  char v122;
  int v123;
  _WORD *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unsigned __int16 *v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  JSC::JSGlobalObject *v137;
  uint64_t v138;
  JSC::JSString *v139;
  unint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  BOOL v144;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  int8x16_t **v150;
  int v151;
  _WORD *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  _BYTE *v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  JSC::JSGlobalObject *v164;
  uint64_t v165;
  int v166;
  unsigned __int16 *v167;
  uint64_t v168;
  unsigned int v169;
  unsigned __int16 *v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  JSC::VMTraps *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  JSC::JSGlobalObject *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  unint64_t v190;
  int v191;
  unsigned int v192;
  int v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  JSC::JSGlobalObject *v200;
  JSC::JSGlobalObject *v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  JSC::JSGlobalObject *v205;
  JSC::JSGlobalObject *v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  unsigned __int8 *v213;
  int v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  unint64_t v220;
  size_t v221;
  char *v222;
  char *v223;
  int v224;
  uint64_t v225;
  unsigned __int8 *v226;
  JSC::VM **v227;
  uint64_t v228;
  int v229;
  int v230;
  JSC::VM **p_dst;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  uint64_t v238;
  JSC::JSGlobalObject *v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  JSC::JSGlobalObject *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  JSC::JSGlobalObject *v259;
  unint64_t v260;
  int v261;
  unsigned int v262;
  int v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  JSC::JSGlobalObject *v269;
  char v270;
  JSC::JSGlobalObject *v271;
  uint64_t v272;
  JSC::JSGlobalObject *v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unsigned __int8 *v277;
  int v278;
  unint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  char *v283;
  unint64_t v284;
  size_t v285;
  char *v286;
  char *v287;
  int v288;
  uint64_t v289;
  unsigned __int8 *v290;
  JSC::VM **v291;
  uint64_t v292;
  int v293;
  int v294;
  JSC::VM **v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  uint64_t v309;
  uint64_t Index;
  int v311;
  char v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int8x16_t **v316;
  int v317;
  _WORD *v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  unsigned int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  int8x16_t **v326;
  unsigned __int16 *v328;
  uint64_t v329;
  unsigned int v330;
  unsigned int v331;
  uint64_t v332;
  JSC::JSGlobalObject *v333;
  int v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  JSC::JSGlobalObject *v339;
  uint64_t v340;
  char v341;
  int v342;
  uint64_t v343;
  int v344;
  unint64_t v345;
  unint64_t v346;
  char v347;
  int v348;
  unsigned int v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  JSC::JSGlobalObject *v354;
  char v355;
  int v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  unint64_t v360;
  char v361;
  int v362;
  uint64_t v363;
  unsigned __int8 *v364;
  unsigned int v365;
  uint64_t v366;
  unsigned __int8 *v367;
  unsigned int v368;
  JSC::JSGlobalObject *v369;
  uint64_t v370;
  unsigned int *v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  char v375;
  int v376;
  _WORD *v377;
  uint64_t v378;
  unsigned int v379;
  uint64_t v380;
  unsigned int v381;
  unsigned __int16 *v383;
  uint64_t v384;
  unsigned int v385;
  unsigned int v386;
  uint64_t *v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  JSC::JSGlobalObject *v393;
  char v394;
  uint64_t v395;
  char v396;
  int v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  char v401;
  int v402;
  unint64_t v403;
  unint64_t v404;
  char v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  JSC::JSGlobalObject *v410;
  char v411;
  char v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  char v417;
  int v418;
  unint64_t v419;
  unint64_t v420;
  char v421;
  uint64_t v422;
  unsigned __int8 *v423;
  unsigned int v424;
  uint64_t v425;
  unsigned __int8 *v426;
  unsigned int v427;
  unsigned int v428;
  uint64_t v429;
  uint64_t v430;
  _DWORD *v431;
  int v432;
  int v433;
  uint64_t v435;
  unsigned __int8 *v436;
  unsigned int v437;
  unsigned int v438;
  uint64_t v439;
  unsigned __int8 *v440;
  unsigned int v441;
  uint64_t v442;
  uint64_t v443;
  _DWORD *v444;
  int v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  JSC::JSGlobalObject *v455;
  JSC::JSGlobalObject *v456;
  JSC::VMTraps *v457;
  JSC::VMTraps *v458;
  JSC::VMTraps *v459;
  JSC::VMTraps *v460;
  JSC::VMTraps *v461;
  JSC::VMTraps *v462;
  JSC::VMTraps *v463;
  JSC::VMTraps *v464;
  JSC::VMTraps *v465;
  JSC::VMTraps *v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  char v470;
  JSC::JSGlobalObject *v471;
  unint64_t v472;
  JSC::VMTraps *v473;
  JSC::VMTraps *v474;
  JSC::VMTraps *v475;
  JSC::VMTraps *v476;
  JSC::VMTraps *v477;
  JSC::VMTraps *v478;
  JSC::VMTraps *v479;
  JSC::VMTraps *v480;
  JSC::VMTraps *v481;
  JSC::JSString *v482;
  JSC::VM *v483;
  uint64_t (*v484)(unint64_t);
  uint64_t v485;
  unint64_t v486;
  JSC::JSString *v487;
  JSC::JSString *v488;
  _QWORD v489[2];
  uint64_t v490;
  char v491;
  int8x16_t **v492;
  uint64_t v493;
  JSC::VM *__dst;
  char v495;
  char __s[3];
  _BYTE v497[39];

  *(_QWORD *)&v497[23] = *MEMORY[0x1E0C80C00];
  v482 = (JSC::JSString *)this;
  v483 = a1;
  if (!*(_QWORD *)(a2 + 8 * *(int *)(a4 + 12)))
  {
    __break(0xC471u);
    JUMPOUT(0x198850FE4);
  }
  v9 = (JSC::JSString *)this;
  v10 = (JSC::JSGlobalObject *)a3;
  if ((this & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(this + 5) <= 0x16u)
  {
    JSC::throwTypeError(a3, &v483, (uint64_t)"Iterator result interface is not an object.", 44);
    return;
  }
  v11 = (int *)a4;
  v12 = a2;
  v13 = a1;
  v14 = *(int *)a4;
  if ((a5 & 3) != 1)
    goto LABEL_99;
  v15 = *(_QWORD *)(*((_QWORD *)a1 + 5244) + 1200);
  a7.i64[0] = 0xFFFFFFFF00000000;
  v486 = 0xFFFFFFFF00000000;
  LOBYTE(v490) = 0;
  v491 = 0;
  v492 = 0;
  v493 = 0;
  v488 = 0;
  memset(v489, 0, 13);
  v487 = (JSC::JSString *)this;
  v16 = *(JSC::VM **)(a3 + 56);
  v17 = *(unsigned __int8 *)(this + 5);
  if (v17 <= 0x16)
  {
    if (v17 != 2)
    {
LABEL_235:
      v163 = v14;
      v164 = v10;
      v165 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v482, (unint64_t)v10);
      if (!v165)
      {
        v68 = 10;
        v10 = v164;
        v14 = v163;
        goto LABEL_95;
      }
      v9 = (JSC::JSString *)v165;
      v16 = (JSC::VM *)*((_QWORD *)v164 + 7);
      v10 = v164;
      v14 = v163;
      goto LABEL_6;
    }
    v304 = v14;
    v305 = a3;
    v306 = *(_QWORD *)(a3 + 56);
    if (*(_QWORD *)(*((_QWORD *)v16 + 5244) + 1768) == v15)
    {
      v307 = *(_QWORD *)(this + 8);
      if ((v307 & 1) != 0)
        v308 = (unsigned int *)(this + 16);
      else
        v308 = (unsigned int *)(v307 + 4);
      v309 = *v308;
      if ((v309 & 0x80000000) != 0)
        Index = COERCE__INT64((double)v309) + 0x2000000000000;
      else
        Index = v309 | 0xFFFE000000000000;
      v311 = 14;
      goto LABEL_544;
    }
    if (!v15 || (v317 = *(_DWORD *)(v15 + 16), (v317 & 0x20) != 0))
    {
LABEL_583:
      v312 = 0;
LABEL_584:
      if (*(_DWORD *)(v306 + 80))
      {
        v334 = *(_DWORD *)(v306 + 80);
        if ((v334 & 0x27) != 0 && (v334 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v306 + 64), 7u, a3, a4, a5, this, v14, a9);
        if (*(_QWORD *)(v306 + 16))
        {
          v68 = 10;
          v10 = (JSC::JSGlobalObject *)v305;
          v14 = v304;
          goto LABEL_95;
        }
      }
      v10 = (JSC::JSGlobalObject *)v305;
      v14 = v304;
      if ((v312 & 1) != 0)
        goto LABEL_75;
      goto LABEL_235;
    }
    v318 = *(_WORD **)(v15 + 8);
    v319 = *(unsigned int *)(v15 + 4);
    if ((v317 & 4) == 0)
    {
      if ((_DWORD)v319)
      {
        v320 = (unsigned __int16)*v318 - 48;
        if (v320 <= 9 && (*v318 != 48 || v319 <= 1))
        {
          v328 = v318 + 1;
          v329 = v319 - 1;
          while (v329)
          {
            if (v320 > 0x19999999)
              goto LABEL_554;
            v330 = *v328 - 48;
            if (v330 > 9)
              goto LABEL_554;
            v321 = 0;
            LOBYTE(v319) = 0;
            v322 = 0;
            v66 = __CFADD__(v330, 10 * v320);
            v320 = v330 + 10 * v320;
            ++v328;
            --v329;
            if (v66)
              goto LABEL_582;
          }
          v322 = v320 & 0xFFFFFF00;
          v321 = 0x100000000;
          if (v320 == -1)
          {
            v321 = 0;
            LOBYTE(v319) = 0;
          }
          else
          {
            LOBYTE(v319) = v320;
          }
          if (v320 == -1)
            v322 = 0;
LABEL_582:
          v331 = v319;
          if ((v321 & 0x100000000) == 0)
            goto LABEL_583;
          goto LABEL_932;
        }
LABEL_554:
        v321 = 0;
        LOBYTE(v319) = 0;
      }
      else
      {
        v321 = 0;
      }
      v322 = 0;
      goto LABEL_582;
    }
    if ((_DWORD)v319)
    {
      v428 = *(unsigned __int8 *)v318 - 48;
      if (v428 <= 9 && (v319 < 2 || *(_BYTE *)v318 != 48))
      {
        v435 = v319 - 1;
        v436 = (unsigned __int8 *)v318 + 1;
        while (v435)
        {
          if (v428 > 0x19999999)
            goto LABEL_929;
          v437 = *v436 - 48;
          if (v437 > 9)
            goto LABEL_929;
          v331 = 0;
          LOBYTE(v319) = 0;
          v429 = 0;
          v66 = __CFADD__(v437, 10 * v428);
          v428 = v437 + 10 * v428;
          --v435;
          ++v436;
          if (v66)
            goto LABEL_931;
        }
        if (v428 == -1)
          v331 = 0;
        else
          v331 = v428 & 0xFFFFFF00;
        if (v428 == -1)
          LOBYTE(v319) = 0;
        else
          LOBYTE(v319) = v428;
        if (v428 == -1)
          v429 = 0;
        else
          v429 = 0x100000000;
LABEL_931:
        v322 = v319;
        if ((v429 & 0x100000000) == 0)
          goto LABEL_583;
LABEL_932:
        a3 = v322 | v331;
        v430 = *(_QWORD *)(this + 8);
        if ((v430 & 1) != 0)
          v431 = (_DWORD *)(this + 16);
        else
          v431 = (_DWORD *)(v430 + 4);
        if (*v431 > a3)
        {
          Index = JSC::JSString::getIndex((JSC::JSString *)this, v10, a3, a4, a5, this, v14, a9, a7);
          if (!*(_DWORD *)(v306 + 80))
            goto LABEL_937;
          v432 = *(_DWORD *)(v306 + 80);
          if ((v432 & 0x27) != 0 && (v432 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v306 + 64), 7u, a3, a4, a5, this, v14, a9);
          if (!*(_QWORD *)(v306 + 16))
          {
LABEL_937:
            v311 = 10;
LABEL_544:
            v484 = (uint64_t (*)(unint64_t))Index;
            LODWORD(v486) = v311;
            v488 = 0;
            v312 = 1;
            BYTE1(v489[1]) = 1;
            goto LABEL_584;
          }
        }
        goto LABEL_583;
      }
LABEL_929:
      v331 = 0;
      LOBYTE(v319) = 0;
    }
    else
    {
      v331 = 0;
    }
    v429 = 0;
    goto LABEL_931;
  }
LABEL_6:
  v18 = (char *)v9 + 6;
  v19 = v15 >> 4;
  v20 = (uint64_t)v9;
  if ((*((_BYTE *)v9 + 6) & 8) == 0)
  {
    v21 = v9;
    do
    {
      v22 = *(_DWORD *)v21 & 0xFFFFFFFE;
      v23 = 16 * v22;
      if (!(_DWORD)v19 || (v19 & ~*(_DWORD *)(16 * v22 + 0x20)) != 0)
        goto LABEL_35;
      v24 = *(_QWORD *)(16 * v22 + 0x58);
      if (!v24)
      {
        v25 = *(_QWORD *)(16 * v22 + 0x40);
        if (!v25 || *(_BYTE *)(v25 + 5) != 1 && *(_DWORD *)(v25 + 80) < 2u)
          goto LABEL_35;
        v473 = (JSC::VMTraps *)v11;
        v477 = v13;
        v26 = v19;
        v27 = v12;
        v28 = v15;
        v29 = v14;
        v30 = v16;
        v31 = v10;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v23, v16, 1, (const JSC::PropertyTable *)a4, a5, this, v14, a9);
        v16 = v30;
        v14 = v29;
        v15 = v28;
        v12 = v27;
        v19 = v26;
        v11 = (int *)v473;
        v13 = v477;
        v10 = v31;
        if (!v24)
          goto LABEL_35;
      }
      if (!*(_DWORD *)(v24 + 24))
        goto LABEL_35;
      v32 = *(_QWORD *)(v24 + 16);
      v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      v34 = *(unsigned int *)(v24 + 8);
      v35 = *(_DWORD *)(v15 + 16);
      if ((v32 & 1) != 0)
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v15 + 32);
        v36 = *(_DWORD *)(v24 + 12);
        v37 = (v35 >> 8) & *(_QWORD *)&v36;
        v38 = *(unsigned __int8 *)(v33 + v37);
        if (!*(_BYTE *)(v33 + v37))
          goto LABEL_35;
        v39 = v33 + v34;
        v40 = 1;
        while (1)
        {
          v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
          if (v15 == (v41 & 0xFFFFFFFFFFFFLL))
            break;
          v37 = ((_DWORD)v37 + v40) & v36;
          v38 = *(unsigned __int8 *)(v33 + v37);
          ++v40;
          if (!*(_BYTE *)(v33 + v37))
            goto LABEL_35;
        }
        this = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
      }
      else
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v15 + 32);
        v42 = *(_DWORD *)(v24 + 12);
        v43 = v42 & (v35 >> 8);
        v44 = *(_DWORD *)(v33 + 4 * v43);
        if (!v44)
          goto LABEL_35;
        v45 = v33 + 4 * v34;
        v46 = 1;
        while (1)
        {
          v47 = (v44 - 1);
          if (v15 == *(_QWORD *)(v45 + 16 * v47))
            break;
          v43 = (v43 + v46) & v42;
          v44 = *(_DWORD *)(v33 + 4 * v43);
          ++v46;
          if (!v44)
            goto LABEL_35;
        }
        this = *(unsigned int *)(v45 + 16 * v47 + 8) | ((unint64_t)*(unsigned __int8 *)(v45 + 16 * v47 + 12) << 32);
      }
      if ((_DWORD)this != -1)
      {
        a5 = HIDWORD(this);
        if ((int)this <= 63)
        {
          v60 = (uint64_t)v21 + 16;
          v61 = this << 32;
        }
        else
        {
          v60 = *((_QWORD *)v21 + 1) - 8;
          v61 = 0x3F00000000 - (this << 32);
        }
        a4 = *(_QWORD *)(v60 + (v61 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_58;
        v62 = *(unsigned __int8 *)(a4 + 5);
        if (v62 == 5)
        {
          v69 = v14;
          v70 = v10;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v21, (uint64_t)v16, (uint64_t)&v484, a4, SHIDWORD(this), this);
          v14 = v69;
          v10 = v70;
          goto LABEL_75;
        }
        if (v62 != 6)
        {
LABEL_58:
          v484 = (uint64_t (*)(unint64_t))a4;
          v488 = v21;
          v486 = __PAIR64__(this, HIDWORD(this));
          LOWORD(v489[1]) = 257;
          goto LABEL_75;
        }
        v88 = *(_DWORD *)(v23 + 16) & 3;
        v89 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v91 = *(int8x16_t ***)(a4 + 24);
          v90 = *(_QWORD *)(a4 + 32);
          v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v485 = v89;
          LODWORD(v486) = HIDWORD(this);
          v488 = v21;
          BYTE1(v489[1]) = 3;
          if (v88 != 2)
            LOBYTE(v489[1]) = 1;
          BYTE3(v489[1]) = 1;
          v492 = v91;
          v493 = v90;
          goto LABEL_75;
        }
        v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v485 = v89;
        LODWORD(v486) = HIDWORD(this);
        v488 = v21;
        BYTE1(v489[1]) = 3;
        if (v88 == 2)
          goto LABEL_75;
        goto LABEL_394;
      }
LABEL_35:
      if ((*v18 & 0x20) != 0)
      {
        v48 = v15;
        v49 = v14;
        v468 = v19;
        v50 = v12;
        v51 = v16;
        v52 = v10;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v21, v16, v48, (uint64_t)&v484);
        v16 = v51;
        v12 = v50;
        v19 = v468;
        v14 = v49;
        v15 = v48;
        v10 = v52;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_75;
      }
      v20 = *(_QWORD *)(v23 + 48);
      if (!v20)
        v20 = *((_QWORD *)v21 + 2);
      if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) < 0x17u)
      {
        if (!v15)
          goto LABEL_73;
        v54 = *(_DWORD *)(v15 + 16);
        if ((v54 & 0x20) != 0)
          goto LABEL_73;
        v55 = *(_WORD **)(v15 + 8);
        v56 = *(unsigned int *)(v15 + 4);
        if ((v54 & 4) == 0)
        {
          if ((_DWORD)v56)
          {
            v57 = (unsigned __int16)*v55 - 48;
            if (v57 <= 9 && (*v55 != 48 || v56 <= 1))
            {
              v63 = v55 + 1;
              v64 = v56 - 1;
              while (v64)
              {
                if (v57 > 0x19999999)
                  goto LABEL_50;
                v65 = *v63 - 48;
                if (v65 > 9)
                  goto LABEL_50;
                v58 = 0;
                LOBYTE(v56) = 0;
                v59 = 0;
                v66 = __CFADD__(v65, 10 * v57);
                v57 = v65 + 10 * v57;
                ++v63;
                --v64;
                if (v66)
                  goto LABEL_72;
              }
              v59 = v57 & 0xFFFFFF00;
              v58 = 0x100000000;
              if (v57 == -1)
              {
                v58 = 0;
                LOBYTE(v56) = 0;
              }
              else
              {
                LOBYTE(v56) = v57;
              }
              if (v57 == -1)
                v59 = 0;
LABEL_72:
              v67 = v56;
              if ((v58 & 0x100000000) == 0)
                goto LABEL_73;
LABEL_615:
              v337 = *((_QWORD *)v10 + 7);
              v465 = (JSC::VMTraps *)(v337 + 64);
              v467 = v14;
              v68 = 10;
              v471 = (JSC::JSGlobalObject *)(v59 | v67);
              while (2)
              {
                v338 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
                v339 = v10;
                v341 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                         * *(unsigned int *)(v338 + 0x4C)
                                                                                         + 0x70))(v9, v10);
                if (*(_DWORD *)(v337 + 80))
                {
                  v344 = *(_DWORD *)(v337 + 80);
                  if ((v344 & 0x27) != 0 && (v344 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v465, 7u, a3, a4, a5, this, v340, a9);
                  if (*(_QWORD *)(v337 + 16))
                  {
                    v10 = v339;
LABEL_656:
                    v14 = v467;
                    goto LABEL_95;
                  }
                }
                v10 = v339;
                v14 = v467;
                if ((v341 & 1) != 0)
                  goto LABEL_75;
                if (BYTE2(v489[1]) == 3)
                {
                  if (BYTE4(v489[1]))
                  {
                    v10 = v339;
                    goto LABEL_656;
                  }
                  v342 = *((unsigned __int8 *)v9 + 5);
                  v10 = v339;
                  v14 = v467;
                  if (v342 != 61)
                  {
LABEL_620:
                    if ((v342 - 39) <= 0xA)
                    {
                      if ((*((_BYTE *)v9 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v495 = 0;
                        v346 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)&__dst, a3, a4, a5, this, v14, a9);
                        v345 = v347 ? v346 : 0;
                      }
                      else
                      {
                        v345 = *((_QWORD *)v9 + 3);
                      }
                      v14 = v467;
                      v10 = v339;
                      if (v345 <= (unint64_t)v471)
                        goto LABEL_95;
                    }
                  }
                }
                else
                {
                  v342 = *((unsigned __int8 *)v9 + 5);
                  if (v342 != 61)
                    goto LABEL_620;
                  if (BYTE2(v489[1]) == 1)
                    goto LABEL_95;
                }
                if ((*(_WORD *)(v338 + 12) & 0x800) == 0 || BYTE2(v489[1]) == 3)
                {
                  v343 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                  if (!v343)
                    v343 = *((_QWORD *)v9 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v343 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v9, v339);
                  }
                  else
                  {
                    v343 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                    if (!v343)
                      v343 = *((_QWORD *)v9 + 2);
                  }
                  if (*(_DWORD *)(v337 + 80))
                  {
                    v348 = *(_DWORD *)(v337 + 80);
                    if ((v348 & 0x27) != 0 && (v348 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v465, 7u, a3, a4, a5, this, v14, a9);
                    v10 = v339;
                    v14 = v467;
                    if (*(_QWORD *)(v337 + 16))
                      goto LABEL_95;
                  }
                  else
                  {
                    v10 = v339;
                    v14 = v467;
                  }
                }
                if ((v343 & 0xFFFE000000000002) != 0)
                  goto LABEL_95;
                v9 = (JSC::JSString *)v343;
                a3 = (uint64_t)v471;
                if (*(unsigned __int8 *)(v343 + 5) <= 0x16u)
                  goto LABEL_95;
                continue;
              }
            }
LABEL_50:
            v58 = 0;
            LOBYTE(v56) = 0;
          }
          else
          {
            v58 = 0;
          }
          v59 = 0;
          goto LABEL_72;
        }
        if ((_DWORD)v56)
        {
          v335 = *(unsigned __int8 *)v55 - 48;
          if (v335 <= 9 && (v56 < 2 || *(_BYTE *)v55 != 48))
          {
            v363 = v56 - 1;
            v364 = (unsigned __int8 *)v55 + 1;
            while (v363)
            {
              if (v335 > 0x19999999)
                goto LABEL_612;
              v365 = *v364 - 48;
              if (v365 > 9)
                goto LABEL_612;
              v67 = 0;
              LOBYTE(v56) = 0;
              v336 = 0;
              v66 = __CFADD__(v365, 10 * v335);
              v335 = v365 + 10 * v335;
              --v363;
              ++v364;
              if (v66)
                goto LABEL_614;
            }
            if (v335 == -1)
              v67 = 0;
            else
              v67 = v335 & 0xFFFFFF00;
            if (v335 == -1)
              LOBYTE(v56) = 0;
            else
              LOBYTE(v56) = v335;
            if (v335 == -1)
              v336 = 0;
            else
              v336 = 0x100000000;
            goto LABEL_614;
          }
LABEL_612:
          v67 = 0;
          LOBYTE(v56) = 0;
        }
        else
        {
          v67 = 0;
        }
        v336 = 0;
LABEL_614:
        v59 = v56;
        if ((v336 & 0x100000000) == 0)
          goto LABEL_73;
        goto LABEL_615;
      }
      v18 = (_BYTE *)(v20 + 6);
      v21 = (JSC::JSString *)v20;
    }
    while ((*(_BYTE *)(v20 + 6) & 8) == 0);
  }
  if (!v15)
    goto LABEL_263;
  v151 = *(_DWORD *)(v15 + 16);
  if ((v151 & 0x20) != 0)
    goto LABEL_263;
  v152 = *(_WORD **)(v15 + 8);
  v153 = *(unsigned int *)(v15 + 4);
  if ((v151 & 4) == 0)
  {
    if ((_DWORD)v153)
    {
      v154 = (unsigned __int16)*v152 - 48;
      if (v154 <= 9 && (*v152 != 48 || v153 <= 1))
      {
        v167 = v152 + 1;
        v168 = v153 - 1;
        while (v168)
        {
          if (v154 > 0x19999999)
            goto LABEL_225;
          v169 = *v167 - 48;
          if (v169 > 9)
            goto LABEL_225;
          v155 = 0;
          LOBYTE(v153) = 0;
          v156 = 0;
          v66 = __CFADD__(v169, 10 * v154);
          v154 = v169 + 10 * v154;
          ++v167;
          --v168;
          if (v66)
            goto LABEL_262;
        }
        v156 = v154 & 0xFFFFFF00;
        v155 = 0x100000000;
        if (v154 == -1)
        {
          v155 = 0;
          LOBYTE(v153) = 0;
        }
        else
        {
          LOBYTE(v153) = v154;
        }
        if (v154 == -1)
          v156 = 0;
LABEL_262:
        v173 = v153;
        if ((v155 & 0x100000000) == 0)
        {
LABEL_263:
          a3 = *((_QWORD *)v10 + 7);
          v174 = (JSC::VMTraps *)(a3 + 64);
          v175 = &__s[1];
          a4 = (uint64_t)v497;
          v68 = 10;
          while (1)
          {
            v176 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
            if ((*(_BYTE *)(v20 + 6) & 8) == 0)
            {
              if ((_DWORD)v19 && (v19 & ~*(_DWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x20)) == 0)
              {
                v177 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x58);
                if (v177)
                  goto LABEL_1014;
                v178 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x40);
                if (v178 && (*(_BYTE *)(v178 + 5) == 1 || *(_DWORD *)(v178 + 80) >= 2u))
                {
                  v457 = v174;
                  v461 = (JSC::VMTraps *)v175;
                  v467 = v14;
                  v455 = (JSC::JSGlobalObject *)a3;
                  v179 = v10;
                  v180 = a4;
                  JSC::Structure::materializePropertyTable((JSC::Structure *)v176, (JSC::VM *)a3, 1, (const JSC::PropertyTable *)a4, a5, this, v14, a9);
                  a4 = v180;
                  v175 = (char *)v461;
                  v14 = v467;
                  a3 = (uint64_t)v455;
                  v174 = v457;
                  v10 = v179;
                  if (v177)
                  {
LABEL_1014:
                    if (*(_DWORD *)(v177 + 24))
                    {
                      v181 = *(_QWORD *)(v177 + 16);
                      v182 = v181 & 0xFFFFFFFFFFFFFFFELL;
                      v183 = *(unsigned int *)(v177 + 8);
                      v184 = *(_DWORD *)(v15 + 16);
                      if ((v181 & 1) != 0)
                      {
                        if ((v184 & 0x20) != 0)
                          v184 = *(_DWORD *)(v15 + 32);
                        v185 = *(_DWORD *)(v177 + 12);
                        v186 = (v184 >> 8) & *(_QWORD *)&v185;
                        v187 = *(unsigned __int8 *)(v182 + v186);
                        if (*(_BYTE *)(v182 + v186))
                        {
                          v188 = v182 + v183;
                          v189 = 1;
                          while (1)
                          {
                            v190 = *(_QWORD *)(v188 + 8 * (v187 - 1));
                            if (v15 == (v190 & 0xFFFFFFFFFFFFLL))
                              break;
                            v186 = ((_DWORD)v186 + v189) & v185;
                            v187 = *(unsigned __int8 *)(v182 + v186);
                            ++v189;
                            if (!*(_BYTE *)(v182 + v186))
                              goto LABEL_292;
                          }
                          this = (v190 >> 16) & 0xFF00000000 | HIBYTE(v190);
LABEL_289:
                          if ((_DWORD)this != -1)
                          {
                            v238 = v14;
                            v239 = v10;
                            a5 = HIDWORD(this);
                            if ((int)this <= 63)
                            {
                              v240 = v20 + 16;
                              v241 = this << 32;
                            }
                            else
                            {
                              v240 = *(_QWORD *)(v20 + 8) - 8;
                              v241 = 0x3F00000000 - (this << 32);
                            }
                            a4 = *(_QWORD *)(v240 + (v241 >> 29));
                            if ((a4 & 0xFFFE000000000002) != 0)
                            {
LABEL_391:
                              v484 = (uint64_t (*)(unint64_t))a4;
                              v488 = (JSC::JSString *)v20;
                              v486 = __PAIR64__(this, HIDWORD(this));
                              LOWORD(v489[1]) = 257;
                            }
                            else
                            {
                              v242 = *(unsigned __int8 *)(a4 + 5);
                              if (v242 != 5)
                              {
                                if (v242 != 6)
                                  goto LABEL_391;
                                v313 = *(_DWORD *)(v176 + 16) & 3;
                                v314 = *(_QWORD *)(a4 + 16);
                                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                       * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                                {
                                  v316 = *(int8x16_t ***)(a4 + 24);
                                  v315 = *(_QWORD *)(a4 + 32);
                                  v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                  v485 = v314;
                                  LODWORD(v486) = HIDWORD(this);
                                  v488 = (JSC::JSString *)v20;
                                  BYTE1(v489[1]) = 3;
                                  if (v313 != 2)
                                    LOBYTE(v489[1]) = 1;
                                  BYTE3(v489[1]) = 1;
                                  v492 = v316;
                                  v493 = v315;
                                  goto LABEL_404;
                                }
                                v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
                                v485 = v314;
                                LODWORD(v486) = HIDWORD(this);
                                v488 = (JSC::JSString *)v20;
                                BYTE1(v489[1]) = 3;
                                if (v313 == 2)
                                {
LABEL_75:
                                  if (BYTE1(v489[1]) == 1)
                                  {
                                    v68 = (uint64_t)v484;
                                  }
                                  else
                                  {
                                    v71 = v14;
                                    if (BYTE1(v489[1]) == 2)
                                    {
                                      v72 = v10;
                                      v73 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v484, v10, a3, a4, a5, this, v14, a9);
                                    }
                                    else
                                    {
                                      v74 = v488;
                                      v75 = *(_QWORD *)(16 * (*(_DWORD *)v488 & 0xFFFFFFFE) + 0x28);
                                      if ((v486 & 0x20) != 0)
                                        v74 = v487;
                                      if (BYTE3(v489[1]) != 1)
                                        goto LABEL_93;
                                      if (((unint64_t)v74 & 0xFFFE000000000002) != 0)
                                        goto LABEL_606;
                                      v76 = *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C);
                                      v77 = *(_DWORD *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C) != 0;
                                      v78 = 16 * v76;
                                      if ((_DWORD)v76)
                                        v79 = v492 == (int8x16_t **)v78;
                                      else
                                        v79 = 1;
                                      if (!v79)
                                      {
                                        do
                                        {
                                          v78 = *(_QWORD *)(v78 + 16);
                                          v77 = v78 != 0;
                                        }
                                        while ((int8x16_t **)v78 != v492 && v78 != 0);
                                      }
                                      if (!v77)
                                      {
LABEL_606:
                                        __dst = (JSC::VM *)*((_QWORD *)v10 + 7);
                                        v72 = v10;
                                        v73 = JSC::throwDOMAttributeGetterTypeError(v75, &__dst, v492, (WTF::StringImpl *)v15);
                                      }
                                      else
                                      {
LABEL_93:
                                        v72 = v10;
                                        v73 = v484(v75);
                                      }
                                    }
                                    v10 = v72;
                                    v68 = v73;
                                    v14 = v71;
                                  }
                                  goto LABEL_95;
                                }
LABEL_394:
                                LOBYTE(v489[1]) = 1;
                                goto LABEL_75;
                              }
                              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v20, a3, (uint64_t)&v484, a4, SHIDWORD(this), this);
                            }
LABEL_404:
                            v10 = v239;
                            v14 = v238;
                            goto LABEL_75;
                          }
                        }
                      }
                      else
                      {
                        if ((v184 & 0x20) != 0)
                          v184 = *(_DWORD *)(v15 + 32);
                        v191 = *(_DWORD *)(v177 + 12);
                        v192 = v191 & (v184 >> 8);
                        v193 = *(_DWORD *)(v182 + 4 * v192);
                        if (v193)
                        {
                          v194 = v182 + 4 * v183;
                          v195 = 1;
                          while (1)
                          {
                            v196 = (v193 - 1);
                            if (v15 == *(_QWORD *)(v194 + 16 * v196))
                              break;
                            v192 = (v192 + v195) & v191;
                            v193 = *(_DWORD *)(v182 + 4 * v192);
                            ++v195;
                            if (!v193)
                              goto LABEL_292;
                          }
                          this = *(unsigned int *)(v194 + 16 * v196 + 8) | ((unint64_t)*(unsigned __int8 *)(v194 + 16 * v196 + 12) << 32);
                          goto LABEL_289;
                        }
                      }
                    }
                  }
                }
              }
LABEL_292:
              if ((*(_BYTE *)(v20 + 6) & 0x20) != 0)
              {
                v448 = v176;
                v450 = a4;
                v458 = v174;
                v462 = (JSC::VMTraps *)v175;
                v199 = v14;
                v200 = (JSC::JSGlobalObject *)a3;
                v201 = v10;
                v202 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, (JSC::VM *)a3, v15, (uint64_t)&v484);
                v174 = v458;
                v175 = (char *)v462;
                a3 = (uint64_t)v200;
                v14 = v199;
                v10 = v201;
                v176 = v448;
                a4 = v450;
                if ((v202 & 1) != 0)
                  goto LABEL_75;
              }
              goto LABEL_293;
            }
            v452 = (char *)a4;
            v453 = v12;
            v464 = (JSC::VMTraps *)v175;
            v467 = v14;
            v474 = (JSC::VMTraps *)v11;
            v479 = v13;
            v469 = v19;
            v460 = v174;
            v449 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
            v206 = v10;
            v207 = a3;
            v209 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v449 + 0x4C) + 0x68))(v20, v10, v15, &v484);
            v456 = (JSC::JSGlobalObject *)v207;
            if (*(_DWORD *)(v207 + 80))
            {
              v236 = *(_DWORD *)(v207 + 80);
              if ((v236 & 0x27) != 0 && (v236 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v460, 7u, a3, a4, a5, this, v208, a9);
              if (*(_QWORD *)(v207 + 16))
              {
                v10 = v206;
                goto LABEL_834;
              }
            }
            v10 = v206;
            v14 = v467;
            v12 = v453;
            if ((v209 & 1) != 0)
              goto LABEL_75;
            if (BYTE2(v489[1]) == 3)
            {
              if (BYTE4(v489[1]))
              {
LABEL_888:
                v10 = v206;
                goto LABEL_834;
              }
              v210 = *(unsigned __int8 *)(v20 + 5);
              if (v210 == 61)
              {
LABEL_364:
                v174 = v460;
                v176 = v449;
                v10 = v206;
                goto LABEL_365;
              }
            }
            else
            {
              v210 = *(unsigned __int8 *)(v20 + 5);
              if (v210 == 61)
              {
                a3 = (uint64_t)v456;
                v174 = v460;
                v176 = v449;
                a4 = (uint64_t)v452;
                v10 = v206;
                v14 = v467;
                v19 = v469;
                v12 = v453;
                v175 = (char *)v464;
                if (BYTE2(v489[1]) == 1)
                  goto LABEL_95;
                goto LABEL_293;
              }
            }
            if (!v15)
              goto LABEL_364;
            if ((v210 - 50) < 0xFFFFFFF5)
              goto LABEL_364;
            v211 = *(_DWORD *)(v15 + 16);
            if ((v211 & 0x20) != 0)
              goto LABEL_364;
            v212 = *(unsigned int *)(v15 + 4);
            if (!(_DWORD)v212)
              goto LABEL_364;
            v213 = *(unsigned __int8 **)(v15 + 8);
            if ((v211 & 4) != 0)
            {
              v214 = *v213;
              if ((_DWORD)v212 == 1)
              {
LABEL_318:
                a3 = (uint64_t)v456;
                v174 = v460;
                v176 = v449;
                a4 = (uint64_t)v452;
                v10 = v206;
                v14 = v467;
                v19 = v469;
                v12 = v453;
                v175 = (char *)v464;
                if ((v214 - 48) < 0xA)
                  goto LABEL_95;
                goto LABEL_293;
              }
              if (v214 == 45)
              {
                v214 = v213[1];
                goto LABEL_322;
              }
              if ((v214 - 48) < 0xA)
                goto LABEL_333;
              if ((_DWORD)v212 == 8)
                goto LABEL_332;
            }
            else
            {
              v214 = *(unsigned __int16 *)v213;
              if ((_DWORD)v212 == 1)
                goto LABEL_318;
              if (v214 == 45)
              {
                v214 = *((unsigned __int16 *)v213 + 1);
LABEL_322:
                if ((v214 - 48) < 0xA)
                {
                  if ((_DWORD)v212 == 2)
                    goto LABEL_888;
                  goto LABEL_333;
                }
                if ((_DWORD)v212 != 9)
                  goto LABEL_364;
LABEL_332:
                if (v214 != 73)
                  goto LABEL_364;
                goto LABEL_333;
              }
              if ((v214 - 48) < 0xA || (_DWORD)v212 == 8 && v214 == 73)
                goto LABEL_333;
            }
            if ((_DWORD)v212 != 3 || v214 != 78)
              goto LABEL_364;
LABEL_333:
            v446 = v446 & 0xFFFFFF0000000000 | v212 | ((unint64_t)((v211 >> 2) & 1) << 32);
            JSC::jsToNumber(v213, v446);
            v216 = (v215 >> 52) & 0x7FF;
            if ((_DWORD)v216 == 2047)
            {
              if ((v215 & 0xFFFFFFFFFFFFFLL) != 0)
              {
                qmemcpy(__s, "NaN", sizeof(__s));
                v217 = v452;
              }
              else
              {
                if ((v215 & 0x8000000000000000) != 0)
                {
                  __s[0] = 45;
                  v223 = (char *)v464;
                }
                else
                {
                  v223 = __s;
                }
                *(_QWORD *)v223 = 0x7974696E69666E49;
                v217 = v223 + 8;
              }
              goto LABEL_347;
            }
            v218 = v215 & 0x7FFFFFFFFFFFFFFFLL;
            if ((v215 & 0x8000000000000000) != 0 && v218)
            {
              __s[0] = 45;
              v219 = (char *)v464;
            }
            else
            {
              if (!v218)
              {
                __s[0] = 48;
                v217 = (char *)v464;
                goto LABEL_347;
              }
              v219 = __s;
            }
            v220 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v215 & 0x800FFFFFFFFFFFFFLL, v216);
            v217 = WTF::dragonbox::detail::to_shortest(v220, v221, (uint64_t)v219, v222);
LABEL_347:
            *v217 = 0;
            v224 = strlen(__s);
            memcpy(&__dst, __s, v224);
            *((_BYTE *)&__dst + v224) = 0;
            v225 = *(unsigned int *)(v15 + 4);
            v226 = *(unsigned __int8 **)(v15 + 8);
            if ((*(_BYTE *)(v15 + 16) & 4) != 0)
            {
              if ((_DWORD)v225)
              {
                p_dst = &__dst;
                v232 = *(unsigned int *)(v15 + 4);
                do
                {
                  v234 = *(unsigned __int8 *)p_dst;
                  p_dst = (JSC::VM **)((char *)p_dst + 1);
                  v233 = v234;
                  if (!v234 || *v226 != v233)
                    goto LABEL_361;
                  ++v226;
                }
                while (--v232);
              }
            }
            else if ((_DWORD)v225)
            {
              v227 = &__dst;
              v228 = *(unsigned int *)(v15 + 4);
              while (1)
              {
                v230 = *(unsigned __int8 *)v227;
                v227 = (JSC::VM **)((char *)v227 + 1);
                v229 = v230;
                if (!v230 || *(unsigned __int16 *)v226 != v229)
                  break;
                v226 += 2;
                if (!--v228)
                  goto LABEL_359;
              }
LABEL_361:
              v174 = v460;
              v176 = v449;
              v10 = v206;
LABEL_365:
              v14 = v467;
              v19 = v469;
              v12 = v453;
              a3 = (uint64_t)v456;
              v175 = (char *)v464;
              a4 = (uint64_t)v452;
              goto LABEL_293;
            }
LABEL_359:
            v235 = *((unsigned __int8 *)&__dst + v225);
            a3 = (uint64_t)v456;
            v174 = v460;
            v176 = v449;
            a4 = (uint64_t)v452;
            v10 = v206;
            v14 = v467;
            v19 = v469;
            v12 = v453;
            v175 = (char *)v464;
            if (!v235)
              goto LABEL_95;
LABEL_293:
            if ((*(_WORD *)(v176 + 12) & 0x800) == 0)
            {
              v197 = *(_DWORD *)v20;
LABEL_295:
              v198 = *(_QWORD *)(16 * (v197 & 0xFFFFFFFE) + 0x30);
              if (!v198)
                v198 = *(_QWORD *)(v20 + 16);
              goto LABEL_297;
            }
            v197 = *(_DWORD *)v20;
            if (BYTE2(v489[1]) == 3)
              goto LABEL_295;
            v451 = a4;
            v459 = v174;
            v463 = (JSC::VMTraps *)v175;
            v203 = a3;
            v478 = v13;
            v204 = v14;
            v205 = v10;
            if ((*(_WORD *)(16 * (v197 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v198 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (v197 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v20, v10);
            }
            else
            {
              v198 = *(_QWORD *)(16 * (v197 & 0xFFFFFFFE) + 0x30);
              if (!v198)
                v198 = *(_QWORD *)(v20 + 16);
            }
            if (*(_DWORD *)(v203 + 80))
            {
              v237 = *(_DWORD *)(v203 + 80);
              if ((v237 & 0x27) != 0 && (v237 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v459, 7u, a3, a4, a5, this, v14, a9);
              a3 = v203;
              v174 = v459;
              v175 = (char *)v463;
              v10 = v205;
              v14 = v204;
              v13 = v478;
              a4 = v451;
              if (*(_QWORD *)(v203 + 16))
                goto LABEL_95;
            }
            else
            {
              v174 = v459;
              v175 = (char *)v463;
              v10 = v205;
              v14 = v204;
              v13 = v478;
              a3 = v203;
              a4 = v451;
            }
LABEL_297:
            if ((v198 & 0xFFFE000000000002) == 0)
            {
              v20 = v198;
              if (*(unsigned __int8 *)(v198 + 5) > 0x16u)
                continue;
            }
            goto LABEL_95;
          }
        }
        goto LABEL_790;
      }
LABEL_225:
      v155 = 0;
      LOBYTE(v153) = 0;
    }
    else
    {
      v155 = 0;
    }
    v156 = 0;
    goto LABEL_262;
  }
  if (!(_DWORD)v153)
  {
    v173 = 0;
    goto LABEL_788;
  }
  v389 = *(unsigned __int8 *)v152 - 48;
  if (v389 > 9 || v153 >= 2 && *(_BYTE *)v152 == 48)
  {
LABEL_787:
    v173 = 0;
    LOBYTE(v153) = 0;
LABEL_788:
    v390 = 0;
    goto LABEL_789;
  }
  v422 = v153 - 1;
  v423 = (unsigned __int8 *)v152 + 1;
  while (v422)
  {
    if (v389 > 0x19999999)
      goto LABEL_787;
    v424 = *v423 - 48;
    if (v424 > 9)
      goto LABEL_787;
    v173 = 0;
    LOBYTE(v153) = 0;
    v390 = 0;
    v66 = __CFADD__(v424, 10 * v389);
    v389 = v424 + 10 * v389;
    --v422;
    ++v423;
    if (v66)
      goto LABEL_789;
  }
  if (v389 == -1)
    v173 = 0;
  else
    v173 = v389 & 0xFFFFFF00;
  if (v389 == -1)
    LOBYTE(v153) = 0;
  else
    LOBYTE(v153) = v389;
  if (v389 == -1)
    v390 = 0;
  else
    v390 = 0x100000000;
LABEL_789:
  v156 = v153;
  if ((v390 & 0x100000000) == 0)
    goto LABEL_263;
LABEL_790:
  v467 = v14;
  v472 = v156 | v173;
  v391 = *((_QWORD *)v10 + 7);
  v466 = (JSC::VMTraps *)(v391 + 64);
  v68 = 10;
  v447 = v15;
  v453 = v12;
  v474 = (JSC::VMTraps *)v11;
  v479 = v13;
  while (1)
  {
    v392 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
    v393 = v10;
    v394 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v392 + 0x4C) + 0x70))(v9, v10, v472, &v484);
    v396 = v394;
    if (*(_DWORD *)(v391 + 80))
      break;
    v10 = v393;
    v14 = v467;
    v15 = v447;
    v12 = v453;
    v11 = (int *)v474;
    v13 = v479;
    if ((v394 & 1) != 0)
      goto LABEL_75;
LABEL_793:
    if (BYTE2(v489[1]) == 3)
    {
      if (BYTE4(v489[1]))
        goto LABEL_944;
      v397 = *((unsigned __int8 *)v9 + 5);
      if (v397 != 61)
      {
LABEL_795:
        if ((v397 - 39) <= 0xA)
        {
          if ((*((_BYTE *)v9 + 40) & 7u) > 2)
          {
            LOBYTE(__dst) = 0;
            v495 = 0;
            v404 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v9, (uint64_t)&__dst, a3, a4, a5, this, v14, a9);
            v403 = v405 ? v404 : 0;
          }
          else
          {
            v403 = *((_QWORD *)v9 + 3);
          }
          if (v403 <= v472)
            goto LABEL_833;
        }
      }
    }
    else
    {
      v397 = *((unsigned __int8 *)v9 + 5);
      if (v397 != 61)
        goto LABEL_795;
      if (BYTE2(v489[1]) == 1)
      {
LABEL_944:
        v10 = v393;
LABEL_834:
        v14 = v467;
        v12 = v453;
        v11 = (int *)v474;
        v13 = v479;
        goto LABEL_95;
      }
    }
    if ((*(_WORD *)(v392 + 12) & 0x800) == 0 || BYTE2(v489[1]) == 3)
    {
      v398 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
      if (!v398)
        v398 = *((_QWORD *)v9 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v398 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0xB0))(v9, v393);
      }
      else
      {
        v398 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
        if (!v398)
          v398 = *((_QWORD *)v9 + 2);
      }
      if (*(_DWORD *)(v391 + 80))
      {
        v402 = *(_DWORD *)(v391 + 80);
        if ((v402 & 0x27) != 0 && (v402 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v466, 7u, a3, a4, a5, this, v14, a9);
        if (*(_QWORD *)(v391 + 16))
        {
LABEL_833:
          v10 = v393;
          goto LABEL_834;
        }
      }
    }
    if ((v398 & 0xFFFE000000000002) != 0)
      goto LABEL_833;
    v9 = (JSC::JSString *)v398;
    v10 = v393;
    v14 = v467;
    v12 = v453;
    v11 = (int *)v474;
    v13 = v479;
    if (*(unsigned __int8 *)(v398 + 5) <= 0x16u)
      goto LABEL_95;
  }
  v399 = *(_DWORD *)(v391 + 80);
  if ((v399 & 0x27) != 0 && (v399 & 0x20) == 0)
    JSC::VMTraps::handleTraps(v466, 7u, a3, a4, a5, this, v395, a9);
  v400 = *(_QWORD *)(v391 + 16);
  if (v400)
    v401 = 1;
  else
    v401 = v396;
  v14 = v467;
  v15 = v447;
  v12 = v453;
  v11 = (int *)v474;
  v13 = v479;
  if ((v401 & 1) == 0)
    goto LABEL_793;
  v10 = v393;
  if (!v400)
    goto LABEL_75;
LABEL_73:
  v68 = 10;
LABEL_95:
  if (v491)
  {
    v81 = *(_DWORD *)(v490 + 4);
    if (!v81)
    {
      __break(0xC471u);
      JUMPOUT(0x198851128);
    }
    *(_DWORD *)(v490 + 4) = v81 - 1;
  }
  *(_QWORD *)(v12 + 8 * v14) = v68;
  v82 = v483;
  if (*((_DWORD *)v483 + 20))
  {
    v166 = *((_DWORD *)v483 + 20);
    if ((v166 & 0x27) != 0 && (v166 & 0x20) == 0)
    {
      v332 = v14;
      v333 = v10;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v483 + 64), 7u, a3, a4, a5, this, v14, a9);
      v14 = v332;
      v10 = v333;
    }
    if (*((_QWORD *)v82 + 2))
      return;
  }
LABEL_99:
  v83 = v11[1];
  v84 = *(_QWORD *)(v12 + 8 * v14);
  if (v84 >= 0xFFFE000000000000)
  {
LABEL_112:
    if (!(_DWORD)v84)
      goto LABEL_119;
    goto LABEL_113;
  }
  if (v84 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v84 - 0x2000000000000) == 0.0)
      goto LABEL_119;
    goto LABEL_113;
  }
  if ((v84 & 0xFFFE000000000002) != 0)
  {
    if (v84 != 7)
      goto LABEL_119;
LABEL_113:
    *(_QWORD *)(v12 + 8 * v83) = 10;
    return;
  }
  v85 = *(unsigned __int8 *)(v84 + 5);
  if (v85 == 2)
  {
    v87 = *(_QWORD *)(v84 + 8);
    v84 += 16;
    if ((v87 & 1) == 0)
      v84 = v87 + 4;
    LODWORD(v84) = *(_DWORD *)v84;
    goto LABEL_112;
  }
  if (v85 == 3)
  {
    if (*(_DWORD *)(v84 + 8))
      goto LABEL_113;
  }
  else
  {
    v86 = 16 * (*(_DWORD *)v84 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v86 + 10) & 1) == 0 || *(JSC::JSGlobalObject **)(v86 + 40) != v10)
      goto LABEL_113;
  }
LABEL_119:
  v92 = *(_QWORD *)(*((_QWORD *)v13 + 5244) + 2608);
  v93 = v482;
  a7.i64[0] = 0xFFFFFFFF00000000;
  v486 = 0xFFFFFFFF00000000;
  LOBYTE(v490) = 0;
  v491 = 0;
  v492 = 0;
  v493 = 0;
  v488 = 0;
  memset(v489, 0, 13);
  v487 = v482;
  if (((unint64_t)v482 & 0xFFFE000000000002) != 0)
    goto LABEL_778;
  v94 = *((_QWORD *)v10 + 7);
  v95 = *((unsigned __int8 *)v482 + 5);
  if (v95 > 0x16)
    goto LABEL_121;
  if (v95 != 2)
    goto LABEL_778;
  v369 = v10;
  if (*(_QWORD *)(*(_QWORD *)(v94 + 41952) + 1768) != v92)
  {
    if (!v92)
      goto LABEL_775;
    v376 = *(_DWORD *)(v92 + 16);
    if ((v376 & 0x20) != 0)
      goto LABEL_775;
    v377 = *(_WORD **)(v92 + 8);
    v378 = *(unsigned int *)(v92 + 4);
    if ((v376 & 4) == 0)
    {
      if ((_DWORD)v378)
      {
        v379 = (unsigned __int16)*v377 - 48;
        if (v379 <= 9 && (*v377 != 48 || v378 <= 1))
        {
          v383 = v377 + 1;
          v384 = v378 - 1;
          while (v384)
          {
            if (v379 > 0x19999999)
              goto LABEL_756;
            v385 = *v383 - 48;
            if (v385 > 9)
              goto LABEL_756;
            v380 = 0;
            LOBYTE(v378) = 0;
            v381 = 0;
            v66 = __CFADD__(v385, 10 * v379);
            v379 = v385 + 10 * v379;
            ++v383;
            --v384;
            if (v66)
              goto LABEL_774;
          }
          v381 = v379 & 0xFFFFFF00;
          v380 = 0x100000000;
          if (v379 == -1)
          {
            v380 = 0;
            LOBYTE(v378) = 0;
          }
          else
          {
            LOBYTE(v378) = v379;
          }
          if (v379 == -1)
            v381 = 0;
LABEL_774:
          v386 = v378;
          if ((v380 & 0x100000000) == 0)
          {
LABEL_775:
            v375 = 0;
            goto LABEL_776;
          }
LABEL_989:
          a3 = v381 | v386;
          v443 = *((_QWORD *)v482 + 1);
          if ((v443 & 1) != 0)
            v444 = (_DWORD *)((char *)v482 + 16);
          else
            v444 = (_DWORD *)(v443 + 4);
          if (*v444 > a3)
          {
            v373 = JSC::JSString::getIndex(v482, v10, a3, a4, a5, this, v14, a9, a7);
            if (!*(_DWORD *)(v94 + 80))
              goto LABEL_994;
            v445 = *(_DWORD *)(v94 + 80);
            if ((v445 & 0x27) != 0 && (v445 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, a3, a4, a5, this, v14, a9);
            if (!*(_QWORD *)(v94 + 16))
            {
LABEL_994:
              v374 = 10;
              goto LABEL_750;
            }
          }
          goto LABEL_775;
        }
LABEL_756:
        v380 = 0;
        LOBYTE(v378) = 0;
      }
      else
      {
        v380 = 0;
      }
      v381 = 0;
      goto LABEL_774;
    }
    if ((_DWORD)v378)
    {
      v438 = *(unsigned __int8 *)v377 - 48;
      if (v438 <= 9 && (v378 < 2 || *(_BYTE *)v377 != 48))
      {
        v439 = v378 - 1;
        v440 = (unsigned __int8 *)v377 + 1;
        while (v439)
        {
          if (v438 > 0x19999999)
            goto LABEL_985;
          v441 = *v440 - 48;
          if (v441 > 9)
            goto LABEL_985;
          v386 = 0;
          LOBYTE(v378) = 0;
          v442 = 0;
          v66 = __CFADD__(v441, 10 * v438);
          v438 = v441 + 10 * v438;
          --v439;
          ++v440;
          if (v66)
            goto LABEL_988;
        }
        if (v438 == -1)
          v386 = 0;
        else
          v386 = v438 & 0xFFFFFF00;
        if (v438 == -1)
          LOBYTE(v378) = 0;
        else
          LOBYTE(v378) = v438;
        if (v438 == -1)
          v442 = 0;
        else
          v442 = 0x100000000;
LABEL_988:
        v381 = v378;
        if ((v442 & 0x100000000) == 0)
          goto LABEL_775;
        goto LABEL_989;
      }
LABEL_985:
      v386 = 0;
      LOBYTE(v378) = 0;
    }
    else
    {
      v386 = 0;
    }
    v442 = 0;
    goto LABEL_988;
  }
  v370 = *((_QWORD *)v482 + 1);
  if ((v370 & 1) != 0)
    v371 = (unsigned int *)((char *)v482 + 16);
  else
    v371 = (unsigned int *)(v370 + 4);
  v372 = *v371;
  if ((v372 & 0x80000000) != 0)
    v373 = COERCE__INT64((double)v372) + 0x2000000000000;
  else
    v373 = v372 | 0xFFFE000000000000;
  v374 = 14;
LABEL_750:
  v484 = (uint64_t (*)(unint64_t))v373;
  LODWORD(v486) = v374;
  v488 = 0;
  v375 = 1;
  BYTE1(v489[1]) = 1;
LABEL_776:
  if (*(_DWORD *)(v94 + 80))
  {
    v433 = *(_DWORD *)(v94 + 80);
    if ((v433 & 0x27) != 0 && (v433 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v94 + 64), 7u, a3, a4, a5, this, v14, a9);
    if (*(_QWORD *)(v94 + 16))
      goto LABEL_187;
  }
  v10 = v369;
  if ((v375 & 1) != 0)
    goto LABEL_190;
LABEL_778:
  v387 = (uint64_t *)v10;
  v388 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v482, (unint64_t)v10);
  if (!v388)
    goto LABEL_187;
  v93 = (JSC::JSString *)v388;
  v94 = v387[7];
  v10 = (JSC::JSGlobalObject *)v387;
LABEL_121:
  v96 = (char *)v93 + 6;
  v97 = v92 >> 4;
  v98 = (uint64_t)v93;
  if ((*((_BYTE *)v93 + 6) & 8) == 0)
  {
    v99 = v93;
    do
    {
      v100 = *(_DWORD *)v99 & 0xFFFFFFFE;
      v101 = 16 * v100;
      if (!(_DWORD)v97 || (v97 & ~*(_DWORD *)(16 * v100 + 0x20)) != 0)
        goto LABEL_150;
      v102 = *(_QWORD *)(16 * v100 + 0x58);
      if (!v102)
      {
        v103 = *(_QWORD *)(16 * v100 + 0x40);
        if (!v103 || *(_BYTE *)(v103 + 5) != 1 && *(_DWORD *)(v103 + 80) < 2u)
          goto LABEL_150;
        v104 = v10;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v101, (JSC::VM *)v94, 1, (const JSC::PropertyTable *)a4, a5, this, v14, a9);
        v10 = v104;
        if (!v102)
          goto LABEL_150;
      }
      if (!*(_DWORD *)(v102 + 24))
        goto LABEL_150;
      v105 = *(_QWORD *)(v102 + 16);
      v106 = v105 & 0xFFFFFFFFFFFFFFFELL;
      v107 = *(unsigned int *)(v102 + 8);
      v108 = *(_DWORD *)(v92 + 16);
      if ((v105 & 1) != 0)
      {
        if ((v108 & 0x20) != 0)
          v108 = *(_DWORD *)(v92 + 32);
        v109 = *(_DWORD *)(v102 + 12);
        v110 = (v108 >> 8) & *(_QWORD *)&v109;
        v111 = *(unsigned __int8 *)(v106 + v110);
        if (!*(_BYTE *)(v106 + v110))
          goto LABEL_150;
        v112 = v106 + v107;
        v113 = 1;
        while (1)
        {
          v114 = *(_QWORD *)(v112 + 8 * (v111 - 1));
          if (v92 == (v114 & 0xFFFFFFFFFFFFLL))
            break;
          v110 = ((_DWORD)v110 + v113) & v109;
          v111 = *(unsigned __int8 *)(v106 + v110);
          ++v113;
          if (!*(_BYTE *)(v106 + v110))
            goto LABEL_150;
        }
        this = (v114 >> 16) & 0xFF00000000 | HIBYTE(v114);
      }
      else
      {
        if ((v108 & 0x20) != 0)
          v108 = *(_DWORD *)(v92 + 32);
        v115 = *(_DWORD *)(v102 + 12);
        v116 = v115 & (v108 >> 8);
        v117 = *(_DWORD *)(v106 + 4 * v116);
        if (!v117)
          goto LABEL_150;
        v118 = v106 + 4 * v107;
        v119 = 1;
        while (1)
        {
          v120 = (v117 - 1);
          if (v92 == *(_QWORD *)(v118 + 16 * v120))
            break;
          v116 = (v116 + v119) & v115;
          v117 = *(_DWORD *)(v106 + 4 * v116);
          ++v119;
          if (!v117)
            goto LABEL_150;
        }
        this = *(unsigned int *)(v118 + 16 * v120 + 8) | ((unint64_t)*(unsigned __int8 *)(v118 + 16 * v120 + 12) << 32);
      }
      if ((_DWORD)this != -1)
      {
        a5 = HIDWORD(this);
        if ((int)this <= 63)
        {
          v129 = (uint64_t)v99 + 16;
          v130 = this << 32;
        }
        else
        {
          v129 = *((_QWORD *)v99 + 1) - 8;
          v130 = 0x3F00000000 - (this << 32);
        }
        a4 = *(_QWORD *)(v129 + (v130 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_172;
        v131 = *(unsigned __int8 *)(a4 + 5);
        if (v131 == 5)
        {
          v137 = v10;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v99, v94, (uint64_t)&v484, a4, SHIDWORD(this), this);
          goto LABEL_189;
        }
        if (v131 != 6)
        {
LABEL_172:
          v484 = (uint64_t (*)(unint64_t))a4;
          v488 = v99;
          v486 = __PAIR64__(this, HIDWORD(this));
          LOWORD(v489[1]) = 257;
          goto LABEL_190;
        }
        v147 = *(_DWORD *)(v101 + 16) & 3;
        v148 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v150 = *(int8x16_t ***)(a4 + 24);
          v149 = *(_QWORD *)(a4 + 32);
          v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v485 = v148;
          LODWORD(v486) = HIDWORD(this);
          v488 = v99;
          BYTE1(v489[1]) = 3;
          if (v147 != 2)
            LOBYTE(v489[1]) = 1;
          BYTE3(v489[1]) = 1;
          v492 = v150;
          v493 = v149;
          goto LABEL_190;
        }
        v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
        v485 = v148;
        LODWORD(v486) = HIDWORD(this);
        v488 = v99;
        BYTE1(v489[1]) = 3;
        if (v147 == 2)
          goto LABEL_190;
LABEL_402:
        LOBYTE(v489[1]) = 1;
        goto LABEL_190;
      }
LABEL_150:
      if ((*v96 & 0x20) != 0)
      {
        v121 = v10;
        v122 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v99, (JSC::VM *)v94, v92, (uint64_t)&v484);
        v10 = v121;
        if ((v122 & 1) != 0)
          goto LABEL_190;
      }
      v98 = *(_QWORD *)(v101 + 48);
      if (!v98)
        v98 = *((_QWORD *)v99 + 2);
      if ((v98 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v98 + 5) < 0x17u)
      {
        if (!v92)
          goto LABEL_187;
        v123 = *(_DWORD *)(v92 + 16);
        if ((v123 & 0x20) != 0)
          goto LABEL_187;
        v124 = *(_WORD **)(v92 + 8);
        v125 = *(unsigned int *)(v92 + 4);
        if ((v123 & 4) == 0)
        {
          if ((_DWORD)v125)
          {
            v126 = (unsigned __int16)*v124 - 48;
            if (v126 <= 9 && (*v124 != 48 || v125 <= 1))
            {
              v132 = v124 + 1;
              v133 = v125 - 1;
              while (v133)
              {
                if (v126 > 0x19999999)
                  goto LABEL_164;
                v134 = *v132 - 48;
                if (v134 > 9)
                  goto LABEL_164;
                v127 = 0;
                LOBYTE(v125) = 0;
                v128 = 0;
                v66 = __CFADD__(v134, 10 * v126);
                v126 = v134 + 10 * v126;
                ++v132;
                --v133;
                if (v66)
                  goto LABEL_186;
              }
              v128 = v126 & 0xFFFFFF00;
              v127 = 0x100000000;
              if (v126 == -1)
              {
                v127 = 0;
                LOBYTE(v125) = 0;
              }
              else
              {
                LOBYTE(v125) = v126;
              }
              if (v126 == -1)
                v128 = 0;
LABEL_186:
              v135 = v125;
              if ((v127 & 0x100000000) == 0)
              {
LABEL_187:
                v136 = 10;
                goto LABEL_210;
              }
LABEL_662:
              v351 = v128 | v135;
              v352 = *((_QWORD *)v10 + 7);
              v480 = (JSC::VMTraps *)(v352 + 64);
              v136 = 10;
              while (2)
              {
                v353 = 16 * (*(_DWORD *)v93 & 0xFFFFFFFE);
                v354 = v10;
                v355 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v353 + 0x4C) + 0x70))(v93, v10, v351, &v484);
                if (*(_DWORD *)(v352 + 80))
                {
                  v358 = *(_DWORD *)(v352 + 80);
                  if ((v358 & 0x27) != 0 && (v358 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v480, 7u, a3, a4, a5, this, v14, a9);
                  if (*(_QWORD *)(v352 + 16))
                    goto LABEL_210;
                }
                v10 = v354;
                if ((v355 & 1) != 0)
                  goto LABEL_190;
                if (BYTE2(v489[1]) == 3)
                {
                  if (BYTE4(v489[1]))
                    goto LABEL_210;
                  v356 = *((unsigned __int8 *)v93 + 5);
                  v10 = v354;
                  if (v356 != 61)
                    goto LABEL_667;
                }
                else
                {
                  v356 = *((unsigned __int8 *)v93 + 5);
                  if (v356 == 61)
                  {
                    if (BYTE2(v489[1]) == 1)
                      goto LABEL_210;
                  }
                  else
                  {
LABEL_667:
                    if ((v356 - 39) <= 0xA)
                    {
                      if ((*((_BYTE *)v93 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        v495 = 0;
                        v360 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v93, (uint64_t)&__dst, a3, a4, a5, this, v14, a9);
                        v359 = v361 ? v360 : 0;
                      }
                      else
                      {
                        v359 = *((_QWORD *)v93 + 3);
                      }
                      v10 = v354;
                      if (v359 <= v351)
                        goto LABEL_210;
                    }
                  }
                }
                if ((*(_WORD *)(v353 + 12) & 0x800) == 0 || BYTE2(v489[1]) == 3)
                {
                  v357 = *(_QWORD *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x30);
                  if (!v357)
                    v357 = *((_QWORD *)v93 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v357 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0xB0))(v93, v354);
                  }
                  else
                  {
                    v357 = *(_QWORD *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x30);
                    if (!v357)
                      v357 = *((_QWORD *)v93 + 2);
                  }
                  if (*(_DWORD *)(v352 + 80))
                  {
                    v362 = *(_DWORD *)(v352 + 80);
                    if ((v362 & 0x27) != 0 && (v362 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v480, 7u, a3, a4, a5, this, v14, a9);
                    v10 = v354;
                    if (*(_QWORD *)(v352 + 16))
                      goto LABEL_210;
                  }
                  else
                  {
                    v10 = v354;
                  }
                }
                if ((v357 & 0xFFFE000000000002) != 0)
                  goto LABEL_210;
                v93 = (JSC::JSString *)v357;
                if (*(unsigned __int8 *)(v357 + 5) <= 0x16u)
                  goto LABEL_210;
                continue;
              }
            }
LABEL_164:
            v127 = 0;
            LOBYTE(v125) = 0;
          }
          else
          {
            v127 = 0;
          }
          v128 = 0;
          goto LABEL_186;
        }
        if ((_DWORD)v125)
        {
          v349 = *(unsigned __int8 *)v124 - 48;
          if (v349 <= 9 && (v125 < 2 || *(_BYTE *)v124 != 48))
          {
            v366 = v125 - 1;
            v367 = (unsigned __int8 *)v124 + 1;
            while (v366)
            {
              if (v349 > 0x19999999)
                goto LABEL_659;
              v368 = *v367 - 48;
              if (v368 > 9)
                goto LABEL_659;
              v135 = 0;
              LOBYTE(v125) = 0;
              v350 = 0;
              v66 = __CFADD__(v368, 10 * v349);
              v349 = v368 + 10 * v349;
              --v366;
              ++v367;
              if (v66)
                goto LABEL_661;
            }
            if (v349 == -1)
              v135 = 0;
            else
              v135 = v349 & 0xFFFFFF00;
            if (v349 == -1)
              LOBYTE(v125) = 0;
            else
              LOBYTE(v125) = v349;
            if (v349 == -1)
              v350 = 0;
            else
              v350 = 0x100000000;
LABEL_661:
            v128 = v125;
            if ((v350 & 0x100000000) == 0)
              goto LABEL_187;
            goto LABEL_662;
          }
LABEL_659:
          v135 = 0;
          LOBYTE(v125) = 0;
        }
        else
        {
          v135 = 0;
        }
        v350 = 0;
        goto LABEL_661;
      }
      v96 = (_BYTE *)(v98 + 6);
      v99 = (JSC::JSString *)v98;
    }
    while ((*(_BYTE *)(v98 + 6) & 8) == 0);
  }
  if (!v92)
    goto LABEL_407;
  v157 = *(_DWORD *)(v92 + 16);
  if ((v157 & 0x20) != 0)
    goto LABEL_407;
  v158 = *(_BYTE **)(v92 + 8);
  v159 = *(unsigned int *)(v92 + 4);
  if ((v157 & 4) != 0)
  {
    if ((_DWORD)v159)
    {
      v406 = *v158 - 48;
      if (v406 <= 9 && (v159 < 2 || *v158 != 48))
      {
        v425 = v159 - 1;
        v426 = v158 + 1;
        while (v425)
        {
          if (v406 > 0x19999999)
            goto LABEL_839;
          v427 = *v426 - 48;
          if (v427 > 9)
            goto LABEL_839;
          v243 = 0;
          LOBYTE(v159) = 0;
          v407 = 0;
          v66 = __CFADD__(v427, 10 * v406);
          v406 = v427 + 10 * v406;
          --v425;
          ++v426;
          if (v66)
            goto LABEL_841;
        }
        if (v406 == -1)
          v243 = 0;
        else
          v243 = v406 & 0xFFFFFF00;
        if (v406 == -1)
          LOBYTE(v159) = 0;
        else
          LOBYTE(v159) = v406;
        if (v406 == -1)
          v407 = 0;
        else
          v407 = 0x100000000;
LABEL_841:
        v162 = v159;
        if ((v407 & 0x100000000) == 0)
          goto LABEL_407;
        goto LABEL_842;
      }
LABEL_839:
      v243 = 0;
      LOBYTE(v159) = 0;
    }
    else
    {
      v243 = 0;
    }
    v407 = 0;
    goto LABEL_841;
  }
  if (!(_DWORD)v159)
  {
    v161 = 0;
    goto LABEL_233;
  }
  v160 = *(unsigned __int16 *)v158 - 48;
  if (v160 > 9 || *(_WORD *)v158 == 48 && v159 > 1)
  {
    v161 = 0;
    LOBYTE(v159) = 0;
LABEL_233:
    v162 = 0;
    goto LABEL_406;
  }
  v170 = (unsigned __int16 *)(v158 + 2);
  v171 = v159 - 1;
  while (v171)
  {
    if (v160 > 0x19999999 || (v172 = *v170 - 48, v172 > 9))
    {
      v161 = 0;
      LOBYTE(v159) = 0;
      v162 = 0;
      goto LABEL_406;
    }
    v161 = 0;
    LOBYTE(v159) = 0;
    v162 = 0;
    v66 = __CFADD__(v172, 10 * v160);
    v160 = v172 + 10 * v160;
    ++v170;
    --v171;
    if (v66)
      goto LABEL_406;
  }
  v162 = v160 & 0xFFFFFF00;
  v161 = 0x100000000;
  if (v160 == -1)
  {
    v161 = 0;
    LOBYTE(v159) = 0;
  }
  else
  {
    LOBYTE(v159) = v160;
  }
  if (v160 == -1)
    v162 = 0;
LABEL_406:
  v243 = v159;
  if ((v161 & 0x100000000) != 0)
  {
LABEL_842:
    v481 = (JSC::VMTraps *)(v162 | v243);
    v408 = *((_QWORD *)v10 + 7);
    v476 = (JSC::VMTraps *)(v408 + 64);
    v136 = 10;
    while (1)
    {
      v409 = 16 * (*(_DWORD *)v93 & 0xFFFFFFFE);
      v410 = v10;
      v411 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, JSC::VMTraps *, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v409 + 0x4C) + 0x70))(v93, v10, v481, &v484);
      v412 = v411;
      if (*(_DWORD *)(v408 + 80))
      {
        v415 = *(_DWORD *)(v408 + 80);
        if ((v415 & 0x27) != 0 && (v415 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v476, 7u, a3, a4, a5, this, v14, a9);
        v416 = *(_QWORD *)(v408 + 16);
        if (v416)
          v417 = 1;
        else
          v417 = v412;
        if ((v417 & 1) != 0)
        {
          v10 = v410;
          if (!v416)
            goto LABEL_190;
          goto LABEL_187;
        }
      }
      else
      {
        v10 = v410;
        if ((v411 & 1) != 0)
          goto LABEL_190;
      }
      if (BYTE2(v489[1]) == 3)
      {
        if (BYTE4(v489[1]))
          goto LABEL_210;
        v413 = *((unsigned __int8 *)v93 + 5);
        if (v413 == 61)
          goto LABEL_848;
      }
      else
      {
        v413 = *((unsigned __int8 *)v93 + 5);
        if (v413 == 61)
        {
          if (BYTE2(v489[1]) == 1)
            goto LABEL_210;
          goto LABEL_848;
        }
      }
      if ((v413 - 39) <= 0xA)
      {
        if ((*((_BYTE *)v93 + 40) & 7u) > 2)
        {
          LOBYTE(__dst) = 0;
          v495 = 0;
          v420 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>((uint64_t)v93, (uint64_t)&__dst, a3, a4, a5, this, v14, a9);
          v419 = v421 ? v420 : 0;
        }
        else
        {
          v419 = *((_QWORD *)v93 + 3);
        }
        if (v419 <= (unint64_t)v481)
          goto LABEL_210;
      }
LABEL_848:
      if ((*(_WORD *)(v409 + 12) & 0x800) == 0 || BYTE2(v489[1]) == 3)
      {
        v414 = *(_QWORD *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x30);
        if (!v414)
          v414 = *((_QWORD *)v93 + 2);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v414 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v93, v410);
        }
        else
        {
          v414 = *(_QWORD *)(16 * (*(_DWORD *)v93 & 0xFFFFFFFE) + 0x30);
          if (!v414)
            v414 = *((_QWORD *)v93 + 2);
        }
        if (*(_DWORD *)(v408 + 80))
        {
          v418 = *(_DWORD *)(v408 + 80);
          if ((v418 & 0x27) != 0 && (v418 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v476, 7u, a3, a4, a5, this, v14, a9);
          if (*(_QWORD *)(v408 + 16))
            goto LABEL_210;
        }
      }
      if ((v414 & 0xFFFE000000000002) == 0)
      {
        v93 = (JSC::JSString *)v414;
        v10 = v410;
        if (*(unsigned __int8 *)(v414 + 5) > 0x16u)
          continue;
      }
      goto LABEL_210;
    }
  }
LABEL_407:
  v244 = *((_QWORD *)v10 + 7);
  v475 = (JSC::VMTraps *)(v244 + 64);
  v136 = 10;
  while (1)
  {
    v245 = 16 * (*(_DWORD *)v98 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v98 + 6) & 8) == 0)
      break;
    v454 = v12;
    v273 = v10;
    v470 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x4C) + 0x68))(v98, v10, v92, &v484);
    if (*(_DWORD *)(v244 + 80))
    {
      v299 = *(_DWORD *)(v244 + 80);
      if ((v299 & 0x27) != 0 && (v299 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v475, 7u, a3, a4, a5, this, v14, a9);
      if (*(_QWORD *)(v244 + 16))
        goto LABEL_210;
    }
    v10 = v273;
    if ((v470 & 1) != 0)
      goto LABEL_190;
    if (BYTE2(v489[1]) == 3)
    {
      if (BYTE4(v489[1]))
        goto LABEL_210;
      v274 = *(unsigned __int8 *)(v98 + 5);
      if (v274 == 61)
      {
LABEL_508:
        v10 = v273;
        goto LABEL_509;
      }
    }
    else
    {
      v274 = *(unsigned __int8 *)(v98 + 5);
      if (v274 == 61)
      {
        v10 = v273;
        if (BYTE2(v489[1]) == 1)
          goto LABEL_210;
        goto LABEL_437;
      }
    }
    if (!v92)
      goto LABEL_508;
    if ((v274 - 50) < 0xFFFFFFF5)
      goto LABEL_508;
    v275 = *(_DWORD *)(v92 + 16);
    if ((v275 & 0x20) != 0)
      goto LABEL_508;
    v276 = *(unsigned int *)(v92 + 4);
    if (!(_DWORD)v276)
      goto LABEL_508;
    v277 = *(unsigned __int8 **)(v92 + 8);
    if ((v275 & 4) != 0)
    {
      v278 = *v277;
      if ((_DWORD)v276 == 1)
      {
LABEL_462:
        v10 = v273;
        if ((v278 - 48) < 0xA)
          goto LABEL_210;
        goto LABEL_437;
      }
      if (v278 == 45)
      {
        v278 = v277[1];
        goto LABEL_466;
      }
      if ((v278 - 48) < 0xA)
        goto LABEL_477;
      if ((_DWORD)v276 == 8)
        goto LABEL_476;
    }
    else
    {
      v278 = *(unsigned __int16 *)v277;
      if ((_DWORD)v276 == 1)
        goto LABEL_462;
      if (v278 == 45)
      {
        v278 = *((unsigned __int16 *)v277 + 1);
LABEL_466:
        if ((v278 - 48) < 0xA)
        {
          if ((_DWORD)v276 == 2)
            goto LABEL_210;
          goto LABEL_477;
        }
        if ((_DWORD)v276 != 9)
          goto LABEL_508;
LABEL_476:
        if (v278 != 73)
          goto LABEL_508;
        goto LABEL_477;
      }
      if ((v278 - 48) < 0xA || (_DWORD)v276 == 8 && v278 == 73)
        goto LABEL_477;
    }
    if ((_DWORD)v276 != 3 || v278 != 78)
      goto LABEL_508;
LABEL_477:
    v467 = v467 & 0xFFFFFF0000000000 | v276 | ((unint64_t)((v275 >> 2) & 1) << 32);
    JSC::jsToNumber(v277, v467);
    v280 = (v279 >> 52) & 0x7FF;
    if ((_DWORD)v280 == 2047)
    {
      if ((v279 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v281 = v497;
      }
      else
      {
        if ((v279 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v287 = &__s[1];
        }
        else
        {
          v287 = __s;
        }
        *(_QWORD *)v287 = 0x7974696E69666E49;
        v281 = v287 + 8;
      }
      goto LABEL_491;
    }
    v282 = v279 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v279 & 0x8000000000000000) != 0 && v282)
    {
      __s[0] = 45;
      v283 = &__s[1];
    }
    else
    {
      if (!v282)
      {
        __s[0] = 48;
        v281 = &__s[1];
        goto LABEL_491;
      }
      v283 = __s;
    }
    v284 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v279 & 0x800FFFFFFFFFFFFFLL, v280);
    v281 = WTF::dragonbox::detail::to_shortest(v284, v285, (uint64_t)v283, v286);
LABEL_491:
    *v281 = 0;
    v288 = strlen(__s);
    memcpy(&__dst, __s, v288);
    *((_BYTE *)&__dst + v288) = 0;
    v289 = *(unsigned int *)(v92 + 4);
    v290 = *(unsigned __int8 **)(v92 + 8);
    if ((*(_BYTE *)(v92 + 16) & 4) != 0)
    {
      if ((_DWORD)v289)
      {
        v295 = &__dst;
        v296 = *(unsigned int *)(v92 + 4);
        do
        {
          v298 = *(unsigned __int8 *)v295;
          v295 = (JSC::VM **)((char *)v295 + 1);
          v297 = v298;
          if (!v298 || *v290 != v297)
            goto LABEL_505;
          ++v290;
        }
        while (--v296);
      }
    }
    else if ((_DWORD)v289)
    {
      v291 = &__dst;
      v292 = *(unsigned int *)(v92 + 4);
      while (1)
      {
        v294 = *(unsigned __int8 *)v291;
        v291 = (JSC::VM **)((char *)v291 + 1);
        v293 = v294;
        if (!v294 || *(unsigned __int16 *)v290 != v293)
          break;
        v290 += 2;
        if (!--v292)
          goto LABEL_503;
      }
LABEL_505:
      v10 = v273;
LABEL_509:
      v12 = v454;
      goto LABEL_437;
    }
LABEL_503:
    v10 = v273;
    v12 = v454;
    if (!*((_BYTE *)&__dst + v289))
      goto LABEL_210;
LABEL_437:
    if ((*(_WORD *)(v245 + 12) & 0x800) == 0)
    {
      v267 = *(_DWORD *)v98;
LABEL_439:
      v268 = *(_QWORD *)(16 * (v267 & 0xFFFFFFFE) + 0x30);
      if (!v268)
        v268 = *(_QWORD *)(v98 + 16);
      goto LABEL_441;
    }
    v267 = *(_DWORD *)v98;
    if (BYTE2(v489[1]) == 3)
      goto LABEL_439;
    v271 = v10;
    v272 = 16 * (v267 & 0xFFFFFFFE);
    if ((*(_WORD *)(v272 + 12) & 0x800) != 0)
    {
      v268 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v272 + 76) + 0xB0))(v98, v10);
    }
    else
    {
      v268 = *(_QWORD *)(v272 + 48);
      if (!v268)
        v268 = *(_QWORD *)(v98 + 16);
    }
    if (*(_DWORD *)(v244 + 80))
    {
      v300 = *(_DWORD *)(v244 + 80);
      if ((v300 & 0x27) != 0 && (v300 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v475, 7u, a3, a4, a5, this, v14, a9);
      v10 = v271;
      if (*(_QWORD *)(v244 + 16))
        goto LABEL_210;
    }
    else
    {
      v10 = v271;
    }
LABEL_441:
    if ((v268 & 0xFFFE000000000002) == 0)
    {
      v98 = v268;
      if (*(unsigned __int8 *)(v268 + 5) > 0x16u)
        continue;
    }
    goto LABEL_210;
  }
  if (!(_DWORD)v97 || (v97 & ~*(_DWORD *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_436;
  v246 = *(_QWORD *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x58);
  if (!v246)
  {
    v247 = *(_QWORD *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x40);
    if (!v247 || *(_BYTE *)(v247 + 5) != 1 && *(_DWORD *)(v247 + 80) < 2u)
      goto LABEL_436;
    v248 = v10;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE)), (JSC::VM *)v244, 1, (const JSC::PropertyTable *)a4, a5, this, v14, a9);
    v10 = v248;
    if (!v246)
      goto LABEL_436;
  }
  if (!*(_DWORD *)(v246 + 24))
    goto LABEL_436;
  v249 = *(_QWORD *)(v246 + 16);
  v250 = v249 & 0xFFFFFFFFFFFFFFFELL;
  v251 = *(unsigned int *)(v246 + 8);
  v252 = *(_DWORD *)(v92 + 16);
  if ((v249 & 1) != 0)
  {
    if ((v252 & 0x20) != 0)
      v252 = *(_DWORD *)(v92 + 32);
    v253 = *(_DWORD *)(v246 + 12);
    v254 = (v252 >> 8) & *(_QWORD *)&v253;
    v255 = *(unsigned __int8 *)(v250 + v254);
    if (*(_BYTE *)(v250 + v254))
    {
      v256 = v250 + v251;
      v257 = 1;
      while (1)
      {
        v258 = v12;
        v259 = v10;
        v260 = *(_QWORD *)(v256 + 8 * (v255 - 1));
        if (v92 == (v260 & 0xFFFFFFFFFFFFLL))
          break;
        v254 = ((_DWORD)v254 + v257) & v253;
        v255 = *(unsigned __int8 *)(v250 + v254);
        ++v257;
        if (!*(_BYTE *)(v250 + v254))
          goto LABEL_436;
      }
      this = (v260 >> 16) & 0xFF00000000 | HIBYTE(v260);
      goto LABEL_433;
    }
    goto LABEL_436;
  }
  v258 = v12;
  v259 = v10;
  if ((v252 & 0x20) != 0)
    v252 = *(_DWORD *)(v92 + 32);
  v261 = *(_DWORD *)(v246 + 12);
  v262 = v261 & (v252 >> 8);
  v263 = *(_DWORD *)(v250 + 4 * v262);
  if (!v263)
    goto LABEL_436;
  v264 = v250 + 4 * v251;
  v265 = 1;
  while (1)
  {
    v266 = (v263 - 1);
    if (v92 == *(_QWORD *)(v264 + 16 * v266))
      break;
    v262 = (v262 + v265) & v261;
    v263 = *(_DWORD *)(v250 + 4 * v262);
    ++v265;
    v10 = v259;
    v12 = v258;
    if (!v263)
      goto LABEL_436;
  }
  this = *(unsigned int *)(v264 + 16 * v266 + 8) | ((unint64_t)*(unsigned __int8 *)(v264 + 16 * v266 + 12) << 32);
LABEL_433:
  v10 = v259;
  v12 = v258;
  if ((_DWORD)this == -1)
  {
LABEL_436:
    if ((*(_BYTE *)(v98 + 6) & 0x20) != 0)
    {
      v269 = v10;
      v270 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v98, (JSC::VM *)v244, v92, (uint64_t)&v484);
      v10 = v269;
      if ((v270 & 1) != 0)
        goto LABEL_190;
    }
    goto LABEL_437;
  }
  v137 = v259;
  a5 = HIDWORD(this);
  if ((int)this <= 63)
  {
    v301 = v98 + 16;
    v302 = this << 32;
  }
  else
  {
    v301 = *(_QWORD *)(v98 + 8) - 8;
    v302 = 0x3F00000000 - (this << 32);
  }
  a4 = *(_QWORD *)(v301 + (v302 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_535:
    v484 = (uint64_t (*)(unint64_t))a4;
    v488 = (JSC::JSString *)v98;
    v486 = __PAIR64__(this, HIDWORD(this));
    LOWORD(v489[1]) = 257;
    goto LABEL_189;
  }
  v303 = *(unsigned __int8 *)(a4 + 5);
  if (v303 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v98, v244, (uint64_t)&v484, a4, SHIDWORD(this), this);
    v10 = v137;
    goto LABEL_190;
  }
  if (v303 != 6)
    goto LABEL_535;
  v323 = *(_DWORD *)(v245 + 16) & 3;
  v324 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v485 = v324;
    LODWORD(v486) = HIDWORD(this);
    v488 = (JSC::JSString *)v98;
    BYTE1(v489[1]) = 3;
    if (v323 == 2)
      goto LABEL_190;
    goto LABEL_402;
  }
  v326 = *(int8x16_t ***)(a4 + 24);
  v325 = *(_QWORD *)(a4 + 32);
  v484 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v485 = v324;
  LODWORD(v486) = HIDWORD(this);
  v488 = (JSC::JSString *)v98;
  BYTE1(v489[1]) = 3;
  if (v323 != 2)
    LOBYTE(v489[1]) = 1;
  BYTE3(v489[1]) = 1;
  v492 = v326;
  v493 = v325;
LABEL_189:
  v10 = v137;
LABEL_190:
  if (BYTE1(v489[1]) == 1)
  {
    v136 = (uint64_t)v484;
  }
  else
  {
    if (BYTE1(v489[1]) == 2)
    {
      v138 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v484, v10, a3, a4, a5, this, v14, a9);
    }
    else
    {
      v139 = v488;
      v140 = *(_QWORD *)(16 * (*(_DWORD *)v488 & 0xFFFFFFFE) + 0x28);
      if ((v486 & 0x20) != 0)
        v139 = v487;
      if (BYTE3(v489[1]) != 1)
        goto LABEL_208;
      if (((unint64_t)v139 & 0xFFFE000000000002) != 0)
        goto LABEL_609;
      v141 = *(unsigned int *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x4C);
      v142 = *(_DWORD *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x4C) != 0;
      v143 = 16 * v141;
      if ((_DWORD)v141)
        v144 = v492 == (int8x16_t **)v143;
      else
        v144 = 1;
      if (!v144)
      {
        do
        {
          v143 = *(_QWORD *)(v143 + 16);
          v142 = v143 != 0;
        }
        while ((int8x16_t **)v143 != v492 && v143 != 0);
      }
      if (!v142)
      {
LABEL_609:
        __dst = (JSC::VM *)*((_QWORD *)v10 + 7);
        v138 = JSC::throwDOMAttributeGetterTypeError(v140, &__dst, v492, (WTF::StringImpl *)v92);
      }
      else
      {
LABEL_208:
        v138 = v484(v140);
      }
    }
    v136 = v138;
  }
LABEL_210:
  if (v491)
  {
    v146 = *(_DWORD *)(v490 + 4);
    if (!v146)
    {
      __break(0xC471u);
      JUMPOUT(0x198851918);
    }
    *(_DWORD *)(v490 + 4) = v146 - 1;
  }
  *(_QWORD *)(v12 + 8 * v83) = v136;
}

uint64_t llint_throw_stack_overflow_error(JSC::VM *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  int v14;
  JSC::VM *v15;

  v8 = (_QWORD *)*((_QWORD *)a1 + 5);
  v15 = a1;
  if (!v8)
  {
    v10 = **(_DWORD **)(a2 + 8);
    goto LABEL_5;
  }
  v9 = v8[3];
  if ((v9 & 0xFFFE000000000007) != 3)
  {
LABEL_3:
    v10 = *(_DWORD *)v9;
LABEL_5:
    v11 = (unint64_t *)(16 * (v10 & 0xFFFFFFFE) + 40);
    goto LABEL_6;
  }
  while (1)
  {
    v14 = *(unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
    if (v14)
      break;
    v8 = (_QWORD *)*v8;
    v9 = v8[3];
    if ((v9 & 0xFFFE000000000007) != 3)
      goto LABEL_3;
  }
  if (v14 != 1)
  {
    v12 = 0;
    goto LABEL_7;
  }
  v11 = (unint64_t *)(v8[2] + 32);
LABEL_6:
  v12 = *v11;
LABEL_7:
  JSC::throwStackOverflowError(v12, &v15, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t llint_write_barrier_slow(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 16) + 72);
    if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(a2 + 7))
      return JSC::Heap::writeBarrierSlowPath(v2 + 192, a2);
  }
  return result;
}

uint64_t llint_check_vm_entry_permission(JSC::Interpreter *a1)
{
  JSC::Interpreter::checkVMEntryPermission(a1);
  return 0;
}

void JSC::LLInt::wasmFunctionEntryThunkSIMD(_QWORD *a1@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  char **v7;
  char *v8;

  v3 = atomic_load(&qword_1ECF589A0);
  if (v3 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&qword_1ECF589A0, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::wasmFunctionEntryThunkSIMD(void)::$_0 &&>>);
  }
  v4 = *(unsigned int **)algn_1ECF58998;
  *a1 = qword_1ECF58990;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  a1[1] = v4;
}

void std::call_once[abi:sn180100]<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_2>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_2 &&>>);
  }
}

void JSC::LLInt::normalOSRExitTrampolineThunk(_QWORD *a1@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  char v5;

  std::call_once[abi:sn180100]<JSC::LLInt::normalOSRExitTrampolineThunk(void)::$_0>((uint64_t)&v5);
  v3 = *(unsigned int **)algn_1ECF58AB8;
  *a1 = qword_1ECF58AB0;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  a1[1] = v3;
}

void std::call_once[abi:sn180100]<JSC::LLInt::normalOSRExitTrampolineThunk(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::normalOSRExitTrampolineThunk(void)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::normalOSRExitTrampolineThunk(void)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::normalOSRExitTrampolineThunk(void)::$_0 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::$_0 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::$_0 &&>>);
  }
}

void JSC::LLInt::returnLocationThunk(int a1@<W0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char v41;

  switch(a1)
  {
    case 222:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_2>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58AE8;
          *a3 = qword_1ECF58AE0;
          if (v4)
          {
            do
              v19 = __ldaxr(v4);
            while (__stlxr(v19 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_1>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58AD8;
          *a3 = qword_1ECF58AD0;
          if (v4)
          {
            do
              v20 = __ldaxr(v4);
            while (__stlxr(v20 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_0>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58AC8;
          *a3 = qword_1ECF58AC0;
          if (v4)
          {
            do
              v6 = __ldaxr(v4);
            while (__stlxr(v6 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 223:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_5>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B18;
          *a3 = qword_1ECF58B10;
          if (v4)
          {
            do
              v21 = __ldaxr(v4);
            while (__stlxr(v21 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_4>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B08;
          *a3 = qword_1ECF58B00;
          if (v4)
          {
            do
              v22 = __ldaxr(v4);
            while (__stlxr(v22 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_3>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58AF8;
          *a3 = qword_1ECF58AF0;
          if (v4)
          {
            do
              v7 = __ldaxr(v4);
            while (__stlxr(v7 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 224:
      switch(a2)
      {
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_12>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B88;
          *a3 = qword_1ECF58B80;
          if (v4)
          {
            do
              v17 = __ldaxr(v4);
            while (__stlxr(v17 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_13>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B98;
          *a3 = qword_1ECF58B90;
          if (v4)
          {
            do
              v18 = __ldaxr(v4);
            while (__stlxr(v18 + 1, v4));
          }
          break;
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_14>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58BA8;
          *a3 = qword_1ECF58BA0;
          if (v4)
          {
            do
              v5 = __ldaxr(v4);
            while (__stlxr(v5 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 225:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_17>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58BD8;
          *a3 = qword_1ECF58BD0;
          if (v4)
          {
            do
              v23 = __ldaxr(v4);
            while (__stlxr(v23 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_16>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58BC8;
          *a3 = qword_1ECF58BC0;
          if (v4)
          {
            do
              v24 = __ldaxr(v4);
            while (__stlxr(v24 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_15>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58BB8;
          *a3 = qword_1ECF58BB0;
          if (v4)
          {
            do
              v8 = __ldaxr(v4);
            while (__stlxr(v8 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 226:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_20>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C08;
          *a3 = qword_1ECF58C00;
          if (v4)
          {
            do
              v25 = __ldaxr(v4);
            while (__stlxr(v25 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_19>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58BF8;
          *a3 = qword_1ECF58BF0;
          if (v4)
          {
            do
              v26 = __ldaxr(v4);
            while (__stlxr(v26 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_18>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58BE8;
          *a3 = qword_1ECF58BE0;
          if (v4)
          {
            do
              v9 = __ldaxr(v4);
            while (__stlxr(v9 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 227:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_23>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C38;
          *a3 = qword_1ECF58C30;
          if (v4)
          {
            do
              v27 = __ldaxr(v4);
            while (__stlxr(v27 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_22>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C28;
          *a3 = qword_1ECF58C20;
          if (v4)
          {
            do
              v28 = __ldaxr(v4);
            while (__stlxr(v28 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_21>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C18;
          *a3 = qword_1ECF58C10;
          if (v4)
          {
            do
              v10 = __ldaxr(v4);
            while (__stlxr(v10 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 228:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_26>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C68;
          *a3 = qword_1ECF58C60;
          if (v4)
          {
            do
              v29 = __ldaxr(v4);
            while (__stlxr(v29 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_25>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C58;
          *a3 = qword_1ECF58C50;
          if (v4)
          {
            do
              v30 = __ldaxr(v4);
            while (__stlxr(v30 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_24>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C48;
          *a3 = qword_1ECF58C40;
          if (v4)
          {
            do
              v11 = __ldaxr(v4);
            while (__stlxr(v11 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 229:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_29>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C98;
          *a3 = qword_1ECF58C90;
          if (v4)
          {
            do
              v31 = __ldaxr(v4);
            while (__stlxr(v31 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_28>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C88;
          *a3 = qword_1ECF58C80;
          if (v4)
          {
            do
              v32 = __ldaxr(v4);
            while (__stlxr(v32 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_27>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58C78;
          *a3 = qword_1ECF58C70;
          if (v4)
          {
            do
              v12 = __ldaxr(v4);
            while (__stlxr(v12 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 230:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_32>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58CC8;
          *a3 = qword_1ECF58CC0;
          if (v4)
          {
            do
              v33 = __ldaxr(v4);
            while (__stlxr(v33 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_31>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58CB8;
          *a3 = qword_1ECF58CB0;
          if (v4)
          {
            do
              v34 = __ldaxr(v4);
            while (__stlxr(v34 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_30>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58CA8;
          *a3 = qword_1ECF58CA0;
          if (v4)
          {
            do
              v13 = __ldaxr(v4);
            while (__stlxr(v13 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 231:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_35>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58CF8;
          *a3 = qword_1ECF58CF0;
          if (v4)
          {
            do
              v35 = __ldaxr(v4);
            while (__stlxr(v35 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_34>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58CE8;
          *a3 = qword_1ECF58CE0;
          if (v4)
          {
            do
              v36 = __ldaxr(v4);
            while (__stlxr(v36 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_33>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58CD8;
          *a3 = qword_1ECF58CD0;
          if (v4)
          {
            do
              v14 = __ldaxr(v4);
            while (__stlxr(v14 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 232:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_8>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B48;
          *a3 = qword_1ECF58B40;
          if (v4)
          {
            do
              v37 = __ldaxr(v4);
            while (__stlxr(v37 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_7>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B38;
          *a3 = qword_1ECF58B30;
          if (v4)
          {
            do
              v38 = __ldaxr(v4);
            while (__stlxr(v38 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_6>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B28;
          *a3 = qword_1ECF58B20;
          if (v4)
          {
            do
              v15 = __ldaxr(v4);
            while (__stlxr(v15 + 1, v4));
          }
          break;
        default:
          goto LABEL_75;
      }
      goto LABEL_147;
    case 233:
      switch(a2)
      {
        case 4:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_11>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B78;
          *a3 = qword_1ECF58B70;
          if (v4)
          {
            do
              v39 = __ldaxr(v4);
            while (__stlxr(v39 + 1, v4));
          }
          break;
        case 2:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_10>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B68;
          *a3 = qword_1ECF58B60;
          if (v4)
          {
            do
              v40 = __ldaxr(v4);
            while (__stlxr(v40 + 1, v4));
          }
          break;
        case 1:
          std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_9>((uint64_t)&v41);
          v4 = *(unsigned int **)algn_1ECF58B58;
          *a3 = qword_1ECF58B50;
          if (v4)
          {
            do
              v16 = __ldaxr(v4);
            while (__stlxr(v16 + 1, v4));
          }
          break;
        default:
LABEL_75:
          *a3 = 0;
          a3[1] = 0;
          return;
      }
LABEL_147:
      a3[1] = v4;
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x198853758);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_0 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_1>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_1 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_2>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_2 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_3>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_3 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_4>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_4 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_5>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_5 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_6>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_6 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_7>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_7 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_8>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_8 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_9>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_9 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_10>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_10 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_11>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__10_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__10_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_11 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_12>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__11_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__11_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_12 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_13>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__12_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__12_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_13 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_14>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__13_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__13_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_14 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_15>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__14_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__14_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_15 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_16>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__15_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__15_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_16 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_17>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__16_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__16_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_17 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_18>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__17_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__17_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_18 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_19>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__18_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__18_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_19 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_20>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__19_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__19_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_20 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_21>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__20_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__20_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_21 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_22>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__21_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__21_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_22 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_23>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__22_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__22_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_23 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_24>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__23_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__23_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_24 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_25>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__24_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__24_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_25 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_26>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__25_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__25_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_26 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_27>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__26_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__26_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_27 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_28>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__27_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__27_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_28 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_29>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__28_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__28_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_29 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_30>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__29_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__29_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_30 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_31>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__30_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__30_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_31 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_32>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__31_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__31_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_32 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_33>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__32_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__32_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_33 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_34>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__33_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__33_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_34 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_35>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__34_);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&_ZZN3JSC5LLInt19returnLocationThunkENS_8OpcodeIDENS_10OpcodeSizeEE7onceKey__34_, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_35 &&>>);
  }
}

void JSC::CodeBlock::setJITCode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  if (*(_BYTE *)(*a2 + 13) != 1)
  {
    v10 = *(_QWORD *)(a1 + 72);
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 128))(*a2);
    if (v11 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, a1, v11, a5, a6, a7, a8);
  }
  v12 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
    goto LABEL_7;
  }
  if (__stxr(1u, v12))
    goto LABEL_6;
LABEL_7:
  __dmb(0xAu);
  v14 = *a2;
  *a2 = 0;
  v15 = *(unsigned int **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v14;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 32))(v15);
    }
  }
  v19 = __ldxr(v12);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v12))
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 16), 0, a3, a4, a5, a6, a7, a8);
}

void std::call_once[abi:sn180100]<JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::$_1>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::$_1 &&>>);
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::$_0 &&>>()
{
  unint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char **v48;
  char *v49;

  v0 = atomic_load(&qword_1ECF58970);
  if (v0 != -1)
  {
    v49 = &v47;
    v48 = &v49;
    std::__call_once(&qword_1ECF58970, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::programEntryThunk(void)::$_0 &&>>);
  }
  v2 = qword_1ECF58960;
  v1 = *(unsigned int **)algn_1ECF58968;
  if (*(_QWORD *)algn_1ECF58968)
  {
    do
      v3 = __ldaxr(v1);
    while (__stlxr(v3 + 1, v1));
    v4 = WTF::fastMalloc((WTF *)0x20);
    v12 = v4;
    do
      v13 = __ldaxr(v1);
    while (__stlxr(v13 + 1, v1));
    do
      v14 = __ldaxr(v1);
    while (__stlxr(v14 + 1, v1));
    *(_DWORD *)(v4 + 8) = 1;
    *(_WORD *)(v4 + 12) = 258;
    *(_BYTE *)(v4 + 14) = 0;
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)v4 = off_1E35959D8;
    do
      v15 = __ldaxr(v1);
    while (__stlxr(v15 + 1, v1));
    *(_QWORD *)(v4 + 24) = v1;
    do
    {
      v16 = __ldaxr(v1);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v1));
    if (!v17)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    *(_QWORD *)v12 = off_1E3595B48;
    *(_BYTE *)(v12 + 14) = 0;
    qword_1ECF58D00 = v12;
    do
    {
      v18 = __ldaxr(v1);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v1));
    if (!v19)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    do
    {
      v20 = __ldaxr(v1);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v1));
    if (!v21)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  else
  {
    v22 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v22 + 8) = 1;
    *(_WORD *)(v22 + 12) = 258;
    *(_QWORD *)(v22 + 16) = v2;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)v22 = off_1E3595B48;
    *(_BYTE *)(v22 + 14) = 0;
    qword_1ECF58D00 = v22;
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setProgramEntrypoint(JSC::CodeBlock *)::$_1 &&>>()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::fastMalloc((WTF *)0x20);
  v1 = qword_1ECF53328;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 258;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3595B48;
  *(_BYTE *)(result + 14) = 0;
  qword_1ECF58D10 = result;
  return result;
}

void std::call_once[abi:sn180100]<JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::$_1>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::$_1 &&>>);
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::$_0 &&>>()
{
  unint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char **v48;
  char *v49;

  v0 = atomic_load(&qword_1ECF58988);
  if (v0 != -1)
  {
    v49 = &v47;
    v48 = &v49;
    std::__call_once(&qword_1ECF58988, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::moduleProgramEntryThunk(void)::$_0 &&>>);
  }
  v2 = qword_1ECF58978;
  v1 = (unsigned int *)unk_1ECF58980;
  if (unk_1ECF58980)
  {
    do
      v3 = __ldaxr(v1);
    while (__stlxr(v3 + 1, v1));
    v4 = WTF::fastMalloc((WTF *)0x20);
    v12 = v4;
    do
      v13 = __ldaxr(v1);
    while (__stlxr(v13 + 1, v1));
    do
      v14 = __ldaxr(v1);
    while (__stlxr(v14 + 1, v1));
    *(_DWORD *)(v4 + 8) = 1;
    *(_WORD *)(v4 + 12) = 258;
    *(_BYTE *)(v4 + 14) = 0;
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)v4 = off_1E35959D8;
    do
      v15 = __ldaxr(v1);
    while (__stlxr(v15 + 1, v1));
    *(_QWORD *)(v4 + 24) = v1;
    do
    {
      v16 = __ldaxr(v1);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v1));
    if (!v17)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    *(_QWORD *)v12 = off_1E3595B48;
    *(_BYTE *)(v12 + 14) = 0;
    qword_1ECF58D18 = v12;
    do
    {
      v18 = __ldaxr(v1);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v1));
    if (!v19)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    do
    {
      v20 = __ldaxr(v1);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v1));
    if (!v21)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  else
  {
    v22 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v22 + 8) = 1;
    *(_WORD *)(v22 + 12) = 258;
    *(_QWORD *)(v22 + 16) = v2;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)v22 = off_1E3595B48;
    *(_BYTE *)(v22 + 14) = 0;
    qword_1ECF58D18 = v22;
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setModuleProgramEntrypoint(JSC::CodeBlock *)::$_1 &&>>()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::fastMalloc((WTF *)0x20);
  v1 = qword_1ECF531E8;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 258;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3595B48;
  *(_BYTE *)(result + 14) = 0;
  qword_1ECF58D28 = result;
  return result;
}

void std::call_once[abi:sn180100]<JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::$_1>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::$_1 &&>>);
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::$_0 &&>>()
{
  unint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char **v48;
  char *v49;

  v0 = atomic_load(&qword_1ECF58958);
  if (v0 != -1)
  {
    v49 = &v47;
    v48 = &v49;
    std::__call_once(&qword_1ECF58958, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::evalEntryThunk(void)::$_0 &&>>);
  }
  v2 = qword_1ECF58948;
  v1 = (unsigned int *)unk_1ECF58950;
  if (unk_1ECF58950)
  {
    do
      v3 = __ldaxr(v1);
    while (__stlxr(v3 + 1, v1));
    v4 = WTF::fastMalloc((WTF *)0x20);
    v12 = v4;
    do
      v13 = __ldaxr(v1);
    while (__stlxr(v13 + 1, v1));
    do
      v14 = __ldaxr(v1);
    while (__stlxr(v14 + 1, v1));
    *(_DWORD *)(v4 + 8) = 1;
    *(_WORD *)(v4 + 12) = 258;
    *(_BYTE *)(v4 + 14) = 0;
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)v4 = off_1E35959D8;
    do
      v15 = __ldaxr(v1);
    while (__stlxr(v15 + 1, v1));
    *(_QWORD *)(v4 + 24) = v1;
    do
    {
      v16 = __ldaxr(v1);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v1));
    if (!v17)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    *(_QWORD *)v12 = off_1E3595B48;
    *(_BYTE *)(v12 + 14) = 0;
    qword_1ECF58D30 = v12;
    do
    {
      v18 = __ldaxr(v1);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v1));
    if (!v19)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    do
    {
      v20 = __ldaxr(v1);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v1));
    if (!v21)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  else
  {
    v22 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v22 + 8) = 1;
    *(_WORD *)(v22 + 12) = 258;
    *(_QWORD *)(v22 + 16) = v2;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)v22 = off_1E3595B48;
    *(_BYTE *)(v22 + 14) = 0;
    qword_1ECF58D30 = v22;
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setEvalEntrypoint(JSC::CodeBlock *)::$_1 &&>>()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::fastMalloc((WTF *)0x20);
  v1 = qword_1ECF531E0;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 258;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3595B48;
  *(_BYTE *)(result + 14) = 0;
  qword_1ECF58D40 = result;
  return result;
}

void std::call_once[abi:sn180100]<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_2>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_2 &&>>);
  }
}

void std::call_once[abi:sn180100]<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_3>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::onceKey);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::onceKey, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_3 &&>>);
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_0 &&>>()
{
  unint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char **v61;
  char *v62;

  v0 = atomic_load(&qword_1ECF588F8);
  if (v0 != -1)
  {
    v62 = &v60;
    v61 = &v62;
    std::__call_once(&qword_1ECF588F8, &v61, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForCallEntryThunk(void)::$_0 &&>>);
  }
  v2 = _MergedGlobals_39;
  v1 = (unsigned int *)unk_1ECF588F0;
  if (unk_1ECF588F0)
  {
    do
      v3 = __ldaxr(v1);
    while (__stlxr(v3 + 1, v1));
  }
  v4 = atomic_load(&qword_1ECF58928);
  if (v4 != -1)
  {
    v62 = &v60;
    v61 = &v62;
    std::__call_once(&qword_1ECF58928, &v61, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForCallArityCheckThunk(void)::$_0 &&>>);
  }
  v6 = qword_1ECF58918;
  v5 = (unsigned int *)unk_1ECF58920;
  if (unk_1ECF58920)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
  }
  v8 = WTF::fastMalloc((WTF *)0x28);
  v16 = (_QWORD *)v8;
  if (v1)
  {
    do
      v17 = __ldaxr(v1);
    while (__stlxr(v17 + 1, v1));
    do
      v18 = __ldaxr(v1);
    while (__stlxr(v18 + 1, v1));
    *(_DWORD *)(v8 + 8) = 1;
    *(_WORD *)(v8 + 12) = 258;
    *(_BYTE *)(v8 + 14) = 0;
    *(_QWORD *)(v8 + 16) = v2;
    *(_QWORD *)v8 = off_1E35959D8;
    do
      v19 = __ldaxr(v1);
    while (__stlxr(v19 + 1, v1));
    *(_QWORD *)(v8 + 24) = v1;
    do
    {
      v20 = __ldaxr(v1);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v1));
    if (!v21)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    *v16 = off_1E3595A90;
    v16[4] = v6;
    qword_1ECF58D48 = (uint64_t)v16;
    do
    {
      v22 = __ldaxr(v1);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v1));
    if (!v23)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  else
  {
    *(_DWORD *)(v8 + 8) = 1;
    *(_WORD *)(v8 + 12) = 258;
    *(_BYTE *)(v8 + 14) = 0;
    *(_QWORD *)(v8 + 16) = v2;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = off_1E3595A90;
    *(_QWORD *)(v8 + 32) = v6;
    qword_1ECF58D48 = v8;
  }
  if (!v5)
    goto LABEL_25;
  do
  {
    v24 = __ldaxr(v5);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v5));
  if (!v25)
  {
    atomic_store(1u, v5);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v5, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    if (!v1)
      return;
  }
  else
  {
LABEL_25:
    if (!v1)
      return;
  }
  do
  {
    v26 = __ldaxr(v1);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v1));
  if (!v27)
  {
    atomic_store(1u, v1);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_1 &&>>()
{
  unint64_t v0;
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char **v61;
  char *v62;

  v0 = atomic_load(&qword_1ECF58910);
  if (v0 != -1)
  {
    v62 = &v60;
    v61 = &v62;
    std::__call_once(&qword_1ECF58910, &v61, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForConstructEntryThunk(void)::$_0 &&>>);
  }
  v2 = qword_1ECF58900;
  v1 = *(unsigned int **)algn_1ECF58908;
  if (*(_QWORD *)algn_1ECF58908)
  {
    do
      v3 = __ldaxr(v1);
    while (__stlxr(v3 + 1, v1));
  }
  v4 = atomic_load(&qword_1ECF58940);
  if (v4 != -1)
  {
    v62 = &v60;
    v61 = &v62;
    std::__call_once(&qword_1ECF58940, &v61, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForConstructArityCheckThunk(void)::$_0 &&>>);
  }
  v6 = qword_1ECF58930;
  v5 = *(unsigned int **)algn_1ECF58938;
  if (*(_QWORD *)algn_1ECF58938)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
  }
  v8 = WTF::fastMalloc((WTF *)0x28);
  v16 = (_QWORD *)v8;
  if (v1)
  {
    do
      v17 = __ldaxr(v1);
    while (__stlxr(v17 + 1, v1));
    do
      v18 = __ldaxr(v1);
    while (__stlxr(v18 + 1, v1));
    *(_DWORD *)(v8 + 8) = 1;
    *(_WORD *)(v8 + 12) = 258;
    *(_BYTE *)(v8 + 14) = 0;
    *(_QWORD *)(v8 + 16) = v2;
    *(_QWORD *)v8 = off_1E35959D8;
    do
      v19 = __ldaxr(v1);
    while (__stlxr(v19 + 1, v1));
    *(_QWORD *)(v8 + 24) = v1;
    do
    {
      v20 = __ldaxr(v1);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v1));
    if (!v21)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    *v16 = off_1E3595A90;
    v16[4] = v6;
    qword_1ECF58D58 = (uint64_t)v16;
    do
    {
      v22 = __ldaxr(v1);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v1));
    if (!v23)
    {
      atomic_store(1u, v1);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  else
  {
    *(_DWORD *)(v8 + 8) = 1;
    *(_WORD *)(v8 + 12) = 258;
    *(_BYTE *)(v8 + 14) = 0;
    *(_QWORD *)(v8 + 16) = v2;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = off_1E3595A90;
    *(_QWORD *)(v8 + 32) = v6;
    qword_1ECF58D58 = v8;
  }
  if (!v5)
    goto LABEL_25;
  do
  {
    v24 = __ldaxr(v5);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v5));
  if (!v25)
  {
    atomic_store(1u, v5);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v5, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    if (!v1)
      return;
  }
  else
  {
LABEL_25:
    if (!v1)
      return;
  }
  do
  {
    v26 = __ldaxr(v1);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v1));
  if (!v27)
  {
    atomic_store(1u, v1);
    JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_2 &&>>()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = WTF::fastMalloc((WTF *)0x28);
  v1 = qword_1ECF531F0;
  v2 = qword_1ECF53200;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 258;
  *(_BYTE *)(result + 14) = 0;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3595A90;
  *(_QWORD *)(result + 32) = v2;
  qword_1ECF58D68 = result;
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::setFunctionEntrypoint(JSC::CodeBlock *)::$_3 &&>>()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = WTF::fastMalloc((WTF *)0x28);
  v1 = qword_1ECF531F8;
  v2 = qword_1ECF53208;
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = 258;
  *(_BYTE *)(result + 14) = 0;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3595A90;
  *(_QWORD *)(result + 32) = v2;
  qword_1ECF58D70 = result;
  return result;
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [11],char const*,char [24],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [2]>(uint64_t a1, const char **a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v8, "%s", ": Entered ");
  WTF::PrintStream::printf(v8, "%s", *a2);
  WTF::PrintStream::printf(v8, "%s", " with executeCounter = ");
  WTF::PrintStream::printf(v8, "%lf/%lf, %d", *(float *)(a3 + 4) + (double)*(int *)a3, (double)*(int *)(a3 + 8), *(_DWORD *)a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

JSC::FunctionAllowlist *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::ensureGlobalJITAllowlist(void)::$_0 &&>>()
{
  return JSC::FunctionAllowlist::FunctionAllowlist((JSC::FunctionAllowlist *)&unk_1ECF58D80, (const char *)xmmword_1ECF4C2F8);
}

void JSC::VM::logEvent<JSC::LLInt::jitCompileAndSetHeuristics(JSC::VM&,JSC::CodeBlock *)::{lambda(void)#1}>(JSC::Profiler::Database *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  _BYTE *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v5 = *(_QWORD *)(a3 + 56);
  v27 = off_1E3572250;
  v28 = v30;
  v29 = xmmword_199122F80;
  v30[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "threshold not reached, counter = ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%lf/%lf, %d", *(float *)(v5 + 172) + (double)*(int *)(v5 + 168), (double)*(int *)(v5 + 176), *(_DWORD *)(v5 + 168));
  v27[5]((WTF::StringPrintStream *)&v27);
  v14 = v28;
  v13 = v29;
  v26 = 0;
  if (v28)
  {
    if ((unint64_t)v29 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198855AF8);
    }
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)(v29 + 17));
    *(_DWORD *)v15 = 1;
    v15[1] = v13;
    v26 = (WTF *)v15;
    v16 = v15 + 2;
    memcpy(v15 + 2, v14, v13);
    *((_BYTE *)v16 + v13) = 0;
    v17 = (unint64_t)v28;
    if (v28 == v30)
      goto LABEL_9;
  }
  else
  {
    v17 = 0;
  }
  WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayJITCompile", &v26, v9, v10, v11, v12);
  v25 = v26;
  v26 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
    else
      --*(_DWORD *)v25;
  }
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [42],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", ": Entered loop_osr with executeCounter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [41],JSC::ExecutionCounter<(JSC::CountingVariant)0>,char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", ": Entered replace with executeCounter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t *WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;

  v9 = result;
  v11 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(result, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *v9) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a2;
  v15 = ~(*a2 << 32) + *a2;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (uint64_t *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v11 - 4);
        v30 = 0;
        v29 = v11 + 8 * v32;
        goto LABEL_18;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (uint64_t *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*v9 - 16);
      v14 = *a2;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *v9;
  if (*v9)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v9;
  if (*v9)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v31 = 8;
LABEL_27:
      result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v9, v31, (uint64_t)v19, a3, a4, a5, a6, a7);
      v19 = result;
      v25 = *v9;
      if (*v9)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_17;
    }
LABEL_20:
    if (6 * *(_DWORD *)(v25 - 12) >= (2 * v28))
      v31 = (2 * v28);
    else
      v31 = v28;
    goto LABEL_27;
  }
LABEL_17:
  v29 = v25 + 8 * v28;
  v30 = 1;
LABEL_18:
  *(_QWORD *)a8 = v19;
  *(_QWORD *)(a8 + 8) = v29;
  *(_BYTE *)(a8 + 16) = v30;
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForCallEntryThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(v0, 198, "function for call");
  _MergedGlobals_39 = v0[0];
  unk_1ECF588F0 = v0[1];
}

void JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(_QWORD *a1, int a2, char *a3)
{
  unint64_t v6;
  pthread_key_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t (*v18)(void);
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  pthread_key_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;
  char v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  char v58;
  char **v59;
  char *v60;
  _QWORD v61[3];
  WTF *v62;
  _BYTE v63[128];
  unsigned int v64;
  char v65;
  int v66;
  int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _DWORD v71[6];
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  _BYTE v77[128];
  unsigned int v78;
  int v79;
  int v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _DWORD *v85;
  char v86;
  uint64_t v87;
  int v88;
  _DWORD *v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  LOBYTE(v71[0]) = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0x8000000080000000;
  v76 = v77;
  v78 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    v60 = (char *)v61;
    v61[0] = &v59;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v17 = *(_DWORD *)(v15 + 136);
    if (v78 < v17)
    {
      if (v76 && v76 != v77)
      {
        WTF::fastFree((unint64_t)v76, v8, v9, v10, v11, v12, v13, v14);
        v16 = *(_QWORD *)v15;
        v17 = *(_DWORD *)(v15 + 136);
      }
      v76 = (_BYTE *)v16;
      v78 = v17;
      *(_QWORD *)v15 = v15 + 8;
      *(_DWORD *)(v15 + 136) = 128;
    }
  }
  v79 = 0;
  v81 = 1;
  v80 = 0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = v71;
  v86 = 16;
  v87 = 0;
  v88 = 0x10000;
  v89 = v71;
  v90 = 17;
  v91 = 0;
  v92 = 0x20000;
  v93 = 0;
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v18 = g_opcodeMap[a2];
  v19 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v19 != -1)
  {
    v61[0] = &v59;
    v60 = (char *)v61;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (dword_1EE3430FC)
  {
    v20 = *(_BYTE *)qword_1EE3430F0;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v71, (uint64_t)v18, *(char *)qword_1EE3430F0, v10, v11, v12, v13, v14);
    v28 = v79;
    if (v79 + 4 > v78)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v76, v21, v22, v23, v24, v25, v26, v27);
      v28 = v79;
    }
    *(_DWORD *)&v76[v28] = (32 * (v20 & 0x1F)) | 0xD61F0000;
    v79 += 4;
    v61[0] = 0;
    v61[1] = 0;
    v61[2] = -1;
    v62 = (WTF *)v63;
    v64 = 128;
    v29 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v29 != -1)
    {
      v60 = &v58;
      v59 = &v60;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v30 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v38 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v38)
    {
      v38 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v38, v30);
    }
    v39 = *(WTF **)v38;
    if (*(_QWORD *)v38 != v38 + 8)
    {
      v40 = *(_DWORD *)(v38 + 136);
      if (v64 < v40)
      {
        if (v62)
        {
          if (v62 != (WTF *)v63)
          {
            WTF::fastFree((unint64_t)v62, v31, v32, v33, v34, v35, v36, v37);
            v39 = *(WTF **)v38;
            v40 = *(_DWORD *)(v38 + 136);
          }
        }
        v62 = v39;
        v64 = v40;
        *(_QWORD *)v38 = v38 + 8;
        *(_DWORD *)(v38 + 136) = 128;
      }
    }
    v41 = 1;
    v65 = 1;
    v66 = 0;
    v67 = 9;
    v68 = 0u;
    v69 = 0u;
    v70 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)v61, (uint64_t)v71, 1, v33, v34, v35, v36, v37);
    BYTE2(v66) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        v42 = strlen(a3);
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)357>(a1, (uint64_t)v61, a3, v42 + 1);
LABEL_29:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v61, v43, v44, v45, v46, v47, v48, v49);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v71, v50, v51, v52, v53, v54, v55, v56);
        return;
      }
      v41 = HIBYTE(word_1ECF4C286) != 0;
    }
    v57 = strlen(a3);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)v61, v41, a3, v57 + 1, "LLInt %s jump to prologue thunk", (uint64_t)a3, a1);
    goto LABEL_29;
  }
  __break(0xC471u);
}

void JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)357>(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  JSC::ExecutableMemoryHandle *v52;

  v8 = *(unsigned int *)(a2 + 204);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a2 + 192);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2);
      v10 -= 8;
    }
    while (v10);
  }
  v12 = *(unsigned int *)(a2 + 220);
  if ((_DWORD)v12)
  {
    v31 = *(uint64_t **)(a2 + 208);
    v32 = 8 * v12;
    do
    {
      v33 = *v31++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, a2);
      v32 -= 8;
    }
    while (v32);
  }
  v13 = *(unsigned int *)(a2 + 176);
  *((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v13) += *(_QWORD *)(a2 + 8);
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v13);
  v14 = (uint64_t *)(a2 + 184);
  sys_icache_invalidate(*(void **)(a2 + 184), *(_QWORD *)(a2 + 8));
  v22 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v50 = __ldaxr(v22);
    while (__stlxr(v50 + 1, v22));
    v14 = (uint64_t *)(v22 + 2);
  }
  v23 = *v14;
  v51 = v23;
  v52 = (JSC::ExecutableMemoryHandle *)v22;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf(a2, (uint64_t)&v51, a3, a4);
  *a1 = v23;
  a1[1] = 0;
  if (v22)
  {
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 + 1, v22));
    v25 = (unsigned int *)a1[1];
    a1[1] = v22;
    if (v25)
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    v28 = (unsigned int *)v52;
    v52 = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v28, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
    }
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForConstructEntryThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(v0, 199, "function for construct");
  qword_1ECF58900 = v0[0];
  *(_QWORD *)algn_1ECF58908 = v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForCallArityCheckThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(v0, 200, "function for call with arity check");
  qword_1ECF58918 = v0[0];
  unk_1ECF58920 = v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::functionForConstructArityCheckThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(v0, 201, "function for construct with arity check");
  qword_1ECF58930 = v0[0];
  *(_QWORD *)algn_1ECF58938 = v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::evalEntryThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(v0, 196, "eval");
  qword_1ECF58948 = v0[0];
  unk_1ECF58950 = v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::programEntryThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(v0, 237, "program");
  qword_1ECF58960 = v0[0];
  *(_QWORD *)algn_1ECF58968 = v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::moduleProgramEntryThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)357>(v0, 197, "module_program");
  qword_1ECF58978 = v0[0];
  unk_1ECF58980 = v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::wasmFunctionEntryThunk(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)26129>(v0, 236, "function for wasm call");
  JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef = v0[0];
  JSC::LLInt::wasmFunctionEntryThunk(void)::codeRef = v0[1];
}

void JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)26129>(_QWORD *a1, int a2, char *a3)
{
  unint64_t v6;
  pthread_key_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t (*v18)(void);
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  pthread_key_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  unsigned int v40;
  char v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  char v58;
  char **v59;
  char *v60;
  _QWORD v61[3];
  WTF *v62;
  _BYTE v63[128];
  unsigned int v64;
  char v65;
  int v66;
  int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _DWORD v71[6];
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  _BYTE v77[128];
  unsigned int v78;
  int v79;
  int v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _DWORD *v85;
  char v86;
  uint64_t v87;
  int v88;
  _DWORD *v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  LOBYTE(v71[0]) = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0x8000000080000000;
  v76 = v77;
  v78 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    v60 = (char *)v61;
    v61[0] = &v59;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v17 = *(_DWORD *)(v15 + 136);
    if (v78 < v17)
    {
      if (v76 && v76 != v77)
      {
        WTF::fastFree((unint64_t)v76, v8, v9, v10, v11, v12, v13, v14);
        v16 = *(_QWORD *)v15;
        v17 = *(_DWORD *)(v15 + 136);
      }
      v76 = (_BYTE *)v16;
      v78 = v17;
      *(_QWORD *)v15 = v15 + 8;
      *(_DWORD *)(v15 + 136) = 128;
    }
  }
  v79 = 0;
  v81 = 1;
  v80 = 0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = v71;
  v86 = 16;
  v87 = 0;
  v88 = 0x10000;
  v89 = v71;
  v90 = 17;
  v91 = 0;
  v92 = 0x20000;
  v93 = 0;
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v18 = g_opcodeMap[a2];
  v19 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v19 != -1)
  {
    v61[0] = &v59;
    v60 = (char *)v61;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (dword_1EE3430FC)
  {
    v20 = *(_BYTE *)qword_1EE3430F0;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v71, (uint64_t)v18, *(char *)qword_1EE3430F0, v10, v11, v12, v13, v14);
    v28 = v79;
    if (v79 + 4 > v78)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v76, v21, v22, v23, v24, v25, v26, v27);
      v28 = v79;
    }
    *(_DWORD *)&v76[v28] = (32 * (v20 & 0x1F)) | 0xD61F0000;
    v79 += 4;
    v61[0] = 0;
    v61[1] = 0;
    v61[2] = -1;
    v62 = (WTF *)v63;
    v64 = 128;
    v29 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v29 != -1)
    {
      v60 = &v58;
      v59 = &v60;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v30 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v38 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v38)
    {
      v38 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v38, v30);
    }
    v39 = *(WTF **)v38;
    if (*(_QWORD *)v38 != v38 + 8)
    {
      v40 = *(_DWORD *)(v38 + 136);
      if (v64 < v40)
      {
        if (v62)
        {
          if (v62 != (WTF *)v63)
          {
            WTF::fastFree((unint64_t)v62, v31, v32, v33, v34, v35, v36, v37);
            v39 = *(WTF **)v38;
            v40 = *(_DWORD *)(v38 + 136);
          }
        }
        v62 = v39;
        v64 = v40;
        *(_QWORD *)v38 = v38 + 8;
        *(_DWORD *)(v38 + 136) = 128;
      }
    }
    v41 = 1;
    v65 = 1;
    v66 = 0;
    v67 = 9;
    v68 = 0u;
    v69 = 0u;
    v70 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)v61, (uint64_t)v71, 1, v33, v34, v35, v36, v37);
    BYTE2(v66) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        v42 = strlen(a3);
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v61, a3, v42 + 1, a1);
LABEL_29:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v61, v43, v44, v45, v46, v47, v48, v49);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v71, v50, v51, v52, v53, v54, v55, v56);
        return;
      }
      v41 = HIBYTE(word_1ECF4C286) != 0;
    }
    v57 = strlen(a3);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)v61, v41, a3, v57 + 1, "LLInt %s jump to prologue thunk", (uint64_t)a3, a1);
    goto LABEL_29;
  }
  __break(0xC471u);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::wasmFunctionEntryThunkSIMD(void)::$_0 &&>>()
{
  _QWORD v0[2];

  JSC::LLInt::generateThunkWithJumpToPrologue<(WTF::PtrTag)26129>(v0, 255, "function for wasm SIMD call");
  qword_1ECF58990 = v0[0];
  *(_QWORD *)algn_1ECF58998 = v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::inPlaceInterpreterEntryThunk(void)::$_0 &&>>()
{
  unint64_t v0;
  pthread_key_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  pthread_key_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  unsigned int v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF **p_start;
  uint64_t v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  WTF *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  BOOL v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  WTF *v75;
  JSC::ExecutableMemoryHandle *v76;
  char v77;
  WTF **v78;
  unsigned int *v79;
  size_t len;
  uint64_t v81;
  WTF *v82;
  _BYTE v83[128];
  unsigned int v84;
  char v85;
  int v86;
  unsigned int v87;
  __int128 start;
  __int128 v89;
  uint64_t v90;
  _DWORD v91[6];
  char v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  unsigned int v99;
  int v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _DWORD *v105;
  char v106;
  uint64_t v107;
  int v108;
  _DWORD *v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  LOBYTE(v91[0]) = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0x8000000080000000;
  v96 = (WTF *)v97;
  v98 = 128;
  v0 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v0 != -1)
  {
    v79 = (unsigned int *)&v78;
    v75 = (WTF *)&v79;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v1 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v9 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v9)
  {
    v9 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v9, v1);
  }
  v10 = *(WTF **)v9;
  if (*(_QWORD *)v9 != v9 + 8)
  {
    v11 = *(_DWORD *)(v9 + 136);
    if (v98 < v11)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v2, v3, v4, v5, v6, v7, v8);
        v10 = *(WTF **)v9;
        v11 = *(_DWORD *)(v9 + 136);
      }
      v96 = v10;
      v98 = v11;
      *(_QWORD *)v9 = v9 + 8;
      *(_DWORD *)(v9 + 136) = 128;
    }
  }
  v101 = 1;
  v99 = 0;
  v100 = 0;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = v91;
  v106 = 16;
  v107 = 0;
  v108 = 0x10000;
  v109 = v91;
  v110 = 17;
  v111 = 0;
  v112 = 0x20000;
  v113 = 0;
  v116 = 0;
  v114 = 0;
  v115 = 0;
  v12 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v12 != -1)
  {
    v79 = (unsigned int *)&v78;
    v75 = (WTF *)&v79;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (dword_1EE3430FC)
  {
    v13 = *(_BYTE *)qword_1EE3430F0;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v91, (uint64_t)ipint_entry, *(char *)qword_1EE3430F0, v4, v5, v6, v7, v8);
    v21 = v99;
    if (v99 + 4 > v98)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v96, v14, v15, v16, v17, v18, v19, v20);
      v21 = v99;
    }
    *(_DWORD *)((char *)v96 + v21) = (32 * (v13 & 0x1F)) | 0xD61F0000;
    v99 += 4;
    v79 = 0;
    len = 0;
    v81 = -1;
    v82 = (WTF *)v83;
    v84 = 128;
    v22 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v22 != -1)
    {
      v75 = (WTF *)&v77;
      v78 = &v75;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v23 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v31 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v31)
    {
      v31 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v31, v23);
    }
    v32 = *(WTF **)v31;
    if (*(_QWORD *)v31 != v31 + 8)
    {
      v33 = *(_DWORD *)(v31 + 136);
      if (v84 < v33)
      {
        if (v82 && v82 != (WTF *)v83)
        {
          WTF::fastFree((unint64_t)v82, v24, v25, v26, v27, v28, v29, v30);
          v32 = *(WTF **)v31;
          v33 = *(_DWORD *)(v31 + 136);
        }
        v82 = v32;
        v84 = v33;
        *(_QWORD *)v31 = v31 + 8;
        *(_DWORD *)(v31 + 136) = 128;
      }
    }
    v34 = 1;
    v85 = 1;
    v86 = 0;
    v87 = 9;
    start = 0u;
    v89 = 0u;
    v90 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v79, (uint64_t)v91, 1, v26, v27, v28, v29, v30);
    BYTE2(v86) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        if (DWORD1(v89))
        {
          v35 = (uint64_t *)*((_QWORD *)&start + 1);
          v36 = 8 * DWORD1(v89);
          do
          {
            v37 = *v35++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v37 + 16))(v37, &v79);
            v36 -= 8;
          }
          while (v36);
        }
        p_start = (WTF **)&start;
        if (HIDWORD(v90))
        {
          v61 = (uint64_t *)*((_QWORD *)&v89 + 1);
          v62 = 8 * HIDWORD(v90);
          do
          {
            v63 = *v61++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v63 + 16))(v63, &v79);
            v62 -= 8;
          }
          while (v62);
        }
        v39 = v87;
        v40 = len;
        *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v87) += len;
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v39);
        sys_icache_invalidate((void *)start, v40);
        v48 = v79;
        if (v79)
        {
          do
            v74 = __ldaxr(v48);
          while (__stlxr(v74 + 1, v48));
          p_start = (WTF **)(v48 + 2);
        }
        v49 = *p_start;
        v75 = v49;
        v76 = (JSC::ExecutableMemoryHandle *)v48;
        if (byte_1ECF4C2A2)
        {
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v79, (uint64_t)&v75, "inPlaceInterpreterEntryThunk", 29);
          if (v48)
            goto LABEL_35;
        }
        else if (v48)
        {
          do
LABEL_35:
            v50 = __ldaxr(v48);
          while (__stlxr(v50 + 1, v48));
          v51 = (unsigned int *)v76;
          v76 = 0;
          if (!v51)
            goto LABEL_40;
          do
          {
            v52 = __ldaxr(v51);
            v53 = --v52 == 0;
          }
          while (__stlxr(v52, v51));
          goto LABEL_38;
        }
LABEL_40:
        JSC::LLInt::inPlaceInterpreterEntryThunk(void)::codeRef = (uint64_t)v49;
        JSC::LLInt::inPlaceInterpreterEntryThunk(void)::codeRef = (uint64_t)v48;
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v79, v41, v42, v43, v44, v45, v46, v47);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v91, v54, v55, v56, v57, v58, v59, v60);
        return;
      }
      v34 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v79, v34, "inPlaceInterpreterEntryThunk", 29, "LLInt %s jump to prologue thunk", &v75, (uint64_t)"function for wasm in place interpreter");
    v49 = v75;
    v48 = (unsigned int *)v76;
    if (!v76)
      goto LABEL_40;
    do
      v64 = __ldaxr(v48);
    while (__stlxr(v64 + 1, v48));
    v51 = (unsigned int *)v76;
    v76 = 0;
    if (!v51)
      goto LABEL_40;
    do
    {
      v65 = __ldaxr(v51);
      v53 = --v65 == 0;
    }
    while (__stlxr(v65, v51));
LABEL_38:
    if (v53)
    {
      atomic_store(1u, v51);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v51, (uint64_t)v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    goto LABEL_40;
  }
  __break(0xC471u);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::$_0 &&>>()
{
  unint64_t v0;
  pthread_key_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  pthread_key_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  unsigned int v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF **p_start;
  uint64_t v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  WTF *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  BOOL v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  WTF *v75;
  JSC::ExecutableMemoryHandle *v76;
  char v77;
  WTF **v78;
  unsigned int *v79;
  size_t len;
  uint64_t v81;
  WTF *v82;
  _BYTE v83[128];
  unsigned int v84;
  char v85;
  int v86;
  unsigned int v87;
  __int128 start;
  __int128 v89;
  uint64_t v90;
  _DWORD v91[6];
  char v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  WTF *v96;
  _BYTE v97[128];
  unsigned int v98;
  unsigned int v99;
  int v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _DWORD *v105;
  char v106;
  uint64_t v107;
  int v108;
  _DWORD *v109;
  char v110;
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  LOBYTE(v91[0]) = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0x8000000080000000;
  v96 = (WTF *)v97;
  v98 = 128;
  v0 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v0 != -1)
  {
    v79 = (unsigned int *)&v78;
    v75 = (WTF *)&v79;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v1 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v9 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v9)
  {
    v9 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v9, v1);
  }
  v10 = *(WTF **)v9;
  if (*(_QWORD *)v9 != v9 + 8)
  {
    v11 = *(_DWORD *)(v9 + 136);
    if (v98 < v11)
    {
      if (v96 && v96 != (WTF *)v97)
      {
        WTF::fastFree((unint64_t)v96, v2, v3, v4, v5, v6, v7, v8);
        v10 = *(WTF **)v9;
        v11 = *(_DWORD *)(v9 + 136);
      }
      v96 = v10;
      v98 = v11;
      *(_QWORD *)v9 = v9 + 8;
      *(_DWORD *)(v9 + 136) = 128;
    }
  }
  v101 = 1;
  v99 = 0;
  v100 = 0;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = v91;
  v106 = 16;
  v107 = 0;
  v108 = 0x10000;
  v109 = v91;
  v110 = 17;
  v111 = 0;
  v112 = 0x20000;
  v113 = 0;
  v116 = 0;
  v114 = 0;
  v115 = 0;
  v12 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v12 != -1)
  {
    v79 = (unsigned int *)&v78;
    v75 = (WTF *)&v79;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (dword_1EE3430FC)
  {
    v13 = *(_BYTE *)qword_1EE3430F0;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v91, (uint64_t)ipint_entry_simd, *(char *)qword_1EE3430F0, v4, v5, v6, v7, v8);
    v21 = v99;
    if (v99 + 4 > v98)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v96, v14, v15, v16, v17, v18, v19, v20);
      v21 = v99;
    }
    *(_DWORD *)((char *)v96 + v21) = (32 * (v13 & 0x1F)) | 0xD61F0000;
    v99 += 4;
    v79 = 0;
    len = 0;
    v81 = -1;
    v82 = (WTF *)v83;
    v84 = 128;
    v22 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v22 != -1)
    {
      v75 = (WTF *)&v77;
      v78 = &v75;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v23 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v31 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v31)
    {
      v31 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v31, v23);
    }
    v32 = *(WTF **)v31;
    if (*(_QWORD *)v31 != v31 + 8)
    {
      v33 = *(_DWORD *)(v31 + 136);
      if (v84 < v33)
      {
        if (v82 && v82 != (WTF *)v83)
        {
          WTF::fastFree((unint64_t)v82, v24, v25, v26, v27, v28, v29, v30);
          v32 = *(WTF **)v31;
          v33 = *(_DWORD *)(v31 + 136);
        }
        v82 = v32;
        v84 = v33;
        *(_QWORD *)v31 = v31 + 8;
        *(_DWORD *)(v31 + 136) = 128;
      }
    }
    v34 = 1;
    v85 = 1;
    v86 = 0;
    v87 = 9;
    start = 0u;
    v89 = 0u;
    v90 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v79, (uint64_t)v91, 1, v26, v27, v28, v29, v30);
    BYTE2(v86) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        if (DWORD1(v89))
        {
          v35 = (uint64_t *)*((_QWORD *)&start + 1);
          v36 = 8 * DWORD1(v89);
          do
          {
            v37 = *v35++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v37 + 16))(v37, &v79);
            v36 -= 8;
          }
          while (v36);
        }
        p_start = (WTF **)&start;
        if (HIDWORD(v90))
        {
          v61 = (uint64_t *)*((_QWORD *)&v89 + 1);
          v62 = 8 * HIDWORD(v90);
          do
          {
            v63 = *v61++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v63 + 16))(v63, &v79);
            v62 -= 8;
          }
          while (v62);
        }
        v39 = v87;
        v40 = len;
        *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v87) += len;
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v39);
        sys_icache_invalidate((void *)start, v40);
        v48 = v79;
        if (v79)
        {
          do
            v74 = __ldaxr(v48);
          while (__stlxr(v74 + 1, v48));
          p_start = (WTF **)(v48 + 2);
        }
        v49 = *p_start;
        v75 = v49;
        v76 = (JSC::ExecutableMemoryHandle *)v48;
        if (byte_1ECF4C2A2)
        {
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v79, (uint64_t)&v75, "inPlaceInterpreterEntryThunkSIMD", 33);
          if (v48)
            goto LABEL_35;
        }
        else if (v48)
        {
          do
LABEL_35:
            v50 = __ldaxr(v48);
          while (__stlxr(v50 + 1, v48));
          v51 = (unsigned int *)v76;
          v76 = 0;
          if (!v51)
            goto LABEL_40;
          do
          {
            v52 = __ldaxr(v51);
            v53 = --v52 == 0;
          }
          while (__stlxr(v52, v51));
          goto LABEL_38;
        }
LABEL_40:
        JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::codeRef = (uint64_t)v49;
        JSC::LLInt::inPlaceInterpreterEntryThunkSIMD(void)::codeRef = (uint64_t)v48;
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v79, v41, v42, v43, v44, v45, v46, v47);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v91, v54, v55, v56, v57, v58, v59, v60);
        return;
      }
      v34 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v79, v34, "inPlaceInterpreterEntryThunkSIMD", 33, "LLInt %s jump to prologue thunk", &v75, (uint64_t)"function for wasm in place interpreter");
    v49 = v75;
    v48 = (unsigned int *)v76;
    if (!v76)
      goto LABEL_40;
    do
      v64 = __ldaxr(v48);
    while (__stlxr(v64 + 1, v48));
    v51 = (unsigned int *)v76;
    v76 = 0;
    if (!v51)
      goto LABEL_40;
    do
    {
      v65 = __ldaxr(v51);
      v53 = --v65 == 0;
    }
    while (__stlxr(v65, v51));
LABEL_38:
    if (v53)
    {
      atomic_store(1u, v51);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v51, (uint64_t)v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    goto LABEL_40;
  }
  __break(0xC471u);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::defaultCallThunk(void)::$_0 &&>>()
{
  unint64_t v0;
  pthread_key_t *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint8x8_t v23;
  __int32 v24;
  uint8x8_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  char v36;
  char v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  unsigned __int8 *v44;
  char *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  pthread_key_t *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unsigned int v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  WTF **p_start;
  uint64_t v82;
  size_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  WTF *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  BOOL v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void **p_dst;
  JSC::ExecutableMemoryHandle *v123;
  char v124;
  WTF **p_p_dst;
  void *__dst;
  size_t len;
  uint64_t v128;
  WTF *v129;
  _BYTE v130[128];
  unsigned int v131;
  char v132;
  int v133;
  unsigned int v134;
  __int128 start;
  __int128 v136;
  uint64_t v137;
  _DWORD v138[6];
  char v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  WTF *v143;
  _BYTE v144[128];
  unsigned int v145;
  unsigned int v146;
  int v147;
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _DWORD *v152;
  char v153;
  uint64_t v154;
  int v155;
  _DWORD *v156;
  char v157;
  uint64_t v158;
  int v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  LOBYTE(v138[0]) = 0;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0x8000000080000000;
  v143 = (WTF *)v144;
  v145 = 128;
  v0 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v0 != -1)
  {
    __dst = &p_p_dst;
    p_dst = &__dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v1 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v9 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v9)
  {
    v9 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v9, v1);
  }
  v10 = *(WTF **)v9;
  v11 = v145;
  if (*(_QWORD *)v9 != v9 + 8)
  {
    v12 = *(_DWORD *)(v9 + 136);
    if (v145 < v12)
    {
      if (v143 && v143 != (WTF *)v144)
      {
        WTF::fastFree((unint64_t)v143, v2, v3, v4, v5, v6, v7, v8);
        v10 = *(WTF **)v9;
        v12 = *(_DWORD *)(v9 + 136);
      }
      v143 = v10;
      v145 = v12;
      *(_QWORD *)v9 = v9 + 8;
      *(_DWORD *)(v9 + 136) = 128;
      v11 = v145;
    }
  }
  v13 = 0;
  v148 = 1;
  v146 = 0;
  v147 = 0;
  v149 = 0u;
  v150 = 0u;
  v151 = 0u;
  v153 = 16;
  v155 = 0x10000;
  v152 = v138;
  v154 = 0;
  v156 = v138;
  v157 = 17;
  v158 = 0;
  v159 = 0x20000;
  v160 = 0;
  v162 = 0;
  v161 = 0;
  if (v11 <= 3)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v143, (uint64_t)v2, v3, v4, v5, v6, v7, v8);
    v13 = v146;
  }
  *(_DWORD *)((char *)v143 + v13) = -1447068675;
  v14 = v146;
  v15 = v146 + 4;
  v146 += 4;
  if (v14 + 8 > v145)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v143, (uint64_t)v2, v3, v4, v5, v6, v7, v8);
    v15 = v146;
  }
  *(_DWORD *)((char *)v143 + v15) = -1862269955;
  v146 += 4;
  __dst = &v128;
  LODWORD(v128) = 16908317;
  len = 0x200000002;
  v16 = 2;
  while (2)
  {
    v17 = 0;
    v18 = 0;
    v19 = (char *)__dst;
    v20 = v16;
    do
    {
      if ((*((_BYTE *)__dst + v17 + 1) & 0x40) != 0)
      {
LABEL_106:
        __break(1u);
LABEL_107:
        v77 = v16 != 0;
        goto LABEL_108;
      }
      v18 |= 1 << *((_BYTE *)__dst + v17 + 1);
      v17 += 2;
    }
    while (2 * v16 != v17);
    v21 = 0;
    do
    {
      v22 = *((_BYTE *)__dst + v21) & 0x7F;
      if (v22 >= 0x40)
        goto LABEL_106;
      v18 &= ~(1 << v22);
      v21 += 2;
    }
    while (2 * v16 != v21);
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v23.i16[0] = vaddlv_u8(v23);
    v24 = v23.i32[0];
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v18));
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.i32[0] + v24)
    {
      v26 = 0;
      if (v16 <= 1)
        v27 = 1;
      else
        v27 = v16;
      v28 = 2 * v27;
      while (1)
      {
        v29 = *((unsigned __int8 *)__dst + v26 + 1);
        if ((v29 & 0x7Fu) >= 0x40)
          goto LABEL_106;
        if (((v18 >> (v29 & 0x7F)) & 1) != 0)
          break;
        v26 += 2;
        if (v28 == v26)
          goto LABEL_66;
      }
      v30 = *((unsigned __int8 *)__dst + v26);
      if (v30 != v29)
      {
        v31 = (char)v30;
        if ((char)v30 == 63)
        {
          v32 = v146;
          v33 = v145;
          if (v29 == 31)
            goto LABEL_60;
          v35 = v29 & 0x1F | 0xD2800000;
        }
        else
        {
          v32 = v146;
          v33 = v145;
          v34 = (char)v29 == 31 || v31 == 31;
          if (!v34)
          {
            v35 = v29 & 0xFFE0FFFF | ((v31 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_61;
          }
LABEL_60:
          v35 = (char)v29 | (32 * v31) | 0x91000000;
        }
LABEL_61:
        if (v32 + 4 > v33)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v143, (uint64_t)v2, v3, v4, v5, v6, v7, v8);
          v32 = v146;
        }
        *(_DWORD *)((char *)v143 + v32) = v35;
        v146 += 4;
        v19 = (char *)__dst;
        v20 = HIDWORD(len);
      }
      memmove(&v19[v26], &v19[v26 + 2], 2 * v20 - v26 - 2);
      v16 = HIDWORD(len) - 1;
      goto LABEL_65;
    }
    v36 = *(_BYTE *)__dst;
    v37 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v138, *(char *)__dst, v37, v4, v5, v6, v7, v8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(len) - 2);
    v38 = (HIDWORD(len) - 1);
    v34 = HIDWORD(len) == 1;
    HIDWORD(len) = v38;
    v39 = (unsigned __int8 *)__dst;
    v40 = (unsigned __int8 *)__dst + 2 * v38;
    if (v34)
    {
      v47 = 0;
      v48 = 0;
      v43 = 0;
      v2 = v40;
    }
    else
    {
      v41 = 2 * v38;
      v42 = __dst;
      while (*v42 != v37)
      {
        v42 += 2;
        v41 -= 2;
        if (!v41)
          goto LABEL_44;
      }
      *v42 = v36;
LABEL_44:
      v43 = 0;
      v44 = v39;
      v2 = v40;
      v45 = (char *)v40;
      do
      {
        if (*v39 == v39[1])
        {
          v46 = v39;
          if (v45 != (char *)__dst + 2 * HIDWORD(len))
          {
            v121 = (char *)v40;
            if (v39 == v2)
            {
              v46 = (unsigned __int8 *)v45;
            }
            else
            {
              v119 = v44 - v2;
              v120 = v45;
              memmove(v45, v2, v44 - v2);
              v46 = (unsigned __int8 *)&v120[v119];
            }
            v40 = (unsigned __int8 *)v121;
          }
          v2 = v39 + 2;
          ++v43;
          v45 = (char *)v46;
        }
        v39 += 2;
        v44 += 2;
      }
      while (v39 < v40);
      v39 = (unsigned __int8 *)__dst;
      v47 = HIDWORD(len);
      v48 = HIDWORD(len);
      v40 = (unsigned __int8 *)v45;
    }
    v49 = &v39[2 * v47];
    if (v2 != v49)
    {
      memmove(v40, v2, v49 - v2);
      v48 = HIDWORD(len);
    }
    v16 = v48 - v43;
LABEL_65:
    HIDWORD(len) = v16;
LABEL_66:
    if (v16)
      continue;
    break;
  }
  v50 = __dst;
  if (&v128 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(len) = 0;
    WTF::fastFree((unint64_t)v50, v2, v3, v4, v5, v6, v7, v8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v138, (uint64_t)operationDefaultCall, 8, v4, v5, v6, v7, v8);
  v147 = 0;
  v58 = v146;
  if (v146 + 4 > v145)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v143, v51, v52, v53, v54, v55, v56, v57);
    v58 = v146;
  }
  *(_DWORD *)((char *)v143 + v58) = -700514048;
  v59 = v146;
  v60 = v146 + 4;
  v146 += 4;
  if (v59 + 8 > v145)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v143, v51, v52, v53, v54, v55, v56, v57);
    v60 = v146;
  }
  *(_DWORD *)((char *)v143 + v60) = -1862270017;
  v61 = v146;
  v62 = v146 + 4;
  v146 += 4;
  if (v61 + 8 > v145)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v143, v51, v52, v53, v54, v55, v56, v57);
    v62 = v146;
  }
  *(_DWORD *)((char *)v143 + v62) = -1463714819;
  v63 = v146;
  v64 = v146 + 4;
  v146 += 4;
  if (v63 + 8 > v145)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v143, v51, v52, v53, v54, v55, v56, v57);
    v64 = v146;
  }
  *(_DWORD *)((char *)v143 + v64) = -702611456;
  v146 += 4;
  __dst = 0;
  len = 0;
  v128 = -1;
  v129 = (WTF *)v130;
  v131 = 128;
  v65 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v65 != -1)
  {
    p_dst = (void **)&v124;
    p_p_dst = (WTF **)&p_dst;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &p_p_dst, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v66 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v74 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v74)
  {
    v74 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v74, v66);
  }
  v75 = *(WTF **)v74;
  if (*(_QWORD *)v74 != v74 + 8)
  {
    v76 = *(_DWORD *)(v74 + 136);
    if (v131 < v76)
    {
      if (v129 && v129 != (WTF *)v130)
      {
        WTF::fastFree((unint64_t)v129, v67, v68, v69, v70, v71, v72, v73);
        v75 = *(WTF **)v74;
        v76 = *(_DWORD *)(v74 + 136);
      }
      v129 = v75;
      v131 = v76;
      *(_QWORD *)v74 = v74 + 8;
      *(_DWORD *)(v74 + 136) = 128;
    }
  }
  v77 = 1;
  v132 = 1;
  v133 = 0;
  v134 = 8;
  start = 0u;
  v136 = 0u;
  v137 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&__dst, (uint64_t)v138, 1, v69, v70, v71, v72, v73);
  if (!byte_1ECF4C288)
  {
    v16 = HIBYTE(word_1ECF4C286);
    if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
    {
      if (DWORD1(v136))
      {
        v78 = (uint64_t *)*((_QWORD *)&start + 1);
        v79 = 8 * DWORD1(v136);
        do
        {
          v80 = *v78++;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v80 + 16))(v80, &__dst);
          v79 -= 8;
        }
        while (v79);
      }
      p_start = (WTF **)&start;
      if (HIDWORD(v137))
      {
        v105 = (uint64_t *)*((_QWORD *)&v136 + 1);
        v106 = 8 * HIDWORD(v137);
        do
        {
          v107 = *v105++;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v107 + 16))(v107, &__dst);
          v106 -= 8;
        }
        while (v106);
      }
      v82 = v134;
      v83 = len;
      *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v134 / 2] += len;
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v82);
      sys_icache_invalidate((void *)start, v83);
      v91 = (unsigned int *)__dst;
      if (__dst)
      {
        do
          v118 = __ldaxr(v91);
        while (__stlxr(v118 + 1, v91));
        p_start = (WTF **)(v91 + 2);
      }
      v92 = *p_start;
      p_dst = (void **)v92;
      v123 = (JSC::ExecutableMemoryHandle *)v91;
      if (byte_1ECF4C2A2)
      {
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&__dst, (uint64_t)&p_dst, "DefaultCall", 12);
        if (!v91)
          goto LABEL_102;
      }
      else if (!v91)
      {
        goto LABEL_102;
      }
      do
        v93 = __ldaxr(v91);
      while (__stlxr(v93 + 1, v91));
      v94 = (unsigned int *)v123;
      v123 = 0;
      if (v94)
      {
        do
        {
          v95 = __ldaxr(v94);
          v96 = --v95 == 0;
        }
        while (__stlxr(v95, v94));
        goto LABEL_100;
      }
      goto LABEL_102;
    }
    goto LABEL_107;
  }
LABEL_108:
  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&__dst, v77, "DefaultCall", 12, "Default Call thunk", (WTF **)&p_dst, v119);
  v92 = (WTF *)p_dst;
  v91 = (unsigned int *)v123;
  if (v123)
  {
    do
      v108 = __ldaxr(v91);
    while (__stlxr(v108 + 1, v91));
    v94 = (unsigned int *)v123;
    v123 = 0;
    if (v94)
    {
      do
      {
        v109 = __ldaxr(v94);
        v96 = --v109 == 0;
      }
      while (__stlxr(v109, v94));
LABEL_100:
      if (v96)
      {
        atomic_store(1u, v94);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v94, (uint64_t)v84, v85, v86, v87, v88, v89, v90);
        WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
      }
    }
  }
LABEL_102:
  JSC::LLInt::defaultCallThunk(void)::codeRef = (uint64_t)v92;
  JSC::LLInt::defaultCallThunk(void)::codeRef = (uint64_t)v91;
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v84, v85, v86, v87, v88, v89, v90);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v138, v97, v98, v99, v100, v101, v102, v103);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::getHostCallReturnValueThunk(void)::$_0 &&>>()
{
  unint64_t v0;
  pthread_key_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int8x8_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  pthread_key_t *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  unsigned int v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF **p_start;
  uint64_t v74;
  size_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  WTF *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  BOOL v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  char v112;
  __int16 v113;
  char v114;
  unsigned int v115[3];
  unsigned int **v116;
  JSC::ExecutableMemoryHandle *v117;
  char v118;
  WTF **v119;
  unsigned int *v120;
  size_t len;
  uint64_t v122;
  WTF *v123;
  _BYTE v124[128];
  unsigned int v125;
  char v126;
  int v127;
  unsigned int v128;
  __int128 start;
  __int128 v130;
  uint64_t v131;
  _DWORD v132[6];
  char v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  WTF *v137;
  _BYTE v138[128];
  unsigned int v139;
  unsigned int i;
  int v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _DWORD *v146;
  char v147;
  uint64_t v148;
  int v149;
  _DWORD *v150;
  char v151;
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  LOBYTE(v132[0]) = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0x8000000080000000;
  v137 = (WTF *)v138;
  v139 = 128;
  v0 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v0 != -1)
  {
    v120 = v115;
    v116 = &v120;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v116, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v1 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v9 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v9)
  {
    v9 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v9, v1);
  }
  v10 = *(WTF **)v9;
  v11 = v139;
  if (*(_QWORD *)v9 != v9 + 8)
  {
    v12 = *(_DWORD *)(v9 + 136);
    if (v139 < v12)
    {
      if (v137 && v137 != (WTF *)v138)
      {
        WTF::fastFree((unint64_t)v137, v2, v3, v4, v5, v6, v7, v8);
        v10 = *(WTF **)v9;
        v12 = *(_DWORD *)(v9 + 136);
      }
      v137 = v10;
      v139 = v12;
      *(_QWORD *)v9 = v9 + 8;
      *(_DWORD *)(v9 + 136) = 128;
      v11 = v139;
    }
  }
  v13 = 0;
  v142 = 1;
  i = 0;
  v141 = 0;
  v14 = 0;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v147 = 16;
  v149 = 0x10000;
  v146 = v132;
  v148 = 0;
  v150 = v132;
  v151 = 17;
  v152 = 0;
  v153 = 0x20000;
  v154 = 0;
  v156 = 0;
  v155 = 0;
  if (v11 <= 3)
  {
    v14 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, (uint64_t)v2, v3, v4, v5, v6, v7, v8).n128_u64[0];
    v13 = i;
  }
  *(_DWORD *)((char *)v137 + v13) = -1447068675;
  v15 = i;
  v16 = i + 4;
  i += 4;
  if (v15 + 8 > v139)
  {
    v14 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, (uint64_t)v2, v3, v4, v5, v6, v7, v8).n128_u64[0];
    v16 = i;
  }
  *(_DWORD *)((char *)v137 + v16) = -1862269955;
  v17 = i;
  v18 = i + 4;
  i += 4;
  if (v17 + 8 > v139)
  {
    v14 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, (uint64_t)v2, v3, v4, v5, v6, v7, v8).n128_u64[0];
    v18 = i;
  }
  *(_DWORD *)((char *)v137 + v18) = -129924192;
  i += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v132, 1, 0, 8, v5, v6, v7, v8, (uint64_t)v115, v14);
  JSC::MacroAssemblerARM64::and64((uint64_t)v132, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFFFFFC000, 0);
  v26 = i;
  if (i + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v19, v20, v21, v22, v23, v24, v25);
    v26 = i;
  }
  *(_DWORD *)((char *)v137 + v26) = -129990656;
  v27 = i + 4;
  for (i = v27; (int)v27 < SHIDWORD(v136); i = v27)
  {
    if (v27 + 4 > v139)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v19, v20, v21, v22, v23, v24, v25);
      v27 = i;
    }
    *(_DWORD *)((char *)v137 + v27) = -721215457;
    v27 = i + 4;
  }
  v28 = v27;
  if (v27 + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v19, v20, v21, v22, v23, v24, v25);
    v28 = i;
  }
  *(_DWORD *)((char *)v137 + v28) = 335544320;
  i += 4;
  if (v154)
    v29 = 69;
  else
    v29 = 65;
  v111 = v27;
  v112 = v29;
  v113 = 15;
  v114 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v115, (uint64_t)v132, v20, v21, v22, v23, v24, v25);
  v37 = i;
  if (i + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v30, v31, v32, v33, v34, v35, v36);
    v37 = i;
  }
  *(_DWORD *)((char *)v137 + v37) = -127991808;
  i += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v111, (uint64_t)v132, v31, v32, v33, v34, v35, v36);
  if (!v142)
  {
    __break(0xC471u);
    JUMPOUT(0x198858600);
  }
  v150[52] &= ~v153;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v132, 90464, v151, v38, v39, v40, v41, v42);
  v50 = i;
  if (i + 4 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v43, v44, v45, v46, v47, v48, v49);
    v50 = i;
  }
  *(_DWORD *)((char *)v137 + v50) = -126785536;
  v51 = i;
  v52 = i + 4;
  i += 4;
  if (v51 + 8 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v43, v44, v45, v46, v47, v48, v49);
    v52 = i;
  }
  *(_DWORD *)((char *)v137 + v52) = -1862270017;
  v53 = i;
  v54 = i + 4;
  i += 4;
  if (v53 + 8 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v43, v44, v45, v46, v47, v48, v49);
    v54 = i;
  }
  *(_DWORD *)((char *)v137 + v54) = -1463714819;
  v55 = i;
  v56 = i + 4;
  i += 4;
  if (v55 + 8 > v139)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v137, v43, v44, v45, v46, v47, v48, v49);
    v56 = i;
  }
  *(_DWORD *)((char *)v137 + v56) = -698416192;
  i += 4;
  v120 = 0;
  len = 0;
  v122 = -1;
  v123 = (WTF *)v124;
  v125 = 128;
  v57 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v57 != -1)
  {
    v116 = (unsigned int **)&v118;
    v119 = (WTF **)&v116;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v119, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v58 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v66 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v66)
  {
    v66 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v66, v58);
  }
  v67 = *(WTF **)v66;
  if (*(_QWORD *)v66 != v66 + 8)
  {
    v68 = *(_DWORD *)(v66 + 136);
    if (v125 < v68)
    {
      if (v123 && v123 != (WTF *)v124)
      {
        WTF::fastFree((unint64_t)v123, v59, v60, v61, v62, v63, v64, v65);
        v67 = *(WTF **)v66;
        v68 = *(_DWORD *)(v66 + 136);
      }
      v123 = v67;
      v125 = v68;
      *(_QWORD *)v66 = v66 + 8;
      *(_DWORD *)(v66 + 136) = 128;
    }
  }
  v69 = 1;
  v126 = 1;
  v127 = 0;
  v128 = 9;
  start = 0u;
  v130 = 0u;
  v131 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v120, (uint64_t)v132, 1, v61, v62, v63, v64, v65);
  if (!byte_1ECF4C288)
  {
    if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
    {
      if (DWORD1(v130))
      {
        v70 = (uint64_t *)*((_QWORD *)&start + 1);
        v71 = 8 * DWORD1(v130);
        do
        {
          v72 = *v70++;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v72 + 16))(v72, &v120);
          v71 -= 8;
        }
        while (v71);
      }
      p_start = (WTF **)&start;
      if (HIDWORD(v131))
      {
        v97 = (uint64_t *)*((_QWORD *)&v130 + 1);
        v98 = 8 * HIDWORD(v131);
        do
        {
          v99 = *v97++;
          (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v99 + 16))(v99, &v120);
          v98 -= 8;
        }
        while (v98);
      }
      v74 = v128;
      v75 = len;
      *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v128) += len;
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v74);
      sys_icache_invalidate((void *)start, v75);
      v83 = v120;
      if (v120)
      {
        do
          v110 = __ldaxr(v83);
        while (__stlxr(v110 + 1, v83));
        p_start = (WTF **)(v83 + 2);
      }
      v84 = *p_start;
      v116 = (unsigned int **)v84;
      v117 = (JSC::ExecutableMemoryHandle *)v83;
      if (byte_1ECF4C2A2)
      {
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v120, (uint64_t)&v116, "getHostCallReturnValue", 23);
        if (!v83)
          goto LABEL_60;
      }
      else if (!v83)
      {
        goto LABEL_60;
      }
      do
        v85 = __ldaxr(v83);
      while (__stlxr(v85 + 1, v83));
      v86 = (unsigned int *)v117;
      v117 = 0;
      if (v86)
      {
        do
        {
          v87 = __ldaxr(v86);
          v88 = --v87 == 0;
        }
        while (__stlxr(v87, v86));
        goto LABEL_58;
      }
      goto LABEL_60;
    }
    v69 = HIBYTE(word_1ECF4C286) != 0;
  }
  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v120, v69, "getHostCallReturnValue", 23, "LLInt::getHostCallReturnValue thunk", (WTF **)&v116, v111);
  v84 = (WTF *)v116;
  v83 = (unsigned int *)v117;
  if (v117)
  {
    do
      v100 = __ldaxr(v83);
    while (__stlxr(v100 + 1, v83));
    v86 = (unsigned int *)v117;
    v117 = 0;
    if (v86)
    {
      do
      {
        v101 = __ldaxr(v86);
        v88 = --v101 == 0;
      }
      while (__stlxr(v101, v86));
LABEL_58:
      if (v88)
      {
        atomic_store(1u, v86);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v86, (uint64_t)v76, v77, v78, v79, v80, v81, v82);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      }
    }
  }
LABEL_60:
  JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef = (uint64_t)v84;
  JSC::LLInt::getHostCallReturnValueThunk(void)::codeRef = (uint64_t)v83;
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v120, v76, v77, v78, v79, v80, v81, v82);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v132, v89, v90, v91, v92, v93, v94, v95);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::callToThrowThunk(void)::$_0 &&>>()
{
  WTF *v0[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v0, qword_1ECF53220, "LLInt::callToThrow thunk");
  qword_1ECF589A8 = (uint64_t)v0[0];
  unk_1ECF589B0 = v0[1];
}

void JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(WTF **a1, uint64_t a2, char *a3)
{
  unint64_t v6;
  pthread_key_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  pthread_key_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unsigned int v39;
  char v40;
  size_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF **v45;
  uint64_t v46;
  size_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  WTF *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  BOOL v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  WTF **v107;
  WTF *v108;
  JSC::ExecutableMemoryHandle *v109;
  unsigned int *v110;
  size_t len;
  uint64_t v112;
  WTF *v113;
  _BYTE v114[128];
  unsigned int v115;
  char v116;
  int v117;
  unsigned int v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _DWORD v122[6];
  char v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  _BYTE v128[128];
  unsigned int v129;
  int v130;
  int v131;
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _DWORD *v136;
  char v137;
  uint64_t v138;
  int v139;
  _DWORD *v140;
  char v141;
  uint64_t v142;
  int v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  LOBYTE(v122[0]) = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0x8000000080000000;
  v127 = v128;
  v129 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    v110 = (unsigned int *)&v107;
    v108 = (WTF *)&v110;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v17 = *(_DWORD *)(v15 + 136);
    if (v129 < v17)
    {
      if (v127 && v127 != v128)
      {
        WTF::fastFree((unint64_t)v127, v8, v9, v10, v11, v12, v13, v14);
        v16 = *(_QWORD *)v15;
        v17 = *(_DWORD *)(v15 + 136);
      }
      v127 = (_BYTE *)v16;
      v129 = v17;
      *(_QWORD *)v15 = v15 + 8;
      *(_DWORD *)(v15 + 136) = 128;
    }
  }
  v130 = 0;
  v132 = 1;
  v131 = 0;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  v136 = v122;
  v137 = 16;
  v138 = 0;
  v139 = 0x10000;
  v140 = v122;
  v141 = 17;
  v142 = 0;
  v143 = 0x20000;
  v144 = 0;
  v146 = 0;
  v147 = 0;
  v145 = 0;
  v18 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v18 != -1)
  {
    v110 = (unsigned int *)&v107;
    v108 = (WTF *)&v110;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v108, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (dword_1EE3430FC)
  {
    v19 = *(_BYTE *)qword_1EE3430F0;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v122, a2, *(char *)qword_1EE3430F0, v10, v11, v12, v13, v14);
    v27 = v130;
    if (v130 + 4 > v129)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v127, v20, v21, v22, v23, v24, v25, v26);
      v27 = v130;
    }
    *(_DWORD *)&v127[v27] = (32 * (v19 & 0x1F)) | 0xD61F0000;
    v130 += 4;
    v110 = 0;
    len = 0;
    v112 = -1;
    v113 = (WTF *)v114;
    v115 = 128;
    v28 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v28 != -1)
    {
      v108 = (WTF *)&v106;
      v107 = &v108;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v107, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v29 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v37 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v37)
    {
      v37 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v37, v29);
    }
    v38 = *(WTF **)v37;
    if (*(_QWORD *)v37 != v37 + 8)
    {
      v39 = *(_DWORD *)(v37 + 136);
      if (v115 < v39)
      {
        if (v113 && v113 != (WTF *)v114)
        {
          WTF::fastFree((unint64_t)v113, v30, v31, v32, v33, v34, v35, v36);
          v38 = *(WTF **)v37;
          v39 = *(_DWORD *)(v37 + 136);
        }
        v113 = v38;
        v115 = v39;
        *(_QWORD *)v37 = v37 + 8;
        *(_DWORD *)(v37 + 136) = 128;
      }
    }
    v40 = 1;
    v116 = 1;
    v117 = 0;
    v118 = 9;
    v119 = 0u;
    v120 = 0u;
    v121 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v110, (uint64_t)v122, 1, v32, v33, v34, v35, v36);
    BYTE2(v117) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        v41 = strlen(a3);
        if (DWORD1(v120))
        {
          v42 = (uint64_t *)*((_QWORD *)&v119 + 1);
          v43 = 8 * DWORD1(v120);
          do
          {
            v44 = *v42++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v44 + 16))(v44, &v110);
            v43 -= 8;
          }
          while (v43);
        }
        v45 = (WTF **)&v119;
        if (HIDWORD(v121))
        {
          v71 = (uint64_t *)*((_QWORD *)&v120 + 1);
          v72 = 8 * HIDWORD(v121);
          do
          {
            v73 = *v71++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v73 + 16))(v73, &v110);
            v72 -= 8;
          }
          while (v72);
        }
        v46 = v118;
        v47 = len;
        *((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v118) += len;
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v46);
        sys_icache_invalidate((void *)v119, v47);
        v55 = v110;
        if (v110)
        {
          do
            v97 = __ldaxr(v55);
          while (__stlxr(v97 + 1, v55));
          v45 = (WTF **)(v55 + 2);
        }
        v56 = *v45;
        v108 = v56;
        v109 = (JSC::ExecutableMemoryHandle *)v55;
        if (byte_1ECF4C2A2)
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v110, (uint64_t)&v108, a3, v41 + 1);
        *a1 = v56;
        a1[1] = 0;
        if (!v55)
          goto LABEL_45;
        do
          v57 = __ldaxr(v55);
        while (__stlxr(v57 + 1, v55));
        v58 = (unsigned int *)a1[1];
        a1[1] = (WTF *)v55;
        if (v58)
        {
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60)
          {
            atomic_store(1u, v58);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v58, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
          }
        }
        v61 = (unsigned int *)v109;
        v109 = 0;
        if (!v61)
          goto LABEL_45;
        do
        {
          v62 = __ldaxr(v61);
          v63 = --v62 == 0;
        }
        while (__stlxr(v62, v61));
LABEL_43:
        if (v63)
        {
          atomic_store(1u, v61);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v61, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        }
LABEL_45:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v110, v48, v49, v50, v51, v52, v53, v54);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v122, v64, v65, v66, v67, v68, v69, v70);
        return;
      }
      v40 = HIBYTE(word_1ECF4C286) != 0;
    }
    v74 = strlen(a3);
    JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v110, v40, a3, v74 + 1, "LLInt %s thunk", &v108, (uint64_t)a3);
    v75 = (unsigned int *)v109;
    *a1 = v108;
    a1[1] = 0;
    if (!v75)
      goto LABEL_45;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 + 1, v75));
    v77 = (unsigned int *)a1[1];
    a1[1] = (WTF *)v75;
    if (v77)
    {
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        atomic_store(1u, v77);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v77, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
      }
    }
    v61 = (unsigned int *)v109;
    v109 = 0;
    if (!v61)
      goto LABEL_45;
    do
    {
      v80 = __ldaxr(v61);
      v63 = --v80 == 0;
    }
    while (__stlxr(v80, v61));
    goto LABEL_43;
  }
  __break(0xC471u);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleUncaughtExceptionThunk(void)::$_0 &&>>()
{
  WTF *v0[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v0, qword_1ECF532A8, "handle_uncaught_exception");
  JSC::LLInt::handleUncaughtExceptionThunk(void)::codeRef = (uint64_t)v0[0];
  JSC::LLInt::handleUncaughtExceptionThunk(void)::codeRef = (uint64_t)v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_0 &&>>()
{
  WTF *v0[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v0, qword_1ECF52C38, "op_catch");
  JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef = (uint64_t)v0[0];
  JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef = (uint64_t)v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_1 &&>>()
{
  WTF *v0[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v0, qword_1ECF50998, "op_catch16");
  JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef = (uint64_t)v0[0];
  JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef = (uint64_t)v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::$_2 &&>>()
{
  WTF *v0[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v0, qword_1ECF51AE8, "op_catch32");
  JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef = (uint64_t)v0[0];
  JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)::codeRef = (uint64_t)v0[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)::$_0 &&>>(_DWORD ****a1)
{
  WTF *v1[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v1, (uint64_t)g_opcodeMap[****a1 + 256], "wasm_catch");
  qword_1ECF589C0 = (uint64_t)v1[0];
  *(WTF **)algn_1ECF589C8 = v1[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)::$_1 &&>>(_DWORD ****a1)
{
  WTF *v1[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v1, (uint64_t)g_opcodeMapWide16[****a1 + 256], "wasm_catch16");
  qword_1ECF589D8 = (uint64_t)v1[0];
  unk_1ECF589E0 = v1[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)::$_2 &&>>(_DWORD ****a1)
{
  WTF *v1[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v1, (uint64_t)g_opcodeMapWide32[****a1 + 256], "wasm_catch32");
  qword_1ECF589F0 = (uint64_t)v1[0];
  *(WTF **)algn_1ECF589F8 = v1[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)::$_0 &&>>(_DWORD ****a1)
{
  WTF *v1[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v1, (uint64_t)g_opcodeMap[****a1 + 256], "wasm_catch_all");
  qword_1ECF58A08 = (uint64_t)v1[0];
  unk_1ECF58A10 = v1[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)::$_1 &&>>(_DWORD ****a1)
{
  WTF *v1[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v1, (uint64_t)g_opcodeMapWide16[****a1 + 256], "wasm_catch_all16");
  qword_1ECF58A20 = (uint64_t)v1[0];
  *(WTF **)algn_1ECF58A28 = v1[1];
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)::$_2 &&>>(_DWORD ****a1)
{
  WTF *v1[2];

  JSC::LLInt::generateThunkWithJumpTo<(WTF::PtrTag)10924>(v1, (uint64_t)g_opcodeMapWide32[****a1 + 256], "wasm_catch_all32");
  qword_1ECF58A38 = (uint64_t)v1[0];
  unk_1ECF58A40 = v1[1];
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::genericReturnPointThunk(JSC::OpcodeSize)::$_0 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF53210, "llint_generic_return_point");
  qword_1ECF58A50 = v1[0];
  *(_QWORD *)algn_1ECF58A58 = v1[1];
  return result;
}

uint64_t JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(_QWORD *a1, uint64_t a2, char *a3)
{
  unint64_t v6;
  pthread_key_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  pthread_key_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  char v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v55;
  char v56;
  char **v57;
  char *v58;
  _QWORD v59[3];
  WTF *v60;
  _BYTE v61[128];
  unsigned int v62;
  char v63;
  int v64;
  int v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _DWORD v69[6];
  char v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _BYTE v75[128];
  unsigned int v76;
  int v77;
  int v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _DWORD *v83;
  char v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  char v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  LOBYTE(v69[0]) = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0x8000000080000000;
  v74 = v75;
  v76 = 128;
  v6 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v6 != -1)
  {
    v58 = (char *)v59;
    v59[0] = &v57;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v7 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v15 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v15)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v7);
  }
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 != v15 + 8)
  {
    v17 = *(_DWORD *)(v15 + 136);
    if (v76 < v17)
    {
      if (v74 && v74 != v75)
      {
        WTF::fastFree((unint64_t)v74, v8, v9, v10, v11, v12, v13, v14);
        v16 = *(_QWORD *)v15;
        v17 = *(_DWORD *)(v15 + 136);
      }
      v74 = (_BYTE *)v16;
      v76 = v17;
      *(_QWORD *)v15 = v15 + 8;
      *(_DWORD *)(v15 + 136) = 128;
    }
  }
  v77 = 0;
  v79 = 1;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = v69;
  v84 = 16;
  v85 = 0;
  v86 = 0x10000;
  v87 = v69;
  v88 = 17;
  v89 = 0;
  v90 = 0x20000;
  v91 = 0;
  v78 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v69, a2, 16, v10, v11, v12, v13, v14);
  v25 = v77;
  if (v77 + 4 > v76)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v74, v18, v19, v20, v21, v22, v23, v24);
    v25 = v77;
  }
  *(_DWORD *)&v74[v25] = -702610944;
  v77 += 4;
  v59[0] = 0;
  v59[1] = 0;
  v59[2] = -1;
  v60 = (WTF *)v61;
  v62 = 128;
  v26 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v26 != -1)
  {
    v58 = &v56;
    v57 = &v58;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v27 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v35 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v35)
  {
    v35 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v35, v27);
  }
  v36 = *(WTF **)v35;
  if (*(_QWORD *)v35 != v35 + 8)
  {
    v37 = *(_DWORD *)(v35 + 136);
    if (v62 < v37)
    {
      if (v60 && v60 != (WTF *)v61)
      {
        WTF::fastFree((unint64_t)v60, v28, v29, v30, v31, v32, v33, v34);
        v36 = *(WTF **)v35;
        v37 = *(_DWORD *)(v35 + 136);
      }
      v60 = v36;
      v62 = v37;
      *(_QWORD *)v35 = v35 + 8;
      *(_DWORD *)(v35 + 136) = 128;
    }
  }
  v38 = 1;
  v63 = 1;
  v64 = 0;
  v65 = 9;
  v66 = 0u;
  v67 = 0u;
  v68 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v59, (uint64_t)v69, 1, v30, v31, v32, v33, v34);
  BYTE2(v64) = 1;
  if (byte_1ECF4C288)
    goto LABEL_28;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v38 = HIBYTE(word_1ECF4C286) != 0;
LABEL_28:
    v55 = strlen(a3);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)357,char const*>((uint64_t)v59, v38, a3, v55 + 1, "LLInt %s return point thunk", (uint64_t)a3, a1);
    goto LABEL_26;
  }
  v39 = strlen(a3);
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)357>(a1, (uint64_t)v59, a3, v39 + 1);
LABEL_26:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v59, v40, v41, v42, v43, v44, v45, v46);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v69, v47, v48, v49, v50, v51, v52, v53);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::genericReturnPointThunk(JSC::OpcodeSize)::$_1 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF50F70, "llint_generic_return_point16");
  qword_1ECF58A68 = v1[0];
  unk_1ECF58A70 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::genericReturnPointThunk(JSC::OpcodeSize)::$_2 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF520C0, "llint_generic_return_point32");
  qword_1ECF58A80 = v1[0];
  *(_QWORD *)algn_1ECF58A88 = v1[1];
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::fuzzerReturnEarlyFromLoopHintThunk(void)::$_0 &&>>()
{
  uint64_t v0;
  unint64_t v1;
  pthread_key_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  pthread_key_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unsigned int v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF **p_start;
  uint64_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  WTF *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  BOOL v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  WTF *v76;
  JSC::ExecutableMemoryHandle *v77;
  char v78;
  WTF **v79;
  unsigned int *v80;
  size_t len;
  uint64_t v82;
  WTF *v83;
  _BYTE v84[128];
  unsigned int v85;
  char v86;
  int v87;
  unsigned int v88;
  __int128 start;
  __int128 v90;
  uint64_t v91;
  _DWORD v92[6];
  char v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  WTF *v97;
  _BYTE v98[128];
  unsigned int v99;
  unsigned int v100;
  int v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _DWORD *v106;
  char v107;
  uint64_t v108;
  int v109;
  _DWORD *v110;
  char v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v0 = qword_1ECF53290;
  LOBYTE(v92[0]) = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0x8000000080000000;
  v97 = (WTF *)v98;
  v99 = 128;
  v1 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v1 != -1)
  {
    v80 = (unsigned int *)&v79;
    v76 = (WTF *)&v80;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v2 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v10 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v10)
  {
    v10 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v10, v2);
  }
  v11 = *(WTF **)v10;
  if (*(_QWORD *)v10 != v10 + 8)
  {
    v12 = *(_DWORD *)(v10 + 136);
    if (v99 < v12)
    {
      if (v97 && v97 != (WTF *)v98)
      {
        WTF::fastFree((unint64_t)v97, v3, v4, v5, v6, v7, v8, v9);
        v11 = *(WTF **)v10;
        v12 = *(_DWORD *)(v10 + 136);
      }
      v97 = v11;
      v99 = v12;
      *(_QWORD *)v10 = v10 + 8;
      *(_DWORD *)(v10 + 136) = 128;
    }
  }
  v102 = 1;
  v100 = 0;
  v101 = 0;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = v92;
  v107 = 16;
  v108 = 0;
  v109 = 0x10000;
  v110 = v92;
  v111 = 17;
  v112 = 0;
  v113 = 0x20000;
  v114 = 0;
  v117 = 0;
  v115 = 0;
  v116 = 0;
  v13 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v13 != -1)
  {
    v80 = (unsigned int *)&v79;
    v76 = (WTF *)&v80;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v76, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (dword_1EE3430FC)
  {
    v14 = *(_BYTE *)qword_1EE3430F0;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v92, v0, *(char *)qword_1EE3430F0, v5, v6, v7, v8, v9);
    v22 = v100;
    if (v100 + 4 > v99)
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v97, v15, v16, v17, v18, v19, v20, v21);
      v22 = v100;
    }
    *(_DWORD *)((char *)v97 + v22) = (32 * (v14 & 0x1F)) | 0xD61F0000;
    v100 += 4;
    v80 = 0;
    len = 0;
    v82 = -1;
    v83 = (WTF *)v84;
    v85 = 128;
    v23 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v23 != -1)
    {
      v76 = (WTF *)&v78;
      v79 = &v76;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v79, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v24 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v32 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v32)
    {
      v32 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v32, v24);
    }
    v33 = *(WTF **)v32;
    if (*(_QWORD *)v32 != v32 + 8)
    {
      v34 = *(_DWORD *)(v32 + 136);
      if (v85 < v34)
      {
        if (v83 && v83 != (WTF *)v84)
        {
          WTF::fastFree((unint64_t)v83, v25, v26, v27, v28, v29, v30, v31);
          v33 = *(WTF **)v32;
          v34 = *(_DWORD *)(v32 + 136);
        }
        v83 = v33;
        v85 = v34;
        *(_QWORD *)v32 = v32 + 8;
        *(_DWORD *)(v32 + 136) = 128;
      }
    }
    v35 = 1;
    v86 = 1;
    v87 = 0;
    v88 = 9;
    start = 0u;
    v90 = 0u;
    v91 = 0;
    JSC::LinkBuffer::linkCode((uint64_t)&v80, (uint64_t)v92, 1, v27, v28, v29, v30, v31);
    BYTE2(v87) = 1;
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        if (DWORD1(v90))
        {
          v36 = (uint64_t *)*((_QWORD *)&start + 1);
          v37 = 8 * DWORD1(v90);
          do
          {
            v38 = *v36++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v38 + 16))(v38, &v80);
            v37 -= 8;
          }
          while (v37);
        }
        p_start = (WTF **)&start;
        if (HIDWORD(v91))
        {
          v62 = (uint64_t *)*((_QWORD *)&v90 + 1);
          v63 = 8 * HIDWORD(v91);
          do
          {
            v64 = *v62++;
            (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v64 + 16))(v64, &v80);
            v63 -= 8;
          }
          while (v63);
        }
        v40 = v88;
        v41 = len;
        *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v88) += len;
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v40);
        sys_icache_invalidate((void *)start, v41);
        v49 = v80;
        if (v80)
        {
          do
            v75 = __ldaxr(v49);
          while (__stlxr(v75 + 1, v49));
          p_start = (WTF **)(v49 + 2);
        }
        v50 = *p_start;
        v76 = v50;
        v77 = (JSC::ExecutableMemoryHandle *)v49;
        if (byte_1ECF4C2A2)
        {
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v80, (uint64_t)&v76, "fuzzer_return_early_from_loop_hint", 35);
          if (v49)
            goto LABEL_35;
        }
        else if (v49)
        {
          do
LABEL_35:
            v51 = __ldaxr(v49);
          while (__stlxr(v51 + 1, v49));
          v52 = (unsigned int *)v77;
          v77 = 0;
          if (!v52)
            goto LABEL_40;
          do
          {
            v53 = __ldaxr(v52);
            v54 = --v53 == 0;
          }
          while (__stlxr(v53, v52));
          goto LABEL_38;
        }
LABEL_40:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v80, v42, v43, v44, v45, v46, v47, v48);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v92, v55, v56, v57, v58, v59, v60, v61);
        qword_1ECF58A98 = (uint64_t)v50;
        unk_1ECF58AA0 = v49;
        return;
      }
      v35 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v80, v35, "fuzzer_return_early_from_loop_hint", 35, "LLInt %s thunk", &v76, (uint64_t)"fuzzer_return_early_from_loop_hint");
    v50 = v76;
    v49 = (unsigned int *)v77;
    if (!v77)
      goto LABEL_40;
    do
      v65 = __ldaxr(v49);
    while (__stlxr(v65 + 1, v49));
    v52 = (unsigned int *)v77;
    v77 = 0;
    if (!v52)
      goto LABEL_40;
    do
    {
      v66 = __ldaxr(v52);
      v54 = --v66 == 0;
    }
    while (__stlxr(v66, v52));
LABEL_38:
    if (v54)
    {
      atomic_store(1u, v52);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v52, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    goto LABEL_40;
  }
  __break(0xC471u);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::normalOSRExitTrampolineThunk(void)::$_0 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF53288, "normal_osr_exit_trampoline thunk");
  qword_1ECF58AB0 = v1[0];
  *(_QWORD *)algn_1ECF58AB8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::$_0 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF53280, "checkpoint_osr_exit_trampoline thunk");
  JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef = v1[0];
  JSC::LLInt::checkpointOSRExitTrampolineThunk(void)::codeRef = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::$_0 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF53278, "checkpoint_osr_exit_from_inlined_call_trampoline thunk");
  JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::codeRef = v1[0];
  JSC::LLInt::checkpointOSRExitFromInlinedCallTrampolineThunk(void)::codeRef = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_0 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532B0, "op_call_return_location thunk");
  qword_1ECF58AC0 = v1[0];
  *(_QWORD *)algn_1ECF58AC8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_1 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51010, "op_call_return_location16 thunk");
  qword_1ECF58AD0 = v1[0];
  *(_QWORD *)algn_1ECF58AD8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_2 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52160, "op_call_return_location32 thunk");
  qword_1ECF58AE0 = v1[0];
  *(_QWORD *)algn_1ECF58AE8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_3 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532B8, "op_call_ignore_result_return_location thunk");
  qword_1ECF58AF0 = v1[0];
  *(_QWORD *)algn_1ECF58AF8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_4 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51018, "op_call_ignore_result_return_location16 thunk");
  qword_1ECF58B00 = v1[0];
  *(_QWORD *)algn_1ECF58B08 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_5 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52168, "op_call_ignore_result_return_location32 thunk");
  qword_1ECF58B10 = v1[0];
  *(_QWORD *)algn_1ECF58B18 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_6 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF53300, "op_iterator_open_return_location thunk");
  qword_1ECF58B20 = v1[0];
  *(_QWORD *)algn_1ECF58B28 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_7 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51060, "op_iterator_open_return_location16 thunk");
  qword_1ECF58B30 = v1[0];
  *(_QWORD *)algn_1ECF58B38 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_8 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF521B0, "op_iterator_open_return_location32 thunk");
  qword_1ECF58B40 = v1[0];
  *(_QWORD *)algn_1ECF58B48 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_9 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF53308, "op_iterator_next_return_location thunk");
  qword_1ECF58B50 = v1[0];
  *(_QWORD *)algn_1ECF58B58 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_10 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51068, "op_iterator_next_return_location16 thunk");
  qword_1ECF58B60 = v1[0];
  *(_QWORD *)algn_1ECF58B68 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_11 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF521B8, "op_iterator_next_return_location32 thunk");
  qword_1ECF58B70 = v1[0];
  *(_QWORD *)algn_1ECF58B78 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_12 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532C0, "op_construct_return_location thunk");
  qword_1ECF58B80 = v1[0];
  *(_QWORD *)algn_1ECF58B88 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_13 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51020, "op_construct_return_location16 thunk");
  qword_1ECF58B90 = v1[0];
  *(_QWORD *)algn_1ECF58B98 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_14 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52170, "op_construct_return_location32 thunk");
  qword_1ECF58BA0 = v1[0];
  *(_QWORD *)algn_1ECF58BA8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_15 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532C8, "op_call_varargs_return_location thunk");
  qword_1ECF58BB0 = v1[0];
  *(_QWORD *)algn_1ECF58BB8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_16 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51028, "op_call_varargs_return_location16 thunk");
  qword_1ECF58BC0 = v1[0];
  *(_QWORD *)algn_1ECF58BC8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_17 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52178, "op_call_varargs_return_location32 thunk");
  qword_1ECF58BD0 = v1[0];
  *(_QWORD *)algn_1ECF58BD8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_18 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532D0, "op_construct_varargs_return_location thunk");
  qword_1ECF58BE0 = v1[0];
  *(_QWORD *)algn_1ECF58BE8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_19 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51030, "op_construct_varargs_return_location16 thunk");
  qword_1ECF58BF0 = v1[0];
  *(_QWORD *)algn_1ECF58BF8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_20 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52180, "op_construct_varargs_return_location32 thunk");
  qword_1ECF58C00 = v1[0];
  *(_QWORD *)algn_1ECF58C08 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_21 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532D8, "op_get_by_id_return_location thunk");
  qword_1ECF58C10 = v1[0];
  *(_QWORD *)algn_1ECF58C18 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_22 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51038, "op_get_by_id_return_location16 thunk");
  qword_1ECF58C20 = v1[0];
  *(_QWORD *)algn_1ECF58C28 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_23 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52188, "op_get_by_id_return_location32 thunk");
  qword_1ECF58C30 = v1[0];
  *(_QWORD *)algn_1ECF58C38 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_24 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532E0, "op_get_length_return_location thunk");
  qword_1ECF58C40 = v1[0];
  *(_QWORD *)algn_1ECF58C48 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_25 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51040, "op_get_length_return_location16 thunk");
  qword_1ECF58C50 = v1[0];
  *(_QWORD *)algn_1ECF58C58 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_26 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52190, "op_get_length_return_location32 thunk");
  qword_1ECF58C60 = v1[0];
  *(_QWORD *)algn_1ECF58C68 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_27 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532E8, "op_get_by_val_return_location thunk");
  qword_1ECF58C70 = v1[0];
  *(_QWORD *)algn_1ECF58C78 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_28 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51048, "op_get_by_val_return_location16 thunk");
  qword_1ECF58C80 = v1[0];
  *(_QWORD *)algn_1ECF58C88 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_29 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF52198, "op_get_by_val_return_location32 thunk");
  qword_1ECF58C90 = v1[0];
  *(_QWORD *)algn_1ECF58C98 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_30 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532F0, "op_put_by_id_return_location thunk");
  qword_1ECF58CA0 = v1[0];
  *(_QWORD *)algn_1ECF58CA8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_31 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51050, "op_put_by_id_return_location16 thunk");
  qword_1ECF58CB0 = v1[0];
  *(_QWORD *)algn_1ECF58CB8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_32 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF521A0, "op_put_by_id_return_location32 thunk");
  qword_1ECF58CC0 = v1[0];
  *(_QWORD *)algn_1ECF58CC8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_33 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF532F8, "op_put_by_val_return_location thunk");
  qword_1ECF58CD0 = v1[0];
  *(_QWORD *)algn_1ECF58CD8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_34 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF51058, "op_put_by_val_return_location16 thunk");
  qword_1ECF58CE0 = v1[0];
  *(_QWORD *)algn_1ECF58CE8 = v1[1];
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::returnLocationThunk(JSC::OpcodeID,JSC::OpcodeSize)::$_35 &&>>()
{
  uint64_t result;
  _QWORD v1[2];

  result = JSC::LLInt::generateThunkWithJumpToLLIntReturnPoint<(WTF::PtrTag)357>(v1, qword_1ECF521A8, "op_put_by_val_return_location32 thunk");
  qword_1ECF58CF0 = v1[0];
  *(_QWORD *)algn_1ECF58CF8 = v1[1];
  return result;
}

uint64_t JSC::Lexer<unsigned char>::~Lexer(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = *(WTF::StringImpl **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::Lexer<unsigned char>::convertUnicode(int a1, int a2, int a3, int a4)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;

  if (a1 >= 65)
    v4 = 9;
  else
    v4 = 0;
  v5 = v4 + a1;
  v6 = a2 - 48;
  if (a2 >= 65)
    v6 = ((_BYTE)a2 + 9) & 0xF;
  v7 = (v5 << 12) | (v6 << 8);
  if (a3 >= 65)
    v8 = 9;
  else
    v8 = 0;
  v9 = v8 + a3;
  v10 = a4 - 48;
  if (a4 >= 65)
    v10 = (a4 + 9) & 0xF;
  return v7 & 0xFF00u | (unsigned __int16)(v10 | (16 * v9));
}

uint64_t JSC::Lexer<unsigned char>::setCode(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char *v23;
  char v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v5 = *(unint64_t **)(a3 + 16);
  if (!v5)
  {
    v5 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v5, v50, v51, v52, v53, v54, v55, v56);
    bzero(v5 + 3, 0x800uLL);
    v64 = *(unint64_t **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v5;
    if (v64)
    {
      WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v64, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      v5 = *(unint64_t **)(a3 + 16);
    }
  }
  *(_QWORD *)(a1 + 184) = v5;
  *(_DWORD *)a1 = a2[4] + 1;
  *(_DWORD *)(a1 + 60) = -1;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 64) = a2;
  v14 = a2[2];
  v15 = a2[3];
  *(_DWORD *)(a1 + 72) = v14;
  v16 = v6 + v14;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 96) = v6 + v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_WORD *)(a1 + 149) = 1;
  *(_QWORD *)(a1 + 112) = v16;
  v17 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  v18 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v19 = *(WTF::StringImpl **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(a1 + 16) = 32;
  *(_QWORD *)(a1 + 8) = v20;
  v21 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(a1 + 32) = 32;
  *(_QWORD *)(a1 + 24) = v21;
  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(a1 + 48) = 32;
  *(_QWORD *)(a1 + 40) = result;
  v23 = *(char **)(a1 + 80);
  if ((unint64_t)v23 >= *(_QWORD *)(a1 + 96))
    v24 = 0;
  else
    v24 = *v23;
  *(_BYTE *)(a1 + 176) = v24;
  return result;
}

uint64_t JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator(unsigned int *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t stackaddr_np;
  uint64_t v11;
  uint64_t **v12;
  unsigned __int8 *v13;
  rlim_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  rlim_t v22;
  int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  _BYTE *v47;
  unint64_t v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _BYTE *v72;
  size_t v73;
  size_t v74;
  uint64_t v75;
  _OWORD *v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  char *v80;
  char v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned __int8 *v100;
  unint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  int v115;
  int v116;
  unsigned __int8 **v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned __int8 v124;
  unsigned int v125;
  BOOL v126;
  unint64_t v127;
  unint64_t v128;
  unsigned __int8 v129;
  char v130;
  BOOL v131;
  char v132;
  BOOL v133;
  char *v134;
  _QWORD *v135;
  unsigned __int8 *v136;
  double v137;
  uint64_t v138;
  BOOL v139;
  unsigned __int8 *v140;
  unint64_t v141;
  int v142;
  int v143;
  BOOL v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unsigned __int8 *v152;
  unint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unsigned __int8 *v157;
  unint64_t v158;
  unsigned __int8 *v159;
  int v160;
  unsigned __int8 v161;
  int v162;
  unsigned __int8 *v163;
  unint64_t v164;
  int v165;
  unint64_t v166;
  uint64_t *v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  unsigned __int8 *v172;
  unint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  unsigned __int8 *v177;
  unint64_t v178;
  __int128 *v179;
  __int128 v180;
  int v181;
  int v182;
  unsigned __int8 *v183;
  unint64_t v184;
  int v185;
  _BYTE *v186;
  _BYTE *v188;
  unsigned __int8 *v189;
  int v190;
  unsigned __int8 *v191;
  int v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  unint64_t v195;
  int v196;
  int v197;
  unsigned __int8 *v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned __int8 *v207;
  int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned __int8 v213;
  BOOL v214;
  double v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int8 v221;
  unsigned __int8 *v222;
  unsigned int v223;
  BOOL v224;
  unsigned __int8 *v225;
  uint64_t v226;
  size_t v227;
  size_t v228;
  size_t v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  char v234;
  uint64_t v235;
  uint64_t **v236;
  int v237;
  int v238;
  int v239;
  unsigned __int8 *v240;
  int v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  unint64_t v244;
  int v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  uint64_t v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  _BOOL4 v253;
  _BOOL4 v254;
  unsigned __int8 *v255;
  unsigned int v256;
  unsigned __int8 *v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _DWORD *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  BOOL v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  unint64_t StatusReg;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  _BYTE *v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  int v289;
  _BOOL4 v290;
  _QWORD *v291;
  char *v292;
  _BOOL4 v293;
  unsigned __int8 *v294;
  unsigned int v295;
  unsigned __int8 *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  unint64_t *v302;
  unint64_t v303;
  unsigned int v304;
  _BYTE *v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  unsigned int v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v320;
  _BYTE *v321;
  uint64_t v322;
  _BYTE *v323;
  uint64_t v324;
  _BYTE *v325;
  uint64_t v326;
  _BYTE *v327;
  uint64_t v328;
  int v329;
  _BYTE *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t *v334;
  unsigned int v335;
  unsigned int v336;
  unint64_t v338;
  _BYTE *v339;
  uint64_t v340;
  _BYTE *v341;
  uint64_t v342;
  int v343;
  _BYTE *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE *v350;
  uint64_t v351;
  _BYTE *v352;
  uint64_t v353;
  _BYTE *v354;
  uint64_t v355;
  int v356;
  _BYTE *v357;
  uint64_t v358;
  _opaque_pthread_t *v359;
  unint64_t v360;
  _BYTE *v361;
  uint64_t v362;
  rlim_t stacksize_np;
  _BYTE *v364;
  uint64_t v365;
  _BYTE *v366;
  uint64_t v367;
  int v368;
  _BYTE *v369;
  uint64_t v370;
  int v371;
  _BYTE *v372;
  uint64_t v373;
  _BYTE *v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE *v377;
  _BYTE *v378;
  uint64_t v379;
  int v380;
  _BYTE *v381;
  uint64_t v382;
  _BYTE *v383;
  uint64_t v384;
  _BYTE *v385;
  uint64_t v386;
  _BYTE *v387;
  uint64_t v388;
  _BYTE *v389;
  uint64_t v390;
  _BYTE *v391;
  uint64_t v392;
  rlim_t v393;
  uint64_t v394;
  rlim_t v395;
  uint64_t v396;
  _BYTE *v397;
  uint64_t v398;
  _BYTE *v399;
  uint64_t v400;
  _BYTE *v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  int v406;
  char v407;
  int v408;
  unint64_t *v409;
  unint64_t v410;
  int v411;
  _BYTE *v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  _QWORD *v416;
  _QWORD *v417;
  _BYTE *v418;
  uint64_t v419;
  char v420;
  uint64_t **v421;
  uint64_t v422;
  uint64_t v423;
  _DWORD *v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  _QWORD *v432;
  int v433;
  _BYTE *v434;
  uint64_t v435;
  _BYTE *v436;
  uint64_t v437;
  unsigned __int8 *v438;
  _BYTE *v439;
  uint64_t v440;
  _BYTE *v441;
  uint64_t v442;
  _BYTE *v443;
  uint64_t v444;
  unsigned __int8 *v445;
  _BYTE *v446;
  uint64_t v447;
  _BYTE *v448;
  uint64_t v449;
  unsigned __int8 *v450;
  unsigned __int8 *v451;
  int v452;
  unsigned __int8 v453;
  uint64_t v454;
  unint64_t v455;
  int v456;
  unsigned __int8 *v457;
  rlim_t v458;
  uint64_t v459;
  rlim_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  _BYTE *v465;
  void *v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned __int8 *v471;
  char v472;
  uint64_t **v473;
  WTF::AtomStringImpl *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  WTF::StringImpl *v481;
  int v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unsigned __int8 *v490;
  uint64_t **v491;
  uint64_t v492;
  unint64_t v493;
  void *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  unsigned __int8 *v501;
  _QWORD *v502;
  _QWORD *v503;
  _BYTE *v504;
  uint64_t v505;
  uint64_t v506;
  unsigned __int8 *v507;
  unint64_t v508;
  unsigned __int8 *v509;
  int v510;
  unsigned __int8 v511;
  int v512;
  unsigned __int8 *v513;
  _BYTE *v514;
  uint64_t v515;
  char *v516;
  unsigned __int8 *v517;
  unsigned __int8 *v518;
  uint64_t v519;
  uint64_t v520;
  char *v521;
  uint64_t **v522;
  _BYTE *v523;
  int v524;
  uint64_t v525;
  WTF::AtomStringImpl *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  const char *v535;
  unsigned int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  unsigned __int8 *v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  _QWORD *v555;
  unsigned __int8 **v556;
  uint64_t v557;
  unsigned int v558;
  unint64_t v559;
  unsigned __int8 *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  char *v574;
  uint64_t **v575;
  _BYTE *v576;
  uint64_t v577;
  _DWORD *v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  _BYTE *v585;
  uint64_t v586;
  uint64_t **v587;
  WTF::AtomStringImpl *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  WTF::StringImpl *rlim_cur;
  int v596;
  unint64_t v597;
  unint64_t v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t v603;
  uint64_t v604;
  _DWORD *v605;
  uint64_t v606;
  WTF::AtomStringImpl *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  const char *v616;
  WTF::StringImpl *v617;
  rlim_t v618;
  uint64_t v619;
  _QWORD *v620;
  uint64_t **v621;
  uint64_t v622;
  _BYTE *v623;
  unsigned __int8 *v624;
  rlim_t v625;
  uint64_t v626;
  unint64_t v627;
  unint64_t v628;
  void *v629;
  unint64_t v630;
  void *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  char *v638;
  uint64_t **v639;
  _BYTE *v640;
  int v641;
  _BYTE *v642;
  uint64_t v643;
  unint64_t v644;
  void *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  _QWORD *v652;
  uint64_t **v653;
  WTF::AtomStringImpl **v654;
  int v655;
  int v656;
  uint64_t v657;
  unsigned int v658;
  int v659;
  BOOL v660;
  WTF::AtomStringImpl *v661;
  WTF::AtomStringImpl *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  WTF::StringImpl *v670;
  uint64_t v671;
  int *v672;
  unsigned __int8 *v673;
  WTF::StringImpl *v674;
  int v675;
  unint64_t v676;
  void *v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  _BYTE *v685;
  uint64_t v686;
  uint64_t v687;
  WTF::AtomStringImpl *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  const char *v697;
  WTF::StringImpl *v698;
  rlim_t v699;
  uint64_t v700;
  rlim_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  _DWORD *v705;
  WTF::AtomStringImpl *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  WTF::StringImpl *v713;
  unint64_t v714;
  unint64_t v715;
  uint64_t v716;
  _QWORD *v717;
  unsigned __int8 *v718;
  char *v719;
  uint64_t **v720;
  _BYTE *v721;
  _QWORD *v722;
  unint64_t v723;
  uint64_t **v724;
  char *v725;
  unint64_t v726;
  void *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  rlim_t v734;
  unint64_t v735;
  void *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  char *v743;
  uint64_t **v744;
  _BYTE *v745;
  unint64_t v746;
  void *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  char *v754;
  uint64_t **v755;
  _BYTE *v756;
  unsigned __int8 *v757;
  uint64_t v758;
  WTF::AtomStringImpl *v759;
  WTF::StringImpl *v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  void *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  _BYTE *v771;
  double *v772;
  unsigned int v773;
  int v774;
  unint64_t i;
  int v776;
  BOOL v777;
  _BYTE *v778;
  double *v779;
  unsigned int v780;
  int v781;
  unsigned int v782;
  uint64_t v783;
  uint64_t v784;
  int v786;
  int v787;
  BOOL v788;
  uint64_t v789;
  BOOL v790;
  unsigned int v791;
  _BYTE *v792;
  unint64_t v793;
  uint64_t v794;
  uint64_t v795;
  int v797;
  int v798;
  BOOL v799;
  double v800;
  unsigned __int8 *v801;
  int v802;
  unsigned int v803;
  int v804;
  unsigned __int8 *v805;
  uint64_t v806;
  unsigned int v807;
  unsigned __int8 *v808;
  unsigned __int8 *v809;
  unint64_t v810;
  int v811;
  unsigned __int8 *v812;
  WTF::AtomStringImpl *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  WTF::StringImpl *v820;
  uint64_t v821;
  BOOL v822;
  _DWORD *v823;
  WTF::AtomStringImpl *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  WTF::StringImpl *v831;
  BOOL v832;
  WTF::AtomStringImpl *v833;
  WTF::StringImpl *v834;
  int v835;
  uint64_t v836;
  unint64_t v837;
  void *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  unsigned int v845;
  uint64_t v846;
  uint64_t v847;
  int v848;
  unsigned int v849;
  uint64_t v850;
  unint64_t v851;
  void *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  void *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  unint64_t v874;
  void *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  WTF::AtomStringImpl *v889;
  WTF::StringImpl *v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  int v894;
  int v895;
  int v896;
  WTF::AtomStringImpl *v897;
  uint64_t v898;
  uint64_t v899;
  WTF::AtomStringImpl *v900;
  WTF::StringImpl *v901;
  int v902;
  unsigned __int8 *v903;
  unsigned __int8 *v904;
  unsigned int v905;
  int v906;
  int v907;
  unsigned __int8 *v908;
  int v909;
  unsigned __int8 *v910;
  unsigned int v911;
  unsigned __int8 *v912;
  unint64_t v913;
  int v914;
  unsigned __int8 *v915;
  WTF::AtomStringImpl *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  WTF::StringImpl *v923;
  uint64_t v924;
  WTF::AtomStringImpl *v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  const char *v934;
  unint64_t v935;
  unint64_t v936;
  BOOL v937;
  unsigned __int8 *v938;
  unsigned __int8 *v940;
  unint64_t v942;
  unint64_t v943;
  BOOL v944;
  unsigned __int8 *v945;
  unsigned __int8 *v947;
  unsigned __int8 *v949;
  WTF::StringImpl *v950;
  unint64_t v951;
  void *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  unint64_t v959;
  unsigned __int8 *v960;
  unsigned __int8 *v961;
  uint64_t v962;
  uint64_t v963;
  int v964;
  uint64_t v965;
  int v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int v972;
  uint64_t v973;
  uint64_t v974;
  WTF::AtomStringImpl *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  WTF::StringImpl *v982;
  WTF::AtomStringImpl *v983;
  WTF::StringImpl *v984;
  unint64_t v985;
  void *v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  WTF::AtomStringImpl *v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  WTF::StringImpl *v1000;
  WTF::AtomStringImpl *v1001;
  WTF::StringImpl *v1002;
  unint64_t v1003;
  void *v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unsigned __int8 *v1011;
  WTF::StringImpl *v1012;
  unsigned __int8 *v1013;
  int v1014;
  unint64_t v1015;
  void *v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  WTF::AtomStringImpl *v1025;
  WTF::StringImpl *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  WTF::AtomStringImpl *v1030;
  WTF::StringImpl *v1031;
  int v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  unint64_t v1040;
  void *v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  unint64_t v1048;
  unint64_t v1049;
  void *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unsigned __int8 *v1059;
  uint64_t v1060;
  unint64_t v1061;
  void *v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  unint64_t v1069;
  unint64_t v1070;
  void *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  unsigned __int8 *v1080;
  unint64_t v1081;
  void *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  char *v1090;
  char v1091;
  unsigned int v1092;
  WTF::AtomStringImpl *v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  WTF::StringImpl *v1100;
  WTF::AtomStringImpl *v1101;
  WTF::StringImpl *v1102;
  unint64_t v1103;
  void *v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  WTF::AtomStringImpl *v1111;
  uint64_t v1112;
  uint64_t v1113;
  WTF::StringImpl *v1114;
  uint64_t *v1115;
  WTF::AtomStringImpl *v1116;
  WTF::StringImpl *v1117;
  unint64_t v1118;
  void *v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  WTF::AtomStringImpl *v1126;
  uint64_t v1127;
  uint64_t v1128;
  WTF::AtomStringImpl *v1129;
  WTF::StringImpl *v1130;
  uint64_t v1131;
  uint64_t v1132;
  int v1133;
  char v1134;
  char v1135;
  char v1136;
  char v1137;
  uint64_t v1138;
  unint64_t v1139;
  void *v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  unint64_t v1147;
  unint64_t v1148;
  void *v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  unsigned __int8 *v1158;
  uint64_t v1159;
  unint64_t v1160;
  void *v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  void *v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  WTF::AtomStringImpl *v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  WTF::StringImpl *v1183;
  WTF::AtomStringImpl *v1184;
  WTF::StringImpl *v1185;
  unint64_t v1186;
  void *v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  unint64_t v1197;
  void *v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  void *v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  unsigned __int8 *v1216;
  uint64_t v1217;
  int v1218;
  int v1219;
  WTF::StringImpl *v1220;
  uint64_t v1221;
  unint64_t v1222;
  void *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unsigned __int8 *v1230;
  unsigned __int8 *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t **v1234;
  unsigned __int8 *v1235;
  unsigned __int8 *v1236;
  unint64_t v1237;
  int v1238;
  uint64_t v1239;
  unsigned __int8 *v1240;
  int v1241;
  uint64_t **v1242;
  WTF::StringImpl *v1243;
  uint64_t v1244;
  unint64_t v1245;
  char *v1246;
  char v1247;
  uint64_t v1248;
  uint64_t **v1249;
  int v1250;
  unint64_t v1251;
  void *v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  int v1259;
  WTF::StringImpl *v1260;
  int v1261;
  unint64_t v1262;
  void *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  char *v1271;
  char v1272;
  WTF::AtomStringImpl *v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  WTF::StringImpl *v1281;
  unint64_t v1282;
  void *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  int v1290;
  char *v1291;
  uint64_t **v1292;
  unsigned __int8 *v1293;
  char v1294;
  int v1295;
  size_t __n;
  size_t __na;
  unsigned int __nb;
  uint64_t **v1299;
  uint64_t **v1300;
  uint64_t **v1301;
  uint64_t v1302;
  uint64_t **v1303;
  uint64_t v1304;
  unsigned int v1305;
  unsigned __int8 *__src;
  void *__srca;
  _QWORD *__srcb;
  uint64_t v1309;
  _BOOL4 v1310;
  unsigned __int8 *v1311;
  size_t v1312;
  uint64_t v1313;
  unsigned int v1314;
  int v1315;
  const void **v1316;
  _QWORD *v1317;
  void **v1318;
  uint64_t v1319;
  WTF::StringImpl *v1320[2];
  int v1321;
  char v1322;
  rlimit *v1323;
  rlimit v1324;
  char v1325;
  uint64_t v1326;

  v1326 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = (uint64_t **)(a2 + 8);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 32);
  v13 = (unsigned __int8 *)(a1 + 44);
  v14 = (rlim_t)(a1 + 20);
  v15 = JSC::typesOfLatin1Characters;
  LODWORD(v16) = 1;
  v17 = 0x100001A00;
LABEL_2:
  v18 = *v13;
LABEL_3:
  while (2)
  {
    while (v18 <= 0x20 && ((1 << v18) & 0x100001A00) != 0 || v18 == 160)
    {
      v18 = 0;
      *((_BYTE *)a1 + 176) = 0;
      v19 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
      *((_QWORD *)a1 + 10) = v19;
      if ((unint64_t)v19 < *((_QWORD *)a1 + 12))
      {
        v18 = *v19;
        *v13 = v18;
      }
    }
    v20 = *((_QWORD *)a1 + 11);
    v21 = *((_QWORD *)a1 + 10) - v20;
    *(_DWORD *)(a2 + 40) = v21;
    LODWORD(v20) = a1[28] - v20;
    *(_QWORD *)(a2 + 48) = *a1 | (unint64_t)(v21 << 32);
    *(_DWORD *)(a2 + 56) = v20;
    v22 = *((unsigned __int8 *)a1 + 176);
    if (!*((_BYTE *)a1 + 176) && *((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
    {
      v42 = 20;
      goto LABEL_528;
    }
    switch(v22)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x19uLL:
      case 0x1AuLL:
      case 0x1BuLL:
      case 0x1CuLL:
      case 0x1DuLL:
      case 0x1EuLL:
      case 0x1FuLL:
      case 0x7FuLL:
      case 0x80uLL:
      case 0x81uLL:
      case 0x82uLL:
      case 0x83uLL:
      case 0x84uLL:
      case 0x85uLL:
      case 0x86uLL:
      case 0x87uLL:
      case 0x88uLL:
      case 0x89uLL:
      case 0x8AuLL:
      case 0x8BuLL:
      case 0x8CuLL:
      case 0x8DuLL:
      case 0x8EuLL:
      case 0x8FuLL:
      case 0x90uLL:
      case 0x91uLL:
      case 0x92uLL:
      case 0x93uLL:
      case 0x94uLL:
      case 0x95uLL:
      case 0x96uLL:
      case 0x97uLL:
      case 0x98uLL:
      case 0x99uLL:
      case 0x9AuLL:
      case 0x9BuLL:
      case 0x9CuLL:
      case 0x9DuLL:
      case 0x9EuLL:
      case 0x9FuLL:
      case 0xA1uLL:
      case 0xA2uLL:
      case 0xA3uLL:
      case 0xA4uLL:
      case 0xA5uLL:
      case 0xA6uLL:
      case 0xA7uLL:
      case 0xA8uLL:
      case 0xA9uLL:
      case 0xABuLL:
      case 0xACuLL:
      case 0xADuLL:
      case 0xAEuLL:
      case 0xAFuLL:
      case 0xB0uLL:
      case 0xB1uLL:
      case 0xB2uLL:
      case 0xB3uLL:
      case 0xB4uLL:
      case 0xB6uLL:
      case 0xB7uLL:
      case 0xB8uLL:
      case 0xB9uLL:
      case 0xBBuLL:
      case 0xBCuLL:
      case 0xBDuLL:
      case 0xBEuLL:
      case 0xBFuLL:
      case 0xD7uLL:
      case 0xF7uLL:
        goto LABEL_1320;
      case 0xAuLL:
      case 0xDuLL:
        v95 = *a1;
        v96 = *((_QWORD *)a1 + 10);
        v97 = a1[22];
        v98 = v96 - v97;
        v99 = a1[28] - v97;
        *((_QWORD *)a1 + 15) = v95 | (v98 << 32);
        a1[32] = v99;
        *((_BYTE *)a1 + 176) = 0;
        v100 = (unsigned __int8 *)(v96 + 1);
        *((_QWORD *)a1 + 10) = v96 + 1;
        v101 = *((_QWORD *)a1 + 12);
        if (v96 + 1 >= v101)
        {
          v18 = 0;
        }
        else
        {
          v18 = *v100;
          *v13 = v18;
          if ((_DWORD)v22 == 13 && v18 == 10)
          {
            *v13 = 0;
            v100 = (unsigned __int8 *)(v96 + 2);
            *(_QWORD *)v14 = v96 + 2;
            if (v96 + 2 >= v101)
            {
              v18 = 0;
            }
            else
            {
              v18 = *v100;
              *v13 = v18;
            }
          }
        }
        *a1 = v95 + 1;
        *((_QWORD *)a1 + 14) = v100;
        *((_BYTE *)a1 + 149) = 1;
        *((_BYTE *)a1 + 56) = 1;
        continue;
      case 0x21uLL:
        *((_BYTE *)a1 + 176) = 0;
        v102 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        v103 = v102 + 1;
        *((_QWORD *)a1 + 10) = v102 + 1;
        v48 = *((_QWORD *)a1 + 12);
        v104 = v102 + 2;
        v105 = v102 + 3;
        if ((unint64_t)(v102 + 2) < v48
          && (unint64_t)(v102 + 3) < v48
          && (unint64_t)(v102 + 1) < v48)
        {
          v106 = *v103;
          *v13 = v106;
          if (v106 != 61)
          {
LABEL_144:
            v42 = 260;
            goto LABEL_527;
          }
          v181 = 121856;
          *v13 = 0;
          *(_QWORD *)v14 = v104;
          v182 = *v104;
          *v13 = v182;
          if (v182 == 61)
          {
            *v13 = 0;
            *(_QWORD *)v14 = v105;
            *v13 = *v105;
            v42 = 121859;
            goto LABEL_527;
          }
LABEL_294:
          v42 = v181 | 1u;
          goto LABEL_527;
        }
        if ((unint64_t)(v102 + 1) >= v48)
          goto LABEL_144;
        v895 = *v103;
        *v13 = v895;
        if (v895 != 61)
          goto LABEL_144;
        v171 = 121856;
        *v13 = 0;
        *(_QWORD *)v14 = v102 + 2;
        if ((unint64_t)(v102 + 2) >= v48)
        {
LABEL_1494:
          v42 = v171 | 1u;
          goto LABEL_527;
        }
        v896 = v102[2];
        *v13 = v896;
        if (v896 != 61)
        {
LABEL_266:
          v42 = (v171 + 1);
          goto LABEL_527;
        }
        *v13 = 0;
        v60 = v102 + 3;
        *(_QWORD *)v14 = v60;
        v42 = 121859;
        goto LABEL_1492;
      case 0x22uLL:
      case 0x27uLL:
        stackaddr_np = *a1;
        v53 = *((_QWORD *)a1 + 10);
        v52 = *((_QWORD *)a1 + 11);
        v17 = *((_QWORD *)a1 + 14) - v52;
        v54 = v53 - v52;
        *((_BYTE *)a1 + 176) = 0;
        v16 = v53 + 1;
        *((_QWORD *)a1 + 10) = v53 + 1;
        v55 = *((_QWORD *)a1 + 12);
        if ((v11 & 2) == 0)
        {
          if (v53 + 1 >= v55)
          {
            LODWORD(v30) = 0;
          }
          else
          {
            LODWORD(v30) = *(unsigned __int8 *)v16;
            *v13 = v30;
          }
          if ((_DWORD)v30 == (_DWORD)v22)
            goto LABEL_123;
          v61 = (unint64_t)(a1 + 2);
          v62 = JSC::singleCharacterEscapeValuesForASCII;
          while (1)
          {
            v63 = 0;
            v64 = v16 + 1;
            while (v30 != 92)
            {
              if (v30 <= 0xDu)
              {
                *((_BYTE *)a1 + 150) = 0;
                v230 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                *((_QWORD *)a1 + 19) = 0;
                if (v230)
                {
                  if (*(_DWORD *)v230 == 2)
                  {
                    v491 = v12;
                    v492 = a4;
                    WTF::StringImpl::~StringImpl(v230, (WTF::AtomStringImpl *)a2, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                    WTF::fastFree(v493, v494, v495, v496, v497, v498, v499, v500);
                    a4 = v492;
                    v12 = v491;
                  }
                  else
                  {
                    *(_DWORD *)v230 -= 2;
                  }
                }
                v231 = *((_QWORD *)a1 + 11);
                v232 = *((_QWORD *)a1 + 12);
                v233 = (char *)(v231 + v54);
                *((_QWORD *)a1 + 10) = v233;
                *((_QWORD *)a1 + 14) = v231 + (int)v17;
                a1[5] = 0;
                a1[9] = 0;
                if ((unint64_t)v233 >= v232)
                  v234 = 0;
                else
                  v234 = *v233;
                *((_BYTE *)a1 + 176) = v234;
                *a1 = stackaddr_np;
                a1[5] = 0;
                v235 = (uint64_t)a1;
                v236 = v12;
                v237 = a4;
LABEL_365:
                v238 = JSC::Lexer<unsigned char>::parseStringSlowCase<true>(v235, v236, v237, a4, (uint64_t)v12, a6, a7, a8);
                goto LABEL_366;
              }
              *((_BYTE *)a1 + 176) = 0;
              *((_QWORD *)a1 + 10) = v64 + v63;
              if (v64 + v63 >= *((_QWORD *)a1 + 12))
              {
                LODWORD(v30) = 0;
              }
              else
              {
                LODWORD(v30) = *(unsigned __int8 *)(v64 + v63);
                *v13 = v30;
              }
              ++v63;
              if ((_DWORD)v30 == (_DWORD)v22)
              {
                if (v63)
                {
                  if ((v63 & 0x8000000000000000) != 0)
                    goto LABEL_2008;
                  v73 = a1[4];
                  v74 = a1[5];
                  if (v74 + v63 > v73)
                  {
                    v1302 = (uint64_t)v12;
                    v462 = v73 + (v73 >> 2);
                    if (v462 >= 0x10)
                      v463 = v462 + 1;
                    else
                      v463 = 16;
                    if (v463 <= v74 + v63)
                      v464 = v74 + v63;
                    else
                      v464 = v463;
                    if (HIDWORD(v464))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19886019CLL);
                    }
                    v465 = *(_BYTE **)v61;
                    v1316 = (const void **)v61;
                    v466 = (void *)WTF::fastMalloc((WTF *)v464);
                    a1[4] = v464;
                    *((_QWORD *)a1 + 1) = v466;
                    memcpy(v466, v465, v74);
                    v12 = (uint64_t **)v1302;
                    if (v465)
                    {
                      if (*v1316 == v465)
                      {
                        *((_QWORD *)a1 + 1) = 0;
                        a1[4] = 0;
                      }
                      WTF::fastFree((unint64_t)v465, v467, (uint64_t)v15, a4, v1302, a6, a7, a8);
                      v12 = (uint64_t **)v1302;
                    }
                  }
                  a1[5] = v74 + v63;
                  v75 = *((_QWORD *)a1 + 1);
                  if (v63 < 8 || (v76 = (_OWORD *)(v75 + v74), v75 + v74 - v16 < 0x10))
                  {
                    v77 = 0;
                    goto LABEL_120;
                  }
                  if (v63 >= 0x10)
                  {
                    v77 = v63 & 0xFFFFFFFFFFFFFFF0;
                    v178 = v63 & 0xFFFFFFFFFFFFFFF0;
                    v179 = (__int128 *)v16;
                    do
                    {
                      v180 = *v179++;
                      *v76++ = v180;
                      v178 -= 16;
                    }
                    while (v178);
                    if (v63 != v77)
                    {
                      if ((v63 & 8) == 0)
                        goto LABEL_120;
                      goto LABEL_259;
                    }
                  }
                  else
                  {
                    v77 = 0;
LABEL_259:
                    v166 = v77;
                    v77 = v63 & 0xFFFFFFFFFFFFFFF8;
                    v167 = (uint64_t *)(v16 + v166);
                    v168 = (_QWORD *)(v75 + v166 + v74);
                    v169 = v166 - (v63 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v170 = *v167++;
                      *v168++ = v170;
                      v169 += 8;
                    }
                    while (v169);
                    if (v63 != v77)
                    {
LABEL_120:
                      v78 = v77 - v63;
                      v79 = (_BYTE *)(v75 + v77 + v74);
                      v80 = (char *)(v16 + v77);
                      do
                      {
                        v81 = *v80++;
                        *v79++ = v81;
                        v139 = __CFADD__(v78++, 1);
                      }
                      while (!v139);
                    }
                  }
                }
LABEL_123:
                v22 = a1[5];
                v82 = *((_QWORD *)a1 + 24);
                if ((_DWORD)v22)
                {
                  v83 = (_BYTE *)*((_QWORD *)a1 + 1);
                  v84 = *((_QWORD *)a1 + 23);
                  if ((char)*v83 < 0)
                  {
                    v587 = v12;
                    if ((_DWORD)v22 == 1)
                    {
                      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v82 + 41968), *v83, a4, (uint64_t)v12, a6, a7, a8, &v1324);
                      rlim_cur = (WTF::StringImpl *)v1324.rlim_cur;
                    }
                    else
                    {
                      WTF::AtomStringImpl::add(*((_QWORD *)a1 + 1), a1[5], a4, (uint64_t)v12, a6, a7, a8, &v1324);
                      rlim_cur = (WTF::StringImpl *)v1324.rlim_cur;
                      v596 = *(_DWORD *)v1324.rlim_cur;
                      *(_DWORD *)v1324.rlim_cur += 2;
                      if (v596)
                      {
                        *(_DWORD *)rlim_cur = v596;
                      }
                      else
                      {
                        WTF::StringImpl::~StringImpl(rlim_cur, v588, v589, v590, v591, v592, v593, v594);
                        WTF::fastFree(v644, v645, v646, v647, v648, v649, v650, v651);
                      }
                    }
                    v597 = (*(_QWORD *)v84)++;
                    v598 = v597 >> 6;
                    v599 = *(unsigned int *)(v84 + 20);
                    if (v597 >> 6 >= v599)
                    {
                      v701 = WTF::fastMalloc((WTF *)0x200);
                      v1324.rlim_cur = v701;
                      v702 = *(unsigned int *)(v84 + 20);
                      if ((_DWORD)v702 == *(_DWORD *)(v84 + 16))
                      {
                        v722 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84 + 8, v702 + 1, (unint64_t)&v1324);
                        v702 = *(unsigned int *)(v84 + 20);
                        *(_QWORD *)(*(_QWORD *)(v84 + 8) + 8 * v702) = *v722;
                      }
                      else
                      {
                        *(_QWORD *)(*(_QWORD *)(v84 + 8) + 8 * v702) = v701;
                      }
                      v599 = (v702 + 1);
                      *(_DWORD *)(v84 + 20) = v599;
                      v597 = *(_QWORD *)v84 - 1;
                      v598 = v597 >> 6;
                    }
                    if (v598 >= v599)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198860264);
                    }
                    v600 = *(_QWORD *)(v84 + 8);
                    v601 = *(_QWORD *)(v600 + 8 * v598);
                    v602 = v597 & 0x3F;
                    *(_QWORD *)(v601 + 8 * v602) = rlim_cur;
                    v603 = v597 >> 6;
                    if (v603 >= v599)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19886026CLL);
                    }
                    v86 = (uint64_t *)(*(_QWORD *)(v600 + 8 * v603) + 8 * v602);
                    v12 = v587;
                  }
                  else
                  {
                    v85 = *v83;
                    if ((_DWORD)v22 == 1)
                    {
                      v16 = v84 + 24;
                      v86 = *(uint64_t **)(v84 + 24 + 8 * v85);
                      if (!v86)
                      {
                        if (*(_BYTE *)(v82 + 44265))
                        {
                          v87 = *(_QWORD *)(v82 + 8 * v85 + 42216);
                          v14 = *(_QWORD *)(v87 + 8);
                          if ((v14 & 1) != 0)
                            v88 = 0;
                          else
                            v88 = *(_DWORD **)(v87 + 8);
                          *v88 += 2;
                        }
                        else
                        {
                          LOBYTE(v1320[0]) = *v83;
                          v22 = (rlim_t)v12;
                          WTF::AtomStringImpl::add((uint64_t)v1320, 1uLL, a4, (uint64_t)v12, a6, a7, a8, &v1324);
                          v12 = (uint64_t **)v22;
                          v14 = v1324.rlim_cur;
                        }
                        v89 = (*(_QWORD *)v84)++;
                        v90 = v89 >> 6;
                        v91 = *(unsigned int *)(v84 + 20);
                        if (v89 >> 6 >= v91)
                        {
                          v1301 = v12;
                          v22 = v84 + 8;
                          v458 = WTF::fastMalloc((WTF *)0x200);
                          v1324.rlim_cur = v458;
                          v459 = *(unsigned int *)(v84 + 20);
                          if ((_DWORD)v459 == *(_DWORD *)(v84 + 16))
                          {
                            v502 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84 + 8, v459 + 1, (unint64_t)&v1324);
                            v459 = *(unsigned int *)(v84 + 20);
                            *(_QWORD *)(*(_QWORD *)(v84 + 8) + 8 * v459) = *v502;
                          }
                          else
                          {
                            *(_QWORD *)(*(_QWORD *)v22 + 8 * v459) = v458;
                          }
                          v91 = (v459 + 1);
                          *(_DWORD *)(v84 + 20) = v91;
                          v89 = *(_QWORD *)v84 - 1;
                          v90 = v89 >> 6;
                          v12 = v1301;
                        }
                        if (v90 >= v91)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19885FF9CLL);
                        }
                        v92 = *(_QWORD *)(v84 + 8);
                        v93 = *(_QWORD *)(v92 + 8 * v90);
                        v94 = v89 & 0x3F;
                        *(_QWORD *)(v93 + 8 * v94) = v14;
                        v30 = v89 >> 6;
                        if (v30 >= v91)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19885FFA4);
                        }
                        v61 = (char)*v83;
                        if ((v61 & 0x80000000) != 0)
                          goto LABEL_2008;
                        *(_QWORD *)(v16 + 8 * *v83) = *(_QWORD *)(v92 + 8 * v30) + 8 * v94;
LABEL_220:
                        v86 = (uint64_t *)(*(_QWORD *)(v92 + 8 * v30) + 8 * v94);
                      }
                    }
                    else
                    {
                      v86 = *(uint64_t **)(v84 + 1048 + 8 * v85);
                      if (!v86
                        || (v16 = (unint64_t)v12,
                            v144 = WTF::equalInternal<unsigned char>(*v86, (unint64_t)v83, v22),
                            v12 = (uint64_t **)v16,
                            !v144))
                      {
                        v14 = (rlim_t)v12;
                        WTF::AtomStringImpl::add((uint64_t)v83, v22, a4, (uint64_t)v12, a6, a7, a8, &v1324);
                        v22 = v1324.rlim_cur;
                        v147 = *(_DWORD *)v1324.rlim_cur;
                        *(_DWORD *)v1324.rlim_cur += 2;
                        if (v147)
                        {
                          *(_DWORD *)v22 = v147;
                        }
                        else
                        {
                          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v22, v145, (uint64_t)v15, a4, v146, a6, a7, a8);
                          WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
                        }
                        v148 = (*(_QWORD *)v84)++;
                        v149 = v148 >> 6;
                        v150 = *(unsigned int *)(v84 + 20);
                        if (v148 >> 6 >= v150)
                        {
                          v16 = v84 + 8;
                          v460 = WTF::fastMalloc((WTF *)0x200);
                          v1324.rlim_cur = v460;
                          v461 = *(unsigned int *)(v84 + 20);
                          if ((_DWORD)v461 == *(_DWORD *)(v84 + 16))
                          {
                            v503 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84 + 8, v461 + 1, (unint64_t)&v1324);
                            v461 = *(unsigned int *)(v84 + 20);
                            *(_QWORD *)(*(_QWORD *)(v84 + 8) + 8 * v461) = *v503;
                          }
                          else
                          {
                            *(_QWORD *)(*(_QWORD *)v16 + 8 * v461) = v460;
                          }
                          v150 = (v461 + 1);
                          *(_DWORD *)(v84 + 20) = v150;
                          v148 = *(_QWORD *)v84 - 1;
                          v149 = v148 >> 6;
                        }
                        v12 = (uint64_t **)v14;
                        if (v149 >= v150)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198860088);
                        }
                        v92 = *(_QWORD *)(v84 + 8);
                        v151 = *(_QWORD *)(v92 + 8 * v149);
                        v94 = v148 & 0x3F;
                        *(_QWORD *)(v151 + 8 * v94) = v22;
                        v30 = v148 >> 6;
                        if (v30 >= v150)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198860090);
                        }
                        v61 = (char)*v83;
                        if ((v61 & 0x80000000) != 0)
                          goto LABEL_2008;
                        *(_QWORD *)(v84 + 1048 + 8 * *v83) = *(_QWORD *)(v92 + 8 * v30) + 8 * v94;
                        goto LABEL_220;
                      }
                    }
                  }
                }
                else
                {
                  v86 = (uint64_t *)(*(_QWORD *)(v82 + 41952) + 8);
                }
                *v12 = v86;
                a1[5] = 0;
                goto LABEL_2050;
              }
            }
            if (v63)
            {
              if ((v63 & 0x8000000000000000) != 0)
                goto LABEL_2008;
              v227 = a1[4];
              v228 = a1[5];
              if (v228 + v63 > v227)
              {
                v1312 = a1[5];
                v1318 = (void **)v61;
                v1305 = a4;
                v1304 = (uint64_t)v12;
                v627 = v227 + (v227 >> 2);
                if (v627 >= 0x10)
                  v628 = v627 + 1;
                else
                  v628 = 16;
                if (v628 <= v228 + v63)
                  v628 = v228 + v63;
                if (HIDWORD(v628))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1988602B0);
                }
                __srca = *v1318;
                __nb = v628;
                v629 = (void *)WTF::fastMalloc((WTF *)v628);
                a1[4] = __nb;
                *((_QWORD *)a1 + 1) = v629;
                memcpy(v629, __srca, v1312);
                v228 = v1312;
                v61 = (unint64_t)v1318;
                v12 = (uint64_t **)v1304;
                a4 = v1305;
                v62 = JSC::singleCharacterEscapeValuesForASCII;
                if (__srca)
                {
                  if (*v1318 == __srca)
                  {
                    *((_QWORD *)a1 + 1) = 0;
                    a1[4] = 0;
                  }
                  WTF::fastFree((unint64_t)__srca, (void *)a2, (uint64_t)v15, v1305, v1304, a6, a7, a8);
                  v228 = v1312;
                  v61 = (unint64_t)v1318;
                  v12 = (uint64_t **)v1304;
                  a4 = v1305;
                  v62 = JSC::singleCharacterEscapeValuesForASCII;
                }
              }
              v65 = 0;
              a1[5] = v228 + v63;
              v229 = *((_QWORD *)a1 + 1) + v228;
              do
              {
                *(_BYTE *)(v229 + v65) = *(_BYTE *)(v16 + v65);
                ++v65;
              }
              while (v63 != v65);
              v16 = *(_QWORD *)v14;
            }
            *((_BYTE *)a1 + 176) = 0;
            v66 = (unsigned __int8 *)(v16 + 1);
            *((_QWORD *)a1 + 10) = v16 + 1;
            v67 = *((_QWORD *)a1 + 12);
            if (v16 + 1 >= v67)
            {
              v69 = 0;
            }
            else
            {
              v68 = (char)*v66;
              v69 = *v66;
              *v13 = v68;
              if (v68 < 0)
                goto LABEL_898;
            }
            v70 = v62[v69];
            if (v70)
            {
              LOBYTE(v1324.rlim_cur) = v62[v69];
              v71 = a1[5];
              if ((_DWORD)v71 == a1[4])
              {
                v723 = v61;
                v724 = v12;
                v1305 = a4;
                v725 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v61, (WTF *)(v71 + 1), (unint64_t)&v1324);
                v62 = JSC::singleCharacterEscapeValuesForASCII;
                a4 = v1305;
                v12 = v724;
                v61 = v723;
                v71 = a1[5];
                v72 = (_BYTE *)*((_QWORD *)a1 + 1);
                v70 = *v725;
              }
              else
              {
                v72 = *(_BYTE **)v61;
              }
              v72[v71] = v70;
              ++a1[5];
              *((_BYTE *)a1 + 176) = 0;
              v16 = *((_QWORD *)a1 + 10) + 1;
              *((_QWORD *)a1 + 10) = v16;
              if (v16 >= *((_QWORD *)a1 + 12))
              {
                LODWORD(v30) = 0;
              }
              else
              {
                LODWORD(v30) = *(unsigned __int8 *)v16;
                *v13 = v30;
              }
              goto LABEL_112;
            }
LABEL_898:
            v516 = v62;
            v1305 = a4;
            v1303 = v12;
            v1317 = (_QWORD *)v61;
            if (v69 != 13)
            {
              if (v69 == 120)
              {
                *v13 = 0;
                *(_QWORD *)v14 = v16 + 2;
                if (v16 + 2 >= v67)
                {
                  v911 = 0;
                }
                else
                {
                  v911 = *(unsigned __int8 *)(v16 + 2);
                  *v13 = v911;
                }
                if (v911 - 48 >= 0xA && ((v911 | 0x20) - 97) > 5u
                  || ((v1013 = (unsigned __int8 *)(v16 + 3), v16 + 3 >= v67) ? (v1014 = 0) : (v1014 = *v1013),
                      (v1014 - 48) >= 0xA && (v1014 | 0x20u) - 97 >= 6))
                {
LABEL_2095:
                  v1280 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v1280 = 0x3300000002;
                  *(_QWORD *)(v1280 + 8) = "\\x can only be followed by a hex character sequence";
                  *(_DWORD *)(v1280 + 16) = 4;
                  v1281 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                  *((_QWORD *)a1 + 19) = v1280;
                  if (v1281)
                  {
                    if (*(_DWORD *)v1281 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v1281, v1273, v1274, v1275, v1276, v1277, v1278, v1279);
                      WTF::fastFree(v1282, v1283, v1284, v1285, v1286, v1287, v1288, v1289);
                    }
                    else
                    {
                      *(_DWORD *)v1281 -= 2;
                    }
                  }
                  v1290 = *v13;
                  if (!*v13 && *((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12)
                    || ((v42 = 1048585, (v1290 - 48) < 0xA) || (v1290 | 0x20u) - 97 <= 5)
                    && *((_QWORD *)a1 + 10) + 1 == *((_QWORD *)a1 + 12))
                  {
LABEL_368:
                    v239 = 3145734;
                    goto LABEL_984;
                  }
LABEL_985:
                  *((_BYTE *)a1 + 150) = 1;
                  v577 = *((_QWORD *)a1 + 11);
                  v225 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) - v577);
                  v318 = a1[28] - v577;
                  v226 = *a1 | ((_QWORD)v225 << 32);
                  goto LABEL_530;
                }
                *v13 = 0;
                *(_QWORD *)v14 = v1013;
                if ((unint64_t)v1013 >= v67)
                {
                  v1092 = 0;
                }
                else
                {
                  v1092 = *v1013;
                  *v13 = v1092;
                }
                if (v911 >= 0x41)
                  v1134 = 9;
                else
                  v1134 = 0;
                v1135 = v1134 + v911;
                if (v1092 >= 0x41)
                  v1136 = (v1092 + 9) & 0xF;
                else
                  v1136 = v1092 - 48;
                v1137 = v1136 | (16 * v1135);
                LOBYTE(v1324.rlim_cur) = v1137;
                v1138 = a1[5];
                if ((_DWORD)v1138 == a1[4])
                  *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1317, (WTF *)(v1138 + 1), (unint64_t)&v1324);
                else
                  *(_BYTE *)(*v1317 + v1138) = v1137;
                ++a1[5];
                *((_BYTE *)a1 + 176) = 0;
                v16 = *((_QWORD *)a1 + 10) + 1;
                *((_QWORD *)a1 + 10) = v16;
                if (v16 >= *((_QWORD *)a1 + 12))
                {
                  LODWORD(v30) = 0;
                }
                else
                {
                  LODWORD(v30) = *(unsigned __int8 *)v16;
                  *v13 = v30;
                }
                goto LABEL_900;
              }
              if (v69 != 10)
              {
                *((_BYTE *)a1 + 150) = 0;
                v1012 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                *((_QWORD *)a1 + 19) = 0;
                if (v1012)
                {
                  if (*(_DWORD *)v1012 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v1012, (WTF::AtomStringImpl *)a2, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                    WTF::fastFree(v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
                    v67 = *((_QWORD *)a1 + 12);
                  }
                  else
                  {
                    *(_DWORD *)v1012 -= 2;
                  }
                }
                v1089 = *((_QWORD *)a1 + 11);
                v1090 = (char *)(v1089 + v54);
                *((_QWORD *)a1 + 10) = v1090;
                *((_QWORD *)a1 + 14) = v1089 + (int)v17;
                a1[5] = 0;
                a1[9] = 0;
                if ((unint64_t)v1090 >= v67)
                  v1091 = 0;
                else
                  v1091 = *v1090;
                *((_BYTE *)a1 + 176) = v1091;
                *a1 = stackaddr_np;
                a1[5] = 0;
                v235 = (uint64_t)a1;
                v236 = v1303;
                v237 = v1305;
                goto LABEL_365;
              }
            }
            JSC::Lexer<unsigned char>::shiftLineTerminator(a1);
            v16 = *((_QWORD *)a1 + 10);
            LODWORD(v30) = *((unsigned __int8 *)a1 + 176);
LABEL_900:
            v61 = (unint64_t)v1317;
            v12 = v1303;
            a4 = v1305;
            v62 = v516;
LABEL_112:
            if ((_DWORD)v30 == (_DWORD)v22)
              goto LABEL_123;
          }
        }
        if (v53 + 1 >= v55)
          goto LABEL_2053;
        v56 = *(unsigned __int8 *)v16;
LABEL_2043:
        *v13 = v56;
        while (1)
        {
          while (1)
          {
            if (v56 == (_DWORD)v22)
            {
              *v12 = 0;
              goto LABEL_2050;
            }
            if (v56 == 92)
              break;
            if (v56 <= 0xDu)
            {
              v1241 = a4;
              v1242 = v12;
              *((_BYTE *)a1 + 150) = 0;
              v1243 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
              *((_QWORD *)a1 + 19) = 0;
              if (v1243)
              {
                if (*(_DWORD *)v1243 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1243, (WTF::AtomStringImpl *)a2, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                  WTF::fastFree(v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258);
                }
                else
                {
                  *(_DWORD *)v1243 -= 2;
                }
              }
              v1244 = *((_QWORD *)a1 + 11);
              v1245 = *((_QWORD *)a1 + 12);
              v1246 = (char *)(v1244 + v54);
              *((_QWORD *)a1 + 10) = v1246;
              *((_QWORD *)a1 + 14) = v1244 + (int)v17;
              a1[5] = 0;
              a1[9] = 0;
              if ((unint64_t)v1246 >= v1245)
                v1247 = 0;
              else
                v1247 = *v1246;
              *((_BYTE *)a1 + 176) = v1247;
              *a1 = stackaddr_np;
              a1[5] = 0;
              v1248 = (uint64_t)a1;
              v1249 = v1242;
              v1250 = v1241;
              goto LABEL_2067;
            }
            *((_BYTE *)a1 + 176) = 0;
            v1230 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
            *((_QWORD *)a1 + 10) = v1230;
            if ((unint64_t)v1230 < *((_QWORD *)a1 + 12))
            {
              v56 = *v1230;
              goto LABEL_2043;
            }
LABEL_2053:
            v56 = 0;
          }
          v1233 = a4;
          v1234 = v12;
          *((_BYTE *)a1 + 176) = 0;
          v1235 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
          v1236 = v1235 + 1;
          *((_QWORD *)a1 + 10) = v1235 + 1;
          v1237 = *((_QWORD *)a1 + 12);
          if ((unint64_t)(v1235 + 1) >= v1237)
          {
            v1239 = 0;
          }
          else
          {
            v1238 = (char)*v1236;
            v1239 = *v1236;
            *v13 = v1238;
            if (v1238 < 0)
              break;
          }
          if (!JSC::singleCharacterEscapeValuesForASCII[v1239])
            break;
          *v13 = 0;
          v1240 = v1235 + 2;
LABEL_2058:
          *(_QWORD *)v14 = v1240;
          if ((unint64_t)v1240 >= v1237)
          {
            v56 = 0;
          }
          else
          {
            v56 = *v1240;
            *v13 = v56;
          }
LABEL_2060:
          v12 = v1234;
          a4 = v1233;
        }
        switch(v1239)
        {
          case 13:
            goto LABEL_2070;
          case 120:
            *v13 = 0;
            *(_QWORD *)v14 = v1235 + 2;
            if ((unint64_t)(v1235 + 2) >= v1237)
            {
              v1259 = 0;
            }
            else
            {
              v1259 = v1235[2];
              *v13 = v1259;
            }
            if ((v1259 - 48) >= 0xA && (v1259 | 0x20u) - 97 > 5)
              goto LABEL_2095;
            v1261 = (unint64_t)(v1235 + 3) >= v1237 ? 0 : v1235[3];
            if ((v1261 - 48) >= 0xA && (v1261 | 0x20u) - 97 >= 6)
              goto LABEL_2095;
            *v13 = 0;
            v1240 = v1235 + 4;
            goto LABEL_2058;
          case 10:
LABEL_2070:
            JSC::Lexer<unsigned char>::shiftLineTerminator(a1);
            v56 = *((unsigned __int8 *)a1 + 176);
            goto LABEL_2060;
        }
        *((_BYTE *)a1 + 150) = 0;
        v1260 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
        *((_QWORD *)a1 + 19) = 0;
        if (v1260)
        {
          if (*(_DWORD *)v1260 == 2)
          {
            WTF::StringImpl::~StringImpl(v1260, (WTF::AtomStringImpl *)a2, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
            WTF::fastFree(v1262, v1263, v1264, v1265, v1266, v1267, v1268, v1269);
            v1237 = *((_QWORD *)a1 + 12);
          }
          else
          {
            *(_DWORD *)v1260 -= 2;
          }
        }
        v1270 = *((_QWORD *)a1 + 11);
        v1271 = (char *)(v1270 + v54);
        *((_QWORD *)a1 + 10) = v1271;
        *((_QWORD *)a1 + 14) = v1270 + (int)v17;
        a1[5] = 0;
        a1[9] = 0;
        if ((unint64_t)v1271 >= v1237)
          v1272 = 0;
        else
          v1272 = *v1271;
        *((_BYTE *)a1 + 176) = v1272;
        *a1 = stackaddr_np;
        a1[5] = 0;
        v1248 = (uint64_t)a1;
        v1249 = v1234;
        v1250 = v1233;
LABEL_2067:
        v238 = JSC::Lexer<unsigned char>::parseStringSlowCase<false>(v1248, v1249, v1250);
LABEL_366:
        if (v238)
        {
          if (v238 == 1)
            goto LABEL_368;
          v239 = 1048583;
LABEL_984:
          v42 = (v239 + 2);
          goto LABEL_985;
        }
LABEL_2050:
        *((_BYTE *)a1 + 176) = 0;
        v1231 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v1231;
        if ((unint64_t)v1231 < *((_QWORD *)a1 + 12))
          *v13 = *v1231;
        *((_BYTE *)a1 + 149) = 0;
        v1232 = *((_QWORD *)a1 + 11);
        v225 = &v1231[-v1232];
        v318 = a1[28] - v1232;
        v226 = *a1 | ((_QWORD)v225 << 32);
        v42 = 14;
LABEL_530:
        *(_DWORD *)(a2 + 44) = (_DWORD)v225;
        *(_DWORD *)(a2 + 32) = stackaddr_np;
        *(_DWORD *)(a2 + 36) = v17;
        *(_QWORD *)(a2 + 60) = v226;
        *(_DWORD *)(a2 + 68) = v318;
        a1[15] = v42;
        return v42;
      case 0x23uLL:
      case 0x122uLL:
        v563 = *((_QWORD *)a1 + 10);
        v564 = *((_QWORD *)a1 + 12);
        if (v563 + 1 >= v564)
          goto LABEL_1320;
        v1314 = v11;
        v1305 = a4;
        v1299 = v12;
        v565 = *(unsigned __int8 *)(v563 + 1);
        if ((_DWORD)v565 == 33)
        {
          if ((_DWORD)v563 == a1[22])
          {
            *v13 = 0;
            v812 = (unsigned __int8 *)(v563 + 2);
            *(_QWORD *)v14 = v812;
            if ((unint64_t)v812 < v564)
              *v13 = *v812;
            goto LABEL_348;
          }
          goto LABEL_1320;
        }
        v15 = JSC::typesOfLatin1Characters;
        a4 = a4;
        if (JSC::typesOfLatin1Characters[v565] && (_DWORD)v565 != 92)
        {
LABEL_1320:
          JSC::Lexer<unsigned char>::invalidCharacterMessage((uint64_t)&v1324, v22);
          v820 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
          *((_QWORD *)a1 + 19) = v1324.rlim_cur;
          if (v820)
          {
            if (*(_DWORD *)v820 == 2)
            {
              WTF::StringImpl::~StringImpl(v820, v813, v814, v815, v816, v817, v818, v819);
              WTF::fastFree(v837, v838, v839, v840, v841, v842, v843, v844);
            }
            else
            {
              *(_DWORD *)v820 -= 2;
            }
          }
          v42 = 0x100000;
          goto LABEL_1018;
        }
        LODWORD(v11) = v11 & 0xFFFFFFFB;
LABEL_406:
        *(_BYTE *)(a2 + 16) = 0;
        v61 = *((_QWORD *)a1 + 12);
        v22 = *((_QWORD *)a1 + 10);
        v248 = v61 - v22;
        if ((v11 & 4) == 0)
        {
          if (v11 & 1 | ((uint64_t)(v61 - v22) < 11))
            goto LABEL_421;
          v249 = *(unsigned __int8 *)v22;
          switch(*(_BYTE *)v22)
          {
            case 'f':
              v304 = *(unsigned __int16 *)(v22 + 1);
              if (v304 > 0x726E)
              {
                if (v304 == 29295)
                {
                  v341 = (_BYTE *)(v22 + 3);
                  v342 = *(unsigned __int8 *)(v22 + 3);
                  if (v342 != 92 && JSC::typesOfLatin1Characters[v342] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v341;
                    *((_BYTE *)a1 + 176) = *v341;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 264;
                    v287 = 518;
                    goto LABEL_469;
                  }
                }
              }
              else if (v304 == 28277)
              {
                if (*(_WORD *)(v22 + 3) == 29795 && *(_WORD *)(v22 + 4) == 26996 && *(_WORD *)(v22 + 6) == 28271)
                {
                  v361 = (_BYTE *)(v22 + 8);
                  v362 = *(unsigned __int8 *)(v22 + 8);
                  if (v362 != 92 && JSC::typesOfLatin1Characters[v362] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v361;
                    *((_BYTE *)a1 + 176) = *v361;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 272;
                    v287 = 523;
                    goto LABEL_469;
                  }
                }
              }
              else if (v304 == 27745)
              {
                if (*(_WORD *)(v22 + 3) == 25971)
                {
                  v374 = (_BYTE *)(v22 + 5);
                  v375 = *(unsigned __int8 *)(v22 + 5);
                  if (v375 != 92 && JSC::typesOfLatin1Characters[v375] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v374;
                    *((_BYTE *)a1 + 176) = *v374;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 248;
                    v287 = 514;
                    goto LABEL_469;
                  }
                }
              }
              else if (v304 == 28265 && *(_WORD *)(v22 + 3) == 27745 && *(_WORD *)(v22 + 5) == 31084)
              {
                v305 = (_BYTE *)(v22 + 7);
                v306 = *(unsigned __int8 *)(v22 + 7);
                if (v306 != 92 && JSC::typesOfLatin1Characters[v306] >= 4u)
                {
                  *((_QWORD *)a1 + 10) = v305;
                  *((_BYTE *)a1 + 176) = *v305;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 256;
                  v287 = 536;
                  goto LABEL_469;
                }
              }
              goto LABEL_421;
            case 'i':
              v320 = *(unsigned __int8 *)(v22 + 1);
              if (v320 == 102)
              {
                v321 = (_BYTE *)(v22 + 2);
                v322 = *(unsigned __int8 *)(v22 + 2);
                if (v322 != 92 && JSC::typesOfLatin1Characters[v322] >= 4u)
                {
                  *((_QWORD *)a1 + 10) = v321;
                  *((_BYTE *)a1 + 176) = *v321;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 280;
                  v287 = 525;
                  goto LABEL_469;
                }
              }
              else if (v320 == 110)
              {
                v377 = (_BYTE *)(v22 + 2);
                v376 = *(unsigned __int8 *)(v22 + 2);
                if (v376 != 92 && JSC::typesOfLatin1Characters[v376] >= 4u)
                {
                  v287 = 131589;
                  *((_QWORD *)a1 + 10) = v377;
                  *((_BYTE *)a1 + 176) = *v377;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 304;
                  goto LABEL_469;
                }
                v641 = *(unsigned __int16 *)v377;
                if (v641 == 29811)
                {
                  if (*(_WORD *)(v22 + 4) == 28257 && *(_WORD *)(v22 + 6) == 25955 && *(_WORD *)(v22 + 8) == 26223)
                  {
                    v642 = (_BYTE *)(v22 + 10);
                    v643 = *(unsigned __int8 *)(v22 + 10);
                    if (v643 != 92 && JSC::typesOfLatin1Characters[v643] >= 4u)
                    {
                      *((_QWORD *)a1 + 10) = v642;
                      *((_BYTE *)a1 + 176) = *v642;
                      v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 312;
                      v287 = 139780;
                      goto LABEL_469;
                    }
                  }
                }
                else if (v641 == 25972
                       && *(_WORD *)(v22 + 4) == 26226
                       && *(_WORD *)(v22 + 5) == 24934
                       && *(_WORD *)(v22 + 7) == 25955)
                {
                  v685 = (_BYTE *)(v22 + 9);
                  v686 = *(unsigned __int8 *)(v22 + 9);
                  if (v686 != 92 && JSC::typesOfLatin1Characters[v686] >= 4u)
                  {
                    v288 = 0;
                    *((_QWORD *)a1 + 10) = v685;
                    *((_BYTE *)a1 + 176) = *v685;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 320;
                    goto LABEL_587;
                  }
                }
              }
              else
              {
                if (*(_WORD *)(v22 + 1) != 28781)
                  goto LABEL_421;
                if (*(_WORD *)(v22 + 2) == 28528 && *(_WORD *)(v22 + 4) == 29810)
                {
                  v585 = (_BYTE *)(v22 + 6);
                  v586 = *(unsigned __int8 *)(v22 + 6);
                  if (v586 != 92 && JSC::typesOfLatin1Characters[v586] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v585;
                    *((_BYTE *)a1 + 176) = *v585;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 296;
                    v287 = 539;
                    goto LABEL_469;
                  }
                }
                else if (*(_WORD *)(v22 + 3) == 25964
                       && *(_WORD *)(v22 + 5) == 25965
                       && *(_WORD *)(v22 + 6) == 28261
                       && *(_WORD *)(v22 + 8) == 29556)
                {
                  v350 = (_BYTE *)(v22 + 10);
                  v351 = *(unsigned __int8 *)(v22 + 10);
                  if (v351 != 92 && JSC::typesOfLatin1Characters[v351] >= 4u)
                  {
                    v288 = 0;
                    *((_QWORD *)a1 + 10) = v350;
                    *((_BYTE *)a1 + 176) = *v350;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 288;
                    goto LABEL_587;
                  }
                }
              }
              goto LABEL_421;
            case 't':
              v283 = *(unsigned __int8 *)(v22 + 1);
              if (v283 == 104)
              {
                if (*(_WORD *)(v22 + 2) == 29545)
                {
                  v284 = (_BYTE *)(v22 + 4);
                  v285 = *(unsigned __int8 *)(v22 + 4);
                  if (v285 != 92 && JSC::typesOfLatin1Characters[v285] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v284;
                    *((_BYTE *)a1 + 176) = *v284;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 416;
                    v287 = 526;
                    goto LABEL_469;
                  }
                }
                else if (*(_WORD *)(v22 + 1) == 29288 && *(_WORD *)(v22 + 3) == 30575)
                {
                  v441 = (_BYTE *)(v22 + 5);
                  v442 = *(unsigned __int8 *)(v22 + 5);
                  if (v442 != 92 && JSC::typesOfLatin1Characters[v442] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v441;
                    *((_BYTE *)a1 + 176) = *v441;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 424;
                    v287 = 533;
                    goto LABEL_469;
                  }
                }
              }
              else if (v283 == 114)
              {
                v414 = *(unsigned __int16 *)(v22 + 2);
                if (v414 == 25973)
                {
                  v439 = (_BYTE *)(v22 + 4);
                  v440 = *(unsigned __int8 *)(v22 + 4);
                  if (v440 != 92 && JSC::typesOfLatin1Characters[v440] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v439;
                    *((_BYTE *)a1 + 176) = *v439;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 432;
                    v287 = 513;
                    goto LABEL_469;
                  }
                }
                else if (*(_WORD *)(v22 + 2) == 121)
                {
                  v415 = v414 >> 8;
                  if ((_DWORD)v415 != 92 && JSC::typesOfLatin1Characters[v415] >= 4u)
                  {
                    *((_QWORD *)a1 + 10) = v22 + 3;
                    *((_BYTE *)a1 + 176) = *(_BYTE *)(v22 + 3);
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 440;
                    v287 = 534;
                    goto LABEL_469;
                  }
                }
              }
              else if (*(_WORD *)(v22 + 1) == 28793 && *(_WORD *)(v22 + 3) == 28517 && *(_BYTE *)(v22 + 5) == 102)
              {
                v354 = (_BYTE *)(v22 + 6);
                v355 = *(unsigned __int8 *)(v22 + 6);
                if (v355 != 92 && JSC::typesOfLatin1Characters[v355] >= 4u)
                {
                  *((_QWORD *)a1 + 10) = v354;
                  *((_BYTE *)a1 + 176) = *v354;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 448;
                  v287 = 774;
                  goto LABEL_469;
                }
              }
              goto LABEL_421;
            case 'v':
              if (*(_WORD *)(v22 + 1) == 29281)
              {
                v339 = (_BYTE *)(v22 + 3);
                v340 = *(unsigned __int8 *)(v22 + 3);
                if (v340 != 92 && JSC::typesOfLatin1Characters[v340] >= 4u)
                {
                  *((_QWORD *)a1 + 10) = v339;
                  *((_BYTE *)a1 + 176) = *v339;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 464;
                  v287 = 520;
                  goto LABEL_469;
                }
              }
              else if (*(_WORD *)v22 == 28534 && *(_WORD *)(v22 + 2) == 25705)
              {
                v364 = (_BYTE *)(v22 + 4);
                v365 = *(unsigned __int8 *)(v22 + 4);
                if (v365 != 92 && JSC::typesOfLatin1Characters[v365] >= 4u)
                {
                  *((_QWORD *)a1 + 10) = v364;
                  *((_BYTE *)a1 + 176) = *v364;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 472;
                  v287 = 775;
                  goto LABEL_469;
                }
              }
              goto LABEL_421;
            default:
              v250 = *(unsigned __int16 *)v22;
              if (v250 == 25970)
              {
                if (*(_WORD *)(v22 + 2) != 30068)
                  goto LABEL_421;
                if (*(_WORD *)(v22 + 4) != 28274)
                  goto LABEL_421;
                v325 = (_BYTE *)(v22 + 6);
                v326 = *(unsigned __int8 *)(v22 + 6);
                if (v326 == 92 || JSC::typesOfLatin1Characters[v326] < 4u)
                  goto LABEL_421;
                *((_QWORD *)a1 + 10) = v325;
                *((_BYTE *)a1 + 176) = *v325;
                v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 384;
                v287 = 524;
              }
              else if (v249 == 110)
              {
                if (v250 == 30062 && *(_WORD *)(v22 + 2) == 27756)
                {
                  v366 = (_BYTE *)(v22 + 4);
                  v367 = *(unsigned __int8 *)(v22 + 4);
                  if (v367 == 92 || JSC::typesOfLatin1Characters[v367] < 4u)
                    goto LABEL_421;
                  *((_QWORD *)a1 + 10) = v366;
                  *((_BYTE *)a1 + 176) = *v366;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 344;
                  v287 = 512;
                }
                else
                {
                  if (*(_WORD *)(v22 + 1) != 30565)
                    goto LABEL_421;
                  v323 = (_BYTE *)(v22 + 3);
                  v324 = *(unsigned __int8 *)(v22 + 3);
                  if (v324 == 92 || JSC::typesOfLatin1Characters[v324] < 4u)
                    goto LABEL_421;
                  *((_QWORD *)a1 + 10) = v323;
                  *((_BYTE *)a1 + 176) = *v323;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 336;
                  v287 = 519;
                }
              }
              else
              {
                v251 = v250 >> 8;
                if (v249 == 101)
                {
                  if (v250 == 27749)
                  {
                    v380 = *(unsigned __int16 *)(v22 + 2);
                    if (v380 == 25971)
                    {
                      v399 = (_BYTE *)(v22 + 4);
                      v400 = *(unsigned __int8 *)(v22 + 4);
                      if (v400 == 92 || JSC::typesOfLatin1Characters[v400] < 4u)
                        goto LABEL_421;
                      *((_QWORD *)a1 + 10) = v399;
                      *((_BYTE *)a1 + 176) = *v399;
                      v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 216;
                      v287 = 538;
                      goto LABEL_469;
                    }
                    if (v251 != 120)
                      goto LABEL_421;
                  }
                  else
                  {
                    if (v251 != 120)
                    {
                      if (v250 != 28261)
                        goto LABEL_421;
                      if (*(_WORD *)(v22 + 2) != 28021)
                        goto LABEL_421;
                      v327 = (_BYTE *)(v22 + 4);
                      v328 = *(unsigned __int8 *)(v22 + 4);
                      if (v328 == 92 || JSC::typesOfLatin1Characters[v328] < 4u)
                        goto LABEL_421;
                      *((_QWORD *)a1 + 10) = v327;
                      *((_BYTE *)a1 + 176) = *v327;
                      v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 224;
                      v287 = 531;
                      goto LABEL_469;
                    }
                    v380 = *(unsigned __int16 *)(v22 + 2);
                  }
                  if (v380 == 28528)
                  {
                    if (*(_WORD *)(v22 + 4) != 29810)
                      goto LABEL_421;
                    v436 = (_BYTE *)(v22 + 6);
                    v437 = *(unsigned __int8 *)(v22 + 6);
                    if (v437 == 92 || JSC::typesOfLatin1Characters[v437] < 4u)
                      goto LABEL_421;
                    *((_QWORD *)a1 + 10) = v436;
                    *((_BYTE *)a1 + 176) = *v436;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 232;
                    v287 = 540;
                  }
                  else
                  {
                    if (v380 != 25972)
                      goto LABEL_421;
                    if (*(_WORD *)(v22 + 4) != 25710)
                      goto LABEL_421;
                    if (*(_BYTE *)(v22 + 6) != 115)
                      goto LABEL_421;
                    v397 = (_BYTE *)(v22 + 7);
                    v398 = *(unsigned __int8 *)(v22 + 7);
                    if (v398 == 92 || JSC::typesOfLatin1Characters[v398] < 4u)
                      goto LABEL_421;
                    *((_QWORD *)a1 + 10) = v397;
                    *((_BYTE *)a1 + 176) = *v397;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 240;
                    v287 = 542;
                  }
                  goto LABEL_469;
                }
                if (v249 == 99)
                {
                  if (v251 == 97)
                  {
                    if (*(_WORD *)(v22 + 2) == 25971)
                    {
                      v378 = (_BYTE *)(v22 + 4);
                      v379 = *(unsigned __int8 *)(v22 + 4);
                      if (v379 == 92 || JSC::typesOfLatin1Characters[v379] < 4u)
                        goto LABEL_421;
                      *((_QWORD *)a1 + 10) = v378;
                      *((_BYTE *)a1 + 176) = *v378;
                      v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 144;
                      v287 = 516;
                    }
                    else
                    {
                      if (*(_WORD *)(v22 + 1) != 29793)
                        goto LABEL_421;
                      if (*(_WORD *)(v22 + 3) != 26723)
                        goto LABEL_421;
                      v418 = (_BYTE *)(v22 + 5);
                      v419 = *(unsigned __int8 *)(v22 + 5);
                      if (v419 == 92 || JSC::typesOfLatin1Characters[v419] < 4u)
                        goto LABEL_421;
                      *((_QWORD *)a1 + 10) = v418;
                      *((_BYTE *)a1 + 176) = *v418;
                      v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 152;
                      v287 = 535;
                    }
                  }
                  else
                  {
                    v329 = *(unsigned __int16 *)(v22 + 1);
                    if (v329 == 28271)
                    {
                      v368 = *(unsigned __int16 *)(v22 + 3);
                      if (v368 == 29811)
                      {
                        v369 = (_BYTE *)(v22 + 5);
                        v370 = *(unsigned __int8 *)(v22 + 5);
                        if (v370 == 92 || JSC::typesOfLatin1Characters[v370] < 4u)
                          goto LABEL_421;
                        *((_QWORD *)a1 + 10) = v369;
                        *((_BYTE *)a1 + 176) = *v369;
                        v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 168;
                        v287 = 521;
                      }
                      else
                      {
                        if (v368 != 26996)
                          goto LABEL_421;
                        if (*(_WORD *)(v22 + 5) != 30062)
                          goto LABEL_421;
                        if (*(_BYTE *)(v22 + 7) != 101)
                          goto LABEL_421;
                        v401 = (_BYTE *)(v22 + 8);
                        v402 = *(unsigned __int8 *)(v22 + 8);
                        if (v402 == 92 || JSC::typesOfLatin1Characters[v402] < 4u)
                          goto LABEL_421;
                        *((_QWORD *)a1 + 10) = v401;
                        *((_BYTE *)a1 + 176) = *v401;
                        v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 176;
                        v287 = 522;
                      }
                    }
                    else
                    {
                      if (v329 != 24940)
                        goto LABEL_421;
                      if (*(_WORD *)(v22 + 3) != 29555)
                        goto LABEL_421;
                      v330 = (_BYTE *)(v22 + 5);
                      v331 = *(unsigned __int8 *)(v22 + 5);
                      if (v331 == 92 || JSC::typesOfLatin1Characters[v331] < 4u)
                        goto LABEL_421;
                      *((_QWORD *)a1 + 10) = v330;
                      *((_BYTE *)a1 + 176) = *v330;
                      v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 160;
                      v287 = 541;
                    }
                  }
                }
                else if (v250 == 29282)
                {
                  if (*(_WORD *)(v22 + 2) != 24933)
                    goto LABEL_421;
                  if (*(_BYTE *)(v22 + 4) != 107)
                    goto LABEL_421;
                  v383 = (_BYTE *)(v22 + 5);
                  v384 = *(unsigned __int8 *)(v22 + 5);
                  if (v384 == 92 || JSC::typesOfLatin1Characters[v384] < 4u)
                    goto LABEL_421;
                  *((_QWORD *)a1 + 10) = v383;
                  *((_BYTE *)a1 + 176) = *v383;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 136;
                  v287 = 515;
                }
                else if (*(_WORD *)v22 == 119)
                {
                  if (*(_WORD *)(v22 + 1) == 26984 && *(_WORD *)(v22 + 3) == 25964)
                  {
                    v434 = (_BYTE *)(v22 + 5);
                    v435 = *(unsigned __int8 *)(v22 + 5);
                    if (v435 == 92 || JSC::typesOfLatin1Characters[v435] < 4u)
                      goto LABEL_421;
                    *((_QWORD *)a1 + 10) = v434;
                    *((_BYTE *)a1 + 176) = *v434;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 480;
                    v287 = 528;
                  }
                  else
                  {
                    if (v250 != 26999)
                      goto LABEL_421;
                    if (*(_WORD *)(v22 + 2) != 26740)
                      goto LABEL_421;
                    v391 = (_BYTE *)(v22 + 4);
                    v392 = *(unsigned __int8 *)(v22 + 4);
                    if (v392 == 92 || JSC::typesOfLatin1Characters[v392] < 4u)
                      goto LABEL_421;
                    *((_QWORD *)a1 + 10) = v391;
                    *((_BYTE *)a1 + 176) = *v391;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 488;
                    v287 = 530;
                  }
                }
                else if (v250 == 30561)
                {
                  if (*(_WORD *)(v22 + 2) != 26977)
                    goto LABEL_421;
                  if (*(_BYTE *)(v22 + 4) != 116)
                    goto LABEL_421;
                  v385 = (_BYTE *)(v22 + 5);
                  v386 = *(unsigned __int8 *)(v22 + 5);
                  if (v386 == 92 || JSC::typesOfLatin1Characters[v386] < 4u)
                    goto LABEL_421;
                  *((_QWORD *)a1 + 10) = v385;
                  *((_BYTE *)a1 + 176) = *v385;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 128;
                  v287 = 546;
                }
                else if (*(_WORD *)v22 == 100)
                {
                  if (v251 == 111)
                  {
                    v381 = (_BYTE *)(v22 + 2);
                    v382 = *(unsigned __int8 *)(v22 + 2);
                    if (v382 == 92 || JSC::typesOfLatin1Characters[v382] < 4u)
                      goto LABEL_421;
                    *((_QWORD *)a1 + 10) = v381;
                    *((_BYTE *)a1 + 176) = *v381;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 208;
                    v287 = 527;
                  }
                  else
                  {
                    if (v251 != 101)
                      goto LABEL_421;
                    v356 = *(unsigned __int16 *)(v22 + 2);
                    switch(v356)
                    {
                      case 25964:
                        if (*(_WORD *)(v22 + 4) != 25972)
                          goto LABEL_421;
                        v443 = (_BYTE *)(v22 + 6);
                        v444 = *(unsigned __int8 *)(v22 + 6);
                        if (v444 == 92 || JSC::typesOfLatin1Characters[v444] < 4u)
                          goto LABEL_421;
                        *((_QWORD *)a1 + 10) = v443;
                        *((_BYTE *)a1 + 176) = *v443;
                        v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 200;
                        v287 = 776;
                        break;
                      case 30050:
                        if (*(_WORD *)(v22 + 4) != 26471)
                          goto LABEL_421;
                        if (*(_WORD *)(v22 + 6) != 29285)
                          goto LABEL_421;
                        v514 = (_BYTE *)(v22 + 8);
                        v515 = *(unsigned __int8 *)(v22 + 8);
                        if (v515 == 92 || JSC::typesOfLatin1Characters[v515] < 4u)
                          goto LABEL_421;
                        *((_QWORD *)a1 + 10) = v514;
                        *((_BYTE *)a1 + 176) = *v514;
                        v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 184;
                        v287 = 537;
                        break;
                      case 24934:
                        if (*(_WORD *)(v22 + 4) != 27765)
                          goto LABEL_421;
                        if (*(_BYTE *)(v22 + 6) != 116)
                          goto LABEL_421;
                        v357 = (_BYTE *)(v22 + 7);
                        v358 = *(unsigned __int8 *)(v22 + 7);
                        if (v358 == 92 || JSC::typesOfLatin1Characters[v358] < 4u)
                          goto LABEL_421;
                        *((_QWORD *)a1 + 10) = v357;
                        *((_BYTE *)a1 + 176) = *v357;
                        v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 192;
                        v287 = 517;
                        break;
                      default:
                        goto LABEL_421;
                    }
                  }
                }
                else if (v250 == 25964)
                {
                  if (*(_BYTE *)(v22 + 2) != 116)
                    goto LABEL_421;
                  v352 = (_BYTE *)(v22 + 3);
                  v353 = *(unsigned __int8 *)(v22 + 3);
                  if (v353 == 92 || JSC::typesOfLatin1Characters[v353] < 4u)
                    goto LABEL_421;
                  *((_QWORD *)a1 + 10) = v352;
                  *((_BYTE *)a1 + 176) = *v352;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 328;
                  v287 = 544;
                }
                else if (*(_WORD *)v22 == 115)
                {
                  v343 = *(unsigned __int16 *)(v22 + 1);
                  if (v343 == 28789)
                  {
                    if (*(_WORD *)(v22 + 3) != 29285)
                      goto LABEL_421;
                    v387 = (_BYTE *)(v22 + 5);
                    v388 = *(unsigned __int8 *)(v22 + 5);
                    if (v388 == 92 || JSC::typesOfLatin1Characters[v388] < 4u)
                      goto LABEL_421;
                    *((_QWORD *)a1 + 10) = v387;
                    *((_BYTE *)a1 + 176) = *v387;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 400;
                    v287 = 543;
                  }
                  else
                  {
                    if (v343 != 26999)
                    {
                      if (v343 == 24948 && *(_WORD *)(v22 + 3) == 26996 && *(_BYTE *)(v22 + 5) == 99)
                      {
                        v344 = (_BYTE *)(v22 + 6);
                        v345 = *(unsigned __int8 *)(v22 + 6);
                        if (v345 != 92 && JSC::typesOfLatin1Characters[v345] >= 4u)
                        {
                          v288 = 0;
                          *((_QWORD *)a1 + 10) = v344;
                          *((_BYTE *)a1 + 176) = *v344;
                          v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 392;
LABEL_587:
                          v287 = 532;
LABEL_470:
                          *v12 = (uint64_t *)v286;
                          if (v288 | a4)
                            v42 = v287;
                          else
                            v42 = 12;
                          goto LABEL_527;
                        }
                      }
LABEL_421:
                      v252 = *v13;
                      v253 = v252 == 64;
                      if (v252 != 64)
                      {
                        if (v252 != 35)
                        {
                          v253 = 0;
                          v254 = 0;
                          v255 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
                          v256 = *v13;
                          goto LABEL_424;
                        }
                        v562 = a4;
                        *v13 = 0;
                        v255 = (unsigned __int8 *)(v22 + 1);
                        *(_QWORD *)v14 = v22 + 1;
                        if (v22 + 1 >= v61)
                        {
                          v256 = 0;
                          v253 = 0;
                          v254 = 0;
                          goto LABEL_975;
                        }
LABEL_974:
                        v256 = *v255;
                        *v13 = v256;
                        v254 = v252 == 64;
LABEL_975:
                        a4 = v562;
                        goto LABEL_424;
                      }
                      if (!*((_BYTE *)a1 + 200))
                      {
                        v253 = 0;
                        v254 = 0;
                        v256 = 0x40u;
                        v255 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
LABEL_424:
                        if (JSC::typesOfLatin1Characters[v256] <= 3u)
                        {
                          v257 = v255 + 1;
                          do
                          {
                            *v13 = 0;
                            *(_QWORD *)v14 = v257;
                            if ((unint64_t)v257 >= v61)
                            {
                              v256 = 0u;
                            }
                            else
                            {
                              v256 = *v257;
                              *v13 = v256;
                            }
                            ++v257;
                          }
                          while (JSC::typesOfLatin1Characters[v256] < 4u);
                          v255 = v257 - 1;
                        }
                        if (v256 == 92)
                        {
                          v42 = JSC::Lexer<unsigned char>::parseIdentifierSlowCase<true>((uint64_t)a1, v12, v11, a4, (unsigned __int8 *)v22);
                          goto LABEL_527;
                        }
                        v16 = (unint64_t)&v255[-v22];
                        v258 = !v254;
                        if (!*((_BYTE *)a1 + 200))
                          v258 = 1;
                        v1315 = v11;
                        v1310 = v254;
                        if ((v258 & 1) == 0)
                        {
                          v420 = a4;
                          v421 = v12;
                          v422 = *((_QWORD *)a1 + 23);
                          v423 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 48);
                          if (v253)
                          {
                            v578 = (_DWORD *)JSC::BuiltinNames::lookUpWellKnownSymbol(v423, v22, v16);
                            *v578 += 2;
                            v579 = (*(_QWORD *)v422)++;
                            v580 = v579 >> 6;
                            v581 = *(unsigned int *)(v422 + 20);
                            if (v579 >> 6 >= v581)
                            {
                              v699 = WTF::fastMalloc((WTF *)0x200);
                              v1324.rlim_cur = v699;
                              v700 = *(unsigned int *)(v422 + 20);
                              if ((_DWORD)v700 == *(_DWORD *)(v422 + 16))
                              {
                                v717 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v422 + 8, v700 + 1, (unint64_t)&v1324);
                                v700 = *(unsigned int *)(v422 + 20);
                                *(_QWORD *)(*(_QWORD *)(v422 + 8) + 8 * v700) = *v717;
                              }
                              else
                              {
                                *(_QWORD *)(*(_QWORD *)(v422 + 8) + 8 * v700) = v699;
                              }
                              v581 = (v700 + 1);
                              *(_DWORD *)(v422 + 20) = v581;
                              v579 = *(_QWORD *)v422 - 1;
                              v580 = v579 >> 6;
                            }
                            if (v580 >= v581)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198860254);
                            }
                            v582 = *(_QWORD *)(v422 + 8);
                            v583 = *(_QWORD *)(v582 + 8 * v580);
                            v430 = v579 & 0x3F;
                            *(_QWORD *)(v583 + 8 * v430) = v578;
                            v584 = v579 >> 6;
                            if (v584 >= v581)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19886025CLL);
                            }
                            v432 = (_QWORD *)(v582 + 8 * v584);
                            v12 = v421;
                            LOBYTE(a4) = v420;
                          }
                          else
                          {
                            v424 = (_DWORD *)JSC::BuiltinNames::lookUpPrivateName(v423, v22, v16);
                            *v424 += 2;
                            v425 = (*(_QWORD *)v422)++;
                            v426 = v425 >> 6;
                            v427 = *(unsigned int *)(v422 + 20);
                            if (v425 >> 6 >= v427)
                            {
                              v618 = WTF::fastMalloc((WTF *)0x200);
                              v1324.rlim_cur = v618;
                              v619 = *(unsigned int *)(v422 + 20);
                              if ((_DWORD)v619 == *(_DWORD *)(v422 + 16))
                              {
                                v620 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v422 + 8, v619 + 1, (unint64_t)&v1324);
                                v619 = *(unsigned int *)(v422 + 20);
                                *(_QWORD *)(*(_QWORD *)(v422 + 8) + 8 * v619) = *v620;
                              }
                              else
                              {
                                *(_QWORD *)(*(_QWORD *)(v422 + 8) + 8 * v619) = v618;
                              }
                              v427 = (v619 + 1);
                              *(_DWORD *)(v422 + 20) = v427;
                              v425 = *(_QWORD *)v422 - 1;
                              v426 = v425 >> 6;
                            }
                            if (v426 >= v427)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19886015CLL);
                            }
                            v428 = *(_QWORD *)(v422 + 8);
                            v429 = *(_QWORD *)(v428 + 8 * v426);
                            v430 = v425 & 0x3F;
                            *(_QWORD *)(v429 + 8 * v430) = v424;
                            v431 = v425 >> 6;
                            if (v431 >= v427)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198860164);
                            }
                            v12 = v421;
                            LOBYTE(a4) = v420;
                            v432 = (_QWORD *)(v428 + 8 * v431);
                          }
                          v17 = *v432 + 8 * v430;
                          goto LABEL_522;
                        }
                        v259 = *((_QWORD *)a1 + 24);
                        if (v255 == (unsigned __int8 *)v22)
                        {
                          v17 = *(_QWORD *)(v259 + 41952) + 8;
                          goto LABEL_522;
                        }
                        v14 = *((_QWORD *)a1 + 23);
                        v260 = *(unsigned __int8 *)v22;
                        if (*(char *)v22 < 0)
                        {
                          v472 = a4;
                          v473 = v12;
                          if (v16 == 1)
                          {
                            if (*(_BYTE *)(v259 + 44265))
                            {
                              v604 = *(_QWORD *)(v259 + 8 * v260 + 42216);
                              v481 = *(WTF::StringImpl **)(v604 + 8);
                              if ((v481 & 1) != 0)
                                v605 = 0;
                              else
                                v605 = *(_DWORD **)(v604 + 8);
                              *v605 += 2;
                            }
                            else
                            {
                              LOBYTE(v1320[0]) = *(_BYTE *)v22;
                              WTF::AtomStringImpl::add((uint64_t)v1320, 1uLL, a4, (uint64_t)v12, a6, a7, a8, &v1324);
                              v481 = (WTF::StringImpl *)v1324.rlim_cur;
                            }
                          }
                          else
                          {
                            WTF::AtomStringImpl::add(v22, v16, a4, (uint64_t)v12, a6, a7, a8, &v1324);
                            v481 = (WTF::StringImpl *)v1324.rlim_cur;
                            v482 = *(_DWORD *)v1324.rlim_cur;
                            *(_DWORD *)v1324.rlim_cur += 2;
                            if (v482)
                            {
                              *(_DWORD *)v481 = v482;
                            }
                            else
                            {
                              WTF::StringImpl::~StringImpl(v481, v474, v475, v476, v477, v478, v479, v480);
                              WTF::fastFree(v566, v567, v568, v569, v570, v571, v572, v573);
                            }
                          }
                          v483 = (*(_QWORD *)v14)++;
                          v484 = v483 >> 6;
                          v485 = *(unsigned int *)(v14 + 20);
                          if (v483 >> 6 >= v485)
                          {
                            v625 = WTF::fastMalloc((WTF *)0x200);
                            v1324.rlim_cur = v625;
                            v626 = *(unsigned int *)(v14 + 20);
                            if ((_DWORD)v626 == *(_DWORD *)(v14 + 16))
                            {
                              v652 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 8, v626 + 1, (unint64_t)&v1324);
                              v626 = *(unsigned int *)(v14 + 20);
                              *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v626) = *v652;
                            }
                            else
                            {
                              *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v626) = v625;
                            }
                            v485 = (v626 + 1);
                            *(_DWORD *)(v14 + 20) = v485;
                            v483 = *(_QWORD *)v14 - 1;
                            v484 = v483 >> 6;
                          }
                          if (v484 >= v485)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1988601A4);
                          }
                          v486 = *(_QWORD *)(v14 + 8);
                          v487 = *(_QWORD *)(v486 + 8 * v484);
                          v488 = v483 & 0x3F;
                          *(_QWORD *)(v487 + 8 * v488) = v481;
                          v489 = v483 >> 6;
                          if (v489 >= v485)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1988601ACLL);
                          }
                          v17 = *(_QWORD *)(v486 + 8 * v489) + 8 * v488;
                          v12 = v473;
                          LOBYTE(a4) = v472;
                          goto LABEL_522;
                        }
                        if (v16 == 1)
                        {
                          stackaddr_np = v14 + 24;
                          v17 = *(_QWORD *)(v14 + 24 + 8 * v260);
                          if (!v17)
                          {
                            if (*(_BYTE *)(v259 + 44265))
                            {
                              v261 = *(_QWORD *)(v259 + 8 * v260 + 42216);
                              v17 = *(_QWORD *)(v261 + 8);
                              if ((v17 & 1) != 0)
                                v262 = 0;
                              else
                                v262 = *(_DWORD **)(v261 + 8);
                              *v262 += 2;
                            }
                            else
                            {
                              LOBYTE(v1320[0]) = *(_BYTE *)v22;
                              v16 = (unint64_t)v12;
                              v519 = a4;
                              WTF::AtomStringImpl::add((uint64_t)v1320, 1uLL, a4, (uint64_t)v12, a6, a7, a8, &v1324);
                              a4 = v519;
                              v12 = (uint64_t **)v16;
                              v17 = v1324.rlim_cur;
                            }
                            v263 = (*(_QWORD *)v14)++;
                            v264 = v263 >> 6;
                            v265 = *(unsigned int *)(v14 + 20);
                            if (v263 >> 6 >= v265)
                            {
                              v1305 = a4;
                              v13 = (unsigned __int8 *)v12;
                              v16 = v14 + 8;
                              v393 = WTF::fastMalloc((WTF *)0x200);
                              v1324.rlim_cur = v393;
                              v394 = *(unsigned int *)(v14 + 20);
                              if ((_DWORD)v394 == *(_DWORD *)(v14 + 16))
                              {
                                v416 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 8, v394 + 1, (unint64_t)&v1324);
                                v394 = *(unsigned int *)(v14 + 20);
                                *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v394) = *v416;
                              }
                              else
                              {
                                *(_QWORD *)(*(_QWORD *)v16 + 8 * v394) = v393;
                              }
                              v265 = (v394 + 1);
                              *(_DWORD *)(v14 + 20) = v265;
                              v263 = *(_QWORD *)v14 - 1;
                              v264 = v263 >> 6;
                              v12 = (uint64_t **)v13;
                              a4 = v1305;
                            }
                            if (v264 >= v265)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198860104);
                            }
                            v266 = *(_QWORD *)(v14 + 8);
                            v267 = *(_QWORD *)(v266 + 8 * v264);
                            v268 = v263 & 0x3F;
                            *(_QWORD *)(v267 + 8 * v268) = v17;
                            v30 = v263 >> 6;
                            if (v30 >= v265)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19886010CLL);
                            }
                            v61 = *(char *)v22;
                            if ((v61 & 0x80000000) != 0)
                              goto LABEL_2008;
                            v269 = 8 * v30;
                            v270 = 8 * v268;
                            *(_QWORD *)(stackaddr_np + 8 * *(unsigned __int8 *)v22) = *(_QWORD *)(v266 + v269) + v270;
                            goto LABEL_521;
                          }
LABEL_522:
                          *v12 = (uint64_t *)v17;
                          if (v252 == 35)
                            v316 = 13;
                          else
                            v316 = 12;
                          if (v248 > 10)
                            goto LABEL_526;
                          if (((v1315 | v1310) & 1) != 0)
                            goto LABEL_526;
                          v403 = *(_QWORD *)v17;
                          if (!*(_QWORD *)v17)
                            goto LABEL_526;
                          v404 = *(unsigned int *)(v403 + 16);
                          if ((v404 & 0x20) != 0)
                            goto LABEL_526;
                          v405 = (v404 >> 8) & 0x7F;
                          v406 = JSC::mainTableIndex[2 * v405];
                          if (v406 == 0xFFFF)
                            goto LABEL_526;
                          v407 = a4;
                          while (1)
                          {
                            v408 = (__int16)v406;
                            v409 = (unint64_t *)&(&JSC::mainTableValues)[5 * (__int16)v406];
                            v410 = v409[1];
                            if (v410)
                            {
                              if (WTF::equalInternal<unsigned char>(v403, *v409, v410 - 1))
                                break;
                            }
                            LODWORD(v405) = (__int16)JSC::mainTableIndex[2 * (int)v405 + 1];
                            if ((_DWORD)v405 == -1)
                              goto LABEL_526;
                            LOWORD(v406) = JSC::mainTableIndex[2 * (int)v405];
                          }
                          v42 = LODWORD((&JSC::mainTableValues)[5 * v408 + 3]);
                          if ((_DWORD)v42 == 532 && (v407 & 1) == 0)
LABEL_526:
                            v42 = v316;
                          goto LABEL_527;
                        }
                        v17 = *(_QWORD *)(v14 + 1048 + 8 * v260);
                        if (v17)
                        {
                          stackaddr_np = (uint64_t)v12;
                          v13 = (unsigned __int8 *)v248;
                          v271 = a4;
                          v272 = WTF::equalInternal<unsigned char>(*(_QWORD *)v17, v22, v16);
                          a4 = v271;
                          v248 = (uint64_t)v13;
                          v12 = (uint64_t **)stackaddr_np;
                          if (v272)
                            goto LABEL_522;
                        }
                        if (!v16)
                        {
                          v16 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
                          v307 = WTF::StringImpl::s_emptyAtomString + 2;
                          WTF::StringImpl::s_emptyAtomString += 2;
                          goto LABEL_514;
                        }
                        v273 = -1640531527;
                        v1320[0] = (WTF::StringImpl *)v22;
                        v1320[1] = (WTF::StringImpl *)v16;
                        v308 = 0;
                        do
                        {
                          v309 = ((v273 + *(unsigned __int8 *)(v22 + v308)) << 16) ^ (*(unsigned __int8 *)(v22 + v308 + 1) << 11) ^ (v273 + *(unsigned __int8 *)(v22 + v308));
                          v273 = v309 + (v309 >> 11);
                          v310 = v308 + 3;
                          v308 += 2;
                        }
                        while (v310 < v16);
                        if ((v16 & 1) != 0)
                          v273 = ((v273 + *(unsigned __int8 *)(v16 + v22 - 1)) ^ ((v273
                                                                                 + *(unsigned __int8 *)(v16 + v22 - 1)) << 11))
                               + (((v273 + *(unsigned __int8 *)(v16 + v22 - 1)) ^ ((v273
                                                                                  + *(unsigned __int8 *)(v16 + v22 - 1)) << 11)) >> 17);
                        v1305 = a4;
                        v1300 = v12;
                        v274 = (v273 ^ (8 * v273)) + ((v273 ^ (8 * v273)) >> 5);
                        v275 = (v274 ^ (4 * v274)) + ((v274 ^ (4 * v274)) >> 15);
                        v276 = (v275 ^ (v275 << 10)) & 0xFFFFFF;
                        if (!v276)
                          v276 = 0x800000;
                        v1321 = v276;
                        v13 = WTF::AtomStringTableLocker::s_stringTableLock;
                        if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                        {
                          __clrex();
                        }
                        else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
                        {
LABEL_458:
                          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                          v279 = *(_QWORD *)(StatusReg + 736);
                          if (v279)
                            goto LABEL_459;
                          __n = StatusReg;
                          v332 = atomic_load(&WTF::initialize(void)::onceKey);
                          if (v332 != -1)
                          {
                            v1324.rlim_cur = (rlim_t)&v1322;
                            v1323 = &v1324;
                            std::__call_once(&WTF::initialize(void)::onceKey, &v1323, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
                          }
                          v333 = WTF::fastMalloc((WTF *)0x68);
                          v279 = v333;
                          *(_OWORD *)v333 = 0u;
                          *(_OWORD *)(v333 + 16) = 0u;
                          *(_OWORD *)(v333 + 32) = 0u;
                          *(_OWORD *)(v333 + 48) = 0u;
                          *(_OWORD *)(v333 + 64) = 0u;
                          *(_OWORD *)(v333 + 80) = 0u;
                          *(_QWORD *)(v333 + 96) = 0;
                          *(_DWORD *)v333 = 1;
                          *(_OWORD *)(v333 + 8) = 0u;
                          v334 = (unint64_t *)(v333 + 8);
                          *(_OWORD *)(v333 + 24) = 0u;
                          do
                          {
                            v335 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
                            v336 = v335 + 1;
                          }
                          while (__stlxr(v336, (unsigned int *)&WTF::ThreadLike::s_uid));
                          *(_DWORD *)(v333 + 48) = v336;
                          *(_QWORD *)(v333 + 52) = 0;
                          *(_QWORD *)(v333 + 68) = 0;
                          *(_QWORD *)(v333 + 60) = 0;
                          *(_DWORD *)(v333 + 76) = 0;
                          *(_QWORD *)(v333 + 88) = 0;
                          *(_QWORD *)(v333 + 96) = 0;
                          v17 = (uint64_t)pthread_self();
                          if (__ldaxr(v334))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1uLL, v334))
                          {
LABEL_568:
                            *(_QWORD *)(v279 + 40) = v17;
                            *(_DWORD *)(v279 + 52) = pthread_mach_thread_np((pthread_t)v17);
                            v338 = __ldxr(v334);
                            if (v338 == 1)
                            {
                              if (!__stlxr(0, v334))
                                goto LABEL_627;
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::WordLock::unlockSlow((WTF::WordLock *)v334);
LABEL_627:
                            stackaddr_np = *(_QWORD *)(v279 + 16);
                            if (!stackaddr_np)
                            {
                              v1295 = pthread_main_np();
                              v17 = (uint64_t)pthread_self();
                              stackaddr_np = (uint64_t)pthread_get_stackaddr_np((pthread_t)v17);
                              if (v1295)
                              {
                                getrlimit(3, &v1324);
                                if (v1324.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                                  stacksize_np = 0x800000;
                                else
                                  stacksize_np = v1324.rlim_cur;
                              }
                              else
                              {
                                stacksize_np = pthread_get_stacksize_np((pthread_t)v17);
                              }
                              *(_QWORD *)(v279 + 16) = stackaddr_np;
                              *(_QWORD *)(v279 + 24) = stackaddr_np - stacksize_np;
                            }
                            *(_QWORD *)(v279 + 80) = stackaddr_np;
                            *(_QWORD *)(v279 + 56) = v279 + 64;
                            v359 = pthread_self();
                            if (pthread_equal(v359, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
                            {
                              v360 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                              if (v360 != -1)
                              {
                                v1324.rlim_cur = (rlim_t)&v1322;
                                v1323 = &v1324;
                                std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v1323, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                              }
                              *(_QWORD *)(v279 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
                            }
                            *(_QWORD *)(__n + 736) = v279;
                            pthread_key_init_np();
LABEL_459:
                            WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v279 + 56), (uint64_t)v1320, a4, (uint64_t)v12, a6, a7, a8, (uint64_t)&v1324);
                            v16 = 16 * *(unsigned int *)v1324.rlim_cur;
                            if (!v1325)
                              *(_DWORD *)v16 += 2;
                            v282 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                            if (v282 == 1)
                            {
                              if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                                goto LABEL_513;
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, (uint64_t)v15, v280, v281, a6, a7, a8);
LABEL_513:
                            v307 = *(_DWORD *)v16;
                            v12 = v1300;
                            a4 = v1305;
LABEL_514:
                            *(_DWORD *)v16 = v307 + 2;
                            if (v307)
                            {
                              *(_DWORD *)v16 = v307;
LABEL_516:
                              v311 = (*(_QWORD *)v14)++;
                              v312 = v311 >> 6;
                              v313 = *(unsigned int *)(v14 + 20);
                              if (v311 >> 6 >= v313)
                              {
                                v1305 = a4;
                                v17 = (uint64_t)v12;
                                stackaddr_np = v14 + 8;
                                v395 = WTF::fastMalloc((WTF *)0x200);
                                v1324.rlim_cur = v395;
                                v396 = *(unsigned int *)(v14 + 20);
                                if ((_DWORD)v396 == *(_DWORD *)(v14 + 16))
                                {
                                  v417 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 8, v396 + 1, (unint64_t)&v1324);
                                  v396 = *(unsigned int *)(v14 + 20);
                                  *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v396) = *v417;
                                }
                                else
                                {
                                  *(_QWORD *)(*(_QWORD *)stackaddr_np + 8 * v396) = v395;
                                }
                                v12 = (uint64_t **)v17;
                                a4 = v1305;
                                v313 = (v396 + 1);
                                *(_DWORD *)(v14 + 20) = v313;
                                v311 = *(_QWORD *)v14 - 1;
                                v312 = v311 >> 6;
                              }
                              if (v312 >= v313)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198860138);
                              }
                              v266 = *(_QWORD *)(v14 + 8);
                              v314 = *(_QWORD *)(v266 + 8 * v312);
                              v315 = v311 & 0x3F;
                              *(_QWORD *)(v314 + 8 * v315) = v16;
                              v30 = v311 >> 6;
                              if (v30 >= v313)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198860140);
                              }
                              v61 = *(char *)v22;
                              if ((v61 & 0x80000000) != 0)
                                goto LABEL_2008;
                              v269 = 8 * v30;
                              v270 = 8 * v315;
                              *(_QWORD *)(v14 + 1048 + 8 * *(unsigned __int8 *)v22) = *(_QWORD *)(v266 + v269) + v270;
LABEL_521:
                              v17 = *(_QWORD *)(v266 + v269) + v270;
                              goto LABEL_522;
                            }
                            v17 = a4;
                            stackaddr_np = (uint64_t)v12;
                            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, (WTF::AtomStringImpl *)a2, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                            v348 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                            if (v348)
                            {
                              if (!(v16 >> 43)
                                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v16 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v16)) & 1) != 0)
                              {
LABEL_591:
                                v349 = *(unsigned int *)(v348 + 8000);
                                if (v349 >= 0x3E7)
                                {
                                  pas_thread_local_cache_append_deallocation_slow(v348, v16, (os_unfair_lock_s *)5, v346, v347, a6, a7, a8);
                                  a4 = v17;
                                }
                                else
                                {
                                  a4 = v17;
                                  *(_QWORD *)(v348 + 8 * v349) = v16 | 0x5000000000000;
                                  *(_DWORD *)(v348 + 8000) = v349 + 1;
                                }
                                v12 = (uint64_t **)stackaddr_np;
                                goto LABEL_516;
                              }
                              if (v16 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v16 >> 24)
                              {
                                v346 = 0;
                              }
                              else
                              {
                                v346 = (*(_DWORD *)((char *)off_1ECF425F8
                                                  + ((((v16 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                  + 24) >> (2 * ((BYTE3(v16) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                if ((_DWORD)v346 == 1)
                                  goto LABEL_591;
                              }
                              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v348, v16, 1, v346, v347, a6, a7, a8);
                            }
                            else
                            {
                              pas_try_deallocate_slow_no_cache(v16, (uint64_t)&bmalloc_heap_config, 1);
                            }
                            v12 = (uint64_t **)stackaddr_np;
                            a4 = v17;
                            goto LABEL_516;
                          }
                          WTF::WordLock::lockSlow((WTF::WordLock *)v334);
                          goto LABEL_568;
                        }
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
                        goto LABEL_458;
                      }
                      *v13 = 0;
                      v255 = (unsigned __int8 *)(v22 + 1);
                      *(_QWORD *)v14 = v22 + 1;
                      if (v22 + 1 >= v61)
                      {
                        v256 = 0u;
                      }
                      else
                      {
                        v256 = *v255;
                        *v13 = v256;
                        if (v256 == 64)
                        {
                          v562 = a4;
                          *v13 = 0;
                          v255 = (unsigned __int8 *)(v22 + 2);
                          *(_QWORD *)v14 = v22 + 2;
                          if (v22 + 2 >= v61)
                          {
                            v256 = 0;
                            v253 = 1;
                            v22 += 2;
                            v254 = 1;
                            goto LABEL_975;
                          }
                          v22 += 2;
                          goto LABEL_974;
                        }
                      }
                      v253 = 0;
                      v254 = 1;
                      ++v22;
                      goto LABEL_424;
                    }
                    if (*(_WORD *)(v22 + 3) != 25460)
                      goto LABEL_421;
                    if (*(_BYTE *)(v22 + 5) != 104)
                      goto LABEL_421;
                    v504 = (_BYTE *)(v22 + 6);
                    v505 = *(unsigned __int8 *)(v22 + 6);
                    if (v505 == 92 || JSC::typesOfLatin1Characters[v505] < 4u)
                      goto LABEL_421;
                    *((_QWORD *)a1 + 10) = v504;
                    *((_BYTE *)a1 + 176) = *v504;
                    v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 408;
                    v287 = 529;
                  }
                }
                else
                {
                  if (v250 != 27001)
                  {
                    if (*(_WORD *)v22 != 112)
                      goto LABEL_421;
                    v371 = *(unsigned __int16 *)(v22 + 1);
                    if (v371 == 25441)
                    {
                      if (*(_WORD *)(v22 + 3) == 24939 && *(_WORD *)(v22 + 5) == 25959)
                      {
                        v446 = (_BYTE *)(v22 + 7);
                        v447 = *(unsigned __int8 *)(v22 + 7);
                        if (v447 != 92 && JSC::typesOfLatin1Characters[v447] >= 4u)
                        {
                          v288 = 0;
                          *((_QWORD *)a1 + 10) = v446;
                          *((_BYTE *)a1 + 176) = *v446;
                          v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 352;
                          goto LABEL_587;
                        }
                      }
                    }
                    else if (*(_WORD *)(v22 + 1) == 114)
                    {
                      v411 = *(unsigned __int16 *)(v22 + 2);
                      if (v411 == 29807)
                      {
                        if (*(_WORD *)(v22 + 4) == 25445
                          && *(_WORD *)(v22 + 5) == 29795
                          && *(_WORD *)(v22 + 7) == 25701)
                        {
                          v448 = (_BYTE *)(v22 + 9);
                          v449 = *(unsigned __int8 *)(v22 + 9);
                          if (v449 != 92 && JSC::typesOfLatin1Characters[v449] >= 4u)
                          {
                            v288 = 0;
                            *((_QWORD *)a1 + 10) = v448;
                            *((_BYTE *)a1 + 176) = *v448;
                            v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 368;
                            goto LABEL_587;
                          }
                        }
                      }
                      else if (v411 == 30313 && *(_WORD *)(v22 + 4) == 29793 && *(_BYTE *)(v22 + 6) == 101)
                      {
                        v412 = (_BYTE *)(v22 + 7);
                        v413 = *(unsigned __int8 *)(v22 + 7);
                        if (v413 != 92 && JSC::typesOfLatin1Characters[v413] >= 4u)
                        {
                          v288 = 0;
                          *((_QWORD *)a1 + 10) = v412;
                          *((_BYTE *)a1 + 176) = *v412;
                          v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 360;
                          goto LABEL_587;
                        }
                      }
                    }
                    else if (v371 == 25205 && *(_WORD *)(v22 + 3) == 26988 && *(_BYTE *)(v22 + 5) == 99)
                    {
                      v372 = (_BYTE *)(v22 + 6);
                      v373 = *(unsigned __int8 *)(v22 + 6);
                      if (v373 != 92 && JSC::typesOfLatin1Characters[v373] >= 4u)
                      {
                        v288 = 0;
                        *((_QWORD *)a1 + 10) = v372;
                        *((_BYTE *)a1 + 176) = *v372;
                        v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 376;
                        goto LABEL_587;
                      }
                    }
                    goto LABEL_421;
                  }
                  if (*(_WORD *)(v22 + 2) != 27749)
                    goto LABEL_421;
                  if (*(_BYTE *)(v22 + 4) != 100)
                    goto LABEL_421;
                  v389 = (_BYTE *)(v22 + 5);
                  v390 = *(unsigned __int8 *)(v22 + 5);
                  if (v390 == 92 || JSC::typesOfLatin1Characters[v390] < 4u)
                    goto LABEL_421;
                  *((_QWORD *)a1 + 10) = v389;
                  *((_BYTE *)a1 + 176) = *v389;
                  v286 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 496;
                  v287 = 545;
                }
              }
LABEL_469:
              v288 = 1;
              goto LABEL_470;
          }
        }
        stackaddr_np = v61 - v22;
        LODWORD(v16) = v11;
        v1305 = a4;
        v17 = (uint64_t)v12;
        if (v11 & 1 | ((uint64_t)(v61 - v22) < 11))
          goto LABEL_474;
        v803 = *(unsigned __int8 *)v22;
        if (v803 > 0x73)
        {
          if (v803 == 118)
          {
            if (*(_WORD *)(v22 + 1) == 29281)
            {
              v805 = (unsigned __int8 *)(v22 + 3);
              v847 = *(unsigned __int8 *)(v22 + 3);
              if (v847 == 92 || JSC::typesOfLatin1Characters[v847] <= 3u)
                goto LABEL_474;
              v807 = 520;
            }
            else
            {
              if (*(_WORD *)v22 != 28534)
                goto LABEL_474;
              if (*(_WORD *)(v22 + 2) != 25705)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 4);
              v859 = *(unsigned __int8 *)(v22 + 4);
              if (v859 == 92 || JSC::typesOfLatin1Characters[v859] <= 3u)
                goto LABEL_474;
              v807 = 775;
            }
            goto LABEL_1382;
          }
          if (v803 == 116)
          {
            v835 = *(unsigned __int8 *)(v22 + 1);
            if (v835 == 114)
            {
              v863 = *(unsigned __int16 *)(v22 + 2);
              if (v863 == 25973)
              {
                v805 = (unsigned __int8 *)(v22 + 4);
                v864 = *(unsigned __int8 *)(v22 + 4);
                if (v864 == 92 || JSC::typesOfLatin1Characters[v864] <= 3u)
                  goto LABEL_474;
                v807 = 513;
              }
              else
              {
                if (*(_WORD *)(v22 + 2) != 121)
                  goto LABEL_474;
                v893 = v863 >> 8;
                if ((_DWORD)v893 == 92 || JSC::typesOfLatin1Characters[v893] < 4u)
                  goto LABEL_474;
                v805 = (unsigned __int8 *)(v22 + 3);
                v807 = 534;
              }
            }
            else if (v835 == 104)
            {
              if (*(_WORD *)(v22 + 2) == 29545)
              {
                v805 = (unsigned __int8 *)(v22 + 4);
                v836 = *(unsigned __int8 *)(v22 + 4);
                if (v836 == 92 || JSC::typesOfLatin1Characters[v836] <= 3u)
                  goto LABEL_474;
                v807 = 526;
              }
              else
              {
                if (*(_WORD *)(v22 + 1) != 29288)
                  goto LABEL_474;
                if (*(_WORD *)(v22 + 3) != 30575)
                  goto LABEL_474;
                v805 = (unsigned __int8 *)(v22 + 5);
                v891 = *(unsigned __int8 *)(v22 + 5);
                if (v891 == 92 || JSC::typesOfLatin1Characters[v891] <= 3u)
                  goto LABEL_474;
                v807 = 533;
              }
            }
            else
            {
              if (*(_WORD *)(v22 + 1) != 28793)
                goto LABEL_474;
              if (*(_WORD *)(v22 + 3) != 28517)
                goto LABEL_474;
              if (*(_BYTE *)(v22 + 5) != 102)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 6);
              v865 = *(unsigned __int8 *)(v22 + 6);
              if (v865 == 92 || JSC::typesOfLatin1Characters[v865] <= 3u)
                goto LABEL_474;
              v807 = 774;
            }
            goto LABEL_1382;
          }
        }
        else
        {
          if (v803 == 102)
          {
            v845 = *(unsigned __int16 *)(v22 + 1);
            if (v845 <= 0x726E)
            {
              switch(v845)
              {
                case 0x6E75u:
                  if (*(_WORD *)(v22 + 3) != 29795)
                    goto LABEL_474;
                  if (*(_WORD *)(v22 + 4) != 26996)
                    goto LABEL_474;
                  if (*(_WORD *)(v22 + 6) != 28271)
                    goto LABEL_474;
                  v805 = (unsigned __int8 *)(v22 + 8);
                  v886 = *(unsigned __int8 *)(v22 + 8);
                  if (v886 == 92 || JSC::typesOfLatin1Characters[v886] <= 3u)
                    goto LABEL_474;
                  v807 = 523;
                  break;
                case 0x6C61u:
                  if (*(_WORD *)(v22 + 3) != 25971)
                    goto LABEL_474;
                  v805 = (unsigned __int8 *)(v22 + 5);
                  v963 = *(unsigned __int8 *)(v22 + 5);
                  if (v963 == 92 || JSC::typesOfLatin1Characters[v963] <= 3u)
                    goto LABEL_474;
                  v807 = 514;
                  break;
                case 0x6E69u:
                  if (*(_WORD *)(v22 + 3) != 27745)
                    goto LABEL_474;
                  if (*(_WORD *)(v22 + 5) != 31084)
                    goto LABEL_474;
                  v805 = (unsigned __int8 *)(v22 + 7);
                  v860 = *(unsigned __int8 *)(v22 + 7);
                  if (v860 == 92 || JSC::typesOfLatin1Characters[v860] <= 3u)
                    goto LABEL_474;
                  v807 = 536;
                  break;
                default:
                  goto LABEL_474;
              }
            }
            else
            {
              if (v845 != 29295)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 3);
              v846 = *(unsigned __int8 *)(v22 + 3);
              if (v846 == 92 || JSC::typesOfLatin1Characters[v846] <= 3u)
                goto LABEL_474;
              v807 = 518;
            }
            goto LABEL_1382;
          }
          if (v803 == 105)
          {
            v804 = *(unsigned __int8 *)(v22 + 1);
            if (v804 == 110)
            {
              v805 = (unsigned __int8 *)(v22 + 2);
              v861 = *(unsigned __int8 *)(v22 + 2);
              if (v861 == 92 || JSC::typesOfLatin1Characters[v861] <= 3u)
              {
                v964 = *(unsigned __int16 *)v805;
                if (v964 != 29811)
                {
                  if (v964 == 25972
                    && *(_WORD *)(v22 + 4) == 26226
                    && *(_WORD *)(v22 + 5) == 24934
                    && *(_WORD *)(v22 + 7) == 25955)
                  {
                    v805 = (unsigned __int8 *)(v22 + 9);
                    v892 = *(unsigned __int8 *)(v22 + 9);
                    if (v892 != 92)
                      goto LABEL_2039;
                  }
                  goto LABEL_474;
                }
                if (*(_WORD *)(v22 + 4) != 28257)
                  goto LABEL_474;
                if (*(_WORD *)(v22 + 6) != 25955)
                  goto LABEL_474;
                if (*(_WORD *)(v22 + 8) != 26223)
                  goto LABEL_474;
                v805 = (unsigned __int8 *)(v22 + 10);
                v965 = *(unsigned __int8 *)(v22 + 10);
                if (v965 == 92 || JSC::typesOfLatin1Characters[v965] <= 3u)
                  goto LABEL_474;
                v807 = 139780;
              }
              else
              {
                v807 = 131589;
              }
            }
            else if (v804 == 102)
            {
              v805 = (unsigned __int8 *)(v22 + 2);
              v806 = *(unsigned __int8 *)(v22 + 2);
              if (v806 == 92 || JSC::typesOfLatin1Characters[v806] <= 3u)
                goto LABEL_474;
              v807 = 525;
            }
            else
            {
              if (*(_WORD *)(v22 + 1) != 28781)
                goto LABEL_474;
              if (*(_WORD *)(v22 + 2) != 28528 || *(_WORD *)(v22 + 4) != 29810)
              {
                if (*(_WORD *)(v22 + 3) == 25964
                  && *(_WORD *)(v22 + 5) == 25965
                  && *(_WORD *)(v22 + 6) == 28261
                  && *(_WORD *)(v22 + 8) == 29556)
                {
                  v805 = (unsigned __int8 *)(v22 + 10);
                  v892 = *(unsigned __int8 *)(v22 + 10);
                  if (v892 != 92)
                    goto LABEL_2039;
                }
                goto LABEL_474;
              }
              v805 = (unsigned __int8 *)(v22 + 6);
              v862 = *(unsigned __int8 *)(v22 + 6);
              if (v862 == 92 || JSC::typesOfLatin1Characters[v862] <= 3u)
                goto LABEL_474;
              v807 = 539;
            }
            goto LABEL_1382;
          }
        }
        LODWORD(v30) = *(unsigned __int16 *)v22;
        if ((_DWORD)v30 == 25970)
        {
          if (*(_WORD *)(v22 + 2) != 30068)
            goto LABEL_474;
          if (*(_WORD *)(v22 + 4) != 28274)
            goto LABEL_474;
          v805 = (unsigned __int8 *)(v22 + 6);
          v962 = *(unsigned __int8 *)(v22 + 6);
          if (v962 == 92 || JSC::typesOfLatin1Characters[v962] <= 3u)
            goto LABEL_474;
          v807 = 524;
          goto LABEL_1382;
        }
        v849 = v30 >> 8;
        if (v803 == 99)
        {
          if (v849 == 97)
          {
            if (*(_WORD *)(v22 + 2) == 25971)
            {
              v805 = (unsigned __int8 *)(v22 + 4);
              v882 = *(unsigned __int8 *)(v22 + 4);
              if (v882 == 92 || JSC::typesOfLatin1Characters[v882] <= 3u)
                goto LABEL_474;
              v807 = 516;
            }
            else
            {
              if (*(_WORD *)(v22 + 1) != 29793)
                goto LABEL_474;
              if (*(_WORD *)(v22 + 3) != 26723)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 5);
              v968 = *(unsigned __int8 *)(v22 + 5);
              if (v968 == 92 || JSC::typesOfLatin1Characters[v968] <= 3u)
                goto LABEL_474;
              v807 = 535;
            }
          }
          else
          {
            v966 = *(unsigned __int16 *)(v22 + 1);
            if (v966 == 28271)
            {
              v1032 = *(unsigned __int16 *)(v22 + 3);
              if (v1032 == 29811)
              {
                v805 = (unsigned __int8 *)(v22 + 5);
                v1033 = *(unsigned __int8 *)(v22 + 5);
                if (v1033 == 92 || JSC::typesOfLatin1Characters[v1033] <= 3u)
                  goto LABEL_474;
                v807 = 521;
              }
              else
              {
                if (v1032 != 26996)
                  goto LABEL_474;
                if (*(_WORD *)(v22 + 5) != 30062)
                  goto LABEL_474;
                if (*(_BYTE *)(v22 + 7) != 101)
                  goto LABEL_474;
                v805 = (unsigned __int8 *)(v22 + 8);
                v1131 = *(unsigned __int8 *)(v22 + 8);
                if (v1131 == 92 || JSC::typesOfLatin1Characters[v1131] <= 3u)
                  goto LABEL_474;
                v807 = 522;
              }
            }
            else
            {
              if (v966 != 24940)
                goto LABEL_474;
              if (*(_WORD *)(v22 + 3) != 29555)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 5);
              v967 = *(unsigned __int8 *)(v22 + 5);
              if (v967 == 92 || JSC::typesOfLatin1Characters[v967] <= 3u)
                goto LABEL_474;
              v807 = 541;
            }
          }
          goto LABEL_1382;
        }
        if (v803 != 101)
        {
          if (v803 == 110)
          {
            if ((_DWORD)v30 == 30062 && *(_WORD *)(v22 + 2) == 27756)
            {
              v805 = (unsigned __int8 *)(v22 + 4);
              v850 = *(unsigned __int8 *)(v22 + 4);
              if (v850 == 92 || JSC::typesOfLatin1Characters[v850] <= 3u)
                goto LABEL_474;
              v807 = 512;
            }
            else
            {
              if (*(_WORD *)(v22 + 1) != 30565)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 3);
              v885 = *(unsigned __int8 *)(v22 + 3);
              if (v885 == 92 || JSC::typesOfLatin1Characters[v885] <= 3u)
                goto LABEL_474;
              v807 = 519;
            }
          }
          else if ((_DWORD)v30 == 29282)
          {
            if (*(_WORD *)(v22 + 2) != 24933)
              goto LABEL_474;
            if (*(_BYTE *)(v22 + 4) != 107)
              goto LABEL_474;
            v805 = (unsigned __int8 *)(v22 + 5);
            v971 = *(unsigned __int8 *)(v22 + 5);
            if (v971 == 92 || JSC::typesOfLatin1Characters[v971] <= 3u)
              goto LABEL_474;
            v807 = 515;
          }
          else if (*(_WORD *)v22 == 119)
          {
            if (*(_WORD *)(v22 + 1) == 26984 && *(_WORD *)(v22 + 3) == 25964)
            {
              v805 = (unsigned __int8 *)(v22 + 5);
              v884 = *(unsigned __int8 *)(v22 + 5);
              if (v884 == 92 || JSC::typesOfLatin1Characters[v884] <= 3u)
                goto LABEL_474;
              v807 = 528;
            }
            else
            {
              if ((_DWORD)v30 != 26999)
                goto LABEL_474;
              if (*(_WORD *)(v22 + 2) != 26740)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 4);
              v974 = *(unsigned __int8 *)(v22 + 4);
              if (v974 == 92 || JSC::typesOfLatin1Characters[v974] <= 3u)
                goto LABEL_474;
              v807 = 530;
            }
          }
          else if ((_DWORD)v30 == 30561)
          {
            if (*(_WORD *)(v22 + 2) != 26977)
              goto LABEL_474;
            if (*(_BYTE *)(v22 + 4) != 116)
              goto LABEL_474;
            v805 = (unsigned __int8 *)(v22 + 5);
            v1035 = *(unsigned __int8 *)(v22 + 5);
            if (v1035 == 92 || JSC::typesOfLatin1Characters[v1035] <= 3u)
              goto LABEL_474;
            v807 = 546;
          }
          else if (*(_WORD *)v22 == 100)
          {
            if (v849 == 111)
            {
              v805 = (unsigned __int8 *)(v22 + 2);
              v1037 = *(unsigned __int8 *)(v22 + 2);
              if (v1037 == 92 || JSC::typesOfLatin1Characters[v1037] <= 3u)
                goto LABEL_474;
              v807 = 527;
            }
            else
            {
              if (v849 != 101)
                goto LABEL_474;
              v972 = *(unsigned __int16 *)(v22 + 2);
              switch(v972)
              {
                case 25964:
                  if (*(_WORD *)(v22 + 4) != 25972)
                    goto LABEL_474;
                  v805 = (unsigned __int8 *)(v22 + 6);
                  v1038 = *(unsigned __int8 *)(v22 + 6);
                  if (v1038 == 92 || JSC::typesOfLatin1Characters[v1038] <= 3u)
                    goto LABEL_474;
                  v807 = 776;
                  break;
                case 30050:
                  if (*(_WORD *)(v22 + 4) != 26471)
                    goto LABEL_474;
                  if (*(_WORD *)(v22 + 6) != 29285)
                    goto LABEL_474;
                  v805 = (unsigned __int8 *)(v22 + 8);
                  v1039 = *(unsigned __int8 *)(v22 + 8);
                  if (v1039 == 92 || JSC::typesOfLatin1Characters[v1039] <= 3u)
                    goto LABEL_474;
                  v807 = 537;
                  break;
                case 24934:
                  if (*(_WORD *)(v22 + 4) != 27765)
                    goto LABEL_474;
                  if (*(_BYTE *)(v22 + 6) != 116)
                    goto LABEL_474;
                  v805 = (unsigned __int8 *)(v22 + 7);
                  v973 = *(unsigned __int8 *)(v22 + 7);
                  if (v973 == 92 || JSC::typesOfLatin1Characters[v973] <= 3u)
                    goto LABEL_474;
                  v807 = 517;
                  break;
                default:
                  goto LABEL_474;
              }
            }
          }
          else if ((_DWORD)v30 == 25964)
          {
            if (*(_BYTE *)(v22 + 2) != 116)
              goto LABEL_474;
            v805 = (unsigned __int8 *)(v22 + 3);
            v1036 = *(unsigned __int8 *)(v22 + 3);
            if (v1036 == 92 || JSC::typesOfLatin1Characters[v1036] <= 3u)
              goto LABEL_474;
            v807 = 544;
          }
          else if (*(_WORD *)v22 == 115)
          {
            v1133 = *(unsigned __int16 *)(v22 + 1);
            if (v1133 == 28789)
            {
              if (*(_WORD *)(v22 + 3) != 29285)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 5);
              v1195 = *(unsigned __int8 *)(v22 + 5);
              if (v1195 == 92 || JSC::typesOfLatin1Characters[v1195] <= 3u)
                goto LABEL_474;
              v807 = 543;
            }
            else
            {
              if (v1133 != 26999)
              {
                if (v1133 == 24948 && *(_WORD *)(v22 + 3) == 26996 && *(_BYTE *)(v22 + 5) == 99)
                {
                  v805 = (unsigned __int8 *)(v22 + 6);
                  v892 = *(unsigned __int8 *)(v22 + 6);
                  if (v892 != 92)
                    goto LABEL_2039;
                }
                goto LABEL_474;
              }
              if (*(_WORD *)(v22 + 3) != 25460)
                goto LABEL_474;
              if (*(_BYTE *)(v22 + 5) != 104)
                goto LABEL_474;
              v805 = (unsigned __int8 *)(v22 + 6);
              v1196 = *(unsigned __int8 *)(v22 + 6);
              if (v1196 == 92 || JSC::typesOfLatin1Characters[v1196] <= 3u)
                goto LABEL_474;
              v807 = 529;
            }
          }
          else
          {
            if ((_DWORD)v30 != 27001)
              goto LABEL_2009;
            if (*(_WORD *)(v22 + 2) != 27749)
              goto LABEL_474;
            if (*(_BYTE *)(v22 + 4) != 100)
              goto LABEL_474;
            v805 = (unsigned __int8 *)(v22 + 5);
            v1194 = *(unsigned __int8 *)(v22 + 5);
            if (v1194 == 92 || JSC::typesOfLatin1Characters[v1194] <= 3u)
              goto LABEL_474;
            v807 = 545;
          }
          goto LABEL_1382;
        }
        if ((_DWORD)v30 == 27749)
        {
          v883 = *(unsigned __int16 *)(v22 + 2);
          if (v883 == 25971)
          {
            v805 = (unsigned __int8 *)(v22 + 4);
            v969 = *(unsigned __int8 *)(v22 + 4);
            if (v969 == 92 || JSC::typesOfLatin1Characters[v969] <= 3u)
              goto LABEL_474;
            v807 = 538;
            goto LABEL_1382;
          }
          if (v849 != 120)
            goto LABEL_474;
        }
        else
        {
          if (v849 != 120)
          {
            if ((_DWORD)v30 != 28261)
              goto LABEL_474;
            if (*(_WORD *)(v22 + 2) != 28021)
              goto LABEL_474;
            v805 = (unsigned __int8 *)(v22 + 4);
            v970 = *(unsigned __int8 *)(v22 + 4);
            if (v970 == 92 || JSC::typesOfLatin1Characters[v970] <= 3u)
              goto LABEL_474;
            v807 = 531;
            goto LABEL_1382;
          }
          v883 = *(unsigned __int16 *)(v22 + 2);
        }
        if (v883 == 28528)
        {
          if (*(_WORD *)(v22 + 4) != 29810)
            goto LABEL_474;
          v805 = (unsigned __int8 *)(v22 + 6);
          v1132 = *(unsigned __int8 *)(v22 + 6);
          if (v1132 == 92 || JSC::typesOfLatin1Characters[v1132] <= 3u)
            goto LABEL_474;
          v807 = 540;
        }
        else
        {
          if (v883 != 25972)
            goto LABEL_474;
          if (*(_WORD *)(v22 + 4) != 25710)
            goto LABEL_474;
          if (*(_BYTE *)(v22 + 6) != 115)
            goto LABEL_474;
          v805 = (unsigned __int8 *)(v22 + 7);
          v1034 = *(unsigned __int8 *)(v22 + 7);
          if (v1034 == 92 || JSC::typesOfLatin1Characters[v1034] <= 3u)
            goto LABEL_474;
          v807 = 542;
        }
LABEL_1382:
        v848 = 1;
        goto LABEL_1383;
      case 0x24uLL:
      case 0x41uLL:
      case 0x42uLL:
      case 0x43uLL:
      case 0x44uLL:
      case 0x45uLL:
      case 0x46uLL:
      case 0x47uLL:
      case 0x48uLL:
      case 0x49uLL:
      case 0x4AuLL:
      case 0x4BuLL:
      case 0x4CuLL:
      case 0x4DuLL:
      case 0x4EuLL:
      case 0x4FuLL:
      case 0x50uLL:
      case 0x51uLL:
      case 0x52uLL:
      case 0x53uLL:
      case 0x54uLL:
      case 0x55uLL:
      case 0x56uLL:
      case 0x57uLL:
      case 0x58uLL:
      case 0x59uLL:
      case 0x5AuLL:
      case 0x5CuLL:
      case 0x5FuLL:
      case 0x61uLL:
      case 0x62uLL:
      case 0x63uLL:
      case 0x64uLL:
      case 0x65uLL:
      case 0x66uLL:
      case 0x67uLL:
      case 0x68uLL:
      case 0x69uLL:
      case 0x6AuLL:
      case 0x6BuLL:
      case 0x6CuLL:
      case 0x6DuLL:
      case 0x6EuLL:
      case 0x6FuLL:
      case 0x70uLL:
      case 0x71uLL:
      case 0x72uLL:
      case 0x73uLL:
      case 0x74uLL:
      case 0x75uLL:
      case 0x76uLL:
      case 0x77uLL:
      case 0x78uLL:
      case 0x79uLL:
      case 0x7AuLL:
      case 0xAAuLL:
      case 0xB5uLL:
      case 0xBAuLL:
      case 0xC0uLL:
      case 0xC1uLL:
      case 0xC2uLL:
      case 0xC3uLL:
      case 0xC4uLL:
      case 0xC5uLL:
      case 0xC6uLL:
      case 0xC7uLL:
      case 0xC8uLL:
      case 0xC9uLL:
      case 0xCAuLL:
      case 0xCBuLL:
      case 0xCCuLL:
      case 0xCDuLL:
      case 0xCEuLL:
      case 0xCFuLL:
      case 0xD0uLL:
      case 0xD1uLL:
      case 0xD2uLL:
      case 0xD3uLL:
      case 0xD4uLL:
      case 0xD5uLL:
      case 0xD6uLL:
      case 0xD8uLL:
      case 0xD9uLL:
      case 0xDAuLL:
      case 0xDBuLL:
      case 0xDCuLL:
      case 0xDDuLL:
      case 0xDEuLL:
      case 0xDFuLL:
      case 0xE0uLL:
      case 0xE1uLL:
      case 0xE2uLL:
      case 0xE3uLL:
      case 0xE4uLL:
      case 0xE5uLL:
      case 0xE6uLL:
      case 0xE7uLL:
      case 0xE8uLL:
      case 0xE9uLL:
      case 0xEAuLL:
      case 0xEBuLL:
      case 0xECuLL:
      case 0xEDuLL:
      case 0xEEuLL:
      case 0xEFuLL:
      case 0xF0uLL:
      case 0xF1uLL:
      case 0xF2uLL:
      case 0xF3uLL:
      case 0xF4uLL:
      case 0xF5uLL:
      case 0xF6uLL:
      case 0xF8uLL:
      case 0xF9uLL:
      case 0xFAuLL:
      case 0xFBuLL:
      case 0xFCuLL:
      case 0xFDuLL:
      case 0xFEuLL:
      case 0xFFuLL:
      case 0x100uLL:
      case 0x101uLL:
      case 0x102uLL:
      case 0x103uLL:
      case 0x104uLL:
      case 0x105uLL:
      case 0x106uLL:
      case 0x107uLL:
      case 0x108uLL:
      case 0x109uLL:
      case 0x10AuLL:
      case 0x10BuLL:
      case 0x10CuLL:
      case 0x10DuLL:
      case 0x10EuLL:
      case 0x10FuLL:
      case 0x110uLL:
      case 0x111uLL:
      case 0x112uLL:
      case 0x113uLL:
      case 0x114uLL:
      case 0x115uLL:
      case 0x116uLL:
      case 0x117uLL:
      case 0x118uLL:
      case 0x119uLL:
      case 0x11AuLL:
      case 0x11BuLL:
      case 0x11CuLL:
      case 0x11DuLL:
      case 0x11EuLL:
      case 0x11FuLL:
        goto LABEL_406;
      case 0x25uLL:
        *((_BYTE *)a1 + 176) = 0;
        v454 = *((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v454 + 1;
        v455 = *((_QWORD *)a1 + 12);
        if (v454 + 1 >= v455)
        {
          v42 = 191490;
        }
        else
        {
          v456 = *(unsigned __int8 *)(v454 + 1);
          *v13 = v456;
          if (v456 == 61)
          {
            *v13 = 0;
            *(_QWORD *)v14 = v454 + 2;
            if (v454 + 2 < v455)
              *v13 = *(_BYTE *)(v454 + 2);
            v42 = 29;
          }
          else
          {
            v42 = 191490;
          }
        }
        goto LABEL_527;
      case 0x26uLL:
        v42 = 104448;
        *((_BYTE *)a1 + 176) = 0;
        v140 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v140 + 1;
        v141 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v140 + 1) < v141)
        {
          v142 = v140[1];
          *v13 = v142;
          if (v142 == 38)
          {
            *v13 = 0;
            *(_QWORD *)v14 = v140 + 2;
            if ((unint64_t)(v140 + 2) < v141 && (v143 = v140[2], *v13 = v143, v143 == 61))
            {
              *v13 = 0;
              v801 = v140 + 3;
              *(_QWORD *)v14 = v801;
              if ((unint64_t)v801 < v141)
                *v13 = *v801;
              v42 = 36;
            }
            else
            {
              v42 = 52224;
            }
          }
          else if (v142 == 61)
          {
            *v13 = 0;
            v247 = v140 + 2;
            *(_QWORD *)v14 = v247;
            if ((unint64_t)v247 < v141)
              *v13 = *v247;
            v42 = 31;
          }
        }
        goto LABEL_527;
      case 0x28uLL:
        *(_DWORD *)(a2 + 8) = *a1;
        *(_DWORD *)(a2 + 12) = a1[20] - a1[22];
        *(_DWORD *)(a2 + 16) = a1[28] - a1[22];
        *((_BYTE *)a1 + 176) = 0;
        v44 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v44;
        if ((unint64_t)v44 < *((_QWORD *)a1 + 12))
          *v13 = *v44;
        v42 = 2;
        goto LABEL_527;
      case 0x29uLL:
        *((_BYTE *)a1 + 176) = 0;
        v45 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v45;
        if ((unint64_t)v45 < *((_QWORD *)a1 + 12))
          *v13 = *v45;
        v42 = 3;
        goto LABEL_527;
      case 0x2AuLL:
        v42 = 191488;
        *((_BYTE *)a1 + 176) = 0;
        v194 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v194 + 1;
        v195 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v194 + 1) < v195)
        {
          v196 = v194[1];
          *v13 = v196;
          if (v196 == 61)
          {
            *v13 = 0;
            v490 = v194 + 2;
            *(_QWORD *)v14 = v490;
            if ((unint64_t)v490 < v195)
              *v13 = *v490;
            v42 = 24;
          }
          else if (v196 == 42)
          {
            v42 = 4403200;
            *v13 = 0;
            *(_QWORD *)v14 = v194 + 2;
            if ((unint64_t)(v194 + 2) < v195)
            {
              v197 = v194[2];
              *v13 = v197;
              if (v197 == 61)
              {
                *v13 = 0;
                v198 = v194 + 3;
                *(_QWORD *)v14 = v198;
                if ((unint64_t)v198 < v195)
                  *v13 = *v198;
                v42 = 30;
              }
            }
          }
        }
        goto LABEL_527;
      case 0x2BuLL:
        v42 = 174336;
        *((_BYTE *)a1 + 176) = 0;
        v156 = *((_QWORD *)a1 + 10);
        v157 = (unsigned __int8 *)(v156 + 1);
        *((_QWORD *)a1 + 10) = v156 + 1;
        v158 = *((_QWORD *)a1 + 12);
        v159 = (unsigned __int8 *)(v156 + 2);
        if (v156 + 2 >= v158 || v156 + 1 >= v158)
        {
          if (v156 + 1 >= v158)
            goto LABEL_527;
          v902 = *v157;
          *v13 = v902;
          if (v902 != 43)
          {
            if (v902 != 61)
              goto LABEL_527;
            *v13 = 0;
            v903 = (unsigned __int8 *)(v156 + 2);
            *(_QWORD *)v14 = v903;
            if ((unint64_t)v903 >= v158)
            {
LABEL_235:
              v42 = 22;
              goto LABEL_527;
            }
            v161 = *v903;
LABEL_234:
            *v13 = v161;
            goto LABEL_235;
          }
          *v13 = 0;
          v1011 = (unsigned __int8 *)(v156 + 2);
          *(_QWORD *)v14 = v1011;
          if ((unint64_t)v1011 < v158)
            *v13 = *v1011;
        }
        else
        {
          v160 = *v157;
          *v13 = v160;
          if (v160 != 43)
          {
            if (v160 != 61)
              goto LABEL_527;
            *v13 = 0;
            *(_QWORD *)v14 = v159;
            v161 = *v159;
            goto LABEL_234;
          }
          *((_BYTE *)a1 + 176) = 0;
          *((_QWORD *)a1 + 10) = v159;
          *((_BYTE *)a1 + 176) = *v159;
        }
        if (*((_BYTE *)a1 + 56))
          v42 = 258;
        else
          v42 = 256;
        goto LABEL_527;
      case 0x2CuLL:
        *((_BYTE *)a1 + 176) = 0;
        v43 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v43;
        if ((unint64_t)v43 < *((_QWORD *)a1 + 12))
          *v13 = *v43;
        v42 = 6;
        goto LABEL_527;
      case 0x2DuLL:
        v171 = 174336;
        *((_BYTE *)a1 + 176) = 0;
        v172 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v172 + 1;
        v173 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v172 + 1) >= v173)
          goto LABEL_1494;
        v174 = v172[1];
        *v13 = v174;
        if (v174 == 45)
        {
          *v13 = 0;
          *(_QWORD *)v14 = v172 + 2;
          if ((unint64_t)(v172 + 2) >= v173)
          {
            v433 = 0;
          }
          else
          {
            v433 = v172[2];
            *v13 = v433;
          }
          if ((*((_BYTE *)a1 + 149) || *((_BYTE *)a1 + 56)) && v433 == 62 && !a1[51])
          {
            v1314 = v11;
            v1305 = a4;
            v1299 = v12;
            *v13 = 0;
            v624 = v172 + 3;
            *(_QWORD *)v14 = v624;
            if ((unint64_t)v624 < v173)
              *v13 = *v624;
            goto LABEL_348;
          }
          if (*((_BYTE *)a1 + 56))
            v42 = 259;
          else
            v42 = 257;
          goto LABEL_527;
        }
        if (v174 == 61)
        {
          *v13 = 0;
          v457 = v172 + 2;
          *(_QWORD *)v14 = v457;
          if ((unint64_t)v457 < v173)
            *v13 = *v457;
          v42 = 23;
          goto LABEL_527;
        }
        goto LABEL_266;
      case 0x2EuLL:
        *((_BYTE *)a1 + 176) = 0;
        v39 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v39 + 1;
        v40 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v39 + 1) >= v40)
          goto LABEL_61;
        v41 = v39[1];
        *v13 = v41;
        if ((v41 - 48) >= 0xA)
        {
          if (v41 == 46 && (unint64_t)(v39 + 2) < v40 && v39[2] == 46)
          {
            *v13 = 0;
            v445 = v39 + 3;
            *(_QWORD *)v14 = v445;
            if ((unint64_t)v445 < v40)
              *v13 = *v445;
            v42 = 37;
          }
          else
          {
LABEL_61:
            v42 = 19;
          }
          goto LABEL_527;
        }
        v555 = v12;
        v556 = (unsigned __int8 **)(a1 + 2);
        LOBYTE(v1324.rlim_cur) = 46;
        v557 = a1[5];
        if ((_DWORD)v557 == a1[4])
          *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v557 + 1), (unint64_t)&v1324);
        else
          (*v556)[v557] = 46;
        v558 = a1[5] + 1;
        a1[5] = v558;
        LODWORD(v559) = *((unsigned __int8 *)a1 + 176);
        do
        {
          if ((_DWORD)v559 == 95)
          {
            v559 = *((_QWORD *)a1 + 10) + 1;
            if (v559 >= *((_QWORD *)a1 + 12) || *(unsigned __int8 *)v559 - 48 > 9)
              goto LABEL_1772;
            *v13 = 0;
            *(_QWORD *)v14 = v559;
            LOBYTE(v559) = *(_BYTE *)v559;
            *v13 = v559;
          }
          LOBYTE(v1324.rlim_cur) = v559;
          if (v558 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v558 + 1), (unint64_t)&v1324);
          else
            (*v556)[v558] = v559;
          v558 = a1[5] + 1;
          a1[5] = v558;
          *((_BYTE *)a1 + 176) = 0;
          v559 = *((_QWORD *)a1 + 10) + 1;
          *((_QWORD *)a1 + 10) = v559;
          if (v559 >= *((_QWORD *)a1 + 12))
          {
            LODWORD(v559) = 0;
          }
          else
          {
            LODWORD(v559) = *(unsigned __int8 *)v559;
            *v13 = v559;
          }
        }
        while ((_DWORD)v559 == 95 || (v559 - 48) < 0xA);
        if ((v559 & 0xFFFFFFDF) != 0x45)
          goto LABEL_969;
        JSC::Lexer<unsigned char>::record8((uint64_t)a1, 101);
        *((_BYTE *)a1 + 176) = 0;
        v809 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v809;
        v810 = *((_QWORD *)a1 + 12);
        if ((unint64_t)v809 >= v810)
          goto LABEL_1651;
        v811 = *v809;
        *v13 = v811;
        if (v811 == 45 || v811 == 43)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, v811);
          *((_BYTE *)a1 + 176) = 0;
          v809 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
          *((_QWORD *)a1 + 10) = v809;
          v810 = *((_QWORD *)a1 + 12);
          if ((unint64_t)v809 >= v810)
            goto LABEL_1651;
          v811 = *v809;
          *v13 = v811;
        }
        if ((v811 - 48) > 9)
          goto LABEL_1651;
        do
        {
          if (v811 == 95)
          {
            v949 = v809 + 1;
            if ((unint64_t)v949 >= v810 || *v949 - 48 > 9)
              goto LABEL_1651;
            *v13 = 0;
            *(_QWORD *)v14 = v949;
            LOBYTE(v811) = *v949;
            *v13 = *v949;
          }
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, v811);
          *((_BYTE *)a1 + 176) = 0;
          v809 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
          *((_QWORD *)a1 + 10) = v809;
          v810 = *((_QWORD *)a1 + 12);
          if ((unint64_t)v809 >= v810)
          {
            v811 = 0;
          }
          else
          {
            v811 = *v809;
            *v13 = v811;
          }
        }
        while (v811 == 95 || (v811 - 48) < 0xA);
        v558 = a1[5];
LABEL_969:
        v560 = *v556;
        v1324.rlim_cur = 0;
        fast_float::from_chars_advanced<double,char>(v560, &v560[v558], &v1324.rlim_cur, 0x2E00000005);
        *v555 = v1324.rlim_cur;
        v561 = *v13;
        if (v561 != 92 && JSC::typesOfLatin1Characters[v561] || JSC::typesOfLatin1Characters[v561])
        {
          a1[5] = 0;
          v42 = 10;
          goto LABEL_527;
        }
        goto LABEL_916;
      case 0x2FuLL:
        *((_BYTE *)a1 + 176) = 0;
        v189 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v189 + 1;
        v61 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v189 + 1) >= v61)
          goto LABEL_293;
        v190 = v189[1];
        *v13 = v190;
        if (v190 != 47)
        {
          if (v190 != 42)
          {
            if (v190 == 61)
            {
              *v13 = 0;
              v517 = v189 + 2;
              *(_QWORD *)v14 = v517;
              if ((unint64_t)v517 < v61)
                *v13 = *v517;
              v42 = 25;
              goto LABEL_527;
            }
LABEL_293:
            v181 = 191488;
            goto LABEL_294;
          }
          v468 = v11;
          *((_BYTE *)a1 + 176) = 0;
          v25 = v189 + 2;
          *((_QWORD *)a1 + 10) = v189 + 2;
          if ((unint64_t)(v189 + 2) >= v61)
          {
            v23 = 0;
          }
          else
          {
            v23 = *v25;
            *v13 = v23;
          }
          stackaddr_np = *a1;
          v469 = *((_QWORD *)a1 + 14);
          v470 = *((_QWORD *)a1 + 11);
          LODWORD(v28) = v469;
          v24 = *a1;
          while (1)
          {
            while (1)
            {
              v26 = v25;
              if (v23 == 13)
              {
                v27 = 1;
                goto LABEL_14;
              }
              if (v23 != 42)
                break;
              *v13 = 0;
              ++v25;
              *(_QWORD *)v14 = v26 + 1;
              if ((unint64_t)(v26 + 1) >= v61)
              {
                v23 = 0;
              }
              else
              {
                v23 = *v25;
                *v13 = v23;
              }
              if (v23 == 47)
              {
                v18 = 0;
                *v13 = 0;
                v471 = v26 + 2;
                *(_QWORD *)v14 = v26 + 2;
                v139 = (unint64_t)(v26 + 2) >= v61;
                v11 = v468;
                if (!v139)
                {
                  v18 = *v471;
                  *v13 = v18;
                }
                goto LABEL_3;
              }
            }
            if (v23)
            {
              if (v23 != 10)
                goto LABEL_24;
              v27 = 0;
LABEL_14:
              *((_QWORD *)a1 + 15) = v24 | ((unint64_t)((_DWORD)v26 - v470) << 32);
              a1[32] = (_DWORD)v28 - v470;
              *((_BYTE *)a1 + 176) = 0;
              v28 = v26 + 1;
              *((_QWORD *)a1 + 10) = v26 + 1;
              if ((unint64_t)(v26 + 1) >= v61)
                goto LABEL_10;
              v23 = *v28;
              *v13 = v23;
              if (v27 && v23 == 10)
              {
                *v13 = 0;
                v28 = v26 + 2;
                *(_QWORD *)v14 = v26 + 2;
                if ((unint64_t)(v26 + 2) >= v61)
                {
LABEL_10:
                  v23 = 0;
                  goto LABEL_11;
                }
                v23 = *v28;
                *v13 = v23;
              }
LABEL_11:
              *a1 = ++v24;
              *((_QWORD *)a1 + 14) = v28;
              *((_BYTE *)a1 + 56) = 1;
              v25 = v28;
            }
            else
            {
              if (v25 == (unsigned __int8 *)v61)
              {
                LODWORD(v17) = v469 - v470;
                v669 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v669 = 0x2900000002;
                *(_QWORD *)(v669 + 8) = "Multiline comment was not closed properly";
                *(_DWORD *)(v669 + 16) = 4;
                v670 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                *((_QWORD *)a1 + 19) = v669;
                if (v670)
                {
                  if (*(_DWORD *)v670 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v670, v662, v663, v664, v665, v666, v667, v668);
                    WTF::fastFree(v726, v727, v728, v729, v730, v731, v732, v733);
                  }
                  else
                  {
                    *(_DWORD *)v670 -= 2;
                  }
                }
                *((_BYTE *)a1 + 150) = 1;
                v671 = *((_QWORD *)a1 + 11);
                v225 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) - v671);
                v318 = a1[28] - v671;
                v226 = *a1 | ((_QWORD)v225 << 32);
                v42 = 3145732;
                goto LABEL_530;
              }
LABEL_24:
              v23 = 0;
              *v13 = 0;
              ++v25;
              *(_QWORD *)v14 = v26 + 1;
              if ((unint64_t)(v26 + 1) < v61)
              {
                v23 = *v25;
                *v13 = v23;
              }
            }
          }
        }
        v1314 = v11;
        v1305 = a4;
        v1299 = v12;
        *v13 = 0;
        *(_QWORD *)v14 = v189 + 2;
        if ((unint64_t)(v189 + 2) >= v61)
          goto LABEL_348;
        v218 = v189[2];
        *v13 = v218;
        if (v218 != 35 && v218 != 64)
          goto LABEL_348;
        if ((unint64_t)(v189 + 3) >= v61)
          goto LABEL_348;
        v536 = v189[3];
        if ((v536 > 0x20 || ((1 << v536) & 0x100001A00) == 0) && v536 != 160)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v189 + 4;
        if ((unint64_t)(v189 + 4) >= v61)
          goto LABEL_348;
        v537 = v189[4];
        *v13 = v537;
        if (v537 != 115)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v189 + 5;
        if ((unint64_t)(v189 + 5) >= v61)
          goto LABEL_348;
        v538 = v189[5];
        *v13 = v538;
        if (v538 != 111)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v189 + 6;
        if ((unint64_t)(v189 + 6) >= v61)
          goto LABEL_348;
        v539 = v189[6];
        *v13 = v539;
        if (v539 != 117)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v189 + 7;
        if ((unint64_t)(v189 + 7) >= v61)
          goto LABEL_348;
        v540 = v189[7];
        *v13 = v540;
        if (v540 != 114)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v189 + 8;
        if ((unint64_t)(v189 + 8) >= v61)
          goto LABEL_348;
        v541 = v189[8];
        *v13 = v541;
        if (v541 != 99)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v189 + 9;
        if ((unint64_t)(v189 + 9) >= v61)
          goto LABEL_348;
        v542 = v189[9];
        *v13 = v542;
        if (v542 != 101)
          goto LABEL_348;
        *v13 = 0;
        v543 = v189 + 10;
        *(_QWORD *)v14 = v189 + 10;
        if ((unint64_t)(v189 + 10) >= v61)
          goto LABEL_348;
        v544 = *v543;
        *v13 = v544;
        if (v544 == 85)
        {
          *v13 = 0;
          v543 = v189 + 11;
          *(_QWORD *)v14 = v189 + 11;
          if ((unint64_t)(v189 + 11) >= v61)
            goto LABEL_348;
          v544 = *v543;
          *v13 = v544;
          if (v544 == 82)
          {
            *v13 = 0;
            v543 = v189 + 12;
            *(_QWORD *)v14 = v189 + 12;
            if ((unint64_t)(v189 + 12) >= v61)
              goto LABEL_348;
            v544 = *v543;
            *v13 = v544;
            if (v544 == 76)
            {
              *v13 = 0;
              v543 = v189 + 13;
              *(_QWORD *)v14 = v189 + 13;
              if ((unint64_t)(v189 + 13) >= v61)
                goto LABEL_348;
              v544 = *v543;
              *v13 = v544;
              if (v544 == 61)
              {
                *v13 = 0;
                v31 = v189 + 14;
                *(_QWORD *)v14 = v189 + 14;
                if ((unint64_t)(v189 + 14) >= v61)
                {
                  v29 = 0;
                }
                else
                {
                  v29 = *v31;
                  *v13 = *v31;
                }
                v30 = (unint64_t)(v189 + 15);
                while (v29 <= 0x20u && ((1 << v29) & 0x100001A00) != 0 || v29 == 160)
                {
                  *v13 = 0;
                  *(_QWORD *)v14 = v30;
                  if (v30 < v61)
                  {
                    v29 = *(_BYTE *)v30;
                    *v13 = *(_BYTE *)v30;
                  }
                  else
                  {
                    v29 = 0;
                  }
                  ++v30;
                  ++v31;
                }
                while (1)
                {
                  v684 = v30 - 1;
                  if (v29 - 9 < 5)
                    break;
                  if (v29 > 0x21u)
                  {
                    if (v29 == 34 || v29 == 39 || v29 == 160)
                      break;
                  }
                  else
                  {
                    if (v29 == 32)
                      break;
                    if (!v29 && v684 == v61)
                    {
                      v684 = v61;
                      break;
                    }
                  }
                  *v13 = 0;
                  *(_QWORD *)v14 = v30;
                  if (v30 >= v61)
                  {
                    v29 = 0;
                  }
                  else
                  {
                    v29 = *(_BYTE *)v30;
                    *v13 = *(_BYTE *)v30;
                  }
                  ++v30;
                }
                v15 = (char *)(v684 - (_QWORD)v31);
                if ((uint64_t)(v684 - (_QWORD)v31) < 0)
                  goto LABEL_2008;
                v35 = (unsigned __int8 *)(v684 + 1);
                while (1)
                {
                  if (v29 <= 0x20u)
                  {
                    if (((1 << v29) & 0x100001A00) != 0)
                      goto LABEL_46;
                    if (((1 << v29) & 0x2400) != 0)
                      goto LABEL_1167;
                    if (!v29)
                    {
                      if (v35 - 1 == (unsigned __int8 *)v61)
                      {
LABEL_1167:
                        WTF::String::String((uint64_t *)&v1324, v31, (size_t)v15);
                        v734 = v1324.rlim_cur;
                        goto LABEL_1168;
                      }
LABEL_1172:
                      v734 = 0;
LABEL_1168:
                      v1324.rlim_cur = 0;
                      v674 = (WTF::StringImpl *)*((_QWORD *)a1 + 20);
                      *((_QWORD *)a1 + 20) = v734;
                      if (v674)
                      {
                        v675 = *(_DWORD *)v674 - 2;
                        if (*(_DWORD *)v674 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v674, (WTF::AtomStringImpl *)v31, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                          WTF::fastFree(v735, v736, v737, v738, v739, v740, v741, v742);
                          v674 = (WTF::StringImpl *)v1324.rlim_cur;
                          v1324.rlim_cur = 0;
                          if (v674)
                            goto LABEL_1105;
                        }
                        else
                        {
LABEL_1106:
                          *(_DWORD *)v674 = v675;
                        }
                      }
LABEL_348:
                      stackaddr_np = *a1;
                      v220 = *((_QWORD *)a1 + 10);
                      v219 = *((_QWORD *)a1 + 11);
                      v1309 = *((_QWORD *)a1 + 14);
                      v221 = *((_BYTE *)a1 + 176);
                      v222 = (unsigned __int8 *)(v220 + 1);
                      while (v221 != 13)
                      {
                        if (v221)
                        {
                          if (v221 == 10)
                            break;
                          v904 = (unsigned __int8 *)*((_QWORD *)a1 + 12);
                        }
                        else
                        {
                          v904 = (unsigned __int8 *)*((_QWORD *)a1 + 12);
                          if (v222 - 1 == v904)
                          {
                            LODWORD(v225) = v220 - v219;
                            LODWORD(v17) = v1309 - v219;
                            v226 = stackaddr_np | ((v220 - v219) << 32);
                            v42 = 20;
                            goto LABEL_529;
                          }
                        }
                        *v13 = 0;
                        *(_QWORD *)v14 = v222;
                        if (v222 >= v904)
                        {
                          v221 = 0;
                        }
                        else
                        {
                          v221 = *v222;
                          *v13 = *v222;
                        }
                        ++v222;
                      }
                      JSC::Lexer<unsigned char>::shiftLineTerminator(a1);
                      *((_BYTE *)a1 + 149) = 1;
                      *((_BYTE *)a1 + 56) = 1;
                      v223 = a1[15] - 515;
                      v224 = v223 > 0x12 || ((1 << v223) & 0x40281) == 0;
                      v12 = v1299;
                      a4 = v1305;
                      v15 = JSC::typesOfLatin1Characters;
                      v11 = v1314;
                      if (!v224)
                      {
                        LODWORD(v225) = v220 - v219;
                        LODWORD(v17) = v1309 - v219;
                        v226 = stackaddr_np | ((v220 - v219) << 32);
                        v42 = 17;
LABEL_529:
                        v318 = v17;
                        goto LABEL_530;
                      }
                      goto LABEL_2;
                    }
                  }
                  if (v29 != 160)
                    goto LABEL_1172;
LABEL_46:
                  *v13 = 0;
                  *(_QWORD *)v14 = v35;
                  if ((unint64_t)v35 >= v61)
                  {
                    v29 = 0;
                    ++v35;
                  }
                  else
                  {
                    v36 = *v35++;
                    v29 = v36;
                    *v13 = v36;
                  }
                }
              }
            }
          }
        }
        if (v544 != 77)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 1;
        if ((unint64_t)(v543 + 1) >= v61)
          goto LABEL_348;
        v545 = v543[1];
        *v13 = v545;
        if (v545 != 97)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 2;
        if ((unint64_t)(v543 + 2) >= v61)
          goto LABEL_348;
        v546 = v543[2];
        *v13 = v546;
        if (v546 != 112)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 3;
        if ((unint64_t)(v543 + 3) >= v61)
          goto LABEL_348;
        v547 = v543[3];
        *v13 = v547;
        if (v547 != 112)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 4;
        if ((unint64_t)(v543 + 4) >= v61)
          goto LABEL_348;
        v548 = v543[4];
        *v13 = v548;
        if (v548 != 105)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 5;
        if ((unint64_t)(v543 + 5) >= v61)
          goto LABEL_348;
        v549 = v543[5];
        *v13 = v549;
        if (v549 != 110)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 6;
        if ((unint64_t)(v543 + 6) >= v61)
          goto LABEL_348;
        v550 = v543[6];
        *v13 = v550;
        if (v550 != 103)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 7;
        if ((unint64_t)(v543 + 7) >= v61)
          goto LABEL_348;
        v551 = v543[7];
        *v13 = v551;
        if (v551 != 85)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 8;
        if ((unint64_t)(v543 + 8) >= v61)
          goto LABEL_348;
        v552 = v543[8];
        *v13 = v552;
        if (v552 != 82)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 9;
        if ((unint64_t)(v543 + 9) >= v61)
          goto LABEL_348;
        v553 = v543[9];
        *v13 = v553;
        if (v553 != 76)
          goto LABEL_348;
        *v13 = 0;
        *(_QWORD *)v14 = v543 + 10;
        if ((unint64_t)(v543 + 10) >= v61)
          goto LABEL_348;
        v554 = v543[10];
        *v13 = v554;
        if (v554 != 61)
          goto LABEL_348;
        *v13 = 0;
        v38 = v543 + 11;
        *(_QWORD *)v14 = v543 + 11;
        if ((unint64_t)(v543 + 11) < v61)
        {
LABEL_52:
          LOBYTE(v30) = *v38;
          *v13 = *v38;
        }
        else
        {
          LOBYTE(v30) = 0;
        }
        v22 = 0;
        v37 = v38 + 1;
        while (v30 <= 0x20u && ((1 << v30) & 0x100001A00) != 0 || v30 == 160)
        {
          LOBYTE(v30) = 0;
          *v13 = 0;
          *(_QWORD *)v14 = &v38[++v22];
          ++v37;
          if ((unint64_t)&v38[v22] < v61)
          {
            v38 += v22;
            goto LABEL_52;
          }
        }
        __src = &v38[v22];
        while (1)
        {
          v1311 = v37 - 1;
          if (v30 - 9 < 5)
            goto LABEL_1027;
          if (v30 > 0x21u)
          {
            if (v30 == 34 || v30 == 39 || v30 == 160)
              goto LABEL_1027;
          }
          else
          {
            if (v30 == 32)
              goto LABEL_1027;
            if (!(_BYTE)v30 && v1311 == (unsigned __int8 *)v61)
            {
              v1311 = (unsigned __int8 *)v61;
LABEL_1027:
              __na = v1311 - v38 - v22;
              if ((__na & 0x8000000000000000) == 0)
              {
                v33 = v1311 + 1;
                v32 = v30;
                while (1)
                {
                  if (v32 <= 0x20u)
                  {
                    if (((1 << v32) & 0x100001A00) != 0)
                      goto LABEL_37;
                    if (((1 << v32) & 0x2400) != 0)
                      goto LABEL_1099;
                    if (!v32)
                    {
                      if (v33 - 1 != (unsigned __int8 *)v61)
                      {
LABEL_1103:
                        v672 = 0;
                        goto LABEL_1104;
                      }
LABEL_1099:
                      if (__src == v1311)
                      {
                        v672 = &WTF::StringImpl::s_emptyAtomString;
                        WTF::StringImpl::s_emptyAtomString += 2;
                      }
                      else
                      {
                        if (__na >> 31)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19885FCCCLL);
                        }
                        v672 = (int *)WTF::fastCompactMalloc((WTF *)(__na + 20));
                        v673 = (unsigned __int8 *)(v672 + 5);
                        *v672 = 2;
                        v672[1] = (_DWORD)v1311 - (_DWORD)v38 - v22;
                        *((_QWORD *)v672 + 1) = v672 + 5;
                        v672[4] = 4;
                        if (v1311 - v38 - 1 == v22)
                          *v673 = *__src;
                        else
                          memcpy(v673, __src, __na);
                      }
LABEL_1104:
                      v674 = (WTF::StringImpl *)*((_QWORD *)a1 + 21);
                      *((_QWORD *)a1 + 21) = v672;
                      if (v674)
                      {
LABEL_1105:
                        v675 = *(_DWORD *)v674 - 2;
                        if (*(_DWORD *)v674 != 2)
                          goto LABEL_1106;
                        WTF::StringImpl::~StringImpl(v674, (WTF::AtomStringImpl *)a2, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                        WTF::fastFree(v676, v677, v678, v679, v680, v681, v682, v683);
                      }
                      goto LABEL_348;
                    }
                  }
                  if (v32 != 160)
                    goto LABEL_1103;
LABEL_37:
                  *v13 = 0;
                  *(_QWORD *)v14 = v33;
                  if ((unint64_t)v33 >= v61)
                  {
                    v32 = 0;
                    ++v33;
                  }
                  else
                  {
                    v34 = *v33++;
                    v32 = v34;
                    *v13 = v34;
                  }
                }
              }
LABEL_2008:
              while (2)
              {
                __break(1u);
LABEL_2009:
                if (v30 == 112)
                {
                  v1218 = *(unsigned __int16 *)(v22 + 1);
                  if (v1218 == 25441)
                  {
                    if (*(_WORD *)(v22 + 3) == 24939 && *(_WORD *)(v22 + 5) == 25959)
                    {
                      v805 = (unsigned __int8 *)(v22 + 7);
                      v892 = *(unsigned __int8 *)(v22 + 7);
                      if (v892 != 92)
                        goto LABEL_2039;
                    }
                  }
                  else if (*(_WORD *)(v22 + 1) == 114)
                  {
                    v1219 = *(unsigned __int16 *)(v22 + 2);
                    if (v1219 == 29807)
                    {
                      if (*(_WORD *)(v22 + 4) == 25445 && *(_WORD *)(v22 + 5) == 29795 && *(_WORD *)(v22 + 7) == 25701)
                      {
                        v805 = (unsigned __int8 *)(v22 + 9);
                        v892 = *(unsigned __int8 *)(v22 + 9);
                        if (v892 != 92)
                          goto LABEL_2039;
                      }
                    }
                    else
                    {
                      if (v1219 != 30313)
                        goto LABEL_474;
                      if (*(_WORD *)(v22 + 4) != 29793)
                        goto LABEL_474;
                      if (*(_BYTE *)(v22 + 6) != 101)
                        goto LABEL_474;
                      v805 = (unsigned __int8 *)(v22 + 7);
                      v892 = *(unsigned __int8 *)(v22 + 7);
                      if (v892 == 92)
                        goto LABEL_474;
LABEL_2039:
                      if (v15[v892] > 3u)
                        goto LABEL_2040;
                    }
                  }
                  else if (v1218 == 25205 && *(_WORD *)(v22 + 3) == 26988 && *(_BYTE *)(v22 + 5) == 99)
                  {
                    v805 = (unsigned __int8 *)(v22 + 6);
                    v1221 = *(unsigned __int8 *)(v22 + 6);
                    if (v1221 != 92 && v15[v1221] >= 4u)
                    {
LABEL_2040:
                      v848 = 0;
                      v807 = 532;
LABEL_1383:
                      *(_QWORD *)v14 = v805;
                      *v13 = *v805;
                      if (v848 | v1305)
                        v42 = v807;
                      else
                        v42 = 12;
                      goto LABEL_527;
                    }
                  }
                }
LABEL_474:
                v289 = *v13;
                v290 = v289 == 64;
                if (v289 != 64)
                {
                  if (v289 != 35)
                  {
                    v291 = (_QWORD *)v17;
                    v292 = v15;
                    v290 = 0;
                    v293 = 0;
                    v294 = (unsigned __int8 *)v22;
                    v295 = *v13;
                    goto LABEL_477;
                  }
                  *v13 = 0;
                  v294 = (unsigned __int8 *)(v22 + 1);
                  *(_QWORD *)v14 = v22 + 1;
                  if (v22 + 1 >= v61)
                  {
                    v295 = 0;
                    v290 = 0;
                    v293 = 0;
                  }
                  else
                  {
LABEL_1300:
                    v295 = *v294;
                    *v13 = v295;
                    v293 = v289 == 64;
                  }
                  goto LABEL_1155;
                }
                if (!*((_BYTE *)a1 + 200))
                {
                  v290 = 0;
                  v293 = 0;
                  v295 = 0x40u;
                  v294 = (unsigned __int8 *)v22;
                  goto LABEL_1155;
                }
                *v13 = 0;
                v294 = (unsigned __int8 *)(v22 + 1);
                *(_QWORD *)v14 = v22 + 1;
                if (v22 + 1 >= v61)
                {
                  v295 = 0u;
                }
                else
                {
                  v295 = *v294;
                  *v13 = v295;
                  if (v295 == 64)
                  {
                    *v13 = 0;
                    v294 = (unsigned __int8 *)(v22 + 2);
                    *(_QWORD *)v14 = v22 + 2;
                    if (v22 + 2 < v61)
                    {
                      v22 += 2;
                      goto LABEL_1300;
                    }
                    v295 = 0;
                    v290 = 1;
                    v22 += 2;
                    v293 = 1;
LABEL_1155:
                    v291 = (_QWORD *)v17;
                    v292 = v15;
LABEL_477:
                    if (v292[v295] <= 3u)
                    {
                      v296 = v294 + 1;
                      do
                      {
                        *v13 = 0;
                        *(_QWORD *)v14 = v296;
                        if ((unint64_t)v296 >= v61)
                        {
                          v295 = 0u;
                        }
                        else
                        {
                          v295 = *v296;
                          *v13 = v295;
                        }
                        ++v296;
                      }
                      while (v292[v295] < 4u);
                      v294 = v296 - 1;
                    }
                    if (v295 == 92)
                    {
                      JSC::Lexer<unsigned char>::parseIdentifierSlowCase<false>((uint64_t)a1, v291, v16, (_BYTE *)v22);
                      v42 = v520;
                      goto LABEL_527;
                    }
                    if (!*((_BYTE *)a1 + 200))
                    {
                      v14 = 0;
                      goto LABEL_486;
                    }
                    v13 = &v294[-v22];
                    if (v293)
                    {
                      v703 = *((_QWORD *)a1 + 23);
                      v704 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 48);
                      if (v290)
                      {
                        v823 = (_DWORD *)JSC::BuiltinNames::lookUpWellKnownSymbol(v704, v22, (unint64_t)v13);
                        *v823 += 2;
                        v1324.rlim_cur = (rlim_t)v823;
                        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v703, (uint64_t *)&v1324);
                        v831 = (WTF::StringImpl *)v1324.rlim_cur;
                        v1324.rlim_cur = 0;
                        if (v831)
                        {
                          if (*(_DWORD *)v831 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v831, v824, v825, v826, v827, v828, v829, v830);
                            WTF::fastFree(v851, v852, v853, v854, v855, v856, v857, v858);
                          }
                          else
                          {
                            *(_DWORD *)v831 -= 2;
                          }
                        }
                        v714 = *(_QWORD *)v703 - 1;
                        v715 = v714 >> 6;
                        if (v714 >> 6 >= *(unsigned int *)(v703 + 20))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19885F80CLL);
                        }
                      }
                      else
                      {
                        v705 = (_DWORD *)JSC::BuiltinNames::lookUpPrivateName(v704, v22, (unint64_t)v13);
                        *v705 += 2;
                        v1324.rlim_cur = (rlim_t)v705;
                        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v703, (uint64_t *)&v1324);
                        v713 = (WTF::StringImpl *)v1324.rlim_cur;
                        v1324.rlim_cur = 0;
                        if (v713)
                        {
                          if (*(_DWORD *)v713 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v713, v706, v707, v708, v709, v710, v711, v712);
                            WTF::fastFree(v763, v764, v765, v766, v767, v768, v769, v770);
                          }
                          else
                          {
                            *(_DWORD *)v713 -= 2;
                          }
                        }
                        v714 = *(_QWORD *)v703 - 1;
                        v715 = v714 >> 6;
                        if (v714 >> 6 >= *(unsigned int *)(v703 + 20))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1988603B0);
                        }
                      }
                      v716 = *(_QWORD *)(v703 + 8);
LABEL_1149:
                      v14 = *(_QWORD *)(v716 + 8 * v715) + 8 * (v714 & 0x3F);
                      goto LABEL_1150;
                    }
                    __srcb = (_QWORD *)*((_QWORD *)a1 + 24);
                    if (v294 == (unsigned __int8 *)v22)
                    {
                      v14 = __srcb[5244] + 8;
                      goto LABEL_1150;
                    }
                    v1313 = *((_QWORD *)a1 + 23);
                    if (*(char *)v22 < 0)
                    {
                      JSC::Identifier::fromString((uint64_t)__srcb, (WTF::AtomStringImpl *)v22, (unint64_t)&v294[-v22], a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1313, (uint64_t *)&v1324);
                      v923 = (WTF::StringImpl *)v1324.rlim_cur;
                      v1324.rlim_cur = 0;
                      if (v923)
                      {
                        if (*(_DWORD *)v923 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v923, v916, v917, v918, v919, v920, v921, v922);
                          WTF::fastFree(v1015, v1016, v1017, v1018, v1019, v1020, v1021, v1022);
                        }
                        else
                        {
                          *(_DWORD *)v923 -= 2;
                        }
                      }
                      v714 = *(_QWORD *)v1313 - 1;
                      v715 = v714 >> 6;
                      if (v714 >> 6 >= *(unsigned int *)(v1313 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1988613A8);
                      }
                      v716 = *(_QWORD *)(v1313 + 8);
                      goto LABEL_1149;
                    }
                    v758 = *(unsigned __int8 *)v22;
                    if (v13 == (unsigned __int8 *)1)
                    {
                      v13 = (unsigned __int8 *)(v1313 + 24);
                      v14 = *(_QWORD *)(v1313 + 24 + 8 * v758);
                      v291 = (_QWORD *)v17;
                      if (v14)
                        goto LABEL_486;
                      JSC::Identifier::fromString((uint64_t)__srcb, (WTF::AtomStringImpl *)v22, 1uLL, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1313, (uint64_t *)&v1324);
                      v760 = (WTF::StringImpl *)v1324.rlim_cur;
                      v1324.rlim_cur = 0;
                      if (v760)
                      {
                        if (*(_DWORD *)v760 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v760, v759, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                          WTF::fastFree(v866, v867, v868, v869, v870, v871, v872, v873);
                        }
                        else
                        {
                          *(_DWORD *)v760 -= 2;
                        }
                      }
                      v30 = *(_QWORD *)v1313 - 1;
                      v61 = v30 >> 6;
                      if (v30 >> 6 >= *(unsigned int *)(v1313 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198860428);
                      }
                      if ((*(char *)v22 & 0x80000000) == 0)
                      {
                        v761 = *(_QWORD *)(v1313 + 8);
                        v762 = 8 * (v30 & 0x3F);
                        *(_QWORD *)&v13[8 * *(unsigned __int8 *)v22] = *(_QWORD *)(v761 + 8 * v61) + v762;
                        goto LABEL_1353;
                      }
                    }
                    else
                    {
                      v14 = *(_QWORD *)(v1313 + 1048 + 8 * v758);
                      if (v14)
                      {
                        v832 = WTF::equalInternal<unsigned char>(*(_QWORD *)v14, v22, (uint64_t)&v294[-v22]);
                        v291 = (_QWORD *)v17;
                        if (v832)
                          goto LABEL_486;
                      }
                      JSC::Identifier::fromString((uint64_t)__srcb, (WTF::AtomStringImpl *)v22, (unint64_t)v13, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1313, (uint64_t *)&v1324);
                      v834 = (WTF::StringImpl *)v1324.rlim_cur;
                      v1324.rlim_cur = 0;
                      if (v834)
                      {
                        if (*(_DWORD *)v834 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v834, v833, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                          WTF::fastFree(v874, v875, v876, v877, v878, v879, v880, v881);
                        }
                        else
                        {
                          *(_DWORD *)v834 -= 2;
                        }
                      }
                      v30 = *(_QWORD *)v1313 - 1;
                      v61 = v30 >> 6;
                      if (v30 >> 6 >= *(unsigned int *)(v1313 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198860860);
                      }
                      if ((*(char *)v22 & 0x80000000) == 0)
                      {
                        v761 = *(_QWORD *)(v1313 + 8);
                        v762 = 8 * (v30 & 0x3F);
                        *(_QWORD *)(v1313 + 1048 + 8 * *(unsigned __int8 *)v22) = *(_QWORD *)(v761 + 8 * v61) + v762;
LABEL_1353:
                        v14 = *(_QWORD *)(v761 + 8 * v61) + v762;
LABEL_1150:
                        v291 = (_QWORD *)v17;
LABEL_486:
                        *v291 = v14;
                        if (v289 == 35)
                          v42 = 13;
                        else
                          v42 = 12;
                        if (stackaddr_np <= 10 && ((v16 | v293) & 1) == 0)
                        {
                          v297 = *(_QWORD *)v14;
                          if (*(_QWORD *)v14)
                          {
                            v298 = *(unsigned int *)(v297 + 16);
                            if ((v298 & 0x20) == 0)
                            {
                              v299 = (v298 >> 8) & 0x7F;
                              v300 = JSC::mainTableIndex[2 * v299];
                              if (v300 != 0xFFFF)
                              {
                                while (1)
                                {
                                  v301 = (__int16)v300;
                                  v302 = (unint64_t *)&(&JSC::mainTableValues)[5 * (__int16)v300];
                                  v303 = v302[1];
                                  if (v303)
                                  {
                                    if (WTF::equalInternal<unsigned char>(v297, *v302, v303 - 1))
                                      break;
                                  }
                                  LODWORD(v299) = (__int16)JSC::mainTableIndex[2 * (int)v299 + 1];
                                  if ((_DWORD)v299 == -1)
                                    goto LABEL_527;
                                  LOWORD(v300) = JSC::mainTableIndex[2 * (int)v299];
                                }
                                v905 = (&JSC::mainTableValues)[5 * v301 + 3];
                                v906 = v1305;
                                if (v905 != 532)
                                  v906 = 1;
                                if (v906)
                                  v42 = v905;
                                else
                                  v42 = v42;
                              }
                            }
                          }
                        }
LABEL_527:
                        *((_BYTE *)a1 + 149) = 0;
LABEL_528:
                        stackaddr_np = *a1;
                        v317 = *((_QWORD *)a1 + 11);
                        v225 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) - v317);
                        LODWORD(v17) = a1[28] - v317;
                        v226 = stackaddr_np | ((_QWORD)v225 << 32);
                        goto LABEL_529;
                      }
                    }
                    continue;
                  }
                }
                break;
              }
              v290 = 0;
              v293 = 1;
              ++v22;
              goto LABEL_1155;
            }
          }
          *v13 = 0;
          *(_QWORD *)v14 = v37;
          if ((unint64_t)v37 >= v61)
          {
            LOBYTE(v30) = 0;
          }
          else
          {
            LOBYTE(v30) = *v37;
            *v13 = *v37;
          }
          ++v37;
        }
      case 0x30uLL:
        *((_BYTE *)a1 + 176) = 0;
        v109 = *((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v109 + 1;
        v110 = *((_QWORD *)a1 + 12);
        if (v109 + 1 >= v110)
          goto LABEL_156;
        v111 = *(unsigned __int8 *)(v109 + 1);
        *v13 = v111;
        v112 = v111 | 0x20;
        if ((v111 | 0x20) != 0x78)
        {
          if (v112 == 98)
          {
            v771 = (_BYTE *)(v109 + 2);
            if (v109 + 2 >= v110 || (*v771 & 0xFE) != 0x30)
            {
              v924 = WTF::fastCompactMalloc((WTF *)0x20);
              v932 = v924;
              v933 = 0x1B00000002;
              v934 = "No binary digits after '0b'";
LABEL_2022:
              *(_QWORD *)v924 = v933;
              *(_QWORD *)(v924 + 8) = v934;
              *(_DWORD *)(v924 + 16) = 4;
              v1220 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
              *((_QWORD *)a1 + 19) = v932;
              if (v1220)
              {
                if (*(_DWORD *)v1220 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1220, v925, v926, v927, v928, v929, v930, v931);
                  WTF::fastFree(v1222, v1223, v1224, v1225, v1226, v1227, v1228, v1229);
                }
                else
                {
                  *(_DWORD *)v1220 -= 2;
                }
              }
              v42 = 3145740;
              goto LABEL_1018;
            }
            stackaddr_np = (uint64_t)JSC::typesOfLatin1Characters;
            v772 = (double *)v12;
            v773 = 0;
            *v13 = 0;
            *(_QWORD *)v14 = v771;
            v774 = *v771;
            *v13 = v774;
            for (i = 31; ; --i)
            {
              if (v774 == 95)
              {
                if ((unint64_t)++v771 >= v110 || (*v771 & 0xFE) != 0x30)
                {
LABEL_1798:
                  v216 = 0.0;
                  goto LABEL_1329;
                }
                *v13 = 0;
                *(_QWORD *)v14 = v771;
                v776 = *v771;
              }
              else
              {
                v776 = v774;
              }
              *((_BYTE *)&v1324.rlim_cur + i) = v776;
              *v13 = 0;
              *(_QWORD *)v14 = ++v771;
              if ((unint64_t)v771 >= v110)
              {
                v774 = 0;
              }
              else
              {
                v774 = *v771;
                *v13 = v774;
              }
              v773 = v776 + 2 * v773 - 48;
              v777 = (v774 & 0xFE) == 0x30 || v774 == 95;
              if (!v777 || !i)
                break;
            }
            if (v774 != 110 && v774 != 95 && (v774 - 48) >= 0xA && i)
            {
              v216 = (double)v773;
              goto LABEL_1329;
            }
            if ((int)i <= 31)
            {
              v959 = 31;
              do
              {
                JSC::Lexer<unsigned char>::record8((uint64_t)a1, *((_BYTE *)&v1324.rlim_cur + v959));
                v214 = v959-- > i;
              }
              while (v214);
              v774 = *v13;
            }
            while (1)
            {
              if ((v774 - 48) >= 2)
              {
                if (v774 != 95)
                {
                  if (v774 != 110)
                  {
                    if ((v774 - 48) < 0xA)
                      goto LABEL_1798;
                    v216 = JSC::parseIntOverflow(*((_QWORD *)a1 + 1), a1[5], 2);
LABEL_1329:
                    *v772 = v216;
                    v821 = *v13;
                    v822 = v821 == 92 || JSC::typesOfLatin1Characters[v821] == 0;
                    if (v822 && !JSC::typesOfLatin1Characters[v821])
                    {
LABEL_2021:
                      v924 = WTF::fastCompactMalloc((WTF *)0x20);
                      v932 = v924;
                      v933 = 0x2E00000002;
                      v934 = "No space between binary literal and identifier";
                      goto LABEL_2022;
                    }
LABEL_339:
                    if (v216 == 0.0 && (*(_QWORD *)&v216 & 0x8000000000000000) != 0 || v216 != (double)(uint64_t)v216)
                      v42 = 10;
                    else
                      v42 = 9;
LABEL_199:
                    a1[5] = 0;
                    goto LABEL_527;
                  }
                  v22 = a1[5];
                  v16 = *((_QWORD *)a1 + 24);
                  if ((_DWORD)v22)
                  {
                    v1126 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
                    v1127 = *((_QWORD *)a1 + 23);
                    if (*(char *)v1126 < 0)
                    {
                      JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1127, (uint64_t *)v1320);
                      v1183 = v1320[0];
                      v1320[0] = 0;
                      if (v1183)
                      {
                        if (*(_DWORD *)v1183 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1183, v1176, v1177, v1178, v1179, v1180, v1181, v1182);
                          WTF::fastFree(v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204);
                        }
                        else
                        {
                          *(_DWORD *)v1183 -= 2;
                        }
                      }
                      v1205 = *(_QWORD *)v1127 - 1;
                      if (v1205 >> 6 >= *(unsigned int *)(v1127 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198861BFCLL);
                      }
                      v17 = *(_QWORD *)(*(_QWORD *)(v1127 + 8) + 8 * (v1205 >> 6)) + 8 * (v1205 & 0x3F);
                    }
                    else
                    {
                      v1128 = *(unsigned __int8 *)v1126;
                      if ((_DWORD)v22 == 1)
                      {
                        v14 = v1127 + 24;
                        v17 = *(_QWORD *)(v1127 + 24 + 8 * v1128);
                        if (!v17)
                        {
                          JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
                          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1127, (uint64_t *)v1320);
                          v1130 = v1320[0];
                          v1320[0] = 0;
                          if (v1130)
                          {
                            if (*(_DWORD *)v1130 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1130, v1129, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                              WTF::fastFree(v1186, v1187, v1188, v1189, v1190, v1191, v1192, v1193);
                            }
                            else
                            {
                              *(_DWORD *)v1130 -= 2;
                            }
                          }
                          v30 = *(_QWORD *)v1127 - 1;
                          v61 = v30 >> 6;
                          if (v30 >> 6 >= *(unsigned int *)(v1127 + 20))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19886197CLL);
                          }
                          goto LABEL_2000;
                        }
                      }
                      else
                      {
                        v14 = v1127 + 1048;
                        v17 = *(_QWORD *)(v1127 + 1048 + 8 * v1128);
                        if (!v17 || !WTF::equalInternal<unsigned char>(*(_QWORD *)v17, *((_QWORD *)a1 + 1), a1[5]))
                        {
                          JSC::Identifier::fromString(v16, v1126, v22, a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
                          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1127, (uint64_t *)v1320);
                          v1185 = v1320[0];
                          v1320[0] = 0;
                          if (v1185)
                          {
                            if (*(_DWORD *)v1185 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1185, v1184, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                              WTF::fastFree(v1206, v1207, v1208, v1209, v1210, v1211, v1212, v1213);
                            }
                            else
                            {
                              *(_DWORD *)v1185 -= 2;
                            }
                          }
                          v30 = *(_QWORD *)v1127 - 1;
                          v61 = v30 >> 6;
                          if (v30 >> 6 >= *(unsigned int *)(v1127 + 20))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198861C04);
                          }
LABEL_2000:
                          if (*(char *)v1126 < 0)
                            goto LABEL_2008;
                          v1214 = *(_QWORD *)(v1127 + 8);
                          v1215 = 8 * (v30 & 0x3F);
                          *(_QWORD *)(v14 + 8 * *(unsigned __int8 *)v1126) = *(_QWORD *)(v1214 + 8 * v61) + v1215;
                          v17 = *(_QWORD *)(v1214 + 8 * v61) + v1215;
                        }
                      }
                    }
                  }
                  else
                  {
                    v17 = *(_QWORD *)(v16 + 41952) + 8;
                  }
                  *((_BYTE *)a1 + 176) = 0;
                  v1216 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                  *((_QWORD *)a1 + 10) = v1216;
                  if ((unint64_t)v1216 < *((_QWORD *)a1 + 12))
                    *v13 = *v1216;
                  *(_QWORD *)(a2 + 8) = v17;
                  *(_BYTE *)(a2 + 16) = 2;
                  v1217 = *v13;
                  if ((v1217 == 92 || !JSC::typesOfLatin1Characters[v1217]) && !JSC::typesOfLatin1Characters[v1217])
                    goto LABEL_2021;
LABEL_2007:
                  v42 = 11;
                  goto LABEL_199;
                }
                v960 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                if ((unint64_t)v960 >= *((_QWORD *)a1 + 12) || (*v960 & 0xFE) != 0x30)
                  goto LABEL_1798;
                *v13 = 0;
                *(_QWORD *)v14 = v960;
                LOBYTE(v774) = *v960;
                *v13 = *v960;
              }
              JSC::Lexer<unsigned char>::record8((uint64_t)a1, v774);
              v774 = 0;
              *((_BYTE *)a1 + 176) = 0;
              v961 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
              *((_QWORD *)a1 + 10) = v961;
              if ((unint64_t)v961 < *((_QWORD *)a1 + 12))
              {
                v774 = *v961;
                *v13 = v774;
              }
            }
          }
          if (v112 != 111)
          {
            if (v111 == 95)
            {
              v42 = 3145734;
              v606 = WTF::fastCompactMalloc((WTF *)0x20);
              v614 = v606;
              v615 = 0x2600000002;
              v616 = "Numeric literals may not begin with 0_";
            }
            else
            {
LABEL_156:
              v113 = a1 + 2;
              LOBYTE(v1324.rlim_cur) = 48;
              v114 = a1[5];
              if ((_DWORD)v114 == a1[4])
              {
                v621 = v12;
                v622 = a4;
                v623 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v113, (WTF *)(v114 + 1), (unint64_t)&v1324);
                v15 = JSC::typesOfLatin1Characters;
                a4 = v622;
                v12 = v621;
                *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *v623;
              }
              else
              {
                *(_BYTE *)(*v113 + v114) = 48;
              }
              v115 = a1[5] + 1;
              a1[5] = v115;
              v116 = *((unsigned __int8 *)a1 + 176);
              if (!(_DWORD)a4 || (v116 - 48) > 9)
              {
                if ((v116 & 0xF8) != 0x30)
                {
LABEL_161:
                  v117 = (unsigned __int8 **)(a1 + 2);
                  LODWORD(v118) = a1[5];
                  if ((_DWORD)v118)
                  {
                    LODWORD(v119) = *v13;
                    v125 = v119 - 48;
                    v139 = (_DWORD)v119 != 95 && v125 >= 0xA;
                    v130 = !v139;
                    goto LABEL_183;
                  }
                  LOBYTE(v119) = *((_BYTE *)a1 + 176);
                  v120 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
                  v121 = 9;
                  v122 = *((_QWORD *)a1 + 12);
                  do
                  {
                    v123 = v121;
                    if (v119 == 95)
                    {
                      v134 = JSC::typesOfLatin1Characters;
                      v135 = v12;
                      if ((unint64_t)++v120 >= v122 || *v120 - 58 < 0xFFFFFFF6)
                      {
                        v133 = 0;
                        LODWORD(v118) = 0;
                        goto LABEL_192;
                      }
                      *v13 = 0;
                      *(_QWORD *)v14 = v120;
                      v124 = *v120;
                    }
                    else
                    {
                      v124 = v119;
                    }
                    *((_BYTE *)&v1324.rlim_cur + v121) = v124;
                    *v13 = 0;
                    *(_QWORD *)v14 = ++v120;
                    if ((unint64_t)v120 >= v122)
                    {
                      LODWORD(v119) = 0;
                    }
                    else
                    {
                      LODWORD(v119) = *v120;
                      *v13 = v119;
                    }
                    LODWORD(v118) = 10 * v118 + v124 - 48;
                    --v121;
                    LOBYTE(v125) = v119 - 48;
                    v126 = (v119 - 48) <= 9u || (_DWORD)v119 == 95;
                  }
                  while (v126 && v123);
                  v127 = v123;
                  if (!v123)
                    goto LABEL_177;
                  if (((v119 - 69) > 0x29
                     || ((1 << (v119 - 69)) & 0x20100000001) == 0)
                    && (_DWORD)v119 != 46)
                  {
                    *(double *)v12 = (double)v118;
                    goto LABEL_196;
                  }
                  if ((int)v123 > 9)
                  {
                    LODWORD(v118) = 0;
                  }
                  else
                  {
LABEL_177:
                    LODWORD(v118) = 0;
                    v128 = 9;
                    do
                    {
                      v129 = *((_BYTE *)&v1324.rlim_cur + v128);
                      LOBYTE(v1320[0]) = v129;
                      if ((_DWORD)v118 == a1[4])
                      {
                        v521 = v15;
                        v522 = v12;
                        v523 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v118 + 1), (unint64_t)v1320);
                        v15 = v521;
                        v12 = v522;
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *v523;
                      }
                      else
                      {
                        (*v117)[v118] = v129;
                      }
                      LODWORD(v118) = a1[5] + 1;
                      a1[5] = v118;
                      v214 = v128-- > v127;
                    }
                    while (v214);
                    LODWORD(v119) = *v13;
                    LOBYTE(v125) = v119 - 48;
                  }
                  v130 = 0;
LABEL_183:
                  v131 = (_DWORD)v119 == 95;
                  if (v125 < 0xAu || (_DWORD)v119 == 95)
                  {
                    do
                    {
                      v1291 = v15;
                      v1292 = v12;
                      if (v131)
                      {
                        v1293 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                        if ((unint64_t)v1293 >= *((_QWORD *)a1 + 12))
                          goto LABEL_189;
                        v1294 = *v1293 - 58 < 0xFFFFFFF6 ? 1 : v130;
                        if ((v1294 & 1) != 0)
                          goto LABEL_189;
                        *v13 = 0;
                        *(_QWORD *)v14 = v1293;
                        LOBYTE(v119) = *v1293;
                        *v13 = *v1293;
                      }
                      LOBYTE(v1324.rlim_cur) = v119;
                      if ((_DWORD)v118 == a1[4])
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v118 + 1), (unint64_t)&v1324);
                      else
                        (*v117)[v118] = v119;
                      LODWORD(v118) = a1[5] + 1;
                      a1[5] = v118;
                      *((_BYTE *)a1 + 176) = 0;
                      v119 = *((_QWORD *)a1 + 10) + 1;
                      *((_QWORD *)a1 + 10) = v119;
                      if (v119 >= *((_QWORD *)a1 + 12))
                      {
                        LODWORD(v119) = 0;
                      }
                      else
                      {
                        LODWORD(v119) = *(unsigned __int8 *)v119;
                        *v13 = v119;
                      }
                      v131 = (_DWORD)v119 == 95;
                      v12 = v1292;
                      v15 = v1291;
                    }
                    while ((_DWORD)v119 == 95 || (v119 - 48) < 0xAu);
                  }
                  if ((_DWORD)v119 == 110)
                    v132 = v130;
                  else
                    v132 = 1;
                  if ((v132 & 1) != 0)
                  {
LABEL_189:
                    v133 = v119 == 46;
                    if (v119 != 46)
                      goto LABEL_190;
                    *((_BYTE *)a1 + 176) = 0;
                    v119 = *((_QWORD *)a1 + 10) + 1;
                    *((_QWORD *)a1 + 10) = v119;
                    if (v119 >= *((_QWORD *)a1 + 12))
                    {
                      v134 = v15;
                      v135 = v12;
                      v133 = 1;
LABEL_192:
                      v136 = *v117;
                      v1324.rlim_cur = 0;
                      fast_float::from_chars_advanced<double,char>(v136, &v136[v118], &v1324.rlim_cur, 0x2E00000005);
                      v137 = *(double *)&v1324.rlim_cur;
                      *v135 = v1324.rlim_cur;
                      if (v133)
                      {
                        v42 = 10;
                        v15 = v134;
                      }
                      else
                      {
                        v15 = v134;
                        if (v137 == 0.0 && (*(_QWORD *)&v137 & 0x8000000000000000) != 0
                          || v137 != (double)(uint64_t)v137)
                        {
                          v42 = 10;
                        }
                        else
                        {
LABEL_196:
                          v42 = 9;
                        }
                      }
                      goto LABEL_197;
                    }
                    LODWORD(v119) = *(unsigned __int8 *)v119;
                    *v13 = v119;
                    if ((v119 - 48) <= 9)
                    {
                      LOBYTE(v1324.rlim_cur) = 46;
                      if ((_DWORD)v118 == a1[4])
                      {
                        v638 = v15;
                        v639 = v12;
                        v640 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v118 + 1), (unint64_t)&v1324);
                        v15 = v638;
                        v12 = v639;
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *v640;
                      }
                      else
                      {
                        (*v117)[v118] = 46;
                      }
                      LODWORD(v118) = a1[5] + 1;
                      a1[5] = v118;
                      LOBYTE(v119) = *((_BYTE *)a1 + 176);
                      do
                      {
                        if (v119 == 95)
                        {
                          v119 = *((_QWORD *)a1 + 10) + 1;
                          if (v119 >= *((_QWORD *)a1 + 12) || *(unsigned __int8 *)v119 - 48 > 9)
                          {
LABEL_1772:
                            v525 = WTF::fastCompactMalloc((WTF *)0x20);
                            v533 = v525;
                            v534 = 0x2400000002;
                            v535 = "Non-number found after decimal point";
LABEL_1652:
                            *(_QWORD *)v525 = v534;
                            *(_QWORD *)(v525 + 8) = v535;
                            *(_DWORD *)(v525 + 16) = 4;
                            v950 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                            *((_QWORD *)a1 + 19) = v533;
                            if (v950)
                            {
                              if (*(_DWORD *)v950 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v950, v526, v527, v528, v529, v530, v531, v532);
                                WTF::fastFree(v951, v952, v953, v954, v955, v956, v957, v958);
                              }
                              else
                              {
                                *(_DWORD *)v950 -= 2;
                              }
                            }
                            v42 = 1048583;
                            if (!*v13)
                            {
                              if (*((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
                                v42 = 3145733;
                              else
                                v42 = 1048583;
                            }
LABEL_1018:
                            *((_BYTE *)a1 + 150) = 1;
                            goto LABEL_528;
                          }
                          *v13 = 0;
                          *(_QWORD *)v14 = v119;
                          LOBYTE(v119) = *(_BYTE *)v119;
                          *v13 = v119;
                        }
                        LOBYTE(v1324.rlim_cur) = v119;
                        if ((_DWORD)v118 == a1[4])
                        {
                          v574 = v15;
                          v575 = v12;
                          v576 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v118 + 1), (unint64_t)&v1324);
                          v15 = v574;
                          v12 = v575;
                          *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *v576;
                        }
                        else
                        {
                          (*v117)[v118] = v119;
                        }
                        LODWORD(v118) = a1[5] + 1;
                        a1[5] = v118;
                        *((_BYTE *)a1 + 176) = 0;
                        v119 = *((_QWORD *)a1 + 10) + 1;
                        *((_QWORD *)a1 + 10) = v119;
                        if (v119 >= *((_QWORD *)a1 + 12))
                        {
                          LODWORD(v119) = 0;
                        }
                        else
                        {
                          LODWORD(v119) = *(unsigned __int8 *)v119;
                          *v13 = v119;
                        }
                      }
                      while ((_DWORD)v119 == 95 || (v119 - 48) < 0xAu);
                    }
LABEL_190:
                    if ((v119 & 0xDF) != 0x45)
                    {
LABEL_191:
                      v134 = v15;
                      v135 = v12;
                      goto LABEL_192;
                    }
                    LOBYTE(v1324.rlim_cur) = 101;
                    if ((_DWORD)v118 == a1[4])
                    {
                      v743 = v15;
                      v744 = v12;
                      v745 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v118 + 1), (unint64_t)&v1324);
                      v15 = v743;
                      v12 = v744;
                      *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *v745;
                    }
                    else
                    {
                      (*v117)[v118] = 101;
                    }
                    v118 = a1[5] + 1;
                    a1[5] = v118;
                    *((_BYTE *)a1 + 176) = 0;
                    v243 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                    *((_QWORD *)a1 + 10) = v243;
                    v244 = *((_QWORD *)a1 + 12);
                    if ((unint64_t)v243 < v244)
                    {
                      v245 = *v243;
                      *v13 = v245;
                      if (v245 == 45 || v245 == 43)
                      {
                        LOBYTE(v1324.rlim_cur) = v245;
                        if ((_DWORD)v118 == a1[4])
                        {
                          v754 = v15;
                          v755 = v12;
                          v756 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v118 + 1), (unint64_t)&v1324);
                          v15 = v754;
                          v12 = v755;
                          v118 = a1[5];
                          v246 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
                          LOBYTE(v245) = *v756;
                        }
                        else
                        {
                          v246 = *v117;
                        }
                        v246[v118] = v245;
                        LODWORD(v118) = a1[5] + 1;
                        a1[5] = v118;
                        *((_BYTE *)a1 + 176) = 0;
                        v243 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                        *((_QWORD *)a1 + 10) = v243;
                        v244 = *((_QWORD *)a1 + 12);
                        if ((unint64_t)v243 >= v244)
                          goto LABEL_1651;
                        v245 = *v243;
                        *v13 = v245;
                      }
                      if ((v245 - 48) <= 9)
                      {
                        do
                        {
                          if (v245 == 95)
                          {
                            v757 = v243 + 1;
                            if ((unint64_t)v757 >= v244 || *v757 - 48 > 9)
                              goto LABEL_1651;
                            *v13 = 0;
                            *(_QWORD *)v14 = v757;
                            LOBYTE(v245) = *v757;
                            *v13 = *v757;
                          }
                          LOBYTE(v1324.rlim_cur) = v245;
                          if ((_DWORD)v118 == a1[4])
                          {
                            v719 = v15;
                            v720 = v12;
                            v721 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v118 + 1), (unint64_t)&v1324);
                            v15 = v719;
                            v12 = v720;
                            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *v721;
                          }
                          else
                          {
                            (*v117)[v118] = v245;
                          }
                          LODWORD(v118) = a1[5] + 1;
                          a1[5] = v118;
                          *((_BYTE *)a1 + 176) = 0;
                          v243 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                          *((_QWORD *)a1 + 10) = v243;
                          v244 = *((_QWORD *)a1 + 12);
                          if ((unint64_t)v243 >= v244)
                          {
                            v245 = 0;
                          }
                          else
                          {
                            v245 = *v243;
                            *v13 = v245;
                          }
                        }
                        while (v245 == 95 || (v245 - 48) < 0xA);
                        goto LABEL_191;
                      }
                    }
LABEL_1651:
                    v525 = WTF::fastCompactMalloc((WTF *)0x20);
                    v533 = v525;
                    v534 = 0x2900000002;
                    v535 = "Non-number found after exponent indicator";
                    goto LABEL_1652;
                  }
                  v14 = (rlim_t)v15;
                  v22 = *((_QWORD *)a1 + 24);
                  if ((_DWORD)v118)
                  {
                    v897 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
                    v16 = v118;
                    v898 = *((_QWORD *)a1 + 23);
                    if (*(char *)v897 < 0)
                    {
                      JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), v118, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v898, (uint64_t *)&v1324);
                      v1000 = (WTF::StringImpl *)v1324.rlim_cur;
                      v1324.rlim_cur = 0;
                      if (v1000)
                      {
                        if (*(_DWORD *)v1000 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1000, v993, v994, v995, v996, v997, v998, v999);
                          WTF::fastFree(v1061, v1062, v1063, v1064, v1065, v1066, v1067, v1068);
                        }
                        else
                        {
                          *(_DWORD *)v1000 -= 2;
                        }
                      }
                      v1069 = *(_QWORD *)v898 - 1;
                      if (v1069 >> 6 >= *(unsigned int *)(v898 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1988616D0);
                      }
                      v17 = *(_QWORD *)(*(_QWORD *)(v898 + 8) + 8 * (v1069 >> 6)) + 8 * (v1069 & 0x3F);
                    }
                    else
                    {
                      v899 = *(unsigned __int8 *)v897;
                      if ((_DWORD)v118 == 1)
                      {
                        stackaddr_np = v898 + 24;
                        v17 = *(_QWORD *)(v898 + 24 + 8 * v899);
                        if (!v17)
                        {
                          JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), v118, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v898, (uint64_t *)&v1324);
                          v901 = (WTF::StringImpl *)v1324.rlim_cur;
                          v1324.rlim_cur = 0;
                          if (v901)
                          {
                            if (*(_DWORD *)v901 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v901, v900, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                              WTF::fastFree(v1003, v1004, v1005, v1006, v1007, v1008, v1009, v1010);
                            }
                            else
                            {
                              *(_DWORD *)v901 -= 2;
                            }
                          }
                          v30 = *(_QWORD *)v898 - 1;
                          v61 = v30 >> 6;
                          if (v30 >> 6 >= *(unsigned int *)(v898 + 20))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198860D18);
                          }
LABEL_1857:
                          if (*(char *)v897 < 0)
                            goto LABEL_2008;
                          v1078 = *(_QWORD *)(v898 + 8);
                          v1079 = 8 * (v30 & 0x3F);
                          *(_QWORD *)(stackaddr_np + 8 * *(unsigned __int8 *)v897) = *(_QWORD *)(v1078 + 8 * v61)
                                                                                     + v1079;
                          v17 = *(_QWORD *)(v1078 + 8 * v61) + v1079;
                        }
                      }
                      else
                      {
                        stackaddr_np = v898 + 1048;
                        v17 = *(_QWORD *)(v898 + 1048 + 8 * v899);
                        if (!v17
                          || !WTF::equalInternal<unsigned char>(*(_QWORD *)v17, *((_QWORD *)a1 + 1), v118))
                        {
                          JSC::Identifier::fromString(v22, v897, v16, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v898, (uint64_t *)&v1324);
                          v1002 = (WTF::StringImpl *)v1324.rlim_cur;
                          v1324.rlim_cur = 0;
                          if (v1002)
                          {
                            if (*(_DWORD *)v1002 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1002, v1001, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                              WTF::fastFree(v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077);
                            }
                            else
                            {
                              *(_DWORD *)v1002 -= 2;
                            }
                          }
                          v30 = *(_QWORD *)v898 - 1;
                          v61 = v30 >> 6;
                          if (v30 >> 6 >= *(unsigned int *)(v898 + 20))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1988616D8);
                          }
                          goto LABEL_1857;
                        }
                      }
                    }
                  }
                  else
                  {
                    v17 = *(_QWORD *)(v22 + 41952) + 8;
                  }
                  *((_BYTE *)a1 + 176) = 0;
                  v1080 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                  *((_QWORD *)a1 + 10) = v1080;
                  if ((unint64_t)v1080 < *((_QWORD *)a1 + 12))
                    *v13 = *v1080;
                  *(_QWORD *)(a2 + 8) = v17;
                  *(_BYTE *)(a2 + 16) = 10;
                  v42 = 11;
                  v15 = (char *)v14;
LABEL_197:
                  v138 = *v13;
                  if ((v138 == 92 || !v15[v138]) && !v15[v138])
                  {
LABEL_916:
                    v525 = WTF::fastCompactMalloc((WTF *)0x20);
                    v533 = v525;
                    v534 = 0x3500000002;
                    v535 = "No identifiers allowed directly after numeric literal";
                    goto LABEL_1652;
                  }
                  goto LABEL_199;
                }
                stackaddr_np = (uint64_t)JSC::typesOfLatin1Characters;
                v17 = (uint64_t)v12;
                v791 = 0;
                v792 = (_BYTE *)*((_QWORD *)a1 + 10);
                v793 = *((_QWORD *)a1 + 12);
                v794 = 9;
                do
                {
                  v795 = v794;
                  if (v116 == 95)
                  {
                    if ((unint64_t)++v792 >= v793)
                      goto LABEL_1961;
                    if ((*v792 & 0xF8) != 0x30 || v115 != 0)
                      goto LABEL_1961;
                    *v13 = 0;
                    *(_QWORD *)v14 = v792;
                    v797 = *v792;
                  }
                  else
                  {
                    v797 = v116;
                  }
                  *((_BYTE *)&v1324.rlim_cur + v795) = v797;
                  *v13 = 0;
                  *(_QWORD *)v14 = ++v792;
                  if ((unint64_t)v792 >= v793)
                  {
                    v116 = 0;
                  }
                  else
                  {
                    v116 = *v792;
                    *v13 = v116;
                  }
                  v791 = v797 + 8 * v791 - 48;
                  v794 = v795 - 1;
                  v798 = v116 & 0xF8;
                  v799 = v798 == 48 || v116 == 95;
                }
                while (v799 && v795);
                if (v116 != 110 && v116 != 95 && (v116 - 48) >= 0xA && v795)
                {
                  v800 = (double)v791;
                  goto LABEL_1275;
                }
                if ((int)v795 <= 9)
                {
                  v942 = v795;
                  v943 = 9;
                  do
                  {
                    JSC::Lexer<unsigned char>::record8((uint64_t)a1, *((_BYTE *)&v1324.rlim_cur + v943));
                    v214 = v943-- > v942;
                  }
                  while (v214);
                  v116 = *v13;
                  v798 = v116 & 0xF8;
                }
                v944 = v116 == 95;
                if (v798 == 48 || v116 == 95)
                {
                  do
                  {
                    if (v944)
                    {
                      v945 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                      if ((unint64_t)v945 >= *((_QWORD *)a1 + 12))
                        goto LABEL_1961;
                      if ((*v945 & 0xF8) != 0x30 || v115 != 0)
                        goto LABEL_1961;
                      *v13 = 0;
                      *(_QWORD *)v14 = v945;
                      LOBYTE(v116) = *v945;
                      *v13 = *v945;
                    }
                    JSC::Lexer<unsigned char>::record8((uint64_t)a1, v116);
                    *((_BYTE *)a1 + 176) = 0;
                    v947 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                    *((_QWORD *)a1 + 10) = v947;
                    if ((unint64_t)v947 >= *((_QWORD *)a1 + 12))
                    {
                      v116 = 0;
                    }
                    else
                    {
                      v116 = *v947;
                      *v13 = v116;
                    }
                    v944 = v116 == 95;
                  }
                  while (v116 == 95 || (v116 & 0xF8) == 0x30);
                }
                if (v116 == 110 && v115 == 0)
                {
                  v16 = a1[5];
                  if ((_DWORD)v16)
                  {
                    v22 = *((_QWORD *)a1 + 1);
                    v1028 = *((_QWORD *)a1 + 23);
                    v1027 = *((_QWORD *)a1 + 24);
                    if (*(char *)v22 < 0)
                    {
                      JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1028, (uint64_t *)v1320);
                      v1114 = v1320[0];
                      v1320[0] = 0;
                      if (v1114)
                      {
                        if (*(_DWORD *)v1114 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1114, v1111, v1112, a4, v1113, a6, a7, a8);
                          WTF::fastFree(v1160, v1161, v1162, v1163, v1164, v1165, v1166, v1167);
                        }
                        else
                        {
                          *(_DWORD *)v1114 -= 2;
                        }
                      }
                      if (*(unsigned int *)(v1028 + 20) <= (unint64_t)(*(_QWORD *)v1028 - 1) >> 6)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198861854);
                      }
                      goto LABEL_1961;
                    }
                    v1029 = *(unsigned __int8 *)v22;
                    if ((_DWORD)v16 == 1)
                    {
                      v1319 = v1028 + 24;
                      if (*(_QWORD *)(v1028 + 24 + 8 * v1029))
                        goto LABEL_1961;
                      JSC::Identifier::fromString(v1027, (WTF::AtomStringImpl *)v22, v16, a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1028, (uint64_t *)v1320);
                      v1031 = v1320[0];
                      v1320[0] = 0;
                      if (v1031)
                      {
                        if (*(_DWORD *)v1031 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1031, v1030, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                          WTF::fastFree(v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125);
                        }
                        else
                        {
                          *(_DWORD *)v1031 -= 2;
                        }
                      }
                      v61 = *(_QWORD *)v1028 - 1;
                      v30 = v61 >> 6;
                      if (v61 >> 6 >= *(unsigned int *)(v1028 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19886154CLL);
                      }
                    }
                    else
                    {
                      v1319 = v1028 + 1048;
                      v1115 = *(uint64_t **)(v1028 + 1048 + 8 * v1029);
                      if (v1115 && WTF::equalInternal<unsigned char>(*v1115, v22, v16))
                        goto LABEL_1961;
                      JSC::Identifier::fromString(v1027, (WTF::AtomStringImpl *)v22, v16, a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1028, (uint64_t *)v1320);
                      v1117 = v1320[0];
                      v1320[0] = 0;
                      if (v1117)
                      {
                        if (*(_DWORD *)v1117 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1117, v1116, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                          WTF::fastFree(v1168, v1169, v1170, v1171, v1172, v1173, v1174, v1175);
                        }
                        else
                        {
                          *(_DWORD *)v1117 -= 2;
                        }
                      }
                      v61 = *(_QWORD *)v1028 - 1;
                      v30 = v61 >> 6;
                      if (v61 >> 6 >= *(unsigned int *)(v1028 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198861AA8);
                      }
                    }
                    if (*(char *)v22 < 0)
                      goto LABEL_2008;
                    *(_QWORD *)(v1319 + 8 * *(unsigned __int8 *)v22) = *(_QWORD *)(*(_QWORD *)(v1028 + 8) + 8 * v30)
                                                                       + 8 * (v61 & 0x3F);
                  }
                }
                else if ((v116 - 48) >= 0xA)
                {
                  v800 = JSC::parseIntOverflow(*((_QWORD *)a1 + 1), a1[5], 8);
LABEL_1275:
                  *(double *)v17 = v800;
                  if (v800 == 0.0 && (*(_QWORD *)&v800 & 0x8000000000000000) != 0 || v800 != (double)(uint64_t)v800)
                  {
                    v42 = 10;
                    v15 = JSC::typesOfLatin1Characters;
                  }
                  else
                  {
                    v42 = 9;
                    v15 = JSC::typesOfLatin1Characters;
                  }
                  goto LABEL_197;
                }
LABEL_1961:
                v12 = (uint64_t **)v17;
                v15 = JSC::typesOfLatin1Characters;
                goto LABEL_161;
              }
              v42 = 3145734;
              v606 = WTF::fastCompactMalloc((WTF *)0x20);
              v614 = v606;
              v615 = 0x4900000002;
              v616 = "Decimal integer literals with a leading zero are forbidden in strict mode";
            }
LABEL_1015:
            *(_QWORD *)v606 = v615;
            *(_QWORD *)(v606 + 8) = v616;
            *(_DWORD *)(v606 + 16) = 4;
            v617 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
            *((_QWORD *)a1 + 19) = v614;
            if (v617)
            {
              if (*(_DWORD *)v617 == 2)
              {
                WTF::StringImpl::~StringImpl(v617, v607, v608, v609, v610, v611, v612, v613);
                WTF::fastFree(v630, v631, v632, v633, v634, v635, v636, v637);
              }
              else
              {
                *(_DWORD *)v617 -= 2;
              }
            }
            goto LABEL_1018;
          }
          v778 = (_BYTE *)(v109 + 2);
          if (v109 + 2 >= v110 || (*v778 & 0xF8) != 0x30)
          {
            v42 = 3145734;
            v606 = WTF::fastCompactMalloc((WTF *)0x20);
            v614 = v606;
            v615 = 0x1A00000002;
            v616 = "No octal digits after '0o'";
            goto LABEL_1015;
          }
          v779 = (double *)v12;
          v780 = 0;
          *((_BYTE *)a1 + 176) = 0;
          *((_QWORD *)a1 + 10) = v778;
          v781 = *v778;
          *((_BYTE *)a1 + 176) = v781;
          v782 = a1[5];
          v783 = 9;
          do
          {
            v784 = v783;
            if (v781 == 95)
            {
              if ((unint64_t)++v778 >= v110)
                goto LABEL_1615;
              if ((*v778 & 0xF8) != 0x30 || v782 != 0)
                goto LABEL_1615;
              *v13 = 0;
              *(_QWORD *)v14 = v778;
              v786 = *v778;
            }
            else
            {
              v786 = v781;
            }
            *((_BYTE *)&v1324.rlim_cur + v784) = v786;
            *v13 = 0;
            *(_QWORD *)v14 = ++v778;
            if ((unint64_t)v778 >= v110)
            {
              v781 = 0;
            }
            else
            {
              v781 = *v778;
              *v13 = v781;
            }
            v780 = v786 + 8 * v780 - 48;
            v783 = v784 - 1;
            v787 = v781 & 0xF8;
            v788 = v787 == 48 || v781 == 95;
          }
          while (v788 && v784);
          if (v781 != 110 && v781 != 95 && (v781 - 48) >= 0xA && v784)
          {
            v216 = (double)v780;
            goto LABEL_1245;
          }
          if ((int)v784 <= 9)
          {
            v935 = v784;
            v936 = 9;
            do
            {
              JSC::Lexer<unsigned char>::record8((uint64_t)a1, *((_BYTE *)&v1324.rlim_cur + v936));
              v214 = v936-- > v935;
            }
            while (v214);
            v781 = *v13;
            v787 = v781 & 0xF8;
          }
          v937 = v781 == 95;
          if (v787 == 48 || v781 == 95)
          {
            do
            {
              if (v937)
              {
                v938 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                if ((unint64_t)v938 >= *((_QWORD *)a1 + 12))
                  goto LABEL_1615;
                if ((*v938 & 0xF8) != 0x30 || v782 != 0)
                  goto LABEL_1615;
                *v13 = 0;
                *(_QWORD *)v14 = v938;
                LOBYTE(v781) = *v938;
                *v13 = *v938;
              }
              JSC::Lexer<unsigned char>::record8((uint64_t)a1, v781);
              *((_BYTE *)a1 + 176) = 0;
              v940 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
              *((_QWORD *)a1 + 10) = v940;
              if ((unint64_t)v940 >= *((_QWORD *)a1 + 12))
              {
                v781 = 0;
              }
              else
              {
                v781 = *v940;
                *v13 = v781;
              }
              v937 = v781 == 95;
            }
            while (v781 == 95 || (v781 & 0xF8) == 0x30);
          }
          if (v781 != 110 || v782 != 0)
          {
            if ((v781 - 48) >= 0xA)
              v216 = JSC::parseIntOverflow(*((_QWORD *)a1 + 1), a1[5], 8);
            else
LABEL_1615:
              v216 = 0.0;
LABEL_1245:
            *v779 = v216;
            v789 = *v13;
            v790 = v789 == 92 || JSC::typesOfLatin1Characters[v789] == 0;
            if (!v790 || JSC::typesOfLatin1Characters[v789])
              goto LABEL_339;
LABEL_1953:
            v42 = 3145734;
            v606 = WTF::fastCompactMalloc((WTF *)0x20);
            v614 = v606;
            v615 = 0x2D00000002;
            v616 = "No space between octal literal and identifier";
            goto LABEL_1015;
          }
          v22 = a1[5];
          v16 = *((_QWORD *)a1 + 24);
          if (!(_DWORD)v22)
          {
            v17 = *(_QWORD *)(v16 + 41952) + 8;
            goto LABEL_1948;
          }
          v14 = *((_QWORD *)a1 + 1);
          v1023 = *((_QWORD *)a1 + 23);
          if (*(char *)v14 < 0)
          {
            JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
            WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1023, (uint64_t *)v1320);
            v1100 = v1320[0];
            v1320[0] = 0;
            if (v1100)
            {
              if (*(_DWORD *)v1100 == 2)
              {
                WTF::StringImpl::~StringImpl(v1100, v1093, v1094, v1095, v1096, v1097, v1098, v1099);
                WTF::fastFree(v1139, v1140, v1141, v1142, v1143, v1144, v1145, v1146);
              }
              else
              {
                *(_DWORD *)v1100 -= 2;
              }
            }
            v1147 = *(_QWORD *)v1023 - 1;
            if (v1147 >> 6 >= *(unsigned int *)(v1023 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x198861A98);
            }
            v17 = *(_QWORD *)(*(_QWORD *)(v1023 + 8) + 8 * (v1147 >> 6)) + 8 * (v1147 & 0x3F);
          }
          else
          {
            v1024 = *(unsigned __int8 *)v14;
            if ((_DWORD)v22 == 1)
            {
              stackaddr_np = v1023 + 24;
              v17 = *(_QWORD *)(v1023 + 24 + 8 * v1024);
              if (v17)
                goto LABEL_1948;
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1023, (uint64_t *)v1320);
              v1026 = v1320[0];
              v1320[0] = 0;
              if (v1026)
              {
                if (*(_DWORD *)v1026 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1026, v1025, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                  WTF::fastFree(v1103, v1104, v1105, v1106, v1107, v1108, v1109, v1110);
                }
                else
                {
                  *(_DWORD *)v1026 -= 2;
                }
              }
              v30 = *(_QWORD *)v1023 - 1;
              v61 = v30 >> 6;
              if (v30 >> 6 >= *(unsigned int *)(v1023 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x198861480);
              }
            }
            else
            {
              stackaddr_np = v1023 + 1048;
              v17 = *(_QWORD *)(v1023 + 1048 + 8 * v1024);
              if (v17 && WTF::equalInternal<unsigned char>(*(_QWORD *)v17, *((_QWORD *)a1 + 1), a1[5]))
                goto LABEL_1948;
              JSC::Identifier::fromString(v16, (WTF::AtomStringImpl *)v14, v22, a4, (uint64_t)v12, a6, a7, a8, (rlim_t *)v1320);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1023, (uint64_t *)v1320);
              v1102 = v1320[0];
              v1320[0] = 0;
              if (v1102)
              {
                if (*(_DWORD *)v1102 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1102, v1101, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                  WTF::fastFree(v1148, v1149, v1150, v1151, v1152, v1153, v1154, v1155);
                }
                else
                {
                  *(_DWORD *)v1102 -= 2;
                }
              }
              v30 = *(_QWORD *)v1023 - 1;
              v61 = v30 >> 6;
              if (v30 >> 6 >= *(unsigned int *)(v1023 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x198861AA0);
              }
            }
            if (*(char *)v14 < 0)
              goto LABEL_2008;
            v1156 = *(_QWORD *)(v1023 + 8);
            v1157 = 8 * (v30 & 0x3F);
            *(_QWORD *)(stackaddr_np + 8 * *(unsigned __int8 *)v14) = *(_QWORD *)(v1156 + 8 * v61) + v1157;
            v17 = *(_QWORD *)(v1156 + 8 * v61) + v1157;
          }
LABEL_1948:
          *((_BYTE *)a1 + 176) = 0;
          v1158 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
          *((_QWORD *)a1 + 10) = v1158;
          if ((unint64_t)v1158 < *((_QWORD *)a1 + 12))
            *v13 = *v1158;
          *(_QWORD *)(a2 + 8) = v17;
          *(_BYTE *)(a2 + 16) = 8;
          v1159 = *v13;
          if (v1159 != 92 && JSC::typesOfLatin1Characters[v1159] || JSC::typesOfLatin1Characters[v1159])
            goto LABEL_2007;
          goto LABEL_1953;
        }
        v207 = (unsigned __int8 *)(v109 + 2);
        if ((unint64_t)v207 >= v110)
          v208 = 0;
        else
          v208 = *v207;
        if ((v208 - 48) >= 0xA && (v208 | 0x20u) - 97 >= 6)
        {
          v687 = WTF::fastCompactMalloc((WTF *)0x20);
          v695 = v687;
          v696 = 0x2000000002;
          v697 = "No hexadecimal digits after '0x'";
          goto LABEL_1124;
        }
        *v13 = 0;
        *(_QWORD *)v14 = v207;
        if ((unint64_t)v207 >= v110)
        {
          LOBYTE(v209) = 0;
        }
        else
        {
          LOBYTE(v209) = *v207;
          *v13 = *v207;
        }
        v210 = 0;
        v211 = -7;
        while (1)
        {
          v212 = v211;
          if (v209 == 95)
          {
            if ((unint64_t)++v207 >= v110)
              v802 = 0;
            else
              v802 = *v207;
            if ((v802 - 48) >= 0xA && (v802 | 0x20u) - 97 > 5)
            {
              v216 = 0.0;
              goto LABEL_337;
            }
            *v13 = 0;
            *(_QWORD *)v14 = v207;
            if ((unint64_t)v207 >= v110)
            {
              v213 = -48;
              goto LABEL_323;
            }
            LOBYTE(v209) = *v207;
          }
          if (v209 > 0x40u)
            v213 = (v209 + 9) & 0xF;
          else
            v213 = v209 - 48;
LABEL_323:
          *v13 = 0;
          *(_QWORD *)v14 = ++v207;
          if ((unint64_t)v207 >= v110)
          {
            v209 = 0;
          }
          else
          {
            v209 = *v207;
            *v13 = v209;
          }
          v210 = 16 * v210 + v213;
          v214 = ((v209 | 0x20) - 97) > 5u && (v209 - 48) > 9u;
          if (!v214 || v209 == 95)
          {
            ++v211;
            if (v212)
              continue;
          }
          if (v212 && v209 != 110)
          {
            v216 = (double)v210;
            goto LABEL_337;
          }
          stackaddr_np = (uint64_t)JSC::typesOfLatin1Characters;
          v653 = v12;
          v654 = (WTF::AtomStringImpl **)(a1 + 2);
          v655 = 8;
          do
          {
            if (v210 >> 29 > 4)
              v656 = (v210 >> 28) + 87;
            else
              v656 = (v210 >> 28) | 0x30;
            LOBYTE(v1324.rlim_cur) = v656;
            v657 = a1[5];
            if ((_DWORD)v657 == a1[4])
              *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v657 + 1), (unint64_t)&v1324);
            else
              *((_BYTE *)*v654 + v657) = v656;
            v658 = a1[5] + 1;
            a1[5] = v658;
            v210 *= 16;
            --v655;
          }
          while (v655);
          v659 = *v13;
          v660 = v659 == 95;
          if (v659 == 95 || (v659 - 48) < 0xA || (v659 | 0x20u) - 97 <= 5)
          {
            do
            {
              if (v660)
              {
                v912 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
                v913 = *((_QWORD *)a1 + 12);
                if ((unint64_t)v912 >= v913)
                  v914 = 0;
                else
                  v914 = *v912;
                if ((v914 - 48) >= 0xA && (v914 | 0x20u) - 97 > 5)
                {
                  v216 = 0.0;
LABEL_1090:
                  v12 = v653;
LABEL_337:
                  *(double *)v12 = v216;
                  v217 = *v13;
                  if (v217 != 92 && JSC::typesOfLatin1Characters[v217] || JSC::typesOfLatin1Characters[v217])
                    goto LABEL_339;
LABEL_1851:
                  v687 = WTF::fastCompactMalloc((WTF *)0x20);
                  v695 = v687;
                  v696 = 0x3300000002;
                  v697 = "No space between hexadecimal literal and identifier";
LABEL_1124:
                  *(_QWORD *)v687 = v696;
                  *(_QWORD *)(v687 + 8) = v697;
                  *(_DWORD *)(v687 + 16) = 4;
                  v698 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                  *((_QWORD *)a1 + 19) = v695;
                  if (v698)
                  {
                    if (*(_DWORD *)v698 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v698, v688, v689, v690, v691, v692, v693, v694);
                      WTF::fastFree(v746, v747, v748, v749, v750, v751, v752, v753);
                    }
                    else
                    {
                      *(_DWORD *)v698 -= 2;
                    }
                  }
                  v42 = 3145739;
                  goto LABEL_1018;
                }
                *v13 = 0;
                *(_QWORD *)v14 = v912;
                if ((unint64_t)v912 >= v913)
                {
                  LOBYTE(v659) = 0;
                }
                else
                {
                  LOBYTE(v659) = *v912;
                  *v13 = *v912;
                }
              }
              JSC::Lexer<unsigned char>::record8((uint64_t)a1, v659);
              *((_BYTE *)a1 + 176) = 0;
              v915 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
              *((_QWORD *)a1 + 10) = v915;
              if ((unint64_t)v915 >= *((_QWORD *)a1 + 12))
              {
                v659 = 0;
              }
              else
              {
                v659 = *v915;
                *v13 = v659;
              }
              v660 = v659 == 95;
            }
            while (v659 == 95 || (v659 - 48) < 0xA || (v659 | 0x20u) - 97 < 6);
            v658 = a1[5];
          }
          v661 = *v654;
          v22 = v658;
          if (v659 != 110)
          {
            v216 = JSC::parseIntOverflow((unint64_t)v661, v658, 16);
            goto LABEL_1090;
          }
          v16 = *((_QWORD *)a1 + 24);
          if (v658)
          {
            v887 = *((_QWORD *)a1 + 23);
            if (*(char *)v661 < 0)
            {
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), v661, v658, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v887, (uint64_t *)&v1324);
              v982 = (WTF::StringImpl *)v1324.rlim_cur;
              v1324.rlim_cur = 0;
              if (v982)
              {
                if (*(_DWORD *)v982 == 2)
                {
                  WTF::StringImpl::~StringImpl(v982, v975, v976, v977, v978, v979, v980, v981);
                  WTF::fastFree(v1040, v1041, v1042, v1043, v1044, v1045, v1046, v1047);
                }
                else
                {
                  *(_DWORD *)v982 -= 2;
                }
              }
              v1048 = *(_QWORD *)v887 - 1;
              if (v1048 >> 6 >= *(unsigned int *)(v887 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x1988616C0);
              }
              v17 = *(_QWORD *)(*(_QWORD *)(v887 + 8) + 8 * (v1048 >> 6)) + 8 * (v1048 & 0x3F);
            }
            else
            {
              v888 = *(unsigned __int8 *)v661;
              if (v658 == 1)
              {
                v14 = v887 + 24;
                v17 = *(_QWORD *)(v887 + 24 + 8 * v888);
                if (!v17)
                {
                  JSC::Identifier::fromString(*((_QWORD *)a1 + 24), v661, v658, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                  WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v887, (uint64_t *)&v1324);
                  v890 = (WTF::StringImpl *)v1324.rlim_cur;
                  v1324.rlim_cur = 0;
                  if (v890)
                  {
                    if (*(_DWORD *)v890 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v890, v889, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                      WTF::fastFree(v985, v986, v987, v988, v989, v990, v991, v992);
                    }
                    else
                    {
                      *(_DWORD *)v890 -= 2;
                    }
                  }
                  v30 = *(_QWORD *)v887 - 1;
                  v61 = v30 >> 6;
                  if (v30 >> 6 >= *(unsigned int *)(v887 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198860C40);
                  }
                  goto LABEL_1844;
                }
              }
              else
              {
                v14 = v887 + 1048;
                v17 = *(_QWORD *)(v887 + 1048 + 8 * v888);
                if (!v17 || !WTF::equalInternal<unsigned char>(*(_QWORD *)v17, (unint64_t)v661, v658))
                {
                  JSC::Identifier::fromString(v16, v661, v22, a4, (uint64_t)v12, a6, a7, a8, &v1324.rlim_cur);
                  WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v887, (uint64_t *)&v1324);
                  v984 = (WTF::StringImpl *)v1324.rlim_cur;
                  v1324.rlim_cur = 0;
                  if (v984)
                  {
                    if (*(_DWORD *)v984 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v984, v983, (uint64_t)v15, a4, (uint64_t)v12, a6, a7, a8);
                      WTF::fastFree(v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056);
                    }
                    else
                    {
                      *(_DWORD *)v984 -= 2;
                    }
                  }
                  v30 = *(_QWORD *)v887 - 1;
                  v61 = v30 >> 6;
                  if (v30 >> 6 >= *(unsigned int *)(v887 + 20))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1988616C8);
                  }
LABEL_1844:
                  if (*(char *)v661 < 0)
                    goto LABEL_2008;
                  v1057 = *(_QWORD *)(v887 + 8);
                  v1058 = 8 * (v30 & 0x3F);
                  *(_QWORD *)(v14 + 8 * *(unsigned __int8 *)v661) = *(_QWORD *)(v1057 + 8 * v61) + v1058;
                  v17 = *(_QWORD *)(v1057 + 8 * v61) + v1058;
                }
              }
            }
          }
          else
          {
            v17 = *(_QWORD *)(v16 + 41952) + 8;
          }
          *((_BYTE *)a1 + 176) = 0;
          v1059 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
          *((_QWORD *)a1 + 10) = v1059;
          if ((unint64_t)v1059 < *((_QWORD *)a1 + 12))
            *v13 = *v1059;
          *(_QWORD *)(a2 + 8) = v17;
          *(_BYTE *)(a2 + 16) = 16;
          v1060 = *v13;
          if (v1060 != 92 && JSC::typesOfLatin1Characters[v1060] || JSC::typesOfLatin1Characters[v1060])
            goto LABEL_2007;
          goto LABEL_1851;
        }
      case 0x31uLL:
      case 0x32uLL:
      case 0x33uLL:
      case 0x34uLL:
      case 0x35uLL:
      case 0x36uLL:
      case 0x37uLL:
      case 0x38uLL:
      case 0x39uLL:
        goto LABEL_161;
      case 0x3AuLL:
        *((_BYTE *)a1 + 176) = 0;
        v59 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v59;
        if ((unint64_t)v59 < *((_QWORD *)a1 + 12))
          *v13 = *v59;
        v42 = 18;
        goto LABEL_527;
      case 0x3BuLL:
        *((_BYTE *)a1 + 176) = 0;
        v57 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v57;
        if ((unint64_t)v57 < *((_QWORD *)a1 + 12))
          *v13 = *v57;
        v42 = 17;
        goto LABEL_527;
      case 0x3CuLL:
        v42 = 139264;
        *((_BYTE *)a1 + 176) = 0;
        v183 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v183 + 1;
        v184 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v183 + 1) >= v184)
          goto LABEL_527;
        v185 = v183[1];
        *v13 = v185;
        if (v185 == 61)
        {
          *v13 = 0;
          v193 = v183 + 2;
          *(_QWORD *)v14 = v193;
          v42 = 139266;
LABEL_399:
          if ((unint64_t)v193 < v184)
            *v13 = *v193;
          goto LABEL_527;
        }
        if (v185 != 60)
        {
          v126 = v185 == 33;
          v186 = v183 + 2;
          if (v126 && (unint64_t)v186 < v184)
          {
            v1314 = v11;
            v1305 = a4;
            v1299 = v12;
            if (*v186 == 45)
            {
              v188 = v183 + 3;
              if ((unint64_t)v188 < v184 && *v188 == 45 && !a1[51])
                goto LABEL_348;
            }
          }
          goto LABEL_527;
        }
        v42 = 156672;
        *v13 = 0;
        v450 = v183 + 2;
        *(_QWORD *)v14 = v183 + 2;
        v451 = v183 + 3;
        if ((unint64_t)(v183 + 2) >= v184 || (unint64_t)(v183 + 3) >= v184)
        {
          if ((unint64_t)(v183 + 2) >= v184)
            goto LABEL_527;
          v907 = *v450;
          *v13 = v907;
          if (v907 != 61)
            goto LABEL_527;
          *v13 = 0;
          v908 = v183 + 3;
          *(_QWORD *)v14 = v908;
          if ((unint64_t)v908 >= v184)
          {
LABEL_827:
            v42 = 26;
            goto LABEL_527;
          }
          v453 = *v908;
        }
        else
        {
          v452 = *v450;
          *v13 = v452;
          if (v452 != 61)
            goto LABEL_527;
          *v13 = 0;
          *(_QWORD *)v14 = v451;
          v453 = *v451;
        }
        *v13 = v453;
        goto LABEL_827;
      case 0x3DuLL:
      case 0x120uLL:
        v46 = (_BYTE *)*((_QWORD *)a1 + 10);
        v47 = v46 + 1;
        v48 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v46 + 1) >= v48)
        {
          *v13 = 0;
          *(_QWORD *)v14 = v47;
        }
        else
        {
          if (*v47 == 62)
          {
            *(_DWORD *)(a2 + 8) = *a1;
            *(_DWORD *)(a2 + 12) = a1[20] - a1[22];
            *(_DWORD *)(a2 + 16) = a1[28] - a1[22];
            v175 = *((_QWORD *)a1 + 10);
            v176 = *((_QWORD *)a1 + 12);
            *((_BYTE *)a1 + 176) = 0;
            v177 = (unsigned __int8 *)(v175 + 2);
            *((_QWORD *)a1 + 10) = v177;
            if ((unint64_t)v177 < v176)
              *v13 = *v177;
            v42 = 38;
            goto LABEL_527;
          }
          *v13 = 0;
          *(_QWORD *)v14 = v47;
          v49 = v46[1];
          *v13 = v49;
          v50 = v46 + 2;
          v51 = v46 + 3;
          if ((unint64_t)(v46 + 2) >= v48 || (unint64_t)(v46 + 3) >= v48)
          {
            if (v49 == 61)
            {
              v42 = 121856;
              *v13 = 0;
              *(_QWORD *)v14 = v46 + 2;
              if ((unint64_t)(v46 + 2) >= v48)
                goto LABEL_527;
              v894 = v46[2];
              *v13 = v894;
              if (v894 != 61)
                goto LABEL_527;
              *v13 = 0;
              v60 = v46 + 3;
              *(_QWORD *)v14 = v60;
              v42 = 121858;
LABEL_1492:
              if ((unint64_t)v60 < v48)
LABEL_91:
                *v13 = *v60;
              goto LABEL_527;
            }
          }
          else if (v49 == 61)
          {
            v42 = 121856;
            *v13 = 0;
            *(_QWORD *)v14 = v50;
            v162 = *v50;
            *v13 = v162;
            if (v162 == 61)
            {
              *v13 = 0;
              *(_QWORD *)v14 = v51;
              *v13 = *v51;
              v42 = 121858;
            }
            goto LABEL_527;
          }
        }
        v42 = 21;
        goto LABEL_527;
      case 0x3EuLL:
        v171 = 139264;
        *((_BYTE *)a1 + 176) = 0;
        v191 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v191 + 1;
        v184 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v191 + 1) >= v184)
          goto LABEL_1494;
        v192 = v191[1];
        *v13 = v192;
        if (v192 != 62)
        {
          if (v192 != 61)
            goto LABEL_266;
          *v13 = 0;
          v193 = v191 + 2;
          *(_QWORD *)v14 = v193;
          v42 = 139267;
          goto LABEL_399;
        }
        v171 = 156672;
        *v13 = 0;
        *(_QWORD *)v14 = v191 + 2;
        if ((unint64_t)(v191 + 2) >= v184)
          goto LABEL_1494;
        v241 = v191[2];
        *v13 = v241;
        if (v241 == 62)
        {
          *v13 = 0;
          *(_QWORD *)v14 = v191 + 3;
          v42 = 156674;
          if ((unint64_t)(v191 + 3) < v184)
          {
            v512 = v191[3];
            *v13 = v512;
            if (v512 == 61)
            {
              *v13 = 0;
              v513 = v191 + 4;
              *(_QWORD *)v14 = v513;
              if ((unint64_t)v513 < v184)
                *v13 = *v513;
              v42 = 28;
            }
          }
        }
        else
        {
          if (v241 != 61)
            goto LABEL_266;
          *v13 = 0;
          v242 = v191 + 3;
          *(_QWORD *)v14 = v242;
          if ((unint64_t)v242 < v184)
            *v13 = *v242;
          v42 = 27;
        }
        goto LABEL_527;
      case 0x3FuLL:
        *((_BYTE *)a1 + 176) = 0;
        v163 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v163 + 1;
        v164 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v163 + 1) >= v164)
          goto LABEL_255;
        v165 = v163[1];
        *v13 = v165;
        if (v165 == 46)
        {
          v501 = v163 + 2;
          if ((unint64_t)v501 >= v164)
          {
            *v13 = 0;
            *(_QWORD *)v14 = v501;
            v42 = 39;
            goto LABEL_527;
          }
          if (*v501 - 48 >= 0xA)
          {
            *v13 = 0;
            *(_QWORD *)v14 = v501;
            *v13 = *v501;
            v42 = 39;
            goto LABEL_527;
          }
        }
        else if (v165 == 63)
        {
          *v13 = 0;
          *(_QWORD *)v14 = v163 + 2;
          if ((unint64_t)(v163 + 2) < v164 && (v524 = v163[2], *v13 = v524, v524 == 61))
          {
            *v13 = 0;
            v808 = v163 + 3;
            *(_QWORD *)v14 = v808;
            if ((unint64_t)v808 < v164)
              *v13 = *v808;
            v42 = 34;
          }
          else
          {
            v42 = 17408;
          }
          goto LABEL_527;
        }
LABEL_255:
        v42 = 7;
        goto LABEL_527;
      case 0x40uLL:
      case 0x123uLL:
        if (*((_BYTE *)a1 + 200))
          goto LABEL_406;
        goto LABEL_1320;
      case 0x5BuLL:
        *((_BYTE *)a1 + 176) = 0;
        v107 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v107;
        if ((unint64_t)v107 < *((_QWORD *)a1 + 12))
          *v13 = *v107;
        v42 = 4;
        goto LABEL_527;
      case 0x5DuLL:
        *((_BYTE *)a1 + 176) = 0;
        v108 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v108;
        if ((unint64_t)v108 < *((_QWORD *)a1 + 12))
          *v13 = *v108;
        v42 = 5;
        goto LABEL_527;
      case 0x5EuLL:
        v42 = 87040;
        *((_BYTE *)a1 + 176) = 0;
        v506 = *((_QWORD *)a1 + 10);
        v507 = (unsigned __int8 *)(v506 + 1);
        *((_QWORD *)a1 + 10) = v506 + 1;
        v508 = *((_QWORD *)a1 + 12);
        v509 = (unsigned __int8 *)(v506 + 2);
        if (v506 + 1 >= v508 || v506 + 2 >= v508)
        {
          if (v506 + 1 >= v508)
            goto LABEL_527;
          v909 = *v507;
          *v13 = v909;
          if (v909 != 61)
            goto LABEL_527;
          *v13 = 0;
          v910 = (unsigned __int8 *)(v506 + 2);
          *(_QWORD *)v14 = v910;
          if ((unint64_t)v910 >= v508)
          {
LABEL_887:
            v42 = 32;
            goto LABEL_527;
          }
          v511 = *v910;
        }
        else
        {
          v510 = *v507;
          *v13 = v510;
          if (v510 != 61)
            goto LABEL_527;
          *v13 = 0;
          *(_QWORD *)v14 = v509;
          v511 = *v509;
        }
        *v13 = v511;
        goto LABEL_887;
      case 0x60uLL:
        *((_BYTE *)a1 + 176) = 0;
        v438 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v438;
        if ((unint64_t)v438 < *((_QWORD *)a1 + 12))
          *v13 = *v438;
        v42 = 8;
        goto LABEL_527;
      case 0x7BuLL:
        *(_DWORD *)(a2 + 8) = *a1;
        *(_DWORD *)(a2 + 12) = a1[20] - a1[22];
        *(_DWORD *)(a2 + 16) = a1[28] - a1[22];
        *((_BYTE *)a1 + 176) = 0;
        v60 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v60;
        if ((unint64_t)v60 < *((_QWORD *)a1 + 12))
        {
          v42 = 0;
          goto LABEL_91;
        }
        v42 = 0;
        goto LABEL_527;
      case 0x7CuLL:
        v42 = 69632;
        *((_BYTE *)a1 + 176) = 0;
        v152 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v152 + 1;
        v153 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v152 + 1) < v153)
        {
          v154 = v152[1];
          *v13 = v154;
          if (v154 == 124)
          {
            *v13 = 0;
            *(_QWORD *)v14 = v152 + 2;
            if ((unint64_t)(v152 + 2) < v153 && (v155 = v152[2], *v13 = v155, v155 == 61))
            {
              *v13 = 0;
              v718 = v152 + 3;
              *(_QWORD *)v14 = v718;
              if ((unint64_t)v718 < v153)
                *v13 = *v718;
              v42 = 35;
            }
            else
            {
              v42 = 34816;
            }
          }
          else if (v154 == 61)
          {
            *v13 = 0;
            v240 = v152 + 2;
            *(_QWORD *)v14 = v240;
            if ((unint64_t)v240 < v153)
              *v13 = *v240;
            v42 = 33;
          }
        }
        goto LABEL_527;
      case 0x7DuLL:
        *(_DWORD *)(a2 + 8) = *a1;
        *(_DWORD *)(a2 + 12) = a1[20] - a1[22];
        *(_DWORD *)(a2 + 16) = a1[28] - a1[22];
        *((_BYTE *)a1 + 176) = 0;
        v58 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v58;
        if ((unint64_t)v58 < *((_QWORD *)a1 + 12))
          *v13 = *v58;
        v42 = 1;
        goto LABEL_527;
      case 0x7EuLL:
        *((_BYTE *)a1 + 176) = 0;
        v518 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v518;
        if ((unint64_t)v518 < *((_QWORD *)a1 + 12))
          *v13 = *v518;
        v42 = 261;
        goto LABEL_527;
      default:
        __break(0xC471u);
        JUMPOUT(0x19885F788);
    }
  }
}

_BYTE *JSC::Lexer<unsigned char>::record8(uint64_t a1, char a2)
{
  _BYTE *result;
  uint64_t v4;
  char v5;

  result = (_BYTE *)(a1 + 8);
  v5 = a2;
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    result = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (WTF *)(v4 + 1), (unint64_t)&v5);
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 20)) = *result;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v4) = a2;
  }
  ++*(_DWORD *)(a1 + 20);
  return result;
}

unsigned int *JSC::Lexer<unsigned char>::shiftLineTerminator(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  int v9;

  v1 = *result;
  v2 = *((_QWORD *)result + 10);
  v3 = result[22];
  v4 = v2 - v3;
  v5 = result[28] - v3;
  *((_QWORD *)result + 15) = v1 | (v4 << 32);
  result[32] = v5;
  v6 = *((unsigned __int8 *)result + 176);
  *((_BYTE *)result + 176) = 0;
  v7 = (_BYTE *)(v2 + 1);
  *((_QWORD *)result + 10) = v2 + 1;
  v8 = *((_QWORD *)result + 12);
  if (v2 + 1 < v8)
  {
    v9 = *v7;
    *((_BYTE *)result + 176) = v9;
    if (v6 == 13 && v9 == 10)
    {
      *((_BYTE *)result + 176) = 0;
      v7 = (_BYTE *)(v2 + 2);
      *((_QWORD *)result + 10) = v2 + 2;
      if (v2 + 2 < v8)
        *((_BYTE *)result + 176) = *v7;
    }
  }
  *result = v1 + 1;
  *((_QWORD *)result + 14) = v7;
  return result;
}

uint64_t JSC::Lexer<unsigned char>::invalidCharacterMessage(uint64_t result, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD v16[3];
  _BYTE v17[4];
  _DWORD __n[3];

  v2 = (_QWORD *)result;
  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  if (a2 <= 0xCu)
  {
    switch(a2)
    {
      case 0u:
        result = WTF::fastCompactMalloc((WTF *)0x20);
        v3 = result;
        *(_QWORD *)result = 0x1700000002;
        v4 = "Invalid character: '\\0'";
        goto LABEL_21;
      case 0xAu:
        result = WTF::fastCompactMalloc((WTF *)0x20);
        v3 = result;
        *(_QWORD *)result = 0x1700000002;
        v4 = "Invalid character: '\\n'";
        goto LABEL_21;
      case 0xBu:
        result = WTF::fastCompactMalloc((WTF *)0x20);
        v3 = result;
        *(_QWORD *)result = 0x1700000002;
        v4 = "Invalid character: '\\v'";
        goto LABEL_21;
    }
  }
  else if (a2 > 0x3Fu)
  {
    if (a2 == 64)
    {
      result = WTF::fastCompactMalloc((WTF *)0x20);
      v3 = result;
      *(_QWORD *)result = 0x1600000002;
      v4 = "Invalid character: '@'";
      goto LABEL_21;
    }
    if (a2 == 96)
    {
      result = WTF::fastCompactMalloc((WTF *)0x20);
      v3 = result;
      *(_QWORD *)result = 0x1600000002;
      goto LABEL_21;
    }
  }
  else
  {
    if (a2 == 13)
    {
      result = WTF::fastCompactMalloc((WTF *)0x20);
      v3 = result;
      *(_QWORD *)result = 0x1700000002;
      v4 = "Invalid character: '\\r'";
      goto LABEL_21;
    }
    if (a2 == 35)
    {
      result = WTF::fastCompactMalloc((WTF *)0x20);
      v3 = result;
      *(_QWORD *)result = 0x1600000002;
      v4 = "Invalid character: '#'";
LABEL_21:
      *(_QWORD *)(result + 8) = v4;
      *(_DWORD *)(result + 16) = 4;
LABEL_22:
      *v2 = v3;
      return result;
    }
  }
  v5 = a2;
  v6 = 15;
  do
  {
    *((_BYTE *)&v16[1] + v6-- + 4) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v5 & 0xF];
    v7 = v5 > 0xF;
    v5 >>= 4;
  }
  while (v7);
  if (v6 + 2 < 14)
  {
    v8 = (char *)&v16[1] + v6 + 5;
  }
  else
  {
    v8 = v17;
    result = (uint64_t)memset(v17, 48, v6 - 11);
  }
  v9 = __n - (_DWORD)v8;
  __n[0] = v9;
  if (v9 >= 0)
  {
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (!v10)
    {
      v12 = (v11 + 21);
      if (!__OFADD__(v11, 21))
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v12 + 20), v16);
        v3 = v16[0];
        if (v16[0])
        {
          *(_DWORD *)v16[0] = 2;
          *(_DWORD *)(v3 + 4) = v12;
          *(_QWORD *)(v3 + 8) = v3 + 20;
          *(_DWORD *)(v3 + 16) = 4;
          qmemcpy((void *)(v3 + 20), "Invalid character '\\u", 21);
          v13 = (_BYTE *)(v3 + 41);
          v14 = __n[0];
          v15 = (char *)__n - __n[0];
          if (__n[0] == 1)
          {
            *v13 = *v15;
          }
          else if (__n[0])
          {
            result = (uint64_t)memcpy((void *)(v3 + 41), v15, __n[0]);
          }
          v13[v14] = 39;
          goto LABEL_22;
        }
      }
    }
  }
  *v2 = 0;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Lexer<unsigned char>::scanRegExp(unsigned int *a1, char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  unint64_t v50;
  _WORD *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  const void *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  _QWORD *v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  unint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;

  if (a3)
    JSC::Lexer<unsigned char>::record16(a1, a3);
LABEL_3:
  v10 = 0;
LABEL_4:
  v11 = 0;
  while (1)
  {
    v12 = *((unsigned __int8 *)a1 + 176);
    if (v12 == 13)
      break;
    v46 = v11;
    if (*((_BYTE *)a1 + 176))
    {
      if (v12 == 10)
        break;
      v47 = *((_QWORD *)a1 + 10);
      v48 = *((_QWORD *)a1 + 12);
    }
    else
    {
      v47 = *((_QWORD *)a1 + 10);
      v48 = *((_QWORD *)a1 + 12);
      if (v47 == v48)
        break;
    }
    *((_BYTE *)a1 + 176) = 0;
    v49 = (_BYTE *)(v47 + 1);
    *((_QWORD *)a1 + 10) = v49;
    if ((unint64_t)v49 < v48)
      *((_BYTE *)a1 + 176) = *v49;
    v50 = a1[9];
    if (!((v12 != 47) | (v10 | v46) & 1))
    {
      v22 = *((_QWORD *)a1 + 24);
      if (!(_DWORD)v50)
      {
        v53 = (uint64_t *)(*(_QWORD *)(v22 + 41952) + 8);
        goto LABEL_56;
      }
      v18 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 3);
      v13 = *((_QWORD *)a1 + 23);
      v23 = *(unsigned __int16 *)v18;
      if (v23 < 0x80)
      {
        if ((_DWORD)v50 == 1)
          goto LABEL_90;
        v52 = v13 + 1048;
        v53 = *(uint64_t **)(v13 + 1048 + 8 * v23);
        if (v53 && WTF::equalInternal<char16_t>(*v53, *((_QWORD *)a1 + 3), a1[9]))
          goto LABEL_56;
        JSC::Identifier::add8(v22, v18, v50, a4, a5, a6, a7, a8, (unint64_t *)&v153);
        v22 = (unint64_t)v153;
        v54 = *(_QWORD *)v13;
        v55 = *(_QWORD *)v13 + 1;
        *(_QWORD *)v13 = v55;
        v56 = v54 >> 6;
        v57 = *(unsigned int *)(v13 + 20);
        if (v54 >> 6 >= v57)
        {
          v104 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
          v153 = v104;
          v105 = *(unsigned int *)(v13 + 20);
          if ((_DWORD)v105 == *(_DWORD *)(v13 + 16))
          {
            v110 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 8, v105 + 1, (unint64_t)&v153);
            v105 = *(unsigned int *)(v13 + 20);
            *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v105) = *v110;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v105) = v104;
          }
          v57 = (v105 + 1);
          *(_DWORD *)(v13 + 20) = v57;
          v55 = *(_QWORD *)v13;
          v54 = *(_QWORD *)v13 - 1;
          v56 = v54 >> 6;
        }
        if (v56 >= v57)
        {
          __break(0xC471u);
          JUMPOUT(0x198862FFCLL);
        }
        v58 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(*(_QWORD *)(v58 + 8 * v56) + 8 * (v54 & 0x3F)) = v22;
        v59 = v55 - 1;
        v60 = (unint64_t)(v55 - 1) >> 6;
        if (v60 >= v57)
        {
          __break(0xC471u);
          JUMPOUT(0x198863004);
        }
        goto LABEL_54;
      }
      JSC::Identifier::add8(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 3), a1[9], a4, a5, a6, a7, a8, (unint64_t *)&v153);
      v152 = v153;
      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v13, (uint64_t *)&v152);
      v142 = v152;
      v152 = 0;
      if (v142)
      {
        if (*(_DWORD *)v142 == 2)
        {
          WTF::StringImpl::~StringImpl(v142, v140, v141, a4, a5, a6, a7, a8);
          WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
        }
        else
        {
          *(_DWORD *)v142 -= 2;
        }
      }
      v143 = *(_QWORD *)v13 - 1;
      if (v143 >> 6 < *(unsigned int *)(v13 + 20))
      {
        v53 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * (v143 >> 6)) + 8 * (v143 & 0x3F));
        goto LABEL_56;
      }
      __break(0xC471u);
LABEL_152:
      JUMPOUT(0x19886287CLL);
    }
    if ((_DWORD)v50 == a1[8])
    {
      v111 = v50 + (v50 >> 2);
      if (v111 >= 0x10)
        v112 = v111 + 1;
      else
        v112 = 16;
      if (v112 <= v50 + 1)
        v113 = v50 + 1;
      else
        v113 = v112;
      if (v113 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198862E20);
      }
      v114 = (const void *)*((_QWORD *)a1 + 3);
      v115 = (void *)WTF::fastMalloc((WTF *)(2 * v113));
      a1[8] = v113;
      *((_QWORD *)a1 + 3) = v115;
      memcpy(v115, v114, 2 * v50);
      if (v114)
      {
        if (*((const void **)a1 + 3) == v114)
        {
          *((_QWORD *)a1 + 3) = 0;
          a1[8] = 0;
        }
        WTF::fastFree((unint64_t)v114, v116, v117, a4, a5, a6, a7, a8);
      }
      v50 = a1[9];
      v51 = (_WORD *)(*((_QWORD *)a1 + 3) + 2 * v50);
    }
    else
    {
      v51 = (_WORD *)(*((_QWORD *)a1 + 3) + 2 * v50);
    }
    v11 = 0;
    *v51 = v12;
    a1[9] = v50 + 1;
    if ((v46 & 1) == 0)
    {
      if (v12 == 92)
      {
        v11 = 1;
      }
      else
      {
        if (v12 == 91)
        {
          v10 = 1;
          goto LABEL_4;
        }
        v11 = 0;
        if (v12 == 93)
          goto LABEL_3;
      }
    }
  }
  v13 = 3145742;
  a1[9] = 0;
  v14 = *a1;
  v15 = *((_QWORD *)a1 + 11);
  v16 = *((_QWORD *)a1 + 10) - v15;
  v17 = a1[28] - v15;
  *((_DWORD *)a2 + 11) = v16;
  *((_DWORD *)a2 + 8) = v14;
  *((_DWORD *)a2 + 9) = v17;
  *(_QWORD *)(a2 + 60) = v14 | (v16 << 32);
  *((_DWORD *)a2 + 17) = v17;
  a1[15] = 3145742;
  *((_BYTE *)a1 + 150) = 1;
  v18 = (WTF::AtomStringImpl *)*((unsigned int *)a2 + 10);
  v19 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)a1 + 8) + 24))(**((_QWORD **)a1 + 8));
  if (v20 <= v18)
  {
    LODWORD(v22) = 0;
    v24 = 0x100000000;
    a2 = "";
    goto LABEL_15;
  }
  a2 = (char *)v19;
  v21 = v16 - (_DWORD)v18;
  if ((int)v20 - (int)v18 <= (v16 - (_DWORD)v18))
  {
    v21 = v20 - (_DWORD)v18;
    if (!(_DWORD)v18)
    {
      v22 = v20;
      goto LABEL_12;
    }
  }
  v22 = v21;
  v23 = v20 - (_QWORD)v18;
  if ((v20 & 0xFF00000000) == 0)
  {
    if (v23 < v22)
      goto LABEL_89;
    a2 = (char *)(v19 + 2 * (_QWORD)v18);
    goto LABEL_12;
  }
  if (v23 >= v22)
  {
    a2 = (char *)v18 + v19;
    v22 |= 0x100000000uLL;
LABEL_12:
    if ((v22 & 0x80000000) != 0)
      goto LABEL_35;
    v24 = v22;
LABEL_15:
    if (!__OFADD__((_DWORD)v22, 1))
    {
      v25 = (v22 + 42);
      if (!__OFADD__(v22 + 1, 41))
      {
        if ((v24 & 0xFF00000000) != 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v25 + 20), &v153);
          v33 = v153;
          if (v153)
          {
            *(_OWORD *)((char *)v153 + 20) = *(_OWORD *)"Unterminated regular expression literal '";
            *(_DWORD *)v33 = 2;
            *((_DWORD *)v33 + 1) = v25;
            *((_QWORD *)v33 + 1) = (char *)v33 + 20;
            *((_DWORD *)v33 + 4) = 4;
            qmemcpy((char *)v33 + 36, "ular expression literal '", 25);
            v34 = (char *)v33 + 61;
            if ((_DWORD)v22 == 1)
            {
              *v34 = *a2;
            }
            else if ((_DWORD)v22)
            {
              memcpy((char *)v33 + 61, a2, v24);
            }
            v34[v24] = 39;
            goto LABEL_22;
          }
        }
        else if (v25 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v25 + 20), &v153);
          v33 = v153;
          if (v153)
          {
            v45 = (char *)v153 + 20;
            *(_DWORD *)v153 = 2;
            *((_DWORD *)v33 + 1) = v25;
            *((_QWORD *)v33 + 1) = (char *)v33 + 20;
            *((_DWORD *)v33 + 4) = 0;
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(v45, (int8x16_t *)"Unterminated regular expression literal '", 41, a2, v24, 39);
LABEL_22:
            v35 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
            *((_QWORD *)a1 + 19) = v33;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
              {
                WTF::StringImpl::~StringImpl(v35, v26, v27, v28, v29, v30, v31, v32);
                WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
              }
              else
              {
                *(_DWORD *)v35 -= 2;
              }
            }
            return v13;
          }
        }
      }
    }
LABEL_35:
    __break(0xC471u);
    goto LABEL_152;
  }
  while (1)
  {
LABEL_89:
    while (1)
    {
      __break(1u);
LABEL_90:
      v52 = v13 + 24;
      v53 = *(uint64_t **)(v13 + 24 + 8 * v23);
      if (v53)
        break;
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v22 + 41968), v23, a4, a5, a6, a7, a8, &v153);
      v22 = (unint64_t)v153;
      v92 = *(_QWORD *)v13;
      v93 = *(_QWORD *)v13 + 1;
      *(_QWORD *)v13 = v93;
      v94 = v92 >> 6;
      v95 = *(unsigned int *)(v13 + 20);
      if (v92 >> 6 >= v95)
      {
        v120 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v153 = v120;
        v121 = *(unsigned int *)(v13 + 20);
        if ((_DWORD)v121 == *(_DWORD *)(v13 + 16))
        {
          v122 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 8, v121 + 1, (unint64_t)&v153);
          v121 = *(unsigned int *)(v13 + 20);
          *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v121) = *v122;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v121) = v120;
        }
        v95 = (v121 + 1);
        *(_DWORD *)(v13 + 20) = v95;
        v93 = *(_QWORD *)v13;
        v92 = *(_QWORD *)v13 - 1;
        v94 = v92 >> 6;
      }
      if (v94 >= v95)
      {
        __break(0xC471u);
        JUMPOUT(0x19886302CLL);
      }
      v58 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(*(_QWORD *)(v58 + 8 * v94) + 8 * (v92 & 0x3F)) = v22;
      v59 = v93 - 1;
      v60 = (unint64_t)(v93 - 1) >> 6;
      if (v60 >= v95)
      {
        __break(0xC471u);
        JUMPOUT(0x198862C98);
      }
LABEL_54:
      v23 = *(unsigned __int16 *)v18;
      if (v23 < 0x80)
      {
        v61 = 8 * (v59 & 0x3F);
        *(_QWORD *)(v52 + 8 * v23) = *(_QWORD *)(v58 + 8 * v60) + v61;
        v53 = (uint64_t *)(*(_QWORD *)(v58 + 8 * v60) + v61);
        break;
      }
    }
LABEL_56:
    *((_QWORD *)a2 + 1) = v53;
    a1[9] = 0;
    v62 = *((unsigned __int8 *)a1 + 176);
    if (JSC::typesOfLatin1Characters[v62] < 4u)
    {
      v63 = a1[5];
      do
      {
        LOBYTE(v153) = v62;
        if (v63 == a1[4])
          *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v63 + 1), (unint64_t)&v153);
        else
          *(_BYTE *)(*((_QWORD *)a1 + 1) + v63) = v62;
        v63 = a1[5] + 1;
        a1[5] = v63;
        *((_BYTE *)a1 + 176) = 0;
        v83 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v83;
        if ((unint64_t)v83 >= *((_QWORD *)a1 + 12))
        {
          v62 = 0;
        }
        else
        {
          v62 = *v83;
          *((_BYTE *)a1 + 176) = v62;
        }
      }
      while (JSC::typesOfLatin1Characters[v62] < 4u);
    }
    else
    {
      v63 = a1[5];
    }
    v64 = *((_QWORD *)a1 + 24);
    if (!v63)
    {
      v66 = (uint64_t *)(*(_QWORD *)(v64 + 41952) + 8);
      goto LABEL_62;
    }
    v18 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
    v22 = v63;
    v13 = *((_QWORD *)a1 + 23);
    if (*(char *)v18 < 0)
      break;
    v65 = *(unsigned __int8 *)v18;
    if (v63 == 1)
    {
      v22 = v13 + 24;
      v66 = *(uint64_t **)(v13 + 24 + 8 * v65);
      if (v66)
        goto LABEL_62;
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v64 + 41968), v65, a4, a5, a6, a7, a8, &v153);
      v84 = v153;
      v85 = (*(_QWORD *)v13)++;
      v86 = v85 >> 6;
      v87 = *(unsigned int *)(v13 + 20);
      if (v85 >> 6 >= v87)
      {
        v106 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v153 = v106;
        v107 = *(unsigned int *)(v13 + 20);
        if ((_DWORD)v107 == *(_DWORD *)(v13 + 16))
        {
          v118 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 8, v107 + 1, (unint64_t)&v153);
          v107 = *(unsigned int *)(v13 + 20);
          *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v107) = *v118;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v107) = v106;
        }
        v87 = (v107 + 1);
        *(_DWORD *)(v13 + 20) = v87;
        v85 = *(_QWORD *)v13 - 1;
        v86 = v85 >> 6;
      }
      if (v86 >= v87)
      {
        __break(0xC471u);
        JUMPOUT(0x19886301CLL);
      }
      v88 = *(_QWORD *)(v13 + 8);
      v89 = *(_QWORD *)(v88 + 8 * v86);
      v90 = v85 & 0x3F;
      *(_QWORD *)(v89 + 8 * v90) = v84;
      v91 = v85 >> 6;
      if (v91 >= v87)
      {
        __break(0xC471u);
        JUMPOUT(0x198863024);
      }
      v23 = *(char *)v18;
      if ((v23 & 0x80000000) == 0)
      {
        *(_QWORD *)(v22 + 8 * *(unsigned __int8 *)v18) = *(_QWORD *)(v88 + 8 * v91) + 8 * v90;
        v66 = (uint64_t *)(*(_QWORD *)(v88 + 8 * v91) + 8 * v90);
        goto LABEL_62;
      }
    }
    else
    {
      v66 = *(uint64_t **)(v13 + 1048 + 8 * v65);
      if (v66 && WTF::equalInternal<unsigned char>(*v66, *((_QWORD *)a1 + 1), v63))
        goto LABEL_62;
      JSC::Identifier::fromString(v64, v18, v22, a4, a5, a6, a7, a8, (rlim_t *)&v152);
      v72 = *(_QWORD *)v13;
      v73 = *(_QWORD *)v13 + 1;
      *(_QWORD *)v13 = v73;
      v74 = v72 >> 6;
      v75 = *(unsigned int *)(v13 + 20);
      if (v72 >> 6 >= v75)
      {
        v108 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v153 = v108;
        v109 = *(unsigned int *)(v13 + 20);
        if ((_DWORD)v109 == *(_DWORD *)(v13 + 16))
        {
          v119 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 8, v109 + 1, (unint64_t)&v153);
          v109 = *(unsigned int *)(v13 + 20);
          *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v109) = *v119;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v109) = v108;
        }
        v75 = (v109 + 1);
        *(_DWORD *)(v13 + 20) = v75;
        v73 = *(_QWORD *)v13;
        v72 = *(_QWORD *)v13 - 1;
        v74 = v72 >> 6;
      }
      if (v74 >= v75)
      {
        __break(0xC471u);
        JUMPOUT(0x19886300CLL);
      }
      v76 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v74);
      v77 = v152;
      v152 = 0;
      *(_QWORD *)(v76 + 8 * (v72 & 0x3F)) = v77;
      v78 = v152;
      v152 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
        {
          WTF::StringImpl::~StringImpl(v78, v70, v71, a4, a5, a6, a7, a8);
          WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
          v73 = *(_QWORD *)v13;
          LODWORD(v75) = *(_DWORD *)(v13 + 20);
        }
        else
        {
          *(_DWORD *)v78 -= 2;
        }
      }
      v79 = v73 - 1;
      v80 = (unint64_t)(v73 - 1) >> 6;
      if (v80 >= v75)
      {
        __break(0xC471u);
        JUMPOUT(0x198863014);
      }
      v23 = *(char *)v18;
      if ((v23 & 0x80000000) == 0)
      {
        v81 = *(_QWORD *)(v13 + 8);
        v82 = 8 * (v79 & 0x3F);
        *(_QWORD *)(v13 + 1048 + 8 * *(unsigned __int8 *)v18) = *(_QWORD *)(v81 + 8 * v80) + v82;
        v66 = (uint64_t *)(*(_QWORD *)(v81 + 8 * v80) + v82);
        goto LABEL_62;
      }
    }
  }
  JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), v63, a4, a5, a6, a7, a8, (rlim_t *)&v153);
  WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v13, (uint64_t *)&v153);
  v130 = v153;
  v153 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = *(_QWORD *)v13 - 1;
  if (v131 >> 6 >= *(unsigned int *)(v13 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x198863034);
  }
  v66 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * (v131 >> 6)) + 8 * (v131 & 0x3F));
LABEL_62:
  *((_QWORD *)a2 + 2) = v66;
  a1[5] = 0;
  *((_BYTE *)a1 + 149) = 0;
  v67 = *a1;
  v68 = *((_QWORD *)a1 + 11);
  v69 = *((_QWORD *)a1 + 10) - v68;
  LODWORD(v68) = a1[28] - v68;
  *((_DWORD *)a2 + 11) = v69;
  *((_DWORD *)a2 + 8) = v67;
  *((_DWORD *)a2 + 9) = v68;
  *(_QWORD *)(a2 + 60) = v67 | (v69 << 32);
  *((_DWORD *)a2 + 17) = v68;
  v13 = 16;
  a1[15] = 16;
  return v13;
}

_WORD *JSC::Lexer<unsigned char>::record16(_WORD *result, __int16 a2)
{
  uint64_t v2;
  __int16 v3;

  v3 = a2;
  v2 = *((unsigned int *)result + 9);
  if ((_DWORD)v2 == *((_DWORD *)result + 8))
    return WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>((uint64_t)(result + 12), (unint64_t)&v3);
  *(_WORD *)(*((_QWORD *)result + 3) + 2 * v2) = a2;
  *((_DWORD *)result + 9) = v2 + 1;
  return result;
}

void JSC::Lexer<unsigned char>::record16(uint64_t a1, __int16 a2)
{
  unint64_t v4;
  _WORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v4 != *(_DWORD *)(a1 + 32))
  {
    v5 = (_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v4);
LABEL_3:
    *v5 = a2;
    *(_DWORD *)(a1 + 36) = v4 + 1;
    return;
  }
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v4 + 1)
    v8 = v4 + 1;
  else
    v8 = v7;
  if (!(v8 >> 31))
  {
    v9 = *(const void **)(a1 + 24);
    v10 = (void *)WTF::fastMalloc((WTF *)(2 * v8));
    *(_DWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 24) = v10;
    memcpy(v10, v9, 2 * v4);
    if (v9)
    {
      if (*(const void **)(a1 + 24) == v9)
      {
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    v4 = *(unsigned int *)(a1 + 36);
    v5 = (_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v4);
    goto LABEL_3;
  }
  __break(0xC471u);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::String,char>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, __int16 a6@<W5>, int **i@<X8>)
{
  int8x16_t *v10;
  size_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  int *v20;
  int **v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char v33;
  int **v34;
  _BYTE *v35;
  char *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  size_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  char *v51;
  int8x16_t *v52;
  uint64_t v53;
  __int16 v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int16 v65;
  uint64_t v66;
  unsigned __int128 *v67;
  unsigned __int128 *v68;
  unsigned __int128 *v69;
  unsigned __int128 v70;
  char v71;
  __int16 v72;
  _DWORD *v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x2_t v82;

  v10 = (int8x16_t *)result;
  if (a2)
  {
    v12 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_86:
      JUMPOUT(0x19886353CLL);
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = *a5;
  if (*a5)
  {
    v14 = *(_DWORD *)(v13 + 4);
    if (v14 < 0)
      goto LABEL_75;
  }
  else
  {
    v14 = 0;
  }
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  v17 = v15;
  if ((a4 & 0x80000000) != 0)
    goto LABEL_75;
  if ((v17 & 1) != 0)
    goto LABEL_75;
  v15 = __OFADD__((_DWORD)a4, v16);
  v18 = a4 + v16;
  if (v15)
    goto LABEL_75;
  v19 = (v12 + v18);
  if (__OFADD__((_DWORD)v12, v18))
    goto LABEL_75;
  if ((a4 & 0xFF00000000) == 0 || v13 && (*(_BYTE *)(v13 + 16) & 4) == 0)
  {
    if ((_DWORD)v19)
    {
      if (v19 <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * v19 + 20), &v73);
        v20 = v73;
        if (v73)
        {
          v72 = a6;
          v21 = i;
          v22 = (char *)(v73 + 5);
          *v73 = 2;
          v20[1] = v19;
          *((_QWORD *)v20 + 1) = v20 + 5;
          v20[4] = 0;
          v23 = (char *)v20 + 2 * v12 + 20;
          if ((v12 & 0x7FFFFFC0) != 0)
          {
            v24 = &v22[2 * (v12 & 0x7FFFFFC0)];
            v25 = 0uLL;
            do
            {
              v74.val[0] = *v10;
              v26 = v10[1];
              v77.val[0] = v10[2];
              v27 = v10[3];
              v10 += 4;
              v28 = v27;
              v77.val[1] = 0uLL;
              v80.val[0] = v26;
              v74.val[1] = 0uLL;
              v29 = v22;
              vst2q_s8(v29, v74);
              v29 += 32;
              v80.val[1] = 0uLL;
              vst2q_s8(v29, v80);
              v30 = v22 + 64;
              vst2q_s8(v30, v77);
              v31 = v22 + 96;
              vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
              v22 += 128;
            }
            while (v22 != v24);
            v22 = v24;
          }
          while (v22 != v23)
          {
            v32 = v10->u8[0];
            v10 = (int8x16_t *)((char *)v10 + 1);
            *(_WORD *)v22 = v32;
            v22 += 2;
          }
          if ((a4 & 0xFF00000000) != 0)
          {
            if (a4 >= 0x40)
            {
              v36 = &v23[2 * (a4 & 0xFFFFFFC0)];
              v42 = 0uLL;
              v43 = (uint64_t)v20 + 2 * v12 + 20;
              do
              {
                v75.val[0] = *a3;
                v44 = a3[1];
                v78.val[0] = a3[2];
                v45 = a3[3];
                a3 += 4;
                v46 = v45;
                v78.val[1] = 0uLL;
                v81.val[0] = v44;
                v75.val[1] = 0uLL;
                v47 = (char *)v43;
                vst2q_s8(v47, v75);
                v47 += 32;
                v81.val[1] = 0uLL;
                vst2q_s8(v47, v81);
                v48 = (char *)(v43 + 64);
                vst2q_s8(v48, v78);
                v49 = (char *)(v43 + 96);
                vst2q_s8(v49, *(int8x16x2_t *)(&v42 - 1));
                v43 += 128;
              }
              while ((char *)v43 != v36);
            }
            else
            {
              v36 = (char *)v20 + 2 * v12 + 20;
            }
            while (v36 != &v23[2 * a4])
            {
              v50 = a3->u8[0];
              a3 = (int8x16_t *)((char *)a3 + 1);
              *(_WORD *)v36 = v50;
              v36 += 2;
            }
          }
          else if ((_DWORD)a4 == 1)
          {
            *(_WORD *)v23 = a3->i16[0];
          }
          else if ((_DWORD)a4)
          {
            result = (uint64_t)memcpy((char *)v20 + 2 * v12 + 20, a3, 2 * a4);
          }
          v51 = &v23[2 * a4];
          if (v13)
          {
            v52 = *(int8x16_t **)(v13 + 8);
            v53 = *(unsigned int *)(v13 + 4);
            i = v21;
            if ((*(_BYTE *)(v13 + 16) & 4) != 0)
            {
              v55 = &v51[2 * v53];
              v54 = v72;
              if (v53 >= 0x40)
              {
                v56 = &v51[2 * (v53 & 0xFFFFFFC0)];
                v57 = 0uLL;
                v58 = v51;
                do
                {
                  v76.val[0] = *v52;
                  v59 = v52[1];
                  v79.val[0] = v52[2];
                  v60 = v52[3];
                  v52 += 4;
                  v61 = v60;
                  v79.val[1] = 0uLL;
                  v82.val[0] = v59;
                  v76.val[1] = 0uLL;
                  v62 = v58;
                  vst2q_s8(v62, v76);
                  v62 += 32;
                  v82.val[1] = 0uLL;
                  vst2q_s8(v62, v82);
                  v63 = v58 + 64;
                  vst2q_s8(v63, v79);
                  v64 = v58 + 96;
                  vst2q_s8(v64, *(int8x16x2_t *)(&v57 - 1));
                  v58 += 128;
                }
                while (v58 != v56);
              }
              else
              {
                v56 = v51;
              }
              while (v56 != v55)
              {
                v65 = v52->u8[0];
                v52 = (int8x16_t *)((char *)v52 + 1);
                *(_WORD *)v56 = v65;
                v56 += 2;
              }
            }
            else
            {
              v54 = v72;
              if ((_DWORD)v53 == 1)
              {
                *(_WORD *)v51 = v52->i16[0];
              }
              else if ((_DWORD)v53)
              {
                result = (uint64_t)memcpy(v51, v52, 2 * v53);
              }
            }
            v66 = *(unsigned int *)(v13 + 4);
          }
          else
          {
            v66 = 0;
            i = v21;
            v54 = v72;
          }
          *(_WORD *)&v51[2 * v66] = v54;
          goto LABEL_68;
        }
      }
      goto LABEL_75;
    }
LABEL_72:
    v20 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_68;
  }
  if (!(_DWORD)v19)
    goto LABEL_72;
  if ((v19 & 0x80000000) != 0 || (result = WTF::tryFastCompactMalloc((WTF *)(v19 + 20), &v73), (v20 = v73) == 0))
  {
LABEL_75:
    *i = 0;
    __break(0xC471u);
    goto LABEL_86;
  }
  v33 = a6;
  v34 = i;
  v35 = v73 + 5;
  *v73 = 2;
  v20[1] = v19;
  *((_QWORD *)v20 + 1) = v20 + 5;
  v20[4] = 4;
  if ((_DWORD)v12 == 1)
  {
    *v35 = v10->i8[0];
  }
  else if ((_DWORD)v12)
  {
    result = (uint64_t)memcpy(v20 + 5, v10, v12);
  }
  v37 = &v35[v12];
  if ((_DWORD)a4 == 1)
  {
    *v37 = a3->i8[0];
    i = v34;
  }
  else
  {
    i = v34;
    if ((_DWORD)a4)
      result = (uint64_t)memcpy(v37, a3, a4);
  }
  v38 = &v37[a4];
  if (v13)
  {
    v39 = *(_BYTE **)(v13 + 8);
    v40 = *(unsigned int *)(v13 + 4);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if ((_DWORD)v40 == 1)
      {
        *v38 = *v39;
      }
      else if ((_DWORD)v40)
      {
        result = (uint64_t)memcpy(v38, v39, v40);
      }
    }
    else
    {
      v67 = (unsigned __int128 *)&v38[v40];
      if (v40 < 0x10)
      {
        v68 = (unsigned __int128 *)v38;
      }
      else
      {
        v68 = (unsigned __int128 *)&v38[v40 & 0xFFFFFFF0];
        v69 = (unsigned __int128 *)v38;
        do
        {
          v70 = (unsigned __int128)vld2q_s8(v39);
          v39 += 32;
          *v69++ = v70;
        }
        while (v69 != v68);
      }
      for (i = v34; v68 != v67; v68 = (unsigned __int128 *)((char *)v68 + 1))
      {
        v71 = *v39;
        v39 += 2;
        *(_BYTE *)v68 = v71;
      }
    }
    v41 = *(unsigned int *)(v13 + 4);
  }
  else
  {
    v41 = 0;
  }
  v38[v41] = v33;
LABEL_68:
  *i = v20;
  return result;
}

uint64_t JSC::Lexer<unsigned char>::scanTemplateString(unsigned int *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  WTF::StringImpl *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  __int16 v19;
  char *v20;
  int64_t v21;
  __int16 v22;
  _WORD *v23;
  int64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  int v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  int v41;
  char *v42;
  char *v43;
  unsigned __int8 *v44;
  __int16 v45;
  unint64_t v47;
  uint64_t v48;
  _WORD *v49;
  uint64_t v50;
  unint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint8x8_t *v90;
  uint16x8_t *v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t v94;
  _QWORD *v95;
  _BYTE *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint8x8_t *v108;
  uint16x8_t *v109;
  unint64_t v110;
  uint8x16_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _WORD *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int64_t v162;
  unint64_t v163;
  _QWORD *v164;
  _WORD *v165;
  __int16 v166;
  _WORD *v167;
  _QWORD *v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  WTF::StringImpl *v188;
  int64_t v189;
  char v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t v193;
  _WORD *v194;
  __int16 v195;
  unint64_t v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  unint64_t v199;
  WTF::AtomStringImpl *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  unint64_t v208;
  uint64_t v209;
  WTF::AtomStringImpl *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  WTF::AtomStringImpl *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  _QWORD *v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  unsigned int v269;
  _BYTE *v270;
  int v271;
  unsigned int v272;
  char v273;
  char v274;
  char v275;
  __int16 v276;
  _BYTE *v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  WTF::AtomStringImpl *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  const char *v286;
  WTF::StringImpl *v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  const void **v299;
  const void **v300;
  unsigned int v301;
  char v302;
  unsigned int v303;
  _QWORD *v304;
  _QWORD *v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  WTF::StringImpl *v311;

  v10 = 0;
  v309 = *a1;
  v11 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
  v307 = *((_QWORD *)a1 + 11);
  v308 = *((_QWORD *)a1 + 14);
  v12 = a1 + 10;
  v13 = (uint64_t)(a1 + 6);
  v14 = JSC::singleCharacterEscapeValuesForASCII;
  v15 = v11;
LABEL_2:
  v16 = *((unsigned __int8 *)a1 + 176);
  while (1)
  {
    switch(v16)
    {
      case '$':
        v18 = *((_QWORD *)a1 + 10);
        if (v18 + 1 < *((_QWORD *)a1 + 12) && *(_BYTE *)(v18 + 1) == 123)
          goto LABEL_32;
        goto LABEL_7;
        v18 = *((_QWORD *)a1 + 10);
LABEL_32:
        v34 = v18 - (_QWORD)v15;
        LOBYTE(v306) = v16 == 96;
        if ((WTF::StringImpl *)v18 == v15)
        {
          v41 = a3;
          goto LABEL_42;
        }
        if ((uint64_t)(v18 - (_QWORD)v15) < 0)
          goto LABEL_195;
        v35 = a1[8];
        v36 = a1[9];
        v37 = v34 + v36;
        v38 = (char *)*((_QWORD *)a1 + 3);
        if (v34 + v36 > v35)
        {
          v299 = (const void **)v13;
          v302 = v10;
          v304 = v12;
          v128 = v35 + (v35 >> 2);
          if (v128 >= 0x10)
            v129 = v128 + 1;
          else
            v129 = 16;
          if (v129 <= v37)
            v130 = v34 + v36;
          else
            v130 = v129;
          if (v130 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198864364);
          }
          v301 = v130;
          v131 = (void *)WTF::fastMalloc((WTF *)(2 * v130));
          a1[8] = v301;
          *((_QWORD *)a1 + 3) = v131;
          memcpy(v131, v38, 2 * v36);
          v39 = (char *)*((_QWORD *)a1 + 3);
          v12 = v304;
          LOBYTE(v10) = v302;
          if (v38)
          {
            if (v39 == v38)
            {
              *((_QWORD *)a1 + 3) = 0;
              a1[8] = 0;
            }
            WTF::fastFree((unint64_t)v38, v132, v133, a4, a5, a6, a7, a8);
            v39 = (char *)*v299;
            v12 = v304;
            LOBYTE(v10) = v302;
          }
        }
        else
        {
          v39 = (char *)*((_QWORD *)a1 + 3);
        }
        a1[9] = v37;
        if (v34 < 8)
        {
          v40 = 0;
          v41 = a3;
          goto LABEL_38;
        }
        v41 = a3;
        if ((unint64_t)&v39[2 * v36] < v18 && v15 < (WTF::StringImpl *)&v39[2 * (v18 + v36 - (_QWORD)v15)])
        {
          v40 = 0;
          goto LABEL_38;
        }
        if (v34 >= 0x20)
        {
          v40 = v34 & 0xFFFFFFFFFFFFFFE0;
          v108 = (uint8x8_t *)((char *)v15 + 16);
          v109 = (uint16x8_t *)&v39[2 * v36 + 32];
          v110 = v34 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v111 = *(uint8x16_t *)v108[-2].i8;
            v112 = vmovl_u8(*v108);
            v113 = vmovl_high_u8(*(uint8x16_t *)v108->i8);
            v109[-2] = vmovl_u8(*(uint8x8_t *)v111.i8);
            v109[-1] = vmovl_high_u8(v111);
            *v109 = v112;
            v109[1] = v113;
            v109 += 4;
            v108 += 4;
            v110 -= 32;
          }
          while (v110);
          if (v34 != v40)
          {
            if ((v34 & 0x18) == 0)
              goto LABEL_38;
            goto LABEL_80;
          }
        }
        else
        {
          v40 = 0;
LABEL_80:
          v89 = v40;
          v40 = v34 & 0xFFFFFFFFFFFFFFF8;
          v90 = (uint8x8_t *)((char *)v15 + v89);
          v91 = (uint16x8_t *)&v39[2 * v89 + 2 * v36];
          v92 = v89 - (v34 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v93 = *v90++;
            *v91++ = vmovl_u8(v93);
            v92 += 8;
          }
          while (v92);
          if (v34 != v40)
          {
LABEL_38:
            v42 = (char *)v15 + v40 - v18;
            v43 = &v39[2 * v40 + 2 * v36];
            v44 = (unsigned __int8 *)v15 + v40;
            do
            {
              v45 = *v44++;
              *(_WORD *)v43 = v45;
              v43 += 2;
            }
            while (!__CFADD__(v42++, 1));
          }
        }
        v15 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
LABEL_42:
        if (!v41 && v11 != v15)
        {
          v189 = v15 - v11;
          if (v15 - v11 >= 0)
          {
            v190 = v10;
            v191 = v12;
            v192 = a1[13];
            v193 = v189 + v192;
            if (v189 + v192 > a1[12])
            {
              WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v189 + v192);
              v192 = a1[13];
              if (v193 < v192)
              {
                __break(0xC471u);
                JUMPOUT(0x19886431CLL);
              }
            }
            v194 = (_WORD *)(*v191 + 2 * v192);
            do
            {
              v195 = *(unsigned __int8 *)v11;
              v11 = (WTF::StringImpl *)((char *)v11 + 1);
              *v194++ = v195;
              --v189;
            }
            while (v189);
            a1[13] = v193;
            v41 = a3;
            LOBYTE(v10) = v190;
            goto LABEL_44;
          }
          goto LABEL_195;
        }
LABEL_44:
        if ((v10 & 1) != 0)
        {
          v15 = 0;
          goto LABEL_55;
        }
        v47 = a1[9];
        v48 = *((_QWORD *)a1 + 24);
        if (!(_DWORD)v47)
        {
          v15 = (WTF::StringImpl *)(*(_QWORD *)(v48 + 41952) + 8);
          goto LABEL_55;
        }
        v49 = (_WORD *)*((_QWORD *)a1 + 3);
        v50 = *((_QWORD *)a1 + 23);
        v51 = (unsigned __int16)*v49;
        if (v51 >= 0x80)
        {
          if ((_DWORD)v47 == 1 && v51 <= 0xFF)
          {
            JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v48 + 41968), *v49, a4, a5, a6, a7, a8, &v311);
            v54 = v311;
          }
          else
          {
            WTF::AtomStringImpl::add(*((_QWORD *)a1 + 3), a1[9], a4, a5, a6, a7, a8, &v311);
            v54 = v311;
            v55 = *(_DWORD *)v311;
            *(_DWORD *)v311 += 2;
            if (v55)
            {
              *(_DWORD *)v54 = v55;
            }
            else
            {
              WTF::StringImpl::~StringImpl(v54, v52, v53, a4, a5, a6, a7, a8);
              WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
            }
          }
          v56 = *(_QWORD *)v50;
          v57 = *(_QWORD *)v50 + 1;
          *(_QWORD *)v50 = v57;
          v58 = v56 >> 6;
          v59 = *(unsigned int *)(v50 + 20);
          if (v56 >> 6 >= v59)
          {
            v142 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
            v311 = v142;
            v143 = *(unsigned int *)(v50 + 20);
            if ((_DWORD)v143 == *(_DWORD *)(v50 + 16))
            {
              v144 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 8, v143 + 1, (unint64_t)&v311);
              v143 = *(unsigned int *)(v50 + 20);
              *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8 * v143) = *v144;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8 * v143) = v142;
            }
            v59 = (v143 + 1);
            *(_DWORD *)(v50 + 20) = v59;
            v57 = *(_QWORD *)v50;
            v56 = *(_QWORD *)v50 - 1;
            v58 = v56 >> 6;
          }
          if (v58 >= v59)
          {
            __break(0xC471u);
            JUMPOUT(0x19886433CLL);
          }
          v60 = *(_QWORD *)(v50 + 8);
          *(_QWORD *)(*(_QWORD *)(v60 + 8 * v58) + 8 * (v56 & 0x3F)) = v54;
          v61 = v57 - 1;
          if (v61 >> 6 >= v59)
          {
            __break(0xC471u);
            JUMPOUT(0x198864344);
          }
          v15 = (WTF::StringImpl *)(*(_QWORD *)(v60 + 8 * (v61 >> 6)) + 8 * (v61 & 0x3F));
LABEL_55:
          *(_QWORD *)(a2 + 8) = v15;
          if (v41)
          {
            v62 = 0;
            goto LABEL_57;
          }
          v196 = a1[13];
          v15 = (WTF::StringImpl *)*((_QWORD *)a1 + 24);
          if ((_DWORD)v196)
          {
            v197 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 5);
            v198 = *((_QWORD *)a1 + 23);
            v199 = *(unsigned __int16 *)v197;
            if (v199 >= 0x80)
            {
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 5), a1[13], a4, a5, a6, a7, a8, &v311);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v198, (uint64_t *)&v311);
              v207 = v311;
              v311 = 0;
              if (v207)
              {
                if (*(_DWORD *)v207 == 2)
                {
                  WTF::StringImpl::~StringImpl(v207, v200, v201, v202, v203, v204, v205, v206);
                  WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
                }
                else
                {
                  *(_DWORD *)v207 -= 2;
                }
              }
              v208 = *(_QWORD *)v198 - 1;
              if (v208 >> 6 >= *(unsigned int *)(v198 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x198864674);
              }
              v62 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v198 + 8) + 8 * (v208 >> 6)) + 8 * (v208 & 0x3F));
              goto LABEL_57;
            }
            if ((_DWORD)v196 == 1)
            {
              v209 = v198 + 24;
              v62 = *(uint64_t **)(v198 + 24 + 8 * v199);
              if (v62)
                goto LABEL_57;
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 5), a1[13], a4, a5, a6, a7, a8, &v311);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v198, (uint64_t *)&v311);
              v230 = v311;
              v311 = 0;
              if (v230)
              {
                if (*(_DWORD *)v230 == 2)
                {
                  WTF::StringImpl::~StringImpl(v230, v223, v224, v225, v226, v227, v228, v229);
                  WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
                }
                else
                {
                  *(_DWORD *)v230 -= 2;
                }
              }
              v218 = *(_QWORD *)v198 - 1;
              v219 = v218 >> 6;
              if (v218 >> 6 >= *(unsigned int *)(v198 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x1988642CCLL);
              }
            }
            else
            {
              v209 = v198 + 1048;
              v62 = *(uint64_t **)(v198 + 1048 + 8 * v199);
              if (v62 && WTF::equalInternal<char16_t>(*v62, *((_QWORD *)a1 + 5), a1[13]))
              {
LABEL_57:
                *(_QWORD *)(a2 + 16) = v62;
                *(_BYTE *)(a2 + 24) = v306;
                a1[9] = 0;
                a1[13] = 0;
                *((_BYTE *)a1 + 176) = 0;
                v63 = *((_QWORD *)a1 + 10);
                if (v16 == 96)
                {
                  v65 = (_BYTE *)(v63 + 1);
                  *((_QWORD *)a1 + 10) = v65;
                  v64 = *((_QWORD *)a1 + 12);
                }
                else
                {
                  v64 = *((_QWORD *)a1 + 12);
                  v65 = (_BYTE *)(v63 + 2);
                  *((_QWORD *)a1 + 10) = v65;
                }
                v66 = v309;
                v68 = v307;
                v67 = v308;
                if ((unint64_t)v65 < v64)
                  *((_BYTE *)a1 + 176) = *v65;
                v69 = 15;
                goto LABEL_62;
              }
              JSC::Identifier::fromString((uint64_t)v15, v197, v196, a4, a5, a6, a7, a8, &v311);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v198, (uint64_t *)&v311);
              v217 = v311;
              v311 = 0;
              if (v217)
              {
                if (*(_DWORD *)v217 == 2)
                {
                  WTF::StringImpl::~StringImpl(v217, v210, v211, v212, v213, v214, v215, v216);
                  WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
                }
                else
                {
                  *(_DWORD *)v217 -= 2;
                }
              }
              v218 = *(_QWORD *)v198 - 1;
              v219 = v218 >> 6;
              if (v218 >> 6 >= *(unsigned int *)(v198 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x19886467CLL);
              }
            }
            v220 = *(unsigned __int16 *)v197;
            if (v220 < 0x80)
            {
              v221 = *(_QWORD *)(v198 + 8);
              v222 = 8 * (v218 & 0x3F);
              *(_QWORD *)(v209 + 8 * v220) = *(_QWORD *)(v221 + 8 * v219) + v222;
              v62 = (uint64_t *)(*(_QWORD *)(v221 + 8 * v219) + v222);
              goto LABEL_57;
            }
LABEL_195:
            __break(1u);
          }
          v62 = (uint64_t *)(*((_QWORD *)v15 + 5244) + 8);
          goto LABEL_57;
        }
        if ((_DWORD)v47 == 1)
        {
          v75 = v50 + 24;
          v15 = *(WTF::StringImpl **)(v50 + 24 + 8 * v51);
          if (v15)
            goto LABEL_55;
          JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v48 + 41968), *v49, a4, a5, a6, a7, a8, &v311);
          v15 = v311;
          v114 = *(_QWORD *)v50;
          v115 = *(_QWORD *)v50 + 1;
          *(_QWORD *)v50 = v115;
          v116 = v114 >> 6;
          v117 = *(unsigned int *)(v50 + 20);
          if (v114 >> 6 >= v117)
          {
            v169 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
            v311 = v169;
            v170 = *(unsigned int *)(v50 + 20);
            if ((_DWORD)v170 == *(_DWORD *)(v50 + 16))
            {
              v171 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 8, v170 + 1, (unint64_t)&v311);
              v170 = *(unsigned int *)(v50 + 20);
              *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8 * v170) = *v171;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8 * v170) = v169;
            }
            v117 = (v170 + 1);
            *(_DWORD *)(v50 + 20) = v117;
            v115 = *(_QWORD *)v50;
            v114 = *(_QWORD *)v50 - 1;
            v116 = v114 >> 6;
          }
          if (v116 >= v117)
          {
            __break(0xC471u);
            JUMPOUT(0x19886435CLL);
          }
          v84 = *(_QWORD *)(v50 + 8);
          *(_QWORD *)(*(_QWORD *)(v84 + 8 * v116) + 8 * (v114 & 0x3F)) = v15;
          v85 = v115 - 1;
          v86 = (unint64_t)(v115 - 1) >> 6;
          if (v86 >= v117)
          {
            __break(0xC471u);
            JUMPOUT(0x198863C50);
          }
        }
        else
        {
          v75 = v50 + 1048;
          v15 = *(WTF::StringImpl **)(v50 + 1048 + 8 * v51);
          if (v15 && WTF::equalInternal<char16_t>(*(_QWORD *)v15, *((_QWORD *)a1 + 3), a1[9]))
            goto LABEL_55;
          WTF::AtomStringImpl::add((uint64_t)v49, v47, a4, a5, a6, a7, a8, &v311);
          v78 = v311;
          v79 = *(_DWORD *)v311;
          *(_DWORD *)v311 += 2;
          if (v79)
          {
            *(_DWORD *)v78 = v79;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v78, v76, v77, a4, a5, a6, a7, a8);
            WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
          }
          v80 = *(_QWORD *)v50;
          v81 = *(_QWORD *)v50 + 1;
          *(_QWORD *)v50 = v81;
          v82 = v80 >> 6;
          v83 = *(unsigned int *)(v50 + 20);
          if (v80 >> 6 >= v83)
          {
            v15 = (WTF::StringImpl *)(v50 + 8);
            v158 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
            v311 = v158;
            v159 = *(unsigned int *)(v50 + 20);
            if ((_DWORD)v159 == *(_DWORD *)(v50 + 16))
            {
              v168 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 8, v159 + 1, (unint64_t)&v311);
              v159 = *(unsigned int *)(v50 + 20);
              *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8 * v159) = *v168;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v15 + 8 * v159) = v158;
            }
            v83 = (v159 + 1);
            *(_DWORD *)(v50 + 20) = v83;
            v81 = *(_QWORD *)v50;
            v80 = *(_QWORD *)v50 - 1;
            v82 = v80 >> 6;
          }
          if (v82 >= v83)
          {
            __break(0xC471u);
            JUMPOUT(0x19886434CLL);
          }
          v84 = *(_QWORD *)(v50 + 8);
          *(_QWORD *)(*(_QWORD *)(v84 + 8 * v82) + 8 * (v80 & 0x3F)) = v78;
          v85 = v81 - 1;
          v86 = (unint64_t)(v81 - 1) >> 6;
          if (v86 >= v83)
          {
            __break(0xC471u);
            JUMPOUT(0x198864354);
          }
        }
        v87 = (unsigned __int16)*v49;
        if (v87 < 0x80)
        {
          v88 = 8 * (v85 & 0x3F);
          *(_QWORD *)(v75 + 8 * v87) = *(_QWORD *)(v84 + 8 * v86) + v88;
          v15 = (WTF::StringImpl *)(*(_QWORD *)(v84 + 8 * v86) + v88);
          goto LABEL_55;
        }
        goto LABEL_195;
      case '\\':
        v25 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
        if (v15 == v25)
        {
          v104 = v13;
        }
        else
        {
          v21 = v25 - v15;
          if (v25 - v15 < 0)
            goto LABEL_195;
          v99 = a1[8];
          v100 = a1[9];
          v101 = v21 + v100;
          v102 = (char *)*((_QWORD *)a1 + 3);
          if (v21 + v100 > v99)
          {
            v300 = (const void **)v13;
            v303 = v10;
            v305 = v12;
            v147 = v99 + (v99 >> 2);
            if (v147 >= 0x10)
              v148 = v147 + 1;
            else
              v148 = 16;
            if (v148 <= v101)
              v149 = v21 + v100;
            else
              v149 = v148;
            if (v149 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x19886432CLL);
            }
            v306 = v149;
            v150 = (void *)WTF::fastMalloc((WTF *)(2 * v149));
            a1[8] = v306;
            *((_QWORD *)a1 + 3) = v150;
            memcpy(v150, v102, 2 * v100);
            v103 = (char *)*((_QWORD *)a1 + 3);
            v12 = v305;
            v10 = v303;
            v13 = (uint64_t)v300;
            if (v102)
            {
              if (v103 == v102)
              {
                *((_QWORD *)a1 + 3) = 0;
                a1[8] = 0;
              }
              WTF::fastFree((unint64_t)v102, v151, v152, v153, v154, v155, v156, v157);
              v13 = (uint64_t)v300;
              v103 = (char *)*v300;
              v12 = v305;
              v10 = v303;
            }
          }
          else
          {
            v103 = (char *)*((_QWORD *)a1 + 3);
          }
          a1[9] = v101;
          v20 = &v103[2 * v100];
          do
          {
            v19 = *(unsigned __int8 *)v15;
            v15 = (WTF::StringImpl *)((char *)v15 + 1);
            *(_WORD *)v20 = v19;
            v20 += 2;
            --v21;
          }
          while (v21);
          v104 = v13;
          v15 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
        }
        *((_BYTE *)a1 + 176) = 0;
        v26 = (WTF::StringImpl *)((char *)v15 + 1);
        *((_QWORD *)a1 + 10) = (char *)v15 + 1;
        v27 = *((_QWORD *)a1 + 12);
        if ((unint64_t)v15 + 1 < v27)
        {
          v28 = *(char *)v26;
          *((_BYTE *)a1 + 176) = *(_BYTE *)v26;
          if ((v28 & 0x80000000) == 0)
            goto LABEL_20;
          goto LABEL_131;
        }
        v28 = 0;
LABEL_20:
        if (v14[v28])
        {
          v94 = v10;
          v95 = v12;
          JSC::Lexer<unsigned char>::record16((uint64_t)a1, v14[v28]);
          *((_BYTE *)a1 + 176) = 0;
          v96 = (_BYTE *)(*((_QWORD *)a1 + 10) + 1);
          *((_QWORD *)a1 + 10) = v96;
          if ((unint64_t)v96 < *((_QWORD *)a1 + 12))
            *((_BYTE *)a1 + 176) = *v96;
          v12 = v95;
          v10 = v94;
LABEL_22:
          v13 = v104;
          goto LABEL_23;
        }
LABEL_131:
        if (v28 == 13)
        {
          v145 = v10;
          v146 = v12;
          if (!a3)
          {
            v161 = a1[12];
            v160 = a1[13];
            v162 = v26 - v11;
            if (v26 == v11)
            {
              v164 = v12;
            }
            else
            {
              v163 = v162 + v160;
              v164 = v12;
              if (v162 + v160 > v161)
              {
                WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v162 + v160);
                v164 = v146;
                v160 = a1[13];
              }
              if (v163 < v160)
              {
                __break(0xC471u);
                JUMPOUT(0x198864334);
              }
              v165 = (_WORD *)(*v164 + 2 * v160);
              do
              {
                v166 = *(unsigned __int8 *)v11;
                v11 = (WTF::StringImpl *)((char *)v11 + 1);
                *v165++ = v166;
                --v162;
              }
              while (v162);
              a1[13] = v163;
              LODWORD(v161) = a1[12];
              LODWORD(v160) = v163;
            }
            if ((_DWORD)v160 == (_DWORD)v161)
            {
              WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v164, v160 + 1);
              v160 = a1[13];
              v167 = (_WORD *)(*((_QWORD *)a1 + 5) + 2 * v160);
            }
            else
            {
              v167 = (_WORD *)(*v164 + 2 * v160);
            }
            *v167 = 10;
            a1[13] = v160 + 1;
          }
          JSC::Lexer<unsigned char>::shiftLineTerminator(a1);
          v11 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
          v12 = v146;
          v10 = v145;
          goto LABEL_22;
        }
        v263 = v14;
        v264 = v10;
        v265 = v12;
        switch(v28)
        {
          case 0xAu:
            JSC::Lexer<unsigned char>::shiftLineTerminator(a1);
            goto LABEL_221;
          case 0x75u:
            *((_BYTE *)a1 + 176) = 0;
            *((_QWORD *)a1 + 10) = (char *)v15 + 2;
            if ((unint64_t)v15 + 2 < v27)
              *((_BYTE *)a1 + 176) = *((_BYTE *)v15 + 2);
            v266 = JSC::Lexer<unsigned char>::parseUnicodeEscape((uint64_t)a1);
            if (v266 <= 0xFFFFFFFD)
            {
              v267 = v266;
              if (!HIWORD(v266))
              {
                LOWORD(v311) = v266;
                v268 = a1[9];
                if ((_DWORD)v268 != a1[8])
                {
                  *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v268) = v266;
                  a1[9] = v268 + 1;
                  goto LABEL_221;
                }
                WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>(v104, (unint64_t)&v311);
                v13 = v104;
                v12 = v265;
                v10 = v264;
LABEL_223:
                v14 = v263;
LABEL_23:
                v15 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
                goto LABEL_2;
              }
              v279 = a1[9];
              v280 = v279 + 2;
              if (v279 + 2 > a1[8])
              {
                WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v104, v279 + 2);
                v279 = a1[9];
                if (v280 < v279)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19886469CLL);
                }
              }
              *(_DWORD *)(*((_QWORD *)a1 + 3) + 2 * v279) = (unsigned __int16)((v267 >> 10) - 10304) | ((v267 & 0x3FF) << 16) | 0xDC000000;
              a1[9] = v280;
LABEL_221:
              v12 = v265;
              v10 = v264;
LABEL_222:
              v13 = v104;
              goto LABEL_223;
            }
            v281 = WTF::fastCompactMalloc((WTF *)0x20);
            v284 = v281;
            v285 = 0x3700000002;
            v286 = "\\u can only be followed by a Unicode character sequence";
LABEL_264:
            *(_QWORD *)v281 = v285;
            *(_QWORD *)(v281 + 8) = v286;
            *(_DWORD *)(v281 + 16) = 4;
            v287 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
            *((_QWORD *)a1 + 19) = v284;
            if (v287)
            {
              if (*(_DWORD *)v287 == 2)
              {
                WTF::StringImpl::~StringImpl(v287, v282, v283, a4, a5, a6, a7, a8);
                WTF::fastFree(v291, v292, v293, v294, v295, v296, v297, v298);
              }
              else
              {
                *(_DWORD *)v287 -= 2;
              }
            }
            if (*((_BYTE *)a1 + 176))
            {
              if (a3)
              {
                v69 = 1048591;
                goto LABEL_172;
              }
            }
            else if (a3 || *((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
            {
              if (*((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
                v69 = 3145741;
              else
                v69 = 1048591;
              goto LABEL_172;
            }
            v10 = 1;
            v12 = v265;
            goto LABEL_222;
          case 0x78u:
            *((_BYTE *)a1 + 176) = 0;
            *((_QWORD *)a1 + 10) = (char *)v15 + 2;
            if ((unint64_t)v15 + 2 >= v27)
            {
              v269 = 0;
            }
            else
            {
              v269 = *((unsigned __int8 *)v15 + 2);
              *((_BYTE *)a1 + 176) = v269;
            }
            if (v269 - 48 < 0xA || ((v269 | 0x20) - 97) <= 5u)
            {
              v270 = (char *)v15 + 3;
              if ((unint64_t)v15 + 3 >= v27)
                v271 = 0;
              else
                v271 = *v270;
              *((_BYTE *)a1 + 176) = 0;
              *((_QWORD *)a1 + 10) = v270;
              if ((v271 - 48) < 0xA || (v271 | 0x20u) - 97 < 6)
              {
                if ((unint64_t)v270 >= v27)
                {
                  v272 = 0;
                }
                else
                {
                  v272 = *v270;
                  *((_BYTE *)a1 + 176) = v272;
                }
                if (v269 >= 0x41)
                  v273 = 9;
                else
                  v273 = 0;
                v274 = v273 + v269;
                if (v272 >= 0x41)
                  v275 = (v272 + 9) & 0xF;
                else
                  v275 = v272 - 48;
                v276 = (v275 | (16 * v274));
                goto LABEL_249;
              }
              if ((unint64_t)v270 < v27)
                *((_BYTE *)a1 + 176) = *v270;
            }
            v281 = WTF::fastCompactMalloc((WTF *)0x20);
            v284 = v281;
            v285 = 0x3300000002;
            v286 = "\\x can only be followed by a hex character sequence";
            goto LABEL_264;
        }
        if ((v28 - 48) <= 9)
        {
          *((_BYTE *)a1 + 176) = 0;
          *((_QWORD *)a1 + 10) = (char *)v15 + 2;
          if ((unint64_t)v15 + 2 >= v27)
          {
            v278 = 0;
          }
          else
          {
            v278 = *((unsigned __int8 *)v15 + 2);
            *((_BYTE *)a1 + 176) = v278;
          }
          if (v28 == 48)
          {
            if ((v278 - 48) > 9)
            {
              JSC::Lexer<unsigned char>::record16(a1, 0);
              goto LABEL_221;
            }
            *((_BYTE *)a1 + 176) = 0;
            *((_QWORD *)a1 + 10) = (char *)v15 + 3;
            if ((unint64_t)v15 + 3 < v27)
              *((_BYTE *)a1 + 176) = *((_BYTE *)v15 + 3);
          }
          v281 = WTF::fastCompactMalloc((WTF *)0x20);
          v284 = v281;
          v285 = 0x3400000002;
          v286 = "The only valid numeric escape in strict mode is '\\0'";
          goto LABEL_264;
        }
        if (!v28 && v26 == (WTF::StringImpl *)v27)
        {
          v69 = 3145741;
          v177 = WTF::fastCompactMalloc((WTF *)0x20);
          v185 = v177;
          v186 = 0x1C00000002;
          v187 = "Unterminated string constant";
          goto LABEL_169;
        }
        v276 = v28;
LABEL_249:
        JSC::Lexer<unsigned char>::record16((uint64_t)a1, v276);
        *((_BYTE *)a1 + 176) = 0;
        v277 = (_BYTE *)(*((_QWORD *)a1 + 10) + 1);
        *((_QWORD *)a1 + 10) = v277;
        if ((unint64_t)v277 < *((_QWORD *)a1 + 12))
          *((_BYTE *)a1 + 176) = *v277;
        goto LABEL_221;
    }
    if (((v16 + 16370) & 0x2000) == 0)
      goto LABEL_7;
    if (v16 == 13)
    {
      v29 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
      if (v15 != v29)
      {
        if (v29 - v15 < 0)
          goto LABEL_195;
        v105 = v13;
        v106 = v10;
        v107 = v12;
        JSC::Lexer<unsigned char>::append16((uint64_t)a1, (unsigned __int8 *)v15, v29 - v15);
        v15 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
        v12 = v107;
        v10 = v106;
        v13 = v105;
      }
      if (!a3 && v11 != v15)
      {
        v24 = v15 - v11;
        v97 = a1[13];
        v98 = v15 - v11 + v97;
        if (v98 > a1[12])
        {
          v173 = v12;
          v174 = v10;
          v175 = v14;
          v176 = v13;
          WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v98);
          v13 = v176;
          v14 = v175;
          v10 = v174;
          v12 = v173;
          v97 = a1[13];
        }
        if (v98 < v97)
        {
          __break(0xC471u);
          JUMPOUT(0x198864324);
        }
        v23 = (_WORD *)(*v12 + 2 * v97);
        do
        {
          v22 = *(unsigned __int8 *)v11;
          v11 = (WTF::StringImpl *)((char *)v11 + 1);
          *v23++ = v22;
          --v24;
        }
        while (v24);
        a1[13] = v98;
      }
      v30 = v12;
      LOWORD(v311) = 10;
      v31 = a1[9];
      v32 = v13;
      if ((_DWORD)v31 == a1[8])
      {
        v172 = v10;
        WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>(v13, (unint64_t)&v311);
        v10 = v172;
      }
      else
      {
        *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v31) = 10;
        a1[9] = v31 + 1;
      }
      v33 = v10;
      if (!a3)
      {
        v126 = a1[13];
        if ((_DWORD)v126 == a1[12])
        {
          WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v126 + 1);
          v126 = a1[13];
          v127 = (_WORD *)(*((_QWORD *)a1 + 5) + 2 * v126);
        }
        else
        {
          v127 = (_WORD *)(*v30 + 2 * v126);
        }
        *v127 = 10;
        a1[13] = v126 + 1;
      }
      JSC::Lexer<unsigned char>::shiftLineTerminator(a1);
      v11 = (WTF::StringImpl *)*((_QWORD *)a1 + 10);
      v15 = v11;
      v12 = v30;
      v10 = v33;
      v13 = v32;
      goto LABEL_2;
    }
    if (!v16)
      break;
    if (v16 == 10)
    {
      v288 = v12;
      v289 = v10;
      v290 = v13;
      JSC::Lexer<unsigned char>::shiftLineTerminator(a1);
      v13 = v290;
      v10 = v289;
      v12 = v288;
      goto LABEL_2;
    }
LABEL_7:
    v16 = 0;
    *((_BYTE *)a1 + 176) = 0;
    v17 = (unsigned __int8 *)(*((_QWORD *)a1 + 10) + 1);
    *((_QWORD *)a1 + 10) = v17;
    if ((unint64_t)v17 < *((_QWORD *)a1 + 12))
    {
      v16 = *v17;
      *((_BYTE *)a1 + 176) = v16;
    }
  }
  if (*((_QWORD *)a1 + 10) != *((_QWORD *)a1 + 12))
    goto LABEL_7;
  v69 = 3145741;
  v177 = WTF::fastCompactMalloc((WTF *)0x20);
  v185 = v177;
  v186 = 0xE00000002;
  v187 = "Unexpected EOF";
LABEL_169:
  *(_QWORD *)v177 = v186;
  *(_QWORD *)(v177 + 8) = v187;
  *(_DWORD *)(v177 + 16) = 4;
  v188 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
  *((_QWORD *)a1 + 19) = v185;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
    {
      WTF::StringImpl::~StringImpl(v188, v178, v179, v180, v181, v182, v183, v184);
      WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
    }
    else
    {
      *(_DWORD *)v188 -= 2;
    }
  }
LABEL_172:
  *((_BYTE *)a1 + 150) = 1;
  v65 = (_BYTE *)*((_QWORD *)a1 + 10);
  v66 = v309;
  v68 = v307;
  v67 = v308;
LABEL_62:
  v70 = v67 - v68;
  *((_BYTE *)a1 + 149) = 0;
  v71 = *((_QWORD *)a1 + 11);
  v72 = &v65[-v71];
  LODWORD(v71) = a1[28] - v71;
  v73 = *a1 | ((_QWORD)v72 << 32);
  *(_DWORD *)(a2 + 44) = (_DWORD)v72;
  *(_DWORD *)(a2 + 32) = v66;
  *(_DWORD *)(a2 + 36) = v70;
  *(_QWORD *)(a2 + 60) = v73;
  *(_DWORD *)(a2 + 68) = v71;
  a1[15] = v69;
  return v69;
}

void JSC::Lexer<unsigned char>::recordUnicodeCodePoint(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v7;

  if (HIWORD(a2))
  {
    v5 = *(unsigned int *)(a1 + 36);
    v6 = v5 + 2;
    if (v5 + 2 > *(unsigned int *)(a1 + 32))
    {
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v5 + 2);
      v5 = *(unsigned int *)(a1 + 36);
      if (v6 < v5)
      {
        __break(0xC471u);
        JUMPOUT(0x198864814);
      }
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 2 * v5) = (unsigned __int16)((a2 >> 10) - 10304) | ((a2 & 0x3FF) << 16) | 0xDC000000;
    *(_DWORD *)(a1 + 36) = v6;
  }
  else
  {
    v7 = a2;
    v4 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 32))
    {
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>(a1 + 24, (unint64_t)&v7);
    }
    else
    {
      *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v4) = a2;
      *(_DWORD *)(a1 + 36) = v4 + 1;
    }
  }
}

void JSC::Lexer<unsigned char>::append16(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _WORD *v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 32);
  v7 = *(unsigned int *)(a1 + 36);
  v8 = a3 + v7;
  if (a3 + v7 > v6)
  {
    v11 = v6 + (v6 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v8)
      v13 = a3 + v7;
    else
      v13 = v12;
    if (v13 >> 31)
    {
      __break(0xC471u);
      return;
    }
    v14 = *(const void **)(a1 + 24);
    v15 = (void *)WTF::fastMalloc((WTF *)(2 * v13));
    *(_DWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 24) = v15;
    memcpy(v15, v14, 2 * v7);
    if (v14)
    {
      if (*(const void **)(a1 + 24) == v14)
      {
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  *(_DWORD *)(a1 + 36) = v8;
  if (v3)
  {
    v9 = (_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v7);
    do
    {
      v10 = *a2++;
      *v9++ = v10;
      --v3;
    }
    while (v3);
  }
}

uint64_t JSC::Lexer<unsigned char>::parseUnicodeEscape(uint64_t a1)
{
  unsigned int v1;
  unsigned __int8 *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  unsigned int v28;

  v1 = *(unsigned __int8 *)(a1 + 176);
  if (v1 != 123)
  {
    v2 = *(unsigned __int8 **)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)(v2 + 1) >= v3)
      v4 = 0;
    else
      v4 = v2[1];
    if ((unint64_t)(v2 + 2) >= v3)
      v5 = 0;
    else
      v5 = v2[2];
    if ((unint64_t)(v2 + 3) >= v3)
      v6 = 0;
    else
      v6 = v2[3];
    if (v1 - 48 >= 0xA && ((v1 | 0x20) - 97) > 5u)
    {
      v23 = v2 + 4;
    }
    else
    {
      if ((v4 - 48 < 0xA || ((v4 | 0x20) - 97) <= 5u)
        && (v5 - 48 < 0xA || ((v5 | 0x20) - 97) <= 5u)
        && ((v6 - 58) > 0xF5u || ((v6 | 0x20) - 103) >= 0xFAu))
      {
        if (v1 >= 0x41)
          v7 = 9;
        else
          v7 = 0;
        v8 = v7 + v1;
        if (v4 >= 0x41)
          v9 = (v4 + 9) & 0xF;
        else
          v9 = v4 - 48;
        v10 = v9 | (16 * v8);
        if (v5 >= 0x41)
          v11 = 9;
        else
          v11 = 0;
        v12 = v11 + v5;
        v13 = v6 - 48;
        if (v6 >= 0x41)
          v13 = (v6 + 9) & 0xF;
        v14 = (v13 | (16 * v12)) | (v10 << 8);
        *(_BYTE *)(a1 + 176) = 0;
        v15 = v2 + 4;
LABEL_28:
        *(_QWORD *)(a1 + 80) = v15;
        if ((unint64_t)v15 < v3)
          *(_BYTE *)(a1 + 176) = *v15;
        return v14;
      }
      v23 = v2 + 4;
      v24 = v2 + 1;
      do
      {
        *(_BYTE *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 80) = v24;
        if ((unint64_t)v24 >= v3)
        {
          v25 = 0;
        }
        else
        {
          v25 = *v24;
          *(_BYTE *)(a1 + 176) = v25;
        }
        ++v24;
      }
      while ((v25 - 48) < 0xA || (v25 | 0x20u) - 97 < 6);
    }
    if ((unint64_t)v23 >= v3)
      return 4294967294;
    else
      return 0xFFFFFFFFLL;
  }
  *(_BYTE *)(a1 + 176) = 0;
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v17 + 1;
  v3 = *(_QWORD *)(a1 + 96);
  if (v17 + 1 >= v3)
  {
    LOBYTE(v18) = 0;
  }
  else
  {
    LOBYTE(v18) = *(_BYTE *)(v17 + 1);
    *(_BYTE *)(a1 + 176) = v18;
  }
  LODWORD(v14) = 0;
  v15 = (unsigned __int8 *)(v17 + 2);
  while (1)
  {
    v19 = v18 - 48;
    if ((v18 - 48) >= 0xAu && ((v18 | 0x20) - 97) >= 6u)
    {
      if ((_BYTE)v18)
        return 0xFFFFFFFFLL;
      else
        return 4294967294;
    }
    v21 = v18;
    v22 = (v18 + 9) & 0xF;
    if (v21 < 0x41)
      v22 = v19;
    v14 = v22 | (16 * v14);
    *(_BYTE *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 80) = v15;
    if (v14 >= 0x110000)
      break;
    if ((unint64_t)v15 >= v3)
    {
      v18 = 0;
    }
    else
    {
      v18 = *v15;
      *(_BYTE *)(a1 + 176) = v18;
    }
    ++v15;
    if (v18 == 125)
    {
      *(_BYTE *)(a1 + 176) = 0;
      goto LABEL_28;
    }
  }
  if ((unint64_t)v15 >= v3)
  {
    v26 = 0;
  }
  else
  {
    v26 = *v15;
    *(_BYTE *)(a1 + 176) = v26;
  }
  if ((v26 - 48) < 0xA || (v26 | 0x20u) - 97 <= 5)
  {
    v27 = v15 + 1;
    do
    {
      *(_BYTE *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v27;
      if ((unint64_t)v27 >= v3)
      {
        v26 = 0;
      }
      else
      {
        v26 = *v27;
        *(_BYTE *)(a1 + 176) = v26;
      }
      ++v27;
    }
    while ((v26 - 48) < 0xA || (v26 | 0x20u) - 97 < 6);
    v15 = v27 - 1;
  }
  if (v15 == (unsigned __int8 *)v3)
    v28 = -2;
  else
    v28 = -1;
  if (v26)
    return 0xFFFFFFFFLL;
  else
    return v28;
}

uint64_t JSC::Lexer<char16_t>::setCode(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int16 *v23;
  __int16 v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v5 = *(unint64_t **)(a3 + 16);
  if (!v5)
  {
    v5 = (unint64_t *)WTF::fastMalloc((WTF *)0x818);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    WTF::SegmentedVector<JSC::Identifier,64ul>::clear(v5, v50, v51, v52, v53, v54, v55, v56);
    bzero(v5 + 3, 0x800uLL);
    v64 = *(unint64_t **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v5;
    if (v64)
    {
      WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v64, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      v5 = *(unint64_t **)(a3 + 16);
    }
  }
  *(_QWORD *)(a1 + 184) = v5;
  *(_DWORD *)a1 = a2[4] + 1;
  *(_DWORD *)(a1 + 60) = -1;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 64) = a2;
  v14 = a2[2];
  v15 = a2[3];
  *(_DWORD *)(a1 + 72) = v14;
  v16 = v6 + 2 * v14;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 96) = v6 + 2 * v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_WORD *)(a1 + 149) = 1;
  *(_QWORD *)(a1 + 112) = v16;
  v17 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  v18 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v19 = *(WTF::StringImpl **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(a1 + 16) = 32;
  *(_QWORD *)(a1 + 8) = v20;
  v21 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(a1 + 32) = 32;
  *(_QWORD *)(a1 + 24) = v21;
  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(a1 + 48) = 32;
  *(_QWORD *)(a1 + 40) = result;
  v23 = *(__int16 **)(a1 + 80);
  if ((unint64_t)v23 >= *(_QWORD *)(a1 + 96))
    v24 = 0;
  else
    v24 = *v23;
  *(_WORD *)(a1 + 176) = v24;
  return result;
}

uint64_t JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unint64_t *stackaddr_np;
  rlim_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unint64_t v28;
  char *v29;
  _WORD *v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  unsigned __int16 *v34;
  unint64_t v35;
  int v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  _WORD *v40;
  _WORD *v41;
  unint64_t v42;
  int v43;
  unsigned __int16 *v44;
  _WORD *v45;
  _WORD *v46;
  _WORD *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  int8x16_t *v51;
  uint64_t v52;
  void **v53;
  char *v54;
  uint64_t StatusReg;
  unsigned __int16 *v56;
  __int8 v57;
  __int8 *v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned __int16 *v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  unint64_t v92;
  unsigned __int16 *v93;
  unint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned __int16 *v101;
  unsigned __int16 *v102;
  _WORD *v103;
  _WORD *v104;
  unsigned __int16 *v105;
  int v106;
  unsigned __int16 *v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  _QWORD *v112;
  uint64_t v113;
  int v114;
  int v115;
  unsigned __int8 **v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned __int16 v123;
  unsigned int v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  unsigned __int8 v128;
  BOOL v129;
  BOOL v130;
  char v131;
  BOOL v132;
  unsigned __int8 *v133;
  double v134;
  unint64_t v135;
  int8x16_t *v137;
  unint64_t v138;
  int16x8_t *v139;
  int8x8_t *v140;
  unint64_t v141;
  int16x8_t v142;
  unsigned int v143;
  unint64_t v145;
  unint64_t v146;
  WTF::AtomStringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  unsigned __int16 *v161;
  uint64_t v162;
  _WORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _WORD *v168;
  unsigned __int16 *v169;
  unsigned __int16 *v170;
  unsigned __int16 *v171;
  _WORD *v172;
  int v173;
  int v174;
  unsigned __int16 *v175;
  unint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  unsigned __int16 *v180;
  unint64_t v181;
  __int16 *v182;
  int v183;
  __int16 v184;
  unsigned __int16 *v185;
  unint64_t v186;
  int v187;
  unsigned __int16 *v188;
  uint64_t v189;
  int v190;
  unsigned __int16 *v191;
  unint64_t v192;
  int v193;
  unsigned __int16 *v194;
  unint64_t v195;
  int v196;
  int v197;
  unsigned __int16 *v198;
  unint64_t v199;
  int v200;
  _WORD *v201;
  int v202;
  unint64_t v203;
  int8x16_t *v204;
  int8x16_t v205;
  int8x16_t v206;
  unsigned __int16 *v207;
  int v208;
  int v209;
  _WORD *v210;
  unint64_t v211;
  UChar32 v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unsigned __int16 *v220;
  unint64_t v221;
  unsigned __int16 *v222;
  unint64_t v223;
  int v224;
  int v225;
  _WORD *v226;
  _WORD *v227;
  int v228;
  int v229;
  unsigned int v230;
  int v231;
  int v232;
  int v233;
  unsigned __int8 v234;
  BOOL v235;
  double v237;
  char v238;
  double *v239;
  unint64_t v240;
  double v241;
  _WORD *v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _WORD *v259;
  _WORD *v260;
  unint64_t v261;
  size_t v262;
  unint64_t v263;
  WTF::StringImpl *v264;
  uint64_t v265;
  unint64_t v266;
  __int16 *v267;
  __int16 v268;
  int v269;
  uint64_t v270;
  uint64_t **v271;
  int v272;
  int v273;
  unsigned __int16 *v274;
  unint64_t v275;
  int v276;
  __int16 v277;
  unsigned __int16 *v278;
  unint64_t v279;
  unsigned int v280;
  unsigned __int16 *v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  unint64_t v284;
  __int16 *v285;
  __int16 v286;
  int v287;
  uint64_t v288;
  uint64_t **v289;
  _WORD *v290;
  int v291;
  _WORD *v292;
  _WORD *v293;
  uint64_t v294;
  unsigned __int16 *v295;
  unint64_t v296;
  __int16 *v297;
  int v298;
  __int16 v299;
  uint64_t v300;
  unsigned __int16 *v301;
  unint64_t v302;
  __int16 *v303;
  int v304;
  __int16 v305;
  int v306;
  _WORD *v307;
  rlim_t v308;
  uint64_t v309;
  _WORD *v310;
  rlim_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  void *v315;
  void *v316;
  uint64_t v317;
  unsigned __int16 *v318;
  __int16 *v319;
  int v320;
  __int16 v321;
  unint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned __int16 *v338;
  __int16 *v339;
  int v340;
  uint64_t v341;
  unsigned __int16 *v342;
  unint64_t v343;
  uint64_t v344;
  unsigned __int16 *v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  int v349;
  int v350;
  unsigned __int16 *v351;
  unsigned __int16 *v352;
  unsigned int v353;
  unint64_t v354;
  int v355;
  unint64_t v356;
  uint64_t v357;
  __int16 v358;
  uint64_t v359;
  unsigned int v360;
  int v361;
  unint64_t v362;
  int v363;
  uint64_t v364;
  __int16 v365;
  int v366;
  unint64_t v367;
  uint64_t v368;
  __int16 v369;
  unint64_t v370;
  uint64_t v371;
  __int16 v372;
  int v373;
  unint64_t v374;
  uint64_t v375;
  __int16 v376;
  int v377;
  unint64_t v378;
  uint64_t v379;
  __int16 v380;
  unint64_t v381;
  uint64_t v382;
  __int16 v383;
  unint64_t v384;
  uint64_t v385;
  __int16 v386;
  unint64_t v387;
  uint64_t v388;
  __int16 v389;
  unint64_t v390;
  uint64_t v391;
  __int16 v392;
  unint64_t v393;
  uint64_t v394;
  __int16 v395;
  int v396;
  unint64_t v397;
  uint64_t v398;
  __int16 v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  __int16 v403;
  unint64_t v404;
  uint64_t v405;
  __int16 v406;
  unint64_t v407;
  uint64_t v408;
  __int16 v409;
  unint64_t v410;
  uint64_t v411;
  __int16 v412;
  unint64_t v413;
  uint64_t v414;
  __int16 v415;
  unint64_t v416;
  uint64_t v417;
  __int16 v418;
  unint64_t v419;
  uint64_t v420;
  __int16 v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  __int16 v425;
  unint64_t v426;
  uint64_t v427;
  __int16 v428;
  unsigned int v429;
  int v430;
  unint64_t v431;
  uint64_t v432;
  __int16 v433;
  unint64_t v434;
  uint64_t v435;
  __int16 v436;
  unint64_t v437;
  uint64_t v438;
  __int16 v439;
  int v440;
  unint64_t v441;
  uint64_t v442;
  __int16 v443;
  unint64_t v444;
  uint64_t v445;
  __int16 v446;
  int v447;
  unint64_t v448;
  uint64_t v449;
  __int16 v450;
  unint64_t v451;
  uint64_t v452;
  __int16 v453;
  unint64_t v454;
  uint64_t v455;
  __int16 v456;
  unint64_t v457;
  uint64_t v458;
  __int16 v459;
  unint64_t v460;
  uint64_t v461;
  __int16 v462;
  unint64_t v463;
  uint64_t v464;
  __int16 v465;
  unint64_t v466;
  uint64_t v467;
  __int16 v468;
  unint64_t v469;
  uint64_t v470;
  __int16 v471;
  unint64_t v472;
  uint64_t v473;
  __int16 v474;
  unint64_t v475;
  uint64_t v476;
  __int16 v477;
  unint64_t v478;
  uint64_t v479;
  __int16 v480;
  unint64_t v481;
  uint64_t v482;
  __int16 v483;
  _BOOL4 isNonLatin1IdentPart;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  uint64_t v491;
  unsigned int v492;
  unsigned int v493;
  unint64_t v494;
  int v495;
  unsigned int v496;
  unsigned int v497;
  int v498;
  uint64_t v500;
  rlim_t v501;
  int v502;
  unsigned __int16 *v503;
  _DWORD *v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t *v513;
  unsigned int v514;
  unsigned int v515;
  _opaque_pthread_t *v516;
  unint64_t v518;
  int v519;
  int v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  _opaque_pthread_t *v536;
  unint64_t v537;
  int v538;
  _opaque_pthread_t *v539;
  rlim_t stacksize_np;
  rlim_t v541;
  uint64_t v542;
  _QWORD *v543;
  unint64_t v544;
  uint64_t v545;
  __int16 v546;
  unint64_t v547;
  uint64_t v548;
  __int16 v549;
  unint64_t v550;
  uint64_t v551;
  __int16 v552;
  unint64_t v553;
  uint64_t v554;
  __int16 v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  int v559;
  int v560;
  unint64_t *v561;
  unint64_t v562;
  rlim_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  __int16 v567;
  _QWORD *v568;
  unint64_t v569;
  uint64_t v570;
  __int16 v571;
  _WORD *v572;
  unsigned int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  unsigned __int16 *v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  _QWORD *v591;
  _QWORD *v592;
  _WORD *v593;
  _WORD *v594;
  _WORD *v595;
  int v596;
  unint64_t v597;
  uint64_t v598;
  __int16 v599;
  _WORD *v600;
  char *v601;
  unsigned __int16 *v604;
  int v605;
  BOOL v606;
  int v607;
  uint64_t v608;
  WTF::AtomStringImpl *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  const char *v618;
  uint64_t v619;
  __int16 v620;
  unint64_t v621;
  rlim_t v622;
  WTF::StringImpl *v623;
  int v624;
  unint64_t v625;
  uint64_t v626;
  __int16 v627;
  WTF::AtomStringImpl *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t v639;
  WTF::StringImpl *v640;
  WTF::StringImpl *v641;
  unint64_t v642;
  unsigned __int8 **v643;
  uint64_t v644;
  unsigned int v645;
  unint64_t v646;
  unsigned __int8 *v647;
  unint64_t v648;
  WTF::StringImpl *v649;
  uint64_t v650;
  __int16 *v651;
  __int16 v652;
  uint64_t v653;
  WTF::AtomStringImpl *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  const char *v663;
  WTF::StringImpl *v664;
  _WORD *v665;
  uint64_t v666;
  uint64_t v667;
  WTF::AtomStringImpl *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  WTF::StringImpl *v676;
  uint64_t v677;
  unsigned int v678;
  unsigned __int16 *v679;
  int v680;
  unsigned int v681;
  char v682;
  char v683;
  char v684;
  char v685;
  uint64_t v686;
  unint64_t v687;
  unint64_t v688;
  void *v689;
  unint64_t v690;
  void *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  WTF::AtomStringImpl *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  void *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t v721;
  void *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  _QWORD *v729;
  uint64_t v730;
  unsigned int v731;
  int v732;
  uint64_t v733;
  unsigned int v734;
  int v735;
  uint64_t v736;
  unsigned int v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  unsigned int v741;
  int v742;
  uint64_t v743;
  uint64_t v744;
  char v745;
  char v746;
  uint64_t v747;
  int v748;
  BOOL v749;
  unsigned __int16 *v750;
  WTF::AtomStringImpl *v751;
  unint64_t v752;
  _WORD *v753;
  unint64_t v754;
  void *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  WTF::AtomStringImpl *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  const char *v772;
  WTF::StringImpl *v773;
  unsigned __int16 *v774;
  int v775;
  BOOL v776;
  int v777;
  unint64_t v778;
  void *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  unsigned int v788;
  int v789;
  unint64_t v790;
  unsigned int v791;
  unint64_t v792;
  WTF::AtomStringImpl *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  WTF::StringImpl *v800;
  unint64_t v801;
  unint64_t v802;
  WTF::AtomStringImpl *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  WTF::StringImpl *v810;
  rlim_t v811;
  uint64_t v812;
  int v813;
  char *v814;
  unsigned int v815;
  unsigned int v816;
  int v817;
  char *v818;
  unsigned __int8 *v819;
  _WORD *v820;
  char v821;
  unsigned __int16 *v822;
  int v823;
  int v824;
  unint64_t v825;
  void *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  _QWORD *v833;
  WTF::AtomStringImpl *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  WTF::StringImpl *v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  int v846;
  uint64_t v847;
  unsigned __int16 *v848;
  unsigned int v849;
  unsigned int v850;
  unint64_t v851;
  void *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  int v859;
  int v860;
  _WORD *v861;
  _WORD *v862;
  unsigned int v863;
  int v864;
  unint64_t i;
  int v866;
  BOOL v867;
  _WORD *v868;
  unsigned int v869;
  int v870;
  unsigned int v871;
  uint64_t v872;
  uint64_t v873;
  int v875;
  int v876;
  BOOL v877;
  double v878;
  unint64_t v879;
  unsigned int v881;
  _WORD *v882;
  unint64_t v883;
  uint64_t v884;
  uint64_t v885;
  int v887;
  int v888;
  BOOL v889;
  double v890;
  unsigned __int16 *v891;
  unint64_t v892;
  int v893;
  double v894;
  unint64_t v895;
  uint64_t v897;
  WTF::AtomStringImpl *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  WTF::StringImpl *v905;
  const char *v906;
  WTF::StringImpl *v907;
  uint64_t v908;
  unint64_t v909;
  void *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t v918;
  char *v919;
  int v920;
  BOOL v921;
  int v922;
  uint64_t v923;
  _BYTE *v924;
  uint64_t v925;
  WTF::AtomStringImpl *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  WTF::StringImpl *rlim_cur;
  unint64_t v934;
  void *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  unint64_t v943;
  int v944;
  int v945;
  unint64_t v946;
  void *v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  int v954;
  int v955;
  unsigned __int16 *v956;
  int v957;
  BOOL v958;
  int v959;
  int v960;
  int v961;
  unint64_t v962;
  void *v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  _WORD *v970;
  unint64_t v971;
  int v972;
  WTF::AtomStringImpl *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  WTF::StringImpl *v981;
  int v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t *v985;
  WTF::AtomStringImpl *v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  WTF::StringImpl *v993;
  unint64_t v994;
  WTF::AtomStringImpl *v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  WTF::StringImpl *v1002;
  uint64_t v1003;
  uint64_t v1004;
  _WORD *v1005;
  unint64_t v1006;
  void *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  int v1014;
  uint64_t v1015;
  unint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t *v1019;
  WTF::AtomStringImpl *v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  WTF::StringImpl *v1027;
  unint64_t v1028;
  unint64_t v1029;
  BOOL v1030;
  unint64_t v1031;
  unint64_t v1032;
  BOOL v1033;
  unint64_t v1034;
  unsigned __int16 *v1035;
  _WORD *v1036;
  unint64_t v1037;
  void *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  unint64_t v1045;
  void *v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  WTF::AtomStringImpl *v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  WTF::StringImpl *v1060;
  uint64_t v1061;
  WTF::AtomStringImpl *v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  const char *v1071;
  unsigned __int16 *v1074;
  int v1075;
  unsigned __int16 *v1078;
  int v1079;
  int v1080;
  int v1081;
  int v1082;
  __int16 *v1083;
  int v1084;
  __int16 *v1085;
  int v1086;
  __int16 *v1087;
  int v1088;
  __int16 *v1089;
  int v1090;
  __int16 *v1091;
  uint64_t v1092;
  unint64_t v1093;
  _WORD *v1094;
  WTF::StringImpl *v1095;
  unint64_t v1096;
  void *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  int v1104;
  int v1105;
  WTF::AtomStringImpl *v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  WTF::StringImpl *v1113;
  WTF::AtomStringImpl *v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  WTF::StringImpl *v1121;
  unint64_t v1122;
  void *v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  unint64_t v1130;
  _WORD *v1131;
  unsigned __int16 *v1133;
  _WORD *v1135;
  unsigned __int16 *v1137;
  unint64_t v1139;
  uint64_t v1140;
  WTF::AtomStringImpl *v1141;
  uint64_t v1142;
  uint64_t *v1143;
  WTF::AtomStringImpl *v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  WTF::StringImpl *v1151;
  unint64_t v1152;
  void *v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  _WORD *v1162;
  BOOL v1163;
  int v1164;
  BOOL v1165;
  int v1166;
  _WORD *v1167;
  unsigned __int16 *v1168;
  unint64_t v1169;
  void *v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  unint64_t v1178;
  void *v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  unint64_t v1187;
  uint64_t v1188;
  WTF::AtomStringImpl *v1189;
  uint64_t v1190;
  uint64_t *v1191;
  WTF::AtomStringImpl *v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  WTF::StringImpl *v1199;
  unint64_t v1200;
  WTF::AtomStringImpl *v1201;
  uint64_t v1202;
  uint64_t v1203;
  WTF::AtomStringImpl *v1204;
  uint64_t v1205;
  WTF::StringImpl *v1206;
  WTF::AtomStringImpl *v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  WTF::StringImpl *v1214;
  WTF::AtomStringImpl *v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  WTF::StringImpl *v1222;
  unint64_t v1223;
  void *v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  unint64_t v1231;
  WTF::StringImpl *v1232;
  int v1233;
  int v1234;
  WTF::AtomStringImpl *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  WTF::StringImpl *v1242;
  WTF::AtomStringImpl *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  WTF::StringImpl *v1250;
  unint64_t v1251;
  void *v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  WTF::AtomStringImpl *v1260;
  uint64_t v1261;
  WTF::StringImpl *v1262;
  uint64_t *v1263;
  WTF::AtomStringImpl *v1264;
  uint64_t v1265;
  WTF::StringImpl *v1266;
  unint64_t v1267;
  void *v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  unint64_t v1276;
  void *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  unint64_t v1284;
  unint64_t v1285;
  void *v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  _WORD *v1295;
  unint64_t v1296;
  void *v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unint64_t v1304;
  void *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  unint64_t v1312;
  unint64_t v1313;
  void *v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  _WORD *v1323;
  unint64_t v1324;
  void *v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  unint64_t v1332;
  void *v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  uint64_t v1338;
  uint64_t v1339;
  int v1340;
  int v1341;
  uint64_t v1342;
  unint64_t v1343;
  unsigned __int16 *v1344;
  unint64_t v1345;
  unsigned int v1346;
  unsigned __int16 *v1347;
  rlim_t v1348;
  unsigned int v1349;
  int v1350;
  uint64_t __src;
  void *__srca;
  int v1353;
  unsigned int v1354;
  size_t __n;
  uint64_t **v1356;
  WTF::StringImpl *v1358;
  uint64_t v1359;
  int v1360;
  char v1361;
  rlimit *v1362;
  rlimit v1363;
  size_t v1364[3];

  v1353 = a4;
  v1364[2] = *MEMORY[0x1E0C80C00];
  LODWORD(__n) = a3;
  v1356 = (uint64_t **)(a2 + 8);
  v9 = (unsigned __int8 *)(a1 + 44);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 32);
  stackaddr_np = (unint64_t *)(a1 + 20);
  v11 = 1;
LABEL_2:
  v12 = *(unsigned __int16 *)v9;
  while (1)
  {
LABEL_3:
    while (v12 > 0xFF)
    {
      v14 = u_charType(v12);
      if (v12 != 65279 && v14 != 12)
        goto LABEL_10;
LABEL_6:
      v12 = 0;
      *((_WORD *)a1 + 88) = 0;
      v13 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v13;
      if ((unint64_t)v13 < *((_QWORD *)a1 + 12))
      {
        v12 = *v13;
        *(_WORD *)v9 = v12;
      }
    }
    if (v12 <= 0x20u && ((1 << v12) & 0x100001A00) != 0 || v12 == 160)
      goto LABEL_6;
LABEL_10:
    v15 = *((_QWORD *)a1 + 11);
    v16 = (unint64_t)(*((_QWORD *)a1 + 10) - v15) >> 1;
    *(_DWORD *)(a2 + 40) = v16;
    v17 = (unint64_t)(*((_QWORD *)a1 + 14) - v15) >> 1;
    *(_QWORD *)(a2 + 48) = *a1 | ((unint64_t)v16 << 32);
    *(_DWORD *)(a2 + 56) = v17;
    v18 = *((unsigned __int16 *)a1 + 88);
    if (!*((_WORD *)a1 + 88))
      break;
    if (v18 < 0x100)
      goto LABEL_12;
    v211 = *stackaddr_np;
    v212 = *(unsigned __int16 *)*stackaddr_np;
    if ((v212 & 0xFC00) == 0xD800 && *((_QWORD *)a1 + 12) - v211 != 2)
    {
      v213 = *(unsigned __int16 *)(v211 + 2);
      v125 = (v213 & 0xFC00) == 56320;
      v214 = v213 + (v212 << 10) - 56613888;
      if (v125)
        v212 = v214;
    }
    if (u_hasBinaryProperty(v212, UCHAR_ID_START))
      goto LABEL_530;
    v18 = *(unsigned __int16 *)v9;
    if (v18 != 10 && v18 != 13 && (v18 & 0xFFFE) != 0x2028)
      goto LABEL_1680;
LABEL_332:
    v215 = *a1;
    v217 = *((_QWORD *)a1 + 10);
    v216 = *((_QWORD *)a1 + 11);
    v218 = (unint64_t)(v217 - v216) >> 1;
    v219 = (unint64_t)(*((_QWORD *)a1 + 14) - v216) >> 1;
    *((_QWORD *)a1 + 15) = *a1 | ((unint64_t)v218 << 32);
    a1[32] = v219;
    *((_WORD *)a1 + 88) = 0;
    v220 = (unsigned __int16 *)(v217 + 2);
    *((_QWORD *)a1 + 10) = v217 + 2;
    v221 = *((_QWORD *)a1 + 12);
    if (v217 + 2 >= v221)
      goto LABEL_1723;
    v12 = *v220;
    *(_WORD *)v9 = v12;
    if (v18 == 13 && v12 == 10)
    {
      *(_WORD *)v9 = 0;
      v220 = (unsigned __int16 *)(v217 + 4);
      *stackaddr_np = v217 + 4;
      if (v217 + 4 < v221)
      {
        v12 = *v220;
        *(_WORD *)v9 = v12;
        goto LABEL_334;
      }
LABEL_1723:
      v12 = 0;
    }
LABEL_334:
    *a1 = v215 + 1;
    *((_QWORD *)a1 + 14) = v220;
    *((_BYTE *)a1 + 149) = 1;
    *((_BYTE *)a1 + 56) = 1;
  }
  if (*((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
  {
    v31 = 20;
    goto LABEL_824;
  }
LABEL_12:
  switch(*((_WORD *)a1 + 88))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB2:
    case 0xB3:
    case 0xB4:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xD7:
    case 0xF7:
      goto LABEL_1680;
    case 0xA:
    case 0xD:
      goto LABEL_332;
    case 0x21:
      *((_WORD *)a1 + 88) = 0;
      v169 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      v170 = v169 + 1;
      *((_QWORD *)a1 + 10) = v169 + 1;
      v42 = *((_QWORD *)a1 + 12);
      v171 = v169 + 2;
      v172 = v169 + 3;
      if ((unint64_t)(v169 + 2) < v42
        && (unint64_t)(v169 + 3) < v42
        && (unint64_t)(v169 + 1) < v42)
      {
        v173 = *v170;
        *(_WORD *)v9 = v173;
        if (v173 == 61)
        {
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)v171;
          v202 = *v171;
          *(_WORD *)v9 = v202;
          if (v202 == 61)
          {
            *(_WORD *)v9 = 0;
            *stackaddr_np = (unint64_t)v172;
            *(_WORD *)v9 = *v172;
            v31 = 121859;
          }
          else
          {
            v31 = 121857;
          }
          goto LABEL_823;
        }
LABEL_245:
        v31 = 260;
        goto LABEL_823;
      }
      if ((unint64_t)(v169 + 1) >= v42)
        goto LABEL_245;
      v1080 = *v170;
      *(_WORD *)v9 = v1080;
      if (v1080 != 61)
        goto LABEL_245;
      v190 = 121856;
      *(_WORD *)v9 = 0;
      *stackaddr_np = (unint64_t)(v169 + 2);
      if ((unint64_t)(v169 + 2) >= v42)
      {
LABEL_2140:
        v31 = v190 | 1u;
        goto LABEL_823;
      }
      v1081 = v169[2];
      *(_WORD *)v9 = v1081;
      if (v1081 != 61)
      {
LABEL_273:
        v31 = (v190 + 1);
        goto LABEL_823;
      }
      *(_WORD *)v9 = 0;
      v48 = v169 + 3;
      *stackaddr_np = (unint64_t)v48;
      v31 = 121859;
      goto LABEL_2138;
    case 0x22:
    case 0x27:
      v49 = *a1;
      v50 = *((_QWORD *)a1 + 10);
      v28 = *((_QWORD *)a1 + 11);
      v666 = (*((_QWORD *)a1 + 14) - v28) >> 1;
      v11 = v50 - v28;
      if ((__n & 2) != 0)
      {
        *((_WORD *)a1 + 88) = 0;
        v105 = (unsigned __int16 *)(v50 + 2);
        *((_QWORD *)a1 + 10) = v105;
        if ((unint64_t)v105 >= *((_QWORD *)a1 + 12))
        {
          v106 = 0;
        }
        else
        {
          v106 = *v105;
          *(_WORD *)v9 = v106;
        }
        if (v106 == v18)
        {
LABEL_154:
          *v1356 = 0;
          goto LABEL_235;
        }
        while (v106 != 92)
        {
          if ((v106 - 256) <= 0xFFFFFF0D)
          {
            *((_BYTE *)a1 + 150) = 0;
            v282 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
            *((_QWORD *)a1 + 19) = 0;
            if (v282)
            {
              if (*(_DWORD *)v282 == 2)
              {
                WTF::StringImpl::~StringImpl(v282, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v330, v331, v332, v333, v334, v335, v336, v337);
              }
              else
              {
                *(_DWORD *)v282 -= 2;
              }
            }
            v283 = *((_QWORD *)a1 + 11);
            v284 = *((_QWORD *)a1 + 12);
            v285 = (__int16 *)(v283 + 2 * (int)(v11 >> 1));
            *((_QWORD *)a1 + 10) = v285;
            *((_QWORD *)a1 + 14) = v283 + 2 * (int)v666;
            a1[9] = 0;
            if ((unint64_t)v285 >= v284)
              v286 = 0;
            else
              v286 = *v285;
            v287 = v1353;
            *((_WORD *)a1 + 88) = v286;
            *a1 = v49;
            a1[5] = 0;
            v288 = (uint64_t)a1;
            v289 = v1356;
LABEL_441:
            v272 = JSC::Lexer<char16_t>::parseStringSlowCase<false>(v288, v289, v287);
LABEL_409:
            if (!v272)
              goto LABEL_235;
            if (v272 == 1)
              goto LABEL_411;
            v273 = 1048583;
            goto LABEL_1107;
          }
          *((_WORD *)a1 + 88) = 0;
          v107 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
          *((_QWORD *)a1 + 10) = v107;
          if ((unint64_t)v107 >= *((_QWORD *)a1 + 12))
          {
LABEL_434:
            v106 = 0;
            goto LABEL_153;
          }
          v106 = *v107;
LABEL_152:
          *(_WORD *)v9 = v106;
LABEL_153:
          if (v106 == v18)
            goto LABEL_154;
        }
        *((_WORD *)a1 + 88) = 0;
        v278 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
        *((_QWORD *)a1 + 10) = v278 + 1;
        v279 = *((_QWORD *)a1 + 12);
        if ((unint64_t)(v278 + 1) >= v279)
        {
          v280 = 0u;
        }
        else
        {
          v280 = v278[1];
          *(_WORD *)v9 = v280;
          if (v280 > 0x7F)
            goto LABEL_1374;
        }
        if (JSC::singleCharacterEscapeValuesForASCII[v280])
        {
          *(_WORD *)v9 = 0;
          v281 = v278 + 2;
LABEL_432:
          *stackaddr_np = (unint64_t)v281;
          if ((unint64_t)v281 >= v279)
            goto LABEL_434;
          v106 = *v281;
          goto LABEL_152;
        }
LABEL_1374:
        if (v280 == 10 || v280 == 13 || (v280 & 0xFFFE) == 8232)
        {
          JSC::Lexer<char16_t>::shiftLineTerminator(a1);
          v106 = *((unsigned __int16 *)a1 + 88);
          goto LABEL_153;
        }
        if (v280 != 120)
        {
          JSC::Lexer<char16_t>::setOffset((uint64_t)a1, (WTF::AtomStringImpl *)(v11 >> 1), v666, a4, a5, a6, a7, a8);
          *a1 = v49;
          a1[5] = 0;
          v288 = (uint64_t)a1;
          v289 = v1356;
          v287 = v1353;
          goto LABEL_441;
        }
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)(v278 + 2);
        if ((unint64_t)(v278 + 2) >= v279)
        {
          v823 = 0;
        }
        else
        {
          v823 = v278[2];
          *(_WORD *)v9 = v823;
        }
        if ((v823 - 48) >= 0xA && (v823 | 0x20u) - 97 > 5
          || ((unint64_t)(v278 + 3) >= v279 ? (v824 = 0) : (v824 = v278[3]),
              (v824 - 48) >= 0xA && (v824 | 0x20u) - 97 >= 6))
        {
LABEL_1973:
          v980 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v980 = 0x3300000002;
          *(_QWORD *)(v980 + 8) = "\\x can only be followed by a hex character sequence";
          *(_DWORD *)(v980 + 16) = 4;
          v981 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
          *((_QWORD *)a1 + 19) = v980;
          if (v981)
          {
            if (*(_DWORD *)v981 == 2)
            {
              WTF::StringImpl::~StringImpl(v981, v973, v974, v975, v976, v977, v978, v979);
              WTF::fastFree(v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013);
            }
            else
            {
              *(_DWORD *)v981 -= 2;
            }
          }
          v982 = *(unsigned __int16 *)v9;
          if (*(_WORD *)v9 || *((_QWORD *)a1 + 10) != *((_QWORD *)a1 + 12))
          {
            v31 = 1048585;
            if ((v982 - 48) >= 0xA && (v982 | 0x20u) - 97 > 5)
              goto LABEL_1108;
            if (*((_QWORD *)a1 + 10) + 2 != *((_QWORD *)a1 + 12))
              goto LABEL_1108;
          }
LABEL_411:
          v273 = 3145734;
LABEL_1107:
          v31 = (v273 + 2);
LABEL_1108:
          *((_BYTE *)a1 + 150) = 1;
          v619 = *((_QWORD *)a1 + 11);
          v145 = *((_QWORD *)a1 + 10) - v619;
          v165 = (unint64_t)(*((_QWORD *)a1 + 14) - v619) >> 1;
          v146 = *a1 | ((unint64_t)(v145 >> 1) << 32);
          goto LABEL_826;
        }
        *(_WORD *)v9 = 0;
        v281 = v278 + 4;
        goto LABEL_432;
      }
      *((_WORD *)a1 + 88) = 0;
      v51 = (int8x16_t *)(v50 + 2);
      *((_QWORD *)a1 + 10) = v50 + 2;
      if ((unint64_t)(v50 + 2) >= *((_QWORD *)a1 + 12))
      {
        v52 = 0;
      }
      else
      {
        v52 = v51->u16[0];
        *(_WORD *)v9 = v52;
      }
      if ((_DWORD)v52 == v18)
        goto LABEL_115;
      v53 = (void **)(a1 + 2);
      v54 = JSC::singleCharacterEscapeValuesForASCII;
LABEL_90:
      StatusReg = 0;
      v56 = &v51->u16[1];
      do
      {
        if ((_DWORD)v52 == 92)
        {
          if (StatusReg)
          {
            if (StatusReg <= -2)
              goto LABEL_2578;
            v59 = StatusReg >> 1;
            v261 = a1[4];
            v262 = a1[5];
            v263 = v59 + v262;
            if (v59 + v262 > v261)
            {
              __n = a1[5];
              v687 = v261 + (v261 >> 2);
              if (v687 >= 0x10)
                v688 = v687 + 1;
              else
                v688 = 16;
              v1350 = v59 + v262;
              if (v688 <= v263)
                v688 = v59 + v262;
              if (HIDWORD(v688))
              {
                __break(0xC471u);
                JUMPOUT(0x19886CC2CLL);
              }
              __srca = *v53;
              v1349 = v688;
              v689 = (void *)WTF::fastMalloc((WTF *)v688);
              a1[4] = v1349;
              *((_QWORD *)a1 + 1) = v689;
              memcpy(v689, __srca, __n);
              v262 = __n;
              LODWORD(v263) = v1350;
              if (__srca)
              {
                if (*v53 == __srca)
                {
                  *((_QWORD *)a1 + 1) = 0;
                  a1[4] = 0;
                }
                WTF::fastFree((unint64_t)__srca, (void *)a2, a3, a4, a5, a6, a7, a8);
                v262 = __n;
                LODWORD(v263) = v1350;
              }
            }
            a1[5] = v263;
            v58 = (__int8 *)(*((_QWORD *)a1 + 1) + v262);
            do
            {
              v57 = v51->i8[0];
              v51 = (int8x16_t *)((char *)v51 + 2);
              *v58++ = v57;
              --v59;
            }
            while (v59);
            v51 = (int8x16_t *)*stackaddr_np;
            v54 = JSC::singleCharacterEscapeValuesForASCII;
          }
          *((_WORD *)a1 + 88) = 0;
          *((_QWORD *)a1 + 10) = (char *)v51->i64 + 2;
          v60 = *((_QWORD *)a1 + 12);
          if ((unint64_t)v51->u64 + 2 >= v60)
          {
            v61 = 0u;
          }
          else
          {
            v61 = v51->u16[1];
            *(_WORD *)v9 = v61;
            if (v61 > 0x7F)
              goto LABEL_1056;
          }
          v28 = v54[v61];
          if (v54[v61])
          {
            LOBYTE(v1363.rlim_cur) = v54[v61];
            v62 = a1[5];
            if ((_DWORD)v62 == a1[4])
            {
              v818 = v54;
              v819 = (unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v62 + 1), (unint64_t)&v1363);
              v54 = v818;
              v62 = a1[5];
              v63 = (_BYTE *)*((_QWORD *)a1 + 1);
              v28 = *v819;
            }
            else
            {
              v63 = *v53;
            }
            v63[v62] = v28;
            ++a1[5];
            *((_WORD *)a1 + 88) = 0;
            v51 = (int8x16_t *)(*((_QWORD *)a1 + 10) + 2);
            *((_QWORD *)a1 + 10) = v51;
            if ((unint64_t)v51 >= *((_QWORD *)a1 + 12))
            {
              v52 = 0;
            }
            else
            {
              v52 = v51->u16[0];
              *(_WORD *)v9 = v52;
            }
LABEL_106:
            if ((_DWORD)v52 == v18)
              goto LABEL_115;
            goto LABEL_90;
          }
LABEL_1056:
          v601 = v54;
          if (v61 == 10 || v61 == 13 || (v61 & 0xFFFE) == 8232)
          {
            JSC::Lexer<char16_t>::shiftLineTerminator(a1);
            v51 = (int8x16_t *)*((_QWORD *)a1 + 10);
            v52 = *((unsigned __int16 *)a1 + 88);
            v54 = v601;
          }
          else
          {
            if (v61 != 120)
            {
              *((_BYTE *)a1 + 150) = 0;
              v649 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
              *((_QWORD *)a1 + 19) = 0;
              if (v649)
              {
                if (*(_DWORD *)v649 == 2)
                {
                  WTF::StringImpl::~StringImpl(v649, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v754, v755, v756, v757, v758, v759, v760, v761);
                  v60 = *((_QWORD *)a1 + 12);
                }
                else
                {
                  *(_DWORD *)v649 -= 2;
                }
              }
              v650 = *((_QWORD *)a1 + 11);
              v651 = (__int16 *)(v650 + 2 * (int)(v11 >> 1));
              *((_QWORD *)a1 + 10) = v651;
              *((_QWORD *)a1 + 14) = v650 + 2 * (int)v666;
              a1[9] = 0;
              if ((unint64_t)v651 >= v60)
                v652 = 0;
              else
                v652 = *v651;
              *((_WORD *)a1 + 88) = v652;
              *a1 = v49;
              a1[5] = 0;
              v270 = (uint64_t)a1;
              v271 = v1356;
              v269 = v1353;
              goto LABEL_408;
            }
            *(_WORD *)v9 = 0;
            *stackaddr_np = (unint64_t)v51->u64 + 4;
            if ((unint64_t)v51->u64 + 4 >= v60)
            {
              v678 = 0;
            }
            else
            {
              v678 = v51->u16[2];
              *(_WORD *)v9 = v678;
            }
            if (v678 - 48 >= 0xA && (unsigned __int16)((v678 | 0x20) - 97) > 5u)
              goto LABEL_1973;
            v679 = &v51->u16[3];
            v680 = (unint64_t)v51->u64 + 6 >= v60 ? 0 : *v679;
            if ((v680 - 48) >= 0xA && (v680 | 0x20u) - 97 >= 6)
              goto LABEL_1973;
            *(_WORD *)v9 = 0;
            *stackaddr_np = (unint64_t)v679;
            if ((unint64_t)v679 >= v60)
            {
              v681 = 0;
            }
            else
            {
              v681 = *v679;
              *(_WORD *)v9 = v681;
            }
            if (v678 >= 0x41)
              v682 = 9;
            else
              v682 = 0;
            v683 = v682 + v678;
            if (v681 >= 0x41)
              v684 = (v681 + 9) & 0xF;
            else
              v684 = v681 - 48;
            v685 = v684 | (16 * v683);
            LOBYTE(v1363.rlim_cur) = v685;
            v686 = a1[5];
            if ((_DWORD)v686 == a1[4])
            {
              v28 = *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v686 + 1), (unint64_t)&v1363);
              *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = v28;
            }
            else
            {
              v28 = (unint64_t)*v53;
              *((_BYTE *)*v53 + v686) = v685;
            }
            ++a1[5];
            *((_WORD *)a1 + 88) = 0;
            v51 = (int8x16_t *)(*((_QWORD *)a1 + 10) + 2);
            *((_QWORD *)a1 + 10) = v51;
            if ((unint64_t)v51 >= *((_QWORD *)a1 + 12))
            {
              v52 = 0;
            }
            else
            {
              v52 = v51->u16[0];
              *(_WORD *)v9 = v52;
            }
            v54 = v601;
          }
          goto LABEL_106;
        }
        if ((v52 - 256) <= 0xFFFFFF0D)
        {
          *((_BYTE *)a1 + 150) = 0;
          v264 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
          *((_QWORD *)a1 + 19) = 0;
          if (v264)
          {
            if (*(_DWORD *)v264 == 2)
            {
              WTF::StringImpl::~StringImpl(v264, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v322, v323, v324, v325, v326, v327, v328, v329);
            }
            else
            {
              *(_DWORD *)v264 -= 2;
            }
          }
          v265 = *((_QWORD *)a1 + 11);
          v266 = *((_QWORD *)a1 + 12);
          v267 = (__int16 *)(v265 + 2 * (int)(v11 >> 1));
          *((_QWORD *)a1 + 10) = v267;
          *((_QWORD *)a1 + 14) = v265 + 2 * (int)v666;
          a1[9] = 0;
          if ((unint64_t)v267 >= v266)
            v268 = 0;
          else
            v268 = *v267;
          v269 = v1353;
          *((_WORD *)a1 + 88) = v268;
          *a1 = v49;
          a1[5] = 0;
          v270 = (uint64_t)a1;
          v271 = v1356;
LABEL_408:
          v272 = JSC::Lexer<char16_t>::parseStringSlowCase<true>(v270, v271, v269, a4, a5, a6, a7, a8);
          goto LABEL_409;
        }
        *((_WORD *)a1 + 88) = 0;
        *((_QWORD *)a1 + 10) = (char *)v56 + StatusReg;
        v28 = *((_QWORD *)a1 + 12);
        if ((unint64_t)v56 + StatusReg >= v28)
        {
          v52 = 0;
        }
        else
        {
          v52 = *(unsigned __int16 *)((char *)v56 + StatusReg);
          *(_WORD *)v9 = v52;
        }
        StatusReg += 2;
      }
      while ((_DWORD)v52 != v18);
      if (!StatusReg)
        goto LABEL_115;
      if (StatusReg <= -2)
        goto LABEL_2578;
      v64 = StatusReg >> 1;
      v65 = a1[4];
      v66 = a1[5];
      v67 = (StatusReg >> 1) + v66;
      if (v67 > v65)
      {
        v313 = v65 + (v65 >> 2);
        if (v313 >= 0x10)
          v314 = v313 + 1;
        else
          v314 = 16;
        if (v314 <= v67)
          v314 = (StatusReg >> 1) + v66;
        if (HIDWORD(v314))
        {
          __break(0xC471u);
          JUMPOUT(0x19886CB1CLL);
        }
        v1354 = v314;
        __n = (size_t)*v53;
        v315 = (void *)WTF::fastMalloc((WTF *)v314);
        a1[4] = v1354;
        *((_QWORD *)a1 + 1) = v315;
        memcpy(v315, (const void *)__n, v66);
        if (__n)
        {
          if (*v53 == (void *)__n)
          {
            *((_QWORD *)a1 + 1) = 0;
            a1[4] = 0;
          }
          WTF::fastFree(__n, v316, v317, a4, a5, a6, a7, a8);
        }
      }
      a1[5] = v67;
      v68 = *((_QWORD *)a1 + 1);
      if ((unint64_t)StatusReg < 0x10
        || (v137 = (int8x16_t *)(v68 + v66), v68 + v66 < (unint64_t)v51->u64 + (StatusReg & 0xFFFFFFFFFFFFFFFELL))
        && (unint64_t)v51 < v68 + v64 + v66)
      {
        v69 = 0;
        goto LABEL_113;
      }
      if ((unint64_t)StatusReg >= 0x20)
      {
        v69 = v64 & 0xFFFFFFFFFFFFFFF0;
        v203 = v64 & 0xFFFFFFFFFFFFFFF0;
        v204 = v51;
        do
        {
          v206 = *v204;
          v205 = v204[1];
          v204 += 2;
          *v137++ = vuzp1q_s8(v206, v205);
          v203 -= 16;
        }
        while (v203);
        if (v64 == v69)
          goto LABEL_115;
        if ((StatusReg & 0x10) != 0)
          goto LABEL_215;
LABEL_113:
        v70 = v64 - v69;
        v71 = (_BYTE *)(v68 + v69 + v66);
        v72 = (unsigned __int16 *)v51 + v69;
        do
        {
          v73 = *(_BYTE *)v72++;
          *v71++ = v73;
          --v70;
        }
        while (v70);
        goto LABEL_115;
      }
      v69 = 0;
LABEL_215:
      v138 = v69;
      v69 = v64 & 0xFFFFFFFFFFFFFFF8;
      v139 = (int16x8_t *)((char *)v51 + 2 * v138);
      v140 = (int8x8_t *)(v68 + v138 + v66);
      v141 = v138 - (v64 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v142 = *v139++;
        *v140++ = vmovn_s16(v142);
        v141 += 8;
      }
      while (v141);
      if (v64 != v69)
        goto LABEL_113;
LABEL_115:
      v74 = a1[5];
      v75 = *((_QWORD *)a1 + 24);
      if ((_DWORD)v74)
      {
        v11 = *((_QWORD *)a1 + 1);
        stackaddr_np = (unint64_t *)*((_QWORD *)a1 + 23);
        if (*(char *)v11 < 0)
        {
          JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
          v635 = *stackaddr_np;
          v636 = *stackaddr_np + 1;
          *stackaddr_np = v636;
          v637 = v635 >> 6;
          v638 = *((unsigned int *)stackaddr_np + 5);
          if (v635 >> 6 >= v638)
          {
            v811 = WTF::fastMalloc((WTF *)0x200);
            v1363.rlim_cur = v811;
            v812 = *((unsigned int *)stackaddr_np + 5);
            if ((_DWORD)v812 == *((_DWORD *)stackaddr_np + 4))
            {
              v833 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(stackaddr_np + 1), v812 + 1, (unint64_t)&v1363);
              v812 = *((unsigned int *)stackaddr_np + 5);
              *(_QWORD *)(stackaddr_np[1] + 8 * v812) = *v833;
            }
            else
            {
              *(_QWORD *)(stackaddr_np[1] + 8 * v812) = v811;
            }
            v638 = (v812 + 1);
            *((_DWORD *)stackaddr_np + 5) = v638;
            v636 = *stackaddr_np;
            v635 = *stackaddr_np - 1;
            v637 = v635 >> 6;
          }
          if (v637 >= v638)
          {
            __break(0xC471u);
            JUMPOUT(0x19886CC14);
          }
          v639 = *(_QWORD *)(stackaddr_np[1] + 8 * v637);
          v640 = v1358;
          v1358 = 0;
          *(_QWORD *)(v639 + 8 * (v635 & 0x3F)) = v640;
          v641 = v1358;
          v1358 = 0;
          if (v641)
          {
            if (*(_DWORD *)v641 == 2)
            {
              WTF::StringImpl::~StringImpl(v641, v628, v629, v630, v631, v632, v633, v634);
              WTF::fastFree(v721, v722, v723, v724, v725, v726, v727, v728);
              v636 = *stackaddr_np;
              LODWORD(v638) = *((_DWORD *)stackaddr_np + 5);
            }
            else
            {
              *(_DWORD *)v641 -= 2;
            }
          }
          v642 = v636 - 1;
          if (v642 >> 6 >= v638)
          {
            __break(0xC471u);
            JUMPOUT(0x19886CC1CLL);
          }
          v77 = (uint64_t *)(*(_QWORD *)(stackaddr_np[1] + 8 * (v642 >> 6)) + 8 * (v642 & 0x3F));
        }
        else
        {
          v76 = *(unsigned __int8 *)v11;
          if ((_DWORD)v74 == 1)
          {
            StatusReg = (uint64_t)(stackaddr_np + 3);
            v77 = (uint64_t *)stackaddr_np[v76 + 3];
            if (!v77)
            {
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
              v85 = *stackaddr_np;
              v86 = *stackaddr_np + 1;
              *stackaddr_np = v86;
              v87 = v85 >> 6;
              v88 = *((unsigned int *)stackaddr_np + 5);
              if (v85 >> 6 >= v88)
              {
                v308 = WTF::fastMalloc((WTF *)0x200);
                v1363.rlim_cur = v308;
                v309 = *((unsigned int *)stackaddr_np + 5);
                if ((_DWORD)v309 == *((_DWORD *)stackaddr_np + 4))
                {
                  v591 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(stackaddr_np + 1), v309 + 1, (unint64_t)&v1363);
                  v309 = *((unsigned int *)stackaddr_np + 5);
                  *(_QWORD *)(stackaddr_np[1] + 8 * v309) = *v591;
                }
                else
                {
                  *(_QWORD *)(stackaddr_np[1] + 8 * v309) = v308;
                }
                v88 = (v309 + 1);
                *((_DWORD *)stackaddr_np + 5) = v88;
                v86 = *stackaddr_np;
                v85 = *stackaddr_np - 1;
                v87 = v85 >> 6;
              }
              if (v87 >= v88)
              {
                __break(0xC471u);
                JUMPOUT(0x19886CA08);
              }
              v89 = *(_QWORD *)(stackaddr_np[1] + 8 * v87);
              v90 = v1358;
              v1358 = 0;
              *(_QWORD *)(v89 + 8 * (v85 & 0x3F)) = v90;
              v91 = v1358;
              v1358 = 0;
              if (v91)
              {
                if (*(_DWORD *)v91 == 2)
                {
                  WTF::StringImpl::~StringImpl(v91, v78, v79, v80, v81, v82, v83, v84);
                  WTF::fastFree(v243, v244, v245, v246, v247, v248, v249, v250);
                  v86 = *stackaddr_np;
                  LODWORD(v88) = *((_DWORD *)stackaddr_np + 5);
                }
                else
                {
                  *(_DWORD *)v91 -= 2;
                }
              }
              v28 = v86 - 1;
              v92 = (unint64_t)(v86 - 1) >> 6;
              if (v92 >= v88)
              {
                __break(0xC471u);
                JUMPOUT(0x19886558CLL);
              }
              goto LABEL_232;
            }
          }
          else
          {
            StatusReg = (uint64_t)(stackaddr_np + 131);
            v77 = (uint64_t *)stackaddr_np[v76 + 131];
            if (!v77 || !WTF::equalInternal<unsigned char>(*v77, *((_QWORD *)a1 + 1), a1[5]))
            {
              JSC::Identifier::fromString(v75, (WTF::AtomStringImpl *)v11, v74, a4, a5, a6, a7, a8, (rlim_t *)&v1358);
              v154 = *stackaddr_np;
              v155 = *stackaddr_np + 1;
              *stackaddr_np = v155;
              v156 = v154 >> 6;
              v157 = *((unsigned int *)stackaddr_np + 5);
              if (v154 >> 6 >= v157)
              {
                v311 = WTF::fastMalloc((WTF *)0x200);
                v1363.rlim_cur = v311;
                v312 = *((unsigned int *)stackaddr_np + 5);
                if ((_DWORD)v312 == *((_DWORD *)stackaddr_np + 4))
                {
                  v592 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(stackaddr_np + 1), v312 + 1, (unint64_t)&v1363);
                  v312 = *((unsigned int *)stackaddr_np + 5);
                  *(_QWORD *)(stackaddr_np[1] + 8 * v312) = *v592;
                }
                else
                {
                  *(_QWORD *)(stackaddr_np[1] + 8 * v312) = v311;
                }
                v157 = (v312 + 1);
                *((_DWORD *)stackaddr_np + 5) = v157;
                v155 = *stackaddr_np;
                v154 = *stackaddr_np - 1;
                v156 = v154 >> 6;
              }
              if (v156 >= v157)
              {
                __break(0xC471u);
                JUMPOUT(0x19886CA10);
              }
              v158 = *(_QWORD *)(stackaddr_np[1] + 8 * v156);
              v159 = v1358;
              v1358 = 0;
              *(_QWORD *)(v158 + 8 * (v154 & 0x3F)) = v159;
              v160 = v1358;
              v1358 = 0;
              if (v160)
              {
                if (*(_DWORD *)v160 == 2)
                {
                  WTF::StringImpl::~StringImpl(v160, v147, v148, v149, v150, v151, v152, v153);
                  WTF::fastFree(v251, v252, v253, v254, v255, v256, v257, v258);
                  v155 = *stackaddr_np;
                  LODWORD(v157) = *((_DWORD *)stackaddr_np + 5);
                }
                else
                {
                  *(_DWORD *)v160 -= 2;
                }
              }
              v28 = v155 - 1;
              v92 = (unint64_t)(v155 - 1) >> 6;
              if (v92 >= v157)
              {
                __break(0xC471u);
                JUMPOUT(0x19886CA18);
              }
LABEL_232:
              v52 = *(char *)v11;
              if ((v52 & 0x80000000) != 0)
                goto LABEL_2578;
              v161 = (unsigned __int16 *)stackaddr_np[1];
              v162 = 8 * (v28 & 0x3F);
              *(_QWORD *)(StatusReg + 8 * *(unsigned __int8 *)v11) = *(_QWORD *)&v161[4 * v92] + v162;
              v77 = (uint64_t *)(*(_QWORD *)&v161[4 * v92] + v162);
            }
          }
        }
      }
      else
      {
        v77 = (uint64_t *)(*(_QWORD *)(v75 + 41952) + 8);
      }
      *v1356 = v77;
      a1[5] = 0;
LABEL_235:
      *((_WORD *)a1 + 88) = 0;
      v163 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v163;
      if ((unint64_t)v163 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v163;
      *((_BYTE *)a1 + 149) = 0;
      v164 = *((_QWORD *)a1 + 11);
      v145 = (unint64_t)v163 - v164;
      v165 = (unint64_t)(*((_QWORD *)a1 + 14) - v164) >> 1;
      v146 = *a1 | ((unint64_t)(v145 >> 1) << 32);
      v31 = 14;
LABEL_826:
      *(_DWORD *)(a2 + 44) = v145 >> 1;
      *(_DWORD *)(a2 + 32) = v49;
      *(_DWORD *)(a2 + 36) = v666;
      *(_QWORD *)(a2 + 60) = v146;
      *(_DWORD *)(a2 + 68) = v165;
      a1[15] = v31;
      return v31;
    case 0x23:
    case 0x122:
      v341 = *((_QWORD *)a1 + 10);
      v342 = (unsigned __int16 *)(v341 + 2);
      v343 = *((_QWORD *)a1 + 12);
      if (v341 + 2 >= v343)
        goto LABEL_1680;
      v344 = *v342;
      if ((_DWORD)v344 == 33)
      {
        if (((v341 - *((_QWORD *)a1 + 11)) & 0x1FFFFFFFELL) == 0)
        {
          *(_WORD *)v9 = 0;
          v861 = (_WORD *)(v341 + 4);
          *stackaddr_np = (unint64_t)v861;
          if ((unint64_t)v861 < v343)
            *(_WORD *)v9 = *v861;
          goto LABEL_131;
        }
LABEL_1680:
        if (v18 <= 12)
        {
          switch(v18)
          {
            case 0:
              v897 = WTF::fastCompactMalloc((WTF *)0x20);
              v905 = (WTF::StringImpl *)v897;
              *(_QWORD *)v897 = 0x1700000002;
              v906 = "Invalid character: '\\0'";
              goto LABEL_1696;
            case 10:
              v897 = WTF::fastCompactMalloc((WTF *)0x20);
              v905 = (WTF::StringImpl *)v897;
              *(_QWORD *)v897 = 0x1700000002;
              v906 = "Invalid character: '\\n'";
              goto LABEL_1696;
            case 11:
              v897 = WTF::fastCompactMalloc((WTF *)0x20);
              v905 = (WTF::StringImpl *)v897;
              *(_QWORD *)v897 = 0x1700000002;
              v906 = "Invalid character: '\\v'";
              goto LABEL_1696;
          }
        }
        else if (v18 > 63)
        {
          if (v18 == 64)
          {
            v897 = WTF::fastCompactMalloc((WTF *)0x20);
            v905 = (WTF::StringImpl *)v897;
            *(_QWORD *)v897 = 0x1600000002;
            v906 = "Invalid character: '@'";
            goto LABEL_1696;
          }
          if (v18 == 96)
          {
            v897 = WTF::fastCompactMalloc((WTF *)0x20);
            v905 = (WTF::StringImpl *)v897;
            *(_QWORD *)v897 = 0x1600000002;
            goto LABEL_1696;
          }
        }
        else
        {
          if (v18 == 13)
          {
            v897 = WTF::fastCompactMalloc((WTF *)0x20);
            v905 = (WTF::StringImpl *)v897;
            *(_QWORD *)v897 = 0x1700000002;
            v906 = "Invalid character: '\\r'";
            goto LABEL_1696;
          }
          if (v18 == 35)
          {
            v897 = WTF::fastCompactMalloc((WTF *)0x20);
            v905 = (WTF::StringImpl *)v897;
            *(_QWORD *)v897 = 0x1600000002;
            v906 = "Invalid character: '#'";
LABEL_1696:
            *(_QWORD *)(v897 + 8) = v906;
            *(_DWORD *)(v897 + 16) = 4;
LABEL_1697:
            v907 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
            *((_QWORD *)a1 + 19) = v905;
            if (v907)
            {
              if (*(_DWORD *)v907 == 2)
              {
                WTF::StringImpl::~StringImpl(v907, v898, v899, v900, v901, v902, v903, v904);
                WTF::fastFree(v909, v910, v911, v912, v913, v914, v915, v916);
              }
              else
              {
                *(_DWORD *)v907 -= 2;
              }
            }
            v31 = 0x100000;
            goto LABEL_1701;
          }
        }
        v917 = v18;
        v918 = 15;
        do
        {
          *((_BYTE *)&v1363.rlim_cur + v918--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v917 & 0xF];
          v235 = v917 > 0xF;
          v917 >>= 4;
        }
        while (v235);
        if (v918 + 2 < 14)
        {
          v919 = (char *)&v1363.rlim_cur + v918 + 1;
        }
        else
        {
          v919 = (char *)&v1363.rlim_max + 4;
          memset((char *)&v1363.rlim_max + 4, 48, v918 - 11);
        }
        v920 = v1364 - (_DWORD)v919;
        LODWORD(v1364[0]) = v920;
        if (v920 < 0
          || (v921 = __OFADD__(v920, 1), v922 = v920 + 1, v921)
          || (v923 = (v922 + 21), __OFADD__(v922, 21))
          || (WTF::tryFastCompactMalloc((WTF *)(v923 + 20), &v1358), (v905 = v1358) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x19886CD78);
        }
        *(_DWORD *)v1358 = 2;
        *((_DWORD *)v905 + 1) = v923;
        *((_QWORD *)v905 + 1) = (char *)v905 + 20;
        *((_DWORD *)v905 + 4) = 4;
        qmemcpy((char *)v905 + 20, "Invalid character '\\u", 21);
        v924 = (char *)v905 + 41;
        v925 = LODWORD(v1364[0]);
        v898 = (WTF::AtomStringImpl *)((char *)v1364 - LODWORD(v1364[0]));
        if (LODWORD(v1364[0]) == 1)
        {
          *v924 = *(_BYTE *)v898;
        }
        else if (LODWORD(v1364[0]))
        {
          memcpy((char *)v905 + 41, v898, LODWORD(v1364[0]));
        }
        v924[v925] = 39;
        goto LABEL_1697;
      }
      if (v344 > 0xFF)
      {
        if (v343 - (_QWORD)v342 != 2 && (v344 & 0xFC00) == 0xD800)
        {
          v859 = *(unsigned __int16 *)(v341 + 4);
          if ((v859 & 0xFC00) == 0xDC00)
            LODWORD(v344) = v859 + ((_DWORD)v344 << 10) - 56613888;
        }
        if (!u_hasBinaryProperty(v344, UCHAR_ID_START))
        {
          v18 = *(unsigned __int16 *)v9;
          goto LABEL_1680;
        }
      }
      else if (JSC::typesOfLatin1Characters[v344] && (_DWORD)v344 != 92)
      {
        goto LABEL_1680;
      }
      LODWORD(__n) = __n & 0xFFFFFFFB;
LABEL_530:
      *(_BYTE *)(a2 + 16) = 0;
      v345 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      v11 = *((_QWORD *)a1 + 12) - (_QWORD)v345;
      if ((__n & 4) == 0)
      {
        if (__n & 1 | ((uint64_t)v11 < 21))
          goto LABEL_545;
        v346 = *v345;
        switch(*v345)
        {
          case 'f':
            v373 = *(_DWORD *)(v345 + 1);
            if (v373 > 7471214)
            {
              if (v373 != 7471215)
                goto LABEL_545;
              v413 = v345[3];
              if (v413 > 0xFF)
              {
                if (u_charType(v345[3]) != 12 && (v413 - 8232) >= 2 && (_DWORD)v413 != 65279)
                  goto LABEL_545;
              }
              else if (v345[3] == 92 || JSC::typesOfLatin1Characters[v413] <= 3u)
              {
                goto LABEL_545;
              }
              v414 = *((_QWORD *)a1 + 10);
              v415 = *(_WORD *)(v414 + 6);
              *((_QWORD *)a1 + 10) = v414 + 6;
              *((_WORD *)a1 + 88) = v415;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 264;
              v360 = 518;
            }
            else
            {
              if (v373 == 7209077)
              {
                if (*(_DWORD *)(v345 + 3) == 7602275
                  && *((_DWORD *)v345 + 2) == 6881396
                  && *((_DWORD *)v345 + 3) == 7209071)
                {
                  v374 = v345[8];
                  if (v374 > 0xFF)
                  {
                    if (u_charType(v345[8]) == 12 || (v374 - 8232) < 2 || (_DWORD)v374 == 65279)
                      goto LABEL_598;
                  }
                  else if (v345[8] != 92 && JSC::typesOfLatin1Characters[v374] > 3u)
                  {
LABEL_598:
                    v375 = *((_QWORD *)a1 + 10);
                    v376 = *(_WORD *)(v375 + 16);
                    *((_QWORD *)a1 + 10) = v375 + 16;
                    *((_WORD *)a1 + 88) = v376;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 272;
                    v360 = 523;
                    goto LABEL_586;
                  }
                }
LABEL_545:
                v350 = *(unsigned __int16 *)v9;
                v351 = (unsigned __int16 *)*stackaddr_np;
                if (v350 == 35)
                {
                  LODWORD(StatusReg) = 0;
                  v353 = 0;
                  *((_WORD *)a1 + 88) = 0;
                  v352 = v351 + 1;
                  *((_QWORD *)a1 + 10) = v351 + 1;
                  v354 = *((_QWORD *)a1 + 12);
                  goto LABEL_550;
                }
                LODWORD(StatusReg) = 0;
                v352 = (unsigned __int16 *)*stackaddr_np;
                v353 = *(unsigned __int16 *)v9;
                while (1)
                {
                  if (v353 > 0xFF)
                  {
                    if ((v353 & 0xF800) == 0xD800
                      || (isNonLatin1IdentPart = JSC::isNonLatin1IdentPart(v353),
                          v353 = *(unsigned __int16 *)v9,
                          !isNonLatin1IdentPart))
                    {
LABEL_811:
                      if (v353 == 92 || (v353 & 0xF800) == 0xD800)
                      {
                        v31 = JSC::Lexer<char16_t>::parseIdentifierSlowCase<true>((uint64_t)a1, v1356, __n, v1353, v351);
                        goto LABEL_823;
                      }
                      v28 = *stackaddr_np;
                      v52 = *stackaddr_np - (_QWORD)v351;
                      v485 = v52 >> 1;
                      __src = v11;
                      if (StatusReg > 0xFF)
                      {
                        if (v52 <= -2)
                          goto LABEL_2578;
                        stackaddr_np = (unint64_t *)*((_QWORD *)a1 + 24);
                        if ((unsigned __int16 *)v28 == v351)
                        {
                          v488 = (uint64_t *)(stackaddr_np[5244] + 8);
                          goto LABEL_820;
                        }
                        v486 = *((_QWORD *)a1 + 23);
                        v792 = *v351;
                        if (v792 < 0x80)
                        {
                          if (v52 == 2)
                          {
                            StatusReg = v486 + 24;
                            v488 = *(uint64_t **)(v486 + 24 + 8 * v792);
                            if (v488)
                              goto LABEL_820;
                            JSC::Identifier::fromString(*((_QWORD *)a1 + 24), (WTF::AtomStringImpl *)v351, v485, a4, a5, a6, a7, a8, &v1363);
                            WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v486, (uint64_t *)&v1363);
                            rlim_cur = (WTF::StringImpl *)v1363.rlim_cur;
                            v1363.rlim_cur = 0;
                            if (rlim_cur)
                            {
                              if (*(_DWORD *)rlim_cur == 2)
                              {
                                WTF::StringImpl::~StringImpl(rlim_cur, v926, v927, v928, v929, v930, v931, v932);
                                WTF::fastFree(v962, v963, v964, v965, v966, v967, v968, v969);
                              }
                              else
                              {
                                *(_DWORD *)rlim_cur -= 2;
                              }
                            }
                            v842 = *(_QWORD *)v486 - 1;
                            v52 = v842 >> 6;
                            if (v842 >> 6 >= *(unsigned int *)(v486 + 20))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19886B3F8);
                            }
                          }
                          else
                          {
                            StatusReg = v486 + 1048;
                            v488 = *(uint64_t **)(v486 + 1048 + 8 * v792);
                            if (v488 && WTF::equalInternal<char16_t>(*v488, (unint64_t)v351, v52 >> 1))
                            {
LABEL_820:
                              *v1356 = v488;
                              if (v350 == 35)
                              {
                                v31 = 13;
                              }
                              else if (__src > 21
                                     || (__n & 1) != 0
                                     || (v556 = *v488) == 0
                                     || (v557 = *(unsigned int *)(v556 + 16), (v557 & 0x20) != 0)
                                     || (v558 = (v557 >> 8) & 0x7F, v559 = JSC::mainTableIndex[2 * v558], v559 == 0xFFFF))
                              {
LABEL_822:
                                v31 = 12;
                              }
                              else
                              {
                                while (1)
                                {
                                  v560 = (__int16)v559;
                                  v561 = (unint64_t *)&(&JSC::mainTableValues)[5 * (__int16)v559];
                                  v562 = v561[1];
                                  if (v562)
                                  {
                                    if (WTF::equalInternal<unsigned char>(v556, *v561, v562 - 1))
                                      break;
                                  }
                                  LODWORD(v558) = (__int16)JSC::mainTableIndex[2 * (int)v558 + 1];
                                  if ((_DWORD)v558 == -1)
                                    goto LABEL_822;
                                  LOWORD(v559) = JSC::mainTableIndex[2 * (int)v558];
                                }
                                v816 = (&JSC::mainTableValues)[5 * v560 + 3];
                                v817 = v1353;
                                if (v816 != 532)
                                  v817 = 1;
                                if (v817)
                                  v31 = v816;
                                else
                                  v31 = 12;
                              }
                              goto LABEL_823;
                            }
                            JSC::Identifier::fromString((uint64_t)stackaddr_np, (WTF::AtomStringImpl *)v351, v485, a4, a5, a6, a7, a8, &v1363);
                            WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v486, (uint64_t *)&v1363);
                            v841 = (WTF::StringImpl *)v1363.rlim_cur;
                            v1363.rlim_cur = 0;
                            if (v841)
                            {
                              if (*(_DWORD *)v841 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v841, v834, v835, v836, v837, v838, v839, v840);
                                WTF::fastFree(v946, v947, v948, v949, v950, v951, v952, v953);
                              }
                              else
                              {
                                *(_DWORD *)v841 -= 2;
                              }
                            }
                            v842 = *(_QWORD *)v486 - 1;
                            v52 = v842 >> 6;
                            if (v842 >> 6 >= *(unsigned int *)(v486 + 20))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19886CC7CLL);
                            }
                          }
                          v28 = *v351;
                          if (v28 < 0x80)
                          {
                            v843 = *(_QWORD *)(v486 + 8);
                            v844 = 8 * (v842 & 0x3F);
                            *(_QWORD *)(StatusReg + 8 * v28) = *(_QWORD *)(v843 + 8 * v52) + v844;
                            v488 = (uint64_t *)(*(_QWORD *)(v843 + 8 * v52) + v844);
                            goto LABEL_820;
                          }
                          goto LABEL_2578;
                        }
                        JSC::Identifier::fromString(*((_QWORD *)a1 + 24), (WTF::AtomStringImpl *)v351, v485, a4, a5, a6, a7, a8, &v1363);
                        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v486, (uint64_t *)&v1363);
                        v800 = (WTF::StringImpl *)v1363.rlim_cur;
                        v1363.rlim_cur = 0;
                        if (v800)
                        {
                          if (*(_DWORD *)v800 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v800, v793, v794, v795, v796, v797, v798, v799);
                            WTF::fastFree(v934, v935, v936, v937, v938, v939, v940, v941);
                          }
                          else
                          {
                            *(_DWORD *)v800 -= 2;
                          }
                        }
                        v801 = *(_QWORD *)v486 - 1;
                        v802 = v801 >> 6;
                        if (v801 >> 6 >= *(unsigned int *)(v486 + 20))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19886A264);
                        }
                      }
                      else
                      {
                        if (v52 <= -2)
                          goto LABEL_2578;
                        stackaddr_np = (unint64_t *)*((_QWORD *)a1 + 24);
                        if ((unsigned __int16 *)v28 == v351)
                        {
                          v488 = (uint64_t *)(stackaddr_np[5244] + 8);
                          goto LABEL_820;
                        }
                        v486 = *((_QWORD *)a1 + 23);
                        v487 = *v351;
                        if (v487 < 0x80)
                        {
                          if (v52 == 2)
                          {
                            StatusReg = v486 + 24;
                            v488 = *(uint64_t **)(v486 + 24 + 8 * v487);
                            if (v488)
                              goto LABEL_820;
                            if (*((_BYTE *)stackaddr_np + 44265))
                            {
                              v503 = (unsigned __int16 *)stackaddr_np[v487 + 5277];
                              v11 = *((_QWORD *)v503 + 1);
                              if ((v11 & 1) != 0)
                                v504 = 0;
                              else
                                v504 = (_DWORD *)*((_QWORD *)v503 + 1);
                              *v504 += 2;
                            }
                            else
                            {
                              LOBYTE(v1358) = *v351;
                              WTF::AtomStringImpl::add((uint64_t)&v1358, 1uLL, a4, a5, a6, a7, a8, &v1363);
                              v11 = v1363.rlim_cur;
                            }
                            v505 = (*(_QWORD *)v486)++;
                            v506 = v505 >> 6;
                            v507 = *(unsigned int *)(v486 + 20);
                            if (v505 >> 6 >= v507)
                            {
                              v563 = WTF::fastMalloc((WTF *)0x200);
                              v1363.rlim_cur = v563;
                              v564 = *(unsigned int *)(v486 + 20);
                              if ((_DWORD)v564 == *(_DWORD *)(v486 + 16))
                              {
                                v568 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v486 + 8, v564 + 1, (unint64_t)&v1363);
                                v564 = *(unsigned int *)(v486 + 20);
                                *(_QWORD *)(*(_QWORD *)(v486 + 8) + 8 * v564) = *v568;
                              }
                              else
                              {
                                *(_QWORD *)(*(_QWORD *)(v486 + 8) + 8 * v564) = v563;
                              }
                              v507 = (v564 + 1);
                              *(_DWORD *)(v486 + 20) = v507;
                              v505 = *(_QWORD *)v486 - 1;
                              v506 = v505 >> 6;
                            }
                            if (v506 >= v507)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19886C540);
                            }
                            v508 = *(_QWORD *)(v486 + 8);
                            v509 = *(_QWORD *)(v508 + 8 * v506);
                            v28 = v505 & 0x3F;
                            *(_QWORD *)(v509 + 8 * v28) = v11;
                            v510 = v505 >> 6;
                            if (v510 >= v507)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19886C548);
                            }
                            v52 = *v351;
                            if ((unint64_t)v52 < 0x80)
                            {
                              *(_QWORD *)(StatusReg + 8 * v52) = *(_QWORD *)(v508 + 8 * v510) + 8 * v28;
                              v488 = (uint64_t *)(*(_QWORD *)(v508 + 8 * v510) + 8 * v28);
                              goto LABEL_820;
                            }
                            goto LABEL_2578;
                          }
                          v11 = v486 + 1048;
                          v488 = *(uint64_t **)(v486 + 1048 + 8 * v487);
                          if (v488 && WTF::equalInternal<char16_t>(*v488, (unint64_t)v351, v52 >> 1))
                            goto LABEL_820;
                          if (v485 == 1)
                          {
                            if (*v351 <= 0xFFu)
                            {
                              JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(stackaddr_np + 5246), *v351, a4, a5, a6, a7, a8, &v1363);
                              v501 = v1363.rlim_cur;
                              goto LABEL_872;
                            }
                            if (v351)
                            {
                              v492 = -1640531527;
                              v1358 = (WTF::StringImpl *)v351;
                              v1359 = 1;
                              goto LABEL_833;
                            }
                          }
                          else
                          {
                            if (!v485)
                            {
                              v501 = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
                              v520 = WTF::StringImpl::s_emptyAtomString + 2;
                              goto LABEL_871;
                            }
                            if (v351)
                            {
                              v491 = 0;
                              v492 = -1640531527;
                              v1358 = (WTF::StringImpl *)v351;
                              v1359 = v485;
                              do
                              {
                                v493 = (v351[v491 + 1] << 11) ^ ((v492 + v351[v491]) << 16) ^ (v492 + v351[v491]);
                                v492 = v493 + (v493 >> 11);
                                v494 = v491 + 3;
                                v491 += 2;
                              }
                              while (v494 < v485);
                              if ((v485 & 1) != 0)
                              {
LABEL_833:
                                v495 = v351[v485 - 1];
                                v492 = ((v492 + v495) ^ ((v492 + v495) << 11))
                                     + (((v492 + v495) ^ ((v492 + v495) << 11)) >> 17);
                              }
                              v496 = (v492 ^ (8 * v492)) + ((v492 ^ (8 * v492)) >> 5);
                              v497 = (v496 ^ (4 * v496)) + ((v496 ^ (4 * v496)) >> 15);
                              v498 = (v497 ^ (v497 << 10)) & 0xFFFFFF;
                              if (!v498)
                                v498 = 0x800000;
                              v1360 = v498;
                              v9 = WTF::AtomStringTableLocker::s_stringTableLock;
                              if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                              {
                                __clrex();
                                goto LABEL_838;
                              }
                              if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_838:
                                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
                              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                              v500 = *(_QWORD *)(StatusReg + 736);
                              if (v500)
                              {
LABEL_840:
                                WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::UCharBufferTranslator>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(*(uint64_t **)(v500 + 56), (uint64_t)&v1358, a4, a5, a6, a7, a8, (uint64_t)&v1363);
                                v501 = 16 * *(unsigned int *)v1363.rlim_cur;
                                if (LOBYTE(v1364[0]))
                                {
                                  v502 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                                  if (v502 == 1)
                                    goto LABEL_842;
LABEL_868:
                                  __clrex();
                                  goto LABEL_869;
                                }
                                *(_DWORD *)v501 += 2;
                                v519 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                                if (v519 != 1)
                                  goto LABEL_868;
LABEL_842:
                                if (__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_869:
                                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
LABEL_870:
                                v520 = *(_DWORD *)v501;
                                *(_DWORD *)v501 += 2;
                                if (v520)
                                {
LABEL_871:
                                  *(_DWORD *)v501 = v520;
LABEL_872:
                                  v521 = (*(_QWORD *)v486)++;
                                  v522 = v521 >> 6;
                                  v523 = *(unsigned int *)(v486 + 20);
                                  if (v521 >> 6 >= v523)
                                  {
                                    stackaddr_np = (unint64_t *)(v486 + 8);
                                    v541 = WTF::fastMalloc((WTF *)0x200);
                                    v1363.rlim_cur = v541;
                                    v542 = *(unsigned int *)(v486 + 20);
                                    if ((_DWORD)v542 == *(_DWORD *)(v486 + 16))
                                    {
                                      v543 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v486 + 8, v542 + 1, (unint64_t)&v1363);
                                      v542 = *(unsigned int *)(v486 + 20);
                                      *(_QWORD *)(*(_QWORD *)(v486 + 8) + 8 * v542) = *v543;
                                    }
                                    else
                                    {
                                      *(_QWORD *)(*stackaddr_np + 8 * v542) = v541;
                                    }
                                    v523 = (v542 + 1);
                                    *(_DWORD *)(v486 + 20) = v523;
                                    v521 = *(_QWORD *)v486 - 1;
                                    v522 = v521 >> 6;
                                  }
                                  if (v522 >= v523)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19886C1A0);
                                  }
                                  v524 = *(_QWORD *)(v486 + 8);
                                  v525 = *(_QWORD *)(v524 + 8 * v522);
                                  v28 = v521 & 0x3F;
                                  *(_QWORD *)(v525 + 8 * v28) = v501;
                                  v526 = v521 >> 6;
                                  if (v526 >= v523)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19886C1A8);
                                  }
                                  v52 = *v351;
                                  if ((unint64_t)v52 < 0x80)
                                  {
                                    v527 = 8 * v526;
                                    v528 = 8 * v28;
                                    *(_QWORD *)(v11 + 8 * v52) = *(_QWORD *)(v524 + v527) + v528;
                                    v488 = (uint64_t *)(*(_QWORD *)(v524 + v527) + v528);
                                    goto LABEL_820;
                                  }
LABEL_2578:
                                  __break(1u);
LABEL_2579:
                                  v429 = *(unsigned __int16 *)v52;
                                  *(_WORD *)v9 = v429;
                                  while (1)
                                  {
LABEL_2580:
                                    if (v429 > 0xFF)
                                    {
                                      if ((v429 & 0xF800) == 0xD800)
                                        goto LABEL_2588;
                                      if (!JSC::isNonLatin1IdentPart(v429))
                                      {
                                        v429 = *(unsigned __int16 *)v9;
LABEL_2588:
                                        if (v429 == 92 || (v429 & 0xF800) == 0xD800)
                                        {
                                          v31 = JSC::Lexer<char16_t>::parseIdentifierSlowCase<false>((uint64_t)a1, v1356, __n, (_WORD *)v11);
                                        }
                                        else
                                        {
                                          *v1356 = 0;
                                          if ((_DWORD)StatusReg == 35)
                                            v31 = 13;
                                          else
                                            v31 = 12;
                                        }
LABEL_823:
                                        *((_BYTE *)a1 + 149) = 0;
LABEL_824:
                                        v489 = *((_QWORD *)a1 + 11);
                                        v145 = *((_QWORD *)a1 + 10) - v489;
                                        v666 = (unint64_t)(*((_QWORD *)a1 + 14) - v489) >> 1;
                                        v49 = *a1;
                                        v146 = *a1 | ((unint64_t)(v145 >> 1) << 32);
LABEL_825:
                                        LODWORD(v165) = v666;
                                        goto LABEL_826;
                                      }
                                      v52 = *stackaddr_np;
                                      v28 = (unint64_t)JSC::typesOfLatin1Characters;
                                    }
                                    else if (*(unsigned __int8 *)(v28 + v429) >= 4u)
                                    {
                                      goto LABEL_2588;
                                    }
                                    v429 = 0;
                                    *((_WORD *)a1 + 88) = 0;
                                    v52 += 2;
                                    *((_QWORD *)a1 + 10) = v52;
                                    if ((unint64_t)v52 < *((_QWORD *)a1 + 12))
                                      goto LABEL_2579;
                                  }
                                }
                                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v501, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                                v534 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
                                if (!v534)
                                {
                                  pas_try_deallocate_slow_no_cache(v501, (uint64_t)&bmalloc_heap_config, 1);
                                  goto LABEL_872;
                                }
                                if (!(v501 >> 43)
                                  && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                       + ((v501 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v501)) & 1) != 0)
                                {
LABEL_880:
                                  v535 = *(unsigned int *)(v534 + 8000);
                                  if (v535 >= 0x3E7)
                                  {
                                    pas_thread_local_cache_append_deallocation_slow(v534, v501, (os_unfair_lock_s *)5, v529, v530, v531, v532, v533);
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v534 + 8 * v535) = v501 | 0x5000000000000;
                                    *(_DWORD *)(v534 + 8000) = v535 + 1;
                                  }
                                  goto LABEL_872;
                                }
                                if (v501 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v501 >> 24)
                                {
                                  v529 = 0;
                                }
                                else
                                {
                                  v529 = (*(_DWORD *)((char *)off_1ECF425F8
                                                    + ((((v501 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v501) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                  if ((_DWORD)v529 == 1)
                                    goto LABEL_880;
                                }
                                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v534, v501, 1, v529, v530, v531, v532, v533);
                                goto LABEL_872;
                              }
                              v511 = atomic_load(&WTF::initialize(void)::onceKey);
                              if (v511 != -1)
                              {
                                v1363.rlim_cur = (rlim_t)&v1361;
                                v1362 = &v1363;
                                std::__call_once(&WTF::initialize(void)::onceKey, &v1362, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
                              }
                              v512 = WTF::fastMalloc((WTF *)0x68);
                              v500 = v512;
                              *(_OWORD *)v512 = 0u;
                              *(_OWORD *)(v512 + 16) = 0u;
                              *(_OWORD *)(v512 + 32) = 0u;
                              *(_OWORD *)(v512 + 48) = 0u;
                              *(_OWORD *)(v512 + 64) = 0u;
                              *(_OWORD *)(v512 + 80) = 0u;
                              *(_QWORD *)(v512 + 96) = 0;
                              *(_DWORD *)v512 = 1;
                              *(_OWORD *)(v512 + 8) = 0u;
                              v513 = (unint64_t *)(v512 + 8);
                              *(_OWORD *)(v512 + 24) = 0u;
                              do
                              {
                                v514 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
                                v515 = v514 + 1;
                              }
                              while (__stlxr(v515, (unsigned int *)&WTF::ThreadLike::s_uid));
                              *(_DWORD *)(v512 + 48) = v515;
                              *(_QWORD *)(v512 + 52) = 0;
                              *(_QWORD *)(v512 + 68) = 0;
                              *(_QWORD *)(v512 + 60) = 0;
                              *(_DWORD *)(v512 + 76) = 0;
                              *(_QWORD *)(v512 + 88) = 0;
                              *(_QWORD *)(v512 + 96) = 0;
                              v516 = pthread_self();
                              if (__ldaxr(v513))
                              {
                                __clrex();
                                goto LABEL_863;
                              }
                              if (__stxr(1uLL, v513))
LABEL_863:
                                WTF::WordLock::lockSlow((WTF::WordLock *)v513);
                              *(_QWORD *)(v500 + 40) = v516;
                              *(_DWORD *)(v500 + 52) = pthread_mach_thread_np(v516);
                              v518 = __ldxr(v513);
                              if (v518 == 1)
                              {
                                if (!__stlxr(0, v513))
                                  goto LABEL_884;
                              }
                              else
                              {
                                __clrex();
                              }
                              WTF::WordLock::unlockSlow((WTF::WordLock *)v513);
LABEL_884:
                              stackaddr_np = *(unint64_t **)(v500 + 16);
                              if (!stackaddr_np)
                              {
                                v538 = pthread_main_np();
                                v539 = pthread_self();
                                stackaddr_np = (unint64_t *)pthread_get_stackaddr_np(v539);
                                if (v538)
                                {
                                  getrlimit(3, &v1363);
                                  if (v1363.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                                    stacksize_np = 0x800000;
                                  else
                                    stacksize_np = v1363.rlim_cur;
                                }
                                else
                                {
                                  stacksize_np = pthread_get_stacksize_np(v539);
                                }
                                *(_QWORD *)(v500 + 16) = stackaddr_np;
                                *(_QWORD *)(v500 + 24) = (char *)stackaddr_np - stacksize_np;
                                v9 = WTF::AtomStringTableLocker::s_stringTableLock;
                              }
                              *(_QWORD *)(v500 + 80) = stackaddr_np;
                              *(_QWORD *)(v500 + 56) = v500 + 64;
                              v536 = pthread_self();
                              if (pthread_equal(v536, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
                              {
                                v537 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                                if (v537 != -1)
                                {
                                  v1363.rlim_cur = (rlim_t)&v1361;
                                  v1362 = &v1363;
                                  std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v1362, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                                }
                                *(_QWORD *)(v500 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
                              }
                              *(_QWORD *)(StatusReg + 736) = v500;
                              pthread_key_init_np();
                              goto LABEL_840;
                            }
                          }
                          v501 = 0;
                          goto LABEL_870;
                        }
                        JSC::Identifier::add8(*((_QWORD *)a1 + 24), (WTF::AtomStringImpl *)v351, v485, a4, a5, a6, a7, a8, &v1363.rlim_cur);
                        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v486, (uint64_t *)&v1363);
                        v810 = (WTF::StringImpl *)v1363.rlim_cur;
                        v1363.rlim_cur = 0;
                        if (v810)
                        {
                          if (*(_DWORD *)v810 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v810, v803, v804, v805, v806, v807, v808, v809);
                            WTF::fastFree(v851, v852, v853, v854, v855, v856, v857, v858);
                          }
                          else
                          {
                            *(_DWORD *)v810 -= 2;
                          }
                        }
                        v801 = *(_QWORD *)v486 - 1;
                        v802 = v801 >> 6;
                        if (v801 >> 6 >= *(unsigned int *)(v486 + 20))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19886CC54);
                        }
                      }
                      v488 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v486 + 8) + 8 * v802) + 8 * (v801 & 0x3F));
                      goto LABEL_820;
                    }
                    v352 = (unsigned __int16 *)*stackaddr_np;
                  }
                  else if (JSC::typesOfLatin1Characters[v353] >= 4u)
                  {
                    goto LABEL_811;
                  }
                  LODWORD(StatusReg) = v353 | StatusReg;
                  *((_WORD *)a1 + 88) = 0;
                  *((_QWORD *)a1 + 10) = ++v352;
                  v354 = *((_QWORD *)a1 + 12);
                  v353 = 0u;
LABEL_550:
                  if ((unint64_t)v352 < v354)
                  {
                    v353 = *v352;
                    *(_WORD *)v9 = v353;
                  }
                }
              }
              if (v373 == 7077985)
              {
                if (*(_DWORD *)(v345 + 3) != 6619251)
                  goto LABEL_545;
                v466 = v345[5];
                if (v466 > 0xFF)
                {
                  if (u_charType(v345[5]) != 12 && (v466 - 8232) >= 2 && (_DWORD)v466 != 65279)
                    goto LABEL_545;
                }
                else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v466] <= 3u)
                {
                  goto LABEL_545;
                }
                v467 = *((_QWORD *)a1 + 10);
                v468 = *(_WORD *)(v467 + 10);
                *((_QWORD *)a1 + 10) = v467 + 10;
                *((_WORD *)a1 + 88) = v468;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 248;
                v360 = 514;
              }
              else
              {
                if (v373 != 7209065 || *(_DWORD *)(v345 + 3) != 7077985 || *(_DWORD *)(v345 + 5) != 7929964)
                  goto LABEL_545;
                v416 = v345[7];
                if (v416 > 0xFF)
                {
                  if (u_charType(v345[7]) != 12 && (v416 - 8232) >= 2 && (_DWORD)v416 != 65279)
                    goto LABEL_545;
                }
                else if (v345[7] == 92 || JSC::typesOfLatin1Characters[v416] <= 3u)
                {
                  goto LABEL_545;
                }
                v417 = *((_QWORD *)a1 + 10);
                v418 = *(_WORD *)(v417 + 14);
                *((_QWORD *)a1 + 10) = v417 + 14;
                *((_WORD *)a1 + 88) = v418;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 256;
                v360 = 536;
              }
            }
            goto LABEL_586;
          case 'i':
            v361 = v345[1];
            if (v361 == 102)
            {
              v393 = v345[2];
              if (v393 > 0xFF)
              {
                if (u_charType(v345[2]) != 12 && (v393 - 8232) >= 2 && (_DWORD)v393 != 65279)
                  goto LABEL_545;
              }
              else if (v345[2] == 92 || JSC::typesOfLatin1Characters[v393] <= 3u)
              {
                goto LABEL_545;
              }
              v394 = *((_QWORD *)a1 + 10);
              v395 = *(_WORD *)(v394 + 4);
              *((_QWORD *)a1 + 10) = v394 + 4;
              *((_WORD *)a1 + 88) = v395;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 280;
              v360 = 525;
              goto LABEL_586;
            }
            if (v361 != 110)
            {
              if (*(_DWORD *)(v345 + 1) != 7340141)
                goto LABEL_545;
              if (*((_DWORD *)v345 + 1) != 7274608 || *((_DWORD *)v345 + 2) != 7602290)
              {
                if (*(_DWORD *)(v345 + 3) != 6619244
                  || *(_DWORD *)(v345 + 5) != 6619245
                  || *((_DWORD *)v345 + 3) != 7209061
                  || *((_DWORD *)v345 + 4) != 7536756)
                {
                  goto LABEL_545;
                }
                v362 = v345[10];
                if (v362 > 0xFF)
                {
                  if (u_charType(v345[10]) != 12 && (v362 - 8232) >= 2 && (_DWORD)v362 != 65279)
                    goto LABEL_545;
                }
                else if (v345[10] == 92 || JSC::typesOfLatin1Characters[v362] <= 3u)
                {
                  goto LABEL_545;
                }
                v363 = 0;
                v364 = *((_QWORD *)a1 + 10);
                v365 = *(_WORD *)(v364 + 20);
                *((_QWORD *)a1 + 10) = v364 + 20;
                *((_WORD *)a1 + 88) = v365;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 288;
                goto LABEL_608;
              }
              v569 = v345[6];
              if (v569 > 0xFF)
              {
                if (u_charType(v345[6]) != 12 && (v569 - 8232) >= 2 && (_DWORD)v569 != 65279)
                  goto LABEL_545;
              }
              else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v569] <= 3u)
              {
                goto LABEL_545;
              }
              v570 = *((_QWORD *)a1 + 10);
              v571 = *(_WORD *)(v570 + 12);
              *((_QWORD *)a1 + 10) = v570 + 12;
              *((_WORD *)a1 + 88) = v571;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 296;
              v360 = 539;
              goto LABEL_586;
            }
            v419 = v345[2];
            if (v419 > 0xFF)
            {
              if (u_charType(v345[2]) == 12 || (v419 - 8232) < 2 || (_DWORD)v419 == 65279)
                goto LABEL_685;
            }
            else if (v345[2] != 92 && JSC::typesOfLatin1Characters[v419] > 3u)
            {
LABEL_685:
              v360 = 131589;
              v420 = *((_QWORD *)a1 + 10);
              v421 = *(_WORD *)(v420 + 4);
              *((_QWORD *)a1 + 10) = v420 + 4;
              *((_WORD *)a1 + 88) = v421;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 304;
LABEL_586:
              v363 = 1;
              goto LABEL_587;
            }
            v596 = *((_DWORD *)v345 + 1);
            if (v596 == 7602291)
            {
              if (*((_DWORD *)v345 + 2) != 7209057
                || *((_DWORD *)v345 + 3) != 6619235
                || *((_DWORD *)v345 + 4) != 6684783)
              {
                goto LABEL_545;
              }
              v625 = v345[10];
              if (v625 > 0xFF)
              {
                if (u_charType(v345[10]) != 12 && (v625 - 8232) >= 2 && (_DWORD)v625 != 65279)
                  goto LABEL_545;
              }
              else if (v345[10] == 92 || JSC::typesOfLatin1Characters[v625] <= 3u)
              {
                goto LABEL_545;
              }
              v626 = *((_QWORD *)a1 + 10);
              v627 = *(_WORD *)(v626 + 20);
              *((_QWORD *)a1 + 10) = v626 + 20;
              *((_WORD *)a1 + 88) = v627;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 312;
              v360 = 139780;
              goto LABEL_586;
            }
            if (v596 != 6619252
              || *((_DWORD *)v345 + 2) != 6684786
              || *(_DWORD *)(v345 + 5) != 6357094
              || *(_DWORD *)(v345 + 7) != 6619235)
            {
              goto LABEL_545;
            }
            v597 = v345[9];
            if (v597 > 0xFF)
            {
              if (u_charType(v345[9]) != 12 && (v597 - 8232) >= 2 && (_DWORD)v597 != 65279)
                goto LABEL_545;
            }
            else if (v345[9] == 92 || JSC::typesOfLatin1Characters[v597] <= 3u)
            {
              goto LABEL_545;
            }
            v363 = 0;
            v598 = *((_QWORD *)a1 + 10);
            v599 = *(_WORD *)(v598 + 18);
            *((_QWORD *)a1 + 10) = v598 + 18;
            *((_WORD *)a1 + 88) = v599;
            v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 320;
LABEL_608:
            v360 = 532;
LABEL_587:
            *v1356 = (uint64_t *)v359;
            if (v363 | v1353)
              v31 = v360;
            else
              v31 = 12;
            goto LABEL_823;
          case 't':
            v355 = v345[1];
            if (v355 == 104)
            {
              if (*((_DWORD *)v345 + 1) == 7536745)
              {
                v370 = v345[4];
                if (v370 > 0xFF)
                {
                  if (u_charType(v345[4]) != 12 && (v370 - 8232) >= 2 && (_DWORD)v370 != 65279)
                    goto LABEL_545;
                }
                else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v370] <= 3u)
                {
                  goto LABEL_545;
                }
                v371 = *((_QWORD *)a1 + 10);
                v372 = *(_WORD *)(v371 + 8);
                *((_QWORD *)a1 + 10) = v371 + 8;
                *((_WORD *)a1 + 88) = v372;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 416;
                v360 = 526;
              }
              else
              {
                if (*(_DWORD *)(v345 + 1) != 7471208 || *(_DWORD *)(v345 + 3) != 7798895)
                  goto LABEL_545;
                v478 = v345[5];
                if (v478 > 0xFF)
                {
                  if (u_charType(v345[5]) != 12 && (v478 - 8232) >= 2 && (_DWORD)v478 != 65279)
                    goto LABEL_545;
                }
                else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v478] <= 3u)
                {
                  goto LABEL_545;
                }
                v479 = *((_QWORD *)a1 + 10);
                v480 = *(_WORD *)(v479 + 10);
                *((_QWORD *)a1 + 10) = v479 + 10;
                *((_WORD *)a1 + 88) = v480;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 424;
                v360 = 533;
              }
            }
            else
            {
              if (v355 != 114)
              {
                if (*(_DWORD *)(v345 + 1) != 7340153 || *(_DWORD *)(v345 + 3) != 7274597 || v345[5] != 102)
                  goto LABEL_545;
                v356 = v345[6];
                if (v356 > 0xFF)
                {
                  if (u_charType(v345[6]) != 12 && (v356 - 8232) >= 2 && (_DWORD)v356 != 65279)
                    goto LABEL_545;
                }
                else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v356] <= 3u)
                {
                  goto LABEL_545;
                }
                v357 = *((_QWORD *)a1 + 10);
                v358 = *(_WORD *)(v357 + 12);
                *((_QWORD *)a1 + 10) = v357 + 12;
                *((_WORD *)a1 + 88) = v358;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 448;
                v360 = 774;
                goto LABEL_586;
              }
              v422 = *((unsigned int *)v345 + 1);
              if ((_DWORD)v422 == 6619253)
              {
                v423 = v345[4];
                if (v423 > 0xFF)
                {
                  if (u_charType(v345[4]) != 12 && (v423 - 8232) >= 2 && (_DWORD)v423 != 65279)
                    goto LABEL_545;
                }
                else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v423] <= 3u)
                {
                  goto LABEL_545;
                }
                v424 = *((_QWORD *)a1 + 10);
                v425 = *(_WORD *)(v424 + 8);
                *((_QWORD *)a1 + 10) = v424 + 8;
                *((_WORD *)a1 + 88) = v425;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 432;
                v360 = 513;
              }
              else
              {
                if ((unsigned __int16)*((_DWORD *)v345 + 1) != 121)
                  goto LABEL_545;
                v469 = v422 >> 16;
                if (HIWORD(*((_DWORD *)v345 + 1)) > 0xFFu)
                {
                  if (u_charType(HIWORD(*((_DWORD *)v345 + 1))) != 12
                    && (v469 - 8232) >= 2
                    && (_DWORD)v469 != 65279)
                  {
                    goto LABEL_545;
                  }
                }
                else if ((v422 & 0xFF0000) == 0x5C0000 || JSC::typesOfLatin1Characters[v469] <= 3u)
                {
                  goto LABEL_545;
                }
                v470 = *((_QWORD *)a1 + 10);
                v471 = *(_WORD *)(v470 + 6);
                *((_QWORD *)a1 + 10) = v470 + 6;
                *((_WORD *)a1 + 88) = v471;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 440;
                v360 = 534;
              }
            }
            goto LABEL_586;
          case 'v':
            if (*(_DWORD *)(v345 + 1) != 7471201)
            {
              if (*(_DWORD *)v345 != 7274614 || *((_DWORD *)v345 + 1) != 6553705)
                goto LABEL_545;
              v387 = v345[4];
              if (v387 > 0xFF)
              {
                if (u_charType(v345[4]) != 12 && (v387 - 8232) >= 2 && (_DWORD)v387 != 65279)
                  goto LABEL_545;
              }
              else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v387] <= 3u)
              {
                goto LABEL_545;
              }
              v388 = *((_QWORD *)a1 + 10);
              v389 = *(_WORD *)(v388 + 8);
              *((_QWORD *)a1 + 10) = v388 + 8;
              *((_WORD *)a1 + 88) = v389;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 472;
              v360 = 775;
              goto LABEL_586;
            }
            v410 = v345[3];
            if (v410 > 0xFF)
            {
              if (u_charType(v345[3]) != 12 && (v410 - 8232) >= 2 && (_DWORD)v410 != 65279)
                goto LABEL_545;
            }
            else if (v345[3] == 92 || JSC::typesOfLatin1Characters[v410] <= 3u)
            {
              goto LABEL_545;
            }
            v411 = *((_QWORD *)a1 + 10);
            v412 = *(_WORD *)(v411 + 6);
            *((_QWORD *)a1 + 10) = v411 + 6;
            *((_WORD *)a1 + 88) = v412;
            v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 464;
            v360 = 520;
            goto LABEL_586;
          default:
            v347 = *(_DWORD *)v345;
            if (*(_DWORD *)v345 == 6619250)
            {
              if (*((_DWORD *)v345 + 1) != 7667828 || *((_DWORD *)v345 + 2) != 7209074)
                goto LABEL_545;
              v381 = v345[6];
              if (v381 > 0xFF)
              {
                if (u_charType(v345[6]) != 12 && (v381 - 8232) >= 2 && (_DWORD)v381 != 65279)
                  goto LABEL_545;
              }
              else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v381] <= 3u)
              {
                goto LABEL_545;
              }
              v382 = *((_QWORD *)a1 + 10);
              v383 = *(_WORD *)(v382 + 12);
              *((_QWORD *)a1 + 10) = v382 + 12;
              *((_WORD *)a1 + 88) = v383;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 384;
              v360 = 524;
              goto LABEL_586;
            }
            v348 = HIWORD(v347);
            switch(v346)
            {
              case 'c':
                if (v348 == 97)
                {
                  if (*((_DWORD *)v345 + 1) == 6619251)
                  {
                    v472 = v345[4];
                    if (v472 > 0xFF)
                    {
                      if (u_charType(v345[4]) != 12 && (v472 - 8232) >= 2 && (_DWORD)v472 != 65279)
                        goto LABEL_545;
                    }
                    else if (v345[4] == 92
                           || JSC::typesOfLatin1Characters[v472] <= 3u)
                    {
                      goto LABEL_545;
                    }
                    v473 = *((_QWORD *)a1 + 10);
                    v474 = *(_WORD *)(v473 + 8);
                    *((_QWORD *)a1 + 10) = v473 + 8;
                    *((_WORD *)a1 + 88) = v474;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 144;
                    v360 = 516;
                  }
                  else
                  {
                    if (*(_DWORD *)(v345 + 1) != 7602273 || *(_DWORD *)(v345 + 3) != 6815843)
                      goto LABEL_545;
                    v460 = v345[5];
                    if (v460 > 0xFF)
                    {
                      if (u_charType(v345[5]) != 12 && (v460 - 8232) >= 2 && (_DWORD)v460 != 65279)
                        goto LABEL_545;
                    }
                    else if (v345[5] == 92
                           || JSC::typesOfLatin1Characters[v460] <= 3u)
                    {
                      goto LABEL_545;
                    }
                    v461 = *((_QWORD *)a1 + 10);
                    v462 = *(_WORD *)(v461 + 10);
                    *((_QWORD *)a1 + 10) = v461 + 10;
                    *((_WORD *)a1 + 88) = v462;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 152;
                    v360 = 535;
                  }
                }
                else
                {
                  v366 = *(_DWORD *)(v345 + 1);
                  if (v366 != 7209071)
                  {
                    if (v366 != 6357100 || *(_DWORD *)(v345 + 3) != 7536755)
                      goto LABEL_545;
                    v367 = v345[5];
                    if (v367 > 0xFF)
                    {
                      if (u_charType(v345[5]) != 12 && (v367 - 8232) >= 2 && (_DWORD)v367 != 65279)
                        goto LABEL_545;
                    }
                    else if (v345[5] == 92
                           || JSC::typesOfLatin1Characters[v367] <= 3u)
                    {
                      goto LABEL_545;
                    }
                    v368 = *((_QWORD *)a1 + 10);
                    v369 = *(_WORD *)(v368 + 10);
                    *((_QWORD *)a1 + 10) = v368 + 10;
                    *((_WORD *)a1 + 88) = v369;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 160;
                    v360 = 541;
                    goto LABEL_586;
                  }
                  v400 = *(_DWORD *)(v345 + 3);
                  if (v400 == 7602291)
                  {
                    v401 = v345[5];
                    if (v401 > 0xFF)
                    {
                      if (u_charType(v345[5]) != 12 && (v401 - 8232) >= 2 && (_DWORD)v401 != 65279)
                        goto LABEL_545;
                    }
                    else if (v345[5] == 92
                           || JSC::typesOfLatin1Characters[v401] <= 3u)
                    {
                      goto LABEL_545;
                    }
                    v402 = *((_QWORD *)a1 + 10);
                    v403 = *(_WORD *)(v402 + 10);
                    *((_QWORD *)a1 + 10) = v402 + 10;
                    *((_WORD *)a1 + 88) = v403;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 168;
                    v360 = 521;
                  }
                  else
                  {
                    if (v400 != 6881396 || *(_DWORD *)(v345 + 5) != 7667822 || v345[7] != 101)
                      goto LABEL_545;
                    v426 = v345[8];
                    if (v426 > 0xFF)
                    {
                      if (u_charType(v345[8]) != 12 && (v426 - 8232) >= 2 && (_DWORD)v426 != 65279)
                        goto LABEL_545;
                    }
                    else if (v345[8] == 92
                           || JSC::typesOfLatin1Characters[v426] <= 3u)
                    {
                      goto LABEL_545;
                    }
                    v427 = *((_QWORD *)a1 + 10);
                    v428 = *(_WORD *)(v427 + 16);
                    *((_QWORD *)a1 + 10) = v427 + 16;
                    *((_WORD *)a1 + 88) = v428;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 176;
                    v360 = 522;
                  }
                }
                goto LABEL_586;
              case 'n':
                if (v347 == 7667822 && *((_DWORD *)v345 + 1) == 7077996)
                {
                  v454 = v345[4];
                  if (v454 > 0xFF)
                  {
                    if (u_charType(v345[4]) != 12 && (v454 - 8232) >= 2 && (_DWORD)v454 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v454] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v455 = *((_QWORD *)a1 + 10);
                  v456 = *(_WORD *)(v455 + 8);
                  *((_QWORD *)a1 + 10) = v455 + 8;
                  *((_WORD *)a1 + 88) = v456;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 344;
                  v360 = 512;
                }
                else
                {
                  if (*(_DWORD *)(v345 + 1) != 7798885)
                    goto LABEL_545;
                  v384 = v345[3];
                  if (v384 > 0xFF)
                  {
                    if (u_charType(v345[3]) != 12 && (v384 - 8232) >= 2 && (_DWORD)v384 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[3] == 92 || JSC::typesOfLatin1Characters[v384] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v385 = *((_QWORD *)a1 + 10);
                  v386 = *(_WORD *)(v385 + 6);
                  *((_QWORD *)a1 + 10) = v385 + 6;
                  *((_WORD *)a1 + 88) = v386;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 336;
                  v360 = 519;
                }
                goto LABEL_586;
              case 'e':
                if (v347 == 7077989)
                {
                  v430 = *((_DWORD *)v345 + 1);
                  if (v430 == 6619251)
                  {
                    v463 = v345[4];
                    if (v463 > 0xFF)
                    {
                      if (u_charType(v345[4]) != 12 && (v463 - 8232) >= 2 && (_DWORD)v463 != 65279)
                        goto LABEL_545;
                    }
                    else if (v345[4] == 92
                           || JSC::typesOfLatin1Characters[v463] <= 3u)
                    {
                      goto LABEL_545;
                    }
                    v464 = *((_QWORD *)a1 + 10);
                    v465 = *(_WORD *)(v464 + 8);
                    *((_QWORD *)a1 + 10) = v464 + 8;
                    *((_WORD *)a1 + 88) = v465;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 216;
                    v360 = 538;
                    goto LABEL_586;
                  }
                  if (v348 != 120)
                    goto LABEL_545;
                }
                else
                {
                  if (v348 != 120)
                  {
                    if (v347 != 7209061 || *((_DWORD *)v345 + 1) != 7143541)
                      goto LABEL_545;
                    v390 = v345[4];
                    if (v390 > 0xFF)
                    {
                      if (u_charType(v345[4]) != 12 && (v390 - 8232) >= 2 && (_DWORD)v390 != 65279)
                        goto LABEL_545;
                    }
                    else if (v345[4] == 92
                           || JSC::typesOfLatin1Characters[v390] <= 3u)
                    {
                      goto LABEL_545;
                    }
                    v391 = *((_QWORD *)a1 + 10);
                    v392 = *(_WORD *)(v391 + 8);
                    *((_QWORD *)a1 + 10) = v391 + 8;
                    *((_WORD *)a1 + 88) = v392;
                    v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 224;
                    v360 = 531;
                    goto LABEL_586;
                  }
                  v430 = *((_DWORD *)v345 + 1);
                }
                if (v430 == 7274608)
                {
                  if (*((_DWORD *)v345 + 2) != 7602290)
                    goto LABEL_545;
                  v544 = v345[6];
                  if (v544 > 0xFF)
                  {
                    if (u_charType(v345[6]) != 12 && (v544 - 8232) >= 2 && (_DWORD)v544 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v544] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v545 = *((_QWORD *)a1 + 10);
                  v546 = *(_WORD *)(v545 + 12);
                  *((_QWORD *)a1 + 10) = v545 + 12;
                  *((_WORD *)a1 + 88) = v546;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 232;
                  v360 = 540;
                }
                else
                {
                  if (v430 != 6619252 || *((_DWORD *)v345 + 2) != 6553710 || v345[6] != 115)
                    goto LABEL_545;
                  v431 = v345[7];
                  if (v431 > 0xFF)
                  {
                    if (u_charType(v345[7]) != 12 && (v431 - 8232) >= 2 && (_DWORD)v431 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[7] == 92 || JSC::typesOfLatin1Characters[v431] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v432 = *((_QWORD *)a1 + 10);
                  v433 = *(_WORD *)(v432 + 14);
                  *((_QWORD *)a1 + 10) = v432 + 14;
                  *((_WORD *)a1 + 88) = v433;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 240;
                  v360 = 542;
                }
                goto LABEL_586;
            }
            if (v347 == 7471202)
            {
              if (*((_DWORD *)v345 + 1) != 6357093 || v345[4] != 107)
                goto LABEL_545;
              v434 = v345[5];
              if (v434 > 0xFF)
              {
                if (u_charType(v345[5]) != 12 && (v434 - 8232) >= 2 && (_DWORD)v434 != 65279)
                  goto LABEL_545;
              }
              else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v434] <= 3u)
              {
                goto LABEL_545;
              }
              v435 = *((_QWORD *)a1 + 10);
              v436 = *(_WORD *)(v435 + 10);
              *((_QWORD *)a1 + 10) = v435 + 10;
              *((_WORD *)a1 + 88) = v436;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 136;
              v360 = 515;
              goto LABEL_586;
            }
            v349 = (unsigned __int16)*(_DWORD *)v345;
            if (v349 == 119)
            {
              if (*(_DWORD *)(v345 + 1) == 6881384 && *(_DWORD *)(v345 + 3) == 6619244)
              {
                v550 = v345[5];
                if (v550 > 0xFF)
                {
                  if (u_charType(v345[5]) != 12 && (v550 - 8232) >= 2 && (_DWORD)v550 != 65279)
                    goto LABEL_545;
                }
                else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v550] <= 3u)
                {
                  goto LABEL_545;
                }
                v551 = *((_QWORD *)a1 + 10);
                v552 = *(_WORD *)(v551 + 10);
                *((_QWORD *)a1 + 10) = v551 + 10;
                *((_WORD *)a1 + 88) = v552;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 480;
                v360 = 528;
              }
              else
              {
                if (v347 != 6881399 || *((_DWORD *)v345 + 1) != 6815860)
                  goto LABEL_545;
                v444 = v345[4];
                if (v444 > 0xFF)
                {
                  if (u_charType(v345[4]) != 12 && (v444 - 8232) >= 2 && (_DWORD)v444 != 65279)
                    goto LABEL_545;
                }
                else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v444] <= 3u)
                {
                  goto LABEL_545;
                }
                v445 = *((_QWORD *)a1 + 10);
                v446 = *(_WORD *)(v445 + 8);
                *((_QWORD *)a1 + 10) = v445 + 8;
                *((_WORD *)a1 + 88) = v446;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 488;
                v360 = 530;
              }
              goto LABEL_586;
            }
            if (v347 == 7798881)
            {
              if (*((_DWORD *)v345 + 1) != 6881377 || v345[4] != 116)
                goto LABEL_545;
              v437 = v345[5];
              if (v437 > 0xFF)
              {
                if (u_charType(v345[5]) != 12 && (v437 - 8232) >= 2 && (_DWORD)v437 != 65279)
                  goto LABEL_545;
              }
              else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v437] <= 3u)
              {
                goto LABEL_545;
              }
              v438 = *((_QWORD *)a1 + 10);
              v439 = *(_WORD *)(v438 + 10);
              *((_QWORD *)a1 + 10) = v438 + 10;
              *((_WORD *)a1 + 88) = v439;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 128;
              v360 = 546;
              goto LABEL_586;
            }
            if (v349 == 100)
            {
              if (v348 == 101)
              {
                v440 = *((_DWORD *)v345 + 1);
                if (v440 == 6619244)
                {
                  if (*((_DWORD *)v345 + 2) != 6619252)
                    goto LABEL_545;
                  v547 = v345[6];
                  if (v547 > 0xFF)
                  {
                    if (u_charType(v345[6]) != 12 && (v547 - 8232) >= 2 && (_DWORD)v547 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v547] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v548 = *((_QWORD *)a1 + 10);
                  v549 = *(_WORD *)(v548 + 12);
                  *((_QWORD *)a1 + 10) = v548 + 12;
                  *((_WORD *)a1 + 88) = v549;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 200;
                  v360 = 776;
                }
                else if (v440 == 7667810)
                {
                  if (*((_DWORD *)v345 + 2) != 6750311 || *((_DWORD *)v345 + 3) != 7471205)
                    goto LABEL_545;
                  v565 = v345[8];
                  if (v565 > 0xFF)
                  {
                    if (u_charType(v345[8]) != 12 && (v565 - 8232) >= 2 && (_DWORD)v565 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[8] == 92 || JSC::typesOfLatin1Characters[v565] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v566 = *((_QWORD *)a1 + 10);
                  v567 = *(_WORD *)(v566 + 16);
                  *((_QWORD *)a1 + 10) = v566 + 16;
                  *((_WORD *)a1 + 88) = v567;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 184;
                  v360 = 537;
                }
                else
                {
                  if (v440 != 6357094 || *((_DWORD *)v345 + 2) != 7078005 || v345[6] != 116)
                    goto LABEL_545;
                  v441 = v345[7];
                  if (v441 > 0xFF)
                  {
                    if (u_charType(v345[7]) != 12 && (v441 - 8232) >= 2 && (_DWORD)v441 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[7] == 92 || JSC::typesOfLatin1Characters[v441] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v442 = *((_QWORD *)a1 + 10);
                  v443 = *(_WORD *)(v442 + 14);
                  *((_QWORD *)a1 + 10) = v442 + 14;
                  *((_WORD *)a1 + 88) = v443;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 192;
                  v360 = 517;
                }
              }
              else
              {
                if (v348 != 111)
                  goto LABEL_545;
                v404 = v345[2];
                if (v404 > 0xFF)
                {
                  if (u_charType(v345[2]) != 12 && (v404 - 8232) >= 2 && (_DWORD)v404 != 65279)
                    goto LABEL_545;
                }
                else if (v345[2] == 92 || JSC::typesOfLatin1Characters[v404] <= 3u)
                {
                  goto LABEL_545;
                }
                v405 = *((_QWORD *)a1 + 10);
                v406 = *(_WORD *)(v405 + 4);
                *((_QWORD *)a1 + 10) = v405 + 4;
                *((_WORD *)a1 + 88) = v406;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 208;
                v360 = 527;
              }
              goto LABEL_586;
            }
            if (v347 == 6619244)
            {
              if (v345[2] != 116)
                goto LABEL_545;
              v407 = v345[3];
              if (v407 > 0xFF)
              {
                if (u_charType(v345[3]) != 12 && (v407 - 8232) >= 2 && (_DWORD)v407 != 65279)
                  goto LABEL_545;
              }
              else if (v345[3] == 92 || JSC::typesOfLatin1Characters[v407] <= 3u)
              {
                goto LABEL_545;
              }
              v408 = *((_QWORD *)a1 + 10);
              v409 = *(_WORD *)(v408 + 6);
              *((_QWORD *)a1 + 10) = v408 + 6;
              *((_WORD *)a1 + 88) = v409;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 328;
              v360 = 544;
              goto LABEL_586;
            }
            if (v349 == 115)
            {
              v377 = *(_DWORD *)(v345 + 1);
              if (v377 == 7340149)
              {
                if (*(_DWORD *)(v345 + 3) != 7471205)
                  goto LABEL_545;
                v451 = v345[5];
                if (v451 > 0xFF)
                {
                  if (u_charType(v345[5]) != 12 && (v451 - 8232) >= 2 && (_DWORD)v451 != 65279)
                    goto LABEL_545;
                }
                else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v451] <= 3u)
                {
                  goto LABEL_545;
                }
                v452 = *((_QWORD *)a1 + 10);
                v453 = *(_WORD *)(v452 + 10);
                *((_QWORD *)a1 + 10) = v452 + 10;
                *((_WORD *)a1 + 88) = v453;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 400;
                v360 = 543;
                goto LABEL_586;
              }
              if (v377 == 6881399)
              {
                if (*(_DWORD *)(v345 + 3) != 6488180 || v345[5] != 104)
                  goto LABEL_545;
                v553 = v345[6];
                if (v553 > 0xFF)
                {
                  if (u_charType(v345[6]) != 12 && (v553 - 8232) >= 2 && (_DWORD)v553 != 65279)
                    goto LABEL_545;
                }
                else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v553] <= 3u)
                {
                  goto LABEL_545;
                }
                v554 = *((_QWORD *)a1 + 10);
                v555 = *(_WORD *)(v554 + 12);
                *((_QWORD *)a1 + 10) = v554 + 12;
                *((_WORD *)a1 + 88) = v555;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 408;
                v360 = 529;
                goto LABEL_586;
              }
              if (v377 != 6357108 || *(_DWORD *)(v345 + 3) != 6881396 || v345[5] != 99)
                goto LABEL_545;
              v378 = v345[6];
              if (v378 > 0xFF)
              {
                if (u_charType(v345[6]) != 12 && (v378 - 8232) >= 2 && (_DWORD)v378 != 65279)
                  goto LABEL_545;
              }
              else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v378] <= 3u)
              {
                goto LABEL_545;
              }
              v363 = 0;
              v379 = *((_QWORD *)a1 + 10);
              v380 = *(_WORD *)(v379 + 12);
              *((_QWORD *)a1 + 10) = v379 + 12;
              *((_WORD *)a1 + 88) = v380;
              v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 392;
            }
            else
            {
              if (v347 == 6881401)
              {
                if (*((_DWORD *)v345 + 1) != 7077989 || v345[4] != 100)
                  goto LABEL_545;
                v457 = v345[5];
                if (v457 > 0xFF)
                {
                  if (u_charType(v345[5]) != 12 && (v457 - 8232) >= 2 && (_DWORD)v457 != 65279)
                    goto LABEL_545;
                }
                else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v457] <= 3u)
                {
                  goto LABEL_545;
                }
                v458 = *((_QWORD *)a1 + 10);
                v459 = *(_WORD *)(v458 + 10);
                *((_QWORD *)a1 + 10) = v458 + 10;
                *((_WORD *)a1 + 88) = v459;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 496;
                v360 = 545;
                goto LABEL_586;
              }
              if (v349 != 112)
                goto LABEL_545;
              v396 = *(_DWORD *)(v345 + 1);
              if (v396 == 6488161)
              {
                if (*(_DWORD *)(v345 + 3) != 6357099 || *(_DWORD *)(v345 + 5) != 6619239)
                  goto LABEL_545;
                v481 = v345[7];
                if (v481 > 0xFF)
                {
                  if (u_charType(v345[7]) != 12 && (v481 - 8232) >= 2 && (_DWORD)v481 != 65279)
                    goto LABEL_545;
                }
                else if (v345[7] == 92 || JSC::typesOfLatin1Characters[v481] <= 3u)
                {
                  goto LABEL_545;
                }
                v363 = 0;
                v482 = *((_QWORD *)a1 + 10);
                v483 = *(_WORD *)(v482 + 14);
                *((_QWORD *)a1 + 10) = v482 + 14;
                *((_WORD *)a1 + 88) = v483;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 352;
              }
              else if ((unsigned __int16)*(_DWORD *)(v345 + 1) == 114)
              {
                v447 = *((_DWORD *)v345 + 1);
                if (v447 == 7602287)
                {
                  if (*((_DWORD *)v345 + 2) != 6488165
                    || *(_DWORD *)(v345 + 5) != 7602275
                    || *(_DWORD *)(v345 + 7) != 6553701)
                  {
                    goto LABEL_545;
                  }
                  v475 = v345[9];
                  if (v475 > 0xFF)
                  {
                    if (u_charType(v345[9]) != 12 && (v475 - 8232) >= 2 && (_DWORD)v475 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[9] == 92 || JSC::typesOfLatin1Characters[v475] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v363 = 0;
                  v476 = *((_QWORD *)a1 + 10);
                  v477 = *(_WORD *)(v476 + 18);
                  *((_QWORD *)a1 + 10) = v476 + 18;
                  *((_WORD *)a1 + 88) = v477;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 368;
                }
                else
                {
                  if (v447 != 7733353 || *((_DWORD *)v345 + 2) != 7602273 || v345[6] != 101)
                    goto LABEL_545;
                  v448 = v345[7];
                  if (v448 > 0xFF)
                  {
                    if (u_charType(v345[7]) != 12 && (v448 - 8232) >= 2 && (_DWORD)v448 != 65279)
                      goto LABEL_545;
                  }
                  else if (v345[7] == 92 || JSC::typesOfLatin1Characters[v448] <= 3u)
                  {
                    goto LABEL_545;
                  }
                  v363 = 0;
                  v449 = *((_QWORD *)a1 + 10);
                  v450 = *(_WORD *)(v449 + 14);
                  *((_QWORD *)a1 + 10) = v449 + 14;
                  *((_WORD *)a1 + 88) = v450;
                  v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 360;
                }
              }
              else
              {
                if (v396 != 6422645 || *(_DWORD *)(v345 + 3) != 6881388 || v345[5] != 99)
                  goto LABEL_545;
                v397 = v345[6];
                if (v397 > 0xFF)
                {
                  if (u_charType(v345[6]) != 12 && (v397 - 8232) >= 2 && (_DWORD)v397 != 65279)
                    goto LABEL_545;
                }
                else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v397] <= 3u)
                {
                  goto LABEL_545;
                }
                v363 = 0;
                v398 = *((_QWORD *)a1 + 10);
                v399 = *(_WORD *)(v398 + 12);
                *((_QWORD *)a1 + 10) = v398 + 12;
                *((_WORD *)a1 + 88) = v399;
                v359 = *(_QWORD *)(*((_QWORD *)a1 + 24) + 41952) + 376;
              }
            }
            goto LABEL_608;
        }
      }
      if (__n & 1 | ((uint64_t)v11 < 21))
        goto LABEL_699;
      v788 = *v345;
      if (v788 <= 0x73)
      {
        if (v788 == 102)
        {
          v845 = *(_DWORD *)(v345 + 1);
          if (v845 > 7471214)
          {
            if (v845 != 7471215)
              goto LABEL_699;
            v790 = v345[3];
            if (v790 > 0xFF)
            {
              if (u_charType(v345[3]) != 12)
              {
                v791 = 518;
                goto LABEL_2268;
              }
            }
            else if (v345[3] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
            {
              goto LABEL_699;
            }
            v791 = 518;
            goto LABEL_1533;
          }
          if (v845 != 7209077)
          {
            if (v845 != 7077985)
            {
              if (v845 != 7209065 || *(_DWORD *)(v345 + 3) != 7077985 || *(_DWORD *)(v345 + 5) != 7929964)
                goto LABEL_699;
              v790 = v345[7];
              if (v790 > 0xFF)
              {
                if (u_charType(v345[7]) != 12)
                {
                  v791 = 536;
                  goto LABEL_2399;
                }
              }
              else if (v345[7] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
              {
                goto LABEL_699;
              }
              v791 = 536;
LABEL_1808:
              v846 = 1;
              v847 = 7;
              goto LABEL_1534;
            }
            if (*(_DWORD *)(v345 + 3) != 6619251)
              goto LABEL_699;
            v790 = v345[5];
            if (v790 > 0xFF)
            {
              if (u_charType(v345[5]) != 12)
              {
                v791 = 514;
                goto LABEL_2541;
              }
            }
            else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
            {
              goto LABEL_699;
            }
            v791 = 514;
            goto LABEL_1900;
          }
          if (*(_DWORD *)(v345 + 3) != 7602275 || *((_DWORD *)v345 + 2) != 6881396 || *((_DWORD *)v345 + 3) != 7209071)
            goto LABEL_699;
          v790 = v345[8];
          if (v790 > 0xFF)
          {
            if (u_charType(v345[8]) != 12)
            {
              v791 = 523;
              goto LABEL_2424;
            }
          }
          else if (v345[8] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
          {
            goto LABEL_699;
          }
          v791 = 523;
LABEL_1527:
          v846 = 1;
          v847 = 8;
          goto LABEL_1534;
        }
        if (v788 == 105)
        {
          v789 = v345[1];
          if (v789 != 110)
          {
            if (v789 == 102)
            {
              v790 = v345[2];
              if (v790 <= 0xFF)
              {
                if (v345[2] != 92 && JSC::typesOfLatin1Characters[v790] > 3u)
                  goto LABEL_1404;
LABEL_699:
                LODWORD(StatusReg) = *(unsigned __int16 *)v9;
                v11 = *stackaddr_np;
                v52 = *stackaddr_np;
                v429 = StatusReg;
                v28 = (unint64_t)JSC::typesOfLatin1Characters;
                if ((_DWORD)StatusReg != 35)
                  goto LABEL_2580;
                *((_WORD *)a1 + 88) = 0;
                v52 = v11 + 2;
                *((_QWORD *)a1 + 10) = v11 + 2;
                if (v11 + 2 >= *((_QWORD *)a1 + 12))
                {
                  v429 = 0u;
                  goto LABEL_2580;
                }
                goto LABEL_2579;
              }
              if (u_charType(v345[2]) == 12)
              {
LABEL_1404:
                v791 = 525;
LABEL_1747:
                v846 = 1;
                v847 = 2;
                goto LABEL_1534;
              }
              v791 = 525;
              goto LABEL_2288;
            }
            if (*(_DWORD *)(v345 + 1) != 7340141)
              goto LABEL_699;
            if (*((_DWORD *)v345 + 1) == 7274608 && *((_DWORD *)v345 + 2) == 7602290)
            {
              v790 = v345[6];
              if (v790 <= 0xFF)
              {
                if (v345[6] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  goto LABEL_699;
                goto LABEL_1939;
              }
              if (u_charType(v345[6]) == 12)
              {
LABEL_1939:
                v791 = 539;
                goto LABEL_1872;
              }
              v791 = 539;
              goto LABEL_2479;
            }
            if (*(_DWORD *)(v345 + 3) != 6619244
              || *(_DWORD *)(v345 + 5) != 6619245
              || *((_DWORD *)v345 + 3) != 7209061
              || *((_DWORD *)v345 + 4) != 7536756)
            {
              goto LABEL_699;
            }
            v790 = v345[10];
            if (v790 <= 0xFF)
            {
              if (v345[10] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                goto LABEL_699;
              goto LABEL_1757;
            }
            if (u_charType(v345[10]) == 12)
            {
LABEL_1757:
              v846 = 0;
              v791 = 532;
              v847 = 10;
              goto LABEL_1534;
            }
            v846 = 0;
            v791 = 532;
LABEL_2518:
            v847 = 10;
            goto LABEL_2575;
          }
          v791 = 131589;
          v942 = v345[2];
          if (v942 > 0xFF)
          {
            if (u_charType(v345[2]) == 12)
              goto LABEL_1747;
            v846 = 1;
            v847 = 2;
            if ((v942 - 8232) < 2 || (_DWORD)v942 == 65279)
              goto LABEL_1534;
          }
          else if (v345[2] != 92 && JSC::typesOfLatin1Characters[v942] > 3u)
          {
            goto LABEL_1747;
          }
          v1104 = *((_DWORD *)v345 + 1);
          if (v1104 == 7602291)
          {
            if (*((_DWORD *)v345 + 2) != 7209057
              || *((_DWORD *)v345 + 3) != 6619235
              || *((_DWORD *)v345 + 4) != 6684783)
            {
              goto LABEL_699;
            }
            v790 = v345[10];
            if (v790 > 0xFF)
            {
              v791 = 139780;
              if (u_charType(v345[10]) != 12)
              {
                v846 = 1;
                goto LABEL_2518;
              }
            }
            else
            {
              if (v345[10] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                goto LABEL_699;
              v791 = 139780;
            }
            v846 = 1;
            v847 = 10;
LABEL_1534:
            v848 = (unsigned __int16 *)(*stackaddr_np + 2 * v847);
            *stackaddr_np = (unint64_t)v848;
            *(_WORD *)v9 = *v848;
            if (v846 | v1353)
              v31 = v791;
            else
              v31 = 12;
            goto LABEL_823;
          }
          if (v1104 != 6619252
            || *((_DWORD *)v345 + 2) != 6684786
            || *(_DWORD *)(v345 + 5) != 6357094
            || *(_DWORD *)(v345 + 7) != 6619235)
          {
            goto LABEL_699;
          }
          v790 = v345[9];
          if (v790 <= 0xFF)
          {
            if (v345[9] == 92)
              goto LABEL_699;
LABEL_2537:
            if (JSC::typesOfLatin1Characters[v790] <= 3u)
              goto LABEL_699;
LABEL_2566:
            v846 = 0;
            v791 = 532;
            v847 = 9;
            goto LABEL_1534;
          }
          goto LABEL_2565;
        }
        goto LABEL_1537;
      }
      if (v788 == 118)
      {
        if (*(_DWORD *)(v345 + 1) == 7471201)
        {
          v790 = v345[3];
          if (v790 > 0xFF)
          {
            if (u_charType(v345[3]) != 12)
            {
              v791 = 520;
              goto LABEL_2268;
            }
          }
          else if (v345[3] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
          {
            goto LABEL_699;
          }
          v791 = 520;
LABEL_1533:
          v846 = 1;
          v847 = 3;
          goto LABEL_1534;
        }
        if (*(_DWORD *)v345 != 7274614 || *((_DWORD *)v345 + 1) != 6553705)
          goto LABEL_699;
        v790 = v345[4];
        if (v790 > 0xFF)
        {
          if (u_charType(v345[4]) != 12)
          {
            v791 = 775;
            goto LABEL_2275;
          }
        }
        else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
        {
          goto LABEL_699;
        }
        v791 = 775;
      }
      else
      {
        if (v788 != 116)
        {
LABEL_1537:
          v849 = *(_DWORD *)v345;
          if (*(_DWORD *)v345 != 6619250)
          {
            v850 = HIWORD(v849);
            if (v788 != 99)
            {
              if (v788 != 101)
              {
                if (v788 == 110)
                {
                  if (v849 == 7667822 && *((_DWORD *)v345 + 1) == 7077996)
                  {
                    v790 = v345[4];
                    if (v790 <= 0xFF)
                    {
                      if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                        goto LABEL_699;
                      goto LABEL_1926;
                    }
                    if (u_charType(v345[4]) == 12)
                    {
LABEL_1926:
                      v791 = 512;
                      goto LABEL_1763;
                    }
                    v791 = 512;
                    goto LABEL_2275;
                  }
                  if (*(_DWORD *)(v345 + 1) != 7798885)
                    goto LABEL_699;
                  v790 = v345[3];
                  if (v790 <= 0xFF)
                  {
                    if (v345[3] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                      goto LABEL_699;
                    goto LABEL_1546;
                  }
                  if (u_charType(v345[3]) == 12)
                  {
LABEL_1546:
                    v791 = 519;
                    goto LABEL_1533;
                  }
                  v791 = 519;
LABEL_2268:
                  v846 = 1;
                  v847 = 3;
LABEL_2575:
                  if ((v790 - 8232) < 2 || (_DWORD)v790 == 65279)
                    goto LABEL_1534;
                  goto LABEL_699;
                }
                if (v849 == 7471202)
                {
                  if (*((_DWORD *)v345 + 1) != 6357093 || v345[4] != 107)
                    goto LABEL_699;
                  v790 = v345[5];
                  if (v790 > 0xFF)
                  {
                    if (u_charType(v345[5]) != 12)
                    {
                      v791 = 515;
                      goto LABEL_2541;
                    }
                  }
                  else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  {
                    goto LABEL_699;
                  }
                  v791 = 515;
                  goto LABEL_1900;
                }
                v945 = (unsigned __int16)*(_DWORD *)v345;
                if (v945 == 119)
                {
                  if (*(_DWORD *)(v345 + 1) == 6881384 && *(_DWORD *)(v345 + 3) == 6619244)
                  {
                    v790 = v345[5];
                    if (v790 <= 0xFF)
                    {
                      if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                        goto LABEL_699;
                      goto LABEL_1960;
                    }
                    if (u_charType(v345[5]) == 12)
                    {
LABEL_1960:
                      v791 = 528;
                      goto LABEL_1900;
                    }
                    v791 = 528;
LABEL_2541:
                    v846 = 1;
                    v847 = 5;
                    goto LABEL_2575;
                  }
                  if (v849 != 6881399 || *((_DWORD *)v345 + 1) != 6815860)
                    goto LABEL_699;
                  v790 = v345[4];
                  if (v790 <= 0xFF)
                  {
                    if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                      goto LABEL_699;
                    goto LABEL_1799;
                  }
                  if (u_charType(v345[4]) == 12)
                  {
LABEL_1799:
                    v791 = 530;
                    goto LABEL_1763;
                  }
                  v791 = 530;
LABEL_2275:
                  v846 = 1;
                  v847 = 4;
                  goto LABEL_2575;
                }
                if (v849 == 7798881)
                {
                  if (*((_DWORD *)v345 + 1) != 6881377 || v345[4] != 116)
                    goto LABEL_699;
                  v790 = v345[5];
                  if (v790 > 0xFF)
                  {
                    if (u_charType(v345[5]) != 12)
                    {
                      v791 = 546;
                      goto LABEL_2541;
                    }
                  }
                  else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  {
                    goto LABEL_699;
                  }
                  v791 = 546;
                  goto LABEL_1900;
                }
                if (v945 == 100)
                {
                  if (v850 == 111)
                  {
                    v790 = v345[2];
                    if (v790 > 0xFF)
                    {
                      if (u_charType(v345[2]) != 12)
                      {
                        v791 = 527;
LABEL_2288:
                        v846 = 1;
                        v847 = 2;
                        goto LABEL_2575;
                      }
                    }
                    else if (v345[2] == 92
                           || JSC::typesOfLatin1Characters[v790] <= 3u)
                    {
                      goto LABEL_699;
                    }
                    v791 = 527;
                    goto LABEL_1747;
                  }
                  if (v850 != 101)
                    goto LABEL_699;
                  v955 = *((_DWORD *)v345 + 1);
                  if (v955 != 6619244)
                  {
                    if (v955 != 7667810)
                    {
                      if (v955 != 6357094 || *((_DWORD *)v345 + 2) != 7078005 || v345[6] != 116)
                        goto LABEL_699;
                      v790 = v345[7];
                      if (v790 <= 0xFF)
                      {
                        if (v345[7] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                          goto LABEL_699;
                        goto LABEL_2244;
                      }
                      if (u_charType(v345[7]) == 12)
                      {
LABEL_2244:
                        v791 = 517;
                        goto LABEL_1808;
                      }
                      v791 = 517;
                      goto LABEL_2399;
                    }
                    if (*((_DWORD *)v345 + 2) != 6750311 || *((_DWORD *)v345 + 3) != 7471205)
                      goto LABEL_699;
                    v790 = v345[8];
                    if (v790 <= 0xFF)
                    {
                      if (v345[8] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                        goto LABEL_699;
                      goto LABEL_2303;
                    }
                    if (u_charType(v345[8]) == 12)
                    {
LABEL_2303:
                      v791 = 537;
                      goto LABEL_1527;
                    }
                    v791 = 537;
LABEL_2424:
                    v846 = 1;
                    v847 = 8;
                    goto LABEL_2575;
                  }
                  if (*((_DWORD *)v345 + 2) != 6619252)
                    goto LABEL_699;
                  v790 = v345[6];
                  if (v790 <= 0xFF)
                  {
                    if (v345[6] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                      goto LABEL_699;
                    goto LABEL_2036;
                  }
                  if (u_charType(v345[6]) == 12)
                  {
LABEL_2036:
                    v791 = 776;
                    goto LABEL_1872;
                  }
                  v791 = 776;
LABEL_2479:
                  v846 = 1;
LABEL_2573:
                  v847 = 6;
                  goto LABEL_2575;
                }
                if (v849 == 6619244)
                {
                  if (v345[2] != 116)
                    goto LABEL_699;
                  v790 = v345[3];
                  if (v790 > 0xFF)
                  {
                    if (u_charType(v345[3]) != 12)
                    {
                      v791 = 544;
                      goto LABEL_2268;
                    }
                  }
                  else if (v345[3] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  {
                    goto LABEL_699;
                  }
                  v791 = 544;
                  goto LABEL_1533;
                }
                if (v945 == 115)
                {
                  v1105 = *(_DWORD *)(v345 + 1);
                  if (v1105 == 7340149)
                  {
                    if (*(_DWORD *)(v345 + 3) != 7471205)
                      goto LABEL_699;
                    v790 = v345[5];
                    if (v790 > 0xFF)
                    {
                      if (u_charType(v345[5]) != 12)
                      {
                        v791 = 543;
                        goto LABEL_2541;
                      }
                    }
                    else if (v345[5] == 92
                           || JSC::typesOfLatin1Characters[v790] <= 3u)
                    {
                      goto LABEL_699;
                    }
                    v791 = 543;
                    goto LABEL_1900;
                  }
                  if (v1105 != 6357108)
                  {
                    if (v1105 != 6881399 || *(_DWORD *)(v345 + 3) != 6488180 || v345[5] != 104)
                      goto LABEL_699;
                    v790 = v345[6];
                    if (v790 > 0xFF)
                    {
                      if (u_charType(v345[6]) != 12)
                      {
                        v791 = 529;
                        goto LABEL_2479;
                      }
                    }
                    else if (v345[6] == 92
                           || JSC::typesOfLatin1Characters[v790] <= 3u)
                    {
                      goto LABEL_699;
                    }
                    v791 = 529;
                    goto LABEL_1872;
                  }
                  if (*(_DWORD *)(v345 + 3) != 6881396 || v345[5] != 99)
                    goto LABEL_699;
                  v790 = v345[6];
                  if (v790 <= 0xFF)
                  {
                    if (v345[6] == 92)
                      goto LABEL_699;
LABEL_2530:
                    if (JSC::typesOfLatin1Characters[v790] <= 3u)
                      goto LABEL_699;
LABEL_2564:
                    v846 = 0;
                    v791 = 532;
                    v847 = 6;
                    goto LABEL_1534;
                  }
                  goto LABEL_2563;
                }
                if (v849 == 6881401)
                {
                  if (*((_DWORD *)v345 + 1) != 7077989 || v345[4] != 100)
                    goto LABEL_699;
                  v790 = v345[5];
                  if (v790 > 0xFF)
                  {
                    if (u_charType(v345[5]) != 12)
                    {
                      v791 = 545;
                      goto LABEL_2541;
                    }
                  }
                  else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  {
                    goto LABEL_699;
                  }
                  v791 = 545;
                  goto LABEL_1900;
                }
                if (v945 != 112)
                  goto LABEL_699;
                v1233 = *(_DWORD *)(v345 + 1);
                if (v1233 == 6488161)
                {
                  if (*(_DWORD *)(v345 + 3) != 6357099 || *(_DWORD *)(v345 + 5) != 6619239)
                    goto LABEL_699;
                  v790 = v345[7];
                  if (v790 <= 0xFF)
                  {
                    if (v345[7] == 92)
                      goto LABEL_699;
                    goto LABEL_2523;
                  }
                }
                else
                {
                  if ((unsigned __int16)*(_DWORD *)(v345 + 1) != 114)
                  {
                    if (v1233 != 6422645 || *(_DWORD *)(v345 + 3) != 6881388 || v345[5] != 99)
                      goto LABEL_699;
                    v790 = v345[6];
                    if (v790 <= 0xFF)
                    {
                      if (v345[6] == 92)
                        goto LABEL_699;
                      goto LABEL_2530;
                    }
LABEL_2563:
                    if (u_charType(v790) != 12)
                    {
                      v846 = 0;
                      v791 = 532;
                      goto LABEL_2573;
                    }
                    goto LABEL_2564;
                  }
                  v1234 = *((_DWORD *)v345 + 1);
                  if (v1234 == 7602287)
                  {
                    if (*((_DWORD *)v345 + 2) != 6488165
                      || *(_DWORD *)(v345 + 5) != 7602275
                      || *(_DWORD *)(v345 + 7) != 6553701)
                    {
                      goto LABEL_699;
                    }
                    v790 = v345[9];
                    if (v790 <= 0xFF)
                    {
                      if (v345[9] == 92)
                        goto LABEL_699;
                      goto LABEL_2537;
                    }
LABEL_2565:
                    if (u_charType(v790) != 12)
                    {
                      v846 = 0;
                      v791 = 532;
                      v847 = 9;
                      goto LABEL_2575;
                    }
                    goto LABEL_2566;
                  }
                  if (v1234 != 7733353 || *((_DWORD *)v345 + 2) != 7602273 || v345[6] != 101)
                    goto LABEL_699;
                  v790 = v345[7];
                  if (v790 <= 0xFF)
                  {
                    if (v345[7] == 92)
                      goto LABEL_699;
LABEL_2523:
                    if (JSC::typesOfLatin1Characters[v790] <= 3u)
                      goto LABEL_699;
                    goto LABEL_2562;
                  }
                }
                if (u_charType(v790) != 12)
                {
                  v846 = 0;
                  v791 = 532;
                  goto LABEL_2571;
                }
LABEL_2562:
                v846 = 0;
                v791 = 532;
                v847 = 7;
                goto LABEL_1534;
              }
              if (v849 == 7077989)
              {
                v944 = *((_DWORD *)v345 + 1);
                if (v944 == 6619251)
                {
                  v790 = v345[4];
                  if (v790 > 0xFF)
                  {
                    if (u_charType(v345[4]) != 12)
                    {
                      v791 = 538;
                      goto LABEL_2275;
                    }
                  }
                  else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  {
                    goto LABEL_699;
                  }
                  v791 = 538;
                  goto LABEL_1763;
                }
                if (v850 != 120)
                  goto LABEL_699;
              }
              else
              {
                if (v850 != 120)
                {
                  if (v849 != 7209061 || *((_DWORD *)v345 + 1) != 7143541)
                    goto LABEL_699;
                  v790 = v345[4];
                  if (v790 > 0xFF)
                  {
                    if (u_charType(v345[4]) != 12)
                    {
                      v791 = 531;
                      goto LABEL_2275;
                    }
                  }
                  else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  {
                    goto LABEL_699;
                  }
                  v791 = 531;
                  goto LABEL_1763;
                }
                v944 = *((_DWORD *)v345 + 1);
              }
              if (v944 == 7274608)
              {
                if (*((_DWORD *)v345 + 2) != 7602290)
                  goto LABEL_699;
                v790 = v345[6];
                if (v790 > 0xFF)
                {
                  if (u_charType(v345[6]) != 12)
                  {
                    v791 = 540;
                    goto LABEL_2479;
                  }
                }
                else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                {
                  goto LABEL_699;
                }
                v791 = 540;
                goto LABEL_1872;
              }
              if (v944 != 6619252 || *((_DWORD *)v345 + 2) != 6553710 || v345[6] != 115)
                goto LABEL_699;
              v790 = v345[7];
              if (v790 <= 0xFF)
              {
                if (v345[7] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                  goto LABEL_699;
                goto LABEL_2232;
              }
              if (u_charType(v345[7]) == 12)
              {
LABEL_2232:
                v791 = 542;
                goto LABEL_1808;
              }
              v791 = 542;
LABEL_2399:
              v846 = 1;
LABEL_2571:
              v847 = 7;
              goto LABEL_2575;
            }
            if (v850 == 97)
            {
              if (*((_DWORD *)v345 + 1) == 6619251)
              {
                v790 = v345[4];
                if (v790 > 0xFF)
                {
                  if (u_charType(v345[4]) != 12)
                  {
                    v791 = 516;
                    goto LABEL_2275;
                  }
                }
                else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
                {
                  goto LABEL_699;
                }
                v791 = 516;
                goto LABEL_1763;
              }
              if (*(_DWORD *)(v345 + 1) != 7602273 || *(_DWORD *)(v345 + 3) != 6815843)
                goto LABEL_699;
              v790 = v345[5];
              if (v790 > 0xFF)
              {
                if (u_charType(v345[5]) != 12)
                {
                  v791 = 535;
                  goto LABEL_2541;
                }
              }
              else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
              {
                goto LABEL_699;
              }
              v791 = 535;
LABEL_1900:
              v846 = 1;
              v847 = 5;
              goto LABEL_1534;
            }
            v954 = *(_DWORD *)(v345 + 1);
            if (v954 != 7209071)
            {
              if (v954 != 6357100 || *(_DWORD *)(v345 + 3) != 7536755)
                goto LABEL_699;
              v790 = v345[5];
              if (v790 > 0xFF)
              {
                if (u_charType(v345[5]) != 12)
                {
                  v791 = 541;
                  goto LABEL_2541;
                }
              }
              else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
              {
                goto LABEL_699;
              }
              v791 = 541;
              goto LABEL_1900;
            }
            v961 = *(_DWORD *)(v345 + 3);
            if (v961 == 7602291)
            {
              v790 = v345[5];
              if (v790 > 0xFF)
              {
                if (u_charType(v345[5]) != 12)
                {
                  v791 = 521;
                  goto LABEL_2541;
                }
              }
              else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
              {
                goto LABEL_699;
              }
              v791 = 521;
              goto LABEL_1900;
            }
            if (v961 != 6881396 || *(_DWORD *)(v345 + 5) != 7667822 || v345[7] != 101)
              goto LABEL_699;
            v790 = v345[8];
            if (v790 > 0xFF)
            {
              if (u_charType(v345[8]) != 12)
              {
                v791 = 522;
                goto LABEL_2424;
              }
            }
            else if (v345[8] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
            {
              goto LABEL_699;
            }
            v791 = 522;
            goto LABEL_1527;
          }
          if (*((_DWORD *)v345 + 1) != 7667828 || *((_DWORD *)v345 + 2) != 7209074)
            goto LABEL_699;
          v790 = v345[6];
          if (v790 > 0xFF)
          {
            if (u_charType(v345[6]) != 12)
            {
              v791 = 524;
              goto LABEL_2479;
            }
          }
          else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
          {
            goto LABEL_699;
          }
          v791 = 524;
LABEL_1872:
          v846 = 1;
          v847 = 6;
          goto LABEL_1534;
        }
        v813 = v345[1];
        if (v813 == 114)
        {
          v943 = *((unsigned int *)v345 + 1);
          if ((_DWORD)v943 != 6619253)
          {
            if ((unsigned __int16)*((_DWORD *)v345 + 1) != 121)
              goto LABEL_699;
            v790 = v943 >> 16;
            if (HIWORD(*((_DWORD *)v345 + 1)) > 0xFFu)
            {
              if (u_charType(HIWORD(*((_DWORD *)v345 + 1))) != 12)
              {
                v791 = 534;
                goto LABEL_2268;
              }
            }
            else if ((v943 & 0xFF0000) == 0x5C0000 || JSC::typesOfLatin1Characters[v790] <= 3u)
            {
              goto LABEL_699;
            }
            v791 = 534;
            goto LABEL_1533;
          }
          v790 = v345[4];
          if (v790 > 0xFF)
          {
            if (u_charType(v345[4]) != 12)
            {
              v791 = 513;
              goto LABEL_2275;
            }
          }
          else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
          {
            goto LABEL_699;
          }
          v791 = 513;
        }
        else
        {
          if (v813 != 104)
          {
            if (*(_DWORD *)(v345 + 1) != 7340153 || *(_DWORD *)(v345 + 3) != 7274597 || v345[5] != 102)
              goto LABEL_699;
            v790 = v345[6];
            if (v790 > 0xFF)
            {
              if (u_charType(v345[6]) != 12)
              {
                v791 = 774;
                goto LABEL_2479;
              }
            }
            else if (v345[6] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
            {
              goto LABEL_699;
            }
            v791 = 774;
            goto LABEL_1872;
          }
          if (*((_DWORD *)v345 + 1) != 7536745)
          {
            if (*(_DWORD *)(v345 + 1) != 7471208 || *(_DWORD *)(v345 + 3) != 7798895)
              goto LABEL_699;
            v790 = v345[5];
            if (v790 > 0xFF)
            {
              if (u_charType(v345[5]) != 12)
              {
                v791 = 533;
                goto LABEL_2541;
              }
            }
            else if (v345[5] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
            {
              goto LABEL_699;
            }
            v791 = 533;
            goto LABEL_1900;
          }
          v790 = v345[4];
          if (v790 > 0xFF)
          {
            if (u_charType(v345[4]) != 12)
            {
              v791 = 526;
              goto LABEL_2275;
            }
          }
          else if (v345[4] == 92 || JSC::typesOfLatin1Characters[v790] <= 3u)
          {
            goto LABEL_699;
          }
          v791 = 526;
        }
      }
LABEL_1763:
      v846 = 1;
      v847 = 4;
      goto LABEL_1534;
    case 0x24:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5C:
    case 0x5F:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0xAA:
    case 0xB5:
    case 0xBA:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDA:
    case 0xDB:
    case 0xDC:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x101:
    case 0x102:
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x106:
    case 0x107:
    case 0x108:
    case 0x109:
    case 0x10A:
    case 0x10B:
    case 0x10C:
    case 0x10D:
    case 0x10E:
    case 0x10F:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x113:
    case 0x114:
    case 0x115:
    case 0x116:
    case 0x117:
    case 0x118:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
      goto LABEL_530;
    case 0x25:
      v31 = 191490;
      *((_WORD *)a1 + 88) = 0;
      v294 = *((_QWORD *)a1 + 10);
      v295 = (unsigned __int16 *)(v294 + 2);
      *((_QWORD *)a1 + 10) = v294 + 2;
      v296 = *((_QWORD *)a1 + 12);
      v297 = (__int16 *)(v294 + 4);
      if (v294 + 2 >= v296 || v294 + 4 >= v296)
      {
        if (v294 + 2 >= v296)
          goto LABEL_823;
        v1084 = *v295;
        *(_WORD *)v9 = v1084;
        if (v1084 != 61)
          goto LABEL_823;
        *(_WORD *)v9 = 0;
        v1085 = (__int16 *)(v294 + 4);
        *stackaddr_np = (unint64_t)v1085;
        if ((unint64_t)v1085 >= v296)
        {
LABEL_474:
          v31 = 29;
          goto LABEL_823;
        }
        v299 = *v1085;
      }
      else
      {
        v298 = *v295;
        *(_WORD *)v9 = v298;
        if (v298 != 61)
          goto LABEL_823;
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)v297;
        v299 = *v297;
      }
      *(_WORD *)v9 = v299;
      goto LABEL_474;
    case 0x26:
      v31 = 104448;
      *((_WORD *)a1 + 88) = 0;
      v175 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v175 + 1;
      v176 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v175 + 1) < v176)
      {
        v177 = v175[1];
        *(_WORD *)v9 = v177;
        if (v177 == 38)
        {
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v175 + 2);
          if ((unint64_t)(v175 + 2) < v176 && (v178 = v175[2], *(_WORD *)v9 = v178, v178 == 61))
          {
            *(_WORD *)v9 = 0;
            v665 = v175 + 3;
            *stackaddr_np = (unint64_t)v665;
            if ((unint64_t)v665 < v176)
              *(_WORD *)v9 = *v665;
            v31 = 36;
          }
          else
          {
            v31 = 52224;
          }
        }
        else if (v177 == 61)
        {
          *(_WORD *)v9 = 0;
          v290 = v175 + 2;
          *stackaddr_np = (unint64_t)v290;
          if ((unint64_t)v290 < v176)
            *(_WORD *)v9 = *v290;
          v31 = 31;
        }
      }
      goto LABEL_823;
    case 0x28:
      *(_DWORD *)(a2 + 8) = *a1;
      *(_DWORD *)(a2 + 12) = (*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 11)) >> 1;
      *(_DWORD *)(a2 + 16) = (*((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 11)) >> 1;
      *((_WORD *)a1 + 88) = 0;
      v30 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v30;
      if ((unint64_t)v30 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v30;
      v31 = 2;
      goto LABEL_823;
    case 0x29:
      *((_WORD *)a1 + 88) = 0;
      v32 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v32;
      if ((unint64_t)v32 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v32;
      v31 = 3;
      goto LABEL_823;
    case 0x2A:
      *((_WORD *)a1 + 88) = 0;
      v222 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v222 + 1;
      v223 = *((_QWORD *)a1 + 12);
      v31 = 191488;
      if ((unint64_t)(v222 + 1) < v223)
      {
        v224 = v222[1];
        *(_WORD *)v9 = v224;
        if (v224 == 61)
        {
          *(_WORD *)v9 = 0;
          v593 = v222 + 2;
          *stackaddr_np = (unint64_t)v593;
          if ((unint64_t)v593 < v223)
            *(_WORD *)v9 = *v593;
          v31 = 24;
        }
        else if (v224 == 42)
        {
          v31 = 4403200;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v222 + 2);
          if ((unint64_t)(v222 + 2) < v223)
          {
            v225 = v222[2];
            *(_WORD *)v9 = v225;
            if (v225 == 61)
            {
              *(_WORD *)v9 = 0;
              v226 = v222 + 3;
              *stackaddr_np = (unint64_t)v226;
              if ((unint64_t)v226 < v223)
                *(_WORD *)v9 = *v226;
              v31 = 30;
            }
          }
        }
      }
      goto LABEL_823;
    case 0x2B:
      v31 = 174336;
      *((_WORD *)a1 + 88) = 0;
      v179 = *((_QWORD *)a1 + 10);
      v180 = (unsigned __int16 *)(v179 + 2);
      *((_QWORD *)a1 + 10) = v179 + 2;
      v181 = *((_QWORD *)a1 + 12);
      v182 = (__int16 *)(v179 + 4);
      if (v179 + 4 >= v181 || v179 + 2 >= v181)
      {
        if (v179 + 2 >= v181)
          goto LABEL_823;
        v1082 = *v180;
        *(_WORD *)v9 = v1082;
        if (v1082 != 43)
        {
          if (v1082 != 61)
            goto LABEL_823;
          *(_WORD *)v9 = 0;
          v1083 = (__int16 *)(v179 + 4);
          *stackaddr_np = (unint64_t)v1083;
          if ((unint64_t)v1083 >= v181)
          {
LABEL_261:
            v31 = 22;
            goto LABEL_823;
          }
          v184 = *v1083;
LABEL_260:
          *(_WORD *)v9 = v184;
          goto LABEL_261;
        }
        *(_WORD *)v9 = 0;
        v1167 = (_WORD *)(v179 + 4);
        *stackaddr_np = (unint64_t)v1167;
        if ((unint64_t)v1167 < v181)
          *(_WORD *)v9 = *v1167;
      }
      else
      {
        v183 = *v180;
        *(_WORD *)v9 = v183;
        if (v183 != 43)
        {
          if (v183 != 61)
            goto LABEL_823;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)v182;
          v184 = *v182;
          goto LABEL_260;
        }
        *((_WORD *)a1 + 88) = 0;
        *((_QWORD *)a1 + 10) = v182;
        *((_WORD *)a1 + 88) = *v182;
      }
      if (*((_BYTE *)a1 + 56))
        v31 = 258;
      else
        v31 = 256;
      goto LABEL_823;
    case 0x2C:
      *((_WORD *)a1 + 88) = 0;
      v33 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v33;
      if ((unint64_t)v33 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v33;
      v31 = 6;
      goto LABEL_823;
    case 0x2D:
      v190 = 174336;
      *((_WORD *)a1 + 88) = 0;
      v191 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v191 + 1;
      v192 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v191 + 1) >= v192)
        goto LABEL_2140;
      v193 = v191[1];
      *(_WORD *)v9 = v193;
      if (v193 == 45)
      {
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)(v191 + 2);
        if ((unint64_t)(v191 + 2) >= v192)
        {
          v291 = 0;
        }
        else
        {
          v291 = v191[2];
          *(_WORD *)v9 = v291;
        }
        if (!*((_BYTE *)a1 + 149) && !*((_BYTE *)a1 + 56) || v291 != 62 || a1[51])
        {
          if (*((_BYTE *)a1 + 56))
            v31 = 259;
          else
            v31 = 257;
          goto LABEL_823;
        }
        *(_WORD *)v9 = 0;
        v600 = v191 + 3;
        *stackaddr_np = (unint64_t)v600;
        if ((unint64_t)v600 < v192)
          *(_WORD *)v9 = *v600;
        goto LABEL_131;
      }
      if (v193 == 61)
      {
        *(_WORD *)v9 = 0;
        v293 = v191 + 2;
        *stackaddr_np = (unint64_t)v293;
        if ((unint64_t)v293 < v192)
          *(_WORD *)v9 = *v293;
        v31 = 23;
        goto LABEL_823;
      }
      goto LABEL_273;
    case 0x2E:
      *((_WORD *)a1 + 88) = 0;
      v34 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v34 + 1;
      v35 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v34 + 1) >= v35)
        goto LABEL_63;
      v36 = v34[1];
      *(_WORD *)v9 = v36;
      if ((v36 - 48) >= 0xA)
      {
        if (v36 == 46 && (unint64_t)(v34 + 2) < v35 && v34[2] == 46)
        {
          *(_WORD *)v9 = 0;
          v260 = v34 + 3;
          *stackaddr_np = (unint64_t)v260;
          if ((unint64_t)v260 < v35)
            *(_WORD *)v9 = *v260;
          v31 = 37;
        }
        else
        {
LABEL_63:
          v31 = 19;
        }
        goto LABEL_823;
      }
      v643 = (unsigned __int8 **)(a1 + 2);
      LOBYTE(v1363.rlim_cur) = 46;
      v644 = a1[5];
      if ((_DWORD)v644 == a1[4])
        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v644 + 1), (unint64_t)&v1363);
      else
        (*v643)[v644] = 46;
      v645 = a1[5] + 1;
      a1[5] = v645;
      LODWORD(v646) = *((unsigned __int16 *)a1 + 88);
      do
      {
        if ((_DWORD)v646 == 95)
        {
          v646 = *((_QWORD *)a1 + 10) + 2;
          if (v646 >= *((_QWORD *)a1 + 12) || *(unsigned __int16 *)v646 - 48 > 9)
            goto LABEL_2060;
          *(_WORD *)v9 = 0;
          *stackaddr_np = v646;
          LOWORD(v646) = *(_WORD *)v646;
          *(_WORD *)v9 = v646;
        }
        LOBYTE(v1363.rlim_cur) = v646;
        if (v645 == a1[4])
          *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v645 + 1), (unint64_t)&v1363);
        else
          (*v643)[v645] = v646;
        v645 = a1[5] + 1;
        a1[5] = v645;
        *((_WORD *)a1 + 88) = 0;
        v646 = *((_QWORD *)a1 + 10) + 2;
        *((_QWORD *)a1 + 10) = v646;
        if (v646 >= *((_QWORD *)a1 + 12))
        {
          LODWORD(v646) = 0;
        }
        else
        {
          LODWORD(v646) = *(unsigned __int16 *)v646;
          *(_WORD *)v9 = v646;
        }
      }
      while ((_DWORD)v646 == 95 || (v646 - 48) < 0xA);
      if ((v646 & 0xFFFFFFDF) != 0x45)
        goto LABEL_1156;
      JSC::Lexer<unsigned char>::record8((uint64_t)a1, 101);
      *((_WORD *)a1 + 88) = 0;
      v891 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v891;
      v892 = *((_QWORD *)a1 + 12);
      if ((unint64_t)v891 >= v892)
        goto LABEL_2198;
      v893 = *v891;
      *(_WORD *)v9 = v893;
      if (v893 != 45 && v893 != 43)
        goto LABEL_1658;
      JSC::Lexer<unsigned char>::record8((uint64_t)a1, v893);
      *((_WORD *)a1 + 88) = 0;
      v891 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v891;
      v892 = *((_QWORD *)a1 + 12);
      if ((unint64_t)v891 >= v892)
        goto LABEL_2198;
      v893 = *v891;
      *(_WORD *)v9 = v893;
LABEL_1658:
      if ((v893 - 48) > 9)
        goto LABEL_2198;
      do
      {
        if (v893 == 95)
        {
          v1094 = v891 + 1;
          if ((unint64_t)v1094 >= v892 || (unsigned __int16)*v1094 - 48 > 9)
            goto LABEL_2198;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)v1094;
          LOWORD(v893) = *v1094;
          *(_WORD *)v9 = *v1094;
        }
        JSC::Lexer<unsigned char>::record8((uint64_t)a1, v893);
        *((_WORD *)a1 + 88) = 0;
        v891 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
        *((_QWORD *)a1 + 10) = v891;
        v892 = *((_QWORD *)a1 + 12);
        if ((unint64_t)v891 >= v892)
        {
          v893 = 0;
        }
        else
        {
          v893 = *v891;
          *(_WORD *)v9 = v893;
        }
      }
      while (v893 == 95 || (v893 - 48) < 0xA);
      v645 = a1[5];
LABEL_1156:
      v647 = *v643;
      v1363.rlim_cur = 0;
      fast_float::from_chars_advanced<double,char>(v647, &v647[v645], &v1363.rlim_cur, 0x2E00000005);
      *v1356 = (uint64_t *)v1363.rlim_cur;
      v648 = *(unsigned __int16 *)v9;
      if (v648 > 0xFF)
      {
        if (u_charType(*(unsigned __int16 *)v9) == 12 || (v648 - 8232) < 2 || (_DWORD)v648 == 65279)
          goto LABEL_1159;
        LODWORD(v648) = *(unsigned __int16 *)v9;
      }
      else if (*(_WORD *)v9 != 92 && JSC::typesOfLatin1Characters[v648])
      {
        goto LABEL_1159;
      }
      if ((v648 & 0xF800) == 0xD800)
      {
        v956 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
        if ((unint64_t)v956 >= *((_QWORD *)a1 + 12))
          v957 = 0;
        else
          v957 = *v956;
        v958 = (v957 & 0x400) != 0 && (v648 & 0xFC00) == 55296;
        v959 = v957 + ((_DWORD)v648 << 10) - 56613888;
        if (v958)
          LODWORD(v648) = v959;
        else
          LODWORD(v648) = -1;
      }
      if (v648 <= 0xFF)
      {
        if (!JSC::typesOfLatin1Characters[v648])
          goto LABEL_1080;
      }
      else if (u_hasBinaryProperty(v648, UCHAR_ID_START))
      {
        goto LABEL_1080;
      }
LABEL_1159:
      a1[5] = 0;
      v31 = 10;
      goto LABEL_823;
    case 0x2F:
      *((_WORD *)a1 + 88) = 0;
      v93 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v93 + 1;
      v94 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v93 + 1) >= v94)
        goto LABEL_340;
      v95 = v93[1];
      *(_WORD *)v9 = v95;
      if (v95 == 47)
      {
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)(v93 + 2);
        if ((unint64_t)(v93 + 2) >= v94)
          goto LABEL_131;
        v96 = v93[2];
        *(_WORD *)v9 = v96;
        if (v96 != 35 && v96 != 64)
          goto LABEL_131;
        v572 = v93 + 3;
        if ((unint64_t)v572 >= v94)
          goto LABEL_131;
        v573 = (unsigned __int16)*v572;
        if (v573 > 0xFF)
        {
          if (u_charType((unsigned __int16)*v572) != 12 && v573 != 65279)
            goto LABEL_131;
        }
        else if ((*v572 > 0x20u || ((1 << v573) & 0x100001A00) == 0)
               && *v572 != 160)
        {
          goto LABEL_131;
        }
        v28 = *((_QWORD *)a1 + 10);
        v39 = *((_QWORD *)a1 + 12);
        *((_WORD *)a1 + 88) = 0;
        *((_QWORD *)a1 + 10) = v28 + 4;
        if (v28 + 4 >= v39)
          goto LABEL_131;
        v574 = *(unsigned __int16 *)(v28 + 4);
        *(_WORD *)v9 = v574;
        if (v574 != 115)
          goto LABEL_131;
        *(_WORD *)v9 = 0;
        *stackaddr_np = v28 + 6;
        if (v28 + 6 >= v39)
          goto LABEL_131;
        v575 = *(unsigned __int16 *)(v28 + 6);
        *(_WORD *)v9 = v575;
        if (v575 != 111)
          goto LABEL_131;
        *(_WORD *)v9 = 0;
        *stackaddr_np = v28 + 8;
        if (v28 + 8 >= v39)
          goto LABEL_131;
        v576 = *(unsigned __int16 *)(v28 + 8);
        *(_WORD *)v9 = v576;
        if (v576 != 117)
          goto LABEL_131;
        *(_WORD *)v9 = 0;
        *stackaddr_np = v28 + 10;
        if (v28 + 10 >= v39)
          goto LABEL_131;
        v577 = *(unsigned __int16 *)(v28 + 10);
        *(_WORD *)v9 = v577;
        if (v577 != 114)
          goto LABEL_131;
        *(_WORD *)v9 = 0;
        *stackaddr_np = v28 + 12;
        if (v28 + 12 >= v39)
          goto LABEL_131;
        v578 = *(unsigned __int16 *)(v28 + 12);
        *(_WORD *)v9 = v578;
        if (v578 != 99)
          goto LABEL_131;
        *(_WORD *)v9 = 0;
        *stackaddr_np = v28 + 14;
        if (v28 + 14 >= v39)
          goto LABEL_131;
        v579 = *(unsigned __int16 *)(v28 + 14);
        *(_WORD *)v9 = v579;
        if (v579 != 101)
          goto LABEL_131;
        *(_WORD *)v9 = 0;
        v580 = (unsigned __int16 *)(v28 + 16);
        *stackaddr_np = v28 + 16;
        if (v28 + 16 >= v39)
          goto LABEL_131;
        v581 = *v580;
        *(_WORD *)v9 = v581;
        if (v581 != 85)
          goto LABEL_2683;
        *(_WORD *)v9 = 0;
        v580 = (unsigned __int16 *)(v28 + 18);
        *stackaddr_np = v28 + 18;
        if (v28 + 18 >= v39)
          goto LABEL_131;
        v581 = *v580;
        *(_WORD *)v9 = v581;
        if (v581 != 82)
          goto LABEL_2683;
        *(_WORD *)v9 = 0;
        v580 = (unsigned __int16 *)(v28 + 20);
        *stackaddr_np = v28 + 20;
        if (v28 + 20 >= v39)
          goto LABEL_131;
        v581 = *v580;
        *(_WORD *)v9 = v581;
        if (v581 != 76)
          goto LABEL_2683;
        *(_WORD *)v9 = 0;
        v580 = (unsigned __int16 *)(v28 + 22);
        *stackaddr_np = v28 + 22;
        if (v28 + 22 >= v39)
          goto LABEL_131;
        v581 = *v580;
        *(_WORD *)v9 = v581;
        if (v581 != 61)
        {
LABEL_2683:
          if (v581 != 77)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 1);
          if ((unint64_t)(v580 + 1) >= v39)
            goto LABEL_131;
          v582 = v580[1];
          *(_WORD *)v9 = v582;
          if (v582 != 97)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 2);
          if ((unint64_t)(v580 + 2) >= v39)
            goto LABEL_131;
          v583 = v580[2];
          *(_WORD *)v9 = v583;
          if (v583 != 112)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 3);
          if ((unint64_t)(v580 + 3) >= v39)
            goto LABEL_131;
          v584 = v580[3];
          *(_WORD *)v9 = v584;
          if (v584 != 112)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 4);
          if ((unint64_t)(v580 + 4) >= v39)
            goto LABEL_131;
          v585 = v580[4];
          *(_WORD *)v9 = v585;
          if (v585 != 105)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 5);
          if ((unint64_t)(v580 + 5) >= v39)
            goto LABEL_131;
          v586 = v580[5];
          *(_WORD *)v9 = v586;
          if (v586 != 110)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 6);
          if ((unint64_t)(v580 + 6) >= v39)
            goto LABEL_131;
          v587 = v580[6];
          *(_WORD *)v9 = v587;
          if (v587 != 103)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 7);
          if ((unint64_t)(v580 + 7) >= v39)
            goto LABEL_131;
          v588 = v580[7];
          *(_WORD *)v9 = v588;
          if (v588 != 85)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 8);
          if ((unint64_t)(v580 + 8) >= v39)
            goto LABEL_131;
          v589 = v580[8];
          *(_WORD *)v9 = v589;
          if (v589 != 82)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 9);
          if ((unint64_t)(v580 + 9) >= v39)
            goto LABEL_131;
          v590 = v580[9];
          *(_WORD *)v9 = v590;
          if (v590 != 76)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v580 + 10);
          if ((unint64_t)(v580 + 10) >= v39)
            goto LABEL_131;
          v28 = v580[10];
          *(_WORD *)v9 = v28;
          if ((_DWORD)v28 != 61)
            goto LABEL_131;
          *(_WORD *)v9 = 0;
          v29 = (char *)(v580 + 11);
          *stackaddr_np = (unint64_t)(v580 + 11);
          if ((unint64_t)(v580 + 11) < v39)
            goto LABEL_43;
          v27 = 0;
          while (1)
          {
            if (v27 > 0xFF)
            {
              v38 = u_charType(v27);
              v29 = (char *)*stackaddr_np;
              if (v27 != 65279 && v38 != 12)
              {
                v27 = *(unsigned __int16 *)v9;
LABEL_1113:
                LODWORD(StatusReg) = 0;
                while (1)
                {
                  if (v27 > 0xFF)
                  {
                    v960 = u_charType(v27);
                    if (v27 == 65279 || v960 == 12)
                      goto LABEL_1117;
                    v27 = *(unsigned __int16 *)v9;
                  }
                  else if (v27 <= 0x20u && (v28 = 0x100001A00, ((1 << v27) & 0x100001A00) != 0)
                         || v27 == 160)
                  {
LABEL_1117:
                    v52 = *stackaddr_np - (_QWORD)v29;
                    if (v52 < -1)
                      goto LABEL_2578;
                    v621 = v52 >> 1;
                    v25 = *(unsigned __int16 *)v9;
                    while (1)
                    {
                      if (v25 > 0xFF)
                      {
                        if (u_charType(v25) != 12 && v25 != 65279)
                        {
                          v25 = *(unsigned __int16 *)v9;
LABEL_1119:
                          if (v25 == 10
                            || v25 == 13
                            || (v25 & 0xFFFE) == 0x2028
                            || !v25 && *((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
                          {
                            if (StatusReg > 0xFF)
                              WTF::String::String((int **)&v1363, v29, v621);
                            else
                              WTF::String::make8Bit((int *)v29, v621, (int **)&v1363);
                          }
                          else
                          {
                            v1363.rlim_cur = 0;
                          }
                          v622 = v1363.rlim_cur;
                          v1363.rlim_cur = 0;
                          v623 = (WTF::StringImpl *)*((_QWORD *)a1 + 21);
                          *((_QWORD *)a1 + 21) = v622;
                          if (v623)
                          {
LABEL_1124:
                            v624 = *(_DWORD *)v623 - 2;
                            if (*(_DWORD *)v623 != 2)
                            {
LABEL_1125:
                              *(_DWORD *)v623 = v624;
                              goto LABEL_131;
                            }
                            WTF::StringImpl::~StringImpl(v623, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v698, v699, v700, v701, v702, v703, v704, v705);
                            v623 = (WTF::StringImpl *)v1363.rlim_cur;
                            v1363.rlim_cur = 0;
                            if (v623)
                            {
                              v624 = *(_DWORD *)v623 - 2;
                              if (*(_DWORD *)v623 != 2)
                                goto LABEL_1125;
                              WTF::StringImpl::~StringImpl(v623, v706, v707, v708, v709, v710, v711, v712);
                              WTF::fastFree(v713, v714, v715, v716, v717, v718, v719, v720);
                            }
                          }
                          goto LABEL_131;
                        }
                      }
                      else if ((v25 > 0x20u || ((1 << v25) & 0x100001A00) == 0)
                             && v25 != 160)
                      {
                        goto LABEL_1119;
                      }
                      v25 = 0;
                      *((_WORD *)a1 + 88) = 0;
                      v26 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                      *((_QWORD *)a1 + 10) = v26;
                      if ((unint64_t)v26 < *((_QWORD *)a1 + 12))
                      {
                        v25 = *v26;
                        *(_WORD *)v9 = v25;
                      }
                    }
                  }
                  if (v27 == 10 || v27 == 13 || (v27 & 0xFFFE) == 0x2028)
                    goto LABEL_1117;
                  if (v27)
                  {
                    if (v27 == 34 || v27 == 39)
                      goto LABEL_1117;
                    v1092 = *((_QWORD *)a1 + 10);
                    v1093 = *((_QWORD *)a1 + 12);
                  }
                  else
                  {
                    v1092 = *((_QWORD *)a1 + 10);
                    v1093 = *((_QWORD *)a1 + 12);
                    if (v1092 == v1093)
                      goto LABEL_1117;
                  }
                  LODWORD(StatusReg) = v27 | StatusReg;
                  *(_WORD *)v9 = 0;
                  v1168 = (unsigned __int16 *)(v1092 + 2);
                  *stackaddr_np = (unint64_t)v1168;
                  v27 = 0;
                  if ((unint64_t)v1168 < v1093)
                  {
                    v27 = *v1168;
                    *(_WORD *)v9 = v27;
                  }
                }
              }
              v39 = *((_QWORD *)a1 + 12);
            }
            else if (v27 > 0x20u || (v28 = 1 << v27, ((1 << v27) & 0x100001A00) == 0))
            {
              if (v27 != 160)
                goto LABEL_1113;
            }
            v27 = 0;
            *(_WORD *)v9 = 0;
            v29 += 2;
            *stackaddr_np = (unint64_t)v29;
            if ((unint64_t)v29 < v39)
            {
LABEL_43:
              v27 = *(unsigned __int16 *)v29;
              *(_WORD *)v9 = v27;
            }
          }
        }
        *(_WORD *)v9 = 0;
        v814 = (char *)(v28 + 24);
        *stackaddr_np = v28 + 24;
        if (v28 + 24 >= v39)
        {
          v815 = 0;
          goto LABEL_2595;
        }
LABEL_2594:
        v815 = *(unsigned __int16 *)v814;
        *(_WORD *)v9 = v815;
        while (1)
        {
LABEL_2595:
          if (v815 > 0xFF)
          {
            v1340 = u_charType(v815);
            v814 = (char *)*stackaddr_np;
            if (v815 != 65279 && v1340 != 12)
            {
              v815 = *(unsigned __int16 *)v9;
LABEL_2606:
              LODWORD(StatusReg) = 0;
              while (2)
              {
                if (v815 > 0xFF)
                {
                  v1341 = u_charType(v815);
                  if (v815 == 65279 || v1341 == 12)
                    goto LABEL_2625;
                  v815 = *(unsigned __int16 *)v9;
                }
                else if (v815 <= 0x20u && (v28 = 0x100001A00, ((1 << v815) & 0x100001A00) != 0)
                       || v815 == 160)
                {
LABEL_2625:
                  v52 = *stackaddr_np - (_QWORD)v814;
                  if (v52 < -1)
                    goto LABEL_2578;
                  v1345 = v52 >> 1;
                  v1346 = *(unsigned __int16 *)v9;
                  while (2)
                  {
                    if (v1346 <= 0xFF)
                    {
                      if ((v1346 > 0x20u || ((1 << v1346) & 0x100001A00) == 0)
                        && v1346 != 160)
                      {
                        goto LABEL_2637;
                      }
                      goto LABEL_2634;
                    }
                    if (u_charType(v1346) == 12 || v1346 == 65279)
                    {
LABEL_2634:
                      v1346 = 0;
                      *((_WORD *)a1 + 88) = 0;
                      v1347 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                      *((_QWORD *)a1 + 10) = v1347;
                      if ((unint64_t)v1347 < *((_QWORD *)a1 + 12))
                      {
                        v1346 = *v1347;
                        *(_WORD *)v9 = v1346;
                      }
                      continue;
                    }
                    break;
                  }
                  v1346 = *(unsigned __int16 *)v9;
LABEL_2637:
                  if (v1346 == 10
                    || v1346 == 13
                    || (v1346 & 0xFFFE) == 0x2028
                    || !v1346 && *((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
                  {
                    if (StatusReg > 0xFF)
                      WTF::String::String((int **)&v1363, v814, v1345);
                    else
                      WTF::String::make8Bit((int *)v814, v1345, (int **)&v1363);
                  }
                  else
                  {
                    v1363.rlim_cur = 0;
                  }
                  v1348 = v1363.rlim_cur;
                  v1363.rlim_cur = 0;
                  v623 = (WTF::StringImpl *)*((_QWORD *)a1 + 20);
                  *((_QWORD *)a1 + 20) = v1348;
                  if (v623)
                    goto LABEL_1124;
LABEL_131:
                  v49 = *a1;
                  v98 = *((_QWORD *)a1 + 10);
                  v97 = *((_QWORD *)a1 + 11);
                  v99 = *((_QWORD *)a1 + 14);
                  v100 = *((unsigned __int16 *)a1 + 88);
                  v101 = (unsigned __int16 *)(v98 + 2);
                  while (v100 != 10 && v100 != 13 && (v100 & 0xFFFE) != 0x2028)
                  {
                    v102 = (unsigned __int16 *)*((_QWORD *)a1 + 12);
                    if (!v100 && v101 - 1 == v102)
                    {
                      v145 = v98 - v97;
                      v666 = (unint64_t)(v99 - v97) >> 1;
                      v146 = v49 | ((unint64_t)((unint64_t)(v98 - v97) >> 1) << 32);
                      v31 = 20;
                      goto LABEL_825;
                    }
                    *(_WORD *)v9 = 0;
                    *stackaddr_np = (unint64_t)v101;
                    if (v101 >= v102)
                    {
                      v100 = 0;
                    }
                    else
                    {
                      v100 = *v101;
                      *(_WORD *)v9 = v100;
                    }
                    ++v101;
                  }
                  JSC::Lexer<char16_t>::shiftLineTerminator(a1);
                  *((_BYTE *)a1 + 149) = 1;
                  *((_BYTE *)a1 + 56) = 1;
                  v143 = a1[15] - 515;
                  if (v143 <= 0x12 && ((1 << v143) & 0x40281) != 0)
                  {
                    v145 = v98 - v97;
                    v666 = (unint64_t)(v99 - v97) >> 1;
                    v146 = v49 | ((unint64_t)((unint64_t)(v98 - v97) >> 1) << 32);
                    v31 = 17;
                    goto LABEL_825;
                  }
                  goto LABEL_2;
                }
                if (v815 == 10 || v815 == 13 || (v815 & 0xFFFE) == 0x2028)
                  goto LABEL_2625;
                if (v815)
                {
                  if (v815 == 34 || v815 == 39)
                    goto LABEL_2625;
                  v1342 = *((_QWORD *)a1 + 10);
                  v1343 = *((_QWORD *)a1 + 12);
                }
                else
                {
                  v1342 = *((_QWORD *)a1 + 10);
                  v1343 = *((_QWORD *)a1 + 12);
                  if (v1342 == v1343)
                    goto LABEL_2625;
                }
                LODWORD(StatusReg) = v815 | StatusReg;
                *(_WORD *)v9 = 0;
                v1344 = (unsigned __int16 *)(v1342 + 2);
                *stackaddr_np = (unint64_t)v1344;
                v815 = 0;
                if ((unint64_t)v1344 < v1343)
                {
                  v815 = *v1344;
                  *(_WORD *)v9 = v815;
                }
                continue;
              }
            }
            v39 = *((_QWORD *)a1 + 12);
          }
          else if (v815 > 0x20u || (v28 = 1 << v815, ((1 << v815) & 0x100001A00) == 0))
          {
            if (v815 != 160)
              goto LABEL_2606;
          }
          v815 = 0;
          *(_WORD *)v9 = 0;
          v814 += 2;
          *stackaddr_np = (unint64_t)v814;
          if ((unint64_t)v814 < v39)
            goto LABEL_2594;
        }
      }
      if (v95 != 42)
      {
        if (v95 == 61)
        {
          *(_WORD *)v9 = 0;
          v594 = v93 + 2;
          *stackaddr_np = (unint64_t)v594;
          if ((unint64_t)v594 < v94)
            *(_WORD *)v9 = *v594;
          v31 = 25;
        }
        else
        {
LABEL_340:
          v31 = 191489;
        }
        goto LABEL_823;
      }
      *((_WORD *)a1 + 88) = 0;
      v21 = v93 + 2;
      *((_QWORD *)a1 + 10) = v93 + 2;
      if ((unint64_t)(v93 + 2) >= v94)
      {
        v19 = 0;
      }
      else
      {
        v19 = *v21;
        *(_WORD *)v9 = v19;
      }
      v49 = *a1;
      v188 = (unsigned __int16 *)*((_QWORD *)a1 + 14);
      v189 = *((_QWORD *)a1 + 11);
      v24 = v188;
      v20 = *a1;
      while (2)
      {
        v22 = v19;
LABEL_16:
        while (1)
        {
          v23 = v21;
          if (v22 <= 12)
            break;
LABEL_17:
          if (v22 == 13)
            goto LABEL_26;
          if (v22 != 42)
            goto LABEL_22;
          *(_WORD *)v9 = 0;
          v21 = v23 + 1;
          *stackaddr_np = (unint64_t)(v23 + 1);
          if ((unint64_t)(v23 + 1) >= v94)
          {
            v22 = 0;
          }
          else
          {
            v22 = *v21;
            *(_WORD *)v9 = v22;
          }
          if (v22 == 47)
          {
            v12 = 0;
            *(_WORD *)v9 = 0;
            *stackaddr_np = (unint64_t)(v23 + 2);
            if ((unint64_t)(v23 + 2) < v94)
            {
              v12 = v23[2];
              *(_WORD *)v9 = v12;
            }
            goto LABEL_3;
          }
        }
        while (1)
        {
          if (v22 == 10)
            goto LABEL_26;
          if (v22)
            break;
          if (v23 == (unsigned __int16 *)v94)
          {
            v666 = ((unint64_t)v188 - v189) >> 1;
            v667 = WTF::fastCompactMalloc((WTF *)0x20);
            v675 = v667;
            *(_QWORD *)v667 = 0x2900000002;
            *(_QWORD *)(v667 + 8) = "Multiline comment was not closed properly";
            *(_DWORD *)(v667 + 16) = 4;
            v676 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
            *((_QWORD *)a1 + 19) = v675;
            if (v676)
            {
              if (*(_DWORD *)v676 == 2)
              {
                WTF::StringImpl::~StringImpl(v676, v668, v669, v670, v671, v672, v673, v674);
                WTF::fastFree(v778, v779, v780, v781, v782, v783, v784, v785);
              }
              else
              {
                *(_DWORD *)v676 -= 2;
              }
            }
            *((_BYTE *)a1 + 150) = 1;
            v677 = *((_QWORD *)a1 + 11);
            v145 = *((_QWORD *)a1 + 10) - v677;
            v165 = (unint64_t)(*((_QWORD *)a1 + 14) - v677) >> 1;
            v146 = *a1 | ((unint64_t)(v145 >> 1) << 32);
            v31 = 3145732;
            goto LABEL_826;
          }
LABEL_23:
          v22 = 0;
          *(_WORD *)v9 = 0;
          v21 = v23 + 1;
          *stackaddr_np = (unint64_t)(v23 + 1);
          if ((unint64_t)(v23 + 1) >= v94)
            goto LABEL_16;
          v22 = *v21;
          *(_WORD *)v9 = v22;
          ++v23;
          if (v22 > 12)
            goto LABEL_17;
        }
LABEL_22:
        if ((v22 & 0xFFFE) == 0x2028)
        {
LABEL_26:
          *((_QWORD *)a1 + 15) = v20 | ((unint64_t)(((unint64_t)v23 - v189) >> 1) << 32);
          a1[32] = ((unint64_t)v24 - v189) >> 1;
          *((_WORD *)a1 + 88) = 0;
          v24 = v23 + 1;
          *((_QWORD *)a1 + 10) = v23 + 1;
          if ((unint64_t)(v23 + 1) >= v94)
            goto LABEL_13;
          v19 = *v24;
          *(_WORD *)v9 = v19;
          if (v22 == 13 && v19 == 10)
          {
            *(_WORD *)v9 = 0;
            v24 = v23 + 2;
            *stackaddr_np = (unint64_t)(v23 + 2);
            if ((unint64_t)(v23 + 2) >= v94)
            {
LABEL_13:
              v19 = 0;
              goto LABEL_14;
            }
            v19 = *v24;
            *(_WORD *)v9 = v19;
          }
LABEL_14:
          *a1 = ++v20;
          *((_QWORD *)a1 + 14) = v24;
          *((_BYTE *)a1 + 56) = 1;
          v21 = v24;
          continue;
        }
        goto LABEL_23;
      }
    case 0x30:
      *((_WORD *)a1 + 88) = 0;
      v108 = *((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v108 + 2;
      v109 = *((_QWORD *)a1 + 12);
      if (v108 + 2 >= v109)
        goto LABEL_160;
      v110 = *(unsigned __int16 *)(v108 + 2);
      *(_WORD *)v9 = v110;
      v111 = v110 | 0x20;
      if ((v110 | 0x20) != 0x78)
      {
        if (v111 == 98)
        {
          v862 = (_WORD *)(v108 + 4);
          if (v108 + 4 >= v109 || (*v862 & 0xFFFE) != 0x30)
          {
            v1061 = WTF::fastCompactMalloc((WTF *)0x20);
            v1069 = v1061;
            v1070 = 0x1B00000002;
            v1071 = "No binary digits after '0b'";
            goto LABEL_2459;
          }
          v863 = 0;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)v862;
          v864 = (unsigned __int16)*v862;
          *(_WORD *)v9 = v864;
          for (i = 31; ; --i)
          {
            if (v864 == 95)
            {
              if ((unint64_t)++v862 >= v109 || (*v862 & 0xFFFE) != 0x30)
              {
LABEL_2089:
                v238 = 0;
                *v1356 = 0;
                goto LABEL_1671;
              }
              *(_WORD *)v9 = 0;
              v866 = (unsigned __int16)*v862;
            }
            else
            {
              v866 = v864;
            }
            *((_BYTE *)&v1363.rlim_cur + i) = v866;
            *(_WORD *)v9 = 0;
            *stackaddr_np = (unint64_t)++v862;
            if ((unint64_t)v862 >= v109)
            {
              v864 = 0;
            }
            else
            {
              v864 = (unsigned __int16)*v862;
              *(_WORD *)v9 = v864;
            }
            v863 = v866 + 2 * v863 - 48;
            v867 = (v864 & 0xFFFE) == 0x30 || v864 == 95;
            if (!v867 || !i)
              break;
          }
          if (v864 != 110 && v864 != 95 && (v864 - 48) >= 0xA && i)
          {
            v894 = (double)v863;
            goto LABEL_1670;
          }
          if ((int)i < 32)
          {
            v1034 = 31;
            do
            {
              JSC::Lexer<unsigned char>::record8((uint64_t)a1, *((_BYTE *)&v1363.rlim_cur + v1034));
              v235 = v1034-- > i;
            }
            while (v235);
            v864 = *(unsigned __int16 *)v9;
          }
          while (1)
          {
            if ((v864 - 48) >= 2)
            {
              if (v864 != 95)
              {
                if (v864 != 110)
                {
                  if ((v864 - 48) < 0xA)
                    goto LABEL_2089;
                  v894 = JSC::parseIntOverflow(*((_QWORD *)a1 + 1), a1[5], 2);
LABEL_1670:
                  v238 = 0;
                  *(double *)v1356 = v894;
LABEL_1671:
                  v895 = *(unsigned __int16 *)v9;
                  if (v895 <= 0xFF)
                  {
                    if (*(_WORD *)v9 != 92 && JSC::typesOfLatin1Characters[v895] != 0)
                      goto LABEL_1348;
LABEL_2126:
                    if ((v895 & 0xF800) == 0xD800)
                    {
                      v1078 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                      if ((unint64_t)v1078 >= *((_QWORD *)a1 + 12))
                        v1079 = 0;
                      else
                        v1079 = *v1078;
                      v1165 = (v1079 & 0x400) != 0 && (v895 & 0xFC00) == 55296;
                      v1166 = v1079 + ((_DWORD)v895 << 10) - 56613888;
                      if (v1165)
                        LODWORD(v895) = v1166;
                      else
                        LODWORD(v895) = -1;
                    }
                    if (v895 <= 0xFF)
                    {
                      if (JSC::typesOfLatin1Characters[v895])
                        goto LABEL_1348;
                    }
                    else if (!u_hasBinaryProperty(v895, UCHAR_ID_START))
                    {
                      goto LABEL_1348;
                    }
                    v1061 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1069 = v1061;
                    v1070 = 0x2E00000002;
                    v1071 = "No space between binary literal and identifier";
LABEL_2459:
                    *(_QWORD *)v1061 = v1070;
                    *(_QWORD *)(v1061 + 8) = v1071;
                    *(_DWORD *)(v1061 + 16) = 4;
                    v1232 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                    *((_QWORD *)a1 + 19) = v1069;
                    if (v1232)
                    {
                      if (*(_DWORD *)v1232 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1232, v1062, v1063, v1064, v1065, v1066, v1067, v1068);
                        WTF::fastFree(v1296, v1297, v1298, v1299, v1300, v1301, v1302, v1303);
                      }
                      else
                      {
                        *(_DWORD *)v1232 -= 2;
                      }
                    }
                    v31 = 3145740;
LABEL_1701:
                    *((_BYTE *)a1 + 150) = 1;
                    v908 = *((_QWORD *)a1 + 11);
                    v145 = *((_QWORD *)a1 + 10) - v908;
                    v165 = (unint64_t)(*((_QWORD *)a1 + 14) - v908) >> 1;
                    v49 = *a1;
                    v146 = *a1 | ((unint64_t)(v145 >> 1) << 32);
                    LODWORD(v666) = v165;
                    goto LABEL_826;
                  }
                  if (u_charType(*(unsigned __int16 *)v9) != 12
                    && (v895 - 8232) >= 2
                    && (_DWORD)v895 != 65279)
                  {
                    LODWORD(v895) = *(unsigned __int16 *)v9;
                    goto LABEL_2126;
                  }
LABEL_1348:
                  if ((v238 & 1) == 0)
                  {
                    v241 = *(double *)v1356;
                    goto LABEL_380;
                  }
LABEL_1350:
                  v31 = 11;
                  goto LABEL_204;
                }
                v1139 = a1[5];
                v1140 = *((_QWORD *)a1 + 24);
                if ((_DWORD)v1139)
                {
                  v1141 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
                  v11 = *((_QWORD *)a1 + 23);
                  if (*(char *)v1141 < 0)
                  {
                    JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                    WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                    v1214 = v1358;
                    v1358 = 0;
                    if (v1214)
                    {
                      if (*(_DWORD *)v1214 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1214, v1207, v1208, v1209, v1210, v1211, v1212, v1213);
                        WTF::fastFree(v1276, v1277, v1278, v1279, v1280, v1281, v1282, v1283);
                      }
                      else
                      {
                        *(_DWORD *)v1214 -= 2;
                      }
                    }
                    v1284 = *(_QWORD *)v11 - 1;
                    if (v1284 >> 6 >= *(unsigned int *)(v11 + 20))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19886E018);
                    }
                    v1143 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * (v1284 >> 6)) + 8 * (v1284 & 0x3F));
                  }
                  else
                  {
                    v1142 = *(unsigned __int8 *)v1141;
                    if ((_DWORD)v1139 == 1)
                    {
                      StatusReg = v11 + 24;
                      v1143 = *(uint64_t **)(v11 + 24 + 8 * v1142);
                      if (!v1143)
                      {
                        JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                        v1151 = v1358;
                        v1358 = 0;
                        if (v1151)
                        {
                          if (*(_DWORD *)v1151 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v1151, v1144, v1145, v1146, v1147, v1148, v1149, v1150);
                            WTF::fastFree(v1223, v1224, v1225, v1226, v1227, v1228, v1229, v1230);
                          }
                          else
                          {
                            *(_DWORD *)v1151 -= 2;
                          }
                        }
                        v1231 = *(_QWORD *)v11 - 1;
                        v52 = v1231 >> 6;
                        if (v1231 >> 6 >= *(unsigned int *)(v11 + 20))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19886D9C4);
                        }
                        goto LABEL_2510;
                      }
                    }
                    else
                    {
                      StatusReg = v11 + 1048;
                      v1143 = *(uint64_t **)(v11 + 1048 + 8 * v1142);
                      if (!v1143 || !WTF::equalInternal<unsigned char>(*v1143, *((_QWORD *)a1 + 1), a1[5]))
                      {
                        JSC::Identifier::fromString(v1140, v1141, v1139, a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                        v1222 = v1358;
                        v1358 = 0;
                        if (v1222)
                        {
                          if (*(_DWORD *)v1222 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v1222, v1215, v1216, v1217, v1218, v1219, v1220, v1221);
                            WTF::fastFree(v1285, v1286, v1287, v1288, v1289, v1290, v1291, v1292);
                          }
                          else
                          {
                            *(_DWORD *)v1222 -= 2;
                          }
                        }
                        v1231 = *(_QWORD *)v11 - 1;
                        v52 = v1231 >> 6;
                        if (v1231 >> 6 >= *(unsigned int *)(v11 + 20))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19886E020);
                        }
LABEL_2510:
                        v28 = *(char *)v1141;
                        if ((v28 & 0x80000000) != 0)
                          goto LABEL_2578;
                        v1293 = *(_QWORD *)(v11 + 8);
                        v1294 = 8 * (v1231 & 0x3F);
                        *(_QWORD *)(StatusReg + 8 * *(unsigned __int8 *)v1141) = *(_QWORD *)(v1293 + 8 * v52) + v1294;
                        v1143 = (uint64_t *)(*(_QWORD *)(v1293 + 8 * v52) + v1294);
                      }
                    }
                  }
                }
                else
                {
                  v1143 = (uint64_t *)(*(_QWORD *)(v1140 + 41952) + 8);
                }
                *((_WORD *)a1 + 88) = 0;
                v1295 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
                *((_QWORD *)a1 + 10) = v1295;
                if ((unint64_t)v1295 < *((_QWORD *)a1 + 12))
                  *(_WORD *)v9 = *v1295;
                *(_QWORD *)(a2 + 8) = v1143;
                *(_BYTE *)(a2 + 16) = 2;
                v238 = 1;
                goto LABEL_1671;
              }
              v1036 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
              if ((unint64_t)v1036 >= *((_QWORD *)a1 + 12) || (*v1036 & 0xFFFE) != 0x30)
                goto LABEL_2089;
              *(_WORD *)v9 = 0;
              *stackaddr_np = (unint64_t)v1036;
              LOWORD(v864) = *v1036;
              *(_WORD *)v9 = *v1036;
            }
            JSC::Lexer<unsigned char>::record8((uint64_t)a1, v864);
            v864 = 0;
            *((_WORD *)a1 + 88) = 0;
            v1035 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
            *((_QWORD *)a1 + 10) = v1035;
            if ((unint64_t)v1035 < *((_QWORD *)a1 + 12))
            {
              v864 = *v1035;
              *(_WORD *)v9 = v864;
            }
          }
        }
        if (v111 != 111)
        {
          if (v110 == 95)
          {
            v31 = 3145734;
            v653 = WTF::fastCompactMalloc((WTF *)0x20);
            v661 = v653;
            v662 = 0x2600000002;
            v663 = "Numeric literals may not begin with 0_";
          }
          else
          {
LABEL_160:
            v112 = a1 + 2;
            LOBYTE(v1363.rlim_cur) = 48;
            v113 = a1[5];
            if ((_DWORD)v113 == a1[4])
              *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, (WTF *)(v113 + 1), (unint64_t)&v1363);
            else
              *(_BYTE *)(*v112 + v113) = 48;
            v114 = a1[5] + 1;
            a1[5] = v114;
            v115 = *((unsigned __int16 *)a1 + 88);
            if (!v1353 || (v115 - 48) > 9)
            {
              if ((v115 & 0xFFF8) != 0x30)
                goto LABEL_165;
              v881 = 0;
              v882 = (_WORD *)*((_QWORD *)a1 + 10);
              v883 = *((_QWORD *)a1 + 12);
              v884 = 9;
              do
              {
                v885 = v884;
                if (v115 == 95)
                {
                  if ((unint64_t)++v882 >= v883)
                    goto LABEL_165;
                  if ((*v882 & 0xFFF8) != 0x30 || v114 != 0)
                    goto LABEL_165;
                  *(_WORD *)v9 = 0;
                  v887 = (unsigned __int16)*v882;
                }
                else
                {
                  v887 = v115;
                }
                *((_BYTE *)&v1363.rlim_cur + v885) = v887;
                *(_WORD *)v9 = 0;
                *stackaddr_np = (unint64_t)++v882;
                if ((unint64_t)v882 >= v883)
                {
                  v115 = 0;
                }
                else
                {
                  v115 = (unsigned __int16)*v882;
                  *(_WORD *)v9 = v115;
                }
                v881 = v887 + 8 * v881 - 48;
                v884 = v885 - 1;
                v888 = v115 & 0xFFF8;
                v889 = v888 == 48 || v115 == 95;
              }
              while (v889 && v885);
              if (v115 == 110 || v115 == 95 || (v115 - 48) < 0xA || !v885)
              {
                if ((int)v885 <= 9)
                {
                  v1031 = v885;
                  v1032 = 9;
                  do
                  {
                    JSC::Lexer<unsigned char>::record8((uint64_t)a1, *((_BYTE *)&v1363.rlim_cur + v1032));
                    v235 = v1032-- > v1031;
                  }
                  while (v235);
                  v115 = *(unsigned __int16 *)v9;
                  v888 = v115 & 0xFFF8;
                }
                v1033 = v115 == 95;
                if (v888 == 48 || v115 == 95)
                {
                  do
                  {
                    if (v1033)
                    {
                      v1135 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
                      if ((unint64_t)v1135 >= *((_QWORD *)a1 + 12))
                        goto LABEL_165;
                      if ((*v1135 & 0xFFF8) != 0x30 || v114 != 0)
                        goto LABEL_165;
                      *(_WORD *)v9 = 0;
                      *stackaddr_np = (unint64_t)v1135;
                      LOWORD(v115) = *v1135;
                      *(_WORD *)v9 = *v1135;
                    }
                    JSC::Lexer<unsigned char>::record8((uint64_t)a1, v115);
                    *((_WORD *)a1 + 88) = 0;
                    v1137 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                    *((_QWORD *)a1 + 10) = v1137;
                    if ((unint64_t)v1137 >= *((_QWORD *)a1 + 12))
                    {
                      v115 = 0;
                    }
                    else
                    {
                      v115 = *v1137;
                      *(_WORD *)v9 = v115;
                    }
                    v1033 = v115 == 95;
                  }
                  while (v115 == 95 || (v115 & 0xFFF8) == 0x30);
                }
                if (v115 == 110 && v114 == 0)
                {
                  v1200 = a1[5];
                  if ((_DWORD)v1200)
                  {
                    v1201 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
                    v11 = *((_QWORD *)a1 + 23);
                    v1202 = *((_QWORD *)a1 + 24);
                    if (*(char *)v1201 < 0)
                    {
                      JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                      v1262 = v1358;
                      v1358 = 0;
                      if (v1262)
                      {
                        if (*(_DWORD *)v1262 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1262, v1260, v1261, a4, a5, a6, a7, a8);
                          WTF::fastFree(v1324, v1325, v1326, v1327, v1328, v1329, v1330, v1331);
                        }
                        else
                        {
                          *(_DWORD *)v1262 -= 2;
                        }
                      }
                      if (*(unsigned int *)(v11 + 20) <= (unint64_t)(*(_QWORD *)v11 - 1) >> 6)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19886DFCCLL);
                      }
                      goto LABEL_165;
                    }
                    v1203 = *(unsigned __int8 *)v1201;
                    if ((_DWORD)v1200 == 1)
                    {
                      StatusReg = v11 + 24;
                      if (*(_QWORD *)(v11 + 24 + 8 * v1203))
                        goto LABEL_165;
                      JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                      v1206 = v1358;
                      v1358 = 0;
                      if (v1206)
                      {
                        if (*(_DWORD *)v1206 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1206, v1204, v1205, a4, a5, a6, a7, a8);
                          WTF::fastFree(v1267, v1268, v1269, v1270, v1271, v1272, v1273, v1274);
                        }
                        else
                        {
                          *(_DWORD *)v1206 -= 2;
                        }
                      }
                      v52 = *(_QWORD *)v11 - 1;
                      v1275 = (unint64_t)v52 >> 6;
                      if ((unint64_t)v52 >> 6 >= *(unsigned int *)(v11 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19886DCF0);
                      }
                    }
                    else
                    {
                      StatusReg = v11 + 1048;
                      v1263 = *(uint64_t **)(v11 + 1048 + 8 * v1203);
                      if (v1263 && WTF::equalInternal<unsigned char>(*v1263, *((_QWORD *)a1 + 1), a1[5]))
                        goto LABEL_165;
                      JSC::Identifier::fromString(v1202, v1201, v1200, a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                      v1266 = v1358;
                      v1358 = 0;
                      if (v1266)
                      {
                        if (*(_DWORD *)v1266 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1266, v1264, v1265, a4, a5, a6, a7, a8);
                          WTF::fastFree(v1332, v1333, v1334, v1335, v1336, v1337, v1338, v1339);
                        }
                        else
                        {
                          *(_DWORD *)v1266 -= 2;
                        }
                      }
                      v52 = *(_QWORD *)v11 - 1;
                      v1275 = (unint64_t)v52 >> 6;
                      if ((unint64_t)v52 >> 6 >= *(unsigned int *)(v11 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19886E098);
                      }
                    }
                    v28 = *(char *)v1201;
                    if ((v28 & 0x80000000) != 0)
                      goto LABEL_2578;
                    *(_QWORD *)(StatusReg + 8 * *(unsigned __int8 *)v1201) = *(_QWORD *)(*(_QWORD *)(v11 + 8)
                                                                                         + 8 * v1275)
                                                                             + 8 * (v52 & 0x3F);
                  }
LABEL_165:
                  v116 = (unsigned __int8 **)(a1 + 2);
                  LODWORD(v117) = a1[5];
                  if ((_DWORD)v117)
                  {
                    LODWORD(v118) = *(unsigned __int16 *)v9;
                    v124 = v118 - 48;
                    v129 = (_DWORD)v118 == 95 || v124 < 0xA;
                    goto LABEL_188;
                  }
                  LOWORD(v118) = *((_WORD *)a1 + 88);
                  v119 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
                  v120 = 9;
                  v121 = *((_QWORD *)a1 + 12);
                  do
                  {
                    v122 = v120;
                    if ((unsigned __int16)v118 == 95)
                    {
                      if ((unint64_t)++v119 >= v121 || *v119 - 58 < 0xFFFFFFF6)
                      {
                        v132 = 0;
                        LODWORD(v117) = 0;
                        goto LABEL_196;
                      }
                      *(_WORD *)v9 = 0;
                      v123 = *v119;
                    }
                    else
                    {
                      v123 = v118;
                    }
                    *((_BYTE *)&v1363.rlim_cur + v120) = v123;
                    *(_WORD *)v9 = 0;
                    *stackaddr_np = (unint64_t)++v119;
                    if ((unint64_t)v119 >= v121)
                    {
                      LODWORD(v118) = 0;
                    }
                    else
                    {
                      LODWORD(v118) = *v119;
                      *(_WORD *)v9 = v118;
                    }
                    LODWORD(v117) = 10 * v117 + v123 - 48;
                    --v120;
                    LOWORD(v124) = v118 - 48;
                    v125 = (unsigned __int16)(v118 - 48) <= 9u || (_DWORD)v118 == 95;
                  }
                  while (v125 && v122);
                  v126 = v122;
                  if (!v122)
                    goto LABEL_182;
                  if (((v118 - 69) > 0x29
                     || ((1 << (v118 - 69)) & 0x20100000001) == 0)
                    && (_DWORD)v118 != 46)
                  {
                    *(double *)v1356 = (double)v117;
                    goto LABEL_200;
                  }
                  if ((int)v122 > 9)
                  {
                    LODWORD(v117) = 0;
                  }
                  else
                  {
LABEL_182:
                    LODWORD(v117) = 0;
                    v127 = 9;
                    do
                    {
                      v128 = *((_BYTE *)&v1363.rlim_cur + v127);
                      LOBYTE(v1358) = v128;
                      if ((_DWORD)v117 == a1[4])
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v117 + 1), (unint64_t)&v1358);
                      else
                        (*v116)[v117] = v128;
                      LODWORD(v117) = a1[5] + 1;
                      a1[5] = v117;
                      v235 = v127-- > v126;
                    }
                    while (v235);
                    LODWORD(v118) = *(unsigned __int16 *)v9;
                    LOWORD(v124) = v118 - 48;
                  }
                  v129 = 0;
LABEL_188:
                  v130 = (_DWORD)v118 == 95;
                  if ((unsigned __int16)v124 < 0xAu || (_DWORD)v118 == 95)
                  {
                    do
                    {
                      if (v130)
                      {
                        v820 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
                        if ((unint64_t)v820 >= *((_QWORD *)a1 + 12))
                          goto LABEL_194;
                        v821 = (unsigned __int16)*v820 - 58 < 0xFFFFFFF6 || v129;
                        if ((v821 & 1) != 0)
                          goto LABEL_194;
                        *(_WORD *)v9 = 0;
                        *stackaddr_np = (unint64_t)v820;
                        LOWORD(v118) = *v820;
                        *(_WORD *)v9 = *v820;
                      }
                      LOBYTE(v1363.rlim_cur) = v118;
                      if ((_DWORD)v117 == a1[4])
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v117 + 1), (unint64_t)&v1363);
                      else
                        (*v116)[v117] = v118;
                      LODWORD(v117) = a1[5] + 1;
                      a1[5] = v117;
                      *((_WORD *)a1 + 88) = 0;
                      v118 = *((_QWORD *)a1 + 10) + 2;
                      *((_QWORD *)a1 + 10) = v118;
                      if (v118 >= *((_QWORD *)a1 + 12))
                      {
                        LODWORD(v118) = 0;
                      }
                      else
                      {
                        LODWORD(v118) = *(unsigned __int16 *)v118;
                        *(_WORD *)v9 = v118;
                      }
                      v130 = (_DWORD)v118 == 95;
                    }
                    while ((_DWORD)v118 == 95 || (unsigned __int16)(v118 - 48) < 0xAu);
                  }
                  v131 = (_DWORD)v118 != 110 || v129;
                  if ((v131 & 1) != 0)
                  {
LABEL_194:
                    v132 = (unsigned __int16)v118 == 46;
                    if ((unsigned __int16)v118 != 46)
                      goto LABEL_195;
                    *((_WORD *)a1 + 88) = 0;
                    v118 = *((_QWORD *)a1 + 10) + 2;
                    *((_QWORD *)a1 + 10) = v118;
                    if (v118 >= *((_QWORD *)a1 + 12))
                    {
                      v132 = 1;
LABEL_196:
                      v133 = *v116;
                      v1363.rlim_cur = 0;
                      fast_float::from_chars_advanced<double,char>(v133, &v133[v117], &v1363.rlim_cur, 0x2E00000005);
                      v134 = *(double *)&v1363.rlim_cur;
                      *v1356 = (uint64_t *)v1363.rlim_cur;
                      if (v132
                        || v134 == 0.0 && (*(_QWORD *)&v134 & 0x8000000000000000) != 0
                        || v134 != (double)(uint64_t)v134)
                      {
                        v31 = 10;
                      }
                      else
                      {
LABEL_200:
                        v31 = 9;
                      }
LABEL_201:
                      v135 = *(unsigned __int16 *)v9;
                      if (v135 > 0xFF)
                      {
                        if (u_charType(*(unsigned __int16 *)v9) == 12
                          || (v135 - 8232) < 2
                          || (_DWORD)v135 == 65279)
                        {
                          goto LABEL_204;
                        }
                        LODWORD(v135) = *(unsigned __int16 *)v9;
                      }
                      else if (*(_WORD *)v9 != 92 && JSC::typesOfLatin1Characters[v135])
                      {
                        goto LABEL_204;
                      }
                      if ((v135 & 0xF800) == 0xD800)
                      {
                        v604 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                        if ((unint64_t)v604 >= *((_QWORD *)a1 + 12))
                          v605 = 0;
                        else
                          v605 = *v604;
                        v606 = (v605 & 0x400) != 0 && (v135 & 0xFC00) == 55296;
                        v607 = v605 + ((_DWORD)v135 << 10) - 56613888;
                        if (v606)
                          LODWORD(v135) = v607;
                        else
                          LODWORD(v135) = -1;
                      }
                      if (v135 <= 0xFF)
                      {
                        if (JSC::typesOfLatin1Characters[v135])
                          goto LABEL_204;
                      }
                      else if (!u_hasBinaryProperty(v135, UCHAR_ID_START))
                      {
                        goto LABEL_204;
                      }
LABEL_1080:
                      v608 = WTF::fastCompactMalloc((WTF *)0x20);
                      v616 = v608;
                      v617 = 0x3500000002;
                      v618 = "No identifiers allowed directly after numeric literal";
                      goto LABEL_2199;
                    }
                    LODWORD(v118) = *(unsigned __int16 *)v118;
                    *(_WORD *)v9 = v118;
                    if ((v118 - 48) <= 9)
                    {
                      LOBYTE(v1363.rlim_cur) = 46;
                      if ((_DWORD)v117 == a1[4])
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v117 + 1), (unint64_t)&v1363);
                      else
                        (*v116)[v117] = 46;
                      LODWORD(v117) = a1[5] + 1;
                      a1[5] = v117;
                      LOWORD(v118) = *((_WORD *)a1 + 88);
                      do
                      {
                        if ((unsigned __int16)v118 == 95)
                        {
                          v118 = *((_QWORD *)a1 + 10) + 2;
                          if (v118 >= *((_QWORD *)a1 + 12) || *(unsigned __int16 *)v118 - 48 > 9)
                          {
LABEL_2060:
                            v608 = WTF::fastCompactMalloc((WTF *)0x20);
                            v616 = v608;
                            v617 = 0x2400000002;
                            v618 = "Non-number found after decimal point";
                            goto LABEL_2199;
                          }
                          *(_WORD *)v9 = 0;
                          *stackaddr_np = v118;
                          LOWORD(v118) = *(_WORD *)v118;
                          *(_WORD *)v9 = v118;
                        }
                        LOBYTE(v1363.rlim_cur) = v118;
                        if ((_DWORD)v117 == a1[4])
                          *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v117 + 1), (unint64_t)&v1363);
                        else
                          (*v116)[v117] = v118;
                        LODWORD(v117) = a1[5] + 1;
                        a1[5] = v117;
                        *((_WORD *)a1 + 88) = 0;
                        v118 = *((_QWORD *)a1 + 10) + 2;
                        *((_QWORD *)a1 + 10) = v118;
                        if (v118 >= *((_QWORD *)a1 + 12))
                        {
                          LODWORD(v118) = 0;
                        }
                        else
                        {
                          LODWORD(v118) = *(unsigned __int16 *)v118;
                          *(_WORD *)v9 = v118;
                        }
                      }
                      while ((_DWORD)v118 == 95 || (unsigned __int16)(v118 - 48) < 0xAu);
                    }
LABEL_195:
                    if ((v118 & 0xFFDF) != 0x45)
                      goto LABEL_196;
                    LOBYTE(v1363.rlim_cur) = 101;
                    if ((_DWORD)v117 == a1[4])
                      *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v117 + 1), (unint64_t)&v1363);
                    else
                      (*v116)[v117] = 101;
                    v117 = a1[5] + 1;
                    a1[5] = v117;
                    *((_WORD *)a1 + 88) = 0;
                    v274 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                    *((_QWORD *)a1 + 10) = v274;
                    v275 = *((_QWORD *)a1 + 12);
                    if ((unint64_t)v274 < v275)
                    {
                      v276 = *v274;
                      *(_WORD *)v9 = v276;
                      if (v276 != 45 && v276 != 43)
                      {
LABEL_418:
                        if ((v276 - 48) <= 9)
                        {
                          do
                          {
                            if (v276 == 95)
                            {
                              v822 = v274 + 1;
                              if ((unint64_t)v822 >= v275 || *v822 - 48 > 9)
                                goto LABEL_2198;
                              *(_WORD *)v9 = 0;
                              *stackaddr_np = (unint64_t)v822;
                              v277 = *v822;
                              *(_WORD *)v9 = v277;
                            }
                            else
                            {
                              LOBYTE(v277) = v276;
                            }
                            LOBYTE(v1363.rlim_cur) = v277;
                            if ((_DWORD)v117 == a1[4])
                              *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v117 + 1), (unint64_t)&v1363);
                            else
                              (*v116)[v117] = v277;
                            LODWORD(v117) = a1[5] + 1;
                            a1[5] = v117;
                            *((_WORD *)a1 + 88) = 0;
                            v274 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                            *((_QWORD *)a1 + 10) = v274;
                            v275 = *((_QWORD *)a1 + 12);
                            if ((unint64_t)v274 >= v275)
                            {
                              v276 = 0;
                            }
                            else
                            {
                              v276 = *v274;
                              *(_WORD *)v9 = v276;
                            }
                          }
                          while (v276 == 95 || (v276 - 48) < 0xA);
                          goto LABEL_196;
                        }
                        goto LABEL_2198;
                      }
                      LOBYTE(v1363.rlim_cur) = v276;
                      if ((_DWORD)v117 == a1[4])
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v117 + 1), (unint64_t)&v1363);
                      else
                        (*v116)[v117] = v276;
                      LODWORD(v117) = a1[5] + 1;
                      a1[5] = v117;
                      *((_WORD *)a1 + 88) = 0;
                      v274 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                      *((_QWORD *)a1 + 10) = v274;
                      v275 = *((_QWORD *)a1 + 12);
                      if ((unint64_t)v274 < v275)
                      {
                        v276 = *v274;
                        *(_WORD *)v9 = v276;
                        goto LABEL_418;
                      }
                    }
LABEL_2198:
                    v608 = WTF::fastCompactMalloc((WTF *)0x20);
                    v616 = v608;
                    v617 = 0x2900000002;
                    v618 = "Non-number found after exponent indicator";
LABEL_2199:
                    *(_QWORD *)v608 = v617;
                    *(_QWORD *)(v608 + 8) = v618;
                    *(_DWORD *)(v608 + 16) = 4;
                    v1095 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                    *((_QWORD *)a1 + 19) = v616;
                    if (v1095)
                    {
                      if (*(_DWORD *)v1095 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1095, v609, v610, v611, v612, v613, v614, v615);
                        WTF::fastFree(v1096, v1097, v1098, v1099, v1100, v1101, v1102, v1103);
                      }
                      else
                      {
                        *(_DWORD *)v1095 -= 2;
                      }
                    }
                    v31 = 1048583;
                    if (!*(_WORD *)v9)
                    {
                      if (*((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
                        v31 = 3145733;
                      else
                        v31 = 1048583;
                    }
                    goto LABEL_1701;
                  }
                  v1015 = *((_QWORD *)a1 + 24);
                  if ((_DWORD)v117)
                  {
                    v11 = *((_QWORD *)a1 + 1);
                    v1016 = v117;
                    v1017 = *((_QWORD *)a1 + 23);
                    if (*(char *)v11 < 0)
                    {
                      JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), v117, a4, a5, a6, a7, a8, &v1363.rlim_cur);
                      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1017, (uint64_t *)&v1363);
                      v1121 = (WTF::StringImpl *)v1363.rlim_cur;
                      v1363.rlim_cur = 0;
                      if (v1121)
                      {
                        if (*(_DWORD *)v1121 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1121, v1114, v1115, v1116, v1117, v1118, v1119, v1120);
                          WTF::fastFree(v1178, v1179, v1180, v1181, v1182, v1183, v1184, v1185);
                        }
                        else
                        {
                          *(_DWORD *)v1121 -= 2;
                        }
                      }
                      v1186 = *(_QWORD *)v1017 - 1;
                      if (v1186 >> 6 >= *(unsigned int *)(v1017 + 20))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19886DB50);
                      }
                      v1019 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1017 + 8) + 8 * (v1186 >> 6)) + 8 * (v1186 & 0x3F));
                    }
                    else
                    {
                      v1018 = *(unsigned __int8 *)v11;
                      if ((_DWORD)v117 == 1)
                      {
                        StatusReg = v1017 + 24;
                        v1019 = *(uint64_t **)(v1017 + 24 + 8 * v1018);
                        if (!v1019)
                        {
                          JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), v117, a4, a5, a6, a7, a8, &v1363.rlim_cur);
                          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1017, (uint64_t *)&v1363);
                          v1027 = (WTF::StringImpl *)v1363.rlim_cur;
                          v1363.rlim_cur = 0;
                          if (v1027)
                          {
                            if (*(_DWORD *)v1027 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1027, v1020, v1021, v1022, v1023, v1024, v1025, v1026);
                              WTF::fastFree(v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129);
                            }
                            else
                            {
                              *(_DWORD *)v1027 -= 2;
                            }
                          }
                          v1130 = *(_QWORD *)v1017 - 1;
                          v52 = v1130 >> 6;
                          if (v1130 >> 6 >= *(unsigned int *)(v1017 + 20))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19886D2C0);
                          }
LABEL_2360:
                          v28 = *(char *)v11;
                          if ((v28 & 0x80000000) != 0)
                            goto LABEL_2578;
                          v1160 = *(_QWORD *)(v1017 + 8);
                          v1161 = 8 * (v1130 & 0x3F);
                          *(_QWORD *)(StatusReg + 8 * *(unsigned __int8 *)v11) = *(_QWORD *)(v1160 + 8 * v52) + v1161;
                          v1019 = (uint64_t *)(*(_QWORD *)(v1160 + 8 * v52) + v1161);
                        }
                      }
                      else
                      {
                        StatusReg = v1017 + 1048;
                        v1019 = *(uint64_t **)(v1017 + 1048 + 8 * v1018);
                        if (!v1019
                          || !WTF::equalInternal<unsigned char>(*v1019, *((_QWORD *)a1 + 1), v117))
                        {
                          JSC::Identifier::fromString(v1015, (WTF::AtomStringImpl *)v11, v1016, a4, a5, a6, a7, a8, &v1363.rlim_cur);
                          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v1017, (uint64_t *)&v1363);
                          v1060 = (WTF::StringImpl *)v1363.rlim_cur;
                          v1363.rlim_cur = 0;
                          if (v1060)
                          {
                            if (*(_DWORD *)v1060 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1060, v1053, v1054, v1055, v1056, v1057, v1058, v1059);
                              WTF::fastFree(v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159);
                            }
                            else
                            {
                              *(_DWORD *)v1060 -= 2;
                            }
                          }
                          v1130 = *(_QWORD *)v1017 - 1;
                          v52 = v1130 >> 6;
                          if (v1130 >> 6 >= *(unsigned int *)(v1017 + 20))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19886D9CCLL);
                          }
                          goto LABEL_2360;
                        }
                      }
                    }
                  }
                  else
                  {
                    v1019 = (uint64_t *)(*(_QWORD *)(v1015 + 41952) + 8);
                  }
                  *((_WORD *)a1 + 88) = 0;
                  v1162 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
                  *((_QWORD *)a1 + 10) = v1162;
                  if ((unint64_t)v1162 < *((_QWORD *)a1 + 12))
                    *(_WORD *)v9 = *v1162;
                  *(_QWORD *)(a2 + 8) = v1019;
                  *(_BYTE *)(a2 + 16) = 10;
                  v31 = 11;
                  goto LABEL_201;
                }
                if ((v115 - 48) < 0xA)
                  goto LABEL_165;
                v890 = JSC::parseIntOverflow(*((_QWORD *)a1 + 1), a1[5], 8);
              }
              else
              {
                v890 = (double)v881;
              }
              *(double *)v1356 = v890;
              if (v890 == 0.0 && (*(_QWORD *)&v890 & 0x8000000000000000) != 0 || v890 != (double)(uint64_t)v890)
                v31 = 10;
              else
                v31 = 9;
              goto LABEL_201;
            }
            v31 = 3145734;
            v653 = WTF::fastCompactMalloc((WTF *)0x20);
            v661 = v653;
            v662 = 0x4900000002;
            v663 = "Decimal integer literals with a leading zero are forbidden in strict mode";
          }
LABEL_1188:
          *(_QWORD *)v653 = v662;
          *(_QWORD *)(v653 + 8) = v663;
          *(_DWORD *)(v653 + 16) = 4;
          v664 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
          *((_QWORD *)a1 + 19) = v661;
          if (v664)
          {
            if (*(_DWORD *)v664 == 2)
            {
              WTF::StringImpl::~StringImpl(v664, v654, v655, v656, v657, v658, v659, v660);
              WTF::fastFree(v690, v691, v692, v693, v694, v695, v696, v697);
            }
            else
            {
              *(_DWORD *)v664 -= 2;
            }
          }
          goto LABEL_1701;
        }
        v868 = (_WORD *)(v108 + 4);
        if (v108 + 4 >= v109 || (*v868 & 0xFFF8) != 0x30)
        {
          v31 = 3145734;
          v653 = WTF::fastCompactMalloc((WTF *)0x20);
          v661 = v653;
          v662 = 0x1A00000002;
          v663 = "No octal digits after '0o'";
          goto LABEL_1188;
        }
        v869 = 0;
        *((_WORD *)a1 + 88) = 0;
        *((_QWORD *)a1 + 10) = v868;
        v870 = (unsigned __int16)*v868;
        *((_WORD *)a1 + 88) = v870;
        v871 = a1[5];
        v872 = 9;
        do
        {
          v873 = v872;
          if (v870 == 95)
          {
            if ((unint64_t)++v868 >= v109)
              goto LABEL_2329;
            if ((*v868 & 0xFFF8) != 0x30 || v871 != 0)
              goto LABEL_2329;
            *(_WORD *)v9 = 0;
            v875 = (unsigned __int16)*v868;
          }
          else
          {
            v875 = v870;
          }
          *((_BYTE *)&v1363.rlim_cur + v873) = v875;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)++v868;
          if ((unint64_t)v868 >= v109)
          {
            v870 = 0;
          }
          else
          {
            v870 = (unsigned __int16)*v868;
            *(_WORD *)v9 = v870;
          }
          v869 = v875 + 8 * v869 - 48;
          v872 = v873 - 1;
          v876 = v870 & 0xFFF8;
          v877 = v876 == 48 || v870 == 95;
        }
        while (v877 && v873);
        if (v870 != 110 && v870 != 95 && (v870 - 48) >= 0xA && v873)
        {
          v878 = (double)v869;
          goto LABEL_1618;
        }
        if ((int)v873 <= 9)
        {
          v1028 = v873;
          v1029 = 9;
          do
          {
            JSC::Lexer<unsigned char>::record8((uint64_t)a1, *((_BYTE *)&v1363.rlim_cur + v1029));
            v235 = v1029-- > v1028;
          }
          while (v235);
          v870 = *(unsigned __int16 *)v9;
          v876 = v870 & 0xFFF8;
        }
        v1030 = v870 == 95;
        if (v876 == 48 || v870 == 95)
        {
          do
          {
            if (v1030)
            {
              v1131 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
              if ((unint64_t)v1131 >= *((_QWORD *)a1 + 12))
                goto LABEL_2329;
              if ((*v1131 & 0xFFF8) != 0x30 || v871 != 0)
                goto LABEL_2329;
              *(_WORD *)v9 = 0;
              *stackaddr_np = (unint64_t)v1131;
              LOWORD(v870) = *v1131;
              *(_WORD *)v9 = *v1131;
            }
            JSC::Lexer<unsigned char>::record8((uint64_t)a1, v870);
            *((_WORD *)a1 + 88) = 0;
            v1133 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
            *((_QWORD *)a1 + 10) = v1133;
            if ((unint64_t)v1133 >= *((_QWORD *)a1 + 12))
            {
              v870 = 0;
            }
            else
            {
              v870 = *v1133;
              *(_WORD *)v9 = v870;
            }
            v1030 = v870 == 95;
          }
          while (v870 == 95 || (v870 & 0xFFF8) == 0x30);
        }
        if (v870 != 110 || v871 != 0)
        {
          if ((v870 - 48) < 0xA)
          {
LABEL_2329:
            v238 = 0;
            *v1356 = 0;
            goto LABEL_1619;
          }
          v878 = JSC::parseIntOverflow(*((_QWORD *)a1 + 1), a1[5], 8);
LABEL_1618:
          v238 = 0;
          *(double *)v1356 = v878;
LABEL_1619:
          v879 = *(unsigned __int16 *)v9;
          if (v879 > 0xFF)
          {
            if (u_charType(*(unsigned __int16 *)v9) == 12 || (v879 - 8232) < 2 || (_DWORD)v879 == 65279)
              goto LABEL_1348;
            LODWORD(v879) = *(unsigned __int16 *)v9;
          }
          else if (*(_WORD *)v9 != 92 && JSC::typesOfLatin1Characters[v879] != 0)
          {
            goto LABEL_1348;
          }
          if ((v879 & 0xF800) == 0xD800)
          {
            v1074 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
            if ((unint64_t)v1074 >= *((_QWORD *)a1 + 12))
              v1075 = 0;
            else
              v1075 = *v1074;
            v1163 = (v1075 & 0x400) != 0 && (v879 & 0xFC00) == 55296;
            v1164 = v1075 + ((_DWORD)v879 << 10) - 56613888;
            if (v1163)
              LODWORD(v879) = v1164;
            else
              LODWORD(v879) = -1;
          }
          if (v879 <= 0xFF)
          {
            if (JSC::typesOfLatin1Characters[v879])
              goto LABEL_1348;
          }
          else if (!u_hasBinaryProperty(v879, UCHAR_ID_START))
          {
            goto LABEL_1348;
          }
          v31 = 3145734;
          v653 = WTF::fastCompactMalloc((WTF *)0x20);
          v661 = v653;
          v662 = 0x2D00000002;
          v663 = "No space between octal literal and identifier";
          goto LABEL_1188;
        }
        v1187 = a1[5];
        v1188 = *((_QWORD *)a1 + 24);
        if ((_DWORD)v1187)
        {
          v1189 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
          v11 = *((_QWORD *)a1 + 23);
          if (*(char *)v1189 < 0)
          {
            JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
            WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
            v1242 = v1358;
            v1358 = 0;
            if (v1242)
            {
              if (*(_DWORD *)v1242 == 2)
              {
                WTF::StringImpl::~StringImpl(v1242, v1235, v1236, v1237, v1238, v1239, v1240, v1241);
                WTF::fastFree(v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311);
              }
              else
              {
                *(_DWORD *)v1242 -= 2;
              }
            }
            v1312 = *(_QWORD *)v11 - 1;
            if (v1312 >> 6 >= *(unsigned int *)(v11 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x19886E088);
            }
            v1191 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * (v1312 >> 6)) + 8 * (v1312 & 0x3F));
          }
          else
          {
            v1190 = *(unsigned __int8 *)v1189;
            if ((_DWORD)v1187 == 1)
            {
              StatusReg = v11 + 24;
              v1191 = *(uint64_t **)(v11 + 24 + 8 * v1190);
              if (!v1191)
              {
                JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                v1199 = v1358;
                v1358 = 0;
                if (v1199)
                {
                  if (*(_DWORD *)v1199 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v1199, v1192, v1193, v1194, v1195, v1196, v1197, v1198);
                    WTF::fastFree(v1251, v1252, v1253, v1254, v1255, v1256, v1257, v1258);
                  }
                  else
                  {
                    *(_DWORD *)v1199 -= 2;
                  }
                }
                v1259 = *(_QWORD *)v11 - 1;
                v52 = v1259 >> 6;
                if (v1259 >> 6 >= *(unsigned int *)(v11 + 20))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19886DC28);
                }
LABEL_2547:
                v28 = *(char *)v1189;
                if ((v28 & 0x80000000) != 0)
                  goto LABEL_2578;
                v1321 = *(_QWORD *)(v11 + 8);
                v1322 = 8 * (v1259 & 0x3F);
                *(_QWORD *)(StatusReg + 8 * *(unsigned __int8 *)v1189) = *(_QWORD *)(v1321 + 8 * v52) + v1322;
                v1191 = (uint64_t *)(*(_QWORD *)(v1321 + 8 * v52) + v1322);
              }
            }
            else
            {
              StatusReg = v11 + 1048;
              v1191 = *(uint64_t **)(v11 + 1048 + 8 * v1190);
              if (!v1191 || !WTF::equalInternal<unsigned char>(*v1191, *((_QWORD *)a1 + 1), a1[5]))
              {
                JSC::Identifier::fromString(v1188, v1189, v1187, a4, a5, a6, a7, a8, (rlim_t *)&v1358);
                WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1358);
                v1250 = v1358;
                v1358 = 0;
                if (v1250)
                {
                  if (*(_DWORD *)v1250 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v1250, v1243, v1244, v1245, v1246, v1247, v1248, v1249);
                    WTF::fastFree(v1313, v1314, v1315, v1316, v1317, v1318, v1319, v1320);
                  }
                  else
                  {
                    *(_DWORD *)v1250 -= 2;
                  }
                }
                v1259 = *(_QWORD *)v11 - 1;
                v52 = v1259 >> 6;
                if (v1259 >> 6 >= *(unsigned int *)(v11 + 20))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19886E090);
                }
                goto LABEL_2547;
              }
            }
          }
        }
        else
        {
          v1191 = (uint64_t *)(*(_QWORD *)(v1188 + 41952) + 8);
        }
        *((_WORD *)a1 + 88) = 0;
        v1323 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
        *((_QWORD *)a1 + 10) = v1323;
        if ((unint64_t)v1323 < *((_QWORD *)a1 + 12))
          *(_WORD *)v9 = *v1323;
        *(_QWORD *)(a2 + 8) = v1191;
        *(_BYTE *)(a2 + 16) = 8;
        v238 = 1;
        goto LABEL_1619;
      }
      v227 = (_WORD *)(v108 + 4);
      if ((unint64_t)v227 >= v109)
        v228 = 0;
      else
        v228 = (unsigned __int16)*v227;
      if ((v228 - 48) >= 0xA && (v228 | 0x20u) - 97 >= 6)
      {
        v762 = WTF::fastCompactMalloc((WTF *)0x20);
        v770 = v762;
        v771 = 0x2000000002;
        v772 = "No hexadecimal digits after '0x'";
        goto LABEL_1328;
      }
      *(_WORD *)v9 = 0;
      *stackaddr_np = (unint64_t)v227;
      if ((unint64_t)v227 >= v109)
      {
        LOWORD(v229) = 0;
      }
      else
      {
        LOWORD(v229) = *v227;
        *(_WORD *)v9 = *v227;
      }
      v230 = 0;
      v231 = -7;
      while (1)
      {
        v232 = v231;
        if ((unsigned __int16)v229 == 95)
        {
          if ((unint64_t)++v227 >= v109)
            v860 = 0;
          else
            v860 = (unsigned __int16)*v227;
          if ((v860 - 48) >= 0xA && (v860 | 0x20u) - 97 > 5)
          {
LABEL_2129:
            v238 = 0;
            v239 = (double *)v1356;
            *v1356 = 0;
            goto LABEL_375;
          }
          *(_WORD *)v9 = 0;
          if ((unint64_t)v227 >= v109)
          {
            v233 = 16 * v230;
            v234 = -48;
            goto LABEL_360;
          }
          LOWORD(v229) = *v227;
        }
        v233 = 16 * v230;
        if ((unsigned __int16)v229 > 0x40u)
          v234 = (v229 + 9) & 0xF;
        else
          v234 = v229 - 48;
LABEL_360:
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)++v227;
        if ((unint64_t)v227 >= v109)
        {
          v229 = 0;
        }
        else
        {
          v229 = (unsigned __int16)*v227;
          *(_WORD *)v9 = v229;
        }
        v230 = v233 + v234;
        v235 = (unsigned __int16)((v229 | 0x20) - 97) > 5u && (unsigned __int16)(v229 - 48) > 9u;
        if (!v235 || v229 == 95)
        {
          v231 = v232 + 1;
          if (v232)
            continue;
        }
        if (v232 && v229 != 110)
        {
          v237 = (double)v230;
LABEL_374:
          v238 = 0;
          v239 = (double *)v1356;
          *(double *)v1356 = v237;
          goto LABEL_375;
        }
        v729 = a1 + 2;
        if (v230 >> 29 >= 5)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, (v230 >> 28) + 87);
        }
        else
        {
          LOBYTE(v1363.rlim_cur) = (v230 >> 28) | 0x30;
          v730 = a1[5];
          if ((_DWORD)v730 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v730 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v730) = (v230 >> 28) | 0x30;
          ++a1[5];
        }
        v731 = 16 * v230;
        if (16 * v230 >= 0xA0000000)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, (HIBYTE(v230) & 0xF) + 87);
        }
        else
        {
          v732 = (v731 >> 28) | 0x30;
          LOBYTE(v1363.rlim_cur) = (v731 >> 28) | 0x30;
          v733 = a1[5];
          if ((_DWORD)v733 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v733 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v733) = v732;
          ++a1[5];
        }
        v734 = v230 << 8;
        if (v230 << 8 >= 0xA0000000)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, ((v230 >> 20) & 0xF) + 87);
        }
        else
        {
          v735 = (v734 >> 28) | 0x30;
          LOBYTE(v1363.rlim_cur) = (v734 >> 28) | 0x30;
          v736 = a1[5];
          if ((_DWORD)v736 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v736 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v736) = v735;
          ++a1[5];
        }
        v737 = v230 << 12;
        if (v230 << 12 >= 0xA0000000)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, (BYTE2(v230) & 0xF) + 87);
        }
        else
        {
          v738 = (v737 >> 28) | 0x30;
          LOBYTE(v1363.rlim_cur) = (v737 >> 28) | 0x30;
          v739 = a1[5];
          if ((_DWORD)v739 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v739 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v739) = v738;
          ++a1[5];
        }
        if (v230 << 16 >= 0xA0000000)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, ((unsigned __int16)v230 >> 12) + 87);
        }
        else
        {
          LOBYTE(v1363.rlim_cur) = ((unsigned __int16)v230 >> 12) | 0x30;
          v740 = a1[5];
          if ((_DWORD)v740 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v740 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v740) = ((unsigned __int16)v230 >> 12) | 0x30;
          ++a1[5];
        }
        v741 = v230 << 20;
        if (v230 << 20 >= 0xA0000000)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, (BYTE1(v230) & 0xF) + 87);
        }
        else
        {
          v742 = (v741 >> 28) | 0x30;
          LOBYTE(v1363.rlim_cur) = (v741 >> 28) | 0x30;
          v743 = a1[5];
          if ((_DWORD)v743 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v743 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v743) = v742;
          ++a1[5];
        }
        if (v230 << 24 >= 0xA0000000)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, (v230 >> 4) + 87);
        }
        else
        {
          LOBYTE(v1363.rlim_cur) = (v230 >> 4) | 0x30;
          v744 = a1[5];
          if ((_DWORD)v744 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v744 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v744) = (v230 >> 4) | 0x30;
          ++a1[5];
        }
        v745 = v234 & 0xF;
        if (v234 << 28 >= 0xA0000000)
        {
          JSC::Lexer<unsigned char>::record8((uint64_t)a1, v745 + 87);
        }
        else
        {
          v746 = v745 | 0x30;
          LOBYTE(v1363.rlim_cur) = v746;
          v747 = a1[5];
          if ((_DWORD)v747 == a1[4])
            *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 2), (WTF *)(v747 + 1), (unint64_t)&v1363);
          else
            *(_BYTE *)(*v729 + v747) = v746;
          ++a1[5];
        }
        v748 = *(unsigned __int16 *)v9;
        v749 = v748 == 95;
        if (v748 == 95 || (v748 - 48) < 0xA || (v748 | 0x20u) - 97 <= 5)
        {
          do
          {
            if (v749)
            {
              v970 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
              v971 = *((_QWORD *)a1 + 12);
              if ((unint64_t)v970 >= v971)
                v972 = 0;
              else
                v972 = (unsigned __int16)*v970;
              if ((v972 - 48) >= 0xA && (v972 | 0x20u) - 97 > 5)
                goto LABEL_2129;
              *(_WORD *)v9 = 0;
              *stackaddr_np = (unint64_t)v970;
              if ((unint64_t)v970 >= v971)
              {
                LOBYTE(v748) = 0;
              }
              else
              {
                LOWORD(v748) = *v970;
                *(_WORD *)v9 = *v970;
              }
            }
            JSC::Lexer<unsigned char>::record8((uint64_t)a1, v748);
            *((_WORD *)a1 + 88) = 0;
            v750 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
            *((_QWORD *)a1 + 10) = v750;
            if ((unint64_t)v750 >= *((_QWORD *)a1 + 12))
            {
              v748 = 0;
            }
            else
            {
              v748 = *v750;
              *(_WORD *)v9 = v748;
            }
            v749 = v748 == 95;
          }
          while (v748 == 95 || (v748 - 48) < 0xA || (v748 | 0x20u) - 97 < 6);
        }
        v751 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
        v752 = a1[5];
        if (v748 != 110)
        {
          v237 = JSC::parseIntOverflow(*((_QWORD *)a1 + 1), a1[5], 16);
          goto LABEL_374;
        }
        v983 = *((_QWORD *)a1 + 24);
        if ((_DWORD)v752)
        {
          v11 = *((_QWORD *)a1 + 23);
          if (*(char *)v751 < 0)
          {
            JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, &v1363.rlim_cur);
            WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1363);
            v1113 = (WTF::StringImpl *)v1363.rlim_cur;
            v1363.rlim_cur = 0;
            if (v1113)
            {
              if (*(_DWORD *)v1113 == 2)
              {
                WTF::StringImpl::~StringImpl(v1113, v1106, v1107, v1108, v1109, v1110, v1111, v1112);
                WTF::fastFree(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176);
              }
              else
              {
                *(_DWORD *)v1113 -= 2;
              }
            }
            v1177 = *(_QWORD *)v11 - 1;
            if (v1177 >> 6 >= *(unsigned int *)(v11 + 20))
            {
              __break(0xC471u);
              JUMPOUT(0x19886DB48);
            }
            v985 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * (v1177 >> 6)) + 8 * (v1177 & 0x3F));
          }
          else
          {
            v984 = *(unsigned __int8 *)v751;
            if ((_DWORD)v752 == 1)
            {
              StatusReg = v11 + 24;
              v985 = *(uint64_t **)(v11 + 24 + 8 * v984);
              if (!v985)
              {
                JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, a5, a6, a7, a8, &v1363.rlim_cur);
                WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1363);
                v993 = (WTF::StringImpl *)v1363.rlim_cur;
                v1363.rlim_cur = 0;
                if (v993)
                {
                  if (*(_DWORD *)v993 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v993, v986, v987, v988, v989, v990, v991, v992);
                    WTF::fastFree(v1037, v1038, v1039, v1040, v1041, v1042, v1043, v1044);
                  }
                  else
                  {
                    *(_DWORD *)v993 -= 2;
                  }
                }
                v994 = *(_QWORD *)v11 - 1;
                v52 = v994 >> 6;
                if (v994 >> 6 >= *(unsigned int *)(v11 + 20))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19886C178);
                }
                goto LABEL_2013;
              }
            }
            else
            {
              StatusReg = v11 + 1048;
              v985 = *(uint64_t **)(v11 + 1048 + 8 * v984);
              if (!v985 || !WTF::equalInternal<unsigned char>(*v985, *((_QWORD *)a1 + 1), a1[5]))
              {
                JSC::Identifier::fromString(v983, v751, v752, a4, a5, a6, a7, a8, &v1363.rlim_cur);
                WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v11, (uint64_t *)&v1363);
                v1002 = (WTF::StringImpl *)v1363.rlim_cur;
                v1363.rlim_cur = 0;
                if (v1002)
                {
                  if (*(_DWORD *)v1002 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v1002, v995, v996, v997, v998, v999, v1000, v1001);
                    WTF::fastFree(v1045, v1046, v1047, v1048, v1049, v1050, v1051, v1052);
                  }
                  else
                  {
                    *(_DWORD *)v1002 -= 2;
                  }
                }
                v994 = *(_QWORD *)v11 - 1;
                v52 = v994 >> 6;
                if (v994 >> 6 >= *(unsigned int *)(v11 + 20))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19886D200);
                }
LABEL_2013:
                v28 = *(char *)v751;
                if ((v28 & 0x80000000) != 0)
                  goto LABEL_2578;
                v1003 = *(_QWORD *)(v11 + 8);
                v1004 = 8 * (v994 & 0x3F);
                *(_QWORD *)(StatusReg + 8 * *(unsigned __int8 *)v751) = *(_QWORD *)(v1003 + 8 * v52) + v1004;
                v985 = (uint64_t *)(*(_QWORD *)(v1003 + 8 * v52) + v1004);
              }
            }
          }
        }
        else
        {
          v985 = (uint64_t *)(*(_QWORD *)(v983 + 41952) + 8);
        }
        *((_WORD *)a1 + 88) = 0;
        v1005 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
        *((_QWORD *)a1 + 10) = v1005;
        if ((unint64_t)v1005 < *((_QWORD *)a1 + 12))
          *(_WORD *)v9 = *v1005;
        *(_QWORD *)(a2 + 8) = v985;
        *(_BYTE *)(a2 + 16) = 16;
        v238 = 1;
        v239 = (double *)v1356;
LABEL_375:
        v240 = *(unsigned __int16 *)v9;
        if (v240 > 0xFF)
        {
          if (u_charType(*(unsigned __int16 *)v9) == 12 || (v240 - 8232) < 2 || (_DWORD)v240 == 65279)
            goto LABEL_378;
          LODWORD(v240) = *(unsigned __int16 *)v9;
        }
        else if (*(_WORD *)v9 != 92 && JSC::typesOfLatin1Characters[v240])
        {
LABEL_378:
          if ((v238 & 1) != 0)
            goto LABEL_1350;
          v241 = *v239;
LABEL_380:
          if (v241 == 0.0 && (*(_QWORD *)&v241 & 0x8000000000000000) != 0 || v241 != (double)(uint64_t)v241)
            v31 = 10;
          else
            v31 = 9;
LABEL_204:
          a1[5] = 0;
          goto LABEL_823;
        }
        if ((v240 & 0xF800) == 0xD800)
        {
          v774 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
          if ((unint64_t)v774 >= *((_QWORD *)a1 + 12))
            v775 = 0;
          else
            v775 = *v774;
          v776 = (v775 & 0x400) != 0 && (v240 & 0xFC00) == 55296;
          v777 = v775 + ((_DWORD)v240 << 10) - 56613888;
          if (v776)
            LODWORD(v240) = v777;
          else
            LODWORD(v240) = -1;
        }
        if (v240 <= 0xFF)
        {
          if (JSC::typesOfLatin1Characters[v240])
            goto LABEL_1348;
        }
        else if (!u_hasBinaryProperty(v240, UCHAR_ID_START))
        {
          goto LABEL_1348;
        }
        v762 = WTF::fastCompactMalloc((WTF *)0x20);
        v770 = v762;
        v771 = 0x3300000002;
        v772 = "No space between hexadecimal literal and identifier";
LABEL_1328:
        *(_QWORD *)v762 = v771;
        *(_QWORD *)(v762 + 8) = v772;
        *(_DWORD *)(v762 + 16) = 4;
        v773 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
        *((_QWORD *)a1 + 19) = v770;
        if (v773)
        {
          if (*(_DWORD *)v773 == 2)
          {
            WTF::StringImpl::~StringImpl(v773, v763, v764, v765, v766, v767, v768, v769);
            WTF::fastFree(v825, v826, v827, v828, v829, v830, v831, v832);
          }
          else
          {
            *(_DWORD *)v773 -= 2;
          }
        }
        v31 = 3145739;
        goto LABEL_1701;
      }
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
      goto LABEL_165;
    case 0x3A:
      *((_WORD *)a1 + 88) = 0;
      v46 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v46;
      if ((unint64_t)v46 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v46;
      v31 = 18;
      goto LABEL_823;
    case 0x3B:
      *((_WORD *)a1 + 88) = 0;
      v37 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v37;
      if ((unint64_t)v37 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v37;
      v31 = 17;
      goto LABEL_823;
    case 0x3C:
      v31 = 139264;
      *((_WORD *)a1 + 88) = 0;
      v198 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v198 + 1;
      v199 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v198 + 1) >= v199)
        goto LABEL_823;
      v200 = v198[1];
      *(_WORD *)v9 = v200;
      if (v200 == 61)
      {
        *(_WORD *)v9 = 0;
        v242 = v198 + 2;
        *stackaddr_np = (unint64_t)v242;
        v31 = 139266;
LABEL_386:
        if ((unint64_t)v242 < v199)
          *(_WORD *)v9 = *v242;
        goto LABEL_823;
      }
      if (v200 == 60)
      {
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)(v198 + 2);
        v31 = 156672;
        if ((unint64_t)(v198 + 2) < v199)
        {
          v306 = v198[2];
          *(_WORD *)v9 = v306;
          if (v306 == 61)
          {
            *(_WORD *)v9 = 0;
            v307 = v198 + 3;
            *stackaddr_np = (unint64_t)v307;
            if ((unint64_t)v307 < v199)
              *(_WORD *)v9 = *v307;
            v31 = 26;
          }
        }
        goto LABEL_823;
      }
      if (v200 != 33)
        goto LABEL_823;
      if ((unint64_t)(v198 + 2) >= v199)
        goto LABEL_823;
      if (v198[2] != 45)
        goto LABEL_823;
      v201 = v198 + 3;
      if ((unint64_t)v201 >= v199 || *v201 != 45 || a1[51])
        goto LABEL_823;
      goto LABEL_131;
    case 0x3D:
    case 0x120:
      v40 = (_WORD *)*((_QWORD *)a1 + 10);
      v41 = v40 + 1;
      v42 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v40 + 1) >= v42)
      {
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)v41;
      }
      else
      {
        if (*v41 == 62)
        {
          *(_DWORD *)(a2 + 8) = *a1;
          *(_DWORD *)(a2 + 12) = (*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 11)) >> 1;
          *(_DWORD *)(a2 + 16) = (*((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 11)) >> 1;
          v166 = *((_QWORD *)a1 + 10);
          v167 = *((_QWORD *)a1 + 12);
          *((_WORD *)a1 + 88) = 0;
          v168 = (_WORD *)(v166 + 4);
          *((_QWORD *)a1 + 10) = v168;
          if ((unint64_t)v168 < v167)
            *(_WORD *)v9 = *v168;
          v31 = 38;
          goto LABEL_823;
        }
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)v41;
        v43 = (unsigned __int16)v40[1];
        *(_WORD *)v9 = v43;
        v44 = v40 + 2;
        v45 = v40 + 3;
        if ((unint64_t)(v40 + 2) >= v42 || (unint64_t)(v40 + 3) >= v42)
        {
          if (v43 == 61)
          {
            v31 = 121856;
            *(_WORD *)v9 = 0;
            *stackaddr_np = (unint64_t)(v40 + 2);
            if ((unint64_t)(v40 + 2) >= v42)
              goto LABEL_823;
            v1014 = (unsigned __int16)v40[2];
            *(_WORD *)v9 = v1014;
            if (v1014 != 61)
              goto LABEL_823;
            *(_WORD *)v9 = 0;
            v48 = v40 + 3;
            *stackaddr_np = (unint64_t)v48;
            v31 = 121858;
LABEL_2138:
            if ((unint64_t)v48 < v42)
LABEL_84:
              *(_WORD *)v9 = *v48;
            goto LABEL_823;
          }
        }
        else if (v43 == 61)
        {
          v31 = 121856;
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)v44;
          v174 = *v44;
          *(_WORD *)v9 = v174;
          if (v174 == 61)
          {
            *(_WORD *)v9 = 0;
            *stackaddr_np = (unint64_t)v45;
            *(_WORD *)v9 = *v45;
            v31 = 121858;
          }
          goto LABEL_823;
        }
      }
      v31 = 21;
      goto LABEL_823;
    case 0x3E:
      v190 = 139264;
      *((_WORD *)a1 + 88) = 0;
      v207 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v207 + 1;
      v199 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v207 + 1) >= v199)
        goto LABEL_2140;
      v208 = v207[1];
      *(_WORD *)v9 = v208;
      if (v208 == 61)
      {
        *(_WORD *)v9 = 0;
        v242 = v207 + 2;
        *stackaddr_np = (unint64_t)v242;
        v31 = 139267;
        goto LABEL_386;
      }
      if (v208 != 62)
        goto LABEL_273;
      v31 = 156674;
      *(_WORD *)v9 = 0;
      *stackaddr_np = (unint64_t)(v207 + 2);
      if ((unint64_t)(v207 + 2) >= v199)
      {
        v31 = 156673;
        goto LABEL_823;
      }
      v209 = v207[2];
      *(_WORD *)v9 = v209;
      if (v209 != 62)
      {
        v31 = 156673;
        if (v209 == 61)
        {
          *(_WORD *)v9 = 0;
          v210 = v207 + 3;
          *stackaddr_np = (unint64_t)v210;
          if ((unint64_t)v210 < v199)
            *(_WORD *)v9 = *v210;
          v31 = 27;
        }
        goto LABEL_823;
      }
      *(_WORD *)v9 = 0;
      v318 = v207 + 3;
      *stackaddr_np = (unint64_t)(v207 + 3);
      v319 = (__int16 *)(v207 + 4);
      if ((unint64_t)(v207 + 3) >= v199 || (unint64_t)(v207 + 4) >= v199)
      {
        if ((unint64_t)(v207 + 3) >= v199)
          goto LABEL_823;
        v1088 = *v318;
        *(_WORD *)v9 = v1088;
        if (v1088 != 61)
          goto LABEL_823;
        *(_WORD *)v9 = 0;
        v1089 = (__int16 *)(v207 + 4);
        *stackaddr_np = (unint64_t)v1089;
        if ((unint64_t)v1089 >= v199)
        {
LABEL_515:
          v31 = 28;
          goto LABEL_823;
        }
        v321 = *v1089;
      }
      else
      {
        v320 = *v318;
        *(_WORD *)v9 = v320;
        if (v320 != 61)
          goto LABEL_823;
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)v319;
        v321 = *v319;
      }
      *(_WORD *)v9 = v321;
      goto LABEL_515;
    case 0x3F:
      *((_WORD *)a1 + 88) = 0;
      v185 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v185 + 1;
      v186 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v185 + 1) >= v186)
        goto LABEL_265;
      v187 = v185[1];
      *(_WORD *)v9 = v187;
      if (v187 == 46)
      {
        v310 = v185 + 2;
        if ((unint64_t)v310 >= v186)
        {
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)v310;
          v31 = 39;
          goto LABEL_823;
        }
        if ((unsigned __int16)*v310 - 48 >= 0xA)
        {
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)v310;
          *(_WORD *)v9 = *v310;
          v31 = 39;
          goto LABEL_823;
        }
LABEL_265:
        v31 = 7;
        goto LABEL_823;
      }
      if (v187 != 63)
        goto LABEL_265;
      *(_WORD *)v9 = 0;
      v338 = v185 + 2;
      *stackaddr_np = (unint64_t)(v185 + 2);
      v339 = (__int16 *)(v185 + 3);
      if ((unint64_t)(v185 + 2) >= v186 || (unint64_t)(v185 + 3) >= v186)
      {
        if ((unint64_t)(v185 + 2) >= v186)
          goto LABEL_524;
        v1090 = *v338;
        *(_WORD *)v9 = v1090;
        if (v1090 != 61)
          goto LABEL_524;
        *(_WORD *)v9 = 0;
        v1091 = (__int16 *)(v185 + 3);
        *stackaddr_np = (unint64_t)v1091;
        if ((unint64_t)v1091 >= v186)
        {
LABEL_1111:
          v31 = 34;
          goto LABEL_823;
        }
        v620 = *v1091;
      }
      else
      {
        v340 = *v338;
        *(_WORD *)v9 = v340;
        if (v340 != 61)
        {
LABEL_524:
          v31 = 17408;
          goto LABEL_823;
        }
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)v339;
        v620 = *v339;
      }
      *(_WORD *)v9 = v620;
      goto LABEL_1111;
    case 0x40:
    case 0x123:
      if (!*((_BYTE *)a1 + 200))
        goto LABEL_1680;
      goto LABEL_530;
    case 0x5B:
      *((_WORD *)a1 + 88) = 0;
      v103 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v103;
      if ((unint64_t)v103 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v103;
      v31 = 4;
      goto LABEL_823;
    case 0x5D:
      *((_WORD *)a1 + 88) = 0;
      v104 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v104;
      if ((unint64_t)v104 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v104;
      v31 = 5;
      goto LABEL_823;
    case 0x5E:
      v31 = 87040;
      *((_WORD *)a1 + 88) = 0;
      v300 = *((_QWORD *)a1 + 10);
      v301 = (unsigned __int16 *)(v300 + 2);
      *((_QWORD *)a1 + 10) = v300 + 2;
      v302 = *((_QWORD *)a1 + 12);
      v303 = (__int16 *)(v300 + 4);
      if (v300 + 2 >= v302 || v300 + 4 >= v302)
      {
        if (v300 + 2 >= v302)
          goto LABEL_823;
        v1086 = *v301;
        *(_WORD *)v9 = v1086;
        if (v1086 != 61)
          goto LABEL_823;
        *(_WORD *)v9 = 0;
        v1087 = (__int16 *)(v300 + 4);
        *stackaddr_np = (unint64_t)v1087;
        if ((unint64_t)v1087 >= v302)
        {
LABEL_480:
          v31 = 32;
          goto LABEL_823;
        }
        v305 = *v1087;
      }
      else
      {
        v304 = *v301;
        *(_WORD *)v9 = v304;
        if (v304 != 61)
          goto LABEL_823;
        *(_WORD *)v9 = 0;
        *stackaddr_np = (unint64_t)v303;
        v305 = *v303;
      }
      *(_WORD *)v9 = v305;
      goto LABEL_480;
    case 0x60:
      *((_WORD *)a1 + 88) = 0;
      v259 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v259;
      if ((unint64_t)v259 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v259;
      v31 = 8;
      goto LABEL_823;
    case 0x7B:
      *(_DWORD *)(a2 + 8) = *a1;
      *(_DWORD *)(a2 + 12) = (*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 11)) >> 1;
      *(_DWORD *)(a2 + 16) = (*((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 11)) >> 1;
      *((_WORD *)a1 + 88) = 0;
      v48 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v48;
      if ((unint64_t)v48 < *((_QWORD *)a1 + 12))
      {
        v31 = 0;
        goto LABEL_84;
      }
      v31 = 0;
      goto LABEL_823;
    case 0x7C:
      v31 = 69632;
      *((_WORD *)a1 + 88) = 0;
      v194 = (unsigned __int16 *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v194 + 1;
      v195 = *((_QWORD *)a1 + 12);
      if ((unint64_t)(v194 + 1) < v195)
      {
        v196 = v194[1];
        *(_WORD *)v9 = v196;
        if (v196 == 124)
        {
          *(_WORD *)v9 = 0;
          *stackaddr_np = (unint64_t)(v194 + 2);
          if ((unint64_t)(v194 + 2) < v195 && (v197 = v194[2], *(_WORD *)v9 = v197, v197 == 61))
          {
            *(_WORD *)v9 = 0;
            v753 = v194 + 3;
            *stackaddr_np = (unint64_t)v753;
            if ((unint64_t)v753 < v195)
              *(_WORD *)v9 = *v753;
            v31 = 35;
          }
          else
          {
            v31 = 34816;
          }
        }
        else if (v196 == 61)
        {
          *(_WORD *)v9 = 0;
          v292 = v194 + 2;
          *stackaddr_np = (unint64_t)v292;
          if ((unint64_t)v292 < v195)
            *(_WORD *)v9 = *v292;
          v31 = 33;
        }
      }
      goto LABEL_823;
    case 0x7D:
      *(_DWORD *)(a2 + 8) = *a1;
      *(_DWORD *)(a2 + 12) = (*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 11)) >> 1;
      *(_DWORD *)(a2 + 16) = (*((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 11)) >> 1;
      *((_WORD *)a1 + 88) = 0;
      v47 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v47;
      if ((unint64_t)v47 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v47;
      v31 = 1;
      goto LABEL_823;
    case 0x7E:
      *((_WORD *)a1 + 88) = 0;
      v595 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v595;
      if ((unint64_t)v595 < *((_QWORD *)a1 + 12))
        *(_WORD *)v9 = *v595;
      v31 = 261;
      goto LABEL_823;
    default:
      __break(0xC471u);
      JUMPOUT(0x19886AFB0);
  }
}

unsigned int *JSC::Lexer<char16_t>::shiftLineTerminator(unsigned int *result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  _WORD *v7;
  unint64_t v8;
  int v9;

  v1 = *result;
  v3 = *((_QWORD *)result + 10);
  v2 = *((_QWORD *)result + 11);
  v4 = (unint64_t)(v3 - v2) >> 1;
  v5 = (unint64_t)(*((_QWORD *)result + 14) - v2) >> 1;
  *((_QWORD *)result + 15) = *result | ((unint64_t)v4 << 32);
  result[32] = v5;
  v6 = *((unsigned __int16 *)result + 88);
  *((_WORD *)result + 88) = 0;
  v7 = (_WORD *)(v3 + 2);
  *((_QWORD *)result + 10) = v3 + 2;
  v8 = *((_QWORD *)result + 12);
  if (v3 + 2 < v8)
  {
    v9 = (unsigned __int16)*v7;
    *((_WORD *)result + 88) = v9;
    if (v6 == 13 && v9 == 10)
    {
      *((_WORD *)result + 88) = 0;
      v7 = (_WORD *)(v3 + 4);
      *((_QWORD *)result + 10) = v3 + 4;
      if (v3 + 4 < v8)
        *((_WORD *)result + 88) = *v7;
    }
  }
  *result = v1 + 1;
  *((_QWORD *)result + 14) = v7;
  return result;
}

uint64_t JSC::Lexer<char16_t>::scanRegExp(unsigned int *a1, uint64_t a2, int a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  unint64_t v18;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  _WORD *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  unint64_t v116;
  unint64_t v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unsigned __int16 *v172;
  int v173;
  BOOL v174;
  unsigned int v175;
  WTF::AtomStringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  int8x16_t *Range;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::AtomStringImpl *v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;

  if (a3)
    JSC::Lexer<char16_t>::record16((uint64_t)a1, a3);
  v10 = 0;
  v11 = 0;
LABEL_4:
  v12 = 0;
  while (1)
  {
    v13 = v12;
    v14 = *((unsigned __int16 *)a1 + 88);
    v15 = (_DWORD)v14 == 10 || (_DWORD)v14 == 13;
    if (v15 || (v14 & 0xFFFE) == 8232)
      break;
    v17 = *((_QWORD *)a1 + 10);
    v18 = *((_QWORD *)a1 + 12);
    if (!*((_WORD *)a1 + 88) && v17 == v18)
      break;
    *((_WORD *)a1 + 88) = 0;
    v20 = (_WORD *)(v17 + 2);
    *((_QWORD *)a1 + 10) = v20;
    if ((unint64_t)v20 < v18)
      *((_WORD *)a1 + 88) = *v20;
    if (!(((_DWORD)v14 != 47) | (v11 | v13) & 1))
    {
      v25 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 3);
      v11 = a1[9];
      v22 = *((_QWORD *)a1 + 23);
      v14 = *((_QWORD *)a1 + 24);
      if (v10 > 0xFF)
      {
        if ((_DWORD)v11)
        {
          v30 = *(unsigned __int16 *)v25;
          if (v30 < 0x80)
            goto LABEL_105;
          JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 3), a1[9], a4, (uint64_t)a5, a6, a7, a8, &v244);
          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v244);
          v115 = v244;
          v244 = 0;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
            {
              WTF::StringImpl::~StringImpl(v115, v113, v114, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
            }
            else
            {
              *(_DWORD *)v115 -= 2;
            }
          }
          v116 = *(_QWORD *)v22 - 1;
          v117 = v116 >> 6;
          if (v116 >> 6 >= *(unsigned int *)(v22 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x19886F070);
          }
          goto LABEL_103;
        }
      }
      else if ((_DWORD)v11)
      {
        v46 = *(unsigned __int16 *)v25;
        if (v46 < 0x80)
        {
          if ((_DWORD)v11 == 1)
          {
            v47 = v22 + 24;
            v48 = *(uint64_t **)(v22 + 24 + 8 * v46);
            if (!v48)
            {
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 3), a1[9], a4, (uint64_t)a5, a6, a7, a8, &v244);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v244);
              v79 = v244;
              v244 = 0;
              if (v79)
              {
                if (*(_DWORD *)v79 == 2)
                {
                  WTF::StringImpl::~StringImpl(v79, v77, v78, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
                }
                else
                {
                  *(_DWORD *)v79 -= 2;
                }
              }
              v52 = *(_QWORD *)v22 - 1;
              v30 = v52 >> 6;
              if (v52 >> 6 >= *(unsigned int *)(v22 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x19886EB0CLL);
              }
              goto LABEL_54;
            }
          }
          else
          {
            v47 = v22 + 1048;
            v48 = *(uint64_t **)(v22 + 1048 + 8 * v46);
            if (!v48 || !WTF::equalInternal<char16_t>(*v48, *((_QWORD *)a1 + 3), a1[9]))
            {
              JSC::Identifier::add8(v14, v25, v11, a4, (uint64_t)a5, a6, a7, a8, (unint64_t *)&v244);
              v243 = v244;
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v243);
              v51 = v243;
              v243 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                {
                  WTF::StringImpl::~StringImpl(v51, v49, v50, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
                }
                else
                {
                  *(_DWORD *)v51 -= 2;
                }
              }
              v52 = *(_QWORD *)v22 - 1;
              v30 = v52 >> 6;
              if (v52 >> 6 >= *(unsigned int *)(v22 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x19886F060);
              }
              goto LABEL_54;
            }
          }
          while (1)
          {
LABEL_56:
            *(_QWORD *)(a2 + 8) = v48;
            a1[9] = 0;
            v56 = *((unsigned __int16 *)a1 + 88);
            if (v56 > 0xFF)
            {
LABEL_63:
              if (u_charType(v56) != 12 && v56 != 65279)
              {
                v165 = *((unsigned __int16 *)a1 + 88);
                if (v165 != 10 && v165 != 13 && (v165 & 0xFFFE) != 0x2028)
                {
                  v22 = 1048594;
                  a1[5] = 0;
                  v166 = *a1;
                  v167 = *((_QWORD *)a1 + 11);
                  v168 = (unint64_t)(*((_QWORD *)a1 + 10) - v167) >> 1;
                  v169 = (unint64_t)(*((_QWORD *)a1 + 14) - v167) >> 1;
                  v170 = *a1 | ((unint64_t)v168 << 32);
                  *(_DWORD *)(a2 + 44) = v168;
                  *(_DWORD *)(a2 + 32) = v166;
                  *(_DWORD *)(a2 + 36) = v169;
                  *(_QWORD *)(a2 + 60) = v170;
                  *(_DWORD *)(a2 + 68) = v169;
                  a1[15] = 1048594;
                  *((_BYTE *)a1 + 150) = 1;
                  v171 = *((unsigned __int16 *)a1 + 88);
                  if ((v171 & 0xF800) == 0xD800)
                  {
                    v172 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                    if ((unint64_t)v172 >= *((_QWORD *)a1 + 12))
                      v173 = 0;
                    else
                      v173 = *v172;
                    v174 = (v173 & 0x400) != 0 && (v171 & 0xFC00) == 55296;
                    v175 = v173 + ((_DWORD)v171 << 10) - 56613888;
                    if (v174)
                      v171 = v175;
                    else
                      v171 = 0xFFFFFFFFLL;
                  }
                  WTF::String::fromCodePoint((_WORD *)v171, (uint64_t *)&v244);
                  if (!v244)
                  {
                    v183 = WTF::fastCompactMalloc((WTF *)0x20);
                    *(_QWORD *)v183 = 0x1B00000002;
                    *(_DWORD *)(v183 + 16) = 4;
                    v184 = v244;
                    v244 = (WTF::StringImpl *)v183;
                    if (v184)
                    {
                      if (*(_DWORD *)v184 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v184, v176, v177, v178, v179, v180, v181, v182);
                        WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
                      }
                      else
                      {
                        *(_DWORD *)v184 -= 2;
                      }
                    }
                  }
                  Range = (int8x16_t *)JSC::SourceProvider::getRange(**((JSC::SourceProvider ***)a1 + 8), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 44));
                  v187 = v244;
                  if (v244)
                    *(_DWORD *)v244 += 2;
                  v242 = v187;
                  WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::String,char>((uint64_t)"Invalid non-latin character in RexExp literal's flags '", 56, Range, v185, (uint64_t *)&v242, 39, (int **)&v243);
                  v188 = v243;
                  v243 = 0;
                  v189 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
                  *((_QWORD *)a1 + 19) = v188;
                  if (v189)
                  {
                    if (*(_DWORD *)v189 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v189, v35, v36, v37, v38, v39, v40, v41);
                      WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
                      v225 = v243;
                      v243 = 0;
                      if (v225)
                      {
                        if (*(_DWORD *)v225 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v225, v35, v36, v37, v38, v39, v40, v41);
                          WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
                        }
                        else
                        {
                          *(_DWORD *)v225 -= 2;
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)v189 -= 2;
                      v243 = 0;
                    }
                  }
                  v43 = v242;
                  v242 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 != 2)
                    {
                      *(_DWORD *)v43 -= 2;
                      goto LABEL_157;
                    }
LABEL_156:
                    WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
                    WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
                  }
LABEL_157:
                  v43 = v244;
                  v244 = 0;
                  if (v43)
                  {
                    v44 = *(_DWORD *)v43 - 2;
                    if (*(_DWORD *)v43 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
                      WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
                      return v22;
                    }
LABEL_42:
                    *(_DWORD *)v43 = v44;
                  }
                  return v22;
                }
              }
            }
            else
            {
              while (JSC::typesOfLatin1Characters[v56] <= 3u)
              {
                v57 = a1 + 2;
                LOBYTE(v244) = v56;
                v58 = a1[5];
                if ((_DWORD)v58 == a1[4])
                  *(_BYTE *)(*((_QWORD *)a1 + 1) + a1[5]) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, (WTF *)(v58 + 1), (unint64_t)&v244);
                else
                  *(_BYTE *)(*v57 + v58) = v56;
                ++a1[5];
                *((_WORD *)a1 + 88) = 0;
                v59 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
                *((_QWORD *)a1 + 10) = v59;
                if ((unint64_t)v59 >= *((_QWORD *)a1 + 12))
                {
                  v56 = 0u;
                }
                else
                {
                  v56 = *v59;
                  *((_WORD *)a1 + 88) = v56;
                }
                if (v56 >= 0x100)
                  goto LABEL_63;
              }
            }
            v11 = a1[5];
            v14 = *((_QWORD *)a1 + 24);
            if (!(_DWORD)v11)
            {
              v62 = (uint64_t *)(*(_QWORD *)(v14 + 41952) + 8);
              goto LABEL_83;
            }
            v25 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 1);
            v22 = *((_QWORD *)a1 + 23);
            if (*(char *)v25 < 0)
            {
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, (uint64_t)a5, a6, a7, a8, (rlim_t *)&v244);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v244);
              v128 = v244;
              v244 = 0;
              if (v128)
              {
                if (*(_DWORD *)v128 == 2)
                {
                  WTF::StringImpl::~StringImpl(v128, v121, v122, v123, v124, v125, v126, v127);
                  WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
                }
                else
                {
                  *(_DWORD *)v128 -= 2;
                }
              }
              v129 = *(_QWORD *)v22 - 1;
              if (v129 >> 6 >= *(unsigned int *)(v22 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x19886F078);
              }
              v62 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * (v129 >> 6)) + 8 * (v129 & 0x3F));
              goto LABEL_83;
            }
            v60 = *(unsigned __int8 *)v25;
            if ((_DWORD)v11 == 1)
            {
              v61 = v22 + 24;
              v62 = *(uint64_t **)(v22 + 24 + 8 * v60);
              if (v62)
                goto LABEL_83;
              JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 1), a1[5], a4, (uint64_t)a5, a6, a7, a8, (rlim_t *)&v244);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v244);
              v65 = v244;
              v244 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                {
                  WTF::StringImpl::~StringImpl(v65, v63, v64, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
                }
                else
                {
                  *(_DWORD *)v65 -= 2;
                }
              }
              v66 = *(_QWORD *)v22 - 1;
              v30 = v66 >> 6;
              if (v66 >> 6 >= *(unsigned int *)(v22 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x19886E9A8);
              }
            }
            else
            {
              v61 = v22 + 1048;
              v62 = *(uint64_t **)(v22 + 1048 + 8 * v60);
              if (v62 && WTF::equalInternal<unsigned char>(*v62, *((_QWORD *)a1 + 1), a1[5]))
                goto LABEL_83;
              JSC::Identifier::fromString(v14, v25, v11, a4, (uint64_t)a5, a6, a7, a8, (rlim_t *)&v244);
              WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v244);
              v69 = v244;
              v244 = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                {
                  WTF::StringImpl::~StringImpl(v69, v67, v68, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
                }
                else
                {
                  *(_DWORD *)v69 -= 2;
                }
              }
              v66 = *(_QWORD *)v22 - 1;
              v30 = v66 >> 6;
              if (v66 >> 6 >= *(unsigned int *)(v22 + 20))
              {
                __break(0xC471u);
                JUMPOUT(0x19886F068);
              }
            }
            if ((*(char *)v25 & 0x80000000) == 0)
            {
              v70 = *(_QWORD *)(v22 + 8);
              v71 = 8 * (v66 & 0x3F);
              *(_QWORD *)(v61 + 8 * *(unsigned __int8 *)v25) = *(_QWORD *)(v70 + 8 * v30) + v71;
              v62 = (uint64_t *)(*(_QWORD *)(v70 + 8 * v30) + v71);
LABEL_83:
              *(_QWORD *)(a2 + 16) = v62;
              a1[5] = 0;
              *((_BYTE *)a1 + 149) = 0;
              v72 = *a1;
              v73 = *((_QWORD *)a1 + 11);
              v74 = (unint64_t)(*((_QWORD *)a1 + 10) - v73) >> 1;
              v75 = (unint64_t)(*((_QWORD *)a1 + 14) - v73) >> 1;
              v76 = *a1 | ((unint64_t)v74 << 32);
              *(_DWORD *)(a2 + 44) = v74;
              *(_DWORD *)(a2 + 32) = v72;
              *(_DWORD *)(a2 + 36) = v75;
              *(_QWORD *)(a2 + 60) = v76;
              *(_DWORD *)(a2 + 68) = v75;
              v22 = 16;
              a1[15] = 16;
              return v22;
            }
            do
            {
LABEL_104:
              __break(1u);
LABEL_105:
              if ((_DWORD)v11 == 1)
              {
                v47 = v22 + 24;
                v48 = *(uint64_t **)(v22 + 24 + 8 * v30);
                if (v48)
                  goto LABEL_56;
                JSC::Identifier::fromString(v14, v25, v11, a4, (uint64_t)a5, a6, a7, a8, &v244);
                WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v244);
                v132 = v244;
                v244 = 0;
                if (v132)
                {
                  if (*(_DWORD *)v132 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v132, v130, v131, a4, (uint64_t)a5, a6, a7, a8);
                    WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                  }
                  else
                  {
                    *(_DWORD *)v132 -= 2;
                  }
                }
                v52 = *(_QWORD *)v22 - 1;
                v30 = v52 >> 6;
                if (v52 >> 6 >= *(unsigned int *)(v22 + 20))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19886ED68);
                }
              }
              else
              {
                v47 = v22 + 1048;
                v48 = *(uint64_t **)(v22 + 1048 + 8 * v30);
                if (v48 && WTF::equalInternal<char16_t>(*v48, (unint64_t)v25, v11))
                  goto LABEL_56;
                JSC::Identifier::fromString(v14, v25, v11, a4, (uint64_t)a5, a6, a7, a8, &v244);
                WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v244);
                v120 = v244;
                v244 = 0;
                if (v120)
                {
                  if (*(_DWORD *)v120 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v120, v118, v119, a4, (uint64_t)a5, a6, a7, a8);
                    WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
                  }
                  else
                  {
                    *(_DWORD *)v120 -= 2;
                  }
                }
                v52 = *(_QWORD *)v22 - 1;
                v30 = v52 >> 6;
                if (v52 >> 6 >= *(unsigned int *)(v22 + 20))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19886EC80);
                }
              }
LABEL_54:
              v53 = *(unsigned __int16 *)v25;
            }
            while (v53 >= 0x80);
            v54 = *(_QWORD *)(v22 + 8);
            v55 = 8 * (v52 & 0x3F);
            *(_QWORD *)(v47 + 8 * v53) = *(_QWORD *)(v54 + 8 * v30) + v55;
            v48 = (uint64_t *)(*(_QWORD *)(v54 + 8 * v30) + v55);
          }
        }
        JSC::Identifier::add8(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 3), a1[9], a4, (uint64_t)a5, a6, a7, a8, (unint64_t *)&v244);
        v243 = v244;
        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v22, (uint64_t *)&v243);
        v208 = v243;
        v243 = 0;
        if (v208)
        {
          if (*(_DWORD *)v208 == 2)
          {
            WTF::StringImpl::~StringImpl(v208, v206, v207, a4, (uint64_t)a5, a6, a7, a8);
            WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
          }
          else
          {
            *(_DWORD *)v208 -= 2;
          }
        }
        v116 = *(_QWORD *)v22 - 1;
        v117 = v116 >> 6;
        if (v116 >> 6 >= *(unsigned int *)(v22 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19886F000);
        }
LABEL_103:
        v48 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v117) + 8 * (v116 & 0x3F));
        goto LABEL_56;
      }
      v48 = (uint64_t *)(*(_QWORD *)(v14 + 41952) + 8);
      goto LABEL_56;
    }
    LOWORD(v244) = v14;
    v21 = a1[9];
    if ((_DWORD)v21 == a1[8])
    {
      v80 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(a1 + 6), v21 + 1, (unint64_t)&v244);
      v21 = a1[9];
      *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v21) = *v80;
    }
    else
    {
      *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v21) = v14;
    }
    v12 = 0;
    a1[9] = v21 + 1;
    v10 |= v14;
    if ((v13 & 1) == 0)
    {
      if ((_DWORD)v14 == 92)
      {
        v12 = 1;
      }
      else
      {
        if ((_DWORD)v14 == 91)
        {
          v11 = 1;
          goto LABEL_4;
        }
        v12 = 0;
        if ((_DWORD)v14 == 93)
        {
          v11 = 0;
          goto LABEL_4;
        }
      }
    }
  }
  v22 = 3145742;
  a1[9] = 0;
  v23 = *a1;
  v24 = *((_QWORD *)a1 + 11);
  v25 = (WTF::AtomStringImpl *)((unint64_t)(*((_QWORD *)a1 + 10) - v24) >> 1);
  v26 = (unint64_t)(*((_QWORD *)a1 + 14) - v24) >> 1;
  v27 = *a1 | ((unint64_t)v25 << 32);
  *(_DWORD *)(a2 + 44) = (_DWORD)v25;
  *(_DWORD *)(a2 + 32) = v23;
  *(_DWORD *)(a2 + 36) = v26;
  *(_QWORD *)(a2 + 60) = v27;
  *(_DWORD *)(a2 + 68) = v26;
  a1[15] = 3145742;
  *((_BYTE *)a1 + 150) = 1;
  a2 = *(unsigned int *)(a2 + 40);
  v28 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)a1 + 8) + 24))(**((_QWORD **)a1 + 8));
  if (v29 <= a2)
  {
    LODWORD(v30) = 0;
    v32 = 0x100000000;
    a5 = "";
  }
  else
  {
    a5 = (char *)v28;
    LODWORD(v30) = (_DWORD)v25 - a2;
    if ((int)v29 - (int)a2 > ((_DWORD)v25 - a2) || (LODWORD(v30) = v29 - a2, (_DWORD)a2))
    {
      v30 = v30;
      v31 = v29 - a2;
      if ((v29 & 0xFF00000000) != 0)
      {
        if (v31 < v30)
          goto LABEL_104;
        a5 = (char *)(v28 + a2);
        v30 = v30 | 0x100000000;
      }
      else
      {
        if (v31 < v30)
          goto LABEL_104;
        a5 = (char *)(v28 + 2 * a2);
      }
    }
    else
    {
      v30 = v29;
    }
    v32 = v30;
    if ((v30 & 0x80000000) != 0)
      goto LABEL_169;
  }
  v33 = __OFADD__((_DWORD)v30, 1);
  v34 = v30 + 1;
  if (v33 || __OFADD__(v34, 41))
  {
LABEL_169:
    v244 = 0;
    goto LABEL_170;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>((v34 + 41), (v32 & 0xFF00000000) != 0, (int8x16_t *)"Unterminated regular expression literal '", 0x29u, a5, v32, 39, (int **)&v244);
  v42 = v244;
  if (!v244)
  {
LABEL_170:
    __break(0xC471u);
    JUMPOUT(0x19886F040);
  }
  v244 = 0;
  v43 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
  *((_QWORD *)a1 + 19) = v42;
  if (v43)
  {
    v44 = *(_DWORD *)v43 - 2;
    if (*(_DWORD *)v43 == 2)
      goto LABEL_156;
    goto LABEL_42;
  }
  return v22;
}

_WORD *JSC::Lexer<char16_t>::record16(uint64_t a1, __int16 a2)
{
  _WORD *result;
  uint64_t v4;
  __int16 v5;

  v5 = a2;
  result = (_WORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 32))
  {
    result = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(a1 + 36);
    *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v4) = *result;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)result + 2 * v4) = a2;
  }
  *(_DWORD *)(a1 + 36) = v4 + 1;
  return result;
}

{
  _WORD *result;
  uint64_t v4;
  __int16 v5;

  result = (_WORD *)(a1 + 24);
  v5 = a2;
  v4 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 32))
  {
    result = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(a1 + 36);
    *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v4) = *result;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)result + 2 * v4) = a2;
  }
  *(_DWORD *)(a1 + 36) = v4 + 1;
  return result;
}

uint64_t JSC::Lexer<char16_t>::scanTemplateString(unsigned int *a1, WTF::AtomStringImpl *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  void **v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  _WORD *v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  void **v113;
  int64_t v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  void **v120;
  size_t v121;
  unint64_t v122;
  unint64_t v123;
  void **v124;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  _WORD *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  unsigned int v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  void *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  int64_t v179;
  unint64_t v180;
  _WORD *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  void *v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  void **v193;
  _WORD *v194;
  uint64_t v195;
  WTF::AtomStringImpl *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  WTF::StringImpl *v206;
  _WORD *v207;
  void **v208;
  _WORD *v209;
  unsigned int v210;
  _WORD *v211;
  int v212;
  unsigned int v213;
  char v214;
  char v215;
  unsigned __int8 v216;
  _WORD *v217;
  int v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  const char *v231;
  WTF::StringImpl *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  void *v242;
  void *v243;
  void *__src;
  void *__srca;
  void *__srcb;
  void **v247;
  void **v248;
  void **v249;
  _QWORD *v250;
  uint64_t v251;
  unint64_t v252;
  unsigned int v253;
  WTF::StringImpl *v255;

  v8 = a2;
  LOBYTE(v10) = 0;
  v11 = *((_QWORD *)a1 + 14);
  v253 = *a1;
  v12 = *((_QWORD *)a1 + 10);
  v251 = *((_QWORD *)a1 + 11);
  v252 = v11;
  v13 = a1 + 10;
  v14 = (void **)(a1 + 6);
  v15 = (int64_t)JSC::singleCharacterEscapeValuesForASCII;
  LODWORD(v16) = 16370;
LABEL_2:
  v17 = v12;
  while (1)
  {
    v18 = *((unsigned __int16 *)a1 + 88);
    while ((unsigned __int16)v18 == 36)
    {
      v20 = *((_QWORD *)a1 + 10);
      if (v20 + 2 < *((_QWORD *)a1 + 12) && *(_WORD *)(v20 + 2) == 123)
        goto LABEL_12;
LABEL_8:
      v18 = 0;
      *((_WORD *)a1 + 88) = 0;
      v19 = (unsigned __int16 *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v19;
      v11 = *((_QWORD *)a1 + 12);
      if ((unint64_t)v19 < v11)
      {
        v18 = *v19;
        *((_WORD *)a1 + 88) = v18;
      }
    }
    if ((unsigned __int16)v18 == 96)
    {
      v20 = *((_QWORD *)a1 + 10);
LABEL_12:
      v11 = (unsigned __int16)v18 == 96;
      v16 = v20 - v17;
      if (v20 != v17)
      {
        if (v16 > -2)
        {
          v21 = a1[8];
          v22 = a1[9];
          v23 = v22 + (v16 >> 1);
          if (v23 > v21)
          {
            v137 = v21 + (v21 >> 2);
            if (v137 >= 0x10)
              v138 = v137 + 1;
            else
              v138 = 16;
            if (v138 <= v23)
              v139 = v22 + (v16 >> 1);
            else
              v139 = v138;
            if (v139 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198870020);
            }
            __src = *v14;
            v247 = v14;
            v241 = v139;
            v140 = (void *)WTF::fastMalloc((WTF *)(2 * v139));
            a1[8] = v241;
            *((_QWORD *)a1 + 3) = v140;
            memcpy(v140, __src, 2 * v22);
            if (__src)
            {
              if (*v247 == __src)
              {
                *((_QWORD *)a1 + 3) = 0;
                a1[8] = 0;
              }
              WTF::fastFree((unint64_t)__src, v141, v142, v143, v144, v145, v146, v147);
            }
          }
          v24 = a1[9];
          if (v23 < v24)
          {
            __break(0xC471u);
            JUMPOUT(0x19886FFA0);
          }
          memcpy((void *)(*((_QWORD *)a1 + 3) + 2 * v24), (const void *)v17, v16);
          a1[9] = v23;
          v17 = *((_QWORD *)a1 + 10);
          goto LABEL_17;
        }
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
LABEL_17:
      v20 = a3;
      if (!a3 && v12 != v17)
      {
        v15 = v17 - v12;
        if ((uint64_t)(v17 - v12) <= -2)
          goto LABEL_138;
        v70 = a1[13];
        v71 = v70 + (v15 >> 1);
        if (v71 > a1[12])
        {
          WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v70 + (v15 >> 1));
          v70 = a1[13];
        }
        if (v71 < v70)
        {
          __break(0xC471u);
          JUMPOUT(0x19886FFC8);
        }
        memcpy((void *)(*((_QWORD *)a1 + 5) + 2 * v70), (const void *)v12, v15);
        a1[13] = v71;
      }
      if ((v10 & 1) != 0)
      {
        v30 = 0;
        goto LABEL_27;
      }
      v12 = a1[9];
      v17 = *((_QWORD *)a1 + 24);
      if (!(_DWORD)v12)
      {
        v30 = (uint64_t *)(*(_QWORD *)(v17 + 41952) + 8);
        goto LABEL_27;
      }
      v15 = *((_QWORD *)a1 + 3);
      v10 = *((_QWORD *)a1 + 23);
      v25 = *(unsigned __int16 *)v15;
      if (v25 < 0x80)
      {
        if ((_DWORD)v12 == 1)
        {
          v16 = v10 + 24;
          v30 = *(uint64_t **)(v10 + 24 + 8 * v25);
          if (v30)
            goto LABEL_27;
          JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 3), a1[9], a4, a5, a6, a7, a8, &v255);
          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v10, (uint64_t *)&v255);
          v61 = v255;
          v255 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
            {
              WTF::StringImpl::~StringImpl(v61, a2, v60, a4, a5, a6, a7, a8);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
            else
            {
              *(_DWORD *)v61 -= 2;
            }
          }
          v11 = *(_QWORD *)v10 - 1;
          v20 = v11 >> 6;
          if (v11 >> 6 >= *(unsigned int *)(v10 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x19886F528);
          }
        }
        else
        {
          v16 = v10 + 1048;
          v30 = *(uint64_t **)(v10 + 1048 + 8 * v25);
          if (v30 && WTF::equalInternal<char16_t>(*v30, *((_QWORD *)a1 + 3), a1[9]))
            goto LABEL_27;
          JSC::Identifier::fromString(v17, (WTF::AtomStringImpl *)v15, v12, a4, a5, a6, a7, a8, &v255);
          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v10, (uint64_t *)&v255);
          v45 = v255;
          v255 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
            {
              WTF::StringImpl::~StringImpl(v45, a2, v44, a4, a5, a6, a7, a8);
              WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
            }
            else
            {
              *(_DWORD *)v45 -= 2;
            }
          }
          v11 = *(_QWORD *)v10 - 1;
          v20 = v11 >> 6;
          if (v11 >> 6 >= *(unsigned int *)(v10 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x19886FFC0);
          }
        }
        v46 = *(unsigned __int16 *)v15;
        if (v46 >= 0x80)
          goto LABEL_138;
        v47 = *(_QWORD *)(v10 + 8);
        v48 = 8 * (v11 & 0x3F);
        *(_QWORD *)(v16 + 8 * v46) = *(_QWORD *)(v47 + 8 * v20) + v48;
        v30 = (uint64_t *)(*(_QWORD *)(v47 + 8 * v20) + v48);
      }
      else
      {
        JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 3), a1[9], a4, a5, a6, a7, a8, &v255);
        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v10, (uint64_t *)&v255);
        v28 = v255;
        v255 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::~StringImpl(v28, v26, v27, a4, a5, a6, a7, a8);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          }
          else
          {
            *(_DWORD *)v28 -= 2;
          }
        }
        v29 = *(_QWORD *)v10 - 1;
        if (v29 >> 6 >= *(unsigned int *)(v10 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19886FFA8);
        }
        v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * (v29 >> 6)) + 8 * (v29 & 0x3F));
      }
LABEL_27:
      *((_QWORD *)v8 + 1) = v30;
      if (a3)
      {
        v16 = 0;
        goto LABEL_29;
      }
      v15 = a1[13];
      v12 = *((_QWORD *)a1 + 24);
      if (!(_DWORD)v15)
      {
        v16 = *(_QWORD *)(v12 + 41952) + 8;
        goto LABEL_29;
      }
      v10 = *((_QWORD *)a1 + 5);
      v49 = *((_QWORD *)a1 + 23);
      v50 = *(unsigned __int16 *)v10;
      if (v50 >= 0x80)
      {
        JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 5), a1[13], a4, a5, a6, a7, a8, &v255);
        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v49, (uint64_t *)&v255);
        v58 = v255;
        v255 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
          {
            WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v58 -= 2;
          }
        }
        v59 = *(_QWORD *)v49 - 1;
        if (v59 >> 6 >= *(unsigned int *)(v49 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19886FFD0);
        }
        v16 = *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * (v59 >> 6)) + 8 * (v59 & 0x3F);
        goto LABEL_29;
      }
      if ((_DWORD)v15 == 1)
      {
        v17 = v49 + 24;
        v16 = *(_QWORD *)(v49 + 24 + 8 * v50);
        if (v16)
          goto LABEL_29;
        JSC::Identifier::fromString(*((_QWORD *)a1 + 24), *((WTF::AtomStringImpl **)a1 + 5), a1[13], a4, a5, a6, a7, a8, &v255);
        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v49, (uint64_t *)&v255);
        v99 = v255;
        v255 = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
          {
            WTF::StringImpl::~StringImpl(v99, a2, v93, v94, v95, v96, v97, v98);
            WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
          }
          else
          {
            *(_DWORD *)v99 -= 2;
          }
        }
        v11 = *(_QWORD *)v49 - 1;
        v20 = v11 >> 6;
        if (v11 >> 6 >= *(unsigned int *)(v49 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19886F75CLL);
        }
LABEL_73:
        v79 = *(unsigned __int16 *)v10;
        if (v79 >= 0x80)
          goto LABEL_138;
        v80 = *(_QWORD *)(v49 + 8);
        v81 = 8 * (v11 & 0x3F);
        *(_QWORD *)(v17 + 8 * v79) = *(_QWORD *)(v80 + 8 * v20) + v81;
        v16 = *(_QWORD *)(v80 + 8 * v20) + v81;
      }
      else
      {
        v17 = v49 + 1048;
        v16 = *(_QWORD *)(v49 + 1048 + 8 * v50);
        if (!v16 || !WTF::equalInternal<char16_t>(*(_QWORD *)v16, *((_QWORD *)a1 + 5), a1[13]))
        {
          JSC::Identifier::fromString(v12, (WTF::AtomStringImpl *)v10, v15, a4, a5, a6, a7, a8, &v255);
          WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v49, (uint64_t *)&v255);
          v78 = v255;
          v255 = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
            {
              WTF::StringImpl::~StringImpl(v78, a2, v72, v73, v74, v75, v76, v77);
              WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
            }
            else
            {
              *(_DWORD *)v78 -= 2;
            }
          }
          v11 = *(_QWORD *)v49 - 1;
          v20 = v11 >> 6;
          if (v11 >> 6 >= *(unsigned int *)(v49 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x19886FFE0);
          }
          goto LABEL_73;
        }
      }
LABEL_29:
      *((_QWORD *)v8 + 2) = v16;
      *((_BYTE *)v8 + 24) = (unsigned __int16)v18 == 96;
      a1[9] = 0;
      a1[13] = 0;
      *((_WORD *)a1 + 88) = 0;
      v31 = *((_QWORD *)a1 + 10);
      if ((unsigned __int16)v18 == 96)
      {
        v33 = (_WORD *)(v31 + 2);
        *((_QWORD *)a1 + 10) = v33;
        v32 = *((_QWORD *)a1 + 12);
      }
      else
      {
        v32 = *((_QWORD *)a1 + 12);
        v33 = (_WORD *)(v31 + 4);
        *((_QWORD *)a1 + 10) = v33;
      }
      v34 = v253;
      v36 = v251;
      v35 = v252;
      if ((unint64_t)v33 < v32)
        *((_WORD *)a1 + 88) = *v33;
      v37 = 15;
      goto LABEL_34;
    }
    if ((unsigned __int16)v18 == 92)
    {
      v20 = *((_QWORD *)a1 + 10);
      if (v17 != v20)
      {
        v108 = v20 - v17;
        if ((uint64_t)(v20 - v17) <= -2)
          goto LABEL_138;
        v109 = a1[8];
        v110 = a1[9];
        v111 = v110 + (v108 >> 1);
        if (v111 > v109)
        {
          __srca = (void *)v108;
          v248 = v14;
          v168 = v109 + (v109 >> 2);
          if (v168 >= 0x10)
            v169 = v168 + 1;
          else
            v169 = 16;
          if (v169 <= v111)
            v170 = v110 + (v108 >> 1);
          else
            v170 = v169;
          if (v170 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x19886FF7CLL);
          }
          v242 = *v14;
          v171 = (void *)WTF::fastMalloc((WTF *)(2 * v170));
          a1[8] = v170;
          *((_QWORD *)a1 + 3) = v171;
          memcpy(v171, v242, 2 * v110);
          v14 = v248;
          v15 = (int64_t)JSC::singleCharacterEscapeValuesForASCII;
          v108 = (int64_t)__srca;
          if (v242)
          {
            if (*v248 == v242)
            {
              *((_QWORD *)a1 + 3) = 0;
              a1[8] = 0;
            }
            WTF::fastFree((unint64_t)v242, v172, (uint64_t)__srca, v173, v174, v175, v176, v177);
            v14 = v248;
            v108 = (int64_t)__srca;
          }
        }
        v112 = a1[9];
        if (v111 < v112)
        {
          __break(0xC471u);
          JUMPOUT(0x19886FF64);
        }
        v113 = v14;
        memcpy((void *)(*((_QWORD *)a1 + 3) + 2 * v112), (const void *)v17, v108);
        a1[9] = v111;
        v17 = *((_QWORD *)a1 + 10);
        v14 = v113;
      }
      *((_WORD *)a1 + 88) = 0;
      v11 = v17 + 2;
      *((_QWORD *)a1 + 10) = v17 + 2;
      v20 = *((_QWORD *)a1 + 12);
      if (v17 + 2 >= v20)
      {
        LODWORD(a2) = 0u;
      }
      else
      {
        LODWORD(a2) = *(unsigned __int16 *)v11;
        *((_WORD *)a1 + 88) = (_WORD)a2;
        if (a2 > 0x7F)
          goto LABEL_139;
      }
      v90 = *(unsigned __int8 *)(v15 + a2);
      if (*(_BYTE *)(v15 + a2))
      {
        LOWORD(v255) = *(unsigned __int8 *)(v15 + a2);
        v91 = a1[9];
        if ((_DWORD)v91 == a1[8])
        {
          v193 = v14;
          v194 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v91 + 1, (unint64_t)&v255);
          v91 = a1[9];
          v14 = v193;
          *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v91) = *v194;
          v11 = *((_QWORD *)a1 + 10);
          v20 = *((_QWORD *)a1 + 12);
        }
        else
        {
          *((_WORD *)*v14 + v91) = v90;
        }
        a1[9] = v91 + 1;
        *((_WORD *)a1 + 88) = 0;
        v11 += 2;
        *((_QWORD *)a1 + 10) = v11;
        if (v11 < v20)
          *((_WORD *)a1 + 88) = *(_WORD *)v11;
        goto LABEL_84;
      }
LABEL_139:
      if ((_DWORD)a2 == 10)
        goto LABEL_149;
      if ((_DWORD)a2 == 13)
      {
        v166 = v14;
        if (!a3)
        {
          v178 = a1[13];
          v179 = v11 - v12;
          if (v11 != v12)
          {
            v180 = v178 + (v179 >> 1);
            if (v180 > a1[12])
            {
              WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v178 + (v179 >> 1));
              v178 = a1[13];
            }
            if (v180 < v178)
            {
              __break(0xC471u);
              JUMPOUT(0x19886FF84);
            }
            memcpy((void *)(*((_QWORD *)a1 + 5) + 2 * v178), (const void *)v12, v179);
            a1[13] = v180;
            LODWORD(v178) = v180;
          }
          if ((_DWORD)v178 == a1[12])
          {
            WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v178 + 1);
            v178 = a1[13];
            v181 = (_WORD *)(*((_QWORD *)a1 + 5) + 2 * v178);
          }
          else
          {
            v181 = (_WORD *)(*v13 + 2 * v178);
          }
          *v181 = 10;
          a1[13] = v178 + 1;
        }
        JSC::Lexer<char16_t>::shiftLineTerminator(a1);
        v12 = *((_QWORD *)a1 + 10);
        goto LABEL_150;
      }
      if (a2 >> 1 == 4116)
      {
LABEL_149:
        v166 = v14;
        JSC::Lexer<char16_t>::shiftLineTerminator(a1);
        goto LABEL_150;
      }
      v166 = v14;
      if ((_DWORD)a2 == 117)
      {
        *((_WORD *)a1 + 88) = 0;
        *((_QWORD *)a1 + 10) = v17 + 4;
        if (v17 + 4 < v20)
          *((_WORD *)a1 + 88) = *(_WORD *)(v17 + 4);
        v167 = JSC::Lexer<char16_t>::parseUnicodeEscape((uint64_t)a1);
        if (v167 <= 0xFFFFFFFD)
        {
          JSC::Lexer<char16_t>::recordUnicodeCodePoint(a1, v167);
LABEL_150:
          v14 = v166;
LABEL_84:
          v17 = *((_QWORD *)a1 + 10);
          continue;
        }
        v227 = WTF::fastCompactMalloc((WTF *)0x20);
        v229 = v227;
        v230 = 0x3700000002;
        v231 = "\\u can only be followed by a Unicode character sequence";
LABEL_226:
        *(_QWORD *)v227 = v230;
        *(_QWORD *)(v227 + 8) = v231;
        v11 = 4;
        *(_DWORD *)(v227 + 16) = 4;
        v232 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
        *((_QWORD *)a1 + 19) = v229;
        if (v232)
        {
          if (*(_DWORD *)v232 == 2)
          {
            WTF::StringImpl::~StringImpl(v232, a2, v228, a4, a5, a6, a7, a8);
            WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
          }
          else
          {
            *(_DWORD *)v232 -= 2;
          }
        }
        if (*((_WORD *)a1 + 88))
        {
          if (a3)
          {
            v37 = 1048591;
            goto LABEL_190;
          }
        }
        else
        {
          v11 = a3;
          if (a3 || *((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
          {
            if (*((_QWORD *)a1 + 10) == *((_QWORD *)a1 + 12))
              v37 = 3145741;
            else
              v37 = 1048591;
            goto LABEL_190;
          }
        }
        LOBYTE(v10) = 1;
        goto LABEL_150;
      }
      if ((_DWORD)a2 == 120)
      {
        *((_WORD *)a1 + 88) = 0;
        *((_QWORD *)a1 + 10) = v17 + 4;
        if (v17 + 4 >= v20)
        {
          v210 = 0;
        }
        else
        {
          v210 = *(unsigned __int16 *)(v17 + 4);
          *((_WORD *)a1 + 88) = v210;
        }
        if (v210 - 48 < 0xA || (v210 | 0x20) - 97 <= 5)
        {
          v211 = (_WORD *)(v17 + 6);
          if (v17 + 6 >= v20)
            v212 = 0;
          else
            v212 = (unsigned __int16)*v211;
          *((_WORD *)a1 + 88) = 0;
          *((_QWORD *)a1 + 10) = v211;
          if ((v212 - 48) < 0xA || (v212 | 0x20u) - 97 < 6)
          {
            if ((unint64_t)v211 >= v20)
            {
              v213 = 0;
            }
            else
            {
              v213 = (unsigned __int16)*v211;
              *((_WORD *)a1 + 88) = v213;
            }
            if (v210 >= 0x41)
              v214 = 9;
            else
              v214 = 0;
            v215 = v214 + v210;
            if (v213 >= 0x41)
              v216 = (v213 + 9) & 0xF;
            else
              v216 = v213 - 48;
            JSC::Lexer<char16_t>::record16((uint64_t)a1, v216 | (16 * v215));
            goto LABEL_211;
          }
          if ((unint64_t)v211 < v20)
            *((_WORD *)a1 + 88) = *v211;
        }
        v227 = WTF::fastCompactMalloc((WTF *)0x20);
        v229 = v227;
        v230 = 0x3300000002;
        v231 = "\\x can only be followed by a hex character sequence";
        goto LABEL_226;
      }
      if (((_DWORD)a2 - 48) <= 9)
      {
        *((_WORD *)a1 + 88) = 0;
        *((_QWORD *)a1 + 10) = v17 + 4;
        if (v17 + 4 >= v20)
        {
          v218 = 0;
        }
        else
        {
          v218 = *(unsigned __int16 *)(v17 + 4);
          *((_WORD *)a1 + 88) = v218;
        }
        if ((_DWORD)a2 == 48)
        {
          if ((v218 - 48) > 9)
          {
            JSC::Lexer<char16_t>::record16((uint64_t)a1, 0);
            goto LABEL_150;
          }
          *((_WORD *)a1 + 88) = 0;
          *((_QWORD *)a1 + 10) = v17 + 6;
          if (v17 + 6 < v20)
            *((_WORD *)a1 + 88) = *(_WORD *)(v17 + 6);
        }
        v227 = WTF::fastCompactMalloc((WTF *)0x20);
        v229 = v227;
        v230 = 0x3400000002;
        v231 = "The only valid numeric escape in strict mode is '\\0'";
        goto LABEL_226;
      }
      if (!(_DWORD)a2 && v11 == v20)
      {
        v37 = 3145741;
        v195 = WTF::fastCompactMalloc((WTF *)0x20);
        v203 = v195;
        v204 = 0x1C00000002;
        v205 = "Unterminated string constant";
        goto LABEL_187;
      }
      JSC::Lexer<char16_t>::record16((uint64_t)a1, (__int16)a2);
LABEL_211:
      *((_WORD *)a1 + 88) = 0;
      v217 = (_WORD *)(*((_QWORD *)a1 + 10) + 2);
      *((_QWORD *)a1 + 10) = v217;
      v11 = *((_QWORD *)a1 + 12);
      if ((unint64_t)v217 < v11)
        *((_WORD *)a1 + 88) = *v217;
      goto LABEL_150;
    }
    if (((v18 + (_DWORD)v16) & 0x2000) == 0)
      goto LABEL_8;
    if ((unsigned __int16)v18 == 10)
      goto LABEL_89;
    if ((unsigned __int16)v18 == 13)
    {
      v20 = *((_QWORD *)a1 + 10);
      if (v17 == v20)
        goto LABEL_107;
      v114 = v20 - v17;
      if ((uint64_t)(v20 - v17) <= -2)
        goto LABEL_138;
      v115 = v15;
      v116 = a1[8];
      v117 = a1[9];
      v118 = v117 + (v114 >> 1);
      if (v118 > v116)
      {
        __srcb = (void *)v114;
        v249 = v14;
        v250 = v13;
        v182 = v116 + (v116 >> 2);
        if (v182 >= 0x10)
          v183 = v182 + 1;
        else
          v183 = 16;
        if (v183 <= v118)
          v184 = v117 + (v114 >> 1);
        else
          v184 = v183;
        if (v184 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x19886FF8CLL);
        }
        v243 = *v14;
        v185 = (void *)WTF::fastMalloc((WTF *)(2 * v184));
        a1[8] = v184;
        *((_QWORD *)a1 + 3) = v185;
        memcpy(v185, v243, 2 * v117);
        v14 = v249;
        v13 = v250;
        v114 = (int64_t)__srcb;
        if (v243)
        {
          if (*v249 == v243)
          {
            *((_QWORD *)a1 + 3) = 0;
            a1[8] = 0;
          }
          WTF::fastFree((unint64_t)v243, v186, (uint64_t)__srcb, v187, v188, v189, v190, v191);
          v14 = v249;
          v13 = v250;
          v114 = (int64_t)__srcb;
        }
      }
      v119 = a1[9];
      if (v118 < v119)
      {
        __break(0xC471u);
        JUMPOUT(0x19886FF6CLL);
      }
      v120 = v14;
      memcpy((void *)(*((_QWORD *)a1 + 3) + 2 * v119), (const void *)v17, v114);
      a1[9] = v118;
      v17 = *((_QWORD *)a1 + 10);
      v14 = v120;
      v15 = v115;
LABEL_107:
      if (a3 || v12 == v17)
      {
        LOWORD(v255) = 10;
        v148 = a1[9];
        if ((_DWORD)v148 == a1[8])
        {
          v208 = v14;
          v209 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v148 + 1, (unint64_t)&v255);
          v148 = a1[9];
          v14 = v208;
          *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v148) = *v209;
        }
        else
        {
          *((_WORD *)*v14 + v148) = 10;
        }
        a1[9] = v148 + 1;
        if (!a3)
          goto LABEL_115;
      }
      else
      {
        v121 = v17 - v12;
        v122 = a1[13];
        v123 = v122 + ((uint64_t)(v17 - v12) >> 1);
        if (v123 > a1[12])
        {
          v192 = v14;
          WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v123);
          v14 = v192;
          v122 = a1[13];
        }
        if (v123 < v122)
        {
          __break(0xC471u);
          JUMPOUT(0x19886FF74);
        }
        v124 = v14;
        memcpy((void *)(*((_QWORD *)a1 + 5) + 2 * v122), (const void *)v12, v121);
        a1[13] = v123;
        LOWORD(v255) = 10;
        v125 = a1[9];
        if ((_DWORD)v125 == a1[8])
        {
          v207 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, v125 + 1, (unint64_t)&v255);
          v125 = a1[9];
          v14 = v124;
          *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v125) = *v207;
        }
        else
        {
          v14 = v124;
          *((_WORD *)*v124 + v125) = 10;
        }
        a1[9] = v125 + 1;
LABEL_115:
        v126 = a1[13];
        if ((_DWORD)v126 == a1[12])
        {
          v127 = v14;
          WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v126 + 1);
          v14 = v127;
          v126 = a1[13];
          v128 = (_WORD *)(*((_QWORD *)a1 + 5) + 2 * v126);
        }
        else
        {
          v128 = (_WORD *)(*v13 + 2 * v126);
        }
        *v128 = 10;
        a1[13] = v126 + 1;
      }
      v157 = v14;
      JSC::Lexer<char16_t>::shiftLineTerminator(a1);
      v14 = v157;
      v12 = *((_QWORD *)a1 + 10);
      goto LABEL_2;
    }
    if (!(_WORD)v18)
      break;
    if ((unsigned __int16)(v18 & 0xFFFE) >> 1 != 4116)
      goto LABEL_8;
LABEL_89:
    v92 = v14;
    JSC::Lexer<char16_t>::shiftLineTerminator(a1);
    v14 = v92;
  }
  if (*((_QWORD *)a1 + 10) != *((_QWORD *)a1 + 12))
    goto LABEL_8;
  v37 = 3145741;
  v195 = WTF::fastCompactMalloc((WTF *)0x20);
  v203 = v195;
  v204 = 0xE00000002;
  v205 = "Unexpected EOF";
LABEL_187:
  *(_QWORD *)v195 = v204;
  *(_QWORD *)(v195 + 8) = v205;
  *(_DWORD *)(v195 + 16) = 4;
  v206 = (WTF::StringImpl *)*((_QWORD *)a1 + 19);
  *((_QWORD *)a1 + 19) = v203;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
    {
      WTF::StringImpl::~StringImpl(v206, v196, v197, v198, v199, v200, v201, v202);
      WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
    }
    else
    {
      *(_DWORD *)v206 -= 2;
    }
  }
LABEL_190:
  *((_BYTE *)a1 + 150) = 1;
  v33 = (_WORD *)*((_QWORD *)a1 + 10);
  v34 = v253;
  v36 = v251;
  v35 = v252;
LABEL_34:
  v38 = (v35 - v36) >> 1;
  *((_BYTE *)a1 + 149) = 0;
  v39 = *((_QWORD *)a1 + 11);
  v40 = ((unint64_t)v33 - v39) >> 1;
  v41 = (unint64_t)(*((_QWORD *)a1 + 14) - v39) >> 1;
  v42 = *a1 | ((unint64_t)v40 << 32);
  *((_DWORD *)v8 + 11) = v40;
  *((_DWORD *)v8 + 8) = v34;
  *((_DWORD *)v8 + 9) = v38;
  *(_QWORD *)((char *)v8 + 60) = v42;
  *((_DWORD *)v8 + 17) = v41;
  a1[15] = v37;
  return v37;
}

unsigned int *JSC::Lexer<char16_t>::recordUnicodeCodePoint(unsigned int *a1, unsigned int a2)
{
  unsigned int *result;
  uint64_t v4;
  _WORD __src[2];
  __int16 v6;

  if (HIWORD(a2))
  {
    __src[0] = (a2 >> 10) - 10304;
    __src[1] = a2 & 0x3FF | 0xDC00;
    return JSC::Lexer<char16_t>::append16(a1, __src, 2);
  }
  else
  {
    v6 = a2;
    result = a1 + 6;
    v4 = a1[9];
    if ((_DWORD)v4 == a1[8])
    {
      result = (unsigned int *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v6);
      v4 = a1[9];
      *(_WORD *)(*((_QWORD *)a1 + 3) + 2 * v4) = *(_WORD *)result;
    }
    else
    {
      *(_WORD *)(*(_QWORD *)result + 2 * v4) = a2;
    }
    a1[9] = v4 + 1;
  }
  return result;
}

unsigned int *JSC::Lexer<char16_t>::append16(unsigned int *result, void *__src, uint64_t a3)
{
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a3)
  {
    v5 = result;
    v6 = result[8];
    v7 = result[9];
    v8 = a3 + v7;
    if (a3 + v7 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = a3 + v7;
      else
        v12 = v11;
      if (v12 >> 31)
        goto LABEL_17;
      v13 = (const void *)*((_QWORD *)result + 3);
      v14 = (void *)WTF::fastMalloc((WTF *)(2 * v12));
      v5[8] = v12;
      *((_QWORD *)v5 + 3) = v14;
      memcpy(v14, v13, 2 * v7);
      if (v13)
      {
        if (*((const void **)v5 + 3) == v13)
        {
          *((_QWORD *)v5 + 3) = 0;
          v5[8] = 0;
        }
        WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
      }
    }
    v9 = v5[9];
    if (v8 >= v9)
    {
      result = (unsigned int *)memcpy((void *)(*((_QWORD *)v5 + 3) + 2 * v9), __src, 2 * a3);
      v5[9] = v8;
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x19887023CLL);
  }
  return result;
}

uint64_t JSC::Lexer<char16_t>::parseUnicodeEscape(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned __int8 v23;
  unsigned int v25;
  unsigned __int8 v26;
  int v27;
  unsigned __int16 *v28;
  unsigned int v29;

  v1 = *(unsigned __int16 *)(a1 + 176);
  if (v1 == 123)
  {
    *(_WORD *)(a1 + 176) = 0;
    v21 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v21 + 2;
    v3 = *(_QWORD *)(a1 + 96);
    if (v21 + 2 >= v3)
    {
      LOWORD(v22) = 0;
    }
    else
    {
      LOWORD(v22) = *(_WORD *)(v21 + 2);
      *(_WORD *)(a1 + 176) = v22;
    }
    LODWORD(v15) = 0;
    v16 = (unsigned __int16 *)(v21 + 4);
    while (1)
    {
      v23 = v22 - 48;
      if ((unsigned __int16)(v22 - 48) >= 0xAu && (unsigned __int16)((v22 | 0x20) - 97) >= 6u)
      {
        if ((_WORD)v22)
          return 0xFFFFFFFFLL;
        else
          return 4294967294;
      }
      v25 = (unsigned __int16)v22;
      v26 = (v22 + 9) & 0xF;
      if (v25 < 0x41)
        v26 = v23;
      v15 = v26 | (16 * v15);
      *(_WORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v16;
      if (v15 >= 0x110000)
        break;
      if ((unint64_t)v16 >= v3)
      {
        v22 = 0;
      }
      else
      {
        v22 = *v16;
        *(_WORD *)(a1 + 176) = v22;
      }
      ++v16;
      if (v22 == 125)
      {
        *(_WORD *)(a1 + 176) = 0;
        goto LABEL_30;
      }
    }
    if ((unint64_t)v16 >= v3)
    {
      v27 = 0;
    }
    else
    {
      v27 = *v16;
      *(_WORD *)(a1 + 176) = v27;
    }
    if ((v27 - 48) < 0xA || (v27 | 0x20u) - 97 <= 5)
    {
      v28 = v16 + 1;
      do
      {
        *(_WORD *)(a1 + 176) = 0;
        if ((unint64_t)v28 >= v3)
        {
          v27 = 0;
        }
        else
        {
          v27 = *v28;
          *(_WORD *)(a1 + 176) = v27;
        }
        ++v28;
      }
      while ((v27 - 48) < 0xA || (v27 | 0x20u) - 97 < 6);
      v16 = v28 - 1;
      *(_QWORD *)(a1 + 80) = v16;
    }
    if (v16 == (unsigned __int16 *)v3)
      v29 = -2;
    else
      v29 = -1;
    if (v27)
      return 0xFFFFFFFFLL;
    else
      return v29;
  }
  else
  {
    v2 = *(unsigned __int16 **)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)(v2 + 1) >= v3)
      v4 = 0;
    else
      v4 = v2[1];
    if ((unint64_t)(v2 + 2) >= v3)
      v5 = 0;
    else
      v5 = v2[2];
    if ((unint64_t)(v2 + 3) >= v3)
      v6 = 0;
    else
      v6 = v2[3];
    if (v1 - 48 >= 0xA && (v1 | 0x20) - 97 > 5)
    {
      if ((unint64_t)(v2 + 4) >= v3)
        return 4294967294;
      else
        return 0xFFFFFFFFLL;
    }
    else if (v4 - 48 >= 0xA && (unsigned __int16)((v4 | 0x20) - 97) > 5u
           || v5 - 48 >= 0xA && (v5 | 0x20) - 97 > 5
           || (unsigned __int16)(v6 - 58) <= 0xFFF5u && (unsigned __int16)((v6 | 0x20) - 103) < 0xFFFAu)
    {
      v18 = v2 + 4;
      v19 = v2 + 1;
      do
      {
        *(_WORD *)(a1 + 176) = 0;
        if ((unint64_t)v19 >= v3)
        {
          v20 = 0;
        }
        else
        {
          v20 = *v19;
          *(_WORD *)(a1 + 176) = v20;
        }
        ++v19;
      }
      while ((v20 - 48) < 0xA || (v20 | 0x20u) - 97 < 6);
      if ((unint64_t)v18 >= v3)
        v15 = 4294967294;
      else
        v15 = 0xFFFFFFFFLL;
      *(_QWORD *)(a1 + 80) = v19 - 1;
    }
    else
    {
      if (v1 >= 0x41)
        v8 = 9;
      else
        v8 = 0;
      v9 = v8 + v1;
      if (v4 >= 0x41)
        v10 = ((_BYTE)v4 + 9) & 0xF;
      else
        v10 = v4 + 208;
      v11 = (unsigned __int16)((v10 << 8) | (v9 << 12));
      if (v5 >= 0x41)
        v12 = 9;
      else
        v12 = 0;
      v13 = v12 + v5;
      v14 = v6 - 48;
      if (v6 >= 0x41)
        v14 = (v6 + 9) & 0xF;
      v15 = v11 & 0xFFFFFF00 | (v14 | (16 * v13));
      *(_WORD *)(a1 + 176) = 0;
      v16 = v2 + 4;
LABEL_30:
      *(_QWORD *)(a1 + 80) = v16;
      if ((unint64_t)v16 < v3)
        *(_WORD *)(a1 + 176) = *v16;
    }
  }
  return v15;
}

uint64_t JSC::isLexerKeyword(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *(unsigned int *)(v1 + 16);
  if ((v2 & 0x20) != 0)
    return 0;
  v3 = (v2 >> 8) & 0x7F;
  v4 = JSC::mainTableIndex[2 * v3];
  if (v4 == 0xFFFF)
    return 0;
  while (1)
  {
    v6 = (unint64_t *)&(&JSC::mainTableValues)[5 * (__int16)v4];
    v7 = v6[1];
    if (v7)
    {
      if (WTF::equalInternal<unsigned char>(v1, *v6, v7 - 1))
        break;
    }
    LODWORD(v3) = (__int16)JSC::mainTableIndex[2 * (int)v3 + 1];
    if ((_DWORD)v3 == -1)
      return 0;
    LOWORD(v4) = JSC::mainTableIndex[2 * (int)v3];
  }
  return 1;
}

void JSC::ModuleAnalyzer::appendRequestedModule(uint64_t a1, WTF::AtomStringImpl *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE v30[24];

  v11 = (uint64_t *)(a1 + 16);
  v12 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v12 += 2;
  v29 = v12;
  WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(v11, (WTF::AtomStringImpl *)&v29, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v30);
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (v30[16])
    JSC::AbstractModuleRecord::appendRequestedModule(*(_QWORD *)(a1 + 8), a2, a3, v15, v16, v17, v18, v19);
}

void JSC::ModuleAnalyzer::exportVariable(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::AtomStringImpl *v120;
  const WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl **v127;
  uint64_t v128;
  JSC::AbstractModuleRecord *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::AtomStringImpl *v152;
  const WTF::StringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl **v159;
  uint64_t v160;
  JSC::AbstractModuleRecord *v161;
  const WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF *v174;
  WTF::StringImpl *v175;
  WTF::AtomStringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF *v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF::AtomStringImpl *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl **v208;
  unsigned int v209;
  int v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF *v215;
  unsigned int v216;
  WTF::StringImpl *v217;

  if ((a4 & 0x10) == 0)
    return;
  if ((a4 & 0x20) != 0)
  {
    if ((a4 & 0x40) != 0)
    {
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>((uint64_t)&v208, *(WTF::AtomStringImpl **)(*(_QWORD *)(a2 + 248) + 16), *a3, a4, a5, a6, a7, a8);
      if (v209)
      {
        v159 = v208;
        v160 = 8 * v209;
        do
        {
          v161 = (JSC::AbstractModuleRecord *)a1[1];
          JSC::Identifier::fromUid(*v159, *a1, v153, v154, v155, v156, v157, v158, &v215);
          JSC::Identifier::fromUid((WTF::StringImpl *)*a3, *a1, v162, v163, v164, v165, v166, v167, &v217);
          v210 = 0;
          v174 = v215;
          if (v215)
            *(_DWORD *)v215 += 2;
          v211 = v174;
          v212 = 0;
          v213 = 0;
          v175 = v217;
          if (v217)
            *(_DWORD *)v217 += 2;
          v214 = v175;
          JSC::AbstractModuleRecord::addExportEntry(v161, (const JSC::AbstractModuleRecord::ExportEntry *)&v210, v168, v169, v170, v171, v172, v173);
          JSC::AbstractModuleRecord::ExportEntry::~ExportEntry((JSC::AbstractModuleRecord::ExportEntry *)&v210, v176, v177, v178, v179, v180, v181, v182);
          v183 = v217;
          v217 = 0;
          if (v183)
          {
            if (*(_DWORD *)v183 == 2)
            {
              WTF::StringImpl::~StringImpl(v183, v152, (uint64_t)v153, v154, v155, v156, v157, v158);
              WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
            }
            else
            {
              *(_DWORD *)v183 -= 2;
            }
          }
          v184 = v215;
          v215 = 0;
          if (v184)
          {
            if (*(_DWORD *)v184 == 2)
            {
              WTF::StringImpl::~StringImpl(v184, v152, (uint64_t)v153, v154, v155, v156, v157, v158);
              WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
            }
            else
            {
              *(_DWORD *)v184 -= 2;
            }
          }
          ++v159;
          v160 -= 8;
        }
        while (v160);
      }
      WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v208, v152, (uint64_t)v153, v154, v155, v156, v157, v158);
    }
    else
    {
      JSC::AbstractModuleRecord::tryGetImportEntry(a1[1], *a3, (uint64_t)&v210);
      if ((_BYTE)v214)
      {
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>((uint64_t)&v215, *(WTF::AtomStringImpl **)(*(_QWORD *)(a2 + 248) + 16), *a3, v115, v116, v117, v118, v119);
        if (v216)
        {
          v127 = (WTF::StringImpl **)v215;
          v128 = 8 * v216;
          do
          {
            v129 = (JSC::AbstractModuleRecord *)a1[1];
            JSC::Identifier::fromUid(*v127, *a1, v121, v122, v123, v124, v125, v126, &v217);
            JSC::AbstractModuleRecord::ExportEntry::createIndirect((_DWORD **)&v217, (_DWORD **)&v212, (_DWORD **)&v211, (uint64_t)&v208);
            JSC::AbstractModuleRecord::addExportEntry(v129, (const JSC::AbstractModuleRecord::ExportEntry *)&v208, v130, v131, v132, v133, v134, v135);
            JSC::AbstractModuleRecord::ExportEntry::~ExportEntry((JSC::AbstractModuleRecord::ExportEntry *)&v208, v136, v137, v138, v139, v140, v141, v142);
            v143 = v217;
            v217 = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 2)
              {
                WTF::StringImpl::~StringImpl(v143, v120, (uint64_t)v121, v122, v123, v124, v125, v126);
                WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
              }
              else
              {
                *(_DWORD *)v143 -= 2;
              }
            }
            ++v127;
            v128 -= 8;
          }
          while (v128);
        }
        WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v215, v120, (uint64_t)v121, v122, v123, v124, v125, v126);
        std::optional<JSC::AbstractModuleRecord::ImportEntry>::~optional((uint64_t)&v210, v201, v202, v203, v204, v205, v206, v207);
      }
      else
      {
        __break(1u);
      }
    }
    return;
  }
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>((uint64_t)&v215, *(WTF::AtomStringImpl **)(*(_QWORD *)(a2 + 248) + 16), *a3, a4, a5, a6, a7, a8);
  v18 = (unint64_t *)v215;
  if (!v216)
    goto LABEL_5;
  v19 = 8 * v216;
  do
  {
    v20 = a1[1];
    v21 = (WTF::StringImpl *)*v18;
    v22 = *(_DWORD *)(*v18 + 16);
    if ((v22 & 0x20) != 0)
    {
      v23 = *(_DWORD *)v21 + 2;
LABEL_12:
      *(_DWORD *)v21 = v23;
      goto LABEL_13;
    }
    if ((v22 & 0x10) != 0)
    {
      v23 = *(_DWORD *)v21 + 2;
      *(_DWORD *)v21 = v23;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*a1 + 41912), *v18, v12, v13, v14, v15, v16, v17, &v208);
      v21 = (WTF::StringImpl *)v208;
      v23 = *(_DWORD *)v208;
    }
    *(_DWORD *)v21 = v23 + 2;
    if (v23)
      goto LABEL_12;
    WTF::StringImpl::~StringImpl(v21, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
LABEL_13:
    v24 = (WTF::StringImpl *)*a3;
    v25 = *(_DWORD *)(*a3 + 16);
    if ((v25 & 0x20) != 0)
    {
      v26 = *(_DWORD *)v24 + 2;
LABEL_17:
      *(_DWORD *)v24 = v26;
      goto LABEL_18;
    }
    if ((v25 & 0x10) != 0)
    {
      v26 = *(_DWORD *)v24 + 2;
      *(_DWORD *)v24 = v26;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*a1 + 41912), *a3, v12, v13, v14, v15, v16, v17, &v208);
      v24 = (WTF::StringImpl *)v208;
      v26 = *(_DWORD *)v208;
    }
    *(_DWORD *)v24 = v26 + 2;
    if (v26)
      goto LABEL_17;
    WTF::StringImpl::~StringImpl(v24, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
LABEL_18:
    v210 = 0;
    *(_DWORD *)v21 += 2;
    v211 = v21;
    v212 = 0;
    v213 = 0;
    *(_DWORD *)v24 += 2;
    v214 = v24;
    *(_DWORD *)v21 += 2;
    v217 = v21;
    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ExportEntry const&>((uint64_t *)(v20 + 48), (WTF::AtomStringImpl *)&v217, (uint64_t)&v210, v13, v14, v15, v16, v17, (uint64_t)&v208);
    v27 = v217;
    v217 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    v28 = v214;
    v214 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    v29 = v213;
    v213 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    v30 = v212;
    v212 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v31 = v211;
    v211 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
    ++v18;
    v19 -= 8;
  }
  while (v19);
  v18 = (unint64_t *)v215;
  if (v216)
  {
    v104 = 0;
    v105 = 8 * v216;
    do
    {
      v106 = (WTF::StringImpl *)v18[v104 / 8];
      v18[v104 / 8] = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
        {
          WTF::StringImpl::~StringImpl(v106, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v106 -= 2;
        }
      }
      v104 += 8;
    }
    while (v105 != v104);
  }
LABEL_5:
  if (v18)
    WTF::fastFree((unint64_t)v18, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
}

uint64_t WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>(uint64_t result, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  _QWORD v21[2];

  v8 = result;
  if (!a2)
  {
LABEL_17:
    v21[0] = 0;
    *(_QWORD *)result = 0;
    v21[1] = 0;
    *(_QWORD *)(result + 8) = 0;
    return WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v9 = *((_DWORD *)a2 - 2);
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    v10 = *(_DWORD *)(a3 + 32);
  v11 = v9 & (v10 >> 8);
  v12 = *((_QWORD *)a2 + 3 * v11);
  if (v12 != a3)
  {
    v20 = 1;
    while (v12)
    {
      v11 = (v11 + v20) & v9;
      v12 = *((_QWORD *)a2 + 3 * v11);
      ++v20;
      if (v12 == a3)
        goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_5:
  v13 = (char *)a2 + 24 * v11;
  v14 = *((unsigned int *)v13 + 5);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v14;
  if ((_DWORD)v14)
  {
    if (v14 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v15 = v13 + 8;
      result = WTF::fastMalloc((WTF *)(8 * v14));
      *(_DWORD *)(v8 + 8) = v14;
      *(_QWORD *)v8 = result;
      v16 = *((unsigned int *)v15 + 3);
      if ((_DWORD)v16)
      {
        v17 = *(_DWORD ***)v15;
        v18 = 8 * v16;
        do
        {
          v19 = *v17;
          if (*v17)
            *v19 += 2;
          *(_QWORD *)result = v19;
          result += 8;
          ++v17;
          v18 -= 8;
        }
        while (v18);
      }
    }
  }
  return result;
}

void JSC::AbstractModuleRecord::ExportEntry::~ExportEntry(JSC::AbstractModuleRecord::ExportEntry *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
}

uint64_t WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(WTF::StringImpl ***)a1;
    v13 = 8 * v9;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t std::optional<JSC::AbstractModuleRecord::ImportEntry>::~optional(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*(_BYTE *)(a1 + 32))
  {
    v9 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
    v10 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    v11 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  return a1;
}

uint64_t JSC::ModuleAnalyzer::analyze@<X0>(JSC::ModuleAnalyzer *this@<X0>, JSC::ModuleProgramNode *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;

  v12 = (_QWORD *)**((_QWORD **)a2 + 28);
  if (!v12)
  {
LABEL_4:
    result = *((_QWORD *)this + 1);
    v14 = *(_QWORD *)(result + 152);
    if (v14)
    {
      v15 = *(unsigned int *)(v14 - 4);
      v16 = v14 + 16 * v15;
      if (*(_DWORD *)(v14 - 12))
      {
        v17 = *(_QWORD *)(result + 152);
        if ((_DWORD)v15)
        {
          v18 = 16 * v15;
          v17 = *(_QWORD *)(result + 152);
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            v18 -= 16;
            if (!v18)
            {
              v17 = v16;
              break;
            }
          }
        }
LABEL_11:
        if (v14)
          v19 = v14 + 16 * *(unsigned int *)(v14 - 4);
        else
          v19 = 0;
        if (v19 != v17)
        {
          do
          {
            JSC::ModuleAnalyzer::exportVariable((uint64_t *)this, (uint64_t)a2, (uint64_t *)v17, *(unsigned __int16 *)(v17 + 8), a5, a6, a7, a8);
            v20 = v17 + 16;
            v17 = v16;
            if (v20 != v16)
            {
              v17 = v20;
              while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
              {
                v17 += 16;
                if (v17 == v16)
                {
                  v17 = v16;
                  break;
                }
              }
            }
          }
          while (v17 != v19);
          result = *((_QWORD *)this + 1);
        }
        v21 = *(_QWORD *)(result + 176);
        if (v21)
        {
          v22 = *(unsigned int *)(v21 - 4);
          v23 = v21 + 16 * v22;
          if (*(_DWORD *)(v21 - 12))
          {
            v24 = *(_QWORD *)(result + 176);
            if ((_DWORD)v22)
            {
              v25 = 16 * v22;
              v24 = *(_QWORD *)(result + 176);
              while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
              {
                v24 += 16;
                v25 -= 16;
                if (!v25)
                {
                  v24 = v23;
                  goto LABEL_28;
                }
              }
            }
            goto LABEL_28;
          }
          v24 = v21 + 16 * v22;
        }
        else
        {
          v24 = 0;
          v22 = 0;
        }
        v23 = v21 + 16 * v22;
LABEL_28:
        if (v21)
          v26 = v21 + 16 * *(unsigned int *)(v21 - 4);
        else
          v26 = 0;
        if (v26 != v24)
        {
          do
          {
            JSC::ModuleAnalyzer::exportVariable((uint64_t *)this, (uint64_t)a2, (uint64_t *)v24, *(unsigned __int16 *)(v24 + 8), a5, a6, a7, a8);
            v27 = v24 + 16;
            v24 = v23;
            if (v27 != v23)
            {
              v24 = v27;
              while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
              {
                v24 += 16;
                if (v24 == v23)
                {
                  v24 = v23;
                  break;
                }
              }
            }
          }
          while (v24 != v26);
          result = *((_QWORD *)this + 1);
        }
        if (BYTE6(qword_1ECF4C6B8))
        {
          JSC::AbstractModuleRecord::dump((JSC::AbstractModuleRecord *)result, a2, a3, a4, a5, a6, a7, a8);
          result = *((_QWORD *)this + 1);
        }
        v28 = 0;
        *(_QWORD *)a9 = result;
        goto LABEL_41;
      }
      v17 = v14 + 16 * v15;
    }
    else
    {
      v17 = 0;
      v15 = 0;
    }
    v16 = v14 + 16 * v15;
    goto LABEL_11;
  }
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD *, JSC::ModuleAnalyzer *))(*v12 + 144))(v12, this);
    if ((result & 1) == 0)
      break;
    v12 = (_QWORD *)v12[4];
    if (!v12)
      goto LABEL_4;
  }
  v29 = *((_BYTE *)this + 24);
  v30 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  *(_BYTE *)a9 = v29;
  *(_QWORD *)(a9 + 8) = v30;
  v28 = 1;
LABEL_41:
  *(_DWORD *)(a9 + 16) = v28;
  return result;
}

uint64_t JSC::BlockNode::hasCompletionValue(JSC::BlockNode *this)
{
  _QWORD **v1;
  _QWORD *v2;
  uint64_t result;

  v1 = (_QWORD **)*((_QWORD *)this + 11);
  if (!v1)
    return 0;
  v2 = *v1;
  if (!*v1)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
    if ((_DWORD)result)
      break;
    v2 = (_QWORD *)v2[4];
  }
  while (v2);
  return result;
}

uint64_t JSC::BlockNode::hasEarlyBreakOrContinue(JSC::BlockNode *this)
{
  _QWORD **v1;
  _QWORD *v2;
  int v3;
  int v4;

  v1 = (_QWORD **)*((_QWORD *)this + 11);
  if (!v1)
    return 0;
  v2 = *v1;
  if (!*v1)
    return 0;
  while (((*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2) & 1) == 0
       && ((*(uint64_t (**)(_QWORD *))(*v2 + 88))(v2) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v2 + 24))(v2))
    {
      v3 = 0;
      v4 = 1;
      return v4 & v3;
    }
    v2 = (_QWORD *)v2[4];
    if (!v2)
    {
      v4 = 0;
      return v4 & v3;
    }
  }
  v4 = 1;
  v3 = 1;
  return v4 & v3;
}

uint64_t JSC::ScopeNode::ScopeNode(uint64_t result, uint64_t a2, int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, __int16 a10, char a11, char a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)(result + 8) = *(_DWORD *)a4;
  *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a4 + 4));
  *(_DWORD *)(result + 20) = -1;
  *(_DWORD *)(result + 28) = -1;
  *(_QWORD *)(result + 32) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_QWORD *)(result + 96) = 0;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 48) = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = *(_QWORD *)(result + 56);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v13;
  v14 = *(_QWORD *)(result + 64);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = *(_QWORD *)(result + 72);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  LODWORD(v15) = *(_DWORD *)(result + 84);
  *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v15;
  v16 = *(_QWORD *)(result + 88);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v16;
  LODWORD(v16) = *(_DWORD *)(result + 96);
  *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v16;
  LODWORD(v16) = *(_DWORD *)(result + 100);
  *(_DWORD *)(result + 100) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v16;
  *(_QWORD *)(result + 112) = 0;
  v17 = *a9;
  *a9 = 0;
  *(_QWORD *)(result + 112) = v17;
  *(_BYTE *)(result + 120) = *((_BYTE *)a9 + 8);
  v18 = a9[2];
  a9[2] = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 128) = v18;
  v19 = *a8;
  *a8 = 0;
  *(_QWORD *)(result + 136) = v19;
  LODWORD(v19) = *((_DWORD *)a8 + 2);
  *((_DWORD *)a8 + 2) = 0;
  *(_DWORD *)(result + 144) = v19;
  LODWORD(v19) = *((_DWORD *)a8 + 3);
  *((_DWORD *)a8 + 3) = 0;
  *(_QWORD *)result = off_1E3596CB0;
  *(_QWORD *)(result + 40) = &unk_1E3596D50;
  *(_QWORD *)(result + 104) = &unk_1E3596D70;
  v20 = *a3;
  *(_DWORD *)(result + 148) = v19;
  *(_DWORD *)(result + 152) = v20;
  *(int32x2_t *)(result + 156) = vrev64_s32(*(int32x2_t *)(a3 + 1));
  *(_WORD *)(result + 164) = a10;
  *(_BYTE *)(result + 166) = a11;
  *(_BYTE *)(result + 167) = a12;
  v21 = *a5;
  if (*a5)
    ++*(_DWORD *)(v21 + 8);
  *(_QWORD *)(result + 168) = v21;
  *(_QWORD *)(result + 176) = a5[1];
  *(_QWORD *)(result + 184) = a5[2];
  *(_QWORD *)(result + 192) = 0;
  v22 = *a7;
  *a7 = 0;
  *(_QWORD *)(result + 192) = v22;
  *(_BYTE *)(result + 200) = *((_BYTE *)a7 + 8);
  v23 = a7[2];
  a7[2] = 0;
  *(_QWORD *)(result + 208) = v23;
  *(_DWORD *)(result + 216) = a13;
  *(_QWORD *)(result + 224) = a6;
  return result;
}

uint64_t JSC::ScopeNode::hasCompletionValue(JSC::ScopeNode *this)
{
  _QWORD **v1;
  _QWORD *v2;
  uint64_t result;

  v1 = (_QWORD **)*((_QWORD *)this + 28);
  if (!v1)
    return 0;
  v2 = *v1;
  if (!*v1)
    return 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
    if ((_DWORD)result)
      break;
    v2 = (_QWORD *)v2[4];
  }
  while (v2);
  return result;
}

uint64_t JSC::ScopeNode::hasEarlyBreakOrContinue(JSC::ScopeNode *this)
{
  _QWORD **v1;
  _QWORD *v2;
  int v3;
  int v4;

  v1 = (_QWORD **)*((_QWORD *)this + 28);
  if (!v1)
    return 0;
  v2 = *v1;
  if (!*v1)
    return 0;
  while (((*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2) & 1) == 0
       && ((*(uint64_t (**)(_QWORD *))(*v2 + 88))(v2) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v2 + 24))(v2))
    {
      v3 = 0;
      v4 = 1;
      return v4 & v3;
    }
    v2 = (_QWORD *)v2[4];
    if (!v2)
    {
      v4 = 0;
      return v4 & v3;
    }
  }
  v4 = 1;
  v3 = 1;
  return v4 & v3;
}

BOOL JSC::FunctionMetadataNode::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 35) == *(unsigned __int8 *)(a2 + 35)
      && ((*(_WORD *)(a2 + 33) ^ *(_WORD *)(a1 + 33)) & 0x37F) == 0
      && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
      && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
      && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80)
      && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
      && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92)
      && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
      && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
      && *(_QWORD *)(a1 + 104) == *(_QWORD *)(a2 + 104)
      && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
      && *(_DWORD *)(a1 + 116) == *(_DWORD *)(a2 + 116)
      && *(_DWORD *)(a1 + 120) == *(_DWORD *)(a2 + 120)
      && *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124)
      && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128)
      && *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132)
      && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

uint64_t JSC::FunctionMetadataNode::dump(JSC::FunctionMetadataNode *this, WTF::PrintStream *a2)
{
  int v4;
  WTF::PrintStream *v5;
  int v6;
  WTF::PrintStream *v7;
  int v8;
  WTF::PrintStream *v9;
  int v10;
  WTF::PrintStream *v11;
  int v12;
  WTF::PrintStream *v13;
  int v14;
  WTF::PrintStream *v15;
  int v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;
  WTF::PrintStream *v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  const char *v28;
  WTF::PrintStream *v29;
  WTF::PrintStream *v30;
  WTF::PrintStream *v31;
  WTF::PrintStream *v32;
  WTF::PrintStream *v33;
  WTF::PrintStream *v34;
  WTF::PrintStream *v35;

  v4 = *((unsigned __int8 *)this + 35);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "m_parseMode ");
  WTF::PrintStream::printf(v5, "%u", v4);
  WTF::PrintStream::printf(v5, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v6 = *(_WORD *)((_BYTE *)this + 33) & 3;
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "m_implementationVisibility ");
  WTF::PrintStream::printf(v7, "%u", v6);
  WTF::PrintStream::printf(v7, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v8 = (*(unsigned __int16 *)((char *)this + 33) >> 2) & 3;
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v9, "%s", "m_lexicalScopeFeatures ");
  WTF::PrintStream::printf(v9, "%u", v8);
  WTF::PrintStream::printf(v9, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v10 = (*(unsigned __int16 *)((char *)this + 33) >> 4) & 1;
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v11, "%s", "m_superBinding ");
  WTF::PrintStream::printf(v11, "%u", v10);
  WTF::PrintStream::printf(v11, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v12 = (*(unsigned __int16 *)((char *)this + 33) >> 5) & 3;
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v13, "%s", "m_constructorKind ");
  WTF::PrintStream::printf(v13, "%u", v12);
  WTF::PrintStream::printf(v13, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v14 = HIBYTE(*(unsigned __int16 *)((char *)this + 33)) & 1;
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v15, "%s", "m_isArrowFunctionBodyExpression ");
  WTF::PrintStream::printf(v15, "%u", v14);
  WTF::PrintStream::printf(v15, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v16 = (*(unsigned __int16 *)((char *)this + 33) >> 9) & 1;
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v17, "%s", "m_isSloppyModeHoistedFunction ");
  WTF::PrintStream::printf(v17, "%u", v16);
  WTF::PrintStream::printf(v17, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v18, "%s", "m_ident ");
  JSC::Identifier::dump((JSC::FunctionMetadataNode *)((char *)this + 40), v18);
  WTF::PrintStream::printf(v18, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v19, "%s", "m_ecmaName ");
  JSC::Identifier::dump((JSC::FunctionMetadataNode *)((char *)this + 48), v19);
  WTF::PrintStream::printf(v19, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  LODWORD(v19) = *((_DWORD *)this + 9);
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v20, "%s", "m_functionMode ");
  WTF::PrintStream::printf(v20, "%u", (_DWORD)v19);
  WTF::PrintStream::printf(v20, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v21, "%s", "m_startColumn ");
  WTF::PrintStream::printf(v21, "%u", *((_DWORD *)this + 14));
  WTF::PrintStream::printf(v21, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v22, "%s", "m_endColumn ");
  WTF::PrintStream::printf(v22, "%u", *((_DWORD *)this + 15));
  WTF::PrintStream::printf(v22, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v23, "%s", "m_functionStart ");
  WTF::PrintStream::printf(v23, "%u", *((_DWORD *)this + 16));
  WTF::PrintStream::printf(v23, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v24, "%s", "m_functionNameStart ");
  WTF::PrintStream::printf(v24, "%d", *((_DWORD *)this + 17));
  WTF::PrintStream::printf(v24, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v25, "%s", "m_parametersStart ");
  WTF::PrintStream::printf(v25, "%d", *((_DWORD *)this + 18));
  WTF::PrintStream::printf(v25, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v26 = *((_QWORD *)this + 13);
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v27, "%s", "m_classSource.isNull() ");
  if (v26)
    v28 = "false";
  else
    v28 = "true";
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v27 + 32))(v27);
  WTF::PrintStream::printf(v29, "%s", v28);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v27 + 40))(v27);
  WTF::PrintStream::printf(v27, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v30, "%s", "m_startStartOffset ");
  WTF::PrintStream::printf(v30, "%d", *((_DWORD *)this + 32));
  WTF::PrintStream::printf(v30, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v31, "%s", "m_parameterCount ");
  WTF::PrintStream::printf(v31, "%u", *((_DWORD *)this + 33));
  WTF::PrintStream::printf(v31, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v32, "%s", "m_lastLine ");
  WTF::PrintStream::printf(v32, "%d", *((_DWORD *)this + 34));
  WTF::PrintStream::printf(v32, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v33 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v33, "%s", "position().line ");
  WTF::PrintStream::printf(v33, "%d", *((_DWORD *)this + 4));
  WTF::PrintStream::printf(v33, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v34, "%s", "position().offset ");
  WTF::PrintStream::printf(v34, "%d", *((_DWORD *)this + 5));
  WTF::PrintStream::printf(v34, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v35, "%s", "position().lineStartOffset ");
  WTF::PrintStream::printf(v35, "%d", *((_DWORD *)this + 6));
  WTF::PrintStream::printf(v35, "%s", "\n");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::PropertyListNode::hasStaticallyNamedProperty(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (result)
  {
    while (1)
    {
      v2 = *(_QWORD *)(result + 32);
      if ((*(_WORD *)(v2 + 24) & 0x3000) == 0x2000)
      {
        v3 = *(_QWORD **)v2;
        if (v3)
        {
          if (*v3 == *a2)
            break;
        }
      }
      result = *(_QWORD *)(result + 40);
      if (!result)
        return result;
    }
    return 1;
  }
  return result;
}

uint64_t JSC::ImportDeclarationNode::analyzeModule(JSC::ImportAttributesListNode **this, JSC::ModuleAnalyzer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::AtomStringImpl *v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  JSC::ImportAttributesListNode *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  JSC::VM *v79;
  JSC::ImportAttributesListNode *v80;
  _BOOL4 v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  _QWORD v85[2];
  int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88[3];

  JSC::tryCreateAttributes((uint64_t)v85, *(JSC::VM **)(*(_QWORD *)a2 + 41952), this[7]);
  v10 = v86;
  if (v86)
  {
    if (v86 != 1)
    {
      v78 = std::__throw_bad_variant_access[abi:sn180100]();
      return JSC::tryCreateAttributes(v78, v79, v80);
    }
    JSC::ModuleAnalyzer::fail((uint64_t)a2, (WTF::AtomStringImpl *)LOBYTE(v85[0]), (_DWORD *)v85[1], v5, v6, v7, v8, v9);
  }
  else
  {
    v11 = (WTF::AtomStringImpl *)*((_QWORD *)this[6] + 4);
    v12 = *(WTF::StringImpl **)v11;
    if (*(_QWORD *)v11)
      *(_DWORD *)v12 += 2;
    v88[0] = v12;
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)a2 + 2, (WTF::AtomStringImpl *)v88, v4, v5, v6, v7, v8, v9, (uint64_t)&v81);
    v20 = v88[0];
    v88[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    if ((_BYTE)v83)
      JSC::AbstractModuleRecord::appendRequestedModule(*((_QWORD *)a2 + 1), v11, v85, v15, v16, v17, v18, v19);
    v21 = this[5];
    v22 = *((unsigned int *)v21 + 5);
    if ((_DWORD)v22)
    {
      v23 = (uint64_t *)*((_QWORD *)v21 + 1);
      v24 = 8 * v22;
      do
      {
        v25 = *v23;
        v26 = *(WTF::StringImpl ***)(*v23 + 32);
        v27 = *((_QWORD *)a2 + 1);
        v81 = *v26 == *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)a2 + 41952) + 32);
        v28 = (WTF::StringImpl *)**((_QWORD **)this[6] + 4);
        if (v28)
          *(_DWORD *)v28 += 2;
        v82 = v28;
        v29 = *v26;
        if (v29)
          *(_DWORD *)v29 += 2;
        v83 = v29;
        v30 = **(WTF::StringImpl ***)(v25 + 40);
        if (v30)
          *(_DWORD *)v30 += 4;
        v84 = v30;
        v87 = v30;
        WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ImportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ImportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ImportEntry const&>((uint64_t *)(v27 + 40), (WTF::AtomStringImpl *)&v87, (uint64_t)&v81, v15, v16, v17, v18, v19, (uint64_t)v88);
        v33 = v87;
        v87 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
          {
            WTF::StringImpl::~StringImpl(v33, v31, v32, v15, v16, v17, v18, v19);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
          else
          {
            *(_DWORD *)v33 -= 2;
          }
        }
        v34 = v84;
        v84 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, v31, v32, v15, v16, v17, v18, v19);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
        v35 = v83;
        v83 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, v31, v32, v15, v16, v17, v18, v19);
            WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        v36 = v82;
        v82 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, v31, v32, v15, v16, v17, v18, v19);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
  }
  if (v86 != -1)
    ((void (*)(_BOOL4 *, _QWORD *))off_1E3596C90[v86])(&v81, v85);
  return v10 == 0;
}

uint64_t JSC::tryCreateAttributes(uint64_t this, JSC::VM *a2, JSC::ImportAttributesListNode *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  int *v19;
  char v20;
  _BYTE *v21;
  unint64_t v22;
  int *v23;

  v3 = this;
  if (a3 && (v4 = *((unsigned int *)a3 + 5), (_DWORD)v4))
  {
    v5 = 0;
    v6 = (_QWORD **)*((_QWORD *)a3 + 1);
    v7 = &v6[2 * v4];
    v8 = *((_QWORD *)a2 + 320);
    v9 = 16 * v4;
    do
    {
      v10 = *v6[v5 / 8];
      if (v10 != v8)
      {
        if (v10)
        {
          v17 = *(_BYTE **)(v10 + 8);
          v18 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v17 = 0;
          v18 = 0x100000000;
        }
        this = WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>((int8x16_t *)"Import attribute \"", 19, v17, v18, (int8x16_t *)"\" is not supported", 19, &v23);
        v19 = v23;
        v20 = 4;
        goto LABEL_21;
      }
      v5 += 16;
    }
    while (v9 != v5);
    v11 = 0;
    v12 = 1;
    while (1)
    {
      while (**v6 != v8)
      {
        v6 += 2;
        if (v6 == v7)
        {
          if ((v12 & 1) != 0)
            goto LABEL_2;
LABEL_23:
          this = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)(this + 8) = 1;
          *(_QWORD *)this = off_1E357B618;
          *(_BYTE *)(this + 12) = v11;
          *(_QWORD *)v3 = this;
          goto LABEL_3;
        }
      }
      v13 = *v6[1];
      if (v13)
      {
        v14 = *(const char **)(v13 + 8);
        v15 = *(unsigned int *)(v13 + 4);
        v16 = ((unint64_t)*(unsigned int *)(v13 + 16) >> 2) & 1;
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v16 = 1;
      }
      this = JSC::ScriptFetchParameters::parseType(v14, v15 | (v16 << 32));
      if ((unsigned __int16)this <= 0xFFu)
        break;
      v11 = this;
      v12 = 0;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_23;
    }
    if (v13)
    {
      v21 = *(_BYTE **)(v13 + 8);
      v22 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v21 = 0;
      v22 = 0x100000000;
    }
    this = WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>((int8x16_t *)"Import attribute type \"", 24, v21, v22, (int8x16_t *)"\" is not valid", 15, &v23);
    v19 = v23;
    v20 = 5;
LABEL_21:
    *(_BYTE *)v3 = v20;
    *(_QWORD *)(v3 + 8) = v19;
    *(_DWORD *)(v3 + 16) = 1;
  }
  else
  {
LABEL_2:
    *(_QWORD *)v3 = 0;
LABEL_3:
    *(_DWORD *)(v3 + 16) = 0;
  }
  return this;
}

void JSC::ModuleAnalyzer::fail(uint64_t a1, WTF::AtomStringImpl *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 24) = (_BYTE)a2;
  if (a3)
    *a3 += 2;
  v9 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a3;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

uint64_t JSC::ExportAllDeclarationNode::analyzeModule(JSC::ImportAttributesListNode **this, JSC::ModuleAnalyzer *a2)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  WTF::StringImpl *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  _BYTE v50[24];
  WTF::StringImpl *v51;

  JSC::tryCreateAttributes((uint64_t)&v47, *(JSC::VM **)(*(_QWORD *)a2 + 41952), this[6]);
  v11 = v49;
  if (!v49)
  {
    JSC::ModuleAnalyzer::appendRequestedModule((uint64_t)a2, *((WTF::AtomStringImpl **)this[5] + 4), &v47, v6, v7, v8, v9, v10);
    v20 = (uint64_t *)(*((_QWORD *)a2 + 1) + 56);
    v21 = (WTF::StringImpl *)**((_QWORD **)this[5] + 4);
    if (v21)
      *(_DWORD *)v21 += 2;
    v51 = v21;
    WTF::ListHashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash>::add(v20, (uint64_t *)&v51, v15, v16, v17, v18, v19, (uint64_t)v50);
    v29 = v51;
    v51 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v22, v23, v24, v25, v26, v27, v28);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    v14 = v49;
    if (v49 == -1)
      return v11 == 0;
    goto LABEL_15;
  }
  if (v49 == 1)
  {
    *((_BYTE *)a2 + 24) = v47;
    v12 = v48;
    if (v48)
      *v48 += 2;
    v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl(v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
    v14 = 1;
LABEL_15:
    ((void (*)(_BYTE *, uint64_t *))off_1E3596C90[v14])(v50, &v47);
    return v11 == 0;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return JSC::ExportDefaultDeclarationNode::analyzeModule();
}

uint64_t JSC::ExportDefaultDeclarationNode::analyzeModule()
{
  return 1;
}

uint64_t JSC::ExportLocalDeclarationNode::analyzeModule()
{
  return 1;
}

void JSC::ExportNamedDeclarationNode::analyzeModule(JSC::ImportAttributesListNode **this, JSC::AbstractModuleRecord **a2)
{
  JSC::ImportAttributesListNode *v4;
  uint64_t v5;
  JSC::ImportAttributesListNode *v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD **v22;
  JSC::AbstractModuleRecord *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::ParserArena *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  int v46;
  char v47;

  if (this[6])
  {
    JSC::tryCreateAttributes((uint64_t)v45, *((JSC::VM **)*a2 + 5244), this[7]);
    if (v46)
    {
      if (v46 == 1)
      {
        JSC::ModuleAnalyzer::fail((uint64_t)a2, (WTF::AtomStringImpl *)LOBYTE(v45[0]), (_DWORD *)v45[1], v9, v10, v11, v12, v13);
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21ScriptFetchParametersENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS_5tupleIJNSA_9ErrorTypeENS8_6StringEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(v14, (WTF::AtomStringImpl *)v45, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        v37 = (JSC::ParserArena *)std::__throw_bad_variant_access[abi:sn180100]();
        JSC::ParserArena::~ParserArena(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      return;
    }
    JSC::ModuleAnalyzer::appendRequestedModule((uint64_t)a2, *((WTF::AtomStringImpl **)this[6] + 4), v45, v9, v10, v11, v12, v13);
    if (v46 != -1)
      ((void (*)(char *, _QWORD *))off_1E3596C90[v46])(&v47, v45);
  }
  v4 = this[5];
  v5 = *((unsigned int *)v4 + 5);
  if ((_DWORD)v5)
  {
    v6 = this[6];
    if (v6)
    {
      v7 = (uint64_t *)*((_QWORD *)v4 + 1);
      for (i = 8 * v5 - 8; ; i -= 8)
      {
        if (v6)
        {
          v21 = *v7;
          v22 = *(_DWORD ***)(*v7 + 32);
          v23 = a2[1];
          if (*v22 == *(_DWORD **)(*((_QWORD *)*a2 + 5244) + 112))
            JSC::AbstractModuleRecord::ExportEntry::createNamespace(*(_DWORD ***)(v21 + 40), *((_DWORD ***)v6 + 4), (uint64_t)v45);
          else
            JSC::AbstractModuleRecord::ExportEntry::createIndirect(*(_DWORD ***)(v21 + 40), v22, *((_DWORD ***)v6 + 4), (uint64_t)v45);
          JSC::AbstractModuleRecord::addExportEntry(v23, (const JSC::AbstractModuleRecord::ExportEntry *)v45, v24, v25, v26, v27, v28, v29);
          JSC::AbstractModuleRecord::ExportEntry::~ExportEntry((JSC::AbstractModuleRecord::ExportEntry *)v45, v30, v31, v32, v33, v34, v35, v36);
        }
        if (!i)
          break;
        ++v7;
        v6 = this[6];
      }
    }
  }
}

void JSC::ParserArena::~ParserArena(JSC::ParserArena *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  void (***v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v9 = *((unsigned int *)this + 13);
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (v10 < *((unsigned int *)this + 13))
    {
      v11 = *(void (****)(_QWORD))(*((_QWORD *)this + 5) + 8 * v10);
      (**v11)(v11);
      if (v9 == ++v10)
        goto LABEL_5;
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1988726F0);
  }
LABEL_5:
  v12 = *((_QWORD *)this + 1);
  if (v12)
    WTF::fastFree(v12 - 8000, a2, a3, a4, a5, a6, a7, a8);
  v13 = *((unsigned int *)this + 9);
  if ((_DWORD)v13)
  {
    v25 = 0;
    while (v25 < *((unsigned int *)this + 9))
    {
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v25++), a2, a3, a4, a5, a6, a7, a8);
      if (v13 == v25)
        goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_8:
  v14 = *((_QWORD *)this + 5);
  if (v14)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (unint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    WTF::SegmentedVector<JSC::Identifier,64ul>::~SegmentedVector(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t JSC::ParserArena::allocateFreeablePool(JSC::ParserArena *this)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v4 = (_QWORD *)((char *)this + 24);
    v5 = v2 - 8000;
    v8 = v2 - 8000;
    v6 = *((unsigned int *)this + 9);
    if ((_DWORD)v6 == *((_DWORD *)this + 8))
    {
      v7 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)&v8);
      v6 = *((unsigned int *)this + 9);
      *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v6) = *v7;
    }
    else
    {
      *(_QWORD *)(*v4 + 8 * v6) = v5;
    }
    *((_DWORD *)this + 9) = v6 + 1;
  }
  result = WTF::fastMalloc((WTF *)0x1F40);
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = result + 8000;
  return result;
}

void JSC::IdentifierArena::makeBigIntDecimalIdentifier(JSC::IdentifierArena *this, JSC::VM *a2, const JSC::Identifier *a3, unsigned int a4)
{
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  JSC::JSBigInt *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;

  if (a4 == 10)
    return;
  v7 = (char *)a2 + 64;
  v8 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8 + 1;
  if (!v8)
  {
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
      if (*((_QWORD *)a2 + 3) == v9)
      {
        *((_QWORD *)a2 + 2) = 0;
        v61 = (unsigned int *)((char *)a2 + 80);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 & 0xFFFFFFEF, v61));
        *((_BYTE *)a2 + 86) = 1;
      }
    }
  }
  v10 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)(v10 + 4);
  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
  {
LABEL_8:
    v13 = JSC::JSBigInt::parseInt<unsigned char>(0, a2, v11, v12, 0, a4, 0, 0, 0);
    goto LABEL_9;
  }
  v13 = JSC::JSBigInt::parseInt<char16_t>(0, a2, v11, v12, 0, a4, 0, 0, 0);
  if (!v13)
    goto LABEL_26;
LABEL_9:
  if (*((_DWORD *)v13 + 2))
    JSC::JSBigInt::toStringGeneric(a2, 0, v13, 10, v15, v16, v17, v18, (int **)&v66);
  else
    JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)a2 + 41968), 0x30u, v14, v15, v16, v17, v18, &v66);
  v26 = v66;
  if (v66)
  {
    if ((*((_BYTE *)v66 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v66 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*((uint64_t **)a2 + 5239), (unint64_t)v66, v20, v21, v22, v23, v24, v25, &v67);
      v26 = v67;
    }
  }
  v27 = *(_DWORD *)v26;
  *(_DWORD *)v26 += 2;
  if (v27)
  {
    *(_DWORD *)v26 = v27;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v26, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  v67 = v26;
  WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>((uint64_t)this, (uint64_t *)&v67);
  v35 = v67;
  v67 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  if ((unint64_t)(*(_QWORD *)this - 1) >> 6 >= *((unsigned int *)this + 5))
  {
    __break(0xC471u);
  }
  else
  {
LABEL_26:
    v36 = *((_DWORD *)a2 + 22) - 1;
    *((_DWORD *)a2 + 22) = v36;
    if (!v36 && v7[93377])
    {
      v63 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 2) = v63;
      *((_QWORD *)a2 + 4) = v63;
      if (v63)
      {
        v64 = (unsigned int *)(v7 + 16);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 | 0x10, v64));
      }
      if (v7[93379])
        v7[93378] = 1;
      *((_BYTE *)a2 + 86) = 0;
    }
  }
}

uint64_t JSC::IdentifierArena::makePrivateIdentifier(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, WTF::StringImpl *a4, int a5)
{
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52[2];

  v52[0] = a3;
  v52[1] = a4;
  LODWORD(v50) = a5;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned int>((uint64_t)v52, (unsigned int *)&v50, (int **)&v51);
  if (!v51)
    goto LABEL_15;
  WTF::SymbolRegistry::symbolForKey((WTF::SymbolRegistry *)(a2 + 41936), &v51, v7, v8, v9, v10, v11, v12, v52);
  v13 = v52[0];
  *(_DWORD *)v52[0] += 2;
  v50 = v13;
  WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(a1, (uint64_t *)&v50);
  v21 = v50;
  v50 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = *(_QWORD *)a1 - 1;
  if (v22 >> 6 >= *(unsigned int *)(a1 + 20))
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x198872B2CLL);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v22 >> 6));
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::~StringImpl(v13, v14, v15, v16, v17, v18, v19, v20);
    WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    *(_DWORD *)v13 -= 2;
  }
  v24 = v51;
  v51 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v23 + 8 * (v22 & 0x3F);
}

uint64_t JSC::SourceProvider::SourceProvider(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, _QWORD *a6, char a7)
{
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35964B0;
  *(_BYTE *)(result + 12) = a7;
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  *(_QWORD *)(result + 16) = v7;
  v8 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 24) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  if (v9)
    ++*(_DWORD *)(v9 + 8);
  *(_QWORD *)(result + 56) = v9;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 64) = v10;
  *(_QWORD *)(result + 72) = 0;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = v11;
  *(_QWORD *)(result + 104) = *a6;
  *(_DWORD *)(result + 112) = 0;
  *(_BYTE *)(result + 116) = a5;
  return result;
}

void JSC::SourceProvider::~SourceProvider(JSC::SourceProvider *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  *(_QWORD *)this = off_1E35964B0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
}

uint64_t JSC::SourceProvider::getID(uint64_t this)
{
  unsigned int v1;

  if (!*(_DWORD *)(this + 112))
  {
    do
      v1 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
    while (__stlxr(v1 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
    *(_DWORD *)(this + 112) = v1 + 1;
    if (v1 == -1)
    {
      this = 50;
      __break(0xC471u);
    }
  }
  return this;
}

WTF::StringImpl **JSC::SourceProvider::sourceURLStripped(WTF::StringImpl **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v8;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45[5];
  int *v46;

  v8 = this + 9;
  if (this[8] && !*v8)
  {
    WTF::URL::URL((uint64_t)v45, this + 8, 0, a4, a5, a6, a7, a8);
    WTF::URL::strippedForUseAsReport((uint64_t)v45, &v46);
    v17 = v46;
    v46 = 0;
    v18 = *v8;
    *v8 = (WTF::StringImpl *)v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
        v28 = (WTF::StringImpl *)v46;
        v46 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::~StringImpl(v28, v10, v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          }
          else
          {
            *(_DWORD *)v28 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v18 -= 2;
        v46 = 0;
      }
    }
    v19 = v45[0];
    v45[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  return v8;
}

uint64_t WTF::URL::URL(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v9 = *a2;
  if (*a2)
    *(_DWORD *)v9 += 2;
  v27 = v9;
  WTF::URL::URL(a1, (WTF::AtomStringImpl *)&v27, a3, a4, a5, a6, a7, a8);
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  return a1;
}

double JSC::BaseWebAssemblySourceProvider::BaseWebAssemblySourceProvider(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35964B0;
  *(_BYTE *)(a1 + 12) = 2;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 64) = v6;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 101) = 0u;
  *(_QWORD *)a1 = off_1E3596500;
  return result;
}

void JSC::SourceProviderCache::~SourceProviderCache(JSC::SourceProviderCache *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 1) = 0;
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        if (*(_DWORD *)(v8 + 16 * v10) == 2147483646)
          goto LABEL_5;
        v12 = v8 + 16 * v10;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (!v13)
          goto LABEL_5;
        v14 = *(unsigned int *)(v13 + 24);
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = (unsigned int *)(v13 + 33);
          while (1)
          {
            v17 = *v16 | ((unint64_t)*((unsigned __int8 *)v16 + 4) << 32);
            if (*(_DWORD *)v17 == 2)
              break;
            *(_DWORD *)v17 -= 2;
LABEL_12:
            ++v15;
            v16 = (unsigned int *)((char *)v16 + 5);
            if (v15 >= v14)
              goto LABEL_19;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)(*v16 | ((unint64_t)*((unsigned __int8 *)v16 + 4) << 32)), a2, a3, a4, a5, a6, a7, a8);
          v18 = *(_QWORD *)(StatusReg + 752);
          if (v18)
          {
            v19 = v17 >> 24;
            if (((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v17 >> 27) & 0x1FFC)) >> SBYTE3(v17)) & 1) != 0)
            {
LABEL_16:
              v20 = *(unsigned int *)(v18 + 8000);
              if (v20 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v18, v17, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v18 + 8 * v20) = v17 | 0x5000000000000;
                *(_DWORD *)(v18 + 8000) = v20 + 1;
              }
            }
            else
            {
              if (v19 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v17 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v17) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_16;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v18, v17, 1, a4, a5, a6, a7, a8);
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v17, (uint64_t)&bmalloc_heap_config, 1);
          }
          v14 = *(unsigned int *)(v13 + 24);
          goto LABEL_12;
        }
LABEL_19:
        v21 = *(_QWORD *)(StatusReg + 752);
        if (v21)
        {
          if (!(v13 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v13)) & 1) != 0)
          {
LABEL_22:
            v22 = *(unsigned int *)(v21 + 8000);
            if (v22 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v21, v13, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v21 + 8 * v22) = v13 | 0x5000000000000;
              *(_DWORD *)(v21 + 8000) = v22 + 1;
            }
            goto LABEL_5;
          }
          if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v13 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v13) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_22;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v13, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v13, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_5:
        ++v10;
      }
      while (v10 != v9);
    }
    WTF::fastFree(v8 - 16, a2, a3, a4, a5, a6, a7, a8);
    v30 = *((_QWORD *)this + 1);
    if (v30)
      WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>>,WTF::IntHash<int>,WTF::HashMap<int,std::unique_ptr<JSC::SourceProviderCacheItem>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(v30, v23, v24, v25, v26, v27, v28, v29);
  }
}

void JSC::SourceProviderCache::clear(JSC::SourceProviderCache *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 1) = 0;
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        if (*(_DWORD *)(v8 + 16 * v10) == 2147483646)
          goto LABEL_22;
        v12 = v8 + 16 * v10;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (!v13)
          goto LABEL_22;
        v14 = *(unsigned int *)(v13 + 24);
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = (unsigned int *)(v13 + 33);
          while (1)
          {
            v17 = *v16 | ((unint64_t)*((unsigned __int8 *)v16 + 4) << 32);
            if (*(_DWORD *)v17 == 2)
              break;
            *(_DWORD *)v17 -= 2;
LABEL_10:
            ++v15;
            v16 = (unsigned int *)((char *)v16 + 5);
            if (v15 >= v14)
              goto LABEL_17;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)(*v16 | ((unint64_t)*((unsigned __int8 *)v16 + 4) << 32)), a2, a3, a4, a5, a6, a7, a8);
          v18 = *(_QWORD *)(StatusReg + 752);
          if (v18)
          {
            v19 = v17 >> 24;
            if (((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v17 >> 27) & 0x1FFC)) >> SBYTE3(v17)) & 1) != 0)
            {
LABEL_14:
              v20 = *(unsigned int *)(v18 + 8000);
              if (v20 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v18, v17, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v18 + 8 * v20) = v17 | 0x5000000000000;
                *(_DWORD *)(v18 + 8000) = v20 + 1;
              }
            }
            else
            {
              if (v19 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v17 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v17) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_14;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v18, v17, 1, a4, a5, a6, a7, a8);
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v17, (uint64_t)&bmalloc_heap_config, 1);
          }
          v14 = *(unsigned int *)(v13 + 24);
          goto LABEL_10;
        }
LABEL_17:
        v21 = *(_QWORD *)(StatusReg + 752);
        if (v21)
        {
          if (!(v13 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v13)) & 1) != 0)
          {
LABEL_20:
            v22 = *(unsigned int *)(v21 + 8000);
            if (v22 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v21, v13, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v21 + 8 * v22) = v13 | 0x5000000000000;
              *(_DWORD *)(v21 + 8000) = v22 + 1;
            }
            goto LABEL_22;
          }
          if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v13 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v13) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_20;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v13, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v13, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_22:
        ++v10;
      }
      while (v10 != v9);
    }
    WTF::fastFree(v8 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::SourceProviderCache::add(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;

  v9 = (int)a2;
  v11 = (uint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10
    || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>>,WTF::IntHash<int>,WTF::HashMap<int,std::unique_ptr<JSC::SourceProviderCacheItem>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)(a1 + 8), 8u, 0), (v10 = *v11) != 0))
  {
    v12 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v12 & (v14 ^ HIWORD(v14));
  v16 = v10 + 16 * v15;
  v17 = *(_DWORD *)v16;
  if (*(_DWORD *)v16 != 0x7FFFFFFF)
  {
    v40 = 0;
    v41 = 1;
    while (v17 != v9)
    {
      if (v17 == 2147483646)
        v40 = v16;
      v15 = (v15 + v41) & v12;
      v16 = v10 + 16 * v15;
      v17 = *(_DWORD *)v16;
      ++v41;
      if (*(_DWORD *)v16 == 0x7FFFFFFF)
      {
        if (v40)
        {
          *(_DWORD *)v40 = 0x7FFFFFFF;
          *(_QWORD *)(v40 + 8) = 0;
          --*(_DWORD *)(*v11 - 16);
          v16 = v40;
        }
        goto LABEL_4;
      }
    }
    return;
  }
LABEL_4:
  *(_DWORD *)v16 = v9;
  v18 = *a3;
  *a3 = 0;
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v18;
  if (v19)
  {
    v20 = *(unsigned int *)(v19 + 24);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = (unsigned int *)(v19 + 33);
      do
      {
        v23 = (WTF::StringImpl *)(*v22 | ((unint64_t)*((unsigned __int8 *)v22 + 4) << 32));
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
          v20 = *(unsigned int *)(v19 + 24);
        }
        else
        {
          *(_DWORD *)v23 -= 2;
        }
        ++v21;
        v22 = (unsigned int *)((char *)v22 + 5);
      }
      while (v21 < v20);
    }
    v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v32)
    {
      pas_try_deallocate_slow_no_cache(v19, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_17;
    }
    if (!(v19 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v19 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v19)) & 1) != 0)
    {
      goto LABEL_15;
    }
    if (v19 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v19 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v19) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_15:
        v33 = *(unsigned int *)(v32 + 8000);
        if (v33 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v32, v19, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v32 + 8 * v33) = v19 | 0x5000000000000;
          *(_DWORD *)(v32 + 8000) = v33 + 1;
        }
        goto LABEL_17;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v32, v19, 1, a4, a5, a6, a7, a8);
  }
LABEL_17:
  v34 = *v11;
  if (*v11)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v36 = *v11;
  if (*v11)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 <= 0x400)
  {
    if (3 * v39 > 4 * v38)
      return;
    if (!(_DWORD)v39)
    {
      v42 = 8;
      goto LABEL_35;
    }
LABEL_32:
    v42 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_35:
    WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>>,WTF::IntHash<int>,WTF::HashMap<int,std::unique_ptr<JSC::SourceProviderCacheItem>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(v11, v42, (int *)v16);
    return;
  }
  if (v39 <= 2 * v38)
    goto LABEL_32;
}

uint64_t JSC::sourceTaintedOriginToString@<X0>(unsigned int a1@<W0>, uint64_t *a2@<X8>)
{
  int v3;
  char *v4;
  uint64_t result;

  if (a1 >= 4)
  {
    result = 44;
    __break(0xC471u);
  }
  else
  {
    v3 = dword_199157090[(char)a1];
    v4 = off_1E3596D80[(char)a1];
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)result = 2;
    *(_DWORD *)(result + 4) = v3;
    *(_QWORD *)(result + 8) = v4;
    *(_DWORD *)(result + 16) = 4;
    *a2 = result;
  }
  return result;
}

uint64_t JSC::sourceTaintedOriginFromStack(JSC *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  JSC::Wasm::NameSection *v24;

  if (*((_BYTE *)this + 41452))
  {
    JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v20, a2, this, 0, a5, a6, a7, a8);
    if (v21)
    {
      LOBYTE(v15) = 1;
      do
      {
        if (v22 && (*(_DWORD *)(v22 + 32) & 0x80000000) != 0)
        {
          v15 = v15 <= *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v22 + 64) + 40)
                                                                         + 116)
              ? *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v22 + 64) + 40) + 116)
              : v15;
          if (v15 == 3)
            break;
        }
        JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v20, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
      }
      while (v21);
    }
    else
    {
      LOBYTE(v15) = 1;
    }
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        v24 = (JSC::Wasm::NameSection *)v16;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v24, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  return v15;
}

uint64_t JSC::computeNewSourceTaintedOriginFromStack(JSC *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 v10;

  if (!*((_BYTE *)this + 41452))
    return 0;
  v10 = 1;
  v9 = &v10;
  JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::computeNewSourceTaintedOriginFromStack(JSC::VM &,JSC::CallFrame *)::$_0>(a2, this, &v9, a4, a5, a6, a7, a8);
  return v10;
}

void JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::computeNewSourceTaintedOriginFromStack(JSC::VM &,JSC::CallFrame *)::$_0>(JSC::CallFrame *a1, JSC::VM *a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  JSC::Wasm::NameSection *v23;

  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v19, a1, a2, 0, a5, a6, a7, a8);
  while (v20)
  {
    if (v21
      && (*(_DWORD *)(v21 + 32) & 0x80000000) != 0
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v21 + 64) + 40) + 116) >= 2u)
    {
      **a3 = 2;
      break;
    }
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v19, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      v23 = (JSC::Wasm::NameSection *)v16;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v23, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

void JSC::FunctionMetadataNode::~FunctionMetadataNode(JSC::FunctionMetadataNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
}

{
  _DWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (_DWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  JUMPOUT(0x19AEBAEF0);
}

void `non-virtual thunk to'JSC::FunctionMetadataNode::~FunctionMetadataNode(JSC::FunctionMetadataNode *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
}

{
  _DWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  JUMPOUT(0x19AEBAEF0);
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, int8x16_t *a5@<X4>, uint64_t a6@<X5>, int **a7@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  if (a2)
  {
    v9 = a2 - 1;
    if ((unint64_t)(a2 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198873DC4);
    }
  }
  else
  {
    v9 = 0;
  }
  if (a6)
  {
    v10 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
      goto LABEL_15;
  }
  else
  {
    v10 = 0;
  }
  if ((a4 & 0x80000000) != 0 || (v11 = a4 + v10, __OFADD__((_DWORD)a4, v10)) || __OFADD__(v9, v11))
  {
    *a7 = 0;
    goto LABEL_15;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v9 + v11, (a4 & 0xFF00000000) != 0, a1, v9, a3, a4, a5, v10, a7);
  if (!*a7)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x198873D98);
  }
  return result;
}

uint64_t JSC::ScriptFetchParameters::parseType(const char *a1, uint64_t a2)
{
  int v3;
  int v4;
  uint16x8_t v6;
  uint16x8_t v7;

  if (a1 != "json" && (_DWORD)a2 == 4)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 106 && *(_WORD *)(a1 + 1) == 28531 && *((_WORD *)a1 + 1) == 28271)
        goto LABEL_13;
    }
    else if (*(_WORD *)a1 == 106)
    {
      v3 = 0;
      if (*(_DWORD *)(a1 + 2) != 7274611)
      {
        v4 = 0;
        return v4 | (v3 << 8);
      }
      v4 = 0;
      if (*((_DWORD *)a1 + 1) != 7209071)
        return v4 | (v3 << 8);
      goto LABEL_13;
    }
    goto LABEL_18;
  }
  if (a1 != "json" || (_DWORD)a2 != 4)
  {
    if (a1 == "webassembly" || (_DWORD)a2 != 11)
    {
      if ((_DWORD)a2 == 11 && a1 == "webassembly")
        goto LABEL_23;
    }
    else if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 == 119 && *(_QWORD *)(a1 + 1) == 0x626D657373616265 && *(_QWORD *)(a1 + 3) == 0x796C626D65737361)
      {
LABEL_23:
        v4 = 2;
        v3 = 1;
        return v4 | (v3 << 8);
      }
    }
    else if (*(_WORD *)a1 == 119)
    {
      v6 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_199157070);
      v6.i16[0] = vminvq_u16(v6);
      v3 = v6.i32[0];
      if (v6.i32[0])
      {
        v7 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_199157080);
        v7.i16[0] = vminvq_u16(v7);
        v3 = v7.i32[0];
        if (v7.i32[0])
          goto LABEL_23;
      }
LABEL_19:
      v4 = 0;
      return v4 | (v3 << 8);
    }
LABEL_18:
    v3 = 0;
    goto LABEL_19;
  }
LABEL_13:
  v3 = 1;
  v4 = 3;
  return v4 | (v3 << 8);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, int8x16_t *a7@<X6>, unsigned int a8@<W7>, int **a9@<X8>)
{
  int v15;
  int *v17;
  _BYTE *v18;
  char *v19;
  _BYTE *v20;
  unsigned __int128 *v21;
  unsigned __int128 *v22;
  unsigned __int128 v23;
  char v24;
  _DWORD *v25;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v25);
        v17 = v25;
        if (v25)
        {
          v18 = v25 + 5;
          *v25 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4 == 1)
          {
            *v18 = a3->i8[0];
          }
          else if (a4)
          {
            memcpy(v17 + 5, a3, a4);
          }
          v20 = &v18[a4];
          if ((a6 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a6 == 1)
            {
              *v20 = *a5;
            }
            else if ((_DWORD)a6)
            {
              memcpy(v20, a5, a6);
            }
          }
          else
          {
            if (a6 < 0x10)
            {
              v21 = (unsigned __int128 *)v20;
            }
            else
            {
              v21 = (unsigned __int128 *)&v20[a6 & 0xFFFFFFF0];
              v22 = (unsigned __int128 *)v20;
              do
              {
                v23 = (unsigned __int128)vld2q_s8(a5);
                a5 += 32;
                *v22++ = v23;
              }
              while (v22 != v21);
            }
            while (v21 != (unsigned __int128 *)&v20[a6])
            {
              v24 = *a5;
              a5 += 2;
              *(_BYTE *)v21 = v24;
              v21 = (unsigned __int128 *)((char *)v21 + 1);
            }
          }
          result = (uint64_t)&v20[a6];
          if (a8 == 1)
          {
            *(_BYTE *)result = a7->i8[0];
          }
          else if (a8)
          {
            result = (uint64_t)memcpy((void *)result, a7, a8);
          }
        }
        goto LABEL_22;
      }
LABEL_24:
      v17 = 0;
      goto LABEL_22;
    }
LABEL_23:
    v17 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_22;
  }
  if (!(_DWORD)result)
    goto LABEL_23;
  if (result > 0x7FFFFFEF)
    goto LABEL_24;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v25);
  v17 = v25;
  if (v25)
  {
    v19 = (char *)(v25 + 5);
    *v25 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v19, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
LABEL_22:
  *a9 = v17;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, uint64_t a5, int8x16_t *a6, int a7)
{
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v7 = a1;
  v8 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &v7[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v19.val[0] = *a2;
      v11 = a2[1];
      v20.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v20.val[1] = 0uLL;
      v21.val[0] = v11;
      v19.val[1] = 0uLL;
      v14 = v7;
      vst2q_s8(v14, v19);
      v14 += 32;
      v21.val[1] = 0uLL;
      vst2q_s8(v14, v21);
      v15 = v7 + 64;
      vst2q_s8(v15, v20);
      v16 = v7 + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      v7 += 128;
    }
    while (v7 != v9);
    v7 = v9;
  }
  while (v7 != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)v7 = v17;
    v7 += 2;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v8, a4, a5, a6, a7);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21ScriptFetchParametersENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS_5tupleIJNSA_9ErrorTypeENS8_6StringEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21ScriptFetchParametersENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS_5tupleIJNSA_9ErrorTypeENS8_6StringEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>>,WTF::IntHash<int>,WTF::HashMap<int,std::unique_ptr<JSC::SourceProviderCacheItem>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::deallocateTable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (*(_DWORD *)(a1 + 16 * v10) == 2147483646)
        goto LABEL_21;
      v12 = a1 + 16 * v10;
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (!v13)
        goto LABEL_21;
      v14 = *(unsigned int *)(v13 + 24);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = (unsigned int *)(v13 + 33);
        while (1)
        {
          v17 = *v16 | ((unint64_t)*((unsigned __int8 *)v16 + 4) << 32);
          if (*(_DWORD *)v17 == 2)
            break;
          *(_DWORD *)v17 -= 2;
LABEL_9:
          ++v15;
          v16 = (unsigned int *)((char *)v16 + 5);
          if (v15 >= v14)
            goto LABEL_16;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)(*v16 | ((unint64_t)*((unsigned __int8 *)v16 + 4) << 32)), a2, a3, a4, a5, a6, a7, a8);
        v18 = *(_QWORD *)(StatusReg + 752);
        if (v18)
        {
          v19 = v17 >> 24;
          if (((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v17 >> 27) & 0x1FFC)) >> SBYTE3(v17)) & 1) != 0)
          {
LABEL_13:
            v20 = *(unsigned int *)(v18 + 8000);
            if (v20 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v18, v17, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v18 + 8 * v20) = v17 | 0x5000000000000;
              *(_DWORD *)(v18 + 8000) = v20 + 1;
            }
          }
          else
          {
            if (v19 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v17 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v17) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_13;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v18, v17, 1, a4, a5, a6, a7, a8);
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v17, (uint64_t)&bmalloc_heap_config, 1);
        }
        v14 = *(unsigned int *)(v13 + 24);
        goto LABEL_9;
      }
LABEL_16:
      v21 = *(_QWORD *)(StatusReg + 752);
      if (v21)
      {
        if (!(v13 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v13 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v13)) & 1) != 0)
        {
LABEL_19:
          v22 = *(unsigned int *)(v21 + 8000);
          if (v22 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v21, v13, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v21 + 8 * v22) = v13 | 0x5000000000000;
            *(_DWORD *)(v21 + 8000) = v22 + 1;
          }
          goto LABEL_21;
        }
        if (v13 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v13 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v13 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v13) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_19;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v13, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v13, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_21:
      ++v10;
    }
    while (v10 != v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::isNonLatin1IdentPart(unsigned int a1)
{
  int hasBinaryProperty;

  hasBinaryProperty = u_hasBinaryProperty(a1, UCHAR_ID_CONTINUE);
  return a1 >> 1 == 4102 || hasBinaryProperty != 0;
}

uint64_t JSC::Lexer<unsigned char>::parseStringSlowCase<false>(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  char *v9;
  char v10;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  int v39;
  _BYTE *v40;
  int v41;
  _BYTE *v42;
  char v43;
  char v44;
  char *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = *(unsigned __int8 *)(a1 + 176);
  *(_BYTE *)(a1 + 176) = 0;
  v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 1);
  *(_QWORD *)(a1 + 80) = v7;
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 96))
  {
    v8 = 0;
  }
  else
  {
    v8 = *v7;
    *(_BYTE *)(a1 + 176) = v8;
  }
  while (1)
  {
    if (v8 == v6)
    {
      result = 0;
      *a2 = 0;
      *(_DWORD *)(a1 + 36) = 0;
      return result;
    }
    if (v8 != 92)
    {
      if (v8 <= 0xD && (v8 == 10 || v8 == 13 || !v8 && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 96)))
      {
        v17 = WTF::fastCompactMalloc((WTF *)0x20);
        v25 = v17;
        v26 = 0xE00000002;
        v27 = "Unexpected EOF";
        goto LABEL_21;
      }
      *(_BYTE *)(a1 + 176) = 0;
      v9 = (char *)(*(_QWORD *)(a1 + 80) + 1);
      *(_QWORD *)(a1 + 80) = v9;
      if ((unint64_t)v9 < *(_QWORD *)(a1 + 96))
      {
        v10 = *v9;
LABEL_8:
        *(_BYTE *)(a1 + 176) = v10;
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    *(_BYTE *)(a1 + 176) = 0;
    v12 = *(_BYTE **)(a1 + 80);
    v13 = v12 + 1;
    *(_QWORD *)(a1 + 80) = v12 + 1;
    v14 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)(v12 + 1) >= v14)
    {
      v16 = 0;
    }
    else
    {
      v15 = (char)*v13;
      v16 = *v13;
      *(_BYTE *)(a1 + 176) = *v13;
      if (v15 < 0)
        goto LABEL_14;
    }
    if (JSC::singleCharacterEscapeValuesForASCII[v16])
      goto LABEL_68;
LABEL_14:
    switch(v16)
    {
      case 13:
        goto LABEL_15;
      case 120:
        *(_BYTE *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 80) = v12 + 2;
        if ((unint64_t)(v12 + 2) >= v14)
        {
          v37 = 0;
        }
        else
        {
          v37 = v12[2];
          *(_BYTE *)(a1 + 176) = v37;
        }
        if ((v37 - 48) >= 0xA && (v37 | 0x20u) - 97 > 5)
          goto LABEL_43;
        v38 = v12 + 3;
        if ((unint64_t)(v12 + 3) >= v14)
          v39 = 0;
        else
          v39 = *v38;
        *(_BYTE *)(a1 + 176) = 0;
        if ((v39 - 48) >= 0xA && (v39 | 0x20u) - 97 >= 6)
        {
          *(_QWORD *)(a1 + 80) = v38;
          if ((unint64_t)v38 < v14)
            *(_BYTE *)(a1 + 176) = *v38;
LABEL_43:
          v17 = WTF::fastCompactMalloc((WTF *)0x20);
          v25 = v17;
          v26 = 0x3300000002;
          v27 = "\\x can only be followed by a hex character sequence";
          goto LABEL_21;
        }
LABEL_66:
        v45 = v12 + 4;
        goto LABEL_69;
      case 117:
        *(_BYTE *)(a1 + 176) = 0;
        v40 = v12 + 2;
        *(_QWORD *)(a1 + 80) = v40;
        if ((unint64_t)v40 < v14)
          *(_BYTE *)(a1 + 176) = *v40;
        if (JSC::Lexer<unsigned char>::parseUnicodeEscape(a1) >= 0xFFFFFFFE)
        {
          v17 = WTF::fastCompactMalloc((WTF *)0x20);
          v25 = v17;
          v26 = 0x3700000002;
          v27 = "\\u can only be followed by a Unicode character sequence";
          goto LABEL_21;
        }
        goto LABEL_9;
      case 10:
LABEL_15:
        JSC::Lexer<unsigned char>::shiftLineTerminator((unsigned int *)a1);
        goto LABEL_9;
    }
    if (a3)
    {
      if ((unint64_t)(v16 - 48) <= 9)
      {
        *(_BYTE *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 80) = v12 + 2;
        if ((unint64_t)(v12 + 2) >= v14)
        {
          v41 = 0;
        }
        else
        {
          v41 = v12[2];
          *(_BYTE *)(a1 + 176) = v41;
        }
        if (v16 != 48)
          goto LABEL_58;
        if ((v41 - 48) <= 9)
        {
          *(_BYTE *)(a1 + 176) = 0;
          v42 = v12 + 3;
          *(_QWORD *)(a1 + 80) = v42;
          if ((unint64_t)v42 < v14)
            *(_BYTE *)(a1 + 176) = *v42;
LABEL_58:
          v17 = WTF::fastCompactMalloc((WTF *)0x20);
          v25 = v17;
          v26 = 0x3400000002;
          v27 = "The only valid numeric escape in strict mode is '\\0'";
LABEL_21:
          *(_QWORD *)v17 = v26;
          *(_QWORD *)(v17 + 8) = v27;
          *(_DWORD *)(v17 + 16) = 4;
          v28 = *(WTF::StringImpl **)(a1 + 152);
          *(_QWORD *)(a1 + 152) = v25;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::~StringImpl(v28, v18, v19, v20, v21, v22, v23, v24);
              WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
            }
            else
            {
              *(_DWORD *)v28 -= 2;
            }
          }
          if (*(_BYTE *)(a1 + 176))
            return 2;
          if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 96))
            return 1;
          return 2;
        }
        goto LABEL_9;
      }
    }
    else if ((v16 & 0xF8) == 0x30)
    {
      *(_BYTE *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v12 + 2;
      if ((unint64_t)(v12 + 2) >= v14)
        goto LABEL_9;
      v43 = v12[2];
      *(_BYTE *)(a1 + 176) = v43;
      if ((v43 & 0xF8) != 0x30)
        goto LABEL_9;
      *(_BYTE *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v12 + 3;
      if ((unint64_t)(v12 + 3) >= v14)
        goto LABEL_9;
      v44 = v12[3];
      *(_BYTE *)(a1 + 176) = v44;
      if ((v16 & 0xFC) != 0x30 || (v44 & 0xF8) != 0x30)
        goto LABEL_9;
      *(_BYTE *)(a1 + 176) = 0;
      goto LABEL_66;
    }
    if (!v16 && v13 == (_BYTE *)v14)
      break;
LABEL_68:
    *(_BYTE *)(a1 + 176) = 0;
    v45 = v12 + 2;
LABEL_69:
    *(_QWORD *)(a1 + 80) = v45;
    if ((unint64_t)v45 < v14)
    {
      v10 = *v45;
      goto LABEL_8;
    }
LABEL_9:
    v8 = *(unsigned __int8 *)(a1 + 176);
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x1C00000002;
  *(_QWORD *)(v53 + 8) = "Unterminated string constant";
  *(_DWORD *)(v53 + 16) = 4;
  v54 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v53;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  return 1;
}

uint64_t JSC::Lexer<unsigned char>::parseStringSlowCase<true>(uint64_t a1, uint64_t **a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v9;
  WTF::AtomStringImpl *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t result;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  int v101;
  __int16 v102;
  __int16 v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  WTF::StringImpl *v115;
  _QWORD *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  _BYTE *v126;
  int v127;
  unsigned int v128;
  char v129;
  char v130;
  char v131;
  _BYTE *v132;
  unsigned int v133;
  __int16 v134;
  __int16 v135;
  int v136;
  _WORD *v137;
  __int16 v138;
  WTF::AtomStringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;

  LODWORD(v9) = a3;
  LODWORD(v12) = *(unsigned __int8 *)(a1 + 176);
  *(_BYTE *)(a1 + 176) = 0;
  v13 = *(_QWORD *)(a1 + 80) + 1;
  *(_QWORD *)(a1 + 80) = v13;
  if (v13 >= *(_QWORD *)(a1 + 96))
  {
    v14 = 0;
  }
  else
  {
    v14 = *(unsigned __int8 *)v13;
    *(_BYTE *)(a1 + 176) = v14;
  }
  while (1)
  {
    if ((_DWORD)v14 == (_DWORD)v12)
    {
LABEL_36:
      v12 = *(WTF::AtomStringImpl **)(a1 + 24);
      LODWORD(v19) = *(_DWORD *)(a1 + 36);
LABEL_15:
      v22 = *(_QWORD *)(a1 + 192);
      if (!(_DWORD)v19)
      {
        v39 = (uint64_t *)(*(_QWORD *)(v22 + 41952) + 8);
        goto LABEL_25;
      }
      v13 = v19;
      v9 = *(_QWORD *)(a1 + 184);
      v23 = *(unsigned __int16 *)v12;
      if (v23 >= 0x80)
      {
        if ((_DWORD)v19 == 1 && v23 <= 0xFF)
        {
          JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v22 + 41968), *(_WORD *)v12, a4, a5, a6, a7, a8, &v156);
          v31 = v156;
        }
        else
        {
          WTF::AtomStringImpl::add((uint64_t)v12, v19, a4, a5, a6, a7, a8, &v156);
          v31 = v156;
          v32 = *(_DWORD *)v156;
          *(_DWORD *)v156 += 2;
          if (v32)
          {
            *(_DWORD *)v31 = v32;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
          }
        }
        v33 = (*(_QWORD *)v9)++;
        v34 = v33 >> 6;
        v35 = *(unsigned int *)(v9 + 20);
        if (v33 >> 6 >= v35)
        {
          v88 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
          v156 = v88;
          v89 = *(unsigned int *)(v9 + 20);
          if ((_DWORD)v89 == *(_DWORD *)(v9 + 16))
          {
            v90 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 8, v89 + 1, (unint64_t)&v156);
            v89 = *(unsigned int *)(v9 + 20);
            *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v89) = *v90;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v89) = v88;
          }
          v35 = (v89 + 1);
          *(_DWORD *)(v9 + 20) = v35;
          v33 = *(_QWORD *)v9 - 1;
          v34 = v33 >> 6;
        }
        if (v34 >= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x198874EC4);
        }
        v8 = *(_BYTE **)(v9 + 8);
        v36 = *(_QWORD *)&v8[8 * v34];
        v37 = v33 & 0x3F;
        *(_QWORD *)(v36 + 8 * v37) = v31;
        v38 = v33 >> 6;
        if (v38 >= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x198874ECCLL);
        }
LABEL_24:
        v39 = (uint64_t *)(*(_QWORD *)&v8[8 * v38] + 8 * v37);
LABEL_25:
        result = 0;
        *a2 = v39;
        *(_DWORD *)(a1 + 36) = 0;
        return result;
      }
      if ((_DWORD)v19 == 1)
      {
        v39 = *(uint64_t **)(v9 + 24 + 8 * v23);
        if (v39)
          goto LABEL_25;
        JSC::Identifier::fromString(v22, v12, 1uLL, a4, a5, a6, a7, a8, &v156);
        WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v9, (uint64_t *)&v156);
        v60 = v156;
        v156 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
            WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        v61 = *(_QWORD *)v9 - 1;
        v14 = v61 >> 6;
        if (v61 >> 6 >= *(unsigned int *)(v9 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x198874EECLL);
        }
        v62 = *(unsigned __int16 *)v12;
        if (v62 < 0x80)
        {
          v63 = *(_QWORD *)(v9 + 8);
          v64 = 8 * (v61 & 0x3F);
          *(_QWORD *)(v9 + 24 + 8 * v62) = *(_QWORD *)(v63 + 8 * v14) + v64;
          v39 = (uint64_t *)(*(_QWORD *)(v63 + 8 * v14) + v64);
          goto LABEL_25;
        }
      }
      else
      {
        v39 = *(uint64_t **)(v9 + 1048 + 8 * v23);
        if (v39 && WTF::equalInternal<char16_t>(*v39, (unint64_t)v12, v19))
          goto LABEL_25;
        WTF::AtomStringImpl::add((uint64_t)v12, v19, a4, a5, a6, a7, a8, &v156);
        v13 = (unint64_t)v156;
        v48 = *(_DWORD *)v156;
        *(_DWORD *)v156 += 2;
        if (v48)
        {
          *(_DWORD *)v13 = v48;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v41, v42, v43, v44, v45, v46, v47);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        v49 = (*(_QWORD *)v9)++;
        v50 = v49 >> 6;
        v51 = *(unsigned int *)(v9 + 20);
        if (v49 >> 6 >= v51)
        {
          v99 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
          v156 = v99;
          v100 = *(unsigned int *)(v9 + 20);
          if ((_DWORD)v100 == *(_DWORD *)(v9 + 16))
          {
            v116 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9 + 8, v100 + 1, (unint64_t)&v156);
            v100 = *(unsigned int *)(v9 + 20);
            *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v100) = *v116;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v100) = v99;
          }
          v51 = (v100 + 1);
          *(_DWORD *)(v9 + 20) = v51;
          v49 = *(_QWORD *)v9 - 1;
          v50 = v49 >> 6;
        }
        if (v50 >= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x198874ED4);
        }
        v8 = *(_BYTE **)(v9 + 8);
        v52 = *(_QWORD *)&v8[8 * v50];
        v37 = v49 & 0x3F;
        *(_QWORD *)(v52 + 8 * v37) = v13;
        v38 = v49 >> 6;
        if (v38 >= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x198874EDCLL);
        }
        v14 = *(unsigned __int16 *)v12;
        if (v14 < 0x80)
        {
          *(_QWORD *)(v9 + 1048 + 8 * v14) = *(_QWORD *)&v8[8 * v38] + 8 * v37;
          goto LABEL_24;
        }
      }
LABEL_90:
      __break(1u);
LABEL_91:
      v102 = 0;
      v101 = 0;
    }
    else
    {
      v15 = 0;
      while ((_DWORD)v14 != 92)
      {
        if (v14 <= 0xD
          && ((_DWORD)v14 == 10 || (_DWORD)v14 == 13 || !(_DWORD)v14 && v13 + v15 == *(_QWORD *)(a1 + 96)))
        {
          v104 = WTF::fastCompactMalloc((WTF *)0x20);
          v112 = v104;
          v113 = 0xE00000002;
          v114 = "Unexpected EOF";
          goto LABEL_79;
        }
        *(_BYTE *)(a1 + 176) = 0;
        v16 = (unsigned __int8 *)(v13 + v15 + 1);
        *(_QWORD *)(a1 + 80) = v16;
        if ((unint64_t)v16 >= *(_QWORD *)(a1 + 96))
        {
          v14 = 0;
        }
        else
        {
          v14 = *v16;
          *(_BYTE *)(a1 + 176) = v14;
        }
        ++v15;
        if ((_DWORD)v14 == (_DWORD)v12)
        {
          if (!v15)
            goto LABEL_36;
          if ((v15 & 0x8000000000000000) == 0)
          {
            v17 = *(unsigned int *)(a1 + 32);
            v18 = *(unsigned int *)(a1 + 36);
            v19 = v18 + v15;
            v20 = 2 * v18;
            if (v18 + v15 > v17)
            {
              v73 = v17 + (v17 >> 2);
              if (v73 >= 0x10)
                v74 = v73 + 1;
              else
                v74 = 16;
              if (v74 <= v19)
                v75 = v18 + v15;
              else
                v75 = v74;
              if (v75 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x198874EE4);
              }
              v76 = *(const void **)(a1 + 24);
              v77 = (void *)WTF::fastMalloc((WTF *)(2 * v75));
              *(_DWORD *)(a1 + 32) = v75;
              *(_QWORD *)(a1 + 24) = v77;
              memcpy(v77, v76, v20);
              if (v76)
              {
                if (*(const void **)(a1 + 24) == v76)
                {
                  *(_QWORD *)(a1 + 24) = 0;
                  *(_DWORD *)(a1 + 32) = 0;
                }
                WTF::fastFree((unint64_t)v76, v78, v79, a4, a5, a6, a7, a8);
              }
            }
            *(_DWORD *)(a1 + 36) = v19;
            v12 = *(WTF::AtomStringImpl **)(a1 + 24);
            do
            {
              v21 = *(unsigned __int8 *)v13++;
              *(_WORD *)((char *)v12 + v20) = v21;
              v20 += 2;
              --v15;
            }
            while (v15);
            goto LABEL_15;
          }
          goto LABEL_90;
        }
      }
      if (v15)
      {
        if (v15 < 0)
          goto LABEL_90;
        JSC::Lexer<unsigned char>::append16(a1, (unsigned __int8 *)v13, v15);
        v13 = *(_QWORD *)(a1 + 80);
      }
      *(_BYTE *)(a1 + 176) = 0;
      v8 = (_BYTE *)(v13 + 1);
      *(_QWORD *)(a1 + 80) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 96);
      if (v13 + 1 >= v14)
        goto LABEL_91;
      v101 = (char)*v8;
      *(_BYTE *)(a1 + 176) = *v8;
      v102 = v101;
      if (v101 < 0)
        goto LABEL_71;
    }
    v103 = JSC::singleCharacterEscapeValuesForASCII[v101];
    if (JSC::singleCharacterEscapeValuesForASCII[v101])
      goto LABEL_119;
LABEL_71:
    if (v101 == 13)
      goto LABEL_72;
    if (v101 == 120)
    {
      *(_BYTE *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v13 + 2;
      if (v13 + 2 >= v14)
      {
        v125 = 0;
      }
      else
      {
        v125 = *(unsigned __int8 *)(v13 + 2);
        *(_BYTE *)(a1 + 176) = v125;
      }
      if (v125 - 48 >= 0xA && ((v125 | 0x20) - 97) > 5u)
        goto LABEL_124;
      v126 = (_BYTE *)(v13 + 3);
      if (v13 + 3 >= v14)
        v127 = 0;
      else
        v127 = *v126;
      *(_BYTE *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v126;
      if ((v127 - 48) >= 0xA && (v127 | 0x20u) - 97 >= 6)
      {
        if ((unint64_t)v126 < v14)
          *(_BYTE *)(a1 + 176) = *v126;
LABEL_124:
        v104 = WTF::fastCompactMalloc((WTF *)0x20);
        v112 = v104;
        v113 = 0x3300000002;
        v114 = "\\x can only be followed by a hex character sequence";
        goto LABEL_79;
      }
      if ((unint64_t)v126 >= v14)
      {
        v128 = 0;
      }
      else
      {
        v128 = *v126;
        *(_BYTE *)(a1 + 176) = v128;
      }
      if (v125 >= 0x41)
        v129 = 9;
      else
        v129 = 0;
      v130 = v129 + v125;
      if (v128 >= 0x41)
        v131 = (v128 + 9) & 0xF;
      else
        v131 = v128 - 48;
      v103 = (v131 | (16 * v130));
      goto LABEL_119;
    }
    if (v101 != 117)
      break;
    *(_BYTE *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 80) = v13 + 2;
    if (v13 + 2 < v14)
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(v13 + 2);
    v133 = JSC::Lexer<unsigned char>::parseUnicodeEscape(a1);
    if (v133 > 0xFFFFFFFD)
    {
      v104 = WTF::fastCompactMalloc((WTF *)0x20);
      v112 = v104;
      v113 = 0x3700000002;
      v114 = "\\u can only be followed by a Unicode character sequence";
      goto LABEL_79;
    }
    JSC::Lexer<unsigned char>::recordUnicodeCodePoint(a1, v133);
LABEL_73:
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(unsigned __int8 *)(a1 + 176);
  }
  if (v101 == 10)
  {
LABEL_72:
    JSC::Lexer<unsigned char>::shiftLineTerminator((unsigned int *)a1);
    goto LABEL_73;
  }
  if (!(_DWORD)v9)
  {
    if ((v101 & 0xFFFFFFF8) == 0x30)
    {
      *(_BYTE *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v13 + 2;
      if (v13 + 2 >= v14 || (v134 = *(unsigned __int8 *)(v13 + 2), *(_BYTE *)(a1 + 176) = v134, (v134 & 0xF8) != 0x30))
      {
        v138 = v102 - 48;
LABEL_150:
        v137 = (_WORD *)a1;
LABEL_151:
        JSC::Lexer<unsigned char>::record16(v137, v138);
        goto LABEL_73;
      }
      *(_BYTE *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 80) = v13 + 3;
      if (v13 + 3 >= v14
        || (v135 = *(unsigned __int8 *)(v13 + 3), *(_BYTE *)(a1 + 176) = v135, (v101 & 0xFFFFFFFC) != 0x30)
        || (v135 & 0xF8) != 0x30)
      {
        v138 = v134 + 8 * v102 - 432;
        goto LABEL_150;
      }
      JSC::Lexer<unsigned char>::record16((_WORD *)a1, (v102 << 6) + 8 * v134 + v135 - 3504);
      goto LABEL_120;
    }
LABEL_153:
    if (!v101 && v8 == (_BYTE *)v14)
    {
      v146 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v146 = 0x1C00000002;
      *(_QWORD *)(v146 + 8) = "Unterminated string constant";
      *(_DWORD *)(v146 + 16) = 4;
      v147 = *(WTF::StringImpl **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v146;
      if (v147)
      {
        if (*(_DWORD *)v147 == 2)
        {
          WTF::StringImpl::~StringImpl(v147, v139, v140, v141, v142, v143, v144, v145);
          WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
        }
        else
        {
          *(_DWORD *)v147 -= 2;
        }
      }
      return 1;
    }
    v103 = v101;
LABEL_119:
    JSC::Lexer<unsigned char>::record16(a1, v103);
LABEL_120:
    *(_BYTE *)(a1 + 176) = 0;
    v132 = (_BYTE *)(*(_QWORD *)(a1 + 80) + 1);
    *(_QWORD *)(a1 + 80) = v132;
    if ((unint64_t)v132 < *(_QWORD *)(a1 + 96))
      *(_BYTE *)(a1 + 176) = *v132;
    goto LABEL_73;
  }
  if ((v101 - 48) > 9)
    goto LABEL_153;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 80) = v13 + 2;
  if (v13 + 2 >= v14)
  {
    v136 = 0;
  }
  else
  {
    v136 = *(unsigned __int8 *)(v13 + 2);
    *(_BYTE *)(a1 + 176) = v136;
  }
  if (v101 != 48)
    goto LABEL_148;
  if ((v136 - 48) > 9)
  {
    v137 = (_WORD *)a1;
    v138 = 0;
    goto LABEL_151;
  }
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 80) = v13 + 3;
  if (v13 + 3 < v14)
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(v13 + 3);
LABEL_148:
  v104 = WTF::fastCompactMalloc((WTF *)0x20);
  v112 = v104;
  v113 = 0x3400000002;
  v114 = "The only valid numeric escape in strict mode is '\\0'";
LABEL_79:
  *(_QWORD *)v104 = v113;
  *(_QWORD *)(v104 + 8) = v114;
  *(_DWORD *)(v104 + 16) = 4;
  v115 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v112;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v105, v106, v107, v108, v109, v110, v111);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 176))
    return 2;
  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 96))
    return 1;
  return 2;
}

void JSC::Lexer<unsigned char>::parseIdentifierSlowCase<false>(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  unsigned __int8 **v11[4];
  int v12;
  _BYTE *v13;
  _QWORD *v14;

  v13 = a4;
  v14 = a2;
  if (*a4 == 35)
    v5 = 13;
  else
    v5 = 12;
  if (*a4 == 35)
    v6 = a4 + 1;
  else
    v6 = a4;
  v12 = v5;
  v11[0] = &v13;
  v11[1] = (unsigned __int8 **)a1;
  v11[2] = (unsigned __int8 **)&v14;
  v11[3] = (unsigned __int8 **)&v12;
  JSC::Lexer<unsigned char>::parseIdentifierSlowCase<false>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,unsigned char const*)::{lambda(BOOL)#1}::operator()(v11, v6 == *(_BYTE **)(a1 + 80));
  if ((v7 & 0x100000) == 0)
  {
    while (1)
    {
      while (1)
      {
        v8 = *(unsigned __int8 *)(a1 + 176);
        if (JSC::typesOfLatin1Characters[v8] > 3u)
          break;
        *(_BYTE *)(a1 + 176) = 0;
        v9 = (_BYTE *)(*(_QWORD *)(a1 + 80) + 1);
        *(_QWORD *)(a1 + 80) = v9;
        if ((unint64_t)v9 < *(_QWORD *)(a1 + 96))
          *(_BYTE *)(a1 + 176) = *v9;
      }
      if ((_DWORD)v8 != 92)
        break;
      JSC::Lexer<unsigned char>::parseIdentifierSlowCase<false>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,unsigned char const*)::{lambda(BOOL)#1}::operator()(v11, 0);
      if ((v10 & 0x100000) != 0)
        return;
    }
    *v14 = 0;
    *(_DWORD *)(a1 + 36) = 0;
  }
}

void JSC::Lexer<unsigned char>::parseIdentifierSlowCase<false>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,unsigned char const*)::{lambda(BOOL)#1}::operator()(unsigned __int8 ***a1, int a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  _WORD *v18;
  __int16 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;

  v4 = (uint64_t)a1[1];
  v5 = **a1;
  v6 = *(unsigned __int8 **)(v4 + 80);
  if (v5 != v6)
  {
    v14 = (_QWORD *)(v4 + 24);
    v15 = v6 - v5;
    v16 = *(unsigned int *)(v4 + 36);
    v17 = v15 + v16;
    if (v15 + v16 > *(unsigned int *)(v4 + 32))
    {
      v23 = **a1;
      v22 = v15;
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 24, v15 + v16);
      v15 = v22;
      v5 = v23;
      v14 = (_QWORD *)(v4 + 24);
      v16 = *(unsigned int *)(v4 + 36);
    }
    if (v17 < v16)
    {
      __break(0xC471u);
      return;
    }
    v18 = (_WORD *)(*v14 + 2 * v16);
    do
    {
      v19 = *v5++;
      *v18++ = v19;
      --v15;
    }
    while (v15);
    *(_DWORD *)(v4 + 36) = v17;
  }
  v7 = *(unsigned __int8 *)(v4 + 176);
  if (v7 != 92)
  {
    if (a2)
    {
      if (!u_hasBinaryProperty(v7, UCHAR_ID_START))
        return;
    }
    else if (!JSC::isNonLatin1IdentPart(v7))
    {
      return;
    }
    JSC::Lexer<unsigned char>::append16(v4, *(unsigned __int8 **)(v4 + 80), 2);
    v20 = *(_QWORD *)(v4 + 80);
    v21 = *(_QWORD *)(v4 + 96);
    *(_BYTE *)(v4 + 176) = 0;
    v13 = (unsigned __int8 *)(v20 + 2);
    *(_QWORD *)(v4 + 80) = v13;
    if ((unint64_t)v13 < v21)
      *(_BYTE *)(v4 + 176) = *v13;
    goto LABEL_12;
  }
  (*a1[2])[8] = 1;
  *(_BYTE *)(v4 + 176) = 0;
  v8 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v8 + 1;
  v9 = *(_QWORD *)(v4 + 96);
  if (v8 + 1 < v9)
  {
    v10 = *(unsigned __int8 *)(v8 + 1);
    *(_BYTE *)(v4 + 176) = v10;
    if (v10 == 117)
    {
      *(_BYTE *)(v4 + 176) = 0;
      v11 = (_BYTE *)(v8 + 2);
      *(_QWORD *)(v4 + 80) = v11;
      if ((unint64_t)v11 < v9)
        *(_BYTE *)(v4 + 176) = *v11;
      v12 = JSC::Lexer<unsigned char>::parseUnicodeEscape(v4);
      if (v12 < 0xFFFFFFFE)
      {
        if (a2)
        {
          if (v12 >= 0x100)
          {
            if (!u_hasBinaryProperty(v12, UCHAR_ID_START))
              return;
            goto LABEL_11;
          }
          if (JSC::typesOfLatin1Characters[v12])
            return;
        }
        else if (v12 > 0xFF)
        {
          if (!JSC::isNonLatin1IdentPart(v12))
            return;
        }
        else if (JSC::typesOfLatin1Characters[v12] >= 4u)
        {
          return;
        }
LABEL_11:
        v13 = *(unsigned __int8 **)(v4 + 80);
LABEL_12:
        **a1 = v13;
      }
    }
  }
}

uint64_t JSC::Lexer<unsigned char>::parseIdentifierSlowCase<true>(uint64_t a1, uint64_t **a2, char a3, char a4, unsigned __int8 *a5)
{
  int v8;
  unsigned __int8 *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  _QWORD *v109;
  unsigned __int8 **v110[4];
  unsigned int v111;
  unsigned __int8 *v112;
  uint64_t **v113;
  WTF::StringImpl *v114;

  v112 = a5;
  v113 = a2;
  if (*a5 == 35)
    v8 = 13;
  else
    v8 = 12;
  if (*a5 == 35)
    v9 = a5 + 1;
  else
    v9 = a5;
  v111 = v8;
  v110[0] = &v112;
  v110[1] = (unsigned __int8 **)a1;
  v110[2] = (unsigned __int8 **)&v113;
  v110[3] = (unsigned __int8 **)&v111;
  result = JSC::Lexer<unsigned char>::parseIdentifierSlowCase<true>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,unsigned char const*)::{lambda(BOOL)#1}::operator()(v110, v9 == *(unsigned __int8 **)(a1 + 80));
  if ((result & 0x100000) != 0)
    return result;
  while (1)
  {
    while (1)
    {
      v16 = *(unsigned __int8 *)(a1 + 176);
      if (JSC::typesOfLatin1Characters[v16] > 3u)
        break;
      *(_BYTE *)(a1 + 176) = 0;
      v17 = (_BYTE *)(*(_QWORD *)(a1 + 80) + 1);
      *(_QWORD *)(a1 + 80) = v17;
      if ((unint64_t)v17 < *(_QWORD *)(a1 + 96))
        *(_BYTE *)(a1 + 176) = *v17;
    }
    if ((_DWORD)v16 != 92)
      break;
    result = JSC::Lexer<unsigned char>::parseIdentifierSlowCase<true>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,unsigned char const*)::{lambda(BOOL)#1}::operator()(v110, 0);
    if ((result & 0x100000) != 0)
      return result;
  }
  v18 = v112;
  v19 = *(unsigned __int8 **)(a1 + 80);
  if (v112 == v19)
  {
    v23 = *(WTF::AtomStringImpl **)(a1 + 24);
    LODWORD(v22) = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v20 = v19 - v112;
    v21 = *(unsigned int *)(a1 + 36);
    v22 = v20 + v21;
    if (v20 + v21 > *(unsigned int *)(a1 + 32))
    {
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v20 + v21);
      v21 = *(unsigned int *)(a1 + 36);
    }
    if (v22 < v21)
    {
      __break(0xC471u);
      goto LABEL_82;
    }
    v23 = *(WTF::AtomStringImpl **)(a1 + 24);
    v24 = 2 * v21;
    do
    {
      v25 = *v18++;
      *(_WORD *)((char *)v23 + v24) = v25;
      v24 += 2;
      --v20;
    }
    while (v20);
    *(_DWORD *)(a1 + 36) = v22;
  }
  v26 = *(_QWORD *)(a1 + 192);
  if (!(_DWORD)v22)
  {
    v45 = (uint64_t *)(*(_QWORD *)(v26 + 41952) + 8);
    goto LABEL_29;
  }
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(unsigned __int16 *)v23;
  if (v28 >= 0x80)
  {
    if ((_DWORD)v22 == 1 && v28 <= 0xFF)
    {
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v26 + 41968), *(_WORD *)v23, v11, v12, v13, v14, v15, &v114);
      v36 = v114;
    }
    else
    {
      WTF::AtomStringImpl::add((uint64_t)v23, v22, v11, v12, v13, v14, v15, &v114);
      v36 = v114;
      v37 = *(_DWORD *)v114;
      *(_DWORD *)v114 += 2;
      if (v37)
      {
        *(_DWORD *)v36 = v37;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      }
    }
    v38 = (*(_QWORD *)v27)++;
    v39 = v38 >> 6;
    v40 = *(unsigned int *)(v27 + 20);
    if (v38 >> 6 >= v40)
    {
      v96 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
      v114 = v96;
      v97 = *(unsigned int *)(v27 + 20);
      if ((_DWORD)v97 == *(_DWORD *)(v27 + 16))
      {
        v98 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 8, v97 + 1, (unint64_t)&v114);
        v97 = *(unsigned int *)(v27 + 20);
        *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v97) = *v98;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v97) = v96;
      }
      v40 = (v97 + 1);
      *(_DWORD *)(v27 + 20) = v40;
      v38 = *(_QWORD *)v27 - 1;
      v39 = v38 >> 6;
    }
    if (v39 >= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x198875A44);
    }
    v41 = *(_QWORD *)(v27 + 8);
    v42 = *(_QWORD *)(v41 + 8 * v39);
    v43 = v38 & 0x3F;
    *(_QWORD *)(v42 + 8 * v43) = v36;
    v44 = v38 >> 6;
    if (v44 >= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x198875A4CLL);
    }
    goto LABEL_28;
  }
  if ((_DWORD)v22 != 1)
  {
    v45 = *(uint64_t **)(v27 + 1048 + 8 * v28);
    if (v45 && WTF::equalInternal<char16_t>(*v45, (unint64_t)v23, v22))
      goto LABEL_29;
    WTF::AtomStringImpl::add((uint64_t)v23, v22, v11, v12, v13, v14, v15, &v114);
    v57 = v114;
    v58 = *(_DWORD *)v114;
    *(_DWORD *)v114 += 2;
    if (v58)
    {
      *(_DWORD *)v57 = v58;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    v59 = (*(_QWORD *)v27)++;
    v60 = v59 >> 6;
    v61 = *(unsigned int *)(v27 + 20);
    if (v59 >> 6 >= v61)
    {
      v107 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
      v114 = v107;
      v108 = *(unsigned int *)(v27 + 20);
      if ((_DWORD)v108 == *(_DWORD *)(v27 + 16))
      {
        v109 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 8, v108 + 1, (unint64_t)&v114);
        v108 = *(unsigned int *)(v27 + 20);
        *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v108) = *v109;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v108) = v107;
      }
      v61 = (v108 + 1);
      *(_DWORD *)(v27 + 20) = v61;
      v59 = *(_QWORD *)v27 - 1;
      v60 = v59 >> 6;
    }
    if (v60 >= v61)
    {
      __break(0xC471u);
      JUMPOUT(0x198875A54);
    }
    v41 = *(_QWORD *)(v27 + 8);
    v62 = *(_QWORD *)(v41 + 8 * v60);
    v43 = v59 & 0x3F;
    *(_QWORD *)(v62 + 8 * v43) = v57;
    v44 = v59 >> 6;
    if (v44 >= v61)
    {
      __break(0xC471u);
      JUMPOUT(0x198875A5CLL);
    }
    v63 = *(unsigned __int16 *)v23;
    if (v63 < 0x80)
    {
      *(_QWORD *)(v27 + 1048 + 8 * v63) = *(_QWORD *)(v41 + 8 * v44) + 8 * v43;
LABEL_28:
      v45 = (uint64_t *)(*(_QWORD *)(v41 + 8 * v44) + 8 * v43);
      goto LABEL_29;
    }
    goto LABEL_81;
  }
  v45 = *(uint64_t **)(v27 + 24 + 8 * v28);
  if (!v45)
  {
    JSC::Identifier::fromString(v26, v23, 1uLL, v11, v12, v13, v14, v15, &v114);
    WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v27, (uint64_t *)&v114);
    v74 = v114;
    v114 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
    }
    v75 = *(_QWORD *)v27 - 1;
    v76 = v75 >> 6;
    if (v75 >> 6 >= *(unsigned int *)(v27 + 20))
    {
      __break(0xC471u);
    }
    else
    {
      v77 = *(unsigned __int16 *)v23;
      if (v77 < 0x80)
      {
        v78 = *(_QWORD *)(v27 + 8);
        v79 = 8 * (v75 & 0x3F);
        *(_QWORD *)(v27 + 24 + 8 * v77) = *(_QWORD *)(v78 + 8 * v76) + v79;
        v45 = (uint64_t *)(*(_QWORD *)(v78 + 8 * v76) + v79);
        goto LABEL_29;
      }
    }
LABEL_81:
    __break(1u);
LABEL_82:
    JUMPOUT(0x198875A3CLL);
  }
LABEL_29:
  *v113 = v45;
  *(_DWORD *)(a1 + 36) = 0;
  if ((a3 & 1) != 0)
    return v111;
  v46 = *v45;
  if (!*v45)
    return v111;
  v47 = *(unsigned int *)(v46 + 16);
  if ((v47 & 0x20) != 0)
    return v111;
  v48 = (v47 >> 8) & 0x7F;
  v49 = JSC::mainTableIndex[2 * v48];
  if (v49 == 0xFFFF)
    return v111;
  while (1)
  {
    v64 = (__int16)v49;
    v65 = (unint64_t *)&(&JSC::mainTableValues)[5 * (__int16)v49];
    v66 = v65[1];
    if (v66)
    {
      if (WTF::equalInternal<unsigned char>(v46, *v65, v66 - 1))
        break;
    }
    LODWORD(v48) = (__int16)JSC::mainTableIndex[2 * (int)v48 + 1];
    if ((_DWORD)v48 == -1)
      return v111;
    LOWORD(v49) = JSC::mainTableIndex[2 * (int)v48];
  }
  result = 1048592;
  if (LODWORD((&JSC::mainTableValues)[5 * v64 + 3]) == 532 && (a4 & 1) == 0)
    return v111;
  return result;
}

uint64_t JSC::Lexer<unsigned char>::parseIdentifierSlowCase<true>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,unsigned char const*)::{lambda(BOOL)#1}::operator()(unsigned __int8 ***a1, int a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  int v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  _WORD *v24;
  __int16 v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unsigned __int8 *v29;
  __int16 v30;

  v4 = (uint64_t)a1[1];
  v5 = **a1;
  v6 = *(unsigned __int8 **)(v4 + 80);
  if (v5 != v6)
  {
    v21 = v6 - v5;
    v22 = *(unsigned int *)(v4 + 36);
    v23 = v21 + v22;
    if (v21 + v22 > *(unsigned int *)(v4 + 32))
    {
      v28 = v21;
      v29 = **a1;
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 24, v21 + v22);
      v21 = v28;
      v5 = v29;
      v22 = *(unsigned int *)(v4 + 36);
    }
    if (v23 < v22)
      goto LABEL_49;
    v24 = (_WORD *)(*(_QWORD *)(v4 + 24) + 2 * v22);
    do
    {
      v25 = *v5++;
      *v24++ = v25;
      --v21;
    }
    while (v21);
    *(_DWORD *)(v4 + 36) = v23;
  }
  v7 = *(unsigned __int8 *)(v4 + 176);
  if (v7 != 92)
  {
    if (a2)
    {
      if (!u_hasBinaryProperty(v7, UCHAR_ID_START))
        return 1048594;
    }
    else if (!JSC::isNonLatin1IdentPart(v7))
    {
      return 1048594;
    }
    JSC::Lexer<unsigned char>::append16(v4, *(unsigned __int8 **)(v4 + 80), 2);
    v26 = *(_QWORD *)(v4 + 80);
    v27 = *(_QWORD *)(v4 + 96);
    *(_BYTE *)(v4 + 176) = 0;
    v17 = (unsigned __int8 *)(v26 + 2);
    *(_QWORD *)(v4 + 80) = v17;
    if ((unint64_t)v17 < v27)
      *(_BYTE *)(v4 + 176) = *v17;
    goto LABEL_15;
  }
  v8 = 1048579;
  (*a1[2])[8] = 1;
  *(_BYTE *)(v4 + 176) = 0;
  v9 = *(_QWORD *)(v4 + 80);
  v10 = (unsigned __int8 *)(v9 + 1);
  *(_QWORD *)(v4 + 80) = v9 + 1;
  v11 = *(_QWORD *)(v4 + 96);
  if (v9 + 1 >= v11)
  {
LABEL_41:
    if (v10 == (unsigned __int8 *)v11)
      return 3145728;
    else
      return 1048577;
  }
  v12 = *v10;
  *(_BYTE *)(v4 + 176) = v12;
  if (v12 != 117)
  {
    if (v12)
      return 1048577;
    goto LABEL_41;
  }
  *(_BYTE *)(v4 + 176) = 0;
  v13 = (_BYTE *)(v9 + 2);
  *(_QWORD *)(v4 + 80) = v13;
  if ((unint64_t)v13 < v11)
    *(_BYTE *)(v4 + 176) = *v13;
  v14 = JSC::Lexer<unsigned char>::parseUnicodeEscape(v4);
  if (v14 >= 0xFFFFFFFE)
  {
    if (v14 == -2)
      return 3145730;
    else
      return 1048579;
  }
  else
  {
    v15 = v14;
    if (!a2)
    {
      if (v14 <= 0xFF)
      {
        if (JSC::typesOfLatin1Characters[v14] >= 4u)
          return v8;
        goto LABEL_12;
      }
      if (!JSC::isNonLatin1IdentPart(v14))
        return v8;
LABEL_11:
      if (!HIWORD(v15))
      {
LABEL_12:
        v30 = v15;
        v16 = *(unsigned int *)(v4 + 36);
        if ((_DWORD)v16 == *(_DWORD *)(v4 + 32))
        {
          WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>(v4 + 24, (unint64_t)&v30);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(v4 + 24) + 2 * v16) = v15;
          *(_DWORD *)(v4 + 36) = v16 + 1;
        }
        goto LABEL_14;
      }
      v19 = *(unsigned int *)(v4 + 36);
      v20 = v19 + 2;
      if (v19 + 2 <= *(unsigned int *)(v4 + 32)
        || (WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 24, v19 + 2), v19 = *(unsigned int *)(v4 + 36), v20 >= v19))
      {
        *(_DWORD *)(*(_QWORD *)(v4 + 24) + 2 * v19) = (unsigned __int16)((v15 >> 10) - 10304) | ((v15 & 0x3FF) << 16) | 0xDC000000;
        *(_DWORD *)(v4 + 36) = v20;
LABEL_14:
        v17 = *(unsigned __int8 **)(v4 + 80);
LABEL_15:
        **a1 = v17;
        return *(unsigned int *)a1[3];
      }
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x198875C68);
    }
    if (v14 < 0x100)
    {
      if (JSC::typesOfLatin1Characters[v14])
        return v8;
      goto LABEL_12;
    }
    if (u_hasBinaryProperty(v14, UCHAR_ID_START))
      goto LABEL_11;
  }
  return v8;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!HIDWORD(v9))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)v9);
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_WORD *WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>(uint64_t a1, unint64_t a2)
{
  _WORD *result;
  uint64_t v4;

  result = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 31)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, 2 * v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::Lexer<char16_t>::parseStringSlowCase<false>(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  __int16 v9;
  __int16 *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unsigned int v14;
  __int16 *v15;
  uint64_t result;
  _WORD *v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  int v42;
  int v43;
  _WORD *v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = *(unsigned __int16 *)(a1 + 176);
  *(_WORD *)(a1 + 176) = 0;
  v7 = (unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2);
  *(_QWORD *)(a1 + 80) = v7;
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 96))
  {
    v8 = 0;
  }
  else
  {
    v8 = *v7;
    *(_WORD *)(a1 + 176) = v8;
  }
  if (v8 == v6)
  {
LABEL_32:
    result = 0;
    *a2 = 0;
    *(_DWORD *)(a1 + 36) = 0;
    return result;
  }
  while (v8 != 92)
  {
    if (v8 <= 0xD && (v8 == 10 || v8 == 13 || !v8 && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 96)))
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      v28 = v20;
      v29 = 0xE00000002;
      v30 = "Unexpected EOF";
      goto LABEL_41;
    }
    *(_WORD *)(a1 + 176) = 0;
    v10 = (__int16 *)(*(_QWORD *)(a1 + 80) + 2);
    *(_QWORD *)(a1 + 80) = v10;
    if ((unint64_t)v10 < *(_QWORD *)(a1 + 96))
    {
      v9 = *v10;
LABEL_7:
      *(_WORD *)(a1 + 176) = v9;
    }
LABEL_8:
    v8 = *(unsigned __int16 *)(a1 + 176);
    if (v8 == v6)
      goto LABEL_32;
  }
  *(_WORD *)(a1 + 176) = 0;
  v11 = *(unsigned __int16 **)(a1 + 80);
  v12 = v11 + 1;
  *(_QWORD *)(a1 + 80) = v11 + 1;
  v13 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)(v11 + 1) >= v13)
  {
    v14 = 0u;
  }
  else
  {
    v14 = *v12;
    *(_WORD *)(a1 + 176) = v14;
    if (v14 > 0x7F)
      goto LABEL_23;
  }
  if (JSC::singleCharacterEscapeValuesForASCII[v14])
    goto LABEL_16;
LABEL_23:
  if (v14 == 10 || v14 == 13 || (v14 & 0xFFFE) == 8232)
  {
    JSC::Lexer<char16_t>::shiftLineTerminator((unsigned int *)a1);
    goto LABEL_8;
  }
  if (v14 == 117)
  {
    *(_WORD *)(a1 + 176) = 0;
    v19 = v11 + 2;
    *(_QWORD *)(a1 + 80) = v19;
    if ((unint64_t)v19 < v13)
      *(_WORD *)(a1 + 176) = *v19;
    if (JSC::Lexer<char16_t>::parseUnicodeEscape(a1) >= 0xFFFFFFFE)
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      v28 = v20;
      v29 = 0x3700000002;
      v30 = "\\u can only be followed by a Unicode character sequence";
      goto LABEL_41;
    }
    goto LABEL_8;
  }
  if (v14 == 120)
  {
    *(_WORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 80) = v11 + 2;
    if ((unint64_t)(v11 + 2) >= v13)
    {
      v40 = 0;
    }
    else
    {
      v40 = v11[2];
      *(_WORD *)(a1 + 176) = v40;
    }
    if ((v40 - 48) >= 0xA && (v40 | 0x20u) - 97 > 5)
      goto LABEL_84;
    v41 = v11 + 3;
    if ((unint64_t)(v11 + 3) >= v13)
      v42 = 0;
    else
      v42 = (unsigned __int16)*v41;
    *(_WORD *)(a1 + 176) = 0;
    if ((v42 - 48) >= 0xA && (v42 | 0x20u) - 97 >= 6)
    {
      *(_QWORD *)(a1 + 80) = v41;
      if ((unint64_t)v41 < v13)
        *(_WORD *)(a1 + 176) = *v41;
LABEL_84:
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      v28 = v20;
      v29 = 0x3300000002;
      v30 = "\\x can only be followed by a hex character sequence";
      goto LABEL_41;
    }
    goto LABEL_56;
  }
  if (a3)
  {
    if (v14 - 48 > 9)
      goto LABEL_76;
    *(_WORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 80) = v11 + 2;
    if ((unint64_t)(v11 + 2) >= v13)
    {
      v43 = 0;
    }
    else
    {
      v43 = v11[2];
      *(_WORD *)(a1 + 176) = v43;
    }
    if (v14 != 48)
      goto LABEL_65;
    if ((v43 - 48) <= 9)
    {
      *(_WORD *)(a1 + 176) = 0;
      v44 = v11 + 3;
      *(_QWORD *)(a1 + 80) = v44;
      if ((unint64_t)v44 < v13)
        *(_WORD *)(a1 + 176) = *v44;
LABEL_65:
      v20 = WTF::fastCompactMalloc((WTF *)0x20);
      v28 = v20;
      v29 = 0x3400000002;
      v30 = "The only valid numeric escape in strict mode is '\\0'";
LABEL_41:
      *(_QWORD *)v20 = v29;
      *(_QWORD *)(v20 + 8) = v30;
      *(_DWORD *)(v20 + 16) = 4;
      v31 = *(WTF::StringImpl **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v28;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v21, v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
      }
      if (*(_WORD *)(a1 + 176))
        return 2;
      if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 96))
        return 1;
      return 2;
    }
    goto LABEL_8;
  }
  if ((v14 & 0xFFF8) == 0x30)
  {
    *(_WORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 80) = v11 + 2;
    if ((unint64_t)(v11 + 2) >= v13)
      goto LABEL_8;
    v45 = v11[2];
    *(_WORD *)(a1 + 176) = v45;
    if ((v45 & 0xFFF8) != 0x30)
      goto LABEL_8;
    *(_WORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 80) = v11 + 3;
    if ((unint64_t)(v11 + 3) >= v13)
      goto LABEL_8;
    v46 = v11[3];
    *(_WORD *)(a1 + 176) = v46;
    if ((v14 & 0xFFFC) != 0x30 || (v46 & 0xFFF8) != 0x30)
      goto LABEL_8;
    *(_WORD *)(a1 + 176) = 0;
LABEL_56:
    v15 = (__int16 *)(v11 + 4);
LABEL_17:
    *(_QWORD *)(a1 + 80) = v15;
    if ((unint64_t)v15 >= v13)
      goto LABEL_8;
    v9 = *v15;
    goto LABEL_7;
  }
LABEL_76:
  if (v14 || v12 != (unsigned __int16 *)v13)
  {
LABEL_16:
    *(_WORD *)(a1 + 176) = 0;
    v15 = (__int16 *)(v11 + 2);
    goto LABEL_17;
  }
  v54 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v54 = 0x1C00000002;
  *(_QWORD *)(v54 + 8) = "Unterminated string constant";
  *(_DWORD *)(v54 + 16) = 4;
  v55 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v54;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  return 1;
}

uint64_t JSC::Lexer<char16_t>::parseStringSlowCase<true>(uint64_t a1, uint64_t **a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  uint64_t *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  void **v14;
  int64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  unint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int16 *v68;
  unint64_t v69;
  unsigned int v70;
  __int16 v71;
  uint64_t v72;
  __int16 *v73;
  __int16 v74;
  uint64_t v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  BOOL v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  const void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  _QWORD *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _WORD *v138;
  unsigned int v139;
  _WORD *v140;
  int v141;
  unsigned int v142;
  char v143;
  char v144;
  char v145;
  __int16 v146;
  __int16 *v147;
  _WORD *v148;
  int v149;
  unsigned __int16 v150;
  __int16 v151;
  unsigned __int16 v152;
  WTF::AtomStringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  void *__src;
  WTF::StringImpl *v172;

  LODWORD(v8) = a3;
  LODWORD(v11) = *(unsigned __int16 *)(a1 + 176);
  *(_WORD *)(a1 + 176) = 0;
  v12 = (unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2);
  *(_QWORD *)(a1 + 80) = v12;
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 96))
    goto LABEL_112;
  v13 = *v12;
  *(_WORD *)(a1 + 176) = v13;
  while (1)
  {
    if (v13 == (_DWORD)v11)
      goto LABEL_16;
    v14 = (void **)(a1 + 24);
LABEL_5:
    v15 = 0;
    do
    {
      if (v13 == 92)
      {
        if (v15)
        {
          if (v15 <= -2)
            goto LABEL_111;
          v64 = *(unsigned int *)(a1 + 32);
          v65 = *(unsigned int *)(a1 + 36);
          v66 = v65 + (v15 >> 1);
          if (v66 > v64)
          {
            v127 = v64 + (v64 >> 2);
            if (v127 >= 0x10)
              v128 = v127 + 1;
            else
              v128 = 16;
            if (v128 <= v66)
              v129 = v65 + (v15 >> 1);
            else
              v129 = v128;
            if (v129 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198876E40);
            }
            v170 = v129;
            __src = *v14;
            v130 = (void *)WTF::fastMalloc((WTF *)(2 * v129));
            *(_DWORD *)(a1 + 32) = v170;
            *(_QWORD *)(a1 + 24) = v130;
            memcpy(v130, __src, 2 * v65);
            if (__src)
            {
              if (*v14 == __src)
              {
                *(_QWORD *)(a1 + 24) = 0;
                *(_DWORD *)(a1 + 32) = 0;
              }
              WTF::fastFree((unint64_t)__src, v131, v132, v133, v134, v135, v136, v137);
            }
          }
          v67 = *(unsigned int *)(a1 + 36);
          if (v66 < v67)
            goto LABEL_198;
          memcpy((void *)(*(_QWORD *)(a1 + 24) + 2 * v67), v12, v15);
          *(_DWORD *)(a1 + 36) = v66;
          v12 = *(unsigned __int16 **)(a1 + 80);
        }
        *(_WORD *)(a1 + 176) = 0;
        v68 = v12 + 1;
        *(_QWORD *)(a1 + 80) = v12 + 1;
        v69 = *(_QWORD *)(a1 + 96);
        if ((unint64_t)(v12 + 1) >= v69)
        {
          v70 = 0u;
        }
        else
        {
          v70 = *v68;
          *(_WORD *)(a1 + 176) = v70;
          if (v70 > 0x7F)
            goto LABEL_76;
        }
        v71 = JSC::singleCharacterEscapeValuesForASCII[v70];
        if (JSC::singleCharacterEscapeValuesForASCII[v70])
        {
          LOWORD(v172) = JSC::singleCharacterEscapeValuesForASCII[v70];
          v72 = *(unsigned int *)(a1 + 36);
          if ((_DWORD)v72 == *(_DWORD *)(a1 + 32))
          {
            v138 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v72 + 1, (unint64_t)&v172);
            v72 = *(unsigned int *)(a1 + 36);
            *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v72) = *v138;
            v68 = *(unsigned __int16 **)(a1 + 80);
            v69 = *(_QWORD *)(a1 + 96);
          }
          else
          {
            *((_WORD *)*v14 + v72) = v71;
          }
          *(_DWORD *)(a1 + 36) = v72 + 1;
          *(_WORD *)(a1 + 176) = 0;
          v73 = (__int16 *)(v68 + 1);
          *(_QWORD *)(a1 + 80) = v73;
          if ((unint64_t)v73 < v69)
          {
            v74 = *v73;
LABEL_58:
            *(_WORD *)(a1 + 176) = v74;
            goto LABEL_59;
          }
          goto LABEL_59;
        }
LABEL_76:
        v97 = v70 == 10 || v70 == 13;
        if (v97 || v70 >> 1 == 4116)
        {
          JSC::Lexer<char16_t>::shiftLineTerminator((unsigned int *)a1);
          goto LABEL_59;
        }
        if (v70 == 117)
        {
          *(_WORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 80) = v12 + 2;
          if ((unint64_t)(v12 + 2) < v69)
            *(_WORD *)(a1 + 176) = v12[2];
          v113 = JSC::Lexer<char16_t>::parseUnicodeEscape(a1);
          if (v113 > 0xFFFFFFFD)
          {
            v75 = WTF::fastCompactMalloc((WTF *)0x20);
            v83 = v75;
            v84 = 0x3700000002;
            v85 = "\\u can only be followed by a Unicode character sequence";
            goto LABEL_66;
          }
          if (HIWORD(v113))
          {
            LOWORD(v172) = (v113 >> 10) - 10304;
            WORD1(v172) = v113 & 0x3FF | 0xDC00;
            JSC::Lexer<char16_t>::append16((unsigned int *)a1, &v172, 2);
          }
          else
          {
            LOWORD(v172) = v113;
            v114 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v114 == *(_DWORD *)(a1 + 32))
            {
              v148 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v114 + 1, (unint64_t)&v172);
              v114 = *(unsigned int *)(a1 + 36);
              *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v114) = *v148;
            }
            else
            {
              *((_WORD *)*v14 + v114) = v113;
            }
            *(_DWORD *)(a1 + 36) = v114 + 1;
          }
          goto LABEL_59;
        }
        if (v70 == 120)
        {
          *(_WORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 80) = v12 + 2;
          if ((unint64_t)(v12 + 2) >= v69)
          {
            v139 = 0;
          }
          else
          {
            v139 = v12[2];
            *(_WORD *)(a1 + 176) = v139;
          }
          if (v139 - 48 >= 0xA && (v139 | 0x20) - 97 > 5)
            goto LABEL_170;
          v140 = v12 + 3;
          if ((unint64_t)(v12 + 3) >= v69)
            v141 = 0;
          else
            v141 = (unsigned __int16)*v140;
          *(_WORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 80) = v140;
          if ((v141 - 48) >= 0xA && (v141 | 0x20u) - 97 >= 6)
          {
            if ((unint64_t)v140 < v69)
              *(_WORD *)(a1 + 176) = *v140;
LABEL_170:
            v75 = WTF::fastCompactMalloc((WTF *)0x20);
            v83 = v75;
            v84 = 0x3300000002;
            v85 = "\\x can only be followed by a hex character sequence";
            goto LABEL_66;
          }
          if ((unint64_t)v140 >= v69)
          {
            v142 = 0;
          }
          else
          {
            v142 = (unsigned __int16)*v140;
            *(_WORD *)(a1 + 176) = v142;
          }
          if (v139 >= 0x41)
            v143 = 9;
          else
            v143 = 0;
          v144 = v143 + v139;
          if (v142 >= 0x41)
            v145 = (v142 + 9) & 0xF;
          else
            v145 = v142 - 48;
          v146 = (v145 | (16 * v144));
          goto LABEL_144;
        }
        if ((_DWORD)v8)
        {
          if (v70 - 48 <= 9)
          {
            *(_WORD *)(a1 + 176) = 0;
            *(_QWORD *)(a1 + 80) = v12 + 2;
            if ((unint64_t)(v12 + 2) >= v69)
            {
              v149 = 0;
            }
            else
            {
              v149 = v12[2];
              *(_WORD *)(a1 + 176) = v149;
            }
            if (v70 != 48)
              goto LABEL_173;
            if ((v149 - 48) <= 9)
            {
              *(_WORD *)(a1 + 176) = 0;
              *(_QWORD *)(a1 + 80) = v12 + 3;
              if ((unint64_t)(v12 + 3) < v69)
                *(_WORD *)(a1 + 176) = v12[3];
LABEL_173:
              v75 = WTF::fastCompactMalloc((WTF *)0x20);
              v83 = v75;
              v84 = 0x3400000002;
              v85 = "The only valid numeric escape in strict mode is '\\0'";
LABEL_66:
              *(_QWORD *)v75 = v84;
              *(_QWORD *)(v75 + 8) = v85;
              *(_DWORD *)(v75 + 16) = 4;
              v86 = *(WTF::StringImpl **)(a1 + 152);
              *(_QWORD *)(a1 + 152) = v83;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                {
                  WTF::StringImpl::~StringImpl(v86, v76, v77, v78, v79, v80, v81, v82);
                  WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
                }
                else
                {
                  *(_DWORD *)v86 -= 2;
                }
              }
              if (*(_WORD *)(a1 + 176))
                return 2;
              if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 96))
                return 1;
              return 2;
            }
            JSC::Lexer<char16_t>::record16(a1, 0);
            goto LABEL_59;
          }
        }
        else if ((v70 & 0xFFF8) == 0x30)
        {
          *(_WORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 80) = v12 + 2;
          if ((unint64_t)(v12 + 2) < v69
            && (v150 = v12[2], *(_WORD *)(a1 + 176) = v150, (v150 & 0xFFF8) == 0x30))
          {
            *(_WORD *)(a1 + 176) = 0;
            *(_QWORD *)(a1 + 80) = v12 + 3;
            if ((unint64_t)(v12 + 3) < v69)
            {
              v152 = v12[3];
              *(_WORD *)(a1 + 176) = v152;
              if ((v70 & 0xFFFC) == 0x30 && (v152 & 0xFFF8) == 0x30)
              {
                v146 = ((_WORD)v70 << 6) + 8 * v150 + v152 - 3504;
LABEL_144:
                JSC::Lexer<char16_t>::record16(a1, v146);
                goto LABEL_145;
              }
            }
            v151 = v150 + 8 * v70 - 432;
          }
          else
          {
            v151 = v70 - 48;
          }
          JSC::Lexer<char16_t>::record16(a1, v151);
          goto LABEL_59;
        }
        if (!v70 && v68 == (unsigned __int16 *)v69)
        {
          v160 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v160 = 0x1C00000002;
          *(_QWORD *)(v160 + 8) = "Unterminated string constant";
          *(_DWORD *)(v160 + 16) = 4;
          v161 = *(WTF::StringImpl **)(a1 + 152);
          *(_QWORD *)(a1 + 152) = v160;
          if (v161)
          {
            if (*(_DWORD *)v161 == 2)
            {
              WTF::StringImpl::~StringImpl(v161, v153, v154, v155, v156, v157, v158, v159);
              WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
            }
            else
            {
              *(_DWORD *)v161 -= 2;
            }
          }
          return 1;
        }
        JSC::Lexer<char16_t>::record16(a1, v70);
LABEL_145:
        *(_WORD *)(a1 + 176) = 0;
        v147 = (__int16 *)(*(_QWORD *)(a1 + 80) + 2);
        *(_QWORD *)(a1 + 80) = v147;
        if ((unint64_t)v147 < *(_QWORD *)(a1 + 96))
        {
          v74 = *v147;
          goto LABEL_58;
        }
LABEL_59:
        v12 = *(unsigned __int16 **)(a1 + 80);
        v13 = *(unsigned __int16 *)(a1 + 176);
        if (v13 == (_DWORD)v11)
          goto LABEL_16;
        goto LABEL_5;
      }
      if (v13 <= 0xD
        && (v13 == 10 || v13 == 13 || !v13 && &v12[(unint64_t)v15 / 2] == *(unsigned __int16 **)(a1 + 96)))
      {
        v75 = WTF::fastCompactMalloc((WTF *)0x20);
        v83 = v75;
        v84 = 0xE00000002;
        v85 = "Unexpected EOF";
        goto LABEL_66;
      }
      *(_WORD *)(a1 + 176) = 0;
      v16 = &v12[(unint64_t)v15 / 2 + 1];
      *(_QWORD *)(a1 + 80) = v16;
      if ((unint64_t)v16 >= *(_QWORD *)(a1 + 96))
      {
        v13 = 0;
      }
      else
      {
        v13 = *v16;
        *(_WORD *)(a1 + 176) = v13;
      }
      v15 += 2;
    }
    while (v13 != (_DWORD)v11);
    if (!v15)
      goto LABEL_16;
    if (v15 > -2)
      break;
LABEL_111:
    __break(1u);
LABEL_112:
    v13 = 0;
  }
  v17 = *(unsigned int *)(a1 + 32);
  v18 = *(unsigned int *)(a1 + 36);
  v19 = v18 + (v15 >> 1);
  if (v19 <= v17)
    goto LABEL_14;
  v99 = v17 + (v17 >> 2);
  if (v99 >= 0x10)
    v100 = v99 + 1;
  else
    v100 = 16;
  if (v100 <= v19)
    v101 = v18 + (v15 >> 1);
  else
    v101 = v100;
  if (v101 >> 31)
  {
LABEL_198:
    __break(0xC471u);
    JUMPOUT(0x198876E38);
  }
  v102 = *v14;
  v103 = (void *)WTF::fastMalloc((WTF *)(2 * v101));
  *(_DWORD *)(a1 + 32) = v101;
  *(_QWORD *)(a1 + 24) = v103;
  memcpy(v103, v102, 2 * v18);
  if (v102)
  {
    if (*v14 == v102)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    WTF::fastFree((unint64_t)v102, v104, v105, v106, v107, v108, v109, v110);
  }
LABEL_14:
  v20 = *(unsigned int *)(a1 + 36);
  if (v19 < v20)
  {
    __break(0xC471u);
    JUMPOUT(0x198876E48);
  }
  memcpy((void *)(*(_QWORD *)(a1 + 24) + 2 * v20), v12, v15);
  *(_DWORD *)(a1 + 36) = v19;
LABEL_16:
  v8 = (WTF::StringImpl *)*(unsigned int *)(a1 + 36);
  v21 = *(_QWORD *)(a1 + 192);
  if (!(_DWORD)v8)
  {
    v11 = (uint64_t *)(*(_QWORD *)(v21 + 41952) + 8);
    goto LABEL_26;
  }
  v22 = *(_WORD **)(a1 + 24);
  v23 = *(_QWORD *)(a1 + 184);
  v24 = (unsigned __int16)*v22;
  if (v24 < 0x80)
  {
    if ((_DWORD)v8 == 1)
    {
      v12 = (unsigned __int16 *)(v23 + 24);
      v11 = *(uint64_t **)(v23 + 24 + 8 * v24);
      if (v11)
        goto LABEL_26;
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v21 + 41968), *v22, a4, a5, a6, a7, a8, &v172);
      v50 = v172;
      v51 = (*(_QWORD *)v23)++;
      v52 = v51 >> 6;
      v53 = *(unsigned int *)(v23 + 20);
      if (v51 >> 6 >= v53)
      {
        v8 = (WTF::StringImpl *)(v23 + 8);
        v116 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v172 = v116;
        v117 = *(unsigned int *)(v23 + 20);
        if ((_DWORD)v117 == *(_DWORD *)(v23 + 16))
        {
          v126 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23 + 8, v117 + 1, (unint64_t)&v172);
          v117 = *(unsigned int *)(v23 + 20);
          *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v117) = *v126;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v8 + 8 * v117) = v116;
        }
        v53 = (v117 + 1);
        *(_DWORD *)(v23 + 20) = v53;
        v51 = *(_QWORD *)v23 - 1;
        v52 = v51 >> 6;
      }
      if (v52 >= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x198876ED4);
      }
      v37 = *(_QWORD *)(v23 + 8);
      v54 = *(_QWORD *)(v37 + 8 * v52);
      v39 = v51 & 0x3F;
      *(_QWORD *)(v54 + 8 * v39) = v50;
      v40 = v51 >> 6;
      if (v40 >= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x198876EDCLL);
      }
      v55 = (unsigned __int16)*v22;
      if (v55 < 0x80)
      {
        *(_QWORD *)&v12[4 * v55] = *(_QWORD *)(v37 + 8 * v40) + 8 * v39;
        goto LABEL_25;
      }
    }
    else
    {
      v11 = *(uint64_t **)(v23 + 1048 + 8 * v24);
      if (v11 && WTF::equalInternal<char16_t>(*v11, *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 36)))
        goto LABEL_26;
      WTF::AtomStringImpl::add((uint64_t)v22, (unint64_t)v8, a4, a5, a6, a7, a8, &v172);
      v8 = v172;
      v44 = *(_DWORD *)v172;
      *(_DWORD *)v172 += 2;
      if (v44)
      {
        *(_DWORD *)v8 = v44;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v8, v42, v43, a4, a5, a6, a7, a8);
        WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
      }
      v45 = (*(_QWORD *)v23)++;
      v46 = v45 >> 6;
      v47 = *(unsigned int *)(v23 + 20);
      if (v45 >> 6 >= v47)
      {
        v12 = (unsigned __int16 *)(v23 + 8);
        v111 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v172 = v111;
        v112 = *(unsigned int *)(v23 + 20);
        if ((_DWORD)v112 == *(_DWORD *)(v23 + 16))
        {
          v115 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23 + 8, v112 + 1, (unint64_t)&v172);
          v112 = *(unsigned int *)(v23 + 20);
          *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v112) = *v115;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v12 + 8 * v112) = v111;
        }
        v47 = (v112 + 1);
        *(_DWORD *)(v23 + 20) = v47;
        v45 = *(_QWORD *)v23 - 1;
        v46 = v45 >> 6;
      }
      if (v46 >= v47)
      {
        __break(0xC471u);
        JUMPOUT(0x198876E60);
      }
      v37 = *(_QWORD *)(v23 + 8);
      v48 = *(_QWORD *)(v37 + 8 * v46);
      v39 = v45 & 0x3F;
      *(_QWORD *)(v48 + 8 * v39) = v8;
      v40 = v45 >> 6;
      if (v40 >= v47)
      {
        __break(0xC471u);
        JUMPOUT(0x198876E68);
      }
      v49 = (unsigned __int16)*v22;
      if (v49 < 0x80)
      {
        *(_QWORD *)(v23 + 1048 + 8 * v49) = *(_QWORD *)(v37 + 8 * v40) + 8 * v39;
        goto LABEL_25;
      }
    }
    goto LABEL_111;
  }
  if ((_DWORD)v8 == 1 && v24 <= 0xFF)
  {
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v21 + 41968), *v22, a4, a5, a6, a7, a8, &v172);
    v32 = v172;
  }
  else
  {
    WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 36), a4, a5, a6, a7, a8, &v172);
    v32 = v172;
    v33 = *(_DWORD *)v172;
    *(_DWORD *)v172 += 2;
    if (v33)
    {
      *(_DWORD *)v32 = v33;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
  }
  v34 = (*(_QWORD *)v23)++;
  v35 = v34 >> 6;
  v36 = *(unsigned int *)(v23 + 20);
  if (v34 >> 6 >= v36)
  {
    v95 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
    v172 = v95;
    v96 = *(unsigned int *)(v23 + 20);
    if ((_DWORD)v96 == *(_DWORD *)(v23 + 16))
    {
      v98 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23 + 8, v96 + 1, (unint64_t)&v172);
      v96 = *(unsigned int *)(v23 + 20);
      *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v96) = *v98;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v96) = v95;
    }
    v36 = (v96 + 1);
    *(_DWORD *)(v23 + 20) = v36;
    v34 = *(_QWORD *)v23 - 1;
    v35 = v34 >> 6;
  }
  if (v35 >= v36)
  {
    __break(0xC471u);
    JUMPOUT(0x198876E50);
  }
  v37 = *(_QWORD *)(v23 + 8);
  v38 = *(_QWORD *)(v37 + 8 * v35);
  v39 = v34 & 0x3F;
  *(_QWORD *)(v38 + 8 * v39) = v32;
  v40 = v34 >> 6;
  if (v40 >= v36)
  {
    __break(0xC471u);
    JUMPOUT(0x198876E58);
  }
LABEL_25:
  v11 = (uint64_t *)(*(_QWORD *)(v37 + 8 * v40) + 8 * v39);
LABEL_26:
  result = 0;
  *a2 = v11;
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

uint64_t JSC::Lexer<char16_t>::parseIdentifierSlowCase<false>(uint64_t a1, _QWORD *a2, uint64_t a3, _WORD *a4)
{
  _BOOL4 v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  _WORD *v9;
  _QWORD v11[4];
  unsigned int v12;
  _WORD *v13;
  _QWORD *v14;

  v14 = a2;
  v13 = a4;
  v5 = *a4 == 35;
  if (*a4 == 35)
    v6 = 13;
  else
    v6 = 12;
  v12 = v6;
  v11[0] = &v13;
  v11[1] = a1;
  v11[2] = &v14;
  v11[3] = &v12;
  result = JSC::Lexer<char16_t>::parseIdentifierSlowCase<false>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,char16_t const*)::{lambda(BOOL)#1}::operator()((uint64_t)v11, &a4[v5] == *(_WORD **)(a1 + 80));
  if ((result & 0x100000) == 0)
  {
    while (1)
    {
      while (1)
      {
        v8 = *(unsigned __int16 *)(a1 + 176);
        if (v8 <= 0xFF)
          break;
        if ((v8 & 0xF800) != 0xD800)
        {
          if (JSC::isNonLatin1IdentPart(v8))
            goto LABEL_7;
          LODWORD(v8) = *(unsigned __int16 *)(a1 + 176);
        }
LABEL_12:
        if ((_DWORD)v8 != 92 && (v8 & 0xF800) != 55296)
        {
          *v14 = 0;
          *(_DWORD *)(a1 + 36) = 0;
          return v12;
        }
        result = JSC::Lexer<char16_t>::parseIdentifierSlowCase<false>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,char16_t const*)::{lambda(BOOL)#1}::operator()((uint64_t)v11, 0);
        if ((result & 0x100000) != 0)
          return result;
      }
      if (JSC::typesOfLatin1Characters[v8] >= 4u)
        goto LABEL_12;
LABEL_7:
      *(_WORD *)(a1 + 176) = 0;
      v9 = (_WORD *)(*(_QWORD *)(a1 + 80) + 2);
      *(_QWORD *)(a1 + 80) = v9;
      if ((unint64_t)v9 < *(_QWORD *)(a1 + 96))
        *(_WORD *)(a1 + 176) = *v9;
    }
  }
  return result;
}

uint64_t JSC::Lexer<char16_t>::parseIdentifierSlowCase<false>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,char16_t const*)::{lambda(BOOL)#1}::operator()(uint64_t a1, int a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int v15;
  _WORD *v16;
  unsigned int v17;
  unsigned __int16 *v18;
  int v19;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = **(_BYTE ***)a1;
  v6 = *(_BYTE **)(v4 + 80);
  if (v5 != v6)
  {
    v7 = v6 - v5;
    v8 = *(unsigned int *)(v4 + 36);
    v9 = v8 + (v7 >> 1);
    if (v9 > *(unsigned int *)(v4 + 32))
    {
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 24, v8 + (v7 >> 1));
      v8 = *(unsigned int *)(v4 + 36);
    }
    if (v9 < v8)
      goto LABEL_65;
    memcpy((void *)(*(_QWORD *)(v4 + 24) + 2 * v8), v5, v7);
    *(_DWORD *)(v4 + 36) = v9;
  }
  v10 = 1048579;
  v11 = *(unsigned __int16 *)(v4 + 176);
  if (v11 != 92)
  {
    if ((v11 & 0x400) == 0)
    {
      if ((v11 & 0xF800) != 0xD800)
      {
LABEL_25:
        if (a2)
        {
          if (!u_hasBinaryProperty(v11, UCHAR_ID_START))
            return 1048594;
        }
        else if (!JSC::isNonLatin1IdentPart(v11))
        {
          return 1048594;
        }
        v21 = *(_DWORD **)(v4 + 80);
        v22 = *(unsigned int *)(v4 + 32);
        v23 = *(unsigned int *)(v4 + 36);
        v24 = v23 + 2;
        if (v23 + 2 <= v22)
        {
LABEL_30:
          v25 = *(unsigned int *)(v4 + 36);
          if (v24 < v25)
          {
            __break(0xC471u);
            JUMPOUT(0x19887730CLL);
          }
          *(_DWORD *)(*(_QWORD *)(v4 + 24) + 2 * v25) = *v21;
          *(_DWORD *)(v4 + 36) = v24;
          v26 = *(_QWORD *)(v4 + 80);
          v27 = *(_QWORD *)(v4 + 96);
          *(_WORD *)(v4 + 176) = 0;
          v28 = (_WORD *)(v26 + 4);
          *(_QWORD *)(v4 + 80) = v28;
          if ((unint64_t)v28 < v27)
            *(_WORD *)(v4 + 176) = *v28;
          goto LABEL_38;
        }
        v30 = v22 + (v22 >> 2);
        if (v30 >= 0x10)
          v31 = v30 + 1;
        else
          v31 = 16;
        if (v31 <= v24)
          v32 = v23 + 2;
        else
          v32 = v31;
        if (!(v32 >> 31))
        {
          v33 = *(const void **)(v4 + 24);
          v34 = (void *)WTF::fastMalloc((WTF *)(2 * v32));
          *(_DWORD *)(v4 + 32) = v32;
          *(_QWORD *)(v4 + 24) = v34;
          memcpy(v34, v33, 2 * v23);
          if (v33)
          {
            if (*(const void **)(v4 + 24) == v33)
            {
              *(_QWORD *)(v4 + 24) = 0;
              *(_DWORD *)(v4 + 32) = 0;
            }
            WTF::fastFree((unint64_t)v33, v35, v36, v37, v38, v39, v40, v41);
          }
          goto LABEL_30;
        }
LABEL_65:
        __break(0xC471u);
        JUMPOUT(0x198877304);
      }
      v18 = (unsigned __int16 *)(*(_QWORD *)(v4 + 80) + 2);
      if ((unint64_t)v18 >= *(_QWORD *)(v4 + 96))
        v19 = 0;
      else
        v19 = *v18;
      if ((v11 & 0xFC00) == 0xD800 && (v19 & 0x400) != 0)
      {
        v11 = v19 + (v11 << 10) - 56613888;
        goto LABEL_25;
      }
    }
    return 1048593;
  }
  *(_BYTE *)(**(_QWORD **)(a1 + 16) + 8) = 1;
  *(_WORD *)(v4 + 176) = 0;
  v12 = *(_QWORD *)(v4 + 80);
  v13 = (unsigned __int16 *)(v12 + 2);
  *(_QWORD *)(v4 + 80) = v12 + 2;
  v14 = *(_QWORD *)(v4 + 96);
  if (v12 + 2 >= v14)
  {
LABEL_54:
    if (v13 == (unsigned __int16 *)v14)
      return 3145728;
    else
      return 1048577;
  }
  v15 = *v13;
  *(_WORD *)(v4 + 176) = v15;
  if (v15 != 117)
  {
    if (v15)
      return 1048577;
    goto LABEL_54;
  }
  *(_WORD *)(v4 + 176) = 0;
  v16 = (_WORD *)(v12 + 4);
  *(_QWORD *)(v4 + 80) = v16;
  if ((unint64_t)v16 < v14)
    *(_WORD *)(v4 + 176) = *v16;
  v17 = JSC::Lexer<char16_t>::parseUnicodeEscape(v4);
  if (v17 >= 0xFFFFFFFE)
  {
    if (v17 == -2)
      return 3145730;
    else
      return 1048579;
  }
  else
  {
    if (a2)
    {
      if (v17 < 0x100)
      {
        if (JSC::typesOfLatin1Characters[v17])
          return v10;
      }
      else if (!u_hasBinaryProperty(v17, UCHAR_ID_START))
      {
        return v10;
      }
      goto LABEL_37;
    }
    if (v17 <= 0xFF)
    {
      if (JSC::typesOfLatin1Characters[v17] >= 4u)
        return v10;
      goto LABEL_37;
    }
    if (JSC::isNonLatin1IdentPart(v17))
    {
LABEL_37:
      v28 = *(_WORD **)(v4 + 80);
LABEL_38:
      **(_QWORD **)a1 = v28;
      return **(unsigned int **)(a1 + 24);
    }
  }
  return v10;
}

uint64_t JSC::Lexer<char16_t>::parseIdentifierSlowCase<true>(uint64_t a1, uint64_t **a2, char a3, char a4, _WORD *a5)
{
  _BOOL4 v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  void *v19;
  _BYTE *v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _WORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  _QWORD *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  _QWORD *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD v98[4];
  unsigned int v99;
  void *__src;
  uint64_t **v101;
  WTF::StringImpl *v102;

  __src = a5;
  v101 = a2;
  v8 = *a5 == 35;
  if (*a5 == 35)
    v9 = 13;
  else
    v9 = 12;
  v99 = v9;
  v98[0] = &__src;
  v98[1] = a1;
  v98[2] = &v101;
  v98[3] = &v99;
  result = JSC::Lexer<char16_t>::parseIdentifierSlowCase<true>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,char16_t const*)::{lambda(BOOL)#1}::operator()((uint64_t)v98, &a5[v8] == *(_WORD **)(a1 + 80));
  if ((result & 0x100000) != 0)
    return result;
  while (1)
  {
    while (1)
    {
      v16 = *(unsigned __int16 *)(a1 + 176);
      if (v16 > 0xFF)
        break;
      if (JSC::typesOfLatin1Characters[v16] >= 4u)
        goto LABEL_12;
LABEL_7:
      *(_WORD *)(a1 + 176) = 0;
      v17 = (_WORD *)(*(_QWORD *)(a1 + 80) + 2);
      *(_QWORD *)(a1 + 80) = v17;
      if ((unint64_t)v17 < *(_QWORD *)(a1 + 96))
        *(_WORD *)(a1 + 176) = *v17;
    }
    if ((v16 & 0xF800) != 0xD800)
    {
      if (JSC::isNonLatin1IdentPart(v16))
        goto LABEL_7;
      LODWORD(v16) = *(unsigned __int16 *)(a1 + 176);
    }
LABEL_12:
    if ((_DWORD)v16 != 92 && (v16 & 0xF800) != 55296)
      break;
    result = JSC::Lexer<char16_t>::parseIdentifierSlowCase<true>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,char16_t const*)::{lambda(BOOL)#1}::operator()((uint64_t)v98, 0);
    if ((result & 0x100000) != 0)
      return result;
  }
  v19 = __src;
  v20 = *(_BYTE **)(a1 + 80);
  if (__src == v20)
  {
    LODWORD(v23) = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v21 = v20 - (_BYTE *)__src;
    v22 = *(unsigned int *)(a1 + 36);
    v23 = v22 + (v21 >> 1);
    if (v23 > *(unsigned int *)(a1 + 32))
    {
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v22 + (v21 >> 1));
      v22 = *(unsigned int *)(a1 + 36);
    }
    if (v23 < v22)
    {
      __break(0xC471u);
      JUMPOUT(0x198877880);
    }
    memcpy((void *)(*(_QWORD *)(a1 + 24) + 2 * v22), v19, v21);
    *(_DWORD *)(a1 + 36) = v23;
  }
  v24 = *(_QWORD *)(a1 + 192);
  if (!(_DWORD)v23)
  {
    v45 = (uint64_t *)(*(_QWORD *)(v24 + 41952) + 8);
    goto LABEL_46;
  }
  v25 = *(_WORD **)(a1 + 24);
  v26 = v23;
  v27 = *(_QWORD *)(a1 + 184);
  v28 = (unsigned __int16)*v25;
  if (v28 < 0x80)
  {
    if ((_DWORD)v23 == 1)
    {
      v45 = *(uint64_t **)(v27 + 24 + 8 * v28);
      if (v45)
        goto LABEL_46;
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v24 + 41968), *v25, v11, v12, v13, v14, v15, &v102);
      v67 = v102;
      v68 = (*(_QWORD *)v27)++;
      v69 = v68 >> 6;
      v70 = *(unsigned int *)(v27 + 20);
      if (v68 >> 6 >= v70)
      {
        v95 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v102 = v95;
        v96 = *(unsigned int *)(v27 + 20);
        if ((_DWORD)v96 == *(_DWORD *)(v27 + 16))
        {
          v97 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 8, v96 + 1, (unint64_t)&v102);
          v96 = *(unsigned int *)(v27 + 20);
          *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v96) = *v97;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v96) = v95;
        }
        v70 = (v96 + 1);
        *(_DWORD *)(v27 + 20) = v70;
        v68 = *(_QWORD *)v27 - 1;
        v69 = v68 >> 6;
      }
      if (v69 >= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x1988778A0);
      }
      v41 = *(_QWORD *)(v27 + 8);
      v71 = *(_QWORD *)(v41 + 8 * v69);
      v43 = v68 & 0x3F;
      *(_QWORD *)(v71 + 8 * v43) = v67;
      v44 = v68 >> 6;
      if (v44 >= v70)
      {
        __break(0xC471u);
      }
      else
      {
        v72 = (unsigned __int16)*v25;
        if (v72 < 0x80)
        {
          *(_QWORD *)(v27 + 24 + 8 * v72) = *(_QWORD *)(v41 + 8 * v44) + 8 * v43;
          goto LABEL_45;
        }
      }
    }
    else
    {
      v45 = *(uint64_t **)(v27 + 1048 + 8 * v28);
      if (v45 && WTF::equalInternal<char16_t>(*v45, *(_QWORD *)(a1 + 24), v26))
        goto LABEL_46;
      WTF::AtomStringImpl::add((uint64_t)v25, v26, v11, v12, v13, v14, v15, &v102);
      v53 = v102;
      v54 = *(_DWORD *)v102;
      *(_DWORD *)v102 += 2;
      if (v54)
      {
        *(_DWORD *)v53 = v54;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      }
      v55 = (*(_QWORD *)v27)++;
      v56 = v55 >> 6;
      v57 = *(unsigned int *)(v27 + 20);
      if (v55 >> 6 >= v57)
      {
        v92 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v102 = v92;
        v93 = *(unsigned int *)(v27 + 20);
        if ((_DWORD)v93 == *(_DWORD *)(v27 + 16))
        {
          v94 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 8, v93 + 1, (unint64_t)&v102);
          v93 = *(unsigned int *)(v27 + 20);
          *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v93) = *v94;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v93) = v92;
        }
        v57 = (v93 + 1);
        *(_DWORD *)(v27 + 20) = v57;
        v55 = *(_QWORD *)v27 - 1;
        v56 = v55 >> 6;
      }
      if (v56 >= v57)
      {
        __break(0xC471u);
        JUMPOUT(0x198877890);
      }
      v41 = *(_QWORD *)(v27 + 8);
      v58 = *(_QWORD *)(v41 + 8 * v56);
      v43 = v55 & 0x3F;
      *(_QWORD *)(v58 + 8 * v43) = v53;
      v44 = v55 >> 6;
      if (v44 >= v57)
      {
        __break(0xC471u);
        JUMPOUT(0x198877898);
      }
      v59 = (unsigned __int16)*v25;
      if (v59 < 0x80)
      {
        *(_QWORD *)(v27 + 1048 + 8 * v59) = *(_QWORD *)(v41 + 8 * v44) + 8 * v43;
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_88:
    JUMPOUT(0x1988774FCLL);
  }
  if ((_DWORD)v23 == 1 && v28 <= 0xFF)
  {
    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v24 + 41968), *v25, v11, v12, v13, v14, v15, &v102);
    v36 = v102;
  }
  else
  {
    WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 24), v23, v11, v12, v13, v14, v15, &v102);
    v36 = v102;
    v37 = *(_DWORD *)v102;
    *(_DWORD *)v102 += 2;
    if (v37)
    {
      *(_DWORD *)v36 = v37;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
  }
  v38 = (*(_QWORD *)v27)++;
  v39 = v38 >> 6;
  v40 = *(unsigned int *)(v27 + 20);
  if (v38 >> 6 >= v40)
  {
    v89 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
    v102 = v89;
    v90 = *(unsigned int *)(v27 + 20);
    if ((_DWORD)v90 == *(_DWORD *)(v27 + 16))
    {
      v91 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 8, v90 + 1, (unint64_t)&v102);
      v90 = *(unsigned int *)(v27 + 20);
      *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v90) = *v91;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v90) = v89;
    }
    v40 = (v90 + 1);
    *(_DWORD *)(v27 + 20) = v40;
    v38 = *(_QWORD *)v27 - 1;
    v39 = v38 >> 6;
  }
  if (v39 >= v40)
  {
    __break(0xC471u);
    JUMPOUT(0x198877888);
  }
  v41 = *(_QWORD *)(v27 + 8);
  v42 = *(_QWORD *)(v41 + 8 * v39);
  v43 = v38 & 0x3F;
  *(_QWORD *)(v42 + 8 * v43) = v36;
  v44 = v38 >> 6;
  if (v44 >= v40)
  {
    __break(0xC471u);
    goto LABEL_88;
  }
LABEL_45:
  v45 = (uint64_t *)(*(_QWORD *)(v41 + 8 * v44) + 8 * v43);
LABEL_46:
  *v101 = v45;
  *(_DWORD *)(a1 + 36) = 0;
  if ((a3 & 1) != 0)
    return v99;
  v60 = *v45;
  if (!*v45)
    return v99;
  v61 = *(unsigned int *)(v60 + 16);
  if ((v61 & 0x20) != 0)
    return v99;
  v62 = (v61 >> 8) & 0x7F;
  v63 = JSC::mainTableIndex[2 * v62];
  if (v63 == 0xFFFF)
    return v99;
  while (1)
  {
    v64 = (__int16)v63;
    v65 = (unint64_t *)&(&JSC::mainTableValues)[5 * (__int16)v63];
    v66 = v65[1];
    if (v66)
    {
      if (WTF::equalInternal<unsigned char>(v60, *v65, v66 - 1))
        break;
    }
    LODWORD(v62) = (__int16)JSC::mainTableIndex[2 * (int)v62 + 1];
    if ((_DWORD)v62 == -1)
      return v99;
    LOWORD(v63) = JSC::mainTableIndex[2 * (int)v62];
  }
  result = 1048592;
  if (LODWORD((&JSC::mainTableValues)[5 * v64 + 3]) == 532 && (a4 & 1) == 0)
    return v99;
  return result;
}

uint64_t JSC::Lexer<char16_t>::parseIdentifierSlowCase<true>(JSC::JSTokenData *,WTF::OptionSet<JSC::LexerFlags>,BOOL,char16_t const*)::{lambda(BOOL)#1}::operator()(uint64_t a1, int a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int v15;
  _WORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  int v20;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  const void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = **(_BYTE ***)a1;
  v6 = *(_BYTE **)(v4 + 80);
  if (v5 != v6)
  {
    v7 = v6 - v5;
    v8 = *(unsigned int *)(v4 + 36);
    v9 = v8 + (v7 >> 1);
    if (v9 > *(unsigned int *)(v4 + 32))
    {
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 24, v8 + (v7 >> 1));
      v8 = *(unsigned int *)(v4 + 36);
    }
    if (v9 < v8)
      goto LABEL_86;
    memcpy((void *)(*(_QWORD *)(v4 + 24) + 2 * v8), v5, v7);
    *(_DWORD *)(v4 + 36) = v9;
  }
  v10 = 1048579;
  v11 = *(unsigned __int16 *)(v4 + 176);
  if (v11 != 92)
  {
    if ((v11 & 0x400) == 0)
    {
      if ((v11 & 0xF800) != 0xD800)
        goto LABEL_25;
      v19 = (unsigned __int16 *)(*(_QWORD *)(v4 + 80) + 2);
      if ((unint64_t)v19 >= *(_QWORD *)(v4 + 96))
        v20 = 0;
      else
        v20 = *v19;
      if ((v11 & 0xFC00) == 0xD800 && (v20 & 0x400) != 0)
      {
        v11 = v20 + (v11 << 10) - 56613888;
LABEL_25:
        if (a2)
        {
          if (!u_hasBinaryProperty(v11, UCHAR_ID_START))
            return 1048594;
        }
        else if (!JSC::isNonLatin1IdentPart(v11))
        {
          return 1048594;
        }
        v22 = *(_DWORD **)(v4 + 80);
        v23 = *(unsigned int *)(v4 + 32);
        v24 = *(unsigned int *)(v4 + 36);
        v25 = v24 + 2;
        if (v24 + 2 > v23)
        {
          v33 = v23 + (v23 >> 2);
          if (v33 >= 0x10)
            v34 = v33 + 1;
          else
            v34 = 16;
          if (v34 <= v25)
            v35 = v24 + 2;
          else
            v35 = v34;
          if (v35 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198877CC8);
          }
          v36 = *(const void **)(v4 + 24);
          v37 = (void *)WTF::fastMalloc((WTF *)(2 * v35));
          *(_DWORD *)(v4 + 32) = v35;
          *(_QWORD *)(v4 + 24) = v37;
          memcpy(v37, v36, 2 * v24);
          if (v36)
          {
            if (*(const void **)(v4 + 24) == v36)
            {
              *(_QWORD *)(v4 + 24) = 0;
              *(_DWORD *)(v4 + 32) = 0;
            }
            WTF::fastFree((unint64_t)v36, v38, v39, v40, v41, v42, v43, v44);
          }
        }
        v26 = *(unsigned int *)(v4 + 36);
        if (v25 < v26)
        {
          __break(0xC471u);
          JUMPOUT(0x198877CC0);
        }
        *(_DWORD *)(*(_QWORD *)(v4 + 24) + 2 * v26) = *v22;
        *(_DWORD *)(v4 + 36) = v25;
        v27 = *(_QWORD *)(v4 + 80);
        v28 = *(_QWORD *)(v4 + 96);
        *(_WORD *)(v4 + 176) = 0;
        v29 = (_WORD *)(v27 + 4);
        *(_QWORD *)(v4 + 80) = v29;
        if ((unint64_t)v29 < v28)
          *(_WORD *)(v4 + 176) = *v29;
        goto LABEL_42;
      }
    }
    return 1048593;
  }
  *(_BYTE *)(**(_QWORD **)(a1 + 16) + 8) = 1;
  *(_WORD *)(v4 + 176) = 0;
  v12 = *(_QWORD *)(v4 + 80);
  v13 = (unsigned __int16 *)(v12 + 2);
  *(_QWORD *)(v4 + 80) = v12 + 2;
  v14 = *(_QWORD *)(v4 + 96);
  if (v12 + 2 >= v14)
  {
LABEL_59:
    if (v13 == (unsigned __int16 *)v14)
      return 3145728;
    else
      return 1048577;
  }
  v15 = *v13;
  *(_WORD *)(v4 + 176) = v15;
  if (v15 != 117)
  {
    if (v15)
      return 1048577;
    goto LABEL_59;
  }
  *(_WORD *)(v4 + 176) = 0;
  v16 = (_WORD *)(v12 + 4);
  *(_QWORD *)(v4 + 80) = v16;
  if ((unint64_t)v16 < v14)
    *(_WORD *)(v4 + 176) = *v16;
  v17 = JSC::Lexer<char16_t>::parseUnicodeEscape(v4);
  if (v17 >= 0xFFFFFFFE)
  {
    if (v17 == -2)
      return 3145730;
    else
      return 1048579;
  }
  else
  {
    v18 = v17;
    if (a2)
    {
      if (v17 < 0x100)
      {
        if (JSC::typesOfLatin1Characters[v17])
          return v10;
        goto LABEL_38;
      }
      if (!u_hasBinaryProperty(v17, UCHAR_ID_START))
        return v10;
      goto LABEL_37;
    }
    if (v17 <= 0xFF)
    {
      if (JSC::typesOfLatin1Characters[v17] >= 4u)
        return v10;
      goto LABEL_38;
    }
    if (JSC::isNonLatin1IdentPart(v17))
    {
LABEL_37:
      if (!HIWORD(v18))
      {
LABEL_38:
        v62 = v18;
        v30 = (_QWORD *)(v4 + 24);
        v31 = *(unsigned int *)(v4 + 36);
        if ((_DWORD)v31 == *(_DWORD *)(v4 + 32))
        {
          v45 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v62);
          v31 = *(unsigned int *)(v4 + 36);
          *(_WORD *)(*(_QWORD *)(v4 + 24) + 2 * v31) = *v45;
        }
        else
        {
          *(_WORD *)(*v30 + 2 * v31) = v18;
        }
        *(_DWORD *)(v4 + 36) = v31 + 1;
LABEL_41:
        v29 = *(_WORD **)(v4 + 80);
LABEL_42:
        **(_QWORD **)a1 = v29;
        return **(unsigned int **)(a1 + 24);
      }
      v46 = *(unsigned int *)(v4 + 32);
      v47 = *(unsigned int *)(v4 + 36);
      v48 = v47 + 2;
      if (v47 + 2 <= v46)
      {
LABEL_68:
        v49 = *(unsigned int *)(v4 + 36);
        if (v48 < v49)
        {
          __break(0xC471u);
          JUMPOUT(0x198877CD0);
        }
        *(_DWORD *)(*(_QWORD *)(v4 + 24) + 2 * v49) = ((v18 >> 10) + 55232) | ((v18 & 0x3FF) << 16) | 0xDC000000;
        *(_DWORD *)(v4 + 36) = v48;
        goto LABEL_41;
      }
      v50 = v46 + (v46 >> 2);
      if (v50 >= 0x10)
        v51 = v50 + 1;
      else
        v51 = 16;
      if (v51 <= v48)
        v52 = v47 + 2;
      else
        v52 = v51;
      if (!(v52 >> 31))
      {
        v53 = *(const void **)(v4 + 24);
        v54 = (void *)WTF::fastMalloc((WTF *)(2 * v52));
        *(_DWORD *)(v4 + 32) = v52;
        *(_QWORD *)(v4 + 24) = v54;
        memcpy(v54, v53, 2 * v47);
        if (v53)
        {
          if (*(const void **)(v4 + 24) == v53)
          {
            *(_QWORD *)(v4 + 24) = 0;
            *(_DWORD *)(v4 + 32) = 0;
          }
          WTF::fastFree((unint64_t)v53, v55, v56, v57, v58, v59, v60, v61);
        }
        goto LABEL_68;
      }
LABEL_86:
      __break(0xC471u);
      JUMPOUT(0x198877CB8);
    }
  }
  return v10;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<JSC::SourceProviderCacheItem>>>,WTF::IntHash<int>,WTF::HashMap<int,std::unique_ptr<JSC::SourceProviderCacheItem>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<std::unique_ptr<JSC::SourceProviderCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t StatusReg;
  int *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v89;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2 == 1)
  {
    v16 = 0;
LABEL_10:
    v19 = a2 - v16;
    v20 = (_QWORD *)(v8 + 16 * v16 + 24);
    do
    {
      *((_DWORD *)v20 - 2) = 0x7FFFFFFF;
      *v20 = 0;
      v20 += 2;
      --v19;
    }
    while (v19);
    goto LABEL_12;
  }
  if (a2)
  {
    v16 = a2 & 0xFFFFFFFE;
    v17 = (_QWORD *)(v8 + 40);
    v18 = v16;
    do
    {
      *((_DWORD *)v17 - 6) = 0x7FFFFFFF;
      *((_DWORD *)v17 - 2) = 0x7FFFFFFF;
      *(v17 - 2) = 0;
      *v17 = 0;
      v17 += 4;
      v18 -= 2;
    }
    while (v18);
    if (v16 != a2)
      goto LABEL_10;
  }
LABEL_12:
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v21 = 0;
    v22 = 0;
    v23 = v5;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v86 = StatusReg;
    while (1)
    {
      v26 = (int *)(v4 + 16 * v21);
      v27 = *v26;
      if (*v26 == 0x7FFFFFFF)
      {
        v52 = *((_QWORD *)v26 + 1);
        *((_QWORD *)v26 + 1) = 0;
        if (v52)
        {
          v53 = *(unsigned int *)(v52 + 24);
          if ((_DWORD)v53)
          {
            v54 = 0;
            v55 = (unsigned int *)(v52 + 33);
            do
            {
              v56 = (WTF::StringImpl *)(*v55 | ((unint64_t)*((unsigned __int8 *)v55 + 4) << 32));
              if (*(_DWORD *)v56 == 2)
              {
                WTF::StringImpl::~StringImpl(v56, v9, v10, v11, v12, v13, v14, v15);
                WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
                StatusReg = v86;
                v53 = *(unsigned int *)(v52 + 24);
              }
              else
              {
                *(_DWORD *)v56 -= 2;
              }
              ++v54;
              v55 = (unsigned int *)((char *)v55 + 5);
            }
            while (v54 < v53);
          }
          v84 = *(_QWORD *)(StatusReg + 752);
          if (!v84)
          {
            pas_try_deallocate_slow_no_cache(v52, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_81;
          }
          if (v52 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v52 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v52)) & 1) == 0)
          {
            if (v52 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v52 >> 24)
            {
              v11 = 0;
LABEL_80:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v84, v52, 1, v11, v12, v13, v14, v15);
LABEL_81:
              StatusReg = v86;
              goto LABEL_22;
            }
            v11 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v52 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v52) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v11 != 1)
              goto LABEL_80;
          }
          v85 = *(unsigned int *)(v84 + 8000);
          if (v85 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v84, v52, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
            goto LABEL_81;
          }
          *(_QWORD *)(v84 + 8 * v85) = v52 | 0x5000000000000;
          *(_DWORD *)(v84 + 8000) = v85 + 1;
        }
      }
      else if (v27 != 2147483646)
      {
        v28 = *a1;
        if (*a1)
          v29 = *(_DWORD *)(v28 - 8);
        else
          v29 = 0;
        v30 = 0;
        v31 = 9 * ((v27 + ~(v27 << 15)) ^ ((v27 + ~(v27 << 15)) >> 10));
        v32 = ((v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11)) ^ (((v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11)) >> 16);
        do
        {
          v33 = v32 & v29;
          v32 = ++v30 + v33;
        }
        while (*(_DWORD *)(v28 + 16 * v33) != 0x7FFFFFFF);
        v34 = v28 + 16 * v33;
        v35 = (_QWORD *)(v34 + 8);
        v36 = *(_QWORD *)(v34 + 8);
        *(_QWORD *)(v34 + 8) = 0;
        if (v36)
        {
          v89 = v28 + 16 * v33;
          v37 = v4;
          v38 = v22;
          v39 = v23;
          v40 = *(unsigned int *)(v36 + 24);
          if ((_DWORD)v40)
          {
            v41 = 0;
            v42 = (unsigned int *)(v36 + 33);
            do
            {
              v43 = (WTF::StringImpl *)(*v42 | ((unint64_t)*((unsigned __int8 *)v42 + 4) << 32));
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, v9, v10, v11, v12, v13, v14, v15);
                WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
                StatusReg = v86;
                v40 = *(unsigned int *)(v36 + 24);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
              ++v41;
              v42 = (unsigned int *)((char *)v42 + 5);
            }
            while (v41 < v40);
          }
          v65 = *(_QWORD *)(StatusReg + 752);
          if (v65)
          {
            v23 = v39;
            v22 = v38;
            v4 = v37;
            v34 = v89;
            if (v36 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v36 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v36)) & 1) == 0)
            {
              if (v36 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v36 >> 24)
              {
                v11 = 0;
              }
              else
              {
                v11 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v36 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v36) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v11 == 1)
                  goto LABEL_48;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v65, v36, 1, v11, v12, v13, v14, v15);
            }
            else
            {
LABEL_48:
              v66 = *(unsigned int *)(v65 + 8000);
              if (v66 < 0x3E7)
              {
                *(_QWORD *)(v65 + 8 * v66) = v36 | 0x5000000000000;
                *(_DWORD *)(v65 + 8000) = v66 + 1;
                goto LABEL_50;
              }
              pas_thread_local_cache_append_deallocation_slow(v65, v36, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
            }
            StatusReg = v86;
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v36, (uint64_t)&bmalloc_heap_config, 1);
            StatusReg = v86;
            v23 = v39;
            v22 = v38;
            v4 = v37;
            v34 = v89;
          }
        }
LABEL_50:
        *(_DWORD *)v34 = *v26;
        v67 = v4 + 16 * v21;
        v68 = *(_QWORD *)(v67 + 8);
        *(_QWORD *)(v67 + 8) = 0;
        *v35 = v68;
        v69 = *(_QWORD *)(v67 + 8);
        *(_QWORD *)(v67 + 8) = 0;
        if (v69)
        {
          v70 = *(unsigned int *)(v69 + 24);
          if ((_DWORD)v70)
          {
            v71 = 0;
            v72 = (unsigned int *)(v69 + 33);
            do
            {
              v73 = (WTF::StringImpl *)(*v72 | ((unint64_t)*((unsigned __int8 *)v72 + 4) << 32));
              if (*(_DWORD *)v73 == 2)
              {
                WTF::StringImpl::~StringImpl(v73, v9, v10, v11, v12, v13, v14, v15);
                WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
                StatusReg = v86;
                v70 = *(unsigned int *)(v69 + 24);
              }
              else
              {
                *(_DWORD *)v73 -= 2;
              }
              ++v71;
              v72 = (unsigned int *)((char *)v72 + 5);
            }
            while (v71 < v70);
          }
          v82 = *(_QWORD *)(StatusReg + 752);
          if (v82)
          {
            if (v69 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v69 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v69)) & 1) == 0)
            {
              if (v69 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v69 >> 24)
              {
                v11 = 0;
              }
              else
              {
                v11 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v69 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v69) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v11 == 1)
                  goto LABEL_61;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v82, v69, 1, v11, v12, v13, v14, v15);
            }
            else
            {
LABEL_61:
              v83 = *(unsigned int *)(v82 + 8000);
              if (v83 < 0x3E7)
              {
                *(_QWORD *)(v82 + 8 * v83) = v69 | 0x5000000000000;
                *(_DWORD *)(v82 + 8000) = v83 + 1;
                goto LABEL_20;
              }
              pas_thread_local_cache_append_deallocation_slow(v82, v69, (os_unfair_lock_s *)5, v11, v12, v13, v14, v15);
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v69, (uint64_t)&bmalloc_heap_config, 1);
          }
          StatusReg = v86;
        }
LABEL_20:
        if (v26 == a3)
          v22 = v34;
      }
LABEL_22:
      if (++v21 == v23)
        goto LABEL_15;
    }
  }
  v22 = 0;
LABEL_15:
  if (v4)
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v22;
}

uint64_t JSC::VariableEnvironment::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  _DWORD *v22;
  _WORD *v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _WORD *v33;
  _WORD *v34;
  char v35;
  _QWORD *v36;
  uint64_t *v37;
  WTF::StringImpl **v38;
  unint64_t v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  uint64_t *v67;

  v10 = *(_WORD **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_38;
  v11 = *((unsigned int *)v10 - 3);
  if (!(_DWORD)v11)
  {
    v10 = 0;
    goto LABEL_38;
  }
  v12 = (v11 - 1) | ((v11 - 1) >> 1) | ((((_DWORD)v11 - 1) | ((v11 - 1) >> 1)) >> 2);
  v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  v14 = (v13 | HIWORD(v13)) + 1;
  if (v14 > 0x400)
  {
    if (v14 > 2 * v11)
      goto LABEL_63;
  }
  else if (3 * v14 > 4 * v11)
  {
LABEL_6:
    v15 = (double)v11;
    v16 = (double)v14;
    v17 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v14) = 2 * v14;
  if (v14 <= 0x400)
    goto LABEL_6;
LABEL_63:
  v15 = (double)v11;
  v16 = (double)v14;
  v17 = 0.416666667;
LABEL_7:
  if (v16 * v17 <= v15)
    LODWORD(v14) = 2 * v14;
  if (v14 <= 8)
    v18 = 8;
  else
    v18 = v14;
  v19 = 16 * v18;
  v20 = (_DWORD *)WTF::fastMalloc((WTF *)(v19 + 16));
  v21 = 0;
  v10 = v20 + 4;
  do
  {
    v22 = &v20[v21 / 4];
    *((_QWORD *)v22 + 2) = 0;
    *((_WORD *)v22 + 12) = 0;
    v21 += 16;
  }
  while (v19 != v21);
  v20[2] = v18 - 1;
  v20[3] = v18;
  *v20 = 0;
  v20[1] = v11;
  v23 = *(_WORD **)a2;
  if (*(_QWORD *)a2)
  {
    v24 = *((unsigned int *)v23 - 1);
    v25 = &v23[8 * v24];
    if (*((_DWORD *)v23 - 3))
    {
      v26 = *(_WORD **)a2;
      if ((_DWORD)v24)
      {
        v27 = 16 * v24;
        v26 = *(_WORD **)a2;
        while ((unint64_t)(*(_QWORD *)v26 + 1) <= 1)
        {
          v26 += 8;
          v27 -= 16;
          if (!v27)
          {
            v26 = v25;
            goto LABEL_21;
          }
        }
      }
      goto LABEL_21;
    }
    v26 = &v23[8 * v24];
  }
  else
  {
    v26 = 0;
    v24 = 0;
  }
  v25 = &v23[8 * v24];
LABEL_21:
  if (v23)
    v23 += 8 * *((unsigned int *)v23 - 1);
  while (v26 != v23)
  {
    v28 = *(_DWORD **)v26;
    v29 = *(_DWORD *)(*(_QWORD *)v26 + 16);
    if ((v29 & 0x20) != 0)
      v29 = v28[8];
    v30 = 0;
    v31 = v29 >> 8;
    do
    {
      v32 = v31 & v20[2];
      v31 = ++v30 + v32;
    }
    while (*(_QWORD *)&v10[8 * v32]);
    if (v28)
      *v28 += 2;
    v33 = &v10[8 * v32];
    *(_QWORD *)v33 = v28;
    v33[4] = v26[4];
    v34 = v26 + 8;
    v26 = v25;
    if (v34 != v25)
    {
      v26 = v34;
      while ((unint64_t)(*(_QWORD *)v26 + 1) <= 1)
      {
        v26 += 8;
        if (v26 == v25)
        {
          v26 = v25;
          break;
        }
      }
    }
  }
LABEL_38:
  v35 = *(_BYTE *)(a2 + 8);
  v36 = *(_QWORD **)(a2 + 16);
  if (v36)
  {
    v66 = v10;
    v67 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    v37 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::HashTable(v67, v36);
    v10 = v66;
  }
  else
  {
    v37 = 0;
  }
  v38 = *(WTF::StringImpl ***)a1;
  *(_QWORD *)a1 = v10;
  *(_BYTE *)(a1 + 8) = v35;
  v39 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v37;
  if (v39)
  {
    v40 = *(WTF::StringImpl ***)v39;
    if (*(_QWORD *)v39)
    {
      v55 = *((unsigned int *)v40 - 1);
      if ((_DWORD)v55)
      {
        v56 = *(WTF::StringImpl ***)v39;
        do
        {
          v57 = *v56;
          if (*v56 != (WTF::StringImpl *)-1)
          {
            if (v57)
            {
              *v56 = 0;
              if (*(_DWORD *)v57 == 2)
              {
                WTF::StringImpl::~StringImpl(v57, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
              }
              else
              {
                *(_DWORD *)v57 -= 2;
              }
            }
            else
            {
              *v56 = 0;
            }
          }
          v56 += 2;
          --v55;
        }
        while (v55);
      }
      WTF::fastFree((unint64_t)(v40 - 2), (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    v41 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v41)
    {
      pas_try_deallocate_slow_no_cache(v39, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_47;
    }
    if (!(v39 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v39 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v39)) & 1) != 0)
    {
      goto LABEL_45;
    }
    if (v39 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v39 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v39 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v39) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_45:
        v42 = *(unsigned int *)(v41 + 8000);
        if (v42 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v41, v39, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v41 + 8 * v42) = v39 | 0x5000000000000;
          *(_DWORD *)(v41 + 8000) = v42 + 1;
        }
        goto LABEL_47;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v41, v39, 1, a4, a5, a6, a7, a8);
  }
LABEL_47:
  if (v38)
  {
    v44 = *((unsigned int *)v38 - 1);
    if ((_DWORD)v44)
    {
      v45 = v38;
      do
      {
        v46 = *v45;
        if (*v45 != (WTF::StringImpl *)-1)
        {
          if (v46)
          {
            *v45 = 0;
            if (*(_DWORD *)v46 == 2)
            {
              WTF::StringImpl::~StringImpl(v46, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
          else
          {
            *v45 = 0;
          }
        }
        v45 += 2;
        --v44;
      }
      while (v44);
    }
    WTF::fastFree((unint64_t)(v38 - 2), (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t *JSC::VariableEnvironment::markVariableAsCapturedIfDefined(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2;
    v5 = *(_DWORD *)(*a2 + 16);
    if ((v5 & 0x20) != 0)
      v5 = *(_DWORD *)(v4 + 32);
    v6 = v3 & (v5 >> 8);
    v7 = *(_QWORD *)(v2 + 16 * v6);
    if (v7 != v4)
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v3;
        v7 = *(_QWORD *)(v2 + 16 * v6);
        ++v8;
        if (v7 == v4)
          goto LABEL_10;
      }
      v6 = *(unsigned int *)(v2 - 4);
    }
LABEL_10:
    if (v6 != *(_DWORD *)(v2 - 4))
      *(_WORD *)(v2 + 16 * v6 + 8) |= 1u;
  }
  return result;
}

uint64_t *JSC::VariableEnvironment::markAllVariablesAsCaptured(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)this + 8))
    return this;
  *((_BYTE *)this + 8) = 1;
  v1 = *this;
  if (*this)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = v1 + 16 * v2;
    if (*(_DWORD *)(v1 - 12))
    {
      v4 = *this;
      if ((_DWORD)v2)
      {
        v5 = 16 * v2;
        v4 = *this;
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 16;
          v5 -= 16;
          if (!v5)
          {
            v4 = v3;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v4 = v1 + 16 * v2;
  }
  else
  {
    v4 = 0;
    v2 = 0;
  }
  v3 = v1 + 16 * v2;
LABEL_9:
  if (v1)
    v1 += 16 * *(unsigned int *)(v1 - 4);
  while (v4 != v1)
  {
    *(_WORD *)(v4 + 8) |= 1u;
    v6 = v4 + 16;
    v4 = v3;
    if (v6 != v3)
    {
      v4 = v6;
      while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
      {
        v4 += 16;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t JSC::VariableEnvironment::getOrAddPrivateName(uint64_t a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v24;
  WTF::StringImpl ***v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v9 = *(uint64_t **)(a1 + 16);
  if (!v9)
  {
    v24 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v24 = 0;
    v25 = *(WTF::StringImpl ****)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    if (v25)
    {
      v26 = *v25;
      if (*v25)
      {
        v29 = *((unsigned int *)v26 - 1);
        if ((_DWORD)v29)
        {
          v30 = *v25;
          do
          {
            v31 = *v30;
            if (*v30 != (WTF::StringImpl *)-1)
            {
              *v30 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                {
                  WTF::StringImpl::~StringImpl(v31, this, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
                }
                else
                {
                  *(_DWORD *)v31 -= 2;
                }
              }
            }
            v30 += 2;
            --v29;
          }
          while (v29);
        }
        WTF::fastFree((unint64_t)(v26 - 2), this, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree((unint64_t)v25, this, a3, a4, a5, a6, a7, a8);
      v9 = *(uint64_t **)(a1 + 16);
    }
    else
    {
      v9 = v24;
    }
  }
  if (this)
    *(_DWORD *)this += 2;
  v10 = *v9;
  if (*v9
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v9, 8u, 0), (v10 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = *((_DWORD *)this + 4);
  if ((v12 & 0x20) != 0)
    v12 = *((_DWORD *)this + 8);
  v13 = v11 & (v12 >> 8);
  v14 = v10 + 16 * v13;
  v15 = *(WTF::StringImpl **)v14;
  if (!*(_QWORD *)v14)
  {
LABEL_10:
    *(_QWORD *)v14 = this;
    *(_WORD *)(v14 + 8) = 0;
    v16 = *v9;
    if (*v9)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v9;
    if (*v9)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        return v14 + 8;
    }
    else if (3 * v21 > 4 * v20)
    {
      return v14 + 8;
    }
    v14 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v9, (WTF::StringImpl **)v14);
    return v14 + 8;
  }
  v27 = 0;
  v28 = 1;
  while (v15 != this)
  {
    if (v15 == (WTF::StringImpl *)-1)
      v27 = v14;
    v13 = (v13 + v28) & v11;
    v14 = v10 + 16 * v13;
    v15 = *(WTF::StringImpl **)v14;
    ++v28;
    if (!*(_QWORD *)v14)
    {
      if (v27)
      {
        *(_QWORD *)v27 = 0;
        *(_WORD *)(v27 + 8) = 0;
        --*(_DWORD *)(*v9 - 16);
        v14 = v27;
      }
      goto LABEL_10;
    }
  }
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::~StringImpl(this, this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
  }
  return v14 + 8;
}

uint64_t *WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry&>@<X0>(uint64_t *result@<X0>, WTF::StringImpl **a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *((_DWORD *)*a2 + 4);
  if ((v12 & 0x20) != 0)
    v12 = *((_DWORD *)v11 + 8);
  v13 = v10 & (v12 >> 8);
  v14 = (uint64_t *)(v8 + 16 * v13);
  v15 = (WTF::StringImpl *)*v14;
  if (!*v14)
    goto LABEL_7;
  v24 = 0;
  v25 = 1;
  do
  {
    if (v15 == v11)
    {
      if ((v9 & 1) != 0)
        v26 = 0;
      else
        v26 = *(unsigned int *)(v8 - 4);
      v23 = 0;
      v22 = v8 + 16 * v26;
      goto LABEL_15;
    }
    if (v15 == (WTF::StringImpl *)-1)
      v24 = v14;
    v13 = (v13 + v25) & v10;
    v14 = (uint64_t *)(v8 + 16 * v13);
    v15 = (WTF::StringImpl *)*v14;
    ++v25;
  }
  while (*v14);
  if (v24)
  {
    *v24 = 0;
    *((_WORD *)v24 + 4) = 0;
    --*(_DWORD *)(*v6 - 16);
    v11 = *a2;
    v14 = v24;
  }
  if (v11)
LABEL_7:
    *(_DWORD *)v11 += 2;
  *v14 = (uint64_t)v11;
  *((_WORD *)v14 + 4) = *a3;
  v16 = *v6;
  if (*v6)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_14;
LABEL_28:
    result = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v6, (WTF::StringImpl **)v14);
    v14 = result;
    v18 = *v6;
    if (*v6)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_14;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_28;
LABEL_14:
  v22 = v18 + 16 * v21;
  v23 = 1;
LABEL_15:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v22;
  *(_BYTE *)(a4 + 16) = v23;
  return result;
}

uint64_t JSC::VariableEnvironment::declarePrivateAccessor(uint64_t a1, WTF::StringImpl **a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  __int16 v25;
  uint64_t result;
  int v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _WORD v60[14];
  __int16 v61;
  __int16 v62;

  v10 = a3;
  v11 = *(uint64_t **)(a1 + 16);
  if (!v11)
  {
    v12 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v12 = 0;
    v15 = *(WTF::StringImpl ****)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v12;
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v49 = *((unsigned int *)v16 - 1);
        if ((_DWORD)v49)
        {
          v50 = *v15;
          do
          {
            v51 = *v50;
            if (*v50 != (WTF::StringImpl *)-1)
            {
              *v50 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                {
                  WTF::StringImpl::~StringImpl(v51, v13, v14, a4, a5, a6, a7, a8);
                  WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
                }
                else
                {
                  *(_DWORD *)v51 -= 2;
                }
              }
            }
            v50 += 2;
            --v49;
          }
          while (v49);
        }
        WTF::fastFree((unint64_t)(v16 - 2), v13, v14, a4, a5, a6, a7, a8);
      }
      WTF::fastFree((unint64_t)v15, v13, v14, a4, a5, a6, a7, a8);
      v11 = *(uint64_t **)(a1 + 16);
    }
    else
    {
      v11 = v12;
    }
  }
  v17 = *v11;
  if (!*v11)
    goto LABEL_16;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = *a2;
  v20 = *((_DWORD *)*a2 + 4);
  v21 = v20;
  if ((v20 & 0x20) != 0)
    v21 = *((_DWORD *)v19 + 8);
  v22 = v18 & (v21 >> 8);
  v23 = *(WTF::StringImpl **)(v17 + 16 * v22);
  if (v23 != v19)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(WTF::StringImpl **)(v17 + 16 * v22);
      ++v24;
      if (v23 == v19)
        goto LABEL_15;
    }
    v22 = *(unsigned int *)(v17 - 4);
  }
LABEL_15:
  if (v22 == *(_DWORD *)(v17 - 4))
  {
LABEL_16:
    v62 = v10;
    if ((v10 & 4) != 0)
      v25 = 8195;
    else
      v25 = 4099;
    v61 = v25;
    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry&>((uint64_t *)a1, a2, &v61, (uint64_t)v60);
    WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>(*(uint64_t **)(a1 + 16), a2, &v62, (uint64_t)v60);
    return 0;
  }
  v27 = *(unsigned __int16 *)(v17 + 16 * v22 + 8);
  if ((v10 & 4) != 0 && (v27 & 2) == 0 || (v10 & 2) != 0 && (v27 & 4) == 0)
    return 1;
  if (((v10 ^ v27) & 8) != 0)
    return 2;
  v28 = v27 | v10;
  v60[0] = v28;
  if ((v20 & 0x20) != 0)
    v20 = *((_DWORD *)v19 + 8);
  v29 = v18 & (v20 >> 8);
  v30 = v17 + 16 * v29;
  v31 = *(WTF::StringImpl **)v30;
  if (*(_QWORD *)v30)
  {
    v47 = 0;
    v48 = 1;
    do
    {
      if (v31 == v19)
      {
        *(_WORD *)(v30 + 8) = v28;
        goto LABEL_36;
      }
      if (v31 == (WTF::StringImpl *)-1)
        v47 = v30;
      v29 = (v29 + v48) & v18;
      v30 = v17 + 16 * v29;
      v31 = *(WTF::StringImpl **)v30;
      ++v48;
    }
    while (*(_QWORD *)v30);
    if (v47)
    {
      *(_QWORD *)v47 = 0;
      *(_WORD *)(v47 + 8) = 0;
      --*(_DWORD *)(*v11 - 16);
      v19 = *a2;
      v30 = v47;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,JSC::IdentifierRepHash>::translate<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> const&,JSC::PrivateNameEntry&>(v30, v19, v60, a4, a5, a6, a7, a8);
  v32 = *v11;
  if (*v11)
    v33 = *(_DWORD *)(v32 - 12) + 1;
  else
    v33 = 1;
  *(_DWORD *)(v32 - 12) = v33;
  v34 = *v11;
  if (*v11)
    v35 = *(_DWORD *)(v34 - 12);
  else
    v35 = 0;
  v36 = (*(_DWORD *)(v34 - 16) + v35);
  v37 = *(unsigned int *)(v34 - 4);
  if (v37 > 0x400)
  {
    if (v37 > 2 * v36)
      goto LABEL_36;
LABEL_56:
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v11, (WTF::StringImpl **)v30);
    goto LABEL_36;
  }
  if (3 * v37 <= 4 * v36)
    goto LABEL_56;
LABEL_36:
  v38 = *(_QWORD *)a1;
  v39 = *(_DWORD *)(*(_QWORD *)a1 - 8);
  v40 = *a2;
  v41 = *((_DWORD *)*a2 + 4);
  if ((v41 & 0x20) != 0)
    v41 = *((_DWORD *)v40 + 8);
  v42 = v39 & (v41 >> 8);
  v43 = *(WTF::StringImpl **)(v38 + 16 * v42);
  if (v43 != v40)
  {
    v44 = 1;
    while (v43)
    {
      v42 = ((_DWORD)v42 + v44) & v39;
      v43 = *(WTF::StringImpl **)(v38 + 16 * v42);
      ++v44;
      if (v43 == v40)
        goto LABEL_44;
    }
    v42 = *(unsigned int *)(v38 - 4);
  }
LABEL_44:
  result = 0;
  v45 = v38 + 16 * v42;
  if ((v10 & 4) != 0)
    v46 = 0x2000;
  else
    v46 = 4096;
  *(_WORD *)(v45 + 8) |= v46;
  return result;
}

BOOL JSC::VariableEnvironment::declarePrivateMethod(uint64_t a1, WTF::StringImpl **a2, __int16 a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl ***v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[28];
  __int16 v36;
  __int16 v37;

  v6 = *(uint64_t **)(a1 + 16);
  if (!v6)
  {
    v6 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v6 = 0;
    v22 = *(WTF::StringImpl ****)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (v22)
    {
      v23 = *v22;
      if (*v22)
      {
        v24 = *((unsigned int *)v23 - 1);
        if ((_DWORD)v24)
        {
          v25 = *v22;
          do
          {
            v26 = *v25;
            if (*v25 != (WTF::StringImpl *)-1)
            {
              *v25 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                {
                  WTF::StringImpl::~StringImpl(v26, v15, v16, v17, v18, v19, v20, v21);
                  WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
                }
                else
                {
                  *(_DWORD *)v26 -= 2;
                }
              }
            }
            v25 += 2;
            --v24;
          }
          while (v24);
        }
        WTF::fastFree((unint64_t)(v23 - 2), v15, v16, v17, v18, v19, v20, v21);
      }
      WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
      v6 = *(uint64_t **)(a1 + 16);
    }
  }
  v7 = *v6;
  if (*v6)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = *a2;
    v10 = *((_DWORD *)*a2 + 4);
    if ((v10 & 0x20) != 0)
      v10 = *((_DWORD *)v9 + 8);
    v11 = v8 & (v10 >> 8);
    v12 = *(WTF::StringImpl **)(v7 + 16 * v11);
    if (v12 != v9)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v8;
        v12 = *(WTF::StringImpl **)(v7 + 16 * v11);
        ++v13;
        if (v12 == v9)
          goto LABEL_11;
      }
      v11 = *(unsigned int *)(v7 - 4);
    }
LABEL_11:
    if (v11 != *(_DWORD *)(v7 - 4))
      return 0;
  }
  v37 = a3 | 1;
  v36 = 2051;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry&>((uint64_t *)a1, a2, &v36, (uint64_t)v35);
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>(*(uint64_t **)(a1 + 16), a2, &v37, (uint64_t)v35);
  return v35[16] != 0;
}

void JSC::CompactTDZEnvironment::sortCompact(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v8 = *(unsigned int *)(a1 + 12);
  v9 = 126 - 2 * __clz(v8);
  if ((_DWORD)v8)
    v10 = v9;
  else
    v10 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,false>(*(unsigned int **)a1, (WTF::AtomStringImpl *)(*(_QWORD *)a1 + 5 * v8), v10, 1, a5, a6, a7, a8);
}

uint64_t JSC::CompactTDZEnvironment::CompactTDZEnvironment(uint64_t result, WTF::StringImpl ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::AtomStringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  char *v35;
  int v36;
  char v37;

  v8 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  if (!*a2 || (v9 = *((unsigned int *)*a2 - 3), !(_DWORD)v9))
  {
    v19 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_11;
  }
  if (v9 < 0x33333334)
  {
    v11 = 5 * v9;
    v12 = WTF::fastMalloc((WTF *)(5 * v9));
    v13 = (unsigned int *)v12;
    v14 = v11 / 5;
    v15 = *a2;
    if (!*a2 || !*((_DWORD *)v15 - 3))
      goto LABEL_10;
    v16 = *((unsigned int *)v15 - 1);
    if ((_DWORD)v16)
    {
      v17 = 8 * v16;
      v18 = *a2;
      while ((unint64_t)*v18 + 1 <= 1)
      {
        ++v18;
        v17 -= 8;
        if (!v17)
          goto LABEL_10;
      }
    }
    else
    {
      v18 = *a2;
    }
    v32 = &v15[v16];
    if (v18 == v32)
    {
LABEL_10:
      v19 = (WTF::AtomStringImpl *)v12;
      goto LABEL_11;
    }
    LODWORD(v20) = 0;
    v33 = *v18;
LABEL_26:
    v34 = *((_DWORD *)v33 + 4);
    if (v34 < 0x100)
    {
      v36 = WTF::StringImpl::hashSlowCase(v33);
      v33 = *v18;
      *(_DWORD *)(v8 + 24) ^= v36;
      if (!v33)
        goto LABEL_29;
    }
    else
    {
      *(_DWORD *)(v8 + 24) ^= v34 >> 8;
    }
    *(_DWORD *)v33 += 2;
LABEL_29:
    v35 = (char *)v13 + 5 * v20;
    v35[4] = BYTE4(v33);
    *(_DWORD *)v35 = (_DWORD)v33;
    v20 = (v20 + 1);
    while (++v18 != v32)
    {
      v33 = *v18;
      if ((unint64_t)*v18 + 1 > 1)
      {
        if (v18 != v32)
          goto LABEL_26;
        break;
      }
    }
    v19 = (WTF::AtomStringImpl *)((char *)v13 + 5 * v20);
    if ((_DWORD)v20)
    {
      v21 = 126 - 2 * __clz(v20);
LABEL_12:
      std::__introsort<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,false>(v13, v19, v21, 1, a5, a6, a7, a8);
      v29 = *(unsigned int *)(v8 + 16);
      if ((_DWORD)v29 != -1)
      {
        if (!(_DWORD)v29)
        {
          v30 = *(unsigned int *)(v8 + 12);
          if ((_DWORD)v30)
            WTF::VectorTypeOperations<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>::destruct(*(WTF::AtomStringImpl **)v8, (WTF::AtomStringImpl *)(*(_QWORD *)v8 + 5 * v30), v23, v24, v25, v26, v27, v28);
          v31 = *(WTF::AtomStringImpl **)v8;
          if (*(_QWORD *)v8)
          {
            *(_QWORD *)v8 = 0;
            *(_DWORD *)(v8 + 8) = 0;
            WTF::fastFree((unint64_t)v31, v22, v23, v24, v25, v26, v27, v28);
          }
          *(_QWORD *)v8 = v13;
          *(_DWORD *)(v8 + 8) = v14;
          *(_DWORD *)(v8 + 12) = v20;
          return v8;
        }
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrINS6_17UniquedStringImplENS6_15PackedPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_7HashSetINS8_IS9_NS6_12RawPtrTraitsIS9_EESD_EEN3JSC17IdentifierRepHashENS6_10HashTraitsISL_EENS6_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v29])(&v37, v8);
      }
      *(_QWORD *)v8 = v13;
      *(_DWORD *)(v8 + 8) = v14;
      *(_DWORD *)(v8 + 12) = v20;
      *(_DWORD *)(v8 + 16) = 0;
      return v8;
    }
LABEL_11:
    LODWORD(v20) = 0;
    v21 = 0;
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

void JSC::CompactTDZEnvironment::toTDZEnvironmentSlow(JSC::CompactTDZEnvironment *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl ***v49;
  _QWORD *v50;
  WTF::StringImpl *v51;
  _BYTE v52[24];
  WTF::StringImpl **v53;

  v53 = 0;
  if (*((_DWORD *)this + 4))
  {
LABEL_40:
    v48 = std::__throw_bad_variant_access[abi:sn180100]();
    JSC::CompactTDZEnvironmentMap::get(v48, v49, v50);
    return;
  }
  v9 = *((_DWORD *)this + 3);
  if (!v9)
  {
    v23 = 0;
    goto LABEL_25;
  }
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = (WTF::StringImpl *)(*(unsigned int *)(*(_QWORD *)this + v10) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)this + v10 + 4) << 32));
    if (v12)
      *(_DWORD *)v12 += 2;
    v51 = v12;
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)&v53, (WTF::AtomStringImpl *)&v51, a3, a4, a5, a6, a7, a8, (uint64_t)v52);
    v14 = v51;
    v51 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, v13, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
    ++v11;
    v10 += 5;
  }
  while (v11 < *((unsigned int *)this + 3));
  v23 = (uint64_t)v53;
  v9 = *((_DWORD *)this + 4);
  v53 = 0;
  if (v9 == -1)
    goto LABEL_26;
  if (v9 != 1)
  {
LABEL_25:
    ((void (*)(_BYTE *, JSC::CompactTDZEnvironment *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrINS6_17UniquedStringImplENS6_15PackedPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_7HashSetINS8_IS9_NS6_12RawPtrTraitsIS9_EESD_EEN3JSC17IdentifierRepHashENS6_10HashTraitsISL_EENS6_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v9])(v52, this);
LABEL_26:
    *(_QWORD *)this = v23;
    *((_DWORD *)this + 4) = 1;
    goto LABEL_27;
  }
  v24 = *(WTF::StringImpl ***)this;
  *(_QWORD *)this = v23;
  if (!v24)
    return;
  v25 = *((unsigned int *)v24 - 1);
  if ((_DWORD)v25)
  {
    v26 = v24;
    do
    {
      v27 = *v26;
      if (*v26 != (WTF::StringImpl *)-1)
      {
        *v26 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, v13, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      ++v26;
      --v25;
    }
    while (v25);
  }
  WTF::fastFree((unint64_t)(v24 - 2), v13, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)this + 4) != 1)
    goto LABEL_40;
LABEL_27:
  v36 = (uint64_t)v53;
  if (v53)
  {
    v37 = *((unsigned int *)v53 - 1);
    if ((_DWORD)v37)
    {
      v38 = v53;
      do
      {
        v39 = *v38;
        if (*v38 != (WTF::StringImpl *)-1)
        {
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, v13, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
        }
        ++v38;
        --v37;
      }
      while (v37);
    }
    WTF::fastFree(v36 - 16, v13, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::CompactTDZEnvironmentMap::get(uint64_t a1@<X0>, WTF::StringImpl ***a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v6 = WTF::fastMalloc((WTF *)0x20);
  v31 = JSC::CompactTDZEnvironment::CompactTDZEnvironment(v6, a2, v7, v8, v9, v10, v11, v12);
  v28 = 1;
  WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(a1 + 8), &v31, &v28, v13, v14, v15, v16, v17, (uint64_t)v29);
  if (v30)
  {
    ++*(_DWORD *)a1;
    *a3 = v6;
    a3[1] = a1;
  }
  else
  {
    v25 = (unint64_t *)v29[0];
    ++*(_DWORD *)(v29[0] + 8);
    v26 = *v25;
    if (v26 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1988795F8);
    }
    ++*(_DWORD *)a1;
    *a3 = v26;
    a3[1] = a1;
    v27 = *(unsigned int *)(v6 + 16);
    if ((_DWORD)v27 != -1)
      ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrINS6_17UniquedStringImplENS6_15PackedPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_7HashSetINS8_IS9_NS6_12RawPtrTraitsIS9_EESD_EEN3JSC17IdentifierRepHashENS6_10HashTraitsISL_EENS6_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v27])(v29, v6);
    *(_DWORD *)(v6 + 16) = -1;
    WTF::fastFree(v6, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t *JSC::CompactTDZEnvironmentMap::get@<X0>(JSC::CompactTDZEnvironmentMap *this@<X0>, JSC::CompactTDZEnvironment *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, JSC::CompactTDZEnvironment **a9@<X8>)
{
  JSC::CompactTDZEnvironment *v10;
  uint64_t *result;
  _BOOL4 v14;
  JSC::CompactTDZEnvironment **v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  JSC::CompactTDZEnvironment *v19;

  v10 = a2;
  v19 = a2;
  v16 = 1;
  result = WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)this + 1, (uint64_t *)&v19, &v16, a4, a5, a6, a7, a8, (uint64_t)&v17);
  v14 = v18;
  *a3 = v18;
  if (!v14)
  {
    v15 = (JSC::CompactTDZEnvironment **)v17;
    ++*(_DWORD *)(v17 + 8);
    v10 = *v15;
    if (*v15 == (JSC::CompactTDZEnvironment *)1 || !v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1988796CCLL);
    }
  }
  ++*(_DWORD *)this;
  *a9 = v10;
  a9[1] = this;
  return result;
}

uint64_t *WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  _QWORD v37[6];
  _QWORD *v38;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::expand(result, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
  v16 = *(_DWORD *)(*a2 + 24);
  for (i = 1; ; ++i)
  {
    v18 = v16 & v14;
    v19 = v13 + 16 * (v16 & v14);
    v20 = *(_QWORD *)v19;
    if (!*(_QWORD *)v19)
    {
      if (v15)
      {
        *v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v11 - 16);
        v19 = (unint64_t)v15;
      }
      *(_QWORD *)v19 = *a2;
      *(_DWORD *)(v19 + 8) = *a3;
      v29 = *v11;
      if (*v11)
        v30 = *(_DWORD *)(v29 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *v11;
      if (*v11)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
          goto LABEL_23;
      }
      else if (3 * v34 > 4 * v33)
      {
        goto LABEL_23;
      }
      result = (uint64_t *)WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::expand(v11, v19, (uint64_t)a3, a4, a5, a6, a7, a8);
      v19 = (unint64_t)result;
      v31 = *v11;
      if (*v11)
      {
LABEL_34:
        v34 = *(unsigned int *)(v31 - 4);
        goto LABEL_23;
      }
      v34 = 0;
LABEL_23:
      v28 = v31 + 16 * v34;
      v27 = 1;
      goto LABEL_14;
    }
    if (v20 == 1)
    {
      v15 = (_QWORD *)(v13 + 16 * v18);
      goto LABEL_8;
    }
    v21 = *a2;
    if (v20 == *a2)
      goto LABEL_11;
    if (*(_DWORD *)(v20 + 24) == *(_DWORD *)(v21 + 24))
      break;
LABEL_8:
    v16 = i + v18;
  }
  v35 = 0;
  v37[0] = v21;
  v37[1] = &v35;
  v37[2] = &v36;
  v37[3] = v21;
  v37[4] = &v35;
  v37[5] = &v36;
  v22 = *(unsigned int *)(v20 + 16);
  if ((_DWORD)v22 == -1)
  {
    result = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_34;
  }
  v23 = v11;
  v24 = v15;
  v38 = v37;
  result = (uint64_t *)((uint64_t (*)(_QWORD **))off_1E3596DB0[v22])(&v38);
  v15 = v24;
  v11 = v23;
  if (!v35)
    goto LABEL_8;
LABEL_11:
  v25 = *v11;
  if (*v11)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v27 = 0;
  v28 = v25 + 16 * v26;
LABEL_14:
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v28;
  *(_BYTE *)(a9 + 16) = v27;
  return result;
}

void JSC::CompactTDZEnvironmentMap::Handle::~Handle(JSC::CompactTDZEnvironmentMap::Handle *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Profiler::BytecodeSequence *v10;
  uint64_t v11;
  uint64_t *v12;
  JSC::Profiler::BytecodeSequence *v13;
  JSC::Profiler::BytecodeSequence *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    *((_QWORD *)this + 1) = 0;
    return;
  }
  if (!*(_QWORD *)this)
  {
    __break(0xC471u);
    goto LABEL_35;
  }
  v27 = *(_QWORD *)this;
  v10 = WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>>,JSC::CompactTDZEnvironmentKey>((uint64_t *)(v2 + 8), &v27);
  v11 = *((_QWORD *)this + 1);
  v14 = *(JSC::Profiler::BytecodeSequence **)(v11 + 8);
  v12 = (uint64_t *)(v11 + 8);
  v13 = v14;
  if (v14)
    v13 = (JSC::Profiler::BytecodeSequence *)((char *)v13 + 16 * *((unsigned int *)v13 - 1));
  if (v13 == v10)
  {
    __break(0xC471u);
LABEL_35:
    JUMPOUT(0x198879AB8);
  }
  v15 = *((_DWORD *)v10 + 2) - 1;
  *((_DWORD *)v10 + 2) = v15;
  if (!v15)
  {
    if (*v12)
    {
      v17 = *v12 + 16 * *(unsigned int *)(*v12 - 4);
      if ((JSC::Profiler::BytecodeSequence *)v17 != v10)
      {
LABEL_14:
        if ((JSC::Profiler::BytecodeSequence *)v17 != v10)
        {
          *(_QWORD *)v10 = 1;
          ++*(_DWORD *)(*v12 - 16);
          v18 = *v12;
          v19 = *v12 ? *(_DWORD *)(v18 - 12) - 1 : -1;
          *(_DWORD *)(v18 - 12) = v19;
          v20 = *v12;
          if (*v12)
          {
            v21 = 6 * *(_DWORD *)(v20 - 12);
            v22 = *(_DWORD *)(v20 - 4);
            if (v21 < v22 && v22 >= 9)
              WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::rehash(v12, v22 >> 1, v4, v5, v6, v7, v8, v9);
          }
        }
      }
    }
    else if (v10)
    {
      v17 = 0;
      goto LABEL_14;
    }
    v24 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v25 = *(unsigned int *)(v24 + 16);
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, _QWORD))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS6_6RefPtrINS6_17UniquedStringImplENS6_15PackedPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_7HashSetINS8_IS9_NS6_12RawPtrTraitsIS9_EESD_EEN3JSC17IdentifierRepHashENS6_10HashTraitsISL_EENS6_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v25])(&v28, *(_QWORD *)this);
      *(_DWORD *)(v24 + 16) = -1;
      WTF::fastFree(v24, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  v16 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v26 = *(_QWORD *)(v16 + 8);
      if (v26)
        WTF::fastFree(v26 - 16, v3, v4, v5, v6, v7, v8, v9);
      WTF::fastFree(v16, v3, v4, v5, v6, v7, v8, v9);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v5, a2);
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,false>(unsigned int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  char v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  char v59;
  char v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

unsigned int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,0>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v5 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  v6 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
  v7 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
  if (v5 >= v6)
  {
    if (v7 < v5)
    {
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = BYTE4(v7);
      *((_BYTE *)a3 + 4) = BYTE4(v5);
      *a3 = v5;
      v8 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
      v9 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
      if (v8 >= v9)
      {
        v7 = v5;
      }
      else
      {
        *result = *a2;
        *((_BYTE *)result + 4) = BYTE4(v8);
        *((_BYTE *)a2 + 4) = BYTE4(v9);
        *a2 = v9;
        v7 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
      }
    }
  }
  else
  {
    if (v7 < v5)
    {
      *result = *a3;
      *((_BYTE *)result + 4) = BYTE4(v7);
      *((_BYTE *)a3 + 4) = BYTE4(v6);
LABEL_9:
      *a3 = v6;
      v7 = v6;
      goto LABEL_11;
    }
    *result = *a2;
    *((_BYTE *)result + 4) = BYTE4(v5);
    *((_BYTE *)a2 + 4) = BYTE4(v6);
    *a2 = v6;
    v7 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
    if (v7 < v6)
    {
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = BYTE4(v7);
      *((_BYTE *)a3 + 4) = BYTE4(v6);
      goto LABEL_9;
    }
  }
LABEL_11:
  v10 = *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  if (v7 > v10)
  {
    *a3 = *a4;
    *((_BYTE *)a3 + 4) = BYTE4(v10);
    *((_BYTE *)a4 + 4) = BYTE4(v7);
    *a4 = v7;
    v11 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
    v12 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
    if (v11 < v12)
    {
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = BYTE4(v11);
      *((_BYTE *)a3 + 4) = BYTE4(v12);
      *a3 = v12;
      v13 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
      v14 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
      if (v13 < v14)
      {
        *result = *a2;
        *((_BYTE *)result + 4) = BYTE4(v13);
        *((_BYTE *)a2 + 4) = BYTE4(v14);
        *a2 = v14;
      }
    }
  }
  v15 = *a5 | ((unint64_t)*((unsigned __int8 *)a5 + 4) << 32);
  v16 = *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  if (v15 < v16)
  {
    *a4 = *a5;
    *((_BYTE *)a4 + 4) = BYTE4(v15);
    *((_BYTE *)a5 + 4) = BYTE4(v16);
    *a5 = v16;
    v17 = *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
    v18 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
    if (v17 < v18)
    {
      *a3 = *a4;
      *((_BYTE *)a3 + 4) = BYTE4(v17);
      *((_BYTE *)a4 + 4) = BYTE4(v18);
      *a4 = v18;
      v19 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
      v20 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
      if (v19 < v20)
      {
        *a2 = *a3;
        *((_BYTE *)a2 + 4) = BYTE4(v19);
        *((_BYTE *)a3 + 4) = BYTE4(v20);
        *a3 = v20;
        v21 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
        v22 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
        if (v21 < v22)
        {
          *result = *a2;
          *((_BYTE *)result + 4) = BYTE4(v21);
          *((_BYTE *)a2 + 4) = BYTE4(v22);
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

void std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t i;
  unsigned int *v21;
  WTF::AtomStringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a1 == a2)
    return;
  v10 = (WTF::AtomStringImpl *)((char *)a1 + 5);
  if ((WTF::AtomStringImpl *)((char *)a1 + 5) == a2)
    return;
  v11 = 0;
  v12 = a1;
  do
  {
    v13 = *((unsigned __int8 *)v12 + 9);
    v14 = *(unsigned int *)((char *)v12 + 5);
    v15 = *((unsigned __int8 *)v12 + 4);
    v16 = *(unsigned int *)v12;
    v12 = v10;
    v17 = v14 | (v13 << 32);
    v18 = v16 | (v15 << 32);
    if (v17 >= v18)
      goto LABEL_17;
    v19 = 0;
    *((_BYTE *)v12 + 4) = 0;
    *(_DWORD *)v12 = 0;
    for (i = v11; ; i -= 5)
    {
      v21 = (unsigned int *)((char *)a1 + i);
      *((_BYTE *)v21 + 4) = 0;
      *v21 = 0;
      *(unsigned int *)((char *)v21 + 5) = v18;
      *((_BYTE *)v21 + 9) = BYTE4(v18);
      if (!v19)
        goto LABEL_9;
      if (*(_DWORD *)v19 == 2)
        break;
      *(_DWORD *)v19 -= 2;
LABEL_9:
      if (!i)
        goto LABEL_13;
LABEL_10:
      v22 = (WTF::AtomStringImpl *)((char *)a1 + i);
      v18 = *(unsigned int *)((char *)a1 + i - 5) | ((unint64_t)*((unsigned __int8 *)a1 + i - 1) << 32);
      if (v17 >= v18)
        goto LABEL_14;
      v19 = (WTF::StringImpl *)(*v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
    }
    WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    if (i)
      goto LABEL_10;
LABEL_13:
    v22 = a1;
LABEL_14:
    v31 = (WTF::StringImpl *)(*(unsigned int *)v22 | ((unint64_t)*((unsigned __int8 *)v22 + 4) << 32));
    *(_DWORD *)v22 = v17;
    *((_BYTE *)v22 + 4) = BYTE4(v17);
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
LABEL_17:
    v10 = (WTF::AtomStringImpl *)((char *)v12 + 5);
    v11 += 5;
  }
  while ((WTF::AtomStringImpl *)((char *)v12 + 5) != a2);
}

void std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  char *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    v9 = (unsigned int *)((char *)a1 + 5);
    if ((WTF::AtomStringImpl *)((char *)a1 + 5) != a2)
    {
      v10 = 0;
      v11 = 0x3333333333333333 * (a1 - a2);
      v12 = -2;
      v13 = 1;
      v14 = (unsigned int *)a1;
      do
      {
        v15 = 5 * v10;
        v10 = v13;
        v16 = *v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32);
        if (v16 < (*(unsigned int *)((char *)a1 + v15) | ((unint64_t)*((unsigned __int8 *)a1 + v15 + 4) << 32)))
        {
          v17 = 0;
          *((_BYTE *)v9 + 4) = 0;
          *v9 = 0;
          v18 = *(unsigned int *)((char *)a1 + v15) | ((unint64_t)*((unsigned __int8 *)a1 + v15 + 4) << 32);
          v19 = v12;
          v20 = v14;
          do
          {
            *((_BYTE *)v20 + 4) = 0;
            *v20 = 0;
            *(unsigned int *)((char *)v20 + 5) = v18;
            *((_BYTE *)v20 + 9) = BYTE4(v18);
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
              {
                WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
              }
              else
              {
                *(_DWORD *)v17 -= 2;
              }
            }
            if (__CFADD__(v19++, 1))
            {
              __break(1u);
              return;
            }
            v22 = (char *)v20 - 5;
            v18 = *(unsigned int *)((char *)v20 - 5) | ((unint64_t)*((unsigned __int8 *)v20 - 1) << 32);
            v17 = (WTF::StringImpl *)(*v20 | ((unint64_t)*((unsigned __int8 *)v20 + 4) << 32));
            v20 = (unsigned int *)((char *)v20 - 5);
          }
          while (v16 < v18);
          *(_DWORD *)(v22 + 5) = v16;
          v22[9] = BYTE4(v16);
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
            }
            else
            {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        v13 = v10 + 1;
        v9 = (unsigned int *)((char *)a1 + 5 * v10 + 5);
        v14 = (unsigned int *)((char *)v14 + 5);
        --v12;
      }
      while (v10 + 1 != v11);
    }
  }
}

void std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  WTF::AtomStringImpl *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (a1 != a2)
  {
    v9 = a2;
    v11 = a2 - a1;
    v12 = (a2 - a1) / 5;
    if (a2 - a1 >= 6)
    {
      v13 = ((unint64_t)(v12 - 2) >> 1) + 1;
      v14 = (unsigned int *)((char *)a1 + 5 * ((unint64_t)(v12 - 2) >> 1));
      do
      {
        std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((uint64_t)a1, v12, v14, a4, a5, a6, a7, a8);
        v14 = (unsigned int *)((char *)v14 - 5);
        --v13;
      }
      while (v13);
    }
    if (v9 != (WTF::AtomStringImpl *)a3)
    {
      v15 = (unsigned int *)v9;
      do
      {
        v16 = *v15 | ((unint64_t)*((unsigned __int8 *)v15 + 4) << 32);
        v17 = *(unsigned int *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
        if (v16 < v17)
        {
          *v15 = *(_DWORD *)a1;
          *((_BYTE *)v15 + 4) = BYTE4(v17);
          *((_BYTE *)a1 + 4) = BYTE4(v16);
          *(_DWORD *)a1 = v16;
          std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>((uint64_t)a1, v12, (unsigned int *)a1, a4, a5, a6, a7, a8);
        }
        v15 = (unsigned int *)((char *)v15 + 5);
      }
      while (v15 != (unsigned int *)a3);
    }
    if (v11 >= 6)
    {
      v18 = v11 / 5uLL;
      while (1)
      {
        v19 = 0;
        v20 = *(unsigned int *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
        *(_DWORD *)a1 = 0;
        *((_BYTE *)a1 + 4) = 0;
        v21 = a1;
        do
        {
          v22 = v21;
          v21 = (WTF::AtomStringImpl *)((char *)v21 + 5 * v19 + 5);
          if (2 * v19 + 2 >= v18)
          {
            v23 = *(unsigned int *)v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32);
            v19 = (2 * v19) | 1;
          }
          else
          {
            v23 = *(unsigned int *)v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32);
            if (v23 >= (*(unsigned int *)((char *)v21 + 5) | ((unint64_t)*((unsigned __int8 *)v21 + 9) << 32)))
            {
              v19 = (2 * v19) | 1;
            }
            else
            {
              v23 = *(unsigned int *)((char *)v21 + 5) | ((unint64_t)*((unsigned __int8 *)v21 + 9) << 32);
              v21 = (WTF::AtomStringImpl *)((char *)v21 + 5);
              v19 = 2 * v19 + 2;
            }
          }
          *((_BYTE *)v21 + 4) = 0;
          *(_DWORD *)v21 = 0;
          v24 = (WTF::StringImpl *)(*(unsigned int *)v22 | ((unint64_t)*((unsigned __int8 *)v22 + 4) << 32));
          *(_DWORD *)v22 = v23;
          *((_BYTE *)v22 + 4) = BYTE4(v23);
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
            {
              WTF::StringImpl::~StringImpl(v24, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
            }
            else
            {
              *(_DWORD *)v24 -= 2;
            }
          }
        }
        while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v9 = (WTF::AtomStringImpl *)((char *)v9 - 5);
        if (v21 == v9)
        {
          v53 = (WTF::StringImpl *)(*(unsigned int *)v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
          *(_DWORD *)v21 = v20;
          *((_BYTE *)v21 + 4) = BYTE4(v20);
          if (!v53)
            goto LABEL_46;
          goto LABEL_44;
        }
        v33 = *((_BYTE *)v9 + 4);
        v34 = *(_DWORD *)v9;
        *(_DWORD *)v9 = 0;
        *((_BYTE *)v9 + 4) = 0;
        v35 = (WTF::StringImpl *)(*(unsigned int *)v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
        *(_DWORD *)v21 = v34;
        *((_BYTE *)v21 + 4) = v33;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        v36 = (WTF::StringImpl *)(*(unsigned int *)v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32));
        *(_DWORD *)v9 = v20;
        *((_BYTE *)v9 + 4) = BYTE4(v20);
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        v37 = (WTF::AtomStringImpl *)((char *)v21 + 5) - a1;
        if (v37 >= 6)
        {
          v38 = (v37 / 5uLL - 2) >> 1;
          v39 = (unsigned int *)((char *)a1 + 5 * v38);
          v40 = *(unsigned int *)v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32);
          if ((*v39 | ((unint64_t)*((unsigned __int8 *)v39 + 4) << 32)) < v40)
            break;
        }
LABEL_46:
        if (v18-- <= 2)
          return;
      }
      *((_BYTE *)v21 + 4) = 0;
      *(_DWORD *)v21 = 0;
      v41 = *v39 | ((unint64_t)*((unsigned __int8 *)v39 + 4) << 32);
      while (1)
      {
        v42 = v39;
        *((_BYTE *)v39 + 4) = 0;
        *v39 = 0;
        v43 = (WTF::StringImpl *)(*(unsigned int *)v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
        *(_DWORD *)v21 = v41;
        *((_BYTE *)v21 + 4) = BYTE4(v41);
        if (!v43)
          goto LABEL_37;
        if (*(_DWORD *)v43 != 2)
          break;
        WTF::StringImpl::~StringImpl(v43, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        if (!v38)
        {
LABEL_41:
          v53 = (WTF::StringImpl *)(*v42 | ((unint64_t)*((unsigned __int8 *)v42 + 4) << 32));
          *v42 = v40;
          *((_BYTE *)v42 + 4) = BYTE4(v40);
          if (!v53)
            goto LABEL_46;
LABEL_44:
          if (*(_DWORD *)v53 == 2)
          {
            WTF::StringImpl::~StringImpl(v53, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          }
          else
          {
            *(_DWORD *)v53 -= 2;
          }
          goto LABEL_46;
        }
LABEL_38:
        v44 = v38 - 1;
        v38 = (v38 - 1) >> 1;
        v39 = (unsigned int *)((char *)a1 + 4 * v38 + (v44 >> 1));
        v41 = *v39 | ((unint64_t)*((unsigned __int8 *)v39 + 4) << 32);
        v21 = (WTF::AtomStringImpl *)v42;
        if (v41 >= v40)
          goto LABEL_41;
      }
      *(_DWORD *)v43 -= 2;
LABEL_37:
      if (!v38)
        goto LABEL_41;
      goto LABEL_38;
    }
  }
}

unsigned int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
  v4 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
  v5 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = BYTE4(v5);
      *((_BYTE *)a3 + 4) = BYTE4(v3);
      *a3 = v3;
      v7 = *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32);
      v8 = *result | ((unint64_t)*((unsigned __int8 *)result + 4) << 32);
      if (v7 < v8)
      {
        *result = *a2;
        *((_BYTE *)result + 4) = BYTE4(v7);
        *((_BYTE *)a2 + 4) = BYTE4(v8);
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *result = *a2;
      *((_BYTE *)result + 4) = BYTE4(v3);
      v6 = HIDWORD(v4);
      *((_BYTE *)a2 + 4) = BYTE4(v4);
      *a2 = v4;
      v9 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
      if (v9 >= v4)
        return result;
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = BYTE4(v9);
    }
    else
    {
      *result = *a3;
      *((_BYTE *)result + 4) = BYTE4(v5);
      v6 = HIDWORD(v4);
    }
    *((_BYTE *)a3 + 4) = v6;
    *a3 = v4;
  }
  return result;
}

unsigned int *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> *,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &>(unsigned __int8 *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v9 = *(unsigned int *)a1 | ((unint64_t)a1[4] << 32);
  *(_DWORD *)a1 = 0;
  a1[4] = 0;
  if (v9 < (*(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32)))
  {
    v10 = a1 + 5;
    while (v10 != (unsigned __int8 *)a2)
    {
      v11 = v10[4];
      v12 = *(_DWORD *)v10;
      v10 += 5;
      if (v9 < (v12 | (unint64_t)(v11 << 32)))
      {
        v8 = (unsigned int *)(v10 - 5);
        goto LABEL_9;
      }
    }
    goto LABEL_30;
  }
  v13 = (unsigned int *)(a1 + 5);
  do
  {
    v8 = v13;
    if (v13 >= (unsigned int *)a2)
      break;
    v14 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32);
    v13 = (unsigned int *)((char *)v13 + 5);
  }
  while (v9 >= v14);
LABEL_9:
  v15 = (unsigned __int8 *)a2;
  if (v8 < (unsigned int *)a2)
  {
    v15 = (unsigned __int8 *)a2;
    while (v15 != a1)
    {
      v16 = *(_DWORD *)(v15 - 5);
      v15 -= 5;
      if (v9 >= (v16 | ((unint64_t)v15[4] << 32)))
        goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_13:
  if (v8 < (unsigned int *)v15)
  {
    v17 = *v8 | ((unint64_t)*((unsigned __int8 *)v8 + 4) << 32);
    v18 = *(unsigned int *)v15 | ((unint64_t)v15[4] << 32);
LABEL_15:
    *v8 = v18;
    *((_BYTE *)v8 + 4) = BYTE4(v18);
    v15[4] = BYTE4(v17);
    *(_DWORD *)v15 = v17;
    v19 = (unsigned __int8 *)v8 + 5;
    while (v19 != (unsigned __int8 *)a2)
    {
      v20 = v19[4];
      v21 = *(_DWORD *)v19;
      v19 += 5;
      v17 = v21 | (unint64_t)(v20 << 32);
      if (v9 < v17)
      {
        v8 = (unsigned int *)(v19 - 5);
        while (v15 != a1)
        {
          v22 = *(_DWORD *)(v15 - 5);
          v15 -= 5;
          v18 = v22 | ((unint64_t)v15[4] << 32);
          if (v9 >= v18)
          {
            if (v8 < (unsigned int *)v15)
              goto LABEL_15;
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_22:
  v23 = (unsigned int *)((char *)v8 - 5);
  if ((unsigned __int8 *)((char *)v8 - 5) != a1)
  {
    v24 = *((_BYTE *)v8 - 1);
    v25 = *v23;
    *v23 = 0;
    *((_BYTE *)v8 - 1) = 0;
    v26 = a1[4];
    v27 = *(unsigned int *)a1;
    v28 = (_DWORD *)(v27 | (v26 << 32));
    *(_DWORD *)a1 = v25;
    a1[4] = v24;
    if (v28)
    {
      if (*v28 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)(v27 | (v26 << 32)), a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *v28 -= 2;
      }
    }
  }
  a1 = (unsigned __int8 *)(*v23 | ((unint64_t)*((unsigned __int8 *)v8 - 1) << 32));
  *v23 = v9;
  *((_BYTE *)v8 - 1) = BYTE4(v9);
  if (a1)
  {
    if (*(_DWORD *)a1 == 2)
    {
LABEL_31:
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)a1, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      return v8;
    }
    *(_DWORD *)a1 -= 2;
  }
  return v8;
}

unsigned __int8 *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> *,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &>(unsigned __int8 *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9 = 0;
  v10 = *(unsigned int *)a1 | ((unint64_t)a1[4] << 32);
  *(_DWORD *)a1 = 0;
  a1[4] = 0;
  do
  {
    if (&a1[v9 + 5] == (unsigned __int8 *)a2)
      goto LABEL_29;
    v11 = *(unsigned int *)&a1[v9 + 5] | ((unint64_t)a1[v9 + 9] << 32);
    v9 += 5;
  }
  while (v11 < v10);
  v12 = &a1[v9];
  v13 = (unsigned __int8 *)a2;
  if (v9 != 5)
  {
    while (v13 != a1)
    {
      v14 = *(_DWORD *)(v13 - 5);
      v13 -= 5;
      if ((v14 | ((unint64_t)v13[4] << 32)) < v10)
        goto LABEL_10;
    }
    goto LABEL_29;
  }
  do
  {
    if (v12 >= v13)
      break;
    v15 = *(_DWORD *)(v13 - 5);
    v13 -= 5;
  }
  while ((v15 | ((unint64_t)v13[4] << 32)) >= v10);
LABEL_10:
  if (v12 < v13)
  {
    v16 = *(unsigned int *)v13 | ((unint64_t)v13[4] << 32);
    v17 = &a1[v9];
    v18 = v13;
LABEL_12:
    *(_DWORD *)v17 = v16;
    v17[4] = BYTE4(v16);
    v18[4] = BYTE4(v11);
    *(_DWORD *)v18 = v11;
    v19 = v17 + 5;
    while (v19 != (unsigned __int8 *)a2)
    {
      v20 = v19[4];
      v21 = *(_DWORD *)v19;
      v19 += 5;
      v11 = v21 | (unint64_t)(v20 << 32);
      if (v11 >= v10)
      {
        v17 = v19 - 5;
        while (v18 != a1)
        {
          v22 = *(_DWORD *)(v18 - 5);
          v18 -= 5;
          v16 = v22 | ((unint64_t)v18[4] << 32);
          if (v16 < v10)
          {
            if (v17 < v18)
              goto LABEL_12;
            v8 = v19 - 10;
            goto LABEL_21;
          }
        }
        break;
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    return v8;
  }
  v8 = v12 - 5;
LABEL_21:
  if (v8 != a1)
  {
    v23 = v8[4];
    v24 = *(_DWORD *)v8;
    *(_DWORD *)v8 = 0;
    v8[4] = 0;
    v25 = a1[4];
    v26 = *(unsigned int *)a1;
    v27 = (_DWORD *)(v26 | (v25 << 32));
    *(_DWORD *)a1 = v24;
    a1[4] = v23;
    if (v27)
    {
      if (*v27 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)(v26 | (v25 << 32)), a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      else
      {
        *v27 -= 2;
      }
    }
  }
  a1 = (unsigned __int8 *)(*(unsigned int *)v8 | ((unint64_t)v8[4] << 32));
  *(_DWORD *)v8 = v10;
  v8[4] = BYTE4(v10);
  if (a1)
  {
    if (*(_DWORD *)a1 != 2)
    {
      *(_DWORD *)a1 -= 2;
      return v8;
    }
    goto LABEL_30;
  }
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(unsigned int *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _BOOL8 result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  uint64_t i;
  char *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;

  v10 = 0xCCCCCCCCCCCCCCCDLL * (a2 - (WTF::AtomStringImpl *)a1);
  result = 1;
  switch(v10)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v12 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
      v13 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
      if (v12 < v13)
      {
        *a1 = *(_DWORD *)((char *)a2 - 5);
        v14 = HIDWORD(v12);
        goto LABEL_10;
      }
      return result;
    case 3uLL:
      v21 = *(unsigned int *)((char *)a1 + 5) | ((unint64_t)*((unsigned __int8 *)a1 + 9) << 32);
      v13 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
      v22 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
      if (v21 >= v13)
      {
        if (v22 < v21)
        {
          *(unsigned int *)((char *)a1 + 5) = *(_DWORD *)((char *)a2 - 5);
          *((_BYTE *)a1 + 9) = BYTE4(v22);
          *((_BYTE *)a2 - 1) = BYTE4(v21);
          *(_DWORD *)((char *)a2 - 5) = v21;
          v58 = *(unsigned int *)((char *)a1 + 5) | ((unint64_t)*((unsigned __int8 *)a1 + 9) << 32);
          v59 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
          if (v58 < v59)
          {
            *a1 = *(unsigned int *)((char *)a1 + 5);
            *((_BYTE *)a1 + 4) = BYTE4(v58);
            *(unsigned int *)((char *)a1 + 5) = v59;
            *((_BYTE *)a1 + 9) = BYTE4(v59);
          }
        }
      }
      else
      {
        if (v22 < v21)
        {
          *a1 = *(_DWORD *)((char *)a2 - 5);
          v14 = HIDWORD(v22);
LABEL_10:
          *((_BYTE *)a1 + 4) = v14;
          v23 = HIDWORD(v13);
          goto LABEL_11;
        }
        *a1 = *(unsigned int *)((char *)a1 + 5);
        *((_BYTE *)a1 + 4) = BYTE4(v21);
        *(unsigned int *)((char *)a1 + 5) = v13;
        v23 = HIDWORD(v13);
        *((_BYTE *)a1 + 9) = BYTE4(v13);
        v64 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
        if (v64 < v13)
        {
          *(unsigned int *)((char *)a1 + 5) = *(_DWORD *)((char *)a2 - 5);
          *((_BYTE *)a1 + 9) = BYTE4(v64);
LABEL_11:
          *((_BYTE *)a2 - 1) = v23;
          *(_DWORD *)((char *)a2 - 5) = v13;
        }
      }
      return result;
    case 4uLL:
      v24 = (unsigned int *)((char *)a1 + 10);
      v25 = *(unsigned int *)((char *)a1 + 5) | ((unint64_t)*((unsigned __int8 *)a1 + 9) << 32);
      v26 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
      v27 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int8 *)a1 + 14) << 32);
      if (v25 >= v26)
      {
        if (v27 >= v25)
        {
LABEL_47:
          v30 = v27;
          v25 = v27;
          goto LABEL_48;
        }
        *(unsigned int *)((char *)a1 + 5) = *(unsigned int *)((char *)a1 + 10);
        *((_BYTE *)a1 + 9) = BYTE4(v27);
        v28 = (char *)a1;
        *v24 = v25;
        *((_BYTE *)a1 + 14) = BYTE4(v25);
        v29 = (char *)a1 + 5;
        v30 = v25;
        v31 = v25;
        if (v27 >= v26)
        {
LABEL_48:
          v60 = *(unsigned int *)((char *)a2 - 5) | ((unint64_t)*((unsigned __int8 *)a2 - 1) << 32);
          if (v30 > v60)
          {
            *v24 = *(_DWORD *)((char *)a2 - 5);
            *((_BYTE *)a1 + 14) = BYTE4(v60);
            *((_BYTE *)a2 - 1) = BYTE4(v25);
            *(_DWORD *)((char *)a2 - 5) = v25;
            v61 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int8 *)a1 + 14) << 32);
            v62 = *(unsigned int *)((char *)a1 + 5) | ((unint64_t)*((unsigned __int8 *)a1 + 9) << 32);
            if (v61 < v62)
            {
              *(unsigned int *)((char *)a1 + 5) = *(unsigned int *)((char *)a1 + 10);
              *((_BYTE *)a1 + 9) = BYTE4(v61);
              *(unsigned int *)((char *)a1 + 10) = v62;
              *((_BYTE *)a1 + 14) = BYTE4(v62);
              v63 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
              if (v61 < v63)
              {
                *a1 = v61;
                *((_BYTE *)a1 + 4) = BYTE4(v61);
                *(unsigned int *)((char *)a1 + 5) = v63;
                *((_BYTE *)a1 + 9) = BYTE4(v63);
              }
            }
          }
          return 1;
        }
      }
      else
      {
        v28 = (char *)a1;
        v29 = (char *)a1 + 10;
        v30 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
        v31 = v30;
        if (v27 >= v25)
        {
          *a1 = *(unsigned int *)((char *)a1 + 5);
          *((_BYTE *)a1 + 4) = BYTE4(v25);
          v28 = (char *)a1 + 5;
          *(unsigned int *)((char *)a1 + 5) = v26;
          *((_BYTE *)a1 + 9) = BYTE4(v26);
          v29 = (char *)a1 + 10;
          v30 = v26;
          v31 = v26;
          if (v27 >= v26)
            goto LABEL_47;
        }
      }
      *(_DWORD *)v28 = v27;
      v28[4] = BYTE4(v27);
      *(_DWORD *)v29 = v26;
      v29[4] = BYTE4(v26);
      v25 = v31;
      goto LABEL_48;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*,0>(a1, (unsigned int *)((char *)a1 + 5), (unsigned int *)((char *)a1 + 10), (unsigned int *)((char *)a1 + 15), (unsigned int *)((char *)a2 - 5));
      return 1;
    default:
      v15 = (WTF::AtomStringImpl *)((char *)a1 + 10);
      v16 = *(unsigned int *)((char *)a1 + 5) | ((unint64_t)*((unsigned __int8 *)a1 + 9) << 32);
      v17 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
      v18 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int8 *)a1 + 14) << 32);
      if (v16 >= v17)
      {
        if (v18 >= v16)
          goto LABEL_21;
        *(unsigned int *)((char *)a1 + 5) = *(unsigned int *)((char *)a1 + 10);
        *((_BYTE *)a1 + 9) = BYTE4(v18);
        *(_DWORD *)v15 = v16;
        *((_BYTE *)a1 + 14) = BYTE4(v16);
        v19 = (char *)a1;
        v20 = (char *)a1 + 5;
      }
      else
      {
        v19 = (char *)a1;
        v20 = (char *)a1 + 10;
        if (v18 < v16)
          goto LABEL_20;
        *a1 = *(unsigned int *)((char *)a1 + 5);
        *((_BYTE *)a1 + 4) = BYTE4(v16);
        *(unsigned int *)((char *)a1 + 5) = v17;
        *((_BYTE *)a1 + 9) = BYTE4(v17);
        v19 = (char *)a1 + 5;
        v20 = (char *)a1 + 10;
      }
      if (v18 >= v17)
        goto LABEL_21;
LABEL_20:
      *(_DWORD *)v19 = v18;
      v19[4] = BYTE4(v18);
      *(_DWORD *)v20 = v17;
      v20[4] = BYTE4(v17);
LABEL_21:
      v32 = (WTF::AtomStringImpl *)((char *)a1 + 15);
      if ((WTF::AtomStringImpl *)((char *)a1 + 15) == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      while (1)
      {
        v35 = *(unsigned int *)v32 | ((unint64_t)*((unsigned __int8 *)v32 + 4) << 32);
        v36 = *(unsigned int *)v15 | ((unint64_t)*((unsigned __int8 *)v15 + 4) << 32);
        if (v35 < v36)
        {
          v37 = 0;
          *((_BYTE *)v32 + 4) = 0;
          *(_DWORD *)v32 = 0;
          for (i = v33; ; i -= 5)
          {
            v39 = (char *)a1 + i;
            v39[14] = 0;
            *(_DWORD *)(v39 + 10) = 0;
            *(_DWORD *)(v39 + 15) = v36;
            v39[19] = BYTE4(v36);
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
              {
                WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
              }
              else
              {
                *(_DWORD *)v37 -= 2;
              }
            }
            if (i == -10)
            {
              v48 = a1;
              goto LABEL_34;
            }
            v36 = *(unsigned int *)((char *)a1 + i + 5) | ((unint64_t)*((unsigned __int8 *)a1 + i + 9) << 32);
            if (v35 >= v36)
              break;
            v37 = (WTF::StringImpl *)(*(unsigned int *)(v39 + 10) | ((unint64_t)v39[14] << 32));
          }
          v48 = (unsigned int *)((char *)a1 + i + 10);
LABEL_34:
          v49 = (WTF::StringImpl *)(*v48 | ((unint64_t)*((unsigned __int8 *)v48 + 4) << 32));
          *v48 = v35;
          *((_BYTE *)v48 + 4) = BYTE4(v35);
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
            {
              WTF::StringImpl::~StringImpl(v49, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
            }
            else
            {
              *(_DWORD *)v49 -= 2;
            }
          }
          if (++v34 == 8)
            return (WTF::AtomStringImpl *)((char *)v32 + 5) == a2;
        }
        v15 = v32;
        v33 += 5;
        v32 = (WTF::AtomStringImpl *)((char *)v32 + 5);
        if (v32 == a2)
          return 1;
      }
  }
}

void std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CompactTDZEnvironment::sortCompact(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &,WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>*>(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = a2 - 2;
  if (a2 >= 2)
  {
    v10 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((_QWORD)a3 - a1)))
    {
      v12 = (0x999999999999999ALL * ((_QWORD)a3 - a1)) | 1;
      v13 = (unsigned int *)(a1 + 5 * v12);
      if ((uint64_t)(0x999999999999999ALL * ((_QWORD)a3 - a1) + 2) >= a2)
      {
        v14 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32);
      }
      else
      {
        v14 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32);
        if (v14 < (*(unsigned int *)((char *)v13 + 5) | ((unint64_t)*((unsigned __int8 *)v13 + 9) << 32)))
        {
          v14 = *(unsigned int *)((char *)v13 + 5) | ((unint64_t)*((unsigned __int8 *)v13 + 9) << 32);
          v13 = (unsigned int *)((char *)v13 + 5);
          v12 = 0x999999999999999ALL * ((_QWORD)a3 - a1) + 2;
        }
      }
      v15 = *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
      if ((v14 & 0xFFFFFFFFFFLL) >= v15)
      {
        *((_BYTE *)a3 + 4) = 0;
        *a3 = 0;
        v16 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32);
        do
        {
          v17 = v13;
          *((_BYTE *)v13 + 4) = 0;
          *v13 = 0;
          v18 = (WTF::StringImpl *)(*a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32));
          *a3 = v16;
          *((_BYTE *)a3 + 4) = BYTE4(v16);
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
          if (v10 < v12)
            break;
          v13 = (unsigned int *)(a1 + 5 * ((2 * v12) | 1));
          if (2 * v12 + 2 >= a2)
          {
            v16 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32);
            v12 = (2 * v12) | 1;
          }
          else
          {
            v16 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 4) << 32);
            if (v16 >= (*(unsigned int *)((char *)v13 + 5) | ((unint64_t)*((unsigned __int8 *)v13 + 9) << 32)))
            {
              v12 = (2 * v12) | 1;
            }
            else
            {
              v16 = *(unsigned int *)((char *)v13 + 5) | ((unint64_t)*((unsigned __int8 *)v13 + 9) << 32);
              v13 = (unsigned int *)((char *)v13 + 5);
              v12 = 2 * v12 + 2;
            }
          }
          a3 = v17;
        }
        while (v16 >= v15);
        v27 = (WTF::StringImpl *)(*v17 | ((unint64_t)*((unsigned __int8 *)v17 + 4) << 32));
        *v17 = v15;
        *((_BYTE *)v17 + 4) = BYTE4(v15);
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6RefPtrINS8_17UniquedStringImplENS8_15PackedPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_7HashSetINSA_ISB_NS8_12RawPtrTraitsISB_EESF_EEN3JSC17IdentifierRepHashENS8_10HashTraitsISN_EENS8_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSJ_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v9)
  {
    v11 = *(unsigned int **)a2;
    v12 = 5 * v9;
    do
    {
      v13 = (WTF::StringImpl *)(*v11 | ((unint64_t)*((unsigned __int8 *)v11 + 4) << 32));
      *v11 = 0;
      *((_BYTE *)v11 + 4) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      v11 = (unsigned int *)((char *)v11 + 5);
      v12 -= 5;
    }
    while (v12);
  }
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6RefPtrINS8_17UniquedStringImplENS8_15PackedPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_7HashSetINSA_ISB_NS8_12RawPtrTraitsISB_EESF_EEN3JSC17IdentifierRepHashENS8_10HashTraitsISN_EENS8_15HashTableTraitsEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSJ_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(WTF::StringImpl ***)a2;
  if (*(_QWORD *)a2)
  {
    v9 = *((unsigned int *)v8 - 1);
    if ((_DWORD)v9)
    {
      v10 = *(WTF::StringImpl ***)a2;
      do
      {
        v11 = *v10;
        if (*v10 != (WTF::StringImpl *)-1)
        {
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((unint64_t)(v8 - 2), a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::VectorTypeOperations<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>::destruct(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = (WTF::StringImpl *)(*(unsigned int *)v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32));
      *(_DWORD *)v9 = 0;
      *((_BYTE *)v9 + 4) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v9 = (WTF::AtomStringImpl *)((char *)v9 + 5);
    }
    while (v9 != a2);
  }
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,JSC::IdentifierRepHash>::translate<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>> const&,JSC::PrivateNameEntry&>(uint64_t a1, WTF::AtomStringImpl *a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
    *(_DWORD *)a2 += 2;
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  *(_WORD *)(a1 + 8) = *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0,JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Vector<WTF::RefPtr,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RawPtrTraits<WTF::RefPtr>>,WTF::HashTableTraits>> &>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = **a1;
  v8 = *(_OWORD *)(*a1 + 1);
  v9 = a2;
  v7[0] = v8;
  v7[1] = a2;
  v4 = *(unsigned int *)(v3 + 16);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0,JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Vector<WTF::RefPtr,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RawPtrTraits<WTF::RefPtr>>,WTF::HashTableTraits>> &>(v6);
  }
  else
  {
    v10 = v7;
    return ((uint64_t (*)(_QWORD **))off_1E3596DC0[v4])(&v10);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0,JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Vector<WTF::RefPtr,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RawPtrTraits<WTF::RefPtr>>,WTF::HashTableTraits>> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(_OWORD *)(*(_QWORD *)a1 + 32);
  v9 = a2;
  v10 = v8;
  v11 = a2;
  v4 = *(unsigned int *)(v3 + 16);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0::operator() const(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0::operator() const(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>> &>(v6, v7);
  }
  else
  {
    v12 = &v8;
    return ((uint64_t (*)(__int128 **))off_1E3596DD0[v4])(&v12);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0::operator() const(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0::operator() const(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>> &>(uint64_t result, _DWORD *a2)
{
  int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;

  v2 = a2[3];
  v3 = *(unsigned int **)(*(_QWORD *)result + 8);
  v4 = v3[3];
  if ((_DWORD)v4 != v2)
    goto LABEL_12;
  if (!v2)
  {
    v14 = 1;
    goto LABEL_11;
  }
  v5 = *(_QWORD *)v3;
  if ((**(unsigned int **)v3 | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v3 + 4) << 32)) != (**(unsigned int **)a2 | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a2 + 4) << 32)))
  {
LABEL_12:
    v14 = 0;
    goto LABEL_11;
  }
  v6 = 0;
  v7 = (int *)(v5 + 5);
  v8 = *(_QWORD *)a2 + 5;
  while (v4 - 1 != v6)
  {
    v9 = *((unsigned __int8 *)v7 + 4);
    v10 = *v7;
    v7 = (int *)((char *)v7 + 5);
    v11 = v10 | (unint64_t)(v9 << 32);
    v12 = *(unsigned __int8 *)(v8 + 4);
    v13 = *(_DWORD *)v8;
    v8 += 5;
    ++v6;
    if (v11 != (v13 | (unint64_t)(v12 << 32)))
      goto LABEL_9;
  }
  v6 = v4;
LABEL_9:
  v14 = v6 >= v4;
LABEL_11:
  ***(_BYTE ***)result = v14;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0::operator() const(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_0::operator() const(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>> &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;

  v8 = *a1;
  result = JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)const::$_2::operator()(**(unsigned int ***)(*a1 + 32), (WTF::AtomStringImpl *)*(unsigned int *)(*(_QWORD *)(*a1 + 32) + 12), a2, a4, a5, a6, a7, a8);
  **(_BYTE **)(v8 + 16) = result;
  return result;
}

uint64_t JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)const::$_2::operator()(unsigned int *a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v9 = a1;
  v10 = *a3;
  if (*a3)
    v10 = *(unsigned int *)(v10 - 12);
  if (v10 != a2)
    return 0;
  if (!(_DWORD)a2)
    return 1;
  v11 = (unsigned int *)((char *)a1 + 5 * a2);
  while (1)
  {
    v12 = (WTF::StringImpl *)(*v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32));
    if (v12)
      break;
    v14 = *a3;
    if (!*a3)
      return v14;
LABEL_8:
    v15 = *((_DWORD *)v12 + 4);
    if ((v15 & 0x20) != 0)
      v15 = *((_DWORD *)v12 + 8);
    v16 = *(_DWORD *)(v14 - 8);
    v17 = v16 & (v15 >> 8);
    v18 = *(WTF::StringImpl **)(v14 + 8 * v17);
    if (v18 != v12)
    {
      v20 = 1;
      while (1)
      {
        v21 = v18;
        if (!v18)
          break;
        v17 = (v17 + v20) & v16;
        v18 = *(WTF::StringImpl **)(v14 + 8 * v17);
        ++v20;
        if (v18 == v12)
        {
          if (!v12)
            goto LABEL_13;
          v19 = *(_DWORD *)v12 - 2;
          if (*(_DWORD *)v12 != 2)
            goto LABEL_12;
          goto LABEL_24;
        }
      }
      if (!v12)
        return 0;
      v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 != 2)
        goto LABEL_30;
LABEL_24:
      WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      if (v21)
        goto LABEL_13;
      return 0;
    }
    v19 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
LABEL_12:
      *(_DWORD *)v12 = v19;
    }
LABEL_13:
    v9 = (unsigned int *)((char *)v9 + 5);
    if (v9 == v11)
      return 1;
  }
  v13 = *(_DWORD *)v12;
  *(_DWORD *)v12 += 2;
  v14 = *a3;
  if (*a3)
    goto LABEL_8;
  if (v13)
  {
LABEL_30:
    v14 = 0;
    *(_DWORD *)v12 = v13;
    return v14;
  }
  WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_1::operator() const(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)::{lambda(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_1::operator() const(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)::{lambda(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE **v8;
  uint64_t result;

  v8 = *(_BYTE ***)a1;
  result = JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)const::$_2::operator()(*(unsigned int **)a2, (WTF::AtomStringImpl *)*(unsigned int *)(a2 + 12), *(uint64_t **)(*(_QWORD *)a1 + 16), a4, a5, a6, a7, a8);
  **v8 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_1::operator() const(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)::{lambda(WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::CompactTDZEnvironment::operator==(JSC::CompactTDZEnvironment const&)::$_1::operator() const(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)::{lambda(WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>> &>(uint64_t result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;

  v2 = *a2;
  v3 = **(_QWORD **)(*(_QWORD *)result + 32);
  if (!v3)
  {
    if (v2 && *((_DWORD *)v2 - 3))
      goto LABEL_14;
    goto LABEL_29;
  }
  v4 = *(_DWORD *)(v3 - 12);
  if (!v2)
  {
    if (v4)
      goto LABEL_14;
LABEL_29:
    v8 = 1;
    goto LABEL_30;
  }
  if (v4 == *((_DWORD *)v2 - 3))
  {
    if (!v4)
      goto LABEL_29;
    v5 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = *a2;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        ++v7;
        v6 -= 8;
        if (!v6)
          goto LABEL_29;
      }
    }
    else
    {
      v7 = *a2;
    }
    v9 = &v2[v5];
    if (v7 == v9)
      goto LABEL_29;
    v10 = *(_DWORD *)(v3 - 8);
    v11 = *v7;
LABEL_18:
    v12 = *(_DWORD *)(v11 + 16);
    if ((v12 & 0x20) != 0)
      v12 = *(_DWORD *)(v11 + 32);
    v13 = v10 & (v12 >> 8);
    v14 = *(_QWORD *)(v3 + 8 * v13);
    if (v14 == v11)
    {
LABEL_21:
      while (1)
      {
        if (++v7 == v9)
          goto LABEL_29;
        v11 = *v7;
        if ((unint64_t)(*v7 + 1) > 1)
        {
          v8 = 1;
          if (v7 != v9)
            goto LABEL_18;
          goto LABEL_30;
        }
      }
    }
    v15 = 1;
    while (v14)
    {
      v13 = (v13 + v15) & v10;
      v14 = *(_QWORD *)(v3 + 8 * v13);
      ++v15;
      if (v14 == v11)
        goto LABEL_21;
    }
  }
LABEL_14:
  v8 = 0;
LABEL_30:
  **(_BYTE **)(*(_QWORD *)result + 24) = v8;
  return result;
}

_OWORD *WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *result;

  v10 = *a1;
  if (!*a1)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_3;
  }
  v11 = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!v11)
  {
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v13 = v11 << (6 * v12 >= (2 * v11));
LABEL_4:
  v14 = WTF::fastZeroedMalloc(16 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = v10 + 16 * v22;
      if (*(_QWORD *)v24 >= 2uLL)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = 0;
        v28 = *(_DWORD *)(*(_QWORD *)v24 + 24);
        do
        {
          v29 = v28 & v26;
          v28 = ++v27 + v29;
        }
        while (*(_QWORD *)(v25 + 16 * v29));
        v30 = (_OWORD *)(v25 + 16 * v29);
        *v30 = *(_OWORD *)v24;
        if (v24 == a2)
          v23 = v30;
      }
      ++v22;
    }
    while (v22 != v11);
    goto LABEL_14;
  }
  v23 = 0;
  result = 0;
  if (v10)
  {
LABEL_14:
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

void WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = v10 + 16 * i;
      if (*(_QWORD *)v22 >= 2uLL)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = 0;
        v26 = *(_DWORD *)(*(_QWORD *)v22 + 24);
        do
        {
          v27 = v26 & v24;
          v26 = ++v25 + v27;
        }
        while (*(_QWORD *)(v23 + 16 * v27));
        *(_OWORD *)(v23 + 16 * v27) = *(_OWORD *)v22;
      }
    }
    goto LABEL_12;
  }
  if (v10)
LABEL_12:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

JSC::Profiler::BytecodeSequence *WTF::HashTable<JSC::CompactTDZEnvironmentKey,WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CompactTDZEnvironmentKey,unsigned int>>,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>>::find<WTF::IdentityHashTranslator<WTF::HashMap<JSC::CompactTDZEnvironmentKey,unsigned int,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<JSC::CompactTDZEnvironmentKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CompactTDZEnvironmentKey>>,JSC::CompactTDZEnvironmentKey>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Profiler::BytecodeSequence *v13;
  JSC::CodeBlock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD v23[6];
  _QWORD *v24;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = 0;
  v6 = *(_DWORD *)(v2 - 8);
  for (i = *(_DWORD *)(*a2 + 24); ; i = v5 + v8)
  {
    v8 = i & v6;
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 == 1)
      goto LABEL_7;
    if (!v9)
      break;
    v10 = *a2;
    if (v9 == *a2)
      return (JSC::Profiler::BytecodeSequence *)(v2 + 16 * v8);
    if (*(_DWORD *)(v9 + 24) == *(_DWORD *)(v10 + 24))
    {
      v21 = 0;
      v23[0] = v10;
      v23[1] = &v21;
      v23[2] = &v22;
      v23[3] = v10;
      v23[4] = &v21;
      v23[5] = &v22;
      v11 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v11 == -1)
      {
        v13 = (JSC::Profiler::BytecodeSequence *)std::__throw_bad_variant_access[abi:sn180100]();
        return JSC::Profiler::BytecodeSequence::BytecodeSequence(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      v24 = v23;
      ((void (*)(_QWORD **))off_1E3596DB0[v11])(&v24);
      if (v21)
        return (JSC::Profiler::BytecodeSequence *)(v2 + 16 * v8);
    }
LABEL_7:
    ++v5;
  }
  if (*a1)
    return (JSC::Profiler::BytecodeSequence *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
  else
    return 0;
}

JSC::Profiler::BytecodeSequence *JSC::Profiler::BytecodeSequence::BytecodeSequence(JSC::Profiler::BytecodeSequence *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned int *v25;
  WTF::PrintStream *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  size_t v39;
  WTF *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  WTF **v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  WTF *v67;
  WTF::PrintStream *v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  unsigned int v71;
  WTF *v72;
  size_t v73;
  _QWORD *v74;
  uint64_t v75;
  WTF **v76;
  WTF **v77;
  WTF **v78;
  WTF *v79;
  WTF *v80;
  WTF *v81;
  WTF *v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  char v86;
  _BOOL4 v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  _BOOL4 v96;
  _QWORD *v98;
  uint64_t *v99;
  void (**v100)(WTF::StringPrintStream *__hidden);
  WTF *v101;
  __int128 v102;
  _BYTE v103[128];
  WTF *v104;
  WTF *v105;
  __int128 v106;
  _BYTE v107[128];
  uint64_t v108;

  v10 = 0;
  v11 = 0;
  v108 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)this + 1) = 0u;
  v98 = (_QWORD *)((char *)this + 16);
  *(_OWORD *)this = 0u;
  v100 = off_1E3572250;
  v101 = (WTF *)v103;
  v102 = xmmword_199122F80;
  v103[0] = 0;
  while (1)
  {
    v12 = (unsigned int *)*((_QWORD *)a2 + 19);
    v13 = v12 ? *v12 : 0;
    if (v11 >= v13)
      break;
    if (v11 >= *v12)
      goto LABEL_157;
    v14 = &v12[v10];
    v15 = *(_QWORD *)&v12[v10 + 2];
    if (v15)
    {
      if (v15 >= 0xFFFE000000000000)
      {
        v18 = (*(_QWORD *)&v12[v10 + 2] & 0xFFFFFFFELL) == 0;
        v15 = 0x200000000;
        v19 = 0x100000000;
        goto LABEL_19;
      }
      if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v15 & 0xFFFE000000000002) == 0)
        {
          if (qword_1ECF4C080 <= v15 && !(v15 >> 36) && (v15 & 0xFFFFFFFFFLL) != 0)
          {
            v17 = *(unsigned __int8 *)(v15 + 5);
            if (v17 != 2)
            {
              v15 = JSC::speculatedTypeMapping[v17];
LABEL_21:
              *((_QWORD *)v14 + 1) = 0;
              goto LABEL_22;
            }
            v48 = *(_QWORD *)(v15 + 8);
            if (v48)
              v49 = (v48 & 1) == 0;
            else
              v49 = 0;
            if (!v49)
            {
LABEL_81:
              v15 = 805306368;
              goto LABEL_21;
            }
            if (v48 >= qword_1ECF4C080 && !(v48 >> 36) && (v48 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v48 + 16) & 0x10) != 0)
              {
                v15 = 0x10000000;
                goto LABEL_21;
              }
              goto LABEL_81;
            }
          }
          v15 = 0;
          goto LABEL_21;
        }
        v18 = (v15 & 0xFFFFFFFFFFFFFFFELL) == 6;
        v15 = 0x20000000000;
        v19 = 0x10000000000;
LABEL_19:
        if (v18)
          v15 = v19;
        goto LABEL_21;
      }
      v52 = (uint64_t)COERCE_DOUBLE(v15 - 0x2000000000000);
      if ((double)v52 != COERCE_DOUBLE(v15 - 0x2000000000000))
      {
LABEL_78:
        v15 = 0x2000000000;
        goto LABEL_21;
      }
      if (v52)
      {
        if ((unint64_t)(v52 + 0x8000000000000) >> 52)
          goto LABEL_78;
      }
      else if ((uint64_t)v15 < 0x2000000000000)
      {
        goto LABEL_78;
      }
      v15 = 0x1000000000;
      goto LABEL_21;
    }
LABEL_22:
    v20 = *((_QWORD *)v14 + 2);
    if (!v20)
      goto LABEL_36;
    if (v20 >= 0xFFFE000000000000)
    {
      v23 = (*((_QWORD *)v14 + 2) & 0xFFFFFFFELL) == 0;
      v21 = 0x200000000;
      v24 = 0x100000000;
      goto LABEL_33;
    }
    if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v53 = (uint64_t)COERCE_DOUBLE(v20 - 0x2000000000000);
      if ((double)v53 == COERCE_DOUBLE(v20 - 0x2000000000000))
      {
        if (v53)
        {
          if (!((unint64_t)(v53 + 0x8000000000000) >> 52))
            goto LABEL_92;
        }
        else if ((uint64_t)v20 >= 0x2000000000000)
        {
LABEL_92:
          v21 = 0x1000000000;
          goto LABEL_35;
        }
      }
      v21 = 0x2000000000;
    }
    else
    {
      if ((v20 & 0xFFFE000000000002) != 0)
      {
        v23 = (v20 & 0xFFFFFFFFFFFFFFFELL) == 6;
        v21 = 0x20000000000;
        v24 = 0x10000000000;
LABEL_33:
        if (v23)
          v21 = v24;
        goto LABEL_35;
      }
      if (qword_1ECF4C080 > v20)
      {
LABEL_95:
        v21 = 0;
        goto LABEL_35;
      }
      v21 = 0;
      if (v20 >> 36 || (v20 & 0xFFFFFFFFFLL) == 0)
        goto LABEL_35;
      v22 = *(unsigned __int8 *)(v20 + 5);
      if (v22 == 2)
      {
        v51 = *(_QWORD *)(v20 + 8);
        if (!v51)
          goto LABEL_82;
        v21 = 805306368;
        if ((v51 & 1) == 0)
        {
          if (v51 < qword_1ECF4C080)
            goto LABEL_95;
          v21 = 0;
          if (v51 >> 36 || (v51 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_35;
          if ((*(_BYTE *)(v51 + 16) & 0x10) == 0)
          {
LABEL_82:
            v21 = 805306368;
            goto LABEL_35;
          }
          v21 = 0x10000000;
        }
      }
      else
      {
        v21 = JSC::speculatedTypeMapping[v22];
      }
    }
LABEL_35:
    v15 |= v21;
    *((_QWORD *)v14 + 2) = 0;
LABEL_36:
    v25 = &v12[v10];
    v26 = (WTF::PrintStream *)(*((_QWORD *)v25 + 3) | v15);
    *((_QWORD *)v25 + 3) = v26;
    v104 = (WTF *)off_1E3572250;
    v105 = (WTF *)v107;
    v106 = xmmword_199122F80;
    v107[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v104, "%s", "predicting ");
    JSC::dumpSpeculation((JSC *)&v104, v26);
    (*((void (**)(WTF **))v104 + 5))(&v104);
    v34 = v105;
    if (v105)
    {
      v35 = v106;
      if ((unint64_t)v106 >= 0xFFFFFFFFFFFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x19887C6F8);
      }
      if ((_QWORD)v106 == -17)
      {
        __break(0xC471u);
        JUMPOUT(0x19887C700);
      }
      v36 = WTF::fastMalloc((WTF *)(v106 + 17));
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = v35;
      memcpy((void *)(v36 + 16), v34, v35);
      *(_BYTE *)(v36 + 16 + v35) = 0;
      if (v105 != (WTF *)v107)
        WTF::fastFree((unint64_t)v105, a2, v37, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v36 + 8))
      {
        *(_QWORD *)&v102 = 0;
        *(_BYTE *)v101 = 0;
        v38 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v100[4])(&v100);
        WTF::PrintStream::printf(v38, "%s", "arg");
        WTF::PrintStream::printf(v38, "%u", v11);
        WTF::PrintStream::printf(v38, "%s", ": ");
        WTF::PrintStream::printf(v38, "%s", (const char *)(v36 + 16));
        v100[5]((WTF::StringPrintStream *)&v100);
        v40 = v101;
        v39 = v102;
        v104 = 0;
        if (v101)
        {
          if ((unint64_t)v102 >= 0xFFFFFFFFFFFFFFF0)
          {
            __break(0xC471u);
            JUMPOUT(0x19887C718);
          }
          if ((_QWORD)v102 == -17)
          {
LABEL_157:
            __break(0xC471u);
            JUMPOUT(0x19887C6ECLL);
          }
          v41 = (_QWORD *)WTF::fastMalloc((WTF *)(v102 + 17));
          *(_DWORD *)v41 = 1;
          v41[1] = v39;
          v104 = (WTF *)v41;
          v42 = v41 + 2;
          memcpy(v41 + 2, v40, v39);
          *((_BYTE *)v42 + v39) = 0;
        }
        v43 = *((unsigned int *)this + 3);
        if ((_DWORD)v43 == *((_DWORD *)this + 2))
        {
          v44 = (WTF **)WTF::Vector<WTF::CString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v43 + 1, (unint64_t)&v104);
          v43 = *((unsigned int *)this + 3);
          v45 = *(_QWORD *)this;
          v46 = *v44;
          *v44 = 0;
        }
        else
        {
          v45 = *(_QWORD *)this;
          v46 = v104;
          v104 = 0;
        }
        *(_QWORD *)(v45 + 8 * v43) = v46;
        *((_DWORD *)this + 3) = v43 + 1;
        v47 = v104;
        v104 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 1)
            WTF::fastFree((unint64_t)v47, a2, v37, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v47;
        }
      }
      if (*(_DWORD *)v36 == 1)
        WTF::fastFree(v36, a2, v37, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v36;
    }
    else
    {
      WTF::fastFree(0, v27, v28, v29, v30, v31, v32, v33);
    }
    ++v11;
    v10 += 6;
  }
  v99 = 0;
  v54 = (unsigned __int8 *)a2 + 16;
  if (__ldaxr((unsigned __int8 *)a2 + 16))
  {
    __clrex();
    goto LABEL_99;
  }
  if (__stxr(1u, v54))
LABEL_99:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 16);
  JSC::CodeBlock::getICStatusMap(a2, (uint64_t)a2, (uint64_t *)&v99, a4, a5, a6, a7, a8);
  v63 = __ldxr(v54);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_104;
  }
  if (__stlxr(0, v54))
LABEL_104:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 16, 0, v57, v58, v59, v60, v61, v62);
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12))
  {
    v64 = 0;
    v65 = 0;
    while (1)
    {
      *(_QWORD *)&v102 = 0;
      *(_BYTE *)v101 = 0;
      v66 = *(_QWORD **)(*((_QWORD *)a2 + 7) + 80);
      LODWORD(v106) = 0;
      v105 = (WTF *)&v100;
      v104 = (WTF *)&off_1E3580A38;
      *((_QWORD *)&v106 + 1) = a2;
      JSC::dumpBytecode((int)&v104, v65, (JSC::OpEnumeratorHasOwnProperty *)(*v66 + v64));
      v67 = v105;
      v68 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v105 + 32))(v105);
      WTF::PrintStream::printf(v68, "%s", "\n");
      (*(void (**)(WTF *))(*(_QWORD *)v67 + 40))(v67);
      v69 = *(_QWORD **)(*((_QWORD *)a2 + 7) + 80);
      v70 = (unsigned __int8 *)(*v69 + v64);
      v71 = *v70;
      if ((v71 | 2) == 0x82)
        v71 = v70[1];
      v72 = v101;
      if (v101)
      {
        v73 = v102;
        if ((unint64_t)v102 >= 0xFFFFFFFFFFFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x19887C708);
        }
        if ((_QWORD)v102 == -17)
        {
          __break(0xC471u);
          JUMPOUT(0x19887C710);
        }
        v74 = (_QWORD *)WTF::fastMalloc((WTF *)(v102 + 17));
        *(_DWORD *)v74 = 1;
        v74[1] = v73;
        memcpy(v74 + 2, v72, v73);
        *((_BYTE *)v74 + v73 + 16) = 0;
        v104 = (WTF *)__PAIR64__(v71, v65);
        ++*(_DWORD *)v74;
      }
      else
      {
        v74 = 0;
        v104 = (WTF *)__PAIR64__(v71, v65);
      }
      v105 = (WTF *)v74;
      v75 = *((unsigned int *)this + 7);
      if ((_DWORD)v75 == *((_DWORD *)this + 6))
      {
        v76 = (WTF **)WTF::Vector<JSC::Profiler::Bytecode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v98, v75 + 1, (unint64_t)&v104);
        v77 = (WTF **)(*((_QWORD *)this + 2) + 16 * *((unsigned int *)this + 7));
        v80 = *v76;
        v78 = v76 + 1;
        v79 = v80;
      }
      else
      {
        v78 = &v105;
        v77 = (WTF **)(*v98 + 16 * v75);
        v79 = v104;
      }
      *v77 = v79;
      v81 = *v78;
      *v78 = 0;
      v77[1] = v81;
      ++*((_DWORD *)this + 7);
      v82 = v105;
      v105 = 0;
      if (!v82)
        goto LABEL_120;
      if (*(_DWORD *)v82 != 1)
        break;
      WTF::fastFree((unint64_t)v82, v56, v57, v58, v59, v60, v61, v62);
      if (v72)
      {
LABEL_121:
        if (*(_DWORD *)v74 == 1)
          WTF::fastFree((unint64_t)v74, v56, v57, v58, v59, v60, v61, v62);
        else
          --*(_DWORD *)v74;
      }
LABEL_123:
      v83 = (unsigned __int8 *)(*v69 + v64);
      v84 = *v83;
      v85 = v84;
      if ((v84 | 2) == 0x82)
        v85 = v83[1];
      v86 = v84 == 128;
      if (v84 == 130)
        v86 = 2;
      v87 = v84 == 128 || v84 == 130;
      v88 = JSC::opcodeLengths[v85] << v86;
      if (v87)
        v89 = 2;
      else
        v89 = 1;
      v64 = (v89 + v65 + v88);
      v65 = v64;
      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 80) + 12) <= v64)
        goto LABEL_138;
    }
    --*(_DWORD *)v82;
LABEL_120:
    if (v72)
      goto LABEL_121;
    goto LABEL_123;
  }
LABEL_138:
  v90 = (uint64_t)v99;
  if (v99)
  {
    v91 = *((unsigned int *)v99 - 1);
    if ((_DWORD)v91)
    {
      v92 = v99;
      do
      {
        v94 = *v92;
        v92 += 8;
        v93 = v94;
        v95 = v94 & 0xFFFFFFFF8;
        v96 = (v94 & 0xFFFFFFFF8) != 0;
        if ((v94 & 1) != 0 && (v96 & (v93 >> 1) & 1) == 0 && v95)
          WTF::fastFree(v95, v56, v57, v58, v59, v60, v61, v62);
        --v91;
      }
      while (v91);
    }
    WTF::fastFree(v90 - 16, v56, v57, v58, v59, v60, v61, v62);
  }
  if (v101 != (WTF *)v103)
    WTF::fastFree((unint64_t)v101, v56, v57, v58, v59, v60, v61, v62);
  return this;
}

void JSC::Profiler::BytecodeSequence::~BytecodeSequence(JSC::Profiler::BytecodeSequence *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;

  v9 = *((unsigned int *)this + 7);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = (_DWORD **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*v12 == 1)
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v12;
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((unsigned int *)this + 3);
  if ((_DWORD)v14)
  {
    v15 = *(_DWORD ***)this;
    v16 = 8 * v14;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*v17 == 1)
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
        else
          --*v17;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v18 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Profiler::BytecodeSequence::addSequenceProperties(uint64_t *a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD **v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  WTF::AtomStringImpl *v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  double v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  WTF *v82;
  char *v83;
  size_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  WTF *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  WTF *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  WTF *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD **v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD **v144;
  uint64_t v145;
  _DWORD *v146;
  _DWORD **v147;
  uint64_t v148;
  _DWORD *v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  _DWORD **v162;
  uint64_t v163;
  _DWORD *v164;
  _DWORD **v165;
  uint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  WTF::AtomStringImpl *v169;
  uint64_t *v170;
  WTF::StringImpl *v171;
  WTF *v172;
  WTF *v173[2];
  char v174;

  v11 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x600000001;
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (uint64_t *)(v11 + 16);
  *(_QWORD *)(v11 + 24) = 0;
  v13 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v13)
  {
    v14 = *a1;
    v15 = 8 * v13;
    do
    {
      if (*(_QWORD *)v14)
        WTF::fromUTF8Impl<false>(*(_QWORD *)v14 + 16, *(_QWORD *)(*(_QWORD *)v14 + 8), (uint64_t *)&v172);
      else
        v172 = 0;
      v16 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v16 = 0x400000001;
      v19 = v172;
      *((_QWORD *)v16 + 1) = v172;
      if (v19)
        *(_DWORD *)v19 += 2;
      v173[0] = v16;
      v20 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v20 == *(_DWORD *)(v11 + 24))
      {
        v21 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v20 + 1, (unint64_t)v173);
        v20 = *(unsigned int *)(v11 + 28);
        v22 = *(_QWORD *)(v11 + 16);
        v23 = *v21;
        *v21 = 0;
        *(_QWORD *)(v22 + 8 * v20) = v23;
      }
      else
      {
        v24 = *v12;
        v173[0] = 0;
        *(_QWORD *)(v24 + 8 * v20) = v16;
      }
      *(_DWORD *)(v11 + 28) = v20 + 1;
      v25 = v173[0];
      v173[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::JSONImpl::Value::operator delete(v25, v17, v18, v6, v7, v8, v9, v10);
        else
          --*(_DWORD *)v25;
      }
      v26 = v172;
      v172 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v17, v18, v6, v7, v8, v9, v10);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
  }
  v35 = a2 + 34;
  v172 = (WTF *)v11;
  v170 = (uint64_t *)(a3 + 16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a3 + 16), (WTF::AtomStringImpl *)(a2 + 34), (const WTF::StringImpl *)&v172, v6, v7, v8, v9, v10, (uint64_t)v173);
  if (v174)
  {
    v43 = (uint64_t *)(a3 + 24);
    v44 = *(unsigned int *)(a3 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(a3 + 32))
    {
      v162 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)(a2 + 34));
      v44 = *(unsigned int *)(a3 + 36);
      v163 = *(_QWORD *)(a3 + 24);
      v164 = *v162;
      if (*v162)
        *v164 += 2;
      *(_QWORD *)(v163 + 8 * v44) = v164;
    }
    else
    {
      v45 = *v43;
      v46 = *v35;
      if (*v35)
        *v46 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(a3 + 36) = v44 + 1;
  }
  v47 = v172;
  v172 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v168 = a3;
  v169 = (WTF::AtomStringImpl *)(a2 + 1);
  v53 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x600000001;
  *(_QWORD *)(v53 + 16) = 0;
  v54 = (_QWORD *)(v53 + 16);
  *(_QWORD *)(v53 + 24) = 0;
  v55 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v55)
  {
    v56 = a1[2];
    v57 = v56 + 16 * v55;
    v58 = (WTF::AtomStringImpl *)(a2 + 2);
    v59 = (WTF::AtomStringImpl *)(a2 + 6);
    v60 = (WTF::AtomStringImpl *)(a2 + 7);
    do
    {
      v61 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v61 = 0x500000001;
      *(_QWORD *)(v61 + 16) = 0;
      v62 = (uint64_t *)(v61 + 16);
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0;
      LODWORD(v63) = *(_DWORD *)v56;
      v64 = (double)v63;
      v65 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v65 = 0x200000001;
      v65[1] = v64;
      v172 = (WTF *)v65;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v61 + 16), v58, (const WTF::StringImpl *)&v172, v66, v67, v68, v69, v70, (uint64_t)v173);
      if (v174)
      {
        v78 = (uint64_t *)(v61 + 24);
        v79 = *(unsigned int *)(v61 + 36);
        if ((_DWORD)v79 == *(_DWORD *)(v61 + 32))
        {
          v141 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v79 + 1, (unint64_t)v58);
          v79 = *(unsigned int *)(v61 + 36);
          v142 = *(_QWORD *)(v61 + 24);
          v143 = *v141;
          if (*v141)
            *v143 += 2;
          *(_QWORD *)(v142 + 8 * v79) = v143;
        }
        else
        {
          v80 = *v78;
          v81 = *(_DWORD **)v58;
          if (*(_QWORD *)v58)
            *v81 += 2;
          *(_QWORD *)(v80 + 8 * v79) = v81;
        }
        *(_DWORD *)(v61 + 36) = v79 + 1;
      }
      v82 = v172;
      v172 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 1)
          WTF::JSONImpl::Value::operator delete(v82, v71, v72, v73, v74, v75, v76, v77);
        else
          --*(_DWORD *)v82;
      }
      v83 = (&JSC::opcodeNames)[2 * *(unsigned int *)(v56 + 4)];
      if (v83)
      {
        v84 = strlen((&JSC::opcodeNames)[2 * *(unsigned int *)(v56 + 4)]);
        WTF::fromUTF8Impl<false>((unint64_t)v83, v84, (uint64_t *)&v171);
      }
      else
      {
        v171 = 0;
      }
      v85 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v85 = 0x400000001;
      v91 = v171;
      *((_QWORD *)v85 + 1) = v171;
      if (v91)
        *(_DWORD *)v91 += 2;
      v172 = v85;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v62, v59, (const WTF::StringImpl *)&v172, v86, v87, v88, v89, v90, (uint64_t)v173);
      if (v174)
      {
        v99 = (uint64_t *)(v61 + 24);
        v100 = *(unsigned int *)(v61 + 36);
        if ((_DWORD)v100 == *(_DWORD *)(v61 + 32))
        {
          v144 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v99, v100 + 1, (unint64_t)v59);
          v100 = *(unsigned int *)(v61 + 36);
          v145 = *(_QWORD *)(v61 + 24);
          v146 = *v144;
          if (*v144)
            *v146 += 2;
          *(_QWORD *)(v145 + 8 * v100) = v146;
        }
        else
        {
          v101 = *v99;
          v102 = *(_DWORD **)v59;
          if (*(_QWORD *)v59)
            *v102 += 2;
          *(_QWORD *)(v101 + 8 * v100) = v102;
        }
        *(_DWORD *)(v61 + 36) = v100 + 1;
      }
      v103 = v172;
      v172 = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 1)
          WTF::JSONImpl::Value::operator delete(v103, v92, v93, v94, v95, v96, v97, v98);
        else
          --*(_DWORD *)v103;
      }
      v104 = v171;
      v171 = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2)
        {
          WTF::StringImpl::~StringImpl(v104, v92, v93, v94, v95, v96, v97, v98);
          WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
        }
        else
        {
          *(_DWORD *)v104 -= 2;
        }
      }
      v105 = *(_QWORD *)(v56 + 8);
      if (v105)
        WTF::fromUTF8Impl<false>(v105 + 16, *(_QWORD *)(v105 + 8), (uint64_t *)&v171);
      else
        v171 = 0;
      v106 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v106 = 0x400000001;
      v112 = v171;
      *((_QWORD *)v106 + 1) = v171;
      if (v112)
        *(_DWORD *)v112 += 2;
      v172 = v106;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v62, v60, (const WTF::StringImpl *)&v172, v107, v108, v109, v110, v111, (uint64_t)v173);
      if (v174)
      {
        v115 = (uint64_t *)(v61 + 24);
        v116 = *(unsigned int *)(v61 + 36);
        if ((_DWORD)v116 == *(_DWORD *)(v61 + 32))
        {
          v147 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v116 + 1, (unint64_t)v60);
          v116 = *(unsigned int *)(v61 + 36);
          v148 = *(_QWORD *)(v61 + 24);
          v149 = *v147;
          if (*v147)
            *v149 += 2;
          *(_QWORD *)(v148 + 8 * v116) = v149;
        }
        else
        {
          v117 = *v115;
          v118 = *(_DWORD **)v60;
          if (*(_QWORD *)v60)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v116) = v118;
        }
        *(_DWORD *)(v61 + 36) = v116 + 1;
      }
      v119 = v172;
      v172 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 1)
          WTF::JSONImpl::Value::operator delete(v119, v113, v114, v48, v49, v50, v51, v52);
        else
          --*(_DWORD *)v119;
      }
      v120 = v171;
      v171 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
        {
          WTF::StringImpl::~StringImpl(v120, v113, v114, v48, v49, v50, v51, v52);
          WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
        }
        else
        {
          *(_DWORD *)v120 -= 2;
        }
      }
      v173[0] = (WTF *)v61;
      v121 = *(unsigned int *)(v53 + 28);
      if ((_DWORD)v121 == *(_DWORD *)(v53 + 24))
      {
        v122 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v121 + 1, (unint64_t)v173);
        v121 = *(unsigned int *)(v53 + 28);
        v123 = (uint64_t *)(*(_QWORD *)(v53 + 16) + 8 * v121);
        v61 = *v122;
      }
      else
      {
        v123 = (uint64_t *)(*v54 + 8 * v121);
        v122 = (uint64_t *)v173;
      }
      *v122 = 0;
      *v123 = v61;
      *(_DWORD *)(v53 + 28) = v121 + 1;
      v124 = v173[0];
      v173[0] = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 1)
          WTF::JSONImpl::Value::operator delete(v124, v113, v114, v48, v49, v50, v51, v52);
        else
          --*(_DWORD *)v124;
      }
      v56 += 16;
    }
    while (v56 != v57);
  }
  v172 = (WTF *)v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v170, v169, (const WTF::StringImpl *)&v172, v48, v49, v50, v51, v52, (uint64_t)v173);
  if (v174)
  {
    v157 = (uint64_t *)(v168 + 24);
    v158 = *(unsigned int *)(v168 + 36);
    if ((_DWORD)v158 == *(_DWORD *)(v168 + 32))
    {
      v165 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v157, v158 + 1, (unint64_t)v169);
      v158 = *(unsigned int *)(v168 + 36);
      v166 = *(_QWORD *)(v168 + 24);
      v167 = *v165;
      if (*v165)
        *v167 += 2;
      *(_QWORD *)(v166 + 8 * v158) = v167;
    }
    else
    {
      v159 = *v157;
      v160 = *(_DWORD **)v169;
      if (*(_QWORD *)v169)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v158) = v160;
    }
    *(_DWORD *)(v168 + 36) = v158 + 1;
  }
  v161 = v172;
  v172 = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 1)
      WTF::JSONImpl::Value::operator delete(v161, v150, v151, v152, v153, v154, v155, v156);
    else
      --*(_DWORD *)v161;
  }
}

uint64_t JSC::Profiler::Compilation::Compilation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;

  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  if (__ldaxr(JSC::Profiler::UID::create(void)::lock))
  {
    __clrex();
  }
  else if (!__stxr(1u, JSC::Profiler::UID::create(void)::lock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::Profiler::UID::create(void)::lock);
LABEL_5:
  v10 = ++JSC::Profiler::UID::create(void)::counter;
  v11 = __ldxr(JSC::Profiler::UID::create(void)::lock);
  if (v11 == 1)
  {
    if (!__stlxr(0, JSC::Profiler::UID::create(void)::lock))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::Profiler::UID::create(void)::lock, 0, a3, a4, a5, a6, a7, a8);
LABEL_10:
  *(_QWORD *)(a1 + 120) = v10;
  return a1;
}

void JSC::Profiler::Compilation::~Compilation(JSC::Profiler::Compilation *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  JSC::Profiler::BytecodeSequence *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v9 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    v11 = 0;
    while (v11 >> 3 < *((unsigned int *)this + 23))
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * (v11 >> 3)) + 48 * (v11 & 7);
      v13 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
        v14 = v12 + 16 == v13;
      else
        v14 = 1;
      if (!v14)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
        v10 = *((_QWORD *)this + 9);
      }
      if (++v11 >= v10)
        goto LABEL_13;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_13:
    if (*((_DWORD *)this + 23))
    {
      v15 = 0;
      do
        WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 10) + 8 * v15++), a2, a3, a4, a5, a6, a7, a8);
      while (v15 < *((unsigned int *)this + 23));
    }
    v16 = *((_QWORD *)this + 10);
    if (v16)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    v17 = *((unsigned int *)this + 17);
    v18 = *((_QWORD *)this + 7);
    if ((_DWORD)v17)
    {
      v19 = 16 * v17;
      do
      {
        v20 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
        {
          *(_QWORD *)v18 = 0;
          *(_DWORD *)(v18 + 8) = 0;
          WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        }
        v18 += 16;
        v19 -= 16;
      }
      while (v19);
      v18 = *((_QWORD *)this + 7);
    }
    if (v18)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
    }
    v21 = *((_QWORD *)this + 6);
    if (v21)
    {
      v22 = *(unsigned int *)(v21 - 4);
      if ((_DWORD)v22)
      {
        v23 = v21 + 16;
        do
        {
          if (*(_DWORD *)(v23 - 4) != 1 || *(_DWORD *)(*(_QWORD *)(v23 - 16) + 8) != -2)
          {
            v24 = *(_QWORD *)(v23 + 16);
            *(_QWORD *)(v23 + 16) = 0;
            if (v24)
              WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
            v25 = *(_QWORD *)(v23 - 16);
            if (v23 != v25 && v25 != 0)
            {
              *(_QWORD *)(v23 - 16) = 0;
              *(_DWORD *)(v23 - 8) = 0;
              WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
            }
          }
          v23 += 40;
          --v22;
        }
        while (v22);
      }
      WTF::fastFree(v21 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    v27 = *((unsigned int *)this + 11);
    if ((_DWORD)v27)
    {
      v28 = *((_QWORD *)this + 4) + 16;
      v29 = 40 * v27;
      do
      {
        v30 = *(_DWORD **)(v28 + 16);
        *(_QWORD *)(v28 + 16) = 0;
        if (v30)
        {
          if (*v30 == 1)
            WTF::fastFree((unint64_t)v30, a2, a3, a4, a5, a6, a7, a8);
          else
            --*v30;
        }
        v31 = *(_QWORD *)(v28 - 16);
        if (v28 != v31 && v31 != 0)
        {
          *(_QWORD *)(v28 - 16) = 0;
          *(_DWORD *)(v28 - 8) = 0;
          WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
        }
        v28 += 40;
        v29 -= 40;
      }
      while (v29);
    }
    v33 = *((_QWORD *)this + 4);
    if (v33)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
    }
    v34 = *((unsigned int *)this + 7);
    if ((_DWORD)v34)
    {
      v35 = (JSC::Profiler::BytecodeSequence *)*((_QWORD *)this + 2);
      v36 = 40 * v34;
      do
      {
        JSC::Profiler::BytecodeSequence::~BytecodeSequence(v35, a2, a3, a4, a5, a6, a7, a8);
        v35 = (JSC::Profiler::BytecodeSequence *)(v37 + 40);
        v36 -= 40;
      }
      while (v36);
    }
    v38 = *((_QWORD *)this + 2);
    if (v38)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::Profiler::Compilation::addProfiledBytecodes(uint64_t a1, uint64_t a2, JSC::CodeBlock *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t i;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _DWORD **v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _DWORD *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _DWORD **v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _DWORD *v61;
  _DWORD **v62;
  unsigned int v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;

  v11 = (unsigned __int8 *)(a2 + 112);
  if (__ldaxr((unsigned __int8 *)(a2 + 112)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 112);
LABEL_5:
  v19 = JSC::Profiler::Database::ensureBytecodesFor(a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v20 = __ldxr(v11);
  if (v20 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, v13, v14, v15, v16, v17, v18);
LABEL_10:
  v21 = (uint64_t *)(a1 + 16);
  for (i = 40 * *(unsigned int *)(a1 + 28) - 8; i != -8; i -= 40)
  {
    v23 = *(_QWORD *)(*v21 + i);
    if (v23 == v19)
      return;
  }
  JSC::Profiler::BytecodeSequence::BytecodeSequence((JSC::Profiler::BytecodeSequence *)&v62, a3, v13, v14, v15, v16, v17, v18);
  v66 = v19;
  v31 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v31 == *(_DWORD *)(a1 + 24))
  {
    v32 = WTF::Vector<JSC::Profiler::ProfiledBytecodes,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 16, v31 + 1, (unint64_t)&v62);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = *(_QWORD *)(a1 + 16);
    v35 = v34 + 40 * v33;
    v36 = *((unsigned int *)v32 + 3);
    *(_QWORD *)v35 = 0;
    *(_QWORD *)(v35 + 8) = 0;
    *(_DWORD *)(v35 + 12) = v36;
    if (!(_DWORD)v36)
    {
LABEL_22:
      v42 = *((unsigned int *)v32 + 7);
      *(_QWORD *)(v35 + 16) = 0;
      *(_QWORD *)(v35 + 24) = 0;
      *(_DWORD *)(v35 + 28) = v42;
      if ((_DWORD)v42)
      {
        if (v42 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x19887D4DCLL);
        }
        v43 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v42));
        *(_DWORD *)(v35 + 24) = v42;
        *(_QWORD *)(v35 + 16) = v43;
        v44 = *((unsigned int *)v32 + 7);
        if ((_DWORD)v44)
        {
          v45 = (_QWORD *)*((_QWORD *)v32 + 2);
          v46 = &v45[2 * v44];
          do
          {
            *v43 = *v45;
            v47 = (_DWORD *)v45[1];
            if (v47)
              ++*v47;
            v43[1] = v47;
            v45 += 2;
            v43 += 2;
          }
          while (v45 != v46);
        }
      }
      v48 = (uint64_t *)(v34 + 40 * v33 + 32);
      v49 = (uint64_t *)(v32 + 32);
      goto LABEL_45;
    }
    if (!(v36 >> 29))
    {
      v37 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v36));
      *(_DWORD *)(v35 + 8) = v36;
      *(_QWORD *)v35 = v37;
      v38 = *((unsigned int *)v32 + 3);
      if ((_DWORD)v38)
      {
        v39 = *(_DWORD ***)v32;
        v40 = 8 * v38;
        do
        {
          v41 = *v39;
          if (*v39)
            ++*v41;
          *v37++ = v41;
          ++v39;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_22;
    }
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x19887D4D4);
  }
  v50 = *v21;
  v51 = v63;
  v52 = *v21 + 40 * v31;
  *(_QWORD *)v52 = 0;
  *(_QWORD *)(v52 + 8) = 0;
  *(_DWORD *)(v52 + 12) = v51;
  if ((_DWORD)v51)
  {
    if (v51 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19887D4E4);
    }
    v53 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v51));
    *(_DWORD *)(v52 + 8) = v51;
    *(_QWORD *)v52 = v53;
    if (v63)
    {
      v54 = v62;
      v55 = 8 * v63;
      do
      {
        v56 = *v54;
        if (*v54)
          ++*v56;
        *v53++ = v56;
        ++v54;
        v55 -= 8;
      }
      while (v55);
    }
  }
  v57 = v65;
  *(_QWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  *(_DWORD *)(v52 + 28) = v57;
  if ((_DWORD)v57)
  {
    if (v57 >> 28)
      goto LABEL_49;
    v58 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v57));
    *(_DWORD *)(v52 + 24) = v57;
    *(_QWORD *)(v52 + 16) = v58;
    if (v65)
    {
      v59 = v64;
      v60 = &v64[2 * v65];
      do
      {
        *v58 = *v59;
        v61 = (_DWORD *)v59[1];
        if (v61)
          ++*v61;
        v58[1] = v61;
        v59 += 2;
        v58 += 2;
      }
      while (v59 != v60);
    }
  }
  v49 = &v66;
  v48 = (uint64_t *)(v50 + 40 * v31 + 32);
LABEL_45:
  *v48 = *v49;
  ++*(_DWORD *)(a1 + 28);
  JSC::Profiler::BytecodeSequence::~BytecodeSequence((JSC::Profiler::BytecodeSequence *)&v62, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t JSC::Profiler::Database::ensureBytecodesFor(JSC::Profiler::Database *this, JSC::CodeBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v10 = (unsigned __int8 *)this + 112;
  if (__ldaxr((unsigned __int8 *)this + 112))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 112);
LABEL_5:
  v18 = JSC::Profiler::Database::ensureBytecodesFor((uint64_t)this, (uint64_t)a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v19 = __ldxr(v10);
  if (v19 == 1)
  {
    if (!__stlxr(0, v10))
      return v18;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v12, v13, v14, v15, v16, v17);
  return v18;
}

_OWORD *JSC::Profiler::Compilation::addDescription(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  _DWORD *v20;

  v2 = (unint64_t *)a2;
  v4 = (uint64_t *)(a1 + 32);
  v5 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 40))
  {
    v2 = WTF::Vector<JSC::Profiler::CompiledBytecode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, a2);
    LODWORD(v5) = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = v6 + 40 * v5;
    v8 = *((unsigned int *)v2 + 3);
    result = (_OWORD *)(v7 + 16);
    *(_QWORD *)v7 = v7 + 16;
    *(_DWORD *)(v7 + 8) = 1;
    *(_DWORD *)(v7 + 12) = v8;
    if (v8 < 2)
      goto LABEL_5;
    if (!(v8 >> 28))
    {
      result = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v8));
      *(_DWORD *)(v7 + 8) = v8;
      *(_QWORD *)v7 = result;
LABEL_5:
      v10 = *((unsigned int *)v2 + 3);
      if ((_DWORD)v10)
      {
        v11 = (__int128 *)*v2;
        v12 = 16 * v10;
        do
        {
          v13 = *v11++;
          *result++ = v13;
          v12 -= 16;
        }
        while (v12);
      }
      goto LABEL_15;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x19887D6C4);
  }
  v6 = *v4;
  v14 = *v4 + 40 * v5;
  v15 = *(unsigned int *)(a2 + 12);
  result = (_OWORD *)(v14 + 16);
  *(_QWORD *)v14 = v14 + 16;
  *(_DWORD *)(v14 + 8) = 1;
  *(_DWORD *)(v14 + 12) = v15;
  if (v15 >= 2)
  {
    if (v15 >> 28)
      goto LABEL_18;
    result = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
    *(_DWORD *)(v14 + 8) = v15;
    *(_QWORD *)v14 = result;
  }
  v16 = *((unsigned int *)v2 + 3);
  if ((_DWORD)v16)
  {
    v17 = (__int128 *)*v2;
    v18 = 16 * v16;
    do
    {
      v19 = *v17++;
      *result++ = v19;
      v18 -= 16;
    }
    while (v18);
  }
LABEL_15:
  v20 = (_DWORD *)v2[4];
  if (v20)
    ++*v20;
  *(_QWORD *)(v6 + 40 * v5 + 32) = v20;
  ++*(_DWORD *)(a1 + 44);
  return result;
}

void JSC::Profiler::Compilation::addDescription(uint64_t a1, uint64_t a2, WTF **a3)
{
  uint64_t v6;
  WTF *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  int v22;
  int v23;
  _BYTE v24[16];
  WTF *v25;

  v6 = *(unsigned int *)(a2 + 12);
  v21 = (WTF *)v24;
  v22 = 1;
  v23 = v6;
  if (v6 < 2)
  {
    v7 = (WTF *)v24;
    if (!(_DWORD)v6)
      goto LABEL_8;
LABEL_6:
    v8 = *(__int128 **)a2;
    v9 = 16 * v6;
    do
    {
      v10 = *v8++;
      *(_OWORD *)v7 = v10;
      v7 = (WTF *)((char *)v7 + 16);
      v9 -= 16;
    }
    while (v9);
    goto LABEL_8;
  }
  if (v6 >> 28)
  {
    __break(0xC471u);
    return;
  }
  v7 = (WTF *)WTF::fastMalloc((WTF *)(16 * v6));
  v22 = v6;
  v21 = v7;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
    goto LABEL_6;
LABEL_8:
  v11 = *a3;
  if (*a3)
    ++*(_DWORD *)v11;
  v25 = v11;
  JSC::Profiler::Compilation::addDescription(a1, (unint64_t)&v21);
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v19;
  }
  v20 = v21;
  if (v24 != (_BYTE *)v21)
  {
    if (v21)
    {
      v21 = 0;
      v22 = 0;
      WTF::fastFree((unint64_t)v20, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

void WTF::HashMap<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>,WTF::DefaultHash<JSC::Profiler::OriginStack>,WTF::HashTraits<JSC::Profiler::OriginStack>,WTF::HashTraits<std::unique_ptr<JSC::Profiler::ExecutionCounter>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::Profiler::OriginStack,WTF::KeyValuePair<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>>>,WTF::DefaultHash<JSC::Profiler::OriginStack>,WTF::HashMap<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>,WTF::DefaultHash<JSC::Profiler::OriginStack>,WTF::HashTraits<JSC::Profiler::OriginStack>,WTF::HashTraits<std::unique_ptr<JSC::Profiler::ExecutionCounter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Profiler::OriginStack>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(unsigned int *)(a2 + 12);
  v15 = *(_QWORD *)a2;
  if ((_DWORD)v14)
  {
    v16 = v14 - 1;
    v17 = *(_DWORD *)(a2 + 12);
    do
    {
      v18 = v15 + 16 * v16;
      v19 = ~(*(_QWORD *)v18 << 32) + *(_QWORD *)v18;
      v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
      v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
      LODWORD(v18) = *(_DWORD *)(v18 + 8) + ~(*(_DWORD *)(v18 + 8) << 15);
      LODWORD(v18) = (9 * (v18 ^ (v18 >> 10))) ^ ((9 * (v18 ^ (v18 >> 10))) >> 6);
      v17 = ((v18 + ~((_DWORD)v18 << 11)) ^ ((v18 + ~((_DWORD)v18 << 11)) >> 16))
          + 3 * v17
          + (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27)));
    }
    while ((unint64_t)v16--);
  }
  else
  {
    v17 = 0;
  }
  v23 = v17 & v13;
  v24 = v12 + 40 * v23;
  if (!*(_DWORD *)(v24 + 12))
  {
    v26 = 0;
LABEL_25:
    if (v26)
    {
      *(_QWORD *)(v26 + 32) = 0;
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v24 = v26;
    }
    WTF::Vector<JSC::Profiler::Origin,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v24, a2, a3, a4, a5, a6, a7, a8);
    v42 = *(_QWORD *)(v24 + 32);
    *(_QWORD *)(v24 + 32) = 0;
    if (v42)
      WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
    v43 = *a1;
    if (*a1)
      v44 = *(_DWORD *)(v43 - 12) + 1;
    else
      v44 = 1;
    *(_DWORD *)(v43 - 12) = v44;
    v45 = *a1;
    if (*a1)
      v46 = *(_DWORD *)(v45 - 12);
    else
      v46 = 0;
    v47 = (*(_DWORD *)(v45 - 16) + v46);
    v48 = *(unsigned int *)(v45 - 4);
    if (v48 > 0x400)
    {
      if (v48 <= 2 * v47)
        goto LABEL_38;
    }
    else if (3 * v48 <= 4 * v47)
    {
      if (!(_DWORD)v48)
      {
        v49 = 8;
LABEL_41:
        WTF::HashTable<JSC::Profiler::OriginStack,WTF::KeyValuePair<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>>>,WTF::DefaultHash<JSC::Profiler::OriginStack>,WTF::HashMap<JSC::Profiler::OriginStack,std::unique_ptr<JSC::Profiler::ExecutionCounter>,WTF::DefaultHash<JSC::Profiler::OriginStack>,WTF::HashTraits<JSC::Profiler::OriginStack>,WTF::HashTraits<std::unique_ptr<JSC::Profiler::ExecutionCounter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::Profiler::OriginStack>>::rehash(a1, v49, v24, v37, v38, v39, v40, v41);
        v24 = v50;
        v45 = *a1;
        if (*a1)
          LODWORD(v48) = *(_DWORD *)(v45 - 4);
        else
          LODWORD(v48) = 0;
        goto LABEL_44;
      }
LABEL_38:
      v49 = ((_DWORD)v48 << (6 * *(_DWORD *)(v45 - 12) >= (2 * v48)));
      goto LABEL_41;
    }
LABEL_44:
    v34 = v45 + 40 * v48;
    v33 = 1;
    goto LABEL_45;
  }
  v25 = 0;
  v26 = 0;
  while (1)
  {
    v27 = *(_DWORD *)(v24 + 12);
    if (v27 == (_DWORD)v14)
      break;
LABEL_18:
    if (v27 == 1 && *(_DWORD *)(*(_QWORD *)v24 + 8) == -2)
      v26 = v24;
    ++v25;
    v23 = (v23 + v25) & v13;
    v24 = v12 + 40 * v23;
    if (!*(_DWORD *)(v24 + 12))
      goto LABEL_25;
  }
  a3 = 16 * v14;
  while (1)
  {
    v28 = a3 - 16;
    if (!a3)
      break;
    v29 = *(_QWORD *)v24 + a3;
    v30 = v15 + a3;
    a5 = *(_QWORD *)(v29 - 16);
    a6 = *(_QWORD *)(v30 - 16);
    a4 = *(unsigned int *)(v29 - 8);
    v31 = *(_DWORD *)(v30 - 8);
    v32 = a5 == a6 && (_DWORD)a4 == v31;
    a3 = v28;
    if (!v32)
      goto LABEL_18;
  }
  v33 = 0;
  v34 = v12 + 40 * *(unsigned int *)(v12 - 4);
LABEL_45:
  *(_QWORD *)a9 = v24;
  *(_QWORD *)(a9 + 8) = v34;
  *(_BYTE *)(a9 + 16) = v33;
}

void JSC::Profiler::Compilation::addOSRExitSite(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  int v25;

  v3 = *((unsigned int *)a2 + 3);
  v23 = 0;
  v24 = 0;
  v25 = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
    v24 = v3;
    v23 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *a2;
      v9 = 8 * v6;
      do
      {
        *(_QWORD *)((char *)v5 + v7) = *(_QWORD *)(v8 + v7);
        v7 += 8;
      }
      while (v9 != v7);
    }
  }
  else
  {
    v5 = 0;
  }
  v10 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 64))
  {
    v11 = WTF::Vector<WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v10 + 1, (unint64_t)&v23);
    v19 = *(_QWORD *)(a1 + 56) + 16 * *(unsigned int *)(a1 + 68);
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0;
    v20 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)v19 = v20;
    LODWORD(v20) = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v19 + 8) = v20;
    LODWORD(v20) = *(_DWORD *)(v11 + 12);
    *(_DWORD *)(v11 + 12) = 0;
    *(_DWORD *)(v19 + 12) = v20;
    v21 = v23;
    ++*(_DWORD *)(a1 + 68);
    if (v21)
    {
      v23 = 0;
      v24 = 0;
      WTF::fastFree((unint64_t)v21, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 56) + 16 * v10;
    *(_QWORD *)v22 = v5;
    *(_DWORD *)(v22 + 8) = v3;
    *(_DWORD *)(v22 + 12) = v3;
    *(_DWORD *)(a1 + 68) = v10 + 1;
  }
}

