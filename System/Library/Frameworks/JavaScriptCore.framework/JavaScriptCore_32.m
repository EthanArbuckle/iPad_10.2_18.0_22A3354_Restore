void Inspector::DOMBackendDispatcher::setEventListenerDisabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  WTF **v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  WTF *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF **v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xF00000002;
  *(_QWORD *)(v8 + 8) = "eventListenerId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v103 = (WTF::StringImpl *)v8;
  v105 = (WTF *)&off_1E3593B00;
  v106 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v107 = 0;
  v108 = &v105;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v103, 1, (uint64_t)&v105);
  v18 = v108;
  if (v108 == &v105)
  {
    v18 = &v105;
  }
  else
  {
    if (!v108)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x800000002;
  *(_QWORD *)(v21 + 8) = "disabled";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v103 = (WTF::StringImpl *)v21;
  v105 = (WTF *)&unk_1E3593AB8;
  v106 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v107 = 0;
  v108 = &v105;
  v30 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v19, v20, &v103, 1, (uint64_t)&v105);
  v31 = v108;
  if (v108 == &v105)
  {
    v31 = &v105;
  }
  else
  {
    if (!v108)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v31 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v32 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v32 + 36))
  {
    v33 = WTF::fastCompactMalloc((WTF *)0x20);
    v41 = (WTF::StringImpl *)v33;
    *(_QWORD *)v33 = 0x4A00000002;
    *(_QWORD *)(v33 + 8) = "Some arguments of method 'DOM.setEventListenerDisabled' can't be processed";
    v42 = 4;
    *(_DWORD *)(v33 + 16) = 4;
    if (!*(_BYTE *)(v32 + 48))
    {
      *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
      v42 = *(_DWORD *)v33 + 2;
    }
    LODWORD(v105) = 3;
    *(_DWORD *)v33 = v42;
    v106 = (WTF::StringImpl *)v33;
    v43 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v32 + 32))
    {
      v44 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v43 + 1, (unint64_t)&v105);
      v45 = *(unsigned int *)(v32 + 36);
      v46 = *(_QWORD *)(v32 + 24) + 16 * v45;
      *(_DWORD *)v46 = *(_DWORD *)v44;
      v47 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v46 + 8) = v47;
      v48 = v106;
      *(_DWORD *)(v32 + 36) = v45 + 1;
      v106 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    else
    {
      v50 = *(_QWORD *)(v32 + 24) + 16 * v43;
      *(_DWORD *)v50 = 3;
      *(_QWORD *)(v50 + 8) = v33;
      *(_DWORD *)(v32 + 36) = v43 + 1;
    }
    if (*(_DWORD *)v41 != 2)
    {
      *(_DWORD *)v41 -= 2;
      return;
    }
    v84 = v41;
LABEL_44:
    WTF::StringImpl::~StringImpl(v84, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    return;
  }
  v49 = *(_QWORD *)(a1 + 24);
  if (v49)
  {
    if (BYTE4(v17) && HIBYTE(v30))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v49 + 128))(v49, a2, v17, v30 != 0);
      return;
    }
LABEL_55:
    __break(1u);
  }
  if (!BYTE4(v17) || !HIBYTE(v30))
    goto LABEL_55;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 32) + 112))(&v103, *(_QWORD *)(a1 + 32), v17, v30 != 0);
  if (!v104)
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v93 = 0x500000001;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 2) = 0;
    v105 = v93;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v105);
    v74 = v105;
    if (!v105)
      goto LABEL_50;
    v75 = *(_DWORD *)v105 - 1;
    if (*(_DWORD *)v105 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v105, v34, v35, v36, v37, v38, v39, v40);
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  v67 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v67 + 48))
    *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
  LODWORD(v105) = 5;
  v68 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  v106 = v68;
  v69 = *(unsigned int *)(v67 + 36);
  if ((_DWORD)v69 != *(_DWORD *)(v67 + 32))
  {
    v102 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v102 = 5;
    *(_QWORD *)(v102 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
    goto LABEL_50;
  }
  v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v105);
  v71 = *(unsigned int *)(v67 + 36);
  v72 = *(_QWORD *)(v67 + 24) + 16 * v71;
  *(_DWORD *)v72 = *(_DWORD *)v70;
  v73 = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v72 + 8) = v73;
  v74 = v106;
  *(_DWORD *)(v67 + 36) = v71 + 1;
  v106 = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_50;
    }
LABEL_47:
    *(_DWORD *)v74 = v75;
  }
LABEL_50:
  if (v104)
  {
    v84 = v103;
    v103 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 != 2)
      {
        *(_DWORD *)v84 -= 2;
        return;
      }
      goto LABEL_44;
    }
  }
}

void Inspector::DOMBackendDispatcher::setBreakpointForEventListener(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  WTF *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF **v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xF00000002;
  *(_QWORD *)(v8 + 8) = "eventListenerId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v103 = (WTF::StringImpl *)v8;
  v106 = (WTF *)&off_1E3593B00;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v108 = 0;
  v109 = &v106;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v103, 1, (uint64_t)&v106);
  v18 = v109;
  if (v109 == &v106)
  {
    v18 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x700000002;
  *(_QWORD *)(v21 + 8) = "options";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v103 = (WTF::StringImpl *)v21;
  v106 = (WTF *)&off_1E3593C20;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v105, v19, v20, &v103, 0, (uint64_t)&v106);
  v30 = v109;
  if (v109 == &v106)
  {
    v30 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4F00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.setBreakpointForEventListener' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v32 = v41;
    v107 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v106);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v107;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v107 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v84 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v48 + 136))(v48, a2, v17, &v105);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF **))(**(_QWORD **)(a1 + 32) + 120))(&v103, *(_QWORD *)(a1 + 32), v17, &v105);
  if (!v104)
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v93 = 0x500000001;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 2) = 0;
    v106 = v93;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v106);
    v74 = v106;
    if (!v106)
      goto LABEL_52;
    v75 = *(_DWORD *)v106 - 1;
    if (*(_DWORD *)v106 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v106, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v67 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v67 + 48))
    *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
  LODWORD(v106) = 5;
  v68 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  v107 = v68;
  v69 = *(unsigned int *)(v67 + 36);
  if ((_DWORD)v69 != *(_DWORD *)(v67 + 32))
  {
    v102 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v102 = 5;
    *(_QWORD *)(v102 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
    goto LABEL_52;
  }
  v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v106);
  v71 = *(unsigned int *)(v67 + 36);
  v72 = *(_QWORD *)(v67 + 24) + 16 * v71;
  *(_DWORD *)v72 = *(_DWORD *)v70;
  v73 = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v72 + 8) = v73;
  v74 = v107;
  *(_DWORD *)(v67 + 36) = v71 + 1;
  v107 = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v74 = v75;
  }
LABEL_52:
  if (v104)
  {
    v84 = v103;
    v103 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v84, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        goto LABEL_28;
      }
      *(_DWORD *)v84 -= 2;
    }
  }
LABEL_28:
  v50 = v105;
  v105 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v50;
  }
}

void Inspector::DOMBackendDispatcher::removeBreakpointForEventListener(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xF00000002;
  *(_QWORD *)(v7 + 8) = "eventListenerId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&off_1E3593B00;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x5200000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.removeBreakpointForEventListener' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 144))(v35, a2, v16);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 128))(&v81, *(_QWORD *)(a1 + 32), v16);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DOMBackendDispatcher::getAccessibilityPropertiesForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t (**v131)();
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v129 = (WTF::StringImpl *)v7;
  v131 = &off_1E3593B00;
  v132 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v133 = 0;
  v134 = &v131;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v129, 1, (uint64_t)&v131);
  v17 = v134;
  if (v134 == &v131)
  {
    v17 = &v131;
  }
  else
  {
    if (!v134)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x5300000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.getAccessibilityPropertiesForNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v131) = 3;
    *(_DWORD *)v19 = v28;
    v132 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v131);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v132;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v132 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 152))(v35, a2, v16);
      return;
    }
LABEL_60:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_60;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 136))(&v129, *(_QWORD *)(a1 + 32), v16);
  if (v130)
  {
    if (v130 != 1)
    {
      v125 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::getOuterHTML(v125);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v131) = 5;
    v46 = v129;
    if (v129)
      *(_DWORD *)v129 += 2;
    v132 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
    {
      v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v131);
      v56 = *(unsigned int *)(v45 + 36);
      v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v132;
      *(_DWORD *)(v45 + 36) = v56 + 1;
      v132 = 0;
      if (!v59)
        goto LABEL_52;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    v113 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v113 = 5;
    *(_QWORD *)(v113 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
  }
  else
  {
    v77 = v129;
    v129 = 0;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 24) = 0;
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 16) = 0;
    v128 = (WTF *)v78;
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0xA00000002;
    *(_QWORD *)(v79 + 8) = "properties";
    *(_DWORD *)(v79 + 16) = 4;
    v126 = v77;
    v127 = (WTF::StringImpl *)v79;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v78 + 16), (WTF::AtomStringImpl *)&v127, (const WTF::StringImpl *)&v126, v80, v81, v82, v83, v84, (uint64_t)&v131);
    if ((_BYTE)v133)
    {
      v92 = (uint64_t *)(v78 + 24);
      v93 = *(unsigned int *)(v78 + 36);
      if ((_DWORD)v93 == *(_DWORD *)(v78 + 32))
      {
        v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v127);
        v93 = *(unsigned int *)(v78 + 36);
        v123 = *(_QWORD *)(v78 + 24);
        v124 = *v122;
        if (*v122)
          *v124 += 2;
        *(_QWORD *)(v123 + 8 * v93) = v124;
      }
      else
      {
        v94 = *v92;
        v95 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v94 + 8 * v93) = v95;
      }
      *(_DWORD *)(v78 + 36) = v93 + 1;
    }
    v96 = v126;
    v126 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 1)
        WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
      else
        --*(_DWORD *)v96;
    }
    v97 = v127;
    v127 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v128);
    v59 = v128;
    if (!v128)
      goto LABEL_52;
    v60 = *(_DWORD *)v128 - 1;
    if (*(_DWORD *)v128 != 1)
    {
LABEL_49:
      *(_DWORD *)v59 = v60;
      goto LABEL_52;
    }
    WTF::JSONImpl::Value::operator delete(v128, v98, v99, v100, v101, v102, v103, v104);
  }
LABEL_52:
  if (v130 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593918[v130])(&v131, &v129);
}

void Inspector::DOMBackendDispatcher::getOuterHTML(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF *v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD **v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF *v120;
  WTF::StringImpl *v121;
  int v122;
  WTF *v123;
  uint64_t (**v124)();
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t (***v127)();
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v121 = (WTF::StringImpl *)v7;
  v124 = &off_1E3593B00;
  v125 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v126 = 0;
  v127 = &v124;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v121, 1, (uint64_t)&v124);
  v17 = v127;
  if (v127 == &v124)
  {
    v17 = &v124;
  }
  else
  {
    if (!v127)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3E00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.getOuterHTML' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v124) = 3;
    *(_DWORD *)v19 = v28;
    v125 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v124);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v125;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v125 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 160))(v35, a2, v16);
      return;
    }
LABEL_68:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_68;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 144))(&v121, *(_QWORD *)(a1 + 32), v16);
  if (v122)
  {
    if (v122 != 1)
    {
      v118 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::setOuterHTML(v118);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v124) = 5;
    v46 = v121;
    if (v121)
      *(_DWORD *)v121 += 2;
    v125 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
    {
      v98 = *(_QWORD *)(v45 + 24) + 16 * v47;
      *(_DWORD *)v98 = 5;
      *(_QWORD *)(v98 + 8) = v46;
      *(_DWORD *)(v45 + 36) = v47 + 1;
      goto LABEL_60;
    }
    v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v124);
    v56 = *(unsigned int *)(v45 + 36);
    v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
    *(_DWORD *)v57 = *(_DWORD *)v48;
    v58 = *(_QWORD *)(v48 + 8);
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v57 + 8) = v58;
    v59 = v125;
    *(_DWORD *)(v45 + 36) = v56 + 1;
    v125 = 0;
    if (!v59)
      goto LABEL_60;
    if (*(_DWORD *)v59 != 2)
    {
      *(_DWORD *)v59 -= 2;
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  v68 = v121;
  v121 = 0;
  v69 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v69 = 0x500000001;
  *(_QWORD *)(v69 + 16) = 0;
  *(_QWORD *)(v69 + 24) = 0;
  *(_QWORD *)(v69 + 32) = 0;
  v120 = (WTF *)v69;
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x900000002;
  *(_QWORD *)(v70 + 8) = "outerHTML";
  *(_DWORD *)(v70 + 16) = 4;
  v119 = (WTF::StringImpl *)v70;
  v71 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v71 = 0x400000001;
  *((_QWORD *)v71 + 1) = v68;
  if (v68)
    *(_DWORD *)v68 += 2;
  v123 = v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v69 + 16), (WTF::AtomStringImpl *)&v119, (const WTF::StringImpl *)&v123, v72, v73, v74, v75, v76, (uint64_t)&v124);
  if ((_BYTE)v126)
  {
    v84 = (uint64_t *)(v69 + 24);
    v85 = *(unsigned int *)(v69 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v69 + 32))
    {
      v115 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v119);
      v85 = *(unsigned int *)(v69 + 36);
      v116 = *(_QWORD *)(v69 + 24);
      v117 = *v115;
      if (*v115)
        *v117 += 2;
      *(_QWORD *)(v116 + 8 * v85) = v117;
    }
    else
    {
      v86 = *v84;
      v87 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v69 + 36) = v85 + 1;
  }
  v88 = v123;
  v123 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v119;
  v119 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v120);
  if (!v120)
    goto LABEL_52;
  if (*(_DWORD *)v120 != 1)
  {
    --*(_DWORD *)v120;
LABEL_52:
    if (!v68)
      goto LABEL_60;
    goto LABEL_53;
  }
  WTF::JSONImpl::Value::operator delete(v120, v49, v50, v51, v52, v53, v54, v55);
  if (v68)
  {
LABEL_53:
    if (*(_DWORD *)v68 != 2)
    {
      *(_DWORD *)v68 -= 2;
      goto LABEL_60;
    }
    v59 = v68;
LABEL_59:
    WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
  }
LABEL_60:
  if (v122 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v122])(&v124, &v121);
}

void Inspector::DOMBackendDispatcher::setOuterHTML(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  WTF *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF **v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v111 = (WTF::StringImpl *)v8;
  v114 = (WTF *)&off_1E3593B00;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v116 = 0;
  v117 = &v114;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v111, 1, (uint64_t)&v114);
  v18 = v117;
  if (v117 == &v114)
  {
    v18 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x900000002;
  *(_QWORD *)(v21 + 8) = "outerHTML";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v111 = (WTF::StringImpl *)v21;
  v114 = (WTF *)&off_1E3593B90;
  v115 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v116 = 0;
  v117 = &v114;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v113, v19, v20, &v111, 1, (uint64_t)&v114);
  v30 = v117;
  if (v117 == &v114)
  {
    v30 = &v114;
  }
  else
  {
    if (!v117)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x3E00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.setOuterHTML' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v114) = 3;
    *(_DWORD *)v32 = v41;
    v115 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v114);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v115;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v115 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v92 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 168))(v48, a2, v17, &v113);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                              + 152))(&v111, *(_QWORD *)(a1 + 32), v17, &v113);
  if (!v112)
  {
    v101 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *((_QWORD *)v101 + 3) = 0;
    *((_QWORD *)v101 + 4) = 0;
    *((_QWORD *)v101 + 2) = 0;
    v114 = v101;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v114);
    v82 = v114;
    if (!v114)
      goto LABEL_52;
    v83 = *(_DWORD *)v114 - 1;
    if (*(_DWORD *)v114 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v114, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v75 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v75 + 48))
    *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
  LODWORD(v114) = 5;
  v76 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v115 = v76;
  v77 = *(unsigned int *)(v75 + 36);
  if ((_DWORD)v77 != *(_DWORD *)(v75 + 32))
  {
    v110 = *(_QWORD *)(v75 + 24) + 16 * v77;
    *(_DWORD *)v110 = 5;
    *(_QWORD *)(v110 + 8) = v76;
    *(_DWORD *)(v75 + 36) = v77 + 1;
    goto LABEL_52;
  }
  v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v114);
  v79 = *(unsigned int *)(v75 + 36);
  v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
  *(_DWORD *)v80 = *(_DWORD *)v78;
  v81 = *(_QWORD *)(v78 + 8);
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v80 + 8) = v81;
  v82 = v115;
  *(_DWORD *)(v75 + 36) = v79 + 1;
  v115 = 0;
  if (v82)
  {
    v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v82 = v83;
  }
LABEL_52:
  if (v112)
  {
    v92 = v111;
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v92, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        goto LABEL_28;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
LABEL_28:
  v50 = v113;
  v113 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::insertAdjacentHTML(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  int v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v140;
  char v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  WTF **v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v140 = (WTF::StringImpl *)v7;
  v144 = (WTF *)&off_1E3593B00;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v146 = 0;
  v147 = &v144;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v140, 1, (uint64_t)&v144);
  v17 = v147;
  if (v147 == &v144)
  {
    v17 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (const WTF::StringImpl *)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x800000002;
  *(_QWORD *)(v20 + 8) = "position";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v140 = (WTF::StringImpl *)v20;
  v144 = (WTF *)&off_1E3593B90;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v146 = 0;
  v147 = &v144;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v143, v18, v19, &v140, 1, (uint64_t)&v144);
  v29 = v147;
  if (v147 == &v144)
  {
    v29 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (const WTF::StringImpl *)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x400000002;
  *(_QWORD *)(v32 + 8) = "html";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v140 = (WTF::StringImpl *)v32;
  v144 = (WTF *)&off_1E3593B90;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v146 = 0;
  v147 = &v144;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v142, v30, v31, &v140, 1, (uint64_t)&v144);
  v41 = v147;
  if (v147 == &v144)
  {
    v41 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v42 + 36))
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    v51 = (WTF::StringImpl *)v43;
    *(_QWORD *)v43 = 0x4400000002;
    *(_QWORD *)(v43 + 8) = "Some arguments of method 'DOM.insertAdjacentHTML' can't be processed";
    v52 = 4;
    *(_DWORD *)(v43 + 16) = 4;
    if (!*(_BYTE *)(v42 + 48))
    {
      *(_BYTE *)(v42 + 48) = *(_QWORD *)(v42 + 48);
      v52 = *(_DWORD *)v43 + 2;
    }
    LODWORD(v144) = 3;
    *(_DWORD *)v43 = v52;
    v145 = (WTF::StringImpl *)v43;
    v53 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v42 + 32))
    {
      v54 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 24, v53 + 1, (unint64_t)&v144);
      v55 = *(unsigned int *)(v42 + 36);
      v56 = *(_QWORD *)(v42 + 24) + 16 * v55;
      *(_DWORD *)v56 = *(_DWORD *)v54;
      v57 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v56 + 8) = v57;
      v58 = v145;
      *(_DWORD *)(v42 + 36) = v55 + 1;
      v145 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v44, v45, v46, v47, v48, v49, v50);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      v60 = *(_QWORD *)(v42 + 24) + 16 * v53;
      *(_DWORD *)v60 = 3;
      *(_QWORD *)(v60 + 8) = v43;
      *(_DWORD *)(v42 + 36) = v53 + 1;
    }
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      goto LABEL_35;
    }
    v120 = v51;
    goto LABEL_58;
  }
  v59 = *(_QWORD *)(a1 + 24);
  if (v59)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v59 + 176))(v59, a2, v16, &v143, &v142);
      goto LABEL_35;
    }
LABEL_69:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_69;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 160))(&v140, *(_QWORD *)(a1 + 32), v16, &v143, &v142);
  if (!v141)
  {
    v129 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v129 = 0x500000001;
    *((_QWORD *)v129 + 3) = 0;
    *((_QWORD *)v129 + 4) = 0;
    *((_QWORD *)v129 + 2) = 0;
    v144 = v129;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v144);
    v110 = v144;
    if (!v144)
      goto LABEL_64;
    v111 = *(_DWORD *)v144 - 1;
    if (*(_DWORD *)v144 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v144, v44, v45, v46, v47, v48, v49, v50);
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  v103 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v103 + 48))
    *(_BYTE *)(v103 + 48) = *(_QWORD *)(v103 + 48);
  LODWORD(v144) = 5;
  v104 = v140;
  if (v140)
    *(_DWORD *)v140 += 2;
  v145 = v104;
  v105 = *(unsigned int *)(v103 + 36);
  if ((_DWORD)v105 != *(_DWORD *)(v103 + 32))
  {
    v138 = *(_QWORD *)(v103 + 24) + 16 * v105;
    *(_DWORD *)v138 = 5;
    *(_QWORD *)(v138 + 8) = v104;
    *(_DWORD *)(v103 + 36) = v105 + 1;
    goto LABEL_64;
  }
  v106 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103 + 24, v105 + 1, (unint64_t)&v144);
  v107 = *(unsigned int *)(v103 + 36);
  v108 = *(_QWORD *)(v103 + 24) + 16 * v107;
  *(_DWORD *)v108 = *(_DWORD *)v106;
  v109 = *(_QWORD *)(v106 + 8);
  *(_QWORD *)(v106 + 8) = 0;
  *(_QWORD *)(v108 + 8) = v109;
  v110 = v145;
  *(_DWORD *)(v103 + 36) = v107 + 1;
  v145 = 0;
  if (v110)
  {
    v111 = *(_DWORD *)v110 - 2;
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
      goto LABEL_64;
    }
LABEL_61:
    *(_DWORD *)v110 = v111;
  }
LABEL_64:
  if (v141)
  {
    v120 = v140;
    v140 = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
      {
LABEL_58:
        WTF::StringImpl::~StringImpl(v120, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        goto LABEL_35;
      }
      *(_DWORD *)v120 -= 2;
    }
  }
LABEL_35:
  v61 = v142;
  v142 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v143;
  v143 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::performSearch(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  double *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  WTF *v154;
  WTF::StringImpl *v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD **v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD **v192;
  uint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  WTF *v197;
  __int16 v198;
  WTF *v199;
  WTF::StringImpl *v200;
  WTF *v201;
  WTF::StringImpl *v202;
  int v203;
  int v204;
  uint64_t (**v205)();
  WTF::StringImpl *v206;
  uint64_t v207;
  uint64_t (***v208)();
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x500000002;
  *(_QWORD *)(v8 + 8) = "query";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v202 = (WTF::StringImpl *)v8;
  v205 = &off_1E3593B90;
  v206 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v207 = 0;
  v208 = &v205;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v200, v6, v7, &v202, 1, (uint64_t)&v205);
  v17 = v208;
  if (v208 == &v205)
  {
    v17 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "nodeIds";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v202 = (WTF::StringImpl *)v20;
  v205 = &off_1E3593C68;
  v206 = (WTF::StringImpl *)WTF::JSONImpl::Value::asArray;
  v207 = 0;
  v208 = &v205;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(&v199, v18, v19, &v202, 0, (uint64_t)&v205);
  v29 = v208;
  if (v208 == &v205)
  {
    v29 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xD00000002;
  *(_QWORD *)(v32 + 8) = "caseSensitive";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v202 = (WTF::StringImpl *)v32;
  v205 = (uint64_t (**)())&unk_1E3593AB8;
  v206 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v207 = 0;
  v208 = &v205;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v202, 0, (uint64_t)&v205);
  v42 = v208;
  if (v208 == &v205)
  {
    v42 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_20;
    v33 = 5;
  }
  (*v42)[v33]();
LABEL_20:
  v198 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v43 + 36))
  {
    v44 = WTF::fastCompactMalloc((WTF *)0x20);
    v52 = (WTF::StringImpl *)v44;
    *(_QWORD *)v44 = 0x3F00000002;
    *(_QWORD *)(v44 + 8) = "Some arguments of method 'DOM.performSearch' can't be processed";
    v53 = 4;
    *(_DWORD *)(v44 + 16) = 4;
    if (!*(_BYTE *)(v43 + 48))
    {
      *(_BYTE *)(v43 + 48) = *(_QWORD *)(v43 + 48);
      v53 = *(_DWORD *)v44 + 2;
    }
    LODWORD(v205) = 3;
    *(_DWORD *)v44 = v53;
    v206 = (WTF::StringImpl *)v44;
    v54 = *(unsigned int *)(v43 + 36);
    if ((_DWORD)v54 == *(_DWORD *)(v43 + 32))
    {
      v55 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43 + 24, v54 + 1, (unint64_t)&v205);
      v56 = *(unsigned int *)(v43 + 36);
      v57 = *(_QWORD *)(v43 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v55;
      v58 = *(_QWORD *)(v55 + 8);
      *(_QWORD *)(v55 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v206;
      *(_DWORD *)(v43 + 36) = v56 + 1;
      v206 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::~StringImpl(v59, v45, v46, v47, v48, v49, v50, v51);
          WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
        }
        else
        {
          *(_DWORD *)v59 -= 2;
        }
      }
    }
    else
    {
      v61 = *(_QWORD *)(v43 + 24) + 16 * v54;
      *(_DWORD *)v61 = 3;
      *(_QWORD *)(v61 + 8) = v44;
      *(_DWORD *)(v43 + 36) = v54 + 1;
    }
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
    goto LABEL_34;
  }
  v60 = *(_QWORD *)(a1 + 24);
  if (!v60)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF **, __int16 *))(**(_QWORD **)(a1 + 32) + 168))(&v202, *(_QWORD *)(a1 + 32), &v200, &v199, &v198);
    if (v204)
    {
      if (v204 != 1)
      {
        v195 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::getSearchResults(v195);
        return;
      }
      v96 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v96 + 48))
        *(_BYTE *)(v96 + 48) = *(_QWORD *)(v96 + 48);
      LODWORD(v205) = 5;
      v97 = v202;
      if (v202)
        *(_DWORD *)v202 += 2;
      v206 = v97;
      v98 = *(unsigned int *)(v96 + 36);
      if ((_DWORD)v98 != *(_DWORD *)(v96 + 32))
      {
        v164 = *(_QWORD *)(v96 + 24) + 16 * v98;
        *(_DWORD *)v164 = 5;
        *(_QWORD *)(v164 + 8) = v97;
        *(_DWORD *)(v96 + 36) = v98 + 1;
        goto LABEL_95;
      }
      v99 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96 + 24, v98 + 1, (unint64_t)&v205);
      v100 = *(unsigned int *)(v96 + 36);
      v101 = *(_QWORD *)(v96 + 24) + 16 * v100;
      *(_DWORD *)v101 = *(_DWORD *)v99;
      v102 = *(_QWORD *)(v99 + 8);
      *(_QWORD *)(v99 + 8) = 0;
      *(_QWORD *)(v101 + 8) = v102;
      v103 = v206;
      *(_DWORD *)(v96 + 36) = v100 + 1;
      v206 = 0;
      if (!v103)
        goto LABEL_95;
      if (*(_DWORD *)v103 != 2)
      {
        *(_DWORD *)v103 -= 2;
        goto LABEL_95;
      }
      goto LABEL_94;
    }
    v112 = v202;
    v202 = 0;
    v113 = v203;
    v114 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v114 = 0x500000001;
    *(_QWORD *)(v114 + 16) = 0;
    v115 = (uint64_t *)(v114 + 16);
    *(_QWORD *)(v114 + 24) = 0;
    *(_QWORD *)(v114 + 32) = 0;
    v197 = (WTF *)v114;
    v116 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v116 = 0x800000002;
    *(_QWORD *)(v116 + 8) = "searchId";
    *(_DWORD *)(v116 + 16) = 4;
    v196 = (WTF::StringImpl *)v116;
    v117 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v117 = 0x400000001;
    *((_QWORD *)v117 + 1) = v112;
    if (v112)
      *(_DWORD *)v112 += 2;
    v201 = v117;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v115, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v201, v118, v119, v120, v121, v122, (uint64_t)&v205);
    if ((_BYTE)v207)
    {
      v130 = (uint64_t *)(v114 + 24);
      v131 = *(unsigned int *)(v114 + 36);
      if ((_DWORD)v131 == *(_DWORD *)(v114 + 32))
      {
        v189 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v131 + 1, (unint64_t)&v196);
        v131 = *(unsigned int *)(v114 + 36);
        v190 = *(_QWORD *)(v114 + 24);
        v191 = *v189;
        if (*v189)
          *v191 += 2;
        *(_QWORD *)(v190 + 8 * v131) = v191;
      }
      else
      {
        v132 = *v130;
        v133 = v196;
        if (v196)
          *(_DWORD *)v196 += 2;
        *(_QWORD *)(v132 + 8 * v131) = v133;
      }
      *(_DWORD *)(v114 + 36) = v131 + 1;
    }
    v134 = v201;
    v201 = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 1)
        WTF::JSONImpl::Value::operator delete(v134, v123, v124, v125, v126, v127, v128, v129);
      else
        --*(_DWORD *)v134;
    }
    v135 = v196;
    v196 = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2)
      {
        WTF::StringImpl::~StringImpl(v135, v123, v124, v125, v126, v127, v128, v129);
        WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
      }
      else
      {
        *(_DWORD *)v135 -= 2;
      }
    }
    v136 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v136 = 0xB00000002;
    *(_QWORD *)(v136 + 8) = "resultCount";
    *(_DWORD *)(v136 + 16) = 4;
    v196 = (WTF::StringImpl *)v136;
    v137 = (double *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v137 = 0x300000001;
    v137[1] = (double)v113;
    v201 = (WTF *)v137;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v115, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v201, v138, v139, v140, v141, v142, (uint64_t)&v205);
    if ((_BYTE)v207)
    {
      v150 = (uint64_t *)(v114 + 24);
      v151 = *(unsigned int *)(v114 + 36);
      if ((_DWORD)v151 == *(_DWORD *)(v114 + 32))
      {
        v192 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v150, v151 + 1, (unint64_t)&v196);
        v151 = *(unsigned int *)(v114 + 36);
        v193 = *(_QWORD *)(v114 + 24);
        v194 = *v192;
        if (*v192)
          *v194 += 2;
        *(_QWORD *)(v193 + 8 * v151) = v194;
      }
      else
      {
        v152 = *v150;
        v153 = v196;
        if (v196)
          *(_DWORD *)v196 += 2;
        *(_QWORD *)(v152 + 8 * v151) = v153;
      }
      *(_DWORD *)(v114 + 36) = v151 + 1;
    }
    v154 = v201;
    v201 = 0;
    if (v154)
    {
      if (*(_DWORD *)v154 == 1)
        WTF::JSONImpl::Value::operator delete(v154, v143, v144, v145, v146, v147, v148, v149);
      else
        --*(_DWORD *)v154;
    }
    v155 = v196;
    v196 = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 2)
      {
        WTF::StringImpl::~StringImpl(v155, v143, v144, v145, v146, v147, v148, v149);
        WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
      }
      else
      {
        *(_DWORD *)v155 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v197);
    if (v197)
    {
      if (*(_DWORD *)v197 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v197, v45, v46, v47, v48, v49, v50, v51);
        if (!v112)
        {
LABEL_95:
          if (v204 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593928[v204])(&v205, &v202);
          goto LABEL_34;
        }
        goto LABEL_87;
      }
      --*(_DWORD *)v197;
    }
    if (!v112)
      goto LABEL_95;
LABEL_87:
    if (*(_DWORD *)v112 != 2)
    {
      *(_DWORD *)v112 -= 2;
      goto LABEL_95;
    }
    v103 = v112;
LABEL_94:
    WTF::StringImpl::~StringImpl(v103, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
    goto LABEL_95;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF **, __int16 *))(*(_QWORD *)v60 + 184))(v60, a2, &v200, &v199, &v198);
LABEL_34:
  v62 = v199;
  v199 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 1)
      WTF::JSONImpl::Value::operator delete(v62, v45, v46, v47, v48, v49, v50, v51);
    else
      --*(_DWORD *)v62;
  }
  v63 = v200;
  v200 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::getSearchResults(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  uint64_t v162;
  WTF *v163;
  WTF::StringImpl *v164;
  WTF *v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  uint64_t (**v169)();
  WTF::StringImpl *v170;
  uint64_t v171;
  uint64_t (***v172)();
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "searchId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v166 = (WTF::StringImpl *)v8;
  v169 = &off_1E3593B90;
  v170 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v171 = 0;
  v172 = &v169;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v168, v6, v7, &v166, 1, (uint64_t)&v169);
  v17 = v172;
  if (v172 == &v169)
  {
    v17 = &v169;
  }
  else
  {
    if (!v172)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x900000002;
  *(_QWORD *)(v20 + 8) = "fromIndex";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v166 = (WTF::StringImpl *)v20;
  v169 = &off_1E3593B00;
  v170 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v171 = 0;
  v172 = &v169;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v18, v19, &v166, 1, (uint64_t)&v169);
  v30 = v172;
  if (v172 == &v169)
  {
    v30 = &v169;
  }
  else
  {
    if (!v172)
      goto LABEL_13;
    v21 = 5;
  }
  (*v30)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (uint64_t)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x700000002;
  *(_QWORD *)(v33 + 8) = "toIndex";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v166 = (WTF::StringImpl *)v33;
  v169 = &off_1E3593B00;
  v170 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v171 = 0;
  v172 = &v169;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v31, v32, &v166, 1, (uint64_t)&v169);
  v43 = v172;
  if (v172 == &v169)
  {
    v43 = &v169;
  }
  else
  {
    if (!v172)
      goto LABEL_20;
    v34 = 5;
  }
  (*v43)[v34]();
LABEL_20:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v44 + 36))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    v53 = (WTF::StringImpl *)v45;
    *(_QWORD *)v45 = 0x4200000002;
    *(_QWORD *)(v45 + 8) = "Some arguments of method 'DOM.getSearchResults' can't be processed";
    v54 = 4;
    *(_DWORD *)(v45 + 16) = 4;
    if (!*(_BYTE *)(v44 + 48))
    {
      *(_BYTE *)(v44 + 48) = *(_QWORD *)(v44 + 48);
      v54 = *(_DWORD *)v45 + 2;
    }
    LODWORD(v169) = 3;
    *(_DWORD *)v45 = v54;
    v170 = (WTF::StringImpl *)v45;
    v55 = *(unsigned int *)(v44 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v44 + 32))
    {
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44 + 24, v55 + 1, (unint64_t)&v169);
      v57 = *(unsigned int *)(v44 + 36);
      v58 = *(_QWORD *)(v44 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v170;
      *(_DWORD *)(v44 + 36) = v57 + 1;
      v170 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    else
    {
      v62 = *(_QWORD *)(v44 + 24) + 16 * v55;
      *(_DWORD *)v62 = 3;
      *(_QWORD *)(v62 + 8) = v45;
      *(_DWORD *)(v44 + 36) = v55 + 1;
    }
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
    goto LABEL_36;
  }
  v61 = *(_QWORD *)(a1 + 24);
  if (!v61)
  {
    if (!BYTE4(v29) || !BYTE4(v42))
LABEL_82:
      __break(1u);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 176))(&v166, *(_QWORD *)(a1 + 32), &v168, v29, v42);
    if (v167)
    {
      if (v167 != 1)
      {
        v162 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::discardSearchResults(v162);
        return;
      }
      v96 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v96 + 48))
        *(_BYTE *)(v96 + 48) = *(_QWORD *)(v96 + 48);
      LODWORD(v169) = 5;
      v97 = v166;
      if (v166)
        *(_DWORD *)v166 += 2;
      v170 = v97;
      v98 = *(unsigned int *)(v96 + 36);
      if ((_DWORD)v98 == *(_DWORD *)(v96 + 32))
      {
        v99 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96 + 24, v98 + 1, (unint64_t)&v169);
        v100 = *(unsigned int *)(v96 + 36);
        v101 = *(_QWORD *)(v96 + 24) + 16 * v100;
        *(_DWORD *)v101 = *(_DWORD *)v99;
        v102 = *(_QWORD *)(v99 + 8);
        *(_QWORD *)(v99 + 8) = 0;
        *(_QWORD *)(v101 + 8) = v102;
        v103 = v170;
        *(_DWORD *)(v96 + 36) = v100 + 1;
        v170 = 0;
        if (!v103)
          goto LABEL_74;
        v104 = *(_DWORD *)v103 - 2;
        if (*(_DWORD *)v103 == 2)
        {
          WTF::StringImpl::~StringImpl(v103, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
          goto LABEL_74;
        }
        goto LABEL_71;
      }
      v150 = *(_QWORD *)(v96 + 24) + 16 * v98;
      *(_DWORD *)v150 = 5;
      *(_QWORD *)(v150 + 8) = v97;
      *(_DWORD *)(v96 + 36) = v98 + 1;
    }
    else
    {
      v121 = v166;
      v166 = 0;
      v122 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v122 = 0x500000001;
      *(_QWORD *)(v122 + 24) = 0;
      *(_QWORD *)(v122 + 32) = 0;
      *(_QWORD *)(v122 + 16) = 0;
      v165 = (WTF *)v122;
      v123 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v123 = 0x700000002;
      *(_QWORD *)(v123 + 8) = "nodeIds";
      *(_DWORD *)(v123 + 16) = 4;
      v163 = v121;
      v164 = (WTF::StringImpl *)v123;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v122 + 16), &v164, (const WTF::StringImpl *)&v163, v124, v125, v126, v127, v128, (uint64_t)&v169);
      if ((_BYTE)v171)
      {
        v136 = (uint64_t *)(v122 + 24);
        v137 = *(unsigned int *)(v122 + 36);
        if ((_DWORD)v137 == *(_DWORD *)(v122 + 32))
        {
          v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v164);
          v137 = *(unsigned int *)(v122 + 36);
          v160 = *(_QWORD *)(v122 + 24);
          v161 = *v159;
          if (*v159)
            *v161 += 2;
          *(_QWORD *)(v160 + 8 * v137) = v161;
        }
        else
        {
          v138 = *v136;
          v139 = v164;
          if (v164)
            *(_DWORD *)v164 += 2;
          *(_QWORD *)(v138 + 8 * v137) = v139;
        }
        *(_DWORD *)(v122 + 36) = v137 + 1;
      }
      v140 = v163;
      v163 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 1)
          WTF::JSONImpl::Value::operator delete(v140, v129, v130, v131, v132, v133, v134, v135);
        else
          --*(_DWORD *)v140;
      }
      v141 = v164;
      v164 = 0;
      if (v141)
      {
        if (*(_DWORD *)v141 == 2)
        {
          WTF::StringImpl::~StringImpl(v141, v129, v130, v131, v132, v133, v134, v135);
          WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
        }
        else
        {
          *(_DWORD *)v141 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v165);
      v103 = v165;
      if (!v165)
        goto LABEL_74;
      v104 = *(_DWORD *)v165 - 1;
      if (*(_DWORD *)v165 != 1)
      {
LABEL_71:
        *(_DWORD *)v103 = v104;
        goto LABEL_74;
      }
      WTF::JSONImpl::Value::operator delete(v165, v46, v47, v48, v49, v50, v51, v52);
    }
LABEL_74:
    if (v167 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938B8[v167])(&v169, &v166);
    goto LABEL_36;
  }
  if (!BYTE4(v29) || !BYTE4(v42))
    goto LABEL_82;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v61 + 192))(v61, a2, &v168, v29, v42);
LABEL_36:
  v63 = v168;
  v168 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::discardSearchResults(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "searchId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4600000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'DOM.discardSearchResults' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 200))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 184))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::requestNode(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF *v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD **v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  WTF *v126;
  uint64_t (**v127)();
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t (***v130)();
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "objectId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v127 = &off_1E3593B90;
  v128 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v129 = 0;
  v130 = &v127;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v127);
  v16 = v130;
  if (v130 == &v127)
  {
    v16 = &v127;
  }
  else
  {
    if (!v130)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x3D00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'DOM.requestNode' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v127) = 3;
    *(_DWORD *)v18 = v27;
    v128 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v127);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v128;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v128 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 192))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v120 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::setInspectModeEnabled(v120);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v127) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v128 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v127);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v128;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v128 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v108 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v108 = 5;
      *(_QWORD *)(v108 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = (int)v123;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0x600000002;
      *(_QWORD *)(v80 + 8) = "nodeId";
      *(_DWORD *)(v80 + 16) = 4;
      v121 = (WTF::StringImpl *)v80;
      v81 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v81 = 0x300000001;
      v81[1] = (double)v78;
      v126 = (WTF *)v81;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v126, v82, v83, v84, v85, v86, (uint64_t)&v127);
      if ((_BYTE)v129)
      {
        v94 = (uint64_t *)(v79 + 24);
        v95 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v95 == *(_DWORD *)(v79 + 32))
        {
          v117 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&v121);
          v95 = *(unsigned int *)(v79 + 36);
          v118 = *(_QWORD *)(v79 + 24);
          v119 = *v117;
          if (*v117)
            *v119 += 2;
          *(_QWORD *)(v118 + 8 * v95) = v119;
        }
        else
        {
          v96 = *v94;
          v97 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v96 + 8 * v95) = v97;
        }
        *(_DWORD *)(v79 + 36) = v95 + 1;
      }
      v98 = v126;
      v126 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 1)
          WTF::JSONImpl::Value::operator delete(v98, v87, v88, v89, v90, v91, v92, v93);
        else
          --*(_DWORD *)v98;
      }
      v99 = v121;
      v121 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, v87, v88, v89, v90, v91, v92, v93);
          WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938A8[v124])(&v127, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 208))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::setInspectModeEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  uint64_t v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF **v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  WTF *v75;
  WTF *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  int v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  char v146;
  WTF *v147;
  WTF *v148;
  WTF *v149;
  WTF *v150;
  WTF::StringImpl *v151;
  uint64_t v152;
  WTF **v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "enabled";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v145 = (WTF::StringImpl *)v8;
  v150 = (WTF *)&unk_1E3593AB8;
  v151 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v152 = 0;
  v153 = &v150;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v6, v7, &v145, 1, (uint64_t)&v150);
  v18 = v153;
  if (v153 == &v150)
  {
    v18 = &v150;
  }
  else
  {
    if (!v153)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0xF00000002;
  *(_QWORD *)(v21 + 8) = "highlightConfig";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v145 = (WTF::StringImpl *)v21;
  v150 = (WTF *)&off_1E3593C20;
  v153 = &v150;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v149, v19, v20, &v145, 0, (uint64_t)&v150);
  v30 = v153;
  if (v153 == &v150)
  {
    v30 = &v150;
  }
  else
  {
    if (!v153)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (const WTF::StringImpl *)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x1100000002;
  *(_QWORD *)(v33 + 8) = "gridOverlayConfig";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v145 = (WTF::StringImpl *)v33;
  v150 = (WTF *)&off_1E3593C20;
  v153 = &v150;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v148, v31, v32, &v145, 0, (uint64_t)&v150);
  v42 = v153;
  if (v153 == &v150)
  {
    v42 = &v150;
  }
  else
  {
    if (!v153)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v42 + v34))();
LABEL_20:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (const WTF::StringImpl *)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x1100000002;
  *(_QWORD *)(v45 + 8) = "flexOverlayConfig";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v145 = (WTF::StringImpl *)v45;
  v150 = (WTF *)&off_1E3593C20;
  v153 = &v150;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v147, v43, v44, &v145, 0, (uint64_t)&v150);
  v54 = v153;
  if (v153 == &v150)
  {
    v54 = &v150;
  }
  else
  {
    if (!v153)
      goto LABEL_27;
    v46 = 5;
  }
  (*((void (**)(void))*v54 + v46))();
LABEL_27:
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v55 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v55 + 36))
  {
    v56 = WTF::fastCompactMalloc((WTF *)0x20);
    v64 = (WTF::StringImpl *)v56;
    *(_QWORD *)v56 = 0x4700000002;
    *(_QWORD *)(v56 + 8) = "Some arguments of method 'DOM.setInspectModeEnabled' can't be processed";
    v65 = 4;
    *(_DWORD *)(v56 + 16) = 4;
    if (!*(_BYTE *)(v55 + 48))
    {
      *(_BYTE *)(v55 + 48) = *(_QWORD *)(v55 + 48);
      v65 = *(_DWORD *)v56 + 2;
    }
    LODWORD(v150) = 3;
    *(_DWORD *)v56 = v65;
    v151 = (WTF::StringImpl *)v56;
    v66 = *(unsigned int *)(v55 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v55 + 32))
    {
      v67 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v55 + 24, v66 + 1, (unint64_t)&v150);
      v68 = *(unsigned int *)(v55 + 36);
      v69 = *(_QWORD *)(v55 + 24) + 16 * v68;
      *(_DWORD *)v69 = *(_DWORD *)v67;
      v70 = *(_QWORD *)(v67 + 8);
      *(_QWORD *)(v67 + 8) = 0;
      *(_QWORD *)(v69 + 8) = v70;
      v71 = v151;
      *(_DWORD *)(v55 + 36) = v68 + 1;
      v151 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::~StringImpl(v71, v57, v58, v59, v60, v61, v62, v63);
          WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
    }
    else
    {
      v73 = *(_QWORD *)(v55 + 24) + 16 * v66;
      *(_DWORD *)v73 = 3;
      *(_QWORD *)(v73 + 8) = v56;
      *(_DWORD *)(v55 + 36) = v66 + 1;
    }
    if (*(_DWORD *)v64 != 2)
    {
      *(_DWORD *)v64 -= 2;
      goto LABEL_42;
    }
    v126 = v64;
    goto LABEL_70;
  }
  v72 = *(_QWORD *)(a1 + 24);
  if (v72)
  {
    if (HIBYTE(v17))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL, WTF **, WTF **, WTF **))(*(_QWORD *)v72 + 216))(v72, a2, v17 != 0, &v149, &v148, &v147);
      goto LABEL_42;
    }
LABEL_81:
    __break(1u);
  }
  if (!HIBYTE(v17))
    goto LABEL_81;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 200))(&v145);
  if (!v146)
  {
    v135 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v135 = 0x500000001;
    *((_QWORD *)v135 + 3) = 0;
    *((_QWORD *)v135 + 4) = 0;
    *((_QWORD *)v135 + 2) = 0;
    v150 = v135;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v150);
    v116 = v150;
    if (!v150)
      goto LABEL_76;
    v117 = *(_DWORD *)v150 - 1;
    if (*(_DWORD *)v150 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v150, v57, v58, v59, v60, v61, v62, v63);
      goto LABEL_76;
    }
    goto LABEL_73;
  }
  v109 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v109 + 48))
    *(_BYTE *)(v109 + 48) = *(_QWORD *)(v109 + 48);
  LODWORD(v150) = 5;
  v110 = v145;
  if (v145)
    *(_DWORD *)v145 += 2;
  v151 = v110;
  v111 = *(unsigned int *)(v109 + 36);
  if ((_DWORD)v111 != *(_DWORD *)(v109 + 32))
  {
    v144 = *(_QWORD *)(v109 + 24) + 16 * v111;
    *(_DWORD *)v144 = 5;
    *(_QWORD *)(v144 + 8) = v110;
    *(_DWORD *)(v109 + 36) = v111 + 1;
    goto LABEL_76;
  }
  v112 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v109 + 24, v111 + 1, (unint64_t)&v150);
  v113 = *(unsigned int *)(v109 + 36);
  v114 = *(_QWORD *)(v109 + 24) + 16 * v113;
  *(_DWORD *)v114 = *(_DWORD *)v112;
  v115 = *(_QWORD *)(v112 + 8);
  *(_QWORD *)(v112 + 8) = 0;
  *(_QWORD *)(v114 + 8) = v115;
  v116 = v151;
  *(_DWORD *)(v109 + 36) = v113 + 1;
  v151 = 0;
  if (v116)
  {
    v117 = *(_DWORD *)v116 - 2;
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
      goto LABEL_76;
    }
LABEL_73:
    *(_DWORD *)v116 = v117;
  }
LABEL_76:
  if (v146)
  {
    v126 = v145;
    v145 = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2)
      {
LABEL_70:
        WTF::StringImpl::~StringImpl(v126, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
        goto LABEL_42;
      }
      *(_DWORD *)v126 -= 2;
    }
  }
LABEL_42:
  v74 = v147;
  v147 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 1)
      WTF::JSONImpl::Value::operator delete(v74, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v74;
  }
  v75 = v148;
  v148 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 1)
      WTF::JSONImpl::Value::operator delete(v75, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v75;
  }
  v76 = v149;
  v149 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 1)
      WTF::JSONImpl::Value::operator delete(v76, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v76;
  }
}

void Inspector::DOMBackendDispatcher::highlightRect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF **v54;
  uint64_t v55;
  const WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF **v66;
  uint64_t v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  WTF **v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  WTF *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF *v176;
  int v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  char v209;
  __int16 v210;
  WTF *v211;
  WTF *v212;
  WTF *v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  WTF **v216;
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x100000002;
  *(_QWORD *)(v7 + 8) = "x";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v208 = (WTF::StringImpl *)v7;
  v213 = (WTF *)&off_1E3593B00;
  v214 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v215 = 0;
  v216 = &v213;
  v207 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v208, 1, (uint64_t)&v213);
  v16 = v216;
  if (v216 == &v213)
  {
    v16 = &v213;
  }
  else
  {
    if (!v216)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x100000002;
  *(_QWORD *)(v19 + 8) = "y";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  v208 = (WTF::StringImpl *)v19;
  v213 = (WTF *)&off_1E3593B00;
  v214 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v215 = 0;
  v216 = &v213;
  v206 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v17, v18, &v208, 1, (uint64_t)&v213);
  v28 = v216;
  if (v216 == &v213)
  {
    v28 = &v213;
  }
  else
  {
    if (!v216)
      goto LABEL_13;
    v20 = 5;
  }
  (*((void (**)(void))*v28 + v20))();
LABEL_13:
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *a3;
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0x500000002;
  *(_QWORD *)(v31 + 8) = "width";
  v32 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  v208 = (WTF::StringImpl *)v31;
  v213 = (WTF *)&off_1E3593B00;
  v214 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v215 = 0;
  v216 = &v213;
  v40 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v29, v30, &v208, 1, (uint64_t)&v213);
  v41 = v216;
  if (v216 == &v213)
  {
    v41 = &v213;
  }
  else
  {
    if (!v216)
      goto LABEL_20;
    v32 = 5;
  }
  (*((void (**)(void))*v41 + v32))();
LABEL_20:
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  v43 = *a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x600000002;
  *(_QWORD *)(v44 + 8) = "height";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v208 = (WTF::StringImpl *)v44;
  v213 = (WTF *)&off_1E3593B00;
  v214 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v215 = 0;
  v216 = &v213;
  v53 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v42, v43, &v208, 1, (uint64_t)&v213);
  v54 = v216;
  if (v216 == &v213)
  {
    v54 = &v213;
  }
  else
  {
    if (!v216)
      goto LABEL_27;
    v45 = 5;
  }
  (*((void (**)(void))*v54 + v45))();
LABEL_27:
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v55 = *(_QWORD *)(a1 + 16);
  v56 = (const WTF::StringImpl *)*a3;
  v57 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v57 = 0x500000002;
  *(_QWORD *)(v57 + 8) = "color";
  v58 = 4;
  *(_DWORD *)(v57 + 16) = 4;
  v208 = (WTF::StringImpl *)v57;
  v213 = (WTF *)&off_1E3593C20;
  v216 = &v213;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v212, v55, v56, &v208, 0, (uint64_t)&v213);
  v66 = v216;
  if (v216 == &v213)
  {
    v66 = &v213;
  }
  else
  {
    if (!v216)
      goto LABEL_34;
    v58 = 5;
  }
  (*((void (**)(void))*v66 + v58))();
LABEL_34:
  if (*(_DWORD *)v57 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v57, v59, v60, v61, v62, v63, v64, v65);
    WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
  }
  else
  {
    *(_DWORD *)v57 -= 2;
  }
  v67 = *(_QWORD *)(a1 + 16);
  v68 = (const WTF::StringImpl *)*a3;
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0xC00000002;
  *(_QWORD *)(v69 + 8) = "outlineColor";
  v70 = 4;
  *(_DWORD *)(v69 + 16) = 4;
  v208 = (WTF::StringImpl *)v69;
  v213 = (WTF *)&off_1E3593C20;
  v216 = &v213;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v211, v67, v68, &v208, 0, (uint64_t)&v213);
  v78 = v216;
  if (v216 == &v213)
  {
    v78 = &v213;
  }
  else
  {
    if (!v216)
      goto LABEL_41;
    v70 = 5;
  }
  (*((void (**)(void))*v78 + v70))();
LABEL_41:
  if (*(_DWORD *)v69 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v69, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
  }
  else
  {
    *(_DWORD *)v69 -= 2;
  }
  v79 = *(_QWORD *)(a1 + 16);
  v80 = *a3;
  v81 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v81 = 0x1200000002;
  *(_QWORD *)(v81 + 8) = "usePageCoordinates";
  v82 = 4;
  *(_DWORD *)(v81 + 16) = 4;
  v208 = (WTF::StringImpl *)v81;
  v213 = (WTF *)&unk_1E3593AB8;
  v214 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v215 = 0;
  v216 = &v213;
  v90 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v79, v80, &v208, 0, (uint64_t)&v213);
  v91 = v216;
  if (v216 == &v213)
  {
    v91 = &v213;
  }
  else
  {
    if (!v216)
      goto LABEL_48;
    v82 = 5;
  }
  (*((void (**)(void))*v91 + v82))();
LABEL_48:
  v210 = v90;
  if (*(_DWORD *)v81 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v81, v83, v84, v85, v86, v87, v88, v89);
    WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
  }
  else
  {
    *(_DWORD *)v81 -= 2;
  }
  v92 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v92 + 36))
  {
    v93 = WTF::fastCompactMalloc((WTF *)0x20);
    v101 = (WTF::StringImpl *)v93;
    *(_QWORD *)v93 = 0x3F00000002;
    *(_QWORD *)(v93 + 8) = "Some arguments of method 'DOM.highlightRect' can't be processed";
    v102 = 4;
    *(_DWORD *)(v93 + 16) = 4;
    if (!*(_BYTE *)(v92 + 48))
    {
      *(_BYTE *)(v92 + 48) = *(_QWORD *)(v92 + 48);
      v102 = *(_DWORD *)v93 + 2;
    }
    LODWORD(v213) = 3;
    *(_DWORD *)v93 = v102;
    v214 = (WTF::StringImpl *)v93;
    v103 = *(unsigned int *)(v92 + 36);
    if ((_DWORD)v103 == *(_DWORD *)(v92 + 32))
    {
      v104 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92 + 24, v103 + 1, (unint64_t)&v213);
      v105 = *(unsigned int *)(v92 + 36);
      v106 = *(_QWORD *)(v92 + 24) + 16 * v105;
      *(_DWORD *)v106 = *(_DWORD *)v104;
      v107 = *(_QWORD *)(v104 + 8);
      *(_QWORD *)(v104 + 8) = 0;
      *(_QWORD *)(v106 + 8) = v107;
      v108 = v214;
      *(_DWORD *)(v92 + 36) = v105 + 1;
      v214 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
        {
          WTF::StringImpl::~StringImpl(v108, v94, v95, v96, v97, v98, v99, v100);
          WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
        }
        else
        {
          *(_DWORD *)v108 -= 2;
        }
      }
    }
    else
    {
      v110 = *(_QWORD *)(v92 + 24) + 16 * v103;
      *(_DWORD *)v110 = 3;
      *(_QWORD *)(v110 + 8) = v93;
      *(_DWORD *)(v92 + 36) = v103 + 1;
    }
    if (*(_DWORD *)v101 != 2)
    {
      *(_DWORD *)v101 -= 2;
      goto LABEL_66;
    }
    v186 = v101;
    goto LABEL_96;
  }
  v109 = *(_QWORD *)(a1 + 24);
  if (v109)
  {
    if (BYTE4(v207) && BYTE4(v206) && BYTE4(v40) && BYTE4(v53))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v109 + 224))(v109, a2);
      goto LABEL_66;
    }
LABEL_107:
    __break(1u);
  }
  if (!BYTE4(v207) || !BYTE4(v206) || !BYTE4(v40) || !BYTE4(v53))
    goto LABEL_107;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, WTF **, WTF **, __int16 *))(**(_QWORD **)(a1 + 32) + 208))(&v208, *(_QWORD *)(a1 + 32), v207, v206, v40, v53, &v212, &v211, &v210);
  if (!v209)
  {
    v195 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v195 = 0x500000001;
    *((_QWORD *)v195 + 3) = 0;
    *((_QWORD *)v195 + 4) = 0;
    *((_QWORD *)v195 + 2) = 0;
    v213 = v195;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v213);
    v176 = v213;
    if (!v213)
      goto LABEL_102;
    v177 = *(_DWORD *)v213 - 1;
    if (*(_DWORD *)v213 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v213, v94, v95, v96, v97, v98, v99, v100);
      goto LABEL_102;
    }
    goto LABEL_99;
  }
  v169 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v169 + 48))
    *(_BYTE *)(v169 + 48) = *(_QWORD *)(v169 + 48);
  LODWORD(v213) = 5;
  v170 = v208;
  if (v208)
    *(_DWORD *)v208 += 2;
  v214 = v170;
  v171 = *(unsigned int *)(v169 + 36);
  if ((_DWORD)v171 != *(_DWORD *)(v169 + 32))
  {
    v204 = *(_QWORD *)(v169 + 24) + 16 * v171;
    *(_DWORD *)v204 = 5;
    *(_QWORD *)(v204 + 8) = v170;
    *(_DWORD *)(v169 + 36) = v171 + 1;
    goto LABEL_102;
  }
  v172 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v169 + 24, v171 + 1, (unint64_t)&v213);
  v173 = *(unsigned int *)(v169 + 36);
  v174 = *(_QWORD *)(v169 + 24) + 16 * v173;
  *(_DWORD *)v174 = *(_DWORD *)v172;
  v175 = *(_QWORD *)(v172 + 8);
  *(_QWORD *)(v172 + 8) = 0;
  *(_QWORD *)(v174 + 8) = v175;
  v176 = v214;
  *(_DWORD *)(v169 + 36) = v173 + 1;
  v214 = 0;
  if (v176)
  {
    v177 = *(_DWORD *)v176 - 2;
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
      goto LABEL_102;
    }
LABEL_99:
    *(_DWORD *)v176 = v177;
  }
LABEL_102:
  if (v209)
  {
    v186 = v208;
    v208 = 0;
    if (v186)
    {
      if (*(_DWORD *)v186 == 2)
      {
LABEL_96:
        WTF::StringImpl::~StringImpl(v186, v94, v95, v96, v97, v98, v99, v100);
        WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
        goto LABEL_66;
      }
      *(_DWORD *)v186 -= 2;
    }
  }
LABEL_66:
  v111 = v211;
  v211 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v94, v95, v96, v97, v98, v99, v100);
    else
      --*(_DWORD *)v111;
  }
  v112 = v212;
  v212 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 1)
      WTF::JSONImpl::Value::operator delete(v112, v94, v95, v96, v97, v98, v99, v100);
    else
      --*(_DWORD *)v112;
  }
}

void Inspector::DOMBackendDispatcher::highlightQuad(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  WTF **v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF *v73;
  WTF::StringImpl *v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  int v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF *v147;
  WTF *v148;
  WTF::StringImpl *v149;
  char v150;
  __int16 v151;
  WTF *v152;
  WTF *v153;
  WTF *v154;
  WTF *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  WTF **v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x400000002;
  *(_QWORD *)(v8 + 8) = "quad";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v149 = (WTF::StringImpl *)v8;
  v155 = (WTF *)&off_1E3593C68;
  v156 = (WTF::StringImpl *)WTF::JSONImpl::Value::asArray;
  v157 = 0;
  v158 = &v155;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(&v154, v6, v7, &v149, 1, (uint64_t)&v155);
  v17 = v158;
  if (v158 == &v155)
  {
    v17 = &v155;
  }
  else
  {
    if (!v158)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "color";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v149 = (WTF::StringImpl *)v20;
  v155 = (WTF *)&off_1E3593C20;
  v158 = &v155;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v153, v18, v19, &v149, 0, (uint64_t)&v155);
  v29 = v158;
  if (v158 == &v155)
  {
    v29 = &v155;
  }
  else
  {
    if (!v158)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xC00000002;
  *(_QWORD *)(v32 + 8) = "outlineColor";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v149 = (WTF::StringImpl *)v32;
  v155 = (WTF *)&off_1E3593C20;
  v158 = &v155;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v152, v30, v31, &v149, 0, (uint64_t)&v155);
  v41 = v158;
  if (v158 == &v155)
  {
    v41 = &v155;
  }
  else
  {
    if (!v158)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = a1[2];
  v43 = (uint64_t)*a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x1200000002;
  *(_QWORD *)(v44 + 8) = "usePageCoordinates";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v149 = (WTF::StringImpl *)v44;
  v155 = (WTF *)&unk_1E3593AB8;
  v156 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v157 = 0;
  v158 = &v155;
  v53 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v42, v43, &v149, 0, (uint64_t)&v155);
  v54 = v158;
  if (v158 == &v155)
  {
    v54 = &v155;
  }
  else
  {
    if (!v158)
      goto LABEL_27;
    v45 = 5;
  }
  (*((void (**)(void))*v54 + v45))();
LABEL_27:
  v151 = v53;
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v55 = a1[2];
  if (*(_DWORD *)(v55 + 36))
  {
    v56 = WTF::fastCompactMalloc((WTF *)0x20);
    v64 = (WTF::StringImpl *)v56;
    *(_QWORD *)v56 = 0x3F00000002;
    *(_QWORD *)(v56 + 8) = "Some arguments of method 'DOM.highlightQuad' can't be processed";
    v65 = 4;
    *(_DWORD *)(v56 + 16) = 4;
    if (!*(_BYTE *)(v55 + 48))
    {
      *(_BYTE *)(v55 + 48) = *(_QWORD *)(v55 + 48);
      v65 = *(_DWORD *)v56 + 2;
    }
    LODWORD(v155) = 3;
    *(_DWORD *)v56 = v65;
    v156 = (WTF::StringImpl *)v56;
    v66 = *(unsigned int *)(v55 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v55 + 32))
    {
      v67 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v55 + 24, v66 + 1, (unint64_t)&v155);
      v68 = *(unsigned int *)(v55 + 36);
      v69 = *(_QWORD *)(v55 + 24) + 16 * v68;
      *(_DWORD *)v69 = *(_DWORD *)v67;
      v70 = *(_QWORD *)(v67 + 8);
      *(_QWORD *)(v67 + 8) = 0;
      *(_QWORD *)(v69 + 8) = v70;
      v71 = v156;
      *(_DWORD *)(v55 + 36) = v68 + 1;
      v156 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::~StringImpl(v71, v57, v58, v59, v60, v61, v62, v63);
          WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
    }
    else
    {
      v76 = *(_QWORD *)(v55 + 24) + 16 * v66;
      *(_DWORD *)v76 = 3;
      *(_QWORD *)(v76 + 8) = v56;
      *(_DWORD *)(v55 + 36) = v66 + 1;
    }
    if (*(_DWORD *)v64 != 2)
    {
      *(_DWORD *)v64 -= 2;
      goto LABEL_70;
    }
    v74 = v64;
    goto LABEL_60;
  }
  v72 = a1[3];
  if (v72)
  {
    v73 = v154;
    v154 = 0;
    v155 = v73;
    (*(void (**)(uint64_t, uint64_t, WTF **, WTF **, WTF **, __int16 *))(*(_QWORD *)v72 + 232))(v72, a2, &v155, &v153, &v152, &v151);
    v74 = v155;
    v155 = 0;
    if (!v74)
      goto LABEL_70;
    v75 = *(_DWORD *)v74 - 1;
    if (*(_DWORD *)v74 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v74, v57, v58, v59, v60, v61, v62, v63);
      goto LABEL_70;
    }
LABEL_69:
    *(_DWORD *)v74 = v75;
    goto LABEL_70;
  }
  v109 = a1[4];
  v110 = v154;
  v154 = 0;
  v155 = v110;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **, WTF **, WTF **, __int16 *))(*(_QWORD *)v109 + 216))(&v149, v109, &v155, &v153, &v152, &v151);
  v111 = v155;
  v155 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v111;
  }
  if (!v150)
  {
    v137 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v137 = 0x500000001;
    *((_QWORD *)v137 + 3) = 0;
    *((_QWORD *)v137 + 4) = 0;
    *((_QWORD *)v137 + 2) = 0;
    v155 = v137;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v155);
    v119 = v155;
    if (!v155)
      goto LABEL_66;
    v120 = *(_DWORD *)v155 - 1;
    if (*(_DWORD *)v155 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v155, v57, v58, v59, v60, v61, v62, v63);
      goto LABEL_66;
    }
    goto LABEL_63;
  }
  v112 = a1[2];
  if (!*(_BYTE *)(v112 + 48))
    *(_BYTE *)(v112 + 48) = *(_QWORD *)(v112 + 48);
  LODWORD(v155) = 5;
  v113 = v149;
  if (v149)
    *(_DWORD *)v149 += 2;
  v156 = v113;
  v114 = *(unsigned int *)(v112 + 36);
  if ((_DWORD)v114 != *(_DWORD *)(v112 + 32))
  {
    v146 = *(_QWORD *)(v112 + 24) + 16 * v114;
    *(_DWORD *)v146 = 5;
    *(_QWORD *)(v146 + 8) = v113;
    *(_DWORD *)(v112 + 36) = v114 + 1;
    goto LABEL_66;
  }
  v115 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v112 + 24, v114 + 1, (unint64_t)&v155);
  v116 = *(unsigned int *)(v112 + 36);
  v117 = *(_QWORD *)(v112 + 24) + 16 * v116;
  *(_DWORD *)v117 = *(_DWORD *)v115;
  v118 = *(_QWORD *)(v115 + 8);
  *(_QWORD *)(v115 + 8) = 0;
  *(_QWORD *)(v117 + 8) = v118;
  v119 = v156;
  *(_DWORD *)(v112 + 36) = v116 + 1;
  v156 = 0;
  if (v119)
  {
    v120 = *(_DWORD *)v119 - 2;
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
      goto LABEL_66;
    }
LABEL_63:
    *(_DWORD *)v119 = v120;
  }
LABEL_66:
  if (v150)
  {
    v74 = v149;
    v149 = 0;
    if (v74)
    {
      v75 = *(_DWORD *)v74 - 2;
      if (*(_DWORD *)v74 == 2)
      {
LABEL_60:
        WTF::StringImpl::~StringImpl(v74, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        goto LABEL_70;
      }
      goto LABEL_69;
    }
  }
LABEL_70:
  v147 = v152;
  v152 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 1)
      WTF::JSONImpl::Value::operator delete(v147, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v147;
  }
  v148 = v153;
  v153 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 1)
      WTF::JSONImpl::Value::operator delete(v148, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v148;
  }
  if (v154)
  {
    if (*(_DWORD *)v154 == 1)
      WTF::JSONImpl::Value::operator delete(v154, v57, v58, v59, v60, v61, v62, v63);
    else
      --*(_DWORD *)v154;
  }
}

void Inspector::DOMBackendDispatcher::highlightSelector(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF **v53;
  uint64_t v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF **v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  int v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF *v164;
  WTF *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  char v185;
  WTF *v186;
  WTF *v187;
  WTF *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF *v191;
  WTF::StringImpl *v192;
  uint64_t v193;
  WTF **v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xE00000002;
  *(_QWORD *)(v8 + 8) = "selectorString";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v184 = (WTF::StringImpl *)v8;
  v191 = (WTF *)&off_1E3593B90;
  v192 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v193 = 0;
  v194 = &v191;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v190, v6, v7, &v184, 1, (uint64_t)&v191);
  v17 = v194;
  if (v194 == &v191)
  {
    v17 = &v191;
  }
  else
  {
    if (!v194)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "frameId";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v184 = (WTF::StringImpl *)v20;
  v191 = (WTF *)&off_1E3593B90;
  v192 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v193 = 0;
  v194 = &v191;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v189, v18, v19, &v184, 0, (uint64_t)&v191);
  v29 = v194;
  if (v194 == &v191)
  {
    v29 = &v191;
  }
  else
  {
    if (!v194)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xF00000002;
  *(_QWORD *)(v32 + 8) = "highlightConfig";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v184 = (WTF::StringImpl *)v32;
  v191 = (WTF *)&off_1E3593C20;
  v194 = &v191;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v188, v30, v31, &v184, 1, (uint64_t)&v191);
  v41 = v194;
  if (v194 == &v191)
  {
    v41 = &v191;
  }
  else
  {
    if (!v194)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = a1[2];
  v43 = *a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x1100000002;
  *(_QWORD *)(v44 + 8) = "gridOverlayConfig";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v184 = (WTF::StringImpl *)v44;
  v191 = (WTF *)&off_1E3593C20;
  v194 = &v191;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v187, v42, v43, &v184, 0, (uint64_t)&v191);
  v53 = v194;
  if (v194 == &v191)
  {
    v53 = &v191;
  }
  else
  {
    if (!v194)
      goto LABEL_27;
    v45 = 5;
  }
  (*((void (**)(void))*v53 + v45))();
LABEL_27:
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v54 = a1[2];
  v55 = *a3;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x1100000002;
  *(_QWORD *)(v56 + 8) = "flexOverlayConfig";
  v57 = 4;
  *(_DWORD *)(v56 + 16) = 4;
  v184 = (WTF::StringImpl *)v56;
  v191 = (WTF *)&off_1E3593C20;
  v194 = &v191;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v186, v54, v55, &v184, 0, (uint64_t)&v191);
  v65 = v194;
  if (v194 == &v191)
  {
    v65 = &v191;
  }
  else
  {
    if (!v194)
      goto LABEL_34;
    v57 = 5;
  }
  (*((void (**)(void))*v65 + v57))();
LABEL_34:
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
  v66 = a1[2];
  if (*(_DWORD *)(v66 + 36))
  {
    v67 = WTF::fastCompactMalloc((WTF *)0x20);
    v75 = (WTF::StringImpl *)v67;
    *(_QWORD *)v67 = 0x4300000002;
    *(_QWORD *)(v67 + 8) = "Some arguments of method 'DOM.highlightSelector' can't be processed";
    v76 = 4;
    *(_DWORD *)(v67 + 16) = 4;
    if (!*(_BYTE *)(v66 + 48))
    {
      *(_BYTE *)(v66 + 48) = *(_QWORD *)(v66 + 48);
      v76 = *(_DWORD *)v67 + 2;
    }
    LODWORD(v191) = 3;
    *(_DWORD *)v67 = v76;
    v192 = (WTF::StringImpl *)v67;
    v77 = *(unsigned int *)(v66 + 36);
    if ((_DWORD)v77 == *(_DWORD *)(v66 + 32))
    {
      v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v66 + 24, v77 + 1, (unint64_t)&v191);
      v79 = *(unsigned int *)(v66 + 36);
      v80 = *(_QWORD *)(v66 + 24) + 16 * v79;
      *(_DWORD *)v80 = *(_DWORD *)v78;
      v81 = *(_QWORD *)(v78 + 8);
      *(_QWORD *)(v78 + 8) = 0;
      *(_QWORD *)(v80 + 8) = v81;
      v82 = v192;
      *(_DWORD *)(v66 + 36) = v79 + 1;
      v192 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v68, v69, v70, v71, v72, v73, v74);
          WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
        }
        else
        {
          *(_DWORD *)v82 -= 2;
        }
      }
    }
    else
    {
      v86 = *(_QWORD *)(v66 + 24) + 16 * v77;
      *(_DWORD *)v86 = 3;
      *(_QWORD *)(v86 + 8) = v67;
      *(_DWORD *)(v66 + 36) = v77 + 1;
    }
    if (*(_DWORD *)v75 != 2)
    {
      *(_DWORD *)v75 -= 2;
      goto LABEL_78;
    }
    v84 = v75;
    goto LABEL_68;
  }
  v83 = a1[3];
  if (v83)
  {
    v191 = v188;
    v188 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF **, WTF **, WTF **))(*(_QWORD *)v83 + 240))(v83, a2, &v190, &v189, &v191, &v187, &v186);
    v84 = v191;
    v191 = 0;
    if (!v84)
      goto LABEL_78;
    v85 = *(_DWORD *)v84 - 1;
    if (*(_DWORD *)v84 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v84, v68, v69, v70, v71, v72, v73, v74);
      goto LABEL_78;
    }
LABEL_77:
    *(_DWORD *)v84 = v85;
    goto LABEL_78;
  }
  v127 = a1[4];
  v191 = v188;
  v188 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF **, WTF **, WTF **))(*(_QWORD *)v127 + 224))(&v184, v127, &v190, &v189, &v191, &v187, &v186);
  v128 = v191;
  v191 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 1)
      WTF::JSONImpl::Value::operator delete(v128, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v128;
  }
  if (!v185)
  {
    v154 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v154 = 0x500000001;
    *((_QWORD *)v154 + 3) = 0;
    *((_QWORD *)v154 + 4) = 0;
    *((_QWORD *)v154 + 2) = 0;
    v191 = v154;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v191);
    v136 = v191;
    if (!v191)
      goto LABEL_74;
    v137 = *(_DWORD *)v191 - 1;
    if (*(_DWORD *)v191 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v191, v68, v69, v70, v71, v72, v73, v74);
      goto LABEL_74;
    }
    goto LABEL_71;
  }
  v129 = a1[2];
  if (!*(_BYTE *)(v129 + 48))
    *(_BYTE *)(v129 + 48) = *(_QWORD *)(v129 + 48);
  LODWORD(v191) = 5;
  v130 = v184;
  if (v184)
    *(_DWORD *)v184 += 2;
  v192 = v130;
  v131 = *(unsigned int *)(v129 + 36);
  if ((_DWORD)v131 != *(_DWORD *)(v129 + 32))
  {
    v163 = *(_QWORD *)(v129 + 24) + 16 * v131;
    *(_DWORD *)v163 = 5;
    *(_QWORD *)(v163 + 8) = v130;
    *(_DWORD *)(v129 + 36) = v131 + 1;
    goto LABEL_74;
  }
  v132 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129 + 24, v131 + 1, (unint64_t)&v191);
  v133 = *(unsigned int *)(v129 + 36);
  v134 = *(_QWORD *)(v129 + 24) + 16 * v133;
  *(_DWORD *)v134 = *(_DWORD *)v132;
  v135 = *(_QWORD *)(v132 + 8);
  *(_QWORD *)(v132 + 8) = 0;
  *(_QWORD *)(v134 + 8) = v135;
  v136 = v192;
  *(_DWORD *)(v129 + 36) = v133 + 1;
  v192 = 0;
  if (v136)
  {
    v137 = *(_DWORD *)v136 - 2;
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
      goto LABEL_74;
    }
LABEL_71:
    *(_DWORD *)v136 = v137;
  }
LABEL_74:
  if (v185)
  {
    v84 = v184;
    v184 = 0;
    if (v84)
    {
      v85 = *(_DWORD *)v84 - 2;
      if (*(_DWORD *)v84 == 2)
      {
LABEL_68:
        WTF::StringImpl::~StringImpl(v84, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
        goto LABEL_78;
      }
      goto LABEL_77;
    }
  }
LABEL_78:
  v164 = v186;
  v186 = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 1)
      WTF::JSONImpl::Value::operator delete(v164, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v164;
  }
  v165 = v187;
  v187 = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 1)
      WTF::JSONImpl::Value::operator delete(v165, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v165;
  }
  if (v188)
  {
    if (*(_DWORD *)v188 == 1)
      WTF::JSONImpl::Value::operator delete(v188, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v188;
  }
  v166 = v189;
  v189 = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
    {
      WTF::StringImpl::~StringImpl(v166, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
    }
    else
    {
      *(_DWORD *)v166 -= 2;
    }
  }
  v167 = v190;
  v190 = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
    {
      WTF::StringImpl::~StringImpl(v167, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
    }
    else
    {
      *(_DWORD *)v167 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::highlightNode(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  uint64_t v43;
  const WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF **v54;
  uint64_t v55;
  const WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF **v66;
  uint64_t v67;
  uint64_t v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  int v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  WTF *v166;
  WTF::StringImpl *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  char v177;
  WTF *v178;
  WTF *v179;
  WTF *v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  WTF *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  WTF **v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v176 = (WTF::StringImpl *)v8;
  v183 = (WTF *)&off_1E3593B00;
  v184 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v185 = 0;
  v186 = &v183;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v176, 0, (uint64_t)&v183);
  v18 = v186;
  if (v186 == &v183)
  {
    v18 = &v183;
  }
  else
  {
    if (!v186)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  v182 = v17;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = a1[2];
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x800000002;
  *(_QWORD *)(v21 + 8) = "objectId";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v176 = (WTF::StringImpl *)v21;
  v183 = (WTF *)&off_1E3593B90;
  v184 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v185 = 0;
  v186 = &v183;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v181, v19, v20, &v176, 0, (uint64_t)&v183);
  v30 = v186;
  if (v186 == &v183)
  {
    v30 = &v183;
  }
  else
  {
    if (!v186)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = a1[2];
  v32 = (const WTF::StringImpl *)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xF00000002;
  *(_QWORD *)(v33 + 8) = "highlightConfig";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v176 = (WTF::StringImpl *)v33;
  v183 = (WTF *)&off_1E3593C20;
  v186 = &v183;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v180, v31, v32, &v176, 1, (uint64_t)&v183);
  v42 = v186;
  if (v186 == &v183)
  {
    v42 = &v183;
  }
  else
  {
    if (!v186)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v42 + v34))();
LABEL_20:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v43 = a1[2];
  v44 = (const WTF::StringImpl *)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x1100000002;
  *(_QWORD *)(v45 + 8) = "gridOverlayConfig";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v176 = (WTF::StringImpl *)v45;
  v183 = (WTF *)&off_1E3593C20;
  v186 = &v183;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v179, v43, v44, &v176, 0, (uint64_t)&v183);
  v54 = v186;
  if (v186 == &v183)
  {
    v54 = &v183;
  }
  else
  {
    if (!v186)
      goto LABEL_27;
    v46 = 5;
  }
  (*((void (**)(void))*v54 + v46))();
LABEL_27:
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v55 = a1[2];
  v56 = (const WTF::StringImpl *)*a3;
  v57 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v57 = 0x1100000002;
  *(_QWORD *)(v57 + 8) = "flexOverlayConfig";
  v58 = 4;
  *(_DWORD *)(v57 + 16) = 4;
  v176 = (WTF::StringImpl *)v57;
  v183 = (WTF *)&off_1E3593C20;
  v186 = &v183;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v178, v55, v56, &v176, 0, (uint64_t)&v183);
  v66 = v186;
  if (v186 == &v183)
  {
    v66 = &v183;
  }
  else
  {
    if (!v186)
      goto LABEL_34;
    v58 = 5;
  }
  (*((void (**)(void))*v66 + v58))();
LABEL_34:
  if (*(_DWORD *)v57 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v57, v59, v60, v61, v62, v63, v64, v65);
    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
  }
  else
  {
    *(_DWORD *)v57 -= 2;
  }
  v67 = a1[2];
  if (*(_DWORD *)(v67 + 36))
  {
    v68 = WTF::fastCompactMalloc((WTF *)0x20);
    v76 = (WTF::StringImpl *)v68;
    *(_QWORD *)v68 = 0x3F00000002;
    *(_QWORD *)(v68 + 8) = "Some arguments of method 'DOM.highlightNode' can't be processed";
    v77 = 4;
    *(_DWORD *)(v68 + 16) = 4;
    if (!*(_BYTE *)(v67 + 48))
    {
      *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
      v77 = *(_DWORD *)v68 + 2;
    }
    LODWORD(v183) = 3;
    *(_DWORD *)v68 = v77;
    v184 = (WTF::StringImpl *)v68;
    v78 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v78 == *(_DWORD *)(v67 + 32))
    {
      v79 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v78 + 1, (unint64_t)&v183);
      v80 = *(unsigned int *)(v67 + 36);
      v81 = *(_QWORD *)(v67 + 24) + 16 * v80;
      *(_DWORD *)v81 = *(_DWORD *)v79;
      v82 = *(_QWORD *)(v79 + 8);
      *(_QWORD *)(v79 + 8) = 0;
      *(_QWORD *)(v81 + 8) = v82;
      v83 = v184;
      *(_DWORD *)(v67 + 36) = v80 + 1;
      v184 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
        {
          WTF::StringImpl::~StringImpl(v83, v69, v70, v71, v72, v73, v74, v75);
          WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
        }
        else
        {
          *(_DWORD *)v83 -= 2;
        }
      }
    }
    else
    {
      v87 = *(_QWORD *)(v67 + 24) + 16 * v78;
      *(_DWORD *)v87 = 3;
      *(_QWORD *)(v87 + 8) = v68;
      *(_DWORD *)(v67 + 36) = v78 + 1;
    }
    if (*(_DWORD *)v76 != 2)
    {
      *(_DWORD *)v76 -= 2;
      goto LABEL_78;
    }
    v85 = v76;
    goto LABEL_68;
  }
  v84 = a1[3];
  if (v84)
  {
    v183 = v180;
    v180 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, WTF::StringImpl **, WTF **, WTF **, WTF **))(*(_QWORD *)v84 + 248))(v84, a2, &v182, &v181, &v183, &v179, &v178);
    v85 = v183;
    v183 = 0;
    if (!v85)
      goto LABEL_78;
    v86 = *(_DWORD *)v85 - 1;
    if (*(_DWORD *)v85 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v85, v69, v70, v71, v72, v73, v74, v75);
      goto LABEL_78;
    }
LABEL_77:
    *(_DWORD *)v85 = v86;
    goto LABEL_78;
  }
  v128 = a1[4];
  v183 = v180;
  v180 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t *, WTF::StringImpl **, WTF **, WTF **, WTF **))(*(_QWORD *)v128 + 232))(&v176, v128, &v182, &v181, &v183, &v179, &v178);
  v129 = v183;
  v183 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 1)
      WTF::JSONImpl::Value::operator delete(v129, v69, v70, v71, v72, v73, v74, v75);
    else
      --*(_DWORD *)v129;
  }
  if (!v177)
  {
    v155 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v155 = 0x500000001;
    *((_QWORD *)v155 + 3) = 0;
    *((_QWORD *)v155 + 4) = 0;
    *((_QWORD *)v155 + 2) = 0;
    v183 = v155;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v183);
    v137 = v183;
    if (!v183)
      goto LABEL_74;
    v138 = *(_DWORD *)v183 - 1;
    if (*(_DWORD *)v183 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v183, v69, v70, v71, v72, v73, v74, v75);
      goto LABEL_74;
    }
    goto LABEL_71;
  }
  v130 = a1[2];
  if (!*(_BYTE *)(v130 + 48))
    *(_BYTE *)(v130 + 48) = *(_QWORD *)(v130 + 48);
  LODWORD(v183) = 5;
  v131 = v176;
  if (v176)
    *(_DWORD *)v176 += 2;
  v184 = v131;
  v132 = *(unsigned int *)(v130 + 36);
  if ((_DWORD)v132 != *(_DWORD *)(v130 + 32))
  {
    v164 = *(_QWORD *)(v130 + 24) + 16 * v132;
    *(_DWORD *)v164 = 5;
    *(_QWORD *)(v164 + 8) = v131;
    *(_DWORD *)(v130 + 36) = v132 + 1;
    goto LABEL_74;
  }
  v133 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v130 + 24, v132 + 1, (unint64_t)&v183);
  v134 = *(unsigned int *)(v130 + 36);
  v135 = *(_QWORD *)(v130 + 24) + 16 * v134;
  *(_DWORD *)v135 = *(_DWORD *)v133;
  v136 = *(_QWORD *)(v133 + 8);
  *(_QWORD *)(v133 + 8) = 0;
  *(_QWORD *)(v135 + 8) = v136;
  v137 = v184;
  *(_DWORD *)(v130 + 36) = v134 + 1;
  v184 = 0;
  if (v137)
  {
    v138 = *(_DWORD *)v137 - 2;
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
      goto LABEL_74;
    }
LABEL_71:
    *(_DWORD *)v137 = v138;
  }
LABEL_74:
  if (v177)
  {
    v85 = v176;
    v176 = 0;
    if (v85)
    {
      v86 = *(_DWORD *)v85 - 2;
      if (*(_DWORD *)v85 == 2)
      {
LABEL_68:
        WTF::StringImpl::~StringImpl(v85, v69, v70, v71, v72, v73, v74, v75);
        WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
        goto LABEL_78;
      }
      goto LABEL_77;
    }
  }
LABEL_78:
  v165 = v178;
  v178 = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 1)
      WTF::JSONImpl::Value::operator delete(v165, v69, v70, v71, v72, v73, v74, v75);
    else
      --*(_DWORD *)v165;
  }
  v166 = v179;
  v179 = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 1)
      WTF::JSONImpl::Value::operator delete(v166, v69, v70, v71, v72, v73, v74, v75);
    else
      --*(_DWORD *)v166;
  }
  if (v180)
  {
    if (*(_DWORD *)v180 == 1)
      WTF::JSONImpl::Value::operator delete(v180, v69, v70, v71, v72, v73, v74, v75);
    else
      --*(_DWORD *)v180;
  }
  v167 = v181;
  v181 = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
    {
      WTF::StringImpl::~StringImpl(v167, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
    }
    else
    {
      *(_DWORD *)v167 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::highlightNodeList(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF **v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  WTF *v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  int v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;
  WTF *v149;
  WTF *v150;
  WTF *v151;
  char v152;
  WTF *v153;
  WTF *v154;
  WTF *v155;
  WTF *v156;
  WTF *v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  WTF **v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "nodeIds";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v151 = (WTF *)v8;
  v157 = (WTF *)&off_1E3593C68;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asArray;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(&v156, v6, v7, &v151, 1, (uint64_t)&v157);
  v17 = v160;
  if (v160 == &v157)
  {
    v17 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xF00000002;
  *(_QWORD *)(v20 + 8) = "highlightConfig";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v151 = (WTF *)v20;
  v157 = (WTF *)&off_1E3593C20;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v155, v18, v19, &v151, 1, (uint64_t)&v157);
  v29 = v160;
  if (v160 == &v157)
  {
    v29 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x1100000002;
  *(_QWORD *)(v32 + 8) = "gridOverlayConfig";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v151 = (WTF *)v32;
  v157 = (WTF *)&off_1E3593C20;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v154, v30, v31, &v151, 0, (uint64_t)&v157);
  v41 = v160;
  if (v160 == &v157)
  {
    v41 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = a1[2];
  v43 = *a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x1100000002;
  *(_QWORD *)(v44 + 8) = "flexOverlayConfig";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v151 = (WTF *)v44;
  v157 = (WTF *)&off_1E3593C20;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v153, v42, v43, &v151, 0, (uint64_t)&v157);
  v53 = v160;
  if (v160 == &v157)
  {
    v53 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_27;
    v45 = 5;
  }
  (*((void (**)(void))*v53 + v45))();
LABEL_27:
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v54 = a1[2];
  if (*(_DWORD *)(v54 + 36))
  {
    v55 = WTF::fastCompactMalloc((WTF *)0x20);
    v63 = (WTF *)v55;
    *(_QWORD *)v55 = 0x4300000002;
    *(_QWORD *)(v55 + 8) = "Some arguments of method 'DOM.highlightNodeList' can't be processed";
    v64 = 4;
    *(_DWORD *)(v55 + 16) = 4;
    if (!*(_BYTE *)(v54 + 48))
    {
      *(_BYTE *)(v54 + 48) = *(_QWORD *)(v54 + 48);
      v64 = *(_DWORD *)v55 + 2;
    }
    LODWORD(v157) = 3;
    *(_DWORD *)v55 = v64;
    v158 = (WTF::StringImpl *)v55;
    v65 = *(unsigned int *)(v54 + 36);
    if ((_DWORD)v65 == *(_DWORD *)(v54 + 32))
    {
      v66 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v54 + 24, v65 + 1, (unint64_t)&v157);
      v67 = *(unsigned int *)(v54 + 36);
      v68 = *(_QWORD *)(v54 + 24) + 16 * v67;
      *(_DWORD *)v68 = *(_DWORD *)v66;
      v69 = *(_QWORD *)(v66 + 8);
      *(_QWORD *)(v66 + 8) = 0;
      *(_QWORD *)(v68 + 8) = v69;
      v70 = v158;
      *(_DWORD *)(v54 + 36) = v67 + 1;
      v158 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          WTF::StringImpl::~StringImpl(v70, v56, v57, v58, v59, v60, v61, v62);
          WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
    }
    else
    {
      v76 = *(_QWORD *)(v54 + 24) + 16 * v65;
      *(_DWORD *)v76 = 3;
      *(_QWORD *)(v76 + 8) = v55;
      *(_DWORD *)(v54 + 36) = v65 + 1;
    }
    if (*(_DWORD *)v63 != 2)
    {
      *(_DWORD *)v63 -= 2;
      goto LABEL_76;
    }
    v74 = v63;
    goto LABEL_66;
  }
  v71 = a1[3];
  if (v71)
  {
    v72 = v156;
    v156 = 0;
    v157 = v72;
    v151 = v155;
    v155 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF **, WTF **, WTF **, WTF **))(*(_QWORD *)v71 + 256))(v71, a2, &v157, &v151, &v154, &v153);
    v73 = v151;
    v151 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 1)
        WTF::JSONImpl::Value::operator delete(v73, v56, v57, v58, v59, v60, v61, v62);
      else
        --*(_DWORD *)v73;
    }
    v74 = v157;
    v157 = 0;
    if (v74)
    {
      v75 = *(_DWORD *)v74 - 1;
      if (*(_DWORD *)v74 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v74, v56, v57, v58, v59, v60, v61, v62);
        goto LABEL_76;
      }
LABEL_75:
      *(_DWORD *)v74 = v75;
      goto LABEL_76;
    }
    goto LABEL_76;
  }
  v109 = a1[4];
  v110 = v156;
  v156 = 0;
  v157 = v110;
  v150 = v155;
  v155 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t, WTF **, WTF **, WTF **, WTF **))(*(_QWORD *)v109 + 240))(&v151, v109, &v157, &v150, &v154, &v153);
  v111 = v150;
  v150 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v111;
  }
  v112 = v157;
  v157 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 1)
      WTF::JSONImpl::Value::operator delete(v112, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v112;
  }
  if (!v152)
  {
    v138 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v138 = 0x500000001;
    *((_QWORD *)v138 + 3) = 0;
    *((_QWORD *)v138 + 4) = 0;
    *((_QWORD *)v138 + 2) = 0;
    v157 = v138;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v157);
    v120 = v157;
    if (!v157)
      goto LABEL_72;
    v121 = *(_DWORD *)v157 - 1;
    if (*(_DWORD *)v157 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v157, v56, v57, v58, v59, v60, v61, v62);
      goto LABEL_72;
    }
    goto LABEL_69;
  }
  v113 = a1[2];
  if (!*(_BYTE *)(v113 + 48))
    *(_BYTE *)(v113 + 48) = *(_QWORD *)(v113 + 48);
  LODWORD(v157) = 5;
  v114 = v151;
  if (v151)
    *(_DWORD *)v151 += 2;
  v158 = v114;
  v115 = *(unsigned int *)(v113 + 36);
  if ((_DWORD)v115 != *(_DWORD *)(v113 + 32))
  {
    v147 = *(_QWORD *)(v113 + 24) + 16 * v115;
    *(_DWORD *)v147 = 5;
    *(_QWORD *)(v147 + 8) = v114;
    *(_DWORD *)(v113 + 36) = v115 + 1;
    goto LABEL_72;
  }
  v116 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v113 + 24, v115 + 1, (unint64_t)&v157);
  v117 = *(unsigned int *)(v113 + 36);
  v118 = *(_QWORD *)(v113 + 24) + 16 * v117;
  *(_DWORD *)v118 = *(_DWORD *)v116;
  v119 = *(_QWORD *)(v116 + 8);
  *(_QWORD *)(v116 + 8) = 0;
  *(_QWORD *)(v118 + 8) = v119;
  v120 = v158;
  *(_DWORD *)(v113 + 36) = v117 + 1;
  v158 = 0;
  if (v120)
  {
    v121 = *(_DWORD *)v120 - 2;
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
      goto LABEL_72;
    }
LABEL_69:
    *(_DWORD *)v120 = v121;
  }
LABEL_72:
  if (v152)
  {
    v74 = v151;
    v151 = 0;
    if (v74)
    {
      v75 = *(_DWORD *)v74 - 2;
      if (*(_DWORD *)v74 == 2)
      {
LABEL_66:
        WTF::StringImpl::~StringImpl(v74, v56, v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        goto LABEL_76;
      }
      goto LABEL_75;
    }
  }
LABEL_76:
  v148 = v153;
  v153 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 1)
      WTF::JSONImpl::Value::operator delete(v148, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v148;
  }
  v149 = v154;
  v154 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 1)
      WTF::JSONImpl::Value::operator delete(v149, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v149;
  }
  if (v155)
  {
    if (*(_DWORD *)v155 == 1)
      WTF::JSONImpl::Value::operator delete(v155, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v155;
  }
  if (v156)
  {
    if (*(_DWORD *)v156 == 1)
      WTF::JSONImpl::Value::operator delete(v156, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v156;
  }
}

void Inspector::DOMBackendDispatcher::hideHighlight(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 264))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 248))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DOMBackendDispatcher::highlightFrame(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  WTF *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  char v133;
  WTF *v134;
  WTF *v135;
  WTF::StringImpl *v136;
  WTF *v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  WTF **v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "frameId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v132 = (WTF::StringImpl *)v8;
  v137 = (WTF *)&off_1E3593B90;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v139 = 0;
  v140 = &v137;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v136, v6, v7, &v132, 1, (uint64_t)&v137);
  v17 = v140;
  if (v140 == &v137)
  {
    v17 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xC00000002;
  *(_QWORD *)(v20 + 8) = "contentColor";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v132 = (WTF::StringImpl *)v20;
  v137 = (WTF *)&off_1E3593C20;
  v140 = &v137;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v135, v18, v19, &v132, 0, (uint64_t)&v137);
  v29 = v140;
  if (v140 == &v137)
  {
    v29 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x1300000002;
  *(_QWORD *)(v32 + 8) = "contentOutlineColor";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v132 = (WTF::StringImpl *)v32;
  v137 = (WTF *)&off_1E3593C20;
  v140 = &v137;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v134, v30, v31, &v132, 0, (uint64_t)&v137);
  v41 = v140;
  if (v140 == &v137)
  {
    v41 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v42 + 36))
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    v51 = (WTF::StringImpl *)v43;
    *(_QWORD *)v43 = 0x4000000002;
    *(_QWORD *)(v43 + 8) = "Some arguments of method 'DOM.highlightFrame' can't be processed";
    v52 = 4;
    *(_DWORD *)(v43 + 16) = 4;
    if (!*(_BYTE *)(v42 + 48))
    {
      *(_BYTE *)(v42 + 48) = *(_QWORD *)(v42 + 48);
      v52 = *(_DWORD *)v43 + 2;
    }
    LODWORD(v137) = 3;
    *(_DWORD *)v43 = v52;
    v138 = (WTF::StringImpl *)v43;
    v53 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v42 + 32))
    {
      v54 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 24, v53 + 1, (unint64_t)&v137);
      v55 = *(unsigned int *)(v42 + 36);
      v56 = *(_QWORD *)(v42 + 24) + 16 * v55;
      *(_DWORD *)v56 = *(_DWORD *)v54;
      v57 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v56 + 8) = v57;
      v58 = v138;
      *(_DWORD *)(v42 + 36) = v55 + 1;
      v138 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v44, v45, v46, v47, v48, v49, v50);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      v60 = *(_QWORD *)(v42 + 24) + 16 * v53;
      *(_DWORD *)v60 = 3;
      *(_QWORD *)(v60 + 8) = v43;
      *(_DWORD *)(v42 + 36) = v53 + 1;
    }
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      goto LABEL_34;
    }
    v113 = v51;
    goto LABEL_60;
  }
  v59 = *(_QWORD *)(a1 + 24);
  if (v59)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF **, WTF **))(*(_QWORD *)v59 + 272))(v59, a2, &v136, &v135, &v134);
    goto LABEL_34;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF **, WTF **))(**(_QWORD **)(a1 + 32) + 256))(&v132, *(_QWORD *)(a1 + 32), &v136, &v135, &v134);
  if (!v133)
  {
    v122 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v122 = 0x500000001;
    *((_QWORD *)v122 + 3) = 0;
    *((_QWORD *)v122 + 4) = 0;
    *((_QWORD *)v122 + 2) = 0;
    v137 = v122;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v137);
    v103 = v137;
    if (!v137)
      goto LABEL_66;
    v104 = *(_DWORD *)v137 - 1;
    if (*(_DWORD *)v137 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v137, v44, v45, v46, v47, v48, v49, v50);
      goto LABEL_66;
    }
    goto LABEL_63;
  }
  v96 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v96 + 48))
    *(_BYTE *)(v96 + 48) = *(_QWORD *)(v96 + 48);
  LODWORD(v137) = 5;
  v97 = v132;
  if (v132)
    *(_DWORD *)v132 += 2;
  v138 = v97;
  v98 = *(unsigned int *)(v96 + 36);
  if ((_DWORD)v98 != *(_DWORD *)(v96 + 32))
  {
    v131 = *(_QWORD *)(v96 + 24) + 16 * v98;
    *(_DWORD *)v131 = 5;
    *(_QWORD *)(v131 + 8) = v97;
    *(_DWORD *)(v96 + 36) = v98 + 1;
    goto LABEL_66;
  }
  v99 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96 + 24, v98 + 1, (unint64_t)&v137);
  v100 = *(unsigned int *)(v96 + 36);
  v101 = *(_QWORD *)(v96 + 24) + 16 * v100;
  *(_DWORD *)v101 = *(_DWORD *)v99;
  v102 = *(_QWORD *)(v99 + 8);
  *(_QWORD *)(v99 + 8) = 0;
  *(_QWORD *)(v101 + 8) = v102;
  v103 = v138;
  *(_DWORD *)(v96 + 36) = v100 + 1;
  v138 = 0;
  if (v103)
  {
    v104 = *(_DWORD *)v103 - 2;
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
      goto LABEL_66;
    }
LABEL_63:
    *(_DWORD *)v103 = v104;
  }
LABEL_66:
  if (v133)
  {
    v113 = v132;
    v132 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
      {
LABEL_60:
        WTF::StringImpl::~StringImpl(v113, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
        goto LABEL_34;
      }
      *(_DWORD *)v113 -= 2;
    }
  }
LABEL_34:
  v61 = v134;
  v134 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
      WTF::JSONImpl::Value::operator delete(v61, v44, v45, v46, v47, v48, v49, v50);
    else
      --*(_DWORD *)v61;
  }
  v62 = v135;
  v135 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 1)
      WTF::JSONImpl::Value::operator delete(v62, v44, v45, v46, v47, v48, v49, v50);
    else
      --*(_DWORD *)v62;
  }
  v63 = v136;
  v136 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::showGridOverlay(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  char v108;
  WTF *v109;
  WTF *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF **v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v107 = (WTF::StringImpl *)v8;
  v110 = (WTF *)&off_1E3593B00;
  v111 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v112 = 0;
  v113 = &v110;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v107, 1, (uint64_t)&v110);
  v18 = v113;
  if (v113 == &v110)
  {
    v18 = &v110;
  }
  else
  {
    if (!v113)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = a1[2];
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x1100000002;
  *(_QWORD *)(v21 + 8) = "gridOverlayConfig";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v107 = (WTF::StringImpl *)v21;
  v110 = (WTF *)&off_1E3593C20;
  v113 = &v110;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v109, v19, v20, &v107, 1, (uint64_t)&v110);
  v30 = v113;
  if (v113 == &v110)
  {
    v30 = &v110;
  }
  else
  {
    if (!v113)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = a1[2];
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4100000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.showGridOverlay' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v110) = 3;
    *(_DWORD *)v32 = v41;
    v111 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v110);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v111;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v111 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v52 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v52 = 3;
      *(_QWORD *)(v52 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_56;
    }
    v50 = v40;
    goto LABEL_46;
  }
  v48 = a1[3];
  if (v48)
  {
    if (BYTE4(v17))
    {
      v49 = v109;
      v109 = 0;
      v110 = v49;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v48 + 280))(v48, a2, v17, &v110);
      v50 = v110;
      v110 = 0;
      if (!v50)
        goto LABEL_56;
      v51 = *(_DWORD *)v50 - 1;
      if (*(_DWORD *)v50 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v50, v33, v34, v35, v36, v37, v38, v39);
        goto LABEL_56;
      }
LABEL_55:
      *(_DWORD *)v50 = v51;
      goto LABEL_56;
    }
LABEL_63:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_63;
  v69 = a1[4];
  v70 = v109;
  v109 = 0;
  v110 = v70;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF **))(*(_QWORD *)v69 + 264))(&v107, v69, v17, &v110);
  v71 = v110;
  v110 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v71;
  }
  if (!v108)
  {
    v97 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v97 = 0x500000001;
    *((_QWORD *)v97 + 3) = 0;
    *((_QWORD *)v97 + 4) = 0;
    *((_QWORD *)v97 + 2) = 0;
    v110 = v97;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v110);
    v79 = v110;
    if (!v110)
      goto LABEL_52;
    v80 = *(_DWORD *)v110 - 1;
    if (*(_DWORD *)v110 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v110, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v72 = a1[2];
  if (!*(_BYTE *)(v72 + 48))
    *(_BYTE *)(v72 + 48) = *(_QWORD *)(v72 + 48);
  LODWORD(v110) = 5;
  v73 = v107;
  if (v107)
    *(_DWORD *)v107 += 2;
  v111 = v73;
  v74 = *(unsigned int *)(v72 + 36);
  if ((_DWORD)v74 != *(_DWORD *)(v72 + 32))
  {
    v106 = *(_QWORD *)(v72 + 24) + 16 * v74;
    *(_DWORD *)v106 = 5;
    *(_QWORD *)(v106 + 8) = v73;
    *(_DWORD *)(v72 + 36) = v74 + 1;
    goto LABEL_52;
  }
  v75 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72 + 24, v74 + 1, (unint64_t)&v110);
  v76 = *(unsigned int *)(v72 + 36);
  v77 = *(_QWORD *)(v72 + 24) + 16 * v76;
  *(_DWORD *)v77 = *(_DWORD *)v75;
  v78 = *(_QWORD *)(v75 + 8);
  *(_QWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v77 + 8) = v78;
  v79 = v111;
  *(_DWORD *)(v72 + 36) = v76 + 1;
  v111 = 0;
  if (v79)
  {
    v80 = *(_DWORD *)v79 - 2;
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v79 = v80;
  }
LABEL_52:
  if (v108)
  {
    v50 = v107;
    v107 = 0;
    if (v50)
    {
      v51 = *(_DWORD *)v50 - 2;
      if (*(_DWORD *)v50 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
        goto LABEL_56;
      }
      goto LABEL_55;
    }
  }
LABEL_56:
  if (v109)
  {
    if (*(_DWORD *)v109 == 1)
      WTF::JSONImpl::Value::operator delete(v109, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v109;
  }
}

void Inspector::DOMBackendDispatcher::hideGridOverlay(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  uint64_t v83;
  WTF *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF **v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v84 = (WTF *)&off_1E3593B00;
  v85 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v86 = 0;
  v87 = &v84;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 0, (uint64_t)&v84);
  v17 = v87;
  if (v87 == &v84)
  {
    v17 = &v84;
  }
  else
  {
    if (!v87)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  v83 = v16;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4100000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.hideGridOverlay' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v84) = 3;
    *(_DWORD *)v19 = v28;
    v85 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v84);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v85;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v85 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_32:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v35 + 288))(v35, a2, &v83);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 272))(&v81, *(_QWORD *)(a1 + 32), &v83);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v84 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v84);
    v52 = v84;
    if (!v84)
      goto LABEL_38;
    v53 = *(_DWORD *)v84 - 1;
    if (*(_DWORD *)v84 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v84, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v84) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v85 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_38;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v84);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v85;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v85 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_38;
    }
LABEL_35:
    *(_DWORD *)v52 = v53;
  }
LABEL_38:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_32;
    }
  }
}

void Inspector::DOMBackendDispatcher::showFlexOverlay(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  char v108;
  WTF *v109;
  WTF *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF **v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v107 = (WTF::StringImpl *)v8;
  v110 = (WTF *)&off_1E3593B00;
  v111 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v112 = 0;
  v113 = &v110;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v107, 1, (uint64_t)&v110);
  v18 = v113;
  if (v113 == &v110)
  {
    v18 = &v110;
  }
  else
  {
    if (!v113)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = a1[2];
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x1100000002;
  *(_QWORD *)(v21 + 8) = "flexOverlayConfig";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v107 = (WTF::StringImpl *)v21;
  v110 = (WTF *)&off_1E3593C20;
  v113 = &v110;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v109, v19, v20, &v107, 1, (uint64_t)&v110);
  v30 = v113;
  if (v113 == &v110)
  {
    v30 = &v110;
  }
  else
  {
    if (!v113)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = a1[2];
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4100000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.showFlexOverlay' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v110) = 3;
    *(_DWORD *)v32 = v41;
    v111 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v110);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v111;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v111 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v52 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v52 = 3;
      *(_QWORD *)(v52 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_56;
    }
    v50 = v40;
    goto LABEL_46;
  }
  v48 = a1[3];
  if (v48)
  {
    if (BYTE4(v17))
    {
      v49 = v109;
      v109 = 0;
      v110 = v49;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v48 + 296))(v48, a2, v17, &v110);
      v50 = v110;
      v110 = 0;
      if (!v50)
        goto LABEL_56;
      v51 = *(_DWORD *)v50 - 1;
      if (*(_DWORD *)v50 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v50, v33, v34, v35, v36, v37, v38, v39);
        goto LABEL_56;
      }
LABEL_55:
      *(_DWORD *)v50 = v51;
      goto LABEL_56;
    }
LABEL_63:
    __break(1u);
  }
  if (!BYTE4(v17))
    goto LABEL_63;
  v69 = a1[4];
  v70 = v109;
  v109 = 0;
  v110 = v70;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF **))(*(_QWORD *)v69 + 280))(&v107, v69, v17, &v110);
  v71 = v110;
  v110 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v71;
  }
  if (!v108)
  {
    v97 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v97 = 0x500000001;
    *((_QWORD *)v97 + 3) = 0;
    *((_QWORD *)v97 + 4) = 0;
    *((_QWORD *)v97 + 2) = 0;
    v110 = v97;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v110);
    v79 = v110;
    if (!v110)
      goto LABEL_52;
    v80 = *(_DWORD *)v110 - 1;
    if (*(_DWORD *)v110 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v110, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v72 = a1[2];
  if (!*(_BYTE *)(v72 + 48))
    *(_BYTE *)(v72 + 48) = *(_QWORD *)(v72 + 48);
  LODWORD(v110) = 5;
  v73 = v107;
  if (v107)
    *(_DWORD *)v107 += 2;
  v111 = v73;
  v74 = *(unsigned int *)(v72 + 36);
  if ((_DWORD)v74 != *(_DWORD *)(v72 + 32))
  {
    v106 = *(_QWORD *)(v72 + 24) + 16 * v74;
    *(_DWORD *)v106 = 5;
    *(_QWORD *)(v106 + 8) = v73;
    *(_DWORD *)(v72 + 36) = v74 + 1;
    goto LABEL_52;
  }
  v75 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72 + 24, v74 + 1, (unint64_t)&v110);
  v76 = *(unsigned int *)(v72 + 36);
  v77 = *(_QWORD *)(v72 + 24) + 16 * v76;
  *(_DWORD *)v77 = *(_DWORD *)v75;
  v78 = *(_QWORD *)(v75 + 8);
  *(_QWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v77 + 8) = v78;
  v79 = v111;
  *(_DWORD *)(v72 + 36) = v76 + 1;
  v111 = 0;
  if (v79)
  {
    v80 = *(_DWORD *)v79 - 2;
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v79 = v80;
  }
LABEL_52:
  if (v108)
  {
    v50 = v107;
    v107 = 0;
    if (v50)
    {
      v51 = *(_DWORD *)v50 - 2;
      if (*(_DWORD *)v50 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
        goto LABEL_56;
      }
      goto LABEL_55;
    }
  }
LABEL_56:
  if (v109)
  {
    if (*(_DWORD *)v109 == 1)
      WTF::JSONImpl::Value::operator delete(v109, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v109;
  }
}

void Inspector::DOMBackendDispatcher::hideFlexOverlay(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  uint64_t v83;
  WTF *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF **v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v84 = (WTF *)&off_1E3593B00;
  v85 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v86 = 0;
  v87 = &v84;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 0, (uint64_t)&v84);
  v17 = v87;
  if (v87 == &v84)
  {
    v17 = &v84;
  }
  else
  {
    if (!v87)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  v83 = v16;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4100000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.hideFlexOverlay' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v84) = 3;
    *(_DWORD *)v19 = v28;
    v85 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v84);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v85;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v85 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_32:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v35 + 304))(v35, a2, &v83);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 288))(&v81, *(_QWORD *)(a1 + 32), &v83);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v84 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v84);
    v52 = v84;
    if (!v84)
      goto LABEL_38;
    v53 = *(_DWORD *)v84 - 1;
    if (*(_DWORD *)v84 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v84, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v84) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v85 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_38;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v84);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v85;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v85 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_38;
    }
LABEL_35:
    *(_DWORD *)v52 = v53;
  }
LABEL_38:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_32;
    }
  }
}

void Inspector::DOMBackendDispatcher::pushNodeByPathToFrontend(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF *v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD **v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  WTF *v126;
  uint64_t (**v127)();
  WTF::StringImpl *v128;
  uint64_t v129;
  uint64_t (***v130)();
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x400000002;
  *(_QWORD *)(v7 + 8) = "path";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v127 = &off_1E3593B90;
  v128 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v129 = 0;
  v130 = &v127;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v127);
  v16 = v130;
  if (v130 == &v127)
  {
    v16 = &v127;
  }
  else
  {
    if (!v130)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4A00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'DOM.pushNodeByPathToFrontend' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v127) = 3;
    *(_DWORD *)v18 = v27;
    v128 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v127);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v128;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v128 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 296))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v120 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::resolveNode(v120);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v127) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v128 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v127);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v128;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v128 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v108 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v108 = 5;
      *(_QWORD *)(v108 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = (int)v123;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0x600000002;
      *(_QWORD *)(v80 + 8) = "nodeId";
      *(_DWORD *)(v80 + 16) = 4;
      v121 = (WTF::StringImpl *)v80;
      v81 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v81 = 0x300000001;
      v81[1] = (double)v78;
      v126 = (WTF *)v81;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v126, v82, v83, v84, v85, v86, (uint64_t)&v127);
      if ((_BYTE)v129)
      {
        v94 = (uint64_t *)(v79 + 24);
        v95 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v95 == *(_DWORD *)(v79 + 32))
        {
          v117 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&v121);
          v95 = *(unsigned int *)(v79 + 36);
          v118 = *(_QWORD *)(v79 + 24);
          v119 = *v117;
          if (*v117)
            *v119 += 2;
          *(_QWORD *)(v118 + 8 * v95) = v119;
        }
        else
        {
          v96 = *v94;
          v97 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v96 + 8 * v95) = v97;
        }
        *(_DWORD *)(v79 + 36) = v95 + 1;
      }
      v98 = v126;
      v126 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 1)
          WTF::JSONImpl::Value::operator delete(v98, v87, v88, v89, v90, v91, v92, v93);
        else
          --*(_DWORD *)v98;
      }
      v99 = v121;
      v121 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, v87, v88, v89, v90, v91, v92, v93);
          WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938A8[v124])(&v127, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 312))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::resolveNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD **v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  WTF *v142;
  WTF::StringImpl *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  uint64_t (**v148)();
  WTF::StringImpl *v149;
  uint64_t v150;
  uint64_t (***v151)();
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v145 = (WTF::StringImpl *)v8;
  v148 = &off_1E3593B00;
  v149 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v150 = 0;
  v151 = &v148;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v145, 1, (uint64_t)&v148);
  v18 = v151;
  if (v151 == &v148)
  {
    v18 = &v148;
  }
  else
  {
    if (!v151)
      goto LABEL_6;
    v9 = 5;
  }
  (*v18)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0xB00000002;
  *(_QWORD *)(v21 + 8) = "objectGroup";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v145 = (WTF::StringImpl *)v21;
  v148 = &off_1E3593B90;
  v149 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v150 = 0;
  v151 = &v148;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v147, v19, v20, &v145, 0, (uint64_t)&v148);
  v30 = v151;
  if (v151 == &v148)
  {
    v30 = &v148;
  }
  else
  {
    if (!v151)
      goto LABEL_13;
    v22 = 5;
  }
  (*v30)[v22]();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x3D00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOM.resolveNode' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v148) = 3;
    *(_DWORD *)v32 = v41;
    v149 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v148);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v149;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v149 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
    goto LABEL_28;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (!v48)
  {
    if (!BYTE4(v17))
LABEL_72:
      __break(1u);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                                + 304))(&v145, *(_QWORD *)(a1 + 32), v17, &v147);
    if (v146)
    {
      if (v146 != 1)
      {
        v141 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMBackendDispatcher::getAttributes(v141);
        return;
      }
      v75 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v75 + 48))
        *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
      LODWORD(v148) = 5;
      v76 = v145;
      if (v145)
        *(_DWORD *)v145 += 2;
      v149 = v76;
      v77 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v77 == *(_DWORD *)(v75 + 32))
      {
        v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v148);
        v79 = *(unsigned int *)(v75 + 36);
        v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
        *(_DWORD *)v80 = *(_DWORD *)v78;
        v81 = *(_QWORD *)(v78 + 8);
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v80 + 8) = v81;
        v82 = v149;
        *(_DWORD *)(v75 + 36) = v79 + 1;
        v149 = 0;
        if (!v82)
          goto LABEL_64;
        v83 = *(_DWORD *)v82 - 2;
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          goto LABEL_64;
        }
        goto LABEL_61;
      }
      v129 = *(_QWORD *)(v75 + 24) + 16 * v77;
      *(_DWORD *)v129 = 5;
      *(_QWORD *)(v129 + 8) = v76;
      *(_DWORD *)(v75 + 36) = v77 + 1;
    }
    else
    {
      v100 = v145;
      v145 = 0;
      v101 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v101 = 0x500000001;
      *(_QWORD *)(v101 + 24) = 0;
      *(_QWORD *)(v101 + 32) = 0;
      *(_QWORD *)(v101 + 16) = 0;
      v144 = (WTF *)v101;
      v102 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v102 = 0x600000002;
      *(_QWORD *)(v102 + 8) = "object";
      *(_DWORD *)(v102 + 16) = 4;
      v142 = v100;
      v143 = (WTF::StringImpl *)v102;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v101 + 16), (WTF::AtomStringImpl *)&v143, (const WTF::StringImpl *)&v142, v103, v104, v105, v106, v107, (uint64_t)&v148);
      if ((_BYTE)v150)
      {
        v115 = (uint64_t *)(v101 + 24);
        v116 = *(unsigned int *)(v101 + 36);
        if ((_DWORD)v116 == *(_DWORD *)(v101 + 32))
        {
          v138 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v116 + 1, (unint64_t)&v143);
          v116 = *(unsigned int *)(v101 + 36);
          v139 = *(_QWORD *)(v101 + 24);
          v140 = *v138;
          if (*v138)
            *v140 += 2;
          *(_QWORD *)(v139 + 8 * v116) = v140;
        }
        else
        {
          v117 = *v115;
          v118 = v143;
          if (v143)
            *(_DWORD *)v143 += 2;
          *(_QWORD *)(v117 + 8 * v116) = v118;
        }
        *(_DWORD *)(v101 + 36) = v116 + 1;
      }
      v119 = v142;
      v142 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 1)
          WTF::JSONImpl::Value::operator delete(v119, v108, v109, v110, v111, v112, v113, v114);
        else
          --*(_DWORD *)v119;
      }
      v120 = v143;
      v143 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
        {
          WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v120 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v144);
      v82 = v144;
      if (!v144)
        goto LABEL_64;
      v83 = *(_DWORD *)v144 - 1;
      if (*(_DWORD *)v144 != 1)
      {
LABEL_61:
        *(_DWORD *)v82 = v83;
        goto LABEL_64;
      }
      WTF::JSONImpl::Value::operator delete(v144, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_64:
    if (v146 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937A8[v146])(&v148, &v145);
    goto LABEL_28;
  }
  if (!BYTE4(v17))
    goto LABEL_72;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 320))(v48, a2, v17, &v147);
LABEL_28:
  v50 = v147;
  v147 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMBackendDispatcher::getAttributes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t (**v131)();
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v129 = (WTF::StringImpl *)v7;
  v131 = &off_1E3593B00;
  v132 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v133 = 0;
  v134 = &v131;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v129, 1, (uint64_t)&v131);
  v17 = v134;
  if (v134 == &v131)
  {
    v17 = &v131;
  }
  else
  {
    if (!v134)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3F00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.getAttributes' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v131) = 3;
    *(_DWORD *)v19 = v28;
    v132 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v131);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v132;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v132 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 328))(v35, a2, v16);
      return;
    }
LABEL_60:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_60;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 312))(&v129, *(_QWORD *)(a1 + 32), v16);
  if (v130)
  {
    if (v130 != 1)
    {
      v125 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::moveTo(v125);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v131) = 5;
    v46 = v129;
    if (v129)
      *(_DWORD *)v129 += 2;
    v132 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
    {
      v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v131);
      v56 = *(unsigned int *)(v45 + 36);
      v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v132;
      *(_DWORD *)(v45 + 36) = v56 + 1;
      v132 = 0;
      if (!v59)
        goto LABEL_52;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    v113 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v113 = 5;
    *(_QWORD *)(v113 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
  }
  else
  {
    v77 = v129;
    v129 = 0;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 24) = 0;
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 16) = 0;
    v128 = (WTF *)v78;
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0xA00000002;
    *(_QWORD *)(v79 + 8) = "attributes";
    *(_DWORD *)(v79 + 16) = 4;
    v126 = v77;
    v127 = (WTF::StringImpl *)v79;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v78 + 16), &v127, (const WTF::StringImpl *)&v126, v80, v81, v82, v83, v84, (uint64_t)&v131);
    if ((_BYTE)v133)
    {
      v92 = (uint64_t *)(v78 + 24);
      v93 = *(unsigned int *)(v78 + 36);
      if ((_DWORD)v93 == *(_DWORD *)(v78 + 32))
      {
        v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v127);
        v93 = *(unsigned int *)(v78 + 36);
        v123 = *(_QWORD *)(v78 + 24);
        v124 = *v122;
        if (*v122)
          *v124 += 2;
        *(_QWORD *)(v123 + 8 * v93) = v124;
      }
      else
      {
        v94 = *v92;
        v95 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v94 + 8 * v93) = v95;
      }
      *(_DWORD *)(v78 + 36) = v93 + 1;
    }
    v96 = v126;
    v126 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 1)
        WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
      else
        --*(_DWORD *)v96;
    }
    v97 = v127;
    v127 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v128);
    v59 = v128;
    if (!v128)
      goto LABEL_52;
    v60 = *(_DWORD *)v128 - 1;
    if (*(_DWORD *)v128 != 1)
    {
LABEL_49:
      *(_DWORD *)v59 = v60;
      goto LABEL_52;
    }
    WTF::JSONImpl::Value::operator delete(v128, v98, v99, v100, v101, v102, v103, v104);
  }
LABEL_52:
  if (v130 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593898[v130])(&v131, &v129);
}

void Inspector::DOMBackendDispatcher::moveTo(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  unint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  double *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::AtomStringImpl *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF *v139;
  WTF::StringImpl *v140;
  WTF::AtomStringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD **v165;
  uint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  WTF::StringImpl *v170;
  WTF *v171;
  WTF::StringImpl *v172;
  int v173;
  uint64_t v174;
  WTF *v175;
  uint64_t (**v176)();
  WTF::StringImpl *v177;
  uint64_t v178;
  uint64_t (***v179)();
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v172 = (WTF::StringImpl *)v7;
  v176 = &off_1E3593B00;
  v177 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v178 = 0;
  v179 = &v176;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v172, 1, (uint64_t)&v176);
  v17 = v179;
  if (v179 == &v176)
  {
    v17 = &v176;
  }
  else
  {
    if (!v179)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xC00000002;
  *(_QWORD *)(v20 + 8) = "targetNodeId";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v172 = (WTF::StringImpl *)v20;
  v176 = &off_1E3593B00;
  v177 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v178 = 0;
  v179 = &v176;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v18, v19, &v172, 1, (uint64_t)&v176);
  v30 = v179;
  if (v179 == &v176)
  {
    v30 = &v176;
  }
  else
  {
    if (!v179)
      goto LABEL_13;
    v21 = 5;
  }
  (*v30)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = *a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x1200000002;
  *(_QWORD *)(v33 + 8) = "insertBeforeNodeId";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v172 = (WTF::StringImpl *)v33;
  v176 = &off_1E3593B00;
  v177 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v178 = 0;
  v179 = &v176;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v31, v32, &v172, 0, (uint64_t)&v176);
  v43 = v179;
  if (v179 == &v176)
  {
    v43 = &v176;
  }
  else
  {
    if (!v179)
      goto LABEL_20;
    v34 = 5;
  }
  (*v43)[v34]();
LABEL_20:
  v174 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v44 + 36))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    v53 = (WTF::StringImpl *)v45;
    *(_QWORD *)v45 = 0x3800000002;
    *(_QWORD *)(v45 + 8) = "Some arguments of method 'DOM.moveTo' can't be processed";
    v54 = 4;
    *(_DWORD *)(v45 + 16) = 4;
    if (!*(_BYTE *)(v44 + 48))
    {
      *(_BYTE *)(v44 + 48) = *(_QWORD *)(v44 + 48);
      v54 = *(_DWORD *)v45 + 2;
    }
    LODWORD(v176) = 3;
    *(_DWORD *)v45 = v54;
    v177 = (WTF::StringImpl *)v45;
    v55 = *(unsigned int *)(v44 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v44 + 32))
    {
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44 + 24, v55 + 1, (unint64_t)&v176);
      v57 = *(unsigned int *)(v44 + 36);
      v58 = *(_QWORD *)(v44 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v177;
      *(_DWORD *)(v44 + 36) = v57 + 1;
      v177 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    else
    {
      v62 = *(_QWORD *)(v44 + 24) + 16 * v55;
      *(_DWORD *)v62 = 3;
      *(_QWORD *)(v62 + 8) = v45;
      *(_DWORD *)(v44 + 36) = v55 + 1;
    }
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
    return;
  }
  v61 = *(_QWORD *)(a1 + 24);
  if (v61)
  {
    if (BYTE4(v16) && BYTE4(v29))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v61 + 336))(v61, a2, v16, v29, &v174);
      return;
    }
LABEL_78:
    __break(1u);
  }
  if (!BYTE4(v16) || !BYTE4(v29))
    goto LABEL_78;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 32)
                                                                                              + 320))(&v172, *(_QWORD *)(a1 + 32), v16, v29, &v174);
  if (v173)
  {
    if (v173 != 1)
    {
      v168 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMBackendDispatcher::undo(v168);
      return;
    }
    v87 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v87 + 48))
      *(_BYTE *)(v87 + 48) = *(_QWORD *)(v87 + 48);
    LODWORD(v176) = 5;
    v88 = v172;
    if (v172)
      *(_DWORD *)v172 += 2;
    v177 = v88;
    v89 = *(unsigned int *)(v87 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v87 + 32))
    {
      v90 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v87 + 24, v89 + 1, (unint64_t)&v176);
      v98 = *(unsigned int *)(v87 + 36);
      v99 = *(_QWORD *)(v87 + 24) + 16 * v98;
      *(_DWORD *)v99 = *(_DWORD *)v90;
      v100 = *(_QWORD *)(v90 + 8);
      *(_QWORD *)(v90 + 8) = 0;
      *(_QWORD *)(v99 + 8) = v100;
      v101 = v177;
      *(_DWORD *)(v87 + 36) = v98 + 1;
      v177 = 0;
      if (!v101)
        goto LABEL_70;
      v102 = *(_DWORD *)v101 - 2;
      if (*(_DWORD *)v101 == 2)
      {
        WTF::StringImpl::~StringImpl(v101, v91, v92, v93, v94, v95, v96, v97);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        goto LABEL_70;
      }
      goto LABEL_67;
    }
    v156 = *(_QWORD *)(v87 + 24) + 16 * v89;
    *(_DWORD *)v156 = 5;
    *(_QWORD *)(v156 + 8) = v88;
    *(_DWORD *)(v87 + 36) = v89 + 1;
  }
  else
  {
    v119 = (int)v172;
    v120 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v120 = 0x500000001;
    *(_QWORD *)(v120 + 24) = 0;
    *(_QWORD *)(v120 + 32) = 0;
    *(_QWORD *)(v120 + 16) = 0;
    v171 = (WTF *)v120;
    v121 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v121 = 0x600000002;
    *(_QWORD *)(v121 + 8) = "nodeId";
    *(_DWORD *)(v121 + 16) = 4;
    v170 = (WTF::StringImpl *)v121;
    v122 = (double *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v122 = 0x300000001;
    v122[1] = (double)v119;
    v175 = (WTF *)v122;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v120 + 16), (WTF::AtomStringImpl *)&v170, (const WTF::StringImpl *)&v175, v123, v124, v125, v126, v127, (uint64_t)&v176);
    if ((_BYTE)v178)
    {
      v135 = (uint64_t *)(v120 + 24);
      v136 = *(unsigned int *)(v120 + 36);
      if ((_DWORD)v136 == *(_DWORD *)(v120 + 32))
      {
        v165 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v135, v136 + 1, (unint64_t)&v170);
        v136 = *(unsigned int *)(v120 + 36);
        v166 = *(_QWORD *)(v120 + 24);
        v167 = *v165;
        if (*v165)
          *v167 += 2;
        *(_QWORD *)(v166 + 8 * v136) = v167;
      }
      else
      {
        v137 = *v135;
        v138 = v170;
        if (v170)
          *(_DWORD *)v170 += 2;
        *(_QWORD *)(v137 + 8 * v136) = v138;
      }
      *(_DWORD *)(v120 + 36) = v136 + 1;
    }
    v139 = v175;
    v175 = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 1)
        WTF::JSONImpl::Value::operator delete(v139, v128, v129, v130, v131, v132, v133, v134);
      else
        --*(_DWORD *)v139;
    }
    v140 = v170;
    v170 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
      {
        WTF::StringImpl::~StringImpl(v140, v128, v129, v130, v131, v132, v133, v134);
        WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
      }
      else
      {
        *(_DWORD *)v140 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v171);
    v101 = v171;
    if (!v171)
      goto LABEL_70;
    v102 = *(_DWORD *)v171 - 1;
    if (*(_DWORD *)v171 != 1)
    {
LABEL_67:
      *(_DWORD *)v101 = v102;
      goto LABEL_70;
    }
    WTF::JSONImpl::Value::operator delete(v171, v141, v142, v143, v144, v145, v146, v147);
  }
LABEL_70:
  if (v173 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35938A8[v173])(&v176, &v172);
}

void Inspector::DOMBackendDispatcher::undo(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 344))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 328))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DOMBackendDispatcher::redo(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 352))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 336))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DOMBackendDispatcher::markUndoableState(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 360))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 344))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DOMBackendDispatcher::focus(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&off_1E3593B00;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3700000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.focus' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 368))(v35, a2, v16);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 352))(&v81, *(_QWORD *)(a1 + 32), v16);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DOMBackendDispatcher::setInspectedNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&off_1E3593B00;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4200000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.setInspectedNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 376))(v35, a2, v16);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 360))(&v81, *(_QWORD *)(a1 + 32), v16);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DOMBackendDispatcher::setAllowEditingUserAgentShadowTrees(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x500000002;
  *(_QWORD *)(v7 + 8) = "allow";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x5500000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.setAllowEditingUserAgentShadowTrees' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 384))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 368))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DOMBackendDispatcher::getMediaStats(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  Inspector::DOMDebuggerBackendDispatcher *v125;
  Inspector::BackendDispatcher *v126;
  Inspector::DOMDebuggerBackendDispatcherHandler *v127;
  WTF *v128;
  WTF::StringImpl *v129;
  WTF *v130;
  WTF::StringImpl *v131;
  int v132;
  uint64_t (**v133)();
  WTF::StringImpl *v134;
  uint64_t v135;
  uint64_t (***v136)();
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v131 = (WTF::StringImpl *)v7;
  v133 = &off_1E3593B00;
  v134 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v135 = 0;
  v136 = &v133;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v131, 1, (uint64_t)&v133);
  v17 = v136;
  if (v136 == &v133)
  {
    v17 = &v133;
  }
  else
  {
    if (!v136)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3F00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'DOM.getMediaStats' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v133) = 3;
    *(_DWORD *)v19 = v28;
    v134 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v133);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v134;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v134 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 392))(v35, a2, v16);
      return;
    }
LABEL_60:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_60;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 376))(&v131, *(_QWORD *)(a1 + 32), v16);
  if (v132)
  {
    if (v132 != 1)
    {
      v125 = (Inspector::DOMDebuggerBackendDispatcher *)std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::DOMDebuggerBackendDispatcher::create(v125, v126, v127);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v133) = 5;
    v46 = v131;
    if (v131)
      *(_DWORD *)v131 += 2;
    v134 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
    {
      v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v133);
      v56 = *(unsigned int *)(v45 + 36);
      v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v134;
      *(_DWORD *)(v45 + 36) = v56 + 1;
      v134 = 0;
      if (!v59)
        goto LABEL_52;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    v113 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v113 = 5;
    *(_QWORD *)(v113 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
  }
  else
  {
    v77 = v131;
    v131 = 0;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 24) = 0;
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 16) = 0;
    v130 = (WTF *)v78;
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0xA00000002;
    *(_QWORD *)(v79 + 8) = "mediaStats";
    *(_DWORD *)(v79 + 16) = 4;
    v128 = v77;
    v129 = (WTF::StringImpl *)v79;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v78 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v80, v81, v82, v83, v84, (uint64_t)&v133);
    if ((_BYTE)v135)
    {
      v92 = (uint64_t *)(v78 + 24);
      v93 = *(unsigned int *)(v78 + 36);
      if ((_DWORD)v93 == *(_DWORD *)(v78 + 32))
      {
        v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v129);
        v93 = *(unsigned int *)(v78 + 36);
        v123 = *(_QWORD *)(v78 + 24);
        v124 = *v122;
        if (*v122)
          *v124 += 2;
        *(_QWORD *)(v123 + 8 * v93) = v124;
      }
      else
      {
        v94 = *v92;
        v95 = v129;
        if (v129)
          *(_DWORD *)v129 += 2;
        *(_QWORD *)(v94 + 8 * v93) = v95;
      }
      *(_DWORD *)(v78 + 36) = v93 + 1;
    }
    v96 = v128;
    v128 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 1)
        WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
      else
        --*(_DWORD *)v96;
    }
    v97 = v129;
    v129 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v130);
    v59 = v130;
    if (!v130)
      goto LABEL_52;
    v60 = *(_DWORD *)v130 - 1;
    if (*(_DWORD *)v130 != 1)
    {
LABEL_49:
      *(_DWORD *)v59 = v60;
      goto LABEL_52;
    }
    WTF::JSONImpl::Value::operator delete(v130, v98, v99, v100, v101, v102, v103, v104);
  }
LABEL_52:
  if (v132 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593938[v132])(&v133, &v131);
}

void Inspector::DOMDebuggerBackendDispatcher::create(Inspector::DOMDebuggerBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35915F0;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xB00000002;
  *(_QWORD *)(v8 + 8) = "DOMDebugger";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::DOMDebuggerBackendDispatcher *Inspector::DOMDebuggerBackendDispatcher::DOMDebuggerBackendDispatcher(Inspector::DOMDebuggerBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::DOMDebuggerBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DOMDebuggerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35915F0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xB00000002;
  *(_QWORD *)(v5 + 8) = "DOMDebugger";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DOMDebuggerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35915F0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xB00000002;
  *(_QWORD *)(v5 + 8) = "DOMDebugger";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::DOMDebuggerBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  void (*v27)(_QWORD *, uint64_t, WTF **);
  uint64_t v28;
  _QWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl **v100;
  const WTF::StringImpl *v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  int i;
  unsigned int v106;
  WTF *v107;
  WTF::StringImpl *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  void (*v174)(uint64_t, uint64_t, uint64_t *);
  uint64_t v175;
  WTF::StringImpl *v176;
  void (*v177)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v178;
  WTF::StringImpl *v179;
  void (*v180)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v181;
  WTF::StringImpl *v182;
  void (*v183)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v184;
  WTF::StringImpl *v185;
  void (*v186)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v170 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v170, v9, &v169);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if ((byte_1ECF587F5 & 1) != 0)
    goto LABEL_4;
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x1000000002;
  *(_QWORD *)(v85 + 8) = "setDOMBreakpoint";
  *(_DWORD *)(v85 + 16) = 4;
  v170 = (WTF::StringImpl *)v85;
  v171 = (WTF::StringImpl *)Inspector::DOMDebuggerBackendDispatcher::setDOMBreakpoint;
  v172 = 0;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x1300000002;
  *(_QWORD *)(v86 + 8) = "removeDOMBreakpoint";
  *(_DWORD *)(v86 + 16) = 4;
  v173 = (WTF::StringImpl *)v86;
  v174 = Inspector::DOMDebuggerBackendDispatcher::removeDOMBreakpoint;
  v175 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x1200000002;
  *(_QWORD *)(v87 + 8) = "setEventBreakpoint";
  *(_DWORD *)(v87 + 16) = 4;
  v176 = (WTF::StringImpl *)v87;
  v177 = Inspector::DOMDebuggerBackendDispatcher::setEventBreakpoint;
  v178 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x1500000002;
  *(_QWORD *)(v88 + 8) = "removeEventBreakpoint";
  *(_DWORD *)(v88 + 16) = 4;
  v179 = (WTF::StringImpl *)v88;
  v180 = Inspector::DOMDebuggerBackendDispatcher::removeEventBreakpoint;
  v181 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x1000000002;
  *(_QWORD *)(v89 + 8) = "setURLBreakpoint";
  *(_DWORD *)(v89 + 16) = 4;
  v182 = (WTF::StringImpl *)v89;
  v183 = Inspector::DOMDebuggerBackendDispatcher::setURLBreakpoint;
  v184 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1300000002;
  *(_QWORD *)(v90 + 8) = "removeURLBreakpoint";
  *(_DWORD *)(v90 + 16) = 4;
  v185 = (WTF::StringImpl *)v90;
  v186 = Inspector::DOMDebuggerBackendDispatcher::removeURLBreakpoint;
  v187 = 0;
  v91 = (_OWORD *)WTF::fastMalloc((WTF *)0x190);
  v167 = 0;
  *v91 = xmmword_199156B80;
  v91[2] = 0u;
  v91[3] = 0u;
  v91[4] = 0u;
  v91[5] = 0u;
  v91[6] = 0u;
  v91[7] = 0u;
  v91[8] = 0u;
  v91[9] = 0u;
  v91[10] = 0u;
  v91[11] = 0u;
  v91[12] = 0u;
  v91[13] = 0u;
  v91[14] = 0u;
  v91[15] = 0u;
  v91[16] = 0u;
  v91[17] = 0u;
  v91[18] = 0u;
  v91[19] = 0u;
  v91[20] = 0u;
  v91[21] = 0u;
  v91[22] = 0u;
  v91[23] = 0u;
  v91[24] = 0u;
  v91[1] = 0u;
  v168 = (WTF::StringImpl *)(v91 + 1);
  do
  {
    v98 = v168;
    if (v168
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, 8u), (v98 = v168) != 0))
    {
      v99 = *((_DWORD *)v98 - 2);
    }
    else
    {
      v99 = 0;
    }
    v100 = &v170 + 3 * v167;
    v101 = *v100;
    v102 = *((_DWORD *)*v100 + 4);
    if (v102 < 0x100)
      v103 = WTF::StringImpl::hashSlowCase(*v100);
    else
      v103 = v102 >> 8;
    v104 = 0;
    v165 = v100 + 1;
    for (i = 1; ; ++i)
    {
      v106 = v103 & v99;
      v107 = (WTF *)*((_QWORD *)v98 + 3 * (v103 & v99));
      if (v107 == (WTF *)-1)
      {
        v104 = (char *)v98 + 24 * v106;
        goto LABEL_70;
      }
      if (!v107)
        break;
      if (WTF::equal(v107, v101, v11))
        goto LABEL_86;
LABEL_70:
      v103 = i + v106;
    }
    v166 = (char *)v98 + 24 * v106;
    if (v104)
    {
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      *((_QWORD *)v104 + 2) = 0;
      --*((_DWORD *)v98 - 4);
      v166 = v104;
    }
    if (v101)
      *(_DWORD *)v101 += 2;
    *(_QWORD *)v166 = v101;
    *(_OWORD *)(v166 + 8) = *v165;
    v108 = v168;
    if (v168)
      v109 = *((_DWORD *)v168 - 3) + 1;
    else
      v109 = 1;
    *((_DWORD *)v168 - 3) = v109;
    v110 = (*((_DWORD *)v108 - 4) + v109);
    v111 = *((unsigned int *)v108 - 1);
    if (v111 > 0x400)
    {
      if (v111 <= 2 * v110)
      {
LABEL_81:
        v112 = (_DWORD)v111 << (6 * v109 >= (2 * v111));
        goto LABEL_85;
      }
    }
    else if (3 * v111 <= 4 * v110)
    {
      if ((_DWORD)v111)
        goto LABEL_81;
      v112 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, v112);
    }
LABEL_86:
    ++v167;
  }
  while (v167 != 6);
  v113 = v168;
  v168 = 0;
  qword_1ECF58828 = (uint64_t)v113;
  v114 = v185;
  v185 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v182;
  v182 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v179;
  v179 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  byte_1ECF587F5 = 1;
LABEL_4:
  v17 = qword_1ECF58828;
  if (!qword_1ECF58828)
    goto LABEL_20;
  v18 = *(_DWORD *)(qword_1ECF58828 - 8);
  v19 = *((_DWORD *)*a3 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v20 = v19 >> 8;
  v21 = 0;
  while (2)
  {
    v22 = v20 & v18;
    v23 = v17 + 24 * (v20 & v18);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 == -1)
    {
LABEL_11:
      v20 = ++v21 + v22;
      continue;
    }
    break;
  }
  if (!v24)
  {
    v25 = qword_1ECF58828;
    if (qword_1ECF58828)
    {
      v26 = *(_DWORD *)(qword_1ECF58828 - 4);
      v23 = qword_1ECF58828 + 24 * v26;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v24, *a3, v11))
    goto LABEL_11;
  v25 = qword_1ECF58828;
  if (qword_1ECF58828)
  {
    v26 = *(_DWORD *)(qword_1ECF58828 - 4);
LABEL_16:
    if (v23 == v25 + 24 * v26)
    {
LABEL_20:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = *a3;
      if (*a3)
      {
        v39 = *((_DWORD *)v38 + 1);
        *(_DWORD *)v38 += 2;
        if (v39 < 0)
          goto LABEL_115;
      }
      else
      {
        v39 = 0;
      }
      v40 = __OFADD__(v39, 15);
      v41 = v39 + 15;
      if (!v40 && !__OFADD__(v41, 13))
      {
        v42 = !v38 || (*((_BYTE *)v38 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v41 + 13), v42, (int8x16_t *)"'DOMDebugger.", 0xDu, (uint64_t)v38, (int8x16_t *)"' was not found", 0xFu, (int **)&v168);
        v43 = v168;
        if (v168)
        {
          if (!*(_BYTE *)(v37 + 48))
            *(_BYTE *)(v37 + 48) = *(_QWORD *)(v37 + 48);
          LODWORD(v170) = 2;
          *(_DWORD *)v43 += 2;
          v171 = v43;
          v44 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v44 == *(_DWORD *)(v37 + 32))
          {
            v45 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 24, v44 + 1, (unint64_t)&v170);
            v46 = *(unsigned int *)(v37 + 36);
            v47 = *(_QWORD *)(v37 + 24) + 16 * v46;
            *(_DWORD *)v47 = *(_DWORD *)v45;
            v48 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v47 + 8) = v48;
            v49 = v171;
            *(_DWORD *)(v37 + 36) = v46 + 1;
            v171 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
          else
          {
            v50 = *(_QWORD *)(v37 + 24) + 16 * v44;
            *(_DWORD *)v50 = 2;
            *(_QWORD *)(v50 + 8) = v43;
            *(_DWORD *)(v37 + 36) = v44 + 1;
          }
          v51 = v168;
          v168 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              if (!v38)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v51 -= 2;
          }
          if (!v38)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
          goto LABEL_41;
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x198639A54);
      }
LABEL_115:
      v168 = 0;
      goto LABEL_116;
    }
  }
  v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(v23 + 8);
  v28 = *(_QWORD *)(v23 + 16);
  v29 = (_QWORD *)(a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v29 + v27);
  v27(v29, a2, &v169);
LABEL_41:
  v52 = v169;
  v169 = 0;
  if (!v52)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v52 != 1)
  {
    --*(_DWORD *)v52;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v52, v30, v31, v32, v33, v34, v35, v36);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::DOMDebuggerBackendDispatcher::setDOMBreakpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  int v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  char v161;
  WTF::StringImpl *v162;
  WTF *v163;
  WTF::StringImpl *v164;
  WTF *v165;
  WTF::StringImpl *v166;
  uint64_t v167;
  WTF **v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v160 = (WTF::StringImpl *)v8;
  v165 = (WTF *)&off_1E3593B00;
  v166 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v167 = 0;
  v168 = &v165;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v160, 1, (uint64_t)&v165);
  v18 = v168;
  if (v168 == &v165)
  {
    v18 = &v165;
  }
  else
  {
    if (!v168)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x400000002;
  *(_QWORD *)(v21 + 8) = "type";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v160 = (WTF::StringImpl *)v21;
  v165 = (WTF *)&off_1E3593B90;
  v166 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v167 = 0;
  v168 = &v165;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v164, v19, v20, &v160, 1, (uint64_t)&v165);
  v30 = v168;
  if (v168 == &v165)
  {
    v30 = &v165;
  }
  else
  {
    if (!v168)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (const WTF::StringImpl *)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x700000002;
  *(_QWORD *)(v33 + 8) = "options";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v160 = (WTF::StringImpl *)v33;
  v165 = (WTF *)&off_1E3593C20;
  v168 = &v165;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v163, v31, v32, &v160, 0, (uint64_t)&v165);
  v42 = v168;
  if (v168 == &v165)
  {
    v42 = &v165;
  }
  else
  {
    if (!v168)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v42 + v34))();
LABEL_20:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v43 + 36))
  {
    v44 = WTF::fastCompactMalloc((WTF *)0x20);
    v52 = (WTF::StringImpl *)v44;
    *(_QWORD *)v44 = 0x4A00000002;
    *(_QWORD *)(v44 + 8) = "Some arguments of method 'DOMDebugger.setDOMBreakpoint' can't be processed";
    v53 = 4;
    *(_DWORD *)(v44 + 16) = 4;
    if (!*(_BYTE *)(v43 + 48))
    {
      *(_BYTE *)(v43 + 48) = *(_QWORD *)(v43 + 48);
      v53 = *(_DWORD *)v44 + 2;
    }
    LODWORD(v165) = 3;
    *(_DWORD *)v44 = v53;
    v166 = (WTF::StringImpl *)v44;
    v54 = *(unsigned int *)(v43 + 36);
    if ((_DWORD)v54 == *(_DWORD *)(v43 + 32))
    {
      v55 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43 + 24, v54 + 1, (unint64_t)&v165);
      v56 = *(unsigned int *)(v43 + 36);
      v57 = *(_QWORD *)(v43 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v55;
      v58 = *(_QWORD *)(v55 + 8);
      *(_QWORD *)(v55 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v166;
      *(_DWORD *)(v43 + 36) = v56 + 1;
      v166 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::~StringImpl(v59, v45, v46, v47, v48, v49, v50, v51);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v59 -= 2;
        }
      }
    }
    else
    {
      v61 = *(_QWORD *)(v43 + 24) + 16 * v54;
      *(_DWORD *)v61 = 3;
      *(_QWORD *)(v61 + 8) = v44;
      *(_DWORD *)(v43 + 36) = v54 + 1;
    }
    if (*(_DWORD *)v52 != 2)
    {
      *(_DWORD *)v52 -= 2;
      goto LABEL_35;
    }
    v98 = v52;
LABEL_50:
    WTF::StringImpl::~StringImpl(v98, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    goto LABEL_35;
  }
  v60 = *(_QWORD *)(a1 + 24);
  if (v60)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF **))(*(_QWORD *)v60 + 16))(v60, a2, v17, &v164, &v163);
      goto LABEL_35;
    }
LABEL_92:
    __break(1u);
  }
  v96 = v164;
  if (WTF::equalInternal<unsigned char>((uint64_t)v164, (unint64_t)"subtree-modified", 16))
  {
    v97 = 143;
    goto LABEL_56;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v96, (unint64_t)"attribute-modified", 18))
  {
    v97 = 144;
    goto LABEL_56;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v96, (unint64_t)"node-removed", 12))
  {
    v97 = 145;
LABEL_56:
    if (!BYTE4(v17))
      goto LABEL_92;
    (***(void (****)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t, WTF **))(a1 + 32))(&v160, *(_QWORD *)(a1 + 32), v17, v97, &v163);
    if (v161)
    {
      v115 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v115 + 48))
        *(_BYTE *)(v115 + 48) = *(_QWORD *)(v115 + 48);
      LODWORD(v165) = 5;
      v116 = v160;
      if (v160)
        *(_DWORD *)v160 += 2;
      v166 = v116;
      v117 = *(unsigned int *)(v115 + 36);
      if ((_DWORD)v117 != *(_DWORD *)(v115 + 32))
      {
        v133 = *(_QWORD *)(v115 + 24) + 16 * v117;
        *(_DWORD *)v133 = 5;
        *(_QWORD *)(v133 + 8) = v116;
        *(_DWORD *)(v115 + 36) = v117 + 1;
        goto LABEL_70;
      }
      v118 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v115 + 24, v117 + 1, (unint64_t)&v165);
      v119 = *(unsigned int *)(v115 + 36);
      v120 = *(_QWORD *)(v115 + 24) + 16 * v119;
      *(_DWORD *)v120 = *(_DWORD *)v118;
      v121 = *(_QWORD *)(v118 + 8);
      *(_QWORD *)(v118 + 8) = 0;
      *(_QWORD *)(v120 + 8) = v121;
      v122 = v166;
      *(_DWORD *)(v115 + 36) = v119 + 1;
      v166 = 0;
      if (!v122)
      {
LABEL_70:
        if (!v161)
          goto LABEL_35;
        v98 = v160;
        v160 = 0;
        if (!v98)
          goto LABEL_35;
LABEL_72:
        if (*(_DWORD *)v98 != 2)
        {
          *(_DWORD *)v98 -= 2;
          goto LABEL_35;
        }
        goto LABEL_50;
      }
      v123 = *(_DWORD *)v122 - 2;
      if (*(_DWORD *)v122 == 2)
      {
        WTF::StringImpl::~StringImpl(v122, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
        goto LABEL_70;
      }
    }
    else
    {
      v132 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v132 = 0x500000001;
      *((_QWORD *)v132 + 3) = 0;
      *((_QWORD *)v132 + 4) = 0;
      *((_QWORD *)v132 + 2) = 0;
      v165 = v132;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v165);
      v122 = v165;
      if (!v165)
        goto LABEL_70;
      v123 = *(_DWORD *)v165 - 1;
      if (*(_DWORD *)v165 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v165, v45, v46, v47, v48, v49, v50, v51);
        goto LABEL_70;
      }
    }
    *(_DWORD *)v122 = v123;
    goto LABEL_70;
  }
  v134 = *(_QWORD *)(a1 + 16);
  if (v96)
    *(_DWORD *)v96 += 2;
  v162 = v96;
  v165 = (WTF *)"Unknown type: ";
  v166 = (WTF::StringImpl *)15;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v165, (uint64_t *)&v162, (int **)&v160);
  v135 = v160;
  if (!v160)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v134 + 48))
    *(_BYTE *)(v134 + 48) = *(_QWORD *)(v134 + 48);
  LODWORD(v165) = 5;
  *(_DWORD *)v135 += 2;
  v166 = v135;
  v136 = *(unsigned int *)(v134 + 36);
  if ((_DWORD)v136 == *(_DWORD *)(v134 + 32))
  {
    v137 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v134 + 24, v136 + 1, (unint64_t)&v165);
    v138 = *(unsigned int *)(v134 + 36);
    v139 = *(_QWORD *)(v134 + 24) + 16 * v138;
    *(_DWORD *)v139 = *(_DWORD *)v137;
    v140 = *(_QWORD *)(v137 + 8);
    *(_QWORD *)(v137 + 8) = 0;
    *(_QWORD *)(v139 + 8) = v140;
    v141 = v166;
    *(_DWORD *)(v134 + 36) = v138 + 1;
    v166 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 2)
      {
        WTF::StringImpl::~StringImpl(v141, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
      }
      else
      {
        *(_DWORD *)v141 -= 2;
      }
    }
  }
  else
  {
    v142 = *(_QWORD *)(v134 + 24) + 16 * v136;
    *(_DWORD *)v142 = 5;
    *(_QWORD *)(v142 + 8) = v135;
    *(_DWORD *)(v134 + 36) = v136 + 1;
  }
  v143 = v160;
  v160 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v98 = v162;
  v162 = 0;
  if (v98)
    goto LABEL_72;
LABEL_35:
  v62 = v163;
  v163 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 1)
      WTF::JSONImpl::Value::operator delete(v62, v45, v46, v47, v48, v49, v50, v51);
    else
      --*(_DWORD *)v62;
  }
  v63 = v164;
  v164 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::DOMDebuggerBackendDispatcher::removeDOMBreakpoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  char v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  WTF **v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "nodeId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v139 = (WTF::StringImpl *)v8;
  v143 = (WTF *)&off_1E3593B00;
  v144 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v145 = 0;
  v146 = &v143;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v139, 1, (uint64_t)&v143);
  v18 = v146;
  if (v146 == &v143)
  {
    v18 = &v143;
  }
  else
  {
    if (!v146)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x400000002;
  *(_QWORD *)(v21 + 8) = "type";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v139 = (WTF::StringImpl *)v21;
  v143 = (WTF *)&off_1E3593B90;
  v144 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v145 = 0;
  v146 = &v143;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v142, v19, v20, &v139, 1, (uint64_t)&v143);
  v30 = v146;
  if (v146 == &v143)
  {
    v30 = &v143;
  }
  else
  {
    if (!v146)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4D00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOMDebugger.removeDOMBreakpoint' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v143) = 3;
    *(_DWORD *)v32 = v41;
    v144 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v143);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v144;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v144 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v77 = v40;
    goto LABEL_38;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (BYTE4(v17))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 24))(v48, a2, v17, &v142);
      goto LABEL_28;
    }
LABEL_80:
    __break(1u);
  }
  v75 = v142;
  if (WTF::equalInternal<unsigned char>((uint64_t)v142, (unint64_t)"subtree-modified", 16))
  {
    v76 = 143;
  }
  else if (WTF::equalInternal<unsigned char>((uint64_t)v75, (unint64_t)"attribute-modified", 18))
  {
    v76 = 144;
  }
  else
  {
    if (!WTF::equalInternal<unsigned char>((uint64_t)v75, (unint64_t)"node-removed", 12))
    {
      v113 = *(_QWORD *)(a1 + 16);
      if (v75)
        *(_DWORD *)v75 += 2;
      v141 = v75;
      v143 = (WTF *)"Unknown type: ";
      v144 = (WTF::StringImpl *)15;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v143, (uint64_t *)&v141, (int **)&v139);
      v114 = v139;
      if (!v139)
      {
        __break(0xC471u);
        return;
      }
      if (!*(_BYTE *)(v113 + 48))
        *(_BYTE *)(v113 + 48) = *(_QWORD *)(v113 + 48);
      LODWORD(v143) = 5;
      *(_DWORD *)v114 += 2;
      v144 = v114;
      v115 = *(unsigned int *)(v113 + 36);
      if ((_DWORD)v115 == *(_DWORD *)(v113 + 32))
      {
        v116 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v113 + 24, v115 + 1, (unint64_t)&v143);
        v117 = *(unsigned int *)(v113 + 36);
        v118 = *(_QWORD *)(v113 + 24) + 16 * v117;
        *(_DWORD *)v118 = *(_DWORD *)v116;
        v119 = *(_QWORD *)(v116 + 8);
        *(_QWORD *)(v116 + 8) = 0;
        *(_QWORD *)(v118 + 8) = v119;
        v120 = v144;
        *(_DWORD *)(v113 + 36) = v117 + 1;
        v144 = 0;
        if (v120)
        {
          if (*(_DWORD *)v120 == 2)
          {
            WTF::StringImpl::~StringImpl(v120, v33, v34, v35, v36, v37, v38, v39);
            WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
          }
          else
          {
            *(_DWORD *)v120 -= 2;
          }
        }
      }
      else
      {
        v121 = *(_QWORD *)(v113 + 24) + 16 * v115;
        *(_DWORD *)v121 = 5;
        *(_QWORD *)(v121 + 8) = v114;
        *(_DWORD *)(v113 + 36) = v115 + 1;
      }
      v122 = v139;
      v139 = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
        {
          WTF::StringImpl::~StringImpl(v122, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v122 -= 2;
        }
      }
      v77 = v141;
      v141 = 0;
      if (!v77)
        goto LABEL_28;
      goto LABEL_60;
    }
    v76 = 145;
  }
  if (!BYTE4(v17))
    goto LABEL_80;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 8))(&v139, *(_QWORD *)(a1 + 32), v17, v76);
  if (!v140)
  {
    v111 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v111 = 0x500000001;
    *((_QWORD *)v111 + 3) = 0;
    *((_QWORD *)v111 + 4) = 0;
    *((_QWORD *)v111 + 2) = 0;
    v143 = v111;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v143);
    v101 = v143;
    if (!v143)
      goto LABEL_58;
    v102 = *(_DWORD *)v143 - 1;
    if (*(_DWORD *)v143 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v143, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  v94 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v94 + 48))
    *(_BYTE *)(v94 + 48) = *(_QWORD *)(v94 + 48);
  LODWORD(v143) = 5;
  v95 = v139;
  if (v139)
    *(_DWORD *)v139 += 2;
  v144 = v95;
  v96 = *(unsigned int *)(v94 + 36);
  if ((_DWORD)v96 != *(_DWORD *)(v94 + 32))
  {
    v112 = *(_QWORD *)(v94 + 24) + 16 * v96;
    *(_DWORD *)v112 = 5;
    *(_QWORD *)(v112 + 8) = v95;
    *(_DWORD *)(v94 + 36) = v96 + 1;
    goto LABEL_58;
  }
  v97 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v94 + 24, v96 + 1, (unint64_t)&v143);
  v98 = *(unsigned int *)(v94 + 36);
  v99 = *(_QWORD *)(v94 + 24) + 16 * v98;
  *(_DWORD *)v99 = *(_DWORD *)v97;
  v100 = *(_QWORD *)(v97 + 8);
  *(_QWORD *)(v97 + 8) = 0;
  *(_QWORD *)(v99 + 8) = v100;
  v101 = v144;
  *(_DWORD *)(v94 + 36) = v98 + 1;
  v144 = 0;
  if (v101)
  {
    v102 = *(_DWORD *)v101 - 2;
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      goto LABEL_58;
    }
LABEL_56:
    *(_DWORD *)v101 = v102;
  }
LABEL_58:
  if (!v140)
    goto LABEL_28;
  v77 = v139;
  v139 = 0;
  if (!v77)
    goto LABEL_28;
LABEL_60:
  if (*(_DWORD *)v77 == 2)
  {
LABEL_38:
    WTF::StringImpl::~StringImpl(v77, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    goto LABEL_28;
  }
  *(_DWORD *)v77 -= 2;
LABEL_28:
  v50 = v142;
  v142 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DOMDebuggerBackendDispatcher::setEventBreakpoint(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  WTF **v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF **v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  int v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF *v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  char v210;
  WTF::StringImpl *v211;
  WTF *v212;
  __int16 v213;
  __int16 v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF *v217;
  WTF::StringImpl *v218;
  uint64_t v219;
  WTF **v220;
  uint64_t v221;

  v221 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xE00000002;
  *(_QWORD *)(v8 + 8) = "breakpointType";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v209 = (WTF::StringImpl *)v8;
  v217 = (WTF *)&off_1E3593B90;
  v218 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v219 = 0;
  v220 = &v217;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v216, v6, v7, &v209, 1, (uint64_t)&v217);
  v17 = v220;
  if (v220 == &v217)
  {
    v17 = &v217;
  }
  else
  {
    if (!v220)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x900000002;
  *(_QWORD *)(v20 + 8) = "eventName";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v209 = (WTF::StringImpl *)v20;
  v217 = (WTF *)&off_1E3593B90;
  v218 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v219 = 0;
  v220 = &v217;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v215, v18, v19, &v209, 0, (uint64_t)&v217);
  v29 = v220;
  if (v220 == &v217)
  {
    v29 = &v217;
  }
  else
  {
    if (!v220)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xD00000002;
  *(_QWORD *)(v32 + 8) = "caseSensitive";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v209 = (WTF::StringImpl *)v32;
  v217 = (WTF *)&unk_1E3593AB8;
  v218 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v219 = 0;
  v220 = &v217;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v209, 0, (uint64_t)&v217);
  v42 = v220;
  if (v220 == &v217)
  {
    v42 = &v217;
  }
  else
  {
    if (!v220)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v42 + v33))();
LABEL_20:
  v214 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x700000002;
  *(_QWORD *)(v45 + 8) = "isRegex";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v209 = (WTF::StringImpl *)v45;
  v217 = (WTF *)&unk_1E3593AB8;
  v218 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v219 = 0;
  v220 = &v217;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v43, v44, &v209, 0, (uint64_t)&v217);
  v55 = v220;
  if (v220 == &v217)
  {
    v55 = &v217;
  }
  else
  {
    if (!v220)
      goto LABEL_27;
    v46 = 5;
  }
  (*((void (**)(void))*v55 + v46))();
LABEL_27:
  v213 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  v57 = *a3;
  v58 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v58 = 0x700000002;
  *(_QWORD *)(v58 + 8) = "options";
  v59 = 4;
  *(_DWORD *)(v58 + 16) = 4;
  v209 = (WTF::StringImpl *)v58;
  v217 = (WTF *)&off_1E3593C20;
  v220 = &v217;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v212, v56, v57, &v209, 0, (uint64_t)&v217);
  v67 = v220;
  if (v220 == &v217)
  {
    v67 = &v217;
  }
  else
  {
    if (!v220)
      goto LABEL_34;
    v59 = 5;
  }
  (*((void (**)(void))*v67 + v59))();
LABEL_34:
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, v60, v61, v62, v63, v64, v65, v66);
    WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
  v68 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v68 + 36))
  {
    v69 = WTF::fastCompactMalloc((WTF *)0x20);
    v77 = (WTF::StringImpl *)v69;
    *(_QWORD *)v69 = 0x4C00000002;
    *(_QWORD *)(v69 + 8) = "Some arguments of method 'DOMDebugger.setEventBreakpoint' can't be processed";
    v78 = 4;
    *(_DWORD *)(v69 + 16) = 4;
    if (!*(_BYTE *)(v68 + 48))
    {
      *(_BYTE *)(v68 + 48) = *(_QWORD *)(v68 + 48);
      v78 = *(_DWORD *)v69 + 2;
    }
    LODWORD(v217) = 3;
    *(_DWORD *)v69 = v78;
    v218 = (WTF::StringImpl *)v69;
    v79 = *(unsigned int *)(v68 + 36);
    if ((_DWORD)v79 == *(_DWORD *)(v68 + 32))
    {
      v80 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v68 + 24, v79 + 1, (unint64_t)&v217);
      v81 = *(unsigned int *)(v68 + 36);
      v82 = *(_QWORD *)(v68 + 24) + 16 * v81;
      *(_DWORD *)v82 = *(_DWORD *)v80;
      v83 = *(_QWORD *)(v80 + 8);
      *(_QWORD *)(v80 + 8) = 0;
      *(_QWORD *)(v82 + 8) = v83;
      v84 = v218;
      *(_DWORD *)(v68 + 36) = v81 + 1;
      v218 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::~StringImpl(v84, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
        }
        else
        {
          *(_DWORD *)v84 -= 2;
        }
      }
    }
    else
    {
      v86 = *(_QWORD *)(v68 + 24) + 16 * v79;
      *(_DWORD *)v86 = 3;
      *(_QWORD *)(v86 + 8) = v69;
      *(_DWORD *)(v68 + 36) = v79 + 1;
    }
    if (*(_DWORD *)v77 != 2)
    {
      *(_DWORD *)v77 -= 2;
      goto LABEL_48;
    }
    v147 = v77;
LABEL_69:
    WTF::StringImpl::~StringImpl(v147, v70, v71, v72, v73, v74, v75, v76);
    WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    goto LABEL_48;
  }
  v85 = *(_QWORD *)(a1 + 24);
  if (v85)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, WTF **))(*(_QWORD *)v85 + 32))(v85, a2, &v216, &v215, &v214, &v213, &v212);
    goto LABEL_48;
  }
  v146 = v216;
  if (WTF::equalInternal<unsigned char>((uint64_t)v216, (unint64_t)"animation-frame", 15)
    || WTF::equalInternal<unsigned char>((uint64_t)v146, (unint64_t)"interval", 8)
    || WTF::equalInternal<unsigned char>((uint64_t)v146, (unint64_t)"listener", 8)
    || WTF::equalInternal<unsigned char>((uint64_t)v146, (unint64_t)"timeout", 7))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v209);
    if (v210)
    {
      v164 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v164 + 48))
        *(_BYTE *)(v164 + 48) = *(_QWORD *)(v164 + 48);
      LODWORD(v217) = 5;
      v165 = v209;
      if (v209)
        *(_DWORD *)v209 += 2;
      v218 = v165;
      v166 = *(unsigned int *)(v164 + 36);
      if ((_DWORD)v166 != *(_DWORD *)(v164 + 32))
      {
        v182 = *(_QWORD *)(v164 + 24) + 16 * v166;
        *(_DWORD *)v182 = 5;
        *(_QWORD *)(v182 + 8) = v165;
        *(_DWORD *)(v164 + 36) = v166 + 1;
        goto LABEL_88;
      }
      v167 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v164 + 24, v166 + 1, (unint64_t)&v217);
      v168 = *(unsigned int *)(v164 + 36);
      v169 = *(_QWORD *)(v164 + 24) + 16 * v168;
      *(_DWORD *)v169 = *(_DWORD *)v167;
      v170 = *(_QWORD *)(v167 + 8);
      *(_QWORD *)(v167 + 8) = 0;
      *(_QWORD *)(v169 + 8) = v170;
      v171 = v218;
      *(_DWORD *)(v164 + 36) = v168 + 1;
      v218 = 0;
      if (!v171)
      {
LABEL_88:
        if (!v210)
          goto LABEL_48;
        v147 = v209;
        v209 = 0;
        if (!v147)
          goto LABEL_48;
LABEL_90:
        if (*(_DWORD *)v147 != 2)
        {
          *(_DWORD *)v147 -= 2;
          goto LABEL_48;
        }
        goto LABEL_69;
      }
      v172 = *(_DWORD *)v171 - 2;
      if (*(_DWORD *)v171 == 2)
      {
        WTF::StringImpl::~StringImpl(v171, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
        goto LABEL_88;
      }
    }
    else
    {
      v181 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v181 = 0x500000001;
      *((_QWORD *)v181 + 3) = 0;
      *((_QWORD *)v181 + 4) = 0;
      *((_QWORD *)v181 + 2) = 0;
      v217 = v181;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v217);
      v171 = v217;
      if (!v217)
        goto LABEL_88;
      v172 = *(_DWORD *)v217 - 1;
      if (*(_DWORD *)v217 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v217, v70, v71, v72, v73, v74, v75, v76);
        goto LABEL_88;
      }
    }
    *(_DWORD *)v171 = v172;
    goto LABEL_88;
  }
  v183 = *(_QWORD *)(a1 + 16);
  if (v146)
    *(_DWORD *)v146 += 2;
  v211 = v146;
  v217 = (WTF *)"Unknown breakpointType: ";
  v218 = (WTF::StringImpl *)25;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v217, (uint64_t *)&v211, (int **)&v209);
  v184 = v209;
  if (!v209)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v183 + 48))
    *(_BYTE *)(v183 + 48) = *(_QWORD *)(v183 + 48);
  LODWORD(v217) = 5;
  *(_DWORD *)v184 += 2;
  v218 = v184;
  v185 = *(unsigned int *)(v183 + 36);
  if ((_DWORD)v185 == *(_DWORD *)(v183 + 32))
  {
    v186 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v183 + 24, v185 + 1, (unint64_t)&v217);
    v187 = *(unsigned int *)(v183 + 36);
    v188 = *(_QWORD *)(v183 + 24) + 16 * v187;
    *(_DWORD *)v188 = *(_DWORD *)v186;
    v189 = *(_QWORD *)(v186 + 8);
    *(_QWORD *)(v186 + 8) = 0;
    *(_QWORD *)(v188 + 8) = v189;
    v190 = v218;
    *(_DWORD *)(v183 + 36) = v187 + 1;
    v218 = 0;
    if (v190)
    {
      if (*(_DWORD *)v190 == 2)
      {
        WTF::StringImpl::~StringImpl(v190, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
      }
      else
      {
        *(_DWORD *)v190 -= 2;
      }
    }
  }
  else
  {
    v191 = *(_QWORD *)(v183 + 24) + 16 * v185;
    *(_DWORD *)v191 = 5;
    *(_QWORD *)(v191 + 8) = v184;
    *(_DWORD *)(v183 + 36) = v185 + 1;
  }
  v192 = v209;
  v209 = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
    {
      WTF::StringImpl::~StringImpl(v192, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
    }
    else
    {
      *(_DWORD *)v192 -= 2;
    }
  }
  v147 = v211;
  v211 = 0;
  if (v147)
    goto LABEL_90;
LABEL_48:
  v87 = v212;
  v212 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v70, v71, v72, v73, v74, v75, v76);
    else
      --*(_DWORD *)v87;
  }
  v88 = v215;
  v215 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v216;
  v216 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
}

void Inspector::DOMDebuggerBackendDispatcher::removeEventBreakpoint(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  WTF **v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  int v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  char v189;
  WTF::StringImpl *v190;
  __int16 v191;
  __int16 v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF *v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  WTF **v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xE00000002;
  *(_QWORD *)(v8 + 8) = "breakpointType";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v188 = (WTF::StringImpl *)v8;
  v195 = (WTF *)&off_1E3593B90;
  v196 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v197 = 0;
  v198 = &v195;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v194, v6, v7, &v188, 1, (uint64_t)&v195);
  v17 = v198;
  if (v198 == &v195)
  {
    v17 = &v195;
  }
  else
  {
    if (!v198)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x900000002;
  *(_QWORD *)(v20 + 8) = "eventName";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v188 = (WTF::StringImpl *)v20;
  v195 = (WTF *)&off_1E3593B90;
  v196 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v197 = 0;
  v198 = &v195;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v193, v18, v19, &v188, 0, (uint64_t)&v195);
  v29 = v198;
  if (v198 == &v195)
  {
    v29 = &v195;
  }
  else
  {
    if (!v198)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xD00000002;
  *(_QWORD *)(v32 + 8) = "caseSensitive";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v188 = (WTF::StringImpl *)v32;
  v195 = (WTF *)&unk_1E3593AB8;
  v196 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v197 = 0;
  v198 = &v195;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v188, 0, (uint64_t)&v195);
  v42 = v198;
  if (v198 == &v195)
  {
    v42 = &v195;
  }
  else
  {
    if (!v198)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v42 + v33))();
LABEL_20:
  v192 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x700000002;
  *(_QWORD *)(v45 + 8) = "isRegex";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v188 = (WTF::StringImpl *)v45;
  v195 = (WTF *)&unk_1E3593AB8;
  v196 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v197 = 0;
  v198 = &v195;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v43, v44, &v188, 0, (uint64_t)&v195);
  v55 = v198;
  if (v198 == &v195)
  {
    v55 = &v195;
  }
  else
  {
    if (!v198)
      goto LABEL_27;
    v46 = 5;
  }
  (*((void (**)(void))*v55 + v46))();
LABEL_27:
  v191 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v56 + 36))
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    v65 = (WTF::StringImpl *)v57;
    *(_QWORD *)v57 = 0x4F00000002;
    *(_QWORD *)(v57 + 8) = "Some arguments of method 'DOMDebugger.removeEventBreakpoint' can't be processed";
    v66 = 4;
    *(_DWORD *)(v57 + 16) = 4;
    if (!*(_BYTE *)(v56 + 48))
    {
      *(_BYTE *)(v56 + 48) = *(_QWORD *)(v56 + 48);
      v66 = *(_DWORD *)v57 + 2;
    }
    LODWORD(v195) = 3;
    *(_DWORD *)v57 = v66;
    v196 = (WTF::StringImpl *)v57;
    v67 = *(unsigned int *)(v56 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v56 + 32))
    {
      v68 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v67 + 1, (unint64_t)&v195);
      v69 = *(unsigned int *)(v56 + 36);
      v70 = *(_QWORD *)(v56 + 24) + 16 * v69;
      *(_DWORD *)v70 = *(_DWORD *)v68;
      v71 = *(_QWORD *)(v68 + 8);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v70 + 8) = v71;
      v72 = v196;
      *(_DWORD *)(v56 + 36) = v69 + 1;
      v196 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
    }
    else
    {
      v74 = *(_QWORD *)(v56 + 24) + 16 * v67;
      *(_DWORD *)v74 = 3;
      *(_QWORD *)(v74 + 8) = v57;
      *(_DWORD *)(v56 + 36) = v67 + 1;
    }
    if (*(_DWORD *)v65 != 2)
    {
      *(_DWORD *)v65 -= 2;
      goto LABEL_41;
    }
    v126 = v65;
LABEL_57:
    WTF::StringImpl::~StringImpl(v126, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    goto LABEL_41;
  }
  v73 = *(_QWORD *)(a1 + 24);
  if (v73)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *))(*(_QWORD *)v73 + 40))(v73, a2, &v194, &v193, &v192, &v191);
    goto LABEL_41;
  }
  v125 = v194;
  if (WTF::equalInternal<unsigned char>((uint64_t)v194, (unint64_t)"animation-frame", 15)
    || WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"interval", 8)
    || WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"listener", 8)
    || WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"timeout", 7))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v188);
    if (v189)
    {
      v143 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v143 + 48))
        *(_BYTE *)(v143 + 48) = *(_QWORD *)(v143 + 48);
      LODWORD(v195) = 5;
      v144 = v188;
      if (v188)
        *(_DWORD *)v188 += 2;
      v196 = v144;
      v145 = *(unsigned int *)(v143 + 36);
      if ((_DWORD)v145 != *(_DWORD *)(v143 + 32))
      {
        v161 = *(_QWORD *)(v143 + 24) + 16 * v145;
        *(_DWORD *)v161 = 5;
        *(_QWORD *)(v161 + 8) = v144;
        *(_DWORD *)(v143 + 36) = v145 + 1;
        goto LABEL_76;
      }
      v146 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v143 + 24, v145 + 1, (unint64_t)&v195);
      v147 = *(unsigned int *)(v143 + 36);
      v148 = *(_QWORD *)(v143 + 24) + 16 * v147;
      *(_DWORD *)v148 = *(_DWORD *)v146;
      v149 = *(_QWORD *)(v146 + 8);
      *(_QWORD *)(v146 + 8) = 0;
      *(_QWORD *)(v148 + 8) = v149;
      v150 = v196;
      *(_DWORD *)(v143 + 36) = v147 + 1;
      v196 = 0;
      if (!v150)
      {
LABEL_76:
        if (!v189)
          goto LABEL_41;
        v126 = v188;
        v188 = 0;
        if (!v126)
          goto LABEL_41;
LABEL_78:
        if (*(_DWORD *)v126 != 2)
        {
          *(_DWORD *)v126 -= 2;
          goto LABEL_41;
        }
        goto LABEL_57;
      }
      v151 = *(_DWORD *)v150 - 2;
      if (*(_DWORD *)v150 == 2)
      {
        WTF::StringImpl::~StringImpl(v150, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
        goto LABEL_76;
      }
    }
    else
    {
      v160 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v160 = 0x500000001;
      *((_QWORD *)v160 + 3) = 0;
      *((_QWORD *)v160 + 4) = 0;
      *((_QWORD *)v160 + 2) = 0;
      v195 = v160;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v195);
      v150 = v195;
      if (!v195)
        goto LABEL_76;
      v151 = *(_DWORD *)v195 - 1;
      if (*(_DWORD *)v195 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v195, v58, v59, v60, v61, v62, v63, v64);
        goto LABEL_76;
      }
    }
    *(_DWORD *)v150 = v151;
    goto LABEL_76;
  }
  v162 = *(_QWORD *)(a1 + 16);
  if (v125)
    *(_DWORD *)v125 += 2;
  v190 = v125;
  v195 = (WTF *)"Unknown breakpointType: ";
  v196 = (WTF::StringImpl *)25;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v195, (uint64_t *)&v190, (int **)&v188);
  v163 = v188;
  if (!v188)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v162 + 48))
    *(_BYTE *)(v162 + 48) = *(_QWORD *)(v162 + 48);
  LODWORD(v195) = 5;
  *(_DWORD *)v163 += 2;
  v196 = v163;
  v164 = *(unsigned int *)(v162 + 36);
  if ((_DWORD)v164 == *(_DWORD *)(v162 + 32))
  {
    v165 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v162 + 24, v164 + 1, (unint64_t)&v195);
    v166 = *(unsigned int *)(v162 + 36);
    v167 = *(_QWORD *)(v162 + 24) + 16 * v166;
    *(_DWORD *)v167 = *(_DWORD *)v165;
    v168 = *(_QWORD *)(v165 + 8);
    *(_QWORD *)(v165 + 8) = 0;
    *(_QWORD *)(v167 + 8) = v168;
    v169 = v196;
    *(_DWORD *)(v162 + 36) = v166 + 1;
    v196 = 0;
    if (v169)
    {
      if (*(_DWORD *)v169 == 2)
      {
        WTF::StringImpl::~StringImpl(v169, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
      }
      else
      {
        *(_DWORD *)v169 -= 2;
      }
    }
  }
  else
  {
    v170 = *(_QWORD *)(v162 + 24) + 16 * v164;
    *(_DWORD *)v170 = 5;
    *(_QWORD *)(v170 + 8) = v163;
    *(_DWORD *)(v162 + 36) = v164 + 1;
  }
  v171 = v188;
  v188 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
    {
      WTF::StringImpl::~StringImpl(v171, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
    else
    {
      *(_DWORD *)v171 -= 2;
    }
  }
  v126 = v190;
  v190 = 0;
  if (v126)
    goto LABEL_78;
LABEL_41:
  v75 = v193;
  v193 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v194;
  v194 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::DOMDebuggerBackendDispatcher::setURLBreakpoint(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF **v30;
  uint64_t v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  char v133;
  WTF *v134;
  __int16 v135;
  WTF::StringImpl *v136;
  WTF *v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  WTF **v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x300000002;
  *(_QWORD *)(v8 + 8) = "url";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v132 = (WTF::StringImpl *)v8;
  v137 = (WTF *)&off_1E3593B90;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v139 = 0;
  v140 = &v137;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v136, v6, v7, &v132, 1, (uint64_t)&v137);
  v17 = v140;
  if (v140 == &v137)
  {
    v17 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "isRegex";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v132 = (WTF::StringImpl *)v20;
  v137 = (WTF *)&unk_1E3593AB8;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v139 = 0;
  v140 = &v137;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v132, 0, (uint64_t)&v137);
  v30 = v140;
  if (v140 == &v137)
  {
    v30 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v135 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = *a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x700000002;
  *(_QWORD *)(v33 + 8) = "options";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v132 = (WTF::StringImpl *)v33;
  v137 = (WTF *)&off_1E3593C20;
  v140 = &v137;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v134, v31, v32, &v132, 0, (uint64_t)&v137);
  v42 = v140;
  if (v140 == &v137)
  {
    v42 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v42 + v34))();
LABEL_20:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v43 + 36))
  {
    v44 = WTF::fastCompactMalloc((WTF *)0x20);
    v52 = (WTF::StringImpl *)v44;
    *(_QWORD *)v44 = 0x4A00000002;
    *(_QWORD *)(v44 + 8) = "Some arguments of method 'DOMDebugger.setURLBreakpoint' can't be processed";
    v53 = 4;
    *(_DWORD *)(v44 + 16) = 4;
    if (!*(_BYTE *)(v43 + 48))
    {
      *(_BYTE *)(v43 + 48) = *(_QWORD *)(v43 + 48);
      v53 = *(_DWORD *)v44 + 2;
    }
    LODWORD(v137) = 3;
    *(_DWORD *)v44 = v53;
    v138 = (WTF::StringImpl *)v44;
    v54 = *(unsigned int *)(v43 + 36);
    if ((_DWORD)v54 == *(_DWORD *)(v43 + 32))
    {
      v55 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43 + 24, v54 + 1, (unint64_t)&v137);
      v56 = *(unsigned int *)(v43 + 36);
      v57 = *(_QWORD *)(v43 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v55;
      v58 = *(_QWORD *)(v55 + 8);
      *(_QWORD *)(v55 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v138;
      *(_DWORD *)(v43 + 36) = v56 + 1;
      v138 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::~StringImpl(v59, v45, v46, v47, v48, v49, v50, v51);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v59 -= 2;
        }
      }
    }
    else
    {
      v61 = *(_QWORD *)(v43 + 24) + 16 * v54;
      *(_DWORD *)v61 = 3;
      *(_QWORD *)(v61 + 8) = v44;
      *(_DWORD *)(v43 + 36) = v54 + 1;
    }
    if (*(_DWORD *)v52 != 2)
    {
      *(_DWORD *)v52 -= 2;
      goto LABEL_34;
    }
    v113 = v52;
    goto LABEL_56;
  }
  v60 = *(_QWORD *)(a1 + 24);
  if (v60)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *, WTF **))(*(_QWORD *)v60 + 48))(v60, a2, &v136, &v135, &v134);
    goto LABEL_34;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, __int16 *, WTF **))(**(_QWORD **)(a1 + 32) + 32))(&v132, *(_QWORD *)(a1 + 32), &v136, &v135, &v134);
  if (!v133)
  {
    v122 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v122 = 0x500000001;
    *((_QWORD *)v122 + 3) = 0;
    *((_QWORD *)v122 + 4) = 0;
    *((_QWORD *)v122 + 2) = 0;
    v137 = v122;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v137);
    v103 = v137;
    if (!v137)
      goto LABEL_62;
    v104 = *(_DWORD *)v137 - 1;
    if (*(_DWORD *)v137 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v137, v45, v46, v47, v48, v49, v50, v51);
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  v96 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v96 + 48))
    *(_BYTE *)(v96 + 48) = *(_QWORD *)(v96 + 48);
  LODWORD(v137) = 5;
  v97 = v132;
  if (v132)
    *(_DWORD *)v132 += 2;
  v138 = v97;
  v98 = *(unsigned int *)(v96 + 36);
  if ((_DWORD)v98 != *(_DWORD *)(v96 + 32))
  {
    v131 = *(_QWORD *)(v96 + 24) + 16 * v98;
    *(_DWORD *)v131 = 5;
    *(_QWORD *)(v131 + 8) = v97;
    *(_DWORD *)(v96 + 36) = v98 + 1;
    goto LABEL_62;
  }
  v99 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96 + 24, v98 + 1, (unint64_t)&v137);
  v100 = *(unsigned int *)(v96 + 36);
  v101 = *(_QWORD *)(v96 + 24) + 16 * v100;
  *(_DWORD *)v101 = *(_DWORD *)v99;
  v102 = *(_QWORD *)(v99 + 8);
  *(_QWORD *)(v99 + 8) = 0;
  *(_QWORD *)(v101 + 8) = v102;
  v103 = v138;
  *(_DWORD *)(v96 + 36) = v100 + 1;
  v138 = 0;
  if (v103)
  {
    v104 = *(_DWORD *)v103 - 2;
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
      goto LABEL_62;
    }
LABEL_59:
    *(_DWORD *)v103 = v104;
  }
LABEL_62:
  if (v133)
  {
    v113 = v132;
    v132 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
      {
LABEL_56:
        WTF::StringImpl::~StringImpl(v113, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
        goto LABEL_34;
      }
      *(_DWORD *)v113 -= 2;
    }
  }
LABEL_34:
  v62 = v134;
  v134 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 1)
      WTF::JSONImpl::Value::operator delete(v62, v45, v46, v47, v48, v49, v50, v51);
    else
      --*(_DWORD *)v62;
  }
  v63 = v136;
  v136 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::DOMDebuggerBackendDispatcher::removeURLBreakpoint(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  __int16 v113;
  WTF::StringImpl *v114;
  WTF *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF **v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x300000002;
  *(_QWORD *)(v8 + 8) = "url";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v111 = (WTF::StringImpl *)v8;
  v115 = (WTF *)&off_1E3593B90;
  v116 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v117 = 0;
  v118 = &v115;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v114, v6, v7, &v111, 1, (uint64_t)&v115);
  v17 = v118;
  if (v118 == &v115)
  {
    v17 = &v115;
  }
  else
  {
    if (!v118)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "isRegex";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v111 = (WTF::StringImpl *)v20;
  v115 = (WTF *)&unk_1E3593AB8;
  v116 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v117 = 0;
  v118 = &v115;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v111, 0, (uint64_t)&v115);
  v30 = v118;
  if (v118 == &v115)
  {
    v30 = &v115;
  }
  else
  {
    if (!v118)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v113 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4D00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'DOMDebugger.removeURLBreakpoint' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v115) = 3;
    *(_DWORD *)v32 = v41;
    v116 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v115);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v116;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v116 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_27;
    }
    v92 = v40;
    goto LABEL_44;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *))(*(_QWORD *)v48 + 56))(v48, a2, &v114, &v113);
    goto LABEL_27;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, __int16 *))(**(_QWORD **)(a1 + 32)
                                                                                                + 40))(&v111, *(_QWORD *)(a1 + 32), &v114, &v113);
  if (!v112)
  {
    v101 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *((_QWORD *)v101 + 3) = 0;
    *((_QWORD *)v101 + 4) = 0;
    *((_QWORD *)v101 + 2) = 0;
    v115 = v101;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v115);
    v82 = v115;
    if (!v115)
      goto LABEL_50;
    v83 = *(_DWORD *)v115 - 1;
    if (*(_DWORD *)v115 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v115, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  v75 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v75 + 48))
    *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
  LODWORD(v115) = 5;
  v76 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v116 = v76;
  v77 = *(unsigned int *)(v75 + 36);
  if ((_DWORD)v77 != *(_DWORD *)(v75 + 32))
  {
    v110 = *(_QWORD *)(v75 + 24) + 16 * v77;
    *(_DWORD *)v110 = 5;
    *(_QWORD *)(v110 + 8) = v76;
    *(_DWORD *)(v75 + 36) = v77 + 1;
    goto LABEL_50;
  }
  v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v115);
  v79 = *(unsigned int *)(v75 + 36);
  v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
  *(_DWORD *)v80 = *(_DWORD *)v78;
  v81 = *(_QWORD *)(v78 + 8);
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v80 + 8) = v81;
  v82 = v116;
  *(_DWORD *)(v75 + 36) = v79 + 1;
  v116 = 0;
  if (v82)
  {
    v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      goto LABEL_50;
    }
LABEL_47:
    *(_DWORD *)v82 = v83;
  }
LABEL_50:
  if (v112)
  {
    v92 = v111;
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
LABEL_44:
        WTF::StringImpl::~StringImpl(v92, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        goto LABEL_27;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
LABEL_27:
  v50 = v114;
  v114 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOMDebugger::DOMBreakpointType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x10000008FLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"subtree-modified", 16))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"attribute-modified", 18))
    {
      return 0x100000090;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"node-removed", 12))
    {
      return 0x100000091;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::DOMDebugger::EventBreakpointType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x100000092;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"animation-frame", 15))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"interval", 8))
    {
      return 0x100000093;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"listener", 8))
    {
      return 0x100000094;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"timeout", 7))
    {
      return 0x100000095;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void Inspector::DOMStorageBackendDispatcher::create(Inspector::DOMStorageBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591618;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xA00000002;
  *(_QWORD *)(v8 + 8) = "DOMStorage";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::DOMStorageBackendDispatcher *Inspector::DOMStorageBackendDispatcher::DOMStorageBackendDispatcher(Inspector::DOMStorageBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::DOMStorageBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DOMStorageBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591618;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xA00000002;
  *(_QWORD *)(v5 + 8) = "DOMStorage";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DOMStorageBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591618;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xA00000002;
  *(_QWORD *)(v5 + 8) = "DOMStorage";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::DOMStorageBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  void (*v27)(_QWORD *, uint64_t, WTF **);
  uint64_t v28;
  _QWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl **v100;
  const WTF::StringImpl *v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  int i;
  unsigned int v106;
  WTF *v107;
  WTF::StringImpl *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  WTF::StringImpl *v176;
  void (*v177)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v178;
  WTF::StringImpl *v179;
  void (*v180)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v181;
  WTF::StringImpl *v182;
  void (*v183)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v184;
  WTF::StringImpl *v185;
  void (*v186)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v170 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v170, v9, &v169);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if ((byte_1ECF587F6 & 1) != 0)
    goto LABEL_4;
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x600000002;
  *(_QWORD *)(v85 + 8) = "enable";
  *(_DWORD *)(v85 + 16) = 4;
  v170 = (WTF::StringImpl *)v85;
  v171 = (WTF::StringImpl *)Inspector::DOMStorageBackendDispatcher::enable;
  v172 = 0;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x700000002;
  *(_QWORD *)(v86 + 8) = "disable";
  *(_DWORD *)(v86 + 16) = 4;
  v173 = (WTF::StringImpl *)v86;
  v174 = Inspector::DOMStorageBackendDispatcher::disable;
  v175 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x1200000002;
  *(_QWORD *)(v87 + 8) = "getDOMStorageItems";
  *(_DWORD *)(v87 + 16) = 4;
  v176 = (WTF::StringImpl *)v87;
  v177 = Inspector::DOMStorageBackendDispatcher::getDOMStorageItems;
  v178 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x1100000002;
  *(_QWORD *)(v88 + 8) = "setDOMStorageItem";
  *(_DWORD *)(v88 + 16) = 4;
  v179 = (WTF::StringImpl *)v88;
  v180 = Inspector::DOMStorageBackendDispatcher::setDOMStorageItem;
  v181 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x1400000002;
  *(_QWORD *)(v89 + 8) = "removeDOMStorageItem";
  *(_DWORD *)(v89 + 16) = 4;
  v182 = (WTF::StringImpl *)v89;
  v183 = Inspector::DOMStorageBackendDispatcher::removeDOMStorageItem;
  v184 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1400000002;
  *(_QWORD *)(v90 + 8) = "clearDOMStorageItems";
  *(_DWORD *)(v90 + 16) = 4;
  v185 = (WTF::StringImpl *)v90;
  v186 = Inspector::DOMStorageBackendDispatcher::clearDOMStorageItems;
  v187 = 0;
  v91 = (_OWORD *)WTF::fastMalloc((WTF *)0x190);
  v167 = 0;
  *v91 = xmmword_199156B80;
  v91[2] = 0u;
  v91[3] = 0u;
  v91[4] = 0u;
  v91[5] = 0u;
  v91[6] = 0u;
  v91[7] = 0u;
  v91[8] = 0u;
  v91[9] = 0u;
  v91[10] = 0u;
  v91[11] = 0u;
  v91[12] = 0u;
  v91[13] = 0u;
  v91[14] = 0u;
  v91[15] = 0u;
  v91[16] = 0u;
  v91[17] = 0u;
  v91[18] = 0u;
  v91[19] = 0u;
  v91[20] = 0u;
  v91[21] = 0u;
  v91[22] = 0u;
  v91[23] = 0u;
  v91[24] = 0u;
  v91[1] = 0u;
  v168 = (WTF::StringImpl *)(v91 + 1);
  do
  {
    v98 = v168;
    if (v168
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, 8u), (v98 = v168) != 0))
    {
      v99 = *((_DWORD *)v98 - 2);
    }
    else
    {
      v99 = 0;
    }
    v100 = &v170 + 3 * v167;
    v101 = *v100;
    v102 = *((_DWORD *)*v100 + 4);
    if (v102 < 0x100)
      v103 = WTF::StringImpl::hashSlowCase(*v100);
    else
      v103 = v102 >> 8;
    v104 = 0;
    v165 = v100 + 1;
    for (i = 1; ; ++i)
    {
      v106 = v103 & v99;
      v107 = (WTF *)*((_QWORD *)v98 + 3 * (v103 & v99));
      if (v107 == (WTF *)-1)
      {
        v104 = (char *)v98 + 24 * v106;
        goto LABEL_70;
      }
      if (!v107)
        break;
      if (WTF::equal(v107, v101, v11))
        goto LABEL_86;
LABEL_70:
      v103 = i + v106;
    }
    v166 = (char *)v98 + 24 * v106;
    if (v104)
    {
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      *((_QWORD *)v104 + 2) = 0;
      --*((_DWORD *)v98 - 4);
      v166 = v104;
    }
    if (v101)
      *(_DWORD *)v101 += 2;
    *(_QWORD *)v166 = v101;
    *(_OWORD *)(v166 + 8) = *v165;
    v108 = v168;
    if (v168)
      v109 = *((_DWORD *)v168 - 3) + 1;
    else
      v109 = 1;
    *((_DWORD *)v168 - 3) = v109;
    v110 = (*((_DWORD *)v108 - 4) + v109);
    v111 = *((unsigned int *)v108 - 1);
    if (v111 > 0x400)
    {
      if (v111 <= 2 * v110)
      {
LABEL_81:
        v112 = (_DWORD)v111 << (6 * v109 >= (2 * v111));
        goto LABEL_85;
      }
    }
    else if (3 * v111 <= 4 * v110)
    {
      if ((_DWORD)v111)
        goto LABEL_81;
      v112 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, v112);
    }
LABEL_86:
    ++v167;
  }
  while (v167 != 6);
  v113 = v168;
  v168 = 0;
  qword_1ECF58830 = (uint64_t)v113;
  v114 = v185;
  v185 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v182;
  v182 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v179;
  v179 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  byte_1ECF587F6 = 1;
LABEL_4:
  v17 = qword_1ECF58830;
  if (!qword_1ECF58830)
    goto LABEL_20;
  v18 = *(_DWORD *)(qword_1ECF58830 - 8);
  v19 = *((_DWORD *)*a3 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v20 = v19 >> 8;
  v21 = 0;
  while (2)
  {
    v22 = v20 & v18;
    v23 = v17 + 24 * (v20 & v18);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 == -1)
    {
LABEL_11:
      v20 = ++v21 + v22;
      continue;
    }
    break;
  }
  if (!v24)
  {
    v25 = qword_1ECF58830;
    if (qword_1ECF58830)
    {
      v26 = *(_DWORD *)(qword_1ECF58830 - 4);
      v23 = qword_1ECF58830 + 24 * v26;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v24, *a3, v11))
    goto LABEL_11;
  v25 = qword_1ECF58830;
  if (qword_1ECF58830)
  {
    v26 = *(_DWORD *)(qword_1ECF58830 - 4);
LABEL_16:
    if (v23 == v25 + 24 * v26)
    {
LABEL_20:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = *a3;
      if (*a3)
      {
        v39 = *((_DWORD *)v38 + 1);
        *(_DWORD *)v38 += 2;
        if (v39 < 0)
          goto LABEL_115;
      }
      else
      {
        v39 = 0;
      }
      v40 = __OFADD__(v39, 15);
      v41 = v39 + 15;
      if (!v40 && !__OFADD__(v41, 12))
      {
        v42 = !v38 || (*((_BYTE *)v38 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v41 + 12), v42, (int8x16_t *)"'DOMStorage.", 0xCu, (uint64_t)v38, (int8x16_t *)"' was not found", 0xFu, (int **)&v168);
        v43 = v168;
        if (v168)
        {
          if (!*(_BYTE *)(v37 + 48))
            *(_BYTE *)(v37 + 48) = *(_QWORD *)(v37 + 48);
          LODWORD(v170) = 2;
          *(_DWORD *)v43 += 2;
          v171 = v43;
          v44 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v44 == *(_DWORD *)(v37 + 32))
          {
            v45 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 24, v44 + 1, (unint64_t)&v170);
            v46 = *(unsigned int *)(v37 + 36);
            v47 = *(_QWORD *)(v37 + 24) + 16 * v46;
            *(_DWORD *)v47 = *(_DWORD *)v45;
            v48 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v47 + 8) = v48;
            v49 = v171;
            *(_DWORD *)(v37 + 36) = v46 + 1;
            v171 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
          else
          {
            v50 = *(_QWORD *)(v37 + 24) + 16 * v44;
            *(_DWORD *)v50 = 2;
            *(_QWORD *)(v50 + 8) = v43;
            *(_DWORD *)(v37 + 36) = v44 + 1;
          }
          v51 = v168;
          v168 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              if (!v38)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v51 -= 2;
          }
          if (!v38)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
          goto LABEL_41;
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x19863CD50);
      }
LABEL_115:
      v168 = 0;
      goto LABEL_116;
    }
  }
  v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(v23 + 8);
  v28 = *(_QWORD *)(v23 + 16);
  v29 = (_QWORD *)(a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v29 + v27);
  v27(v29, a2, &v169);
LABEL_41:
  v52 = v169;
  v169 = 0;
  if (!v52)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v52 != 1)
  {
    --*(_DWORD *)v52;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v52, v30, v31, v32, v33, v34, v35, v36);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::DOMStorageBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DOMStorageBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DOMStorageBackendDispatcher::getDOMStorageItems(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD **v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  WTF *v116;
  WTF::StringImpl *v117;
  WTF *v118;
  WTF::StringImpl *v119;
  int v120;
  WTF *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  char v124;
  WTF **v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "storageId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v119 = (WTF::StringImpl *)v7;
  v122 = (WTF *)&off_1E3593C20;
  v125 = &v122;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v121, v5, v6, &v119, 1, (uint64_t)&v122);
  v16 = v125;
  if (v125 == &v122)
  {
    v16 = &v122;
  }
  else
  {
    if (!v125)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (!*(_DWORD *)(v17 + 36))
  {
    v34 = a1[3];
    if (v34)
    {
      v35 = v121;
      v121 = 0;
      v122 = v35;
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v34 + 32))(v34, a2, &v122);
      v36 = v122;
      v122 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
          WTF::JSONImpl::Value::operator delete(v36, v19, v20, v21, v22, v23, v24, v25);
        else
          --*(_DWORD *)v36;
      }
      goto LABEL_22;
    }
    v46 = a1[4];
    v47 = v121;
    v121 = 0;
    v122 = v47;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v46 + 16))(&v119, v46, &v122);
    v48 = v122;
    v122 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v19, v20, v21, v22, v23, v24, v25);
      else
        --*(_DWORD *)v48;
    }
    if (v120)
    {
      if (v120 != 1)
      {
        v115 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DOMStorageBackendDispatcher::setDOMStorageItem(v115);
        return;
      }
      v49 = a1[2];
      if (!*(_BYTE *)(v49 + 48))
        *(_BYTE *)(v49 + 48) = *(_QWORD *)(v49 + 48);
      LODWORD(v122) = 5;
      v50 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      v123 = v50;
      v51 = *(unsigned int *)(v49 + 36);
      if ((_DWORD)v51 == *(_DWORD *)(v49 + 32))
      {
        v52 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v49 + 24, v51 + 1, (unint64_t)&v122);
        v53 = *(unsigned int *)(v49 + 36);
        v54 = *(_QWORD *)(v49 + 24) + 16 * v53;
        *(_DWORD *)v54 = *(_DWORD *)v52;
        v55 = *(_QWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = 0;
        *(_QWORD *)(v54 + 8) = v55;
        v56 = v123;
        *(_DWORD *)(v49 + 36) = v53 + 1;
        v123 = 0;
        if (!v56)
          goto LABEL_59;
        v57 = *(_DWORD *)v56 - 2;
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
          goto LABEL_59;
        }
        goto LABEL_56;
      }
      v103 = *(_QWORD *)(v49 + 24) + 16 * v51;
      *(_DWORD *)v103 = 5;
      *(_QWORD *)(v103 + 8) = v50;
      *(_DWORD *)(v49 + 36) = v51 + 1;
    }
    else
    {
      v74 = v119;
      v119 = 0;
      v75 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v75 = 0x500000001;
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = 0;
      *(_QWORD *)(v75 + 16) = 0;
      v118 = (WTF *)v75;
      v76 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v76 = 0x700000002;
      *(_QWORD *)(v76 + 8) = "entries";
      *(_DWORD *)(v76 + 16) = 4;
      v116 = v74;
      v117 = (WTF::StringImpl *)v76;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v75 + 16), &v117, (const WTF::StringImpl *)&v116, v77, v78, v79, v80, v81, (uint64_t)&v122);
      if (v124)
      {
        v89 = (uint64_t *)(v75 + 24);
        v90 = *(unsigned int *)(v75 + 36);
        if ((_DWORD)v90 == *(_DWORD *)(v75 + 32))
        {
          v112 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v117);
          v90 = *(unsigned int *)(v75 + 36);
          v113 = *(_QWORD *)(v75 + 24);
          v114 = *v112;
          if (*v112)
            *v114 += 2;
          *(_QWORD *)(v113 + 8 * v90) = v114;
        }
        else
        {
          v91 = *v89;
          v92 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v91 + 8 * v90) = v92;
        }
        *(_DWORD *)(v75 + 36) = v90 + 1;
      }
      v93 = v116;
      v116 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 1)
          WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
        else
          --*(_DWORD *)v93;
      }
      v94 = v117;
      v117 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
        {
          WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v94 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v118);
      v56 = v118;
      if (!v118)
        goto LABEL_59;
      v57 = *(_DWORD *)v118 - 1;
      if (*(_DWORD *)v118 != 1)
      {
LABEL_56:
        *(_DWORD *)v56 = v57;
        goto LABEL_59;
      }
      WTF::JSONImpl::Value::operator delete(v118, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_59:
    if (v120 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3593948[v120])(&v122, &v119);
    goto LABEL_22;
  }
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  v26 = (WTF::StringImpl *)v18;
  *(_QWORD *)v18 = 0x4B00000002;
  *(_QWORD *)(v18 + 8) = "Some arguments of method 'DOMStorage.getDOMStorageItems' can't be processed";
  v27 = 4;
  *(_DWORD *)(v18 + 16) = 4;
  if (!*(_BYTE *)(v17 + 48))
  {
    *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
    v27 = *(_DWORD *)v18 + 2;
  }
  LODWORD(v122) = 3;
  *(_DWORD *)v18 = v27;
  v123 = (WTF::StringImpl *)v18;
  v28 = *(unsigned int *)(v17 + 36);
  if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
  {
    v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v122);
    v30 = *(unsigned int *)(v17 + 36);
    v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
    *(_DWORD *)v31 = *(_DWORD *)v29;
    v32 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v29 + 8) = 0;
    *(_QWORD *)(v31 + 8) = v32;
    v33 = v123;
    *(_DWORD *)(v17 + 36) = v30 + 1;
    v123 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  else
  {
    v37 = *(_QWORD *)(v17 + 24) + 16 * v28;
    *(_DWORD *)v37 = 3;
    *(_QWORD *)(v37 + 8) = v18;
    *(_DWORD *)(v17 + 36) = v28 + 1;
  }
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
LABEL_22:
  if (v121)
  {
    if (*(_DWORD *)v121 == 1)
      WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v121;
  }
}

void Inspector::DOMStorageBackendDispatcher::setDOMStorageItem(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF *v60;
  WTF::StringImpl *v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  int v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  char v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF *v148;
  WTF *v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  WTF **v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "storageId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v144 = (WTF::StringImpl *)v8;
  v149 = (WTF *)&off_1E3593C20;
  v152 = &v149;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v148, v6, v7, &v144, 1, (uint64_t)&v149);
  v17 = v152;
  if (v152 == &v149)
  {
    v17 = &v149;
  }
  else
  {
    if (!v152)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x300000002;
  *(_QWORD *)(v20 + 8) = "key";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v144 = (WTF::StringImpl *)v20;
  v149 = (WTF *)&off_1E3593B90;
  v150 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v151 = 0;
  v152 = &v149;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v147, v18, v19, &v144, 1, (uint64_t)&v149);
  v29 = v152;
  if (v152 == &v149)
  {
    v29 = &v149;
  }
  else
  {
    if (!v152)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x500000002;
  *(_QWORD *)(v32 + 8) = "value";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v144 = (WTF::StringImpl *)v32;
  v149 = (WTF *)&off_1E3593B90;
  v150 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v151 = 0;
  v152 = &v149;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v146, v30, v31, &v144, 1, (uint64_t)&v149);
  v41 = v152;
  if (v152 == &v149)
  {
    v41 = &v149;
  }
  else
  {
    if (!v152)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = a1[2];
  if (*(_DWORD *)(v42 + 36))
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    v51 = (WTF::StringImpl *)v43;
    *(_QWORD *)v43 = 0x4A00000002;
    *(_QWORD *)(v43 + 8) = "Some arguments of method 'DOMStorage.setDOMStorageItem' can't be processed";
    v52 = 4;
    *(_DWORD *)(v43 + 16) = 4;
    if (!*(_BYTE *)(v42 + 48))
    {
      *(_BYTE *)(v42 + 48) = *(_QWORD *)(v42 + 48);
      v52 = *(_DWORD *)v43 + 2;
    }
    LODWORD(v149) = 3;
    *(_DWORD *)v43 = v52;
    v150 = (WTF::StringImpl *)v43;
    v53 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v42 + 32))
    {
      v54 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 24, v53 + 1, (unint64_t)&v149);
      v55 = *(unsigned int *)(v42 + 36);
      v56 = *(_QWORD *)(v42 + 24) + 16 * v55;
      *(_DWORD *)v56 = *(_DWORD *)v54;
      v57 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v56 + 8) = v57;
      v58 = v150;
      *(_DWORD *)(v42 + 36) = v55 + 1;
      v150 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v44, v45, v46, v47, v48, v49, v50);
          WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      v63 = *(_QWORD *)(v42 + 24) + 16 * v53;
      *(_DWORD *)v63 = 3;
      *(_QWORD *)(v63 + 8) = v43;
      *(_DWORD *)(v42 + 36) = v53 + 1;
    }
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      goto LABEL_62;
    }
    v61 = v51;
    goto LABEL_52;
  }
  v59 = a1[3];
  if (v59)
  {
    v60 = v148;
    v148 = 0;
    v149 = v60;
    (*(void (**)(uint64_t, uint64_t, WTF **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v59 + 40))(v59, a2, &v149, &v147, &v146);
    v61 = v149;
    v149 = 0;
    if (!v61)
      goto LABEL_62;
    v62 = *(_DWORD *)v61 - 1;
    if (*(_DWORD *)v61 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v61, v44, v45, v46, v47, v48, v49, v50);
      goto LABEL_62;
    }
LABEL_61:
    *(_DWORD *)v61 = v62;
    goto LABEL_62;
  }
  v88 = a1[4];
  v89 = v148;
  v148 = 0;
  v149 = v89;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v88 + 24))(&v144, v88, &v149, &v147, &v146);
  v90 = v149;
  v149 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 1)
      WTF::JSONImpl::Value::operator delete(v90, v44, v45, v46, v47, v48, v49, v50);
    else
      --*(_DWORD *)v90;
  }
  if (!v145)
  {
    v116 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v116 = 0x500000001;
    *((_QWORD *)v116 + 3) = 0;
    *((_QWORD *)v116 + 4) = 0;
    *((_QWORD *)v116 + 2) = 0;
    v149 = v116;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v149);
    v98 = v149;
    if (!v149)
      goto LABEL_58;
    v99 = *(_DWORD *)v149 - 1;
    if (*(_DWORD *)v149 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v149, v44, v45, v46, v47, v48, v49, v50);
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  v91 = a1[2];
  if (!*(_BYTE *)(v91 + 48))
    *(_BYTE *)(v91 + 48) = *(_QWORD *)(v91 + 48);
  LODWORD(v149) = 5;
  v92 = v144;
  if (v144)
    *(_DWORD *)v144 += 2;
  v150 = v92;
  v93 = *(unsigned int *)(v91 + 36);
  if ((_DWORD)v93 != *(_DWORD *)(v91 + 32))
  {
    v125 = *(_QWORD *)(v91 + 24) + 16 * v93;
    *(_DWORD *)v125 = 5;
    *(_QWORD *)(v125 + 8) = v92;
    *(_DWORD *)(v91 + 36) = v93 + 1;
    goto LABEL_58;
  }
  v94 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91 + 24, v93 + 1, (unint64_t)&v149);
  v95 = *(unsigned int *)(v91 + 36);
  v96 = *(_QWORD *)(v91 + 24) + 16 * v95;
  *(_DWORD *)v96 = *(_DWORD *)v94;
  v97 = *(_QWORD *)(v94 + 8);
  *(_QWORD *)(v94 + 8) = 0;
  *(_QWORD *)(v96 + 8) = v97;
  v98 = v150;
  *(_DWORD *)(v91 + 36) = v95 + 1;
  v150 = 0;
  if (v98)
  {
    v99 = *(_DWORD *)v98 - 2;
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      goto LABEL_58;
    }
LABEL_55:
    *(_DWORD *)v98 = v99;
  }
LABEL_58:
  if (v145)
  {
    v61 = v144;
    v144 = 0;
    if (v61)
    {
      v62 = *(_DWORD *)v61 - 2;
      if (*(_DWORD *)v61 == 2)
      {
LABEL_52:
        WTF::StringImpl::~StringImpl(v61, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        goto LABEL_62;
      }
      goto LABEL_61;
    }
  }
LABEL_62:
  v126 = v146;
  v146 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v147;
  v147 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  if (v148)
  {
    if (*(_DWORD *)v148 == 1)
      WTF::JSONImpl::Value::operator delete(v148, v44, v45, v46, v47, v48, v49, v50);
    else
      --*(_DWORD *)v148;
  }
}

void Inspector::DOMStorageBackendDispatcher::removeDOMStorageItem(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  int v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  char v116;
  WTF::StringImpl *v117;
  WTF *v118;
  WTF *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WTF **v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "storageId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v115 = (WTF::StringImpl *)v8;
  v119 = (WTF *)&off_1E3593C20;
  v122 = &v119;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v118, v6, v7, &v115, 1, (uint64_t)&v119);
  v17 = v122;
  if (v122 == &v119)
  {
    v17 = &v119;
  }
  else
  {
    if (!v122)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x300000002;
  *(_QWORD *)(v20 + 8) = "key";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v115 = (WTF::StringImpl *)v20;
  v119 = (WTF *)&off_1E3593B90;
  v120 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v121 = 0;
  v122 = &v119;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v117, v18, v19, &v115, 1, (uint64_t)&v119);
  v29 = v122;
  if (v122 == &v119)
  {
    v29 = &v119;
  }
  else
  {
    if (!v122)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4D00000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'DOMStorage.removeDOMStorageItem' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v119) = 3;
    *(_DWORD *)v31 = v40;
    v120 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v119);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v120;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v120 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v51 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v51 = 3;
      *(_QWORD *)(v51 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_54;
    }
    v49 = v39;
    goto LABEL_44;
  }
  v47 = a1[3];
  if (v47)
  {
    v48 = v118;
    v118 = 0;
    v119 = v48;
    (*(void (**)(uint64_t, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v47 + 48))(v47, a2, &v119, &v117);
    v49 = v119;
    v119 = 0;
    if (!v49)
      goto LABEL_54;
    v50 = *(_DWORD *)v49 - 1;
    if (*(_DWORD *)v49 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v49, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_54;
    }
LABEL_53:
    *(_DWORD *)v49 = v50;
    goto LABEL_54;
  }
  v68 = a1[4];
  v69 = v118;
  v118 = 0;
  v119 = v69;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **, WTF::StringImpl **))(*(_QWORD *)v68 + 32))(&v115, v68, &v119, &v117);
  v70 = v119;
  v119 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v70;
  }
  if (!v116)
  {
    v96 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v96 = 0x500000001;
    *((_QWORD *)v96 + 3) = 0;
    *((_QWORD *)v96 + 4) = 0;
    *((_QWORD *)v96 + 2) = 0;
    v119 = v96;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v119);
    v78 = v119;
    if (!v119)
      goto LABEL_50;
    v79 = *(_DWORD *)v119 - 1;
    if (*(_DWORD *)v119 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v119, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  v71 = a1[2];
  if (!*(_BYTE *)(v71 + 48))
    *(_BYTE *)(v71 + 48) = *(_QWORD *)(v71 + 48);
  LODWORD(v119) = 5;
  v72 = v115;
  if (v115)
    *(_DWORD *)v115 += 2;
  v120 = v72;
  v73 = *(unsigned int *)(v71 + 36);
  if ((_DWORD)v73 != *(_DWORD *)(v71 + 32))
  {
    v105 = *(_QWORD *)(v71 + 24) + 16 * v73;
    *(_DWORD *)v105 = 5;
    *(_QWORD *)(v105 + 8) = v72;
    *(_DWORD *)(v71 + 36) = v73 + 1;
    goto LABEL_50;
  }
  v74 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71 + 24, v73 + 1, (unint64_t)&v119);
  v75 = *(unsigned int *)(v71 + 36);
  v76 = *(_QWORD *)(v71 + 24) + 16 * v75;
  *(_DWORD *)v76 = *(_DWORD *)v74;
  v77 = *(_QWORD *)(v74 + 8);
  *(_QWORD *)(v74 + 8) = 0;
  *(_QWORD *)(v76 + 8) = v77;
  v78 = v120;
  *(_DWORD *)(v71 + 36) = v75 + 1;
  v120 = 0;
  if (v78)
  {
    v79 = *(_DWORD *)v78 - 2;
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      goto LABEL_50;
    }
LABEL_47:
    *(_DWORD *)v78 = v79;
  }
LABEL_50:
  if (v116)
  {
    v49 = v115;
    v115 = 0;
    if (v49)
    {
      v50 = *(_DWORD *)v49 - 2;
      if (*(_DWORD *)v49 == 2)
      {
LABEL_44:
        WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
        goto LABEL_54;
      }
      goto LABEL_53;
    }
  }
LABEL_54:
  v106 = v117;
  v117 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  if (v118)
  {
    if (*(_DWORD *)v118 == 1)
      WTF::JSONImpl::Value::operator delete(v118, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v118;
  }
}

void Inspector::DOMStorageBackendDispatcher::clearDOMStorageItems(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  char v86;
  WTF *v87;
  WTF *v88;
  WTF::StringImpl *v89;
  WTF **v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "storageId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v85 = (WTF::StringImpl *)v7;
  v88 = (WTF *)&off_1E3593C20;
  v90 = &v88;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v87, v5, v6, &v85, 1, (uint64_t)&v88);
  v16 = v90;
  if (v90 == &v88)
  {
    v16 = &v88;
  }
  else
  {
    if (!v90)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4D00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'DOMStorage.clearDOMStorageItems' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v88) = 3;
    *(_DWORD *)v18 = v27;
    v89 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v88);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v89;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v89 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v38 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v38 = 3;
      *(_QWORD *)(v38 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_46;
    }
    v36 = v26;
    goto LABEL_36;
  }
  v34 = a1[3];
  if (v34)
  {
    v35 = v87;
    v87 = 0;
    v88 = v35;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v34 + 56))(v34, a2, &v88);
    v36 = v88;
    v88 = 0;
    if (!v36)
      goto LABEL_46;
    v37 = *(_DWORD *)v36 - 1;
    if (*(_DWORD *)v36 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v36, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_46;
    }
LABEL_45:
    *(_DWORD *)v36 = v37;
    goto LABEL_46;
  }
  v47 = a1[4];
  v48 = v87;
  v87 = 0;
  v88 = v48;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v47 + 40))(&v85, v47, &v88);
  v49 = v88;
  v88 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v49;
  }
  if (!v86)
  {
    v75 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v75 = 0x500000001;
    *((_QWORD *)v75 + 3) = 0;
    *((_QWORD *)v75 + 4) = 0;
    *((_QWORD *)v75 + 2) = 0;
    v88 = v75;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v88);
    v57 = v88;
    if (!v88)
      goto LABEL_42;
    v58 = *(_DWORD *)v88 - 1;
    if (*(_DWORD *)v88 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v88, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v50 = a1[2];
  if (!*(_BYTE *)(v50 + 48))
    *(_BYTE *)(v50 + 48) = *(_QWORD *)(v50 + 48);
  LODWORD(v88) = 5;
  v51 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  v89 = v51;
  v52 = *(unsigned int *)(v50 + 36);
  if ((_DWORD)v52 != *(_DWORD *)(v50 + 32))
  {
    v84 = *(_QWORD *)(v50 + 24) + 16 * v52;
    *(_DWORD *)v84 = 5;
    *(_QWORD *)(v84 + 8) = v51;
    *(_DWORD *)(v50 + 36) = v52 + 1;
    goto LABEL_42;
  }
  v53 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 24, v52 + 1, (unint64_t)&v88);
  v54 = *(unsigned int *)(v50 + 36);
  v55 = *(_QWORD *)(v50 + 24) + 16 * v54;
  *(_DWORD *)v55 = *(_DWORD *)v53;
  v56 = *(_QWORD *)(v53 + 8);
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v55 + 8) = v56;
  v57 = v89;
  *(_DWORD *)(v50 + 36) = v54 + 1;
  v89 = 0;
  if (v57)
  {
    v58 = *(_DWORD *)v57 - 2;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v57 = v58;
  }
LABEL_42:
  if (v86)
  {
    v36 = v85;
    v85 = 0;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }
LABEL_46:
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v87;
  }
}

void Inspector::DatabaseBackendDispatcher::create(Inspector::DatabaseBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591640;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "Database";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::DatabaseBackendDispatcher *Inspector::DatabaseBackendDispatcher::DatabaseBackendDispatcher(Inspector::DatabaseBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::DatabaseBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DatabaseBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591640;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "Database";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DatabaseBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591640;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "Database";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::DatabaseBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"enable", 6))
  {
    Inspector::DatabaseBackendDispatcher::enable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"disable", 7))
  {
    Inspector::DatabaseBackendDispatcher::disable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"getDatabaseTableNames", 21))
  {
    Inspector::DatabaseBackendDispatcher::getDatabaseTableNames(a1, a2, &v72);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"executeSQL", 10))
  {
    Inspector::DatabaseBackendDispatcher::executeSQL((_QWORD *)a1, a2, &v72);
    goto LABEL_33;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_45:
      v71 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 10))
    goto LABEL_45;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 10), v37, (int8x16_t *)"'Database.", 0xAu, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x19863EA24);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_33;
      goto LABEL_31;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_33:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::DatabaseBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DatabaseBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DatabaseBackendDispatcher::getDatabaseTableNames(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF *v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xA00000002;
  *(_QWORD *)(v7 + 8) = "databaseId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4C00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Database.getDatabaseTableNames' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DatabaseBackendDispatcher::executeSQL(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v127;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v127 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v123;
      v123 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0xA00000002;
      *(_QWORD *)(v80 + 8) = "tableNames";
      *(_DWORD *)(v80 + 16) = 4;
      v120 = v78;
      v121 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v79 + 16), &v121, (const WTF::StringImpl *)&v120, v81, v82, v83, v84, v85, (uint64_t)&v126);
      if ((_BYTE)v128)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v121);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v120;
      v120 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v121;
      v121 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593898[v124])(&v126, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 32))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::DatabaseBackendDispatcher::executeSQL(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t (**v86)();
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t (**v106)();
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t (***v109)();
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xA00000002;
  *(_QWORD *)(v8 + 8) = "databaseId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v104 = (WTF::StringImpl *)v8;
  v106 = &off_1E3593B90;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v108 = 0;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v105, v6, v7, &v104, 1, (uint64_t)&v106);
  v17 = v109;
  if (v109 == &v106)
  {
    v17 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "query";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v103 = (WTF::StringImpl *)v20;
  v106 = &off_1E3593B90;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v108 = 0;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v104, v18, v19, &v103, 1, (uint64_t)&v106);
  v29 = v109;
  if (v109 == &v106)
  {
    v29 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4100000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Database.executeSQL' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v31 = v40;
    v107 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v106);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v107;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v107 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  else
  {
    v47 = a1[3];
    if (v47)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 40))(v47, a2, &v105, &v104);
    }
    else
    {
      v83 = a1[4];
      v84 = WTF::fastMalloc((WTF *)0x28);
      v85 = (_DWORD *)a1[2];
      ++*v85;
      *(_DWORD *)(v84 + 8) = 1;
      *(_QWORD *)(v84 + 16) = v85;
      *(_QWORD *)(v84 + 24) = (int)a2;
      *(_BYTE *)(v84 + 32) = 0;
      *(_QWORD *)v84 = off_1E3591668;
      v106 = (uint64_t (**)())v84;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t (***)()))(*(_QWORD *)v83 + 24))(v83, &v105, &v104, &v106);
      v86 = v106;
      v106 = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 2) == 1)
          (*((void (**)(uint64_t (**)()))*v86 + 1))(v86);
        else
          --*((_DWORD *)v86 + 2);
      }
    }
  }
  v49 = v104;
  v104 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v105;
  v105 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

uint64_t Inspector::DatabaseBackendDispatcherHandler::ExecuteSQLCallback::ExecuteSQLCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591668;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591668;
  return result;
}

void Inspector::DatabaseBackendDispatcherHandler::ExecuteSQLCallback::sendSuccess(uint64_t a1, WTF **a2, WTF **a3, WTF **a4)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD **v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD **v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD **v86;
  uint64_t v87;
  _DWORD *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  _BYTE v92[16];
  char v93;

  v15 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v15 = 0x500000001;
  *((_QWORD *)v15 + 2) = 0;
  v16 = (uint64_t *)((char *)v15 + 16);
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 4) = 0;
  v91 = v15;
  if (*a2)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v17 = 0xB00000002;
    *(_QWORD *)(v17 + 8) = "columnNames";
    *(_DWORD *)(v17 + 16) = 4;
    v18 = *a2;
    *a2 = 0;
    v89 = v18;
    v90 = (WTF::StringImpl *)v17;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v16, &v90, (const WTF::StringImpl *)&v89, v19, v20, v21, v22, v23, (uint64_t)v92);
    if (v93)
    {
      v24 = (uint64_t *)((char *)v15 + 24);
      v25 = *((unsigned int *)v15 + 9);
      if ((_DWORD)v25 == *((_DWORD *)v15 + 8))
      {
        v80 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v90);
        v25 = *((unsigned int *)v15 + 9);
        v81 = *((_QWORD *)v15 + 3);
        v82 = *v80;
        if (*v80)
          *v82 += 2;
        *(_QWORD *)(v81 + 8 * v25) = v82;
      }
      else
      {
        v26 = *v24;
        v27 = v90;
        if (v90)
          *(_DWORD *)v90 += 2;
        *(_QWORD *)(v26 + 8 * v25) = v27;
      }
      *((_DWORD *)v15 + 9) = v25 + 1;
    }
    v28 = v89;
    v89 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
        WTF::JSONImpl::Value::operator delete(v28, v8, v9, v10, v11, v12, v13, v14);
      else
        --*(_DWORD *)v28;
    }
    v29 = v90;
    v90 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  if (*a3)
  {
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x600000002;
    *(_QWORD *)(v30 + 8) = "values";
    *(_DWORD *)(v30 + 16) = 4;
    v31 = *a3;
    *a3 = 0;
    v89 = v31;
    v90 = (WTF::StringImpl *)v30;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v16, &v90, (const WTF::StringImpl *)&v89, v32, v33, v34, v35, v36, (uint64_t)v92);
    if (v93)
    {
      v37 = (uint64_t *)((char *)v15 + 24);
      v38 = *((unsigned int *)v15 + 9);
      if ((_DWORD)v38 == *((_DWORD *)v15 + 8))
      {
        v83 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v90);
        v38 = *((unsigned int *)v15 + 9);
        v84 = *((_QWORD *)v15 + 3);
        v85 = *v83;
        if (*v83)
          *v85 += 2;
        *(_QWORD *)(v84 + 8 * v38) = v85;
      }
      else
      {
        v39 = *v37;
        v40 = v90;
        if (v90)
          *(_DWORD *)v90 += 2;
        *(_QWORD *)(v39 + 8 * v38) = v40;
      }
      *((_DWORD *)v15 + 9) = v38 + 1;
    }
    v41 = v89;
    v89 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::JSONImpl::Value::operator delete(v41, v8, v9, v10, v11, v12, v13, v14);
      else
        --*(_DWORD *)v41;
    }
    v42 = v90;
    v90 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  if (*a4)
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x800000002;
    *(_QWORD *)(v43 + 8) = "sqlError";
    *(_DWORD *)(v43 + 16) = 4;
    v44 = *a4;
    *a4 = 0;
    v89 = v44;
    v90 = (WTF::StringImpl *)v43;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v16, (WTF::AtomStringImpl *)&v90, (const WTF::StringImpl *)&v89, v45, v46, v47, v48, v49, (uint64_t)v92);
    if (v93)
    {
      v50 = (uint64_t *)((char *)v15 + 24);
      v51 = *((unsigned int *)v15 + 9);
      if ((_DWORD)v51 == *((_DWORD *)v15 + 8))
      {
        v86 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v90);
        v51 = *((unsigned int *)v15 + 9);
        v87 = *((_QWORD *)v15 + 3);
        v88 = *v86;
        if (*v86)
          *v88 += 2;
        *(_QWORD *)(v87 + 8 * v51) = v88;
      }
      else
      {
        v52 = *v50;
        v53 = v90;
        if (v90)
          *(_DWORD *)v90 += 2;
        *(_QWORD *)(v52 + 8 * v51) = v53;
      }
      *((_DWORD *)v15 + 9) = v51 + 1;
    }
    v54 = v89;
    v89 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 1)
        WTF::JSONImpl::Value::operator delete(v54, v8, v9, v10, v11, v12, v13, v14);
      else
        --*(_DWORD *)v54;
    }
    v55 = v90;
    v90 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::~StringImpl(v55, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
      else
      {
        *(_DWORD *)v55 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 32)
    || (*(_BYTE *)(a1 + 32) = 1,
        Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v91),
        (v15 = v91) != 0))
  {
    if (*(_DWORD *)v15 == 1)
      WTF::JSONImpl::Value::operator delete(v15, v8, v9, v10, v11, v12, v13, v14);
    else
      --*(_DWORD *)v15;
  }
}

void Inspector::DebuggerBackendDispatcher::create(Inspector::DebuggerBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591688;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "Debugger";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::DebuggerBackendDispatcher *Inspector::DebuggerBackendDispatcher::DebuggerBackendDispatcher(Inspector::DebuggerBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::DebuggerBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DebuggerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591688;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "Debugger";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::DebuggerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591688;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "Debugger";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::DebuggerBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  void (*v28)(_QWORD *, uint64_t, WTF **);
  uint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl **v124;
  const WTF::StringImpl *v125;
  unsigned int v126;
  unsigned int v127;
  char *v128;
  int i;
  unsigned int v130;
  WTF *v131;
  WTF::StringImpl *v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t j;
  WTF::StringImpl *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  char *v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  WTF *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t *);
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t *);
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t *);
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v211;
  uint64_t v212;
  void (*v213)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t, uint64_t *);
  uint64_t v217;
  uint64_t v218;
  void (*v219)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v220;
  uint64_t v221;
  void (*v222)(uint64_t, uint64_t, uint64_t *);
  uint64_t v223;
  uint64_t v224;
  void (*v225)(uint64_t, uint64_t, uint64_t *);
  uint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t, uint64_t, uint64_t *);
  uint64_t v229;
  uint64_t v230;
  void (*v231)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v232;
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v235;
  uint64_t v236;
  void (*v237)(uint64_t, uint64_t, uint64_t *);
  uint64_t v238;
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v152 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v152, v9, &v151);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = &unk_1ECF58000;
  if ((byte_1ECF587F7 & 1) != 0)
    goto LABEL_4;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x600000002;
  *(_QWORD *)(v86 + 8) = "enable";
  *(_DWORD *)(v86 + 16) = 4;
  v152 = (WTF::StringImpl *)v86;
  v153 = (WTF::StringImpl *)Inspector::DebuggerBackendDispatcher::enable;
  v154 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x700000002;
  *(_QWORD *)(v87 + 8) = "disable";
  *(_DWORD *)(v87 + 16) = 4;
  v155 = v87;
  v156 = Inspector::DebuggerBackendDispatcher::disable;
  v157 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x1700000002;
  *(_QWORD *)(v88 + 8) = "setAsyncStackTraceDepth";
  *(_DWORD *)(v88 + 16) = 4;
  v158 = v88;
  v159 = Inspector::DebuggerBackendDispatcher::setAsyncStackTraceDepth;
  v160 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x1400000002;
  *(_QWORD *)(v89 + 8) = "setBreakpointsActive";
  *(_DWORD *)(v89 + 16) = 4;
  v161 = v89;
  v162 = Inspector::DebuggerBackendDispatcher::setBreakpointsActive;
  v163 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1200000002;
  *(_QWORD *)(v90 + 8) = "setBreakpointByUrl";
  *(_DWORD *)(v90 + 16) = 4;
  v164 = v90;
  v165 = Inspector::DebuggerBackendDispatcher::setBreakpointByUrl;
  v166 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0xD00000002;
  *(_QWORD *)(v91 + 8) = "setBreakpoint";
  *(_DWORD *)(v91 + 16) = 4;
  v167 = v91;
  v168 = Inspector::DebuggerBackendDispatcher::setBreakpoint;
  v169 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x1000000002;
  *(_QWORD *)(v92 + 8) = "removeBreakpoint";
  *(_DWORD *)(v92 + 16) = 4;
  v170 = v92;
  v171 = Inspector::DebuggerBackendDispatcher::removeBreakpoint;
  v172 = 0;
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x1500000002;
  *(_QWORD *)(v93 + 8) = "addSymbolicBreakpoint";
  *(_DWORD *)(v93 + 16) = 4;
  v173 = v93;
  v174 = Inspector::DebuggerBackendDispatcher::addSymbolicBreakpoint;
  v175 = 0;
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x1800000002;
  *(_QWORD *)(v94 + 8) = "removeSymbolicBreakpoint";
  *(_DWORD *)(v94 + 16) = 4;
  v176 = v94;
  v177 = Inspector::DebuggerBackendDispatcher::removeSymbolicBreakpoint;
  v178 = 0;
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0x1800000002;
  *(_QWORD *)(v95 + 8) = "continueUntilNextRunLoop";
  *(_DWORD *)(v95 + 16) = 4;
  v179 = v95;
  v180 = Inspector::DebuggerBackendDispatcher::continueUntilNextRunLoop;
  v181 = 0;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0x1200000002;
  *(_QWORD *)(v96 + 8) = "continueToLocation";
  *(_DWORD *)(v96 + 16) = 4;
  v182 = v96;
  v183 = Inspector::DebuggerBackendDispatcher::continueToLocation;
  v184 = 0;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0x800000002;
  *(_QWORD *)(v97 + 8) = "stepNext";
  *(_DWORD *)(v97 + 16) = 4;
  v185 = v97;
  v186 = Inspector::DebuggerBackendDispatcher::stepNext;
  v187 = 0;
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x800000002;
  *(_QWORD *)(v98 + 8) = "stepOver";
  *(_DWORD *)(v98 + 16) = 4;
  v188 = v98;
  v189 = Inspector::DebuggerBackendDispatcher::stepOver;
  v190 = 0;
  v99 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v99 = 0x800000002;
  *(_QWORD *)(v99 + 8) = "stepInto";
  *(_DWORD *)(v99 + 16) = 4;
  v191 = v99;
  v192 = Inspector::DebuggerBackendDispatcher::stepInto;
  v193 = 0;
  v100 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v100 = 0x700000002;
  *(_QWORD *)(v100 + 8) = "stepOut";
  *(_DWORD *)(v100 + 16) = 4;
  v194 = v100;
  v195 = Inspector::DebuggerBackendDispatcher::stepOut;
  v196 = 0;
  v101 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v101 = 0x500000002;
  *(_QWORD *)(v101 + 8) = "pause";
  *(_DWORD *)(v101 + 16) = 4;
  v197 = v101;
  v198 = Inspector::DebuggerBackendDispatcher::pause;
  v199 = 0;
  v102 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v102 = 0x600000002;
  *(_QWORD *)(v102 + 8) = "resume";
  *(_DWORD *)(v102 + 16) = 4;
  v200 = v102;
  v201 = Inspector::DebuggerBackendDispatcher::resume;
  v202 = 0;
  v103 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v103 = 0xF00000002;
  *(_QWORD *)(v103 + 8) = "searchInContent";
  *(_DWORD *)(v103 + 16) = 4;
  v203 = v103;
  v204 = Inspector::DebuggerBackendDispatcher::searchInContent;
  v205 = 0;
  v104 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v104 = 0xF00000002;
  *(_QWORD *)(v104 + 8) = "getScriptSource";
  *(_DWORD *)(v104 + 16) = 4;
  v206 = v104;
  v207 = Inspector::DebuggerBackendDispatcher::getScriptSource;
  v208 = 0;
  v105 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v105 = 0x1200000002;
  *(_QWORD *)(v105 + 8) = "getFunctionDetails";
  *(_DWORD *)(v105 + 16) = 4;
  v209 = v105;
  v210 = Inspector::DebuggerBackendDispatcher::getFunctionDetails;
  v211 = 0;
  v106 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v106 = 0x1600000002;
  *(_QWORD *)(v106 + 8) = "getBreakpointLocations";
  *(_DWORD *)(v106 + 16) = 4;
  v212 = v106;
  v213 = Inspector::DebuggerBackendDispatcher::getBreakpointLocations;
  v214 = 0;
  v107 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v107 = 0x1C00000002;
  *(_QWORD *)(v107 + 8) = "setPauseOnDebuggerStatements";
  *(_DWORD *)(v107 + 16) = 4;
  v215 = v107;
  v216 = Inspector::DebuggerBackendDispatcher::setPauseOnDebuggerStatements;
  v217 = 0;
  v108 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v108 = 0x1400000002;
  *(_QWORD *)(v108 + 8) = "setPauseOnExceptions";
  *(_DWORD *)(v108 + 16) = 4;
  v218 = v108;
  v219 = Inspector::DebuggerBackendDispatcher::setPauseOnExceptions;
  v220 = 0;
  v109 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v109 = 0x1400000002;
  *(_QWORD *)(v109 + 8) = "setPauseOnAssertions";
  *(_DWORD *)(v109 + 16) = 4;
  v221 = v109;
  v222 = Inspector::DebuggerBackendDispatcher::setPauseOnAssertions;
  v223 = 0;
  v110 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v110 = 0x1400000002;
  *(_QWORD *)(v110 + 8) = "setPauseOnMicrotasks";
  *(_DWORD *)(v110 + 16) = 4;
  v224 = v110;
  v225 = Inspector::DebuggerBackendDispatcher::setPauseOnMicrotasks;
  v226 = 0;
  v111 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v111 = 0x1A00000002;
  *(_QWORD *)(v111 + 8) = "setPauseForInternalScripts";
  *(_DWORD *)(v111 + 16) = 4;
  v227 = v111;
  v228 = Inspector::DebuggerBackendDispatcher::setPauseForInternalScripts;
  v229 = 0;
  v112 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v112 = 0x1300000002;
  *(_QWORD *)(v112 + 8) = "evaluateOnCallFrame";
  *(_DWORD *)(v112 + 16) = 4;
  v230 = v112;
  v231 = Inspector::DebuggerBackendDispatcher::evaluateOnCallFrame;
  v232 = 0;
  v113 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v113 = 0x1400000002;
  *(_QWORD *)(v113 + 8) = "setShouldBlackboxURL";
  *(_DWORD *)(v113 + 16) = 4;
  v233 = v113;
  v234 = Inspector::DebuggerBackendDispatcher::setShouldBlackboxURL;
  v235 = 0;
  v114 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v114 = 0x2000000002;
  *(_QWORD *)(v114 + 8) = "setBlackboxBreakpointEvaluations";
  *(_DWORD *)(v114 + 16) = 4;
  v236 = v114;
  v237 = Inspector::DebuggerBackendDispatcher::setBlackboxBreakpointEvaluations;
  v238 = 0;
  v115 = (_OWORD *)WTF::fastMalloc((WTF *)0x610);
  bzero(v115 + 1, 0x600uLL);
  v149 = 0;
  v150 = (WTF::StringImpl *)(v115 + 1);
  *v115 = xmmword_199156BB0;
  do
  {
    v122 = v150;
    if (v150
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v150, 8u), (v122 = v150) != 0))
    {
      v123 = *((_DWORD *)v122 - 2);
    }
    else
    {
      v123 = 0;
    }
    v124 = &v152 + 3 * v149;
    v125 = *v124;
    v126 = *((_DWORD *)*v124 + 4);
    if (v126 < 0x100)
      v127 = WTF::StringImpl::hashSlowCase(*v124);
    else
      v127 = v126 >> 8;
    v128 = 0;
    v147 = v124 + 1;
    for (i = 1; ; ++i)
    {
      v130 = v127 & v123;
      v131 = (WTF *)*((_QWORD *)v122 + 3 * (v127 & v123));
      if (v131 == (WTF *)-1)
      {
        v128 = (char *)v122 + 24 * v130;
        goto LABEL_70;
      }
      if (!v131)
        break;
      if (WTF::equal(v131, v125, v11))
        goto LABEL_86;
LABEL_70:
      v127 = i + v130;
    }
    v148 = (char *)v122 + 24 * v130;
    if (v128)
    {
      *(_QWORD *)v128 = 0;
      *((_QWORD *)v128 + 1) = 0;
      *((_QWORD *)v128 + 2) = 0;
      --*((_DWORD *)v122 - 4);
      v148 = v128;
    }
    if (v125)
      *(_DWORD *)v125 += 2;
    *(_QWORD *)v148 = v125;
    *(_OWORD *)(v148 + 8) = *v147;
    v132 = v150;
    if (v150)
      v133 = *((_DWORD *)v150 - 3) + 1;
    else
      v133 = 1;
    *((_DWORD *)v150 - 3) = v133;
    v134 = (*((_DWORD *)v132 - 4) + v133);
    v135 = *((unsigned int *)v132 - 1);
    if (v135 > 0x400)
    {
      if (v135 <= 2 * v134)
      {
LABEL_81:
        v136 = (_DWORD)v135 << (6 * v133 >= (2 * v135));
        goto LABEL_85;
      }
    }
    else if (3 * v135 <= 4 * v134)
    {
      if ((_DWORD)v135)
        goto LABEL_81;
      v136 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v150, v136);
    }
LABEL_86:
    ++v149;
  }
  while (v149 != 29);
  qword_1ECF58838 = (uint64_t)v150;
  for (j = 672; j != -24; j -= 24)
  {
    v138 = *(WTF::StringImpl **)((char *)&v152 + j);
    *(WTF::StringImpl **)((char *)&v152 + j) = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2)
      {
        WTF::StringImpl::~StringImpl(v138, v116, (uint64_t)v11, v117, v118, v119, v120, v121);
        WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
      }
      else
      {
        *(_DWORD *)v138 -= 2;
      }
    }
  }
  byte_1ECF587F7 = 1;
  v17 = (_QWORD *)&unk_1ECF58000;
LABEL_4:
  v18 = v17[263];
  if (!v18)
    goto LABEL_20;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  v22 = 0;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24 == -1)
    {
LABEL_11:
      v21 = ++v22 + v23;
      continue;
    }
    break;
  }
  if (!v25)
  {
    v26 = v17[263];
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 4);
      v24 = v26 + 24 * v27;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v25, *a3, v11))
    goto LABEL_11;
  v26 = v17[263];
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 4);
LABEL_16:
    if (v24 == v26 + 24 * v27)
    {
LABEL_20:
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *a3;
      if (*a3)
      {
        v40 = *((_DWORD *)v39 + 1);
        *(_DWORD *)v39 += 2;
        if (v40 < 0)
          goto LABEL_96;
      }
      else
      {
        v40 = 0;
      }
      v41 = __OFADD__(v40, 15);
      v42 = v40 + 15;
      if (!v41 && !__OFADD__(v42, 10))
      {
        v43 = !v39 || (*((_BYTE *)v39 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v42 + 10), v43, (int8x16_t *)"'Debugger.", 0xAu, (uint64_t)v39, (int8x16_t *)"' was not found", 0xFu, (int **)&v150);
        v44 = v150;
        if (v150)
        {
          if (!*(_BYTE *)(v38 + 48))
            *(_BYTE *)(v38 + 48) = *(_QWORD *)(v38 + 48);
          LODWORD(v152) = 2;
          *(_DWORD *)v44 += 2;
          v153 = v44;
          v45 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v45 == *(_DWORD *)(v38 + 32))
          {
            v46 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 24, v45 + 1, (unint64_t)&v152);
            v47 = *(unsigned int *)(v38 + 36);
            v48 = *(_QWORD *)(v38 + 24) + 16 * v47;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v153;
            *(_DWORD *)(v38 + 36) = v47 + 1;
            v153 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::~StringImpl(v50, v31, v32, v33, v34, v35, v36, v37);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            v51 = *(_QWORD *)(v38 + 24) + 16 * v45;
            *(_DWORD *)v51 = 2;
            *(_QWORD *)(v51 + 8) = v44;
            *(_DWORD *)(v38 + 36) = v45 + 1;
          }
          v52 = v150;
          v150 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              if (!v39)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v39)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
          goto LABEL_41;
        }
LABEL_97:
        __break(0xC471u);
        JUMPOUT(0x19864081CLL);
      }
LABEL_96:
      v150 = 0;
      goto LABEL_97;
    }
  }
  v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = (_QWORD *)(a1 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v30 + v28);
  v28(v30, a2, &v151);
LABEL_41:
  v53 = v151;
  v151 = 0;
  if (!v53)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v53, v31, v32, v33, v34, v35, v36, v37);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::DebuggerBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::setAsyncStackTraceDepth(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x500000002;
  *(_QWORD *)(v7 + 8) = "depth";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&off_1E3593B00;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4E00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Debugger.setAsyncStackTraceDepth' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 32))(v35, a2, v16);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(&v81, *(_QWORD *)(a1 + 32), v16);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::setBreakpointsActive(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "active";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4B00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Debugger.setBreakpointsActive' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 40))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::setBreakpointByUrl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (***v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (***v53)();
  uint64_t v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (***v65)();
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  WTF *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::AtomStringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  WTF *v180;
  WTF *v181;
  WTF *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::AtomStringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  WTF *v199;
  WTF *v200;
  WTF *v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _DWORD **v235;
  uint64_t v236;
  _DWORD *v237;
  _DWORD **v238;
  uint64_t v239;
  _DWORD *v240;
  uint64_t v241;
  uint64_t v243;
  WTF *v244;
  WTF *v245;
  __int128 v246;
  int v247;
  WTF *v248;
  uint64_t v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF *v252;
  uint64_t (**v253)();
  WTF::StringImpl *v254;
  uint64_t v255;
  uint64_t (***v256)();
  uint64_t v257;

  v257 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xA00000002;
  *(_QWORD *)(v7 + 8) = "lineNumber";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  *(_QWORD *)&v246 = v7;
  v253 = &off_1E3593B00;
  v254 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v255 = 0;
  v256 = &v253;
  v243 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, (WTF::StringImpl **)&v246, 1, (uint64_t)&v253);
  v16 = v256;
  if (v256 == &v253)
  {
    v16 = &v253;
  }
  else
  {
    if (!v256)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (const WTF::StringImpl *)*a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x300000002;
  *(_QWORD *)(v19 + 8) = "url";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  *(_QWORD *)&v246 = v19;
  v253 = &off_1E3593B90;
  v254 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v255 = 0;
  v256 = &v253;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v251, v17, v18, (WTF::StringImpl **)&v246, 0, (uint64_t)&v253);
  v28 = v256;
  if (v256 == &v253)
  {
    v28 = &v253;
  }
  else
  {
    if (!v256)
      goto LABEL_13;
    v20 = 5;
  }
  (*v28)[v20]();
LABEL_13:
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v29 = *(_QWORD *)(a1 + 16);
  v30 = (const WTF::StringImpl *)*a3;
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0x800000002;
  *(_QWORD *)(v31 + 8) = "urlRegex";
  v32 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  *(_QWORD *)&v246 = v31;
  v253 = &off_1E3593B90;
  v254 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v255 = 0;
  v256 = &v253;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v250, v29, v30, (WTF::StringImpl **)&v246, 0, (uint64_t)&v253);
  v40 = v256;
  if (v256 == &v253)
  {
    v40 = &v253;
  }
  else
  {
    if (!v256)
      goto LABEL_20;
    v32 = 5;
  }
  (*v40)[v32]();
LABEL_20:
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v41 = *(_QWORD *)(a1 + 16);
  v42 = *a3;
  v43 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v43 = 0xC00000002;
  *(_QWORD *)(v43 + 8) = "columnNumber";
  v44 = 4;
  *(_DWORD *)(v43 + 16) = 4;
  *(_QWORD *)&v246 = v43;
  v253 = &off_1E3593B00;
  v254 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v255 = 0;
  v256 = &v253;
  v52 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v41, v42, (WTF::StringImpl **)&v246, 0, (uint64_t)&v253);
  v53 = v256;
  if (v256 == &v253)
  {
    v53 = &v253;
  }
  else
  {
    if (!v256)
      goto LABEL_27;
    v44 = 5;
  }
  (*v53)[v44]();
LABEL_27:
  v249 = v52;
  if (*(_DWORD *)v43 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v43, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
  }
  else
  {
    *(_DWORD *)v43 -= 2;
  }
  v54 = *(_QWORD *)(a1 + 16);
  v55 = (const WTF::StringImpl *)*a3;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x700000002;
  *(_QWORD *)(v56 + 8) = "options";
  v57 = 4;
  *(_DWORD *)(v56 + 16) = 4;
  *(_QWORD *)&v246 = v56;
  v253 = &off_1E3593C20;
  v256 = &v253;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v248, v54, v55, (WTF::StringImpl **)&v246, 0, (uint64_t)&v253);
  v65 = v256;
  if (v256 == &v253)
  {
    v65 = &v253;
  }
  else
  {
    if (!v256)
      goto LABEL_34;
    v57 = 5;
  }
  (*v65)[v57]();
LABEL_34:
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
  v66 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v66 + 36))
  {
    v67 = WTF::fastCompactMalloc((WTF *)0x20);
    v75 = (WTF::StringImpl *)v67;
    *(_QWORD *)v67 = 0x4900000002;
    *(_QWORD *)(v67 + 8) = "Some arguments of method 'Debugger.setBreakpointByUrl' can't be processed";
    v76 = 4;
    *(_DWORD *)(v67 + 16) = 4;
    if (!*(_BYTE *)(v66 + 48))
    {
      *(_BYTE *)(v66 + 48) = *(_QWORD *)(v66 + 48);
      v76 = *(_DWORD *)v67 + 2;
    }
    LODWORD(v253) = 3;
    *(_DWORD *)v67 = v76;
    v254 = (WTF::StringImpl *)v67;
    v77 = *(unsigned int *)(v66 + 36);
    if ((_DWORD)v77 == *(_DWORD *)(v66 + 32))
    {
      v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v66 + 24, v77 + 1, (unint64_t)&v253);
      v79 = *(unsigned int *)(v66 + 36);
      v80 = *(_QWORD *)(v66 + 24) + 16 * v79;
      *(_DWORD *)v80 = *(_DWORD *)v78;
      v81 = *(_QWORD *)(v78 + 8);
      *(_QWORD *)(v78 + 8) = 0;
      *(_QWORD *)(v80 + 8) = v81;
      v82 = v254;
      *(_DWORD *)(v66 + 36) = v79 + 1;
      v254 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v68, v69, v70, v71, v72, v73, v74);
          WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
        }
        else
        {
          *(_DWORD *)v82 -= 2;
        }
      }
    }
    else
    {
      v84 = *(_QWORD *)(v66 + 24) + 16 * v77;
      *(_DWORD *)v84 = 3;
      *(_QWORD *)(v84 + 8) = v67;
      *(_DWORD *)(v66 + 36) = v77 + 1;
    }
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
    goto LABEL_49;
  }
  v83 = *(_QWORD *)(a1 + 24);
  if (!v83)
  {
    if (!BYTE4(v243))
LABEL_129:
      __break(1u);
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t *, WTF **))(**(_QWORD **)(a1 + 32) + 32))(&v246, *(_QWORD *)(a1 + 32), v243, &v251, &v250, &v249, &v248);
    if (v247)
    {
      if (v247 != 1)
      {
        v241 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DebuggerBackendDispatcher::setBreakpoint(v241);
        return;
      }
      v144 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v144 + 48))
        *(_BYTE *)(v144 + 48) = *(_QWORD *)(v144 + 48);
      LODWORD(v253) = 5;
      v145 = (WTF::StringImpl *)v246;
      if ((_QWORD)v246)
        *(_DWORD *)v246 += 2;
      v254 = v145;
      v146 = *(unsigned int *)(v144 + 36);
      if ((_DWORD)v146 != *(_DWORD *)(v144 + 32))
      {
        v210 = *(_QWORD *)(v144 + 24) + 16 * v146;
        *(_DWORD *)v210 = 5;
        *(_QWORD *)(v210 + 8) = v145;
        *(_DWORD *)(v144 + 36) = v146 + 1;
        goto LABEL_117;
      }
      v147 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v144 + 24, v146 + 1, (unint64_t)&v253);
      v148 = *(unsigned int *)(v144 + 36);
      v149 = *(_QWORD *)(v144 + 24) + 16 * v148;
      *(_DWORD *)v149 = *(_DWORD *)v147;
      v150 = *(_QWORD *)(v147 + 8);
      *(_QWORD *)(v147 + 8) = 0;
      *(_QWORD *)(v149 + 8) = v150;
      v151 = v254;
      *(_DWORD *)(v144 + 36) = v148 + 1;
      v254 = 0;
      if (!v151)
        goto LABEL_117;
      if (*(_DWORD *)v151 != 2)
      {
        *(_DWORD *)v151 -= 2;
        goto LABEL_117;
      }
      goto LABEL_116;
    }
    v160 = v246;
    v246 = 0u;
    v161 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v161 = 0x500000001;
    *(_QWORD *)(v161 + 16) = 0;
    v162 = (uint64_t *)(v161 + 16);
    *(_OWORD *)(v161 + 24) = 0u;
    v245 = (WTF *)v161;
    v163 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v163 = 0xC00000002;
    *(_QWORD *)(v163 + 8) = "breakpointId";
    *(_DWORD *)(v163 + 16) = 4;
    v244 = (WTF *)v163;
    v164 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v164 = 0x400000001;
    *((_QWORD *)v164 + 1) = v160;
    if ((_QWORD)v160)
      *(_DWORD *)v160 += 2;
    v252 = v164;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v162, (WTF::AtomStringImpl *)&v244, (const WTF::StringImpl *)&v252, v165, v166, v167, v168, v169, (uint64_t)&v253);
    if ((_BYTE)v255)
    {
      v177 = (uint64_t *)(v161 + 24);
      v178 = *(unsigned int *)(v161 + 36);
      if ((_DWORD)v178 == *(_DWORD *)(v161 + 32))
      {
        v235 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v177, v178 + 1, (unint64_t)&v244);
        v178 = *(unsigned int *)(v161 + 36);
        v236 = *(_QWORD *)(v161 + 24);
        v237 = *v235;
        if (*v235)
          *v237 += 2;
        *(_QWORD *)(v236 + 8 * v178) = v237;
      }
      else
      {
        v179 = *v177;
        v180 = v244;
        if (v244)
          *(_DWORD *)v244 += 2;
        *(_QWORD *)(v179 + 8 * v178) = v180;
      }
      *(_DWORD *)(v161 + 36) = v178 + 1;
    }
    v181 = v252;
    v252 = 0;
    if (v181)
    {
      if (*(_DWORD *)v181 == 1)
        WTF::JSONImpl::Value::operator delete(v181, v170, v171, v172, v173, v174, v175, v176);
      else
        --*(_DWORD *)v181;
    }
    v182 = v244;
    v244 = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2)
      {
        WTF::StringImpl::~StringImpl(v182, v170, v171, v172, v173, v174, v175, v176);
        WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
      }
      else
      {
        *(_DWORD *)v182 -= 2;
      }
    }
    v183 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v183 = 0x900000002;
    *(_QWORD *)(v183 + 8) = "locations";
    *(_DWORD *)(v183 + 16) = 4;
    v252 = (WTF *)v183;
    v244 = (WTF *)*((_QWORD *)&v160 + 1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v162, &v252, (const WTF::StringImpl *)&v244, v184, v185, v186, v187, v188, (uint64_t)&v253);
    if ((_BYTE)v255)
    {
      v196 = (uint64_t *)(v161 + 24);
      v197 = *(unsigned int *)(v161 + 36);
      if ((_DWORD)v197 == *(_DWORD *)(v161 + 32))
      {
        v238 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v196, v197 + 1, (unint64_t)&v252);
        v197 = *(unsigned int *)(v161 + 36);
        v239 = *(_QWORD *)(v161 + 24);
        v240 = *v238;
        if (*v238)
          *v240 += 2;
        *(_QWORD *)(v239 + 8 * v197) = v240;
      }
      else
      {
        v198 = *v196;
        v199 = v252;
        if (v252)
          *(_DWORD *)v252 += 2;
        *(_QWORD *)(v198 + 8 * v197) = v199;
      }
      *(_DWORD *)(v161 + 36) = v197 + 1;
    }
    v200 = v244;
    v244 = 0;
    if (v200)
    {
      if (*(_DWORD *)v200 == 1)
        WTF::JSONImpl::Value::operator delete(v200, v189, v190, v191, v192, v193, v194, v195);
      else
        --*(_DWORD *)v200;
    }
    v201 = v252;
    v252 = 0;
    if (v201)
    {
      if (*(_DWORD *)v201 == 2)
      {
        WTF::StringImpl::~StringImpl(v201, v189, v190, v191, v192, v193, v194, v195);
        WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
      }
      else
      {
        *(_DWORD *)v201 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v245);
    if (v245)
    {
      if (*(_DWORD *)v245 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v245, v68, v69, v70, v71, v72, v73, v74);
        if (!(_QWORD)v160)
        {
LABEL_117:
          if (v247 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_1E3593958[v247])(&v253, &v246);
          goto LABEL_49;
        }
        goto LABEL_109;
      }
      --*(_DWORD *)v245;
    }
    if (!(_QWORD)v160)
      goto LABEL_117;
LABEL_109:
    if (*(_DWORD *)v160 != 2)
    {
      *(_DWORD *)v160 -= 2;
      goto LABEL_117;
    }
    v151 = (WTF::StringImpl *)v160;
LABEL_116:
    WTF::StringImpl::~StringImpl(v151, v68, v69, v70, v71, v72, v73, v74);
    WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
    goto LABEL_117;
  }
  if (!BYTE4(v243))
    goto LABEL_129;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t *, WTF **))(*(_QWORD *)v83 + 48))(v83, a2, v243, &v251, &v250, &v249, &v248);
LABEL_49:
  v85 = v248;
  v248 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 1)
      WTF::JSONImpl::Value::operator delete(v85, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v85;
  }
  v86 = v250;
  v250 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v251;
  v251 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::setBreakpoint(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  WTF *v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  WTF *v125;
  WTF *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  _DWORD **v163;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  WTF *v167;
  WTF *v168;
  __int128 v169;
  int v170;
  WTF *v171;
  WTF *v172;
  WTF *v173;
  WTF *v174;
  WTF::StringImpl *v175;
  char v176;
  WTF **v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "location";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  *(_QWORD *)&v169 = v8;
  v174 = (WTF *)&off_1E3593C20;
  v177 = &v174;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v172, v6, v7, (WTF::StringImpl **)&v169, 1, (uint64_t)&v174);
  v17 = v177;
  if (v177 == &v174)
  {
    v17 = &v174;
  }
  else
  {
    if (!v177)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "options";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  *(_QWORD *)&v169 = v20;
  v174 = (WTF *)&off_1E3593C20;
  v177 = &v174;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v171, v18, v19, (WTF::StringImpl **)&v169, 0, (uint64_t)&v174);
  v29 = v177;
  if (v177 == &v174)
  {
    v29 = &v174;
  }
  else
  {
    if (!v177)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (!*(_DWORD *)(v30 + 36))
  {
    v47 = a1[3];
    if (v47)
    {
      v174 = v172;
      v172 = 0;
      (*(void (**)(uint64_t, uint64_t, WTF **, WTF **))(*(_QWORD *)v47 + 56))(v47, a2, &v174, &v171);
      v48 = v174;
      v174 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
          WTF::JSONImpl::Value::operator delete(v48, v32, v33, v34, v35, v36, v37, v38);
        else
          --*(_DWORD *)v48;
      }
      goto LABEL_29;
    }
    v67 = a1[4];
    v174 = v172;
    v172 = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, WTF **, WTF **))(*(_QWORD *)v67 + 40))(&v169, v67, &v174, &v171);
    v68 = v174;
    v174 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
        WTF::JSONImpl::Value::operator delete(v68, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v68;
    }
    if (v170)
    {
      if (v170 != 1)
      {
        v166 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DebuggerBackendDispatcher::removeBreakpoint(v166);
        return;
      }
      v69 = a1[2];
      if (!*(_BYTE *)(v69 + 48))
        *(_BYTE *)(v69 + 48) = *(_QWORD *)(v69 + 48);
      LODWORD(v174) = 5;
      v70 = (WTF::StringImpl *)v169;
      if ((_QWORD)v169)
        *(_DWORD *)v169 += 2;
      v175 = v70;
      v71 = *(unsigned int *)(v69 + 36);
      if ((_DWORD)v71 != *(_DWORD *)(v69 + 32))
      {
        v135 = *(_QWORD *)(v69 + 24) + 16 * v71;
        *(_DWORD *)v135 = 5;
        *(_QWORD *)(v135 + 8) = v70;
        *(_DWORD *)(v69 + 36) = v71 + 1;
        goto LABEL_94;
      }
      v72 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v69 + 24, v71 + 1, (unint64_t)&v174);
      v73 = *(unsigned int *)(v69 + 36);
      v74 = *(_QWORD *)(v69 + 24) + 16 * v73;
      *(_DWORD *)v74 = *(_DWORD *)v72;
      v75 = *(_QWORD *)(v72 + 8);
      *(_QWORD *)(v72 + 8) = 0;
      *(_QWORD *)(v74 + 8) = v75;
      v76 = v175;
      *(_DWORD *)(v69 + 36) = v73 + 1;
      v175 = 0;
      if (!v76)
        goto LABEL_94;
      if (*(_DWORD *)v76 != 2)
      {
        *(_DWORD *)v76 -= 2;
        goto LABEL_94;
      }
      goto LABEL_93;
    }
    v85 = v169;
    v169 = 0u;
    v86 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v86 = 0x500000001;
    *(_QWORD *)(v86 + 16) = 0;
    v87 = (uint64_t *)(v86 + 16);
    *(_OWORD *)(v86 + 24) = 0u;
    v168 = (WTF *)v86;
    v88 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v88 = 0xC00000002;
    *(_QWORD *)(v88 + 8) = "breakpointId";
    *(_DWORD *)(v88 + 16) = 4;
    v167 = (WTF *)v88;
    v89 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v89 = 0x400000001;
    *((_QWORD *)v89 + 1) = v85;
    if ((_QWORD)v85)
      *(_DWORD *)v85 += 2;
    v173 = v89;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v87, (WTF::AtomStringImpl *)&v167, (const WTF::StringImpl *)&v173, v90, v91, v92, v93, v94, (uint64_t)&v174);
    if (v176)
    {
      v102 = (uint64_t *)(v86 + 24);
      v103 = *(unsigned int *)(v86 + 36);
      if ((_DWORD)v103 == *(_DWORD *)(v86 + 32))
      {
        v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, v103 + 1, (unint64_t)&v167);
        v103 = *(unsigned int *)(v86 + 36);
        v161 = *(_QWORD *)(v86 + 24);
        v162 = *v160;
        if (*v160)
          *v162 += 2;
        *(_QWORD *)(v161 + 8 * v103) = v162;
      }
      else
      {
        v104 = *v102;
        v105 = v167;
        if (v167)
          *(_DWORD *)v167 += 2;
        *(_QWORD *)(v104 + 8 * v103) = v105;
      }
      *(_DWORD *)(v86 + 36) = v103 + 1;
    }
    v106 = v173;
    v173 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 1)
        WTF::JSONImpl::Value::operator delete(v106, v95, v96, v97, v98, v99, v100, v101);
      else
        --*(_DWORD *)v106;
    }
    v107 = v167;
    v167 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
      {
        WTF::StringImpl::~StringImpl(v107, v95, v96, v97, v98, v99, v100, v101);
        WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
      }
      else
      {
        *(_DWORD *)v107 -= 2;
      }
    }
    v108 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v108 = 0xE00000002;
    *(_QWORD *)(v108 + 8) = "actualLocation";
    *(_DWORD *)(v108 + 16) = 4;
    v173 = (WTF *)v108;
    v167 = (WTF *)*((_QWORD *)&v85 + 1);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v87, (WTF::AtomStringImpl *)&v173, (const WTF::StringImpl *)&v167, v109, v110, v111, v112, v113, (uint64_t)&v174);
    if (v176)
    {
      v121 = (uint64_t *)(v86 + 24);
      v122 = *(unsigned int *)(v86 + 36);
      if ((_DWORD)v122 == *(_DWORD *)(v86 + 32))
      {
        v163 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v173);
        v122 = *(unsigned int *)(v86 + 36);
        v164 = *(_QWORD *)(v86 + 24);
        v165 = *v163;
        if (*v163)
          *v165 += 2;
        *(_QWORD *)(v164 + 8 * v122) = v165;
      }
      else
      {
        v123 = *v121;
        v124 = v173;
        if (v173)
          *(_DWORD *)v173 += 2;
        *(_QWORD *)(v123 + 8 * v122) = v124;
      }
      *(_DWORD *)(v86 + 36) = v122 + 1;
    }
    v125 = v167;
    v167 = 0;
    if (v125)
    {
      if (*(_DWORD *)v125 == 1)
        WTF::JSONImpl::Value::operator delete(v125, v114, v115, v116, v117, v118, v119, v120);
      else
        --*(_DWORD *)v125;
    }
    v126 = v173;
    v173 = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2)
      {
        WTF::StringImpl::~StringImpl(v126, v114, v115, v116, v117, v118, v119, v120);
        WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
      }
      else
      {
        *(_DWORD *)v126 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v168);
    if (v168)
    {
      if (*(_DWORD *)v168 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v168, v32, v33, v34, v35, v36, v37, v38);
        if (!(_QWORD)v85)
        {
LABEL_94:
          if (v170 != -1)
            ((void (*)(WTF **, __int128 *))off_1E3593968[v170])(&v174, &v169);
          goto LABEL_29;
        }
        goto LABEL_84;
      }
      --*(_DWORD *)v168;
    }
    if (!(_QWORD)v85)
      goto LABEL_94;
LABEL_84:
    if (*(_DWORD *)v85 != 2)
    {
      *(_DWORD *)v85 -= 2;
      goto LABEL_94;
    }
    v76 = (WTF::StringImpl *)v85;
LABEL_93:
    WTF::StringImpl::~StringImpl(v76, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
    goto LABEL_94;
  }
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  v39 = (WTF::StringImpl *)v31;
  *(_QWORD *)v31 = 0x4400000002;
  *(_QWORD *)(v31 + 8) = "Some arguments of method 'Debugger.setBreakpoint' can't be processed";
  v40 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  if (!*(_BYTE *)(v30 + 48))
  {
    *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
    v40 = *(_DWORD *)v31 + 2;
  }
  LODWORD(v174) = 3;
  *(_DWORD *)v31 = v40;
  v175 = (WTF::StringImpl *)v31;
  v41 = *(unsigned int *)(v30 + 36);
  if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
  {
    v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v174);
    v43 = *(unsigned int *)(v30 + 36);
    v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
    *(_DWORD *)v44 = *(_DWORD *)v42;
    v45 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v44 + 8) = v45;
    v46 = v175;
    *(_DWORD *)(v30 + 36) = v43 + 1;
    v175 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  else
  {
    v49 = *(_QWORD *)(v30 + 24) + 16 * v41;
    *(_DWORD *)v49 = 3;
    *(_QWORD *)(v49 + 8) = v31;
    *(_DWORD *)(v30 + 36) = v41 + 1;
  }
  if (*(_DWORD *)v39 == 2)
  {
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v39 -= 2;
  }
LABEL_29:
  v50 = v171;
  v171 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v50;
  }
  if (v172)
  {
    if (*(_DWORD *)v172 == 1)
      WTF::JSONImpl::Value::operator delete(v172, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v172;
  }
}

void Inspector::DebuggerBackendDispatcher::removeBreakpoint(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xC00000002;
  *(_QWORD *)(v7 + 8) = "breakpointId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4700000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Debugger.removeBreakpoint' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 64))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 48))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::addSymbolicBreakpoint(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  WTF **v43;
  uint64_t v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF **v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  int v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  char v154;
  WTF *v155;
  __int16 v156;
  __int16 v157;
  WTF::StringImpl *v158;
  WTF *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  WTF **v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "symbol";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v153 = (WTF::StringImpl *)v8;
  v159 = (WTF *)&off_1E3593B90;
  v160 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v161 = 0;
  v162 = &v159;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v158, v6, v7, &v153, 1, (uint64_t)&v159);
  v17 = v162;
  if (v162 == &v159)
  {
    v17 = &v159;
  }
  else
  {
    if (!v162)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xD00000002;
  *(_QWORD *)(v20 + 8) = "caseSensitive";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v153 = (WTF::StringImpl *)v20;
  v159 = (WTF *)&unk_1E3593AB8;
  v160 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v161 = 0;
  v162 = &v159;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v153, 0, (uint64_t)&v159);
  v30 = v162;
  if (v162 == &v159)
  {
    v30 = &v159;
  }
  else
  {
    if (!v162)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v157 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (uint64_t)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x700000002;
  *(_QWORD *)(v33 + 8) = "isRegex";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v153 = (WTF::StringImpl *)v33;
  v159 = (WTF *)&unk_1E3593AB8;
  v160 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v161 = 0;
  v162 = &v159;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v31, v32, &v153, 0, (uint64_t)&v159);
  v43 = v162;
  if (v162 == &v159)
  {
    v43 = &v159;
  }
  else
  {
    if (!v162)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v43 + v34))();
LABEL_20:
  v156 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  v45 = *a3;
  v46 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v46 = 0x700000002;
  *(_QWORD *)(v46 + 8) = "options";
  v47 = 4;
  *(_DWORD *)(v46 + 16) = 4;
  v153 = (WTF::StringImpl *)v46;
  v159 = (WTF *)&off_1E3593C20;
  v162 = &v159;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v155, v44, v45, &v153, 0, (uint64_t)&v159);
  v55 = v162;
  if (v162 == &v159)
  {
    v55 = &v159;
  }
  else
  {
    if (!v162)
      goto LABEL_27;
    v47 = 5;
  }
  (*((void (**)(void))*v55 + v47))();
LABEL_27:
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v48, v49, v50, v51, v52, v53, v54);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v56 + 36))
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    v65 = (WTF::StringImpl *)v57;
    *(_QWORD *)v57 = 0x4C00000002;
    *(_QWORD *)(v57 + 8) = "Some arguments of method 'Debugger.addSymbolicBreakpoint' can't be processed";
    v66 = 4;
    *(_DWORD *)(v57 + 16) = 4;
    if (!*(_BYTE *)(v56 + 48))
    {
      *(_BYTE *)(v56 + 48) = *(_QWORD *)(v56 + 48);
      v66 = *(_DWORD *)v57 + 2;
    }
    LODWORD(v159) = 3;
    *(_DWORD *)v57 = v66;
    v160 = (WTF::StringImpl *)v57;
    v67 = *(unsigned int *)(v56 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v56 + 32))
    {
      v68 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v67 + 1, (unint64_t)&v159);
      v69 = *(unsigned int *)(v56 + 36);
      v70 = *(_QWORD *)(v56 + 24) + 16 * v69;
      *(_DWORD *)v70 = *(_DWORD *)v68;
      v71 = *(_QWORD *)(v68 + 8);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v70 + 8) = v71;
      v72 = v160;
      *(_DWORD *)(v56 + 36) = v69 + 1;
      v160 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
    }
    else
    {
      v74 = *(_QWORD *)(v56 + 24) + 16 * v67;
      *(_DWORD *)v74 = 3;
      *(_QWORD *)(v74 + 8) = v57;
      *(_DWORD *)(v56 + 36) = v67 + 1;
    }
    if (*(_DWORD *)v65 != 2)
    {
      *(_DWORD *)v65 -= 2;
      goto LABEL_41;
    }
    v134 = v65;
    goto LABEL_64;
  }
  v73 = *(_QWORD *)(a1 + 24);
  if (v73)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *, __int16 *, WTF **))(*(_QWORD *)v73 + 72))(v73, a2, &v158, &v157, &v156, &v155);
    goto LABEL_41;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, __int16 *, __int16 *, WTF **))(**(_QWORD **)(a1 + 32) + 56))(&v153, *(_QWORD *)(a1 + 32), &v158, &v157, &v156, &v155);
  if (!v154)
  {
    v143 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v143 = 0x500000001;
    *((_QWORD *)v143 + 3) = 0;
    *((_QWORD *)v143 + 4) = 0;
    *((_QWORD *)v143 + 2) = 0;
    v159 = v143;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v159);
    v124 = v159;
    if (!v159)
      goto LABEL_70;
    v125 = *(_DWORD *)v159 - 1;
    if (*(_DWORD *)v159 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v159, v58, v59, v60, v61, v62, v63, v64);
      goto LABEL_70;
    }
    goto LABEL_67;
  }
  v117 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v117 + 48))
    *(_BYTE *)(v117 + 48) = *(_QWORD *)(v117 + 48);
  LODWORD(v159) = 5;
  v118 = v153;
  if (v153)
    *(_DWORD *)v153 += 2;
  v160 = v118;
  v119 = *(unsigned int *)(v117 + 36);
  if ((_DWORD)v119 != *(_DWORD *)(v117 + 32))
  {
    v152 = *(_QWORD *)(v117 + 24) + 16 * v119;
    *(_DWORD *)v152 = 5;
    *(_QWORD *)(v152 + 8) = v118;
    *(_DWORD *)(v117 + 36) = v119 + 1;
    goto LABEL_70;
  }
  v120 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v117 + 24, v119 + 1, (unint64_t)&v159);
  v121 = *(unsigned int *)(v117 + 36);
  v122 = *(_QWORD *)(v117 + 24) + 16 * v121;
  *(_DWORD *)v122 = *(_DWORD *)v120;
  v123 = *(_QWORD *)(v120 + 8);
  *(_QWORD *)(v120 + 8) = 0;
  *(_QWORD *)(v122 + 8) = v123;
  v124 = v160;
  *(_DWORD *)(v117 + 36) = v121 + 1;
  v160 = 0;
  if (v124)
  {
    v125 = *(_DWORD *)v124 - 2;
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
      goto LABEL_70;
    }
LABEL_67:
    *(_DWORD *)v124 = v125;
  }
LABEL_70:
  if (v154)
  {
    v134 = v153;
    v153 = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2)
      {
LABEL_64:
        WTF::StringImpl::~StringImpl(v134, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        goto LABEL_41;
      }
      *(_DWORD *)v134 -= 2;
    }
  }
LABEL_41:
  v75 = v155;
  v155 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 1)
      WTF::JSONImpl::Value::operator delete(v75, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v75;
  }
  v76 = v158;
  v158 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::removeSymbolicBreakpoint(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  WTF **v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  char v133;
  __int16 v134;
  __int16 v135;
  WTF::StringImpl *v136;
  WTF *v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  WTF **v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "symbol";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v132 = (WTF::StringImpl *)v8;
  v137 = (WTF *)&off_1E3593B90;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v139 = 0;
  v140 = &v137;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v136, v6, v7, &v132, 1, (uint64_t)&v137);
  v17 = v140;
  if (v140 == &v137)
  {
    v17 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xD00000002;
  *(_QWORD *)(v20 + 8) = "caseSensitive";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v132 = (WTF::StringImpl *)v20;
  v137 = (WTF *)&unk_1E3593AB8;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v139 = 0;
  v140 = &v137;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v132, 0, (uint64_t)&v137);
  v30 = v140;
  if (v140 == &v137)
  {
    v30 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v135 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (uint64_t)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x700000002;
  *(_QWORD *)(v33 + 8) = "isRegex";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v132 = (WTF::StringImpl *)v33;
  v137 = (WTF *)&unk_1E3593AB8;
  v138 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v139 = 0;
  v140 = &v137;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v31, v32, &v132, 0, (uint64_t)&v137);
  v43 = v140;
  if (v140 == &v137)
  {
    v43 = &v137;
  }
  else
  {
    if (!v140)
      goto LABEL_20;
    v34 = 5;
  }
  (*((void (**)(void))*v43 + v34))();
LABEL_20:
  v134 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v44 + 36))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    v53 = (WTF::StringImpl *)v45;
    *(_QWORD *)v45 = 0x4F00000002;
    *(_QWORD *)(v45 + 8) = "Some arguments of method 'Debugger.removeSymbolicBreakpoint' can't be processed";
    v54 = 4;
    *(_DWORD *)(v45 + 16) = 4;
    if (!*(_BYTE *)(v44 + 48))
    {
      *(_BYTE *)(v44 + 48) = *(_QWORD *)(v44 + 48);
      v54 = *(_DWORD *)v45 + 2;
    }
    LODWORD(v137) = 3;
    *(_DWORD *)v45 = v54;
    v138 = (WTF::StringImpl *)v45;
    v55 = *(unsigned int *)(v44 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v44 + 32))
    {
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44 + 24, v55 + 1, (unint64_t)&v137);
      v57 = *(unsigned int *)(v44 + 36);
      v58 = *(_QWORD *)(v44 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v138;
      *(_DWORD *)(v44 + 36) = v57 + 1;
      v138 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    else
    {
      v62 = *(_QWORD *)(v44 + 24) + 16 * v55;
      *(_DWORD *)v62 = 3;
      *(_QWORD *)(v62 + 8) = v45;
      *(_DWORD *)(v44 + 36) = v55 + 1;
    }
    if (*(_DWORD *)v53 != 2)
    {
      *(_DWORD *)v53 -= 2;
      goto LABEL_34;
    }
    v113 = v53;
    goto LABEL_52;
  }
  v61 = *(_QWORD *)(a1 + 24);
  if (v61)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *, __int16 *))(*(_QWORD *)v61 + 80))(v61, a2, &v136, &v135, &v134);
    goto LABEL_34;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 64))(&v132, *(_QWORD *)(a1 + 32), &v136, &v135, &v134);
  if (!v133)
  {
    v122 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v122 = 0x500000001;
    *((_QWORD *)v122 + 3) = 0;
    *((_QWORD *)v122 + 4) = 0;
    *((_QWORD *)v122 + 2) = 0;
    v137 = v122;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v137);
    v103 = v137;
    if (!v137)
      goto LABEL_58;
    v104 = *(_DWORD *)v137 - 1;
    if (*(_DWORD *)v137 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v137, v46, v47, v48, v49, v50, v51, v52);
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  v96 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v96 + 48))
    *(_BYTE *)(v96 + 48) = *(_QWORD *)(v96 + 48);
  LODWORD(v137) = 5;
  v97 = v132;
  if (v132)
    *(_DWORD *)v132 += 2;
  v138 = v97;
  v98 = *(unsigned int *)(v96 + 36);
  if ((_DWORD)v98 != *(_DWORD *)(v96 + 32))
  {
    v131 = *(_QWORD *)(v96 + 24) + 16 * v98;
    *(_DWORD *)v131 = 5;
    *(_QWORD *)(v131 + 8) = v97;
    *(_DWORD *)(v96 + 36) = v98 + 1;
    goto LABEL_58;
  }
  v99 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96 + 24, v98 + 1, (unint64_t)&v137);
  v100 = *(unsigned int *)(v96 + 36);
  v101 = *(_QWORD *)(v96 + 24) + 16 * v100;
  *(_DWORD *)v101 = *(_DWORD *)v99;
  v102 = *(_QWORD *)(v99 + 8);
  *(_QWORD *)(v99 + 8) = 0;
  *(_QWORD *)(v101 + 8) = v102;
  v103 = v138;
  *(_DWORD *)(v96 + 36) = v100 + 1;
  v138 = 0;
  if (v103)
  {
    v104 = *(_DWORD *)v103 - 2;
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
      goto LABEL_58;
    }
LABEL_55:
    *(_DWORD *)v103 = v104;
  }
LABEL_58:
  if (v133)
  {
    v113 = v132;
    v132 = 0;
    if (v113)
    {
      if (*(_DWORD *)v113 == 2)
      {
LABEL_52:
        WTF::StringImpl::~StringImpl(v113, v46, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
        goto LABEL_34;
      }
      *(_DWORD *)v113 -= 2;
    }
  }
LABEL_34:
  v63 = v136;
  v136 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::continueUntilNextRunLoop(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 72))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::continueToLocation(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  char v86;
  WTF *v87;
  WTF *v88;
  WTF::StringImpl *v89;
  WTF **v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "location";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v85 = (WTF::StringImpl *)v7;
  v88 = (WTF *)&off_1E3593C20;
  v90 = &v88;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v87, v5, v6, &v85, 1, (uint64_t)&v88);
  v16 = v90;
  if (v90 == &v88)
  {
    v16 = &v88;
  }
  else
  {
    if (!v90)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4900000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Debugger.continueToLocation' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v88) = 3;
    *(_DWORD *)v18 = v27;
    v89 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v88);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v89;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v89 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v38 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v38 = 3;
      *(_QWORD *)(v38 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_46;
    }
    v36 = v26;
    goto LABEL_36;
  }
  v34 = a1[3];
  if (v34)
  {
    v35 = v87;
    v87 = 0;
    v88 = v35;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v34 + 96))(v34, a2, &v88);
    v36 = v88;
    v88 = 0;
    if (!v36)
      goto LABEL_46;
    v37 = *(_DWORD *)v36 - 1;
    if (*(_DWORD *)v36 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v36, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_46;
    }
LABEL_45:
    *(_DWORD *)v36 = v37;
    goto LABEL_46;
  }
  v47 = a1[4];
  v48 = v87;
  v87 = 0;
  v88 = v48;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v47 + 80))(&v85, v47, &v88);
  v49 = v88;
  v88 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v49;
  }
  if (!v86)
  {
    v75 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v75 = 0x500000001;
    *((_QWORD *)v75 + 3) = 0;
    *((_QWORD *)v75 + 4) = 0;
    *((_QWORD *)v75 + 2) = 0;
    v88 = v75;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v88);
    v57 = v88;
    if (!v88)
      goto LABEL_42;
    v58 = *(_DWORD *)v88 - 1;
    if (*(_DWORD *)v88 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v88, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v50 = a1[2];
  if (!*(_BYTE *)(v50 + 48))
    *(_BYTE *)(v50 + 48) = *(_QWORD *)(v50 + 48);
  LODWORD(v88) = 5;
  v51 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  v89 = v51;
  v52 = *(unsigned int *)(v50 + 36);
  if ((_DWORD)v52 != *(_DWORD *)(v50 + 32))
  {
    v84 = *(_QWORD *)(v50 + 24) + 16 * v52;
    *(_DWORD *)v84 = 5;
    *(_QWORD *)(v84 + 8) = v51;
    *(_DWORD *)(v50 + 36) = v52 + 1;
    goto LABEL_42;
  }
  v53 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 24, v52 + 1, (unint64_t)&v88);
  v54 = *(unsigned int *)(v50 + 36);
  v55 = *(_QWORD *)(v50 + 24) + 16 * v54;
  *(_DWORD *)v55 = *(_DWORD *)v53;
  v56 = *(_QWORD *)(v53 + 8);
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v55 + 8) = v56;
  v57 = v89;
  *(_DWORD *)(v50 + 36) = v54 + 1;
  v89 = 0;
  if (v57)
  {
    v58 = *(_DWORD *)v57 - 2;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v57 = v58;
  }
LABEL_42:
  if (v86)
  {
    v36 = v85;
    v85 = 0;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }
LABEL_46:
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v87;
  }
}

void Inspector::DebuggerBackendDispatcher::stepNext(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 88))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::stepOver(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 112))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 96))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::stepInto(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 104))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::stepOut(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 112))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::pause(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 120))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::resume(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 144))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 128))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::DebuggerBackendDispatcher::searchInContent(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t (***v55)();
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  int v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::AtomStringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  uint64_t v191;
  WTF *v192;
  WTF::StringImpl *v193;
  WTF *v194;
  WTF::StringImpl *v195;
  int v196;
  __int16 v197;
  __int16 v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  uint64_t (**v201)();
  WTF::StringImpl *v202;
  uint64_t v203;
  uint64_t (***v204)();
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "scriptId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v195 = (WTF::StringImpl *)v8;
  v201 = &off_1E3593B90;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v203 = 0;
  v204 = &v201;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v200, v6, v7, &v195, 1, (uint64_t)&v201);
  v17 = v204;
  if (v204 == &v201)
  {
    v17 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "query";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v195 = (WTF::StringImpl *)v20;
  v201 = &off_1E3593B90;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v203 = 0;
  v204 = &v201;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v199, v18, v19, &v195, 1, (uint64_t)&v201);
  v29 = v204;
  if (v204 == &v201)
  {
    v29 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xD00000002;
  *(_QWORD *)(v32 + 8) = "caseSensitive";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v195 = (WTF::StringImpl *)v32;
  v201 = (uint64_t (**)())&unk_1E3593AB8;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v203 = 0;
  v204 = &v201;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v195, 0, (uint64_t)&v201);
  v42 = v204;
  if (v204 == &v201)
  {
    v42 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_20;
    v33 = 5;
  }
  (*v42)[v33]();
LABEL_20:
  v198 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x700000002;
  *(_QWORD *)(v45 + 8) = "isRegex";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v195 = (WTF::StringImpl *)v45;
  v201 = (uint64_t (**)())&unk_1E3593AB8;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v203 = 0;
  v204 = &v201;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v43, v44, &v195, 0, (uint64_t)&v201);
  v55 = v204;
  if (v204 == &v201)
  {
    v55 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_27;
    v46 = 5;
  }
  (*v55)[v46]();
LABEL_27:
  v197 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v56 + 36))
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    v65 = (WTF::StringImpl *)v57;
    *(_QWORD *)v57 = 0x4600000002;
    *(_QWORD *)(v57 + 8) = "Some arguments of method 'Debugger.searchInContent' can't be processed";
    v66 = 4;
    *(_DWORD *)(v57 + 16) = 4;
    if (!*(_BYTE *)(v56 + 48))
    {
      *(_BYTE *)(v56 + 48) = *(_QWORD *)(v56 + 48);
      v66 = *(_DWORD *)v57 + 2;
    }
    LODWORD(v201) = 3;
    *(_DWORD *)v57 = v66;
    v202 = (WTF::StringImpl *)v57;
    v67 = *(unsigned int *)(v56 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v56 + 32))
    {
      v68 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v67 + 1, (unint64_t)&v201);
      v69 = *(unsigned int *)(v56 + 36);
      v70 = *(_QWORD *)(v56 + 24) + 16 * v69;
      *(_DWORD *)v70 = *(_DWORD *)v68;
      v71 = *(_QWORD *)(v68 + 8);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v70 + 8) = v71;
      v72 = v202;
      *(_DWORD *)(v56 + 36) = v69 + 1;
      v202 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
    }
    else
    {
      v74 = *(_QWORD *)(v56 + 24) + 16 * v67;
      *(_DWORD *)v74 = 3;
      *(_QWORD *)(v74 + 8) = v57;
      *(_DWORD *)(v56 + 36) = v67 + 1;
    }
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
    goto LABEL_41;
  }
  v73 = *(_QWORD *)(a1 + 24);
  if (!v73)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 136))(&v195, *(_QWORD *)(a1 + 32), &v200, &v199, &v198, &v197);
    if (v196)
    {
      if (v196 != 1)
      {
        v191 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DebuggerBackendDispatcher::getScriptSource(v191);
        return;
      }
      v125 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v125 + 48))
        *(_BYTE *)(v125 + 48) = *(_QWORD *)(v125 + 48);
      LODWORD(v201) = 5;
      v126 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      v202 = v126;
      v127 = *(unsigned int *)(v125 + 36);
      if ((_DWORD)v127 == *(_DWORD *)(v125 + 32))
      {
        v128 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v125 + 24, v127 + 1, (unint64_t)&v201);
        v129 = *(unsigned int *)(v125 + 36);
        v130 = *(_QWORD *)(v125 + 24) + 16 * v129;
        *(_DWORD *)v130 = *(_DWORD *)v128;
        v131 = *(_QWORD *)(v128 + 8);
        *(_QWORD *)(v128 + 8) = 0;
        *(_QWORD *)(v130 + 8) = v131;
        v132 = v202;
        *(_DWORD *)(v125 + 36) = v129 + 1;
        v202 = 0;
        if (!v132)
          goto LABEL_82;
        v133 = *(_DWORD *)v132 - 2;
        if (*(_DWORD *)v132 == 2)
        {
          WTF::StringImpl::~StringImpl(v132, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
          goto LABEL_82;
        }
        goto LABEL_79;
      }
      v179 = *(_QWORD *)(v125 + 24) + 16 * v127;
      *(_DWORD *)v179 = 5;
      *(_QWORD *)(v179 + 8) = v126;
      *(_DWORD *)(v125 + 36) = v127 + 1;
    }
    else
    {
      v150 = v195;
      v195 = 0;
      v151 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v151 = 0x500000001;
      *(_QWORD *)(v151 + 24) = 0;
      *(_QWORD *)(v151 + 32) = 0;
      *(_QWORD *)(v151 + 16) = 0;
      v194 = (WTF *)v151;
      v152 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v152 = 0x600000002;
      *(_QWORD *)(v152 + 8) = "result";
      *(_DWORD *)(v152 + 16) = 4;
      v192 = v150;
      v193 = (WTF::StringImpl *)v152;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v151 + 16), &v193, (const WTF::StringImpl *)&v192, v153, v154, v155, v156, v157, (uint64_t)&v201);
      if ((_BYTE)v203)
      {
        v165 = (uint64_t *)(v151 + 24);
        v166 = *(unsigned int *)(v151 + 36);
        if ((_DWORD)v166 == *(_DWORD *)(v151 + 32))
        {
          v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v165, v166 + 1, (unint64_t)&v193);
          v166 = *(unsigned int *)(v151 + 36);
          v189 = *(_QWORD *)(v151 + 24);
          v190 = *v188;
          if (*v188)
            *v190 += 2;
          *(_QWORD *)(v189 + 8 * v166) = v190;
        }
        else
        {
          v167 = *v165;
          v168 = v193;
          if (v193)
            *(_DWORD *)v193 += 2;
          *(_QWORD *)(v167 + 8 * v166) = v168;
        }
        *(_DWORD *)(v151 + 36) = v166 + 1;
      }
      v169 = v192;
      v192 = 0;
      if (v169)
      {
        if (*(_DWORD *)v169 == 1)
          WTF::JSONImpl::Value::operator delete(v169, v158, v159, v160, v161, v162, v163, v164);
        else
          --*(_DWORD *)v169;
      }
      v170 = v193;
      v193 = 0;
      if (v170)
      {
        if (*(_DWORD *)v170 == 2)
        {
          WTF::StringImpl::~StringImpl(v170, v158, v159, v160, v161, v162, v163, v164);
          WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
        }
        else
        {
          *(_DWORD *)v170 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v194);
      v132 = v194;
      if (!v194)
        goto LABEL_82;
      v133 = *(_DWORD *)v194 - 1;
      if (*(_DWORD *)v194 != 1)
      {
LABEL_79:
        *(_DWORD *)v132 = v133;
        goto LABEL_82;
      }
      WTF::JSONImpl::Value::operator delete(v194, v58, v59, v60, v61, v62, v63, v64);
    }
LABEL_82:
    if (v196 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593978[v196])(&v201, &v195);
    goto LABEL_41;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *))(*(_QWORD *)v73 + 152))(v73, a2, &v200, &v199, &v198, &v197);
LABEL_41:
  v75 = v199;
  v199 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v200;
  v200 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::getScriptSource(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  WTF *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "scriptId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v122 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v124, v5, v6, &v122, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4600000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Debugger.getScriptSource' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 144))(&v122, *(_QWORD *)(a1 + 32), &v124);
    if (v123)
    {
      if (v123 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DebuggerBackendDispatcher::getFunctionDetails(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v122;
      if (v122)
        *(_DWORD *)v122 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v99 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v99 = 5;
        *(_QWORD *)(v99 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_62;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v127;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v127 = 0;
      if (!v60)
        goto LABEL_62;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    v69 = v122;
    v122 = 0;
    v70 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v70 = 0x500000001;
    *(_QWORD *)(v70 + 16) = 0;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    v121 = (WTF *)v70;
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0xC00000002;
    *(_QWORD *)(v71 + 8) = "scriptSource";
    *(_DWORD *)(v71 + 16) = 4;
    v120 = (WTF::StringImpl *)v71;
    v72 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v72 = 0x400000001;
    *((_QWORD *)v72 + 1) = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    v125 = v72;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v70 + 16), (WTF::AtomStringImpl *)&v120, (const WTF::StringImpl *)&v125, v73, v74, v75, v76, v77, (uint64_t)&v126);
    if ((_BYTE)v128)
    {
      v85 = (uint64_t *)(v70 + 24);
      v86 = *(unsigned int *)(v70 + 36);
      if ((_DWORD)v86 == *(_DWORD *)(v70 + 32))
      {
        v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v120);
        v86 = *(unsigned int *)(v70 + 36);
        v117 = *(_QWORD *)(v70 + 24);
        v118 = *v116;
        if (*v116)
          *v118 += 2;
        *(_QWORD *)(v117 + 8 * v86) = v118;
      }
      else
      {
        v87 = *v85;
        v88 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        *(_QWORD *)(v87 + 8 * v86) = v88;
      }
      *(_DWORD *)(v70 + 36) = v86 + 1;
    }
    v89 = v125;
    v125 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
        WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
      else
        --*(_DWORD *)v89;
    }
    v90 = v120;
    v120 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v121);
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
        if (!v69)
        {
LABEL_62:
          if (v123 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v123])(&v126, &v122);
          goto LABEL_20;
        }
        goto LABEL_55;
      }
      --*(_DWORD *)v121;
    }
    if (!v69)
      goto LABEL_62;
LABEL_55:
    if (*(_DWORD *)v69 != 2)
    {
      *(_DWORD *)v69 -= 2;
      goto LABEL_62;
    }
    v60 = v69;
LABEL_61:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_62;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 160))(v34, a2, &v124);
LABEL_20:
  v36 = v124;
  v124 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::getFunctionDetails(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF *v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xA00000002;
  *(_QWORD *)(v7 + 8) = "functionId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4900000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Debugger.getFunctionDetails' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 152))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DebuggerBackendDispatcher::getBreakpointLocations(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v127;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v127 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v123;
      v123 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0x700000002;
      *(_QWORD *)(v80 + 8) = "details";
      *(_DWORD *)(v80 + 16) = 4;
      v120 = v78;
      v121 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v120, v81, v82, v83, v84, v85, (uint64_t)&v126);
      if ((_BYTE)v128)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v121);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v120;
      v120 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v121;
      v121 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593988[v124])(&v126, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 168))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::getBreakpointLocations(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  int v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF *v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD **v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  WTF *v139;
  WTF::StringImpl *v140;
  WTF *v141;
  WTF *v142;
  int v143;
  WTF *v144;
  WTF *v145;
  WTF *v146;
  WTF::StringImpl *v147;
  char v148;
  WTF **v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x500000002;
  *(_QWORD *)(v8 + 8) = "start";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v142 = (WTF *)v8;
  v146 = (WTF *)&off_1E3593C20;
  v149 = &v146;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v145, v6, v7, &v142, 1, (uint64_t)&v146);
  v17 = v149;
  if (v149 == &v146)
  {
    v17 = &v146;
  }
  else
  {
    if (!v149)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x300000002;
  *(_QWORD *)(v20 + 8) = "end";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v142 = (WTF *)v20;
  v146 = (WTF *)&off_1E3593C20;
  v149 = &v146;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v144, v18, v19, &v142, 1, (uint64_t)&v146);
  v29 = v149;
  if (v149 == &v146)
  {
    v29 = &v146;
  }
  else
  {
    if (!v149)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (!*(_DWORD *)(v30 + 36))
  {
    v47 = a1[3];
    if (v47)
    {
      v48 = v145;
      v145 = 0;
      v146 = v48;
      v142 = v144;
      v144 = 0;
      (*(void (**)(uint64_t, uint64_t, WTF **, WTF **))(*(_QWORD *)v47 + 176))(v47, a2, &v146, &v142);
      v49 = v142;
      v142 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete(v49, v32, v33, v34, v35, v36, v37, v38);
        else
          --*(_DWORD *)v49;
      }
      v50 = v146;
      v146 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 1)
          WTF::JSONImpl::Value::operator delete(v50, v32, v33, v34, v35, v36, v37, v38);
        else
          --*(_DWORD *)v50;
      }
      goto LABEL_32;
    }
    v68 = a1[4];
    v69 = v145;
    v145 = 0;
    v146 = v69;
    v141 = v144;
    v144 = 0;
    (*(void (**)(WTF **__return_ptr, uint64_t, WTF **, WTF **))(*(_QWORD *)v68 + 160))(&v142, v68, &v146, &v141);
    v70 = v141;
    v141 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 1)
        WTF::JSONImpl::Value::operator delete(v70, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v70;
    }
    v71 = v146;
    v146 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 1)
        WTF::JSONImpl::Value::operator delete(v71, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v71;
    }
    if (v143)
    {
      if (v143 != 1)
      {
        v138 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DebuggerBackendDispatcher::setPauseOnDebuggerStatements(v138);
        return;
      }
      v72 = a1[2];
      if (!*(_BYTE *)(v72 + 48))
        *(_BYTE *)(v72 + 48) = *(_QWORD *)(v72 + 48);
      LODWORD(v146) = 5;
      v73 = v142;
      if (v142)
        *(_DWORD *)v142 += 2;
      v147 = v73;
      v74 = *(unsigned int *)(v72 + 36);
      if ((_DWORD)v74 == *(_DWORD *)(v72 + 32))
      {
        v75 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72 + 24, v74 + 1, (unint64_t)&v146);
        v76 = *(unsigned int *)(v72 + 36);
        v77 = *(_QWORD *)(v72 + 24) + 16 * v76;
        *(_DWORD *)v77 = *(_DWORD *)v75;
        v78 = *(_QWORD *)(v75 + 8);
        *(_QWORD *)(v75 + 8) = 0;
        *(_QWORD *)(v77 + 8) = v78;
        v79 = v147;
        *(_DWORD *)(v72 + 36) = v76 + 1;
        v147 = 0;
        if (!v79)
          goto LABEL_77;
        v80 = *(_DWORD *)v79 - 2;
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
          goto LABEL_77;
        }
        goto LABEL_74;
      }
      v126 = *(_QWORD *)(v72 + 24) + 16 * v74;
      *(_DWORD *)v126 = 5;
      *(_QWORD *)(v126 + 8) = v73;
      *(_DWORD *)(v72 + 36) = v74 + 1;
    }
    else
    {
      v97 = v142;
      v142 = 0;
      v98 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v98 = 0x500000001;
      *(_QWORD *)(v98 + 24) = 0;
      *(_QWORD *)(v98 + 32) = 0;
      *(_QWORD *)(v98 + 16) = 0;
      v141 = (WTF *)v98;
      v99 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v99 = 0x900000002;
      *(_QWORD *)(v99 + 8) = "locations";
      *(_DWORD *)(v99 + 16) = 4;
      v139 = v97;
      v140 = (WTF::StringImpl *)v99;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v98 + 16), &v140, (const WTF::StringImpl *)&v139, v100, v101, v102, v103, v104, (uint64_t)&v146);
      if (v148)
      {
        v112 = (uint64_t *)(v98 + 24);
        v113 = *(unsigned int *)(v98 + 36);
        if ((_DWORD)v113 == *(_DWORD *)(v98 + 32))
        {
          v135 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v140);
          v113 = *(unsigned int *)(v98 + 36);
          v136 = *(_QWORD *)(v98 + 24);
          v137 = *v135;
          if (*v135)
            *v137 += 2;
          *(_QWORD *)(v136 + 8 * v113) = v137;
        }
        else
        {
          v114 = *v112;
          v115 = v140;
          if (v140)
            *(_DWORD *)v140 += 2;
          *(_QWORD *)(v114 + 8 * v113) = v115;
        }
        *(_DWORD *)(v98 + 36) = v113 + 1;
      }
      v116 = v139;
      v139 = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 1)
          WTF::JSONImpl::Value::operator delete(v116, v105, v106, v107, v108, v109, v110, v111);
        else
          --*(_DWORD *)v116;
      }
      v117 = v140;
      v140 = 0;
      if (v117)
      {
        if (*(_DWORD *)v117 == 2)
        {
          WTF::StringImpl::~StringImpl(v117, v105, v106, v107, v108, v109, v110, v111);
          WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
        }
        else
        {
          *(_DWORD *)v117 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v141);
      v79 = v141;
      if (!v141)
        goto LABEL_77;
      v80 = *(_DWORD *)v141 - 1;
      if (*(_DWORD *)v141 != 1)
      {
LABEL_74:
        *(_DWORD *)v79 = v80;
        goto LABEL_77;
      }
      WTF::JSONImpl::Value::operator delete(v141, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_77:
    if (v143 != -1)
      ((void (*)(WTF **, WTF **))off_1E3593998[v143])(&v146, &v142);
    goto LABEL_32;
  }
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  v39 = (WTF::StringImpl *)v31;
  *(_QWORD *)v31 = 0x4D00000002;
  *(_QWORD *)(v31 + 8) = "Some arguments of method 'Debugger.getBreakpointLocations' can't be processed";
  v40 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  if (!*(_BYTE *)(v30 + 48))
  {
    *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
    v40 = *(_DWORD *)v31 + 2;
  }
  LODWORD(v146) = 3;
  *(_DWORD *)v31 = v40;
  v147 = (WTF::StringImpl *)v31;
  v41 = *(unsigned int *)(v30 + 36);
  if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
  {
    v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v146);
    v43 = *(unsigned int *)(v30 + 36);
    v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
    *(_DWORD *)v44 = *(_DWORD *)v42;
    v45 = *(_QWORD *)(v42 + 8);
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v44 + 8) = v45;
    v46 = v147;
    *(_DWORD *)(v30 + 36) = v43 + 1;
    v147 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  else
  {
    v51 = *(_QWORD *)(v30 + 24) + 16 * v41;
    *(_DWORD *)v51 = 3;
    *(_QWORD *)(v51 + 8) = v31;
    *(_DWORD *)(v30 + 36) = v41 + 1;
  }
  if (*(_DWORD *)v39 == 2)
  {
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
  }
  else
  {
    *(_DWORD *)v39 -= 2;
  }
LABEL_32:
  if (v144)
  {
    if (*(_DWORD *)v144 == 1)
      WTF::JSONImpl::Value::operator delete(v144, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v144;
  }
  if (v145)
  {
    if (*(_DWORD *)v145 == 1)
      WTF::JSONImpl::Value::operator delete(v145, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v145;
  }
}

void Inspector::DebuggerBackendDispatcher::setPauseOnDebuggerStatements(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  WTF *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF **v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "enabled";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v103 = (WTF::StringImpl *)v8;
  v106 = (WTF *)&unk_1E3593AB8;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v108 = 0;
  v109 = &v106;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v6, v7, &v103, 1, (uint64_t)&v106);
  v18 = v109;
  if (v109 == &v106)
  {
    v18 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x700000002;
  *(_QWORD *)(v21 + 8) = "options";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v103 = (WTF::StringImpl *)v21;
  v106 = (WTF *)&off_1E3593C20;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v105, v19, v20, &v103, 0, (uint64_t)&v106);
  v30 = v109;
  if (v109 == &v106)
  {
    v30 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x5300000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Debugger.setPauseOnDebuggerStatements' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v32 = v41;
    v107 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v106);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v107;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v107 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v84 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (HIBYTE(v17))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL, WTF **))(*(_QWORD *)v48 + 184))(v48, a2, v17 != 0, &v105);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!HIBYTE(v17))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 168))(&v103);
  if (!v104)
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v93 = 0x500000001;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 2) = 0;
    v106 = v93;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v106);
    v74 = v106;
    if (!v106)
      goto LABEL_52;
    v75 = *(_DWORD *)v106 - 1;
    if (*(_DWORD *)v106 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v106, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v67 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v67 + 48))
    *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
  LODWORD(v106) = 5;
  v68 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  v107 = v68;
  v69 = *(unsigned int *)(v67 + 36);
  if ((_DWORD)v69 != *(_DWORD *)(v67 + 32))
  {
    v102 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v102 = 5;
    *(_QWORD *)(v102 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
    goto LABEL_52;
  }
  v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v106);
  v71 = *(unsigned int *)(v67 + 36);
  v72 = *(_QWORD *)(v67 + 24) + 16 * v71;
  *(_DWORD *)v72 = *(_DWORD *)v70;
  v73 = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v72 + 8) = v73;
  v74 = v107;
  *(_DWORD *)(v67 + 36) = v71 + 1;
  v107 = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v74 = v75;
  }
LABEL_52:
  if (v104)
  {
    v84 = v103;
    v103 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v84, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        goto LABEL_28;
      }
      *(_DWORD *)v84 -= 2;
    }
  }
LABEL_28:
  v50 = v105;
  v105 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v50;
  }
}

void Inspector::DebuggerBackendDispatcher::setPauseOnExceptions(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  char v112;
  WTF *v113;
  WTF::StringImpl *v114;
  WTF *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF **v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x500000002;
  *(_QWORD *)(v8 + 8) = "state";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v111 = (WTF::StringImpl *)v8;
  v115 = (WTF *)&off_1E3593B90;
  v116 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v117 = 0;
  v118 = &v115;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v114, v6, v7, &v111, 1, (uint64_t)&v115);
  v17 = v118;
  if (v118 == &v115)
  {
    v17 = &v115;
  }
  else
  {
    if (!v118)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "options";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v111 = (WTF::StringImpl *)v20;
  v115 = (WTF *)&off_1E3593C20;
  v118 = &v115;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v113, v18, v19, &v111, 0, (uint64_t)&v115);
  v29 = v118;
  if (v118 == &v115)
  {
    v29 = &v115;
  }
  else
  {
    if (!v118)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4B00000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Debugger.setPauseOnExceptions' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v115) = 3;
    *(_DWORD *)v31 = v40;
    v116 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v115);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v116;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v116 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v92 = v39;
    goto LABEL_48;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF **))(*(_QWORD *)v47 + 192))(v47, a2, &v114, &v113);
    goto LABEL_27;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF **))(**(_QWORD **)(a1 + 32)
                                                                                             + 176))(&v111, *(_QWORD *)(a1 + 32), &v114, &v113);
  if (!v112)
  {
    v101 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *((_QWORD *)v101 + 3) = 0;
    *((_QWORD *)v101 + 4) = 0;
    *((_QWORD *)v101 + 2) = 0;
    v115 = v101;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v115);
    v82 = v115;
    if (!v115)
      goto LABEL_54;
    v83 = *(_DWORD *)v115 - 1;
    if (*(_DWORD *)v115 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v115, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_54;
    }
    goto LABEL_51;
  }
  v75 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v75 + 48))
    *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
  LODWORD(v115) = 5;
  v76 = v111;
  if (v111)
    *(_DWORD *)v111 += 2;
  v116 = v76;
  v77 = *(unsigned int *)(v75 + 36);
  if ((_DWORD)v77 != *(_DWORD *)(v75 + 32))
  {
    v110 = *(_QWORD *)(v75 + 24) + 16 * v77;
    *(_DWORD *)v110 = 5;
    *(_QWORD *)(v110 + 8) = v76;
    *(_DWORD *)(v75 + 36) = v77 + 1;
    goto LABEL_54;
  }
  v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v115);
  v79 = *(unsigned int *)(v75 + 36);
  v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
  *(_DWORD *)v80 = *(_DWORD *)v78;
  v81 = *(_QWORD *)(v78 + 8);
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v80 + 8) = v81;
  v82 = v116;
  *(_DWORD *)(v75 + 36) = v79 + 1;
  v116 = 0;
  if (v82)
  {
    v83 = *(_DWORD *)v82 - 2;
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      goto LABEL_54;
    }
LABEL_51:
    *(_DWORD *)v82 = v83;
  }
LABEL_54:
  if (v112)
  {
    v92 = v111;
    v111 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
LABEL_48:
        WTF::StringImpl::~StringImpl(v92, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        goto LABEL_27;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
LABEL_27:
  v49 = v113;
  v113 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v49;
  }
  v50 = v114;
  v114 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::setPauseOnAssertions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  WTF *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF **v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "enabled";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v103 = (WTF::StringImpl *)v8;
  v106 = (WTF *)&unk_1E3593AB8;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v108 = 0;
  v109 = &v106;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v6, v7, &v103, 1, (uint64_t)&v106);
  v18 = v109;
  if (v109 == &v106)
  {
    v18 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x700000002;
  *(_QWORD *)(v21 + 8) = "options";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v103 = (WTF::StringImpl *)v21;
  v106 = (WTF *)&off_1E3593C20;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v105, v19, v20, &v103, 0, (uint64_t)&v106);
  v30 = v109;
  if (v109 == &v106)
  {
    v30 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4B00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Debugger.setPauseOnAssertions' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v32 = v41;
    v107 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v106);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v107;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v107 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v84 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (HIBYTE(v17))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL, WTF **))(*(_QWORD *)v48 + 200))(v48, a2, v17 != 0, &v105);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!HIBYTE(v17))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 184))(&v103);
  if (!v104)
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v93 = 0x500000001;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 2) = 0;
    v106 = v93;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v106);
    v74 = v106;
    if (!v106)
      goto LABEL_52;
    v75 = *(_DWORD *)v106 - 1;
    if (*(_DWORD *)v106 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v106, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v67 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v67 + 48))
    *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
  LODWORD(v106) = 5;
  v68 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  v107 = v68;
  v69 = *(unsigned int *)(v67 + 36);
  if ((_DWORD)v69 != *(_DWORD *)(v67 + 32))
  {
    v102 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v102 = 5;
    *(_QWORD *)(v102 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
    goto LABEL_52;
  }
  v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v106);
  v71 = *(unsigned int *)(v67 + 36);
  v72 = *(_QWORD *)(v67 + 24) + 16 * v71;
  *(_DWORD *)v72 = *(_DWORD *)v70;
  v73 = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v72 + 8) = v73;
  v74 = v107;
  *(_DWORD *)(v67 + 36) = v71 + 1;
  v107 = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v74 = v75;
  }
LABEL_52:
  if (v104)
  {
    v84 = v103;
    v103 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v84, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        goto LABEL_28;
      }
      *(_DWORD *)v84 -= 2;
    }
  }
LABEL_28:
  v50 = v105;
  v105 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v50;
  }
}

void Inspector::DebuggerBackendDispatcher::setPauseOnMicrotasks(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  WTF **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  WTF *v105;
  WTF *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF **v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "enabled";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v103 = (WTF::StringImpl *)v8;
  v106 = (WTF *)&unk_1E3593AB8;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v108 = 0;
  v109 = &v106;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v6, v7, &v103, 1, (uint64_t)&v106);
  v18 = v109;
  if (v109 == &v106)
  {
    v18 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x700000002;
  *(_QWORD *)(v21 + 8) = "options";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v103 = (WTF::StringImpl *)v21;
  v106 = (WTF *)&off_1E3593C20;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v105, v19, v20, &v103, 0, (uint64_t)&v106);
  v30 = v109;
  if (v109 == &v106)
  {
    v30 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v30 + v22))();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4B00000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Debugger.setPauseOnMicrotasks' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v32 = v41;
    v107 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v106);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v107;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v107 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_28;
    }
    v84 = v40;
    goto LABEL_46;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    if (HIBYTE(v17))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL, WTF **))(*(_QWORD *)v48 + 208))(v48, a2, v17 != 0, &v105);
      goto LABEL_28;
    }
LABEL_57:
    __break(1u);
  }
  if (!HIBYTE(v17))
    goto LABEL_57;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 192))(&v103);
  if (!v104)
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v93 = 0x500000001;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 2) = 0;
    v106 = v93;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v106);
    v74 = v106;
    if (!v106)
      goto LABEL_52;
    v75 = *(_DWORD *)v106 - 1;
    if (*(_DWORD *)v106 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v106, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  v67 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v67 + 48))
    *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
  LODWORD(v106) = 5;
  v68 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  v107 = v68;
  v69 = *(unsigned int *)(v67 + 36);
  if ((_DWORD)v69 != *(_DWORD *)(v67 + 32))
  {
    v102 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v102 = 5;
    *(_QWORD *)(v102 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
    goto LABEL_52;
  }
  v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v106);
  v71 = *(unsigned int *)(v67 + 36);
  v72 = *(_QWORD *)(v67 + 24) + 16 * v71;
  *(_DWORD *)v72 = *(_DWORD *)v70;
  v73 = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v72 + 8) = v73;
  v74 = v107;
  *(_DWORD *)(v67 + 36) = v71 + 1;
  v107 = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_52;
    }
LABEL_49:
    *(_DWORD *)v74 = v75;
  }
LABEL_52:
  if (v104)
  {
    v84 = v103;
    v103 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
      {
LABEL_46:
        WTF::StringImpl::~StringImpl(v84, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
        goto LABEL_28;
      }
      *(_DWORD *)v84 -= 2;
    }
  }
LABEL_28:
  v50 = v105;
  v105 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v50;
  }
}

void Inspector::DebuggerBackendDispatcher::setPauseForInternalScripts(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xB00000002;
  *(_QWORD *)(v7 + 8) = "shouldPause";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x5100000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Debugger.setPauseForInternalScripts' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 216))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 200))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::evaluateOnCallFrame(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t (***v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t (***v67)();
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t (***v80)();
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t (***v93)();
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t (***v106)();
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::AtomStringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  uint64_t (***v119)();
  uint64_t v120;
  uint64_t v121;
  WTF::AtomStringImpl *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  int v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF *v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  WTF::AtomStringImpl *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  WTF *v284;
  WTF *v285;
  WTF *v286;
  uint64_t v287;
  WTF *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  WTF::AtomStringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  WTF *v304;
  WTF *v305;
  WTF *v306;
  uint64_t v307;
  double *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  WTF::AtomStringImpl *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  WTF *v324;
  WTF *v325;
  WTF *v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _DWORD **v360;
  uint64_t v361;
  _DWORD *v362;
  _DWORD **v363;
  uint64_t v364;
  _DWORD *v365;
  _DWORD **v366;
  uint64_t v367;
  _DWORD *v368;
  uint64_t v369;
  WTF *v370;
  WTF *v371;
  __int16 v372;
  __int16 v373;
  __int16 v374;
  __int16 v375;
  __int16 v376;
  __int16 v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  WTF *v381;
  WTF::StringImpl *v382;
  WTF::StringImpl *v383;
  char v384;
  uint64_t (**v385)();
  __int128 v386;
  uint64_t (***v387)();
  uint64_t v388;

  v388 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xB00000002;
  *(_QWORD *)(v8 + 8) = "callFrameId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v382 = (WTF::StringImpl *)v8;
  v385 = &off_1E3593B90;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asString;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v380, v6, v7, &v382, 1, (uint64_t)&v385);
  v17 = v387;
  if (v387 == &v385)
  {
    v17 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xA00000002;
  *(_QWORD *)(v20 + 8) = "expression";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v382 = (WTF::StringImpl *)v20;
  v385 = &off_1E3593B90;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asString;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v379, v18, v19, &v382, 1, (uint64_t)&v385);
  v29 = v387;
  if (v387 == &v385)
  {
    v29 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xB00000002;
  *(_QWORD *)(v32 + 8) = "objectGroup";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v382 = (WTF::StringImpl *)v32;
  v385 = &off_1E3593B90;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asString;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v378, v30, v31, &v382, 0, (uint64_t)&v385);
  v41 = v387;
  if (v387 == &v385)
  {
    v41 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_20;
    v33 = 5;
  }
  (*v41)[v33]();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  v43 = (uint64_t)*a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x1500000002;
  *(_QWORD *)(v44 + 8) = "includeCommandLineAPI";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v382 = (WTF::StringImpl *)v44;
  v385 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  v53 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v42, v43, &v382, 0, (uint64_t)&v385);
  v54 = v387;
  if (v387 == &v385)
  {
    v54 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_27;
    v45 = 5;
  }
  (*v54)[v45]();
LABEL_27:
  v377 = v53;
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v55 = *(_QWORD *)(a1 + 16);
  v56 = (uint64_t)*a3;
  v57 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v57 = 0x2400000002;
  *(_QWORD *)(v57 + 8) = "doNotPauseOnExceptionsAndMuteConsole";
  v58 = 4;
  *(_DWORD *)(v57 + 16) = 4;
  v382 = (WTF::StringImpl *)v57;
  v385 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  v66 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v55, v56, &v382, 0, (uint64_t)&v385);
  v67 = v387;
  if (v387 == &v385)
  {
    v67 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_34;
    v58 = 5;
  }
  (*v67)[v58]();
LABEL_34:
  v376 = v66;
  if (*(_DWORD *)v57 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v57, v59, v60, v61, v62, v63, v64, v65);
    WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
  }
  else
  {
    *(_DWORD *)v57 -= 2;
  }
  v68 = *(_QWORD *)(a1 + 16);
  v69 = (uint64_t)*a3;
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0xD00000002;
  *(_QWORD *)(v70 + 8) = "returnByValue";
  v71 = 4;
  *(_DWORD *)(v70 + 16) = 4;
  v382 = (WTF::StringImpl *)v70;
  v385 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  v79 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v68, v69, &v382, 0, (uint64_t)&v385);
  v80 = v387;
  if (v387 == &v385)
  {
    v80 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_41;
    v71 = 5;
  }
  (*v80)[v71]();
LABEL_41:
  v375 = v79;
  if (*(_DWORD *)v70 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v70, v72, v73, v74, v75, v76, v77, v78);
    WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
  }
  else
  {
    *(_DWORD *)v70 -= 2;
  }
  v81 = *(_QWORD *)(a1 + 16);
  v82 = (uint64_t)*a3;
  v83 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v83 = 0xF00000002;
  *(_QWORD *)(v83 + 8) = "generatePreview";
  v84 = 4;
  *(_DWORD *)(v83 + 16) = 4;
  v382 = (WTF::StringImpl *)v83;
  v385 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  v92 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v81, v82, &v382, 0, (uint64_t)&v385);
  v93 = v387;
  if (v387 == &v385)
  {
    v93 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_48;
    v84 = 5;
  }
  (*v93)[v84]();
LABEL_48:
  v374 = v92;
  if (*(_DWORD *)v83 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v83, v85, v86, v87, v88, v89, v90, v91);
    WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
  }
  else
  {
    *(_DWORD *)v83 -= 2;
  }
  v94 = *(_QWORD *)(a1 + 16);
  v95 = (uint64_t)*a3;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0xA00000002;
  *(_QWORD *)(v96 + 8) = "saveResult";
  v97 = 4;
  *(_DWORD *)(v96 + 16) = 4;
  v382 = (WTF::StringImpl *)v96;
  v385 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  v105 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v94, v95, &v382, 0, (uint64_t)&v385);
  v106 = v387;
  if (v387 == &v385)
  {
    v106 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_55;
    v97 = 5;
  }
  (*v106)[v97]();
LABEL_55:
  v373 = v105;
  if (*(_DWORD *)v96 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v96, v98, v99, v100, v101, v102, v103, v104);
    WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
  }
  else
  {
    *(_DWORD *)v96 -= 2;
  }
  v107 = *(_QWORD *)(a1 + 16);
  v108 = (uint64_t)*a3;
  v109 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v109 = 0x1200000002;
  *(_QWORD *)(v109 + 8) = "emulateUserGesture";
  v110 = 4;
  *(_DWORD *)(v109 + 16) = 4;
  v382 = (WTF::StringImpl *)v109;
  v385 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v386 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v386 + 1) = 0;
  v387 = &v385;
  v118 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v107, v108, &v382, 0, (uint64_t)&v385);
  v119 = v387;
  if (v387 == &v385)
  {
    v119 = &v385;
  }
  else
  {
    if (!v387)
      goto LABEL_62;
    v110 = 5;
  }
  (*v119)[v110]();
LABEL_62:
  v372 = v118;
  if (*(_DWORD *)v109 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v109, v111, v112, v113, v114, v115, v116, v117);
    WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
  }
  else
  {
    *(_DWORD *)v109 -= 2;
  }
  v120 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v120 + 36))
  {
    v121 = WTF::fastCompactMalloc((WTF *)0x20);
    v129 = (WTF::StringImpl *)v121;
    *(_QWORD *)v121 = 0x4A00000002;
    *(_QWORD *)(v121 + 8) = "Some arguments of method 'Debugger.evaluateOnCallFrame' can't be processed";
    v130 = 4;
    *(_DWORD *)(v121 + 16) = 4;
    if (!*(_BYTE *)(v120 + 48))
    {
      *(_BYTE *)(v120 + 48) = *(_QWORD *)(v120 + 48);
      v130 = *(_DWORD *)v121 + 2;
    }
    LODWORD(v385) = 3;
    *(_DWORD *)v121 = v130;
    *(_QWORD *)&v386 = v121;
    v131 = *(unsigned int *)(v120 + 36);
    if ((_DWORD)v131 == *(_DWORD *)(v120 + 32))
    {
      v132 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v120 + 24, v131 + 1, (unint64_t)&v385);
      v133 = *(unsigned int *)(v120 + 36);
      v134 = *(_QWORD *)(v120 + 24) + 16 * v133;
      *(_DWORD *)v134 = *(_DWORD *)v132;
      v135 = *(_QWORD *)(v132 + 8);
      *(_QWORD *)(v132 + 8) = 0;
      *(_QWORD *)(v134 + 8) = v135;
      v136 = (WTF::StringImpl *)v386;
      *(_DWORD *)(v120 + 36) = v133 + 1;
      *(_QWORD *)&v386 = 0;
      if (v136)
      {
        if (*(_DWORD *)v136 == 2)
        {
          WTF::StringImpl::~StringImpl(v136, v122, v123, v124, v125, v126, v127, v128);
          WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
        }
        else
        {
          *(_DWORD *)v136 -= 2;
        }
      }
    }
    else
    {
      v138 = *(_QWORD *)(v120 + 24) + 16 * v131;
      *(_DWORD *)v138 = 3;
      *(_QWORD *)(v138 + 8) = v121;
      *(_DWORD *)(v120 + 36) = v131 + 1;
    }
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v122, v123, v124, v125, v126, v127, v128);
      WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
    goto LABEL_76;
  }
  v137 = *(_QWORD *)(a1 + 24);
  if (!v137)
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, __int16 *, __int16 *, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 208))(&v385, *(_QWORD *)(a1 + 32), &v380, &v379, &v378, &v377, &v376, &v375, &v374, &v373, &v372);
    if ((_DWORD)v387)
    {
      if ((_DWORD)v387 != 1)
      {
        v369 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::DebuggerBackendDispatcher::setShouldBlackboxURL(v369);
        return;
      }
      v238 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v238 + 48))
        *(_BYTE *)(v238 + 48) = *(_QWORD *)(v238 + 48);
      LODWORD(v382) = 5;
      v239 = (WTF::StringImpl *)v385;
      if (v385)
        *(_DWORD *)v385 += 2;
      v383 = v239;
      v240 = *(unsigned int *)(v238 + 36);
      if ((_DWORD)v240 == *(_DWORD *)(v238 + 32))
      {
        v241 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v238 + 24, v240 + 1, (unint64_t)&v382);
        v242 = *(unsigned int *)(v238 + 36);
        v243 = *(_QWORD *)(v238 + 24) + 16 * v242;
        *(_DWORD *)v243 = *(_DWORD *)v241;
        v244 = *(_QWORD *)(v241 + 8);
        *(_QWORD *)(v241 + 8) = 0;
        *(_QWORD *)(v243 + 8) = v244;
        v245 = v383;
        *(_DWORD *)(v238 + 36) = v242 + 1;
        v383 = 0;
        if (!v245)
          goto LABEL_152;
        v246 = *(_DWORD *)v245 - 2;
        if (*(_DWORD *)v245 == 2)
        {
          WTF::StringImpl::~StringImpl(v245, v122, v123, v124, v125, v126, v127, v128);
          WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
          goto LABEL_152;
        }
        goto LABEL_149;
      }
      v335 = *(_QWORD *)(v238 + 24) + 16 * v240;
      *(_DWORD *)v335 = 5;
      *(_QWORD *)(v335 + 8) = v239;
      *(_DWORD *)(v238 + 36) = v240 + 1;
    }
    else
    {
      v263 = (WTF *)v385;
      v385 = 0;
      v264 = (unsigned __int16)v386;
      v265 = *(_QWORD *)((char *)&v386 + 4);
      v266 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v266 = 0x500000001;
      *(_QWORD *)(v266 + 16) = 0;
      v267 = (uint64_t *)(v266 + 16);
      *(_QWORD *)(v266 + 24) = 0;
      *(_QWORD *)(v266 + 32) = 0;
      v371 = (WTF *)v266;
      v268 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v268 = 0x600000002;
      *(_QWORD *)(v268 + 8) = "result";
      *(_DWORD *)(v268 + 16) = 4;
      v381 = (WTF *)v268;
      v370 = v263;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v266 + 16), (WTF::AtomStringImpl *)&v381, (const WTF::StringImpl *)&v370, v269, v270, v271, v272, v273, (uint64_t)&v382);
      if (v384)
      {
        v281 = (uint64_t *)(v266 + 24);
        v282 = *(unsigned int *)(v266 + 36);
        if ((_DWORD)v282 == *(_DWORD *)(v266 + 32))
        {
          v360 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v281, v282 + 1, (unint64_t)&v381);
          v282 = *(unsigned int *)(v266 + 36);
          v361 = *(_QWORD *)(v266 + 24);
          v362 = *v360;
          if (*v360)
            *v362 += 2;
          *(_QWORD *)(v361 + 8 * v282) = v362;
        }
        else
        {
          v283 = *v281;
          v284 = v381;
          if (v381)
            *(_DWORD *)v381 += 2;
          *(_QWORD *)(v283 + 8 * v282) = v284;
        }
        *(_DWORD *)(v266 + 36) = v282 + 1;
      }
      v285 = v370;
      v370 = 0;
      if (v285)
      {
        if (*(_DWORD *)v285 == 1)
          WTF::JSONImpl::Value::operator delete(v285, v274, v275, v276, v277, v278, v279, v280);
        else
          --*(_DWORD *)v285;
      }
      v286 = v381;
      v381 = 0;
      if (v286)
      {
        if (*(_DWORD *)v286 == 2)
        {
          WTF::StringImpl::~StringImpl(v286, v274, v275, v276, v277, v278, v279, v280);
          WTF::fastFree(v336, v337, v338, v339, v340, v341, v342, v343);
        }
        else
        {
          *(_DWORD *)v286 -= 2;
        }
      }
      if (v264 >= 0x100)
      {
        v287 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v287 = 0x900000002;
        *(_QWORD *)(v287 + 8) = "wasThrown";
        *(_DWORD *)(v287 + 16) = 4;
        v370 = (WTF *)v287;
        v288 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v288 = 0x100000001;
        *((_BYTE *)v288 + 8) = v264 != 0;
        v381 = v288;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v267, (WTF::AtomStringImpl *)&v370, (const WTF::StringImpl *)&v381, v289, v290, v291, v292, v293, (uint64_t)&v382);
        if (v384)
        {
          v301 = (uint64_t *)(v266 + 24);
          v302 = *(unsigned int *)(v266 + 36);
          if ((_DWORD)v302 == *(_DWORD *)(v266 + 32))
          {
            v366 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v301, v302 + 1, (unint64_t)&v370);
            v302 = *(unsigned int *)(v266 + 36);
            v367 = *(_QWORD *)(v266 + 24);
            v368 = *v366;
            if (*v366)
              *v368 += 2;
            *(_QWORD *)(v367 + 8 * v302) = v368;
          }
          else
          {
            v303 = *v301;
            v304 = v370;
            if (v370)
              *(_DWORD *)v370 += 2;
            *(_QWORD *)(v303 + 8 * v302) = v304;
          }
          *(_DWORD *)(v266 + 36) = v302 + 1;
        }
        v305 = v381;
        v381 = 0;
        if (v305)
        {
          if (*(_DWORD *)v305 == 1)
            WTF::JSONImpl::Value::operator delete(v305, v294, v295, v296, v297, v298, v299, v300);
          else
            --*(_DWORD *)v305;
        }
        v306 = v370;
        v370 = 0;
        if (v306)
        {
          if (*(_DWORD *)v306 == 2)
          {
            WTF::StringImpl::~StringImpl(v306, v294, v295, v296, v297, v298, v299, v300);
            WTF::fastFree(v352, v353, v354, v355, v356, v357, v358, v359);
          }
          else
          {
            *(_DWORD *)v306 -= 2;
          }
        }
      }
      if ((v265 & 0xFF00000000) != 0)
      {
        v307 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v307 = 0x1000000002;
        *(_QWORD *)(v307 + 8) = "savedResultIndex";
        *(_DWORD *)(v307 + 16) = 4;
        v370 = (WTF *)v307;
        v308 = (double *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v308 = 0x300000001;
        v308[1] = (double)(int)v265;
        v381 = (WTF *)v308;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v267, (WTF::AtomStringImpl *)&v370, (const WTF::StringImpl *)&v381, v309, v310, v311, v312, v313, (uint64_t)&v382);
        if (v384)
        {
          v321 = (uint64_t *)(v266 + 24);
          v322 = *(unsigned int *)(v266 + 36);
          if ((_DWORD)v322 == *(_DWORD *)(v266 + 32))
          {
            v363 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v321, v322 + 1, (unint64_t)&v370);
            v322 = *(unsigned int *)(v266 + 36);
            v364 = *(_QWORD *)(v266 + 24);
            v365 = *v363;
            if (*v363)
              *v365 += 2;
            *(_QWORD *)(v364 + 8 * v322) = v365;
          }
          else
          {
            v323 = *v321;
            v324 = v370;
            if (v370)
              *(_DWORD *)v370 += 2;
            *(_QWORD *)(v323 + 8 * v322) = v324;
          }
          *(_DWORD *)(v266 + 36) = v322 + 1;
        }
        v325 = v381;
        v381 = 0;
        if (v325)
        {
          if (*(_DWORD *)v325 == 1)
            WTF::JSONImpl::Value::operator delete(v325, v314, v315, v316, v317, v318, v319, v320);
          else
            --*(_DWORD *)v325;
        }
        v326 = v370;
        v370 = 0;
        if (v326)
        {
          if (*(_DWORD *)v326 == 2)
          {
            WTF::StringImpl::~StringImpl(v326, v314, v315, v316, v317, v318, v319, v320);
            WTF::fastFree(v344, v345, v346, v347, v348, v349, v350, v351);
          }
          else
          {
            *(_DWORD *)v326 -= 2;
          }
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v371);
      v245 = v371;
      if (!v371)
        goto LABEL_152;
      v246 = *(_DWORD *)v371 - 1;
      if (*(_DWORD *)v371 != 1)
      {
LABEL_149:
        *(_DWORD *)v245 = v246;
        goto LABEL_152;
      }
      WTF::JSONImpl::Value::operator delete(v371, v122, v123, v124, v125, v126, v127, v128);
    }
LABEL_152:
    if ((_DWORD)v387 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t (***)()))off_1E35939A8[v387])(&v382, &v385);
    goto LABEL_76;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, __int16 *, __int16 *, __int16 *, __int16 *))(*(_QWORD *)v137 + 224))(v137, a2, &v380, &v379, &v378, &v377, &v376, &v375, &v374, &v373, &v372);
LABEL_76:
  v139 = v378;
  v378 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v122, v123, v124, v125, v126, v127, v128);
      WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = v379;
  v379 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v122, v123, v124, v125, v126, v127, v128);
      WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  v141 = v380;
  v380 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, v122, v123, v124, v125, v126, v127, v128);
      WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::setShouldBlackboxURL(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  WTF **v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  int v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v153;
  char v154;
  __int16 v155;
  __int16 v156;
  WTF::StringImpl *v157;
  WTF *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  WTF **v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x300000002;
  *(_QWORD *)(v7 + 8) = "url";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v153 = (WTF::StringImpl *)v7;
  v158 = (WTF *)&off_1E3593B90;
  v159 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v160 = 0;
  v161 = &v158;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v157, v5, v6, &v153, 1, (uint64_t)&v158);
  v16 = v161;
  if (v161 == &v158)
  {
    v16 = &v158;
  }
  else
  {
    if (!v161)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (uint64_t)*a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0xE00000002;
  *(_QWORD *)(v19 + 8) = "shouldBlackbox";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  v153 = (WTF::StringImpl *)v19;
  v158 = (WTF *)&unk_1E3593AB8;
  v159 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v160 = 0;
  v161 = &v158;
  v28 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v17, v18, &v153, 1, (uint64_t)&v158);
  v29 = v161;
  if (v161 == &v158)
  {
    v29 = &v158;
  }
  else
  {
    if (!v161)
      goto LABEL_13;
    v20 = 5;
  }
  (*((void (**)(void))*v29 + v20))();
LABEL_13:
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xD00000002;
  *(_QWORD *)(v32 + 8) = "caseSensitive";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v153 = (WTF::StringImpl *)v32;
  v158 = (WTF *)&unk_1E3593AB8;
  v159 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v160 = 0;
  v161 = &v158;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v153, 0, (uint64_t)&v158);
  v42 = v161;
  if (v161 == &v158)
  {
    v42 = &v158;
  }
  else
  {
    if (!v161)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v42 + v33))();
LABEL_20:
  v156 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x700000002;
  *(_QWORD *)(v45 + 8) = "isRegex";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v153 = (WTF::StringImpl *)v45;
  v158 = (WTF *)&unk_1E3593AB8;
  v159 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v160 = 0;
  v161 = &v158;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v43, v44, &v153, 0, (uint64_t)&v158);
  v55 = v161;
  if (v161 == &v158)
  {
    v55 = &v158;
  }
  else
  {
    if (!v161)
      goto LABEL_27;
    v46 = 5;
  }
  (*((void (**)(void))*v55 + v46))();
LABEL_27:
  v155 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v56 + 36))
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    v65 = (WTF::StringImpl *)v57;
    *(_QWORD *)v57 = 0x4B00000002;
    *(_QWORD *)(v57 + 8) = "Some arguments of method 'Debugger.setShouldBlackboxURL' can't be processed";
    v66 = 4;
    *(_DWORD *)(v57 + 16) = 4;
    if (!*(_BYTE *)(v56 + 48))
    {
      *(_BYTE *)(v56 + 48) = *(_QWORD *)(v56 + 48);
      v66 = *(_DWORD *)v57 + 2;
    }
    LODWORD(v158) = 3;
    *(_DWORD *)v57 = v66;
    v159 = (WTF::StringImpl *)v57;
    v67 = *(unsigned int *)(v56 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v56 + 32))
    {
      v68 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v67 + 1, (unint64_t)&v158);
      v69 = *(unsigned int *)(v56 + 36);
      v70 = *(_QWORD *)(v56 + 24) + 16 * v69;
      *(_DWORD *)v70 = *(_DWORD *)v68;
      v71 = *(_QWORD *)(v68 + 8);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v70 + 8) = v71;
      v72 = v159;
      *(_DWORD *)(v56 + 36) = v69 + 1;
      v159 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
    }
    else
    {
      v74 = *(_QWORD *)(v56 + 24) + 16 * v67;
      *(_DWORD *)v74 = 3;
      *(_QWORD *)(v74 + 8) = v57;
      *(_DWORD *)(v56 + 36) = v67 + 1;
    }
    if (*(_DWORD *)v65 != 2)
    {
      *(_DWORD *)v65 -= 2;
      goto LABEL_42;
    }
    v133 = v65;
    goto LABEL_62;
  }
  v73 = *(_QWORD *)(a1 + 24);
  if (v73)
  {
    if (HIBYTE(v28))
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, BOOL, __int16 *, __int16 *))(*(_QWORD *)v73 + 232))(v73, a2, &v157, v28 != 0, &v156, &v155);
      goto LABEL_42;
    }
LABEL_73:
    __break(1u);
  }
  if (!HIBYTE(v28))
    goto LABEL_73;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, BOOL, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 216))(&v153, *(_QWORD *)(a1 + 32), &v157, v28 != 0, &v156, &v155);
  if (!v154)
  {
    v142 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v142 = 0x500000001;
    *((_QWORD *)v142 + 3) = 0;
    *((_QWORD *)v142 + 4) = 0;
    *((_QWORD *)v142 + 2) = 0;
    v158 = v142;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v158);
    v123 = v158;
    if (!v158)
      goto LABEL_68;
    v124 = *(_DWORD *)v158 - 1;
    if (*(_DWORD *)v158 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v158, v58, v59, v60, v61, v62, v63, v64);
      goto LABEL_68;
    }
    goto LABEL_65;
  }
  v116 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v116 + 48))
    *(_BYTE *)(v116 + 48) = *(_QWORD *)(v116 + 48);
  LODWORD(v158) = 5;
  v117 = v153;
  if (v153)
    *(_DWORD *)v153 += 2;
  v159 = v117;
  v118 = *(unsigned int *)(v116 + 36);
  if ((_DWORD)v118 != *(_DWORD *)(v116 + 32))
  {
    v151 = *(_QWORD *)(v116 + 24) + 16 * v118;
    *(_DWORD *)v151 = 5;
    *(_QWORD *)(v151 + 8) = v117;
    *(_DWORD *)(v116 + 36) = v118 + 1;
    goto LABEL_68;
  }
  v119 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v116 + 24, v118 + 1, (unint64_t)&v158);
  v120 = *(unsigned int *)(v116 + 36);
  v121 = *(_QWORD *)(v116 + 24) + 16 * v120;
  *(_DWORD *)v121 = *(_DWORD *)v119;
  v122 = *(_QWORD *)(v119 + 8);
  *(_QWORD *)(v119 + 8) = 0;
  *(_QWORD *)(v121 + 8) = v122;
  v123 = v159;
  *(_DWORD *)(v116 + 36) = v120 + 1;
  v159 = 0;
  if (v123)
  {
    v124 = *(_DWORD *)v123 - 2;
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
      goto LABEL_68;
    }
LABEL_65:
    *(_DWORD *)v123 = v124;
  }
LABEL_68:
  if (v154)
  {
    v133 = v153;
    v153 = 0;
    if (v133)
    {
      if (*(_DWORD *)v133 == 2)
      {
LABEL_62:
        WTF::StringImpl::~StringImpl(v133, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        goto LABEL_42;
      }
      *(_DWORD *)v133 -= 2;
    }
  }
LABEL_42:
  v75 = v157;
  v157 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
}

void Inspector::DebuggerBackendDispatcher::setBlackboxBreakpointEvaluations(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1D00000002;
  *(_QWORD *)(v7 + 8) = "blackboxBreakpointEvaluations";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x5700000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Debugger.setBlackboxBreakpointEvaluations' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 240))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 224))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::HeapBackendDispatcher::create(Inspector::HeapBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35916B0;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x400000002;
  *(_QWORD *)(v8 + 8) = "Heap";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::HeapBackendDispatcher *Inspector::HeapBackendDispatcher::HeapBackendDispatcher(Inspector::HeapBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::HeapBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::HeapBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35916B0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x400000002;
  *(_QWORD *)(v5 + 8) = "Heap";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::HeapBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35916B0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x400000002;
  *(_QWORD *)(v5 + 8) = "Heap";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::HeapBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  void (*v27)(_QWORD *, uint64_t, WTF **);
  uint64_t v28;
  _QWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl **v102;
  const WTF::StringImpl *v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  int i;
  unsigned int v108;
  WTF *v109;
  WTF::StringImpl *v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _OWORD *v185;
  char *v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  void (*v194)(uint64_t, uint64_t);
  uint64_t v195;
  WTF::StringImpl *v196;
  void (*v197)(uint64_t, uint64_t);
  uint64_t v198;
  WTF::StringImpl *v199;
  void (*v200)(uint64_t, uint64_t);
  uint64_t v201;
  WTF::StringImpl *v202;
  void (*v203)(uint64_t, uint64_t);
  uint64_t v204;
  WTF::StringImpl *v205;
  void (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  WTF::StringImpl *v208;
  void (*v209)(uint64_t, uint64_t, uint64_t *);
  uint64_t v210;
  WTF::StringImpl *v211;
  void (*v212)(uint64_t, uint64_t, uint64_t *);
  uint64_t v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v190 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v190, v9, &v189);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if ((byte_1ECF587F8 & 1) != 0)
    goto LABEL_4;
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x600000002;
  *(_QWORD *)(v85 + 8) = "enable";
  *(_DWORD *)(v85 + 16) = 4;
  v190 = (WTF::StringImpl *)v85;
  v191 = (WTF::StringImpl *)Inspector::HeapBackendDispatcher::enable;
  v192 = 0;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x700000002;
  *(_QWORD *)(v86 + 8) = "disable";
  *(_DWORD *)(v86 + 16) = 4;
  v193 = (WTF::StringImpl *)v86;
  v194 = Inspector::HeapBackendDispatcher::disable;
  v195 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x200000002;
  *(_QWORD *)(v87 + 8) = "gc";
  *(_DWORD *)(v87 + 16) = 4;
  v196 = (WTF::StringImpl *)v87;
  v197 = Inspector::HeapBackendDispatcher::gc;
  v198 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x800000002;
  *(_QWORD *)(v88 + 8) = "snapshot";
  *(_DWORD *)(v88 + 16) = 4;
  v199 = (WTF::StringImpl *)v88;
  v200 = Inspector::HeapBackendDispatcher::snapshot;
  v201 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0xD00000002;
  *(_QWORD *)(v89 + 8) = "startTracking";
  *(_DWORD *)(v89 + 16) = 4;
  v202 = (WTF::StringImpl *)v89;
  v203 = Inspector::HeapBackendDispatcher::startTracking;
  v204 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0xC00000002;
  *(_QWORD *)(v90 + 8) = "stopTracking";
  *(_DWORD *)(v90 + 16) = 4;
  v205 = (WTF::StringImpl *)v90;
  v206 = Inspector::HeapBackendDispatcher::stopTracking;
  v207 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0xA00000002;
  *(_QWORD *)(v91 + 8) = "getPreview";
  *(_DWORD *)(v91 + 16) = 4;
  v208 = (WTF::StringImpl *)v91;
  v209 = Inspector::HeapBackendDispatcher::getPreview;
  v210 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0xF00000002;
  *(_QWORD *)(v92 + 8) = "getRemoteObject";
  *(_DWORD *)(v92 + 16) = 4;
  v211 = (WTF::StringImpl *)v92;
  v212 = Inspector::HeapBackendDispatcher::getRemoteObject;
  v213 = 0;
  v93 = (_OWORD *)WTF::fastMalloc((WTF *)0x190);
  v187 = 0;
  *v93 = xmmword_199156B80;
  v93[2] = 0u;
  v93[3] = 0u;
  v93[4] = 0u;
  v93[5] = 0u;
  v93[6] = 0u;
  v93[7] = 0u;
  v93[8] = 0u;
  v93[9] = 0u;
  v93[10] = 0u;
  v93[11] = 0u;
  v93[12] = 0u;
  v93[13] = 0u;
  v93[14] = 0u;
  v93[15] = 0u;
  v93[16] = 0u;
  v93[17] = 0u;
  v93[18] = 0u;
  v93[19] = 0u;
  v93[20] = 0u;
  v93[21] = 0u;
  v93[22] = 0u;
  v93[23] = 0u;
  v93[24] = 0u;
  v93[1] = 0u;
  v188 = (WTF::StringImpl *)(v93 + 1);
  do
  {
    v100 = v188;
    if (v188
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v188, 8u), (v100 = v188) != 0))
    {
      v101 = *((_DWORD *)v100 - 2);
    }
    else
    {
      v101 = 0;
    }
    v102 = &v190 + 3 * v187;
    v103 = *v102;
    v104 = *((_DWORD *)*v102 + 4);
    if (v104 < 0x100)
      v105 = WTF::StringImpl::hashSlowCase(*v102);
    else
      v105 = v104 >> 8;
    v106 = 0;
    v185 = v102 + 1;
    for (i = 1; ; ++i)
    {
      v108 = v105 & v101;
      v109 = (WTF *)*((_QWORD *)v100 + 3 * (v105 & v101));
      if (v109 == (WTF *)-1)
      {
        v106 = (char *)v100 + 24 * v108;
        goto LABEL_70;
      }
      if (!v109)
        break;
      if (WTF::equal(v109, v103, v11))
        goto LABEL_86;
LABEL_70:
      v105 = i + v108;
    }
    v186 = (char *)v100 + 24 * v108;
    if (v106)
    {
      *(_QWORD *)v106 = 0;
      *((_QWORD *)v106 + 1) = 0;
      *((_QWORD *)v106 + 2) = 0;
      --*((_DWORD *)v100 - 4);
      v186 = v106;
    }
    if (v103)
      *(_DWORD *)v103 += 2;
    *(_QWORD *)v186 = v103;
    *(_OWORD *)(v186 + 8) = *v185;
    v110 = v188;
    if (v188)
      v111 = *((_DWORD *)v188 - 3) + 1;
    else
      v111 = 1;
    *((_DWORD *)v188 - 3) = v111;
    v112 = (*((_DWORD *)v110 - 4) + v111);
    v113 = *((unsigned int *)v110 - 1);
    if (v113 > 0x400)
    {
      if (v113 <= 2 * v112)
      {
LABEL_81:
        v114 = (_DWORD)v113 << (6 * v111 >= (2 * v113));
        goto LABEL_85;
      }
    }
    else if (3 * v113 <= 4 * v112)
    {
      if ((_DWORD)v113)
        goto LABEL_81;
      v114 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v188, v114);
    }
LABEL_86:
    ++v187;
  }
  while (v187 != 8);
  v115 = v188;
  v188 = 0;
  qword_1ECF58840 = (uint64_t)v115;
  v116 = v211;
  v211 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  v117 = v208;
  v208 = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
    {
      WTF::StringImpl::~StringImpl(v117, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v117 -= 2;
    }
  }
  v118 = v205;
  v205 = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  v119 = v202;
  v202 = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
    {
      WTF::StringImpl::~StringImpl(v119, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v119 -= 2;
    }
  }
  v120 = v199;
  v199 = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
    {
      WTF::StringImpl::~StringImpl(v120, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v120 -= 2;
    }
  }
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
    {
      WTF::StringImpl::~StringImpl(v193, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v193 -= 2;
    }
  }
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
    {
      WTF::StringImpl::~StringImpl(v190, v94, (uint64_t)v11, v95, v96, v97, v98, v99);
      WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
    }
    else
    {
      *(_DWORD *)v190 -= 2;
    }
  }
  byte_1ECF587F8 = 1;
LABEL_4:
  v17 = qword_1ECF58840;
  if (!qword_1ECF58840)
    goto LABEL_20;
  v18 = *(_DWORD *)(qword_1ECF58840 - 8);
  v19 = *((_DWORD *)*a3 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v20 = v19 >> 8;
  v21 = 0;
  while (2)
  {
    v22 = v20 & v18;
    v23 = v17 + 24 * (v20 & v18);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 == -1)
    {
LABEL_11:
      v20 = ++v21 + v22;
      continue;
    }
    break;
  }
  if (!v24)
  {
    v25 = qword_1ECF58840;
    if (qword_1ECF58840)
    {
      v26 = *(_DWORD *)(qword_1ECF58840 - 4);
      v23 = qword_1ECF58840 + 24 * v26;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v24, *a3, v11))
    goto LABEL_11;
  v25 = qword_1ECF58840;
  if (qword_1ECF58840)
  {
    v26 = *(_DWORD *)(qword_1ECF58840 - 4);
LABEL_16:
    if (v23 == v25 + 24 * v26)
    {
LABEL_20:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = *a3;
      if (*a3)
      {
        v39 = *((_DWORD *)v38 + 1);
        *(_DWORD *)v38 += 2;
        if (v39 < 0)
          goto LABEL_123;
      }
      else
      {
        v39 = 0;
      }
      v40 = __OFADD__(v39, 15);
      v41 = v39 + 15;
      if (!v40 && !__OFADD__(v41, 6))
      {
        v42 = !v38 || (*((_BYTE *)v38 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v41 + 6), v42, (int8x16_t *)"'Heap.", 6u, (uint64_t)v38, (int8x16_t *)"' was not found", 0xFu, (int **)&v188);
        v43 = v188;
        if (v188)
        {
          if (!*(_BYTE *)(v37 + 48))
            *(_BYTE *)(v37 + 48) = *(_QWORD *)(v37 + 48);
          LODWORD(v190) = 2;
          *(_DWORD *)v43 += 2;
          v191 = v43;
          v44 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v44 == *(_DWORD *)(v37 + 32))
          {
            v45 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 24, v44 + 1, (unint64_t)&v190);
            v46 = *(unsigned int *)(v37 + 36);
            v47 = *(_QWORD *)(v37 + 24) + 16 * v46;
            *(_DWORD *)v47 = *(_DWORD *)v45;
            v48 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v47 + 8) = v48;
            v49 = v191;
            *(_DWORD *)(v37 + 36) = v46 + 1;
            v191 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
          else
          {
            v50 = *(_QWORD *)(v37 + 24) + 16 * v44;
            *(_DWORD *)v50 = 2;
            *(_QWORD *)(v50 + 8) = v43;
            *(_DWORD *)(v37 + 36) = v44 + 1;
          }
          v51 = v188;
          v188 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              if (!v38)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v51 -= 2;
          }
          if (!v38)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
          goto LABEL_41;
        }
LABEL_124:
        __break(0xC471u);
        JUMPOUT(0x198649298);
      }
LABEL_123:
      v188 = 0;
      goto LABEL_124;
    }
  }
  v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(v23 + 8);
  v28 = *(_QWORD *)(v23 + 16);
  v29 = (_QWORD *)(a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v29 + v27);
  v27(v29, a2, &v189);
LABEL_41:
  v52 = v189;
  v189 = 0;
  if (!v52)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v52 != 1)
  {
    --*(_DWORD *)v52;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v52, v30, v31, v32, v33, v34, v35, v36);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::HeapBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::HeapBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::HeapBackendDispatcher::gc(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::HeapBackendDispatcher::snapshot(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD **v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD **v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  WTF *v100;
  int v101;
  WTF::StringImpl *v102;
  char v103;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v97);
  if (v99)
  {
    if (v99 != 1)
    {
      v94 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::HeapBackendDispatcher::startTracking(v94);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v101 = 5;
    v6 = v97;
    if (v97)
      *(_DWORD *)v97 += 2;
    v102 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 != *(_DWORD *)(v5 + 32))
    {
      v63 = *(_QWORD *)(v5 + 24) + 16 * v7;
      *(_DWORD *)v63 = 5;
      *(_QWORD *)(v63 + 8) = v6;
      *(_DWORD *)(v5 + 36) = v7 + 1;
      goto LABEL_50;
    }
    v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v101);
    v16 = *(unsigned int *)(v5 + 36);
    v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
    *(_DWORD *)v17 = *(_DWORD *)v8;
    v18 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v17 + 8) = v18;
    v19 = v102;
    *(_DWORD *)(v5 + 36) = v16 + 1;
    v102 = 0;
    if (!v19)
      goto LABEL_50;
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  v20 = v97;
  v21 = v98;
  v98 = 0;
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v22 = 0x500000001;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  v96 = (WTF *)v22;
  v23 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v23 = 0x900000002;
  *(_QWORD *)(v23 + 8) = "timestamp";
  *(_DWORD *)(v23 + 16) = 4;
  v95 = (WTF::StringImpl *)v23;
  v24 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v24 = 0x200000001;
  *((_QWORD *)v24 + 1) = v20;
  v100 = v24;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v22 + 16), (WTF::AtomStringImpl *)&v95, (const WTF::StringImpl *)&v100, v25, v26, v27, v28, v29, (uint64_t)&v101);
  if (v103)
  {
    v37 = (uint64_t *)(v22 + 24);
    v38 = *(unsigned int *)(v22 + 36);
    if ((_DWORD)v38 == *(_DWORD *)(v22 + 32))
    {
      v88 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v95);
      v38 = *(unsigned int *)(v22 + 36);
      v89 = *(_QWORD *)(v22 + 24);
      v90 = *v88;
      if (*v88)
        *v90 += 2;
      *(_QWORD *)(v89 + 8 * v38) = v90;
    }
    else
    {
      v39 = *v37;
      v40 = v95;
      if (v95)
        *(_DWORD *)v95 += 2;
      *(_QWORD *)(v39 + 8 * v38) = v40;
    }
    *(_DWORD *)(v22 + 36) = v38 + 1;
  }
  v41 = v100;
  v100 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
      WTF::JSONImpl::Value::operator delete(v41, v30, v31, v32, v33, v34, v35, v36);
    else
      --*(_DWORD *)v41;
  }
  v42 = v95;
  v95 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v43 = 0xC00000002;
  *(_QWORD *)(v43 + 8) = "snapshotData";
  *(_DWORD *)(v43 + 16) = 4;
  v95 = (WTF::StringImpl *)v43;
  v44 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v44 = 0x400000001;
  *((_QWORD *)v44 + 1) = v21;
  if (v21)
    *(_DWORD *)v21 += 2;
  v100 = v44;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v22 + 16), (WTF::AtomStringImpl *)&v95, (const WTF::StringImpl *)&v100, v45, v46, v47, v48, v49, (uint64_t)&v101);
  if (v103)
  {
    v57 = (uint64_t *)(v22 + 24);
    v58 = *(unsigned int *)(v22 + 36);
    if ((_DWORD)v58 == *(_DWORD *)(v22 + 32))
    {
      v91 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v95);
      v58 = *(unsigned int *)(v22 + 36);
      v92 = *(_QWORD *)(v22 + 24);
      v93 = *v91;
      if (*v91)
        *v93 += 2;
      *(_QWORD *)(v92 + 8 * v58) = v93;
    }
    else
    {
      v59 = *v57;
      v60 = v95;
      if (v95)
        *(_DWORD *)v95 += 2;
      *(_QWORD *)(v59 + 8 * v58) = v60;
    }
    *(_DWORD *)(v22 + 36) = v58 + 1;
  }
  v61 = v100;
  v100 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
      WTF::JSONImpl::Value::operator delete(v61, v50, v51, v52, v53, v54, v55, v56);
    else
      --*(_DWORD *)v61;
  }
  v62 = v95;
  v95 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v96);
  if (!v96)
    goto LABEL_42;
  if (*(_DWORD *)v96 != 1)
  {
    --*(_DWORD *)v96;
LABEL_42:
    if (!v21)
      goto LABEL_50;
    goto LABEL_43;
  }
  WTF::JSONImpl::Value::operator delete(v96, v9, v10, v11, v12, v13, v14, v15);
  if (v21)
  {
LABEL_43:
    if (*(_DWORD *)v21 != 2)
    {
      *(_DWORD *)v21 -= 2;
      goto LABEL_50;
    }
    v19 = v21;
LABEL_49:
    WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
LABEL_50:
  if (v99 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E35939B8[v99])(&v101, &v97);
}

void Inspector::HeapBackendDispatcher::startTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::HeapBackendDispatcher::stopTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 40))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::HeapBackendDispatcher::getPreview(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD **v172;
  uint64_t v173;
  _DWORD *v174;
  _DWORD **v175;
  uint64_t v176;
  _DWORD *v177;
  _DWORD **v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  WTF *v182;
  WTF *v183;
  WTF *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  char v187;
  WTF::StringImpl *v188[2];
  WTF *v189;
  WTF::StringImpl **v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xC00000002;
  *(_QWORD *)(v7 + 8) = "heapObjectId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v185 = (WTF::StringImpl *)v7;
  v188[0] = (WTF::StringImpl *)&off_1E3593B00;
  v188[1] = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v189 = 0;
  v190 = v188;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v185, 1, (uint64_t)v188);
  v17 = v190;
  if (v190 == v188)
  {
    v17 = v188;
  }
  else
  {
    if (!v190)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3D00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Heap.getPreview' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v188[0]) = 3;
    *(_DWORD *)v19 = v28;
    v188[1] = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)v188);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v188[1];
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v188[1] = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 64))(v35, a2, v16);
      return;
    }
LABEL_104:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_104;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(v188, *(_QWORD *)(a1 + 32), v16);
  if ((_DWORD)v190)
  {
    if ((_DWORD)v190 != 1)
    {
      v181 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::HeapBackendDispatcher::getRemoteObject(v181);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v185) = 5;
    v46 = v188[0];
    if (v188[0])
      *(_DWORD *)v188[0] += 2;
    v186 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
    {
      v139 = *(_QWORD *)(v45 + 24) + 16 * v47;
      *(_DWORD *)v139 = 5;
      *(_QWORD *)(v139 + 8) = v46;
      *(_DWORD *)(v45 + 36) = v47 + 1;
      goto LABEL_84;
    }
    v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v185);
    v56 = *(unsigned int *)(v45 + 36);
    v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
    *(_DWORD *)v57 = *(_DWORD *)v48;
    v58 = *(_QWORD *)(v48 + 8);
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v57 + 8) = v58;
    v59 = v186;
    *(_DWORD *)(v45 + 36) = v56 + 1;
    v186 = 0;
    if (!v59)
      goto LABEL_84;
    if (*(_DWORD *)v59 != 2)
    {
      *(_DWORD *)v59 -= 2;
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  v68 = v188[0];
  v69 = v188[1];
  *(_OWORD *)v188 = 0u;
  v70 = v189;
  v189 = 0;
  v71 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v71 = 0x500000001;
  *(_QWORD *)(v71 + 16) = 0;
  v72 = (uint64_t *)(v71 + 16);
  *(_OWORD *)(v71 + 24) = 0u;
  v183 = (WTF *)v71;
  if (v68)
  {
    v73 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v73 = 0x600000002;
    *(_QWORD *)(v73 + 8) = "string";
    *(_DWORD *)(v73 + 16) = 4;
    v182 = (WTF *)v73;
    v74 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v74 = 0x400000001;
    *((_QWORD *)v74 + 1) = v68;
    *(_DWORD *)v68 += 2;
    v184 = v74;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v72, (WTF::AtomStringImpl *)&v182, (const WTF::StringImpl *)&v184, v75, v76, v77, v78, v79, (uint64_t)&v185);
    if (v187)
    {
      v87 = (uint64_t *)(v71 + 24);
      v88 = *(unsigned int *)(v71 + 36);
      if ((_DWORD)v88 == *(_DWORD *)(v71 + 32))
      {
        v172 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v182);
        v88 = *(unsigned int *)(v71 + 36);
        v173 = *(_QWORD *)(v71 + 24);
        v174 = *v172;
        if (*v172)
          *v174 += 2;
        *(_QWORD *)(v173 + 8 * v88) = v174;
      }
      else
      {
        v89 = *v87;
        v90 = v182;
        if (v182)
          *(_DWORD *)v182 += 2;
        *(_QWORD *)(v89 + 8 * v88) = v90;
      }
      *(_DWORD *)(v71 + 36) = v88 + 1;
    }
    v91 = v184;
    v184 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
        WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
      else
        --*(_DWORD *)v91;
    }
    v92 = v182;
    v182 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
        WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
        if (!v69)
          goto LABEL_61;
        goto LABEL_49;
      }
      *(_DWORD *)v92 -= 2;
    }
  }
  if (!v69)
    goto LABEL_61;
LABEL_49:
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0xF00000002;
  *(_QWORD *)(v93 + 8) = "functionDetails";
  *(_DWORD *)(v93 + 16) = 4;
  v184 = (WTF *)v93;
  v182 = v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v72, (WTF::AtomStringImpl *)&v184, (const WTF::StringImpl *)&v182, v94, v95, v96, v97, v98, (uint64_t)&v185);
  if (v187)
  {
    v106 = (uint64_t *)(v71 + 24);
    v107 = *(unsigned int *)(v71 + 36);
    if ((_DWORD)v107 == *(_DWORD *)(v71 + 32))
    {
      v175 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v184);
      v107 = *(unsigned int *)(v71 + 36);
      v176 = *(_QWORD *)(v71 + 24);
      v177 = *v175;
      if (*v175)
        *v177 += 2;
      *(_QWORD *)(v176 + 8 * v107) = v177;
    }
    else
    {
      v108 = *v106;
      v109 = v184;
      if (v184)
        *(_DWORD *)v184 += 2;
      *(_QWORD *)(v108 + 8 * v107) = v109;
    }
    *(_DWORD *)(v71 + 36) = v107 + 1;
  }
  v110 = v182;
  v182 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete(v110, v99, v100, v101, v102, v103, v104, v105);
    else
      --*(_DWORD *)v110;
  }
  v111 = v184;
  v184 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
LABEL_61:
  if (v70)
  {
    v112 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v112 = 0x700000002;
    *(_QWORD *)(v112 + 8) = "preview";
    *(_DWORD *)(v112 + 16) = 4;
    v184 = (WTF *)v112;
    v182 = v70;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v72, (WTF::AtomStringImpl *)&v184, (const WTF::StringImpl *)&v182, v113, v114, v115, v116, v117, (uint64_t)&v185);
    if (v187)
    {
      v125 = (uint64_t *)(v71 + 24);
      v126 = *(unsigned int *)(v71 + 36);
      if ((_DWORD)v126 == *(_DWORD *)(v71 + 32))
      {
        v178 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v125, v126 + 1, (unint64_t)&v184);
        v126 = *(unsigned int *)(v71 + 36);
        v179 = *(_QWORD *)(v71 + 24);
        v180 = *v178;
        if (*v178)
          *v180 += 2;
        *(_QWORD *)(v179 + 8 * v126) = v180;
      }
      else
      {
        v127 = *v125;
        v128 = v184;
        if (v184)
          *(_DWORD *)v184 += 2;
        *(_QWORD *)(v127 + 8 * v126) = v128;
      }
      *(_DWORD *)(v71 + 36) = v126 + 1;
    }
    v129 = v182;
    v182 = 0;
    if (v129)
    {
      if (*(_DWORD *)v129 == 1)
        WTF::JSONImpl::Value::operator delete(v129, v118, v119, v120, v121, v122, v123, v124);
      else
        --*(_DWORD *)v129;
    }
    v130 = v184;
    v184 = 0;
    if (v130)
    {
      if (*(_DWORD *)v130 == 2)
      {
        WTF::StringImpl::~StringImpl(v130, v118, v119, v120, v121, v122, v123, v124);
        WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
      }
      else
      {
        *(_DWORD *)v130 -= 2;
      }
    }
  }
  Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v183);
  if (!v183)
  {
LABEL_77:
    if (!v68)
      goto LABEL_84;
    goto LABEL_78;
  }
  if (*(_DWORD *)v183 != 1)
  {
    --*(_DWORD *)v183;
    goto LABEL_77;
  }
  WTF::JSONImpl::Value::operator delete(v183, v49, v50, v51, v52, v53, v54, v55);
  if (v68)
  {
LABEL_78:
    if (*(_DWORD *)v68 != 2)
    {
      *(_DWORD *)v68 -= 2;
      goto LABEL_84;
    }
    v59 = v68;
LABEL_83:
    WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
  }
LABEL_84:
  if ((_DWORD)v190 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E35939C8[v190])(&v185, v188);
}

void Inspector::HeapBackendDispatcher::getRemoteObject(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD **v138;
  uint64_t v139;
  _DWORD *v140;
  Inspector::IndexedDBBackendDispatcher *v141;
  Inspector::BackendDispatcher *v142;
  Inspector::IndexedDBBackendDispatcherHandler *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  WTF *v146;
  WTF::StringImpl *v147;
  int v148;
  WTF::StringImpl *v149;
  uint64_t (**v150)();
  WTF::StringImpl *v151;
  uint64_t v152;
  uint64_t (***v153)();
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xC00000002;
  *(_QWORD *)(v8 + 8) = "heapObjectId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v147 = (WTF::StringImpl *)v8;
  v150 = &off_1E3593B00;
  v151 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v152 = 0;
  v153 = &v150;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v6, v7, &v147, 1, (uint64_t)&v150);
  v18 = v153;
  if (v153 == &v150)
  {
    v18 = &v150;
  }
  else
  {
    if (!v153)
      goto LABEL_6;
    v9 = 5;
  }
  (*v18)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (const WTF::StringImpl *)*a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0xB00000002;
  *(_QWORD *)(v21 + 8) = "objectGroup";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v147 = (WTF::StringImpl *)v21;
  v150 = &off_1E3593B90;
  v151 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v152 = 0;
  v153 = &v150;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v149, v19, v20, &v147, 0, (uint64_t)&v150);
  v30 = v153;
  if (v153 == &v150)
  {
    v30 = &v150;
  }
  else
  {
    if (!v153)
      goto LABEL_13;
    v22 = 5;
  }
  (*v30)[v22]();
LABEL_13:
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4200000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Heap.getRemoteObject' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v150) = 3;
    *(_DWORD *)v32 = v41;
    v151 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v150);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v151;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v151 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
    goto LABEL_28;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (!v48)
  {
    if (!BYTE4(v17))
LABEL_72:
      __break(1u);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(a1 + 32)
                                                                                                + 56))(&v147, *(_QWORD *)(a1 + 32), v17, &v149);
    if (v148)
    {
      if (v148 != 1)
      {
        v141 = (Inspector::IndexedDBBackendDispatcher *)std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::IndexedDBBackendDispatcher::create(v141, v142, v143);
        return;
      }
      v75 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v75 + 48))
        *(_BYTE *)(v75 + 48) = *(_QWORD *)(v75 + 48);
      LODWORD(v150) = 5;
      v76 = v147;
      if (v147)
        *(_DWORD *)v147 += 2;
      v151 = v76;
      v77 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v77 == *(_DWORD *)(v75 + 32))
      {
        v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v75 + 24, v77 + 1, (unint64_t)&v150);
        v79 = *(unsigned int *)(v75 + 36);
        v80 = *(_QWORD *)(v75 + 24) + 16 * v79;
        *(_DWORD *)v80 = *(_DWORD *)v78;
        v81 = *(_QWORD *)(v78 + 8);
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v80 + 8) = v81;
        v82 = v151;
        *(_DWORD *)(v75 + 36) = v79 + 1;
        v151 = 0;
        if (!v82)
          goto LABEL_64;
        v83 = *(_DWORD *)v82 - 2;
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          goto LABEL_64;
        }
        goto LABEL_61;
      }
      v129 = *(_QWORD *)(v75 + 24) + 16 * v77;
      *(_DWORD *)v129 = 5;
      *(_QWORD *)(v129 + 8) = v76;
      *(_DWORD *)(v75 + 36) = v77 + 1;
    }
    else
    {
      v100 = v147;
      v147 = 0;
      v101 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v101 = 0x500000001;
      *(_QWORD *)(v101 + 24) = 0;
      *(_QWORD *)(v101 + 32) = 0;
      *(_QWORD *)(v101 + 16) = 0;
      v146 = (WTF *)v101;
      v102 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v102 = 0x600000002;
      *(_QWORD *)(v102 + 8) = "result";
      *(_DWORD *)(v102 + 16) = 4;
      v144 = v100;
      v145 = (WTF::StringImpl *)v102;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v101 + 16), (WTF::AtomStringImpl *)&v145, (const WTF::StringImpl *)&v144, v103, v104, v105, v106, v107, (uint64_t)&v150);
      if ((_BYTE)v152)
      {
        v115 = (uint64_t *)(v101 + 24);
        v116 = *(unsigned int *)(v101 + 36);
        if ((_DWORD)v116 == *(_DWORD *)(v101 + 32))
        {
          v138 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v116 + 1, (unint64_t)&v145);
          v116 = *(unsigned int *)(v101 + 36);
          v139 = *(_QWORD *)(v101 + 24);
          v140 = *v138;
          if (*v138)
            *v140 += 2;
          *(_QWORD *)(v139 + 8 * v116) = v140;
        }
        else
        {
          v117 = *v115;
          v118 = v145;
          if (v145)
            *(_DWORD *)v145 += 2;
          *(_QWORD *)(v117 + 8 * v116) = v118;
        }
        *(_DWORD *)(v101 + 36) = v116 + 1;
      }
      v119 = v144;
      v144 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 1)
          WTF::JSONImpl::Value::operator delete(v119, v108, v109, v110, v111, v112, v113, v114);
        else
          --*(_DWORD *)v119;
      }
      v120 = v145;
      v145 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
        {
          WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v120 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v146);
      v82 = v146;
      if (!v146)
        goto LABEL_64;
      v83 = *(_DWORD *)v146 - 1;
      if (*(_DWORD *)v146 != 1)
      {
LABEL_61:
        *(_DWORD *)v82 = v83;
        goto LABEL_64;
      }
      WTF::JSONImpl::Value::operator delete(v146, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_64:
    if (v148 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937A8[v148])(&v150, &v147);
    goto LABEL_28;
  }
  if (!BYTE4(v17))
    goto LABEL_72;
  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 72))(v48, a2, v17, &v149);
LABEL_28:
  v50 = v149;
  v149 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::IndexedDBBackendDispatcher::create(Inspector::IndexedDBBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35916D8;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "IndexedDB";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::IndexedDBBackendDispatcher *Inspector::IndexedDBBackendDispatcher::IndexedDBBackendDispatcher(Inspector::IndexedDBBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::IndexedDBBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::IndexedDBBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35916D8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "IndexedDB";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::IndexedDBBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35916D8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "IndexedDB";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::IndexedDBBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  void (*v27)(_QWORD *, uint64_t, WTF **);
  uint64_t v28;
  _QWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl **v100;
  const WTF::StringImpl *v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  int i;
  unsigned int v106;
  WTF *v107;
  WTF::StringImpl *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  WTF::StringImpl *v176;
  void (*v177)(_QWORD *, uint64_t, const WTF::StringImpl **);
  uint64_t v178;
  WTF::StringImpl *v179;
  void (*v180)(_QWORD *, uint64_t, const WTF::StringImpl **);
  uint64_t v181;
  WTF::StringImpl *v182;
  void (*v183)(_QWORD *, uint64_t, const WTF::StringImpl **);
  uint64_t v184;
  WTF::StringImpl *v185;
  void (*v186)(_QWORD *, uint64_t, const WTF::StringImpl **);
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v170 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v170, v9, &v169);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if ((byte_1ECF587F9 & 1) != 0)
    goto LABEL_4;
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x600000002;
  *(_QWORD *)(v85 + 8) = "enable";
  *(_DWORD *)(v85 + 16) = 4;
  v170 = (WTF::StringImpl *)v85;
  v171 = (WTF::StringImpl *)Inspector::IndexedDBBackendDispatcher::enable;
  v172 = 0;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x700000002;
  *(_QWORD *)(v86 + 8) = "disable";
  *(_DWORD *)(v86 + 16) = 4;
  v173 = (WTF::StringImpl *)v86;
  v174 = Inspector::IndexedDBBackendDispatcher::disable;
  v175 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x1400000002;
  *(_QWORD *)(v87 + 8) = "requestDatabaseNames";
  *(_DWORD *)(v87 + 16) = 4;
  v176 = (WTF::StringImpl *)v87;
  v177 = Inspector::IndexedDBBackendDispatcher::requestDatabaseNames;
  v178 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0xF00000002;
  *(_QWORD *)(v88 + 8) = "requestDatabase";
  *(_DWORD *)(v88 + 16) = 4;
  v179 = (WTF::StringImpl *)v88;
  v180 = Inspector::IndexedDBBackendDispatcher::requestDatabase;
  v181 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0xB00000002;
  *(_QWORD *)(v89 + 8) = "requestData";
  *(_DWORD *)(v89 + 16) = 4;
  v182 = (WTF::StringImpl *)v89;
  v183 = Inspector::IndexedDBBackendDispatcher::requestData;
  v184 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1000000002;
  *(_QWORD *)(v90 + 8) = "clearObjectStore";
  *(_DWORD *)(v90 + 16) = 4;
  v185 = (WTF::StringImpl *)v90;
  v186 = Inspector::IndexedDBBackendDispatcher::clearObjectStore;
  v187 = 0;
  v91 = (_OWORD *)WTF::fastMalloc((WTF *)0x190);
  v167 = 0;
  *v91 = xmmword_199156B80;
  v91[2] = 0u;
  v91[3] = 0u;
  v91[4] = 0u;
  v91[5] = 0u;
  v91[6] = 0u;
  v91[7] = 0u;
  v91[8] = 0u;
  v91[9] = 0u;
  v91[10] = 0u;
  v91[11] = 0u;
  v91[12] = 0u;
  v91[13] = 0u;
  v91[14] = 0u;
  v91[15] = 0u;
  v91[16] = 0u;
  v91[17] = 0u;
  v91[18] = 0u;
  v91[19] = 0u;
  v91[20] = 0u;
  v91[21] = 0u;
  v91[22] = 0u;
  v91[23] = 0u;
  v91[24] = 0u;
  v91[1] = 0u;
  v168 = (WTF::StringImpl *)(v91 + 1);
  do
  {
    v98 = v168;
    if (v168
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, 8u), (v98 = v168) != 0))
    {
      v99 = *((_DWORD *)v98 - 2);
    }
    else
    {
      v99 = 0;
    }
    v100 = &v170 + 3 * v167;
    v101 = *v100;
    v102 = *((_DWORD *)*v100 + 4);
    if (v102 < 0x100)
      v103 = WTF::StringImpl::hashSlowCase(*v100);
    else
      v103 = v102 >> 8;
    v104 = 0;
    v165 = v100 + 1;
    for (i = 1; ; ++i)
    {
      v106 = v103 & v99;
      v107 = (WTF *)*((_QWORD *)v98 + 3 * (v103 & v99));
      if (v107 == (WTF *)-1)
      {
        v104 = (char *)v98 + 24 * v106;
        goto LABEL_70;
      }
      if (!v107)
        break;
      if (WTF::equal(v107, v101, v11))
        goto LABEL_86;
LABEL_70:
      v103 = i + v106;
    }
    v166 = (char *)v98 + 24 * v106;
    if (v104)
    {
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      *((_QWORD *)v104 + 2) = 0;
      --*((_DWORD *)v98 - 4);
      v166 = v104;
    }
    if (v101)
      *(_DWORD *)v101 += 2;
    *(_QWORD *)v166 = v101;
    *(_OWORD *)(v166 + 8) = *v165;
    v108 = v168;
    if (v168)
      v109 = *((_DWORD *)v168 - 3) + 1;
    else
      v109 = 1;
    *((_DWORD *)v168 - 3) = v109;
    v110 = (*((_DWORD *)v108 - 4) + v109);
    v111 = *((unsigned int *)v108 - 1);
    if (v111 > 0x400)
    {
      if (v111 <= 2 * v110)
      {
LABEL_81:
        v112 = (_DWORD)v111 << (6 * v109 >= (2 * v111));
        goto LABEL_85;
      }
    }
    else if (3 * v111 <= 4 * v110)
    {
      if ((_DWORD)v111)
        goto LABEL_81;
      v112 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, v112);
    }
LABEL_86:
    ++v167;
  }
  while (v167 != 6);
  v113 = v168;
  v168 = 0;
  qword_1ECF58848 = (uint64_t)v113;
  v114 = v185;
  v185 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v182;
  v182 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v179;
  v179 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  byte_1ECF587F9 = 1;
LABEL_4:
  v17 = qword_1ECF58848;
  if (!qword_1ECF58848)
    goto LABEL_20;
  v18 = *(_DWORD *)(qword_1ECF58848 - 8);
  v19 = *((_DWORD *)*a3 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v20 = v19 >> 8;
  v21 = 0;
  while (2)
  {
    v22 = v20 & v18;
    v23 = v17 + 24 * (v20 & v18);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 == -1)
    {
LABEL_11:
      v20 = ++v21 + v22;
      continue;
    }
    break;
  }
  if (!v24)
  {
    v25 = qword_1ECF58848;
    if (qword_1ECF58848)
    {
      v26 = *(_DWORD *)(qword_1ECF58848 - 4);
      v23 = qword_1ECF58848 + 24 * v26;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v24, *a3, v11))
    goto LABEL_11;
  v25 = qword_1ECF58848;
  if (qword_1ECF58848)
  {
    v26 = *(_DWORD *)(qword_1ECF58848 - 4);
LABEL_16:
    if (v23 == v25 + 24 * v26)
    {
LABEL_20:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = *a3;
      if (*a3)
      {
        v39 = *((_DWORD *)v38 + 1);
        *(_DWORD *)v38 += 2;
        if (v39 < 0)
          goto LABEL_115;
      }
      else
      {
        v39 = 0;
      }
      v40 = __OFADD__(v39, 15);
      v41 = v39 + 15;
      if (!v40 && !__OFADD__(v41, 11))
      {
        v42 = !v38 || (*((_BYTE *)v38 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v41 + 11), v42, (int8x16_t *)"'IndexedDB.", 0xBu, (uint64_t)v38, (int8x16_t *)"' was not found", 0xFu, (int **)&v168);
        v43 = v168;
        if (v168)
        {
          if (!*(_BYTE *)(v37 + 48))
            *(_BYTE *)(v37 + 48) = *(_QWORD *)(v37 + 48);
          LODWORD(v170) = 2;
          *(_DWORD *)v43 += 2;
          v171 = v43;
          v44 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v44 == *(_DWORD *)(v37 + 32))
          {
            v45 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 24, v44 + 1, (unint64_t)&v170);
            v46 = *(unsigned int *)(v37 + 36);
            v47 = *(_QWORD *)(v37 + 24) + 16 * v46;
            *(_DWORD *)v47 = *(_DWORD *)v45;
            v48 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v47 + 8) = v48;
            v49 = v171;
            *(_DWORD *)(v37 + 36) = v46 + 1;
            v171 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
          else
          {
            v50 = *(_QWORD *)(v37 + 24) + 16 * v44;
            *(_DWORD *)v50 = 2;
            *(_QWORD *)(v50 + 8) = v43;
            *(_DWORD *)(v37 + 36) = v44 + 1;
          }
          v51 = v168;
          v168 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              if (!v38)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v51 -= 2;
          }
          if (!v38)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
          goto LABEL_41;
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x19864B610);
      }
LABEL_115:
      v168 = 0;
      goto LABEL_116;
    }
  }
  v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(v23 + 8);
  v28 = *(_QWORD *)(v23 + 16);
  v29 = (_QWORD *)(a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v29 + v27);
  v27(v29, a2, &v169);
LABEL_41:
  v52 = v169;
  v169 = 0;
  if (!v52)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v52 != 1)
  {
    --*(_DWORD *)v52;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v52, v30, v31, v32, v33, v34, v35, v36);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::IndexedDBBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::IndexedDBBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::IndexedDBBackendDispatcher::requestDatabaseNames(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t (**v56)();
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t (**v75)();
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t (***v78)();
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xE00000002;
  *(_QWORD *)(v7 + 8) = "securityOrigin";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v73 = (WTF::StringImpl *)v7;
  v75 = &off_1E3593B90;
  v76 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v77 = 0;
  v78 = &v75;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v74, v5, v6, &v73, 1, (uint64_t)&v75);
  v16 = v78;
  if (v78 == &v75)
  {
    v16 = &v75;
  }
  else
  {
    if (!v78)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4C00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'IndexedDB.requestDatabaseNames' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v75) = 3;
    *(_DWORD *)v18 = v27;
    v76 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v75);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v76;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v76 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    v34 = a1[3];
    if (v34)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 32))(v34, a2, &v74);
    }
    else
    {
      v53 = a1[4];
      v54 = WTF::fastMalloc((WTF *)0x28);
      v55 = (_DWORD *)a1[2];
      ++*v55;
      *(_DWORD *)(v54 + 8) = 1;
      *(_QWORD *)(v54 + 16) = v55;
      *(_QWORD *)(v54 + 24) = (int)a2;
      *(_BYTE *)(v54 + 32) = 0;
      *(_QWORD *)v54 = off_1E3591700;
      v75 = (uint64_t (**)())v54;
      (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t (***)()))(*(_QWORD *)v53 + 16))(v53, &v74, &v75);
      v56 = v75;
      v75 = 0;
      if (v56)
      {
        if (*((_DWORD *)v56 + 2) == 1)
          (*((void (**)(uint64_t (**)()))*v56 + 1))(v56);
        else
          --*((_DWORD *)v56 + 2);
      }
    }
  }
  v36 = v74;
  v74 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::IndexedDBBackendDispatcher::requestDatabase(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t (**v86)();
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t (**v106)();
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t (***v109)();
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xE00000002;
  *(_QWORD *)(v8 + 8) = "securityOrigin";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v104 = (WTF::StringImpl *)v8;
  v106 = &off_1E3593B90;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v108 = 0;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v105, v6, v7, &v104, 1, (uint64_t)&v106);
  v17 = v109;
  if (v109 == &v106)
  {
    v17 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xC00000002;
  *(_QWORD *)(v20 + 8) = "databaseName";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v103 = (WTF::StringImpl *)v20;
  v106 = &off_1E3593B90;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v108 = 0;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v104, v18, v19, &v103, 1, (uint64_t)&v106);
  v29 = v109;
  if (v109 == &v106)
  {
    v29 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4700000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'IndexedDB.requestDatabase' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v31 = v40;
    v107 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v106);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v107;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v107 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  else
  {
    v47 = a1[3];
    if (v47)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 40))(v47, a2, &v105, &v104);
    }
    else
    {
      v83 = a1[4];
      v84 = WTF::fastMalloc((WTF *)0x28);
      v85 = (_DWORD *)a1[2];
      ++*v85;
      *(_DWORD *)(v84 + 8) = 1;
      *(_QWORD *)(v84 + 16) = v85;
      *(_QWORD *)(v84 + 24) = (int)a2;
      *(_BYTE *)(v84 + 32) = 0;
      *(_QWORD *)v84 = off_1E3591720;
      v106 = (uint64_t (**)())v84;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t (***)()))(*(_QWORD *)v83 + 24))(v83, &v105, &v104, &v106);
      v86 = v106;
      v106 = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 2) == 1)
          (*((void (**)(uint64_t (**)()))*v86 + 1))(v86);
        else
          --*((_DWORD *)v86 + 2);
      }
    }
  }
  v49 = v104;
  v104 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v105;
  v105 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::IndexedDBBackendDispatcher::requestData(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (***v53)();
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (***v66)();
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (***v79)();
  uint64_t v80;
  const WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::AtomStringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _DWORD *v206;
  uint64_t (**v207)();
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  WTF::StringImpl *v224;
  WTF *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  uint64_t (**v230)();
  WTF::StringImpl *v231;
  uint64_t v232;
  uint64_t (***v233)();
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xE00000002;
  *(_QWORD *)(v8 + 8) = "securityOrigin";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v228 = (WTF::StringImpl *)v8;
  v230 = &off_1E3593B90;
  v231 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v232 = 0;
  v233 = &v230;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v229, v6, v7, &v228, 1, (uint64_t)&v230);
  v17 = v233;
  if (v233 == &v230)
  {
    v17 = &v230;
  }
  else
  {
    if (!v233)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xC00000002;
  *(_QWORD *)(v20 + 8) = "databaseName";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v227 = (WTF::StringImpl *)v20;
  v230 = &off_1E3593B90;
  v231 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v232 = 0;
  v233 = &v230;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v228, v18, v19, &v227, 1, (uint64_t)&v230);
  v29 = v233;
  if (v233 == &v230)
  {
    v29 = &v230;
  }
  else
  {
    if (!v233)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xF00000002;
  *(_QWORD *)(v32 + 8) = "objectStoreName";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v226 = (WTF::StringImpl *)v32;
  v230 = &off_1E3593B90;
  v231 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v232 = 0;
  v233 = &v230;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v227, v30, v31, &v226, 1, (uint64_t)&v230);
  v41 = v233;
  if (v233 == &v230)
  {
    v41 = &v230;
  }
  else
  {
    if (!v233)
      goto LABEL_20;
    v33 = 5;
  }
  (*v41)[v33]();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = a1[2];
  v43 = *a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x900000002;
  *(_QWORD *)(v44 + 8) = "indexName";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v225 = (WTF *)v44;
  v230 = &off_1E3593B90;
  v231 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v232 = 0;
  v233 = &v230;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v226, v42, v43, &v225, 1, (uint64_t)&v230);
  v53 = v233;
  if (v233 == &v230)
  {
    v53 = &v230;
  }
  else
  {
    if (!v233)
      goto LABEL_27;
    v45 = 5;
  }
  (*v53)[v45]();
LABEL_27:
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v54 = a1[2];
  v55 = (uint64_t)*a3;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x900000002;
  *(_QWORD *)(v56 + 8) = "skipCount";
  v57 = 4;
  *(_DWORD *)(v56 + 16) = 4;
  v225 = (WTF *)v56;
  v230 = &off_1E3593B00;
  v231 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v232 = 0;
  v233 = &v230;
  v65 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v54, v55, &v225, 1, (uint64_t)&v230);
  v66 = v233;
  if (v233 == &v230)
  {
    v66 = &v230;
  }
  else
  {
    if (!v233)
      goto LABEL_34;
    v57 = 5;
  }
  (*v66)[v57]();
LABEL_34:
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
  v67 = a1[2];
  v68 = (uint64_t)*a3;
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x800000002;
  *(_QWORD *)(v69 + 8) = "pageSize";
  v70 = 4;
  *(_DWORD *)(v69 + 16) = 4;
  v225 = (WTF *)v69;
  v230 = &off_1E3593B00;
  v231 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v232 = 0;
  v233 = &v230;
  v78 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v67, v68, &v225, 1, (uint64_t)&v230);
  v79 = v233;
  if (v233 == &v230)
  {
    v79 = &v230;
  }
  else
  {
    if (!v233)
      goto LABEL_41;
    v70 = 5;
  }
  (*v79)[v70]();
LABEL_41:
  if (*(_DWORD *)v69 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v69, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
  }
  else
  {
    *(_DWORD *)v69 -= 2;
  }
  v80 = a1[2];
  v81 = *a3;
  v82 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v82 = 0x800000002;
  *(_QWORD *)(v82 + 8) = "keyRange";
  v83 = 4;
  *(_DWORD *)(v82 + 16) = 4;
  v224 = (WTF::StringImpl *)v82;
  v230 = &off_1E3593C20;
  v233 = &v230;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v225, v80, v81, &v224, 0, (uint64_t)&v230);
  v91 = v233;
  if (v233 == &v230)
  {
    v91 = &v230;
  }
  else
  {
    if (!v233)
      goto LABEL_48;
    v83 = 5;
  }
  (*v91)[v83]();
LABEL_48:
  if (*(_DWORD *)v82 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v82, v84, v85, v86, v87, v88, v89, v90);
    WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
  }
  else
  {
    *(_DWORD *)v82 -= 2;
  }
  v92 = a1[2];
  if (*(_DWORD *)(v92 + 36))
  {
    v93 = WTF::fastCompactMalloc((WTF *)0x20);
    v101 = (WTF::StringImpl *)v93;
    *(_QWORD *)v93 = 0x4300000002;
    *(_QWORD *)(v93 + 8) = "Some arguments of method 'IndexedDB.requestData' can't be processed";
    v102 = 4;
    *(_DWORD *)(v93 + 16) = 4;
    if (!*(_BYTE *)(v92 + 48))
    {
      *(_BYTE *)(v92 + 48) = *(_QWORD *)(v92 + 48);
      v102 = *(_DWORD *)v93 + 2;
    }
    LODWORD(v230) = 3;
    *(_DWORD *)v93 = v102;
    v231 = (WTF::StringImpl *)v93;
    v103 = *(unsigned int *)(v92 + 36);
    if ((_DWORD)v103 == *(_DWORD *)(v92 + 32))
    {
      v104 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92 + 24, v103 + 1, (unint64_t)&v230);
      v105 = *(unsigned int *)(v92 + 36);
      v106 = *(_QWORD *)(v92 + 24) + 16 * v105;
      *(_DWORD *)v106 = *(_DWORD *)v104;
      v107 = *(_QWORD *)(v104 + 8);
      *(_QWORD *)(v104 + 8) = 0;
      *(_QWORD *)(v106 + 8) = v107;
      v108 = v231;
      *(_DWORD *)(v92 + 36) = v105 + 1;
      v231 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
        {
          WTF::StringImpl::~StringImpl(v108, v94, v95, v96, v97, v98, v99, v100);
          WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
        }
        else
        {
          *(_DWORD *)v108 -= 2;
        }
      }
    }
    else
    {
      v110 = *(_QWORD *)(v92 + 24) + 16 * v103;
      *(_DWORD *)v110 = 3;
      *(_QWORD *)(v110 + 8) = v93;
      *(_DWORD *)(v92 + 36) = v103 + 1;
    }
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
    goto LABEL_64;
  }
  v109 = a1[3];
  if (v109)
  {
    if (BYTE4(v65) && BYTE4(v78))
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, uint64_t, uint64_t, WTF **))(*(_QWORD *)v109 + 48))(v109, a2, &v229, &v228, &v227, &v226, v65, v78, &v225);
      goto LABEL_64;
    }
LABEL_100:
    __break(1u);
  }
  if (!BYTE4(v65) || !BYTE4(v78))
    goto LABEL_100;
  v204 = a1[4];
  v205 = WTF::fastMalloc((WTF *)0x28);
  v206 = (_DWORD *)a1[2];
  ++*v206;
  *(_DWORD *)(v205 + 8) = 1;
  *(_QWORD *)(v205 + 16) = v206;
  *(_QWORD *)(v205 + 24) = (int)a2;
  *(_BYTE *)(v205 + 32) = 0;
  *(_QWORD *)v205 = off_1E3591740;
  v230 = (uint64_t (**)())v205;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, uint64_t, uint64_t, WTF **, uint64_t (***)()))(*(_QWORD *)v204 + 32))(v204, &v229, &v228, &v227, &v226, v65, v78, &v225, &v230);
  v207 = v230;
  v230 = 0;
  if (v207)
  {
    if (*((_DWORD *)v207 + 2) == 1)
      (*((void (**)(uint64_t (**)()))*v207 + 1))(v207);
    else
      --*((_DWORD *)v207 + 2);
  }
LABEL_64:
  v111 = v225;
  v225 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v94, v95, v96, v97, v98, v99, v100);
    else
      --*(_DWORD *)v111;
  }
  v112 = v226;
  v226 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = v227;
  v227 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
  v114 = v228;
  v228 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v229;
  v229 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v94, v95, v96, v97, v98, v99, v100);
      WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
}

void Inspector::IndexedDBBackendDispatcher::clearObjectStore(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t (**v115)();
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  uint64_t (**v136)();
  WTF::StringImpl *v137;
  uint64_t v138;
  uint64_t (***v139)();
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xE00000002;
  *(_QWORD *)(v8 + 8) = "securityOrigin";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v134 = (WTF::StringImpl *)v8;
  v136 = &off_1E3593B90;
  v137 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v138 = 0;
  v139 = &v136;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v135, v6, v7, &v134, 1, (uint64_t)&v136);
  v17 = v139;
  if (v139 == &v136)
  {
    v17 = &v136;
  }
  else
  {
    if (!v139)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xC00000002;
  *(_QWORD *)(v20 + 8) = "databaseName";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v133 = (WTF::StringImpl *)v20;
  v136 = &off_1E3593B90;
  v137 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v138 = 0;
  v139 = &v136;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v134, v18, v19, &v133, 1, (uint64_t)&v136);
  v29 = v139;
  if (v139 == &v136)
  {
    v29 = &v136;
  }
  else
  {
    if (!v139)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xF00000002;
  *(_QWORD *)(v32 + 8) = "objectStoreName";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v132 = (WTF::StringImpl *)v32;
  v136 = &off_1E3593B90;
  v137 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v138 = 0;
  v139 = &v136;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v133, v30, v31, &v132, 1, (uint64_t)&v136);
  v41 = v139;
  if (v139 == &v136)
  {
    v41 = &v136;
  }
  else
  {
    if (!v139)
      goto LABEL_20;
    v33 = 5;
  }
  (*v41)[v33]();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = a1[2];
  if (*(_DWORD *)(v42 + 36))
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    v51 = (WTF::StringImpl *)v43;
    *(_QWORD *)v43 = 0x4800000002;
    *(_QWORD *)(v43 + 8) = "Some arguments of method 'IndexedDB.clearObjectStore' can't be processed";
    v52 = 4;
    *(_DWORD *)(v43 + 16) = 4;
    if (!*(_BYTE *)(v42 + 48))
    {
      *(_BYTE *)(v42 + 48) = *(_QWORD *)(v42 + 48);
      v52 = *(_DWORD *)v43 + 2;
    }
    LODWORD(v136) = 3;
    *(_DWORD *)v43 = v52;
    v137 = (WTF::StringImpl *)v43;
    v53 = *(unsigned int *)(v42 + 36);
    if ((_DWORD)v53 == *(_DWORD *)(v42 + 32))
    {
      v54 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v42 + 24, v53 + 1, (unint64_t)&v136);
      v55 = *(unsigned int *)(v42 + 36);
      v56 = *(_QWORD *)(v42 + 24) + 16 * v55;
      *(_DWORD *)v56 = *(_DWORD *)v54;
      v57 = *(_QWORD *)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v56 + 8) = v57;
      v58 = v137;
      *(_DWORD *)(v42 + 36) = v55 + 1;
      v137 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v44, v45, v46, v47, v48, v49, v50);
          WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
    }
    else
    {
      v60 = *(_QWORD *)(v42 + 24) + 16 * v53;
      *(_DWORD *)v60 = 3;
      *(_QWORD *)(v60 + 8) = v43;
      *(_DWORD *)(v42 + 36) = v53 + 1;
    }
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  else
  {
    v59 = a1[3];
    if (v59)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v59 + 56))(v59, a2, &v135, &v134, &v133);
    }
    else
    {
      v112 = a1[4];
      v113 = WTF::fastMalloc((WTF *)0x28);
      v114 = (_DWORD *)a1[2];
      ++*v114;
      *(_DWORD *)(v113 + 8) = 1;
      *(_QWORD *)(v113 + 16) = v114;
      *(_QWORD *)(v113 + 24) = (int)a2;
      *(_BYTE *)(v113 + 32) = 0;
      *(_QWORD *)v113 = off_1E3591760;
      v136 = (uint64_t (**)())v113;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, uint64_t (***)()))(*(_QWORD *)v112 + 40))(v112, &v135, &v134, &v133, &v136);
      v115 = v136;
      v136 = 0;
      if (v115)
      {
        if (*((_DWORD *)v115 + 2) == 1)
          (*((void (**)(uint64_t (**)()))*v115 + 1))(v115);
        else
          --*((_DWORD *)v115 + 2);
      }
    }
  }
  v61 = v133;
  v133 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v134;
  v134 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v135;
  v135 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

uint64_t Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback::RequestDatabaseNamesCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591700;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591700;
  return result;
}

void Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseNamesCallback::sendSuccess(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v38 = v4;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xD00000002;
  *(_QWORD *)(v5 + 8) = "databaseNames";
  *(_DWORD *)(v5 + 16) = 4;
  v6 = *a2;
  *a2 = 0;
  v36 = v6;
  v37 = (WTF::StringImpl *)v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v4 + 2, &v37, (const WTF::StringImpl *)&v36, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)((char *)v4 + 24);
    v20 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v20 == *((_DWORD *)v4 + 8))
    {
      v33 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *((unsigned int *)v4 + 9);
      v34 = *((_QWORD *)v4 + 3);
      v35 = *v33;
      if (*v33)
        *v35 += 2;
      *(_QWORD *)(v34 + 8 * v20) = v35;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *((_DWORD *)v4 + 9) = v20 + 1;
  }
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 32)
    || (*(_BYTE *)(a1 + 32) = 1,
        Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v38),
        (v4 = v38) != 0))
  {
    if (*(_DWORD *)v4 == 1)
      WTF::JSONImpl::Value::operator delete(v4, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v4;
  }
}

uint64_t Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseCallback::RequestDatabaseCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591720;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591720;
  return result;
}

void Inspector::IndexedDBBackendDispatcherHandler::RequestDatabaseCallback::sendSuccess(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v38 = v4;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x1800000002;
  *(_QWORD *)(v5 + 8) = "databaseWithObjectStores";
  *(_DWORD *)(v5 + 16) = 4;
  v6 = *a2;
  *a2 = 0;
  v36 = v6;
  v37 = (WTF::StringImpl *)v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)v4 + 2, (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v36, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)((char *)v4 + 24);
    v20 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v20 == *((_DWORD *)v4 + 8))
    {
      v33 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *((unsigned int *)v4 + 9);
      v34 = *((_QWORD *)v4 + 3);
      v35 = *v33;
      if (*v33)
        *v35 += 2;
      *(_QWORD *)(v34 + 8 * v20) = v35;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *((_DWORD *)v4 + 9) = v20 + 1;
  }
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 32)
    || (*(_BYTE *)(a1 + 32) = 1,
        Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v38),
        (v4 = v38) != 0))
  {
    if (*(_DWORD *)v4 == 1)
      WTF::JSONImpl::Value::operator delete(v4, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v4;
  }
}

uint64_t Inspector::IndexedDBBackendDispatcherHandler::RequestDataCallback::RequestDataCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591740;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591740;
  return result;
}

void Inspector::IndexedDBBackendDispatcherHandler::RequestDataCallback::sendSuccess(uint64_t a1, WTF **a2, char a3)
{
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD **v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  _BYTE v72[16];
  char v73;

  v6 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  v70 = v6;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1600000002;
  *(_QWORD *)(v7 + 8) = "objectStoreDataEntries";
  *(_DWORD *)(v7 + 16) = 4;
  v71 = (WTF *)v7;
  v8 = *a2;
  *a2 = 0;
  v69 = v8;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v6 + 2, &v71, (const WTF::StringImpl *)&v69, v9, v10, v11, v12, v13, (uint64_t)v72);
  if (v73)
  {
    v21 = (uint64_t *)((char *)v6 + 24);
    v22 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v22 == *((_DWORD *)v6 + 8))
    {
      v63 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v71);
      v22 = *((unsigned int *)v6 + 9);
      v64 = *((_QWORD *)v6 + 3);
      v65 = *v63;
      if (*v63)
        *v65 += 2;
      *(_QWORD *)(v64 + 8 * v22) = v65;
    }
    else
    {
      v23 = *v21;
      v24 = v71;
      if (v71)
        *(_DWORD *)v71 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
    }
    *((_DWORD *)v6 + 9) = v22 + 1;
  }
  v25 = v69;
  v69 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::JSONImpl::Value::operator delete(v25, v14, v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v25;
  }
  v26 = v71;
  v71 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x700000002;
  *(_QWORD *)(v27 + 8) = "hasMore";
  *(_DWORD *)(v27 + 16) = 4;
  v69 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x100000001;
  *((_BYTE *)v28 + 8) = a3;
  v71 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, (WTF::AtomStringImpl *)&v69, (const WTF::StringImpl *)&v71, v29, v30, v31, v32, v33, (uint64_t)v72);
  if (v73)
  {
    v41 = (uint64_t *)((char *)v6 + 24);
    v42 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v42 == *((_DWORD *)v6 + 8))
    {
      v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v69);
      v42 = *((unsigned int *)v6 + 9);
      v67 = *((_QWORD *)v6 + 3);
      v68 = *v66;
      if (*v66)
        *v68 += 2;
      *(_QWORD *)(v67 + 8 * v42) = v68;
    }
    else
    {
      v43 = *v41;
      v44 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *((_DWORD *)v6 + 9) = v42 + 1;
  }
  v45 = v71;
  v71 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v69;
  v69 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 32)
    || (*(_BYTE *)(a1 + 32) = 1,
        Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v70),
        (v6 = v70) != 0))
  {
    if (*(_DWORD *)v6 == 1)
      WTF::JSONImpl::Value::operator delete(v6, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v6;
  }
}

uint64_t Inspector::IndexedDBBackendDispatcherHandler::ClearObjectStoreCallback::ClearObjectStoreCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591760;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591760;
  return result;
}

void Inspector::IndexedDBBackendDispatcherHandler::ClearObjectStoreCallback::sendSuccess(Inspector::IndexedDBBackendDispatcherHandler::ClearObjectStoreCallback *this)
{
  WTF *v2;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v2 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = 0x500000001;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 2) = 0;
  v10 = v2;
  if (*((_BYTE *)this + 32))
    goto LABEL_2;
  *((_BYTE *)this + 32) = 1;
  Inspector::BackendDispatcher::sendResponse(*((_QWORD *)this + 2), *((_QWORD *)this + 3), &v10);
  v2 = v10;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
LABEL_2:
      WTF::JSONImpl::Value::operator delete(v2, v3, v4, v5, v6, v7, v8, v9);
      return;
    }
    --*(_DWORD *)v10;
  }
}

void Inspector::InspectorBackendDispatcher::create(Inspector::InspectorBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591780;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "Inspector";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::InspectorBackendDispatcher *Inspector::InspectorBackendDispatcher::InspectorBackendDispatcher(Inspector::InspectorBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::InspectorBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::InspectorBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591780;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "Inspector";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::InspectorBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591780;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "Inspector";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::InspectorBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"enable", 6))
  {
    Inspector::InspectorBackendDispatcher::enable(a1, a2);
    goto LABEL_31;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"disable", 7))
  {
    Inspector::InspectorBackendDispatcher::disable(a1, a2);
    goto LABEL_31;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"initialized", 11))
  {
    Inspector::InspectorBackendDispatcher::initialized(a1, a2);
    goto LABEL_31;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_43:
      v71 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 11))
    goto LABEL_43;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 11), v37, (int8x16_t *)"'Inspector.", 0xBu, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x19864DA1CLL);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_31;
      goto LABEL_29;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_31:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::InspectorBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::InspectorBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::InspectorBackendDispatcher::initialized(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::LayerTreeBackendDispatcher::create(Inspector::LayerTreeBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35917A8;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "LayerTree";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::LayerTreeBackendDispatcher *Inspector::LayerTreeBackendDispatcher::LayerTreeBackendDispatcher(Inspector::LayerTreeBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::LayerTreeBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::LayerTreeBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35917A8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "LayerTree";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::LayerTreeBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35917A8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x900000002;
  *(_QWORD *)(v5 + 8) = "LayerTree";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::LayerTreeBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"enable", 6))
  {
    Inspector::LayerTreeBackendDispatcher::enable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"disable", 7))
  {
    Inspector::LayerTreeBackendDispatcher::disable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"layersForNode", 13))
  {
    Inspector::LayerTreeBackendDispatcher::layersForNode(a1, a2, (uint64_t *)&v72);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"reasonsForCompositingLayer", 26))
  {
    Inspector::LayerTreeBackendDispatcher::reasonsForCompositingLayer(a1, a2, &v72);
    goto LABEL_33;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_45:
      v71 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 11))
    goto LABEL_45;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 11), v37, (int8x16_t *)"'LayerTree.", 0xBu, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x19864E494);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_33;
      goto LABEL_31;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_33:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::LayerTreeBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::LayerTreeBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::LayerTreeBackendDispatcher::layersForNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF::StringImpl *v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  WTF::StringImpl *v129;
  int v130;
  uint64_t (**v131)();
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t (***v134)();
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v129 = (WTF::StringImpl *)v7;
  v131 = &off_1E3593B00;
  v132 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v133 = 0;
  v134 = &v131;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v129, 1, (uint64_t)&v131);
  v17 = v134;
  if (v134 == &v131)
  {
    v17 = &v131;
  }
  else
  {
    if (!v134)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4500000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'LayerTree.layersForNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v131) = 3;
    *(_DWORD *)v19 = v28;
    v132 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v131);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v132;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v132 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 32))(v35, a2, v16);
      return;
    }
LABEL_60:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_60;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(&v129, *(_QWORD *)(a1 + 32), v16);
  if (v130)
  {
    if (v130 != 1)
    {
      v125 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::LayerTreeBackendDispatcher::reasonsForCompositingLayer(v125);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v131) = 5;
    v46 = v129;
    if (v129)
      *(_DWORD *)v129 += 2;
    v132 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 == *(_DWORD *)(v45 + 32))
    {
      v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v131);
      v56 = *(unsigned int *)(v45 + 36);
      v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
      *(_DWORD *)v57 = *(_DWORD *)v48;
      v58 = *(_QWORD *)(v48 + 8);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v57 + 8) = v58;
      v59 = v132;
      *(_DWORD *)(v45 + 36) = v56 + 1;
      v132 = 0;
      if (!v59)
        goto LABEL_52;
      v60 = *(_DWORD *)v59 - 2;
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        goto LABEL_52;
      }
      goto LABEL_49;
    }
    v113 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v113 = 5;
    *(_QWORD *)(v113 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
  }
  else
  {
    v77 = v129;
    v129 = 0;
    v78 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v78 = 0x500000001;
    *(_QWORD *)(v78 + 24) = 0;
    *(_QWORD *)(v78 + 32) = 0;
    *(_QWORD *)(v78 + 16) = 0;
    v128 = (WTF *)v78;
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0x600000002;
    *(_QWORD *)(v79 + 8) = "layers";
    *(_DWORD *)(v79 + 16) = 4;
    v126 = v77;
    v127 = (WTF::StringImpl *)v79;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v78 + 16), &v127, (const WTF::StringImpl *)&v126, v80, v81, v82, v83, v84, (uint64_t)&v131);
    if ((_BYTE)v133)
    {
      v92 = (uint64_t *)(v78 + 24);
      v93 = *(unsigned int *)(v78 + 36);
      if ((_DWORD)v93 == *(_DWORD *)(v78 + 32))
      {
        v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v93 + 1, (unint64_t)&v127);
        v93 = *(unsigned int *)(v78 + 36);
        v123 = *(_QWORD *)(v78 + 24);
        v124 = *v122;
        if (*v122)
          *v124 += 2;
        *(_QWORD *)(v123 + 8 * v93) = v124;
      }
      else
      {
        v94 = *v92;
        v95 = v127;
        if (v127)
          *(_DWORD *)v127 += 2;
        *(_QWORD *)(v94 + 8 * v93) = v95;
      }
      *(_DWORD *)(v78 + 36) = v93 + 1;
    }
    v96 = v126;
    v126 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 1)
        WTF::JSONImpl::Value::operator delete(v96, v85, v86, v87, v88, v89, v90, v91);
      else
        --*(_DWORD *)v96;
    }
    v97 = v127;
    v127 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v85, v86, v87, v88, v89, v90, v91);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v128);
    v59 = v128;
    if (!v128)
      goto LABEL_52;
    v60 = *(_DWORD *)v128 - 1;
    if (*(_DWORD *)v128 != 1)
    {
LABEL_49:
      *(_DWORD *)v59 = v60;
      goto LABEL_52;
    }
    WTF::JSONImpl::Value::operator delete(v128, v98, v99, v100, v101, v102, v103, v104);
  }
LABEL_52:
  if (v130 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35939D8[v130])(&v131, &v129);
}

void Inspector::LayerTreeBackendDispatcher::reasonsForCompositingLayer(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  Inspector::MemoryBackendDispatcher *v119;
  Inspector::BackendDispatcher *v120;
  Inspector::MemoryBackendDispatcherHandler *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  WTF *v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  uint64_t (**v128)();
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t (***v131)();
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "layerId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v125 = (WTF::StringImpl *)v7;
  v128 = &off_1E3593B90;
  v129 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v130 = 0;
  v131 = &v128;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v127, v5, v6, &v125, 1, (uint64_t)&v128);
  v16 = v131;
  if (v131 == &v128)
  {
    v16 = &v128;
  }
  else
  {
    if (!v131)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x5200000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'LayerTree.reasonsForCompositingLayer' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v128) = 3;
    *(_DWORD *)v18 = v27;
    v129 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v128);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v129;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v129 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 24))(&v125, *(_QWORD *)(a1 + 32), &v127);
    if (v126)
    {
      if (v126 != 1)
      {
        v119 = (Inspector::MemoryBackendDispatcher *)std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::MemoryBackendDispatcher::create(v119, v120, v121);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v128) = 5;
      v54 = v125;
      if (v125)
        *(_DWORD *)v125 += 2;
      v129 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v128);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v129;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v129 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v125;
      v125 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v124 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0x1200000002;
      *(_QWORD *)(v80 + 8) = "compositingReasons";
      *(_DWORD *)(v80 + 16) = 4;
      v122 = v78;
      v123 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v123, (const WTF::StringImpl *)&v122, v81, v82, v83, v84, v85, (uint64_t)&v128);
      if ((_BYTE)v130)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v123);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v123;
          if (v123)
            *(_DWORD *)v123 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v122;
      v122 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v123;
      v123 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v124);
      v60 = v124;
      if (!v124)
        goto LABEL_54;
      v61 = *(_DWORD *)v124 - 1;
      if (*(_DWORD *)v124 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v124, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v126 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35939E8[v126])(&v128, &v125);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 40))(v34, a2, &v127);
LABEL_20:
  v36 = v127;
  v127 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::MemoryBackendDispatcher::create(Inspector::MemoryBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35917D0;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "Memory";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::MemoryBackendDispatcher *Inspector::MemoryBackendDispatcher::MemoryBackendDispatcher(Inspector::MemoryBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::MemoryBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::MemoryBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35917D0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Memory";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::MemoryBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35917D0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Memory";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::MemoryBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"enable", 6))
  {
    Inspector::MemoryBackendDispatcher::enable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"disable", 7))
  {
    Inspector::MemoryBackendDispatcher::disable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"startTracking", 13))
  {
    Inspector::MemoryBackendDispatcher::startTracking(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"stopTracking", 12))
  {
    Inspector::MemoryBackendDispatcher::stopTracking(a1, a2);
    goto LABEL_33;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_45:
      v71 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 8))
    goto LABEL_45;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 8), v37, (int8x16_t *)"'Memory.", 8u, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x19864F704);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_33;
      goto LABEL_31;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_33:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::MemoryBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::MemoryBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::MemoryBackendDispatcher::startTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::MemoryBackendDispatcher::stopTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::NetworkBackendDispatcher::create(Inspector::NetworkBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35917F8;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "Network";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::NetworkBackendDispatcher *Inspector::NetworkBackendDispatcher::NetworkBackendDispatcher(Inspector::NetworkBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::NetworkBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::NetworkBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35917F8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Network";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::NetworkBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35917F8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Network";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::NetworkBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  void (*v28)(_QWORD *, uint64_t, WTF **);
  uint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl **v111;
  const WTF::StringImpl *v112;
  unsigned int v113;
  unsigned int v114;
  char *v115;
  int i;
  unsigned int v117;
  WTF *v118;
  WTF::StringImpl *v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _OWORD *v266;
  char *v267;
  uint64_t v268;
  WTF::StringImpl *v269;
  WTF *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  uint64_t v273;
  WTF::StringImpl *v274;
  void (*v275)(uint64_t, uint64_t);
  uint64_t v276;
  WTF::StringImpl *v277;
  void (*v278)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v279;
  WTF::StringImpl *v280;
  void (*v281)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v282;
  WTF::StringImpl *v283;
  void (*v284)(uint64_t, uint64_t, uint64_t *);
  uint64_t v285;
  WTF::StringImpl *v286;
  void (*v287)(_QWORD *, uint64_t, const WTF::StringImpl **);
  uint64_t v288;
  WTF::StringImpl *v289;
  void (*v290)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v291;
  WTF::StringImpl *v292;
  void (*v293)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v294;
  WTF::StringImpl *v295;
  void (*v296)(uint64_t, uint64_t, uint64_t *);
  uint64_t v297;
  WTF::StringImpl *v298;
  void (*v299)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v300;
  WTF::StringImpl *v301;
  void (*v302)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v303;
  WTF::StringImpl *v304;
  void (*v305)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v306;
  WTF::StringImpl *v307;
  void (*v308)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v309;
  WTF::StringImpl *v310;
  void (*v311)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v312;
  WTF::StringImpl *v313;
  void (*v314)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v315;
  WTF::StringImpl *v316;
  void (*v317)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v318;
  uint64_t v319;

  v319 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v271 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v271, v9, &v270);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = &unk_1ECF58000;
  if ((byte_1ECF587FA & 1) != 0)
    goto LABEL_4;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x600000002;
  *(_QWORD *)(v86 + 8) = "enable";
  *(_DWORD *)(v86 + 16) = 4;
  v271 = (WTF::StringImpl *)v86;
  v272 = (WTF::StringImpl *)Inspector::NetworkBackendDispatcher::enable;
  v273 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x700000002;
  *(_QWORD *)(v87 + 8) = "disable";
  *(_DWORD *)(v87 + 16) = 4;
  v274 = (WTF::StringImpl *)v87;
  v275 = Inspector::NetworkBackendDispatcher::disable;
  v276 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x1300000002;
  *(_QWORD *)(v88 + 8) = "setExtraHTTPHeaders";
  *(_DWORD *)(v88 + 16) = 4;
  v277 = (WTF::StringImpl *)v88;
  v278 = Inspector::NetworkBackendDispatcher::setExtraHTTPHeaders;
  v279 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0xF00000002;
  *(_QWORD *)(v89 + 8) = "getResponseBody";
  *(_DWORD *)(v89 + 16) = 4;
  v280 = (WTF::StringImpl *)v89;
  v281 = Inspector::NetworkBackendDispatcher::getResponseBody;
  v282 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1A00000002;
  *(_QWORD *)(v90 + 8) = "setResourceCachingDisabled";
  *(_DWORD *)(v90 + 16) = 4;
  v283 = (WTF::StringImpl *)v90;
  v284 = Inspector::NetworkBackendDispatcher::setResourceCachingDisabled;
  v285 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0xC00000002;
  *(_QWORD *)(v91 + 8) = "loadResource";
  *(_DWORD *)(v91 + 16) = 4;
  v286 = (WTF::StringImpl *)v91;
  v287 = Inspector::NetworkBackendDispatcher::loadResource;
  v288 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x1800000002;
  *(_QWORD *)(v92 + 8) = "getSerializedCertificate";
  *(_DWORD *)(v92 + 16) = 4;
  v289 = (WTF::StringImpl *)v92;
  v290 = Inspector::NetworkBackendDispatcher::getSerializedCertificate;
  v291 = 0;
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x1000000002;
  *(_QWORD *)(v93 + 8) = "resolveWebSocket";
  *(_DWORD *)(v93 + 16) = 4;
  v292 = (WTF::StringImpl *)v93;
  v293 = Inspector::NetworkBackendDispatcher::resolveWebSocket;
  v294 = 0;
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x1600000002;
  *(_QWORD *)(v94 + 8) = "setInterceptionEnabled";
  *(_DWORD *)(v94 + 16) = 4;
  v295 = (WTF::StringImpl *)v94;
  v296 = Inspector::NetworkBackendDispatcher::setInterceptionEnabled;
  v297 = 0;
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0xF00000002;
  *(_QWORD *)(v95 + 8) = "addInterception";
  *(_DWORD *)(v95 + 16) = 4;
  v298 = (WTF::StringImpl *)v95;
  v299 = Inspector::NetworkBackendDispatcher::addInterception;
  v300 = 0;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0x1200000002;
  *(_QWORD *)(v96 + 8) = "removeInterception";
  *(_DWORD *)(v96 + 16) = 4;
  v301 = (WTF::StringImpl *)v96;
  v302 = Inspector::NetworkBackendDispatcher::removeInterception;
  v303 = 0;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0x1100000002;
  *(_QWORD *)(v97 + 8) = "interceptContinue";
  *(_DWORD *)(v97 + 16) = 4;
  v304 = (WTF::StringImpl *)v97;
  v305 = Inspector::NetworkBackendDispatcher::interceptContinue;
  v306 = 0;
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x1400000002;
  *(_QWORD *)(v98 + 8) = "interceptWithRequest";
  *(_DWORD *)(v98 + 16) = 4;
  v307 = (WTF::StringImpl *)v98;
  v308 = Inspector::NetworkBackendDispatcher::interceptWithRequest;
  v309 = 0;
  v99 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v99 = 0x1500000002;
  *(_QWORD *)(v99 + 8) = "interceptWithResponse";
  *(_DWORD *)(v99 + 16) = 4;
  v310 = (WTF::StringImpl *)v99;
  v311 = Inspector::NetworkBackendDispatcher::interceptWithResponse;
  v312 = 0;
  v100 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v100 = 0x1C00000002;
  *(_QWORD *)(v100 + 8) = "interceptRequestWithResponse";
  *(_DWORD *)(v100 + 16) = 4;
  v313 = (WTF::StringImpl *)v100;
  v314 = Inspector::NetworkBackendDispatcher::interceptRequestWithResponse;
  v315 = 0;
  v101 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v101 = 0x1900000002;
  *(_QWORD *)(v101 + 8) = "interceptRequestWithError";
  *(_DWORD *)(v101 + 16) = 4;
  v316 = (WTF::StringImpl *)v101;
  v317 = Inspector::NetworkBackendDispatcher::interceptRequestWithError;
  v318 = 0;
  v102 = (_OWORD *)WTF::fastMalloc((WTF *)0x310);
  bzero(v102 + 1, 0x300uLL);
  v268 = 0;
  v269 = (WTF::StringImpl *)(v102 + 1);
  *v102 = xmmword_199156B90;
  do
  {
    v109 = v269;
    if (v269
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v269, 8u), (v109 = v269) != 0))
    {
      v110 = *((_DWORD *)v109 - 2);
    }
    else
    {
      v110 = 0;
    }
    v111 = &v271 + 3 * v268;
    v112 = *v111;
    v113 = *((_DWORD *)*v111 + 4);
    if (v113 < 0x100)
      v114 = WTF::StringImpl::hashSlowCase(*v111);
    else
      v114 = v113 >> 8;
    v115 = 0;
    v266 = v111 + 1;
    for (i = 1; ; ++i)
    {
      v117 = v114 & v110;
      v118 = (WTF *)*((_QWORD *)v109 + 3 * (v114 & v110));
      if (v118 == (WTF *)-1)
      {
        v115 = (char *)v109 + 24 * v117;
        goto LABEL_70;
      }
      if (!v118)
        break;
      if (WTF::equal(v118, v112, v11))
        goto LABEL_86;
LABEL_70:
      v114 = i + v117;
    }
    v267 = (char *)v109 + 24 * v117;
    if (v115)
    {
      *(_QWORD *)v115 = 0;
      *((_QWORD *)v115 + 1) = 0;
      *((_QWORD *)v115 + 2) = 0;
      --*((_DWORD *)v109 - 4);
      v267 = v115;
    }
    if (v112)
      *(_DWORD *)v112 += 2;
    *(_QWORD *)v267 = v112;
    *(_OWORD *)(v267 + 8) = *v266;
    v119 = v269;
    if (v269)
      v120 = *((_DWORD *)v269 - 3) + 1;
    else
      v120 = 1;
    *((_DWORD *)v269 - 3) = v120;
    v121 = (*((_DWORD *)v119 - 4) + v120);
    v122 = *((unsigned int *)v119 - 1);
    if (v122 > 0x400)
    {
      if (v122 <= 2 * v121)
      {
LABEL_81:
        v123 = (_DWORD)v122 << (6 * v120 >= (2 * v122));
        goto LABEL_85;
      }
    }
    else if (3 * v122 <= 4 * v121)
    {
      if ((_DWORD)v122)
        goto LABEL_81;
      v123 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v269, v123);
    }
LABEL_86:
    ++v268;
  }
  while (v268 != 16);
  v124 = v269;
  v269 = 0;
  qword_1ECF58850 = (uint64_t)v124;
  v125 = v316;
  v316 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = v313;
  v313 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v310;
  v310 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v307;
  v307 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = v304;
  v304 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v301;
  v301 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = v298;
  v298 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = v295;
  v295 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = v292;
  v292 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = v289;
  v289 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = v286;
  v286 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = v283;
  v283 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  v137 = v280;
  v280 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  if (v277)
  {
    if (*(_DWORD *)v277 == 2)
    {
      WTF::StringImpl::~StringImpl(v277, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
    }
    else
    {
      *(_DWORD *)v277 -= 2;
    }
  }
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
    {
      WTF::StringImpl::~StringImpl(v274, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
    }
    else
    {
      *(_DWORD *)v274 -= 2;
    }
  }
  if (v271)
  {
    if (*(_DWORD *)v271 == 2)
    {
      WTF::StringImpl::~StringImpl(v271, v103, (uint64_t)v11, v104, v105, v106, v107, v108);
      WTF::fastFree(v258, v259, v260, v261, v262, v263, v264, v265);
    }
    else
    {
      *(_DWORD *)v271 -= 2;
    }
  }
  byte_1ECF587FA = 1;
  v17 = (_QWORD *)&unk_1ECF58000;
LABEL_4:
  v18 = v17[266];
  if (!v18)
    goto LABEL_20;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  v22 = 0;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24 == -1)
    {
LABEL_11:
      v21 = ++v22 + v23;
      continue;
    }
    break;
  }
  if (!v25)
  {
    v26 = v17[266];
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 4);
      v24 = v26 + 24 * v27;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v25, *a3, v11))
    goto LABEL_11;
  v26 = v17[266];
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 4);
LABEL_16:
    if (v24 == v26 + 24 * v27)
    {
LABEL_20:
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *a3;
      if (*a3)
      {
        v40 = *((_DWORD *)v39 + 1);
        *(_DWORD *)v39 += 2;
        if (v40 < 0)
          goto LABEL_155;
      }
      else
      {
        v40 = 0;
      }
      v41 = __OFADD__(v40, 15);
      v42 = v40 + 15;
      if (!v41 && !__OFADD__(v42, 9))
      {
        v43 = !v39 || (*((_BYTE *)v39 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v42 + 9), v43, (int8x16_t *)"'Network.", 9u, (uint64_t)v39, (int8x16_t *)"' was not found", 0xFu, (int **)&v269);
        v44 = v269;
        if (v269)
        {
          if (!*(_BYTE *)(v38 + 48))
            *(_BYTE *)(v38 + 48) = *(_QWORD *)(v38 + 48);
          LODWORD(v271) = 2;
          *(_DWORD *)v44 += 2;
          v272 = v44;
          v45 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v45 == *(_DWORD *)(v38 + 32))
          {
            v46 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 24, v45 + 1, (unint64_t)&v271);
            v47 = *(unsigned int *)(v38 + 36);
            v48 = *(_QWORD *)(v38 + 24) + 16 * v47;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v272;
            *(_DWORD *)(v38 + 36) = v47 + 1;
            v272 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::~StringImpl(v50, v31, v32, v33, v34, v35, v36, v37);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            v51 = *(_QWORD *)(v38 + 24) + 16 * v45;
            *(_DWORD *)v51 = 2;
            *(_QWORD *)(v51 + 8) = v44;
            *(_DWORD *)(v38 + 36) = v45 + 1;
          }
          v52 = v269;
          v269 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              if (!v39)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v39)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
          goto LABEL_41;
        }
LABEL_156:
        __break(0xC471u);
        JUMPOUT(0x198650B28);
      }
LABEL_155:
      v269 = 0;
      goto LABEL_156;
    }
  }
  v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = (_QWORD *)(a1 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v30 + v28);
  v28(v30, a2, &v270);
LABEL_41:
  v53 = v270;
  v270 = 0;
  if (!v53)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v53, v31, v32, v33, v34, v35, v36, v37);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::NetworkBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::NetworkBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::NetworkBackendDispatcher::setExtraHTTPHeaders(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  char v86;
  WTF *v87;
  WTF *v88;
  WTF::StringImpl *v89;
  WTF **v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "headers";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v85 = (WTF::StringImpl *)v7;
  v88 = (WTF *)&off_1E3593C20;
  v90 = &v88;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v87, v5, v6, &v85, 1, (uint64_t)&v88);
  v16 = v90;
  if (v90 == &v88)
  {
    v16 = &v88;
  }
  else
  {
    if (!v90)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4900000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Network.setExtraHTTPHeaders' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v88) = 3;
    *(_DWORD *)v18 = v27;
    v89 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v88);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v89;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v89 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v38 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v38 = 3;
      *(_QWORD *)(v38 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_46;
    }
    v36 = v26;
    goto LABEL_36;
  }
  v34 = a1[3];
  if (v34)
  {
    v35 = v87;
    v87 = 0;
    v88 = v35;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v34 + 32))(v34, a2, &v88);
    v36 = v88;
    v88 = 0;
    if (!v36)
      goto LABEL_46;
    v37 = *(_DWORD *)v36 - 1;
    if (*(_DWORD *)v36 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v36, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_46;
    }
LABEL_45:
    *(_DWORD *)v36 = v37;
    goto LABEL_46;
  }
  v47 = a1[4];
  v48 = v87;
  v87 = 0;
  v88 = v48;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v47 + 16))(&v85, v47, &v88);
  v49 = v88;
  v88 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v49;
  }
  if (!v86)
  {
    v75 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v75 = 0x500000001;
    *((_QWORD *)v75 + 3) = 0;
    *((_QWORD *)v75 + 4) = 0;
    *((_QWORD *)v75 + 2) = 0;
    v88 = v75;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v88);
    v57 = v88;
    if (!v88)
      goto LABEL_42;
    v58 = *(_DWORD *)v88 - 1;
    if (*(_DWORD *)v88 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v88, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v50 = a1[2];
  if (!*(_BYTE *)(v50 + 48))
    *(_BYTE *)(v50 + 48) = *(_QWORD *)(v50 + 48);
  LODWORD(v88) = 5;
  v51 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  v89 = v51;
  v52 = *(unsigned int *)(v50 + 36);
  if ((_DWORD)v52 != *(_DWORD *)(v50 + 32))
  {
    v84 = *(_QWORD *)(v50 + 24) + 16 * v52;
    *(_DWORD *)v84 = 5;
    *(_QWORD *)(v84 + 8) = v51;
    *(_DWORD *)(v50 + 36) = v52 + 1;
    goto LABEL_42;
  }
  v53 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 24, v52 + 1, (unint64_t)&v88);
  v54 = *(unsigned int *)(v50 + 36);
  v55 = *(_QWORD *)(v50 + 24) + 16 * v54;
  *(_DWORD *)v55 = *(_DWORD *)v53;
  v56 = *(_QWORD *)(v53 + 8);
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v55 + 8) = v56;
  v57 = v89;
  *(_DWORD *)(v50 + 36) = v54 + 1;
  v89 = 0;
  if (v57)
  {
    v58 = *(_DWORD *)v57 - 2;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v57 = v58;
  }
LABEL_42:
  if (v86)
  {
    v36 = v85;
    v85 = 0;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }
LABEL_46:
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v87;
  }
}

void Inspector::NetworkBackendDispatcher::getResponseBody(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD **v146;
  uint64_t v147;
  _DWORD *v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  WTF *v154;
  WTF::StringImpl *v155;
  WTF *v156;
  WTF::StringImpl *v157;
  unsigned __int8 v158;
  int v159;
  uint64_t (**v160)();
  WTF::StringImpl *v161;
  uint64_t v162;
  uint64_t (***v163)();
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "requestId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v157 = (WTF::StringImpl *)v7;
  v160 = &off_1E3593B90;
  v161 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v162 = 0;
  v163 = &v160;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v155, v5, v6, &v157, 1, (uint64_t)&v160);
  v16 = v163;
  if (v163 == &v160)
  {
    v16 = &v160;
  }
  else
  {
    if (!v163)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4500000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Network.getResponseBody' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v160) = 3;
    *(_DWORD *)v18 = v27;
    v161 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v160);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v161;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v161 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 24))(&v157, *(_QWORD *)(a1 + 32), &v155);
    if (v159)
    {
      if (v159 != 1)
      {
        v152 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::NetworkBackendDispatcher::setResourceCachingDisabled(v152);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v160) = 5;
      v54 = v157;
      if (v157)
        *(_DWORD *)v157 += 2;
      v161 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v121 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v121 = 5;
        *(_QWORD *)(v121 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_75;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v160);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v161;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v161 = 0;
      if (!v60)
        goto LABEL_75;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_75;
      }
      goto LABEL_74;
    }
    v69 = v157;
    v157 = 0;
    v70 = v158;
    v71 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *(_QWORD *)(v71 + 16) = 0;
    v72 = (uint64_t *)(v71 + 16);
    *(_QWORD *)(v71 + 24) = 0;
    *(_QWORD *)(v71 + 32) = 0;
    v154 = (WTF *)v71;
    v73 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v73 = 0x400000002;
    *(_QWORD *)(v73 + 8) = "body";
    *(_DWORD *)(v73 + 16) = 4;
    v153 = (WTF::StringImpl *)v73;
    v74 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v74 = 0x400000001;
    *((_QWORD *)v74 + 1) = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    v156 = v74;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v72, (WTF::AtomStringImpl *)&v153, (const WTF::StringImpl *)&v156, v75, v76, v77, v78, v79, (uint64_t)&v160);
    if ((_BYTE)v162)
    {
      v87 = (uint64_t *)(v71 + 24);
      v88 = *(unsigned int *)(v71 + 36);
      if ((_DWORD)v88 == *(_DWORD *)(v71 + 32))
      {
        v146 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v153);
        v88 = *(unsigned int *)(v71 + 36);
        v147 = *(_QWORD *)(v71 + 24);
        v148 = *v146;
        if (*v146)
          *v148 += 2;
        *(_QWORD *)(v147 + 8 * v88) = v148;
      }
      else
      {
        v89 = *v87;
        v90 = v153;
        if (v153)
          *(_DWORD *)v153 += 2;
        *(_QWORD *)(v89 + 8 * v88) = v90;
      }
      *(_DWORD *)(v71 + 36) = v88 + 1;
    }
    v91 = v156;
    v156 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
        WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
      else
        --*(_DWORD *)v91;
    }
    v92 = v153;
    v153 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
        WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
        WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
      }
      else
      {
        *(_DWORD *)v92 -= 2;
      }
    }
    v93 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v93 = 0xD00000002;
    *(_QWORD *)(v93 + 8) = "base64Encoded";
    *(_DWORD *)(v93 + 16) = 4;
    v153 = (WTF::StringImpl *)v93;
    v94 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = 0x100000001;
    *((_BYTE *)v94 + 8) = v70 != 0;
    v156 = v94;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v72, (WTF::AtomStringImpl *)&v153, (const WTF::StringImpl *)&v156, v95, v96, v97, v98, v99, (uint64_t)&v160);
    if ((_BYTE)v162)
    {
      v107 = (uint64_t *)(v71 + 24);
      v108 = *(unsigned int *)(v71 + 36);
      if ((_DWORD)v108 == *(_DWORD *)(v71 + 32))
      {
        v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v153);
        v108 = *(unsigned int *)(v71 + 36);
        v150 = *(_QWORD *)(v71 + 24);
        v151 = *v149;
        if (*v149)
          *v151 += 2;
        *(_QWORD *)(v150 + 8 * v108) = v151;
      }
      else
      {
        v109 = *v107;
        v110 = v153;
        if (v153)
          *(_DWORD *)v153 += 2;
        *(_QWORD *)(v109 + 8 * v108) = v110;
      }
      *(_DWORD *)(v71 + 36) = v108 + 1;
    }
    v111 = v156;
    v156 = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 1)
        WTF::JSONImpl::Value::operator delete(v111, v100, v101, v102, v103, v104, v105, v106);
      else
        --*(_DWORD *)v111;
    }
    v112 = v153;
    v153 = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
      {
        WTF::StringImpl::~StringImpl(v112, v100, v101, v102, v103, v104, v105, v106);
        WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
      }
      else
      {
        *(_DWORD *)v112 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v154);
    if (v154)
    {
      if (*(_DWORD *)v154 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v154, v19, v20, v21, v22, v23, v24, v25);
        if (!v69)
        {
LABEL_75:
          if (v159 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35939F8[v159])(&v160, &v157);
          goto LABEL_20;
        }
        goto LABEL_67;
      }
      --*(_DWORD *)v154;
    }
    if (!v69)
      goto LABEL_75;
LABEL_67:
    if (*(_DWORD *)v69 != 2)
    {
      *(_DWORD *)v69 -= 2;
      goto LABEL_75;
    }
    v60 = v69;
LABEL_74:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    goto LABEL_75;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 40))(v34, a2, &v155);
LABEL_20:
  v36 = v155;
  v155 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::setResourceCachingDisabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "disabled";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x5000000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Network.setResourceCachingDisabled' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 48))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::NetworkBackendDispatcher::loadResource(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t (**v86)();
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t (**v106)();
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t (***v109)();
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "frameId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v104 = (WTF::StringImpl *)v8;
  v106 = &off_1E3593B90;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v108 = 0;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v105, v6, v7, &v104, 1, (uint64_t)&v106);
  v17 = v109;
  if (v109 == &v106)
  {
    v17 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x300000002;
  *(_QWORD *)(v20 + 8) = "url";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v103 = (WTF::StringImpl *)v20;
  v106 = &off_1E3593B90;
  v107 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v108 = 0;
  v109 = &v106;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v104, v18, v19, &v103, 1, (uint64_t)&v106);
  v29 = v109;
  if (v109 == &v106)
  {
    v29 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4200000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Network.loadResource' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v106) = 3;
    *(_DWORD *)v31 = v40;
    v107 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v106);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v107;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v107 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  else
  {
    v47 = a1[3];
    if (v47)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 56))(v47, a2, &v105, &v104);
    }
    else
    {
      v83 = a1[4];
      v84 = WTF::fastMalloc((WTF *)0x28);
      v85 = (_DWORD *)a1[2];
      ++*v85;
      *(_DWORD *)(v84 + 8) = 1;
      *(_QWORD *)(v84 + 16) = v85;
      *(_QWORD *)(v84 + 24) = (int)a2;
      *(_BYTE *)(v84 + 32) = 0;
      *(_QWORD *)v84 = off_1E3591820;
      v106 = (uint64_t (**)())v84;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t (***)()))(*(_QWORD *)v83 + 40))(v83, &v105, &v104, &v106);
      v86 = v106;
      v106 = 0;
      if (v86)
      {
        if (*((_DWORD *)v86 + 2) == 1)
          (*((void (**)(uint64_t (**)()))*v86 + 1))(v86);
        else
          --*((_DWORD *)v86 + 2);
      }
    }
  }
  v49 = v104;
  v104 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v105;
  v105 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::getSerializedCertificate(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF *v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  WTF *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "requestId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v122 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v124, v5, v6, &v122, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4E00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Network.getSerializedCertificate' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 48))(&v122, *(_QWORD *)(a1 + 32), &v124);
    if (v123)
    {
      if (v123 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::NetworkBackendDispatcher::resolveWebSocket(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v122;
      if (v122)
        *(_DWORD *)v122 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v99 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v99 = 5;
        *(_QWORD *)(v99 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_62;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v127;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v127 = 0;
      if (!v60)
        goto LABEL_62;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    v69 = v122;
    v122 = 0;
    v70 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v70 = 0x500000001;
    *(_QWORD *)(v70 + 16) = 0;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0;
    v121 = (WTF *)v70;
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0x1500000002;
    *(_QWORD *)(v71 + 8) = "serializedCertificate";
    *(_DWORD *)(v71 + 16) = 4;
    v120 = (WTF::StringImpl *)v71;
    v72 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v72 = 0x400000001;
    *((_QWORD *)v72 + 1) = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    v125 = v72;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v70 + 16), (WTF::AtomStringImpl *)&v120, (const WTF::StringImpl *)&v125, v73, v74, v75, v76, v77, (uint64_t)&v126);
    if ((_BYTE)v128)
    {
      v85 = (uint64_t *)(v70 + 24);
      v86 = *(unsigned int *)(v70 + 36);
      if ((_DWORD)v86 == *(_DWORD *)(v70 + 32))
      {
        v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v120);
        v86 = *(unsigned int *)(v70 + 36);
        v117 = *(_QWORD *)(v70 + 24);
        v118 = *v116;
        if (*v116)
          *v118 += 2;
        *(_QWORD *)(v117 + 8 * v86) = v118;
      }
      else
      {
        v87 = *v85;
        v88 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        *(_QWORD *)(v87 + 8 * v86) = v88;
      }
      *(_DWORD *)(v70 + 36) = v86 + 1;
    }
    v89 = v125;
    v125 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
        WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
      else
        --*(_DWORD *)v89;
    }
    v90 = v120;
    v120 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
      {
        WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
        WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
      }
      else
      {
        *(_DWORD *)v90 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v121);
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
        if (!v69)
        {
LABEL_62:
          if (v123 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v123])(&v126, &v122);
          goto LABEL_20;
        }
        goto LABEL_55;
      }
      --*(_DWORD *)v121;
    }
    if (!v69)
      goto LABEL_62;
LABEL_55:
    if (*(_DWORD *)v69 != 2)
    {
      *(_DWORD *)v69 -= 2;
      goto LABEL_62;
    }
    v60 = v69;
LABEL_61:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    goto LABEL_62;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 64))(v34, a2, &v124);
LABEL_20:
  v36 = v124;
  v124 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::resolveWebSocket(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF *v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD **v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  WTF *v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t (**v157)();
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t (***v160)();
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "requestId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v153 = (WTF::StringImpl *)v8;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v156, v6, v7, &v153, 1, (uint64_t)&v157);
  v17 = v160;
  if (v160 == &v157)
  {
    v17 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xB00000002;
  *(_QWORD *)(v20 + 8) = "objectGroup";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v153 = (WTF::StringImpl *)v20;
  v157 = &off_1E3593B90;
  v158 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v159 = 0;
  v160 = &v157;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v155, v18, v19, &v153, 0, (uint64_t)&v157);
  v29 = v160;
  if (v160 == &v157)
  {
    v29 = &v157;
  }
  else
  {
    if (!v160)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4600000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Network.resolveWebSocket' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v157) = 3;
    *(_DWORD *)v31 = v40;
    v158 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v157);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v158;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v158 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (!v47)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 56))(&v153, *(_QWORD *)(a1 + 32), &v156, &v155);
    if (v154)
    {
      if (v154 != 1)
      {
        v149 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::NetworkBackendDispatcher::setInterceptionEnabled(v149);
        return;
      }
      v83 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v83 + 48))
        *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
      LODWORD(v157) = 5;
      v84 = v153;
      if (v153)
        *(_DWORD *)v153 += 2;
      v158 = v84;
      v85 = *(unsigned int *)(v83 + 36);
      if ((_DWORD)v85 == *(_DWORD *)(v83 + 32))
      {
        v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v157);
        v87 = *(unsigned int *)(v83 + 36);
        v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
        *(_DWORD *)v88 = *(_DWORD *)v86;
        v89 = *(_QWORD *)(v86 + 8);
        *(_QWORD *)(v86 + 8) = 0;
        *(_QWORD *)(v88 + 8) = v89;
        v90 = v158;
        *(_DWORD *)(v83 + 36) = v87 + 1;
        v158 = 0;
        if (!v90)
          goto LABEL_66;
        v91 = *(_DWORD *)v90 - 2;
        if (*(_DWORD *)v90 == 2)
        {
          WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          goto LABEL_66;
        }
        goto LABEL_63;
      }
      v137 = *(_QWORD *)(v83 + 24) + 16 * v85;
      *(_DWORD *)v137 = 5;
      *(_QWORD *)(v137 + 8) = v84;
      *(_DWORD *)(v83 + 36) = v85 + 1;
    }
    else
    {
      v108 = v153;
      v153 = 0;
      v109 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v109 = 0x500000001;
      *(_QWORD *)(v109 + 24) = 0;
      *(_QWORD *)(v109 + 32) = 0;
      *(_QWORD *)(v109 + 16) = 0;
      v152 = (WTF *)v109;
      v110 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v110 = 0x600000002;
      *(_QWORD *)(v110 + 8) = "object";
      *(_DWORD *)(v110 + 16) = 4;
      v150 = v108;
      v151 = (WTF::StringImpl *)v110;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v109 + 16), (WTF::AtomStringImpl *)&v151, (const WTF::StringImpl *)&v150, v111, v112, v113, v114, v115, (uint64_t)&v157);
      if ((_BYTE)v159)
      {
        v123 = (uint64_t *)(v109 + 24);
        v124 = *(unsigned int *)(v109 + 36);
        if ((_DWORD)v124 == *(_DWORD *)(v109 + 32))
        {
          v146 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v123, v124 + 1, (unint64_t)&v151);
          v124 = *(unsigned int *)(v109 + 36);
          v147 = *(_QWORD *)(v109 + 24);
          v148 = *v146;
          if (*v146)
            *v148 += 2;
          *(_QWORD *)(v147 + 8 * v124) = v148;
        }
        else
        {
          v125 = *v123;
          v126 = v151;
          if (v151)
            *(_DWORD *)v151 += 2;
          *(_QWORD *)(v125 + 8 * v124) = v126;
        }
        *(_DWORD *)(v109 + 36) = v124 + 1;
      }
      v127 = v150;
      v150 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 1)
          WTF::JSONImpl::Value::operator delete(v127, v116, v117, v118, v119, v120, v121, v122);
        else
          --*(_DWORD *)v127;
      }
      v128 = v151;
      v151 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
        {
          WTF::StringImpl::~StringImpl(v128, v116, v117, v118, v119, v120, v121, v122);
          WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        else
        {
          *(_DWORD *)v128 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v152);
      v90 = v152;
      if (!v152)
        goto LABEL_66;
      v91 = *(_DWORD *)v152 - 1;
      if (*(_DWORD *)v152 != 1)
      {
LABEL_63:
        *(_DWORD *)v90 = v91;
        goto LABEL_66;
      }
      WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
    }
LABEL_66:
    if (v154 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937A8[v154])(&v157, &v153);
    goto LABEL_27;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 72))(v47, a2, &v156, &v155);
LABEL_27:
  v49 = v155;
  v155 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v156;
  v156 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::setInterceptionEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "enabled";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4C00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Network.setInterceptionEnabled' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 80))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 64))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::NetworkBackendDispatcher::addInterception(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  WTF **v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  int v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  char v190;
  WTF::StringImpl *v191;
  __int16 v192;
  __int16 v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF *v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  WTF **v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x300000002;
  *(_QWORD *)(v8 + 8) = "url";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v189 = (WTF::StringImpl *)v8;
  v196 = (WTF *)&off_1E3593B90;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v198 = 0;
  v199 = &v196;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v195, v6, v7, &v189, 1, (uint64_t)&v196);
  v17 = v199;
  if (v199 == &v196)
  {
    v17 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "stage";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v189 = (WTF::StringImpl *)v20;
  v196 = (WTF *)&off_1E3593B90;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v198 = 0;
  v199 = &v196;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v194, v18, v19, &v189, 1, (uint64_t)&v196);
  v29 = v199;
  if (v199 == &v196)
  {
    v29 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xD00000002;
  *(_QWORD *)(v32 + 8) = "caseSensitive";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v189 = (WTF::StringImpl *)v32;
  v196 = (WTF *)&unk_1E3593AB8;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v198 = 0;
  v199 = &v196;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v189, 0, (uint64_t)&v196);
  v42 = v199;
  if (v199 == &v196)
  {
    v42 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v42 + v33))();
LABEL_20:
  v193 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x700000002;
  *(_QWORD *)(v45 + 8) = "isRegex";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v189 = (WTF::StringImpl *)v45;
  v196 = (WTF *)&unk_1E3593AB8;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v198 = 0;
  v199 = &v196;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v43, v44, &v189, 0, (uint64_t)&v196);
  v55 = v199;
  if (v199 == &v196)
  {
    v55 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_27;
    v46 = 5;
  }
  (*((void (**)(void))*v55 + v46))();
LABEL_27:
  v192 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v56 + 36))
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    v65 = (WTF::StringImpl *)v57;
    *(_QWORD *)v57 = 0x4500000002;
    *(_QWORD *)(v57 + 8) = "Some arguments of method 'Network.addInterception' can't be processed";
    v66 = 4;
    *(_DWORD *)(v57 + 16) = 4;
    if (!*(_BYTE *)(v56 + 48))
    {
      *(_BYTE *)(v56 + 48) = *(_QWORD *)(v56 + 48);
      v66 = *(_DWORD *)v57 + 2;
    }
    LODWORD(v196) = 3;
    *(_DWORD *)v57 = v66;
    v197 = (WTF::StringImpl *)v57;
    v67 = *(unsigned int *)(v56 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v56 + 32))
    {
      v68 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v67 + 1, (unint64_t)&v196);
      v69 = *(unsigned int *)(v56 + 36);
      v70 = *(_QWORD *)(v56 + 24) + 16 * v69;
      *(_DWORD *)v70 = *(_DWORD *)v68;
      v71 = *(_QWORD *)(v68 + 8);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v70 + 8) = v71;
      v72 = v197;
      *(_DWORD *)(v56 + 36) = v69 + 1;
      v197 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
    }
    else
    {
      v74 = *(_QWORD *)(v56 + 24) + 16 * v67;
      *(_DWORD *)v74 = 3;
      *(_QWORD *)(v74 + 8) = v57;
      *(_DWORD *)(v56 + 36) = v67 + 1;
    }
    if (*(_DWORD *)v65 != 2)
    {
      *(_DWORD *)v65 -= 2;
      goto LABEL_41;
    }
    v127 = v65;
LABEL_57:
    WTF::StringImpl::~StringImpl(v127, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    goto LABEL_41;
  }
  v73 = *(_QWORD *)(a1 + 24);
  if (v73)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *))(*(_QWORD *)v73 + 88))(v73, a2, &v195, &v194, &v193, &v192);
    goto LABEL_41;
  }
  v125 = v194;
  if (WTF::equalInternal<unsigned char>((uint64_t)v194, (unint64_t)"request", 7))
  {
    v126 = 200;
    goto LABEL_60;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"response", 8))
  {
    v126 = 201;
LABEL_60:
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 72))(&v189, *(_QWORD *)(a1 + 32), &v195, v126, &v193, &v192);
    if (v190)
    {
      v136 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v136 + 48))
        *(_BYTE *)(v136 + 48) = *(_QWORD *)(v136 + 48);
      LODWORD(v196) = 5;
      v137 = v189;
      if (v189)
        *(_DWORD *)v189 += 2;
      v197 = v137;
      v138 = *(unsigned int *)(v136 + 36);
      if ((_DWORD)v138 != *(_DWORD *)(v136 + 32))
      {
        v170 = *(_QWORD *)(v136 + 24) + 16 * v138;
        *(_DWORD *)v170 = 5;
        *(_QWORD *)(v170 + 8) = v137;
        *(_DWORD *)(v136 + 36) = v138 + 1;
        goto LABEL_83;
      }
      v139 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v136 + 24, v138 + 1, (unint64_t)&v196);
      v140 = *(unsigned int *)(v136 + 36);
      v141 = *(_QWORD *)(v136 + 24) + 16 * v140;
      *(_DWORD *)v141 = *(_DWORD *)v139;
      v142 = *(_QWORD *)(v139 + 8);
      *(_QWORD *)(v139 + 8) = 0;
      *(_QWORD *)(v141 + 8) = v142;
      v143 = v197;
      *(_DWORD *)(v136 + 36) = v140 + 1;
      v197 = 0;
      if (!v143)
      {
LABEL_83:
        if (!v190)
          goto LABEL_41;
        v127 = v189;
        v189 = 0;
        if (!v127)
          goto LABEL_41;
LABEL_91:
        if (*(_DWORD *)v127 != 2)
        {
          *(_DWORD *)v127 -= 2;
          goto LABEL_41;
        }
        goto LABEL_57;
      }
      v144 = *(_DWORD *)v143 - 2;
      if (*(_DWORD *)v143 == 2)
      {
        WTF::StringImpl::~StringImpl(v143, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        goto LABEL_83;
      }
    }
    else
    {
      v161 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v161 = 0x500000001;
      *((_QWORD *)v161 + 3) = 0;
      *((_QWORD *)v161 + 4) = 0;
      *((_QWORD *)v161 + 2) = 0;
      v196 = v161;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v196);
      v143 = v196;
      if (!v196)
        goto LABEL_83;
      v144 = *(_DWORD *)v196 - 1;
      if (*(_DWORD *)v196 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v196, v58, v59, v60, v61, v62, v63, v64);
        goto LABEL_83;
      }
    }
    *(_DWORD *)v143 = v144;
    goto LABEL_83;
  }
  v162 = *(_QWORD *)(a1 + 16);
  if (v125)
    *(_DWORD *)v125 += 2;
  v191 = v125;
  v196 = (WTF *)"Unknown stage: ";
  v197 = (WTF::StringImpl *)16;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v196, (uint64_t *)&v191, (int **)&v189);
  v163 = v189;
  if (!v189)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v162 + 48))
    *(_BYTE *)(v162 + 48) = *(_QWORD *)(v162 + 48);
  LODWORD(v196) = 5;
  *(_DWORD *)v163 += 2;
  v197 = v163;
  v164 = *(unsigned int *)(v162 + 36);
  if ((_DWORD)v164 == *(_DWORD *)(v162 + 32))
  {
    v165 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v162 + 24, v164 + 1, (unint64_t)&v196);
    v166 = *(unsigned int *)(v162 + 36);
    v167 = *(_QWORD *)(v162 + 24) + 16 * v166;
    *(_DWORD *)v167 = *(_DWORD *)v165;
    v168 = *(_QWORD *)(v165 + 8);
    *(_QWORD *)(v165 + 8) = 0;
    *(_QWORD *)(v167 + 8) = v168;
    v169 = v197;
    *(_DWORD *)(v162 + 36) = v166 + 1;
    v197 = 0;
    if (v169)
    {
      if (*(_DWORD *)v169 == 2)
      {
        WTF::StringImpl::~StringImpl(v169, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
      }
      else
      {
        *(_DWORD *)v169 -= 2;
      }
    }
  }
  else
  {
    v171 = *(_QWORD *)(v162 + 24) + 16 * v164;
    *(_DWORD *)v171 = 5;
    *(_QWORD *)(v171 + 8) = v163;
    *(_DWORD *)(v162 + 36) = v164 + 1;
  }
  v172 = v189;
  v189 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  v127 = v191;
  v191 = 0;
  if (v127)
    goto LABEL_91;
LABEL_41:
  v75 = v194;
  v194 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v195;
  v195 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::removeInterception(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  WTF **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  WTF **v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  int v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  char v190;
  WTF::StringImpl *v191;
  __int16 v192;
  __int16 v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF *v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  WTF **v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x300000002;
  *(_QWORD *)(v8 + 8) = "url";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v189 = (WTF::StringImpl *)v8;
  v196 = (WTF *)&off_1E3593B90;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v198 = 0;
  v199 = &v196;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v195, v6, v7, &v189, 1, (uint64_t)&v196);
  v17 = v199;
  if (v199 == &v196)
  {
    v17 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "stage";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v189 = (WTF::StringImpl *)v20;
  v196 = (WTF *)&off_1E3593B90;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v198 = 0;
  v199 = &v196;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v194, v18, v19, &v189, 1, (uint64_t)&v196);
  v29 = v199;
  if (v199 == &v196)
  {
    v29 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xD00000002;
  *(_QWORD *)(v32 + 8) = "caseSensitive";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v189 = (WTF::StringImpl *)v32;
  v196 = (WTF *)&unk_1E3593AB8;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v198 = 0;
  v199 = &v196;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v189, 0, (uint64_t)&v196);
  v42 = v199;
  if (v199 == &v196)
  {
    v42 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v42 + v33))();
LABEL_20:
  v193 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x700000002;
  *(_QWORD *)(v45 + 8) = "isRegex";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v189 = (WTF::StringImpl *)v45;
  v196 = (WTF *)&unk_1E3593AB8;
  v197 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v198 = 0;
  v199 = &v196;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v43, v44, &v189, 0, (uint64_t)&v196);
  v55 = v199;
  if (v199 == &v196)
  {
    v55 = &v196;
  }
  else
  {
    if (!v199)
      goto LABEL_27;
    v46 = 5;
  }
  (*((void (**)(void))*v55 + v46))();
LABEL_27:
  v192 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v56 + 36))
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    v65 = (WTF::StringImpl *)v57;
    *(_QWORD *)v57 = 0x4800000002;
    *(_QWORD *)(v57 + 8) = "Some arguments of method 'Network.removeInterception' can't be processed";
    v66 = 4;
    *(_DWORD *)(v57 + 16) = 4;
    if (!*(_BYTE *)(v56 + 48))
    {
      *(_BYTE *)(v56 + 48) = *(_QWORD *)(v56 + 48);
      v66 = *(_DWORD *)v57 + 2;
    }
    LODWORD(v196) = 3;
    *(_DWORD *)v57 = v66;
    v197 = (WTF::StringImpl *)v57;
    v67 = *(unsigned int *)(v56 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v56 + 32))
    {
      v68 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v67 + 1, (unint64_t)&v196);
      v69 = *(unsigned int *)(v56 + 36);
      v70 = *(_QWORD *)(v56 + 24) + 16 * v69;
      *(_DWORD *)v70 = *(_DWORD *)v68;
      v71 = *(_QWORD *)(v68 + 8);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v70 + 8) = v71;
      v72 = v197;
      *(_DWORD *)(v56 + 36) = v69 + 1;
      v197 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
    }
    else
    {
      v74 = *(_QWORD *)(v56 + 24) + 16 * v67;
      *(_DWORD *)v74 = 3;
      *(_QWORD *)(v74 + 8) = v57;
      *(_DWORD *)(v56 + 36) = v67 + 1;
    }
    if (*(_DWORD *)v65 != 2)
    {
      *(_DWORD *)v65 -= 2;
      goto LABEL_41;
    }
    v127 = v65;
LABEL_57:
    WTF::StringImpl::~StringImpl(v127, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    goto LABEL_41;
  }
  v73 = *(_QWORD *)(a1 + 24);
  if (v73)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *))(*(_QWORD *)v73 + 96))(v73, a2, &v195, &v194, &v193, &v192);
    goto LABEL_41;
  }
  v125 = v194;
  if (WTF::equalInternal<unsigned char>((uint64_t)v194, (unint64_t)"request", 7))
  {
    v126 = 200;
    goto LABEL_60;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"response", 8))
  {
    v126 = 201;
LABEL_60:
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 80))(&v189, *(_QWORD *)(a1 + 32), &v195, v126, &v193, &v192);
    if (v190)
    {
      v136 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v136 + 48))
        *(_BYTE *)(v136 + 48) = *(_QWORD *)(v136 + 48);
      LODWORD(v196) = 5;
      v137 = v189;
      if (v189)
        *(_DWORD *)v189 += 2;
      v197 = v137;
      v138 = *(unsigned int *)(v136 + 36);
      if ((_DWORD)v138 != *(_DWORD *)(v136 + 32))
      {
        v170 = *(_QWORD *)(v136 + 24) + 16 * v138;
        *(_DWORD *)v170 = 5;
        *(_QWORD *)(v170 + 8) = v137;
        *(_DWORD *)(v136 + 36) = v138 + 1;
        goto LABEL_83;
      }
      v139 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v136 + 24, v138 + 1, (unint64_t)&v196);
      v140 = *(unsigned int *)(v136 + 36);
      v141 = *(_QWORD *)(v136 + 24) + 16 * v140;
      *(_DWORD *)v141 = *(_DWORD *)v139;
      v142 = *(_QWORD *)(v139 + 8);
      *(_QWORD *)(v139 + 8) = 0;
      *(_QWORD *)(v141 + 8) = v142;
      v143 = v197;
      *(_DWORD *)(v136 + 36) = v140 + 1;
      v197 = 0;
      if (!v143)
      {
LABEL_83:
        if (!v190)
          goto LABEL_41;
        v127 = v189;
        v189 = 0;
        if (!v127)
          goto LABEL_41;
LABEL_91:
        if (*(_DWORD *)v127 != 2)
        {
          *(_DWORD *)v127 -= 2;
          goto LABEL_41;
        }
        goto LABEL_57;
      }
      v144 = *(_DWORD *)v143 - 2;
      if (*(_DWORD *)v143 == 2)
      {
        WTF::StringImpl::~StringImpl(v143, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        goto LABEL_83;
      }
    }
    else
    {
      v161 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v161 = 0x500000001;
      *((_QWORD *)v161 + 3) = 0;
      *((_QWORD *)v161 + 4) = 0;
      *((_QWORD *)v161 + 2) = 0;
      v196 = v161;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v196);
      v143 = v196;
      if (!v196)
        goto LABEL_83;
      v144 = *(_DWORD *)v196 - 1;
      if (*(_DWORD *)v196 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v196, v58, v59, v60, v61, v62, v63, v64);
        goto LABEL_83;
      }
    }
    *(_DWORD *)v143 = v144;
    goto LABEL_83;
  }
  v162 = *(_QWORD *)(a1 + 16);
  if (v125)
    *(_DWORD *)v125 += 2;
  v191 = v125;
  v196 = (WTF *)"Unknown stage: ";
  v197 = (WTF::StringImpl *)16;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v196, (uint64_t *)&v191, (int **)&v189);
  v163 = v189;
  if (!v189)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v162 + 48))
    *(_BYTE *)(v162 + 48) = *(_QWORD *)(v162 + 48);
  LODWORD(v196) = 5;
  *(_DWORD *)v163 += 2;
  v197 = v163;
  v164 = *(unsigned int *)(v162 + 36);
  if ((_DWORD)v164 == *(_DWORD *)(v162 + 32))
  {
    v165 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v162 + 24, v164 + 1, (unint64_t)&v196);
    v166 = *(unsigned int *)(v162 + 36);
    v167 = *(_QWORD *)(v162 + 24) + 16 * v166;
    *(_DWORD *)v167 = *(_DWORD *)v165;
    v168 = *(_QWORD *)(v165 + 8);
    *(_QWORD *)(v165 + 8) = 0;
    *(_QWORD *)(v167 + 8) = v168;
    v169 = v197;
    *(_DWORD *)(v162 + 36) = v166 + 1;
    v197 = 0;
    if (v169)
    {
      if (*(_DWORD *)v169 == 2)
      {
        WTF::StringImpl::~StringImpl(v169, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
      }
      else
      {
        *(_DWORD *)v169 -= 2;
      }
    }
  }
  else
  {
    v171 = *(_QWORD *)(v162 + 24) + 16 * v164;
    *(_DWORD *)v171 = 5;
    *(_QWORD *)(v171 + 8) = v163;
    *(_DWORD *)(v162 + 36) = v164 + 1;
  }
  v172 = v189;
  v189 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  v127 = v191;
  v191 = 0;
  if (v127)
    goto LABEL_91;
LABEL_41:
  v75 = v194;
  v194 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v195;
  v195 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::interceptContinue(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  char v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  WTF **v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "requestId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v147 = (WTF::StringImpl *)v8;
  v152 = (WTF *)&off_1E3593B90;
  v153 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v154 = 0;
  v155 = &v152;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v151, v6, v7, &v147, 1, (uint64_t)&v152);
  v17 = v155;
  if (v155 == &v152)
  {
    v17 = &v152;
  }
  else
  {
    if (!v155)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "stage";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v147 = (WTF::StringImpl *)v20;
  v152 = (WTF *)&off_1E3593B90;
  v153 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v154 = 0;
  v155 = &v152;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v150, v18, v19, &v147, 1, (uint64_t)&v152);
  v29 = v155;
  if (v155 == &v152)
  {
    v29 = &v152;
  }
  else
  {
    if (!v155)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4700000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Network.interceptContinue' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v152) = 3;
    *(_DWORD *)v31 = v40;
    v153 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v152);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v153;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v153 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v85 = v39;
LABEL_41:
    WTF::StringImpl::~StringImpl(v85, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 104))(v47, a2, &v151, &v150);
    goto LABEL_27;
  }
  v83 = v150;
  if (WTF::equalInternal<unsigned char>((uint64_t)v150, (unint64_t)"request", 7))
  {
    v84 = 200;
    goto LABEL_44;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"response", 8))
  {
    v84 = 201;
LABEL_44:
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                                + 88))(&v147, *(_QWORD *)(a1 + 32), &v151, v84);
    if (v148)
    {
      v94 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v94 + 48))
        *(_BYTE *)(v94 + 48) = *(_QWORD *)(v94 + 48);
      LODWORD(v152) = 5;
      v95 = v147;
      if (v147)
        *(_DWORD *)v147 += 2;
      v153 = v95;
      v96 = *(unsigned int *)(v94 + 36);
      if ((_DWORD)v96 != *(_DWORD *)(v94 + 32))
      {
        v128 = *(_QWORD *)(v94 + 24) + 16 * v96;
        *(_DWORD *)v128 = 5;
        *(_QWORD *)(v128 + 8) = v95;
        *(_DWORD *)(v94 + 36) = v96 + 1;
        goto LABEL_67;
      }
      v97 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v94 + 24, v96 + 1, (unint64_t)&v152);
      v98 = *(unsigned int *)(v94 + 36);
      v99 = *(_QWORD *)(v94 + 24) + 16 * v98;
      *(_DWORD *)v99 = *(_DWORD *)v97;
      v100 = *(_QWORD *)(v97 + 8);
      *(_QWORD *)(v97 + 8) = 0;
      *(_QWORD *)(v99 + 8) = v100;
      v101 = v153;
      *(_DWORD *)(v94 + 36) = v98 + 1;
      v153 = 0;
      if (!v101)
      {
LABEL_67:
        if (!v148)
          goto LABEL_27;
        v85 = v147;
        v147 = 0;
        if (!v85)
          goto LABEL_27;
LABEL_75:
        if (*(_DWORD *)v85 != 2)
        {
          *(_DWORD *)v85 -= 2;
          goto LABEL_27;
        }
        goto LABEL_41;
      }
      v102 = *(_DWORD *)v101 - 2;
      if (*(_DWORD *)v101 == 2)
      {
        WTF::StringImpl::~StringImpl(v101, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        goto LABEL_67;
      }
    }
    else
    {
      v119 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v119 = 0x500000001;
      *((_QWORD *)v119 + 3) = 0;
      *((_QWORD *)v119 + 4) = 0;
      *((_QWORD *)v119 + 2) = 0;
      v152 = v119;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v152);
      v101 = v152;
      if (!v152)
        goto LABEL_67;
      v102 = *(_DWORD *)v152 - 1;
      if (*(_DWORD *)v152 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
        goto LABEL_67;
      }
    }
    *(_DWORD *)v101 = v102;
    goto LABEL_67;
  }
  v120 = *(_QWORD *)(a1 + 16);
  if (v83)
    *(_DWORD *)v83 += 2;
  v149 = v83;
  v152 = (WTF *)"Unknown stage: ";
  v153 = (WTF::StringImpl *)16;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v152, (uint64_t *)&v149, (int **)&v147);
  v121 = v147;
  if (!v147)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v120 + 48))
    *(_BYTE *)(v120 + 48) = *(_QWORD *)(v120 + 48);
  LODWORD(v152) = 5;
  *(_DWORD *)v121 += 2;
  v153 = v121;
  v122 = *(unsigned int *)(v120 + 36);
  if ((_DWORD)v122 == *(_DWORD *)(v120 + 32))
  {
    v123 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v120 + 24, v122 + 1, (unint64_t)&v152);
    v124 = *(unsigned int *)(v120 + 36);
    v125 = *(_QWORD *)(v120 + 24) + 16 * v124;
    *(_DWORD *)v125 = *(_DWORD *)v123;
    v126 = *(_QWORD *)(v123 + 8);
    *(_QWORD *)(v123 + 8) = 0;
    *(_QWORD *)(v125 + 8) = v126;
    v127 = v153;
    *(_DWORD *)(v120 + 36) = v124 + 1;
    v153 = 0;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2)
      {
        WTF::StringImpl::~StringImpl(v127, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
      }
      else
      {
        *(_DWORD *)v127 -= 2;
      }
    }
  }
  else
  {
    v129 = *(_QWORD *)(v120 + 24) + 16 * v122;
    *(_DWORD *)v129 = 5;
    *(_QWORD *)(v129 + 8) = v121;
    *(_DWORD *)(v120 + 36) = v122 + 1;
  }
  v130 = v147;
  v147 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v85 = v149;
  v149 = 0;
  if (v85)
    goto LABEL_75;
LABEL_27:
  v49 = v150;
  v150 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v151;
  v151 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::interceptWithRequest(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF **v41;
  uint64_t v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF **v53;
  uint64_t v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF **v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF *v169;
  int v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF *v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF::StringImpl *v198;
  char v199;
  WTF::StringImpl *v200;
  WTF *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF *v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  WTF **v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "requestId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v198 = (WTF::StringImpl *)v8;
  v205 = (WTF *)&off_1E3593B90;
  v206 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v207 = 0;
  v208 = &v205;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v204, v6, v7, &v198, 1, (uint64_t)&v205);
  v17 = v208;
  if (v208 == &v205)
  {
    v17 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x300000002;
  *(_QWORD *)(v20 + 8) = "url";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v198 = (WTF::StringImpl *)v20;
  v205 = (WTF *)&off_1E3593B90;
  v206 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v207 = 0;
  v208 = &v205;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v203, v18, v19, &v198, 0, (uint64_t)&v205);
  v29 = v208;
  if (v208 == &v205)
  {
    v29 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x600000002;
  *(_QWORD *)(v32 + 8) = "method";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v198 = (WTF::StringImpl *)v32;
  v205 = (WTF *)&off_1E3593B90;
  v206 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v207 = 0;
  v208 = &v205;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v202, v30, v31, &v198, 0, (uint64_t)&v205);
  v41 = v208;
  if (v208 == &v205)
  {
    v41 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_20;
    v33 = 5;
  }
  (*((void (**)(void))*v41 + v33))();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  v43 = *a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x700000002;
  *(_QWORD *)(v44 + 8) = "headers";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v198 = (WTF::StringImpl *)v44;
  v205 = (WTF *)&off_1E3593C20;
  v208 = &v205;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v201, v42, v43, &v198, 0, (uint64_t)&v205);
  v53 = v208;
  if (v208 == &v205)
  {
    v53 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_27;
    v45 = 5;
  }
  (*((void (**)(void))*v53 + v45))();
LABEL_27:
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v54 = *(_QWORD *)(a1 + 16);
  v55 = *a3;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x800000002;
  *(_QWORD *)(v56 + 8) = "postData";
  v57 = 4;
  *(_DWORD *)(v56 + 16) = 4;
  v198 = (WTF::StringImpl *)v56;
  v205 = (WTF *)&off_1E3593B90;
  v206 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v207 = 0;
  v208 = &v205;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v200, v54, v55, &v198, 0, (uint64_t)&v205);
  v65 = v208;
  if (v208 == &v205)
  {
    v65 = &v205;
  }
  else
  {
    if (!v208)
      goto LABEL_34;
    v57 = 5;
  }
  (*((void (**)(void))*v65 + v57))();
LABEL_34:
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
  v66 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v66 + 36))
  {
    v67 = WTF::fastCompactMalloc((WTF *)0x20);
    v75 = (WTF::StringImpl *)v67;
    *(_QWORD *)v67 = 0x4A00000002;
    *(_QWORD *)(v67 + 8) = "Some arguments of method 'Network.interceptWithRequest' can't be processed";
    v76 = 4;
    *(_DWORD *)(v67 + 16) = 4;
    if (!*(_BYTE *)(v66 + 48))
    {
      *(_BYTE *)(v66 + 48) = *(_QWORD *)(v66 + 48);
      v76 = *(_DWORD *)v67 + 2;
    }
    LODWORD(v205) = 3;
    *(_DWORD *)v67 = v76;
    v206 = (WTF::StringImpl *)v67;
    v77 = *(unsigned int *)(v66 + 36);
    if ((_DWORD)v77 == *(_DWORD *)(v66 + 32))
    {
      v78 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v66 + 24, v77 + 1, (unint64_t)&v205);
      v79 = *(unsigned int *)(v66 + 36);
      v80 = *(_QWORD *)(v66 + 24) + 16 * v79;
      *(_DWORD *)v80 = *(_DWORD *)v78;
      v81 = *(_QWORD *)(v78 + 8);
      *(_QWORD *)(v78 + 8) = 0;
      *(_QWORD *)(v80 + 8) = v81;
      v82 = v206;
      *(_DWORD *)(v66 + 36) = v79 + 1;
      v206 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v68, v69, v70, v71, v72, v73, v74);
          WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
        }
        else
        {
          *(_DWORD *)v82 -= 2;
        }
      }
    }
    else
    {
      v84 = *(_QWORD *)(v66 + 24) + 16 * v77;
      *(_DWORD *)v84 = 3;
      *(_QWORD *)(v84 + 8) = v67;
      *(_DWORD *)(v66 + 36) = v77 + 1;
    }
    if (*(_DWORD *)v75 != 2)
    {
      *(_DWORD *)v75 -= 2;
      goto LABEL_48;
    }
    v179 = v75;
    goto LABEL_84;
  }
  v83 = *(_QWORD *)(a1 + 24);
  if (v83)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF **, WTF::StringImpl **))(*(_QWORD *)v83 + 112))(v83, a2, &v204, &v203, &v202, &v201, &v200);
    goto LABEL_48;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 96))(&v198, *(_QWORD *)(a1 + 32), &v204, &v203, &v202, &v201, &v200);
  if (!v199)
  {
    v188 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v188 = 0x500000001;
    *((_QWORD *)v188 + 3) = 0;
    *((_QWORD *)v188 + 4) = 0;
    *((_QWORD *)v188 + 2) = 0;
    v205 = v188;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v205);
    v169 = v205;
    if (!v205)
      goto LABEL_90;
    v170 = *(_DWORD *)v205 - 1;
    if (*(_DWORD *)v205 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v205, v68, v69, v70, v71, v72, v73, v74);
      goto LABEL_90;
    }
    goto LABEL_87;
  }
  v162 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v162 + 48))
    *(_BYTE *)(v162 + 48) = *(_QWORD *)(v162 + 48);
  LODWORD(v205) = 5;
  v163 = v198;
  if (v198)
    *(_DWORD *)v198 += 2;
  v206 = v163;
  v164 = *(unsigned int *)(v162 + 36);
  if ((_DWORD)v164 != *(_DWORD *)(v162 + 32))
  {
    v197 = *(_QWORD *)(v162 + 24) + 16 * v164;
    *(_DWORD *)v197 = 5;
    *(_QWORD *)(v197 + 8) = v163;
    *(_DWORD *)(v162 + 36) = v164 + 1;
    goto LABEL_90;
  }
  v165 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v162 + 24, v164 + 1, (unint64_t)&v205);
  v166 = *(unsigned int *)(v162 + 36);
  v167 = *(_QWORD *)(v162 + 24) + 16 * v166;
  *(_DWORD *)v167 = *(_DWORD *)v165;
  v168 = *(_QWORD *)(v165 + 8);
  *(_QWORD *)(v165 + 8) = 0;
  *(_QWORD *)(v167 + 8) = v168;
  v169 = v206;
  *(_DWORD *)(v162 + 36) = v166 + 1;
  v206 = 0;
  if (v169)
  {
    v170 = *(_DWORD *)v169 - 2;
    if (*(_DWORD *)v169 == 2)
    {
      WTF::StringImpl::~StringImpl(v169, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
      goto LABEL_90;
    }
LABEL_87:
    *(_DWORD *)v169 = v170;
  }
LABEL_90:
  if (v199)
  {
    v179 = v198;
    v198 = 0;
    if (v179)
    {
      if (*(_DWORD *)v179 == 2)
      {
LABEL_84:
        WTF::StringImpl::~StringImpl(v179, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
        goto LABEL_48;
      }
      *(_DWORD *)v179 -= 2;
    }
  }
LABEL_48:
  v85 = v200;
  v200 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v201;
  v201 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v68, v69, v70, v71, v72, v73, v74);
    else
      --*(_DWORD *)v86;
  }
  v87 = v202;
  v202 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v203;
  v203 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v204;
  v204 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::interceptWithResponse(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  WTF **v41;
  uint64_t v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF **v66;
  uint64_t v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF **v78;
  uint64_t v79;
  const WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF **v90;
  uint64_t v91;
  uint64_t v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  WTF *v210;
  int v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF *v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v240;
  char v241;
  WTF *v242;
  WTF::StringImpl *v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF *v248;
  WTF::StringImpl *v249;
  uint64_t v250;
  WTF **v251;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "requestId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v240 = (WTF::StringImpl *)v7;
  v248 = (WTF *)&off_1E3593B90;
  v249 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v250 = 0;
  v251 = &v248;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v247, v5, v6, &v240, 1, (uint64_t)&v248);
  v16 = v251;
  if (v251 == &v248)
  {
    v16 = &v248;
  }
  else
  {
    if (!v251)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x700000002;
  *(_QWORD *)(v19 + 8) = "content";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  v240 = (WTF::StringImpl *)v19;
  v248 = (WTF *)&off_1E3593B90;
  v249 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v250 = 0;
  v251 = &v248;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v246, v17, v18, &v240, 1, (uint64_t)&v248);
  v28 = v251;
  if (v251 == &v248)
  {
    v28 = &v248;
  }
  else
  {
    if (!v251)
      goto LABEL_13;
    v20 = 5;
  }
  (*((void (**)(void))*v28 + v20))();
LABEL_13:
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v29 = *(_QWORD *)(a1 + 16);
  v30 = (uint64_t)*a3;
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0xD00000002;
  *(_QWORD *)(v31 + 8) = "base64Encoded";
  v32 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  v240 = (WTF::StringImpl *)v31;
  v248 = (WTF *)&unk_1E3593AB8;
  v249 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v250 = 0;
  v251 = &v248;
  v40 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v29, v30, &v240, 1, (uint64_t)&v248);
  v41 = v251;
  if (v251 == &v248)
  {
    v41 = &v248;
  }
  else
  {
    if (!v251)
      goto LABEL_20;
    v32 = 5;
  }
  (*((void (**)(void))*v41 + v32))();
LABEL_20:
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v42 = *(_QWORD *)(a1 + 16);
  v43 = *a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x800000002;
  *(_QWORD *)(v44 + 8) = "mimeType";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v240 = (WTF::StringImpl *)v44;
  v248 = (WTF *)&off_1E3593B90;
  v249 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v250 = 0;
  v251 = &v248;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v245, v42, v43, &v240, 0, (uint64_t)&v248);
  v53 = v251;
  if (v251 == &v248)
  {
    v53 = &v248;
  }
  else
  {
    if (!v251)
      goto LABEL_27;
    v45 = 5;
  }
  (*((void (**)(void))*v53 + v45))();
LABEL_27:
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v54 = *(_QWORD *)(a1 + 16);
  v55 = (uint64_t)*a3;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x600000002;
  *(_QWORD *)(v56 + 8) = "status";
  v57 = 4;
  *(_DWORD *)(v56 + 16) = 4;
  v240 = (WTF::StringImpl *)v56;
  v248 = (WTF *)&off_1E3593B00;
  v249 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v250 = 0;
  v251 = &v248;
  v65 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v54, v55, &v240, 0, (uint64_t)&v248);
  v66 = v251;
  if (v251 == &v248)
  {
    v66 = &v248;
  }
  else
  {
    if (!v251)
      goto LABEL_34;
    v57 = 5;
  }
  (*((void (**)(void))*v66 + v57))();
LABEL_34:
  v244 = v65;
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
  v67 = *(_QWORD *)(a1 + 16);
  v68 = *a3;
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0xA00000002;
  *(_QWORD *)(v69 + 8) = "statusText";
  v70 = 4;
  *(_DWORD *)(v69 + 16) = 4;
  v240 = (WTF::StringImpl *)v69;
  v248 = (WTF *)&off_1E3593B90;
  v249 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v250 = 0;
  v251 = &v248;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v243, v67, v68, &v240, 0, (uint64_t)&v248);
  v78 = v251;
  if (v251 == &v248)
  {
    v78 = &v248;
  }
  else
  {
    if (!v251)
      goto LABEL_41;
    v70 = 5;
  }
  (*((void (**)(void))*v78 + v70))();
LABEL_41:
  if (*(_DWORD *)v69 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v69, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
  }
  else
  {
    *(_DWORD *)v69 -= 2;
  }
  v79 = *(_QWORD *)(a1 + 16);
  v80 = *a3;
  v81 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v81 = 0x700000002;
  *(_QWORD *)(v81 + 8) = "headers";
  v82 = 4;
  *(_DWORD *)(v81 + 16) = 4;
  v240 = (WTF::StringImpl *)v81;
  v248 = (WTF *)&off_1E3593C20;
  v251 = &v248;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v242, v79, v80, &v240, 0, (uint64_t)&v248);
  v90 = v251;
  if (v251 == &v248)
  {
    v90 = &v248;
  }
  else
  {
    if (!v251)
      goto LABEL_48;
    v82 = 5;
  }
  (*((void (**)(void))*v90 + v82))();
LABEL_48:
  if (*(_DWORD *)v81 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v81, v83, v84, v85, v86, v87, v88, v89);
    WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
  }
  else
  {
    *(_DWORD *)v81 -= 2;
  }
  v91 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v91 + 36))
  {
    v92 = WTF::fastCompactMalloc((WTF *)0x20);
    v100 = (WTF::StringImpl *)v92;
    *(_QWORD *)v92 = 0x4B00000002;
    *(_QWORD *)(v92 + 8) = "Some arguments of method 'Network.interceptWithResponse' can't be processed";
    v101 = 4;
    *(_DWORD *)(v92 + 16) = 4;
    if (!*(_BYTE *)(v91 + 48))
    {
      *(_BYTE *)(v91 + 48) = *(_QWORD *)(v91 + 48);
      v101 = *(_DWORD *)v92 + 2;
    }
    LODWORD(v248) = 3;
    *(_DWORD *)v92 = v101;
    v249 = (WTF::StringImpl *)v92;
    v102 = *(unsigned int *)(v91 + 36);
    if ((_DWORD)v102 == *(_DWORD *)(v91 + 32))
    {
      v103 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91 + 24, v102 + 1, (unint64_t)&v248);
      v104 = *(unsigned int *)(v91 + 36);
      v105 = *(_QWORD *)(v91 + 24) + 16 * v104;
      *(_DWORD *)v105 = *(_DWORD *)v103;
      v106 = *(_QWORD *)(v103 + 8);
      *(_QWORD *)(v103 + 8) = 0;
      *(_QWORD *)(v105 + 8) = v106;
      v107 = v249;
      *(_DWORD *)(v91 + 36) = v104 + 1;
      v249 = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, v93, v94, v95, v96, v97, v98, v99);
          WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
    }
    else
    {
      v109 = *(_QWORD *)(v91 + 24) + 16 * v102;
      *(_DWORD *)v109 = 3;
      *(_QWORD *)(v109 + 8) = v92;
      *(_DWORD *)(v91 + 36) = v102 + 1;
    }
    if (*(_DWORD *)v100 != 2)
    {
      *(_DWORD *)v100 -= 2;
      goto LABEL_63;
    }
    v220 = v100;
    goto LABEL_102;
  }
  v108 = *(_QWORD *)(a1 + 24);
  if (v108)
  {
    if (HIBYTE(v40))
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, BOOL, WTF::StringImpl **, uint64_t *, WTF::StringImpl **, WTF **))(*(_QWORD *)v108 + 120))(v108, a2, &v247, &v246, v40 != 0, &v245, &v244, &v243, &v242);
      goto LABEL_63;
    }
LABEL_113:
    __break(1u);
  }
  if (!HIBYTE(v40))
    goto LABEL_113;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, BOOL, WTF::StringImpl **, uint64_t *, WTF::StringImpl **, WTF **))(**(_QWORD **)(a1 + 32) + 104))(&v240, *(_QWORD *)(a1 + 32), &v247, &v246, v40 != 0, &v245, &v244, &v243, &v242);
  if (!v241)
  {
    v229 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v229 = 0x500000001;
    *((_QWORD *)v229 + 3) = 0;
    *((_QWORD *)v229 + 4) = 0;
    *((_QWORD *)v229 + 2) = 0;
    v248 = v229;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v248);
    v210 = v248;
    if (!v248)
      goto LABEL_108;
    v211 = *(_DWORD *)v248 - 1;
    if (*(_DWORD *)v248 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v248, v93, v94, v95, v96, v97, v98, v99);
      goto LABEL_108;
    }
    goto LABEL_105;
  }
  v203 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v203 + 48))
    *(_BYTE *)(v203 + 48) = *(_QWORD *)(v203 + 48);
  LODWORD(v248) = 5;
  v204 = v240;
  if (v240)
    *(_DWORD *)v240 += 2;
  v249 = v204;
  v205 = *(unsigned int *)(v203 + 36);
  if ((_DWORD)v205 != *(_DWORD *)(v203 + 32))
  {
    v238 = *(_QWORD *)(v203 + 24) + 16 * v205;
    *(_DWORD *)v238 = 5;
    *(_QWORD *)(v238 + 8) = v204;
    *(_DWORD *)(v203 + 36) = v205 + 1;
    goto LABEL_108;
  }
  v206 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v203 + 24, v205 + 1, (unint64_t)&v248);
  v207 = *(unsigned int *)(v203 + 36);
  v208 = *(_QWORD *)(v203 + 24) + 16 * v207;
  *(_DWORD *)v208 = *(_DWORD *)v206;
  v209 = *(_QWORD *)(v206 + 8);
  *(_QWORD *)(v206 + 8) = 0;
  *(_QWORD *)(v208 + 8) = v209;
  v210 = v249;
  *(_DWORD *)(v203 + 36) = v207 + 1;
  v249 = 0;
  if (v210)
  {
    v211 = *(_DWORD *)v210 - 2;
    if (*(_DWORD *)v210 == 2)
    {
      WTF::StringImpl::~StringImpl(v210, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
      goto LABEL_108;
    }
LABEL_105:
    *(_DWORD *)v210 = v211;
  }
LABEL_108:
  if (v241)
  {
    v220 = v240;
    v240 = 0;
    if (v220)
    {
      if (*(_DWORD *)v220 == 2)
      {
LABEL_102:
        WTF::StringImpl::~StringImpl(v220, v93, v94, v95, v96, v97, v98, v99);
        WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
        goto LABEL_63;
      }
      *(_DWORD *)v220 -= 2;
    }
  }
LABEL_63:
  v110 = v242;
  v242 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete(v110, v93, v94, v95, v96, v97, v98, v99);
    else
      --*(_DWORD *)v110;
  }
  v111 = v243;
  v243 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = v245;
  v245 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = v246;
  v246 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
  v114 = v247;
  v247 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::interceptRequestWithResponse(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  WTF **v41;
  uint64_t v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF **v66;
  uint64_t v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF **v78;
  uint64_t v79;
  const WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF **v90;
  uint64_t v91;
  uint64_t v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF *v177;
  int v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  WTF::StringImpl *v242;
  char v243;
  WTF *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF *v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  WTF **v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "requestId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v242 = (WTF::StringImpl *)v7;
  v249 = (WTF *)&off_1E3593B90;
  v250 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v251 = 0;
  v252 = &v249;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v248, v5, v6, &v242, 1, (uint64_t)&v249);
  v16 = v252;
  if (v252 == &v249)
  {
    v16 = &v249;
  }
  else
  {
    if (!v252)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  v18 = *a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x700000002;
  *(_QWORD *)(v19 + 8) = "content";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  v242 = (WTF::StringImpl *)v19;
  v249 = (WTF *)&off_1E3593B90;
  v250 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v251 = 0;
  v252 = &v249;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v247, v17, v18, &v242, 1, (uint64_t)&v249);
  v28 = v252;
  if (v252 == &v249)
  {
    v28 = &v249;
  }
  else
  {
    if (!v252)
      goto LABEL_13;
    v20 = 5;
  }
  (*((void (**)(void))*v28 + v20))();
LABEL_13:
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v29 = a1[2];
  v30 = (uint64_t)*a3;
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0xD00000002;
  *(_QWORD *)(v31 + 8) = "base64Encoded";
  v32 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  v242 = (WTF::StringImpl *)v31;
  v249 = (WTF *)&unk_1E3593AB8;
  v250 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v251 = 0;
  v252 = &v249;
  v40 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v29, v30, &v242, 1, (uint64_t)&v249);
  v41 = v252;
  if (v252 == &v249)
  {
    v41 = &v249;
  }
  else
  {
    if (!v252)
      goto LABEL_20;
    v32 = 5;
  }
  (*((void (**)(void))*v41 + v32))();
LABEL_20:
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v42 = a1[2];
  v43 = *a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x800000002;
  *(_QWORD *)(v44 + 8) = "mimeType";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v242 = (WTF::StringImpl *)v44;
  v249 = (WTF *)&off_1E3593B90;
  v250 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v251 = 0;
  v252 = &v249;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v246, v42, v43, &v242, 1, (uint64_t)&v249);
  v53 = v252;
  if (v252 == &v249)
  {
    v53 = &v249;
  }
  else
  {
    if (!v252)
      goto LABEL_27;
    v45 = 5;
  }
  (*((void (**)(void))*v53 + v45))();
LABEL_27:
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v54 = a1[2];
  v55 = (uint64_t)*a3;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x600000002;
  *(_QWORD *)(v56 + 8) = "status";
  v57 = 4;
  *(_DWORD *)(v56 + 16) = 4;
  v242 = (WTF::StringImpl *)v56;
  v249 = (WTF *)&off_1E3593B00;
  v250 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v251 = 0;
  v252 = &v249;
  v65 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v54, v55, &v242, 1, (uint64_t)&v249);
  v66 = v252;
  if (v252 == &v249)
  {
    v66 = &v249;
  }
  else
  {
    if (!v252)
      goto LABEL_34;
    v57 = 5;
  }
  (*((void (**)(void))*v66 + v57))();
LABEL_34:
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
  v67 = a1[2];
  v68 = *a3;
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0xA00000002;
  *(_QWORD *)(v69 + 8) = "statusText";
  v70 = 4;
  *(_DWORD *)(v69 + 16) = 4;
  v242 = (WTF::StringImpl *)v69;
  v249 = (WTF *)&off_1E3593B90;
  v250 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v251 = 0;
  v252 = &v249;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v245, v67, v68, &v242, 1, (uint64_t)&v249);
  v78 = v252;
  if (v252 == &v249)
  {
    v78 = &v249;
  }
  else
  {
    if (!v252)
      goto LABEL_41;
    v70 = 5;
  }
  (*((void (**)(void))*v78 + v70))();
LABEL_41:
  if (*(_DWORD *)v69 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v69, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
  }
  else
  {
    *(_DWORD *)v69 -= 2;
  }
  v79 = a1[2];
  v80 = *a3;
  v81 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v81 = 0x700000002;
  *(_QWORD *)(v81 + 8) = "headers";
  v82 = 4;
  *(_DWORD *)(v81 + 16) = 4;
  v242 = (WTF::StringImpl *)v81;
  v249 = (WTF *)&off_1E3593C20;
  v252 = &v249;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v244, v79, v80, &v242, 1, (uint64_t)&v249);
  v90 = v252;
  if (v252 == &v249)
  {
    v90 = &v249;
  }
  else
  {
    if (!v252)
      goto LABEL_48;
    v82 = 5;
  }
  (*((void (**)(void))*v90 + v82))();
LABEL_48:
  if (*(_DWORD *)v81 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v81, v83, v84, v85, v86, v87, v88, v89);
    WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
  }
  else
  {
    *(_DWORD *)v81 -= 2;
  }
  v91 = a1[2];
  if (*(_DWORD *)(v91 + 36))
  {
    v92 = WTF::fastCompactMalloc((WTF *)0x20);
    v100 = (WTF::StringImpl *)v92;
    *(_QWORD *)v92 = 0x5200000002;
    *(_QWORD *)(v92 + 8) = "Some arguments of method 'Network.interceptRequestWithResponse' can't be processed";
    v101 = 4;
    *(_DWORD *)(v92 + 16) = 4;
    if (!*(_BYTE *)(v91 + 48))
    {
      *(_BYTE *)(v91 + 48) = *(_QWORD *)(v91 + 48);
      v101 = *(_DWORD *)v92 + 2;
    }
    LODWORD(v249) = 3;
    *(_DWORD *)v92 = v101;
    v250 = (WTF::StringImpl *)v92;
    v102 = *(unsigned int *)(v91 + 36);
    if ((_DWORD)v102 == *(_DWORD *)(v91 + 32))
    {
      v103 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v91 + 24, v102 + 1, (unint64_t)&v249);
      v104 = *(unsigned int *)(v91 + 36);
      v105 = *(_QWORD *)(v91 + 24) + 16 * v104;
      *(_DWORD *)v105 = *(_DWORD *)v103;
      v106 = *(_QWORD *)(v103 + 8);
      *(_QWORD *)(v103 + 8) = 0;
      *(_QWORD *)(v105 + 8) = v106;
      v107 = v250;
      *(_DWORD *)(v91 + 36) = v104 + 1;
      v250 = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, v93, v94, v95, v96, v97, v98, v99);
          WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
    }
    else
    {
      v111 = *(_QWORD *)(v91 + 24) + 16 * v102;
      *(_DWORD *)v111 = 3;
      *(_QWORD *)(v111 + 8) = v92;
      *(_DWORD *)(v91 + 36) = v102 + 1;
    }
    if (*(_DWORD *)v100 != 2)
    {
      *(_DWORD *)v100 -= 2;
      goto LABEL_98;
    }
    v109 = v100;
    goto LABEL_88;
  }
  v108 = a1[3];
  if (v108)
  {
    if (HIBYTE(v40) && BYTE4(v65))
    {
      v249 = v244;
      v244 = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, BOOL, WTF::StringImpl **, uint64_t, WTF::StringImpl **, WTF **))(*(_QWORD *)v108 + 128))(v108, a2, &v248, &v247, v40 != 0, &v246, v65, &v245, &v249);
      v109 = v249;
      v249 = 0;
      if (!v109)
        goto LABEL_98;
      v110 = *(_DWORD *)v109 - 1;
      if (*(_DWORD *)v109 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v109, v93, v94, v95, v96, v97, v98, v99);
        goto LABEL_98;
      }
LABEL_97:
      *(_DWORD *)v109 = v110;
      goto LABEL_98;
    }
LABEL_121:
    __break(1u);
  }
  if (!HIBYTE(v40) || !BYTE4(v65))
    goto LABEL_121;
  v168 = a1[4];
  v249 = v244;
  v244 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, WTF::StringImpl **, BOOL, WTF::StringImpl **, uint64_t, WTF::StringImpl **, WTF **))(*(_QWORD *)v168 + 112))(&v242, v168, &v248, &v247, v40 != 0, &v246, v65, &v245, &v249);
  v169 = v249;
  v249 = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 1)
      WTF::JSONImpl::Value::operator delete(v169, v93, v94, v95, v96, v97, v98, v99);
    else
      --*(_DWORD *)v169;
  }
  if (!v243)
  {
    v195 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v195 = 0x500000001;
    *((_QWORD *)v195 + 3) = 0;
    *((_QWORD *)v195 + 4) = 0;
    *((_QWORD *)v195 + 2) = 0;
    v249 = v195;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v249);
    v177 = v249;
    if (!v249)
      goto LABEL_94;
    v178 = *(_DWORD *)v249 - 1;
    if (*(_DWORD *)v249 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v249, v93, v94, v95, v96, v97, v98, v99);
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  v170 = a1[2];
  if (!*(_BYTE *)(v170 + 48))
    *(_BYTE *)(v170 + 48) = *(_QWORD *)(v170 + 48);
  LODWORD(v249) = 5;
  v171 = v242;
  if (v242)
    *(_DWORD *)v242 += 2;
  v250 = v171;
  v172 = *(unsigned int *)(v170 + 36);
  if ((_DWORD)v172 != *(_DWORD *)(v170 + 32))
  {
    v204 = *(_QWORD *)(v170 + 24) + 16 * v172;
    *(_DWORD *)v204 = 5;
    *(_QWORD *)(v204 + 8) = v171;
    *(_DWORD *)(v170 + 36) = v172 + 1;
    goto LABEL_94;
  }
  v173 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v170 + 24, v172 + 1, (unint64_t)&v249);
  v174 = *(unsigned int *)(v170 + 36);
  v175 = *(_QWORD *)(v170 + 24) + 16 * v174;
  *(_DWORD *)v175 = *(_DWORD *)v173;
  v176 = *(_QWORD *)(v173 + 8);
  *(_QWORD *)(v173 + 8) = 0;
  *(_QWORD *)(v175 + 8) = v176;
  v177 = v250;
  *(_DWORD *)(v170 + 36) = v174 + 1;
  v250 = 0;
  if (v177)
  {
    v178 = *(_DWORD *)v177 - 2;
    if (*(_DWORD *)v177 == 2)
    {
      WTF::StringImpl::~StringImpl(v177, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
      goto LABEL_94;
    }
LABEL_91:
    *(_DWORD *)v177 = v178;
  }
LABEL_94:
  if (v243)
  {
    v109 = v242;
    v242 = 0;
    if (v109)
    {
      v110 = *(_DWORD *)v109 - 2;
      if (*(_DWORD *)v109 == 2)
      {
LABEL_88:
        WTF::StringImpl::~StringImpl(v109, v93, v94, v95, v96, v97, v98, v99);
        WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
        goto LABEL_98;
      }
      goto LABEL_97;
    }
  }
LABEL_98:
  if (v244)
  {
    if (*(_DWORD *)v244 == 1)
      WTF::JSONImpl::Value::operator delete(v244, v93, v94, v95, v96, v97, v98, v99);
    else
      --*(_DWORD *)v244;
  }
  v205 = v245;
  v245 = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
    {
      WTF::StringImpl::~StringImpl(v205, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
    }
    else
    {
      *(_DWORD *)v205 -= 2;
    }
  }
  v206 = v246;
  v246 = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
    {
      WTF::StringImpl::~StringImpl(v206, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
    }
    else
    {
      *(_DWORD *)v206 -= 2;
    }
  }
  v207 = v247;
  v247 = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
    {
      WTF::StringImpl::~StringImpl(v207, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
    }
    else
    {
      *(_DWORD *)v207 -= 2;
    }
  }
  v208 = v248;
  v248 = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2)
    {
      WTF::StringImpl::~StringImpl(v208, v93, v94, v95, v96, v97, v98, v99);
      WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
    }
    else
    {
      *(_DWORD *)v208 -= 2;
    }
  }
}

void Inspector::NetworkBackendDispatcher::interceptRequestWithError(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  int v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  char v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF *v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  WTF **v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x900000002;
  *(_QWORD *)(v8 + 8) = "requestId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v147 = (WTF::StringImpl *)v8;
  v152 = (WTF *)&off_1E3593B90;
  v153 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v154 = 0;
  v155 = &v152;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v151, v6, v7, &v147, 1, (uint64_t)&v152);
  v17 = v155;
  if (v155 == &v152)
  {
    v17 = &v152;
  }
  else
  {
    if (!v155)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x900000002;
  *(_QWORD *)(v20 + 8) = "errorType";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v147 = (WTF::StringImpl *)v20;
  v152 = (WTF *)&off_1E3593B90;
  v153 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v154 = 0;
  v155 = &v152;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v150, v18, v19, &v147, 1, (uint64_t)&v152);
  v29 = v155;
  if (v155 == &v152)
  {
    v29 = &v152;
  }
  else
  {
    if (!v155)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4F00000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Network.interceptRequestWithError' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v152) = 3;
    *(_DWORD *)v31 = v40;
    v153 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v152);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v153;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v153 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v85 = v39;
LABEL_41:
    WTF::StringImpl::~StringImpl(v85, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 136))(v47, a2, &v151, &v150);
    goto LABEL_27;
  }
  v83 = v150;
  if (WTF::equalInternal<unsigned char>((uint64_t)v150, (unint64_t)"General", 7))
  {
    v84 = 202;
    goto LABEL_49;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"AccessControl", 13))
  {
    v84 = 203;
    goto LABEL_49;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"Cancellation", 12))
  {
    v84 = 204;
    goto LABEL_49;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"Timeout", 7))
  {
    v84 = 205;
LABEL_49:
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, uint64_t))(**(_QWORD **)(a1 + 32)
                                                                                                + 120))(&v147, *(_QWORD *)(a1 + 32), &v151, v84);
    if (v148)
    {
      v102 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v102 + 48))
        *(_BYTE *)(v102 + 48) = *(_QWORD *)(v102 + 48);
      LODWORD(v152) = 5;
      v103 = v147;
      if (v147)
        *(_DWORD *)v147 += 2;
      v153 = v103;
      v104 = *(unsigned int *)(v102 + 36);
      if ((_DWORD)v104 != *(_DWORD *)(v102 + 32))
      {
        v120 = *(_QWORD *)(v102 + 24) + 16 * v104;
        *(_DWORD *)v120 = 5;
        *(_QWORD *)(v120 + 8) = v103;
        *(_DWORD *)(v102 + 36) = v104 + 1;
        goto LABEL_62;
      }
      v105 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v102 + 24, v104 + 1, (unint64_t)&v152);
      v106 = *(unsigned int *)(v102 + 36);
      v107 = *(_QWORD *)(v102 + 24) + 16 * v106;
      *(_DWORD *)v107 = *(_DWORD *)v105;
      v108 = *(_QWORD *)(v105 + 8);
      *(_QWORD *)(v105 + 8) = 0;
      *(_QWORD *)(v107 + 8) = v108;
      v109 = v153;
      *(_DWORD *)(v102 + 36) = v106 + 1;
      v153 = 0;
      if (!v109)
      {
LABEL_62:
        if (!v148)
          goto LABEL_27;
        v85 = v147;
        v147 = 0;
        if (!v85)
          goto LABEL_27;
LABEL_64:
        if (*(_DWORD *)v85 != 2)
        {
          *(_DWORD *)v85 -= 2;
          goto LABEL_27;
        }
        goto LABEL_41;
      }
      v110 = *(_DWORD *)v109 - 2;
      if (*(_DWORD *)v109 == 2)
      {
        WTF::StringImpl::~StringImpl(v109, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
        goto LABEL_62;
      }
    }
    else
    {
      v119 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v119 = 0x500000001;
      *((_QWORD *)v119 + 3) = 0;
      *((_QWORD *)v119 + 4) = 0;
      *((_QWORD *)v119 + 2) = 0;
      v152 = v119;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v152);
      v109 = v152;
      if (!v152)
        goto LABEL_62;
      v110 = *(_DWORD *)v152 - 1;
      if (*(_DWORD *)v152 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v152, v32, v33, v34, v35, v36, v37, v38);
        goto LABEL_62;
      }
    }
    *(_DWORD *)v109 = v110;
    goto LABEL_62;
  }
  v121 = *(_QWORD *)(a1 + 16);
  if (v83)
    *(_DWORD *)v83 += 2;
  v149 = v83;
  v152 = (WTF *)"Unknown errorType: ";
  v153 = (WTF::StringImpl *)20;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v152, (uint64_t *)&v149, (int **)&v147);
  v122 = v147;
  if (!v147)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v121 + 48))
    *(_BYTE *)(v121 + 48) = *(_QWORD *)(v121 + 48);
  LODWORD(v152) = 5;
  *(_DWORD *)v122 += 2;
  v153 = v122;
  v123 = *(unsigned int *)(v121 + 36);
  if ((_DWORD)v123 == *(_DWORD *)(v121 + 32))
  {
    v124 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v121 + 24, v123 + 1, (unint64_t)&v152);
    v125 = *(unsigned int *)(v121 + 36);
    v126 = *(_QWORD *)(v121 + 24) + 16 * v125;
    *(_DWORD *)v126 = *(_DWORD *)v124;
    v127 = *(_QWORD *)(v124 + 8);
    *(_QWORD *)(v124 + 8) = 0;
    *(_QWORD *)(v126 + 8) = v127;
    v128 = v153;
    *(_DWORD *)(v121 + 36) = v125 + 1;
    v153 = 0;
    if (v128)
    {
      if (*(_DWORD *)v128 == 2)
      {
        WTF::StringImpl::~StringImpl(v128, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
      }
      else
      {
        *(_DWORD *)v128 -= 2;
      }
    }
  }
  else
  {
    v129 = *(_QWORD *)(v121 + 24) + 16 * v123;
    *(_DWORD *)v129 = 5;
    *(_QWORD *)(v129 + 8) = v122;
    *(_DWORD *)(v121 + 36) = v123 + 1;
  }
  v130 = v147;
  v147 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v85 = v149;
  v149 = 0;
  if (v85)
    goto LABEL_64;
LABEL_27:
  v49 = v150;
  v150 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v151;
  v151 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

uint64_t Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback::LoadResourceCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591820;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591820;
  return result;
}

void Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback::sendSuccess(Inspector::NetworkBackendDispatcherHandler::LoadResourceCallback *this, const WTF::String *a2, const WTF::String *a3, int a4)
{
  WTF *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF *v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD **v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD **v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD **v102;
  uint64_t v103;
  _DWORD *v104;
  WTF::StringImpl *v105;
  WTF *v106;
  WTF *v107;
  _BYTE v108[16];
  char v109;

  v8 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *((_QWORD *)v8 + 2) = 0;
  v9 = (uint64_t *)((char *)v8 + 16);
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v106 = v8;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x700000002;
  *(_QWORD *)(v10 + 8) = "content";
  *(_DWORD *)(v10 + 16) = 4;
  v105 = (WTF::StringImpl *)v10;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  v17 = *(_DWORD **)a2;
  *((_QWORD *)v11 + 1) = *(_QWORD *)a2;
  if (v17)
    *v17 += 2;
  v107 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v105, (const WTF::StringImpl *)&v107, v12, v13, v14, v15, v16, (uint64_t)v108);
  if (v109)
  {
    v25 = (uint64_t *)((char *)v8 + 24);
    v26 = *((unsigned int *)v8 + 9);
    if ((_DWORD)v26 == *((_DWORD *)v8 + 8))
    {
      v96 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v105);
      v26 = *((unsigned int *)v8 + 9);
      v97 = *((_QWORD *)v8 + 3);
      v98 = *v96;
      if (*v96)
        *v98 += 2;
      *(_QWORD *)(v97 + 8 * v26) = v98;
    }
    else
    {
      v27 = *v25;
      v28 = v105;
      if (v105)
        *(_DWORD *)v105 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
    }
    *((_DWORD *)v8 + 9) = v26 + 1;
  }
  v29 = v107;
  v107 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete(v29, v18, v19, v20, v21, v22, v23, v24);
    else
      --*(_DWORD *)v29;
  }
  v30 = v105;
  v105 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0x800000002;
  *(_QWORD *)(v31 + 8) = "mimeType";
  *(_DWORD *)(v31 + 16) = 4;
  v105 = (WTF::StringImpl *)v31;
  v32 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v32 = 0x400000001;
  v38 = *(_DWORD **)a3;
  *((_QWORD *)v32 + 1) = *(_QWORD *)a3;
  if (v38)
    *v38 += 2;
  v107 = v32;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v105, (const WTF::StringImpl *)&v107, v33, v34, v35, v36, v37, (uint64_t)v108);
  if (v109)
  {
    v46 = (uint64_t *)((char *)v8 + 24);
    v47 = *((unsigned int *)v8 + 9);
    if ((_DWORD)v47 == *((_DWORD *)v8 + 8))
    {
      v99 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v105);
      v47 = *((unsigned int *)v8 + 9);
      v100 = *((_QWORD *)v8 + 3);
      v101 = *v99;
      if (*v99)
        *v101 += 2;
      *(_QWORD *)(v100 + 8 * v47) = v101;
    }
    else
    {
      v48 = *v46;
      v49 = v105;
      if (v105)
        *(_DWORD *)v105 += 2;
      *(_QWORD *)(v48 + 8 * v47) = v49;
    }
    *((_DWORD *)v8 + 9) = v47 + 1;
  }
  v50 = v107;
  v107 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::JSONImpl::Value::operator delete(v50, v39, v40, v41, v42, v43, v44, v45);
    else
      --*(_DWORD *)v50;
  }
  v51 = v105;
  v105 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0x600000002;
  *(_QWORD *)(v52 + 8) = "status";
  *(_DWORD *)(v52 + 16) = 4;
  v105 = (WTF::StringImpl *)v52;
  v53 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v53 = 0x300000001;
  v53[1] = (double)a4;
  v107 = (WTF *)v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v105, (const WTF::StringImpl *)&v107, v54, v55, v56, v57, v58, (uint64_t)v108);
  if (v109)
  {
    v66 = (uint64_t *)((char *)v8 + 24);
    v67 = *((unsigned int *)v8 + 9);
    if ((_DWORD)v67 == *((_DWORD *)v8 + 8))
    {
      v102 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v105);
      v67 = *((unsigned int *)v8 + 9);
      v103 = *((_QWORD *)v8 + 3);
      v104 = *v102;
      if (*v102)
        *v104 += 2;
      *(_QWORD *)(v103 + 8 * v67) = v104;
    }
    else
    {
      v68 = *v66;
      v69 = v105;
      if (v105)
        *(_DWORD *)v105 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *((_DWORD *)v8 + 9) = v67 + 1;
  }
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v105;
  v105 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  if (*((_BYTE *)this + 32)
    || (*((_BYTE *)this + 32) = 1,
        Inspector::BackendDispatcher::sendResponse(*((_QWORD *)this + 2), *((_QWORD *)this + 3), &v106),
        (v8 = v106) != 0))
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v8;
  }
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Network::NetworkStage>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000C8;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"request", 7))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"response", 8))
      return 0x1000000C9;
    else
      return 0;
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Network::ResourceErrorType>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000CALL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"General", 7))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"AccessControl", 13))
    {
      return 0x1000000CBLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Cancellation", 12))
    {
      return 0x1000000CCLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Timeout", 7))
    {
      return 0x1000000CDLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void Inspector::PageBackendDispatcher::create(Inspector::PageBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591840;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x400000002;
  *(_QWORD *)(v8 + 8) = "Page";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::PageBackendDispatcher *Inspector::PageBackendDispatcher::PageBackendDispatcher(Inspector::PageBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::PageBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::PageBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591840;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x400000002;
  *(_QWORD *)(v5 + 8) = "Page";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::PageBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591840;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x400000002;
  *(_QWORD *)(v5 + 8) = "Page";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::PageBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  void (*v28)(_QWORD *, uint64_t, WTF **);
  uint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  WTF::AtomStringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  int v114;
  WTF::StringImpl **v115;
  const WTF::StringImpl *v116;
  unsigned int v117;
  unsigned int v118;
  char *v119;
  int i;
  unsigned int v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _OWORD *v306;
  char *v307;
  uint64_t v308;
  WTF::StringImpl *v309;
  WTF *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  void (*v315)(uint64_t, uint64_t);
  uint64_t v316;
  WTF::StringImpl *v317;
  void (*v318)(uint64_t, uint64_t, uint64_t *);
  uint64_t v319;
  WTF::StringImpl *v320;
  void (*v321)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v322;
  WTF::StringImpl *v323;
  void (*v324)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v325;
  WTF::StringImpl *v326;
  void (*v327)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v328;
  WTF::StringImpl *v329;
  void (*v330)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v331;
  WTF::StringImpl *v332;
  void (*v333)(uint64_t, uint64_t);
  uint64_t v334;
  WTF::StringImpl *v335;
  void (*v336)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v337;
  WTF::StringImpl *v338;
  void (*v339)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v340;
  WTF::StringImpl *v341;
  void (*v342)(uint64_t, uint64_t);
  uint64_t v343;
  WTF::StringImpl *v344;
  void (*v345)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v346;
  WTF::StringImpl *v347;
  void (*v348)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v349;
  WTF::StringImpl *v350;
  void (*v351)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v352;
  WTF::StringImpl *v353;
  void (*v354)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v355;
  WTF::StringImpl *v356;
  void (*v357)(uint64_t, uint64_t, uint64_t *);
  uint64_t v358;
  WTF::StringImpl *v359;
  void (*v360)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v361;
  WTF::StringImpl *v362;
  void (*v363)(uint64_t, uint64_t, uint64_t *);
  uint64_t v364;
  WTF::StringImpl *v365;
  void (*v366)(uint64_t, uint64_t, uint64_t *);
  uint64_t v367;
  WTF::StringImpl *v368;
  void (*v369)(uint64_t, uint64_t);
  uint64_t v370;
  uint64_t v371;

  v371 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v311 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v311, v9, &v310);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = &unk_1ECF58000;
  if ((byte_1ECF587FB & 1) != 0)
    goto LABEL_4;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x600000002;
  *(_QWORD *)(v86 + 8) = "enable";
  *(_DWORD *)(v86 + 16) = 4;
  v311 = (WTF::StringImpl *)v86;
  v312 = (WTF::StringImpl *)Inspector::PageBackendDispatcher::enable;
  v313 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x700000002;
  *(_QWORD *)(v87 + 8) = "disable";
  *(_DWORD *)(v87 + 16) = 4;
  v314 = (WTF::StringImpl *)v87;
  v315 = Inspector::PageBackendDispatcher::disable;
  v316 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x600000002;
  *(_QWORD *)(v88 + 8) = "reload";
  *(_DWORD *)(v88 + 16) = 4;
  v317 = (WTF::StringImpl *)v88;
  v318 = Inspector::PageBackendDispatcher::reload;
  v319 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x800000002;
  *(_QWORD *)(v89 + 8) = "navigate";
  *(_DWORD *)(v89 + 16) = 4;
  v320 = (WTF::StringImpl *)v89;
  v321 = Inspector::PageBackendDispatcher::navigate;
  v322 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0x1100000002;
  *(_QWORD *)(v90 + 8) = "overrideUserAgent";
  *(_DWORD *)(v90 + 16) = 4;
  v323 = (WTF::StringImpl *)v90;
  v324 = Inspector::PageBackendDispatcher::overrideUserAgent;
  v325 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0xF00000002;
  *(_QWORD *)(v91 + 8) = "overrideSetting";
  *(_DWORD *)(v91 + 16) = 4;
  v326 = (WTF::StringImpl *)v91;
  v327 = Inspector::PageBackendDispatcher::overrideSetting;
  v328 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x1600000002;
  *(_QWORD *)(v92 + 8) = "overrideUserPreference";
  *(_DWORD *)(v92 + 16) = 4;
  v329 = (WTF::StringImpl *)v92;
  v330 = Inspector::PageBackendDispatcher::overrideUserPreference;
  v331 = 0;
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0xA00000002;
  *(_QWORD *)(v93 + 8) = "getCookies";
  *(_DWORD *)(v93 + 16) = 4;
  v332 = (WTF::StringImpl *)v93;
  v333 = Inspector::PageBackendDispatcher::getCookies;
  v334 = 0;
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x900000002;
  *(_QWORD *)(v94 + 8) = "setCookie";
  *(_DWORD *)(v94 + 16) = 4;
  v335 = (WTF::StringImpl *)v94;
  v336 = Inspector::PageBackendDispatcher::setCookie;
  v337 = 0;
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0xC00000002;
  *(_QWORD *)(v95 + 8) = "deleteCookie";
  *(_DWORD *)(v95 + 16) = 4;
  v338 = (WTF::StringImpl *)v95;
  v339 = Inspector::PageBackendDispatcher::deleteCookie;
  v340 = 0;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0xF00000002;
  *(_QWORD *)(v96 + 8) = "getResourceTree";
  *(_DWORD *)(v96 + 16) = 4;
  v341 = (WTF::StringImpl *)v96;
  v342 = Inspector::PageBackendDispatcher::getResourceTree;
  v343 = 0;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0x1200000002;
  *(_QWORD *)(v97 + 8) = "getResourceContent";
  *(_DWORD *)(v97 + 16) = 4;
  v344 = (WTF::StringImpl *)v97;
  v345 = Inspector::PageBackendDispatcher::getResourceContent;
  v346 = 0;
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x1200000002;
  *(_QWORD *)(v98 + 8) = "setBootstrapScript";
  *(_DWORD *)(v98 + 16) = 4;
  v347 = (WTF::StringImpl *)v98;
  v348 = Inspector::PageBackendDispatcher::setBootstrapScript;
  v349 = 0;
  v99 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v99 = 0x1000000002;
  *(_QWORD *)(v99 + 8) = "searchInResource";
  *(_DWORD *)(v99 + 16) = 4;
  v350 = (WTF::StringImpl *)v99;
  v351 = Inspector::PageBackendDispatcher::searchInResource;
  v352 = 0;
  v100 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v100 = 0x1100000002;
  *(_QWORD *)(v100 + 8) = "searchInResources";
  *(_DWORD *)(v100 + 16) = 4;
  v353 = (WTF::StringImpl *)v100;
  v354 = Inspector::PageBackendDispatcher::searchInResources;
  v355 = 0;
  v101 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v101 = 0x1100000002;
  *(_QWORD *)(v101 + 8) = "setShowPaintRects";
  *(_DWORD *)(v101 + 16) = 4;
  v356 = (WTF::StringImpl *)v101;
  v357 = Inspector::PageBackendDispatcher::setShowPaintRects;
  v358 = 0;
  v102 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v102 = 0x1000000002;
  *(_QWORD *)(v102 + 8) = "setEmulatedMedia";
  *(_DWORD *)(v102 + 16) = 4;
  v359 = (WTF::StringImpl *)v102;
  v360 = Inspector::PageBackendDispatcher::setEmulatedMedia;
  v361 = 0;
  v103 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v103 = 0xC00000002;
  *(_QWORD *)(v103 + 8) = "snapshotNode";
  *(_DWORD *)(v103 + 16) = 4;
  v362 = (WTF::StringImpl *)v103;
  v363 = Inspector::PageBackendDispatcher::snapshotNode;
  v364 = 0;
  v104 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v104 = 0xC00000002;
  *(_QWORD *)(v104 + 8) = "snapshotRect";
  *(_DWORD *)(v104 + 16) = 4;
  v365 = (WTF::StringImpl *)v104;
  v366 = Inspector::PageBackendDispatcher::snapshotRect;
  v367 = 0;
  v105 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v105 = 0x700000002;
  *(_QWORD *)(v105 + 8) = "archive";
  *(_DWORD *)(v105 + 16) = 4;
  v368 = (WTF::StringImpl *)v105;
  v369 = Inspector::PageBackendDispatcher::archive;
  v370 = 0;
  v106 = (_OWORD *)WTF::fastMalloc((WTF *)0x610);
  bzero(v106 + 1, 0x600uLL);
  v308 = 0;
  v309 = (WTF::StringImpl *)(v106 + 1);
  *v106 = xmmword_199156BB0;
  do
  {
    v113 = v309;
    if (v309
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v309, 8u), (v113 = v309) != 0))
    {
      v114 = *((_DWORD *)v113 - 2);
    }
    else
    {
      v114 = 0;
    }
    v115 = &v311 + 3 * v308;
    v116 = *v115;
    v117 = *((_DWORD *)*v115 + 4);
    if (v117 < 0x100)
      v118 = WTF::StringImpl::hashSlowCase(*v115);
    else
      v118 = v117 >> 8;
    v119 = 0;
    v306 = v115 + 1;
    for (i = 1; ; ++i)
    {
      v121 = v118 & v114;
      v122 = (WTF *)*((_QWORD *)v113 + 3 * (v118 & v114));
      if (v122 == (WTF *)-1)
      {
        v119 = (char *)v113 + 24 * v121;
        goto LABEL_70;
      }
      if (!v122)
        break;
      if (WTF::equal(v122, v116, v11))
        goto LABEL_86;
LABEL_70:
      v118 = i + v121;
    }
    v307 = (char *)v113 + 24 * v121;
    if (v119)
    {
      *(_QWORD *)v119 = 0;
      *((_QWORD *)v119 + 1) = 0;
      *((_QWORD *)v119 + 2) = 0;
      --*((_DWORD *)v113 - 4);
      v307 = v119;
    }
    if (v116)
      *(_DWORD *)v116 += 2;
    *(_QWORD *)v307 = v116;
    *(_OWORD *)(v307 + 8) = *v306;
    v123 = v309;
    if (v309)
      v124 = *((_DWORD *)v309 - 3) + 1;
    else
      v124 = 1;
    *((_DWORD *)v309 - 3) = v124;
    v125 = (*((_DWORD *)v123 - 4) + v124);
    v126 = *((unsigned int *)v123 - 1);
    if (v126 > 0x400)
    {
      if (v126 <= 2 * v125)
      {
LABEL_81:
        v127 = (_DWORD)v126 << (6 * v124 >= (2 * v126));
        goto LABEL_85;
      }
    }
    else if (3 * v126 <= 4 * v125)
    {
      if ((_DWORD)v126)
        goto LABEL_81;
      v127 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v309, v127);
    }
LABEL_86:
    ++v308;
  }
  while (v308 != 20);
  v128 = v309;
  v309 = 0;
  qword_1ECF58858 = (uint64_t)v128;
  v129 = v368;
  v368 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v365;
  v365 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = v362;
  v362 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = v359;
  v359 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = v356;
  v356 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = v353;
  v353 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = v350;
  v350 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = v347;
  v347 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  v137 = v344;
  v344 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  v138 = v341;
  v341 = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v139 = v338;
  v338 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = v335;
  v335 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  v141 = v332;
  v332 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
  v142 = v329;
  v329 = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
    {
      WTF::StringImpl::~StringImpl(v142, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
    }
    else
    {
      *(_DWORD *)v142 -= 2;
    }
  }
  v143 = v326;
  v326 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v258, v259, v260, v261, v262, v263, v264, v265);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = v323;
  v323 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = v320;
  v320 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
    {
      WTF::StringImpl::~StringImpl(v317, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v282, v283, v284, v285, v286, v287, v288, v289);
    }
    else
    {
      *(_DWORD *)v317 -= 2;
    }
  }
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
    {
      WTF::StringImpl::~StringImpl(v314, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v290, v291, v292, v293, v294, v295, v296, v297);
    }
    else
    {
      *(_DWORD *)v314 -= 2;
    }
  }
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
    {
      WTF::StringImpl::~StringImpl(v311, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
    }
    else
    {
      *(_DWORD *)v311 -= 2;
    }
  }
  byte_1ECF587FB = 1;
  v17 = (_QWORD *)&unk_1ECF58000;
LABEL_4:
  v18 = v17[267];
  if (!v18)
    goto LABEL_20;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  v22 = 0;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24 == -1)
    {
LABEL_11:
      v21 = ++v22 + v23;
      continue;
    }
    break;
  }
  if (!v25)
  {
    v26 = v17[267];
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 4);
      v24 = v26 + 24 * v27;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v25, *a3, v11))
    goto LABEL_11;
  v26 = v17[267];
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 4);
LABEL_16:
    if (v24 == v26 + 24 * v27)
    {
LABEL_20:
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *a3;
      if (*a3)
      {
        v40 = *((_DWORD *)v39 + 1);
        *(_DWORD *)v39 += 2;
        if (v40 < 0)
          goto LABEL_171;
      }
      else
      {
        v40 = 0;
      }
      v41 = __OFADD__(v40, 15);
      v42 = v40 + 15;
      if (!v41 && !__OFADD__(v42, 6))
      {
        v43 = !v39 || (*((_BYTE *)v39 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v42 + 6), v43, (int8x16_t *)"'Page.", 6u, (uint64_t)v39, (int8x16_t *)"' was not found", 0xFu, (int **)&v309);
        v44 = v309;
        if (v309)
        {
          if (!*(_BYTE *)(v38 + 48))
            *(_BYTE *)(v38 + 48) = *(_QWORD *)(v38 + 48);
          LODWORD(v311) = 2;
          *(_DWORD *)v44 += 2;
          v312 = v44;
          v45 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v45 == *(_DWORD *)(v38 + 32))
          {
            v46 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 24, v45 + 1, (unint64_t)&v311);
            v47 = *(unsigned int *)(v38 + 36);
            v48 = *(_QWORD *)(v38 + 24) + 16 * v47;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v312;
            *(_DWORD *)(v38 + 36) = v47 + 1;
            v312 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::~StringImpl(v50, v31, v32, v33, v34, v35, v36, v37);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            v51 = *(_QWORD *)(v38 + 24) + 16 * v45;
            *(_DWORD *)v51 = 2;
            *(_QWORD *)(v51 + 8) = v44;
            *(_DWORD *)(v38 + 36) = v45 + 1;
          }
          v52 = v309;
          v309 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              if (!v39)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v39)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
          goto LABEL_41;
        }
LABEL_172:
        __break(0xC471u);
        JUMPOUT(0x198657848);
      }
LABEL_171:
      v309 = 0;
      goto LABEL_172;
    }
  }
  v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = (_QWORD *)(a1 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v30 + v28);
  v28(v30, a2, &v310);
LABEL_41:
  v53 = v310;
  v310 = 0;
  if (!v53)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v53, v31, v32, v33, v34, v35, v36, v37);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::PageBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::PageBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::PageBackendDispatcher::reload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  WTF **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  WTF **v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  char v104;
  __int16 v105;
  __int16 v106;
  WTF *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF **v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xB00000002;
  *(_QWORD *)(v8 + 8) = "ignoreCache";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v103 = (WTF::StringImpl *)v8;
  v107 = (WTF *)&unk_1E3593AB8;
  v108 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v109 = 0;
  v110 = &v107;
  v17 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v6, v7, &v103, 0, (uint64_t)&v107);
  v18 = v110;
  if (v110 == &v107)
  {
    v18 = &v107;
  }
  else
  {
    if (!v110)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v18 + v9))();
LABEL_6:
  v106 = v17;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *a3;
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x1600000002;
  *(_QWORD *)(v21 + 8) = "revalidateAllResources";
  v22 = 4;
  *(_DWORD *)(v21 + 16) = 4;
  v103 = (WTF::StringImpl *)v21;
  v107 = (WTF *)&unk_1E3593AB8;
  v108 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v109 = 0;
  v110 = &v107;
  v30 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v19, v20, &v103, 0, (uint64_t)&v107);
  v31 = v110;
  if (v110 == &v107)
  {
    v31 = &v107;
  }
  else
  {
    if (!v110)
      goto LABEL_13;
    v22 = 5;
  }
  (*((void (**)(void))*v31 + v22))();
LABEL_13:
  v105 = v30;
  if (*(_DWORD *)v21 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v21 -= 2;
  }
  v32 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v32 + 36))
  {
    v33 = WTF::fastCompactMalloc((WTF *)0x20);
    v41 = (WTF::StringImpl *)v33;
    *(_QWORD *)v33 = 0x3900000002;
    *(_QWORD *)(v33 + 8) = "Some arguments of method 'Page.reload' can't be processed";
    v42 = 4;
    *(_DWORD *)(v33 + 16) = 4;
    if (!*(_BYTE *)(v32 + 48))
    {
      *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
      v42 = *(_DWORD *)v33 + 2;
    }
    LODWORD(v107) = 3;
    *(_DWORD *)v33 = v42;
    v108 = (WTF::StringImpl *)v33;
    v43 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v32 + 32))
    {
      v44 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v43 + 1, (unint64_t)&v107);
      v45 = *(unsigned int *)(v32 + 36);
      v46 = *(_QWORD *)(v32 + 24) + 16 * v45;
      *(_DWORD *)v46 = *(_DWORD *)v44;
      v47 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v46 + 8) = v47;
      v48 = v108;
      *(_DWORD *)(v32 + 36) = v45 + 1;
      v108 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v34, v35, v36, v37, v38, v39, v40);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    else
    {
      v50 = *(_QWORD *)(v32 + 24) + 16 * v43;
      *(_DWORD *)v50 = 3;
      *(_QWORD *)(v50 + 8) = v33;
      *(_DWORD *)(v32 + 36) = v43 + 1;
    }
    if (*(_DWORD *)v41 != 2)
    {
      *(_DWORD *)v41 -= 2;
      return;
    }
    v84 = v41;
LABEL_40:
    WTF::StringImpl::~StringImpl(v84, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
    return;
  }
  v49 = *(_QWORD *)(a1 + 24);
  if (v49)
  {
    (*(void (**)(uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)v49 + 32))(v49, a2, &v106, &v105);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 16))(&v103, *(_QWORD *)(a1 + 32), &v106, &v105);
  if (!v104)
  {
    v93 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v93 = 0x500000001;
    *((_QWORD *)v93 + 3) = 0;
    *((_QWORD *)v93 + 4) = 0;
    *((_QWORD *)v93 + 2) = 0;
    v107 = v93;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v107);
    v74 = v107;
    if (!v107)
      goto LABEL_46;
    v75 = *(_DWORD *)v107 - 1;
    if (*(_DWORD *)v107 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v107, v34, v35, v36, v37, v38, v39, v40);
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  v67 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v67 + 48))
    *(_BYTE *)(v67 + 48) = *(_QWORD *)(v67 + 48);
  LODWORD(v107) = 5;
  v68 = v103;
  if (v103)
    *(_DWORD *)v103 += 2;
  v108 = v68;
  v69 = *(unsigned int *)(v67 + 36);
  if ((_DWORD)v69 != *(_DWORD *)(v67 + 32))
  {
    v102 = *(_QWORD *)(v67 + 24) + 16 * v69;
    *(_DWORD *)v102 = 5;
    *(_QWORD *)(v102 + 8) = v68;
    *(_DWORD *)(v67 + 36) = v69 + 1;
    goto LABEL_46;
  }
  v70 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v67 + 24, v69 + 1, (unint64_t)&v107);
  v71 = *(unsigned int *)(v67 + 36);
  v72 = *(_QWORD *)(v67 + 24) + 16 * v71;
  *(_DWORD *)v72 = *(_DWORD *)v70;
  v73 = *(_QWORD *)(v70 + 8);
  *(_QWORD *)(v70 + 8) = 0;
  *(_QWORD *)(v72 + 8) = v73;
  v74 = v108;
  *(_DWORD *)(v67 + 36) = v71 + 1;
  v108 = 0;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      goto LABEL_46;
    }
LABEL_43:
    *(_DWORD *)v74 = v75;
  }
LABEL_46:
  if (v104)
  {
    v84 = v103;
    v103 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 != 2)
      {
        *(_DWORD *)v84 -= 2;
        return;
      }
      goto LABEL_40;
    }
  }
}

void Inspector::PageBackendDispatcher::navigate(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x300000002;
  *(_QWORD *)(v7 + 8) = "url";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x3B00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Page.navigate' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 40))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 24))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::overrideUserAgent(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x500000002;
  *(_QWORD *)(v7 + 8) = "value";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 0, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4400000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Page.overrideUserAgent' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 48))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 32))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::overrideSetting(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  char v140;
  WTF::StringImpl *v141;
  __int16 v142;
  WTF::StringImpl *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  WTF **v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "setting";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v139 = (WTF::StringImpl *)v8;
  v144 = (WTF *)&off_1E3593B90;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v146 = 0;
  v147 = &v144;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v143, v6, v7, &v139, 1, (uint64_t)&v144);
  v17 = v147;
  if (v147 == &v144)
  {
    v17 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "value";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v139 = (WTF::StringImpl *)v20;
  v144 = (WTF *)&unk_1E3593AB8;
  v145 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v146 = 0;
  v147 = &v144;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v139, 0, (uint64_t)&v144);
  v30 = v147;
  if (v147 == &v144)
  {
    v30 = &v144;
  }
  else
  {
    if (!v147)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v142 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v31 + 36))
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    v40 = (WTF::StringImpl *)v32;
    *(_QWORD *)v32 = 0x4200000002;
    *(_QWORD *)(v32 + 8) = "Some arguments of method 'Page.overrideSetting' can't be processed";
    v41 = 4;
    *(_DWORD *)(v32 + 16) = 4;
    if (!*(_BYTE *)(v31 + 48))
    {
      *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
      v41 = *(_DWORD *)v32 + 2;
    }
    LODWORD(v144) = 3;
    *(_DWORD *)v32 = v41;
    v145 = (WTF::StringImpl *)v32;
    v42 = *(unsigned int *)(v31 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
    {
      v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v144);
      v44 = *(unsigned int *)(v31 + 36);
      v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
      *(_DWORD *)v45 = *(_DWORD *)v43;
      v46 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v43 + 8) = 0;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v145;
      *(_DWORD *)(v31 + 36) = v44 + 1;
      v145 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
        }
        else
        {
          *(_DWORD *)v47 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(v31 + 24) + 16 * v42;
      *(_DWORD *)v49 = 3;
      *(_QWORD *)(v49 + 8) = v32;
      *(_DWORD *)(v31 + 36) = v42 + 1;
    }
    if (*(_DWORD *)v40 != 2)
    {
      *(_DWORD *)v40 -= 2;
      goto LABEL_27;
    }
    v85 = v40;
    goto LABEL_45;
  }
  v48 = *(_QWORD *)(a1 + 24);
  if (v48)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *))(*(_QWORD *)v48 + 56))(v48, a2, &v143, &v142);
    goto LABEL_27;
  }
  v75 = Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::Setting>((uint64_t *)&v143);
  if (!HIDWORD(v75))
  {
    v76 = *(_QWORD *)(a1 + 16);
    v77 = v143;
    if (v143)
      *(_DWORD *)v143 += 2;
    v141 = v77;
    v144 = (WTF *)"Unknown setting: ";
    v145 = (WTF::StringImpl *)18;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v144, (uint64_t *)&v141, (int **)&v139);
    v78 = v139;
    if (!v139)
    {
      __break(0xC471u);
      return;
    }
    if (!*(_BYTE *)(v76 + 48))
      *(_BYTE *)(v76 + 48) = *(_QWORD *)(v76 + 48);
    LODWORD(v144) = 5;
    *(_DWORD *)v78 += 2;
    v145 = v78;
    v79 = *(unsigned int *)(v76 + 36);
    if ((_DWORD)v79 == *(_DWORD *)(v76 + 32))
    {
      v80 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v76 + 24, v79 + 1, (unint64_t)&v144);
      v81 = *(unsigned int *)(v76 + 36);
      v82 = *(_QWORD *)(v76 + 24) + 16 * v81;
      *(_DWORD *)v82 = *(_DWORD *)v80;
      v83 = *(_QWORD *)(v80 + 8);
      *(_QWORD *)(v80 + 8) = 0;
      *(_QWORD *)(v82 + 8) = v83;
      v84 = v145;
      *(_DWORD *)(v76 + 36) = v81 + 1;
      v145 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::~StringImpl(v84, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v84 -= 2;
        }
      }
    }
    else
    {
      v119 = *(_QWORD *)(v76 + 24) + 16 * v79;
      *(_DWORD *)v119 = 5;
      *(_QWORD *)(v119 + 8) = v78;
      *(_DWORD *)(v76 + 36) = v79 + 1;
    }
    v120 = v139;
    v139 = 0;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
      {
        WTF::StringImpl::~StringImpl(v120, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
      }
      else
      {
        *(_DWORD *)v120 -= 2;
      }
    }
    v85 = v141;
    v141 = 0;
    if (!v85)
      goto LABEL_27;
    goto LABEL_68;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, unint64_t, __int16 *))(**(_QWORD **)(a1 + 32)
                                                                                              + 40))(&v139, *(_QWORD *)(a1 + 32), v75, &v142);
  if (!v140)
  {
    v121 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v121 = 0x500000001;
    *((_QWORD *)v121 + 3) = 0;
    *((_QWORD *)v121 + 4) = 0;
    *((_QWORD *)v121 + 2) = 0;
    v144 = v121;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v144);
    v101 = v144;
    if (!v144)
      goto LABEL_66;
    v102 = *(_DWORD *)v144 - 1;
    if (*(_DWORD *)v144 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v144, v33, v34, v35, v36, v37, v38, v39);
      goto LABEL_66;
    }
    goto LABEL_64;
  }
  v94 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v94 + 48))
    *(_BYTE *)(v94 + 48) = *(_QWORD *)(v94 + 48);
  LODWORD(v144) = 5;
  v95 = v139;
  if (v139)
    *(_DWORD *)v139 += 2;
  v145 = v95;
  v96 = *(unsigned int *)(v94 + 36);
  if ((_DWORD)v96 != *(_DWORD *)(v94 + 32))
  {
    v122 = *(_QWORD *)(v94 + 24) + 16 * v96;
    *(_DWORD *)v122 = 5;
    *(_QWORD *)(v122 + 8) = v95;
    *(_DWORD *)(v94 + 36) = v96 + 1;
    goto LABEL_66;
  }
  v97 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v94 + 24, v96 + 1, (unint64_t)&v144);
  v98 = *(unsigned int *)(v94 + 36);
  v99 = *(_QWORD *)(v94 + 24) + 16 * v98;
  *(_DWORD *)v99 = *(_DWORD *)v97;
  v100 = *(_QWORD *)(v97 + 8);
  *(_QWORD *)(v97 + 8) = 0;
  *(_QWORD *)(v99 + 8) = v100;
  v101 = v145;
  *(_DWORD *)(v94 + 36) = v98 + 1;
  v145 = 0;
  if (v101)
  {
    v102 = *(_DWORD *)v101 - 2;
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      goto LABEL_66;
    }
LABEL_64:
    *(_DWORD *)v101 = v102;
  }
LABEL_66:
  if (!v140)
    goto LABEL_27;
  v85 = v139;
  v139 = 0;
  if (!v85)
    goto LABEL_27;
LABEL_68:
  if (*(_DWORD *)v85 == 2)
  {
LABEL_45:
    WTF::StringImpl::~StringImpl(v85, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    goto LABEL_27;
  }
  *(_DWORD *)v85 -= 2;
LABEL_27:
  v50 = v143;
  v143 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::overrideUserPreference(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  int v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  char v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  WTF **v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x400000002;
  *(_QWORD *)(v8 + 8) = "name";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v149 = (WTF::StringImpl *)v8;
  v155 = (WTF *)&off_1E3593B90;
  v156 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v157 = 0;
  v158 = &v155;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v154, v6, v7, &v149, 1, (uint64_t)&v155);
  v17 = v158;
  if (v158 == &v155)
  {
    v17 = &v155;
  }
  else
  {
    if (!v158)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x500000002;
  *(_QWORD *)(v20 + 8) = "value";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v149 = (WTF::StringImpl *)v20;
  v155 = (WTF *)&off_1E3593B90;
  v156 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v157 = 0;
  v158 = &v155;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v153, v18, v19, &v149, 0, (uint64_t)&v155);
  v29 = v158;
  if (v158 == &v155)
  {
    v29 = &v155;
  }
  else
  {
    if (!v158)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4900000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Page.overrideUserPreference' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v155) = 3;
    *(_DWORD *)v31 = v40;
    v156 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v155);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v156;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v156 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v85 = v39;
LABEL_41:
    WTF::StringImpl::~StringImpl(v85, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 64))(v47, a2, &v154, &v153);
    goto LABEL_27;
  }
  v83 = v154;
  if (WTF::equalInternal<unsigned char>((uint64_t)v154, (unint64_t)"PrefersReducedMotion", 20))
  {
    v84 = 218;
    goto LABEL_47;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"PrefersContrast", 15))
  {
    v84 = 219;
    goto LABEL_47;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v83, (unint64_t)"PrefersColorScheme", 18))
  {
    v84 = 220;
LABEL_47:
    v102 = 0x1000000DDLL;
    v103 = v153;
    if (!WTF::equalInternal<unsigned char>((uint64_t)v153, (unint64_t)"NoPreference", 12))
    {
      if (WTF::equalInternal<unsigned char>((uint64_t)v103, (unint64_t)"Reduce", 6))
      {
        v102 = 0x1000000DELL;
      }
      else if (WTF::equalInternal<unsigned char>((uint64_t)v103, (unint64_t)"More", 4))
      {
        v102 = 0x1000000DFLL;
      }
      else if (WTF::equalInternal<unsigned char>((uint64_t)v103, (unint64_t)"Light", 5))
      {
        v102 = 0x1000000E0;
      }
      else if (WTF::equalInternal<unsigned char>((uint64_t)v103, (unint64_t)"Dark", 4))
      {
        v102 = 0x1000000E1;
      }
      else
      {
        v102 = 0;
      }
    }
    v151 = v102;
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 32) + 48))(&v149, *(_QWORD *)(a1 + 32), v84, &v151);
    if (v150)
    {
      v114 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v114 + 48))
        *(_BYTE *)(v114 + 48) = *(_QWORD *)(v114 + 48);
      LODWORD(v155) = 5;
      v115 = v149;
      if (v149)
        *(_DWORD *)v149 += 2;
      v156 = v115;
      v116 = *(unsigned int *)(v114 + 36);
      if ((_DWORD)v116 != *(_DWORD *)(v114 + 32))
      {
        v132 = *(_QWORD *)(v114 + 24) + 16 * v116;
        *(_DWORD *)v132 = 5;
        *(_QWORD *)(v132 + 8) = v115;
        *(_DWORD *)(v114 + 36) = v116 + 1;
        goto LABEL_85;
      }
      v117 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v114 + 24, v116 + 1, (unint64_t)&v155);
      v118 = *(unsigned int *)(v114 + 36);
      v119 = *(_QWORD *)(v114 + 24) + 16 * v118;
      *(_DWORD *)v119 = *(_DWORD *)v117;
      v120 = *(_QWORD *)(v117 + 8);
      *(_QWORD *)(v117 + 8) = 0;
      *(_QWORD *)(v119 + 8) = v120;
      v121 = v156;
      *(_DWORD *)(v114 + 36) = v118 + 1;
      v156 = 0;
      if (!v121)
      {
LABEL_85:
        if (!v150)
          goto LABEL_27;
        v85 = v149;
        v149 = 0;
        if (!v85)
          goto LABEL_27;
LABEL_87:
        if (*(_DWORD *)v85 != 2)
        {
          *(_DWORD *)v85 -= 2;
          goto LABEL_27;
        }
        goto LABEL_41;
      }
      v122 = *(_DWORD *)v121 - 2;
      if (*(_DWORD *)v121 == 2)
      {
        WTF::StringImpl::~StringImpl(v121, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        goto LABEL_85;
      }
    }
    else
    {
      v131 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v131 = 0x500000001;
      *((_QWORD *)v131 + 3) = 0;
      *((_QWORD *)v131 + 4) = 0;
      *((_QWORD *)v131 + 2) = 0;
      v155 = v131;
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v155);
      v121 = v155;
      if (!v155)
        goto LABEL_85;
      v122 = *(_DWORD *)v155 - 1;
      if (*(_DWORD *)v155 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v155, v32, v33, v34, v35, v36, v37, v38);
        goto LABEL_85;
      }
    }
    *(_DWORD *)v121 = v122;
    goto LABEL_85;
  }
  v104 = *(_QWORD *)(a1 + 16);
  if (v83)
    *(_DWORD *)v83 += 2;
  v152 = v83;
  v155 = (WTF *)"Unknown name: ";
  v156 = (WTF::StringImpl *)15;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v155, (uint64_t *)&v152, (int **)&v149);
  v105 = v149;
  if (!v149)
  {
    __break(0xC471u);
    return;
  }
  if (!*(_BYTE *)(v104 + 48))
    *(_BYTE *)(v104 + 48) = *(_QWORD *)(v104 + 48);
  LODWORD(v155) = 5;
  *(_DWORD *)v105 += 2;
  v156 = v105;
  v106 = *(unsigned int *)(v104 + 36);
  if ((_DWORD)v106 == *(_DWORD *)(v104 + 32))
  {
    v107 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v104 + 24, v106 + 1, (unint64_t)&v155);
    v108 = *(unsigned int *)(v104 + 36);
    v109 = *(_QWORD *)(v104 + 24) + 16 * v108;
    *(_DWORD *)v109 = *(_DWORD *)v107;
    v110 = *(_QWORD *)(v107 + 8);
    *(_QWORD *)(v107 + 8) = 0;
    *(_QWORD *)(v109 + 8) = v110;
    v111 = v156;
    *(_DWORD *)(v104 + 36) = v108 + 1;
    v156 = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
      {
        WTF::StringImpl::~StringImpl(v111, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
      }
      else
      {
        *(_DWORD *)v111 -= 2;
      }
    }
  }
  else
  {
    v112 = *(_QWORD *)(v104 + 24) + 16 * v106;
    *(_DWORD *)v112 = 5;
    *(_QWORD *)(v112 + 8) = v105;
    *(_DWORD *)(v104 + 36) = v106 + 1;
  }
  v113 = v149;
  v149 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
    {
      WTF::StringImpl::~StringImpl(v113, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v113 -= 2;
    }
  }
  v85 = v152;
  v152 = 0;
  if (v85)
    goto LABEL_87;
LABEL_27:
  v49 = v153;
  v153 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v154;
  v154 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::getCookies(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 56))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::PageBackendDispatcher::setCookie(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x700000002;
    *(_QWORD *)(v31 + 8) = "cookies";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v30 + 16), &v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E3593A08[v74])(&v75, &v73);
}

void Inspector::PageBackendDispatcher::setCookie(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  char v86;
  WTF *v87;
  WTF *v88;
  WTF::StringImpl *v89;
  WTF **v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "cookie";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v85 = (WTF::StringImpl *)v7;
  v88 = (WTF *)&off_1E3593C20;
  v90 = &v88;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v87, v5, v6, &v85, 1, (uint64_t)&v88);
  v16 = v90;
  if (v90 == &v88)
  {
    v16 = &v88;
  }
  else
  {
    if (!v90)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x3C00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Page.setCookie' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v88) = 3;
    *(_DWORD *)v18 = v27;
    v89 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v88);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v89;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v89 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v38 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v38 = 3;
      *(_QWORD *)(v38 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_46;
    }
    v36 = v26;
    goto LABEL_36;
  }
  v34 = a1[3];
  if (v34)
  {
    v35 = v87;
    v87 = 0;
    v88 = v35;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v34 + 80))(v34, a2, &v88);
    v36 = v88;
    v88 = 0;
    if (!v36)
      goto LABEL_46;
    v37 = *(_DWORD *)v36 - 1;
    if (*(_DWORD *)v36 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v36, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_46;
    }
LABEL_45:
    *(_DWORD *)v36 = v37;
    goto LABEL_46;
  }
  v47 = a1[4];
  v48 = v87;
  v87 = 0;
  v88 = v48;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v47 + 64))(&v85, v47, &v88);
  v49 = v88;
  v88 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v49;
  }
  if (!v86)
  {
    v75 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v75 = 0x500000001;
    *((_QWORD *)v75 + 3) = 0;
    *((_QWORD *)v75 + 4) = 0;
    *((_QWORD *)v75 + 2) = 0;
    v88 = v75;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v88);
    v57 = v88;
    if (!v88)
      goto LABEL_42;
    v58 = *(_DWORD *)v88 - 1;
    if (*(_DWORD *)v88 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v88, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v50 = a1[2];
  if (!*(_BYTE *)(v50 + 48))
    *(_BYTE *)(v50 + 48) = *(_QWORD *)(v50 + 48);
  LODWORD(v88) = 5;
  v51 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  v89 = v51;
  v52 = *(unsigned int *)(v50 + 36);
  if ((_DWORD)v52 != *(_DWORD *)(v50 + 32))
  {
    v84 = *(_QWORD *)(v50 + 24) + 16 * v52;
    *(_DWORD *)v84 = 5;
    *(_QWORD *)(v84 + 8) = v51;
    *(_DWORD *)(v50 + 36) = v52 + 1;
    goto LABEL_42;
  }
  v53 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 24, v52 + 1, (unint64_t)&v88);
  v54 = *(unsigned int *)(v50 + 36);
  v55 = *(_QWORD *)(v50 + 24) + 16 * v54;
  *(_DWORD *)v55 = *(_DWORD *)v53;
  v56 = *(_QWORD *)(v53 + 8);
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v55 + 8) = v56;
  v57 = v89;
  *(_DWORD *)(v50 + 36) = v54 + 1;
  v89 = 0;
  if (v57)
  {
    v58 = *(_DWORD *)v57 - 2;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v57 = v58;
  }
LABEL_42:
  if (v86)
  {
    v36 = v85;
    v85 = 0;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }
LABEL_46:
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v87;
  }
}

void Inspector::PageBackendDispatcher::deleteCookie(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  char v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF **v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xA00000002;
  *(_QWORD *)(v8 + 8) = "cookieName";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v119 = (WTF::StringImpl *)v8;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v122, v6, v7, &v119, 1, (uint64_t)&v123);
  v17 = v126;
  if (v126 == &v123)
  {
    v17 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x300000002;
  *(_QWORD *)(v20 + 8) = "url";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v119 = (WTF::StringImpl *)v20;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v121, v18, v19, &v119, 1, (uint64_t)&v123);
  v29 = v126;
  if (v126 == &v123)
  {
    v29 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x3F00000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Page.deleteCookie' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v123) = 3;
    *(_DWORD *)v31 = v40;
    v124 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v123);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v124;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v124 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v100 = v39;
    goto LABEL_48;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 88))(v47, a2, &v122, &v121);
    goto LABEL_27;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 72))(&v119, *(_QWORD *)(a1 + 32), &v122, &v121);
  if (!v120)
  {
    v109 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v109 = 0x500000001;
    *((_QWORD *)v109 + 3) = 0;
    *((_QWORD *)v109 + 4) = 0;
    *((_QWORD *)v109 + 2) = 0;
    v123 = v109;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v123);
    v90 = v123;
    if (!v123)
      goto LABEL_54;
    v91 = *(_DWORD *)v123 - 1;
    if (*(_DWORD *)v123 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v123, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_54;
    }
    goto LABEL_51;
  }
  v83 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v83 + 48))
    *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
  LODWORD(v123) = 5;
  v84 = v119;
  if (v119)
    *(_DWORD *)v119 += 2;
  v124 = v84;
  v85 = *(unsigned int *)(v83 + 36);
  if ((_DWORD)v85 != *(_DWORD *)(v83 + 32))
  {
    v118 = *(_QWORD *)(v83 + 24) + 16 * v85;
    *(_DWORD *)v118 = 5;
    *(_QWORD *)(v118 + 8) = v84;
    *(_DWORD *)(v83 + 36) = v85 + 1;
    goto LABEL_54;
  }
  v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v123);
  v87 = *(unsigned int *)(v83 + 36);
  v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
  *(_DWORD *)v88 = *(_DWORD *)v86;
  v89 = *(_QWORD *)(v86 + 8);
  *(_QWORD *)(v86 + 8) = 0;
  *(_QWORD *)(v88 + 8) = v89;
  v90 = v124;
  *(_DWORD *)(v83 + 36) = v87 + 1;
  v124 = 0;
  if (v90)
  {
    v91 = *(_DWORD *)v90 - 2;
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      goto LABEL_54;
    }
LABEL_51:
    *(_DWORD *)v90 = v91;
  }
LABEL_54:
  if (v120)
  {
    v100 = v119;
    v119 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
LABEL_48:
        WTF::StringImpl::~StringImpl(v100, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
        goto LABEL_27;
      }
      *(_DWORD *)v100 -= 2;
    }
  }
LABEL_27:
  v49 = v121;
  v121 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v122;
  v122 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::getResourceTree(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  char v77;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 80))(&v73);
  if (v74)
  {
    if (v74 != 1)
    {
      v69 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::PageBackendDispatcher::getResourceContent(v69);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v75 = 5;
    v6 = v73;
    if (v73)
      *(_DWORD *)v73 += 2;
    v76 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v75);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v76;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v76 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v73;
    v73 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v72 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x900000002;
    *(_QWORD *)(v31 + 8) = "frameTree";
    *(_DWORD *)(v31 + 16) = 4;
    v70 = v29;
    v71 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v71, (const WTF::StringImpl *)&v70, v32, v33, v34, v35, v36, (uint64_t)&v75);
    if (v77)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v71);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v71;
        if (v71)
          *(_DWORD *)v71 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v70;
    v70 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v71;
    v71 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v72);
    v19 = v72;
    if (!v72)
      goto LABEL_29;
    v20 = *(_DWORD *)v72 - 1;
    if (*(_DWORD *)v72 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v72, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v74 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E3593A18[v74])(&v75, &v73);
}

void Inspector::PageBackendDispatcher::getResourceContent(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::AtomStringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF *v141;
  WTF::StringImpl *v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD **v176;
  uint64_t v177;
  _DWORD *v178;
  _DWORD **v179;
  uint64_t v180;
  _DWORD *v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF *v187;
  WTF::StringImpl *v188;
  unsigned __int8 v189;
  int v190;
  uint64_t (**v191)();
  WTF::StringImpl *v192;
  uint64_t v193;
  uint64_t (***v194)();
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "frameId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v188 = (WTF::StringImpl *)v8;
  v191 = &off_1E3593B90;
  v192 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v193 = 0;
  v194 = &v191;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v186, v6, v7, &v188, 1, (uint64_t)&v191);
  v17 = v194;
  if (v194 == &v191)
  {
    v17 = &v191;
  }
  else
  {
    if (!v194)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x300000002;
  *(_QWORD *)(v20 + 8) = "url";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v188 = (WTF::StringImpl *)v20;
  v191 = &off_1E3593B90;
  v192 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v193 = 0;
  v194 = &v191;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v185, v18, v19, &v188, 1, (uint64_t)&v191);
  v29 = v194;
  if (v194 == &v191)
  {
    v29 = &v191;
  }
  else
  {
    if (!v194)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4500000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Page.getResourceContent' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v191) = 3;
    *(_DWORD *)v31 = v40;
    v192 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v191);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v192;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v192 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
    goto LABEL_27;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (!v47)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 88))(&v188, *(_QWORD *)(a1 + 32), &v186, &v185);
    if (v190)
    {
      if (v190 != 1)
      {
        v182 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::PageBackendDispatcher::setBootstrapScript(v182);
        return;
      }
      v83 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v83 + 48))
        *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
      LODWORD(v191) = 5;
      v84 = v188;
      if (v188)
        *(_DWORD *)v188 += 2;
      v192 = v84;
      v85 = *(unsigned int *)(v83 + 36);
      if ((_DWORD)v85 != *(_DWORD *)(v83 + 32))
      {
        v151 = *(_QWORD *)(v83 + 24) + 16 * v85;
        *(_DWORD *)v151 = 5;
        *(_QWORD *)(v151 + 8) = v84;
        *(_DWORD *)(v83 + 36) = v85 + 1;
        goto LABEL_87;
      }
      v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v191);
      v87 = *(unsigned int *)(v83 + 36);
      v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
      *(_DWORD *)v88 = *(_DWORD *)v86;
      v89 = *(_QWORD *)(v86 + 8);
      *(_QWORD *)(v86 + 8) = 0;
      *(_QWORD *)(v88 + 8) = v89;
      v90 = v192;
      *(_DWORD *)(v83 + 36) = v87 + 1;
      v192 = 0;
      if (!v90)
        goto LABEL_87;
      if (*(_DWORD *)v90 != 2)
      {
        *(_DWORD *)v90 -= 2;
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    v99 = v188;
    v188 = 0;
    v100 = v189;
    v101 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v101 = 0x500000001;
    *(_QWORD *)(v101 + 16) = 0;
    v102 = (uint64_t *)(v101 + 16);
    *(_QWORD *)(v101 + 24) = 0;
    *(_QWORD *)(v101 + 32) = 0;
    v184 = (WTF *)v101;
    v103 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v103 = 0x700000002;
    *(_QWORD *)(v103 + 8) = "content";
    *(_DWORD *)(v103 + 16) = 4;
    v183 = (WTF::StringImpl *)v103;
    v104 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v104 = 0x400000001;
    *((_QWORD *)v104 + 1) = v99;
    if (v99)
      *(_DWORD *)v99 += 2;
    v187 = v104;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v102, (WTF::AtomStringImpl *)&v183, (const WTF::StringImpl *)&v187, v105, v106, v107, v108, v109, (uint64_t)&v191);
    if ((_BYTE)v193)
    {
      v117 = (uint64_t *)(v101 + 24);
      v118 = *(unsigned int *)(v101 + 36);
      if ((_DWORD)v118 == *(_DWORD *)(v101 + 32))
      {
        v176 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)&v183);
        v118 = *(unsigned int *)(v101 + 36);
        v177 = *(_QWORD *)(v101 + 24);
        v178 = *v176;
        if (*v176)
          *v178 += 2;
        *(_QWORD *)(v177 + 8 * v118) = v178;
      }
      else
      {
        v119 = *v117;
        v120 = v183;
        if (v183)
          *(_DWORD *)v183 += 2;
        *(_QWORD *)(v119 + 8 * v118) = v120;
      }
      *(_DWORD *)(v101 + 36) = v118 + 1;
    }
    v121 = v187;
    v187 = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 == 1)
        WTF::JSONImpl::Value::operator delete(v121, v110, v111, v112, v113, v114, v115, v116);
      else
        --*(_DWORD *)v121;
    }
    v122 = v183;
    v183 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
      {
        WTF::StringImpl::~StringImpl(v122, v110, v111, v112, v113, v114, v115, v116);
        WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
      }
      else
      {
        *(_DWORD *)v122 -= 2;
      }
    }
    v123 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v123 = 0xD00000002;
    *(_QWORD *)(v123 + 8) = "base64Encoded";
    *(_DWORD *)(v123 + 16) = 4;
    v183 = (WTF::StringImpl *)v123;
    v124 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v124 = 0x100000001;
    *((_BYTE *)v124 + 8) = v100 != 0;
    v187 = v124;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v102, (WTF::AtomStringImpl *)&v183, (const WTF::StringImpl *)&v187, v125, v126, v127, v128, v129, (uint64_t)&v191);
    if ((_BYTE)v193)
    {
      v137 = (uint64_t *)(v101 + 24);
      v138 = *(unsigned int *)(v101 + 36);
      if ((_DWORD)v138 == *(_DWORD *)(v101 + 32))
      {
        v179 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v137, v138 + 1, (unint64_t)&v183);
        v138 = *(unsigned int *)(v101 + 36);
        v180 = *(_QWORD *)(v101 + 24);
        v181 = *v179;
        if (*v179)
          *v181 += 2;
        *(_QWORD *)(v180 + 8 * v138) = v181;
      }
      else
      {
        v139 = *v137;
        v140 = v183;
        if (v183)
          *(_DWORD *)v183 += 2;
        *(_QWORD *)(v139 + 8 * v138) = v140;
      }
      *(_DWORD *)(v101 + 36) = v138 + 1;
    }
    v141 = v187;
    v187 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 1)
        WTF::JSONImpl::Value::operator delete(v141, v130, v131, v132, v133, v134, v135, v136);
      else
        --*(_DWORD *)v141;
    }
    v142 = v183;
    v183 = 0;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2)
      {
        WTF::StringImpl::~StringImpl(v142, v130, v131, v132, v133, v134, v135, v136);
        WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
      }
      else
      {
        *(_DWORD *)v142 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v184);
    if (v184)
    {
      if (*(_DWORD *)v184 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v184, v32, v33, v34, v35, v36, v37, v38);
        if (!v99)
        {
LABEL_87:
          if (v190 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35939F8[v190])(&v191, &v188);
          goto LABEL_27;
        }
        goto LABEL_79;
      }
      --*(_DWORD *)v184;
    }
    if (!v99)
      goto LABEL_87;
LABEL_79:
    if (*(_DWORD *)v99 != 2)
    {
      *(_DWORD *)v99 -= 2;
      goto LABEL_87;
    }
    v90 = v99;
LABEL_86:
    WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
    goto LABEL_87;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 104))(v47, a2, &v186, &v185);
LABEL_27:
  v49 = v185;
  v185 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v186;
  v186 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::setBootstrapScript(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "source";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 0, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4500000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Page.setBootstrapScript' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 112))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 96))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::searchInResource(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (***v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t (***v53)();
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  uint64_t (***v66)();
  uint64_t v67;
  const WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (***v78)();
  uint64_t v79;
  uint64_t v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  int v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  WTF::AtomStringImpl *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  WTF *v226;
  WTF::StringImpl *v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _DWORD **v245;
  uint64_t v246;
  _DWORD *v247;
  uint64_t v248;
  WTF *v250;
  WTF::StringImpl *v251;
  WTF *v252;
  WTF::StringImpl *v253;
  int v254;
  WTF::StringImpl *v255;
  __int16 v256;
  __int16 v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  uint64_t (**v261)();
  WTF::StringImpl *v262;
  uint64_t v263;
  uint64_t (***v264)();
  uint64_t v265;

  v265 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "frameId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v253 = (WTF::StringImpl *)v7;
  v261 = &off_1E3593B90;
  v262 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v263 = 0;
  v264 = &v261;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v260, v5, v6, &v253, 1, (uint64_t)&v261);
  v16 = v264;
  if (v264 == &v261)
  {
    v16 = &v261;
  }
  else
  {
    if (!v264)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x300000002;
  *(_QWORD *)(v19 + 8) = "url";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  v253 = (WTF::StringImpl *)v19;
  v261 = &off_1E3593B90;
  v262 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v263 = 0;
  v264 = &v261;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v259, v17, v18, &v253, 1, (uint64_t)&v261);
  v28 = v264;
  if (v264 == &v261)
  {
    v28 = &v261;
  }
  else
  {
    if (!v264)
      goto LABEL_13;
    v20 = 5;
  }
  (*v28)[v20]();
LABEL_13:
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *a3;
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0x500000002;
  *(_QWORD *)(v31 + 8) = "query";
  v32 = 4;
  *(_DWORD *)(v31 + 16) = 4;
  v253 = (WTF::StringImpl *)v31;
  v261 = &off_1E3593B90;
  v262 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v263 = 0;
  v264 = &v261;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v258, v29, v30, &v253, 1, (uint64_t)&v261);
  v40 = v264;
  if (v264 == &v261)
  {
    v40 = &v261;
  }
  else
  {
    if (!v264)
      goto LABEL_20;
    v32 = 5;
  }
  (*v40)[v32]();
LABEL_20:
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v31, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v41 = *(_QWORD *)(a1 + 16);
  v42 = (uint64_t)*a3;
  v43 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v43 = 0xD00000002;
  *(_QWORD *)(v43 + 8) = "caseSensitive";
  v44 = 4;
  *(_DWORD *)(v43 + 16) = 4;
  v253 = (WTF::StringImpl *)v43;
  v261 = (uint64_t (**)())&unk_1E3593AB8;
  v262 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v263 = 0;
  v264 = &v261;
  v52 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v41, v42, &v253, 0, (uint64_t)&v261);
  v53 = v264;
  if (v264 == &v261)
  {
    v53 = &v261;
  }
  else
  {
    if (!v264)
      goto LABEL_27;
    v44 = 5;
  }
  (*v53)[v44]();
LABEL_27:
  v257 = v52;
  if (*(_DWORD *)v43 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v43, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
  }
  else
  {
    *(_DWORD *)v43 -= 2;
  }
  v54 = *(_QWORD *)(a1 + 16);
  v55 = (uint64_t)*a3;
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x700000002;
  *(_QWORD *)(v56 + 8) = "isRegex";
  v57 = 4;
  *(_DWORD *)(v56 + 16) = 4;
  v253 = (WTF::StringImpl *)v56;
  v261 = (uint64_t (**)())&unk_1E3593AB8;
  v262 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v263 = 0;
  v264 = &v261;
  v65 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v54, v55, &v253, 0, (uint64_t)&v261);
  v66 = v264;
  if (v264 == &v261)
  {
    v66 = &v261;
  }
  else
  {
    if (!v264)
      goto LABEL_34;
    v57 = 5;
  }
  (*v66)[v57]();
LABEL_34:
  v256 = v65;
  if (*(_DWORD *)v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
  }
  else
  {
    *(_DWORD *)v56 -= 2;
  }
  v67 = *(_QWORD *)(a1 + 16);
  v68 = *a3;
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x900000002;
  *(_QWORD *)(v69 + 8) = "requestId";
  v70 = 4;
  *(_DWORD *)(v69 + 16) = 4;
  v253 = (WTF::StringImpl *)v69;
  v261 = &off_1E3593B90;
  v262 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v263 = 0;
  v264 = &v261;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v255, v67, v68, &v253, 0, (uint64_t)&v261);
  v78 = v264;
  if (v264 == &v261)
  {
    v78 = &v261;
  }
  else
  {
    if (!v264)
      goto LABEL_41;
    v70 = 5;
  }
  (*v78)[v70]();
LABEL_41:
  if (*(_DWORD *)v69 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v69, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
  }
  else
  {
    *(_DWORD *)v69 -= 2;
  }
  v79 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v79 + 36))
  {
    v80 = WTF::fastCompactMalloc((WTF *)0x20);
    v88 = (WTF::StringImpl *)v80;
    *(_QWORD *)v80 = 0x4300000002;
    *(_QWORD *)(v80 + 8) = "Some arguments of method 'Page.searchInResource' can't be processed";
    v89 = 4;
    *(_DWORD *)(v80 + 16) = 4;
    if (!*(_BYTE *)(v79 + 48))
    {
      *(_BYTE *)(v79 + 48) = *(_QWORD *)(v79 + 48);
      v89 = *(_DWORD *)v80 + 2;
    }
    LODWORD(v261) = 3;
    *(_DWORD *)v80 = v89;
    v262 = (WTF::StringImpl *)v80;
    v90 = *(unsigned int *)(v79 + 36);
    if ((_DWORD)v90 == *(_DWORD *)(v79 + 32))
    {
      v91 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v79 + 24, v90 + 1, (unint64_t)&v261);
      v92 = *(unsigned int *)(v79 + 36);
      v93 = *(_QWORD *)(v79 + 24) + 16 * v92;
      *(_DWORD *)v93 = *(_DWORD *)v91;
      v94 = *(_QWORD *)(v91 + 8);
      *(_QWORD *)(v91 + 8) = 0;
      *(_QWORD *)(v93 + 8) = v94;
      v95 = v262;
      *(_DWORD *)(v79 + 36) = v92 + 1;
      v262 = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
        {
          WTF::StringImpl::~StringImpl(v95, v81, v82, v83, v84, v85, v86, v87);
          WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
        }
        else
        {
          *(_DWORD *)v95 -= 2;
        }
      }
    }
    else
    {
      v97 = *(_QWORD *)(v79 + 24) + 16 * v90;
      *(_DWORD *)v97 = 3;
      *(_QWORD *)(v97 + 8) = v80;
      *(_DWORD *)(v79 + 36) = v90 + 1;
    }
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
    goto LABEL_55;
  }
  v96 = *(_QWORD *)(a1 + 24);
  if (!v96)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 104))(&v253, *(_QWORD *)(a1 + 32), &v260, &v259, &v258, &v257, &v256, &v255);
    if (v254)
    {
      if (v254 != 1)
      {
        v248 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::PageBackendDispatcher::searchInResources(v248);
        return;
      }
      v182 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v182 + 48))
        *(_BYTE *)(v182 + 48) = *(_QWORD *)(v182 + 48);
      LODWORD(v261) = 5;
      v183 = v253;
      if (v253)
        *(_DWORD *)v253 += 2;
      v262 = v183;
      v184 = *(unsigned int *)(v182 + 36);
      if ((_DWORD)v184 == *(_DWORD *)(v182 + 32))
      {
        v185 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v182 + 24, v184 + 1, (unint64_t)&v261);
        v186 = *(unsigned int *)(v182 + 36);
        v187 = *(_QWORD *)(v182 + 24) + 16 * v186;
        *(_DWORD *)v187 = *(_DWORD *)v185;
        v188 = *(_QWORD *)(v185 + 8);
        *(_QWORD *)(v185 + 8) = 0;
        *(_QWORD *)(v187 + 8) = v188;
        v189 = v262;
        *(_DWORD *)(v182 + 36) = v186 + 1;
        v262 = 0;
        if (!v189)
          goto LABEL_106;
        v190 = *(_DWORD *)v189 - 2;
        if (*(_DWORD *)v189 == 2)
        {
          WTF::StringImpl::~StringImpl(v189, v81, v82, v83, v84, v85, v86, v87);
          WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
          goto LABEL_106;
        }
        goto LABEL_103;
      }
      v236 = *(_QWORD *)(v182 + 24) + 16 * v184;
      *(_DWORD *)v236 = 5;
      *(_QWORD *)(v236 + 8) = v183;
      *(_DWORD *)(v182 + 36) = v184 + 1;
    }
    else
    {
      v207 = v253;
      v253 = 0;
      v208 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v208 = 0x500000001;
      *(_QWORD *)(v208 + 24) = 0;
      *(_QWORD *)(v208 + 32) = 0;
      *(_QWORD *)(v208 + 16) = 0;
      v252 = (WTF *)v208;
      v209 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v209 = 0x600000002;
      *(_QWORD *)(v209 + 8) = "result";
      *(_DWORD *)(v209 + 16) = 4;
      v250 = v207;
      v251 = (WTF::StringImpl *)v209;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v208 + 16), &v251, (const WTF::StringImpl *)&v250, v210, v211, v212, v213, v214, (uint64_t)&v261);
      if ((_BYTE)v263)
      {
        v222 = (uint64_t *)(v208 + 24);
        v223 = *(unsigned int *)(v208 + 36);
        if ((_DWORD)v223 == *(_DWORD *)(v208 + 32))
        {
          v245 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v222, v223 + 1, (unint64_t)&v251);
          v223 = *(unsigned int *)(v208 + 36);
          v246 = *(_QWORD *)(v208 + 24);
          v247 = *v245;
          if (*v245)
            *v247 += 2;
          *(_QWORD *)(v246 + 8 * v223) = v247;
        }
        else
        {
          v224 = *v222;
          v225 = v251;
          if (v251)
            *(_DWORD *)v251 += 2;
          *(_QWORD *)(v224 + 8 * v223) = v225;
        }
        *(_DWORD *)(v208 + 36) = v223 + 1;
      }
      v226 = v250;
      v250 = 0;
      if (v226)
      {
        if (*(_DWORD *)v226 == 1)
          WTF::JSONImpl::Value::operator delete(v226, v215, v216, v217, v218, v219, v220, v221);
        else
          --*(_DWORD *)v226;
      }
      v227 = v251;
      v251 = 0;
      if (v227)
      {
        if (*(_DWORD *)v227 == 2)
        {
          WTF::StringImpl::~StringImpl(v227, v215, v216, v217, v218, v219, v220, v221);
          WTF::fastFree(v237, v238, v239, v240, v241, v242, v243, v244);
        }
        else
        {
          *(_DWORD *)v227 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v252);
      v189 = v252;
      if (!v252)
        goto LABEL_106;
      v190 = *(_DWORD *)v252 - 1;
      if (*(_DWORD *)v252 != 1)
      {
LABEL_103:
        *(_DWORD *)v189 = v190;
        goto LABEL_106;
      }
      WTF::JSONImpl::Value::operator delete(v252, v81, v82, v83, v84, v85, v86, v87);
    }
LABEL_106:
    if (v254 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593978[v254])(&v261, &v253);
    goto LABEL_55;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, WTF::StringImpl **))(*(_QWORD *)v96 + 120))(v96, a2, &v260, &v259, &v258, &v257, &v256, &v255);
LABEL_55:
  v98 = v255;
  v255 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v258;
  v258 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v259;
  v259 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v260;
  v260 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::searchInResources(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  int v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD **v159;
  uint64_t v160;
  _DWORD *v161;
  uint64_t v162;
  WTF *v163;
  WTF::StringImpl *v164;
  WTF *v165;
  WTF::StringImpl *v166;
  int v167;
  __int16 v168;
  __int16 v169;
  WTF::StringImpl *v170;
  uint64_t (**v171)();
  WTF::StringImpl *v172;
  uint64_t v173;
  uint64_t (***v174)();
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x400000002;
  *(_QWORD *)(v8 + 8) = "text";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v166 = (WTF::StringImpl *)v8;
  v171 = &off_1E3593B90;
  v172 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v173 = 0;
  v174 = &v171;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v170, v6, v7, &v166, 1, (uint64_t)&v171);
  v17 = v174;
  if (v174 == &v171)
  {
    v17 = &v171;
  }
  else
  {
    if (!v174)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xD00000002;
  *(_QWORD *)(v20 + 8) = "caseSensitive";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v166 = (WTF::StringImpl *)v20;
  v171 = (uint64_t (**)())&unk_1E3593AB8;
  v172 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v173 = 0;
  v174 = &v171;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v166, 0, (uint64_t)&v171);
  v30 = v174;
  if (v174 == &v171)
  {
    v30 = &v171;
  }
  else
  {
    if (!v174)
      goto LABEL_13;
    v21 = 5;
  }
  (*v30)[v21]();
LABEL_13:
  v169 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (uint64_t)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x700000002;
  *(_QWORD *)(v33 + 8) = "isRegex";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v166 = (WTF::StringImpl *)v33;
  v171 = (uint64_t (**)())&unk_1E3593AB8;
  v172 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v173 = 0;
  v174 = &v171;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v31, v32, &v166, 0, (uint64_t)&v171);
  v43 = v174;
  if (v174 == &v171)
  {
    v43 = &v171;
  }
  else
  {
    if (!v174)
      goto LABEL_20;
    v34 = 5;
  }
  (*v43)[v34]();
LABEL_20:
  v168 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v44 + 36))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    v53 = (WTF::StringImpl *)v45;
    *(_QWORD *)v45 = 0x4400000002;
    *(_QWORD *)(v45 + 8) = "Some arguments of method 'Page.searchInResources' can't be processed";
    v54 = 4;
    *(_DWORD *)(v45 + 16) = 4;
    if (!*(_BYTE *)(v44 + 48))
    {
      *(_BYTE *)(v44 + 48) = *(_QWORD *)(v44 + 48);
      v54 = *(_DWORD *)v45 + 2;
    }
    LODWORD(v171) = 3;
    *(_DWORD *)v45 = v54;
    v172 = (WTF::StringImpl *)v45;
    v55 = *(unsigned int *)(v44 + 36);
    if ((_DWORD)v55 == *(_DWORD *)(v44 + 32))
    {
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44 + 24, v55 + 1, (unint64_t)&v171);
      v57 = *(unsigned int *)(v44 + 36);
      v58 = *(_QWORD *)(v44 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v172;
      *(_DWORD *)(v44 + 36) = v57 + 1;
      v172 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    else
    {
      v62 = *(_QWORD *)(v44 + 24) + 16 * v55;
      *(_DWORD *)v62 = 3;
      *(_QWORD *)(v62 + 8) = v45;
      *(_DWORD *)(v44 + 36) = v55 + 1;
    }
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
    goto LABEL_34;
  }
  v61 = *(_QWORD *)(a1 + 24);
  if (!v61)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 112))(&v166, *(_QWORD *)(a1 + 32), &v170, &v169, &v168);
    if (v167)
    {
      if (v167 != 1)
      {
        v162 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::PageBackendDispatcher::setShowPaintRects(v162);
        return;
      }
      v96 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v96 + 48))
        *(_BYTE *)(v96 + 48) = *(_QWORD *)(v96 + 48);
      LODWORD(v171) = 5;
      v97 = v166;
      if (v166)
        *(_DWORD *)v166 += 2;
      v172 = v97;
      v98 = *(unsigned int *)(v96 + 36);
      if ((_DWORD)v98 == *(_DWORD *)(v96 + 32))
      {
        v99 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v96 + 24, v98 + 1, (unint64_t)&v171);
        v100 = *(unsigned int *)(v96 + 36);
        v101 = *(_QWORD *)(v96 + 24) + 16 * v100;
        *(_DWORD *)v101 = *(_DWORD *)v99;
        v102 = *(_QWORD *)(v99 + 8);
        *(_QWORD *)(v99 + 8) = 0;
        *(_QWORD *)(v101 + 8) = v102;
        v103 = v172;
        *(_DWORD *)(v96 + 36) = v100 + 1;
        v172 = 0;
        if (!v103)
          goto LABEL_70;
        v104 = *(_DWORD *)v103 - 2;
        if (*(_DWORD *)v103 == 2)
        {
          WTF::StringImpl::~StringImpl(v103, v46, v47, v48, v49, v50, v51, v52);
          WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
          goto LABEL_70;
        }
        goto LABEL_67;
      }
      v150 = *(_QWORD *)(v96 + 24) + 16 * v98;
      *(_DWORD *)v150 = 5;
      *(_QWORD *)(v150 + 8) = v97;
      *(_DWORD *)(v96 + 36) = v98 + 1;
    }
    else
    {
      v121 = v166;
      v166 = 0;
      v122 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v122 = 0x500000001;
      *(_QWORD *)(v122 + 24) = 0;
      *(_QWORD *)(v122 + 32) = 0;
      *(_QWORD *)(v122 + 16) = 0;
      v165 = (WTF *)v122;
      v123 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v123 = 0x600000002;
      *(_QWORD *)(v123 + 8) = "result";
      *(_DWORD *)(v123 + 16) = 4;
      v163 = v121;
      v164 = (WTF::StringImpl *)v123;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v122 + 16), &v164, (const WTF::StringImpl *)&v163, v124, v125, v126, v127, v128, (uint64_t)&v171);
      if ((_BYTE)v173)
      {
        v136 = (uint64_t *)(v122 + 24);
        v137 = *(unsigned int *)(v122 + 36);
        if ((_DWORD)v137 == *(_DWORD *)(v122 + 32))
        {
          v159 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v164);
          v137 = *(unsigned int *)(v122 + 36);
          v160 = *(_QWORD *)(v122 + 24);
          v161 = *v159;
          if (*v159)
            *v161 += 2;
          *(_QWORD *)(v160 + 8 * v137) = v161;
        }
        else
        {
          v138 = *v136;
          v139 = v164;
          if (v164)
            *(_DWORD *)v164 += 2;
          *(_QWORD *)(v138 + 8 * v137) = v139;
        }
        *(_DWORD *)(v122 + 36) = v137 + 1;
      }
      v140 = v163;
      v163 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 1)
          WTF::JSONImpl::Value::operator delete(v140, v129, v130, v131, v132, v133, v134, v135);
        else
          --*(_DWORD *)v140;
      }
      v141 = v164;
      v164 = 0;
      if (v141)
      {
        if (*(_DWORD *)v141 == 2)
        {
          WTF::StringImpl::~StringImpl(v141, v129, v130, v131, v132, v133, v134, v135);
          WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
        }
        else
        {
          *(_DWORD *)v141 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v165);
      v103 = v165;
      if (!v165)
        goto LABEL_70;
      v104 = *(_DWORD *)v165 - 1;
      if (*(_DWORD *)v165 != 1)
      {
LABEL_67:
        *(_DWORD *)v103 = v104;
        goto LABEL_70;
      }
      WTF::JSONImpl::Value::operator delete(v165, v46, v47, v48, v49, v50, v51, v52);
    }
LABEL_70:
    if (v167 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593A28[v167])(&v171, &v166);
    goto LABEL_34;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *, __int16 *))(*(_QWORD *)v61 + 128))(v61, a2, &v170, &v169, &v168);
LABEL_34:
  v63 = v170;
  v170 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::setShowPaintRects(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "result";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4400000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Page.setShowPaintRects' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 136))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 120))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::PageBackendDispatcher::setEmulatedMedia(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x500000002;
  *(_QWORD *)(v7 + 8) = "media";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4300000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Page.setEmulatedMedia' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 144))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 128))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::snapshotNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF *v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD **v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  WTF *v120;
  WTF::StringImpl *v121;
  int v122;
  WTF *v123;
  uint64_t (**v124)();
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t (***v127)();
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "nodeId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v121 = (WTF::StringImpl *)v7;
  v124 = &off_1E3593B00;
  v125 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v126 = 0;
  v127 = &v124;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v121, 1, (uint64_t)&v124);
  v17 = v127;
  if (v127 == &v124)
  {
    v17 = &v124;
  }
  else
  {
    if (!v127)
      goto LABEL_6;
    v8 = 5;
  }
  (*v17)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3F00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Page.snapshotNode' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v124) = 3;
    *(_DWORD *)v19 = v28;
    v125 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v124);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v125;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v125 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (BYTE4(v16))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 152))(v35, a2, v16);
      return;
    }
LABEL_68:
    __break(1u);
  }
  if (!BYTE4(v16))
    goto LABEL_68;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 136))(&v121, *(_QWORD *)(a1 + 32), v16);
  if (v122)
  {
    if (v122 != 1)
    {
      v118 = std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::PageBackendDispatcher::snapshotRect(v118);
      return;
    }
    v45 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v45 + 48))
      *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
    LODWORD(v124) = 5;
    v46 = v121;
    if (v121)
      *(_DWORD *)v121 += 2;
    v125 = v46;
    v47 = *(unsigned int *)(v45 + 36);
    if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
    {
      v98 = *(_QWORD *)(v45 + 24) + 16 * v47;
      *(_DWORD *)v98 = 5;
      *(_QWORD *)(v98 + 8) = v46;
      *(_DWORD *)(v45 + 36) = v47 + 1;
      goto LABEL_60;
    }
    v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v124);
    v56 = *(unsigned int *)(v45 + 36);
    v57 = *(_QWORD *)(v45 + 24) + 16 * v56;
    *(_DWORD *)v57 = *(_DWORD *)v48;
    v58 = *(_QWORD *)(v48 + 8);
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)(v57 + 8) = v58;
    v59 = v125;
    *(_DWORD *)(v45 + 36) = v56 + 1;
    v125 = 0;
    if (!v59)
      goto LABEL_60;
    if (*(_DWORD *)v59 != 2)
    {
      *(_DWORD *)v59 -= 2;
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  v68 = v121;
  v121 = 0;
  v69 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v69 = 0x500000001;
  *(_QWORD *)(v69 + 16) = 0;
  *(_QWORD *)(v69 + 24) = 0;
  *(_QWORD *)(v69 + 32) = 0;
  v120 = (WTF *)v69;
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0x700000002;
  *(_QWORD *)(v70 + 8) = "dataURL";
  *(_DWORD *)(v70 + 16) = 4;
  v119 = (WTF::StringImpl *)v70;
  v71 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v71 = 0x400000001;
  *((_QWORD *)v71 + 1) = v68;
  if (v68)
    *(_DWORD *)v68 += 2;
  v123 = v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v69 + 16), (WTF::AtomStringImpl *)&v119, (const WTF::StringImpl *)&v123, v72, v73, v74, v75, v76, (uint64_t)&v124);
  if ((_BYTE)v126)
  {
    v84 = (uint64_t *)(v69 + 24);
    v85 = *(unsigned int *)(v69 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v69 + 32))
    {
      v115 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v119);
      v85 = *(unsigned int *)(v69 + 36);
      v116 = *(_QWORD *)(v69 + 24);
      v117 = *v115;
      if (*v115)
        *v117 += 2;
      *(_QWORD *)(v116 + 8 * v85) = v117;
    }
    else
    {
      v86 = *v84;
      v87 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v69 + 36) = v85 + 1;
  }
  v88 = v123;
  v123 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v119;
  v119 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v120);
  if (!v120)
    goto LABEL_52;
  if (*(_DWORD *)v120 != 1)
  {
    --*(_DWORD *)v120;
LABEL_52:
    if (!v68)
      goto LABEL_60;
    goto LABEL_53;
  }
  WTF::JSONImpl::Value::operator delete(v120, v49, v50, v51, v52, v53, v54, v55);
  if (v68)
  {
LABEL_53:
    if (*(_DWORD *)v68 != 2)
    {
      *(_DWORD *)v68 -= 2;
      goto LABEL_60;
    }
    v59 = v68;
LABEL_59:
    WTF::StringImpl::~StringImpl(v59, v49, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
  }
LABEL_60:
  if (v122 != -1)
    ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v122])(&v124, &v121);
}

void Inspector::PageBackendDispatcher::snapshotRect(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (***v55)();
  uint64_t v56;
  const WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (***v67)();
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  WTF *v182;
  WTF::StringImpl *v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _DWORD **v227;
  uint64_t v228;
  _DWORD *v229;
  uint64_t v231;
  WTF::StringImpl *v232;
  WTF *v233;
  WTF::StringImpl *v234;
  int v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF *v238;
  uint64_t (**v239)();
  WTF::StringImpl *v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x100000002;
  *(_QWORD *)(v7 + 8) = "x";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v234 = (WTF::StringImpl *)v7;
  v239 = &off_1E3593B00;
  v240 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v241 = 0;
  v242 = (uint64_t *)&v239;
  v231 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v234, 1, (uint64_t)&v239);
  v16 = (uint64_t (***)())v242;
  if (v242 == (uint64_t *)&v239)
  {
    v16 = &v239;
  }
  else
  {
    if (!v242)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x100000002;
  *(_QWORD *)(v19 + 8) = "y";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  v234 = (WTF::StringImpl *)v19;
  v239 = &off_1E3593B00;
  v240 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v241 = 0;
  v242 = (uint64_t *)&v239;
  v28 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v17, v18, &v234, 1, (uint64_t)&v239);
  v29 = (uint64_t (***)())v242;
  if (v242 == (uint64_t *)&v239)
  {
    v29 = &v239;
  }
  else
  {
    if (!v242)
      goto LABEL_13;
    v20 = 5;
  }
  (*v29)[v20]();
LABEL_13:
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x500000002;
  *(_QWORD *)(v32 + 8) = "width";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v234 = (WTF::StringImpl *)v32;
  v239 = &off_1E3593B00;
  v240 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v241 = 0;
  v242 = (uint64_t *)&v239;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v30, v31, &v234, 1, (uint64_t)&v239);
  v42 = (uint64_t (***)())v242;
  if (v242 == (uint64_t *)&v239)
  {
    v42 = &v239;
  }
  else
  {
    if (!v242)
      goto LABEL_20;
    v33 = 5;
  }
  (*v42)[v33]();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = *a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x600000002;
  *(_QWORD *)(v45 + 8) = "height";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v234 = (WTF::StringImpl *)v45;
  v239 = &off_1E3593B00;
  v240 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v241 = 0;
  v242 = (uint64_t *)&v239;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v43, v44, &v234, 1, (uint64_t)&v239);
  v55 = (uint64_t (***)())v242;
  if (v242 == (uint64_t *)&v239)
  {
    v55 = &v239;
  }
  else
  {
    if (!v242)
      goto LABEL_27;
    v46 = 5;
  }
  (*v55)[v46]();
LABEL_27:
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  v57 = (const WTF::StringImpl *)*a3;
  v58 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v58 = 0x1000000002;
  *(_QWORD *)(v58 + 8) = "coordinateSystem";
  v59 = 4;
  *(_DWORD *)(v58 + 16) = 4;
  v234 = (WTF::StringImpl *)v58;
  v239 = &off_1E3593B90;
  v240 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v241 = 0;
  v242 = (uint64_t *)&v239;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v237, v56, v57, &v234, 1, (uint64_t)&v239);
  v67 = (uint64_t (***)())v242;
  if (v242 == (uint64_t *)&v239)
  {
    v67 = &v239;
  }
  else
  {
    if (!v242)
      goto LABEL_34;
    v59 = 5;
  }
  (*v67)[v59]();
LABEL_34:
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, v60, v61, v62, v63, v64, v65, v66);
    WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
  v68 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v68 + 36))
  {
    v69 = WTF::fastCompactMalloc((WTF *)0x20);
    v77 = (WTF::StringImpl *)v69;
    *(_QWORD *)v69 = 0x3F00000002;
    *(_QWORD *)(v69 + 8) = "Some arguments of method 'Page.snapshotRect' can't be processed";
    v78 = 4;
    *(_DWORD *)(v69 + 16) = 4;
    if (!*(_BYTE *)(v68 + 48))
    {
      *(_BYTE *)(v68 + 48) = *(_QWORD *)(v68 + 48);
      v78 = *(_DWORD *)v69 + 2;
    }
    LODWORD(v239) = 3;
    *(_DWORD *)v69 = v78;
    v240 = (WTF::StringImpl *)v69;
    v79 = *(unsigned int *)(v68 + 36);
    if ((_DWORD)v79 == *(_DWORD *)(v68 + 32))
    {
      v80 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v68 + 24, v79 + 1, (unint64_t)&v239);
      v81 = *(unsigned int *)(v68 + 36);
      v82 = *(_QWORD *)(v68 + 24) + 16 * v81;
      *(_DWORD *)v82 = *(_DWORD *)v80;
      v83 = *(_QWORD *)(v80 + 8);
      *(_QWORD *)(v80 + 8) = 0;
      *(_QWORD *)(v82 + 8) = v83;
      v84 = v240;
      *(_DWORD *)(v68 + 36) = v81 + 1;
      v240 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
        {
          WTF::StringImpl::~StringImpl(v84, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
        }
        else
        {
          *(_DWORD *)v84 -= 2;
        }
      }
    }
    else
    {
      v86 = *(_QWORD *)(v68 + 24) + 16 * v79;
      *(_DWORD *)v86 = 3;
      *(_QWORD *)(v86 + 8) = v69;
      *(_DWORD *)(v68 + 36) = v79 + 1;
    }
    if (*(_DWORD *)v77 != 2)
    {
      *(_DWORD *)v77 -= 2;
      goto LABEL_52;
    }
    v137 = v77;
    goto LABEL_65;
  }
  v85 = *(_QWORD *)(a1 + 24);
  if (v85)
  {
    if (BYTE4(v231) && BYTE4(v28) && BYTE4(v41) && BYTE4(v54))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 160))(v85, a2);
      goto LABEL_52;
    }
LABEL_132:
    __break(1u);
  }
  v136 = v237;
  if (WTF::equalInternal<unsigned char>((uint64_t)v237, (unint64_t)"Viewport", 8)
    || WTF::equalInternal<unsigned char>((uint64_t)v136, (unint64_t)"Page", 4))
  {
    if (!BYTE4(v231) || !BYTE4(v28) || !BYTE4(v41) || !BYTE4(v54))
      goto LABEL_132;
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 144))(&v234);
    if (v235)
    {
      if (v235 == 1)
      {
        v146 = *(_QWORD *)(a1 + 16);
        if (!*(_BYTE *)(v146 + 48))
          *(_BYTE *)(v146 + 48) = *(_QWORD *)(v146 + 48);
        LODWORD(v239) = 5;
        v147 = v234;
        if (v234)
          *(_DWORD *)v234 += 2;
        v240 = v147;
        v148 = *(unsigned int *)(v146 + 36);
        if ((_DWORD)v148 != *(_DWORD *)(v146 + 32))
        {
          v192 = *(_QWORD *)(v146 + 24) + 16 * v148;
          *(_DWORD *)v192 = 5;
          *(_QWORD *)(v192 + 8) = v147;
          *(_DWORD *)(v146 + 36) = v148 + 1;
          goto LABEL_122;
        }
        v149 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v146 + 24, v148 + 1, (unint64_t)&v239);
        v150 = *(unsigned int *)(v146 + 36);
        v151 = *(_QWORD *)(v146 + 24) + 16 * v150;
        *(_DWORD *)v151 = *(_DWORD *)v149;
        v152 = *(_QWORD *)(v149 + 8);
        *(_QWORD *)(v149 + 8) = 0;
        *(_QWORD *)(v151 + 8) = v152;
        v153 = v240;
        *(_DWORD *)(v146 + 36) = v150 + 1;
        v240 = 0;
        if (!v153)
          goto LABEL_122;
        if (*(_DWORD *)v153 != 2)
        {
          *(_DWORD *)v153 -= 2;
          goto LABEL_122;
        }
        goto LABEL_121;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_134:
      __break(0xC471u);
      return;
    }
    v162 = v234;
    v234 = 0;
    v163 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v163 = 0x500000001;
    *(_QWORD *)(v163 + 16) = 0;
    *(_QWORD *)(v163 + 24) = 0;
    *(_QWORD *)(v163 + 32) = 0;
    v233 = (WTF *)v163;
    v164 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v164 = 0x700000002;
    *(_QWORD *)(v164 + 8) = "dataURL";
    *(_DWORD *)(v164 + 16) = 4;
    v232 = (WTF::StringImpl *)v164;
    v165 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v165 = 0x400000001;
    *((_QWORD *)v165 + 1) = v162;
    if (v162)
      *(_DWORD *)v162 += 2;
    v238 = v165;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v163 + 16), (WTF::AtomStringImpl *)&v232, (const WTF::StringImpl *)&v238, v166, v167, v168, v169, v170, (uint64_t)&v239);
    if ((_BYTE)v241)
    {
      v178 = (uint64_t *)(v163 + 24);
      v179 = *(unsigned int *)(v163 + 36);
      if ((_DWORD)v179 == *(_DWORD *)(v163 + 32))
      {
        v227 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v178, v179 + 1, (unint64_t)&v232);
        v179 = *(unsigned int *)(v163 + 36);
        v228 = *(_QWORD *)(v163 + 24);
        v229 = *v227;
        if (*v227)
          *v229 += 2;
        *(_QWORD *)(v228 + 8 * v179) = v229;
      }
      else
      {
        v180 = *v178;
        v181 = v232;
        if (v232)
          *(_DWORD *)v232 += 2;
        *(_QWORD *)(v180 + 8 * v179) = v181;
      }
      *(_DWORD *)(v163 + 36) = v179 + 1;
    }
    v182 = v238;
    v238 = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 1)
        WTF::JSONImpl::Value::operator delete(v182, v171, v172, v173, v174, v175, v176, v177);
      else
        --*(_DWORD *)v182;
    }
    v183 = v232;
    v232 = 0;
    if (v183)
    {
      if (*(_DWORD *)v183 == 2)
      {
        WTF::StringImpl::~StringImpl(v183, v171, v172, v173, v174, v175, v176, v177);
        WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
      }
      else
      {
        *(_DWORD *)v183 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v233);
    if (v233)
    {
      if (*(_DWORD *)v233 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v233, v70, v71, v72, v73, v74, v75, v76);
        if (!v162)
        {
LABEL_122:
          if (v235 != -1)
            ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E35937C8[v235])(&v239, &v234);
          goto LABEL_52;
        }
        goto LABEL_100;
      }
      --*(_DWORD *)v233;
    }
    if (!v162)
      goto LABEL_122;
LABEL_100:
    if (*(_DWORD *)v162 != 2)
    {
      *(_DWORD *)v162 -= 2;
      goto LABEL_122;
    }
    v153 = v162;
LABEL_121:
    WTF::StringImpl::~StringImpl(v153, v70, v71, v72, v73, v74, v75, v76);
    WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
    goto LABEL_122;
  }
  v184 = *(_QWORD *)(a1 + 16);
  if (v136)
    *(_DWORD *)v136 += 2;
  v236 = v136;
  v239 = (uint64_t (**)())"Unknown coordinateSystem: ";
  v240 = (WTF::StringImpl *)27;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v239, (uint64_t *)&v236, (int **)&v234);
  v185 = v234;
  if (!v234)
    goto LABEL_134;
  if (!*(_BYTE *)(v184 + 48))
    *(_BYTE *)(v184 + 48) = *(_QWORD *)(v184 + 48);
  LODWORD(v239) = 5;
  *(_DWORD *)v185 += 2;
  v240 = v185;
  v186 = *(unsigned int *)(v184 + 36);
  if ((_DWORD)v186 == *(_DWORD *)(v184 + 32))
  {
    v187 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v184 + 24, v186 + 1, (unint64_t)&v239);
    v188 = *(unsigned int *)(v184 + 36);
    v189 = *(_QWORD *)(v184 + 24) + 16 * v188;
    *(_DWORD *)v189 = *(_DWORD *)v187;
    v190 = *(_QWORD *)(v187 + 8);
    *(_QWORD *)(v187 + 8) = 0;
    *(_QWORD *)(v189 + 8) = v190;
    v191 = v240;
    *(_DWORD *)(v184 + 36) = v188 + 1;
    v240 = 0;
    if (v191)
    {
      if (*(_DWORD *)v191 == 2)
      {
        WTF::StringImpl::~StringImpl(v191, v70, v71, v72, v73, v74, v75, v76);
        WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
      }
      else
      {
        *(_DWORD *)v191 -= 2;
      }
    }
  }
  else
  {
    v193 = *(_QWORD *)(v184 + 24) + 16 * v186;
    *(_DWORD *)v193 = 5;
    *(_QWORD *)(v193 + 8) = v185;
    *(_DWORD *)(v184 + 36) = v186 + 1;
  }
  v194 = v234;
  v234 = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
    {
      WTF::StringImpl::~StringImpl(v194, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
    else
    {
      *(_DWORD *)v194 -= 2;
    }
  }
  v137 = v236;
  v236 = 0;
  if (!v137)
    goto LABEL_52;
  if (*(_DWORD *)v137 == 2)
  {
LABEL_65:
    WTF::StringImpl::~StringImpl(v137, v70, v71, v72, v73, v74, v75, v76);
    WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    goto LABEL_52;
  }
  *(_DWORD *)v137 -= 2;
LABEL_52:
  v87 = v237;
  v237 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
}

void Inspector::PageBackendDispatcher::archive(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD **v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  int v66;
  WTF *v67;
  int v68;
  WTF::StringImpl *v69;
  char v70;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 168))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 152))(&v65);
  if (v66)
  {
    if (v66 != 1)
    {
      v62 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::Setting>(v62);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v68 = 5;
    v6 = v65;
    if (v65)
      *(_DWORD *)v65 += 2;
    v69 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 != *(_DWORD *)(v5 + 32))
    {
      v42 = *(_QWORD *)(v5 + 24) + 16 * v7;
      *(_DWORD *)v42 = 5;
      *(_QWORD *)(v42 + 8) = v6;
      *(_DWORD *)(v5 + 36) = v7 + 1;
      goto LABEL_37;
    }
    v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v68);
    v16 = *(unsigned int *)(v5 + 36);
    v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
    *(_DWORD *)v17 = *(_DWORD *)v8;
    v18 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v17 + 8) = v18;
    v19 = v69;
    *(_DWORD *)(v5 + 36) = v16 + 1;
    v69 = 0;
    if (!v19)
      goto LABEL_37;
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v20 = v65;
  v65 = 0;
  v21 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v21 = 0x500000001;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  v64 = (WTF *)v21;
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x400000002;
  *(_QWORD *)(v22 + 8) = "data";
  *(_DWORD *)(v22 + 16) = 4;
  v63 = (WTF::StringImpl *)v22;
  v23 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v23 = 0x400000001;
  *((_QWORD *)v23 + 1) = v20;
  if (v20)
    *(_DWORD *)v20 += 2;
  v67 = v23;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v21 + 16), (WTF::AtomStringImpl *)&v63, (const WTF::StringImpl *)&v67, v24, v25, v26, v27, v28, (uint64_t)&v68);
  if (v70)
  {
    v36 = (uint64_t *)(v21 + 24);
    v37 = *(unsigned int *)(v21 + 36);
    if ((_DWORD)v37 == *(_DWORD *)(v21 + 32))
    {
      v59 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v63);
      v37 = *(unsigned int *)(v21 + 36);
      v60 = *(_QWORD *)(v21 + 24);
      v61 = *v59;
      if (*v59)
        *v61 += 2;
      *(_QWORD *)(v60 + 8 * v37) = v61;
    }
    else
    {
      v38 = *v36;
      v39 = v63;
      if (v63)
        *(_DWORD *)v63 += 2;
      *(_QWORD *)(v38 + 8 * v37) = v39;
    }
    *(_DWORD *)(v21 + 36) = v37 + 1;
  }
  v40 = v67;
  v67 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::JSONImpl::Value::operator delete(v40, v29, v30, v31, v32, v33, v34, v35);
    else
      --*(_DWORD *)v40;
  }
  v41 = v63;
  v63 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v64);
  if (!v64)
    goto LABEL_30;
  if (*(_DWORD *)v64 != 1)
  {
    --*(_DWORD *)v64;
LABEL_30:
    if (!v20)
      goto LABEL_37;
    goto LABEL_31;
  }
  WTF::JSONImpl::Value::operator delete(v64, v9, v10, v11, v12, v13, v14, v15);
  if (v20)
  {
LABEL_31:
    if (*(_DWORD *)v20 != 2)
    {
      *(_DWORD *)v20 -= 2;
      goto LABEL_37;
    }
    v19 = v20;
LABEL_36:
    WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
LABEL_37:
  if (v66 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E35937C8[v66])(&v68, &v65);
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::Setting>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000CELL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"PrivateClickMeasurementDebugModeEnabled", 39))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"AuthorAndUserStylesEnabled", 26))
    {
      return 0x1000000CFLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ICECandidateFilteringEnabled", 28))
    {
      return 0x1000000D0;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ITPDebugModeEnabled", 19))
    {
      return 0x1000000D1;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ImagesEnabled", 13))
    {
      return 0x1000000D2;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"MediaCaptureRequiresSecureConnection", 36))
    {
      return 0x1000000D3;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"MockCaptureDevicesEnabled", 25))
    {
      return 0x1000000D4;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"NeedsSiteSpecificQuirks", 23))
    {
      return 0x1000000D5;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ScriptEnabled", 13))
    {
      return 0x1000000D6;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ShowDebugBorders", 16))
    {
      return 0x1000000D7;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"ShowRepaintCounter", 18))
    {
      return 0x1000000D8;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"WebSecurityEnabled", 18))
    {
      return 0x1000000D9;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::UserPreferenceName>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000DALL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"PrefersReducedMotion", 20))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"PrefersContrast", 15))
    {
      return 0x1000000DBLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"PrefersColorScheme", 18))
    {
      return 0x1000000DCLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::UserPreferenceValue>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000DDLL;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"NoPreference", 12))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Reduce", 6))
    {
      return 0x1000000DELL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"More", 4))
    {
      return 0x1000000DFLL;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Light", 5))
    {
      return 0x1000000E0;
    }
    else if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Dark", 4))
    {
      return 0x1000000E1;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t Inspector::Protocol::Helpers::parseEnumValueFromString<Inspector::Protocol::Page::CoordinateSystem>(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0x1000000E2;
  if (!WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Viewport", 8))
  {
    if (WTF::equalInternal<unsigned char>(*a1, (unint64_t)"Page", 4))
      return 0x1000000E3;
    else
      return 0;
  }
  return v2;
}

void Inspector::RuntimeBackendDispatcher::create(Inspector::RuntimeBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591868;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x700000002;
  *(_QWORD *)(v8 + 8) = "Runtime";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::RuntimeBackendDispatcher *Inspector::RuntimeBackendDispatcher::RuntimeBackendDispatcher(Inspector::RuntimeBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::RuntimeBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::RuntimeBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591868;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Runtime";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::RuntimeBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591868;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "Runtime";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::RuntimeBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  void (*v28)(_QWORD *, uint64_t, WTF **);
  uint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  BOOL v41;
  int v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  WTF::AtomStringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  int v114;
  WTF::StringImpl **v115;
  const WTF::StringImpl *v116;
  unsigned int v117;
  unsigned int v118;
  char *v119;
  int i;
  unsigned int v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _OWORD *v306;
  char *v307;
  uint64_t v308;
  WTF::StringImpl *v309;
  WTF *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  void (*v315)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v316;
  WTF::StringImpl *v317;
  void (*v318)(_QWORD *, uint64_t, const WTF::StringImpl **);
  uint64_t v319;
  WTF::StringImpl *v320;
  void (*v321)(_QWORD *, uint64_t, const WTF::StringImpl **);
  uint64_t v322;
  WTF::StringImpl *v323;
  void (*v324)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v325;
  WTF::StringImpl *v326;
  void (*v327)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v328;
  WTF::StringImpl *v329;
  void (*v330)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v331;
  WTF::StringImpl *v332;
  void (*v333)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v334;
  WTF::StringImpl *v335;
  void (*v336)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v337;
  WTF::StringImpl *v338;
  void (*v339)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v340;
  WTF::StringImpl *v341;
  void (*v342)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v343;
  WTF::StringImpl *v344;
  void (*v345)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v346;
  WTF::StringImpl *v347;
  void (*v348)(uint64_t, uint64_t);
  uint64_t v349;
  WTF::StringImpl *v350;
  void (*v351)(uint64_t, uint64_t);
  uint64_t v352;
  WTF::StringImpl *v353;
  void (*v354)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v355;
  WTF::StringImpl *v356;
  void (*v357)(uint64_t, uint64_t);
  uint64_t v358;
  WTF::StringImpl *v359;
  void (*v360)(uint64_t, uint64_t);
  uint64_t v361;
  WTF::StringImpl *v362;
  void (*v363)(uint64_t, uint64_t);
  uint64_t v364;
  WTF::StringImpl *v365;
  void (*v366)(uint64_t, uint64_t);
  uint64_t v367;
  WTF::StringImpl *v368;
  void (*v369)(uint64_t, uint64_t, const WTF::StringImpl **);
  uint64_t v370;
  uint64_t v371;

  v371 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v311 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v311, v9, &v310);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v17 = &unk_1ECF58000;
  if ((byte_1ECF587FC & 1) != 0)
    goto LABEL_4;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x500000002;
  *(_QWORD *)(v86 + 8) = "parse";
  *(_DWORD *)(v86 + 16) = 4;
  v311 = (WTF::StringImpl *)v86;
  v312 = (WTF::StringImpl *)Inspector::RuntimeBackendDispatcher::parse;
  v313 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x800000002;
  *(_QWORD *)(v87 + 8) = "evaluate";
  *(_DWORD *)(v87 + 16) = 4;
  v314 = (WTF::StringImpl *)v87;
  v315 = Inspector::RuntimeBackendDispatcher::evaluate;
  v316 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0xC00000002;
  *(_QWORD *)(v88 + 8) = "awaitPromise";
  *(_DWORD *)(v88 + 16) = 4;
  v317 = (WTF::StringImpl *)v88;
  v318 = Inspector::RuntimeBackendDispatcher::awaitPromise;
  v319 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0xE00000002;
  *(_QWORD *)(v89 + 8) = "callFunctionOn";
  *(_DWORD *)(v89 + 16) = 4;
  v320 = (WTF::StringImpl *)v89;
  v321 = Inspector::RuntimeBackendDispatcher::callFunctionOn;
  v322 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0xA00000002;
  *(_QWORD *)(v90 + 8) = "getPreview";
  *(_DWORD *)(v90 + 16) = 4;
  v323 = (WTF::StringImpl *)v90;
  v324 = Inspector::RuntimeBackendDispatcher::getPreview;
  v325 = 0;
  v91 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v91 = 0xD00000002;
  *(_QWORD *)(v91 + 8) = "getProperties";
  *(_DWORD *)(v91 + 16) = 4;
  v326 = (WTF::StringImpl *)v91;
  v327 = Inspector::RuntimeBackendDispatcher::getProperties;
  v328 = 0;
  v92 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v92 = 0x1800000002;
  *(_QWORD *)(v92 + 8) = "getDisplayableProperties";
  *(_DWORD *)(v92 + 16) = 4;
  v329 = (WTF::StringImpl *)v92;
  v330 = Inspector::RuntimeBackendDispatcher::getDisplayableProperties;
  v331 = 0;
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x1400000002;
  *(_QWORD *)(v93 + 8) = "getCollectionEntries";
  *(_DWORD *)(v93 + 16) = 4;
  v332 = (WTF::StringImpl *)v93;
  v333 = Inspector::RuntimeBackendDispatcher::getCollectionEntries;
  v334 = 0;
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0xA00000002;
  *(_QWORD *)(v94 + 8) = "saveResult";
  *(_DWORD *)(v94 + 16) = 4;
  v335 = (WTF::StringImpl *)v94;
  v336 = Inspector::RuntimeBackendDispatcher::saveResult;
  v337 = 0;
  v95 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v95 = 0x1300000002;
  *(_QWORD *)(v95 + 8) = "setSavedResultAlias";
  *(_DWORD *)(v95 + 16) = 4;
  v338 = (WTF::StringImpl *)v95;
  v339 = Inspector::RuntimeBackendDispatcher::setSavedResultAlias;
  v340 = 0;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0xD00000002;
  *(_QWORD *)(v96 + 8) = "releaseObject";
  *(_DWORD *)(v96 + 16) = 4;
  v341 = (WTF::StringImpl *)v96;
  v342 = Inspector::RuntimeBackendDispatcher::releaseObject;
  v343 = 0;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0x1200000002;
  *(_QWORD *)(v97 + 8) = "releaseObjectGroup";
  *(_DWORD *)(v97 + 16) = 4;
  v344 = (WTF::StringImpl *)v97;
  v345 = Inspector::RuntimeBackendDispatcher::releaseObjectGroup;
  v346 = 0;
  v98 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v98 = 0x600000002;
  *(_QWORD *)(v98 + 8) = "enable";
  *(_DWORD *)(v98 + 16) = 4;
  v347 = (WTF::StringImpl *)v98;
  v348 = Inspector::RuntimeBackendDispatcher::enable;
  v349 = 0;
  v99 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v99 = 0x700000002;
  *(_QWORD *)(v99 + 8) = "disable";
  *(_DWORD *)(v99 + 16) = 4;
  v350 = (WTF::StringImpl *)v99;
  v351 = Inspector::RuntimeBackendDispatcher::disable;
  v352 = 0;
  v100 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v100 = 0x2400000002;
  *(_QWORD *)(v100 + 8) = "getRuntimeTypesForVariablesAtOffsets";
  *(_DWORD *)(v100 + 16) = 4;
  v353 = (WTF::StringImpl *)v100;
  v354 = Inspector::RuntimeBackendDispatcher::getRuntimeTypesForVariablesAtOffsets;
  v355 = 0;
  v101 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v101 = 0x1200000002;
  *(_QWORD *)(v101 + 8) = "enableTypeProfiler";
  *(_DWORD *)(v101 + 16) = 4;
  v356 = (WTF::StringImpl *)v101;
  v357 = Inspector::RuntimeBackendDispatcher::enableTypeProfiler;
  v358 = 0;
  v102 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v102 = 0x1300000002;
  *(_QWORD *)(v102 + 8) = "disableTypeProfiler";
  *(_DWORD *)(v102 + 16) = 4;
  v359 = (WTF::StringImpl *)v102;
  v360 = Inspector::RuntimeBackendDispatcher::disableTypeProfiler;
  v361 = 0;
  v103 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v103 = 0x1900000002;
  *(_QWORD *)(v103 + 8) = "enableControlFlowProfiler";
  *(_DWORD *)(v103 + 16) = 4;
  v362 = (WTF::StringImpl *)v103;
  v363 = Inspector::RuntimeBackendDispatcher::enableControlFlowProfiler;
  v364 = 0;
  v104 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v104 = 0x1A00000002;
  *(_QWORD *)(v104 + 8) = "disableControlFlowProfiler";
  *(_DWORD *)(v104 + 16) = 4;
  v365 = (WTF::StringImpl *)v104;
  v366 = Inspector::RuntimeBackendDispatcher::disableControlFlowProfiler;
  v367 = 0;
  v105 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v105 = 0xE00000002;
  *(_QWORD *)(v105 + 8) = "getBasicBlocks";
  *(_DWORD *)(v105 + 16) = 4;
  v368 = (WTF::StringImpl *)v105;
  v369 = Inspector::RuntimeBackendDispatcher::getBasicBlocks;
  v370 = 0;
  v106 = (_OWORD *)WTF::fastMalloc((WTF *)0x610);
  bzero(v106 + 1, 0x600uLL);
  v308 = 0;
  v309 = (WTF::StringImpl *)(v106 + 1);
  *v106 = xmmword_199156BB0;
  do
  {
    v113 = v309;
    if (v309
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v309, 8u), (v113 = v309) != 0))
    {
      v114 = *((_DWORD *)v113 - 2);
    }
    else
    {
      v114 = 0;
    }
    v115 = &v311 + 3 * v308;
    v116 = *v115;
    v117 = *((_DWORD *)*v115 + 4);
    if (v117 < 0x100)
      v118 = WTF::StringImpl::hashSlowCase(*v115);
    else
      v118 = v117 >> 8;
    v119 = 0;
    v306 = v115 + 1;
    for (i = 1; ; ++i)
    {
      v121 = v118 & v114;
      v122 = (WTF *)*((_QWORD *)v113 + 3 * (v118 & v114));
      if (v122 == (WTF *)-1)
      {
        v119 = (char *)v113 + 24 * v121;
        goto LABEL_70;
      }
      if (!v122)
        break;
      if (WTF::equal(v122, v116, v11))
        goto LABEL_86;
LABEL_70:
      v118 = i + v121;
    }
    v307 = (char *)v113 + 24 * v121;
    if (v119)
    {
      *(_QWORD *)v119 = 0;
      *((_QWORD *)v119 + 1) = 0;
      *((_QWORD *)v119 + 2) = 0;
      --*((_DWORD *)v113 - 4);
      v307 = v119;
    }
    if (v116)
      *(_DWORD *)v116 += 2;
    *(_QWORD *)v307 = v116;
    *(_OWORD *)(v307 + 8) = *v306;
    v123 = v309;
    if (v309)
      v124 = *((_DWORD *)v309 - 3) + 1;
    else
      v124 = 1;
    *((_DWORD *)v309 - 3) = v124;
    v125 = (*((_DWORD *)v123 - 4) + v124);
    v126 = *((unsigned int *)v123 - 1);
    if (v126 > 0x400)
    {
      if (v126 <= 2 * v125)
      {
LABEL_81:
        v127 = (_DWORD)v126 << (6 * v124 >= (2 * v126));
        goto LABEL_85;
      }
    }
    else if (3 * v126 <= 4 * v125)
    {
      if ((_DWORD)v126)
        goto LABEL_81;
      v127 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v309, v127);
    }
LABEL_86:
    ++v308;
  }
  while (v308 != 20);
  v128 = v309;
  v309 = 0;
  qword_1ECF58860 = (uint64_t)v128;
  v129 = v368;
  v368 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v365;
  v365 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v131 = v362;
  v362 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
    {
      WTF::StringImpl::~StringImpl(v131, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
    }
    else
    {
      *(_DWORD *)v131 -= 2;
    }
  }
  v132 = v359;
  v359 = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
    {
      WTF::StringImpl::~StringImpl(v132, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
    }
    else
    {
      *(_DWORD *)v132 -= 2;
    }
  }
  v133 = v356;
  v356 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  v134 = v353;
  v353 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  v135 = v350;
  v350 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = v347;
  v347 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  v137 = v344;
  v344 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  v138 = v341;
  v341 = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v139 = v338;
  v338 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = v335;
  v335 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  v141 = v332;
  v332 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
  v142 = v329;
  v329 = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
    {
      WTF::StringImpl::~StringImpl(v142, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
    }
    else
    {
      *(_DWORD *)v142 -= 2;
    }
  }
  v143 = v326;
  v326 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v258, v259, v260, v261, v262, v263, v264, v265);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = v323;
  v323 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v266, v267, v268, v269, v270, v271, v272, v273);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = v320;
  v320 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
    {
      WTF::StringImpl::~StringImpl(v317, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v282, v283, v284, v285, v286, v287, v288, v289);
    }
    else
    {
      *(_DWORD *)v317 -= 2;
    }
  }
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
    {
      WTF::StringImpl::~StringImpl(v314, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v290, v291, v292, v293, v294, v295, v296, v297);
    }
    else
    {
      *(_DWORD *)v314 -= 2;
    }
  }
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
    {
      WTF::StringImpl::~StringImpl(v311, v107, (uint64_t)v11, v108, v109, v110, v111, v112);
      WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
    }
    else
    {
      *(_DWORD *)v311 -= 2;
    }
  }
  byte_1ECF587FC = 1;
  v17 = (_QWORD *)&unk_1ECF58000;
LABEL_4:
  v18 = v17[268];
  if (!v18)
    goto LABEL_20;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)*a3 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v21 = v20 >> 8;
  v22 = 0;
  while (2)
  {
    v23 = v21 & v19;
    v24 = v18 + 24 * (v21 & v19);
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24 == -1)
    {
LABEL_11:
      v21 = ++v22 + v23;
      continue;
    }
    break;
  }
  if (!v25)
  {
    v26 = v17[268];
    if (v26)
    {
      v27 = *(_DWORD *)(v26 - 4);
      v24 = v26 + 24 * v27;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v25, *a3, v11))
    goto LABEL_11;
  v26 = v17[268];
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 4);
LABEL_16:
    if (v24 == v26 + 24 * v27)
    {
LABEL_20:
      v38 = *(_QWORD *)(a1 + 16);
      v39 = *a3;
      if (*a3)
      {
        v40 = *((_DWORD *)v39 + 1);
        *(_DWORD *)v39 += 2;
        if (v40 < 0)
          goto LABEL_171;
      }
      else
      {
        v40 = 0;
      }
      v41 = __OFADD__(v40, 15);
      v42 = v40 + 15;
      if (!v41 && !__OFADD__(v42, 9))
      {
        v43 = !v39 || (*((_BYTE *)v39 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v42 + 9), v43, (int8x16_t *)"'Runtime.", 9u, (uint64_t)v39, (int8x16_t *)"' was not found", 0xFu, (int **)&v309);
        v44 = v309;
        if (v309)
        {
          if (!*(_BYTE *)(v38 + 48))
            *(_BYTE *)(v38 + 48) = *(_QWORD *)(v38 + 48);
          LODWORD(v311) = 2;
          *(_DWORD *)v44 += 2;
          v312 = v44;
          v45 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v45 == *(_DWORD *)(v38 + 32))
          {
            v46 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 24, v45 + 1, (unint64_t)&v311);
            v47 = *(unsigned int *)(v38 + 36);
            v48 = *(_QWORD *)(v38 + 24) + 16 * v47;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            v49 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = 0;
            *(_QWORD *)(v48 + 8) = v49;
            v50 = v312;
            *(_DWORD *)(v38 + 36) = v47 + 1;
            v312 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::~StringImpl(v50, v31, v32, v33, v34, v35, v36, v37);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v50 -= 2;
              }
            }
          }
          else
          {
            v51 = *(_QWORD *)(v38 + 24) + 16 * v45;
            *(_DWORD *)v51 = 2;
            *(_QWORD *)(v51 + 8) = v44;
            *(_DWORD *)(v38 + 36) = v45 + 1;
          }
          v52 = v309;
          v309 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v31, v32, v33, v34, v35, v36, v37);
              WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
              if (!v39)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v52 -= 2;
          }
          if (!v39)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v39 == 2)
          {
            WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
          goto LABEL_41;
        }
LABEL_172:
        __break(0xC471u);
        JUMPOUT(0x19865E8ACLL);
      }
LABEL_171:
      v309 = 0;
      goto LABEL_172;
    }
  }
  v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(v24 + 8);
  v29 = *(_QWORD *)(v24 + 16);
  v30 = (_QWORD *)(a1 + (v29 >> 1));
  if ((v29 & 1) != 0)
    v28 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v30 + v28);
  v28(v30, a2, &v310);
LABEL_41:
  v53 = v310;
  v310 = 0;
  if (!v53)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v53 != 1)
  {
    --*(_DWORD *)v53;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v53, v31, v32, v33, v34, v35, v36, v37);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::RuntimeBackendDispatcher::parse(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (**v54)();
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char **v75;
  char *v76;
  int v77;
  char *v78;
  int *v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  WTF *v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  WTF *v117;
  WTF *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::AtomStringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  WTF *v136;
  WTF *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  uint64_t v196;
  WTF *v197;
  WTF *v198;
  WTF::StringImpl *v199;
  WTF *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  char v203;
  uint64_t (**v204)();
  WTF::StringImpl *v205[2];
  uint64_t (***v206)();
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "source";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v201 = (WTF::StringImpl *)v7;
  v204 = &off_1E3593B90;
  v205[0] = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v205[1] = 0;
  v206 = &v204;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v199, v5, v6, &v201, 1, (uint64_t)&v204);
  v16 = v206;
  if (v206 == &v204)
  {
    v16 = &v204;
  }
  else
  {
    if (!v206)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x3B00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Runtime.parse' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v204) = 3;
    *(_DWORD *)v18 = v27;
    v205[0] = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v204);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v205[0];
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v205[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (***(void (****)(uint64_t (***__return_ptr)(), _QWORD, WTF::StringImpl **))(a1 + 32))(&v204, *(_QWORD *)(a1 + 32), &v199);
    if ((_DWORD)v206)
    {
      if ((_DWORD)v206 != 1)
      {
        v196 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::evaluate(v196);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v201) = 5;
      v54 = v204;
      if (v204)
        *(_DWORD *)v204 += 2;
      v202 = (WTF::StringImpl *)v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
      {
        v146 = *(_QWORD *)(v53 + 24) + 16 * v55;
        *(_DWORD *)v146 = 5;
        *(_QWORD *)(v146 + 8) = v54;
        *(_DWORD *)(v53 + 36) = v55 + 1;
        goto LABEL_96;
      }
      v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v201);
      v57 = *(unsigned int *)(v53 + 36);
      v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
      *(_DWORD *)v58 = *(_DWORD *)v56;
      v59 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v56 + 8) = 0;
      *(_QWORD *)(v58 + 8) = v59;
      v60 = v202;
      *(_DWORD *)(v53 + 36) = v57 + 1;
      v202 = 0;
      if (!v60)
        goto LABEL_96;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
        goto LABEL_96;
      }
      goto LABEL_95;
    }
    v69 = (int)v204;
    v70 = v205[0];
    v71 = v205[1];
    *(_OWORD *)v205 = 0u;
    v72 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v72 = 0x500000001;
    *(_QWORD *)(v72 + 16) = 0;
    v73 = (uint64_t *)(v72 + 16);
    *(_OWORD *)(v72 + 24) = 0u;
    v198 = (WTF *)v72;
    v74 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v74 = 0x600000002;
    *(_QWORD *)(v74 + 8) = "result";
    *(_DWORD *)(v74 + 16) = 4;
    v197 = (WTF *)v74;
    v75 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v69];
    v76 = v75[1];
    if (v76)
    {
      v77 = (_DWORD)v76 - 1;
      if (v76 == (char *)1)
      {
        v79 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      else
      {
        v78 = *v75;
        v79 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        *v79 = 2;
        v79[1] = v77;
        *((_QWORD *)v79 + 1) = v78;
        v79[4] = 4;
      }
    }
    else
    {
      v79 = 0;
    }
    v80 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v80 = 0x400000001;
    *((_QWORD *)v80 + 1) = v79;
    if (v79)
      *v79 += 2;
    v200 = v80;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v73, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v200, v81, v82, v83, v84, v85, (uint64_t)&v201);
    if (v203)
    {
      v93 = (uint64_t *)(v72 + 24);
      v94 = *(unsigned int *)(v72 + 36);
      if ((_DWORD)v94 == *(_DWORD *)(v72 + 32))
      {
        v187 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v197);
        v94 = *(unsigned int *)(v72 + 36);
        v188 = *(_QWORD *)(v72 + 24);
        v189 = *v187;
        if (*v187)
          *v189 += 2;
        *(_QWORD *)(v188 + 8 * v94) = v189;
      }
      else
      {
        v95 = *v93;
        v96 = v197;
        if (v197)
          *(_DWORD *)v197 += 2;
        *(_QWORD *)(v95 + 8 * v94) = v96;
      }
      *(_DWORD *)(v72 + 36) = v94 + 1;
    }
    v97 = v200;
    v200 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        if (!v79)
          goto LABEL_54;
        goto LABEL_52;
      }
      --*(_DWORD *)v97;
    }
    if (!v79)
      goto LABEL_54;
LABEL_52:
    if (*v79 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v79, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
    }
    else
    {
      *v79 -= 2;
    }
LABEL_54:
    v98 = v197;
    v197 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
        WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
        if (!v70)
          goto LABEL_70;
        goto LABEL_58;
      }
      *(_DWORD *)v98 -= 2;
    }
    if (!v70)
      goto LABEL_70;
LABEL_58:
    v99 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v99 = 0x700000002;
    *(_QWORD *)(v99 + 8) = "message";
    *(_DWORD *)(v99 + 16) = 4;
    v197 = (WTF *)v99;
    v100 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v100 = 0x400000001;
    *((_QWORD *)v100 + 1) = v70;
    *(_DWORD *)v70 += 2;
    v200 = v100;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v73, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v200, v101, v102, v103, v104, v105, (uint64_t)&v201);
    if (v203)
    {
      v113 = (uint64_t *)(v72 + 24);
      v114 = *(unsigned int *)(v72 + 36);
      if ((_DWORD)v114 == *(_DWORD *)(v72 + 32))
      {
        v190 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v113, v114 + 1, (unint64_t)&v197);
        v114 = *(unsigned int *)(v72 + 36);
        v191 = *(_QWORD *)(v72 + 24);
        v192 = *v190;
        if (*v190)
          *v192 += 2;
        *(_QWORD *)(v191 + 8 * v114) = v192;
      }
      else
      {
        v115 = *v113;
        v116 = v197;
        if (v197)
          *(_DWORD *)v197 += 2;
        *(_QWORD *)(v115 + 8 * v114) = v116;
      }
      *(_DWORD *)(v72 + 36) = v114 + 1;
    }
    v117 = v200;
    v200 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 1)
        WTF::JSONImpl::Value::operator delete(v117, v106, v107, v108, v109, v110, v111, v112);
      else
        --*(_DWORD *)v117;
    }
    v118 = v197;
    v197 = 0;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2)
      {
        WTF::StringImpl::~StringImpl(v118, v106, v107, v108, v109, v110, v111, v112);
        WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
      }
      else
      {
        *(_DWORD *)v118 -= 2;
      }
    }
LABEL_70:
    if (v71)
    {
      v119 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v119 = 0x500000002;
      *(_QWORD *)(v119 + 8) = "range";
      *(_DWORD *)(v119 + 16) = 4;
      v200 = (WTF *)v119;
      v197 = v71;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v73, (WTF::AtomStringImpl *)&v200, (const WTF::StringImpl *)&v197, v120, v121, v122, v123, v124, (uint64_t)&v201);
      if (v203)
      {
        v132 = (uint64_t *)(v72 + 24);
        v133 = *(unsigned int *)(v72 + 36);
        if ((_DWORD)v133 == *(_DWORD *)(v72 + 32))
        {
          v193 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v132, v133 + 1, (unint64_t)&v200);
          v133 = *(unsigned int *)(v72 + 36);
          v194 = *(_QWORD *)(v72 + 24);
          v195 = *v193;
          if (*v193)
            *v195 += 2;
          *(_QWORD *)(v194 + 8 * v133) = v195;
        }
        else
        {
          v134 = *v132;
          v135 = v200;
          if (v200)
            *(_DWORD *)v200 += 2;
          *(_QWORD *)(v134 + 8 * v133) = v135;
        }
        *(_DWORD *)(v72 + 36) = v133 + 1;
      }
      v136 = v197;
      v197 = 0;
      if (v136)
      {
        if (*(_DWORD *)v136 == 1)
          WTF::JSONImpl::Value::operator delete(v136, v125, v126, v127, v128, v129, v130, v131);
        else
          --*(_DWORD *)v136;
      }
      v137 = v200;
      v200 = 0;
      if (v137)
      {
        if (*(_DWORD *)v137 == 2)
        {
          WTF::StringImpl::~StringImpl(v137, v125, v126, v127, v128, v129, v130, v131);
          WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
        }
        else
        {
          *(_DWORD *)v137 -= 2;
        }
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v198);
    if (v198)
    {
      if (*(_DWORD *)v198 == 1)
      {
        WTF::JSONImpl::Value::operator delete(v198, v19, v20, v21, v22, v23, v24, v25);
        if (!v70)
        {
LABEL_96:
          if ((_DWORD)v206 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t (***)()))off_1E3593A38[v206])(&v201, &v204);
          goto LABEL_20;
        }
        goto LABEL_87;
      }
      --*(_DWORD *)v198;
    }
    if (!v70)
      goto LABEL_96;
LABEL_87:
    if (*(_DWORD *)v70 != 2)
    {
      *(_DWORD *)v70 -= 2;
      goto LABEL_96;
    }
    v60 = v70;
LABEL_95:
    WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    goto LABEL_96;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 16))(v34, a2, &v199);
LABEL_20:
  v36 = v199;
  v199 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::evaluate(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t (***v55)();
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (***v68)();
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t (***v81)();
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  uint64_t (***v94)();
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  uint64_t (***v107)();
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  uint64_t (***v120)();
  uint64_t v121;
  uint64_t v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF::StringImpl *v237;
  int v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  WTF *v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  WTF::AtomStringImpl *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  WTF *v276;
  WTF *v277;
  WTF *v278;
  uint64_t v279;
  WTF *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  WTF::AtomStringImpl *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  WTF *v296;
  WTF *v297;
  WTF *v298;
  uint64_t v299;
  double *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  WTF::AtomStringImpl *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  WTF *v316;
  WTF *v317;
  WTF *v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _DWORD **v352;
  uint64_t v353;
  _DWORD *v354;
  _DWORD **v355;
  uint64_t v356;
  _DWORD *v357;
  _DWORD **v358;
  uint64_t v359;
  _DWORD *v360;
  uint64_t v361;
  WTF *v362;
  WTF *v363;
  __int16 v364;
  __int16 v365;
  __int16 v366;
  __int16 v367;
  uint64_t v368;
  __int16 v369;
  __int16 v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  WTF *v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  char v376;
  uint64_t (**v377)();
  __int128 v378;
  uint64_t (***v379)();
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xA00000002;
  *(_QWORD *)(v8 + 8) = "expression";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v374 = (WTF::StringImpl *)v8;
  v377 = &off_1E3593B90;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asString;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v372, v6, v7, &v374, 1, (uint64_t)&v377);
  v17 = v379;
  if (v379 == &v377)
  {
    v17 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xB00000002;
  *(_QWORD *)(v20 + 8) = "objectGroup";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v374 = (WTF::StringImpl *)v20;
  v377 = &off_1E3593B90;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asString;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v371, v18, v19, &v374, 0, (uint64_t)&v377);
  v29 = v379;
  if (v379 == &v377)
  {
    v29 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x1500000002;
  *(_QWORD *)(v32 + 8) = "includeCommandLineAPI";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v374 = (WTF::StringImpl *)v32;
  v377 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v30, v31, &v374, 0, (uint64_t)&v377);
  v42 = v379;
  if (v379 == &v377)
  {
    v42 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_20;
    v33 = 5;
  }
  (*v42)[v33]();
LABEL_20:
  v370 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x2400000002;
  *(_QWORD *)(v45 + 8) = "doNotPauseOnExceptionsAndMuteConsole";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v374 = (WTF::StringImpl *)v45;
  v377 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v43, v44, &v374, 0, (uint64_t)&v377);
  v55 = v379;
  if (v379 == &v377)
  {
    v55 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_27;
    v46 = 5;
  }
  (*v55)[v46]();
LABEL_27:
  v369 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  v57 = (uint64_t)*a3;
  v58 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v58 = 0x900000002;
  *(_QWORD *)(v58 + 8) = "contextId";
  v59 = 4;
  *(_DWORD *)(v58 + 16) = 4;
  v374 = (WTF::StringImpl *)v58;
  v377 = &off_1E3593B00;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asInteger;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  v67 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v56, v57, &v374, 0, (uint64_t)&v377);
  v68 = v379;
  if (v379 == &v377)
  {
    v68 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_34;
    v59 = 5;
  }
  (*v68)[v59]();
LABEL_34:
  v368 = v67;
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, v60, v61, v62, v63, v64, v65, v66);
    WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
  v69 = *(_QWORD *)(a1 + 16);
  v70 = (uint64_t)*a3;
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0xD00000002;
  *(_QWORD *)(v71 + 8) = "returnByValue";
  v72 = 4;
  *(_DWORD *)(v71 + 16) = 4;
  v374 = (WTF::StringImpl *)v71;
  v377 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  v80 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v69, v70, &v374, 0, (uint64_t)&v377);
  v81 = v379;
  if (v379 == &v377)
  {
    v81 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_41;
    v72 = 5;
  }
  (*v81)[v72]();
LABEL_41:
  v367 = v80;
  if (*(_DWORD *)v71 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v71, v73, v74, v75, v76, v77, v78, v79);
    WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
  }
  else
  {
    *(_DWORD *)v71 -= 2;
  }
  v82 = *(_QWORD *)(a1 + 16);
  v83 = (uint64_t)*a3;
  v84 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v84 = 0xF00000002;
  *(_QWORD *)(v84 + 8) = "generatePreview";
  v85 = 4;
  *(_DWORD *)(v84 + 16) = 4;
  v374 = (WTF::StringImpl *)v84;
  v377 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  v93 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v82, v83, &v374, 0, (uint64_t)&v377);
  v94 = v379;
  if (v379 == &v377)
  {
    v94 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_48;
    v85 = 5;
  }
  (*v94)[v85]();
LABEL_48:
  v366 = v93;
  if (*(_DWORD *)v84 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v84, v86, v87, v88, v89, v90, v91, v92);
    WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
  }
  else
  {
    *(_DWORD *)v84 -= 2;
  }
  v95 = *(_QWORD *)(a1 + 16);
  v96 = (uint64_t)*a3;
  v97 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v97 = 0xA00000002;
  *(_QWORD *)(v97 + 8) = "saveResult";
  v98 = 4;
  *(_DWORD *)(v97 + 16) = 4;
  v374 = (WTF::StringImpl *)v97;
  v377 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  v106 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v95, v96, &v374, 0, (uint64_t)&v377);
  v107 = v379;
  if (v379 == &v377)
  {
    v107 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_55;
    v98 = 5;
  }
  (*v107)[v98]();
LABEL_55:
  v365 = v106;
  if (*(_DWORD *)v97 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v97, v99, v100, v101, v102, v103, v104, v105);
    WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
  }
  else
  {
    *(_DWORD *)v97 -= 2;
  }
  v108 = *(_QWORD *)(a1 + 16);
  v109 = (uint64_t)*a3;
  v110 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v110 = 0x1200000002;
  *(_QWORD *)(v110 + 8) = "emulateUserGesture";
  v111 = 4;
  *(_DWORD *)(v110 + 16) = 4;
  v374 = (WTF::StringImpl *)v110;
  v377 = (uint64_t (**)())&unk_1E3593AB8;
  *(_QWORD *)&v378 = WTF::JSONImpl::Value::asBoolean;
  *((_QWORD *)&v378 + 1) = 0;
  v379 = &v377;
  v119 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v108, v109, &v374, 0, (uint64_t)&v377);
  v120 = v379;
  if (v379 == &v377)
  {
    v120 = &v377;
  }
  else
  {
    if (!v379)
      goto LABEL_62;
    v111 = 5;
  }
  (*v120)[v111]();
LABEL_62:
  v364 = v119;
  if (*(_DWORD *)v110 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v110, v112, v113, v114, v115, v116, v117, v118);
    WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
  }
  else
  {
    *(_DWORD *)v110 -= 2;
  }
  v121 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v121 + 36))
  {
    v122 = WTF::fastCompactMalloc((WTF *)0x20);
    v130 = (WTF::StringImpl *)v122;
    *(_QWORD *)v122 = 0x3E00000002;
    *(_QWORD *)(v122 + 8) = "Some arguments of method 'Runtime.evaluate' can't be processed";
    v131 = 4;
    *(_DWORD *)(v122 + 16) = 4;
    if (!*(_BYTE *)(v121 + 48))
    {
      *(_BYTE *)(v121 + 48) = *(_QWORD *)(v121 + 48);
      v131 = *(_DWORD *)v122 + 2;
    }
    LODWORD(v377) = 3;
    *(_DWORD *)v122 = v131;
    *(_QWORD *)&v378 = v122;
    v132 = *(unsigned int *)(v121 + 36);
    if ((_DWORD)v132 == *(_DWORD *)(v121 + 32))
    {
      v133 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v121 + 24, v132 + 1, (unint64_t)&v377);
      v134 = *(unsigned int *)(v121 + 36);
      v135 = *(_QWORD *)(v121 + 24) + 16 * v134;
      *(_DWORD *)v135 = *(_DWORD *)v133;
      v136 = *(_QWORD *)(v133 + 8);
      *(_QWORD *)(v133 + 8) = 0;
      *(_QWORD *)(v135 + 8) = v136;
      v137 = (WTF::StringImpl *)v378;
      *(_DWORD *)(v121 + 36) = v134 + 1;
      *(_QWORD *)&v378 = 0;
      if (v137)
      {
        if (*(_DWORD *)v137 == 2)
        {
          WTF::StringImpl::~StringImpl(v137, v123, v124, v125, v126, v127, v128, v129);
          WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
        }
        else
        {
          *(_DWORD *)v137 -= 2;
        }
      }
    }
    else
    {
      v139 = *(_QWORD *)(v121 + 24) + 16 * v132;
      *(_DWORD *)v139 = 3;
      *(_QWORD *)(v139 + 8) = v122;
      *(_DWORD *)(v121 + 36) = v132 + 1;
    }
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
    goto LABEL_76;
  }
  v138 = *(_QWORD *)(a1 + 24);
  if (!v138)
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, uint64_t *, __int16 *, __int16 *, __int16 *, __int16 *))(**(_QWORD **)(a1 + 32) + 8))(&v377, *(_QWORD *)(a1 + 32), &v372, &v371, &v370, &v369, &v368, &v367, &v366, &v365, &v364);
    if ((_DWORD)v379)
    {
      if ((_DWORD)v379 != 1)
      {
        v361 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::awaitPromise(v361);
        return;
      }
      v230 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v230 + 48))
        *(_BYTE *)(v230 + 48) = *(_QWORD *)(v230 + 48);
      LODWORD(v374) = 5;
      v231 = (WTF::StringImpl *)v377;
      if (v377)
        *(_DWORD *)v377 += 2;
      v375 = v231;
      v232 = *(unsigned int *)(v230 + 36);
      if ((_DWORD)v232 == *(_DWORD *)(v230 + 32))
      {
        v233 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v230 + 24, v232 + 1, (unint64_t)&v374);
        v234 = *(unsigned int *)(v230 + 36);
        v235 = *(_QWORD *)(v230 + 24) + 16 * v234;
        *(_DWORD *)v235 = *(_DWORD *)v233;
        v236 = *(_QWORD *)(v233 + 8);
        *(_QWORD *)(v233 + 8) = 0;
        *(_QWORD *)(v235 + 8) = v236;
        v237 = v375;
        *(_DWORD *)(v230 + 36) = v234 + 1;
        v375 = 0;
        if (!v237)
          goto LABEL_148;
        v238 = *(_DWORD *)v237 - 2;
        if (*(_DWORD *)v237 == 2)
        {
          WTF::StringImpl::~StringImpl(v237, v123, v124, v125, v126, v127, v128, v129);
          WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
          goto LABEL_148;
        }
        goto LABEL_145;
      }
      v327 = *(_QWORD *)(v230 + 24) + 16 * v232;
      *(_DWORD *)v327 = 5;
      *(_QWORD *)(v327 + 8) = v231;
      *(_DWORD *)(v230 + 36) = v232 + 1;
    }
    else
    {
      v255 = (WTF *)v377;
      v377 = 0;
      v256 = (unsigned __int16)v378;
      v257 = *(_QWORD *)((char *)&v378 + 4);
      v258 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v258 = 0x500000001;
      *(_QWORD *)(v258 + 16) = 0;
      v259 = (uint64_t *)(v258 + 16);
      *(_QWORD *)(v258 + 24) = 0;
      *(_QWORD *)(v258 + 32) = 0;
      v363 = (WTF *)v258;
      v260 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v260 = 0x600000002;
      *(_QWORD *)(v260 + 8) = "result";
      *(_DWORD *)(v260 + 16) = 4;
      v373 = (WTF *)v260;
      v362 = v255;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v258 + 16), (WTF::AtomStringImpl *)&v373, (const WTF::StringImpl *)&v362, v261, v262, v263, v264, v265, (uint64_t)&v374);
      if (v376)
      {
        v273 = (uint64_t *)(v258 + 24);
        v274 = *(unsigned int *)(v258 + 36);
        if ((_DWORD)v274 == *(_DWORD *)(v258 + 32))
        {
          v352 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v273, v274 + 1, (unint64_t)&v373);
          v274 = *(unsigned int *)(v258 + 36);
          v353 = *(_QWORD *)(v258 + 24);
          v354 = *v352;
          if (*v352)
            *v354 += 2;
          *(_QWORD *)(v353 + 8 * v274) = v354;
        }
        else
        {
          v275 = *v273;
          v276 = v373;
          if (v373)
            *(_DWORD *)v373 += 2;
          *(_QWORD *)(v275 + 8 * v274) = v276;
        }
        *(_DWORD *)(v258 + 36) = v274 + 1;
      }
      v277 = v362;
      v362 = 0;
      if (v277)
      {
        if (*(_DWORD *)v277 == 1)
          WTF::JSONImpl::Value::operator delete(v277, v266, v267, v268, v269, v270, v271, v272);
        else
          --*(_DWORD *)v277;
      }
      v278 = v373;
      v373 = 0;
      if (v278)
      {
        if (*(_DWORD *)v278 == 2)
        {
          WTF::StringImpl::~StringImpl(v278, v266, v267, v268, v269, v270, v271, v272);
          WTF::fastFree(v328, v329, v330, v331, v332, v333, v334, v335);
        }
        else
        {
          *(_DWORD *)v278 -= 2;
        }
      }
      if (v256 >= 0x100)
      {
        v279 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v279 = 0x900000002;
        *(_QWORD *)(v279 + 8) = "wasThrown";
        *(_DWORD *)(v279 + 16) = 4;
        v362 = (WTF *)v279;
        v280 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v280 = 0x100000001;
        *((_BYTE *)v280 + 8) = v256 != 0;
        v373 = v280;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v259, (WTF::AtomStringImpl *)&v362, (const WTF::StringImpl *)&v373, v281, v282, v283, v284, v285, (uint64_t)&v374);
        if (v376)
        {
          v293 = (uint64_t *)(v258 + 24);
          v294 = *(unsigned int *)(v258 + 36);
          if ((_DWORD)v294 == *(_DWORD *)(v258 + 32))
          {
            v358 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v293, v294 + 1, (unint64_t)&v362);
            v294 = *(unsigned int *)(v258 + 36);
            v359 = *(_QWORD *)(v258 + 24);
            v360 = *v358;
            if (*v358)
              *v360 += 2;
            *(_QWORD *)(v359 + 8 * v294) = v360;
          }
          else
          {
            v295 = *v293;
            v296 = v362;
            if (v362)
              *(_DWORD *)v362 += 2;
            *(_QWORD *)(v295 + 8 * v294) = v296;
          }
          *(_DWORD *)(v258 + 36) = v294 + 1;
        }
        v297 = v373;
        v373 = 0;
        if (v297)
        {
          if (*(_DWORD *)v297 == 1)
            WTF::JSONImpl::Value::operator delete(v297, v286, v287, v288, v289, v290, v291, v292);
          else
            --*(_DWORD *)v297;
        }
        v298 = v362;
        v362 = 0;
        if (v298)
        {
          if (*(_DWORD *)v298 == 2)
          {
            WTF::StringImpl::~StringImpl(v298, v286, v287, v288, v289, v290, v291, v292);
            WTF::fastFree(v344, v345, v346, v347, v348, v349, v350, v351);
          }
          else
          {
            *(_DWORD *)v298 -= 2;
          }
        }
      }
      if ((v257 & 0xFF00000000) != 0)
      {
        v299 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v299 = 0x1000000002;
        *(_QWORD *)(v299 + 8) = "savedResultIndex";
        *(_DWORD *)(v299 + 16) = 4;
        v362 = (WTF *)v299;
        v300 = (double *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v300 = 0x300000001;
        v300[1] = (double)(int)v257;
        v373 = (WTF *)v300;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v259, (WTF::AtomStringImpl *)&v362, (const WTF::StringImpl *)&v373, v301, v302, v303, v304, v305, (uint64_t)&v374);
        if (v376)
        {
          v313 = (uint64_t *)(v258 + 24);
          v314 = *(unsigned int *)(v258 + 36);
          if ((_DWORD)v314 == *(_DWORD *)(v258 + 32))
          {
            v355 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v313, v314 + 1, (unint64_t)&v362);
            v314 = *(unsigned int *)(v258 + 36);
            v356 = *(_QWORD *)(v258 + 24);
            v357 = *v355;
            if (*v355)
              *v357 += 2;
            *(_QWORD *)(v356 + 8 * v314) = v357;
          }
          else
          {
            v315 = *v313;
            v316 = v362;
            if (v362)
              *(_DWORD *)v362 += 2;
            *(_QWORD *)(v315 + 8 * v314) = v316;
          }
          *(_DWORD *)(v258 + 36) = v314 + 1;
        }
        v317 = v373;
        v373 = 0;
        if (v317)
        {
          if (*(_DWORD *)v317 == 1)
            WTF::JSONImpl::Value::operator delete(v317, v306, v307, v308, v309, v310, v311, v312);
          else
            --*(_DWORD *)v317;
        }
        v318 = v362;
        v362 = 0;
        if (v318)
        {
          if (*(_DWORD *)v318 == 2)
          {
            WTF::StringImpl::~StringImpl(v318, v306, v307, v308, v309, v310, v311, v312);
            WTF::fastFree(v336, v337, v338, v339, v340, v341, v342, v343);
          }
          else
          {
            *(_DWORD *)v318 -= 2;
          }
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v363);
      v237 = v363;
      if (!v363)
        goto LABEL_148;
      v238 = *(_DWORD *)v363 - 1;
      if (*(_DWORD *)v363 != 1)
      {
LABEL_145:
        *(_DWORD *)v237 = v238;
        goto LABEL_148;
      }
      WTF::JSONImpl::Value::operator delete(v363, v123, v124, v125, v126, v127, v128, v129);
    }
LABEL_148:
    if ((_DWORD)v379 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t (***)()))off_1E35939A8[v379])(&v374, &v377);
    goto LABEL_76;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, uint64_t *, __int16 *, __int16 *, __int16 *, __int16 *))(*(_QWORD *)v138 + 24))(v138, a2, &v372, &v371, &v370, &v369, &v368, &v367, &v366, &v365, &v364);
LABEL_76:
  v140 = v371;
  v371 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  v141 = v372;
  v372 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::awaitPromise(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t (***v56)();
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t (**v120)();
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  __int16 v138;
  __int16 v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t (**v142)();
  WTF::StringImpl *v143;
  uint64_t v144;
  uint64_t (***v145)();
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xF00000002;
  *(_QWORD *)(v8 + 8) = "promiseObjectId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v140 = (WTF::StringImpl *)v8;
  v142 = &off_1E3593B90;
  v143 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v144 = 0;
  v145 = &v142;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v141, v6, v7, &v140, 1, (uint64_t)&v142);
  v17 = v145;
  if (v145 == &v142)
  {
    v17 = &v142;
  }
  else
  {
    if (!v145)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xD00000002;
  *(_QWORD *)(v20 + 8) = "returnByValue";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v140 = (WTF::StringImpl *)v20;
  v142 = (uint64_t (**)())&unk_1E3593AB8;
  v143 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v144 = 0;
  v145 = &v142;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v18, v19, &v140, 0, (uint64_t)&v142);
  v30 = v145;
  if (v145 == &v142)
  {
    v30 = &v142;
  }
  else
  {
    if (!v145)
      goto LABEL_13;
    v21 = 5;
  }
  (*v30)[v21]();
LABEL_13:
  v139 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = a1[2];
  v32 = (uint64_t)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xF00000002;
  *(_QWORD *)(v33 + 8) = "generatePreview";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  v140 = (WTF::StringImpl *)v33;
  v142 = (uint64_t (**)())&unk_1E3593AB8;
  v143 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v144 = 0;
  v145 = &v142;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v31, v32, &v140, 0, (uint64_t)&v142);
  v43 = v145;
  if (v145 == &v142)
  {
    v43 = &v142;
  }
  else
  {
    if (!v145)
      goto LABEL_20;
    v34 = 5;
  }
  (*v43)[v34]();
LABEL_20:
  v138 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = a1[2];
  v45 = (uint64_t)*a3;
  v46 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v46 = 0xA00000002;
  *(_QWORD *)(v46 + 8) = "saveResult";
  v47 = 4;
  *(_DWORD *)(v46 + 16) = 4;
  v140 = (WTF::StringImpl *)v46;
  v142 = (uint64_t (**)())&unk_1E3593AB8;
  v143 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v144 = 0;
  v145 = &v142;
  v55 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v44, v45, &v140, 0, (uint64_t)&v142);
  v56 = v145;
  if (v145 == &v142)
  {
    v56 = &v142;
  }
  else
  {
    if (!v145)
      goto LABEL_27;
    v47 = 5;
  }
  (*v56)[v47]();
LABEL_27:
  v137 = v55;
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v48, v49, v50, v51, v52, v53, v54);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  v57 = a1[2];
  if (*(_DWORD *)(v57 + 36))
  {
    v58 = WTF::fastCompactMalloc((WTF *)0x20);
    v66 = (WTF::StringImpl *)v58;
    *(_QWORD *)v58 = 0x4200000002;
    *(_QWORD *)(v58 + 8) = "Some arguments of method 'Runtime.awaitPromise' can't be processed";
    v67 = 4;
    *(_DWORD *)(v58 + 16) = 4;
    if (!*(_BYTE *)(v57 + 48))
    {
      *(_BYTE *)(v57 + 48) = *(_QWORD *)(v57 + 48);
      v67 = *(_DWORD *)v58 + 2;
    }
    LODWORD(v142) = 3;
    *(_DWORD *)v58 = v67;
    v143 = (WTF::StringImpl *)v58;
    v68 = *(unsigned int *)(v57 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v57 + 32))
    {
      v69 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v57 + 24, v68 + 1, (unint64_t)&v142);
      v70 = *(unsigned int *)(v57 + 36);
      v71 = *(_QWORD *)(v57 + 24) + 16 * v70;
      *(_DWORD *)v71 = *(_DWORD *)v69;
      v72 = *(_QWORD *)(v69 + 8);
      *(_QWORD *)(v69 + 8) = 0;
      *(_QWORD *)(v71 + 8) = v72;
      v73 = v143;
      *(_DWORD *)(v57 + 36) = v70 + 1;
      v143 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::~StringImpl(v73, v59, v60, v61, v62, v63, v64, v65);
          WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        }
        else
        {
          *(_DWORD *)v73 -= 2;
        }
      }
    }
    else
    {
      v75 = *(_QWORD *)(v57 + 24) + 16 * v68;
      *(_DWORD *)v75 = 3;
      *(_QWORD *)(v75 + 8) = v58;
      *(_DWORD *)(v57 + 36) = v68 + 1;
    }
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  else
  {
    v74 = a1[3];
    if (v74)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *, __int16 *, __int16 *))(*(_QWORD *)v74 + 32))(v74, a2, &v141, &v139, &v138, &v137);
    }
    else
    {
      v117 = a1[4];
      v118 = WTF::fastMalloc((WTF *)0x28);
      v119 = (_DWORD *)a1[2];
      ++*v119;
      *(_DWORD *)(v118 + 8) = 1;
      *(_QWORD *)(v118 + 16) = v119;
      *(_QWORD *)(v118 + 24) = (int)a2;
      *(_BYTE *)(v118 + 32) = 0;
      *(_QWORD *)v118 = off_1E3591890;
      v142 = (uint64_t (**)())v118;
      (*(void (**)(uint64_t, WTF::StringImpl **, __int16 *, __int16 *, __int16 *, uint64_t (***)()))(*(_QWORD *)v117 + 16))(v117, &v141, &v139, &v138, &v137, &v142);
      v120 = v142;
      v142 = 0;
      if (v120)
      {
        if (*((_DWORD *)v120 + 2) == 1)
          (*((void (**)(uint64_t (**)()))*v120 + 1))(v120);
        else
          --*((_DWORD *)v120 + 2);
      }
    }
  }
  v76 = v141;
  v141 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::callFunctionOn(_QWORD *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  uint64_t (***v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t (***v67)();
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t (***v80)();
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t (***v93)();
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::AtomStringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t (***v106)();
  uint64_t v107;
  uint64_t v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD *v211;
  uint64_t (**v212)();
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int16 v229;
  __int16 v230;
  __int16 v231;
  __int16 v232;
  __int16 v233;
  WTF::StringImpl *v234;
  WTF *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  uint64_t (**v238)();
  WTF::StringImpl *v239;
  uint64_t v240;
  uint64_t (***v241)();
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "objectId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v236 = (WTF::StringImpl *)v8;
  v238 = &off_1E3593B90;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v240 = 0;
  v241 = &v238;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v237, v6, v7, &v236, 1, (uint64_t)&v238);
  v17 = v241;
  if (v241 == &v238)
  {
    v17 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x1300000002;
  *(_QWORD *)(v20 + 8) = "functionDeclaration";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v235 = (WTF *)v20;
  v238 = &off_1E3593B90;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v240 = 0;
  v241 = &v238;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v236, v18, v19, &v235, 1, (uint64_t)&v238);
  v29 = v241;
  if (v241 == &v238)
  {
    v29 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = a1[2];
  v31 = *a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x900000002;
  *(_QWORD *)(v32 + 8) = "arguments";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v234 = (WTF::StringImpl *)v32;
  v238 = &off_1E3593C68;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asArray;
  v240 = 0;
  v241 = &v238;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(&v235, v30, v31, &v234, 0, (uint64_t)&v238);
  v41 = v241;
  if (v241 == &v238)
  {
    v41 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_20;
    v33 = 5;
  }
  (*v41)[v33]();
LABEL_20:
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v42 = a1[2];
  v43 = (uint64_t)*a3;
  v44 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v44 = 0x2400000002;
  *(_QWORD *)(v44 + 8) = "doNotPauseOnExceptionsAndMuteConsole";
  v45 = 4;
  *(_DWORD *)(v44 + 16) = 4;
  v234 = (WTF::StringImpl *)v44;
  v238 = (uint64_t (**)())&unk_1E3593AB8;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v240 = 0;
  v241 = &v238;
  v53 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v42, v43, &v234, 0, (uint64_t)&v238);
  v54 = v241;
  if (v241 == &v238)
  {
    v54 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_27;
    v45 = 5;
  }
  (*v54)[v45]();
LABEL_27:
  v233 = v53;
  if (*(_DWORD *)v44 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v46, v47, v48, v49, v50, v51, v52);
    WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
  }
  else
  {
    *(_DWORD *)v44 -= 2;
  }
  v55 = a1[2];
  v56 = (uint64_t)*a3;
  v57 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v57 = 0xD00000002;
  *(_QWORD *)(v57 + 8) = "returnByValue";
  v58 = 4;
  *(_DWORD *)(v57 + 16) = 4;
  v234 = (WTF::StringImpl *)v57;
  v238 = (uint64_t (**)())&unk_1E3593AB8;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v240 = 0;
  v241 = &v238;
  v66 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v55, v56, &v234, 0, (uint64_t)&v238);
  v67 = v241;
  if (v241 == &v238)
  {
    v67 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_34;
    v58 = 5;
  }
  (*v67)[v58]();
LABEL_34:
  v232 = v66;
  if (*(_DWORD *)v57 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v57, v59, v60, v61, v62, v63, v64, v65);
    WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
  }
  else
  {
    *(_DWORD *)v57 -= 2;
  }
  v68 = a1[2];
  v69 = (uint64_t)*a3;
  v70 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v70 = 0xF00000002;
  *(_QWORD *)(v70 + 8) = "generatePreview";
  v71 = 4;
  *(_DWORD *)(v70 + 16) = 4;
  v234 = (WTF::StringImpl *)v70;
  v238 = (uint64_t (**)())&unk_1E3593AB8;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v240 = 0;
  v241 = &v238;
  v79 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v68, v69, &v234, 0, (uint64_t)&v238);
  v80 = v241;
  if (v241 == &v238)
  {
    v80 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_41;
    v71 = 5;
  }
  (*v80)[v71]();
LABEL_41:
  v231 = v79;
  if (*(_DWORD *)v70 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v70, v72, v73, v74, v75, v76, v77, v78);
    WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
  }
  else
  {
    *(_DWORD *)v70 -= 2;
  }
  v81 = a1[2];
  v82 = (uint64_t)*a3;
  v83 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v83 = 0x1200000002;
  *(_QWORD *)(v83 + 8) = "emulateUserGesture";
  v84 = 4;
  *(_DWORD *)(v83 + 16) = 4;
  v234 = (WTF::StringImpl *)v83;
  v238 = (uint64_t (**)())&unk_1E3593AB8;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v240 = 0;
  v241 = &v238;
  v92 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v81, v82, &v234, 0, (uint64_t)&v238);
  v93 = v241;
  if (v241 == &v238)
  {
    v93 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_48;
    v84 = 5;
  }
  (*v93)[v84]();
LABEL_48:
  v230 = v92;
  if (*(_DWORD *)v83 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v83, v85, v86, v87, v88, v89, v90, v91);
    WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
  }
  else
  {
    *(_DWORD *)v83 -= 2;
  }
  v94 = a1[2];
  v95 = (uint64_t)*a3;
  v96 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v96 = 0xC00000002;
  *(_QWORD *)(v96 + 8) = "awaitPromise";
  v97 = 4;
  *(_DWORD *)(v96 + 16) = 4;
  v234 = (WTF::StringImpl *)v96;
  v238 = (uint64_t (**)())&unk_1E3593AB8;
  v239 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v240 = 0;
  v241 = &v238;
  v105 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v94, v95, &v234, 0, (uint64_t)&v238);
  v106 = v241;
  if (v241 == &v238)
  {
    v106 = &v238;
  }
  else
  {
    if (!v241)
      goto LABEL_55;
    v97 = 5;
  }
  (*v106)[v97]();
LABEL_55:
  v229 = v105;
  if (*(_DWORD *)v96 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v96, v98, v99, v100, v101, v102, v103, v104);
    WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
  }
  else
  {
    *(_DWORD *)v96 -= 2;
  }
  v107 = a1[2];
  if (*(_DWORD *)(v107 + 36))
  {
    v108 = WTF::fastCompactMalloc((WTF *)0x20);
    v116 = (WTF::StringImpl *)v108;
    *(_QWORD *)v108 = 0x4400000002;
    *(_QWORD *)(v108 + 8) = "Some arguments of method 'Runtime.callFunctionOn' can't be processed";
    v117 = 4;
    *(_DWORD *)(v108 + 16) = 4;
    if (!*(_BYTE *)(v107 + 48))
    {
      *(_BYTE *)(v107 + 48) = *(_QWORD *)(v107 + 48);
      v117 = *(_DWORD *)v108 + 2;
    }
    LODWORD(v238) = 3;
    *(_DWORD *)v108 = v117;
    v239 = (WTF::StringImpl *)v108;
    v118 = *(unsigned int *)(v107 + 36);
    if ((_DWORD)v118 == *(_DWORD *)(v107 + 32))
    {
      v119 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v107 + 24, v118 + 1, (unint64_t)&v238);
      v120 = *(unsigned int *)(v107 + 36);
      v121 = *(_QWORD *)(v107 + 24) + 16 * v120;
      *(_DWORD *)v121 = *(_DWORD *)v119;
      v122 = *(_QWORD *)(v119 + 8);
      *(_QWORD *)(v119 + 8) = 0;
      *(_QWORD *)(v121 + 8) = v122;
      v123 = v239;
      *(_DWORD *)(v107 + 36) = v120 + 1;
      v239 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
        {
          WTF::StringImpl::~StringImpl(v123, v109, v110, v111, v112, v113, v114, v115);
          WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
        }
        else
        {
          *(_DWORD *)v123 -= 2;
        }
      }
    }
    else
    {
      v125 = *(_QWORD *)(v107 + 24) + 16 * v118;
      *(_DWORD *)v125 = 3;
      *(_QWORD *)(v125 + 8) = v108;
      *(_DWORD *)(v107 + 36) = v118 + 1;
    }
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v109, v110, v111, v112, v113, v114, v115);
      WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  else
  {
    v124 = a1[3];
    if (v124)
    {
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF **, __int16 *, __int16 *, __int16 *, __int16 *, __int16 *))(*(_QWORD *)v124 + 40))(v124, a2, &v237, &v236, &v235, &v233, &v232, &v231, &v230, &v229);
    }
    else
    {
      v209 = a1[4];
      v210 = WTF::fastMalloc((WTF *)0x28);
      v211 = (_DWORD *)a1[2];
      ++*v211;
      *(_DWORD *)(v210 + 8) = 1;
      *(_QWORD *)(v210 + 16) = v211;
      *(_QWORD *)(v210 + 24) = (int)a2;
      *(_BYTE *)(v210 + 32) = 0;
      *(_QWORD *)v210 = off_1E35918B0;
      v238 = (uint64_t (**)())v210;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF **, __int16 *, __int16 *, __int16 *, __int16 *, __int16 *, uint64_t (***)()))(*(_QWORD *)v209 + 24))(v209, &v237, &v236, &v235, &v233, &v232, &v231, &v230, &v229, &v238);
      v212 = v238;
      v238 = 0;
      if (v212)
      {
        if (*((_DWORD *)v212 + 2) == 1)
          (*((void (**)(uint64_t (**)()))*v212 + 1))(v212);
        else
          --*((_DWORD *)v212 + 2);
      }
    }
  }
  v126 = v235;
  v235 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 1)
      WTF::JSONImpl::Value::operator delete(v126, v109, v110, v111, v112, v113, v114, v115);
    else
      --*(_DWORD *)v126;
  }
  v127 = v236;
  v236 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v109, v110, v111, v112, v113, v114, v115);
      WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v237;
  v237 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v109, v110, v111, v112, v113, v114, v115);
      WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::getPreview(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  WTF *v120;
  WTF::StringImpl *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t (**v126)();
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t (***v129)();
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "objectId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v123 = (WTF::StringImpl *)v7;
  v126 = &off_1E3593B90;
  v127 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v128 = 0;
  v129 = &v126;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v125, v5, v6, &v123, 1, (uint64_t)&v126);
  v16 = v129;
  if (v129 == &v126)
  {
    v16 = &v126;
  }
  else
  {
    if (!v129)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4000000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Runtime.getPreview' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v126) = 3;
    *(_DWORD *)v18 = v27;
    v127 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v126);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v127;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v127 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 32))(&v123, *(_QWORD *)(a1 + 32), &v125);
    if (v124)
    {
      if (v124 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::getProperties(v119);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v126) = 5;
      v54 = v123;
      if (v123)
        *(_DWORD *)v123 += 2;
      v127 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v126);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v127;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v127 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v123;
      v123 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v122 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0x700000002;
      *(_QWORD *)(v80 + 8) = "preview";
      *(_DWORD *)(v80 + 16) = 4;
      v120 = v78;
      v121 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v79 + 16), (WTF::AtomStringImpl *)&v121, (const WTF::StringImpl *)&v120, v81, v82, v83, v84, v85, (uint64_t)&v126);
      if ((_BYTE)v128)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v121);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v121;
          if (v121)
            *(_DWORD *)v121 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v120;
      v120 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v121;
      v121 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v122);
      v60 = v122;
      if (!v122)
        goto LABEL_54;
      v61 = *(_DWORD *)v122 - 1;
      if (*(_DWORD *)v122 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v122, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v124 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593A48[v124])(&v126, &v123);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 48))(v34, a2, &v125);
LABEL_20:
  v36 = v125;
  v125 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::getProperties(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (***v55)();
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t (***v68)();
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  int v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::AtomStringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  WTF *v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::AtomStringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  WTF *v200;
  WTF::StringImpl *v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _DWORD **v227;
  uint64_t v228;
  _DWORD *v229;
  _DWORD **v230;
  uint64_t v231;
  _DWORD *v232;
  uint64_t v233;
  WTF *v235;
  WTF::StringImpl *v236;
  WTF *v237;
  __int128 v238;
  int v239;
  __int16 v240;
  uint64_t v241;
  uint64_t v242;
  __int16 v243;
  WTF::StringImpl *v244;
  uint64_t (**v245)();
  WTF::StringImpl *v246;
  uint64_t v247;
  uint64_t (***v248)();
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "objectId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  *(_QWORD *)&v238 = v7;
  v245 = &off_1E3593B90;
  v246 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v247 = 0;
  v248 = &v245;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v244, v5, v6, (WTF::StringImpl **)&v238, 1, (uint64_t)&v245);
  v16 = v248;
  if (v248 == &v245)
  {
    v16 = &v245;
  }
  else
  {
    if (!v248)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (uint64_t)*a3;
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0xD00000002;
  *(_QWORD *)(v19 + 8) = "ownProperties";
  v20 = 4;
  *(_DWORD *)(v19 + 16) = 4;
  *(_QWORD *)&v238 = v19;
  v245 = (uint64_t (**)())&unk_1E3593AB8;
  v246 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v247 = 0;
  v248 = &v245;
  v28 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v17, v18, (WTF::StringImpl **)&v238, 0, (uint64_t)&v245);
  v29 = v248;
  if (v248 == &v245)
  {
    v29 = &v245;
  }
  else
  {
    if (!v248)
      goto LABEL_13;
    v20 = 5;
  }
  (*v29)[v20]();
LABEL_13:
  v243 = v28;
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xA00000002;
  *(_QWORD *)(v32 + 8) = "fetchStart";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  *(_QWORD *)&v238 = v32;
  v245 = &off_1E3593B00;
  v246 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v247 = 0;
  v248 = &v245;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v30, v31, (WTF::StringImpl **)&v238, 0, (uint64_t)&v245);
  v42 = v248;
  if (v248 == &v245)
  {
    v42 = &v245;
  }
  else
  {
    if (!v248)
      goto LABEL_20;
    v33 = 5;
  }
  (*v42)[v33]();
LABEL_20:
  v242 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0xA00000002;
  *(_QWORD *)(v45 + 8) = "fetchCount";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  *(_QWORD *)&v238 = v45;
  v245 = &off_1E3593B00;
  v246 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v247 = 0;
  v248 = &v245;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v43, v44, (WTF::StringImpl **)&v238, 0, (uint64_t)&v245);
  v55 = v248;
  if (v248 == &v245)
  {
    v55 = &v245;
  }
  else
  {
    if (!v248)
      goto LABEL_27;
    v46 = 5;
  }
  (*v55)[v46]();
LABEL_27:
  v241 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  v57 = (uint64_t)*a3;
  v58 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v58 = 0xF00000002;
  *(_QWORD *)(v58 + 8) = "generatePreview";
  v59 = 4;
  *(_DWORD *)(v58 + 16) = 4;
  *(_QWORD *)&v238 = v58;
  v245 = (uint64_t (**)())&unk_1E3593AB8;
  v246 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v247 = 0;
  v248 = &v245;
  v67 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v56, v57, (WTF::StringImpl **)&v238, 0, (uint64_t)&v245);
  v68 = v248;
  if (v248 == &v245)
  {
    v68 = &v245;
  }
  else
  {
    if (!v248)
      goto LABEL_34;
    v59 = 5;
  }
  (*v68)[v59]();
LABEL_34:
  v240 = v67;
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, v60, v61, v62, v63, v64, v65, v66);
    WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
  v69 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v69 + 36))
  {
    v70 = WTF::fastCompactMalloc((WTF *)0x20);
    v78 = (WTF::StringImpl *)v70;
    *(_QWORD *)v70 = 0x4300000002;
    *(_QWORD *)(v70 + 8) = "Some arguments of method 'Runtime.getProperties' can't be processed";
    v79 = 4;
    *(_DWORD *)(v70 + 16) = 4;
    if (!*(_BYTE *)(v69 + 48))
    {
      *(_BYTE *)(v69 + 48) = *(_QWORD *)(v69 + 48);
      v79 = *(_DWORD *)v70 + 2;
    }
    LODWORD(v245) = 3;
    *(_DWORD *)v70 = v79;
    v246 = (WTF::StringImpl *)v70;
    v80 = *(unsigned int *)(v69 + 36);
    if ((_DWORD)v80 == *(_DWORD *)(v69 + 32))
    {
      v81 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v69 + 24, v80 + 1, (unint64_t)&v245);
      v82 = *(unsigned int *)(v69 + 36);
      v83 = *(_QWORD *)(v69 + 24) + 16 * v82;
      *(_DWORD *)v83 = *(_DWORD *)v81;
      v84 = *(_QWORD *)(v81 + 8);
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v83 + 8) = v84;
      v85 = v246;
      *(_DWORD *)(v69 + 36) = v82 + 1;
      v246 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
        {
          WTF::StringImpl::~StringImpl(v85, v71, v72, v73, v74, v75, v76, v77);
          WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
        }
        else
        {
          *(_DWORD *)v85 -= 2;
        }
      }
    }
    else
    {
      v87 = *(_QWORD *)(v69 + 24) + 16 * v80;
      *(_DWORD *)v87 = 3;
      *(_QWORD *)(v87 + 8) = v70;
      *(_DWORD *)(v69 + 36) = v80 + 1;
    }
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
    goto LABEL_48;
  }
  v86 = *(_QWORD *)(a1 + 24);
  if (!v86)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, WTF::StringImpl **, __int16 *, uint64_t *, uint64_t *, __int16 *))(**(_QWORD **)(a1 + 32) + 40))(&v238, *(_QWORD *)(a1 + 32), &v244, &v243, &v242, &v241, &v240);
    if (v239)
    {
      if (v239 != 1)
      {
        v233 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::getDisplayableProperties(v233);
        return;
      }
      v137 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v137 + 48))
        *(_BYTE *)(v137 + 48) = *(_QWORD *)(v137 + 48);
      LODWORD(v245) = 5;
      v138 = (WTF::StringImpl *)v238;
      if ((_QWORD)v238)
        *(_DWORD *)v238 += 2;
      v246 = v138;
      v139 = *(unsigned int *)(v137 + 36);
      if ((_DWORD)v139 == *(_DWORD *)(v137 + 32))
      {
        v140 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v137 + 24, v139 + 1, (unint64_t)&v245);
        v141 = *(unsigned int *)(v137 + 36);
        v142 = *(_QWORD *)(v137 + 24) + 16 * v141;
        *(_DWORD *)v142 = *(_DWORD *)v140;
        v143 = *(_QWORD *)(v140 + 8);
        *(_QWORD *)(v140 + 8) = 0;
        *(_QWORD *)(v142 + 8) = v143;
        v144 = v246;
        *(_DWORD *)(v137 + 36) = v141 + 1;
        v246 = 0;
        if (!v144)
          goto LABEL_99;
        v145 = *(_DWORD *)v144 - 2;
        if (*(_DWORD *)v144 == 2)
        {
          WTF::StringImpl::~StringImpl(v144, v71, v72, v73, v74, v75, v76, v77);
          WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
          goto LABEL_99;
        }
LABEL_96:
        *(_DWORD *)v144 = v145;
        goto LABEL_99;
      }
      v210 = *(_QWORD *)(v137 + 24) + 16 * v139;
      *(_DWORD *)v210 = 5;
      *(_QWORD *)(v210 + 8) = v138;
      *(_DWORD *)(v137 + 36) = v139 + 1;
LABEL_99:
      if (v239 != -1)
        ((void (*)(uint64_t (***)(), __int128 *))off_1E3593A58[v239])(&v245, &v238);
      goto LABEL_48;
    }
    v162 = v238;
    v238 = 0u;
    v163 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v163 = 0x500000001;
    *(_QWORD *)(v163 + 16) = 0;
    *(_OWORD *)(v163 + 24) = 0u;
    v237 = (WTF *)v163;
    v164 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v164 = 0xA00000002;
    *(_QWORD *)(v164 + 8) = "properties";
    *(_DWORD *)(v164 + 16) = 4;
    v235 = (WTF *)v162;
    v236 = (WTF::StringImpl *)v164;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v163 + 16), &v236, (const WTF::StringImpl *)&v235, v165, v166, v167, v168, v169, (uint64_t)&v245);
    if ((_BYTE)v247)
    {
      v177 = (uint64_t *)(v163 + 24);
      v178 = *(unsigned int *)(v163 + 36);
      if ((_DWORD)v178 == *(_DWORD *)(v163 + 32))
      {
        v227 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v177, v178 + 1, (unint64_t)&v236);
        v178 = *(unsigned int *)(v163 + 36);
        v228 = *(_QWORD *)(v163 + 24);
        v229 = *v227;
        if (*v227)
          *v229 += 2;
        *(_QWORD *)(v228 + 8 * v178) = v229;
      }
      else
      {
        v179 = *v177;
        v180 = v236;
        if (v236)
          *(_DWORD *)v236 += 2;
        *(_QWORD *)(v179 + 8 * v178) = v180;
      }
      *(_DWORD *)(v163 + 36) = v178 + 1;
    }
    v181 = v235;
    v235 = 0;
    if (v181)
    {
      if (*(_DWORD *)v181 == 1)
        WTF::JSONImpl::Value::operator delete(v181, v170, v171, v172, v173, v174, v175, v176);
      else
        --*(_DWORD *)v181;
    }
    v182 = v236;
    v236 = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2)
      {
        WTF::StringImpl::~StringImpl(v182, v170, v171, v172, v173, v174, v175, v176);
        WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
        if (*((_QWORD *)&v162 + 1))
          goto LABEL_82;
        goto LABEL_94;
      }
      *(_DWORD *)v182 -= 2;
    }
    if (*((_QWORD *)&v162 + 1))
    {
LABEL_82:
      v183 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v183 = 0x1200000002;
      *(_QWORD *)(v183 + 8) = "internalProperties";
      *(_DWORD *)(v183 + 16) = 4;
      v235 = (WTF *)*((_QWORD *)&v162 + 1);
      v236 = (WTF::StringImpl *)v183;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v163 + 16), &v236, (const WTF::StringImpl *)&v235, v184, v185, v186, v187, v188, (uint64_t)&v245);
      if ((_BYTE)v247)
      {
        v196 = (uint64_t *)(v163 + 24);
        v197 = *(unsigned int *)(v163 + 36);
        if ((_DWORD)v197 == *(_DWORD *)(v163 + 32))
        {
          v230 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v196, v197 + 1, (unint64_t)&v236);
          v197 = *(unsigned int *)(v163 + 36);
          v231 = *(_QWORD *)(v163 + 24);
          v232 = *v230;
          if (*v230)
            *v232 += 2;
          *(_QWORD *)(v231 + 8 * v197) = v232;
        }
        else
        {
          v198 = *v196;
          v199 = v236;
          if (v236)
            *(_DWORD *)v236 += 2;
          *(_QWORD *)(v198 + 8 * v197) = v199;
        }
        *(_DWORD *)(v163 + 36) = v197 + 1;
      }
      v200 = v235;
      v235 = 0;
      if (v200)
      {
        if (*(_DWORD *)v200 == 1)
          WTF::JSONImpl::Value::operator delete(v200, v189, v190, v191, v192, v193, v194, v195);
        else
          --*(_DWORD *)v200;
      }
      v201 = v236;
      v236 = 0;
      if (v201)
      {
        if (*(_DWORD *)v201 == 2)
        {
          WTF::StringImpl::~StringImpl(v201, v189, v190, v191, v192, v193, v194, v195);
          WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
        }
        else
        {
          *(_DWORD *)v201 -= 2;
        }
      }
    }
LABEL_94:
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v237);
    v144 = v237;
    if (!v237)
      goto LABEL_99;
    v145 = *(_DWORD *)v237 - 1;
    if (*(_DWORD *)v237 != 1)
      goto LABEL_96;
    WTF::JSONImpl::Value::operator delete(v237, v71, v72, v73, v74, v75, v76, v77);
    goto LABEL_99;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, __int16 *, uint64_t *, uint64_t *, __int16 *))(*(_QWORD *)v86 + 56))(v86, a2, &v244, &v243, &v242, &v241, &v240);
LABEL_48:
  v88 = v244;
  v244 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::getDisplayableProperties(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t (***v56)();
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  int v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::AtomStringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF *v180;
  WTF::StringImpl *v181;
  unint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _DWORD **v207;
  uint64_t v208;
  _DWORD *v209;
  _DWORD **v210;
  uint64_t v211;
  _DWORD *v212;
  uint64_t v213;
  WTF *v214;
  WTF::StringImpl *v215;
  WTF *v216;
  __int128 v217;
  int v218;
  __int16 v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  uint64_t (**v223)();
  WTF::StringImpl *v224;
  uint64_t v225;
  uint64_t (***v226)();
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "objectId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  *(_QWORD *)&v217 = v8;
  v223 = &off_1E3593B90;
  v224 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v225 = 0;
  v226 = &v223;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v222, v6, v7, (WTF::StringImpl **)&v217, 1, (uint64_t)&v223);
  v17 = v226;
  if (v226 == &v223)
  {
    v17 = &v223;
  }
  else
  {
    if (!v226)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xA00000002;
  *(_QWORD *)(v20 + 8) = "fetchStart";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  *(_QWORD *)&v217 = v20;
  v223 = &off_1E3593B00;
  v224 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v225 = 0;
  v226 = &v223;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v18, v19, (WTF::StringImpl **)&v217, 0, (uint64_t)&v223);
  v30 = v226;
  if (v226 == &v223)
  {
    v30 = &v223;
  }
  else
  {
    if (!v226)
      goto LABEL_13;
    v21 = 5;
  }
  (*v30)[v21]();
LABEL_13:
  v221 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (uint64_t)*a3;
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xA00000002;
  *(_QWORD *)(v33 + 8) = "fetchCount";
  v34 = 4;
  *(_DWORD *)(v33 + 16) = 4;
  *(_QWORD *)&v217 = v33;
  v223 = &off_1E3593B00;
  v224 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v225 = 0;
  v226 = &v223;
  v42 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v31, v32, (WTF::StringImpl **)&v217, 0, (uint64_t)&v223);
  v43 = v226;
  if (v226 == &v223)
  {
    v43 = &v223;
  }
  else
  {
    if (!v226)
      goto LABEL_20;
    v34 = 5;
  }
  (*v43)[v34]();
LABEL_20:
  v220 = v42;
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  v44 = *(_QWORD *)(a1 + 16);
  v45 = (uint64_t)*a3;
  v46 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v46 = 0xF00000002;
  *(_QWORD *)(v46 + 8) = "generatePreview";
  v47 = 4;
  *(_DWORD *)(v46 + 16) = 4;
  *(_QWORD *)&v217 = v46;
  v223 = (uint64_t (**)())&unk_1E3593AB8;
  v224 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v225 = 0;
  v226 = &v223;
  v55 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v44, v45, (WTF::StringImpl **)&v217, 0, (uint64_t)&v223);
  v56 = v226;
  if (v226 == &v223)
  {
    v56 = &v223;
  }
  else
  {
    if (!v226)
      goto LABEL_27;
    v47 = 5;
  }
  (*v56)[v47]();
LABEL_27:
  v219 = v55;
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v46, v48, v49, v50, v51, v52, v53, v54);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  v57 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v57 + 36))
  {
    v58 = WTF::fastCompactMalloc((WTF *)0x20);
    v66 = (WTF::StringImpl *)v58;
    *(_QWORD *)v58 = 0x4E00000002;
    *(_QWORD *)(v58 + 8) = "Some arguments of method 'Runtime.getDisplayableProperties' can't be processed";
    v67 = 4;
    *(_DWORD *)(v58 + 16) = 4;
    if (!*(_BYTE *)(v57 + 48))
    {
      *(_BYTE *)(v57 + 48) = *(_QWORD *)(v57 + 48);
      v67 = *(_DWORD *)v58 + 2;
    }
    LODWORD(v223) = 3;
    *(_DWORD *)v58 = v67;
    v224 = (WTF::StringImpl *)v58;
    v68 = *(unsigned int *)(v57 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v57 + 32))
    {
      v69 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v57 + 24, v68 + 1, (unint64_t)&v223);
      v70 = *(unsigned int *)(v57 + 36);
      v71 = *(_QWORD *)(v57 + 24) + 16 * v70;
      *(_DWORD *)v71 = *(_DWORD *)v69;
      v72 = *(_QWORD *)(v69 + 8);
      *(_QWORD *)(v69 + 8) = 0;
      *(_QWORD *)(v71 + 8) = v72;
      v73 = v224;
      *(_DWORD *)(v57 + 36) = v70 + 1;
      v224 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::~StringImpl(v73, v59, v60, v61, v62, v63, v64, v65);
          WTF::fastFree(v182, v183, v184, v185, v186, v187, v188, v189);
        }
        else
        {
          *(_DWORD *)v73 -= 2;
        }
      }
    }
    else
    {
      v75 = *(_QWORD *)(v57 + 24) + 16 * v68;
      *(_DWORD *)v75 = 3;
      *(_QWORD *)(v75 + 8) = v58;
      *(_DWORD *)(v57 + 36) = v68 + 1;
    }
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
    goto LABEL_41;
  }
  v74 = *(_QWORD *)(a1 + 24);
  if (!v74)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, WTF::StringImpl **, uint64_t *, uint64_t *, __int16 *))(**(_QWORD **)(a1 + 32) + 48))(&v217, *(_QWORD *)(a1 + 32), &v222, &v221, &v220, &v219);
    if (v218)
    {
      if (v218 != 1)
      {
        v213 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::getCollectionEntries(v213);
        return;
      }
      v117 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v117 + 48))
        *(_BYTE *)(v117 + 48) = *(_QWORD *)(v117 + 48);
      LODWORD(v223) = 5;
      v118 = (WTF::StringImpl *)v217;
      if ((_QWORD)v217)
        *(_DWORD *)v217 += 2;
      v224 = v118;
      v119 = *(unsigned int *)(v117 + 36);
      if ((_DWORD)v119 == *(_DWORD *)(v117 + 32))
      {
        v120 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v117 + 24, v119 + 1, (unint64_t)&v223);
        v121 = *(unsigned int *)(v117 + 36);
        v122 = *(_QWORD *)(v117 + 24) + 16 * v121;
        *(_DWORD *)v122 = *(_DWORD *)v120;
        v123 = *(_QWORD *)(v120 + 8);
        *(_QWORD *)(v120 + 8) = 0;
        *(_QWORD *)(v122 + 8) = v123;
        v124 = v224;
        *(_DWORD *)(v117 + 36) = v121 + 1;
        v224 = 0;
        if (!v124)
          goto LABEL_91;
        v125 = *(_DWORD *)v124 - 2;
        if (*(_DWORD *)v124 == 2)
        {
          WTF::StringImpl::~StringImpl(v124, v59, v60, v61, v62, v63, v64, v65);
          WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
          goto LABEL_91;
        }
LABEL_88:
        *(_DWORD *)v124 = v125;
        goto LABEL_91;
      }
      v190 = *(_QWORD *)(v117 + 24) + 16 * v119;
      *(_DWORD *)v190 = 5;
      *(_QWORD *)(v190 + 8) = v118;
      *(_DWORD *)(v117 + 36) = v119 + 1;
LABEL_91:
      if (v218 != -1)
        ((void (*)(uint64_t (***)(), __int128 *))off_1E3593A58[v218])(&v223, &v217);
      goto LABEL_41;
    }
    v142 = v217;
    v217 = 0u;
    v143 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v143 = 0x500000001;
    *(_QWORD *)(v143 + 16) = 0;
    *(_OWORD *)(v143 + 24) = 0u;
    v216 = (WTF *)v143;
    v144 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v144 = 0xA00000002;
    *(_QWORD *)(v144 + 8) = "properties";
    *(_DWORD *)(v144 + 16) = 4;
    v214 = (WTF *)v142;
    v215 = (WTF::StringImpl *)v144;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v143 + 16), &v215, (const WTF::StringImpl *)&v214, v145, v146, v147, v148, v149, (uint64_t)&v223);
    if ((_BYTE)v225)
    {
      v157 = (uint64_t *)(v143 + 24);
      v158 = *(unsigned int *)(v143 + 36);
      if ((_DWORD)v158 == *(_DWORD *)(v143 + 32))
      {
        v207 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v157, v158 + 1, (unint64_t)&v215);
        v158 = *(unsigned int *)(v143 + 36);
        v208 = *(_QWORD *)(v143 + 24);
        v209 = *v207;
        if (*v207)
          *v209 += 2;
        *(_QWORD *)(v208 + 8 * v158) = v209;
      }
      else
      {
        v159 = *v157;
        v160 = v215;
        if (v215)
          *(_DWORD *)v215 += 2;
        *(_QWORD *)(v159 + 8 * v158) = v160;
      }
      *(_DWORD *)(v143 + 36) = v158 + 1;
    }
    v161 = v214;
    v214 = 0;
    if (v161)
    {
      if (*(_DWORD *)v161 == 1)
        WTF::JSONImpl::Value::operator delete(v161, v150, v151, v152, v153, v154, v155, v156);
      else
        --*(_DWORD *)v161;
    }
    v162 = v215;
    v215 = 0;
    if (v162)
    {
      if (*(_DWORD *)v162 == 2)
      {
        WTF::StringImpl::~StringImpl(v162, v150, v151, v152, v153, v154, v155, v156);
        WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
        if (*((_QWORD *)&v142 + 1))
          goto LABEL_74;
        goto LABEL_86;
      }
      *(_DWORD *)v162 -= 2;
    }
    if (*((_QWORD *)&v142 + 1))
    {
LABEL_74:
      v163 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v163 = 0x1200000002;
      *(_QWORD *)(v163 + 8) = "internalProperties";
      *(_DWORD *)(v163 + 16) = 4;
      v214 = (WTF *)*((_QWORD *)&v142 + 1);
      v215 = (WTF::StringImpl *)v163;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v143 + 16), &v215, (const WTF::StringImpl *)&v214, v164, v165, v166, v167, v168, (uint64_t)&v223);
      if ((_BYTE)v225)
      {
        v176 = (uint64_t *)(v143 + 24);
        v177 = *(unsigned int *)(v143 + 36);
        if ((_DWORD)v177 == *(_DWORD *)(v143 + 32))
        {
          v210 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v176, v177 + 1, (unint64_t)&v215);
          v177 = *(unsigned int *)(v143 + 36);
          v211 = *(_QWORD *)(v143 + 24);
          v212 = *v210;
          if (*v210)
            *v212 += 2;
          *(_QWORD *)(v211 + 8 * v177) = v212;
        }
        else
        {
          v178 = *v176;
          v179 = v215;
          if (v215)
            *(_DWORD *)v215 += 2;
          *(_QWORD *)(v178 + 8 * v177) = v179;
        }
        *(_DWORD *)(v143 + 36) = v177 + 1;
      }
      v180 = v214;
      v214 = 0;
      if (v180)
      {
        if (*(_DWORD *)v180 == 1)
          WTF::JSONImpl::Value::operator delete(v180, v169, v170, v171, v172, v173, v174, v175);
        else
          --*(_DWORD *)v180;
      }
      v181 = v215;
      v215 = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2)
        {
          WTF::StringImpl::~StringImpl(v181, v169, v170, v171, v172, v173, v174, v175);
          WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
        }
        else
        {
          *(_DWORD *)v181 -= 2;
        }
      }
    }
LABEL_86:
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v216);
    v124 = v216;
    if (!v216)
      goto LABEL_91;
    v125 = *(_DWORD *)v216 - 1;
    if (*(_DWORD *)v216 != 1)
      goto LABEL_88;
    WTF::JSONImpl::Value::operator delete(v216, v59, v60, v61, v62, v63, v64, v65);
    goto LABEL_91;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t *, uint64_t *, __int16 *))(*(_QWORD *)v74 + 64))(v74, a2, &v222, &v221, &v220, &v219);
LABEL_41:
  v76 = v222;
  v222 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::getCollectionEntries(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (***v55)();
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  int v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::AtomStringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  uint64_t v191;
  WTF *v192;
  WTF::StringImpl *v193;
  WTF *v194;
  WTF::StringImpl *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  uint64_t (**v201)();
  WTF::StringImpl *v202;
  uint64_t v203;
  uint64_t (***v204)();
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "objectId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v195 = (WTF::StringImpl *)v8;
  v201 = &off_1E3593B90;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v203 = 0;
  v204 = &v201;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v200, v6, v7, &v195, 1, (uint64_t)&v201);
  v17 = v204;
  if (v204 == &v201)
  {
    v17 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_6;
    v9 = 5;
  }
  (*v17)[v9]();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0xB00000002;
  *(_QWORD *)(v20 + 8) = "objectGroup";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v195 = (WTF::StringImpl *)v20;
  v201 = &off_1E3593B90;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v203 = 0;
  v204 = &v201;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v199, v18, v19, &v195, 0, (uint64_t)&v201);
  v29 = v204;
  if (v204 == &v201)
  {
    v29 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_13;
    v21 = 5;
  }
  (*v29)[v21]();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (uint64_t)*a3;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0xA00000002;
  *(_QWORD *)(v32 + 8) = "fetchStart";
  v33 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  v195 = (WTF::StringImpl *)v32;
  v201 = &off_1E3593B00;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v203 = 0;
  v204 = &v201;
  v41 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v30, v31, &v195, 0, (uint64_t)&v201);
  v42 = v204;
  if (v204 == &v201)
  {
    v42 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_20;
    v33 = 5;
  }
  (*v42)[v33]();
LABEL_20:
  v198 = v41;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v34, v35, v36, v37, v38, v39, v40);
    WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v43 = *(_QWORD *)(a1 + 16);
  v44 = (uint64_t)*a3;
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0xA00000002;
  *(_QWORD *)(v45 + 8) = "fetchCount";
  v46 = 4;
  *(_DWORD *)(v45 + 16) = 4;
  v195 = (WTF::StringImpl *)v45;
  v201 = &off_1E3593B00;
  v202 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v203 = 0;
  v204 = &v201;
  v54 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v43, v44, &v195, 0, (uint64_t)&v201);
  v55 = v204;
  if (v204 == &v201)
  {
    v55 = &v201;
  }
  else
  {
    if (!v204)
      goto LABEL_27;
    v46 = 5;
  }
  (*v55)[v46]();
LABEL_27:
  v197 = v54;
  if (*(_DWORD *)v45 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v45 -= 2;
  }
  v56 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v56 + 36))
  {
    v57 = WTF::fastCompactMalloc((WTF *)0x20);
    v65 = (WTF::StringImpl *)v57;
    *(_QWORD *)v57 = 0x4A00000002;
    *(_QWORD *)(v57 + 8) = "Some arguments of method 'Runtime.getCollectionEntries' can't be processed";
    v66 = 4;
    *(_DWORD *)(v57 + 16) = 4;
    if (!*(_BYTE *)(v56 + 48))
    {
      *(_BYTE *)(v56 + 48) = *(_QWORD *)(v56 + 48);
      v66 = *(_DWORD *)v57 + 2;
    }
    LODWORD(v201) = 3;
    *(_DWORD *)v57 = v66;
    v202 = (WTF::StringImpl *)v57;
    v67 = *(unsigned int *)(v56 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v56 + 32))
    {
      v68 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v56 + 24, v67 + 1, (unint64_t)&v201);
      v69 = *(unsigned int *)(v56 + 36);
      v70 = *(_QWORD *)(v56 + 24) + 16 * v69;
      *(_DWORD *)v70 = *(_DWORD *)v68;
      v71 = *(_QWORD *)(v68 + 8);
      *(_QWORD *)(v68 + 8) = 0;
      *(_QWORD *)(v70 + 8) = v71;
      v72 = v202;
      *(_DWORD *)(v56 + 36) = v69 + 1;
      v202 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
    }
    else
    {
      v74 = *(_QWORD *)(v56 + 24) + 16 * v67;
      *(_DWORD *)v74 = 3;
      *(_QWORD *)(v74 + 8) = v57;
      *(_DWORD *)(v56 + 36) = v67 + 1;
    }
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
    goto LABEL_41;
  }
  v73 = *(_QWORD *)(a1 + 24);
  if (!v73)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 32) + 56))(&v195, *(_QWORD *)(a1 + 32), &v200, &v199, &v198, &v197);
    if (v196)
    {
      if (v196 != 1)
      {
        v191 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::saveResult(v191);
        return;
      }
      v125 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v125 + 48))
        *(_BYTE *)(v125 + 48) = *(_QWORD *)(v125 + 48);
      LODWORD(v201) = 5;
      v126 = v195;
      if (v195)
        *(_DWORD *)v195 += 2;
      v202 = v126;
      v127 = *(unsigned int *)(v125 + 36);
      if ((_DWORD)v127 == *(_DWORD *)(v125 + 32))
      {
        v128 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v125 + 24, v127 + 1, (unint64_t)&v201);
        v129 = *(unsigned int *)(v125 + 36);
        v130 = *(_QWORD *)(v125 + 24) + 16 * v129;
        *(_DWORD *)v130 = *(_DWORD *)v128;
        v131 = *(_QWORD *)(v128 + 8);
        *(_QWORD *)(v128 + 8) = 0;
        *(_QWORD *)(v130 + 8) = v131;
        v132 = v202;
        *(_DWORD *)(v125 + 36) = v129 + 1;
        v202 = 0;
        if (!v132)
          goto LABEL_82;
        v133 = *(_DWORD *)v132 - 2;
        if (*(_DWORD *)v132 == 2)
        {
          WTF::StringImpl::~StringImpl(v132, v58, v59, v60, v61, v62, v63, v64);
          WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
          goto LABEL_82;
        }
        goto LABEL_79;
      }
      v179 = *(_QWORD *)(v125 + 24) + 16 * v127;
      *(_DWORD *)v179 = 5;
      *(_QWORD *)(v179 + 8) = v126;
      *(_DWORD *)(v125 + 36) = v127 + 1;
    }
    else
    {
      v150 = v195;
      v195 = 0;
      v151 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v151 = 0x500000001;
      *(_QWORD *)(v151 + 24) = 0;
      *(_QWORD *)(v151 + 32) = 0;
      *(_QWORD *)(v151 + 16) = 0;
      v194 = (WTF *)v151;
      v152 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v152 = 0x700000002;
      *(_QWORD *)(v152 + 8) = "entries";
      *(_DWORD *)(v152 + 16) = 4;
      v192 = v150;
      v193 = (WTF::StringImpl *)v152;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v151 + 16), &v193, (const WTF::StringImpl *)&v192, v153, v154, v155, v156, v157, (uint64_t)&v201);
      if ((_BYTE)v203)
      {
        v165 = (uint64_t *)(v151 + 24);
        v166 = *(unsigned int *)(v151 + 36);
        if ((_DWORD)v166 == *(_DWORD *)(v151 + 32))
        {
          v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v165, v166 + 1, (unint64_t)&v193);
          v166 = *(unsigned int *)(v151 + 36);
          v189 = *(_QWORD *)(v151 + 24);
          v190 = *v188;
          if (*v188)
            *v190 += 2;
          *(_QWORD *)(v189 + 8 * v166) = v190;
        }
        else
        {
          v167 = *v165;
          v168 = v193;
          if (v193)
            *(_DWORD *)v193 += 2;
          *(_QWORD *)(v167 + 8 * v166) = v168;
        }
        *(_DWORD *)(v151 + 36) = v166 + 1;
      }
      v169 = v192;
      v192 = 0;
      if (v169)
      {
        if (*(_DWORD *)v169 == 1)
          WTF::JSONImpl::Value::operator delete(v169, v158, v159, v160, v161, v162, v163, v164);
        else
          --*(_DWORD *)v169;
      }
      v170 = v193;
      v193 = 0;
      if (v170)
      {
        if (*(_DWORD *)v170 == 2)
        {
          WTF::StringImpl::~StringImpl(v170, v158, v159, v160, v161, v162, v163, v164);
          WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
        }
        else
        {
          *(_DWORD *)v170 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v194);
      v132 = v194;
      if (!v194)
        goto LABEL_82;
      v133 = *(_DWORD *)v194 - 1;
      if (*(_DWORD *)v194 != 1)
      {
LABEL_79:
        *(_DWORD *)v132 = v133;
        goto LABEL_82;
      }
      WTF::JSONImpl::Value::operator delete(v194, v58, v59, v60, v61, v62, v63, v64);
    }
LABEL_82:
    if (v196 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593A68[v196])(&v201, &v195);
    goto LABEL_41;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t *, uint64_t *))(*(_QWORD *)v73 + 72))(v73, a2, &v200, &v199, &v198, &v197);
LABEL_41:
  v75 = v199;
  v199 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v200;
  v200 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::saveResult(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  int v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF *v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD **v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF *v140;
  uint64_t v141;
  WTF *v142;
  WTF *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  int v146;
  WTF *v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  WTF **v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x500000002;
  *(_QWORD *)(v8 + 8) = "value";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v144 = (WTF::StringImpl *)v8;
  v147 = (WTF *)&off_1E3593C20;
  v150 = &v147;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>>>(&v142, v6, v7, &v144, 1, (uint64_t)&v147);
  v17 = v150;
  if (v150 == &v147)
  {
    v17 = &v147;
  }
  else
  {
    if (!v150)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = a1[2];
  v19 = (uint64_t)*a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x900000002;
  *(_QWORD *)(v20 + 8) = "contextId";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v144 = (WTF::StringImpl *)v20;
  v147 = (WTF *)&off_1E3593B00;
  v148 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v149 = 0;
  v150 = &v147;
  v29 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v18, v19, &v144, 0, (uint64_t)&v147);
  v30 = v150;
  if (v150 == &v147)
  {
    v30 = &v147;
  }
  else
  {
    if (!v150)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v30 + v21))();
LABEL_13:
  v141 = v29;
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v31 = a1[2];
  if (!*(_DWORD *)(v31 + 36))
  {
    v48 = a1[3];
    if (v48)
    {
      v147 = v142;
      v142 = 0;
      (*(void (**)(uint64_t, uint64_t, WTF **, uint64_t *))(*(_QWORD *)v48 + 80))(v48, a2, &v147, &v141);
      v49 = v147;
      v147 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete(v49, v33, v34, v35, v36, v37, v38, v39);
        else
          --*(_DWORD *)v49;
      }
      goto LABEL_29;
    }
    v67 = a1[4];
    v147 = v142;
    v142 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **, uint64_t *))(*(_QWORD *)v67 + 64))(&v144, v67, &v147, &v141);
    v68 = v147;
    v147 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
        WTF::JSONImpl::Value::operator delete(v68, v33, v34, v35, v36, v37, v38, v39);
      else
        --*(_DWORD *)v68;
    }
    if (v146)
    {
      if (v146 != 1)
      {
        v138 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::setSavedResultAlias(v138);
        return;
      }
      v69 = a1[2];
      if (!*(_BYTE *)(v69 + 48))
        *(_BYTE *)(v69 + 48) = *(_QWORD *)(v69 + 48);
      LODWORD(v147) = 5;
      v70 = v145;
      if (v145)
        *(_DWORD *)v145 += 2;
      v148 = v70;
      v71 = *(unsigned int *)(v69 + 36);
      if ((_DWORD)v71 == *(_DWORD *)(v69 + 32))
      {
        v72 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v69 + 24, v71 + 1, (unint64_t)&v147);
        v73 = *(unsigned int *)(v69 + 36);
        v74 = *(_QWORD *)(v69 + 24) + 16 * v73;
        *(_DWORD *)v74 = *(_DWORD *)v72;
        v75 = *(_QWORD *)(v72 + 8);
        *(_QWORD *)(v72 + 8) = 0;
        *(_QWORD *)(v74 + 8) = v75;
        v76 = v148;
        *(_DWORD *)(v69 + 36) = v73 + 1;
        v148 = 0;
        if (!v76)
          goto LABEL_68;
        v77 = *(_DWORD *)v76 - 2;
        if (*(_DWORD *)v76 == 2)
        {
          WTF::StringImpl::~StringImpl(v76, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
          goto LABEL_68;
        }
        goto LABEL_65;
      }
      v126 = *(_QWORD *)(v69 + 24) + 16 * v71;
      *(_DWORD *)v126 = 5;
      *(_QWORD *)(v126 + 8) = v70;
      *(_DWORD *)(v69 + 36) = v71 + 1;
    }
    else
    {
      v94 = v145;
      v95 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
      *v95 = 0x500000001;
      v95[2] = 0;
      v96 = v95 + 2;
      v95[3] = 0;
      v95[4] = 0;
      v140 = (WTF *)v95;
      if (((unint64_t)v94 & 0xFF00000000) != 0)
      {
        v97 = v95;
        v98 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v98 = 0x1000000002;
        *(_QWORD *)(v98 + 8) = "savedResultIndex";
        *(_DWORD *)(v98 + 16) = 4;
        v139 = (WTF::StringImpl *)v98;
        v99 = (double *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v99 = 0x300000001;
        v99[1] = (double)(int)v94;
        v143 = (WTF *)v99;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v96, (WTF::AtomStringImpl *)&v139, (const WTF::StringImpl *)&v143, v100, v101, v102, v103, v104, (uint64_t)&v147);
        if ((_BYTE)v149)
        {
          v112 = v97 + 3;
          v113 = *((unsigned int *)v97 + 9);
          if ((_DWORD)v113 == *((_DWORD *)v97 + 8))
          {
            v135 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v139);
            v113 = *((unsigned int *)v97 + 9);
            v136 = v97[3];
            v137 = *v135;
            if (*v135)
              *v137 += 2;
            *(_QWORD *)(v136 + 8 * v113) = v137;
          }
          else
          {
            v114 = *v112;
            v115 = v139;
            if (v139)
              *(_DWORD *)v139 += 2;
            *(_QWORD *)(v114 + 8 * v113) = v115;
          }
          *((_DWORD *)v97 + 9) = v113 + 1;
        }
        v116 = v143;
        v143 = 0;
        if (v116)
        {
          if (*(_DWORD *)v116 == 1)
            WTF::JSONImpl::Value::operator delete(v116, v105, v106, v107, v108, v109, v110, v111);
          else
            --*(_DWORD *)v116;
        }
        v117 = v139;
        v139 = 0;
        if (v117)
        {
          if (*(_DWORD *)v117 == 2)
          {
            WTF::StringImpl::~StringImpl(v117, v105, v106, v107, v108, v109, v110, v111);
            WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
          }
          else
          {
            *(_DWORD *)v117 -= 2;
          }
        }
      }
      Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v140);
      v76 = v140;
      if (!v140)
        goto LABEL_68;
      v77 = *(_DWORD *)v140 - 1;
      if (*(_DWORD *)v140 != 1)
      {
LABEL_65:
        *(_DWORD *)v76 = v77;
        goto LABEL_68;
      }
      WTF::JSONImpl::Value::operator delete(v140, v33, v34, v35, v36, v37, v38, v39);
    }
LABEL_68:
    if (v146 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E35938E8[v146])(&v147, &v145);
    goto LABEL_29;
  }
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  v40 = (WTF::StringImpl *)v32;
  *(_QWORD *)v32 = 0x4000000002;
  *(_QWORD *)(v32 + 8) = "Some arguments of method 'Runtime.saveResult' can't be processed";
  v41 = 4;
  *(_DWORD *)(v32 + 16) = 4;
  if (!*(_BYTE *)(v31 + 48))
  {
    *(_BYTE *)(v31 + 48) = *(_QWORD *)(v31 + 48);
    v41 = *(_DWORD *)v32 + 2;
  }
  LODWORD(v147) = 3;
  *(_DWORD *)v32 = v41;
  v148 = (WTF::StringImpl *)v32;
  v42 = *(unsigned int *)(v31 + 36);
  if ((_DWORD)v42 == *(_DWORD *)(v31 + 32))
  {
    v43 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31 + 24, v42 + 1, (unint64_t)&v147);
    v44 = *(unsigned int *)(v31 + 36);
    v45 = *(_QWORD *)(v31 + 24) + 16 * v44;
    *(_DWORD *)v45 = *(_DWORD *)v43;
    v46 = *(_QWORD *)(v43 + 8);
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v45 + 8) = v46;
    v47 = v148;
    *(_DWORD *)(v31 + 36) = v44 + 1;
    v148 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
  }
  else
  {
    v50 = *(_QWORD *)(v31 + 24) + 16 * v42;
    *(_DWORD *)v50 = 3;
    *(_QWORD *)(v50 + 8) = v32;
    *(_DWORD *)(v31 + 36) = v42 + 1;
  }
  if (*(_DWORD *)v40 == 2)
  {
    WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
  }
  else
  {
    *(_DWORD *)v40 -= 2;
  }
LABEL_29:
  if (v142)
  {
    if (*(_DWORD *)v142 == 1)
      WTF::JSONImpl::Value::operator delete(v142, v33, v34, v35, v36, v37, v38, v39);
    else
      --*(_DWORD *)v142;
  }
}

void Inspector::RuntimeBackendDispatcher::setSavedResultAlias(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x500000002;
  *(_QWORD *)(v7 + 8) = "alias";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 0, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4900000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Runtime.setSavedResultAlias' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 88))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 72))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::releaseObject(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "objectId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4300000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Runtime.releaseObject' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 96))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 80))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::releaseObjectGroup(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xB00000002;
  *(_QWORD *)(v7 + 8) = "objectGroup";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4800000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Runtime.releaseObjectGroup' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 104))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 88))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::RuntimeBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 112))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 96))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::RuntimeBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 104))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::RuntimeBackendDispatcher::getRuntimeTypesForVariablesAtOffsets(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD **v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  WTF *v116;
  WTF::StringImpl *v117;
  WTF *v118;
  WTF::StringImpl *v119;
  int v120;
  WTF *v121;
  WTF *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WTF **v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x900000002;
  *(_QWORD *)(v7 + 8) = "locations";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v119 = (WTF::StringImpl *)v7;
  v122 = (WTF *)&off_1E3593C68;
  v123 = (WTF::StringImpl *)WTF::JSONImpl::Value::asArray;
  v124 = 0;
  v125 = &v122;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(&v121, v5, v6, &v119, 1, (uint64_t)&v122);
  v16 = v125;
  if (v125 == &v122)
  {
    v16 = &v122;
  }
  else
  {
    if (!v125)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (!*(_DWORD *)(v17 + 36))
  {
    v34 = a1[3];
    if (v34)
    {
      v35 = v121;
      v121 = 0;
      v122 = v35;
      (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v34 + 128))(v34, a2, &v122);
      v36 = v122;
      v122 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
          WTF::JSONImpl::Value::operator delete(v36, v19, v20, v21, v22, v23, v24, v25);
        else
          --*(_DWORD *)v36;
      }
      goto LABEL_22;
    }
    v46 = a1[4];
    v47 = v121;
    v121 = 0;
    v122 = v47;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v46 + 112))(&v119, v46, &v122);
    v48 = v122;
    v122 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v19, v20, v21, v22, v23, v24, v25);
      else
        --*(_DWORD *)v48;
    }
    if (v120)
    {
      if (v120 != 1)
      {
        v115 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcher::enableTypeProfiler(v115);
        return;
      }
      v49 = a1[2];
      if (!*(_BYTE *)(v49 + 48))
        *(_BYTE *)(v49 + 48) = *(_QWORD *)(v49 + 48);
      LODWORD(v122) = 5;
      v50 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      v123 = v50;
      v51 = *(unsigned int *)(v49 + 36);
      if ((_DWORD)v51 == *(_DWORD *)(v49 + 32))
      {
        v52 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v49 + 24, v51 + 1, (unint64_t)&v122);
        v53 = *(unsigned int *)(v49 + 36);
        v54 = *(_QWORD *)(v49 + 24) + 16 * v53;
        *(_DWORD *)v54 = *(_DWORD *)v52;
        v55 = *(_QWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = 0;
        *(_QWORD *)(v54 + 8) = v55;
        v56 = v123;
        *(_DWORD *)(v49 + 36) = v53 + 1;
        v123 = 0;
        if (!v56)
          goto LABEL_59;
        v57 = *(_DWORD *)v56 - 2;
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
          goto LABEL_59;
        }
        goto LABEL_56;
      }
      v103 = *(_QWORD *)(v49 + 24) + 16 * v51;
      *(_DWORD *)v103 = 5;
      *(_QWORD *)(v103 + 8) = v50;
      *(_DWORD *)(v49 + 36) = v51 + 1;
    }
    else
    {
      v74 = v119;
      v119 = 0;
      v75 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v75 = 0x500000001;
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = 0;
      *(_QWORD *)(v75 + 16) = 0;
      v118 = (WTF *)v75;
      v76 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v76 = 0x500000002;
      *(_QWORD *)(v76 + 8) = "types";
      *(_DWORD *)(v76 + 16) = 4;
      v116 = v74;
      v117 = (WTF::StringImpl *)v76;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v75 + 16), &v117, (const WTF::StringImpl *)&v116, v77, v78, v79, v80, v81, (uint64_t)&v122);
      if ((_BYTE)v124)
      {
        v89 = (uint64_t *)(v75 + 24);
        v90 = *(unsigned int *)(v75 + 36);
        if ((_DWORD)v90 == *(_DWORD *)(v75 + 32))
        {
          v112 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v117);
          v90 = *(unsigned int *)(v75 + 36);
          v113 = *(_QWORD *)(v75 + 24);
          v114 = *v112;
          if (*v112)
            *v114 += 2;
          *(_QWORD *)(v113 + 8 * v90) = v114;
        }
        else
        {
          v91 = *v89;
          v92 = v117;
          if (v117)
            *(_DWORD *)v117 += 2;
          *(_QWORD *)(v91 + 8 * v90) = v92;
        }
        *(_DWORD *)(v75 + 36) = v90 + 1;
      }
      v93 = v116;
      v116 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 1)
          WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
        else
          --*(_DWORD *)v93;
      }
      v94 = v117;
      v117 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
        {
          WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v94 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v118);
      v56 = v118;
      if (!v118)
        goto LABEL_59;
      v57 = *(_DWORD *)v118 - 1;
      if (*(_DWORD *)v118 != 1)
      {
LABEL_56:
        *(_DWORD *)v56 = v57;
        goto LABEL_59;
      }
      WTF::JSONImpl::Value::operator delete(v118, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_59:
    if (v120 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E3593A78[v120])(&v122, &v119);
    goto LABEL_22;
  }
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  v26 = (WTF::StringImpl *)v18;
  *(_QWORD *)v18 = 0x5A00000002;
  *(_QWORD *)(v18 + 8) = "Some arguments of method 'Runtime.getRuntimeTypesForVariablesAtOffsets' can't be processed";
  v27 = 4;
  *(_DWORD *)(v18 + 16) = 4;
  if (!*(_BYTE *)(v17 + 48))
  {
    *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
    v27 = *(_DWORD *)v18 + 2;
  }
  LODWORD(v122) = 3;
  *(_DWORD *)v18 = v27;
  v123 = (WTF::StringImpl *)v18;
  v28 = *(unsigned int *)(v17 + 36);
  if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
  {
    v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v122);
    v30 = *(unsigned int *)(v17 + 36);
    v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
    *(_DWORD *)v31 = *(_DWORD *)v29;
    v32 = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v29 + 8) = 0;
    *(_QWORD *)(v31 + 8) = v32;
    v33 = v123;
    *(_DWORD *)(v17 + 36) = v30 + 1;
    v123 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  else
  {
    v37 = *(_QWORD *)(v17 + 24) + 16 * v28;
    *(_DWORD *)v37 = 3;
    *(_QWORD *)(v37 + 8) = v18;
    *(_DWORD *)(v17 + 36) = v28 + 1;
  }
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
LABEL_22:
  if (v121)
  {
    if (*(_DWORD *)v121 == 1)
      WTF::JSONImpl::Value::operator delete(v121, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v121;
  }
}

void Inspector::RuntimeBackendDispatcher::enableTypeProfiler(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 120))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::RuntimeBackendDispatcher::disableTypeProfiler(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 144))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 128))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::RuntimeBackendDispatcher::enableControlFlowProfiler(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 152))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 136))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::RuntimeBackendDispatcher::disableControlFlowProfiler(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 160))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 144))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::RuntimeBackendDispatcher::getBasicBlocks(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  int v121;
  WTF *v122;
  WTF::StringImpl *v123;
  WTF *v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  uint64_t (**v128)();
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t (***v131)();
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "sourceID";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v125 = (WTF::StringImpl *)v7;
  v128 = &off_1E3593B90;
  v129 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v130 = 0;
  v131 = &v128;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v127, v5, v6, &v125, 1, (uint64_t)&v128);
  v16 = v131;
  if (v131 == &v128)
  {
    v16 = &v128;
  }
  else
  {
    if (!v131)
      goto LABEL_6;
    v8 = 5;
  }
  (*v16)[v8]();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4400000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Runtime.getBasicBlocks' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v128) = 3;
    *(_DWORD *)v18 = v27;
    v129 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v128);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v129;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v129 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_20;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (!v34)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 152))(&v125, *(_QWORD *)(a1 + 32), &v127);
    if (v126)
    {
      if (v126 != 1)
      {
        v119 = std::__throw_bad_variant_access[abi:sn180100]();
        Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback::AwaitPromiseCallback(v119, v120, v121);
        return;
      }
      v53 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(v53 + 48))
        *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
      LODWORD(v128) = 5;
      v54 = v125;
      if (v125)
        *(_DWORD *)v125 += 2;
      v129 = v54;
      v55 = *(unsigned int *)(v53 + 36);
      if ((_DWORD)v55 == *(_DWORD *)(v53 + 32))
      {
        v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v128);
        v57 = *(unsigned int *)(v53 + 36);
        v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
        *(_DWORD *)v58 = *(_DWORD *)v56;
        v59 = *(_QWORD *)(v56 + 8);
        *(_QWORD *)(v56 + 8) = 0;
        *(_QWORD *)(v58 + 8) = v59;
        v60 = v129;
        *(_DWORD *)(v53 + 36) = v57 + 1;
        v129 = 0;
        if (!v60)
          goto LABEL_54;
        v61 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          goto LABEL_54;
        }
        goto LABEL_51;
      }
      v107 = *(_QWORD *)(v53 + 24) + 16 * v55;
      *(_DWORD *)v107 = 5;
      *(_QWORD *)(v107 + 8) = v54;
      *(_DWORD *)(v53 + 36) = v55 + 1;
    }
    else
    {
      v78 = v125;
      v125 = 0;
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      *(_QWORD *)(v79 + 16) = 0;
      v124 = (WTF *)v79;
      v80 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v80 = 0xB00000002;
      *(_QWORD *)(v80 + 8) = "basicBlocks";
      *(_DWORD *)(v80 + 16) = 4;
      v122 = v78;
      v123 = (WTF::StringImpl *)v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v79 + 16), &v123, (const WTF::StringImpl *)&v122, v81, v82, v83, v84, v85, (uint64_t)&v128);
      if ((_BYTE)v130)
      {
        v93 = (uint64_t *)(v79 + 24);
        v94 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v94 == *(_DWORD *)(v79 + 32))
        {
          v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v123);
          v94 = *(unsigned int *)(v79 + 36);
          v117 = *(_QWORD *)(v79 + 24);
          v118 = *v116;
          if (*v116)
            *v118 += 2;
          *(_QWORD *)(v117 + 8 * v94) = v118;
        }
        else
        {
          v95 = *v93;
          v96 = v123;
          if (v123)
            *(_DWORD *)v123 += 2;
          *(_QWORD *)(v95 + 8 * v94) = v96;
        }
        *(_DWORD *)(v79 + 36) = v94 + 1;
      }
      v97 = v122;
      v122 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 1)
          WTF::JSONImpl::Value::operator delete(v97, v86, v87, v88, v89, v90, v91, v92);
        else
          --*(_DWORD *)v97;
      }
      v98 = v123;
      v123 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
        {
          WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
          WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
        }
        else
        {
          *(_DWORD *)v98 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v124);
      v60 = v124;
      if (!v124)
        goto LABEL_54;
      v61 = *(_DWORD *)v124 - 1;
      if (*(_DWORD *)v124 != 1)
      {
LABEL_51:
        *(_DWORD *)v60 = v61;
        goto LABEL_54;
      }
      WTF::JSONImpl::Value::operator delete(v124, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_54:
    if (v126 != -1)
      ((void (*)(uint64_t (***)(), WTF::StringImpl **))off_1E3593A88[v126])(&v128, &v125);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 168))(v34, a2, &v127);
LABEL_20:
  v36 = v127;
  v127 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

uint64_t Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback::AwaitPromiseCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591890;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E3591890;
  return result;
}

void Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback::sendSuccess(uint64_t a1, WTF **a2, char *a3, uint64_t a4)
{
  WTF *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD **v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD **v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD **v88;
  uint64_t v89;
  _DWORD *v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  _BYTE v94[16];
  char v95;

  v8 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *((_QWORD *)v8 + 2) = 0;
  v9 = (uint64_t *)((char *)v8 + 16);
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v92 = v8;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x600000002;
  *(_QWORD *)(v10 + 8) = "result";
  *(_DWORD *)(v10 + 16) = 4;
  v93 = (WTF *)v10;
  v11 = *a2;
  *a2 = 0;
  v91 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)v8 + 2, (WTF::AtomStringImpl *)&v93, (const WTF::StringImpl *)&v91, v12, v13, v14, v15, v16, (uint64_t)v94);
  if (v95)
  {
    v24 = (uint64_t *)((char *)v8 + 24);
    v25 = *((unsigned int *)v8 + 9);
    if ((_DWORD)v25 == *((_DWORD *)v8 + 8))
    {
      v82 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v93);
      v25 = *((unsigned int *)v8 + 9);
      v83 = *((_QWORD *)v8 + 3);
      v84 = *v82;
      if (*v82)
        *v84 += 2;
      *(_QWORD *)(v83 + 8 * v25) = v84;
    }
    else
    {
      v26 = *v24;
      v27 = v93;
      if (v93)
        *(_DWORD *)v93 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *((_DWORD *)v8 + 9) = v25 + 1;
  }
  v28 = v91;
  v91 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  v29 = v93;
  v93 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  if (a3[1])
  {
    v30 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v30 = 0x900000002;
    *(_QWORD *)(v30 + 8) = "wasThrown";
    *(_DWORD *)(v30 + 16) = 4;
    v91 = (WTF *)v30;
    if (!a3[1])
      goto LABEL_62;
    v31 = *a3;
    v32 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v32 = 0x100000001;
    *((_BYTE *)v32 + 8) = v31;
    v93 = v32;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v91, (const WTF::StringImpl *)&v93, v33, v34, v35, v36, v37, (uint64_t)v94);
    if (v95)
    {
      v38 = (uint64_t *)((char *)v8 + 24);
      v39 = *((unsigned int *)v8 + 9);
      if ((_DWORD)v39 == *((_DWORD *)v8 + 8))
      {
        v85 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v91);
        v39 = *((unsigned int *)v8 + 9);
        v86 = *((_QWORD *)v8 + 3);
        v87 = *v85;
        if (*v85)
          *v87 += 2;
        *(_QWORD *)(v86 + 8 * v39) = v87;
      }
      else
      {
        v40 = *v38;
        v41 = v91;
        if (v91)
          *(_DWORD *)v91 += 2;
        *(_QWORD *)(v40 + 8 * v39) = v41;
      }
      *((_DWORD *)v8 + 9) = v39 + 1;
    }
    v42 = v93;
    v93 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1)
        WTF::JSONImpl::Value::operator delete(v42, v17, v18, v19, v20, v21, v22, v23);
      else
        --*(_DWORD *)v42;
    }
    v43 = v91;
    v91 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a4 + 4))
  {
    v44 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v44 = 0x1000000002;
    *(_QWORD *)(v44 + 8) = "savedResultIndex";
    *(_DWORD *)(v44 + 16) = 4;
    v91 = (WTF *)v44;
    if (*(_BYTE *)(a4 + 4))
    {
      v45 = *(_DWORD *)a4;
      v46 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = 0x300000001;
      v46[1] = (double)v45;
      v93 = (WTF *)v46;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v91, (const WTF::StringImpl *)&v93, v47, v48, v49, v50, v51, (uint64_t)v94);
      if (v95)
      {
        v52 = (uint64_t *)((char *)v8 + 24);
        v53 = *((unsigned int *)v8 + 9);
        if ((_DWORD)v53 == *((_DWORD *)v8 + 8))
        {
          v88 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v91);
          v53 = *((unsigned int *)v8 + 9);
          v89 = *((_QWORD *)v8 + 3);
          v90 = *v88;
          if (*v88)
            *v90 += 2;
          *(_QWORD *)(v89 + 8 * v53) = v90;
        }
        else
        {
          v54 = *v52;
          v55 = v91;
          if (v91)
            *(_DWORD *)v91 += 2;
          *(_QWORD *)(v54 + 8 * v53) = v55;
        }
        *((_DWORD *)v8 + 9) = v53 + 1;
      }
      v56 = v93;
      v93 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 1)
          WTF::JSONImpl::Value::operator delete(v56, v17, v18, v19, v20, v21, v22, v23);
        else
          --*(_DWORD *)v56;
      }
      v57 = v91;
      v91 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
        {
          WTF::StringImpl::~StringImpl(v57, v17, v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v57 -= 2;
        }
      }
      goto LABEL_41;
    }
LABEL_62:
    __break(1u);
    return;
  }
LABEL_41:
  if (*(_BYTE *)(a1 + 32)
    || (*(_BYTE *)(a1 + 32) = 1,
        Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v92),
        (v8 = v92) != 0))
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete(v8, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v8;
  }
}

uint64_t Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback::CallFunctionOnCallback(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E35918B0;
  return result;
}

{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E35918B0;
  return result;
}

void Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback::sendSuccess(uint64_t a1, WTF **a2, char *a3)
{
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  char v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD **v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD **v60;
  uint64_t v61;
  _DWORD *v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  _BYTE v66[16];
  char v67;

  v6 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  v64 = v6;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "result";
  *(_DWORD *)(v7 + 16) = 4;
  v65 = (WTF *)v7;
  v8 = *a2;
  *a2 = 0;
  v63 = v8;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)v6 + 2, (WTF::AtomStringImpl *)&v65, (const WTF::StringImpl *)&v63, v9, v10, v11, v12, v13, (uint64_t)v66);
  if (v67)
  {
    v21 = (uint64_t *)((char *)v6 + 24);
    v22 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v22 == *((_DWORD *)v6 + 8))
    {
      v57 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v65);
      v22 = *((unsigned int *)v6 + 9);
      v58 = *((_QWORD *)v6 + 3);
      v59 = *v57;
      if (*v57)
        *v59 += 2;
      *(_QWORD *)(v58 + 8 * v22) = v59;
    }
    else
    {
      v23 = *v21;
      v24 = v65;
      if (v65)
        *(_DWORD *)v65 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
    }
    *((_DWORD *)v6 + 9) = v22 + 1;
  }
  v25 = v63;
  v63 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::JSONImpl::Value::operator delete(v25, v14, v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v25;
  }
  v26 = v65;
  v65 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (a3[1])
  {
    v27 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v27 = 0x900000002;
    *(_QWORD *)(v27 + 8) = "wasThrown";
    *(_DWORD *)(v27 + 16) = 4;
    v63 = (WTF *)v27;
    if (!a3[1])
    {
      __break(1u);
      return;
    }
    v28 = *a3;
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = 0x100000001;
    *((_BYTE *)v29 + 8) = v28;
    v65 = v29;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v6 + 2, (WTF::AtomStringImpl *)&v63, (const WTF::StringImpl *)&v65, v30, v31, v32, v33, v34, (uint64_t)v66);
    if (v67)
    {
      v35 = (uint64_t *)((char *)v6 + 24);
      v36 = *((unsigned int *)v6 + 9);
      if ((_DWORD)v36 == *((_DWORD *)v6 + 8))
      {
        v60 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v63);
        v36 = *((unsigned int *)v6 + 9);
        v61 = *((_QWORD *)v6 + 3);
        v62 = *v60;
        if (*v60)
          *v62 += 2;
        *(_QWORD *)(v61 + 8 * v36) = v62;
      }
      else
      {
        v37 = *v35;
        v38 = v63;
        if (v63)
          *(_DWORD *)v63 += 2;
        *(_QWORD *)(v37 + 8 * v36) = v38;
      }
      *((_DWORD *)v6 + 9) = v36 + 1;
    }
    v39 = v65;
    v65 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::JSONImpl::Value::operator delete(v39, v14, v15, v16, v17, v18, v19, v20);
      else
        --*(_DWORD *)v39;
    }
    v40 = v63;
    v63 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v14, v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 32)
    || (*(_BYTE *)(a1 + 32) = 1,
        Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), &v64),
        (v6 = v64) != 0))
  {
    if (*(_DWORD *)v6 == 1)
      WTF::JSONImpl::Value::operator delete(v6, v14, v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v6;
  }
}

void Inspector::ScriptProfilerBackendDispatcher::create(Inspector::ScriptProfilerBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35918D0;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xE00000002;
  *(_QWORD *)(v8 + 8) = "ScriptProfiler";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::ScriptProfilerBackendDispatcher *Inspector::ScriptProfilerBackendDispatcher::ScriptProfilerBackendDispatcher(Inspector::ScriptProfilerBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::ScriptProfilerBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ScriptProfilerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35918D0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xE00000002;
  *(_QWORD *)(v5 + 8) = "ScriptProfiler";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ScriptProfilerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35918D0;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xE00000002;
  *(_QWORD *)(v5 + 8) = "ScriptProfiler";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::ScriptProfilerBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL4 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"startTracking", 13))
  {
    Inspector::ScriptProfilerBackendDispatcher::startTracking(a1, a2, (uint64_t *)&v72);
    goto LABEL_29;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"stopTracking", 12))
  {
    Inspector::ScriptProfilerBackendDispatcher::stopTracking(a1, a2);
    goto LABEL_29;
  }
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *a3;
  if (*a3)
  {
    v26 = *(_DWORD *)(v25 + 4);
    *(_DWORD *)v25 += 2;
    if (v26 < 0)
    {
LABEL_41:
      v71 = 0;
      goto LABEL_42;
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = __OFADD__(v26, 15);
  v28 = v26 + 15;
  if (v27 || __OFADD__(v28, 16))
    goto LABEL_41;
  v29 = !v25 || (*(_BYTE *)(v25 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v28 + 16), v29, (int8x16_t *)"'ScriptProfiler.", 0x10u, v25, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v30 = v71;
  if (!v71)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x198665AACLL);
  }
  if (!*(_BYTE *)(v24 + 48))
    *(_BYTE *)(v24 + 48) = *(_QWORD *)(v24 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v30 += 2;
  v74 = v30;
  v31 = *(unsigned int *)(v24 + 36);
  if ((_DWORD)v31 == *(_DWORD *)(v24 + 32))
  {
    v32 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 24, v31 + 1, (unint64_t)&v73);
    v33 = *(unsigned int *)(v24 + 36);
    v34 = *(_QWORD *)(v24 + 24) + 16 * v33;
    *(_DWORD *)v34 = *(_DWORD *)v32;
    v35 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v34 + 8) = v35;
    v36 = v74;
    *(_DWORD *)(v24 + 36) = v33 + 1;
    v74 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v24 + 24) + 16 * v31;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v30;
    *(_DWORD *)(v24 + 36) = v31 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v25)
        goto LABEL_29;
      goto LABEL_27;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v25)
    goto LABEL_29;
LABEL_27:
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v25 -= 2;
  }
LABEL_29:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::ScriptProfilerBackendDispatcher::startTracking(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  __int16 v83;
  WTF *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF **v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xE00000002;
  *(_QWORD *)(v7 + 8) = "includeSamples";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v84 = (WTF *)&unk_1E3593AB8;
  v85 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v86 = 0;
  v87 = &v84;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 0, (uint64_t)&v84);
  v17 = v87;
  if (v87 == &v84)
  {
    v17 = &v84;
  }
  else
  {
    if (!v87)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  v83 = v16;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4A00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'ScriptProfiler.startTracking' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v84) = 3;
    *(_DWORD *)v19 = v28;
    v85 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v84);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v85;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v85 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_32:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v35 + 16))(v35, a2, &v83);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr, _QWORD, __int16 *))(a1 + 32))(&v81, *(_QWORD *)(a1 + 32), &v83);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v84 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v84);
    v52 = v84;
    if (!v84)
      goto LABEL_38;
    v53 = *(_DWORD *)v84 - 1;
    if (*(_DWORD *)v84 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v84, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v84) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v85 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_38;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v84);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v85;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v85 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_38;
    }
LABEL_35:
    *(_DWORD *)v52 = v53;
  }
LABEL_38:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_32;
    }
  }
}

void Inspector::ScriptProfilerBackendDispatcher::stopTracking(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::ServiceWorkerBackendDispatcher::create(Inspector::ServiceWorkerBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E35918F8;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xD00000002;
  *(_QWORD *)(v8 + 8) = "ServiceWorker";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::ServiceWorkerBackendDispatcher *Inspector::ServiceWorkerBackendDispatcher::ServiceWorkerBackendDispatcher(Inspector::ServiceWorkerBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::ServiceWorkerBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ServiceWorkerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35918F8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xD00000002;
  *(_QWORD *)(v5 + 8) = "ServiceWorker";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::ServiceWorkerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E35918F8;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0xD00000002;
  *(_QWORD *)(v5 + 8) = "ServiceWorker";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::ServiceWorkerBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  _BOOL4 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"getInitializationInfo", 21))
  {
    Inspector::ServiceWorkerBackendDispatcher::getInitializationInfo(a1, a2);
    goto LABEL_26;
  }
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *a3;
  if (*a3)
  {
    v26 = *(_DWORD *)(v25 + 4);
    *(_DWORD *)v25 += 2;
    if (v26 < 0)
    {
LABEL_39:
      v71 = 0;
      goto LABEL_40;
    }
  }
  else
  {
    v26 = 0;
  }
  v27 = __OFADD__(v26, 15);
  v28 = v26 + 15;
  if (v27 || __OFADD__(v28, 15))
    goto LABEL_39;
  v29 = !v25 || (*(_BYTE *)(v25 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v28 + 15), v29, (int8x16_t *)"'ServiceWorker.", 0xFu, v25, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v30 = v71;
  if (!v71)
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x1986664FCLL);
  }
  if (!*(_BYTE *)(v24 + 48))
    *(_BYTE *)(v24 + 48) = *(_QWORD *)(v24 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v30 += 2;
  v74 = v30;
  v31 = *(unsigned int *)(v24 + 36);
  if ((_DWORD)v31 == *(_DWORD *)(v24 + 32))
  {
    v32 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 24, v31 + 1, (unint64_t)&v73);
    v33 = *(unsigned int *)(v24 + 36);
    v34 = *(_QWORD *)(v24 + 24) + 16 * v33;
    *(_DWORD *)v34 = *(_DWORD *)v32;
    v35 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v34 + 8) = v35;
    v36 = v74;
    *(_DWORD *)(v24 + 36) = v33 + 1;
    v74 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  else
  {
    v37 = *(_QWORD *)(v24 + 24) + 16 * v31;
    *(_DWORD *)v37 = 2;
    *(_QWORD *)(v37 + 8) = v30;
    *(_DWORD *)(v24 + 36) = v31 + 1;
  }
  v38 = v71;
  v71 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v25)
        goto LABEL_26;
      goto LABEL_24;
    }
    *(_DWORD *)v38 -= 2;
  }
  if (!v25)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v25 -= 2;
  }
LABEL_26:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::ServiceWorkerBackendDispatcher::getInitializationInfo(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  Inspector::TargetBackendDispatcher *v69;
  Inspector::BackendDispatcher *v70;
  Inspector::TargetBackendDispatcherHandler *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  WTF::StringImpl *v75;
  int v76;
  int v77;
  WTF::StringImpl *v78;
  char v79;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v75);
  if (v76)
  {
    if (v76 != 1)
    {
      v69 = (Inspector::TargetBackendDispatcher *)std::__throw_bad_variant_access[abi:sn180100]();
      Inspector::TargetBackendDispatcher::create(v69, v70, v71);
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (!*(_BYTE *)(v5 + 48))
      *(_BYTE *)(v5 + 48) = *(_QWORD *)(v5 + 48);
    v77 = 5;
    v6 = v75;
    if (v75)
      *(_DWORD *)v75 += 2;
    v78 = v6;
    v7 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(v5 + 32))
    {
      v8 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 24, v7 + 1, (unint64_t)&v77);
      v16 = *(unsigned int *)(v5 + 36);
      v17 = *(_QWORD *)(v5 + 24) + 16 * v16;
      *(_DWORD *)v17 = *(_DWORD *)v8;
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v17 + 8) = v18;
      v19 = v78;
      *(_DWORD *)(v5 + 36) = v16 + 1;
      v78 = 0;
      if (!v19)
        goto LABEL_29;
      v20 = *(_DWORD *)v19 - 2;
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    v57 = *(_QWORD *)(v5 + 24) + 16 * v7;
    *(_DWORD *)v57 = 5;
    *(_QWORD *)(v57 + 8) = v6;
    *(_DWORD *)(v5 + 36) = v7 + 1;
  }
  else
  {
    v29 = v75;
    v75 = 0;
    v30 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v30 = 0x500000001;
    *(_QWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    v74 = (WTF *)v30;
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x400000002;
    *(_QWORD *)(v31 + 8) = "info";
    *(_DWORD *)(v31 + 16) = 4;
    v72 = v29;
    v73 = (WTF::StringImpl *)v31;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v30 + 16), (WTF::AtomStringImpl *)&v73, (const WTF::StringImpl *)&v72, v32, v33, v34, v35, v36, (uint64_t)&v77);
    if (v79)
    {
      v44 = (uint64_t *)(v30 + 24);
      v45 = *(unsigned int *)(v30 + 36);
      if ((_DWORD)v45 == *(_DWORD *)(v30 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v73);
        v45 = *(unsigned int *)(v30 + 36);
        v67 = *(_QWORD *)(v30 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v45) = v68;
      }
      else
      {
        v46 = *v44;
        v47 = v73;
        if (v73)
          *(_DWORD *)v73 += 2;
        *(_QWORD *)(v46 + 8 * v45) = v47;
      }
      *(_DWORD *)(v30 + 36) = v45 + 1;
    }
    v48 = v72;
    v72 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
      else
        --*(_DWORD *)v48;
    }
    v49 = v73;
    v73 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v74);
    v19 = v74;
    if (!v74)
      goto LABEL_29;
    v20 = *(_DWORD *)v74 - 1;
    if (*(_DWORD *)v74 != 1)
    {
LABEL_27:
      *(_DWORD *)v19 = v20;
      goto LABEL_29;
    }
    WTF::JSONImpl::Value::operator delete(v74, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_29:
  if (v76 != -1)
    ((void (*)(int *, WTF::StringImpl **))off_1E3593A98[v76])(&v77, &v75);
}

void Inspector::TargetBackendDispatcher::create(Inspector::TargetBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591920;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "Target";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::TargetBackendDispatcher *Inspector::TargetBackendDispatcher::TargetBackendDispatcher(Inspector::TargetBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::TargetBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::TargetBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591920;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Target";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::TargetBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591920;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Target";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::TargetBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"setPauseOnStart", 15))
  {
    Inspector::TargetBackendDispatcher::setPauseOnStart(a1, a2, (uint64_t *)&v72);
    goto LABEL_31;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"resume", 6))
  {
    Inspector::TargetBackendDispatcher::resume(a1, a2, &v72);
    goto LABEL_31;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"sendMessageToTarget", 19))
  {
    Inspector::TargetBackendDispatcher::sendMessageToTarget(a1, a2, &v72);
    goto LABEL_31;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_43:
      v71 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 8))
    goto LABEL_43;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 8), v37, (int8x16_t *)"'Target.", 8u, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x198666D20);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_31;
      goto LABEL_29;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_31:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::TargetBackendDispatcher::setPauseOnStart(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xC00000002;
  *(_QWORD *)(v7 + 8) = "pauseOnStart";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4400000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Target.setPauseOnStart' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 16))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::TargetBackendDispatcher::resume(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "targetId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x3B00000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Target.resume' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 24))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 8))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::TargetBackendDispatcher::sendMessageToTarget(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  char v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF **v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "targetId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v119 = (WTF::StringImpl *)v8;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v122, v6, v7, &v119, 1, (uint64_t)&v123);
  v17 = v126;
  if (v126 == &v123)
  {
    v17 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "message";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v119 = (WTF::StringImpl *)v20;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v121, v18, v19, &v119, 1, (uint64_t)&v123);
  v29 = v126;
  if (v126 == &v123)
  {
    v29 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4800000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Target.sendMessageToTarget' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v123) = 3;
    *(_DWORD *)v31 = v40;
    v124 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v123);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v124;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v124 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v100 = v39;
    goto LABEL_48;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 32))(v47, a2, &v122, &v121);
    goto LABEL_27;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(&v119, *(_QWORD *)(a1 + 32), &v122, &v121);
  if (!v120)
  {
    v109 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v109 = 0x500000001;
    *((_QWORD *)v109 + 3) = 0;
    *((_QWORD *)v109 + 4) = 0;
    *((_QWORD *)v109 + 2) = 0;
    v123 = v109;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v123);
    v90 = v123;
    if (!v123)
      goto LABEL_54;
    v91 = *(_DWORD *)v123 - 1;
    if (*(_DWORD *)v123 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v123, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_54;
    }
    goto LABEL_51;
  }
  v83 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v83 + 48))
    *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
  LODWORD(v123) = 5;
  v84 = v119;
  if (v119)
    *(_DWORD *)v119 += 2;
  v124 = v84;
  v85 = *(unsigned int *)(v83 + 36);
  if ((_DWORD)v85 != *(_DWORD *)(v83 + 32))
  {
    v118 = *(_QWORD *)(v83 + 24) + 16 * v85;
    *(_DWORD *)v118 = 5;
    *(_QWORD *)(v118 + 8) = v84;
    *(_DWORD *)(v83 + 36) = v85 + 1;
    goto LABEL_54;
  }
  v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v123);
  v87 = *(unsigned int *)(v83 + 36);
  v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
  *(_DWORD *)v88 = *(_DWORD *)v86;
  v89 = *(_QWORD *)(v86 + 8);
  *(_QWORD *)(v86 + 8) = 0;
  *(_QWORD *)(v88 + 8) = v89;
  v90 = v124;
  *(_DWORD *)(v83 + 36) = v87 + 1;
  v124 = 0;
  if (v90)
  {
    v91 = *(_DWORD *)v90 - 2;
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      goto LABEL_54;
    }
LABEL_51:
    *(_DWORD *)v90 = v91;
  }
LABEL_54:
  if (v120)
  {
    v100 = v119;
    v119 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
LABEL_48:
        WTF::StringImpl::~StringImpl(v100, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
        goto LABEL_27;
      }
      *(_DWORD *)v100 -= 2;
    }
  }
LABEL_27:
  v49 = v121;
  v121 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v122;
  v122 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::TimelineBackendDispatcher::create(Inspector::TimelineBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591948;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "Timeline";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::TimelineBackendDispatcher *Inspector::TimelineBackendDispatcher::TimelineBackendDispatcher(Inspector::TimelineBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::TimelineBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::TimelineBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591948;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "Timeline";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::TimelineBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591948;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "Timeline";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::TimelineBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  void (*v27)(_QWORD *, uint64_t, WTF **);
  uint64_t v28;
  _QWORD *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl **v100;
  const WTF::StringImpl *v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  int i;
  unsigned int v106;
  WTF *v107;
  WTF::StringImpl *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  WTF::StringImpl *v176;
  void (*v177)(uint64_t, uint64_t, uint64_t *);
  uint64_t v178;
  WTF::StringImpl *v179;
  void (*v180)(uint64_t, uint64_t);
  uint64_t v181;
  WTF::StringImpl *v182;
  void (*v183)(uint64_t, uint64_t, uint64_t *);
  uint64_t v184;
  WTF::StringImpl *v185;
  void (*v186)(uint64_t *, uint64_t, const WTF::StringImpl **);
  uint64_t v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v170 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v170, v9, &v169);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, (uint64_t)v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if ((byte_1ECF587FD & 1) != 0)
    goto LABEL_4;
  v85 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v85 = 0x600000002;
  *(_QWORD *)(v85 + 8) = "enable";
  *(_DWORD *)(v85 + 16) = 4;
  v170 = (WTF::StringImpl *)v85;
  v171 = (WTF::StringImpl *)Inspector::TimelineBackendDispatcher::enable;
  v172 = 0;
  v86 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v86 = 0x700000002;
  *(_QWORD *)(v86 + 8) = "disable";
  *(_DWORD *)(v86 + 16) = 4;
  v173 = (WTF::StringImpl *)v86;
  v174 = Inspector::TimelineBackendDispatcher::disable;
  v175 = 0;
  v87 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v87 = 0x500000002;
  *(_QWORD *)(v87 + 8) = "start";
  *(_DWORD *)(v87 + 16) = 4;
  v176 = (WTF::StringImpl *)v87;
  v177 = Inspector::TimelineBackendDispatcher::start;
  v178 = 0;
  v88 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v88 = 0x400000002;
  *(_QWORD *)(v88 + 8) = "stop";
  *(_DWORD *)(v88 + 16) = 4;
  v179 = (WTF::StringImpl *)v88;
  v180 = Inspector::TimelineBackendDispatcher::stop;
  v181 = 0;
  v89 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v89 = 0x1500000002;
  *(_QWORD *)(v89 + 8) = "setAutoCaptureEnabled";
  *(_DWORD *)(v89 + 16) = 4;
  v182 = (WTF::StringImpl *)v89;
  v183 = Inspector::TimelineBackendDispatcher::setAutoCaptureEnabled;
  v184 = 0;
  v90 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v90 = 0xE00000002;
  *(_QWORD *)(v90 + 8) = "setInstruments";
  *(_DWORD *)(v90 + 16) = 4;
  v185 = (WTF::StringImpl *)v90;
  v186 = Inspector::TimelineBackendDispatcher::setInstruments;
  v187 = 0;
  v91 = (_OWORD *)WTF::fastMalloc((WTF *)0x190);
  v167 = 0;
  *v91 = xmmword_199156B80;
  v91[2] = 0u;
  v91[3] = 0u;
  v91[4] = 0u;
  v91[5] = 0u;
  v91[6] = 0u;
  v91[7] = 0u;
  v91[8] = 0u;
  v91[9] = 0u;
  v91[10] = 0u;
  v91[11] = 0u;
  v91[12] = 0u;
  v91[13] = 0u;
  v91[14] = 0u;
  v91[15] = 0u;
  v91[16] = 0u;
  v91[17] = 0u;
  v91[18] = 0u;
  v91[19] = 0u;
  v91[20] = 0u;
  v91[21] = 0u;
  v91[22] = 0u;
  v91[23] = 0u;
  v91[24] = 0u;
  v91[1] = 0u;
  v168 = (WTF::StringImpl *)(v91 + 1);
  do
  {
    v98 = v168;
    if (v168
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, 8u), (v98 = v168) != 0))
    {
      v99 = *((_DWORD *)v98 - 2);
    }
    else
    {
      v99 = 0;
    }
    v100 = &v170 + 3 * v167;
    v101 = *v100;
    v102 = *((_DWORD *)*v100 + 4);
    if (v102 < 0x100)
      v103 = WTF::StringImpl::hashSlowCase(*v100);
    else
      v103 = v102 >> 8;
    v104 = 0;
    v165 = v100 + 1;
    for (i = 1; ; ++i)
    {
      v106 = v103 & v99;
      v107 = (WTF *)*((_QWORD *)v98 + 3 * (v103 & v99));
      if (v107 == (WTF *)-1)
      {
        v104 = (char *)v98 + 24 * v106;
        goto LABEL_70;
      }
      if (!v107)
        break;
      if (WTF::equal(v107, v101, v11))
        goto LABEL_86;
LABEL_70:
      v103 = i + v106;
    }
    v166 = (char *)v98 + 24 * v106;
    if (v104)
    {
      *(_QWORD *)v104 = 0;
      *((_QWORD *)v104 + 1) = 0;
      *((_QWORD *)v104 + 2) = 0;
      --*((_DWORD *)v98 - 4);
      v166 = v104;
    }
    if (v101)
      *(_DWORD *)v101 += 2;
    *(_QWORD *)v166 = v101;
    *(_OWORD *)(v166 + 8) = *v165;
    v108 = v168;
    if (v168)
      v109 = *((_DWORD *)v168 - 3) + 1;
    else
      v109 = 1;
    *((_DWORD *)v168 - 3) = v109;
    v110 = (*((_DWORD *)v108 - 4) + v109);
    v111 = *((unsigned int *)v108 - 1);
    if (v111 > 0x400)
    {
      if (v111 <= 2 * v110)
      {
LABEL_81:
        v112 = (_DWORD)v111 << (6 * v109 >= (2 * v111));
        goto LABEL_85;
      }
    }
    else if (3 * v111 <= 4 * v110)
    {
      if ((_DWORD)v111)
        goto LABEL_81;
      v112 = 8;
LABEL_85:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,StructTagHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,StructTagHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,StructTagHandler,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<StructTagHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v168, v112);
    }
LABEL_86:
    ++v167;
  }
  while (v167 != 6);
  v113 = v168;
  v168 = 0;
  qword_1ECF58868 = (uint64_t)v113;
  v114 = v185;
  v185 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  v115 = v182;
  v182 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
    {
      WTF::StringImpl::~StringImpl(v115, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v115 -= 2;
    }
  }
  v116 = v179;
  v179 = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
    {
      WTF::StringImpl::~StringImpl(v116, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v116 -= 2;
    }
  }
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
    {
      WTF::StringImpl::~StringImpl(v170, v92, (uint64_t)v11, v93, v94, v95, v96, v97);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v170 -= 2;
    }
  }
  byte_1ECF587FD = 1;
LABEL_4:
  v17 = qword_1ECF58868;
  if (!qword_1ECF58868)
    goto LABEL_20;
  v18 = *(_DWORD *)(qword_1ECF58868 - 8);
  v19 = *((_DWORD *)*a3 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v20 = v19 >> 8;
  v21 = 0;
  while (2)
  {
    v22 = v20 & v18;
    v23 = v17 + 24 * (v20 & v18);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 == -1)
    {
LABEL_11:
      v20 = ++v21 + v22;
      continue;
    }
    break;
  }
  if (!v24)
  {
    v25 = qword_1ECF58868;
    if (qword_1ECF58868)
    {
      v26 = *(_DWORD *)(qword_1ECF58868 - 4);
      v23 = qword_1ECF58868 + 24 * v26;
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  if (!WTF::equal(v24, *a3, v11))
    goto LABEL_11;
  v25 = qword_1ECF58868;
  if (qword_1ECF58868)
  {
    v26 = *(_DWORD *)(qword_1ECF58868 - 4);
LABEL_16:
    if (v23 == v25 + 24 * v26)
    {
LABEL_20:
      v37 = *(_QWORD *)(a1 + 16);
      v38 = *a3;
      if (*a3)
      {
        v39 = *((_DWORD *)v38 + 1);
        *(_DWORD *)v38 += 2;
        if (v39 < 0)
          goto LABEL_115;
      }
      else
      {
        v39 = 0;
      }
      v40 = __OFADD__(v39, 15);
      v41 = v39 + 15;
      if (!v40 && !__OFADD__(v41, 10))
      {
        v42 = !v38 || (*((_BYTE *)v38 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v41 + 10), v42, (int8x16_t *)"'Timeline.", 0xAu, (uint64_t)v38, (int8x16_t *)"' was not found", 0xFu, (int **)&v168);
        v43 = v168;
        if (v168)
        {
          if (!*(_BYTE *)(v37 + 48))
            *(_BYTE *)(v37 + 48) = *(_QWORD *)(v37 + 48);
          LODWORD(v170) = 2;
          *(_DWORD *)v43 += 2;
          v171 = v43;
          v44 = *(unsigned int *)(v37 + 36);
          if ((_DWORD)v44 == *(_DWORD *)(v37 + 32))
          {
            v45 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37 + 24, v44 + 1, (unint64_t)&v170);
            v46 = *(unsigned int *)(v37 + 36);
            v47 = *(_QWORD *)(v37 + 24) + 16 * v46;
            *(_DWORD *)v47 = *(_DWORD *)v45;
            v48 = *(_QWORD *)(v45 + 8);
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v47 + 8) = v48;
            v49 = v171;
            *(_DWORD *)(v37 + 36) = v46 + 1;
            v171 = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
              {
                WTF::StringImpl::~StringImpl(v49, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
              }
              else
              {
                *(_DWORD *)v49 -= 2;
              }
            }
          }
          else
          {
            v50 = *(_QWORD *)(v37 + 24) + 16 * v44;
            *(_DWORD *)v50 = 2;
            *(_QWORD *)(v50 + 8) = v43;
            *(_DWORD *)(v37 + 36) = v44 + 1;
          }
          v51 = v168;
          v168 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, v30, v31, v32, v33, v34, v35, v36);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              if (!v38)
                goto LABEL_41;
              goto LABEL_39;
            }
            *(_DWORD *)v51 -= 2;
          }
          if (!v38)
            goto LABEL_41;
LABEL_39:
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
            WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
          goto LABEL_41;
        }
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x198668374);
      }
LABEL_115:
      v168 = 0;
      goto LABEL_116;
    }
  }
  v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(v23 + 8);
  v28 = *(_QWORD *)(v23 + 16);
  v29 = (_QWORD *)(a1 + (v28 >> 1));
  if ((v28 & 1) != 0)
    v27 = *(void (**)(_QWORD *, uint64_t, WTF **))(*v29 + v27);
  v27(v29, a2, &v169);
LABEL_41:
  v52 = v169;
  v169 = 0;
  if (!v52)
  {
LABEL_44:
    if (!a1)
      return;
    goto LABEL_45;
  }
  if (*(_DWORD *)v52 != 1)
  {
    --*(_DWORD *)v52;
    goto LABEL_44;
  }
  WTF::JSONImpl::Value::operator delete(v52, v30, v31, v32, v33, v34, v35, v36);
  if (a1)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    else
      --*(_DWORD *)(a1 + 8);
  }
}

void Inspector::TimelineBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::TimelineBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::TimelineBackendDispatcher::start(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  uint64_t v83;
  WTF *v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WTF **v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1100000002;
  *(_QWORD *)(v7 + 8) = "maxCallStackDepth";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v84 = (WTF *)&off_1E3593B00;
  v85 = (WTF::StringImpl *)WTF::JSONImpl::Value::asInteger;
  v86 = 0;
  v87 = &v84;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<int>>(v5, v6, &v81, 0, (uint64_t)&v84);
  v17 = v87;
  if (v87 == &v84)
  {
    v17 = &v84;
  }
  else
  {
    if (!v87)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  v83 = v16;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x3C00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Timeline.start' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v84) = 3;
    *(_DWORD *)v19 = v28;
    v85 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v84);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v85;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v85 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_32:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v35 + 32))(v35, a2, &v83);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 32) + 16))(&v81, *(_QWORD *)(a1 + 32), &v83);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v84 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v84);
    v52 = v84;
    if (!v84)
      goto LABEL_38;
    v53 = *(_DWORD *)v84 - 1;
    if (*(_DWORD *)v84 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v84, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v84) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v85 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_38;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v84);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v85;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v85 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_38;
    }
LABEL_35:
    *(_DWORD *)v52 = v53;
  }
LABEL_38:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_32;
    }
  }
}

void Inspector::TimelineBackendDispatcher::stop(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::TimelineBackendDispatcher::setAutoCaptureEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  char v82;
  WTF *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x700000002;
  *(_QWORD *)(v7 + 8) = "enabled";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v81 = (WTF::StringImpl *)v7;
  v83 = (WTF *)&unk_1E3593AB8;
  v84 = (WTF::StringImpl *)WTF::JSONImpl::Value::asBoolean;
  v85 = 0;
  v86 = &v83;
  v16 = Inspector::BackendDispatcher::getPropertyValue<std::optional<BOOL>>(v5, v6, &v81, 1, (uint64_t)&v83);
  v17 = v86;
  if (v86 == &v83)
  {
    v17 = &v83;
  }
  else
  {
    if (!v86)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v17 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v18 + 36))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    v27 = (WTF::StringImpl *)v19;
    *(_QWORD *)v19 = 0x4C00000002;
    *(_QWORD *)(v19 + 8) = "Some arguments of method 'Timeline.setAutoCaptureEnabled' can't be processed";
    v28 = 4;
    *(_DWORD *)(v19 + 16) = 4;
    if (!*(_BYTE *)(v18 + 48))
    {
      *(_BYTE *)(v18 + 48) = *(_QWORD *)(v18 + 48);
      v28 = *(_DWORD *)v19 + 2;
    }
    LODWORD(v83) = 3;
    *(_DWORD *)v19 = v28;
    v84 = (WTF::StringImpl *)v19;
    v29 = *(unsigned int *)(v18 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(v18 + 32))
    {
      v30 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 24, v29 + 1, (unint64_t)&v83);
      v31 = *(unsigned int *)(v18 + 36);
      v32 = *(_QWORD *)(v18 + 24) + 16 * v31;
      *(_DWORD *)v32 = *(_DWORD *)v30;
      v33 = *(_QWORD *)(v30 + 8);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v32 + 8) = v33;
      v34 = v84;
      *(_DWORD *)(v18 + 36) = v31 + 1;
      v84 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    else
    {
      v36 = *(_QWORD *)(v18 + 24) + 16 * v29;
      *(_DWORD *)v36 = 3;
      *(_QWORD *)(v36 + 8) = v19;
      *(_DWORD *)(v18 + 36) = v29 + 1;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      return;
    }
    v62 = v27;
LABEL_34:
    WTF::StringImpl::~StringImpl(v62, v20, v21, v22, v23, v24, v25, v26);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    return;
  }
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
  {
    if (HIBYTE(v16))
    {
      (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v35 + 48))(v35, a2, v16 != 0);
      return;
    }
LABEL_45:
    __break(1u);
  }
  if (!HIBYTE(v16))
    goto LABEL_45;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v81);
  if (!v82)
  {
    v71 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v71 = 0x500000001;
    *((_QWORD *)v71 + 3) = 0;
    *((_QWORD *)v71 + 4) = 0;
    *((_QWORD *)v71 + 2) = 0;
    v83 = v71;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v83);
    v52 = v83;
    if (!v83)
      goto LABEL_40;
    v53 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v83, v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  v45 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v45 + 48))
    *(_BYTE *)(v45 + 48) = *(_QWORD *)(v45 + 48);
  LODWORD(v83) = 5;
  v46 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v84 = v46;
  v47 = *(unsigned int *)(v45 + 36);
  if ((_DWORD)v47 != *(_DWORD *)(v45 + 32))
  {
    v80 = *(_QWORD *)(v45 + 24) + 16 * v47;
    *(_DWORD *)v80 = 5;
    *(_QWORD *)(v80 + 8) = v46;
    *(_DWORD *)(v45 + 36) = v47 + 1;
    goto LABEL_40;
  }
  v48 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 24, v47 + 1, (unint64_t)&v83);
  v49 = *(unsigned int *)(v45 + 36);
  v50 = *(_QWORD *)(v45 + 24) + 16 * v49;
  *(_DWORD *)v50 = *(_DWORD *)v48;
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = 0;
  *(_QWORD *)(v50 + 8) = v51;
  v52 = v84;
  *(_DWORD *)(v45 + 36) = v49 + 1;
  v84 = 0;
  if (v52)
  {
    v53 = *(_DWORD *)v52 - 2;
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      goto LABEL_40;
    }
LABEL_37:
    *(_DWORD *)v52 = v53;
  }
LABEL_40:
  if (v82)
  {
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        return;
      }
      goto LABEL_34;
    }
  }
}

void Inspector::TimelineBackendDispatcher::setInstruments(uint64_t *a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  char v86;
  WTF *v87;
  WTF *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF **v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v5 = a1[2];
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0xB00000002;
  *(_QWORD *)(v7 + 8) = "instruments";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v85 = (WTF::StringImpl *)v7;
  v88 = (WTF *)&off_1E3593C68;
  v89 = (WTF::StringImpl *)WTF::JSONImpl::Value::asArray;
  v90 = 0;
  v91 = &v88;
  Inspector::BackendDispatcher::getPropertyValue<WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>>>(&v87, v5, v6, &v85, 1, (uint64_t)&v88);
  v16 = v91;
  if (v91 == &v88)
  {
    v16 = &v88;
  }
  else
  {
    if (!v91)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = a1[2];
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4500000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Timeline.setInstruments' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v88) = 3;
    *(_DWORD *)v18 = v27;
    v89 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v88);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v89;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v89 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v38 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v38 = 3;
      *(_QWORD *)(v38 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_46;
    }
    v36 = v26;
    goto LABEL_36;
  }
  v34 = a1[3];
  if (v34)
  {
    v35 = v87;
    v87 = 0;
    v88 = v35;
    (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v34 + 56))(v34, a2, &v88);
    v36 = v88;
    v88 = 0;
    if (!v36)
      goto LABEL_46;
    v37 = *(_DWORD *)v36 - 1;
    if (*(_DWORD *)v36 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v36, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_46;
    }
LABEL_45:
    *(_DWORD *)v36 = v37;
    goto LABEL_46;
  }
  v47 = a1[4];
  v48 = v87;
  v87 = 0;
  v88 = v48;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v47 + 40))(&v85, v47, &v88);
  v49 = v88;
  v88 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v49;
  }
  if (!v86)
  {
    v75 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v75 = 0x500000001;
    *((_QWORD *)v75 + 3) = 0;
    *((_QWORD *)v75 + 4) = 0;
    *((_QWORD *)v75 + 2) = 0;
    v88 = v75;
    Inspector::BackendDispatcher::sendResponse(a1[2], a2, &v88);
    v57 = v88;
    if (!v88)
      goto LABEL_42;
    v58 = *(_DWORD *)v88 - 1;
    if (*(_DWORD *)v88 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v88, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v50 = a1[2];
  if (!*(_BYTE *)(v50 + 48))
    *(_BYTE *)(v50 + 48) = *(_QWORD *)(v50 + 48);
  LODWORD(v88) = 5;
  v51 = v85;
  if (v85)
    *(_DWORD *)v85 += 2;
  v89 = v51;
  v52 = *(unsigned int *)(v50 + 36);
  if ((_DWORD)v52 != *(_DWORD *)(v50 + 32))
  {
    v84 = *(_QWORD *)(v50 + 24) + 16 * v52;
    *(_DWORD *)v84 = 5;
    *(_QWORD *)(v84 + 8) = v51;
    *(_DWORD *)(v50 + 36) = v52 + 1;
    goto LABEL_42;
  }
  v53 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50 + 24, v52 + 1, (unint64_t)&v88);
  v54 = *(unsigned int *)(v50 + 36);
  v55 = *(_QWORD *)(v50 + 24) + 16 * v54;
  *(_DWORD *)v55 = *(_DWORD *)v53;
  v56 = *(_QWORD *)(v53 + 8);
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v55 + 8) = v56;
  v57 = v89;
  *(_DWORD *)(v50 + 36) = v54 + 1;
  v89 = 0;
  if (v57)
  {
    v58 = *(_DWORD *)v57 - 2;
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v57 = v58;
  }
LABEL_42:
  if (v86)
  {
    v36 = v85;
    v85 = 0;
    if (v36)
    {
      v37 = *(_DWORD *)v36 - 2;
      if (*(_DWORD *)v36 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        goto LABEL_46;
      }
      goto LABEL_45;
    }
  }
LABEL_46:
  if (v87)
  {
    if (*(_DWORD *)v87 == 1)
      WTF::JSONImpl::Value::operator delete(v87, v19, v20, v21, v22, v23, v24, v25);
    else
      --*(_DWORD *)v87;
  }
}

void Inspector::WorkerBackendDispatcher::create(Inspector::WorkerBackendDispatcher *this@<X0>, Inspector::BackendDispatcher *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _BYTE v31[24];
  uint64_t v32;

  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v7 + 8) = 1;
  ++*(_DWORD *)this;
  *(_QWORD *)v7 = off_1E3591970;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "Worker";
  *(_DWORD *)(v8 + 16) = 4;
  v30 = (WTF::StringImpl *)v8;
  v32 = v7;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>((uint64_t *)this + 2, &v30, (const WTF::StringImpl *)&v32, v9, v10, v11, v12, v13, (uint64_t)v31);
  v21 = v30;
  v30 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  *a3 = v7;
}

Inspector::WorkerBackendDispatcher *Inspector::WorkerBackendDispatcher::WorkerBackendDispatcher(Inspector::WorkerBackendDispatcher *this, Inspector::BackendDispatcher *a2, Inspector::WorkerBackendDispatcherHandler *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::WorkerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591970;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Worker";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _BYTE v29[24];
  Inspector::WorkerBackendDispatcher *v30;

  *((_DWORD *)this + 2) = 1;
  ++*(_DWORD *)a2;
  v4 = (uint64_t *)((char *)a2 + 16);
  *(_QWORD *)this = off_1E3591970;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "Worker";
  *(_DWORD *)(v5 + 16) = 4;
  v28 = (WTF::StringImpl *)v5;
  v30 = this;
  WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::inlineSet<WTF::String const&,Inspector::SupplementalBackendDispatcher *&>(v4, &v28, (const WTF::StringImpl *)&v30, v6, v7, v8, v9, v10, (uint64_t)v29);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return this;
}

void Inspector::WorkerBackendDispatcher::dispatch(uint64_t a1, uint64_t a2, uint64_t *a3, WTF::JSONImpl::ObjectBase **a4)
{
  WTF::JSONImpl::ObjectBase *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v36;
  _BOOL4 v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;

  ++*(_DWORD *)(a1 + 8);
  v7 = *a4;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x600000002;
  *(_QWORD *)(v8 + 8) = "params";
  *(_DWORD *)(v8 + 16) = 4;
  v73 = (WTF::StringImpl *)v8;
  WTF::JSONImpl::ObjectBase::getObject(v7, &v73, v9, &v72);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"enable", 6))
  {
    Inspector::WorkerBackendDispatcher::enable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"disable", 7))
  {
    Inspector::WorkerBackendDispatcher::disable(a1, a2);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"initialized", 11))
  {
    Inspector::WorkerBackendDispatcher::initialized(a1, a2, &v72);
    goto LABEL_33;
  }
  if (WTF::equalInternal<unsigned char>(*a3, (unint64_t)"sendMessageToWorker", 19))
  {
    Inspector::WorkerBackendDispatcher::sendMessageToWorker(a1, a2, &v72);
    goto LABEL_33;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *a3;
  if (*a3)
  {
    v34 = *(_DWORD *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    if (v34 < 0)
    {
LABEL_45:
      v71 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    v34 = 0;
  }
  v35 = __OFADD__(v34, 15);
  v36 = v34 + 15;
  if (v35 || __OFADD__(v36, 8))
    goto LABEL_45;
  v37 = !v33 || (*(_BYTE *)(v33 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v36 + 8), v37, (int8x16_t *)"'Worker.", 8u, v33, (int8x16_t *)"' was not found", 0xFu, (int **)&v71);
  v38 = v71;
  if (!v71)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198669968);
  }
  if (!*(_BYTE *)(v32 + 48))
    *(_BYTE *)(v32 + 48) = *(_QWORD *)(v32 + 48);
  LODWORD(v73) = 2;
  *(_DWORD *)v38 += 2;
  v74 = v38;
  v39 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v39 == *(_DWORD *)(v32 + 32))
  {
    v40 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32 + 24, v39 + 1, (unint64_t)&v73);
    v41 = *(unsigned int *)(v32 + 36);
    v42 = *(_QWORD *)(v32 + 24) + 16 * v41;
    *(_DWORD *)v42 = *(_DWORD *)v40;
    v43 = *(_QWORD *)(v40 + 8);
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v42 + 8) = v43;
    v44 = v74;
    *(_DWORD *)(v32 + 36) = v41 + 1;
    v74 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
    v45 = *(_QWORD *)(v32 + 24) + 16 * v39;
    *(_DWORD *)v45 = 2;
    *(_QWORD *)(v45 + 8) = v38;
    *(_DWORD *)(v32 + 36) = v39 + 1;
  }
  v46 = v71;
  v71 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      if (!v33)
        goto LABEL_33;
      goto LABEL_31;
    }
    *(_DWORD *)v46 -= 2;
  }
  if (!v33)
    goto LABEL_33;
LABEL_31:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v33, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_33:
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v72;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

void Inspector::WorkerBackendDispatcher::enable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
    return;
  }
  (***(void (****)(WTF::StringImpl **__return_ptr))(a1 + 32))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::WorkerBackendDispatcher::disable(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  char v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2);
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 32) + 8))(&v40);
  if (!v41)
  {
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v29 = 0x500000001;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = 0;
    *((_QWORD *)v29 + 2) = 0;
    v42 = v29;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), v2, &v42);
    v19 = v42;
    if (!v42)
      goto LABEL_16;
    v20 = *(_DWORD *)v42 - 1;
    if (*(_DWORD *)v42 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v42, v5, v6, v7, v8, v9, v10, v11);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v12 + 48))
    *(_BYTE *)(v12 + 48) = *(_QWORD *)(v12 + 48);
  LODWORD(v42) = 5;
  v13 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v43 = v13;
  v14 = *(unsigned int *)(v12 + 36);
  if ((_DWORD)v14 != *(_DWORD *)(v12 + 32))
  {
    v30 = *(_QWORD *)(v12 + 24) + 16 * v14;
    *(_DWORD *)v30 = 5;
    *(_QWORD *)(v30 + 8) = v13;
    *(_DWORD *)(v12 + 36) = v14 + 1;
    goto LABEL_16;
  }
  v15 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 24, v14 + 1, (unint64_t)&v42);
  v16 = *(unsigned int *)(v12 + 36);
  v17 = *(_QWORD *)(v12 + 24) + 16 * v16;
  *(_DWORD *)v17 = *(_DWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v17 + 8) = v18;
  v19 = v43;
  *(_DWORD *)(v12 + 36) = v16 + 1;
  v43 = 0;
  if (v19)
  {
    v20 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      goto LABEL_16;
    }
LABEL_14:
    *(_DWORD *)v19 = v20;
  }
LABEL_16:
  if (v41)
  {
    v31 = v40;
    v40 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
}

void Inspector::WorkerBackendDispatcher::initialized(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  char v90;
  WTF::StringImpl *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF **v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *a3;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x800000002;
  *(_QWORD *)(v7 + 8) = "workerId";
  v8 = 4;
  *(_DWORD *)(v7 + 16) = 4;
  v89 = (WTF::StringImpl *)v7;
  v92 = (WTF *)&off_1E3593B90;
  v93 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v94 = 0;
  v95 = &v92;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v91, v5, v6, &v89, 1, (uint64_t)&v92);
  v16 = v95;
  if (v95 == &v92)
  {
    v16 = &v92;
  }
  else
  {
    if (!v95)
      goto LABEL_6;
    v8 = 5;
  }
  (*((void (**)(void))*v16 + v8))();
LABEL_6:
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v9, v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v7 -= 2;
  }
  v17 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v17 + 36))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    v26 = (WTF::StringImpl *)v18;
    *(_QWORD *)v18 = 0x4000000002;
    *(_QWORD *)(v18 + 8) = "Some arguments of method 'Worker.initialized' can't be processed";
    v27 = 4;
    *(_DWORD *)(v18 + 16) = 4;
    if (!*(_BYTE *)(v17 + 48))
    {
      *(_BYTE *)(v17 + 48) = *(_QWORD *)(v17 + 48);
      v27 = *(_DWORD *)v18 + 2;
    }
    LODWORD(v92) = 3;
    *(_DWORD *)v18 = v27;
    v93 = (WTF::StringImpl *)v18;
    v28 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v28 == *(_DWORD *)(v17 + 32))
    {
      v29 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17 + 24, v28 + 1, (unint64_t)&v92);
      v30 = *(unsigned int *)(v17 + 36);
      v31 = *(_QWORD *)(v17 + 24) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v93;
      *(_DWORD *)(v17 + 36) = v30 + 1;
      v93 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v35 = *(_QWORD *)(v17 + 24) + 16 * v28;
      *(_DWORD *)v35 = 3;
      *(_QWORD *)(v35 + 8) = v18;
      *(_DWORD *)(v17 + 36) = v28 + 1;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_20;
    }
    v70 = v26;
    goto LABEL_36;
  }
  v34 = *(_QWORD *)(a1 + 24);
  if (v34)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v34 + 32))(v34, a2, &v91);
    goto LABEL_20;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 16))(&v89, *(_QWORD *)(a1 + 32), &v91);
  if (!v90)
  {
    v79 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v79 = 0x500000001;
    *((_QWORD *)v79 + 3) = 0;
    *((_QWORD *)v79 + 4) = 0;
    *((_QWORD *)v79 + 2) = 0;
    v92 = v79;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v92);
    v60 = v92;
    if (!v92)
      goto LABEL_42;
    v61 = *(_DWORD *)v92 - 1;
    if (*(_DWORD *)v92 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v92, v19, v20, v21, v22, v23, v24, v25);
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  v53 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v53 + 48))
    *(_BYTE *)(v53 + 48) = *(_QWORD *)(v53 + 48);
  LODWORD(v92) = 5;
  v54 = v89;
  if (v89)
    *(_DWORD *)v89 += 2;
  v93 = v54;
  v55 = *(unsigned int *)(v53 + 36);
  if ((_DWORD)v55 != *(_DWORD *)(v53 + 32))
  {
    v88 = *(_QWORD *)(v53 + 24) + 16 * v55;
    *(_DWORD *)v88 = 5;
    *(_QWORD *)(v88 + 8) = v54;
    *(_DWORD *)(v53 + 36) = v55 + 1;
    goto LABEL_42;
  }
  v56 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53 + 24, v55 + 1, (unint64_t)&v92);
  v57 = *(unsigned int *)(v53 + 36);
  v58 = *(_QWORD *)(v53 + 24) + 16 * v57;
  *(_DWORD *)v58 = *(_DWORD *)v56;
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v58 + 8) = v59;
  v60 = v93;
  *(_DWORD *)(v53 + 36) = v57 + 1;
  v93 = 0;
  if (v60)
  {
    v61 = *(_DWORD *)v60 - 2;
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      goto LABEL_42;
    }
LABEL_39:
    *(_DWORD *)v60 = v61;
  }
LABEL_42:
  if (v90)
  {
    v70 = v89;
    v89 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
LABEL_36:
        WTF::StringImpl::~StringImpl(v70, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        goto LABEL_20;
      }
      *(_DWORD *)v70 -= 2;
    }
  }
LABEL_20:
  v36 = v91;
  v91 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
}

void Inspector::WorkerBackendDispatcher::sendMessageToWorker(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  char v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF **v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x800000002;
  *(_QWORD *)(v8 + 8) = "workerId";
  v9 = 4;
  *(_DWORD *)(v8 + 16) = 4;
  v119 = (WTF::StringImpl *)v8;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v122, v6, v7, &v119, 1, (uint64_t)&v123);
  v17 = v126;
  if (v126 == &v123)
  {
    v17 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_6;
    v9 = 5;
  }
  (*((void (**)(void))*v17 + v9))();
LABEL_6:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v10, v11, v12, v13, v14, v15, v16);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *a3;
  v20 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v20 = 0x700000002;
  *(_QWORD *)(v20 + 8) = "message";
  v21 = 4;
  *(_DWORD *)(v20 + 16) = 4;
  v119 = (WTF::StringImpl *)v20;
  v123 = (WTF *)&off_1E3593B90;
  v124 = (WTF::StringImpl *)WTF::JSONImpl::Value::asString;
  v125 = 0;
  v126 = &v123;
  Inspector::BackendDispatcher::getPropertyValue<WTF::String>(&v121, v18, v19, &v119, 1, (uint64_t)&v123);
  v29 = v126;
  if (v126 == &v123)
  {
    v29 = &v123;
  }
  else
  {
    if (!v126)
      goto LABEL_13;
    v21 = 5;
  }
  (*((void (**)(void))*v29 + v21))();
LABEL_13:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
  v30 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v30 + 36))
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    v39 = (WTF::StringImpl *)v31;
    *(_QWORD *)v31 = 0x4800000002;
    *(_QWORD *)(v31 + 8) = "Some arguments of method 'Worker.sendMessageToWorker' can't be processed";
    v40 = 4;
    *(_DWORD *)(v31 + 16) = 4;
    if (!*(_BYTE *)(v30 + 48))
    {
      *(_BYTE *)(v30 + 48) = *(_QWORD *)(v30 + 48);
      v40 = *(_DWORD *)v31 + 2;
    }
    LODWORD(v123) = 3;
    *(_DWORD *)v31 = v40;
    v124 = (WTF::StringImpl *)v31;
    v41 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v30 + 32))
    {
      v42 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 24, v41 + 1, (unint64_t)&v123);
      v43 = *(unsigned int *)(v30 + 36);
      v44 = *(_QWORD *)(v30 + 24) + 16 * v43;
      *(_DWORD *)v44 = *(_DWORD *)v42;
      v45 = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v44 + 8) = v45;
      v46 = v124;
      *(_DWORD *)(v30 + 36) = v43 + 1;
      v124 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v32, v33, v34, v35, v36, v37, v38);
          WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
    }
    else
    {
      v48 = *(_QWORD *)(v30 + 24) + 16 * v41;
      *(_DWORD *)v48 = 3;
      *(_QWORD *)(v48 + 8) = v31;
      *(_DWORD *)(v30 + 36) = v41 + 1;
    }
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      goto LABEL_27;
    }
    v100 = v39;
    goto LABEL_48;
  }
  v47 = *(_QWORD *)(a1 + 24);
  if (v47)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v47 + 40))(v47, a2, &v122, &v121);
    goto LABEL_27;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, WTF::StringImpl **, WTF::StringImpl **))(**(_QWORD **)(a1 + 32) + 24))(&v119, *(_QWORD *)(a1 + 32), &v122, &v121);
  if (!v120)
  {
    v109 = (WTF *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v109 = 0x500000001;
    *((_QWORD *)v109 + 3) = 0;
    *((_QWORD *)v109 + 4) = 0;
    *((_QWORD *)v109 + 2) = 0;
    v123 = v109;
    Inspector::BackendDispatcher::sendResponse(*(_QWORD *)(a1 + 16), a2, &v123);
    v90 = v123;
    if (!v123)
      goto LABEL_54;
    v91 = *(_DWORD *)v123 - 1;
    if (*(_DWORD *)v123 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v123, v32, v33, v34, v35, v36, v37, v38);
      goto LABEL_54;
    }
    goto LABEL_51;
  }
  v83 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v83 + 48))
    *(_BYTE *)(v83 + 48) = *(_QWORD *)(v83 + 48);
  LODWORD(v123) = 5;
  v84 = v119;
  if (v119)
    *(_DWORD *)v119 += 2;
  v124 = v84;
  v85 = *(unsigned int *)(v83 + 36);
  if ((_DWORD)v85 != *(_DWORD *)(v83 + 32))
  {
    v118 = *(_QWORD *)(v83 + 24) + 16 * v85;
    *(_DWORD *)v118 = 5;
    *(_QWORD *)(v118 + 8) = v84;
    *(_DWORD *)(v83 + 36) = v85 + 1;
    goto LABEL_54;
  }
  v86 = WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 24, v85 + 1, (unint64_t)&v123);
  v87 = *(unsigned int *)(v83 + 36);
  v88 = *(_QWORD *)(v83 + 24) + 16 * v87;
  *(_DWORD *)v88 = *(_DWORD *)v86;
  v89 = *(_QWORD *)(v86 + 8);
  *(_QWORD *)(v86 + 8) = 0;
  *(_QWORD *)(v88 + 8) = v89;
  v90 = v124;
  *(_DWORD *)(v83 + 36) = v87 + 1;
  v124 = 0;
  if (v90)
  {
    v91 = *(_DWORD *)v90 - 2;
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      goto LABEL_54;
    }
LABEL_51:
    *(_DWORD *)v90 = v91;
  }
LABEL_54:
  if (v120)
  {
    v100 = v119;
    v119 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
LABEL_48:
        WTF::StringImpl::~StringImpl(v100, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
        goto LABEL_27;
      }
      *(_DWORD *)v100 -= 2;
    }
  }
LABEL_27:
  v49 = v121;
  v121 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v122;
  v122 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void Inspector::AnimationFrontendDispatcher::animationCreated(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1A00000002;
  *(_QWORD *)(v6 + 8) = "Animation.animationCreated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "animation";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

uint64_t Inspector::FrontendRouter::sendEvent(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(this + 20);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(this + 8);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      this = (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)v6 + 24))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void Inspector::AnimationFrontendDispatcher::nameChanged(Inspector::AnimationFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD **v161;
  uint64_t v162;
  _DWORD *v163;
  WTF *v164;
  WTF *v165;
  WTF::StringImpl *v166[2];
  char v167;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v164 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1500000002;
  *(_QWORD *)(v8 + 8) = "Animation.nameChanged";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v165 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v10, v11, v12, v13, v14, (uint64_t)v166);
  if (v167)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v164);
      v23 = *(unsigned int *)(v6 + 36);
      v153 = *(_QWORD *)(v6 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v23) = v154;
    }
    else
    {
      v24 = *v22;
      v25 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v165;
  v165 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v164;
  v164 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0xB00000002;
  *(_QWORD *)(v30 + 8) = "animationId";
  *(_DWORD *)(v30 + 16) = 4;
  v164 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v165 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v32, v33, v34, v35, v36, (uint64_t)v166);
  if (v167)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v164);
      v46 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v46) = v157;
    }
    else
    {
      v47 = *v45;
      v48 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v165;
  v165 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v164;
  v164 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  if (*(_QWORD *)a3)
  {
    v51 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v51 = 0x400000002;
    *(_QWORD *)(v51 + 8) = "name";
    *(_DWORD *)(v51 + 16) = 4;
    v164 = (WTF *)v51;
    v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v52 = 0x400000001;
    v58 = *(_DWORD **)a3;
    *((_QWORD *)v52 + 1) = *(_QWORD *)a3;
    if (v58)
      *v58 += 2;
    v165 = v52;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v53, v54, v55, v56, v57, (uint64_t)v166);
    if (v167)
    {
      v66 = (uint64_t *)(v28 + 24);
      v67 = *(unsigned int *)(v28 + 36);
      if ((_DWORD)v67 == *(_DWORD *)(v28 + 32))
      {
        v161 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v164);
        v67 = *(unsigned int *)(v28 + 36);
        v162 = *(_QWORD *)(v28 + 24);
        v163 = *v161;
        if (*v161)
          *v163 += 2;
        *(_QWORD *)(v162 + 8 * v67) = v163;
      }
      else
      {
        v68 = *v66;
        v69 = v164;
        if (v164)
          *(_DWORD *)v164 += 2;
        *(_QWORD *)(v68 + 8 * v67) = v69;
      }
      *(_DWORD *)(v28 + 36) = v67 + 1;
    }
    v70 = v165;
    v165 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 1)
        WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
      else
        --*(_DWORD *)v70;
    }
    v71 = v164;
    v164 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
        WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
      }
      else
      {
        *(_DWORD *)v71 -= 2;
      }
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x600000002;
  *(_QWORD *)(v72 + 8) = "params";
  *(_DWORD *)(v72 + 16) = 4;
  v164 = (WTF *)v28;
  v165 = (WTF *)v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v165, (const WTF::StringImpl *)&v164, v73, v74, v75, v76, v77, (uint64_t)v166);
  if (v167)
  {
    v85 = (uint64_t *)(v6 + 24);
    v86 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v86 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v165);
      v86 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v86) = v160;
    }
    else
    {
      v87 = *v85;
      v88 = v165;
      if (v165)
        *(_DWORD *)v165 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *(_DWORD *)(v6 + 36) = v86 + 1;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
    else
      --*(_DWORD *)v89;
  }
  v90 = v165;
  v165 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v79, v80, v81, v82, v83, v84, v166);
  v99 = *(unsigned int *)(v91 + 20);
  if ((_DWORD)v99)
  {
    v100 = *(uint64_t **)(v91 + 8);
    v101 = 8 * v99;
    do
    {
      v102 = *v100++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v102 + 24))(v102, v166);
      v101 -= 8;
    }
    while (v101);
  }
  v103 = v166[0];
  v166[0] = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v92, v93, v94, v95, v96, v97, v98);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v92, v93, v94, v95, v96, v97, v98);
  else
    --*(_DWORD *)v6;
}

void Inspector::AnimationFrontendDispatcher::effectChanged(uint64_t *a1, _DWORD **a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1700000002;
  *(_QWORD *)(v8 + 8) = "Animation.effectChanged";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0xB00000002;
  *(_QWORD *)(v30 + 8) = "animationId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *a2;
  *((_QWORD *)v31 + 1) = *a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  if (*a3)
  {
    v51 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v51 = 0x600000002;
    *(_QWORD *)(v51 + 8) = "effect";
    *(_DWORD *)(v51 + 16) = 4;
    v52 = *a3;
    *a3 = 0;
    v163 = v52;
    v164 = (WTF *)v51;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v53, v54, v55, v56, v57, (uint64_t)v165);
    if (v166)
    {
      v65 = (uint64_t *)(v28 + 24);
      v66 = *(unsigned int *)(v28 + 36);
      if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
      {
        v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v164);
        v66 = *(unsigned int *)(v28 + 36);
        v161 = *(_QWORD *)(v28 + 24);
        v162 = *v160;
        if (*v160)
          *v162 += 2;
        *(_QWORD *)(v161 + 8 * v66) = v162;
      }
      else
      {
        v67 = *v65;
        v68 = v164;
        if (v164)
          *(_DWORD *)v164 += 2;
        *(_QWORD *)(v67 + 8 * v66) = v68;
      }
      *(_DWORD *)(v28 + 36) = v66 + 1;
    }
    v69 = v163;
    v163 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 1)
        WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
      else
        --*(_DWORD *)v69;
    }
    v70 = v164;
    v164 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
        WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
      }
      else
      {
        *(_DWORD *)v70 -= 2;
      }
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v158 = *(_QWORD *)(v6 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v85) = v159;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::AnimationFrontendDispatcher::targetChanged(Inspector::AnimationFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1700000002;
  *(_QWORD *)(v6 + 8) = "Animation.targetChanged";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xB00000002;
  *(_QWORD *)(v27 + 8) = "animationId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::AnimationFrontendDispatcher::animationDestroyed(Inspector::AnimationFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1C00000002;
  *(_QWORD *)(v6 + 8) = "Animation.animationDestroyed";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xB00000002;
  *(_QWORD *)(v27 + 8) = "animationId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::AnimationFrontendDispatcher::trackingStart(Inspector::AnimationFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1700000002;
  *(_QWORD *)(v6 + 8) = "Animation.trackingStart";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::AnimationFrontendDispatcher::trackingUpdate(uint64_t *a1, WTF **a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1800000002;
  *(_QWORD *)(v8 + 8) = "Animation.trackingUpdate";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x900000002;
  *(_QWORD *)(v29 + 8) = "timestamp";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x200000001;
  v30[1] = a3;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v49 = 0x500000002;
  *(_QWORD *)(v49 + 8) = "event";
  *(_DWORD *)(v49 + 16) = 4;
  v50 = *a2;
  *a2 = 0;
  v161 = v50;
  v162 = (WTF *)v49;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v51, v52, v53, v54, v55, (uint64_t)v163);
  if (v164)
  {
    v63 = (uint64_t *)(v28 + 24);
    v64 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v162);
      v64 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v64) = v157;
    }
    else
    {
      v65 = *v63;
      v66 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v65 + 8 * v64) = v66;
    }
    *(_DWORD *)(v28 + 36) = v64 + 1;
  }
  v67 = v161;
  v161 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 1)
      WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
    else
      --*(_DWORD *)v67;
  }
  v68 = v162;
  v162 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v159 = *(_QWORD *)(v6 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v83) = v160;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::AnimationFrontendDispatcher::trackingComplete(Inspector::AnimationFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1A00000002;
  *(_QWORD *)(v6 + 8) = "Animation.trackingComplete";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::ApplicationCacheFrontendDispatcher::applicationCacheStatusUpdated(Inspector::ApplicationCacheFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  _DWORD **v185;
  uint64_t v186;
  _DWORD *v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD **v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD **v194;
  uint64_t v195;
  _DWORD *v196;
  WTF *v197;
  WTF *v198;
  WTF::StringImpl *v199[2];
  char v200;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v197 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2E00000002;
  *(_QWORD *)(v10 + 8) = "ApplicationCache.applicationCacheStatusUpdated";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v198 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v12, v13, v14, v15, v16, (uint64_t)v199);
  if (v200)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v182 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v197);
      v25 = *(unsigned int *)(v8 + 36);
      v183 = *(_QWORD *)(v8 + 24);
      v184 = *v182;
      if (*v182)
        *v184 += 2;
      *(_QWORD *)(v183 + 8 * v25) = v184;
    }
    else
    {
      v26 = *v24;
      v27 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v198;
  v198 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v197;
  v197 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x700000002;
  *(_QWORD *)(v32 + 8) = "frameId";
  *(_DWORD *)(v32 + 16) = 4;
  v197 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *(_DWORD **)a2;
  *((_QWORD *)v33 + 1) = *(_QWORD *)a2;
  if (v39)
    *v39 += 2;
  v198 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v34, v35, v36, v37, v38, (uint64_t)v199);
  if (v200)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v185 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v197);
      v48 = *(unsigned int *)(v30 + 36);
      v186 = *(_QWORD *)(v30 + 24);
      v187 = *v185;
      if (*v185)
        *v187 += 2;
      *(_QWORD *)(v186 + 8 * v48) = v187;
    }
    else
    {
      v49 = *v47;
      v50 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v198;
  v198 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v197;
  v197 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0xB00000002;
  *(_QWORD *)(v53 + 8) = "manifestURL";
  *(_DWORD *)(v53 + 16) = 4;
  v197 = (WTF *)v53;
  v54 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = 0x400000001;
  v60 = *(_DWORD **)a3;
  *((_QWORD *)v54 + 1) = *(_QWORD *)a3;
  if (v60)
    *v60 += 2;
  v198 = v54;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v55, v56, v57, v58, v59, (uint64_t)v199);
  if (v200)
  {
    v68 = (uint64_t *)(v30 + 24);
    v69 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v69 == *(_DWORD *)(v30 + 32))
    {
      v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v197);
      v69 = *(unsigned int *)(v30 + 36);
      v189 = *(_QWORD *)(v30 + 24);
      v190 = *v188;
      if (*v188)
        *v190 += 2;
      *(_QWORD *)(v189 + 8 * v69) = v190;
    }
    else
    {
      v70 = *v68;
      v71 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v70 + 8 * v69) = v71;
    }
    *(_DWORD *)(v30 + 36) = v69 + 1;
  }
  v72 = v198;
  v198 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 1)
      WTF::JSONImpl::Value::operator delete(v72, v61, v62, v63, v64, v65, v66, v67);
    else
      --*(_DWORD *)v72;
  }
  v73 = v197;
  v197 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v74 = 0x600000002;
  *(_QWORD *)(v74 + 8) = "status";
  *(_DWORD *)(v74 + 16) = 4;
  v197 = (WTF *)v74;
  v75 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v75 = 0x300000001;
  v75[1] = (double)a4;
  v198 = (WTF *)v75;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v198, v76, v77, v78, v79, v80, (uint64_t)v199);
  if (v200)
  {
    v88 = (uint64_t *)(v30 + 24);
    v89 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v89 == *(_DWORD *)(v30 + 32))
    {
      v191 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v88, v89 + 1, (unint64_t)&v197);
      v89 = *(unsigned int *)(v30 + 36);
      v192 = *(_QWORD *)(v30 + 24);
      v193 = *v191;
      if (*v191)
        *v193 += 2;
      *(_QWORD *)(v192 + 8 * v89) = v193;
    }
    else
    {
      v90 = *v88;
      v91 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v90 + 8 * v89) = v91;
    }
    *(_DWORD *)(v30 + 36) = v89 + 1;
  }
  v92 = v198;
  v198 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 1)
      WTF::JSONImpl::Value::operator delete(v92, v81, v82, v83, v84, v85, v86, v87);
    else
      --*(_DWORD *)v92;
  }
  v93 = v197;
  v197 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v81, v82, v83, v84, v85, v86, v87);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v94 = 0x600000002;
  *(_QWORD *)(v94 + 8) = "params";
  *(_DWORD *)(v94 + 16) = 4;
  v197 = (WTF *)v30;
  v198 = (WTF *)v94;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v198, (const WTF::StringImpl *)&v197, v95, v96, v97, v98, v99, (uint64_t)v199);
  if (v200)
  {
    v107 = (uint64_t *)(v8 + 24);
    v108 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v108 == *(_DWORD *)(v8 + 32))
    {
      v194 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&v198);
      v108 = *(unsigned int *)(v8 + 36);
      v195 = *(_QWORD *)(v8 + 24);
      v196 = *v194;
      if (*v194)
        *v196 += 2;
      *(_QWORD *)(v195 + 8 * v108) = v196;
    }
    else
    {
      v109 = *v107;
      v110 = v198;
      if (v198)
        *(_DWORD *)v198 += 2;
      *(_QWORD *)(v109 + 8 * v108) = v110;
    }
    *(_DWORD *)(v8 + 36) = v108 + 1;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 1)
      WTF::JSONImpl::Value::operator delete(v111, v100, v101, v102, v103, v104, v105, v106);
    else
      --*(_DWORD *)v111;
  }
  v112 = v198;
  v198 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  v113 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v101, v102, v103, v104, v105, v106, v199);
  v121 = *(unsigned int *)(v113 + 20);
  if ((_DWORD)v121)
  {
    v122 = *(uint64_t **)(v113 + 8);
    v123 = 8 * v121;
    do
    {
      v124 = *v122++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v124 + 24))(v124, v199);
      v123 -= 8;
    }
    while (v123);
  }
  v125 = v199[0];
  v199[0] = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v114, v115, v116, v117, v118, v119, v120);
      WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v114, v115, v116, v117, v118, v119, v120);
  else
    --*(_DWORD *)v8;
}

void Inspector::ApplicationCacheFrontendDispatcher::networkStateUpdated(Inspector::ApplicationCacheFrontendDispatcher *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x2400000002;
  *(_QWORD *)(v6 + 8) = "ApplicationCache.networkStateUpdated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xB00000002;
  *(_QWORD *)(v27 + 8) = "isNowOnline";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x100000001;
  *((_BYTE *)v28 + 8) = a2;
  v129 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::BrowserFrontendDispatcher::extensionsEnabled(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1900000002;
  *(_QWORD *)(v6 + 8) = "Browser.extensionsEnabled";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xA00000002;
  *(_QWORD *)(v27 + 8) = "extensions";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v26 + 16), &v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::BrowserFrontendDispatcher::extensionsDisabled(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1A00000002;
  *(_QWORD *)(v6 + 8) = "Browser.extensionsDisabled";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xC00000002;
  *(_QWORD *)(v27 + 8) = "extensionIds";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v26 + 16), &v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::CPUProfilerFrontendDispatcher::trackingStart(Inspector::CPUProfilerFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1900000002;
  *(_QWORD *)(v6 + 8) = "CPUProfiler.trackingStart";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::CPUProfilerFrontendDispatcher::trackingUpdate(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1A00000002;
  *(_QWORD *)(v6 + 8) = "CPUProfiler.trackingUpdate";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x500000002;
  *(_QWORD *)(v27 + 8) = "event";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::CPUProfilerFrontendDispatcher::trackingComplete(Inspector::CPUProfilerFrontendDispatcher *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1C00000002;
  *(_QWORD *)(v6 + 8) = "CPUProfiler.trackingComplete";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x900000002;
  *(_QWORD *)(v27 + 8) = "timestamp";
  *(_DWORD *)(v27 + 16) = 4;
  v128 = (WTF *)v27;
  v28 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x200000001;
  v28[1] = a2;
  v129 = (WTF *)v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v128);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v129;
  v129 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v128;
  v128 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::CSSFrontendDispatcher::mediaQueryResultChanged(Inspector::CSSFrontendDispatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  WTF::StringImpl *v66[2];
  char v67;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = 0x500000001;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x600000002;
  *(_QWORD *)(v3 + 8) = "method";
  *(_DWORD *)(v3 + 16) = 4;
  v64 = (WTF::StringImpl *)v3;
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1B00000002;
  *(_QWORD *)(v4 + 8) = "CSS.mediaQueryResultChanged";
  *(_DWORD *)(v4 + 16) = 4;
  v5 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x400000001;
  *((_QWORD *)v5 + 1) = v4;
  *(_DWORD *)v4 += 2;
  v65 = v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v2 + 16), (WTF::AtomStringImpl *)&v64, (const WTF::StringImpl *)&v65, v6, v7, v8, v9, v10, (uint64_t)v66);
  if (v67)
  {
    v18 = (uint64_t *)(v2 + 24);
    v19 = *(unsigned int *)(v2 + 36);
    if ((_DWORD)v19 == *(_DWORD *)(v2 + 32))
    {
      v61 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v64);
      v19 = *(unsigned int *)(v2 + 36);
      v62 = *(_QWORD *)(v2 + 24);
      v63 = *v61;
      if (*v61)
        *v63 += 2;
      *(_QWORD *)(v62 + 8 * v19) = v63;
    }
    else
    {
      v20 = *v18;
      v21 = v64;
      if (v64)
        *(_DWORD *)v64 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *(_DWORD *)(v2 + 36) = v19 + 1;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
  v23 = v64;
  v64 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v2, v12, v13, v14, v15, v16, v17, v66);
  v32 = *(unsigned int *)(v24 + 20);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)(v24 + 8);
    v34 = 8 * v32;
    do
    {
      v35 = *v33++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 24))(v35, v66);
      v34 -= 8;
    }
    while (v34);
  }
  v36 = v66[0];
  v66[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (*(_DWORD *)v2 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v2, v25, v26, v27, v28, v29, v30, v31);
  else
    --*(_DWORD *)v2;
}

void Inspector::CSSFrontendDispatcher::styleSheetChanged(Inspector::CSSFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1500000002;
  *(_QWORD *)(v6 + 8) = "CSS.styleSheetChanged";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xC00000002;
  *(_QWORD *)(v27 + 8) = "styleSheetId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::CSSFrontendDispatcher::styleSheetAdded(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1300000002;
  *(_QWORD *)(v6 + 8) = "CSS.styleSheetAdded";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "header";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::CSSFrontendDispatcher::styleSheetRemoved(Inspector::CSSFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1500000002;
  *(_QWORD *)(v6 + 8) = "CSS.styleSheetRemoved";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xC00000002;
  *(_QWORD *)(v27 + 8) = "styleSheetId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::CSSFrontendDispatcher::nodeLayoutFlagsChanged(uint64_t *a1, int a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD **v149;
  uint64_t v150;
  _DWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163[2];
  char v164;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v161 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1A00000002;
  *(_QWORD *)(v8 + 8) = "CSS.nodeLayoutFlagsChanged";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v162 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v10, v11, v12, v13, v14, (uint64_t)v163);
  if (v164)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v149 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v161);
      v23 = *(unsigned int *)(v6 + 36);
      v150 = *(_QWORD *)(v6 + 24);
      v151 = *v149;
      if (*v149)
        *v151 += 2;
      *(_QWORD *)(v150 + 8 * v23) = v151;
    }
    else
    {
      v24 = *v22;
      v25 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v162;
  v162 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v161;
  v161 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x600000002;
  *(_QWORD *)(v29 + 8) = "nodeId";
  *(_DWORD *)(v29 + 16) = 4;
  v161 = (WTF *)v29;
  v30 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v30 = 0x300000001;
  v30[1] = (double)a2;
  v162 = (WTF *)v30;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)&v161, (const WTF::StringImpl *)&v162, v31, v32, v33, v34, v35, (uint64_t)v163);
  if (v164)
  {
    v43 = (uint64_t *)(v28 + 24);
    v44 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v44 == *(_DWORD *)(v28 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v161);
      v44 = *(unsigned int *)(v28 + 36);
      v153 = *(_QWORD *)(v28 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v44) = v154;
    }
    else
    {
      v45 = *v43;
      v46 = v161;
      if (v161)
        *(_DWORD *)v161 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *(_DWORD *)(v28 + 36) = v44 + 1;
  }
  v47 = v162;
  v162 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v36, v37, v38, v39, v40, v41, v42);
    else
      --*(_DWORD *)v47;
  }
  v48 = v161;
  v161 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  if (*a3)
  {
    v49 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v49 = 0xB00000002;
    *(_QWORD *)(v49 + 8) = "layoutFlags";
    *(_DWORD *)(v49 + 16) = 4;
    v50 = *a3;
    *a3 = 0;
    v161 = v50;
    v162 = (WTF *)v49;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v28 + 16), &v162, (const WTF::StringImpl *)&v161, v51, v52, v53, v54, v55, (uint64_t)v163);
    if (v164)
    {
      v63 = (uint64_t *)(v28 + 24);
      v64 = *(unsigned int *)(v28 + 36);
      if ((_DWORD)v64 == *(_DWORD *)(v28 + 32))
      {
        v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v63, v64 + 1, (unint64_t)&v162);
        v64 = *(unsigned int *)(v28 + 36);
        v159 = *(_QWORD *)(v28 + 24);
        v160 = *v158;
        if (*v158)
          *v160 += 2;
        *(_QWORD *)(v159 + 8 * v64) = v160;
      }
      else
      {
        v65 = *v63;
        v66 = v162;
        if (v162)
          *(_DWORD *)v162 += 2;
        *(_QWORD *)(v65 + 8 * v64) = v66;
      }
      *(_DWORD *)(v28 + 36) = v64 + 1;
    }
    v67 = v161;
    v161 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 1)
        WTF::JSONImpl::Value::operator delete(v67, v56, v57, v58, v59, v60, v61, v62);
      else
        --*(_DWORD *)v67;
    }
    v68 = v162;
    v162 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v56, v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
  }
  v69 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v69 = 0x600000002;
  *(_QWORD *)(v69 + 8) = "params";
  *(_DWORD *)(v69 + 16) = 4;
  v161 = (WTF *)v28;
  v162 = (WTF *)v69;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v162, (const WTF::StringImpl *)&v161, v70, v71, v72, v73, v74, (uint64_t)v163);
  if (v164)
  {
    v82 = (uint64_t *)(v6 + 24);
    v83 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v83 == *(_DWORD *)(v6 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v82, v83 + 1, (unint64_t)&v162);
      v83 = *(unsigned int *)(v6 + 36);
      v156 = *(_QWORD *)(v6 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v83) = v157;
    }
    else
    {
      v84 = *v82;
      v85 = v162;
      if (v162)
        *(_DWORD *)v162 += 2;
      *(_QWORD *)(v84 + 8 * v83) = v85;
    }
    *(_DWORD *)(v6 + 36) = v83 + 1;
  }
  v86 = v161;
  v161 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 1)
      WTF::JSONImpl::Value::operator delete(v86, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v86;
  }
  v87 = v162;
  v162 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v76, v77, v78, v79, v80, v81, v163);
  v96 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v96)
  {
    v97 = *(uint64_t **)(v88 + 8);
    v98 = 8 * v96;
    do
    {
      v99 = *v97++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 24))(v99, v163);
      v98 -= 8;
    }
    while (v98);
  }
  v100 = v163[0];
  v163[0] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v89, v90, v91, v92, v93, v94, v95);
  else
    --*(_DWORD *)v6;
}

void Inspector::CanvasFrontendDispatcher::canvasAdded(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1200000002;
  *(_QWORD *)(v6 + 8) = "Canvas.canvasAdded";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x600000002;
  *(_QWORD *)(v27 + 8) = "canvas";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

void Inspector::CanvasFrontendDispatcher::canvasRemoved(Inspector::CanvasFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "Canvas.canvasRemoved";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x800000002;
  *(_QWORD *)(v27 + 8) = "canvasId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::CanvasFrontendDispatcher::canvasSizeChanged(Inspector::CanvasFrontendDispatcher *this, const WTF::String *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD **v181;
  uint64_t v182;
  _DWORD *v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  WTF *v196;
  WTF *v197;
  WTF::StringImpl *v198[2];
  char v199;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v196 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1800000002;
  *(_QWORD *)(v10 + 8) = "Canvas.canvasSizeChanged";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v197 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v12, v13, v14, v15, v16, (uint64_t)v198);
  if (v199)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v181 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v196);
      v25 = *(unsigned int *)(v8 + 36);
      v182 = *(_QWORD *)(v8 + 24);
      v183 = *v181;
      if (*v181)
        *v183 += 2;
      *(_QWORD *)(v182 + 8 * v25) = v183;
    }
    else
    {
      v26 = *v24;
      v27 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v197;
  v197 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v196;
  v196 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x800000002;
  *(_QWORD *)(v32 + 8) = "canvasId";
  *(_DWORD *)(v32 + 16) = 4;
  v196 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *(_DWORD **)a2;
  *((_QWORD *)v33 + 1) = *(_QWORD *)a2;
  if (v39)
    *v39 += 2;
  v197 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v34, v35, v36, v37, v38, (uint64_t)v198);
  if (v199)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v184 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v196);
      v48 = *(unsigned int *)(v30 + 36);
      v185 = *(_QWORD *)(v30 + 24);
      v186 = *v184;
      if (*v184)
        *v186 += 2;
      *(_QWORD *)(v185 + 8 * v48) = v186;
    }
    else
    {
      v49 = *v47;
      v50 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v197;
  v197 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v196;
  v196 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x500000002;
  *(_QWORD *)(v53 + 8) = "width";
  *(_DWORD *)(v53 + 16) = 4;
  v196 = (WTF *)v53;
  v54 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v54 = 0x200000001;
  v54[1] = a3;
  v197 = (WTF *)v54;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v55, v56, v57, v58, v59, (uint64_t)v198);
  if (v199)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v187 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v196);
      v68 = *(unsigned int *)(v30 + 36);
      v188 = *(_QWORD *)(v30 + 24);
      v189 = *v187;
      if (*v187)
        *v189 += 2;
      *(_QWORD *)(v188 + 8 * v68) = v189;
    }
    else
    {
      v69 = *v67;
      v70 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v197;
  v197 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v196;
  v196 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0x600000002;
  *(_QWORD *)(v73 + 8) = "height";
  *(_DWORD *)(v73 + 16) = 4;
  v196 = (WTF *)v73;
  v74 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v74 = 0x200000001;
  v74[1] = a4;
  v197 = (WTF *)v74;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v75, v76, v77, v78, v79, (uint64_t)v198);
  if (v199)
  {
    v87 = (uint64_t *)(v30 + 24);
    v88 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v88 == *(_DWORD *)(v30 + 32))
    {
      v190 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v196);
      v88 = *(unsigned int *)(v30 + 36);
      v191 = *(_QWORD *)(v30 + 24);
      v192 = *v190;
      if (*v190)
        *v192 += 2;
      *(_QWORD *)(v191 + 8 * v88) = v192;
    }
    else
    {
      v89 = *v87;
      v90 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v89 + 8 * v88) = v90;
    }
    *(_DWORD *)(v30 + 36) = v88 + 1;
  }
  v91 = v197;
  v197 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
    else
      --*(_DWORD *)v91;
  }
  v92 = v196;
  v196 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x600000002;
  *(_QWORD *)(v93 + 8) = "params";
  *(_DWORD *)(v93 + 16) = 4;
  v196 = (WTF *)v30;
  v197 = (WTF *)v93;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v94, v95, v96, v97, v98, (uint64_t)v198);
  if (v199)
  {
    v106 = (uint64_t *)(v8 + 24);
    v107 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v107 == *(_DWORD *)(v8 + 32))
    {
      v193 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v197);
      v107 = *(unsigned int *)(v8 + 36);
      v194 = *(_QWORD *)(v8 + 24);
      v195 = *v193;
      if (*v193)
        *v195 += 2;
      *(_QWORD *)(v194 + 8 * v107) = v195;
    }
    else
    {
      v108 = *v106;
      v109 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v108 + 8 * v107) = v109;
    }
    *(_DWORD *)(v8 + 36) = v107 + 1;
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete(v110, v99, v100, v101, v102, v103, v104, v105);
    else
      --*(_DWORD *)v110;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v100, v101, v102, v103, v104, v105, v198);
  v120 = *(unsigned int *)(v112 + 20);
  if ((_DWORD)v120)
  {
    v121 = *(uint64_t **)(v112 + 8);
    v122 = 8 * v120;
    do
    {
      v123 = *v121++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v123 + 24))(v123, v198);
      v122 -= 8;
    }
    while (v122);
  }
  v124 = v198[0];
  v198[0] = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v113, v114, v115, v116, v117, v118, v119);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v113, v114, v115, v116, v117, v118, v119);
  else
    --*(_DWORD *)v8;
}

void Inspector::CanvasFrontendDispatcher::canvasMemoryChanged(Inspector::CanvasFrontendDispatcher *this, const WTF::String *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1A00000002;
  *(_QWORD *)(v8 + 8) = "Canvas.canvasMemoryChanged";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x800000002;
  *(_QWORD *)(v30 + 8) = "canvasId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0xA00000002;
  *(_QWORD *)(v51 + 8) = "memoryCost";
  *(_DWORD *)(v51 + 16) = 4;
  v163 = (WTF *)v51;
  v52 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x200000001;
  v52[1] = a3;
  v164 = (WTF *)v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v53, v54, v55, v56, v57, (uint64_t)v165);
  if (v166)
  {
    v65 = (uint64_t *)(v28 + 24);
    v66 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v163);
      v66 = *(unsigned int *)(v28 + 36);
      v158 = *(_QWORD *)(v28 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v66) = v159;
    }
    else
    {
      v67 = *v65;
      v68 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v67 + 8 * v66) = v68;
    }
    *(_DWORD *)(v28 + 36) = v66 + 1;
  }
  v69 = v164;
  v164 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 1)
      WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
    else
      --*(_DWORD *)v69;
  }
  v70 = v163;
  v163 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v161 = *(_QWORD *)(v6 + 24);
      v162 = *v160;
      if (*v160)
        *v162 += 2;
      *(_QWORD *)(v161 + 8 * v85) = v162;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::CanvasFrontendDispatcher::extensionEnabled(Inspector::CanvasFrontendDispatcher *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  _DWORD **v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD **v158;
  uint64_t v159;
  _DWORD *v160;
  _DWORD **v161;
  uint64_t v162;
  _DWORD *v163;
  WTF *v164;
  WTF *v165;
  WTF::StringImpl *v166[2];
  char v167;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v164 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1700000002;
  *(_QWORD *)(v8 + 8) = "Canvas.extensionEnabled";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v165 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v10, v11, v12, v13, v14, (uint64_t)v166);
  if (v167)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v152 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v164);
      v23 = *(unsigned int *)(v6 + 36);
      v153 = *(_QWORD *)(v6 + 24);
      v154 = *v152;
      if (*v152)
        *v154 += 2;
      *(_QWORD *)(v153 + 8 * v23) = v154;
    }
    else
    {
      v24 = *v22;
      v25 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v165;
  v165 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v164;
  v164 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x800000002;
  *(_QWORD *)(v30 + 8) = "canvasId";
  *(_DWORD *)(v30 + 16) = 4;
  v164 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *(_DWORD **)a2;
  *((_QWORD *)v31 + 1) = *(_QWORD *)a2;
  if (v37)
    *v37 += 2;
  v165 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v32, v33, v34, v35, v36, (uint64_t)v166);
  if (v167)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v155 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v164);
      v46 = *(unsigned int *)(v28 + 36);
      v156 = *(_QWORD *)(v28 + 24);
      v157 = *v155;
      if (*v155)
        *v157 += 2;
      *(_QWORD *)(v156 + 8 * v46) = v157;
    }
    else
    {
      v47 = *v45;
      v48 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v165;
  v165 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v164;
  v164 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x900000002;
  *(_QWORD *)(v51 + 8) = "extension";
  *(_DWORD *)(v51 + 16) = 4;
  v164 = (WTF *)v51;
  v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = 0x400000001;
  v58 = *(_DWORD **)a3;
  *((_QWORD *)v52 + 1) = *(_QWORD *)a3;
  if (v58)
    *v58 += 2;
  v165 = v52;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v165, v53, v54, v55, v56, v57, (uint64_t)v166);
  if (v167)
  {
    v66 = (uint64_t *)(v28 + 24);
    v67 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v67 == *(_DWORD *)(v28 + 32))
    {
      v158 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)&v164);
      v67 = *(unsigned int *)(v28 + 36);
      v159 = *(_QWORD *)(v28 + 24);
      v160 = *v158;
      if (*v158)
        *v160 += 2;
      *(_QWORD *)(v159 + 8 * v67) = v160;
    }
    else
    {
      v68 = *v66;
      v69 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v68 + 8 * v67) = v69;
    }
    *(_DWORD *)(v28 + 36) = v67 + 1;
  }
  v70 = v165;
  v165 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 1)
      WTF::JSONImpl::Value::operator delete(v70, v59, v60, v61, v62, v63, v64, v65);
    else
      --*(_DWORD *)v70;
  }
  v71 = v164;
  v164 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v59, v60, v61, v62, v63, v64, v65);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v72 = 0x600000002;
  *(_QWORD *)(v72 + 8) = "params";
  *(_DWORD *)(v72 + 16) = 4;
  v164 = (WTF *)v28;
  v165 = (WTF *)v72;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v165, (const WTF::StringImpl *)&v164, v73, v74, v75, v76, v77, (uint64_t)v166);
  if (v167)
  {
    v85 = (uint64_t *)(v6 + 24);
    v86 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v86 == *(_DWORD *)(v6 + 32))
    {
      v161 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v165);
      v86 = *(unsigned int *)(v6 + 36);
      v162 = *(_QWORD *)(v6 + 24);
      v163 = *v161;
      if (*v161)
        *v163 += 2;
      *(_QWORD *)(v162 + 8 * v86) = v163;
    }
    else
    {
      v87 = *v85;
      v88 = v165;
      if (v165)
        *(_DWORD *)v165 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *(_DWORD *)(v6 + 36) = v86 + 1;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete(v89, v78, v79, v80, v81, v82, v83, v84);
    else
      --*(_DWORD *)v89;
  }
  v90 = v165;
  v165 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v79, v80, v81, v82, v83, v84, v166);
  v99 = *(unsigned int *)(v91 + 20);
  if ((_DWORD)v99)
  {
    v100 = *(uint64_t **)(v91 + 8);
    v101 = 8 * v99;
    do
    {
      v102 = *v100++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v102 + 24))(v102, v166);
      v101 -= 8;
    }
    while (v101);
  }
  v103 = v166[0];
  v166[0] = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v92, v93, v94, v95, v96, v97, v98);
      WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v92, v93, v94, v95, v96, v97, v98);
  else
    --*(_DWORD *)v6;
}

void Inspector::CanvasFrontendDispatcher::clientNodesChanged(Inspector::CanvasFrontendDispatcher *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD **v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD **v126;
  uint64_t v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  WTF::StringImpl *v131[2];
  char v132;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v129 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1900000002;
  *(_QWORD *)(v6 + 8) = "Canvas.clientNodesChanged";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v130 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v8, v9, v10, v11, v12, (uint64_t)v131);
  if (v132)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v120 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v129);
      v21 = *(unsigned int *)(v4 + 36);
      v121 = *(_QWORD *)(v4 + 24);
      v122 = *v120;
      if (*v120)
        *v122 += 2;
      *(_QWORD *)(v121 + 8 * v21) = v122;
    }
    else
    {
      v22 = *v20;
      v23 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v130;
  v130 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v129;
  v129 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0x800000002;
  *(_QWORD *)(v27 + 8) = "canvasId";
  *(_DWORD *)(v27 + 16) = 4;
  v129 = (WTF *)v27;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v28 = 0x400000001;
  v34 = *(_DWORD **)a2;
  *((_QWORD *)v28 + 1) = *(_QWORD *)a2;
  if (v34)
    *v34 += 2;
  v130 = v28;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v130, v29, v30, v31, v32, v33, (uint64_t)v131);
  if (v132)
  {
    v42 = (uint64_t *)(v26 + 24);
    v43 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v43 == *(_DWORD *)(v26 + 32))
    {
      v123 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v129);
      v43 = *(unsigned int *)(v26 + 36);
      v124 = *(_QWORD *)(v26 + 24);
      v125 = *v123;
      if (*v123)
        *v125 += 2;
      *(_QWORD *)(v124 + 8 * v43) = v125;
    }
    else
    {
      v44 = *v42;
      v45 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v44 + 8 * v43) = v45;
    }
    *(_DWORD *)(v26 + 36) = v43 + 1;
  }
  v46 = v130;
  v130 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::JSONImpl::Value::operator delete(v46, v35, v36, v37, v38, v39, v40, v41);
    else
      --*(_DWORD *)v46;
  }
  v47 = v129;
  v129 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v48 = 0x600000002;
  *(_QWORD *)(v48 + 8) = "params";
  *(_DWORD *)(v48 + 16) = 4;
  v129 = (WTF *)v26;
  v130 = (WTF *)v48;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v130, (const WTF::StringImpl *)&v129, v49, v50, v51, v52, v53, (uint64_t)v131);
  if (v132)
  {
    v61 = (uint64_t *)(v4 + 24);
    v62 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v62 == *(_DWORD *)(v4 + 32))
    {
      v126 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v130);
      v62 = *(unsigned int *)(v4 + 36);
      v127 = *(_QWORD *)(v4 + 24);
      v128 = *v126;
      if (*v126)
        *v128 += 2;
      *(_QWORD *)(v127 + 8 * v62) = v128;
    }
    else
    {
      v63 = *v61;
      v64 = v130;
      if (v130)
        *(_DWORD *)v130 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *(_DWORD *)(v4 + 36) = v62 + 1;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::JSONImpl::Value::operator delete(v65, v54, v55, v56, v57, v58, v59, v60);
    else
      --*(_DWORD *)v65;
  }
  v66 = v130;
  v130 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = *(_QWORD *)this;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v55, v56, v57, v58, v59, v60, v131);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75)
  {
    v76 = *(uint64_t **)(v67 + 8);
    v77 = 8 * v75;
    do
    {
      v78 = *v76++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v78 + 24))(v78, v131);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v131[0];
  v131[0] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v68, v69, v70, v71, v72, v73, v74);
  else
    --*(_DWORD *)v4;
}

void Inspector::CanvasFrontendDispatcher::recordingStarted(uint64_t *a1, _DWORD **a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  char **v52;
  char *v53;
  int v54;
  char *v55;
  int *v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  WTF *v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  uint64_t v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD **v164;
  uint64_t v165;
  _DWORD *v166;
  _DWORD **v167;
  uint64_t v168;
  _DWORD *v169;
  _DWORD **v170;
  uint64_t v171;
  _DWORD *v172;
  _DWORD **v173;
  uint64_t v174;
  _DWORD *v175;
  WTF *v176;
  WTF *v177;
  WTF::StringImpl *v178[2];
  char v179;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v176 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1700000002;
  *(_QWORD *)(v8 + 8) = "Canvas.recordingStarted";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v177 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v176, (const WTF::StringImpl *)&v177, v10, v11, v12, v13, v14, (uint64_t)v178);
  if (v179)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v164 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v176);
      v23 = *(unsigned int *)(v6 + 36);
      v165 = *(_QWORD *)(v6 + 24);
      v166 = *v164;
      if (*v164)
        *v166 += 2;
      *(_QWORD *)(v165 + 8 * v23) = v166;
    }
    else
    {
      v24 = *v22;
      v25 = v176;
      if (v176)
        *(_DWORD *)v176 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v177;
  v177 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v176;
  v176 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x800000002;
  *(_QWORD *)(v30 + 8) = "canvasId";
  *(_DWORD *)(v30 + 16) = 4;
  v176 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *a2;
  *((_QWORD *)v31 + 1) = *a2;
  if (v37)
    *v37 += 2;
  v177 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v176, (const WTF::StringImpl *)&v177, v32, v33, v34, v35, v36, (uint64_t)v178);
  if (v179)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v167 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v176);
      v46 = *(unsigned int *)(v28 + 36);
      v168 = *(_QWORD *)(v28 + 24);
      v169 = *v167;
      if (*v167)
        *v169 += 2;
      *(_QWORD *)(v168 + 8 * v46) = v169;
    }
    else
    {
      v47 = *v45;
      v48 = v176;
      if (v176)
        *(_DWORD *)v176 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v177;
  v177 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v176;
  v176 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x900000002;
  *(_QWORD *)(v51 + 8) = "initiator";
  *(_DWORD *)(v51 + 16) = 4;
  v176 = (WTF *)v51;
  v52 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * a3];
  v53 = v52[1];
  if (v53)
  {
    v54 = (_DWORD)v53 - 1;
    if (v53 == (char *)1)
    {
      v56 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v55 = *v52;
      v56 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v56 = 2;
      v56[1] = v54;
      *((_QWORD *)v56 + 1) = v55;
      v56[4] = 4;
    }
  }
  else
  {
    v56 = 0;
  }
  v57 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v57 = 0x400000001;
  *((_QWORD *)v57 + 1) = v56;
  if (v56)
    *v56 += 2;
  v177 = v57;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v176, (const WTF::StringImpl *)&v177, v58, v59, v60, v61, v62, (uint64_t)v178);
  if (v179)
  {
    v70 = (uint64_t *)(v28 + 24);
    v71 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v71 == *(_DWORD *)(v28 + 32))
    {
      v170 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v176);
      v71 = *(unsigned int *)(v28 + 36);
      v171 = *(_QWORD *)(v28 + 24);
      v172 = *v170;
      if (*v170)
        *v172 += 2;
      *(_QWORD *)(v171 + 8 * v71) = v172;
    }
    else
    {
      v72 = *v70;
      v73 = v176;
      if (v176)
        *(_DWORD *)v176 += 2;
      *(_QWORD *)(v72 + 8 * v71) = v73;
    }
    *(_DWORD *)(v28 + 36) = v71 + 1;
  }
  v74 = v177;
  v177 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v74, v63, v64, v65, v66, v67, v68, v69);
      if (!v56)
        goto LABEL_46;
      goto LABEL_44;
    }
    --*(_DWORD *)v74;
  }
  if (!v56)
    goto LABEL_46;
LABEL_44:
  if (*v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v63, v64, v65, v66, v67, v68, v69);
    WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
  }
  else
  {
    *v56 -= 2;
  }
LABEL_46:
  v75 = v176;
  v176 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v76 = 0x600000002;
  *(_QWORD *)(v76 + 8) = "params";
  *(_DWORD *)(v76 + 16) = 4;
  v176 = (WTF *)v28;
  v177 = (WTF *)v76;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v177, (const WTF::StringImpl *)&v176, v77, v78, v79, v80, v81, (uint64_t)v178);
  if (v179)
  {
    v89 = (uint64_t *)(v6 + 24);
    v90 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v90 == *(_DWORD *)(v6 + 32))
    {
      v173 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v177);
      v90 = *(unsigned int *)(v6 + 36);
      v174 = *(_QWORD *)(v6 + 24);
      v175 = *v173;
      if (*v173)
        *v175 += 2;
      *(_QWORD *)(v174 + 8 * v90) = v175;
    }
    else
    {
      v91 = *v89;
      v92 = v177;
      if (v177)
        *(_DWORD *)v177 += 2;
      *(_QWORD *)(v91 + 8 * v90) = v92;
    }
    *(_DWORD *)(v6 + 36) = v90 + 1;
  }
  v93 = v176;
  v176 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 1)
      WTF::JSONImpl::Value::operator delete(v93, v82, v83, v84, v85, v86, v87, v88);
    else
      --*(_DWORD *)v93;
  }
  v94 = v177;
  v177 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v83, v84, v85, v86, v87, v88, v178);
  v103 = *(unsigned int *)(v95 + 20);
  if ((_DWORD)v103)
  {
    v104 = *(uint64_t **)(v95 + 8);
    v105 = 8 * v103;
    do
    {
      v106 = *v104++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v106 + 24))(v106, v178);
      v105 -= 8;
    }
    while (v105);
  }
  v107 = v178[0];
  v178[0] = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v96, v97, v98, v99, v100, v101, v102);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v96, v97, v98, v99, v100, v101, v102);
  else
    --*(_DWORD *)v6;
}

void Inspector::CanvasFrontendDispatcher::recordingProgress(uint64_t *a1, _DWORD **a2, WTF **a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD **v181;
  uint64_t v182;
  _DWORD *v183;
  _DWORD **v184;
  uint64_t v185;
  _DWORD *v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  WTF *v196;
  WTF *v197;
  WTF::StringImpl *v198[2];
  char v199;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v9 = 0x600000002;
  *(_QWORD *)(v9 + 8) = "method";
  *(_DWORD *)(v9 + 16) = 4;
  v196 = (WTF *)v9;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1800000002;
  *(_QWORD *)(v10 + 8) = "Canvas.recordingProgress";
  *(_DWORD *)(v10 + 16) = 4;
  v11 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x400000001;
  *((_QWORD *)v11 + 1) = v10;
  *(_DWORD *)v10 += 2;
  v197 = v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v12, v13, v14, v15, v16, (uint64_t)v198);
  if (v199)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v181 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v196);
      v25 = *(unsigned int *)(v8 + 36);
      v182 = *(_QWORD *)(v8 + 24);
      v183 = *v181;
      if (*v181)
        *v183 += 2;
      *(_QWORD *)(v182 + 8 * v25) = v183;
    }
    else
    {
      v26 = *v24;
      v27 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v197;
  v197 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  v29 = v196;
  v196 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v30 = 0x500000001;
  *(_QWORD *)(v30 + 16) = 0;
  v31 = (uint64_t *)(v30 + 16);
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  v32 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v32 = 0x800000002;
  *(_QWORD *)(v32 + 8) = "canvasId";
  *(_DWORD *)(v32 + 16) = 4;
  v196 = (WTF *)v32;
  v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v33 = 0x400000001;
  v39 = *a2;
  *((_QWORD *)v33 + 1) = *a2;
  if (v39)
    *v39 += 2;
  v197 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v34, v35, v36, v37, v38, (uint64_t)v198);
  if (v199)
  {
    v47 = (uint64_t *)(v30 + 24);
    v48 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(v30 + 32))
    {
      v184 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v196);
      v48 = *(unsigned int *)(v30 + 36);
      v185 = *(_QWORD *)(v30 + 24);
      v186 = *v184;
      if (*v184)
        *v186 += 2;
      *(_QWORD *)(v185 + 8 * v48) = v186;
    }
    else
    {
      v49 = *v47;
      v50 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(v30 + 36) = v48 + 1;
  }
  v51 = v197;
  v197 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete(v51, v40, v41, v42, v43, v44, v45, v46);
    else
      --*(_DWORD *)v51;
  }
  v52 = v196;
  v196 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v53 = 0x600000002;
  *(_QWORD *)(v53 + 8) = "frames";
  *(_DWORD *)(v53 + 16) = 4;
  v54 = *a3;
  *a3 = 0;
  v196 = v54;
  v197 = (WTF *)v53;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(v31, &v197, (const WTF::StringImpl *)&v196, v55, v56, v57, v58, v59, (uint64_t)v198);
  if (v199)
  {
    v67 = (uint64_t *)(v30 + 24);
    v68 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v68 == *(_DWORD *)(v30 + 32))
    {
      v187 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v67, v68 + 1, (unint64_t)&v197);
      v68 = *(unsigned int *)(v30 + 36);
      v188 = *(_QWORD *)(v30 + 24);
      v189 = *v187;
      if (*v187)
        *v189 += 2;
      *(_QWORD *)(v188 + 8 * v68) = v189;
    }
    else
    {
      v69 = *v67;
      v70 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v69 + 8 * v68) = v70;
    }
    *(_DWORD *)(v30 + 36) = v68 + 1;
  }
  v71 = v196;
  v196 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
      WTF::JSONImpl::Value::operator delete(v71, v60, v61, v62, v63, v64, v65, v66);
    else
      --*(_DWORD *)v71;
  }
  v72 = v197;
  v197 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v60, v61, v62, v63, v64, v65, v66);
      WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v73 = 0xA00000002;
  *(_QWORD *)(v73 + 8) = "bufferUsed";
  *(_DWORD *)(v73 + 16) = 4;
  v196 = (WTF *)v73;
  v74 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v74 = 0x300000001;
  v74[1] = (double)a4;
  v197 = (WTF *)v74;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v31, (WTF::AtomStringImpl *)&v196, (const WTF::StringImpl *)&v197, v75, v76, v77, v78, v79, (uint64_t)v198);
  if (v199)
  {
    v87 = (uint64_t *)(v30 + 24);
    v88 = *(unsigned int *)(v30 + 36);
    if ((_DWORD)v88 == *(_DWORD *)(v30 + 32))
    {
      v190 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v196);
      v88 = *(unsigned int *)(v30 + 36);
      v191 = *(_QWORD *)(v30 + 24);
      v192 = *v190;
      if (*v190)
        *v192 += 2;
      *(_QWORD *)(v191 + 8 * v88) = v192;
    }
    else
    {
      v89 = *v87;
      v90 = v196;
      if (v196)
        *(_DWORD *)v196 += 2;
      *(_QWORD *)(v89 + 8 * v88) = v90;
    }
    *(_DWORD *)(v30 + 36) = v88 + 1;
  }
  v91 = v197;
  v197 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 1)
      WTF::JSONImpl::Value::operator delete(v91, v80, v81, v82, v83, v84, v85, v86);
    else
      --*(_DWORD *)v91;
  }
  v92 = v196;
  v196 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v80, v81, v82, v83, v84, v85, v86);
      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v93 = 0x600000002;
  *(_QWORD *)(v93 + 8) = "params";
  *(_DWORD *)(v93 + 16) = 4;
  v196 = (WTF *)v30;
  v197 = (WTF *)v93;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v197, (const WTF::StringImpl *)&v196, v94, v95, v96, v97, v98, (uint64_t)v198);
  if (v199)
  {
    v106 = (uint64_t *)(v8 + 24);
    v107 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v107 == *(_DWORD *)(v8 + 32))
    {
      v193 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v197);
      v107 = *(unsigned int *)(v8 + 36);
      v194 = *(_QWORD *)(v8 + 24);
      v195 = *v193;
      if (*v193)
        *v195 += 2;
      *(_QWORD *)(v194 + 8 * v107) = v195;
    }
    else
    {
      v108 = *v106;
      v109 = v197;
      if (v197)
        *(_DWORD *)v197 += 2;
      *(_QWORD *)(v108 + 8 * v107) = v109;
    }
    *(_DWORD *)(v8 + 36) = v107 + 1;
  }
  v110 = v196;
  v196 = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
      WTF::JSONImpl::Value::operator delete(v110, v99, v100, v101, v102, v103, v104, v105);
    else
      --*(_DWORD *)v110;
  }
  v111 = v197;
  v197 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, v99, v100, v101, v102, v103, v104, v105);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  v112 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v8, v100, v101, v102, v103, v104, v105, v198);
  v120 = *(unsigned int *)(v112 + 20);
  if ((_DWORD)v120)
  {
    v121 = *(uint64_t **)(v112 + 8);
    v122 = 8 * v120;
    do
    {
      v123 = *v121++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v123 + 24))(v123, v198);
      v122 -= 8;
    }
    while (v122);
  }
  v124 = v198[0];
  v198[0] = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v113, v114, v115, v116, v117, v118, v119);
      WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  if (*(_DWORD *)v8 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v8, v113, v114, v115, v116, v117, v118, v119);
  else
    --*(_DWORD *)v8;
}

void Inspector::CanvasFrontendDispatcher::recordingFinished(uint64_t *a1, _DWORD **a2, WTF **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD **v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD **v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD **v157;
  uint64_t v158;
  _DWORD *v159;
  _DWORD **v160;
  uint64_t v161;
  _DWORD *v162;
  WTF *v163;
  WTF *v164;
  WTF::StringImpl *v165[2];
  char v166;

  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v6 = 0x500000001;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x600000002;
  *(_QWORD *)(v7 + 8) = "method";
  *(_DWORD *)(v7 + 16) = 4;
  v163 = (WTF *)v7;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1800000002;
  *(_QWORD *)(v8 + 8) = "Canvas.recordingFinished";
  *(_DWORD *)(v8 + 16) = 4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = 0x400000001;
  *((_QWORD *)v9 + 1) = v8;
  *(_DWORD *)v8 += 2;
  v164 = v9;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v10, v11, v12, v13, v14, (uint64_t)v165);
  if (v166)
  {
    v22 = (uint64_t *)(v6 + 24);
    v23 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v6 + 32))
    {
      v151 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v163);
      v23 = *(unsigned int *)(v6 + 36);
      v152 = *(_QWORD *)(v6 + 24);
      v153 = *v151;
      if (*v151)
        *v153 += 2;
      *(_QWORD *)(v152 + 8 * v23) = v153;
    }
    else
    {
      v24 = *v22;
      v25 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v6 + 36) = v23 + 1;
  }
  v26 = v164;
  v164 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v26;
  }
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
  v27 = v163;
  v163 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x800000002;
  *(_QWORD *)(v30 + 8) = "canvasId";
  *(_DWORD *)(v30 + 16) = 4;
  v163 = (WTF *)v30;
  v31 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x400000001;
  v37 = *a2;
  *((_QWORD *)v31 + 1) = *a2;
  if (v37)
    *v37 += 2;
  v164 = v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v29, (WTF::AtomStringImpl *)&v163, (const WTF::StringImpl *)&v164, v32, v33, v34, v35, v36, (uint64_t)v165);
  if (v166)
  {
    v45 = (uint64_t *)(v28 + 24);
    v46 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v46 == *(_DWORD *)(v28 + 32))
    {
      v154 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, v46 + 1, (unint64_t)&v163);
      v46 = *(unsigned int *)(v28 + 36);
      v155 = *(_QWORD *)(v28 + 24);
      v156 = *v154;
      if (*v154)
        *v156 += 2;
      *(_QWORD *)(v155 + 8 * v46) = v156;
    }
    else
    {
      v47 = *v45;
      v48 = v163;
      if (v163)
        *(_DWORD *)v163 += 2;
      *(_QWORD *)(v47 + 8 * v46) = v48;
    }
    *(_DWORD *)(v28 + 36) = v46 + 1;
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
      WTF::JSONImpl::Value::operator delete(v49, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v49;
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  if (*a3)
  {
    v51 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v51 = 0x900000002;
    *(_QWORD *)(v51 + 8) = "recording";
    *(_DWORD *)(v51 + 16) = 4;
    v52 = *a3;
    *a3 = 0;
    v163 = v52;
    v164 = (WTF *)v51;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v29, (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v53, v54, v55, v56, v57, (uint64_t)v165);
    if (v166)
    {
      v65 = (uint64_t *)(v28 + 24);
      v66 = *(unsigned int *)(v28 + 36);
      if ((_DWORD)v66 == *(_DWORD *)(v28 + 32))
      {
        v160 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, v66 + 1, (unint64_t)&v164);
        v66 = *(unsigned int *)(v28 + 36);
        v161 = *(_QWORD *)(v28 + 24);
        v162 = *v160;
        if (*v160)
          *v162 += 2;
        *(_QWORD *)(v161 + 8 * v66) = v162;
      }
      else
      {
        v67 = *v65;
        v68 = v164;
        if (v164)
          *(_DWORD *)v164 += 2;
        *(_QWORD *)(v67 + 8 * v66) = v68;
      }
      *(_DWORD *)(v28 + 36) = v66 + 1;
    }
    v69 = v163;
    v163 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 1)
        WTF::JSONImpl::Value::operator delete(v69, v58, v59, v60, v61, v62, v63, v64);
      else
        --*(_DWORD *)v69;
    }
    v70 = v164;
    v164 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
        WTF::StringImpl::~StringImpl(v70, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
      }
      else
      {
        *(_DWORD *)v70 -= 2;
      }
    }
  }
  v71 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v71 = 0x600000002;
  *(_QWORD *)(v71 + 8) = "params";
  *(_DWORD *)(v71 + 16) = 4;
  v163 = (WTF *)v28;
  v164 = (WTF *)v71;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v6 + 16), (WTF::AtomStringImpl *)&v164, (const WTF::StringImpl *)&v163, v72, v73, v74, v75, v76, (uint64_t)v165);
  if (v166)
  {
    v84 = (uint64_t *)(v6 + 24);
    v85 = *(unsigned int *)(v6 + 36);
    if ((_DWORD)v85 == *(_DWORD *)(v6 + 32))
    {
      v157 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v164);
      v85 = *(unsigned int *)(v6 + 36);
      v158 = *(_QWORD *)(v6 + 24);
      v159 = *v157;
      if (*v157)
        *v159 += 2;
      *(_QWORD *)(v158 + 8 * v85) = v159;
    }
    else
    {
      v86 = *v84;
      v87 = v164;
      if (v164)
        *(_DWORD *)v164 += 2;
      *(_QWORD *)(v86 + 8 * v85) = v87;
    }
    *(_DWORD *)(v6 + 36) = v85 + 1;
  }
  v88 = v163;
  v163 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 1)
      WTF::JSONImpl::Value::operator delete(v88, v77, v78, v79, v80, v81, v82, v83);
    else
      --*(_DWORD *)v88;
  }
  v89 = v164;
  v164 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v6, v78, v79, v80, v81, v82, v83, v165);
  v98 = *(unsigned int *)(v90 + 20);
  if ((_DWORD)v98)
  {
    v99 = *(uint64_t **)(v90 + 8);
    v100 = 8 * v98;
    do
    {
      v101 = *v99++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 24))(v101, v165);
      v100 -= 8;
    }
    while (v100);
  }
  v102 = v165[0];
  v165[0] = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  if (*(_DWORD *)v6 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v6, v91, v92, v93, v94, v95, v96, v97);
  else
    --*(_DWORD *)v6;
}

void Inspector::CanvasFrontendDispatcher::programCreated(uint64_t *a1, WTF **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  _DWORD **v125;
  uint64_t v126;
  _DWORD *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130[2];
  char v131;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x600000002;
  *(_QWORD *)(v5 + 8) = "method";
  *(_DWORD *)(v5 + 16) = 4;
  v128 = (WTF *)v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1500000002;
  *(_QWORD *)(v6 + 8) = "Canvas.programCreated";
  *(_DWORD *)(v6 + 16) = 4;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  *((_QWORD *)v7 + 1) = v6;
  *(_DWORD *)v6 += 2;
  v129 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v128, (const WTF::StringImpl *)&v129, v8, v9, v10, v11, v12, (uint64_t)v130);
  if (v131)
  {
    v20 = (uint64_t *)(v4 + 24);
    v21 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v4 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v128);
      v21 = *(unsigned int *)(v4 + 36);
      v120 = *(_QWORD *)(v4 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v21) = v121;
    }
    else
    {
      v22 = *v20;
      v23 = v128;
      if (v128)
        *(_DWORD *)v128 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v4 + 36) = v21 + 1;
  }
  v24 = v129;
  v129 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete(v24, v13, v14, v15, v16, v17, v18, v19);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  v25 = v128;
  v128 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v26 = 0x500000001;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  v27 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v27 = 0xD00000002;
  *(_QWORD *)(v27 + 8) = "shaderProgram";
  *(_DWORD *)(v27 + 16) = 4;
  v28 = *a2;
  *a2 = 0;
  v128 = v28;
  v129 = (WTF *)v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v26 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v29, v30, v31, v32, v33, (uint64_t)v130);
  if (v131)
  {
    v41 = (uint64_t *)(v26 + 24);
    v42 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v42 == *(_DWORD *)(v26 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v129);
      v42 = *(unsigned int *)(v26 + 36);
      v123 = *(_QWORD *)(v26 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v42) = v124;
    }
    else
    {
      v43 = *v41;
      v44 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v43 + 8 * v42) = v44;
    }
    *(_DWORD *)(v26 + 36) = v42 + 1;
  }
  v45 = v128;
  v128 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v34, v35, v36, v37, v38, v39, v40);
    else
      --*(_DWORD *)v45;
  }
  v46 = v129;
  v129 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x600000002;
  *(_QWORD *)(v47 + 8) = "params";
  *(_DWORD *)(v47 + 16) = 4;
  v128 = (WTF *)v26;
  v129 = (WTF *)v47;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v129, (const WTF::StringImpl *)&v128, v48, v49, v50, v51, v52, (uint64_t)v130);
  if (v131)
  {
    v60 = (uint64_t *)(v4 + 24);
    v61 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v61 == *(_DWORD *)(v4 + 32))
    {
      v125 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v129);
      v61 = *(unsigned int *)(v4 + 36);
      v126 = *(_QWORD *)(v4 + 24);
      v127 = *v125;
      if (*v125)
        *v127 += 2;
      *(_QWORD *)(v126 + 8 * v61) = v127;
    }
    else
    {
      v62 = *v60;
      v63 = v129;
      if (v129)
        *(_DWORD *)v129 += 2;
      *(_QWORD *)(v62 + 8 * v61) = v63;
    }
    *(_DWORD *)(v4 + 36) = v61 + 1;
  }
  v64 = v128;
  v128 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
      WTF::JSONImpl::Value::operator delete(v64, v53, v54, v55, v56, v57, v58, v59);
    else
      --*(_DWORD *)v64;
  }
  v65 = v129;
  v129 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = *a1;
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v4, v54, v55, v56, v57, v58, v59, v130);
  v74 = *(unsigned int *)(v66 + 20);
  if ((_DWORD)v74)
  {
    v75 = *(uint64_t **)(v66 + 8);
    v76 = 8 * v74;
    do
    {
      v77 = *v75++;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 24))(v77, v130);
      v76 -= 8;
    }
    while (v76);
  }
  v78 = v130[0];
  v130[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  if (*(_DWORD *)v4 == 1)
    WTF::JSONImpl::Value::operator delete((WTF *)v4, v67, v68, v69, v70, v71, v72, v73);
  else
    --*(_DWORD *)v4;
}

